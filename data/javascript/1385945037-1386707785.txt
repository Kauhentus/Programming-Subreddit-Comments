I do this too but there are only so many jobs out there. I happen to hate git but it is used by so many shops that jumped on the bandwagon without looking at why. The last 2 places I worked at went to git but their only real reason was "everyone else is". Sometimes you have to take some of the bad with the good, and learn some other stuff even if it seems backwards (and is backwards). Technology stacks are full of crap technology that we have to use because re-writing the wheel isn't the most useful thing all the time. In many cases sticking with the current crap isn't a great idea either, and I don't care if everyone else is using it if it's backwards. 
You couldn't be more incorrect. I do MVVM all day, every day these days. It's not a bad pattern but mixing javascript inside DOM properites ( knockout) is something I learned not to do a long time ago. It's messy and ends up being just as convoluted as any other solution, while adding the gimmick of putting javascript in your DOM properties. No thanks. I admit I don't have as much knowledge of Angular, but I will learn it when I need to pay my bills with it. 
You didn't misunderstand, I wasn't clear. I mainly use knockout these days but the sentiment i was trying to get across applies to most of the latest frameworks.
I find it a lot better than the alternative where Ember has practically zero focus on testing.
&gt; adding the gimmick of putting javascript in your DOM properties. Knockout is a decent library. Angular is a full-fledged framework. Data binding is just one of the things that it does. You fixate on the idea that people can possibly do the DOM properties badly, while ignoring all the other things (e.g. injection of services into controllers) that angular does really well and aren't within knockout's scope at all. 
Functional programming in JS is something I've been working on getting my head around--but it's difficult for me to get much out of just the slides. Also: OpenLaszlo--wow, that takes me back.
This might be interesting to you as well. http://facebook.github.io/react/ Saw a talk on this the other week or so. It was very efficient in handling the DOM.
Why not Blink? or Gecko? 
Probably a .NET developer. [Hiyoooo](http://hiyoooo.com/)
Those sound good too!
Personally, I'm one of those programmers who really wants to know everything that's going on and dig under the covers, so I love Backbone. I like that it's so simple that it's very easy can just look at the source code and figure out how it does things for when I need customized functionality. I totally feel you when it comes to logic in html and being able to tweak the execution details. I think Angular is a very powerful tool, and good for some people, but it's just not for me, and not my programming style. With backbone I need to implement a lot more stuff on my own (I don't like lots of the extensions. I haven't found one that maintains the simplicity I love about Backbone.) But because I'm so close to the "metal" I can really keep the features I have at the cutting edge of how I want the site executed. Backbone is very flexible, and has been able to accommodate all my needs with my custom made extensions.
It really was ridiculously simple. node-webkit provides a Window API which has a `enterFullscreen()` method that doesn't require user interaction and doesn't display notifications like the HTML5 fullscreen API does. All you need to do is : var gui = require('nw.gui'); var window = gui.Window.get(); window.enterFullscreen(); more info on the Window API here: https://github.com/rogerwang/node-webkit/wiki/Window
For me my problem with magic isn't that I'm afraid of it breaking, it's that I typically come across a scenario where I need to be able to customize its functionality, but to do that I need to work around the framework instead of just extending and overriding it. It ends up being more work for me to do it myself in Backbone, but I'm implementing functionality that just isn't easily available to me otherwise since it doesn't exist the way I want it to. I find magical frameworks are great when you don't need cutting edge and fast iterating customizations, and you're fine with the default, but when you do, they get in the way.
Frameworks like Angular and Backbone are for organizing your application data, rendering, and events, whereas jQuery is more of a utility toolbelt for manipulating the DOM.
No, of course not. We looked at Ember and Derby. We had previously used Backbone. However, Angular is interesting in that Angular directives provide a component model for direct DOM manipulation code that is lacking in most frameworks except JQuery. 
Honest question: Has anyone built a large scale application with Angular? The use of dirty checking and two way binding appear to me like they would be a huge performance barrier when you have list views where you need to have large amounts of items ( an infinite scroll news feed for example ).
&gt; The first is that Angular, as a framework, isn't designed in such a way as to encourage the creation of testable code There's a major error here that I believe has been glossed over. Angular is not really a framework. It's more like a set of tools that you can use to build your own framework. Angular is very much not opinionated and I think that makes it attractive to people used to programming in a lot of different paradigms, because let's face it...we all come from different practices but we're all web developers and we all (probably) need to use JS at some point. Your distaste for Angular because it does not offer you the same conveniences that you've come to expect from a framework is somewhat legitimate, but misguided. While Angular does not offer a strategy by which to put these tools together, it does give you tools that you will need to build your own app's JS framework.
The reason why the rule "don't mix javascript with dom" came to exist is because your callbacks needed to exist on the global scope and weren't isolated to a particular scope. Ok, so we move everything to a backbone model, which is really moving around the issue but still addresses it very well. Angular doesn't get around the problem but solves the problem and this is why it's attractive. Testing is solved via dependency injection. Hell, even Web Components is a small subset of a standardization of Angular (directives =&gt; templates, data binding, etc.) are taking after an Angular style approach.
What about axis etc that are so easy in d3. Also using divs is quite limited.
I used it and understand its merits, but i dont think the MV-whatever frameworks is the right model for making UIs. When moving from Angular to React our productivity increased a lot. 
I call angular a framework and knockout a library, based on this distinction: [If you call it, it's a library. If it calls your code, it's a framework](http://stackoverflow.com/a/148788/5599). I agree that angular is a very flexible toolbox, but it's also a thing that wraps around your code and structures it. 
I'm actually really curious about this point now, hoping I can learn something: Which JavaScript framework(s), or libraries, or approaches to building apps, do you consider most testable and and why?
[We've finally run out of new JS-related names.](http://www.echojs.com)
Looks cool, the demo worked. I use a jquery plugin [lazyload](http://www.appelsiini.net/projects/lazyload) 
http://net.tutsplus.com/tutorials/javascript-ajax/from-jquery-to-javascript-a-reference/ check this article i found it very usefull when didn't wanted too use jQuery
The Pixelator.js plugin worked for me without web-gl. That's a differentiator.
While it's rather concise, I find this mostly a reference how not to do it. Most of the examples rely on certain HTML nodes to be present, which will lead to errors if they are missing. Also, don't use querySelector(All) if there is a simple selector, the latter will be faster in any case. Apart from that, the main idea is quite sound.
&gt; 5kb â€¦ 2,331kb minified and gzipped I think your "minifier" may have a bug.
Congratulations! But you should have done this first before touching jQuery.
Finally? Frameworks like batman and knockout have been around for some time.
I've also tried to be bold and use node.classList.add. To fix it quickly I had to use a shim. 1kb more. Horray! With enough fixes like that my patches will exceed jQuery in size :)
Thanks. Honestly, the "then" construct, which is quite popular and implemented by async, when, q, and more, is cool but it forces you to follow the promise pattern, which is cool, but not (imho) ideal in every situation where, instead, I want parallelism. I don't think that my thing is quite nice to see ([functions], [array of arrays of parameters]...) but at least is readable, optimal, simple. I'm ending up using it more and more. What I used to do before, instead, was every time: * I want to execute this 3 things in parallel * Let's wrap every function in a promise * In case of errors, let's handle it in the "reject" way - that sometimes doesn't naturally fit my code * Each promise needs to return something and maybe I want to return different things in different ways, so let's change that behaviour * In what kind of order I'm receiving the callbacks? Buh, let's do an hack to handle it. Result: sometimes it makes sense. Your codes results cleaner and better. My (personal) experience: 90% it doesn't. So much code to do that, it is not clean, I need to write 10 tests more to be sure that everything is handled as I expect, so I'm sacrificing simplicity. Just my 2 cents. I repeat...that's not a substitute, just an option to async (or whatever you like), to handle just some situations :)
As has been pointed out by myself and others in several comments and replies below this one, testability is ultimately a design decision. But frameworks can be designed in ways that encourage testable code, or in ways that encourage non-testable spaghetti code. In that regard, I feel that Angular imposes very little actual structure, which may be very friendly to undisciplined developers who "just want to get shit done", but serves to make a testing nightmare... or else (I suspect more commonly) people just forego testing altogether. Ember and Backbone both impose more tangible structure -- particularly Ember -- and in doing so, create much more testable units of code. As a team lead, and as the only real "champion" of unit testing frontend code in my organization, it's important to me that a framework encourages unit testing, and that it encourages design choices that make code testable. Sure, we grizzled senior developers can make smart design choices, but do we want to spend all day with a junior developer helping him rewrite code that he knows already works, just to make it testable? Or do we want to use a framework that encouraged him to write such testable code from the start? I hope that answers your questions. If not, I'm happy to expand.
It's in the very first tutorial on the Angular web site. I don't think it's fair to characterize /u/leptons as fixating on a thing when it's the very first thing Angular teaches developers to do with it.
Most of my work (and I would imagine many others) involves adding things to existing pages. As for background css, yes I mean like bootstrap or jquery mobile or even the css of the wordpress, dnn, joomla, etc. site I am making a plugin for so I can toss in some background content like a mock menu or sidebar without having to deal with css/js for the site as a whole. By pasting in the site, I meant taking the contents of the body tag from an existing page and pasting it there. If it was html instead of jade, I could do exactly that and then attach a couple css files and go to town on whatever I was mocking up in whatever area of the page I needed.
jQuery is just a tool. If you want to whip up your own selector language, or use a different library, that's fine. I will say that being able to do something like this: $("#foo .bar").click(function (event) { // â€¦ }); is a lot nicer than: var barEls = document.getElementById('foo').getElementsByClassName("bar"), bi, bl, bb; function barClick (event) { // â€¦ } for (bi=0, bl=barEls.length; bi &lt; bl; bi += 1) { barEls[bi].addEventListener(barClick); } I think being able to use jQuery as a just a black-box selector and event binding library is actually a really good idea. I would absolutely encourage using other libraries or rolling your own for other functionality, however.
I disagree. DOM manipulation and event binding are relatively complex and browser-specific and not well suited for learning JavaScript. I say this as someone who started learning JavaScript well before such frameworks were in place. I feel that if you use jQuery properly you are likely to develop good programming skills, probably better than if you spend a lot of time rolling your own DOM scripts.
It wasn't obvious to him. And it wasn't obvious to the point that Elijah Manor wrote a whole slide show about it. 
I've got some disagreements with [this slide](http://presentboldly.com/elijahmanor/jquery-free-javascript/4). jQuery is far more than a DOM normalizer. It makes working with the DOM bearable, even with newer native methods. And with jQuery's footprint being so small, what do you gain by not using it?
Ah! One of those 12-year old redditors I've been reading about.
[IM NOT 12!!!](http://i.imgur.com/FguGvqn.jpg)
You should put a demo in the home page
Except that you'll never really know how the DOM actually works because of differences in browser implementations. This is less true now, but there was a time when you had to code around 3+ different implementations just to get code to run when the browser page loaded. There's no earthly reason learning that is better than just using `$(document).ready()`. It's like learning how to drive a car. It's important to know that you hit the gas to go forward and hit the brake to stop. It's not important to know what materials the gas pedal is made out of or what specific parts it is attached to. If you want to become a mechanic then you do -- just like if you want to write JS frameworks rather than just script, you have to learn the details of how events and DOM work on different browsers. Most frameworks I have come across are fairly current and most are open source with an active developer base, many of whom have access to beta- or developer- releases of browsers. As a result, I'm always betting on jQuery being more up-to-date on changes in browsers than I am, because it's not my job to do that and a waste of my time, frankly. I'd rather spend my time writing brief, effective code that does whatever it is that I want to do. I'll add that being able to write `document.getElementById("foo")` does not make you know the DOM any better than if you use `$("#foo")`.
&gt;Except that you'll never really know how the DOM actually works because of differences in browser implementations. Most browser implementations are correct and those that are different are pretty close. Those that are wrong you'll find pretty quickly. But you'll never learn the DOM if you don't use it (jQuery). You need to read Elijah Manor's slides he linked to elsewhere in this thread.
Ah, well thankfully I have this time machine handy.
Honestly, I find that effectively "annotating" my DOM in order for it to exist as a template is much cleaner than mixing two languages (e.g. Handlebars and HTML) in order to describe how I want my data to be represented.
Exactly. Native javascript DOM manipulation is a straight chore. 
not sure if you know this, but you can just use $(function(){ }); The default functionality of a jquery object passed a function is to wait for the ready document.
Doesn't handle nested markup well at all (italics inside of bold and vice versa).
But there isn't even this magical secret to the DOM. It's just a hierarchy of nodes -- either element nodes or text nodes -- with a variety of selectors to access them. Nodes can have events bound to them, etc. Much better to learn about JavaScript's event model than worry about handwriting selectors.
Did you know: putting a Travis build badge on your repo and not actually building/testing anything is completely f'd up? I mean really it's running npm test on a mediocre image loading plugin.
Hey, I feel like I am your prime candidate for this plugin. I spent the better part of 5 hours yesterday trying to resolve some memory usage concerns surrounding appelsiini's lazyload. Indeed, it's entirely out of date. The other prominent alternative, unveil, wasn't quite doing it for me due to it's lack of customizability. It seems like Echo.JS supports even fewer options than unveil? Concepts such as setting a threshold, being able to set the container object and transition effects are important to me. I'm hard-pressed for reasons this would be a strong alternative to unveil. I would also love to see some jsperf's comparing performance between this and the other libraries. Currently still using appelsiini's, but unhappy with it and don't want to write YALLP. * Unveil: http://luis-almeida.github.io/unveil/ * Appelsiini: http://www.appelsiini.net/projects/lazyload
Yeah that's what I use at work. Combining it with a sortable/filterable table is a PITA and slow.
That was my biggest issue with ST, no merge tool (aside from reading through conflicted files in it). Hope you find it useful!
&gt; Ember and Backbone both impose more tangible structure -- particularly Ember -- and in doing so, create much more testable units of code. You must be an Ember fan, because what you've said is patently false. There's a lot of that coming from the Ember camp about Angular these days. It's akin to a death rattle. Angular forces you to use DI and it's DI container, thus making it more testable out of the box. It's completely built around it's own DI container to the point where all of it's built-in functionality can be injected and therefor mocked. It doesn't get much more testable than that. ***Ember leaves DI completely optional***, thus allowing developers to write less testable or untestable code. I've dealt with web apps written in Ember and web apps written in Angular. *ALL* of the Ember apps I inherited less than 10% unit test code coverage, and usually under 40% behavioral test coverage. The Angular apps I inherited had north of 90% code coverage out of the gate before the teams working on them even knew what code coverage was. Why? Because of forced DI. Ember's allowance for bad developers to write bad code by completely skipping DI is the primary reason I'll never use Ember for another project again. Secondary reasons being it's HUGE file size and it's use of templates to create HTML (which is itself a template) on the client. 
All of them are very testable. However, Angular forces Dependency Injection by convention, and therefor it's harder for junior developers to write code that's hard to test. (Harder, but not impossible) Ember and Backbone allow the developer to skip Dependency Injection, and therefor you'll run into more untestable code written against these frameworks. Ember is a better choice than Backbone for testability, becuase Backbone isn't quite as comprehensive, so you're left to patch things together yourself. Angular is still a clear winner for a variety of reasons in my mind. Better testing tools even: angular-mocks, karma, protractor, etc.
&gt; And with jQuery's footprint being so small, what do you gain by not using it? While I love JQuery and use it every day, it's not *that* small. JQuery 1.8.3 is 93K. If you really want a fast, light page even on slow connections, that's a deal breaker. CDNs help mitigate that somewhat, but there's still the potential of a slow load. I had a web site I worked on relatively recently that still had a lot of dial-up users, and introducing JQuery caused a lot of issues. We had to put in various spinners while it loaded because people thought the site was broken when it didn't load immediately.
http://caniuse.com/#feat=classlist Not compatible with IE &lt; 9. That's why he had to use a polyfill. 
yeah, i initially wanted to use available libs (cause who wants to write their own quantizer, right?) but my goal was/is different than yours, so resizing to reduce the load is not an option for me. this allows me to handle cases like the Quantum Frog, where there's a 1px horizontal line at the top with a completely different spectrum. i'm sure there are ways to improve the speed, though i think i've nabbed all the low-hanging fruit. if you find ways to improve the perf without sacrificing the quality, please fork and send a pull request. thanks for the info!
&gt;Not compatible with IE &lt; 9 Whenever anyone says they can't use a certain tech, or it doesn't work for them, what they're always really saying is, "It doesn't work in IE."
&gt;But there isn't even this magical secret to the DOM. That's what I'm saying. Just learn vanilla javascript. &gt;Much better to learn about JavaScript's event model than worry about handwriting selectors. You've lost me there. Using selectors is not related to events.
AngularJS uses JQueryLite for DOM manipulation. http://docs.angularjs.org/api/angular.element
There's a book called Learning from jQuery.. I believe it was written by a redditor too... http://shop.oreilly.com/product/0636920026280.do
Just enable gzip or some sort of server compression, brings that 93k right down (34k in my test)
If you like re-inventing the wheel, then I suppose this is a good idea. There is rarely a good reason to not utilize proven frameworks. 
http://stoic.com/formula/ Will give you the functionality of ms office spreadsheets. 
Actually, I'm not a fan of Ember. Sorry you wasted all your time trying to debunk me over something that's not even true. 
I wrote one of these: [weaning yourself off jquery](http://substack.net/weaning_yourself_off_jquery). The more important thing is to start using tiny modules that other people have written and published where possible. I like to install modules with npm and then use browserify to `require()` them browser-side. There is a lot of client-side code on npm in addition to TONS of code that works in both node and the browser. Read more here: [node-packaged modules](http://maxogden.com/node-packaged-modules.html)
Maybe a bit late but here is a way to make it look like it renders nice and quickly without using any libraries. http://jsfiddle.net/n8wLq/10/ The basic idea is that if you do a for loop for 5000 rows and then append to the DOM you have to wait for those 5000 rows to be created and that will take a couple of seconds. What you can do though is break the work down into blocks of time and append them to the DOM after each block has finished. This means you can decide how responsive you want it to feel vs how many DOM updates you want to trigger (less updates is better, but one big update feels slow). If you check the console you can see how many blocks it is doing and how long it takes in total. I wrote a version that can be used to break down any tasks into blocks of time but this version is more understandable.
[This was posted](http://www.reddit.com/r/javascript/comments/1qjpzp/an_excellike_app_in_less_than_30_lines_of/) almost 3 weeks ago. Sort of the same code4bitcoin posted but nice and small.
Am I correct in thinking that if I give each cell in the table an ID I can convert the contents of the cell into a variable in my JS and then do calculations with it and print the result to another cell?
This is really awesome, I think that I want to have these calculations done automatically and hidden from the user; if I used something like this then the user could tamper with the calculations?
That's really cool as well, and I think I saw it when it was posted but it looks like it's almost too interactive for what I'm trying to do. I think that if I used this then users would be able to adjust my formulas instead of just the variables.
Firstly, what environment are you writing for? This is not possible for a webpage, you can only tell the browser to open a file selector window, not control or alter the process in any way. Don't start with jquery or angular, start with the file management api exposed by your environment.
The short of the long, the entire language runs on a stack and a queue, the queue contains all events that has happened but not yet been resolved. Whenever an event is being handled its added to the stack and removed from the queue, on the stack all the logic will be resolved all function calls are added and removed as they are called and resolved, when the stack is empty it moves on to the next event in the queue.
You can hide the formula cells with css --&gt; "display: none;". The users will be able to edit only the fields you allow while others only display results. 
Seems like a nice fix for this would be to bind echo to a scrolling pane since not everyone needs to listen to images on window scroll. In addition, add a param to select which images it should lazy load and a filler image for these guys or a transparent data uri by default: $('.scrolling-pane').echo({ images: '*', placeholderImage: 'images/blank.gif' });
One of the libraries goals is to be library-agnostic, so no jQuery.
http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html
I wish you used english on your function and variable names so I could understand what's going on. :p
Selenium can generate a series of clicks and record macros. I've never used it though. But if you can get the URLs for the searches, so much the better. For instance if searching 'ugly sweater xl' gets you the URL `http://yousite/tld/search?q=ugly%20sweater` then you could grab that page with `wget` from the command line. If the image always has an ID like `main-image` then you could use `grep` to get the `src` from that image tag, and then download that with `wget`. If none of that made sense, then I'm sorry, but that's what I know best.
/r/forhire /r/jobbit
requestAnimationFrame is fairly new... setTimeout and setInterval are original to the language (someone can correct me If I'm wrong, but I think these are as old as JavaScript...) and were really the only way you could do timed events previous to requestAnimationFrame.
Damn... I can't afford to pay that ticket price...
I'm totally going to professionally use software written by twofuckingdevelopers.com Especially with this provision in the license. &gt; The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. 
the fastest and best way would be to know how it's stored (database probably) and export the data on the backend.
I really like the [Evented Mind](https://www.eventedmind.com/) video blog for Meteor.
Is there an API exposed by the CMS that you can call into? If so you can code against that .
JavaScript is single threaded.... but you are not working purely in JavaScript. You are also working in the DOM which is an API to a separate external environment. This yields the illusion of multi-threaded operation and actual asynchronous execution. It is for this exact reason that Node.js and XHR have asynchronous operations. Consider this in the context of a setInterval operation. Both setInterval and setTimeout are APIs provided by web browsers and not by JavaScript, by the way. If you put a DOM operation into a setInterval it is possible that a single iteration of execution could take longer than the delay between intervals. Keep in mind that the DOM is one environment and JS is a separate environment. In this case where a DOM operation does take longer to execute than the delay between intervals there will be collisions that produce unexpected behavior upon the DOM objects and likely failure in the JS code. This is why I recommend always using a recursive setTimeout instead of setInterval. How can this sort of asynchronous behavior be possible if JS is single threaded? It is because while JS is single threaded, as well as the DOM, the event model is not. JS will finish executing a given set of instructions before moving onto an additional set of instructions. Since event execution occurs outside of JavaScript it can cause instructions to queue up, which in the case of a setInterval can create an instruction backlog that executes whenever JS is ready to execute the code regardless of what is going on in other environments. Several APIs are written to intentionally avoid creating execution pauses or a backlog of operations by executing in separate code completely outside of JavaScript. This is how XHR works. Code behind the scenes runs the XHR object in parallel and continuously checks for status updates as necessary to automatically update the "readyState" property regardless of what the JavaScript parser is doing.
Fun read, thanks!
I started this path about 4 months ago and also looked for a quick, easy way to convert everything I knew about jQuery into javascript. Unfortunately, I didn't find anything quite so elegant, but it wasn't really all that bad either. I did a lot of searching at first making sure to include "in javascript" with all of my queries, but it comes much more naturally now. I don't understand some of the negativity in this thread, learning the javascript equivalent of jQuery is educational and can better help a developer choose better solutions in future code. *Edited for grammar.*
It is implemented with the canvas and consequently has better browser support. Namely iPhones.
Good idea! Screenshots coming! (aside from the demos here: http://iammerrick.github.io/pixelator.js/
You might be interested in [PhantomJS](http://phantomjs.org/)
I can tell you that Ember's intro is difficult and confusing because there is a huge learning curve but you really understand what's happening after using it.
Javascript doesn't really do threading. There are [Web workers](https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers), which provide actual threading, but they're pretty bleeding-edge. What you are having trouble with is _asynchronous_ operations in JS, which admittedly are a bit unusual if you're mostly used to synchronous (that is, sequential) programming. Async operations like `setTimeout` or `$().on('click')` don't run the functions you send to them immediately, but just associate that function with a future event. When the event occurs, the function runs. The important part to know is that events don't _interrupt_ anything -- if the browser is busy running synchronous code when an event (or timer) fires, the function associated with that event won't be executed until the program is idle. The program is still a single thread of execution. I've made [a simple JSFiddle](http://jsfiddle.net/b4C7A/) that demonstrates this. If your computer is super fast you might have to fiddle with the do-nothing loop. Re: your game example, none of your individual operations take very long, especially if they're just firing events at other objects. In theory, you've designed the game such that it doesn't really matter which order events are resolved in, and the browser is only refreshing the screen at 60 fps, so to the player everything appears to be running simultaneously.
Definitely the best I've seen in recent memory. * Interactive * Great explanations along with code * Starts simple but covers a huge amount of info * Dynamic lists * Pagination * Client-side routing (though I prefer Davis.js) * Data mocking * Backend API integration * Fixes your code if you ask * You can leave and come back later to any step or tutorial After that excellent tutorial this is my first Knockout project: http://beta.malt.io/
In theory you could use something like : * parse a page in two different arrays/structures and store it in localStorage or an HTML5 database: * links (a URL's to the links on that page) * assets (all the urls to the images on that page) * loop through the assets that haven't been downloaded and * using canvas pull each of the images into canvas and using something line FileSave save them locally (https://github.com/eligrey/FileSaver.js) * as the assets get saved mark them as downloaded so you don;t have to re-download everything * mark as completed * render out the list of links * Click a link that calls out to this function and rinse an repeat I would say fully automate it but the JavaScript security settings may not let you do a full automation unless you write a PhoneGap app or ChromeApp. You're also going to run into issue like background images in css you may want. Not a perfect solution but should keep you from ripping you hair out like me. 
I also tried to not use jquery to speed things up and wrote my own library for a project. Then I went back to jquery because frankly its much better than anything you'll write in a day or two. As you come across all the edge cases your lib will grow. I'm glad I learned this lesson though or I would probably still be wandering if I could do things better without jquery. In the future jquery is becoming more modular and if you do a custom build you can get about 20kb min gzipd. Vanilla is of course faster but generally its not actually noticeable unless your doing some really intense stuff. Still good to know how I guess.
I meant what I said. It needs no fixing.
Onscroll event listener added, new Echo.render() callback for non-scroll events added, scroll throttling to handle performance and also an offset to tell Echo when to load your images before they hit the viewport. Thanks for the ideas and conversation :) https://github.com/toddmotto/echo
My little company has never used one. We don't have to. We know how to code. We're experienced. We know where the problems lie. We aren't scared and don't need someone to cover our eyes for us.
Well, you still haven't learned since you still don't realize jQuery IS javascript (with crutches).
AngularJS all the way.
programming tadpole here, can someone ELI5 why one would need this?
Except gzip compression doesn't reduce transfer times for modem users. 28.8+ modems already compress data at the hardware level.
Oh so you're just wrong for no reason then? Okay.
Any plans for Amazon S3 multipart upload support?
Learned Angular pretty quick with http://toddmotto.com/ultimate-guide-to-learning-angular-js-in-one-day/
you might be right, but only because you did this in a silly way. plus you're not using addEventListener properly as well as defining an unused variable `bb`. var bars = document.querySelectorAll('#foo .bar'), len = bars.length, i = 0; function onClick(e) { e.preventDefault(); alert(this.getAttribute('href')); } for (i; i &lt; len; i += 1) { bars[i].addEventListener('click', onClick, false); } OP is trying to learn javascript properly, this is a *good* thing. [fiddle](http://jsfiddle.net/32cwD/)
Find out, the alternatives are ridiculous 
It says all properties are bindable, but *src* doesn't seem to be.
Edit: To play or test the code, just go to: [http://liveweave.com/3tElun](http://liveweave.com/3tElun) instead. This is WebKit-only (since it is just using webkit-transitions), so Chrome/Safari should work, but not Firefox or IE.
Right. My point is, don't worry about selectors. They're not important. Much more important for a beginning JavaScript programmer to learn about event model.
The process of reading a web page to extract dats from it is typically called "scraping". So if you google that with your favourite language, you'll get a lot of help. 
this: `document.getElementById('foo').getElementsByClassName("bar")` is silly. `addEventListener` requires an event type to listen for. (the `useCapture` argument can usually be omitted safely) we did not do the same thing because the bit of code I wrote works and is legible. what do you think jQuery is doing in the background on its event bindings? 
"Vide-uglier" terrible name
Honestly, I wouldn't.... jQuery handles so many intricacies with older browsers that using anything else you would lose a ton of support. That said, I cheekily add the following function to my small projects : var $ = jQueryInANutshell = function(q){ return Array.prototype.slice.call(document.querySelectorAll(q)); }
Datatables is nice too
"We know how to code." Then why are you asking questions ? Manipulating the DOM shouldn't be that complicated for a pro like you. 
I'm asking questions? Where? Manipulating the DOM isn't complicated for me or anyone who knows how to code.
I'm using that elsewhere in this project, but it's overkill for some things (why I elected to use tablesorter in some places that just needed column sorting.) Also, DataTables is not very printer friendly unless you get into extending it with additional questionable dependencies or a ton of CSS.
It's a shame the author equates code smell with formatting / linting.
You should be looking at the HTML5 File API. I've used it to write drag/drop uploads in numerous system.
Using [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) directly isn't too painful.
Thanks! Glad you found it useful. (1) Version 0.5.0 changes `sortable` to `Sortable` (https://github.com/HubSpot/sortable/releases/tag/v0.5.0) (2) querySelectorAll is supported in IE8+ and all modern browsers. Are there any additional browsers you need supported? (IE7, for example?) (3) The code is generated from coffeescript, and therefore follows strict-mode conventions. However, it doesn't add the `use strict` token.
Sorry, but I have to disagree. Datatables is NOT nice. It is not only hard to implement, there are far more easier solutions out there. For just simple stuff, Datatables makes it so much harder.
Ah, hello! (1) cool. (2) I actually have no interest in perpetuating older browsers... imo, we need to drop support so people (and businesses) at least get onto the auto-updating modern browsers. With that said, I was just pointing out the querySelectorAll issue for other peoples' benefit. (3) Nice - I have no experience whatsoever with coffeescript and it really didn't even occur to me that it was generated code! I haven't implemented it yet, but I'll probably replace tablesorter.js with it in the next day or two and report back.
Have you read [this](https://conversejs.org/docs/html/index.html#what-you-will-need)?
Your post ends in a question mark. Are you unaware of what the question mark implies ?
Even better: `bars.forEach(function(bar) { bar.addEventListener('click', onClick, false); });` :)
Thanks for clarifying that. Code smell is a somewhat subjective term. It felt appropriate to me in the context of my article. Linting actually can detect things like too many method parameters, cyclomatic complexity, etc. Check out JSHint's docs. It's quite a powerful tool!
This is such classic programmer egocentrism. People who use frameworks "know how to code", and they have better things to do than solve the same problems over and over again. Some people don't have problems like that, for example...if you're building small brochureware sites, then you might not need to build that in Scala or Ruby on Rails or Django/Flask. These platforms might not be suitable for you, and will probably *cause* more problems than they solve. So stick with what you know, Keep It Simple Stupid, and don't pretend like everyone solves the same problems...these frameworks aren't popular for no reason.
Some JSHint options he left off that can help with smell: unused Unused vars and parameters are errors. Really helpful in eliminating dead code maxlen Set the maximum length of a line maxstatements Set the maximum statements a function can have (discounting nested functions) maxcomplexity Set the maximum cyclomatic complexity (number of execution paths) a function can have I really wish there was "`maxprotoprops`" and `maxlen` for variable names though.
The most popular are [ClojureScript](https://github.com/clojure/clojurescript) and [Fay](https://github.com/faylang/fay) which compile Clojure and Haskell respectively to JavaScript.
This is the ultimate resolution to endless style guide debates. Using rc files for formatting and linting removes the human thought process from something that is so error prone.
Honest question: do you hate vcs in general or just the git tool? 
That's the trouble with amorphous terms like code smells. It was really the all encompassing tone of the headline that grinds.
Would be nice if there was nomonkeypatching (Or maybe it's already there.)
it's very subjective. The only problem I had is exemplified in the headline, "eliminate" assumes complete removal of, right? But yes, cyclomatic complexity checking is a very neat feature, and goes well beyond formatting issues. You should also check out PMD and similar code quality tools. http://en.m.wikipedia.org/wiki/PMD_(software)
Haha, impossible to enforce.
Yup. What I very commonly find is that the basic, "yeah, just make it sortable" veeery quickly becomes, "And pdf, and hidden columns, and weird sort based on xyz, and paginate 50,000 entries" etc etc.
Dont get me stared on Make Excel for Web! OH MY GOD! its like they dream of solutions and just want to hurt me.
What's your favorite solution for this sort of thing? So far I've come across this, datatables and list.js. 
You gain performance. jQuery is actually quite a bit slower for many things. If you're doing the same thing over and over, it can add up. **Native setAttribute()** `document.getElementById('btn').setAttribute("disabled", "disabled");` 2,062,917 ops/sec **jQuery attr()** `$("#btn").attr("disabled", "disabled");` 99,063 ops/sec (95% slower) http://jsperf.com/jquery-attr-vs-native-setattribute/3
I'm so glad I don't work for your little company, sitting in a little cube with a little laptop, fixing a million little bugs in a million little places because you refused to use a single little framework.
There's a very big difference between a developer who knows ONLY jQuery and an otherwise competent JavaScript developer who chooses to use jQuery. One is using a tool to work more efficiently and the other is using a crutch to hide their lack of real knowledge and ability. Most developers never need to know Assembly today... but show me a developer with Assembly experience and I will, in every case, show you a FAR superior developer overall... not because of their knowledge of Assembly per se, but in all the knowledge they had to gain to work in Assembly, the thinking ability is fosters. By way of analogy: JavaScript is to jQuery as Assembly is to any high-level language, roughly-speaking. It's sad how many jQuery "developers" I deal with who simply can't grock this.
[Elm](http://elm-lang.org/) (similar to Haskell) compiles to JavaScript, too.
No? I never said that. The OP said his site needed to accommodate modem users so a big JS library wasn't going to cut it. The next reply said to just gzip it. I replied that it wouldn't help. Where in any of this did I say not to use jquery because modem users?
why is the performance worse when i turn backfaces off?
I have used more than a few version control tools over the last 20 years and the latest trend of using git has only caused team workflows to become much more complex without significant gains from the features people claim that we need from git. In several years of using git on various projects, not one of them has required or used any of the "advanced" features of git that made people think they needed it. I've worked on medium size teams with aggressive deadlines, and git has only added friction to the workflow. As a programmer, I want to think less about version control and more about programming, but git forces a more complex interaction with vcs, and it doesn't make my job any easier than if I were using SVN or other tools. vcs should be getting easier, not more complex. git is great for people who get off on version control, but that's not me. I want to code, check-in my stuff in a simple way, get other people's changes, and be done with it. Now I have to deal with gitflow and multiple branches, and stashing changes, and all sorts of merging issues and dealing with way too much complexity for my liking. But more people keep using it because "that is what everone else is using", because "github is so popular" but they are working on closed-source NDA projects that won't ever be posted to github, so what's the point again? Oh, shiny new bandwagon, we all must jump on it. I'm looking forward to easier version control. 
Reinventing the wheel can actually improve two things: your understanding of the wheel and the wheel itself. If you look at a modern wheel, you'll find it quite optimized. The same can be said about vanilla JS. In many cases, a simple, elegant and fast solution will come from not using a framework.
Something like: function main() { function turret() //set interval 20 function monster() //set interval 20 }(); this?
If you want a *real-time* application, you should check out [websockets](https://developer.mozilla.org/en/docs/WebSockets) (and frameworks built around websockets, eg [primus](https://github.com/primus/primus), [sockjs](https://github.com/sockjs/sockjs-node), [engine.io](https://github.com/LearnBoost/engine.io)) If you want to build an *application*, use an M-V-Whatever framework ([backbone](http://backbonejs.org/), [angular](http://angularjs.org/), etc). If you want to use js only to improve ux (plain old website, nothing fancy), use vanilla js.
A lazyloader for images is nice because your page doesn't have the burden of retrieving all of the file resources RIGHT NOW on initial page load. And the images are called from the server only when they are needed to be seen, in this case on page scroll. For me this concept is handy when I have a gallery that has more than say 50 images. Instead of loading everything at once; a lazyloader adds some intelligence to the page.
If I had to do it, I would have picked your third solution, which seems both fun to code, and quite clean. I might be wrong, but as a HTML5 games dev, I always pick the 'create a master controller with booleans' over anything else. Your second solution, with the setTimeout : drop it. It sucks. Don't ever do stuff with the setTimeout. Events rock. Use them ! 
Why do you add 1 to getMonth()? getMonth() returns a zero-based value.
ohh, good call. It should be a minus, right?
K. Any chance your easier stuff have an option to export? Serious question. 
Just manader[d.getMonth()] will be fine. Can you give an example on what output you'd like? I don't really understand your problem. What do the variables jan, feb, mar etc. contain? 
okay, i want the output to be if its the 3rd month i want it to say "mar" instead of 2 (or is it 3?)
All the month strings are unquoted. Also there's nothing wrong with this code but it could be written more succinctly using an array literal like this: var manader = ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"]; You don't need the minus 1 from getMonth either as the Array is zero based like javascript months, try this: function showDate(){ var d = new Date(), manader = ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], curr_month = manader[d.getMonth()]; alert(curr_month); } EDIT: forgot to remove the -1 from getMonth
Your example still has getMonth() - 1 in it. 
Cheers, it's gone now
Thanks!
I can't add to the discussion as I am a complete JS novice and just lurk here, but this is awesome man
SideNote! how do i get getSeconds(); to show "01" instead of "1"?
Good stuff! It shouldn't be too tricky to make it work everywhere else, too :) I had a quick play - I removed all of the `-webkit-` prefixes from the CSS, added `px` units to the `perspective` on `#container`, changed the JS to read `stage.style.transform` (instead of `stage.style.webkitTransform`) and it all works on Firefox (but not IE10). That broke it in Chrome though, so here's a version with both `-webkit-` prefixes and standard versions: http://liveweave.com/RjebpU 
ClojureScript looks really promising. I'm reluctant to structure the project around Leiningen though- are there alternatives to https://github.com/emezeske/lein-cljsbuild for fast compilation? I like that running "cljsc" standalone can be integrated into existing build processes but it's so slow. Also, it wasn't obvious how to use some of the core.* packages with ClojureScript. Can "cljsc" include core.async, core.logic, etc.? Or do I need Leiningen for that? I'll take a look at Fay and Elm (mentioned above) as well. Thanks!
JavaScript doesn't have any kind of built in `printf`-like functionality, unfortunately. There are libraries of course, but in this specific case you can do this: var zero_padded_seconds = ('0' + foo.getSeconds()).slice(-2); 
 function formatNumber(n) { return (n &lt; 10? '0': '') + n; } Use it like this: var d = new Date(); alert(formatNumber(d.getSeconds()));
I use the [underscore.deferred mixin](https://github.com/wookiehangover/underscore.Deferred), which implements (almost) exactly the jquery promise library. I use it so that I can consume whatever promise i get / make in exactly the same way as things like $.ajax returns.
 function leadZero(n) { if(n &lt; 10) return "0"+n; else return n; } This should do it.
That you think you we need to "solve the same problems over and over again" shows you aren't good enough to work for my company. You don't know the difference between ego and 'experience and knowledge'. What we know, you never will. &gt;if you're building small brochureware sites Our largest customer is one of the largest restaurant chains in the world. &gt;these frameworks aren't popular for no reason. Only an amateur thinks everyone uses them, too. People use frameworks to either get something up fast with lesser regard to quality. It also fills in the gaps of knowledge their staff has. In our case, knowledge gaps are filled by giving our new programmers sections of code so they can learn what they don't know. We prefer to hire experienced coders but don't mind helping people grow. This is why our sites are faster, cleaner, leaner, not boxed in, flexible, etc. We don't have to hire someone who knows Drupal or Scala (you use Scala??!! Are you really that desperate??!) Cause they're too boxed in. They don't know anything else. We hire javascript programmers, and C programmers (cause C coders can do anything), and database programmers with experience in PosgreSQL, and sqlite (not mySQL). We can find them anywhere. You can't. We can do anything. You can't. We don't have to wait on a new version of some framework to come out to be able to use some new feature or fix some bug. I'm stopping now cause I find myself going into my presentation to that large restaurant chain that won them over. We almost rejected them cause they wanted us to do our part with a framework; their first foray into it. They've been grateful ever since. So when you're good, you know it. Inferior people call it ego. We just call it knowledge and experience. Don't forget that ... kid.
Except for my last post, where do I ask a question? Do you think I'm the OP? Or have the drugs not worn off yet?
I promise you it isn't as convenient as promises.
http://www.meteor.com/
Should be n &lt; 10.
the jquery progress notifications work the following way : 1. the third callback to .then, or any callbacks registered with .progress, will be fired whenever ... 2. the .notify() is called on the deferred. 3 This includes any of the promises you create with $.when. or new $.deferred The following code is written off-the-cuff, but should show the basic idea. Namely: aggregrate the progress events upwards to a container promise. // tasks.js module.exports = Backbone.Collection.extend({ process: function () { // new deferred for the whole process var dfr = new $.Deferred(); // returns an array of promises containing the results of // all the model.fetch calls. var promises = this.invoke('fetch'); // calls the .progress function on each promise, setting // up the over all promise' notify method to aggregate // the events. _(promises).invoke('progress', dfr.notify.bind(dfr)); // once all promises are resolved, resolve or reject // the container deferred object. $.when.apply($, promises) .then(dfr.resolve.bind(dfr), dfr.reject.bind(dfr)); // return the promise. return dfr.promise(); } }); I'd actually probably avoid relying on backbone collections honestly. a model can be in only one collection at a time, and it will only allow a single item with an id to be in a collection. (ie: no user 1 and post 1 in the same collection).
Nice demo but please let's stop maing single browser limited stuff, it is not year 2000 anymore.
oh. and i'm going to bring this up even though it's like bringing an assault rifle to a tickle fight ... but your one option of using booleans basically made me think that you might be needing finite state machines. I mean, promises are basically an FSM already.. I've had pretty good success with [state.js](http://statejs.org/) so far, but there are many different options out there. I personally like that it allows you to attach a state machine to any other object, so it works fine with backbone entities, normal javascript. just about anything. // basemodel.js var state = require('state'); // new base model to inherit from module.exports = Backbone.Model.extend({ // remember to call this prototype if you override this. initialize: function(data, opts) { this.initState(); }, // set up the state machine initState: function() { // turn the model into a state machine state(this, { // initial state. it starts here initial: state('initial', {}), // if we loaded it successfully loaded: {}, // if it failed. failed: {} }); // fetch the model on instantiation. this.fetch() .done(go('loaded').bind(this)) .fail(go('failed').bind(this)) // helper function. changes state machine on // the promise completion. function go(path) { return function() { this.state().go(path); }; } } } This basically means the model itself is now storing wether or not it's been fetched correctly. myModel.state().is('loaded') will tell you wether it has been before. You can also trigger on events like : this.state('loaded').on('arrive', callbackFn). This will only trigger when the objects' current state moves from any other state and finally lands on the 'loaded' state. you have a __lot__ more things you can do with this library, and FSM's in general though. I've used this before to register state changes against an application level event aggregator, to build a bi-directional distributed state machine over websockets. 
getMonth() is a method of Date. Edit: See [MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth)
[This documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth) might help you.
I write frameworks.
OP asked for XHR + Promises/Deferreds. While XHR is part of the spec, it doesn't implement Promises.
Please look up moment.js, it might help you out. Somebody made this great library to use and it has almost any date functionality you could want. Here is how you would do what you are looking for with the library. The following would get you the current month: moment.lang('da-DK'); var curr_month = moment().format('MMM'); // Would return "dec" If you wanted to get a specific month name, you would do the following. moment("2012-10-14").format('MMM'); // Would return "okt" Or you could just pass the 0-indexed month moment({month:9}).format('MMM'); // Would return "okt" Of course, nothing beats learning to do things yourself.
Nitpicky: When switching from Hot to New or any other tab first time it loads data the spinner is off to the side. On a wide screen a bit harder to notice. ps: Great job Ben.
YEAH BEN NICE honestly though, nice work dude
I only took a few features from RES such as opening images inline and showing the vote count next to the link. I've added a lot of features that RES does not have.
pretty cool, one comment, vim keys please ;) 
Always doin somethin there Ben. WHATS NEXT BEN, THE MOON?
How do I know that this is safe to log into?
I don't know anything about moment.js, but I have to assume that it defaults to the English spelling for month names. I think for this to be a good answer, you need to tell how to use the spelling the OP is using (specifically "maj" and "okt").
You don't, same with any Reddit mobile app.
Why does it matter? The javascript it generates is perfectly well formed and easy to read.
What do you mean?
Basic keyboard navigation a la [RES](/r/Enhancement). I wonder how easy it would be to drop RES in on top of redditjs.com (especially once we refactor out a lot of regexps checking for "are you on reddit.com"). I'm pretty certain some big pieces of functionality, like the account switcher, wouldn't work; but I bet a lot of it would work fine. How faithfully did you reproduce the reddit HTML?
Hmmm yea, but those have reviews on play store. Just wondering. Good work; the site is awesome.
Thanks for the reply, but you didn't really address my question at all: Is this meant to be a permanent site, or just a POC/sandbox?
Did you mean to reply to me? Because what you wrote doesn't address my question.
Thats my point. It was reddit software, that auto shadowbanned him. It totally discouraged him to continue contributing. All the php mods tryed to talk about him rigth. No one listened. I havent seen him really back. I think he returned for a while to talk about the topic, but left afterwards with a bad feeling about this place.
food for thought...are these reviews made by people who have reviewed the source code and actually claim it being secure? 
a good find, and an interesting potential exception to the rule. he is linking his own projects, but they're github repos and not blogspam articles with ads... there's no real path to monetization here. arguably he's contributing to the community via code, but not really being a great participant because he doesn't do anything on reddit BUT post his code. he certainly falls into a much more legitimate "gray area" here and while I've removed one or two of his posts before, I haven't removed the rest for that reason.
Nope, but I figured someone would notice something funny happening with their account. Not the best security, I'll admit.
Ah yes, the only keyboard interaction at the moment is to go to the previous/next post. I would say it's at least 90% reproduced HTML pulled directly from reddit and replaced with handlebar template variables to create what you are looking at.
All I get is a blank white page. IT'S SO CLEAN.
Hahaha!! I was trying to figure out how you knew my first name and then I looked at your username.
It's meant to be a permanent site, but I also like to think of it like a sandbox where I can play with ideas on how to consume reddit better.
Occasionally on pageload there is a Javascript error that causes the page not to render. RedditJS is still in beta, but I have been working very hard to prevent this from happening. I recently migrated a lot of the codebase from using [Resthub](http://resthub.org/backbone-stack.html) to using [Marionette](http://marionettejs.com/) This cut down on the error rate a lot.
Looking good man. I'm working on a Marionette/Handlebars app right now. I'm curious to get your opinion on if you were to do it all from scratch again, what different choices would you make? Any tips that you wish someone would have told you before hand? What was the most challenging part? Again, great job.
Someone deserves a job at reddit! Here's my appreciation: +/u/bitcointip 1 beer verify
I just said this in another comment: &gt; I recently migrated a lot of the codebase from using [Resthub](http://resthub.org/backbone-stack.html) to using [Marionette](http://marionettejs.com/) This cut down on the error rate a lot. If I had to start it all over again I would have used Marionette from the start. The most challenging part is *and still is* to optimize the code. Currently it runs too slow on mobile devices. Or if you have 1000 posts open in that subreddit it takes too long to change views (grid view back to normal or to thumbnail view). Also the structure of the files are important to keep in an organized manner, models/views/collections in their own folder. 
Yeah, some kind blogpost on after thoughts could be nice to read.
I immediately reloaded and it was fine. Just playing around, sorry. :)
I agree, all your point are valid, but it doesn't hurt to know your options. I agree that knowing the basics and learning the good old hard way is best, but if you are working on something big or on a deadline sometimes it helps to not spend tons of time getting some months name to show up when there could be more pressing matters. Of course you do loose out on learning opportunities. In the end, using libraries is something that almost every developer ends up doing and sometimes using them can also teach some things. I just wanted OP to be aware that there are options out there in case they didn't know. I agree with you though, if op wants to maximize what he/she learns then that's great, I'm all for that. 
Try disabling adblock on this page.
Thanks for the reply. About your challenges- do you have a plan of action to solve these performance issues? Is it a memory usage problem?
You're probably already aware but the site is basically unusable on mobile. On my iphone, at least.
It's more of a Javascript CPU performance problem. I've knocked out most memory leaks you typically see between 10-35mb of memory usage in the profiler.
You did a really impressive job, it looks like the original but it got the JS treatment. I think the main risk with switching all to a client side app becomes memory management. When you reload pages all the time you can be lazy because the browser will just clean everything up for you, but now you have to understand the GC a bit better. Then of course there's the stale data stuff, you no longer get fresh data "for free" by just clicking on a link, it's essentially all cached now. I had the situation at work where we turned a part of a web app into a mini single page app and people started asking for refresh buttons all over the place.
Gridview in a NSFW subreddit could get you fired =)
You are correct, phones typically have slower Javascript performance. Optimizing the code to work everywhere is an important next step. Try it out on your desktop when you get home =)
Oh, I'm sure it's possible. I'm saying you need to say how to do it if you want to tell the OP how to do it, rather than giving half the answer and saying "That's it".
I feel I've done a pretty good job at preventing memory leaks, using marionettejs really helps with that. If the user wants fresh data they can refresh the page. I wanted to keep and reuse as much data as possible throughout redditJS because the reddit API is SLOW typically takes between 1-4 seconds to get the reddit json back.
I'd venture to guess it would simply be the css that would solve the problem, not JavaScript rendering. Functionality works fine, the layout is just broken.
The tickle fight could scale to a gunfight, and I need to tackle this approach so that it scales in the same way. This is a clever strategy to sort out this problem! Thanks for you time, I'll work on integrating State.js in.
I'd love to hear any suggestions, in particular suggestions on ways to view a subreddit. As for the CSS, I copied the main reddit CSS file over and added a lot of my own CSS. The reason I had to copy all of the reddit CSS is because I wanted to make RedditJS compatible with individual subreddit styles. You can see the CSS I wrote for it here: https://github.com/BenjaminAdams/RedditJS/blob/master/public/css/style.css
Uhhh.... That's the reddit api for you. Blame reddit not him. 
I'm very new to backbone/ _ and I didn't know about invoke! That's actually very useful, because I've been hacking together my model's to spit out stateful updates when I could just be using this method here. I will very likely mimic this. Thanks!
This is an interesting concept you have (the game), though I fear you got friendly DDOS'd by reddit. How difficult has it been working on a cross-platform game with Unity?
For those wanting to join the discussion on Hacker News: https://news.ycombinator.com/item?id=6841644
You are partly correct, it needs a mobile specific stylesheet to make it look nice in phones, but the Javascript performance is very low in phones causing page changes to be very slow..something I need to work on.
You would still use the JS it generated. The only downside of them using coffeescript is they hugely limited their chance of others improving/fixing it moving forward. I can understand people using CS internally (even though I don't like it), but I'm always amazed to see open source stuff done with it...
It's still up and running, did you have trouble connecting? ;) DDOS away my friends! It's not been that difficult and more of a build / qa / learn cycl. The real magic is that each respective game client connects to a web API, allowing users to cross devices without having to sync data. All stats, configs, even game objects get accessed from the cloud which makes the clients smaller and faster on boot. Thanks for the comment!
Curious as to your thoughts on using Marionette are after what you learned from this project, would you use it again? Anything in particular you really liked or disliked compared to just Backbone or another lib on top of Backbone? Did you run into any major issues (such as performance) while building it? Also some nitpicky things: - I've seen a few views (like your [base view](https://github.com/BenjaminAdams/RedditJS/blob/master/public/js/app/view/base-view.js)) do quite a lot of things that shouldn't be handled by the view, but by it's model. Any particular reason for this? - Your models have almost no functionality (due to the above point) - You rely a lot on underscore functions, which are inherently much slower than native functionality, especially the loops - You use _.bindAll(this) a lot, but I don't really see any major case where it's particularly useful aside from convenience, and the way it works is actually pretty slow and adds a bit of overhead, plus it bloats your context significantly (it's also very rarely needed in backbone in the newest versions) - Not really seeing where you make heavy usage of the advantages that marionette brings to the table such as the prebuilt view types, though that might be the way reddit is layed out and it didn't make much sense Also, you should consider swapping Underscore for [LoDash](http://lodash.com/) or [Lazy.js](http://danieltao.com/lazy.js/) as they perform better with large datasets compared to underscore (both are more or less swappable with no issues with backbone)
Very cool and clean code. My concern was what someone else had said in the comments about if the server was secure. Keep up the good work. http://www.reddit.com/r/javascript/comments/1rzyz7/i_rebuilt_all_of_the_functionality_of_reddit/cdsldhg
Because we can read the source?
Reading your comment reminds of how cutting edge Digg originally was by using AJAX for voting on comments. I wonder what will come after single page, js driven webapps.
I absolutly love using Marionette, it really helps with memory leaks and keeping the view code organized using regions and using the ui layouts that I'm using [here](https://github.com/BenjaminAdams/RedditJS/blob/master/public/js/app/view/header-view.js#L13) Some major issues I faced were nested comments, at first using regular backbone would have trouble figuring out which comment to interact with ex: voting for a nested comment would vote for every comment in that tree. This was solved by using Marionetts region layout.. You are right in that I should have done more code in the models, this a problem that I could work on. I typically just always use a _.bindAll(this) so I have consistent this's, I had no idea of the performance implications, I will see what happens when I take them away. I have not considered using Lazy or loDash, looking at Lazy the performance differences are incredible. I will have to try it out. Thanks for the feedback.
Yep! Very good.
In your api.js, you can just use [querystring](https://github.com/visionmedia/node-querystring) instead of parsing all that junk.
Thanks, will have to try it out when I have more time.
Or keep doing it so we have better implementations of your ideas? (jk)
Good suggestion, I would have a lot to write about RedditJS. It's on github because I wanted to showcase my ability to write Javascript to potential employers, In particular I would like to be employed by a fellow redditor. Github is also just a good way to keep a backup of your code, and if someone wanted to contribute I probably wouldn't turn them away.
Very neat. I think it would be worth ditching the regular reddit layout for something more suited for a single page application. That and custom stylesheets are making it awkward.
oh no he might steal ur reddit account, dont give him ur internet points!!!
I wrote this the other day, I thought it was helpful (and pretty close to optimal, maybe?) https://gist.github.com/framerate/7777025 getFormattedDate = function() { var datemap = { 'day' : { 0: 'Sun', 1: 'Mon', 2: 'Tues', 3: 'Wed', 4: 'Thur', 5: 'Fri', 6: 'Sat' }, 'month': { 0: 'Jan', 1: 'Feb', 2: 'Mar', 3: 'Apr', 4: 'May', 5: 'Jun', 6: 'Jul', 7: 'Aug', 8: 'Sep', 9: 'Oct', 10: 'Nov', 11: 'Dec' } }; var date = new Date(); var day = datemap.day[date.getDay()]; var month = datemap.month[date.getMonth()]; var year = 1900 + date.getYear(); return day + ' ' + month + ' ' + date.getDate() + ', ' + year; }; 
Your full name is also on GitHub
I would highly recommend moving away from _.bindAll(this) and just bind the functions you need 'this' to be consistent (mostly just callbacks, it seems).
&gt;if (typeof window.console == "undefined") { window.console = { log: function () { } }; } There are console calls everywhere
that functionality is already handled by [console.js](https://github.com/BenjaminAdams/RedditJS/blob/master/public/js/lib/console.js). Problem is, it hasn't been loaded by this point in the code. Since it is not an important log, I figured it would be best to just remove it rather than mess with the loading order.
Findarr from DAoC?
I did notice that if I went to /r/wtf and refreshed, the app didn't load up. Perhaps a bootstrapping issue? But nonetheless, very nice!
I will look at Zepto.js. It's lighter and generally faster. But you loose compatibility with older browsers. Also if they ever get ASM.JS off the ground that maybe a solid source for speed and control. Finally you may want to check out http://www.140byt.es and http://microjs.com . You can ussually find nifty small and fast new projects there.
Devil's advocate: no guarantee that this exact source is what's deployed on his server.
There are some issues that it crashes because of a JS error before the page loads it happens maybe every 1/20 times, this is something I need to work on. If you refresh the page it should work.
That'll teach me to not dig a little deeper before commenting!
hurry up and sell before the crash!
Data reuse. I know this as caching. How do you cache a subreddit, when by definition they are dynamic (front page always changes)? Caching is not free. It's a trade-off between accuracy and speed. Is the speed increase worth the inaccurate front page? Will yesterday's stories be overrepresented on today's front page due to caching? Probably. Awesome job, btw, and I'm not trying to detract from the great work you've already done, just trying to point out speed isn't always most important. 
maybe consider remote?
Hey, well done. Couple of questions -- * What are your thoughts on Marionette? I develop a Google Chrome extension which is slowly transitioning into a medium/large scale application. It's written with Backbone, but I haven't found the time to try out Marionette and see if it is worth it. Your experiences? * Any reason for using Handlebars over the implicit templating engine provided by Backbone? I'm fully content with lodash's _.template and just curious what you wanted a full engine for. * How many hours (est.) did it take you to build this? Are you happy with the code base? * What's your dev. experience like? * Are you interested in working on other open source, Backbone projects? If so, take a look at Streamus and feel free to get back to me about it: http://streamus.com https://github.com/MeoMix/StreamusChromeExtension Thanks man. Cheers :)
I only played DAoC at the start as a minstrel w/ Shining Force. Probably someone else :(
[[âœ”](https://blockchain.info/tx/1bda1ad44968c3b1e8c2bd8971c8333045454cb303c1b11a57710d6e685cfe6d)] **Verified**: [LightShadow](http://reddit.com/u/LightShadow) &amp;#8594; **&amp;#36;0.50 USD** *(&amp;micro;&amp;#3647; 466.82 microbitcoins)* &amp;#8594; [armastevs](http://reddit.com/u/armastevs) [[**sign up!**](http://www.reddit.com/message/compose?to=bitcointip&amp;subject=Sign%20Up&amp;message=SIGN%20UP)] [[**what is this?**](http://www.reddit.com/r/bitcointip/comments/13iykn/bitcointip_documentation/)]
The caching is used in only one window session. So if you refresh your browser it is cleared. It's cached by keeping it in a variable in memory. This is being done because the reddit api is SLOW 1-4 seconds or so. This tradeoff is worth it, the amount of data needed to cache one subreddit is not all that much. The main purpose of caching subreddit data is going from subreddit to single post back to subreddit is a typical flow of reading reddit posts and you do not have to wait for the API to reload the subreddit data every time.
Or you could contribute to the opensource project that's available. https://github.com/BenjaminAdams/RedditJS also, Brain Crack: http://www.youtube.com/watch?v=UvL6NITEozY&amp;list=SP5DCE42EFF018B478
I don't know, sorry. :/ I would love to hack away at Clojurescript, but I haven't had any time.
Nice work! I clicked around for awhile and it eventually broke and starting throwing callback errors in Chrome (i'm a btz too lazy to throw this on github at the moment): Uncaught TypeError: Property 'jQuery191024850071570836008_1386109928109' of object [object Object] is not a function api.reddit.com/comments/1s0jk0.json?jsonp=jQuery191024850071570836008_1386109928109&amp;sort=undefined&amp;_=1386109928127:1 
* Using RequireJS/Backbone/Marionette is a great way to keep large JS projects organized. I suggest trying it if you have 2 or more views. * No other reason than I like using handlebars. * It's hard to say how many hours I worked on this. Some days it would be for 12 some days just a few. I would say around 300 or so hours total in the span of 3 months. A good indication of the hours worked is on this [git commit graph](https://github.com/BenjaminAdams/RedditJS/graphs/commit-activity). I am still not very happy with the codebase, the load time of the Javascript CPU is still too great if I ever want to see this project take off. * I have a CIS degree and have worked with PHP/Wordpress sites in the first 5 years and in the past 2 years I have focused more on Backbone/Nodejs projects. * Maybe...
The transition to custom stylesheets is my main point. It's almost grating. It would feel much better with a consistent solid UI that doesn't change. It would also allow you to go into more features than just the default reddit set.
If everyone sells, then they will cause the crash! As long as the hype train keeps going, everything will keep going but once you put your bitcoins on the track, you are going to derail it!
Great Job! Would to see this done with AngularJS
nice...very nice. great job!
I don't have a tutorial, but I can try to explain what's going on here. &gt; It acts like a function: var x = $("#MySelecter") $ is just a function, so this makes sense var $ = function(selector) { } &gt; It also acts like a static class: $.trim(" My Text") In javascript, you can actually add a method to a function: var $ = function(selector) { } $.trim = function(str) { return str.trim(); } // now you can call $.trim(" some string") &gt; Then it acts like both: $("#MySelecter").val("ssss") Remember how I said $ is a function? $ is just a function that returns an object. This object has its own method/properties. In your example, the object that was returned has a method called "val" var $ = function(selector) { // this is just a dummy object. the real thing returns an object // based on the selector. var retObj = {} retObj.val = function(str) { return retObj; // return self for chaining } return retObj; } So basically.. * $ is just a function * Methods were attached to $ * $ returns an object that has it's own methods/properties *edit lots of formatting, sorry
Well put.
* The $ in jQuery is a function. * Functions can have properties defined on them like any other object. * The jQuery function returns another instance of the jQuery function.
Also Devil's Advocate, we're all just going to presume that somebody else read the source and that it must be safe. Right guys?...
The only person to win is the guy who sells first.
i'd like to see a complete rework of the voting/karma system. I'm a webdev too if anyone wants to collaborate or wants help on a project :)
Well, the only person to win the *most*, people will still make money albeit at a lower amount for the first little bit before bitcoins drop below the value that people bought them at. Of course this is all based upon the thought that once the value dips at all everyone will run around like headless chickens trying to sell their own loot. This is the most likely scenario but it's also possible that enough people will believe that people selling is just a phase, and that it will get better again. If that happens, it will actually go up... until people lose hope again.
i was having a conversation the other day about this to. Can't find the link atm, but something like this: you can only spend karma giving an upvote from upvotes you've received in a sub (plus some small amount to get started with). karma doesn't transfer between subs unless the mods allow it (/r/funny could accept karam from /r/funny and r/jokes, that kind of thinking). No such thing as a downvote. there could also be a seperate agree/disagree button, or maybe several options (like, love, hate, stupid, insert adjective here). That info could be displayed in fun ways, but not affect the listing order which is karma based.
What's the "rate"? I made this, it's a bit messy and probably inefficient. I'll make a better version when I know what the rate is. function f(a) { for(var i = 0, l = a.length, times = {}, names = {}; i &lt; l; i++) { times[a[i].created_at] = a[i].ranking.map(function(x) { var cname = x[0].slice(1).toLowerCase(); names[cname] = true; return {name: cname, score: x[1]}; }); } var r = []; for(var name in names) { var points = []; for(var time in times) { var c = times[time]; for(var i = 0, l = c.length; i &lt; l; i++) if(c[i].name == name) points.push({ tag: name, rate: 0, created_at: time }); } r.push({tag: name, points: points}); } return r; } 
Nice and concise, thanks! +/u/bitcointip 1 internets verify
[[âœ”](https://blockchain.info/tx/dcf7e63cd7bc014542df2eafe714e8fef2b1255b826447785b3a7e98e64c9faa)] **Verified**: [LightShadow](http://reddit.com/u/LightShadow) &amp;#8594; **&amp;#36;0.25 USD** *(&amp;micro;&amp;#3647; 232.48 microbitcoins)* &amp;#8594; [digitaltsai](http://reddit.com/u/digitaltsai) [[**sign up!**](http://www.reddit.com/message/compose?to=bitcointip&amp;subject=Sign%20Up&amp;message=SIGN%20UP)] [[**what is this?**](http://www.reddit.com/r/bitcointip/comments/13iykn/bitcointip_documentation/)]
Just use underscore
Made this real quick to show how many stars we had across all of our repos. Thought someone else might find it useful. It also supports a single repo as well. 
Nice job! But how do I access the links in the footer? (The main reason I visit Reddit is to read the User Agreement!!1!) Also, when the front page of RedditJS.com has a couple hundred submissions displayed, it takes about two full seconds for me to return to the front page from a discussion using my Back button, rather than less than one second at Reddit.com. (Suboptimal support for Back button seems to be very common at sites with client-side-rendered HTML.)
Yeah, you're right, this is something I need to work on. Optimizing the JS that powers the subreddit loads need a lot of improvement. Your comparison might be a little unfair vs the reddit.com loading. Reddit.com only loads (up to) 100 posts at a time and redditjs can face up to 1000 posts at a time. If I were to limit redditJS to a max of 100 posts per page it would eliminate this problem. I took out the footer because its useless to most users.
to be honest I think I like this more than reddit. Love the grid view!
How does this perform on mobile?
But have you ever played shining force. The old sega game?
Thanks!! I prefer grid view for subreddits that are image heavy and full view for ones that are links/self posts.
Yes!
Hire this man!
Great tech stack though, I wish all companies would use these.
Im moving towards Angular, but for a simple table sorter, datatables is enough. I havent need anything that it does not supply. I just want more complex filters so Angular is my way. 
Yeah, IE 8 was a pretty bad bug.
Is this open-source? Looks incredible!
I've been using hammerjs and their tap gesture, works great. It's a great library.
I read through it. It's not that much code.
Sadly, new versions of jQuery have dropped support for "old browsers" (old IE), so jQuery's usefulness in that respect is diminishing.
How do you consider CoffeeScript to be esoteric? Do you consider any language that you're not familiar with to be esoteric? Do you consider Ruby or Python to be esoteric? Have you programmed in Brainfuck or Whitespace before? You're entitled to your own opinion and preference in regard to programming languages but it would suit you to understand words before using them in a sentence.
Yeah it's definitely mostly the view. Seems snappy enough on mobile (could definitely be optimized more, but that's not a massive issue). Cool project though!
Seriously. LA is prime for UI work. There just isn't enough good talent. 
Because all people want to build is prototypes for would-be investors.
Looks like a good start, could use this in something I'm working on actually. Trying to wrangle some jQuery plugins to play nice with Angular can be a pain, nice to see a built-for/with angular Calendar control.
The things people will do for karma.
Great work! Love all the thumbnail, grid, viewing. If i find sometime, I'd like to implement the front-end using AngularJS while I'm still learning it.
That's far from the work environment in LA. There's a lot of nice companies to work for here that have been around for a long time. If anything SF would be the place for "would-be investors". LA is mostly retail or media.
But it doesn't look like every API call supports Oauth. http://www.reddit.com/dev/api
JavaScript, and by extension CoffeeScript, were created to solve problems within the same domain; the domain/interest is web development (that problem space has been expanded with nodejs). CS was not created with the intention of having a small number of people use it, rather, it was created as an alternative to JS for anyone keen to its added syntactic sugar and familiar static semantics (Python + Ruby). I rather not argue semantics around your use of the word. However, in the context of programming languages, esoteric PLs aren't created for practical use; even though CS compiles to JS, yes, CS is still a PL, it is a set of strings with static and dynamic semantics. What percentage of web developers who know Python also know Ruby? What percentage of web developers who know &lt;some language that may be used to solve a problem&gt; do you think also know &lt;some other language that may be used to solve the same problem&gt;? What is your point? Just because you have a preference to one PL within a domain you think that others within that same domain should be disregarded? Assuming that someone using CS has an appreciation for the language syntax, then improvements to ECMAScript would not cause that someone to switch to JS since it is still not offering what was so enticing about CS to begin with. I also have never programmed in Brainfuck or Whitespace, I asked that of you because I was questioning whether or not you're familiar with actual esoteric languages. &gt;An esoteric programming language is a computer programming language designed to experiment with weird ideas, to be hard to program in, or as a joke, rather than for practical use. http://esolangs.org/wiki/Esoteric_programming_language &gt;An esoteric programming language (sometimes shortened to esolang) is a programming language designed to test the boundaries of computer programming language design, as a proof of concept, or as a joke. The use of esoteric distinguishes these languages from programming languages that working developers use to write software. Usually, an esolang's creators do not intend the language to be used for mainstream programming http://en.wikipedia.org/wiki/Esoteric_programming_language But please, go on believing that CoffeeScript is esoteric. 
Well, that was pedantic. Ill reply later as this could be an interesting discussion.. on mobile now. 
&gt; it takes about two full seconds for me to return to the front page from a discussion using my Back button Possible easy solution: add an "open comments and posts in new tab/window" feature to toggle. On a side note, you may want to try to find a way to display Reddit's ads as well or find some other way to support server costs (RedditGifts links? I see you implemented Reddit Gold.). Don't want to just suck the well dry.
Paralax Ads
Almost all of them do, only some obscure things don't
Assuming it won't recover quickly or at all, and you are only it for short term gains. Fuck those people anyway. Some of us actually want bitcoin to succeed as more than a speculative investment.
The problem is that the OP forgot to not do this.
Nice.. Why did you choose Backbone over, say Angular?
Something else: When your content is loaded and you scroll down a little, then switch tab and then switch back to that tab, it bounces the screen down. Really slick though, maybe a nice loader to replace the small loading wheel would good visually.
love!
Although you could check the source code and run it locally :)
http://derbyjs.com
jqLite cannot stand a real comparison with Zepto though..
WHAT NEXT BEN, MOON-MOON?
Hmm it works great when I get logged in. But the first time it said "you are doing that too much. try again in 9 minutes." and then when the countdown was completed I could log in. Now when I went to the site again, despite the "remember me" box being checked earlier I was logged out. And when trying to log in I got "you are doing that too much. try again in 1 hour." This is going to be a long wait. Edit: And now a ctrl-r of the page showed me as logged in. Weird. 
Anywhere we can report bugs? * Navigate to: http://redditjs.com/r/AdviceAnimals/ * Click "All" on the Top Nav bar * Sidebar is still showing the AdviceAnimal's on EDIT: Seems like it only reloads the content, happens when you change subreddit from the navbar.
Nice, but I wouldn't call it 172 lines of javascript if you are using jQuery. jQuery itself is nearly 10,000 lines.
Ho, right, I did not thought of that, I might try to remove jQuery and see how it would might be as a "challenge" for myself.
Thanks! It's not yet but it will be once the project is moving along at a faster pace. We will be open sourcing the web API engine, the Angular JS web client, and the C# code (Unity3D) for both servers and clients. Our goal is to make it easier for cross platform, MMORPG games to be built.
I would definitely do it, its a massive thing to ditch the jQuery 'crutch' and it is so much more rewarding.
You are right, it currently only removes the custom CSS when you visit the front page. I will fix this shortly.
I will have to make an option to hide NSFW posts in gridview/full views. There is an option in the preferences where you can turn off the auto-popup images/videos in the comments. You can access the preferences here http://redditjs.com/prefs/
Awesome. Cool website. :)
...well, I thought it was funny.
So awesome!
From my experience this has too much of a negative effect on performance and the application ends up feeling slow or unresponsive. We tested on android and as the article states, this may not be a problem when creating an iOS application.
http://blakesnow.com/wp-content/uploads/sites/2/2013/10/url-1.gif
Jesus I can't believe people still know each other from EQ. I've forgotten like.. Everyone. On purpose.
If you really cared you'd offer a relocation package. All the cool kids do. And I'm not even joking.
I see your Angular posts aren't doing too well in /r/programming, you might find /r/AngularJS a better place to post.
I did a benchmark for bindall (this) and explicit binding of each method a while back http://www.reddit.com/r/javascript/comments/1lksqz/backbone_and_requirejs_module_definition_question/cc0dyz0 The performance tradeoff seemed to be negligible (100ms when initializing 8000 objects at once). It also helps keep mental overhead low.
Ah, I see it on the posts. Missed it there. Nice work!
So basically it would save loading a subreddit with 1000 posts (max amount per subreddit) about 8-10ms~ this might be considered worth it because slower machines/mobile/ie8 might take even longer, so it could save 50ms~ for them. Right now I'm in optimization mode for RedditJS and this could be a great starting point.
THIS IS REVOLUTIONARY
I've just finished building an app using [moobile](http://moobilejs.com/) library built on mootools aimed at Android an iOS devices. More work than usually went into it but it's hard to tell apart from a native app at this point. Only the lowest end devices 2 or more years old are obviously under performing on Android, the rest are, as I said, hard to tell apart from a native app. Making it snappy on Android took some special tweaking and attention but once you're familiar with the do's and dont's it is possible. Try the demo on the page. The Android one is not as polished but you'll see what I mean.
Realized there's no sound for Firefox, it doesn't like the data urls for the mp3s =(
Why?
Wow I did it, and now I have 101 lines of JavaScript. Don't know how but, I manage to remove ~70 lines of code removing JQuery and using only javascript. The only external dependency is Google Feed API.
On Chrome I get this error: * Uncaught ReferenceError: nnn is not defined
So strange they don't have OAuth2 yet on reddit.
Last time I worked with phonegap was via Sencha Touch 2. If you're trying to build a graphics intensive app, phonegap isn't ideal but if its a data centric and or business intelligence client, it works great. Downside is that PhoneGap is being superceded by cordava and they've done a few weird things ( the phonegap github repo is GONE in favor of a cordavo portal which I don't see having a very bright future ).
In my experience, the downsides for Phonegap are different on iOS and Android. On iOS, you don't get to use the Nitro JS engine, so Javascript execution is pretty slow. On Android, the JS runs plenty fast, but the browser can be *very* slow at DOM manipulation (especially scrolling, on pre-4.x versions). So, while you *can* run the same code on both, you end up doing some platform-specific tweaking to get the best performance.
BOOM! Good job ;)
&gt;Iâ€™ve posted this on Reddit Javascript and Wince made me realize that by having jQuery as dependency, the 172 lines of code was not a fact, since jQuery have 10k LoC. . &gt;This is the first project Iâ€™m starting since the sale of my last SaaS. It's surprising you initially considered it 172 lines while using jQuery, yet have sold software before. 
I see what you are saying. But xamarin isn't a good alternative to phonegap, since it's c# only. What's really attractive about pg is that it's just HTML. It's good for quick prototypes that eventually can be rewritten to native. 
sorry to be a spoil sport but isnt using the google feed api actually cheating a little? Lets see something without any external api
Good point, I might tried that as well.
Well laid out article + code. Main things wrong: * Using the same salt for every password hash, which makes the salt useless. You should generate random unique bytes using [crypto.randomBytes](http://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) and store them along with the hashed password in the database. * Bcrypt is an acceptable algorithm, but if you want an algorithm that you can easily tweak to change the brute force computational requirement to break it use [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2), which is just a call to [crypto.pbkdf2](http://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_callback). * Using the synchronous calls to bcrypt and therefore blocking every time a user authenticates, which will be on every login and every secure request. Can read more [here](https://npmjs.org/package/bcrypt-nodejs) about how to use asynchronous calls. Normally this wouldn't be so much of a concern, but this is Node.js and bcrypt would likely be one of your app's most computationally heavy operations (depending on how its used) I "think" the cookie is encrypted using express's secret key, but I don't know for sure because I don't have much experience with Passport or Express to know their internals. Serious props to organizing and explaining the various parts clearly, not easy to do in regards to authentication. If you want to read a really great guide on web authentication, here's a very thorough one on [StackOverflow](http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication#477579) and one about [using crypto in Node's standard library](http://www.boronine.com/2012/08/30/Strong-Password-Hashing-with-Node-Standard-Library/) Disclaimer: I recently did a talk on Node + Authentication, source code from that talk demonstrating the principles I mention above is [here](https://github.com/kaeawc/node-http-auth-example)
That is a truly impressive piece of work. One of the best demos of the capabilities of JavaScript I've ever seen.
This is very cool but reminds me of the Jurassic park line about working so hard to find out whether or not you could, no one bothered to ask whether or not you should. What was the reason for this? Is it in use anywhere?
No. They aren't. I'm still tweaking the chase logic. However, the size of the web browser window determines the success of the Zombies. Edit: yeah. The slowing down as they get near humans is completely vexing to me. I'm not great at physics, but I'm trying to figure it out. I've been tweeting with the creator of flora to see if he can recommend something. 
Off topic, but I think you mean "naÃ¯ve".
Author of the project here. I posted it in r/Astronomy instead... silly me. Still, happy to see that someone thought the project worthy enough to post it here! yaph, may you reap good karma!!
I read it as "1 hour and 172 lines I had to write". You didn't claim the whole project/download was that little. It's all fair to use existing libraries (and as we all know sometimes stupid not to). Good work! :-)
You used Phonegap for this? I'm curious to finally try it out 
I think Meteor has the edge on Derby at the moment, it's just too easy to get started quickly.
Great points. I'll be changing the tutorial to use async calls thanks to your great explanation. Will also adjust the tutorial to recommend saving a unique salt for each user. For bcrypt, can you just change the work factor for it? Thanks for the info and links.
It's 2013 and you're making something that works only on chrome ? C'mon.
It actually makes them seem really smart to me. They just sit there and wait for people to run away from the moving zombies. Easy lunch.
Related to this? It looks like the zombie is passing a "threshold" (m&lt;1?) and the speed decreases. SensorAnimal.prototype.getActivationForce = function(agent) &gt; *m = distanceToTarget/agent.maxSpeed;* &gt;desiredVelocity.mult(m);
I've updated the code a bit. It works better. Zombies are now slower than humans but are better at seeking. 
The update looks a lot better. Still some funny behavior (my favorite thing is when the occasional person runs straight for/into a zombie), but the overall picture is pretty cool. I love the way that groups of zombies break apart and reform. There were a few times when it almost looked like there was intentional swarming/herding going on.
Hi. I created 3D tic-tac-toe with THREE.js. Check it out: http://blog.tempt3d.com/
This is really an awesome project, chapeau!
Quite fantastic, thank you for this.
I see no use case where I would ever do this, but how many people saw the documentation of the code when this was posted on HN 4 days ago? http://oridomi.com/docs/oridomi.html **That** is really quite an impressive effort.
 JS-Interpreter offers several advantages over simply calling eval(): * It is sandboxed to allow execution of untrusted code in complete safety. The code has no access to the DOM unless you create an API. * Code can be executed step by step, making infinite loops a non-issue. * Step by step execution also allows real-time execution of multiple isolated threads without web workers (hello MSIE 9). * Eliminating eval() allows one to create Chrome Extensions and Chrome Apps. 
This is amazing! As someone who has just started learning programming and javascript I can't even begin to imagine how this was done. But it excites the hell out of me to learn how. 
Thanks. I've posted it there.
Great article, thanks for the link. It is certainly an exciting time for JavaScript developers. A lot of my co-workers still look at JavaScript like the red headed step child and don't share my enthusiasm.
This seems quite silly to me given that you can find the window width at any time with Javascript. You just need to account for that in your Javascript (which can easily be done given the appropriate time put into your Javascript / jQuery). On top of this, there are few things that should rely on Javascript with actual Ui implications. While Javascript might control the action css should control the classes at that point and media queries should make the relevant adjustments. Javascript should be used to place elements but not to size and position them. That is the entire point of css. 
Post the code
code example?
Use JSFiddle to show an example of your code not working.
[JQuery can do that](http://api.jquery.com/each/).
What about it makes it so good in your opinion?
There's a few problems I can see here, but it sounds like the core of the issue is your showings &amp; run time selectors like : "td:nth-child(2)". To explain: You're not actually using the iterator (var i) in the for loop you set up, so your for loop just runs the same code showArray.length times. $("td:nth-child(2)") will return an array of all second children of td elements in the page. You can see this kind of thing by using console.log(showings) or something. Anyhow, in your for loop you can get the children of the row you want to work with by using the showArray[i].children attribute, for example: var showings = showArray[i].children[1]; //will return the second child of the current row Having said that, you may need to wrap the element with the $ function to extend it with the jQuery methods... for example. var showings will contain the HTML td element you're looking for, but you need to extend it with the special magical jQuery methods by wrapping it in the $ function so: var showings = showArray[i].children[1].text(); //wont work var showings = $(showArray[i].children[1]).text(); //will work Hope it gives you something to work with anyway. (disclaimer: never really used jQuery so kindof pulling this out my ass.) 
I wouldn't even use the table itself to do the calculation. You should be storing this data in a JSON object or an array of some sort and iterate through that structure instead and store that data in said object/another array, and render those values out into a table. var data = [ { showings: 5, runTime: 230 }, { showings: 3, runTime: 233 } ]; for (var i in data) { //you can do calculation here or while you're spitting out your table, set the data directly data[i].hoursMovieShown = data[i].showings * data[i].runTime; } Another approach is you have a handlebars template that accepts the above data (+ the hoursMovieShown calculation) and it iterates through that to build the row for the table 
The direction the dots are moving in.
Try inspecting the WebGL calls with [WebGL Inspector](https://chrome.google.com/webstore/detail/webgl-inspector/ogkcjmbhnfmlnielkjhedpcjomeaghda?hl=en)!
Somebody doesn't like hot linking. I bet Ben could fix it. 
???????
This is very cool. So you're using acorn for parsing/lexing, then looping over the tokens and compiling them back into JS, which you then execute in a new scope? Also is it compliant with an ES standard?
I love that we have that press release. Thank you archive.org! &gt; Java programs and JavaScript scripts are designed to run on both clients and servers, with JavaScript scripts used to modify the properties and behavior of Java objects, so the range of live online applications that dynamically present information to and interact with users over enterprise networks or the Internet is virtually unlimited. Awesome.
Good point. I've fixed it. Thanks.
You could achieve the same effect with the ([minimally supported](http://caniuse.com/#feat=css-filters)) [CSS `filter` property](https://developer.mozilla.org/en-US/docs/Web/CSS/filter#blur(\))
Really? On crome I get * Uncaught SyntaxError: Unexpected token :
This sounds like a cool project for someone to build. Maybe I will if I get bored one day :)
I'm playing with [amMap](http://www.ammap.com/) right now, I like it. I always seem to answer my questions after I ask them, even though I try for hours prior. Very basic functionality is in place right now. You can put in a query and it'll show recent tweets and where they were tweeted from.. no DB in place right now but I plan on doing that! I'll upload it tomorrow night if you'd like to see it :) 
Why don't you use .each(...)? $("tbody tr").each(function(){ var cols = $('td', this); if (cols.length &gt;= 4) { var hrs = parseInt(cols.eq(1).text(),10) * parseInt(cols.eq(2).text(),10) / 60; if (!isNaN(hrs) { cols.eq(3).text(hrs+' hours'); } } }); 
Thought this was another "Javascript to Javascript Compiler" joke, was pleasantly surprised.
No code gets compiled back to JS. It is a full-up interpreter. Otherwise isolation couldn't be guaranteed (say the code decides to overwrite prototypes on Object). There are still some missing features (listed in the documentation), such as case statements, regex, and exceptions. But they are being added one by one.
[Leaflet](http://leafletjs.com), learn it, love it
Um well bravo on the over engineering, but since it only works in Firefox, you could just use yield. Or just learn to program async , Firefox has promises.
On modern ios devices i have never been limited by the lack of Jit. It's usually Dom manipulation that kills you. 
Nice title, by reading it I wonder how node js will land in my browser :-) In a different topic : - How composer is going to replace PHP - Why CPAN is better than PERL 
Yield and callbacks don't do the same thing, yield literally does exactly what this library does, pause execution and resume it later , callbacks are for returning values asynchronously. Yield is slow because it is new. Both are faster then what you did here 
Yeah... Seems silly to me as well. Trying to find examples where you would want to do this leads me into what I consider bad practices and something I would have whomever wrote the code redo it before moving it into the trunk. I could only think of one thing that you might possibly need and that could be a media query for a print page, but that can be handled in other ways if it needs to be handled at all...
would either of these do: https://developers.google.com/chart/interactive/docs/gallery/map https://developers.google.com/chart/interactive/docs/gallery/geomap
"Node.js is another client-side scripting language" Always wonder why people are so eager to show off their ignorance! And if I were to consider this post to be sarcastic in nature, I'd have to say that the author really needs to work on her sarcasm
take a look at my friend's app. Might help https://github.com/NathanielWroblewski/planet_rock
you need to get an app key from facebook. then you can GET the graph for your facebook page, and pull the like count. from there you can do what ever you want with the number.
Yeah, me too. This is actually pretty useful.
You dont actually need an app key, that data is publicly available. You can do an graph request to the api like this, where you replace the page id by your own. https://graph.facebook.com/114219621960016?fields=likes You can also use the SDK's to fetch this data with the api handlers. 
Do you really need an app key for the like count? http://graph.facebook.com/cocacola
[Sure could](http://jsfiddle.net/aPM8d/2/); and the widening blur looks nicer than the 'fading-in' one, to my eyes. The original way seems to perform better, as well as being better supported, though.
I am trying to make a prompt. when I type stuff, what is previously written should show above the prompt. Because I am going to through in commands and what not, I could streamline the process by having a function that changes what is to appear above the prompt, and putting that function into the if statement for each command. Also, I am using a form that turns up false each time i submit so it doesn't go to the next page, if there is a work around for that, I'd also like to know that as well. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script&gt; String before =''; function Past(previous) { before=before+"&lt;br&gt;"+previous; } function InputCommands() { var command=document.forms["form"]["input"].value; Past('command') document.getElementById("Before").innerHTML=before return false; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form name="form" onsubmit="return InputCommands()" method="post"&gt; &lt;table&gt; &lt;tr&gt; &lt;td colspan="3"&gt;&lt;div ID="Before"&gt;&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &gt; &lt;/td&gt; &lt;td&gt; &lt;input type="text" name="input"&gt; &lt;/td&gt; &lt;td&gt; &lt;div ID="error"&gt;&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt;
posted it as top level comment
&gt;Oh Great! You have even more great ideas. &gt;Would you leave some comments below and let us know? &gt;Thank you! node fibers? Example implementation: https://github.com/scriby/asyncblock, meteor
As stated in the article: &gt; People could argue than one could use window.innerWidth measurements but that's simply trying to translate media queries to JS conditionals and that's a nightmare too. What's also nice about this is that you can use the same type of system for any type media query signifier, like checking for portrait or landscape orientation. Other things you can check in this method that you couldn't easily do with pure javascript: // Indicates the resolution (pixel density) of the output device. @media (min-resolution: 300dpi) // Indicates the number of bits per pixel on a monochrome (greyscale) device. @media monochrome // Describes the aspect ratio of the output device. @media (device-aspect-ratio: 16/9) // Indicates the number of entries in the color look-up table for the output device. @media (min-color-index: 256) // Indicates the "media type" or type of device @media screen @media handheld @media projection @media tv // Describes the scanning process of television output devices. @media tv and (scan: progressive) // Determines whether the output device is a grid device or a bitmap device. // If the device is grid-based (such as a TTY terminal or a phone display with only one font), the value is 1. Otherwise it is zero. @media handheld and (grid)
There's also some sort of bias happening near the edges. Lots of captures happen at the edges. 
Oh I thought you mean the implementation of this library, it could have been implemented with yield. I realized that I didnot emphasize my original intention, allow me to explain here: https://github.com/coolwanglu/hypnotic/wiki#is-it-worth-to-introduce-so-much-overhead-only-for-sleep-
I wrote an explanation here: https://github.com/coolwanglu/hypnotic/wiki#is-it-worth-to-introduce-so-much-overhead-only-for-sleep- Hopefully that makes sense for you.
I think the component patterns is a better idea then MVC for making complex UIs, Take a look at [React](http://facebook.github.io/react/) which is gaining popularity lately. 
Cool! Reminiscent of [SlowmoJS](http://www.reddit.com/r/javascript/comments/19vd3p/slowmojs_view_the_stepbystep_evaluation_of_your_js/), and another project I saw on here sometime this year but can't place atm.
Didn't know this. Thanks!
If you want your puzzle to actually remain reasonably secret I highly suggest calculating likes as well as generating the resulting image on the server side.
These are probably the same person, as they _only_ post webix.com links: * /u/ya6adu6adu * /u/kelluvuus No real discussion out of either of them too. It might be worth getting reddit to ban webix.com wholesale: * http://www.reddit.com/domain/webix.com/ Out of 16 submissions, they're sitting very close to 0 net karma. I should point out that the webix software [is not always free](http://webix.com/licences/).
Well not the best place to ask as it seems like you need a solution that need HTML, CSS and JavaScript (maybe not needed if you know you CSS) I think you would be better breaking these down into tasks and searching them online e.g. how to change a HTML element on clicking ....
ah what a great joke post , that was a joke right ?
Should be pretty basic. Create a developer account. Get App Key. Add Like button to page. You can use FBML to get the like count number. Get that number, run some events against it.
&gt; I'd be more wary that Bookshelf so easily placed transacitons in with no concept of pooling. Curious what you're referring to there, Bookshelf has connection pooling. http://knexjs.org/docs/clients/pool.html
Uhhhhhhhh... "About Clock 16 - When I was around 6 years old I encountered a stray cat on my driveway, which had, as I recall it, a gaping wound, inside of which I could see many white cells packed, each with a tiny, wriggling thing inside it."
thanks, I'll h ave a look - appreciate the heads up! edit: one of those two guys was the one who was banned / inspired this post.
Nice of you to share. Strange but nice clocks as well
Haha, I kind of gathered that one of them was banned recently, thus causing them to create a new account. Thanks for looking into it!
Thanks - I have a very demanding day job and the clocks were a good way to work out Gazelle in bite-sized chunks while providing a creative outlet.
A lot of companies do this, especially music artists revealing a new album or something. The image starts out as one color, then as people start to like the thing, it starts resolving into an image. At first, it's really blurry, but as time goes on, it gets sharper and sharper, until it reaches the "goal" and becomes fully resolved. I don't think this is doable in JS, but you could generate the images on the server side using GD or ImageMagick or something along those lines.
Ah, I see. Thanks. For the readers: &gt; Yes, we do have native sleep() with fibers, Rhino, or even XPCOM, but they rely on special extensions for interpreters, which are not *general solutions*. &gt;On the other hand, Hypnotic is written in pure JavaScript. Did you know that you can run print(sleep.toSource());? Edit: You're correct, but if it's general solutions you're after, doesn't Hypnotic only work in Firefox (for now)?
as with everything, it depends on what exactly the OP is trying to do. fan gates, like buttons on the page, whatever. if he's just grabbing the like count of a random page, then he may not need a key. but honestly, of all the things dealing with facebook, getting a key is not that hard.
http://thetorches.net/ link on your website doesn't work. Nice clocks.
personally i'd use browserify and grunt-browserify. but then, i'm biased because I fucking __loathe__ require.js. I did a presentation on browserify that you can find here : [browserify slides](http://vertice.github.io/browserify-slides) Left/Right to navigate between slides. The presentation eats itself, in that it's built using browserify, and pulls it's own code into the build to use as live code examples. You can see the grunt-browserify part here : [grunt.browserify.js](https://github.com/Vertice/browserify-slides/blob/master/grunt.browserify.js) You can just concat all your browserified bundles into a single file, and you could also specify --standalone if you want to wrap it in universal module definition format, that can be used by require.js.
D3 has become my go-to data visualization library. The learning curve is a bit steep but there are a ton of examples to get you started. ex. https://github.com/mbostock/d3/wiki/Geo-Projections
I think you need ssl to use the Facebook API, but you don't for these "public" requests.
Let me say it might be in the future, and it's proof of concept of a pure JS implementation. With extra efforts some Firefox-specific features may be relaxed, but I'm not sure it's that strongly motiviated, or maybe let's just wait for a few years.
Have you looked into [grunt-contrib-requirejs](https://github.com/gruntjs/grunt-contrib-requirejs)? But personally, I'd suggest browserify as well. It's awesome.
They're very interesting indeed! And quite different. Out of curiosity, do you still use Kran? Or was that a one time try? 
I did mean that you could implement this with yield and no interpreter. 
Judging by the comments on that site, I'm guessing this is some sort of troll article? Very funny.
all he needs to do is make markers with the tweet lat longs and bind a popup with the tweet, maybe cluster them with the cluster plugin 
When was the last time you found yourself doing 100,000 attribute changes? These numbers are meaningless unless compared relative to the rest of your web app. It's far more likely that repaints/flows and CSS effects are causing a greater deal of slowness than jQuery.
I'm sorry that there wasn't any feedback from the community.
this looks interesting. So, before I try to use it, let me try this out in my head with the example code above: // mylib/models/book.js module.exports = Backbone.Model.extend(); // mylib/views/bookshelf.js module.exports = Backbone.View.extend(); With these two browserify modules, how can I create a js file that looks like: var mylib = { models: { Book: Backbone.Model.extend() }, views: { BookShelf: Backbone.View.extend() } }; it seems looking at the documentation at https://github.com/substack/node-browserify I could potentially pull this off using the browserify API: var fs = require('fs'); var browserify = require('browserify'); var b = new browserify(); fs.readdir('./mylib', function(file)) { b.add(file); }); b.bundle(); Well, something like this anyways. I'm still not certain how I can get the structure I want.
yes, but I can not see a way of using it that doesn't force me to maintain a list of modules.
With the dev console open, you already get this information. I don't see the value of being able to see this information from sites I cannot control.
I'm sorry you didn't get any feedback from the community.
I would consider keeping track of number of likes on the server side. Then I would consider using a [canvas](https://developer.mozilla.org/en-US/docs/HTML/Canvas) to actually draw the image. I like using [easelJS](http://www.createjs.com/#!/EaselJS) to help with canvas manipulation.
Missing html and head tags (though this may be due to jsfiddle). extra div closing tag at the end. Errant "ow." in the js code.
I totally agree with you. Repaints will, in some cases, cause more slowness than jQuery. So will performing complex calculations without a web worker, so will synchronous XHR, so will using CSS effects without forcing hardware acceleration. There are many things that can make your application slow, and, when optimizing performance, you should consider what your application is doing and what bottlenecks may be stopping it from doing it faster. If you read what I wrote above, you'll realize that I prefaced my presentation of the data by saying: &gt; If you're doing the same thing over and over, it can add up. To answer you question, how about an `onscroll` handler? For instance, in [this fiddle](http://jsfiddle.net/aPM8d/1/) from earlier today in another reddit thread. It's not an attribute change, but a style value change. The handler is triggered about 25 times per second. Here's [the same thing done without jQuery](http://jsfiddle.net/lazd/5eyJV/1/). Is performance better? I don't know, you decide. Are there better examples? Sure, see [Learning from Twitter by John Resig](http://ejohn.org/blog/learning-from-twitter/) for a real-world example of when jQuery, combined with bad programming practices, can cause performance problems. To summarize my opinions on the subject: * **Do I recommend developers abandon jQuery because it is, without a doubt, slower than native DOM methods?** No, that's ludicrous. It's a tool that has an important place in modern web development. * **Do the benefits of using jQuery outweigh the performance implications?** This depends entirely on what you're using it for. In some cases, absolutely not. In some cases, absolutely yes. * **Let's say you are using jQuery for something that would be more performant if done with native methods. Does that mean you shouldn't include jQuery on the page?** No. It means you should use the right tool for the job. You're likely doing other things that can benefit from jQuery, so use it where appropriate. The fact is, there is a performance hit when using any library that wraps native functionality. Developers should be mindful of this fact and should not remove it from their reasoning when optimizing performance.
All numbers in JavaScript are 64-bit floating point numbers. [Read this](http://www.hunlock.com/blogs/The_Complete_Javascript_Number_Reference).
Hey paldepind, definitely still use Kran - I should make a note of it in the introduction. Kran is really great! I'm definitely going to make games with it sometime.
I'm glad you like it. Which one are you using?
Very nice! One thing to note-- when i'm trying to right click and drag to a planet, the more i'm zoomed in, the more jerky the view becomes, thus making it near impossible to look at every planet
Not sure why it's slightly cut off, but I still like it! http://i.imgur.com/xNLb9kM.png
Hard to do in a small company, but its never off the table entirely.
So, I work heavily in Chromium's renderer and may be able to shed some light on this. If i'm understanding this article, and perhaps i'm not, its referring to side-stepping. Side-stepping in browsers involves not using separate pipelines but a single pipeline for rendering. Let me give you an example, CSS 3D transforms work in a different rendering context than WebGL, which work in a different context than Video layers, which work in a different context than regular rendered divs and html. If you don't believe me turn off hardware acceleration then pull up a 3D transformation demo, you'll notice some elements won't render. This is simply because hardware acceleration is required for the 3D transformation pipeline, if its not available, nothing happens (well, yet, until Aura is finished). The different pipelines that render elements in HTML need to be merged, this is through the RenderLayers and compositing, if you have too many different contexts, you'll get a lot of rendering layers, if you have a lot of rendering layers, you'll require a lot of GPU memory. If you have a lot of alpha in those rendering layers your GPU (and potentially your CPU) get overtaxed. End result, is you have WebGL, 3D transformations, Canvas drawing with primitives, and regular html being slow, as hell. What i'm assuming this article is stating is it unifies all of the capabilities of EACH rendering context into one context. (perhaps it has bindings that re-create WebGL in simple HTML with 3D transforms to force one context, who knows). This seems HIGHLY unlikely but if they've accomplished it that would be pretty impressive (as of yet, Google, Apple and Adobe haven't even thought of trying to tackle something on this magnitude, combined). With all of that said, if A) I understand what they're referring to and B) they actually were able to pull this off in a standard way and C) having one rendering context is truly faster than multiple (this could be debated) then it'll be quite an interesting technology. But i've made a lot of assumptions here.
Well, the clock itself is in the center div of a three column layout. I've never used KDE web slices before, but if you can run some user scripts you can delete all the other divs, and then it should be in the center. Alternatively, you can look at the javascript and call the clock constructor yourself and get it in the right place. If you need a hand, let me know.
The normal operation of browserify is to walk the AST (abstract syntax tree), and bundle the code as you require() it. Grunt has the functionality to create bundles using wildcards (see the templates/*.jade in the grunt file i linked to). even if you bundle them via a wildcard, you still need to require them to use them. I usually follow the practice of just having a models/index.js, views/index.js etc. So my code would just require('./models') to get them all. I should warn you that trying to automate the requiring part of the equation is actually fraught with danger. The order you require things in matters. It's why I feel require.js misses the point. What's easier.. doing require('module1'); require('module2');.. or trying to describe this all in a declarative manner that causes a directed acyclic graph to be built and walked through .... before your code can even run? If the model extends another model for instance, nothing is stopping you from doing: // models/submodel.js var Base = require('./base'); module.exports = Base.extend({}); 
So I read the second article and thought i'd add additional points: Most 3D rendering is linear algebra, including animation. However layout (which is not rendering) is especially hard since its rule based. Its my understanding they're basically recreating the capabilities of WebGL and animation frameworks purely using 3D transformations and regular HTML layotus to produce better performance while not mixing contexts. It's smart, i'll give them that. But it still has inherent problems, mostly in lighting. I suppose its possible to pull this off. So for the TL:DR; Yes, fam.ous will be much faster than native rendering (when mixing contexts) through side-stepping. No, fam.ous will not replace WebGL/3D transforms, it relies on 3D transforms that are built in the browsers renderer (and HD XL). No fam.ous will not be able to completely replace WebGL and existing rendering technologies, they don't support depth buffers, color buffers, compositing (more than alpha opaque layers), various lighting. No fam.ous will not be able to do native HTML rendering faster, ever. period. No fam.ous is not somehow rendering things, its just replicating some features of WebGL faster using 3D transforms. 
From the browserify documentation: &gt;All of the modules that main.js needs are included in the bundle.js from a recursive walk of the require() graph using required. I'm beginning to understand my own confusion. I am building a library, not an application. There is no entry point, no main method/function. It seems to me that, whether I use Browserify or RequireJS, I am forced to, upfront, define the entire list of modules available. For ordering I would assume requirejs or browserify would sort that out for me. All I really want to do is say "here is a directory holding all my js code, read it, figure out what depends on what, create a single js file from it". So if models/Book.js depends on models/Paper.js which depends on models/Tree.js, I would expect whatever tool I use to put together a single JS file puts Tree first, the Paper, then Book. And to pull off my namespacing requirements, so far I can't find - or can't understand - a pre existing solution to this. Another thing, if I use browserify, does this mean that everyone else who uses my lib is forced to use browserify as well?
Change `$('#location')` to ` $('#location, #term, #level')`. Also, this is jQuery + javascript, which is different to just Javascript.
Relocation costs can be, what, up to 15k or so? (guessing, not sure how much it costs to get someone's furniture across a country). Maybe it's even cheaper to just buy 'em a new set of furniture :) It might well be a worthwhile investment, considering how much money someone like that is likely to bring in for you, right?
at some point, that code will have to be require()'d to be used. Which means that your library consumer will have to at some point go require('mylib'), or even define(['mylib'], function() {}) or even just include script tags into bare html. At least with browserify, it doesn't matter what order the files are included in the bundle generated, what matters is the order they get interpreted in. Either way, inside your library, you will need to explicitly sort out the order things need to be included in. Neither tool will ever be able to read your mind. If you try and extend a model that hasn't been defined yet, you will just get an undefined error. Where they differ is that : 1. require tries to solve this in a declarative manner, because their aim is to do it at runtime. 1. browserify does this in an imperative manner, because there is an assumption of there always being a build step. If your goal was really to allow the most people possible to use your library, you probably should only be looking at globals variables, and not messing about with require.js.
How long did it take to build?
Yeah, I guess you'd need to maintain a list of the bottom-level modules anyway, if you just wanted to export all the modules for someone else to use. Sorry, read your posting pretty quickly at work today, You could just do concatenation then - if you're not really looking to use require() etc anyway - and just glob the whole directory and concatenate it? eg; //mylib.js mylib.version = "1.0"; //mylib/models.js mylib.models = {}; //mylib/models/book.js mylib.models.book = Backbone.Model.extend() which would result in a file that's functionally like what you wanted, while keeping it sort of manageable. You could just go for fragments of the file as well, if you wanted, but I'd imagine managing that could become pretty tedious quickly as well. To be honest; I'm not really understanding the problem correctly - and it's probably because of my thick skull.. What do you mean by classes/modules? Is, for example, your examples mylib/models.js a module? To me, it kind of seems you're looking for a way to do [partial classes](http://msdn.microsoft.com/en-us/library/wa80x488.aspx) with javascript, as your example is more about splitting a javascript object over different files, am I correct? Do you yourself need to use these modules as well, or is this just something you'll be generating for the third parties?
A couple of weeks. I was intending to only support a very limited subset of JS, but kept going. The challenging part was that due to the step-by-step execution requirement, I could not use any recursion. Instead I needed to keep all state on a stack.
Looks cool. But I hope I never run into a site that actually uses it :)
&gt; Consider how you can implement some animation like this? I would use requestAnimationFrame, then check elapsed time and increment the draw pointer accordingly to draw the new glyphs.
Fucking Steve!
Oh..javascript. we love you.
It's just my purely subjective sense of aesthetics.
Big benefit of TypeScript comes from tooling support that can provide more information about your project and code. You have the compiler catch many mistakes and good IDE's (Visual Studio or WebStorm or whatever) boost that more. The downside is that this allows you to can get more complexity more easily. It is easy to get lost in going full Enterprisy OO. And it really is different in use from regular JS, not in the least because of the ES6 constructs (module/class/arrow-fucntion etc) that you need to get used to. Also it can be a little obnoxious sometimes and force you to do things in convoluted manner to make the compiler happy (just like Java, C# or AS3 do that, but without the runtime typing benefits). You need to be serious about coding and maybe have some wider OO experience to keep a handle on the amount of classes. And good (english) language skills because if you have a type for everything things like naming become very important (ConcreteObjectFactoryManagerImplementorController) But I like it, it is like AS2/AS3. Still I'm waiting for a new project to use plain ES6 (via traceur): TS showed me those new ES6 constructs mixed with Promises are friggin' sweet, and without typing it will be really smooth going.
Just wanted to say thanks for the in depth review and informative analysis. I really enjoyed reading your comments and gaining a better understanding of rendering in browsers. 
It most certainly does; me and my colleague just confirmed it by reading their annotated source code yesterday. If you specify a model on a view, and let's say the view's tagName is "tr", Backbone will decorate that tr with attributes the names of which are all the model keys, the values of which, the model values.
* https://developer.mozilla.org/en-US/docs/Web/API/Promise
Ahh it's disabled by default in FF25, enabled in FF27. Thanks. Damn, they implemented it differently than Chrome and the WHATWG spec... Not too hard to work around, hopefully it's fixed by the time it's enabled in V27
I've been using it for several months now, and the behavior I described has occurred in our application, and we are not using the attributes option; perhaps we need to explicitly turn it off which would be sub-optimal. The very fact that such functionality is there shows just how bad Backbone is, that they would actually ever choose to conflate the model and view. It's had it's day and it's time to move on. Reading source code is not evidence that I've not used it and your reaction is like a fanboi's
"To set the model associated to to View, you use the 'model' option when creating a view instance - and that has no effect on the DOM whatsoever." Which is what we've done, and the view's tr tag get attributes with values just like I described. Save it dipshit
Even though you're being a complete asshole about it, look at the source. [look](http://plnkr.co/edit/mj4XwXK1U0hX8YHOLg0B?p=preview) Since apparently you're stuck using it, maybe you'll find this useful. 
&gt; The fact is, there is a performance hit when using any library that wraps native functionality. Developers should be mindful of this fact and should not remove it from their reasoning when optimizing performance. This. My only point was that there seems to be this idea that we should completely stop using jQuery either because misunderstood benchmarks tell us so or simply because we can.
Use setInterval instead of setTineout. And get rid of the while loop. I'd write the actual code but A) I'm on my phone and B) I had surgery today and I'm still really hopped up on Hydrocodone. 
Why do I need a Sourceforge account to browse the repo? :| 
I'll give it a shot when I'm not drunk! Thanks. 
sounds interesting, checking this out 
Tables present an unusual problem. You should consider using DIVs and SPANs to make sure that your JS logic is getting there, and just gotta work out how to accomplish it with TRs and TDs. If you insist: http://stackoverflow.com/questions/14643617/create-table-using-javascript
Yeah, I feel the same way. My problem with Grunt right now is that sourcemaps are still a problem (see: my pull request for grunt-contrib-less). But it sure is great for big projects. I think a big part of my initial aversion, besides the nested objects being a little hard to follow, is the boilerplate from the yeoman html5 webapp generator is really complex. It helps to start with a small example like yours.
I believe that all the clocks are sufficiently non-linear that the answer is pretty much no, unless you start the clock at the exact same millisecond and it is the only thing running on your machine, so the timesteps are optimal and the same, which is likely to never happen.
The guy who posted the repo got made his commit history [spell out his handle](https://github.com/STRML).. Now that's dedication.
[I am hosting it here, I just need to tie the score to it.](http://chrismichael.info/Web%20Programming%20Site/quiz.html) 
Just realized he wrote a script to [push to a dummy repo](https://github.com/STRML/decorator/commits?author=STRML) regularly.. still cool.
I don't really see Typescript as a new language but rather a better way to write Javascript. For one, it is really trivial to migrate existing code to Typescript: just rename your *.js files to *.ts and run the compiler. This alone will give you jshint-like checks. What I really like is the ES6 syntax for modules, classes and lambda. No more hand-written Module Patterns \0/ But even the generated code is still very readable (in contrast to CoffeeScript). But of course it's the types where you can get the most benefit since using types well will help you write a robust application, especially now that generics have landed in 0.9. There's a lot of things in there that are better than in other type systems, like how type equality is implemented: for example, a class doesn't need to implement an interface explicitly, they just need to have the same shape to be compatible. Types can also be anymous, so you could create a return type like this: function createPoint (x,y) : { x: number, y: number } { return {x:0, y:0}; } That being said, I don't use TypeScript for every project. If there's only going to be a few js files anyway, I tend to write plain js. But for bigger projects I'd definitely recommend TypeScript.
I'm not so sure about it when there are recursive calls. I knew things like task.js though. Could you given an example or a pointer?
You sir, have some much larger problems than scoring a quiz... astronomically large problems to overcome really. You have to get basic html and css down before js will make much sense to you. 
I second this answer. Another solution would be to put a class on each of those elements and then you could just do: $(document).on('change', '.my-class', function() { // code goes here }). Assuming "my-class" is the name of your class. 
https://github.com/gelstudios/gitfiti this is what you'll like more :D
Sending karma to you: http://redd.it/1s32hg
[mdn article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators?redirectlocale=en-US&amp;redirectslug=JavaScript%2FGuide%2FIterators_and_Generators) basically if your script yields the time it wants to sleep (replace the sleep(x) with a yield x) then all hypnotic has to do is async iterate through that generator with setTimeout calls which would be - faster then using an interpreter, - work in V8, - more idiomatic 
Happy cake day OP.
How do you arrive at that conclusion? The node stuff was added by STRML to proxy to Healthcare.gov so that the code would "work"; see: https://github.com/STRML/Healthcare.gov-Marketplace/commit/91bfb974687da402d679562e65ea8ca63f067aa6 The original commit: https://github.com/STRML/Healthcare.gov-Marketplace/tree/9b8ddf2ddb12778475932e520e20b77106fe74ac There is also no backend code in that repo that does anything but proxy requests and fakes results. Unfortunately the actual official repo seems to be down, but I don't think that this demonstrates node was used on the official backend. Also, from the code: console.log('Healthcare.gov Marketplace Emulation Server running on port', settings.port); 
This is amazing, nice work
I love stuff like this. A few of my favourites after going for around 30 mins: http://i.imgur.com/GCyIMCb.png
Sorry, I'm new to sourceforge and haven't looked at all of the options. I'll get to that later ;D
PC Windows 7 64 bit Home Edition Chrome Version 31.0.1650.63 m Edit: Also on the first one I removed the grey background just for the pictures sake
Thanks for the info, I develop on Chromium in XUbunutu, so I have very little idea what they look like elsewhere. Canvas implementations still vary a lot, I gather.
Yeah, this is what I have found as well. I was hoping for the actual application code, as the misleading title suggests. I'm 99% sure the actual application code is Java
Yup, one of the most advanced javascript games and it doesn't get the tech press coverage it deserves. The server is node.js
I've used [r.js](http://requirejs.org/docs/optimization.html) and it works pretty well. It works similar to the others in that it walks your dependencies and includes them as-needed, concats them together, and can optionally run them through a minifier. I tried using the Grunt RequireJS plugin, but ultimately just chose to work around Grunt in this case and call r.js externally with a batch file; when it finishes, I have a single file that represents my 'app', and when I include that file, I can then `require(...)` any of the modules inside it. Also, relating to one of your other responses in this post, I've resorted to creating an `index.js` (for lack of a better name) in the base of the source tree, which does nothing but act as the entry point, e.g. it `require()`'s the top-level module -- doing this gives me a target to point the optimizer at which will then allow the rest of the dependency-walking to take effect.
If you're asking for help on a coding problem, you pretty much have to include some code that demonstrates your problem. We're not mind-readers... Regardless, StackOverflow is probably a better resource for seeking the kind of help you'll need.
Kind of sad that the other commenters took several minutes to compose well-prepared replies, and are being downvoted without any justification given. I can only assume it's simply because the post discusses TS, and TS is a MS tech, therefore TS is terrible (which would be false). Bah. One complaint about your post in general though: all of the footnotes were really distracting. Footnotes are good when used sparingly, or for sourcing references, but to use them in lieu of parenthesis (or other writing constructs â€“ such as a dash or hyphen), makes the text very hard to follow. To your question: I'd say no, it's not. Node is simply another environment and is still just JS. The benefits you get from TS are the same as you'd expect from any other JS environment. If you're a c# guy by trade, then TS just makes sense IMO as it's very much inline with c#. 
Am I the only one who thinks Java projects all sound like 90's rapper names? Yoyoyo, it's ya booi JBoss in da *housssssse!*
To me, it is interesting how heavily they've leveraged Backbone and other javascript tech. But I agree, the backend is most likely Java in some big iron config (IBM? Oracle?)...
What is the definition of "JavaScript game" and "advanced" you're using? More advanced than, say, [BananaBread](https://developer.mozilla.org/en-US/demos/detail/bananabread) or any of the other [Emscripten based ports](https://github.com/kripken/emscripten/wiki)? How about [BrowserQuest](https://hacks.mozilla.org/2012/03/browserquest/) for a more similar handcrafted game?
Worked! Thanks, have fun on your drugs.
It doesn't really add much complexity. It greatly increases your code's readability and maintainability (assuming you actually use the module pattern correctly, instead of putting everything into a single JS file). I personally prefer browserify + [beefy](https://github.com/chrisdickinson/beefy) for development, with [my own class pattern](https://github.com/mattdesl/klasse). I only resort to a Gruntfile for distribution, LESS compilation, etc. The re-usability of node modules makes them ideal for somebody interested in game development. Over time, you'll end up building your own set of tools and frameworks. Two of mine, for example: [1](https://github.com/mattdesl/number-util), [2](https://github.com/mattdesl/kami). RequireJS feels clunky to me in comparison. 
It was two separate contractors. Frontend was done by a well regarded firm in DC (powered by Jekyll), Backend done by a more traditional gov't contractor, and appears to be JBoss and Oracle
Are you testing with a webserver? In general, you can't really use AJAX locally unless you're routing through a local server. Otherwise, you might need to add a `Access-Control-Allow-Origin` header.
You can just go ahead and move the JS into your scoring blocks: if (score&gt;=41 &amp;&amp; score &lt;=65) { answerText=answerText+"You did ok, but you could have scored better"; $('#turkey-image').animate({ left: "65%"}, 1500); } if (score&gt;=66 &amp;&amp; score &lt;=90) { answerText=answerText+"Your study skills are good, almost perfect"; $('#turkey-image').animate({ left: "90%"}, 1500); } Or, once you've figured out your score you could use the score percentage as the left percentage. 
I've used browserify and I love it for 3 primary reasons: 1. Forces breaking up your program into manageable single-purpose files, which also builds in a certain level of scalability. 2. Enables the sharing of javascript between the front-end and back-end since browserify relies on module.exports 3. Builds bundling straight into your front-end javascript. I would recommend using Grunt to bundle your files with browserify on watch and/or build tasks. While RequireJS is great, I think browserify is where dependency management is heading for many due to its compatibility with Node.
I'm not. Just a local page that pulls an RSS feed, parses out items and hopefully uses readability parse api to give a clean view of article.. Is a server required? Makes it easier? 
As a security measure, browsers won't let you make a local AJAX call -- it has to be routed through a server. Not explicitly a physical server, just a server, e.g. Apache, IIS, etc.
Do you need other javascript to run? If not disable JS or put it in a zone with disabled JS (I think you can do that in IE). Otherwise, is it inline script or an external link? If it's external and going to a bad host you could use the hosts file trick to bind it to 127.0.0.1
Yeah unfortunately I'm in an intro to programming course and we're only using w3schools... Thanks for the reply! EDIT: I shouldn't say ONLY w3schools, but that's like the main go to if not the professor
So you are actually talking about two different types of module patterns which serve two different purposes. RequireJS is based on the Asynchronous Module Definition which allows for the lazy loading of scripts, but can offer even higher performance via pre-compilation. Browserify allows you to use CommonJS modules (like those in Node) on the client by pre-compiling the modules. Reducing the numer of script tags is something you can do my simply concatenating your javascript files as part of your build step, but both the r.js (RequireJS) precompiler and browserify will do that for you. Browserify and RequireJS have the advantage of allowing you to specify your dependencies and limit the amount of JS that is loaded to just what you need. In both cases, you will need to look up compatibility with the libraries you are choosing. Many now support the Universal Module Definition (UMD) which allows modules to be used in any environment using any of the three options, but you'll need to check to be sure. Sidebar: lo-dash is a higher performance alternative to underscore. I highly recommend you check it out. TL;DR: Your concatenation problem is irrelevant since you can do that with anything. The CommonJS and RequireJS patterns offer optimized/automated dependency management during builds. You need to pick what module patter your prefer: CommonJS, AMD (require), or the conventional module pattern: var MyModule = (function (depA, depB) { var exports = {} privateVar = "private"; function privateFunc (options) { blah } exports.publicFunc = function (options) { blah } return exports; }(depA, depB)); If you choose this pattern and don't concatenate, you will need to manually ensure your dependencies are loaded before they are required. The complexity in RequireJS and Browserify (CommonJS) is setting up the build step, but if you choose to use the conventional module pattern, you will likely still want to do a build step to concatenate and minify your JS anyways. The former two options provide a small amount of optimization (I believe RequireJS's compiler does a bit more for you, but don't know for sure), and in the case of CommonJS (browserify) there is much less boilerplate. lol my tl;dr is longer than the rest of what I wrote.
Other than those techniques, you could get a rewriting proxy to just nullify that script file by simply replacing that script URL with a blank string. Quick googling leads me to: http://www.charlesproxy.com/ (Not mine, never used, but it looks like it will do the trick.) Of course, this means you'd have to run the web page through this proxy software so if you don't use it often, it can be a chore. I've used something like this in the past to override a specific JavaScript file for remote debugging that I needed to prevent from running altogether.
MC NetBeans
Charles gets shit done. 
It is good to find(in my experience) for finding a quick job for like 50-500USD. Some of my friends got usual clients but the average hourly rate don't exceed 20USD/hour which I repeat - is great in some countries. PS: I didn't do a free work, but my pay gradually increased with my experience as I started using freelancer.com once I started doing web development projects while still in university so I considered more or less a place for real world experience. With benefits.
Great I'm happy to hear that! I hope to add object pooling to Kran soon for better memory performance. 
Multi-line strings are not part of ES5 as far as I know, I think they still hold on as a relic of bygone days that we can't get rid of because of all the ancient code.
looking at klasse, I was under the impression that **BAD** things happened when you used functional declarations like that, aka they weren't actually declarations. 
Just sharing my personal experience, hope it helps. I've been using requirejs a lot in "enterprise js apps" since the last 3 years, and recently "switched" to browserify for new projects. While requirejs is awesome (can't/won't deny it), it requires (no trolling there) some configuration and "boilerplate" code ... some devs actually don't like it (see http://tomdale.net/2012/01/amd-is-not-the-answer/ -- You might or might not argee but he still made a point). Browserify is a bit simpler to use INMHO, so I'd definetly go with that; as I said I like both, I just find browserify &amp; the "commonjs modules" way cleaner/simpler ... Having modules (officially) would make things much easier, hope we get there soon. 
Woops, didn't mean to reply to you, mate. haha
I actually think that require.js simplifies everything, especially readability and scalability. If you use a RESTful folder hierarchy it becomes incredibly clear what each file does and how they are interrelated when you require dependencies in a module. define([ 'jquery', 'backbone', 'underscore', '../models/x', '../views/x' ], function($, Backbone, _, xModel, xView) { var xCollection = Backbone.Collection.extend({ ... }); return xCollection }); Ignore all the backbone.js stuff, it's not that important. Just note how readable the dependencies are.
The site is driven by a lot of Javascript so outright disabling it would make it unusable. It loads several .js files from the same domain so blocking it from hosts wouldn't be any better. I just need a way to substitute my own .js file (with the nuisance code removed or negated), or somehow keep it from loading that one external .js
Good idea, but there are security and confidentiality concerns that make a proxy out of the question. Edit: Just realized it isn't proxy as in proxy host. So I'll take a look. I need to confim that there's no other connectivity--no phoning home or outgoing traffic of any kind.
Are you on a Mac or PC? If you are on a PC, Fiddler is the way to go. Just set up the AutoResponder to overwrite the offending.js file and replace it with a fixed.js file on your own computer. Charles does the same thing for a Mac. Edit: It does look like you are on a PC (you mentioned Internet Explorer).
Charles is a good friend. And a better coworker.
I've not really had performance issues that weren't algorithmic in nature. When you have N entities which interact with eachother pairwise, I find performance degrades at around 100 or so on a fast machine, but I have trouble imagining improving that much.
I was going to suggest this. I haven't used trixie, but I know this can be accomplished with greasemonkey.
 &gt; Over here we have mention of Oracle Identity Manager being used for accounts. What is the need for Oracle? Couldn't this have been done in Postgres or something open source to save some much needed $? Or is it needed to tie into some other oracle based backend?
interviewers don't talk, they're independent and may have never met each other. I did get a question more than once but just tell them you've been asked that already - usually they'll ask if you've had that question from someone else if they are the later interviewers. Keep in mind that Google is more heavily invested in back end languages - if they're not quite up to date on front end technologies then help them. It's up to you to make the best of the interview, not them. Event then it's not just about the interview. The feedback I got was the main reason I got through was for my blog, though it was fairly apparent early on that my previous ads experience went a long way as well.
why is w3schools the main goto? I know it appears first when you search for pretty much anything, but that doesn't mean it's the best resource. mdn is a way better resource.
so you have EditableView which can call ReadOnly and ReadOnly which can call EditableView? That is your problem right there. Either they know about each other and are just two different states of the same thing (same file) or you should be defining that functionality at a lower level that does require them both in
No it's not "my problem". They are both sub-classes of the same view. Learn your OO then get back to me.
I'd say the biggest thing you'll run into using browserify or requirejs is the large set of libraries you'll want to use that *don't* work with them by default. So, you can either script tag those in and write your app code assuming those libraries are available, or spend time wrapping them such that everything is using the same require system. A few of these should already have wrappers, particularly browserify on npm. YMMV. All that said, browserify's pretty sick.
Strange... Very sorry not sure what is wrong with it. Perhaps it's an error on Googles part. I tried accessing it while logged out and it worked, try it in a different browser if you really want to play. Sorry :(
This is beatiful.
If you like maintaining script order in a giant index.html file and using global namespaces to reference your individual components then by all means don't use require.js or browserify :)
it's cool but the initial launch of the item could be smoother.
I think it's mainly for beginners. We really only learned basic (and i mean BASIC) HTML, JS, and CSS. But I agree w3schools isn't great. It's more of, "Here's what it looks like. Just copy and paste it into your code!" 
You should think of require as a fundamental part of JavaScript. It simply adds the concept of modules to the language. not complex. Simple.
Not sure what you mean by functional declaration. I haven't seen anything to suggest this pattern is bad practice for performance. Let me know if you find anything... 
Was it planned that we can use tab/shift+tab and enter to easily generate robots very fast?
 function name (){} is a function deceleration, var name = function(){}; is a function expression. Declarations are only allowed to be in root scope, aka not inside any blocks so if(true){function name(){}} is not valid JavaScript (though can work in some browsers) var onename = function othername(){} does not do the same thing as function othername(){}; var onename = othername; and I have no idea what doing var obj = {onename:function othername(){}} does but I do know that it is not the same thing as function othername(){} var obj = {onename:othername} 
Yeah, you should defiantly think about throttling. I changed up my strat, put something heavy on the enter button, then whenever I click 1 of the 3, it flushes the robots or builds them up really fast. In 3 minutes I have 66 robots per click and 66 robots per sec. edit: This is also pretty entertaining, good job.
RequireJS has a build process that does this and I think browserify also has one.
Why thank you :) I'll definitely look into throttling!
I know dependency injection, I've written my own to inject an "app" object into selected Backbone view. Require.js is all about the modules, and EditableView and ReadOnlyView decidely *should not* have to reside in the same file -- indeed, they both have different handlers, for the same event (clicking identical icons), so I broke all the functionality out into *three* files/modules (base/readonly/editable) to properly divide their various responsibities. PS....I've also written a way to achieve what require.js purports to, without this circular dependency work around nonsense.
Apparently I'm on the outs right now for criticizing fanbois' beloved frameworks, so any well founded criticism or recognition of such will be summarily down-modded.
These are called "named function expressions" and I only encourage them in the constructor for better debugging. The main issues are if you're using ES 3... But of course that wouldn't work with my library anyways. More info: http://kangax.github.io/nfe/ 
thanks!
Notepad++ is unable to pull the file. There is a disturbing amount of information in the tag and likely the server is also generating micro-windows in which the file can be obtained. The domain banana-fana.com was registered in April. It's possible it's gone this long without detection. The URL I OCR'ed out of the image. Might not be accurate. hxxps://gonzo.banana-fana.com/kernel/9A9EAB98-CF58-4B0F-9B0E-D48B803870ED?aid=D4BD6028-B9E3-45F4-8E88-5C87D8F4903F&amp;amp;iid=D33C8FDO-801E-456D-85BE-A59479EEE90E&amp;amp;itm=2013-12-06T19:38:10Z Edit: surprise surprise. First and only hit is that a Yahoo Answers claiming it's a virus.
That has been the project of the last few days of me. Started out pretty small but I ran into tons of issues with the different components and dates in JavaScript are pretty terrible. Pretty sure there are still some nasty timezone related issues in there :( The idea is taken from worldtimebuddy. Wanted to see how much work it is to replicate it. In theory not much, but the devil is in the details.
Backbone leads to something i've described before as "conceptual spaghetti" in addition to structural. I'd almost prefer a hacked together pure jquery project if for the only reason people don't tend to build up these silly type hierarchies in their views and models that make it insane to figure out what the application will actually do at runtime.
I have one button that should work the same whether in readonly or editable mode, another button that works differently in the two different modes, and then buttons that pertain only to one or the other, and the two different modes need to be able to swap out with one another. "Silly" or not, I'm sure my type hierarchy is achieving what's necessary with way less code than some *true* pure jQuery spaghetti, though perhaps not as little code as Angular, which is the next direction I'm trying to move us. I've had enough of wrestling with the DOM, which is one good thing I can say ExtJS shielded me from for my 4.5 years prior to beginning to work for a Backbone shop.
That looks pretty shady. Based on what I'm reading here some data has been collected such as your OS (Win7) architecture (32 bit) browser (IE10) and it's sending home.... I'd wager the actual script is adding ads or popups to regular sites.... normally servers/js doesn't have access to this amount of information so it must be an executable running locally is injecting this script into arbitrary pages (the fact is has the ie-pid solidifies this theory) All signs point to virus, but that might not be the case... a coworker of mine got a new machine and went to get firefox -- he googled it and went to some unrepeatable source -- it came packaged with an addin that did this. It was pretty easy for him to remove though, it showed up in program files &amp; he was able to uninstall it cleanly.
Hey thanks again for all your help. It is working pretty much flawlessly. You said in a previous comment to put a width on the #scorecard, is this what keeps it the same size so when used in multiple screen sizes, the turkey travels the right distance everytime? 
It's so that the css can be rendered properly. Say you set left: 30% on your turkey image, well 30% of what? If you set a width on the parent element of your turkey image (it also needs a position), then that 30% is referring to 30% of that width, rather than the nearest positioned parent with a width (i.e. some random element you didn't intend).
Really cool concept + implementation. Fantastically clearly written as well, it's 4am and I managed to pay attention to the whole post!
Maybe I'm confused...but is this just about someone being confused about why the value of an events object completely overwrites the value of the events object of a parent? If so, that is easily solved. I've seen backbone projects be an absolute mess and an absolute joy. It's all about whoever is running the ship.
Please do. Or just put it on github. :)
mother fuckin AI kicking my ass
Is this for use with Tampermonkey only? Or are you saying that it's THAT easy to make a chrome add-on?
Try checking out flight.js. RequireJS module pattern with a lot more interesting stuff on top.
Problem is, the ship's hull is constructed out of dry ramen noodles. Seems stable enough before you drop it in the ocean...
Yeah, flight.js is not solving the same problem Require.js or Browserify solves. Hell, it says so right on their site: &gt; Flight uses ES5-shim and jQuery. Additionally you will need to include an AMD implementation such as require.js or loadrunner.
Right, but it provides what (to me) feels like a sane module pattern.
lol wow...thank you for proving my point in so many words. it's so nice to see people passionate about what they do, so much so that they must gloat and brag about it on the internet. not to mention putting others down in the process. i can only hope that continuing this way brings you much joy and happiness, because i know that if i had to put others down in reddit comments due to the kind of toolbox they use to build what they build, i'd probably feel really bad about myself. but, different strokes for different folks. keep on shining, you crazy diamond. :)
If this is the only script block then your script is only run once at render time. Do you have more of the code? Specifically; what would call the conditional to make the evaluation.
totalrobots is 0, robotsneeded is 50 . 0 &gt; 50 is false. if statement block is not entered. make is undefined. persecond is undefined.
Oh, in my actual file the script is called every second.
Are you sure the code is functioning? Try adding an alert in the loop to show you when the value is updating. Logging statements would also work.
Depending on the call point you may be reinstancing your variables every time you execute the script, the outcome would be identical every time. The variable declarations would need to be isolated from the conditional perhaps, it is hard to tell without seeing the original source.
Yes. There's nothing you can do about that. That's also going to be a problem when not using Kran. Object pooling should improve performance if you're creating an deleting a lot of entities and components.
You're welcome. You see, 80% of redditors are idiots. Kids with toys who like to make comments about things they know nothing about. It makes for easy pickings to point out to those who really want to learn how to code what jerk-offs these people are and to avoid anything most people talk about here cause it will lead them astray and make them think everything they read here is true when, also in 80% of the cases, everything posted on reddit is pure BS written by 12-year olds.
I mean resursive calls: function a() { b(); } function b() { c(); } function c() { f(); sleep(100); g(); } if we yield in sleep, it'll be back inside c(), and a() won't know that. 
I think that your method assumes a stop-time animation fashion where each frame is predefined, or at least can be easily calculated from only the timestamp. But in the example animation, there are loops and branches, for example something like: for(x from 0 to 100) move_horzi(); sleep(); for(y from 100 to 200) move_vert(); sleep(); if(!need_continue) // check user input, boundary etc. break move_extra(); sleep(); where the frames are programmically defined, each frame is calculate based on a number of states -- x,y, user input etc. In my example animation, the movement of the deer is somewhat like this. It is of course true that you can make all the states global, and carefully define functions to calculate the frame based on the timestamp and the state, but my point is that writing such functions would be much easier with sleep(), especially when the state cannot be defined with only a few variables. 
From what I can tell, we're missing a ton of code. Can you post an example to jsfiddle or let us see more of the source? var rank=1, totalrobots=0, robotsneeded=50, persecond = 0, //start persecond out at 0, assumed you already did this. make = 1; //start make out at 1 to make first robot, assumed you already did this. function checkRobots() { if(totalrobots &gt; robotsneeded) { rank += 1; //if totalrobots == 51 then robotsneeded becomes 100 //if tr == 101 then rn becomes 200 robotsneeded *= 2; persecond += 1; make += 1; } } // something has to increment totalrobots. // I'm assuming you forgot that code, so here's something that'll do it. setInterval(function(){ totalrobots += 1; checkRobots(); }, 1000);
I'll git it to github, you wanna fork or just see the code? I could use some help on some issues I've been having.
Here, I put it on Github :D https://github.com/96AA48/funkshark 
I'm working on a project now that appears to have started out, about a year before I joined the company, with Backbone. It still uses backbone.js, but it's hidden under so many layers of abstraction and custom framework code, that it has evolved well beyond that with a weird mix of Controllers, Services, ViewControllers; Models; ViewModels; Views that try to behave like controllers; device specific controllers for tablet, phone, PC and TV that often don't even share common interfaces; 3 separate ways of defining dependencies and instantiating controllers and services. It's a mess. It's some 30000 lines of spaghetti code on which I spend half my time trying to understand what the hell the current code does, or is trying to do, before I can even attempt to fix any bugs.
At a glance you're not actually removing half the number of sheep on months that have a population over 10000, only calculating the value.
Found the solution at StackOverflow. Looks like I DarkZlayer was right. I didn't store the new values instead I just tried to calculate them. SO thread: http://stackoverflow.com/questions/20441816/executing-if-else-conditional-inside-a-loop-in-javascript/
Maybe you are confused because as explained in the comment you can't even *use* the events object if you re-extend a View
Here is one http://www.slidesjs.com/, honestly there tons of them online, just google jquery slideshow or something like that. One more thing never say Java when you mean Javascript, they are two different beasts.
Hey, It hardly matters if you were first or not. You are trying to help and I'm grateful for that. Thanks for the indentation tip. I'll try to follow that from now on. I actually copied and pasted it from codeschool's editor, which really isn't good at all. I need to install a code editor. And the documented Gist is a godsend, really. Many thanks for that. You've really broken down stuff and now I understand the whole scenario better. 
Ahh thanks! As exlaimed i'm a noob for no, but i'll ge the hang of it !
If I saw that comment I'd delete it and write a function to walk the parent classes, merging their events objects and then call it in the constructor of the child view.
Google will become your best friend. I don't do ton of coding but whenever I need help I just go through google and usually I find some idea. I tell people a lot the key to success in IT is being up to read boring manuals and use searches effectively. 
Mr.Konami code.... 
Well this isnt exactly an extension, this is a user script, but to use this it is as easy as just dragging and dropping it to the extensions page.
Okay, to address your post's concern, but without any experience coding user scripts for chrome: Instead of adding several scripts, why not just consolidate them into one file, where possible, and adding that file, instead (even if it has to be hosted somewhere)? For styling, why not create one stylesheet with classes/ids and instead of doing inline-css, why don't you you apply classes/IDs to elements where applicable? This is an improvement I'd make, but I don't know how feasible it would be. In my opinion it would make everything simpler to follow/read.
Nice, I'll be using this.
... There aren't really many Backbone 'fanbois'. It's unfashionable nowadays (and deserves to be, but that's another conversation). Still, it seems to me that your complaint is based on lack of due diligence in working with javascript inheritance. Using Backbone has always been a matter of knowing its source and (particularly) its implementation of 'extend'. Now maybe the fact that you're encountering a problem with it is itself a criticism of Backbone; maybe we need a solution that makes it easier for you. Until we have one, though, I'm not inclined to feel bad that you ran into this particular problem. 
Commenting so I can come back and read this later.
yes, it does need a kindle version. I won't buy unless there is one.
Thanks I got it working already.
There is a kindle version on Amazon, which has a preview for chapter one. http://www.amazon.com/gp/aw/d/1430260971
Many of these are supported with the built-in ECMAScript internationalization support added in IE 11 and other recent implementations. Nice part about that is that you get as many languages supported as your underlying platform supports (on Windows at least that's something like 300+) and users don't have to download blobs. This API is better though I think.
Do you *not* understand? The parent classes *cannot* have events objects -- you are *precluded* from using them if you re-extend a Backbone view. I can't imagine making that any clearer with that comment.
I kind of wish this chapter had been subtitled "Network-aware objects can be considered part of the Internet of Things." I just like that sentence. 
Cool style. Welp, [here's the annotated backbone source](http://backbonejs.org/docs/backbone.html). I don't see anything that *precludes* one from using events in inherited views. And if the default behavior doesn't work *exactly* as you want, that's pretty easy to rectify.
What is this magic save you keep talking about?
&gt; 8 comments share save hide report
Here is the ENTIRE code. Removed indents to fit. &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;style&gt; body{ background-color:black; } h1.mtitle{ font-size: 62px; color:lightgray; margin:auto; font-family:tahoma; line-height:50px; text-shadow:2px 2px #A0A0A0; } h3.stitle{ font-size: 32px; color:lightgray; margin:auto; font-family:tahoma; text-shadow:2px 2px #A0A0A0; } #main{ width:1000px; height:90px; background-color:#B0B0B0; box-shadow:3px 3px 3px #888888; padding-top:5px; } #main2{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; } footer{ background-color: #888888; width:1000px; box-shadow:3px 3px 3px #888888; font-family:tahoma; color:white; } #top{ background-color: #888888; width:1000px; box-shadow:3px 3px 3px #888888; font-family:tahoma; color:white; height:20px; } #buttons{ width:1000px; height:130px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:40px; padding-left: 50px; } #makerobot{ color:black; width:170px; height:70px; background-color:lightgray; margin-top:35px; font-size:12px; } #robotperclick{ color:black; width:170px; height:70px; background-color:lightgray; margin-top:35px; font-size:12px; } #robotpersec{ color:black; width:170px; height:70px; background-color:lightgray; margin-top:35px; font-size:12px; } #robots{ width:1000px; height:80px; background-color:#B0B0B0; box-shadow:3px 3px 3px #888888; padding-top:50px; font-family: tahoma; font-size:32px; } #main4{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; } #main5{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; } #main6{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; } #main7{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; } #main8{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; line-height: 100px; } #main9{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; line-height: 120px; } #main10{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; line-height: 140px; } #main11{ width:1000px; height:12px; background-color:#BBBBBB; box-shadow:3px 3px 3px #888888; padding-top:10px; padding-left: 50px; font-family: tahoma; font-size: 22px; color: gray; } &lt;/style&gt; &lt;CENTER&gt; &lt;div id="top"&gt; ALPHA VERSION 1.0 &lt;/div&gt; &lt;/CENTER&gt; &lt;body&gt; &lt;CENTER&gt; &lt;div align="center" id="main"&gt; &lt;hr width="540px"&gt; &lt;h1 align="CENTER" class="mtitle"&gt;Robot Factory&lt;/h1&gt; &lt;h3 align="CENTER" class="stitle"&gt;&lt;/h3&gt; &lt;hr width="540px"&gt; &lt;/div&gt; &lt;div align="left" id="main2"&gt; &lt;/div&gt; &lt;div align="left" id="main4"&gt; &lt;/div&gt; &lt;div align="left" id="main5"&gt; &lt;/div&gt; &lt;div align="left" id="main6"&gt; &lt;/div&gt; &lt;div align="left" id="main7"&gt; &lt;/div&gt; &lt;div align="left" id="main11"&gt; &lt;/div&gt; &lt;div align="left" id="main8"&gt; &lt;/div&gt; &lt;div align="left" id="main9"&gt; &lt;/div&gt; &lt;div align="left" id="main10"&gt; &lt;/div&gt; &lt;div align="left" id="buttons"&gt; &lt;button id="makerobot" onclick='change()'&gt;Make Robot&lt;/button&gt; &lt;button id="robotperclick" onclick='changeM()'&gt;Increase Robots/Click&lt;/button&gt; &lt;button id="robotpersec" onclick='changeS()'&gt;Increase Robots/Second&lt;/button&gt; &lt;/div&gt; &lt;/CENTER&gt; &lt;CENTER&gt; &lt;div id="robots"&gt; &lt;!-- hitwebcounter Code START --&gt; &lt;a href="http://www.hitwebcounter.com/freecounterfeatures.php" target="_blank"&gt; &lt;img src="http://hitwebcounter.com/counter/counter.php?page=5154062&amp;style=0024&amp;nbdigits=9&amp;type=page&amp;initCount=0" title="http://www.hitwebcounter.com/freecounterfeatures.php" Alt="http://www.hitwebcounter.com/freecounterfeatures.php" border="0" &gt; &lt;/a&gt;&lt;br/&gt; &lt;!-- hitwebcounter.com --&gt;&lt;a href="http://www.hitwebcounter.com/countersiteservices.php" title="Free Web Counter" target="_blank" style="font-family: Geneva, Arial, Helvetica; font-size: 9px; color: #9C9795; text-decoration: none ;"&gt;&lt;strong&gt;Free Web Counter&lt;/strong&gt; &lt;/a&gt; &lt;/div&gt; &lt;/CENTER&gt; &lt;CENTER&gt; &lt;footer&gt;&lt;/footer&gt; &lt;/CENTER&gt; &lt;script&gt; var m = 0; function change(){ totalclicks+=1; m+=make; totalrobots+=make; document.getElementById('main2').innerHTML ="Robots: " + Math.round(m); document.getElementById('main9').innerHTML ="Total Robots: " + totalrobots; document.getElementById('main5').innerHTML ="Robots per click: " + make; document.getElementById('main6').innerHTML = " Increase Robots per Click cost: " + Math.round(rneedu); document.getElementById('main7').innerHTML = " Increase Robots per Second cost: " + Math.round(rneedus); document.getElementById('main4').innerHTML = " Robots per Second: " + persecond; document.getElementById('main8').innerHTML = "Total Clicks: " + totalclicks; document.getElementById('main10').innerHTML = "Level: " + rank; document.getElementById('main11').innerHTML = "Total robots to level up: " + robotsneeded; } var make=1; &lt;/script&gt; &lt;script&gt; var rneedu = 30; function changeM(){ if(m &gt; rneedu) { make+=1; totalrobots+=1; m-=rneedu; rneedu*=1.1 document.getElementById('main2').innerHTML ="Robots: " + Math.round(m); document.getElementById('main9').innerHTML ="Total Robots: " + totalrobots; document.getElementById('main5').innerHTML ="Robots per click: " + make; document.getElementById('main6').innerHTML = " Increase Robots per Click cost: " + Math.round(rneedu); document.getElementById('main7').innerHTML = " Increase Robots per Second cost: " + Math.round(rneedus); document.getElementById('main4').innerHTML = " Robots per Second: " + persecond; document.getElementById('main8').innerHTML = "Total Clicks: " + totalclicks; document.getElementById('main10').innerHTML = "Level: " + rank; document.getElementById('main11').innerHTML = "Total robots to level up: " + robotsneeded; } } &lt;/script&gt; &lt;script&gt; var rneedus = 30; function changeS(){ if(m &gt; rneedus) { persecond+=1; m-=rneedus; rneedus*=1.05 document.getElementById('main2').innerHTML ="Robots: " + Math.round(m); document.getElementById('main9').innerHTML ="Total Robots: " + totalrobots; document.getElementById('main5').innerHTML ="Robots per click: " + make; document.getElementById('main6').innerHTML = " Increase Robots per Click cost: " + Math.round(rneedu); document.getElementById('main7').innerHTML = " Increase Robots per Second cost: " + Math.round(rneedus); document.getElementById('main4').innerHTML = " Robots per Second: " + persecond; document.getElementById('main8').innerHTML = "Total Clicks: " + totalclicks; document.getElementById('main10').innerHTML = "Level: " + rank; document.getElementById('main11').innerHTML = "Total robots to level up: " + robotsneeded; } } &lt;/script&gt; &lt;script&gt; var interval = setInterval( increment, 1000); function increment(){ m = m % 999999999999999 + persecond; totalrobots = totalrobots % 999999999999999 + persecond; document.getElementById('main2').innerHTML ="Robots: " + Math.round(m); document.getElementById('main9').innerHTML ="Total Robots: " + totalrobots; document.getElementById('main5').innerHTML ="Robots per click: " + make; document.getElementById('main6').innerHTML = " Increase Robots per Click cost: " + Math.round(rneedu); document.getElementById('main7').innerHTML = " Increase Robots per Second cost: " + Math.round(rneedus); document.getElementById('main4').innerHTML = " Robots per Second: " + persecond; document.getElementById('main8').innerHTML = "Total Clicks: " + totalclicks; document.getElementById('main10').innerHTML = "Level: " + rank; document.getElementById('main11').innerHTML = "Total robots to level up: " + robotsneeded; document.title = "Robots: " + Math.round(m) + " Level: " + rank; } var totalrobots=0; var totalclicks=0; var persecond=1; var robotsneeded=50; var rank=1; if(totalrobots &gt; robotsneeded) { rank+=1; robotsneeded*=2; persecond+=1; make+=1; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Some ideas/projects, without potentially dox'ing myself its difficult to go into. I don't work on Chromium officially but spend a good amount of time in C++ on its rendering systems for the past year.
Hit the save link under the title. Then go to reddit.com/saved .. all your saved links are there.
You most certainly are precluded from using the events *object* "convenience": you must call the delegateEvents method instead, within render, wherein you must also call ParentClass.prototype.render.apply(this, arguments); As soon as you re-extend a view, you can kiss the events *object* convenience goodbye. Sigh ;)
whoa, same price?
Man who is sad because his mustache fell off when he winked.
that's IIFE - Immediately invoked function expression.
[Link to Wiki article.](http://en.wikipedia.org/wiki/IIFE)
After reading first few sentences there is nothing really about javascript, but about author, his interests, his brother, etc. I'm not saying books isn't good, but this is first impression about whole book. Those first sentences is everything people will read, because you know, we are fucking lazy. And book is called "Expert Javascript", so expectations are high, especially if you are expert in Javascript and you hope to see something you didn't knew. But last thing you want to see is a page of nothing about the topic. It might be harsh, but if I have to read a life story, just to learn something new, it probably isn't worth my time or money. Edit: I do like the topic of this chapter and I will buy this book, but I will probably skip some (half?) of the paragraphs while reading it.
&gt; Array.prototype.method &gt; Could this be called by any and all arrays? All arrays that are in this realm, yes. JS running in IFrames for example are a different realm and so won't have method visible. But, anything that has Array.prototype in the prototype chain will see method. You can test this with the instanceof operator, anything that is instanceof Array will see method. Your callback pattern on initialization is strange but I don't see anything wrong with it if it fits your application. The different between adding methods on instances (this) vs. prototype is that when you add to the prototype, every instance shares a single function instance. When you add to the instance, each instance has its own function. This means that it is typically more efficient to put the function on the prototype if each instance is going to have an identical implementation. &gt; is it possible to do things like : &gt; games.Array.prototype (an array of object games) &gt; Array.Object.prototype (an object inside an array) Not out of the box but you could set it up this way manually. Objects will see properties in their prototype chain. By default, Arrays will only have Array.prototype and Object.prototype, where Objects will only have Object.prototype. But, you could create your own games.ObjectPrototype object and then any time you add an object to your games you add games.ObjectPrototype to the prototype chain using `__proto__`. This is probably not advisable. 
Yeah, it looks like a promising book, but this is a weird chapter to give for free as a representative sample. Seems like more of a tangent than anything else. Not really what I expected in terms of content, but interesting. The back cover of the book on Amazon has a better description of what I'd expect in a book like this, so maybe I'll pick it up after all!
If you have to explain IIFE in that manner, its far too verbose. It's a block, plain and simple.
Thanks for the feedback I can totally understand that this chapter might be a bit slow to get going and for that reason is maybe a poor choice. I appreciate the feedback.
I think it's suspicious to kick off an ajax call on object construction, but it may be fine. Another alternative might be to use the event pattern: construct the object, attach an event handler for when the ajax call completes, and then call fetch() or something.
A block is generally considered to be anything between { and } in all cases where you might do that (function blocks, while blocks, for blocks, etc).
Are you aware there is no "block" scope in Javascript? I.E. variables declared within them are visible to the enclosing scope? Maybe better than simply block, they should be referred to as "scoped blocks"? I think this is more concise and makes the intent clearer than "immediately invoked function expression" or its acronym IIFE.
After seeing that video when it came out, I've always put the invocation parens inside the outer parens. Thanks Crockford!
I call it "typo heaven"
Hilarious! Thanks for the laugh!
The original post [is this one](http://www.reddit.com/r/technology/comments/1safjd/the_vasimr_plasma_rocket_breakthrough_in_rocket/). I've recently been coding quick games based on comments and posts on Reddit, and had particular fun with this one :). The code isn't very elegant (actually it isn't elegant at all) and I'm pretty sure there are major performance issues, but given I spent maybe 4 hours maximum working on this I feel pretty happy about it. I'd love to hear your comments about the game, but also hear how others do realtime/game movements with DOM elements. I'm using 3d transforms, which seems to work well but starts getting very slow if you have more than a few objects moving at the same time. I've seen some games using css-transforms/animations, but I've yet to find an easy way to design these.
or an **Anonymous** function.
The kindle version is much cheaper than the print version from what I can see on Amazons' site.
I should have read the reddiquette section before posting. You are right this post does fly in the face of those guidelines. My apologies. If I delete the first post will this thread persist? Worried about a bunch of headless comment relies once the context is gone.
Auto-indent destruction sequence.
I am indeed aware of that. Javascript's "hoisting" mechanism pulls variables declared in a block up like any other variable in the scope and outside the block. I'm just saying that the name 'block' is already used for a different concept in javascript. And IIFE is already a well-known name across the javascript ecosystem ( http://en.wikipedia.org/wiki/Immediately-invoked_function_expression ). Even if you wanted to call it a block, it's nothing like any block in any other language I've ever seen, including ruby ( http://yehudakatz.com/2012/01/10/javascript-needs-blocks/ -- not that I agree with the argument, but it explains the difference between js' anonymous functions and ruby blocks ).
It's not *just* an anonymous function, though. This is a plain anonymous function... function() {/*code*/} ...and either of these are IIFEs... (function() {/*code*/}()); (function() {/*code*/})(); The parens around the anonymous function are necessary ~~for proper parsing in (most?) browsers~~ to force the parser into treating it as an expression (otherwise it would be treated as a function declaration, and those cannot be immediately called), and the `()` immediately calls the function. It's most useful when you need a function to have its own "privately" scoped variables. For example, this code returns a function that returns a counter of the number of times the function was called. The counter is not accessible through any other code and cannot be modified except the way it was intended to be (calling the function): var countCalls = (function() { var count = 0; return function() { return ++count; } })(); countCalls(); // 1 countCalls(); // 2 count = 0; // Will have no effect on the function countCalls(); // 3
Self-executing anonymous function.
CoffeeScript users refer to }); as Line Noise #42.
ah, i noticed things going down, but i couldn't move or control them at all. things just got sad, and the guy starved to death. maybe it doesnt work in chrome?
I was indeed thinking of Ruby to begin with, but the more I think about it the more it's like [an "anonymous block" in Perl](http://perlmaven.com/scope-of-variables-in-perl) (or even C?).
I took care of it for you. I can't tell you how many times this has thrown me off when writing code, and I've only been doing it for a couple years.
Adrian keeps starving to death for me. 
I developed it on Chrome, so I'd hope it works! What version are you using? I've just had someone tell me it's broken on mobile, which I'm looking into at the moment.
alright, I'm on version 31.0.1650.63 m, though i discovered that the touchscreen on my laptop _will_ let me control the little dudes, but clicking/using the keyboard does nothing. Not sure what that means. But luckily, my laptop has a touch screen, and that worked, and i got to beat the game :) it was actually pretty fun! thanks!
(at least, i think i beat it. i made it to mars, and i can't figure out anything else that can be done, and there are no more status bars over their heads, so i guess i'm done?)
Really awesome, we need some one to make sounds and it's perfect. In the meantime, some space opera background music would be great. 
That's an awesome idea. Have you got any suggestions for royalty free space opera background music?
This is a block, plain and simple: { //... }
Although the music is free use, modern recordings are usually copyrighted to the orchestra performing them. That said, I went and found some background music and it's now in the game!
[Here's a pattern](http://jsfiddle.net/7Dug5/) in RequireJS/AMD (CJS style) to achieve what you want. Although I don't necessarily agree it works for all use cases it may give you an idea on how to handle this in either AMD or CJS.
Browserify requires a build step to be usable I think you mean (unless you use middleware and then that requires a server). Require works just fine without one, which is a huge benefit. CJS isn't superior at all in my mind, it's comparable to AMD. It's definitely more simplistic and limiting, but that gives it a huge advantage in terms of consistency and predictability.
I'm really hoping we see adoption of ES6 consumption in Node projects and a consumption convergence where projects can be authored in ES6 and consumed by either AMD (legacy compatibility in browser and node), native browser implementation (future), and Node.js (future).
I put them inside, because it makes more sense to wrap the whole thing. function(){...}() \+ wrapping parens: **(**function(){...}()**)** instead of: **(**function(){...}**)**() For example, I'd also rather write: **(**Math.round(2.7)**)** instead of: **(**Math.round**)**(2.7) That last example looks really strange, doesn't it?
The function expression doesn't execute itself. Functions which call themselves are recursive. It also isn't necessarily anonymous. You can give it a name if you want. The function expression is immediately invoked. That's why it's called *immediately invoked function expression* (IIFE).
Haha, thanks for the laugh!
The fixed background was distracting me. Perhaps tone it down a bit, or find something less pixelated. Otherwise, good work!
http://www.youtube.com/watch?v=FcUi6UEQh00
I suspect this is my lack of instructions rather than a bug. I've added a short tutorial at the start that should make switching characters clear, as well as highlighting the areas they need to be in to replenish their stats. If you can't actually select Adrian, or he sits in front of the table and his hunger bar doesn't go back up, then it's a bigger problem and I'll have another look into it.
[Reminds me a bit of FTL](http://www.youtube.com/watch?v=Acwjfkc_M90)
You can avoid them entirely by putting a dummy unary operator in front of the `function` keyword to force it to be an expression, e.g.: +function() { ... }() !function() { ... }() -function() { ... }() ~function() { ... }() It doesn't really matter which you choose as the value being operated on is discarded anyway. 
The value isn't necessarily discarded. However, the parens aren't required in that case anyways, but you should still add them to indicate that this in an IIFE. Now, you could of course use parens in one case and '!' or whatever in another, but I think it's better style to stick with the option which works in all cases. That's also the reason why it makes more sense to use 1TBS everywhere and not just when you want to return an object literal. Semicolons are also like that. Just add them all.
Of course the value is discarded, what else could possibly happen? I'm specifically talking about situations where without the unary operator, the `function` keyword would signal a function declaration, and I want to force it to be a function expression instead. This does not include the situations where the return value is being used, like: var foo = function() { return 42; }(); If that's what you're dealing with, then you don't need any unary operator to syntactically force it to be a function expression because it's already a function expression. I'm not talking about those cases. I'm talking about these cases: +function(...) { ... }(); And I use this explicitly to avoid having to write an extra set of parens, so why would I ever want to add them back? Like all stylistic choices, tastes will vary, but I prefer to do without extraneous things and a single unary operator looks better than two parens that need to be matched. 
I still hate it. How about here-closure? (Sort of like a here-doc in Perl or PHP)
&gt;Of course the value is discarded, what else could possibly happen? [...] This does not include the situations where the return value is being used Yes. &gt;If that's what you're dealing with, then you don't need any unary operator Yes, that's what I said. &gt;And I use this explicitly to avoid having to write an extra set of parens, so why would I ever want to add them back? To make it clear - at the very beginning - that this function is immediately invoked. There can be easily dozens of lines of code between the first line and the last line.
This isn't open for debate. The term was coined many years ago. If you want that people understand what you're saying, you should also use the term "IIFE".
How is seeing a block that beings with: (function() { ... ...any different than seeing one that begins with: +function() { ... ? They both signal that this is an IIFE equally well. The paren has no inherent claim to the role -- such a line doesn't *necessarily* introduce an IIFE, for example you could have this: (function() { ... }); // not an IIFE, just a FE It's merely a stylistic convention, and I posit that after a few minutes of seeing `+function` instead of `(function` you can learn to treat them equally. It's not something that I just made up, you can find other code in the wild like this too. 
&gt;How is seeing a block that beings with [...] any different than seeing one that begins with [...] It's not. You read that wrong. I said parens over ops, because parens work in all cases. I said to always mark IIFEs with parens, because this way you can immediately see that it's an IIFE.
&gt; because this way you can immediately see that it's an IIFE. Like I said, you can immediately see that it's an IIFE when using a unary operator as well.
It sure is open for debate. I need to communicate with other, non-Javascript, developers. They will have no idea what IIFE is, but they should/will know what a block or closure is. You know what else is open for debate? WTF did Angular overload the term "scope" instead of using context? I might fork the damn project just to make that change. Everything is open for debate, possibly excepting immutable laws of mathematics or physics
very nice, how long did it take?
Again, you read that wrong.
&gt; but they should/will know what a block or closure is. But that's not what an IIFE is. Deliberately teaching others wrong terms is doing them a disservice.
OP here, any comments are welcomed. Edit: [x-post](http://www.reddit.com/r/webdev/comments/1salj4/optimizing_page_loads_by_reducing_the_impact_of/)
It's close enough to begin a conversation -- it's similar to a block or closure except....
... that it's a function expression which is immediately invoked.
4 hours, that's pretty impressive.
Do you have the XML document? I used to transform XML into text quite a bit, and javascript is just text in this case. Google, XML to plain text transformations. Depending on your style sheet processor this should be fairly easy. 
Great, but i can't play it for more then 10 seconds, because their bars run out very fast and they die.
Edit: i said nothing
Sleep is not restoring. Is bed too high to reach ? ;]
Yeah i suppose. Or it's a block that can return a value. I think it's important to convey the notion of scope when explaining it. Thanks for discussing it with me.
You need to improve the click actions. It's very hard to click on the individuals and click on the necessary actions. Getting one of them to go up to the bed cost the other one's life.
Yup, I love how coffeescript eliminates the usual ))]}]))]}}}); nonsense from javascript ;)
XSLT is a language that allows you to transform XML into 'something else'. What your teacher wants is for you to write some XSLT that takes some XML structure and turns it into JavaScript code. This would require knowledge of XSLT and XPath.
Very cool. I for one liked the pixelated fixed background. It gave the game a bit of a retro feel. The noises were very repetitive and annoying after a very short time. It ran far far faster on chrome than it did in firefox. Firefox was unplayable. Chrome was smooth as butter though. No problems there. I found the mouse to be more effective than the space bar. Physics with the camera felt unintuitive and not great in general. Overall, pretty darn cool. I got to level 5 after a few tries. I'm going to try and learn from your code in the repo now. Thank you. :)
That's true, glad that you found some.
+/u/bitcointip 1 internet verify
I think it would be a little easier to control if you had right mouse to move and left to select, I so often move people when I want to select the other. Maybe you could try it and see if its easier. 
[[âœ”](https://blockchain.info/tx/40412c39918a59bf25e8ce8dae1cc5f9a674ae23fef546b83a88d0602cc21013)] **Verified**: [quirk](http://reddit.com/u/quirk) &amp;#8594; **&amp;#36;0.25 USD** *(&amp;micro;&amp;#3647; 339.75 microbitcoins)* &amp;#8594; [mister_mississippi](http://reddit.com/u/mister_mississippi) [[**sign up!**](http://www.reddit.com/message/compose?to=bitcointip&amp;subject=Sign%20Up&amp;message=SIGN%20UP)] [[**what is this?**](http://www.reddit.com/r/bitcointip/comments/13iykn/bitcointip_documentation/)]
Thanks for the help! So by JavaScript code, my teacher is likely looking for XSLT to produce a string that can be evaluated? If so I think I understand!
First off, I'm sorry. My first job out of college was writing xslt. I don't normally call technology terrible, xslt is terrible. xslt is a language to transform xml into something else. That something else is usually html, but it can be anything. There is no reason you couldn't use xslt to create pdfs, plain text documents or JavaScript. xslt transforms are usually done server side, but can be done in the browser to create html. Your assignment is probably asking for server side. Client side xslt transforms create a html document before any JavaScript is run, so the xml/xslt interaction with JavaScript is the same as any other html document. As far as server side, goes, I would suggest using xsltproc to generate your documents. In that case, you are generating the JavaScript that will be served the same as any other JavaScript file. Edit, here is an example. I haven't touched xslt in years but it might look something like this: $ cat example.xml &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;?xml-stylesheet type="text/xsl" href="tojs.xsl"?&gt; &lt;log&gt; &lt;msg&gt;Some log message&lt;/msg&gt; &lt;/log&gt; $ cat tojs.xsl &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt; &lt;xsl:output method="text"/&gt; &lt;xsl:template match="/"&gt; (function() { &lt;xsl:for-each select="log/msg"&gt; console.log("&lt;xsl:value-of select="."/&gt;"); &lt;/xsl:for-each&gt; }()) &lt;/xsl:template&gt; &lt;/xsl:stylesheet&gt; $ xsltproc example.xml (function() { console.log("Some log message"); }()) $ xsltproc example.xml | node Some log message
Likely JSON if the XML is a data structure of some type.
Unless the XML represents instructions to be converted to code (like a mathematical formula something), I'm guessing the output is supposed to be JSON.
I'm not even going to read his particular use case. Instead I will just call BS on the mindless "don't use circular references" mantra. Again, my case: ReadOnlyView and EditableView both extend BaseView (which extends a Backbone view). On a particular icon click ReadOnlyView needs to substitute itself with EditableView, and vice versa. I've written a (naive) asynchronous script loader that won't choke on this, though I wouldn't foist my non-standard code on my clients/employers -- instead I use a work around prescribed right on the require.js site. Nevertheless, IMO it's too bad the project got too much momentum before it could easily account for circular references, and it's something you need to know is a potential issue, and that there is a work-around for it.
Xslt is pretty nice once you know xpath. I generated html sql and graphs from a few simple declarations for my biz team back in the day. I got a little crazy with it but I remember thinking when its done well the transformation is simplest at its deepest level whereas whem manually transforming x to y it gets very confusing the deeper it gets.
That's true, there is a lot of terrible xslt out there. You are right, regexs should never be done to parse xml. :) I normally share your opinion that every technology has it's place. For very straight forward transforms, xslt is probably fine. I would argue that the the problem xslt solves can usually be done in a more straight forward manner using traditional languages. The verbosity of xslt makes it difficult to scan. The most important parts of the code (what node a template is matching, what a for loop is selecting, a variable name and value, etc) are in xml attributes. I was doing client side xslt, and browsers had implementation bugs (shocking right) on top of the existing html/css/js browser bugs. All that said, if someone else likes xslt and it solves there problem, I don't really care. More power to them. I just won't be contributing :) I will say the best part of learning xslt is that it made it easer to pick up functional languages where immutable variables and recursion are the norm.
Most xml libraries include xpath. I know xpath just fine. I still really don't like xslt. If you like it and it solves your problems, awesome! More power to you :)
Basically yeah.
Node is technically backend.. But for production applications I will use a PaaS since I'm not exactly a sysadmin, but for hobbies and learning I'll set it up myself. Have t experimented with docker yet but it looks hella interesting.
the music is great, where did you find it?
That is one of the most bizarre things I have ever seen. 
Circular refs are still a code smell -- usually indicative of improper separation of concerns or too-tight coupling. In your example, I would say you should pull the view-substitution logic into some sort of controller class that can instantiate both views and manage the swapping.
Thanks. I found that useful, but have found a different way. I am using: var Mongo_Collection = require(collectionModulePath); after having worked out the path that the current module is running from using path.dirname(module.uri);. I did not mention that I am doing this on node.js. I found that the advice in that pattern did not work in this case because it looked in the wrong path for the module if I did "./collection".
what happened? no ending? after 39 days?
I've been using backbone extensively lately and know I need to add marionette to my toolkit. I'll check this out as a starting off point to learn!
I always saw it that way: XML is the content, XSLT is the template, and JS is putting both in the markup/validate it. But I really don't like working with XSLT/XML. It's not very flexible, complicated to maintain and makes everything more complicated. But it's good for learning purposes (;
Here's something along the lines of something I've done in the past. Look up [WSDL](http://en.wikipedia.org/wiki/Web_Services_Description_Language). It's a description, in XML format, of the API for a webservice using SOAP. Well, using XSLT it is possible to generate code to directly interface to that webservice: code generation, from a description of the data fields. 
I think I found a bug. I can't turn my ship right while holding spacebar and up arrow key at the same time, but I can when I hold spacebar and w. Playing on Chrome btw
Thanks still trying to refine the parallax effect. I'll get to it!
Thanks for the detailed feedback. Still trying to master the performance. There appears to be a huge amount of variation between devices. Edit: the sound has been harder than I could of imagined to get right.
They seem to need more sleep than food. Personally I agree.
Thanks. I should call it a demo. I've been experimenting with different weapons but so far they really unbalance the game.
80% of the time, redditors are idiots every time.
I know a guy that refers to this as a "Close Resig" since inline anonymous functions are common among folks that use jquery.
I've never actually used Yeoman though I have been wanting to look into it. I must admit the mentioned generator does look rather simple to use.
Interesting. If you pass `x.y` to a function, the function resieves `y` off of `x`. I would like for the expression to be consistent. I guess passing something into a function is the same as assigning to a variable. So I can think of assignment as having the effect of removing properties from objects.
 var x = { f: 2, y: function (i) { console.log(i * this.f); } }; (x.y)(7); //14 It's a no-op either way. Those parens don't do anything. I still don't see why you think that doing this kind of thing would remove properties from some object. It doesn't do that.
Why on earth? Note to self, do not try to reason about JavaScript code as a tree of expressions.
 var foo = { x: 2, g: function () { return this.x; } }; foo.g(); // -&gt; 2 function (f) { return f(); }(foo.g); // -&gt; undefined var k = foo.g; k() // -&gt; undefined 
excuse my brevity above. I mean to clarify that what I mean is asigning `foo.g` to a variable and passing `foo.g` to a function both remove `g` from `foo`. EDIT: or more like copy, not remove.
Well I could let the parent class act as a factory I suppose, that can give me an instance of the different children classes.
feedback: add a mute button
The way in which circular references like this could be avoided, while keeping the JavaScript in separate files, would be to have a stage in the build process where those files are joined together. I'm thinking I may later do this in a way that removes code that ensures the reference is present. At the moment I have solved the problem well enough for it to be usable. I have not needed to use circular references previously but it seems necessary / the best option for the moment here.
Isn't it awesome music! It's by [Chris Zabriskie](http://chriszabriskie.com/) and I found it by browsing through the [Free Music Archive](http://freemusicarchive.org/) sorted by cc license.
Well, that's something entirely different. Anyhow: var foo = { x: 2, g: function (y) { console.log(this.x * y); } }; var k = foo.g; k(5); // NaN - doesn't work k.call(foo, 5); // 10 var k2 = k.bind(foo); k2(7); // 14
The reasoning for the attributes and expressions in the view is part of Angular's declarative programming methodology. You are explicitly defining what the view is and linking it directly to a model property or logic which will control it's various states. While you can write logic explicitly in the view, such as ng-click="obj.prop1 || obj.prop2" it's better to define a function in the controller which then gets exposed to the view (via $scope), the result of which is constantly applied or digested (two-way data binding): ng-click="checkIfTrue()". I first found it hard to accept the extra mark-up, but now I embrace it. The markup / directives is really Angular's way of extending the browser and it's easy to track, maintain and build upon code. To your second point - Angular is rather good at reporting errors when it fails and tools like Batarang for Chrome help with the debugging process. Bindings aren't 'flying around', there's only so many places you'll define a $broadcast and $on handler for events to pass around shared data and the markup on the DOM along with $scope helps to sort out where all the data bindings are ending up. My only complaint so far is debugging in IE8. 
Thanks for the fun game! Would you be comfortable putting your code up on github? I'm teaching myself to code and will be starting on javascript in the next month or so. I really enjoyed playing the game, which makes me want to add to it and make it even better once I know how. I'd also love to see how you made it- since something written in 4 hours can't be too complex. Thanks! 
yes, mars showed up on my screen, I can still move the characters, but the energy bars are gone.
Very cool! Worked like a charm on my iPad.
Funny, this was the exact use case in which I first used XSLT IN 2003. It all seemed to make sense, before we started development on the project. *We'll use XML to transform XML into XML! It will be perfect!* The XML singularity was near and we would be hastening it. *XML!!!* Once things got a little complicated, all sense of order broke down. We had dozens of enormous stylesheets full of tag soup and CDATA sections that no one could make sense of. So many fucking angle brackets... Today, when confronted with that problem, I still use XPath (it is a lovely way to pluck what you need from an XML document), but I would handle all transformation logic in a normal programming language (with models and controllers and whatnot as necessary) and generate the HTML with a normal templating language. I realize there are some places that probably still use XSLT, but I pity those who work there. It is not the right solution for any problem. XSLT should be consigned to the dustbin of programming history.
You might consider using [window.setInterval](https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval), and keep a dedicated element in your HTML where the image should be. In this example, there might be something like this: HTML: &lt;div id="randimg"&gt;&lt;/div&gt; JS: var imageLocation = "file:///Users/Mazen/Downloads/"; var imageArray = [ 'comfortable-future.gif', 'comfortable-future-1.gif', 'comfortable-future-2.gif', 'comfortable-future-3.gif' ]; var randomImage = function(){ var n = Math.floor(Math.random()*imageArray.length); return imageLocation + "/" + imageArray[n]; }; setInterval(function(){ document.getElementById("randimg").innerHTML = "&lt;img src='" + randomImage() + "'&gt;"; }, 500); Notice the "500" at the end; this indicates that the interval between changes will be 500ms.
&gt; Once things got a little complicated, all sense of order broke down. We had dozens of enormous stylesheets full of tag soup and CDATA sections that no one could make sense of. So many fucking angle brackets... I've definitely seen this, and I can see why you'd hate it if that's what you've been used to. The transforms we employ however are simple, and just ensure the XML is transformed to valid HTML without having to do idiotic parsing on it. Typically, we'll take the raw XML from the provider, transform it, and then use XPath querying in C# to load it into a model. It works out nicely, I think it's easy to understand, and it doesn't require you to do any insano parsing. The news stories we get aren't too complicated, though, and we don't have any CDATA nonsense going on. 
First off, thanks for taking the time. I implemented the code and that's what I wanted except I wanted the image to change upon page refresh instead of by itself, any ideas? This was how it was working with the original code but it was on a time system so it would take like 8 seconds before I would see another image upon refreshing.
 &lt;div id="imgContainer"&gt;&lt;img id="randedIMG" src="" /&gt;&lt;/div&gt; JS: var randedIMG = document.getElementById("randedIMG"), imageLocation = "file:///Users/Mazen/Downloads/", imageArray = new Array( 'comfortable-future.gif', 'comfortable-future-1.gif', 'comfortable-future-2.gif', 'comfortable-future-3.gif' ); function randomizeIMG (imgSwitchDelay) { setTimeout(function(){ var n = Math.floor(Math.random()*imageArray.length); var imgName = imageArray[n]; randedIMG.src = imageLocation + "/" + imgName; randomizeIMG(500); }, imgSwitchDelay); } randomizeIMG(0);
obj.x() is called by first evaluating obj.x, which returns a reference to x with a base of obj. Then, when making [the function call](http://es5.github.io/#x11.2.3), we see we're calling a reference, so the this value is set to that references' base. Parens just evaluate to whatever was inside, so (obj.x)(), ((obj.x))(), etc. all evaluate to a reference, so the this value of the call gets set properly. In the case of (0, obj.x)(), we need to first evaluate the [comma expression](http://es5.github.io/#x11.14) which valuates the left-hand side then returns the *value* of evaluating the right-hand side. So obj.x is evaluated as before, returning a reference, but then GetValue is called on the reference by the comma operator and returned. Now when we make the call, we don't have a reference with a base, just a naked function value, so the this value is set to undefined. 
Node.js has relative module paths. That example should work just fine with them. You can find the current directory that a script is running from with the global __dirname. Something like this: var local = path.join.bind(path, __dirname); require(local("collection")); You could easily make a more functional version of require called localrequire that returns a local module as well. That said, it should be completely unnecessary in Node.js to use that above code. Require's are local to the file. I am unsure what you're doing that is causing this to break.
In your example I would expect a refresh to keep me on the filter route with it open. I'd also expect if I linked someone from that screen the filter would be open. This breaks basic URL concepts and is rather confusing IMO. Do you have a use case for why it should disappear?
Thanks a lot, this worked out perfect. Appreciate it.
Was pressing down to go down but my ship was facing down, so I was going up... :(
Release updated (Firefox compatibility in the example code) and a 'lite' version.
does anyone have a write up of what this is actually trying to be that is less buzzword heavy and not in an obnoxious spinning cube? 
So, about classes, I'm courting [topiatist](http://bladerunnerjs.github.io/topiarist/) as a class pattern. Anybody was any argument against it? Recomend any other library? Or maybe I can make my very own. And wow. Beefy is very useful! ty
Is there any diference in using your format of "requiring" things and this: define(function(require) { var $ = require('jquery'); var _ = require('underscore'); ... }
This is aimed at an alternative of Grunt.js. See slide 13. The author listed out all the problems of Grunt.js, which I agree. Grunt's config format is a mess and the it's very hard to chain tasks together reliably. If you've tried using registerTask, you'll know that since the tasks don't have well-defined IO points for other tasks to consume, registering or even configuring tasks become very cumbersome because you basically have to keep enumerating the same input and output files in all your task configs if they have interdependency. Streams and pipes are tried-and-true models carried over from UNIX. Every task is essentially a function that takes some files, filter/pipe them to some processors, which each transform the input, and then you write the transformed input streams to files via gulp.dest(). This model work pretty damn well in the shell for decades already, I think Gulp is trying to bring that to the JS world of build systems.
Use the `click` event instead of `change` for all browsers. The `click` event is fired even when using the keyboard so there shouldn't be any issues doing this. We don't want to add additional executions paths for IE - that's why jQuery exists in the first place!
Bloat? This is a browserifyable module, and it is tiny. It has nothing to do with jQuery.
As usual : NOT working on Firefox (25.0.1, Win7) [Edit] : Firefox has no voice recognition (yet), but the author could perform a feature detection *and* give a hint on the fact it's a webkit-only JavaScript library.
&gt; It's cross-browser compatible: &gt; &gt;* Chrome Interesting concept of cross-browser.
Better yet, how can the author call himself a web standards lover when the voice recognition API is not anywhere close to a standard...
Credit to /u/babby_tables. I simply wanted to make some "improvements" based on feedback I've received or read about. More suggestions: Do you need that image container we added? Perhaps you want to change this: &lt;div id="imgContainer"&gt;&lt;img id="randedIMG" src="" /&gt;&lt;/div&gt; ... to this: &lt;img id="randedIMG" src="" /&gt; Since the imageLocation ends with a slash, perhaps this line: randedIMG.src = imageLocation + "/" + imgName; ... can change to: randedIMG.src = imageLocation + imgName; Do you still want to decrease the DELAY before each image switch? That's something neither /u/babby_tables nor I took into account. If that's the case, you'd have to indicate what the delay would be for the first (or second) image and how much time to subtract after each switch. 
Doesn't work in either Firefox or Internet Explorer, just WebKit-based browsers. Thus not too interesting.
Ha. Very cool nonetheless; won't really be useful until it can be used on mobile devices where typing is more cumbersome. EDIT: [drakonen beat me to it.](http://www.reddit.com/r/javascript/comments/1sglof/voixjs_a_javascript_library_to_add_voice_commands/cdxe8cd)
Its for mobile devices, most of which are WebKit. It should mostly work in ff, I've only spent 1 day on it after all.
Technically crossbrowser if you don't consider Chromium, Chrome and Chrome Beta the same thing.
I take it you don't have iOS7 installed. Swipe from left is impossible now that it's the default "history back" action. 
Yes, once you can use `let` (and `const`), you should never use `var` again. Block scope is way more convenient than function scope. Function scope is one of the most annoying quirks of JS and AS3.
fair
Of course the usage of var should be discouraged in such a case - however, like globals, eval and other bad, dark and ugly stuff in JS, it can still be useful if considerately used.
Very cool. My mind is spinning over the possibility of adding voice-activated chat-macros to my web game. I think my users would actually use it, as a lot of them use key-binded chat macros now. 
Could you give an example of such a considerate use? I'd imagine that every use of var inside some nested code could be rewritten to have that var be declared with let higher up in the nested structure.
It depends on what you mean by "know". There are some general-purpose frameworks like jQuery, mooTools, or Prototype that are just really useful tools for avoiding a lot of cumbersome coding. You should be comfortable using one of them, including things like event binding, dom manipulation, and, for jQuery at least, chaining. Beyond that, libraries are really need-specific. For example, you might want a templating library, or a library that handles synchronizing data between local storage and the cloud. Or you might want a library that simplifies certain kinds of layout, rendering, or UI. I find in these cases it's more useful to look directly at the source code to decide whether it's worth using. Is the source code well written? Nice and modular? Are there any red flags? Then choose another library.
Use var whenever you need variables persisting outside a code block without spamming the global scope.
It's too early to say - but I'm sure once this is done there will pop up some use cases where using `var` will be a best practice, as using `goto` in c is sometimes the best practice (see linux kernel mailing: http://lkml.indiana.edu/hypermail/linux/kernel/9507/0475.html)
Okay. But the structured procedural programmer in me would suggest to introduce an encapsulating scope and still use `let`. Let me rephrase the question: What would be an considerate use of introducing an extra-scoped variable (with `var`) in an inner scope? For example, would there be a good excuse to write something like: function a() { let x, y, z; // some code if (p) { // be happy? } } function b() { let x, y, z; } function c() { let x, y, z; // some other code var p; // do something with p } instead of: { let p; function a() { let x, y, z; // some code if (p) { // be happy? } } function b() { let x, y, z; } function c() { let x, y, z; // some other code // do something with p } }
see http://docs.angularjs.org/misc/faq#faq_common-pitfalls_dom-manipulation
More like (function(){ var p={}; /* do stuff with p here */ { let x, y, z; } })();
Also check out https://www.talater.com/annyang/
There is also https://www.talater.com/annyang/
[js2js](http://eleks.github.io/js2js/) should be in everyone's toolbelt.
I do know that window.webkitSpeechRecognition does work on Chrome on Android.
Wouldn't (function(){ let p={}; /* do stuff with p here */ { let x, y, z; } })(); be the same as in both cases `p` is declared to be local in scope to the function block?
Well, `var` allows you to do this kind of thing: if (foo) { var bar = 'baz'; } console.log(bar); // baz Which is something you should never ever do. Everyone who writes JavaScript professionally either pretends that they have block scope or they write it exactly as it is. People who pretend that they have block scope have to pay more attention to all those variables which are floating around in their functions. Typically, they make a bunch of mistakes and redeclare dozens of variables. If you pretend that you've block scope, you don't access variables in outer blocks as I did in the example above. People, whose code reflects how it actually works, put all of the variable declarations at the very top of the innermost function. This is easier to handle, it doesn't cause any confusion (because the code mirrors how it actually works), and it also works great with tools like JSHint or JSLint (unused/unknown). However, it's kinda annoying to add/remove variables at the top. You have to jump around a bit more.
Yes, it would be. If you use `let` at the very top of the innermost function, it's exactly the same as if you were using `var`.
[underscore](http://underscorejs.org/)
While this is essentially true, var will at least semantically show the larger scope.
Every. Damn. Time :)
JavaScript is about 17 years old. No one found a single case where function scope is desirable. Anything you can do with `var` can be also done with `let`. Just put it at the top of the innermost function and it's the same as `var`. `let` just gives you more control.
Hi , Thank you for your observations and comments ! I agree with you that many are need specific my intention was to find out lesser known libraries that are possibly better than there widely know counter-part etc. I agree with you that you should not use a library without looking at the source especially if it is a lesser known one.
I am really unsure what to make of this ! EDIT: Ha very funny , some peoples reactions are hilarious!
I expected something similar to this. Source code was disappointing :( var SpeechRecognition = root.webkitSpeechRecognition || root.mozSpeechRecognition || root.msSpeechRecognition || root.oSpeechRecognition || root.SpeechRecognition;
I really like that one too, super handy to visualize arrays.
`goto` is different. It allows you to do something you couldn't do without it. `var`, however, is just like putting `let` at the very top of the innermost function. If you want something like that, you can just do that.
Not only is underscore incredibly useful, it also teaches the user good functional programming habits. Once you get comfortable with manipulating data with map/reduce you'll find that using the native Array.prototype methods extremely useful.
You could say that while your need for each type of library is specific to the use case - there is arguably a "best in show" for each use case. You might argue that D3 is the best for data visualisation. It's certainly the most comprehensive, but it's also quite large, and a arguably a little unintuitive... Backbone is a good MVC library (and I stress library) - it has the benefit of wide adoption (and thus sourcing devs that can write against it's API), but the negatives of increased weight via 3rd party dependencies and often punitive amounts of boilerplate undermine that. jQuery is probably "the best" tool for normalising DOM manipulation - but then again it brings a lot of extra stuff with it, along with a unique implementation of the Promises A+ API But, for the record - here are my faves: * Mocha for testing * jQuery/lite for DOM * lodash for list processing and FP * D3 for data viz * Angular/Backbone for client framework * Express JS for server Q for promises
There is another one for adding voice commands to websites http://webtoolsdepot.com/annyang-js-add-voice-commands-to-your-site/
Thank you , that is exactly what I meant ! Just with regards mocha , what do you use with it ? sinon and chai?
No more of a nomination for competitors for that contest!
Well, require.js is just one implementation of common.js, in which the require function is explicitly defined. The syntax you just mentioned is how node.js developers are taught to use the require method and, to my knowledge, there is no difference.
Did he really base64 that background?
Interesting idea, although what about the two-way data binding for Angular templates? eg: having &lt;li ng-repeat="person in people"&gt;&lt;input data-ng-model='person.attributes.name'/&gt;&lt;/li&gt; I haven't used BB extensively, but a quick look at the docs makes it seem like it would be a bad idea. &gt; Please use set to update the attributes instead of modifying them directly. If you'd like to retrieve and munge a copy of the model's attributes, use _.clone(model.attributes) instead. Seems like to be safe, you would need to create a copy if the model, then some other step to then merge/update what was entered on the screen with the BB model, and you start losing the benefits of Angular using POJO's in the first place. I could see the code end up being $scope.data = {model: _.clone($scope.people), scope: $scope}; template: &lt;li ng-repeat="person in data.model"&gt;&lt;input data-ng-model='person.attributes.name'/&gt;&lt;/li&gt; Then needing to watch for changes in that, and then start calling the set on the appropriate BB model, and turning into a bit of a mess. I could see trying to use BB models as a source of inspiration on how to handle models in Angular, then trying to do an angular-centric way to accomplish the same. But trying to use the BB Model within Angular, I could see this being a source of maintenance-nightmares, as things that seem like would be a natural/normal thing to do in angular like data-ng-model='person.attributes.name' causing the BB Model to not behave how you expect. Perhaps one way of doing it, would not to use the data-ng-model, but create your own ng-model-type directive. &lt;input data bb-model='person.attributes.name'&gt; that behind the scenes would call person.set('name')/etc, and also manage the ngModel/etc, but considering how many other directives/etc make use of ngModel - I could see this creating another set of issues. Like I said, interesting idea - and has gotten the gears turning in my head of various ways to handle models with Angular - it's a topic that has come up at work recently, and still haven't come to a full solution yet. 
The committee's intention in designing let is for it to replace var in all use cases. It's not impossible (though hopefully very unlikely) that var would be "nice" for some edge case but the intent of let is for it to replace var.
Substack (James Halliday) had a simple system for Node, which is just to use the built-in tools to mimic grunt http://substack.net/task_automation_with_npm_run
In theory. I've used it to support using AMD modules in a non-AMD setting before without problems. The pattern makes it easy to mock out dependencies that might not exist in both settings. I ~~don't know any~~ just found a few tools that do the conversion for you. It's basically just a bunch of boilerplate that needs to be copy and pasted. In my case there was a lot of work to be done mocking out dependencies due to the architecture of our platform, but that shouldn't really be an issue in most use cases. Check out these resources: https://github.com/umdjs/umd https://github.com/forbeslindesay/umd https://github.com/alexlawrence/grunt-umd
Sounds like a fantastic idea, unless you're pugging on mumble. 
I briefly skimmed the source code, and I wondering if you could explain why the ~~ in the following function: `ImageBuffer.prototype.getColorAt = function(x, y, out) { var i = ~~(x + (y * this.width)); return this.getPixel(i, out); };` From my understanding this would perform a bitwise NOT on the same value, essentially doing nothing? Or am I missing something?
What made you choose to use elements over canvas?
Thanks for the clarification, I stand corrected. 
Exactly how I felt before I dove deep into the Chrome debugger about a year ago.
Do you lose simple ways of defining closures with block scope or am I an idiot?
It's another way to floor a number: http://jsperf.com/jsfvsbitnot/8
I love your game :D reminds me of cookie clicker or candybox2 &gt;var lolHax = setInterval(function(){ &gt; $('#makerobot-caja-guest-0___').click(); &gt; $('#robotperclick-caja-guest-0___').click(); &gt; $('#robotpersec-caja-guest-0___').click(); &gt;},1); Im not sure if the ids change randomly or not but they didnt seem to to me
Interesting. Looks like it makes a big difference in Safari. 
This is slick. I want to give this a try when I get home. I have a software rasterizer that I wrote in C that would be fun to port to JavaScript.
Would this require TagPro to have an always-on access to your microphone for it to work? Or like mumble a push-to-talk activation?
You don't lose anything. `let` works like `var` as far as closures are concerned. The difference is that `var` variables are "locally global" in the current function scope, whereas `let` allows to define, say, the i index of a for loop as private to the for block.
Only IE10+ support seems ambitious, not sure I can live without ie8+. I wonder what they need IE10+ only for?
&gt; I could see trying to use BB models as a source of inspiration on how to handle models in Angular, then trying to do an angular-centric way to accomplish the same. But trying to use the BB Model within Angular, I could see this being a source of maintenance-nightmares, as things that seem like would be a natural/normal thing to do in angular like data-ng-model='person.attributes.name' causing the BB Model to not behave how you expect. This paragraph is exactly what I was using backbone for. I don't think my main point came across too well. 
Sure, thanks for being open to feedback. I know us as devs can be pretty rabid at times. ;) Just placed an order for your book from Amazon, by the way. Planning to write up a review for you!
It depends on how your game works and if you have a game loop etc.
Regurgitating the fucking manual is teaching tricks now? https://developers.google.com/chrome-developer-tools/docs/console-api https://developers.google.com/chrome-developer-tools/docs/commandline-api
What's the point of creating a separate buffer if we can manipulate pixel values directly, avoiding extra work? This is how we do it in Fabric.js, for example, https://github.com/kangax/fabric.js/blob/master/src/filters/brightness_filter.class.js#L46-L59 Demo of "filters" (which involve per-pixel image processing) â€” http://fabricjs.com/image-filters/
Life just got a little bit more *:sunglasses:* Interesting
XSLT fucking sucks. I'm sorry, but enterprise bullshit tech like XSLT needs to die. Overcomplicated, and requires 15 layers of tooling to be able to do anything useful.
Doesn't hurt to be reminded
As soon as you do: Something.define instead of define Are you really AMD compatible?
Having issues with exceptions getting lost, and not bubbling up. I'm not sure where I'm going wrong. But I would expect all of these tests to outright fail.
In ES5: Object.keys(obj).length
Wow, this is pretty huge. Makes Meteor that much more fully functional. Seriously considering using Meteor for my next project now.
Are you sure that was the assignment (looking at your edit). I could totally see the assignment being "Something on the server running and converting XML to actual runnable JavaScript using XSLT. This JavaScript could then be served to clients and run. 
I have an XML order form produced by system A and system B must be able to consume orders from system A. System B, however, is way over there and doesn't know about system A, it only knows about system C. System C knows about system A and system B, so it can take XML from system A and use XSLT to transform it into an order system B can understand. Now add 10 different system A's all with their own XML formats. Tell me how XSLT isn't going to help me.
edit: meant to respond to a comment not the thread
*woosh* I don't get it....
It's pretty cool, although Meteor already makes it ridiculously easy to make custom administration interfaces like this.
Hi there, I think the issue is that you are returning a promise with no "then" or "fail" attached, hence mocha-as-promised assumes there is nothing to wait for and so just ends the execution of your test. If you want to have a look at a way of solving it, I fixed them on a fork: https://github.com/FabienDeshayes/q-tests I'll do a pull request as well. Out of curiosity, why using the Q.promise syntax rather than the more verbose but slightly nicer Q.defer? HTH
Dear lord console.table thank you
It's not a new buffer -- just an Int32Array backed by the same buffer as your ImageData's Uint8ClampedArray. Writing to one will affect both. This allows us to skip a lot of writes and leads to a pretty big peformance boost in most cases. https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/
 Object.prototype.foo = {} This'll break your code. Actually, you need to return 'b-1' instead of 'b' because one of the properties you iterate over is your own 'count' method. I'd use this : Object.prototype.count=function(){var b=0;for(a in this){if(this.hasOwnProperty(a))b++} return b}; You generally shouldn't add to the object prototype because it forces any for in iterators to wrap everything in 'hasOwnProperty'.
What difference does it make?
It's here: https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks#console-table Please don't forget to down vote this reply as well, before somebody can discover the contained link.
I did. You're that person who doesn't like the term "immediately invoked function expression (IIFE)" and you're also that person who said that there is no block scope in JavaScript. And your point is... ?
My contention is not that XSLT doesn't fill a need, but that it fills this need badly. I find the use of a markup language to handle transformational logic to be extremely bizarre. And the only good part of XSLT is XPath, which can be used with any other programming language. To answer your question with another question, why not use a reasonable scripting language + XPath + a simple template for output? I'm not saying you couldn't accomplish your goal with XSLT, but it's not the only option for transforming XML, and I think it introduces more problems than it solves. Basically, I don't think that transforming XML documents is so complicated that it needs its own language. And if I were to create a specialized language just for transforming XML, I wouldn't create that language *in XML*. That's just sadistic.
Well, you could define it to be non-enumerable via Object.defineProperty, but your general advice of avoiding cramming things onto the prototype still stands.
check out this article, http://tympanus.net/codrops/2013/10/30/medium-style-page-transition/
Your links have gone to waste because of your deadbeat comment. Perhaps a more constructive comment like "These tips and more are documented here..." would have been upvoted.
I took some of your feedback and added an eased tween to the animation. Also, this main usage scenario I see for this is phonegap apps, so things like iOS7's history on swipe wouldn't be an issue. Interesting that they decided to implement a feature that chrome for android had a while ago, was shit for this exact reason, and then was removed.
Thanks! this is exactly what I was looking for. 
Sometimes it is all you have. I would say its more like AngularJS for XML, which worked out fine for the situation I was in.
&gt; Not many languages manages to implement map in a way that `["1", "2", "3"].map(parseInt)` would result in `[1, NaN, NaN]`. That's not a problem with `map`, it's a problem with `parseInt`. Is he suggesting a `map` that has no access to the index? &gt; `+value` is pretty much the same as `parseInt(value, 10)`. No. No it's not.
[bluebird](https://github.com/petkaantonov/bluebird) for promises. q is a tortoise compared to it.
`~~value` is closer to `parseInt(value, 10)` I believe.
The issue is the radix argument to parseInt. The correct way would be to do: ["1", "2", "3"].map(Number);
Yeah a lot of this guys' rant was acceptable critique, but he treats his stylistic concerns as gospel. Note to everyone: just because you don't like something doesn't necessarily mean it's objectively bad. I guess maybe I don't understand many of the authors points. What is operator abuse, exactly? The semantics of the language are literally 100% documented and not very surprising. Oh, you found interesting behavior using `==`? Surprise surprise.
Unless you need the semantics of parseInt, in which case ES6 to the rescue: ["1", "2asdf", "3"].map(s =&gt; parseInt(s));
console.log("Some value:" , val) and console.table(arrayMy);
Thanks I'll have a look!
Agree with this, it can be used judiciously to great effect, but you definitely have to be more careful with eval than with other language features. I use the function constructor a fair amount, actually. There are situations where for performance reasons you need to dynamically generate function bodies because closure capture or conditionals are too inefficient.
&gt; Is he suggesting a map that has no access to the index? Sure, why not? `map` in most functional languages doesn't have access to the indices. &gt;&gt; +value is pretty much the same as parseInt(value, 10). &gt; No. No it's not. What's your definition of "pretty" such that it's not?
Word. ES6 is going to smooth out a lot of these kinds of annoyances that can be expressed more verbosely with ES5.
For all intents and purposes. http://www.urbandictionary.com/define.php?term=For%20all%20intensive%20purposes
&gt;Sure, why not? map in most functional languages doesn't have access to the indices. Well, it's useful to have access to the index. I don't work with any pure functional languages. In ruby and python we have enumerators/iterators which could probably be emulated in javascript. The root of his problem is that the `parseInt` function takes two arguments. That really isn't an issue with javascript's implementation of `map`, but the simple fact that javascript's `parseInt` is not the right kind of function to use in a map. Besides, it's good practice to *always* specify the radix with `parseInt` to avoid ambiguity - that alone should let you know not to use it for a map. &gt;What's your definition of "pretty" such that it's not? parseInt("3.14", 10); // =&gt; 3 +"3.14"; // =&gt; 3.14 parseInt("2e2", 10); // =&gt; 2 +"2e2"; // =&gt; 200 parseInt("2e", 10); // =&gt; 2 +"2e"; // =&gt; NaN parseInt("", 10); // =&gt; NaN +""; // =&gt; 0 Perhaps he meant the `Number` constructor instead of `parseInt`? Personally I think the unary plus operator is cleaner without too much ambiguity. Actually, the `Number` constructor is more ambiguous because of the difference between calling it with/without `new`.
Completely agree although there doc has some clarity issues .
Exactly - you shouldn't use `parseInt` because it expects a second argument. That's not an issue with `map`.
Isn't the assumption that all browsers implement "let" years away? Chrome is just now adding support. IE9 and 10 will be in the marketplace for a couple years at least. Theoretically it would be nice, but in practical application var will be hanging around for at least a couple years still. 
I've been using it for the past few days now and absolutely love it. Tons of great plugins as well. Thanks for the tip!!
"you can see the magic" 
Came here just to say this. Perhaps our purpose was too...intensive?
It's not even a problem with `parseInt`, it's a misuse of `parseInt`. `['1', '2', '3'].map(Number)` works just fine. `parseInt`'s behavior isn't any more a bug than `eval`'s behavior would be in the same place. As is so common with JavaScript, the author is blaming the language for his coding errors.
Another legitimate possibility to avoid "var" while actually using it would be: (function(p){ let q; /* ... */ })(/*define p*/)
 while(function(str){ return ( str.indexOf('@') || str.indexOf('.') ) &lt; 0; }(prompt('Please type in your email address: ', ''))){ alert('Email address "incorrect", please try again'); } ....beginner script? into the fire with you!
Sure. But I am thinking about using javascript for teaching an introduction to programming. Learning javascript is just a means to an end, not an end in itself. The goal of the course isn't to become a professional programmer, but to become acquainted with computational thinking and programming. The javascript environment is just extremely easy to deploy and use because it is embedded in every browser. I think the cognitive load of using the javascript environment in and out class is significanly less than of any other language I am considering. That's the only reason I am considering javascript as an introductory language. To make javascript a better language to learn programming, I am thinking about defining a small subset of the language that's as consistent as possible. Being able to use `let` instead of `var` or a combination of the two would be an improvement. As I can ask my students to install firefox or any other free modern javascript environment, `let` not being supported isn't a problem. The idea is that if students understand programming, learning all the warts of javascript or any other programming language environment will be much easier as they can try to build understanding of these warts on the basis of their understanding of programming. 
I agree fully, there are so many people who are trying so hard to be overtly clever. Recently i tried to entangle some [jQuery ScrollTo plugin](https://github.com/flesler/jquery.scrollTo/blob/master/jquery.scrollTo.js) however most of the core logic is done in tenary operators with vague variable names. Sadly this seems to be the trend for many JS frameworks nowadays.
You can use a recursive function. &lt;script type="text/javascript"&gt; // Declare the variables to be used var email_address; var amphora_index; var period_index; var askUser = function () { if(email_address.indexOf('@') &gt;= 0 || email_address.indexOf('.') &gt;= 0) { askForEmail(); }; }; var askForEmail = function() { email_address = prompt('Please type in your email address: ' , ''); askUser(); }; askUser(); &lt;/script&gt;
Yeah, that's what I meant. It's an improper use of `parseInt` and doesn't mean anything is wrong with `map`. JavaScript's `map` is implemented fine, and the index parameter is very useful. 
Ternary operators are considered too clever now?
Annyang
i think the bigger problem is that the function is ~110 lines long. btw, i'd prefer attr[key] = toff[pos] + win * (old - $elem.offset()[pos]) 
Clever, (mis)using the boolean as a number. Another trick, that in my opinion makes it harder to read. I now have to understand the inner workings of a boolean, where true equals 1 and false (usually) 0 in order to know what and why this is going on. You could argue that is basic knowledge every programmer should know, however i think it hides the very important condition of "only add the offset when we are not the window".
Oh I see. You're setting pixel value via 1 assignment (since it's 32bit, not 8).
Good argument! Another thing is types; personally my background is in type safe languages, and i consider it good practice to (loosly) keep and use variables in their own types. I would still associate the type boolean with "win" and avoid using that as a number. 
I stand by my maldiction
No, that's being "cute" again. It's a weird side-effect of calling that wrapper constructor without `new`. Secondly, calling capitalized functions without `new` is usually a mistake. So, this is something you very rarely encounter, because linters complain about this kind of thing. /u/radhruin's solution makes a lot more sense. It's also very generic. It's what you'd do with any function which wasn't explicitly written for `map`.
I think there is a option for disabling JavaScript. I checked all the major browsers including Safari. But why you want to disable it. Without JavaScript most of the functionalities of the websites doesn't work.
&gt; The `in` operator is similar to casting the value at the provided key to a boolean value. This is stretching the notion of 'similar' until it breaks: what if the element value is a falsy value? 2 in [0,0,0] === true 
I was in a similar situation a few months ago. I had to a single page app in JS, having zero experience with the language and the tools (so many frameworks and libraries!). I entered a university investigation group as front developer regardless of that, and started to build my first app with Backbone and Bootstrap (vanilla JavaScript was a mess, given how little I knew). After getting familiarised with Backbone I found the same problem as you: memory leaks everywhere. Not that I'm expert now, but I think you can avoid memory leaks by: - Using "listenTo" instead of "bind" or "on". - When you remove an instance, make sure of using "stopListening". - Using Backbone.Marionette? You probably don't want to add more overhead, but you stop caring about memory leaks and binding (Marionette takes care of that for you, I believe) and writing repetitive code. To track memory usage you could use Chrome: https://developers.google.com/chrome-developer-tools/docs/javascript-memory-profiling
Well, indices and keys are pretty much the same thing in JS ('properties' all the way down), and the `in` operator checks for both. But indeed no value is looked-up. It is just a really bad sentence in the original article. (weird because it is pretty good otherwise).
Woops, didn't mean "keys" but "values". Ninja editing right now!
It could be possible you have another reference to the array, or you might keep it around in a closure. Another possibility is that it's being persisted from an AJAX call (those are often forgotten about). Look through your code for anything that could reference that array and make sure it's not still in use. Things like automatic memory management and the other comments help somewhat but it's still very possible to leak memory.
Thanks all for the info. I'll get a new version out ASAP.
One of the things I really hate are job posts asking for a JavaScript "Ninja". I associate that with hacky code that is hard to read or maintain. I know there is Resig's book about the secrets of a JavaScript Ninja and I'm going to be heretical and say that I think that some of the things it mentions are harmful, hacky and should have been left a few years ago when the book was started and people did write like that. But that's slightly off-topic. Please learn to code for others.
Because it's a bitwise operator... It's kind of "abusing" bitwise operations to do what it does, but it's so damn fast at it. If you look at what it does on the per bit level it makes sense, but to try to explain it to someone without a whiteboard is a bit of a chore.
&gt; it introduces a state into the program, and that's undesirable. Could you explain what you mean by "state" and why it is undesirable?
Goodbye and good riddance. If you want to promote turning javascript off, you probably shouldn't use javascript on your website.
Don't forget, even if you allow every website in noscript, you benefit from the XSS filters and clickjacking protection.
I think most of the recruiters have learned that using adjectives such as `ninja`, `rockstar`, `hero`, etc. are a major turn-off and have stopped using them now. Most of them. &gt; Please learn to code for others. Couldn't agree more, and this was one of the hardest lessons for me as a jr. coder. Any idiot can code something up that 'works' per the requirements, but it takes quite a bit more skill to create something that is both easily parsed by others *and* is quick and painless to modify.
I suspect this is exactly what window.requestAnimationFrame is for. https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame looks like a good place to start. Edit - https://gist.github.com/paulirish/1579671 has a polyfill for older browsers; look in the comments for updated versions too!
Welcome to 1999. Lets rant about popups, lack of good quality pornographic gifs and JavaScript. Hail Internet Explorer, inline styling and table layouts! There's no going back. js or asm.js or something needs to power rich online apps and interactivity to enable next gen services. Any other opinion just slows the inevitable progress. 
Good article, this topic of clever code comes up from time-to-time, but it's a lesson that bears repeating: clever code is the most fun to write (that's why it's written in the first place), but it's also the worst to debug and maintain. If you're on a team then clever code should be outright banned, but for personal projects knock yourself out IMO.
This is all you need: &lt;script type="text/javascript"&gt; var checkAddress = function (x) { //x = is the email address as a string type if (x.indexOf("@") &gt; -1 &amp;&amp; x.indexOf(".") &gt; -1) { //other code in here } else { alert("The email address is incorrect!"); } }; &lt;/script&gt; Let's keep it simple. EDIT: if you want to run the script until the user get's it right you can make the error messaging more educational and recursively call this function again directly after the alert. I recommend, however, firing this function with the onkeyup event, but then you won't want to use an alert and instead output the error messaging into some element on the page.
I agree, text is easy to skim and review, whereas a video is cumbersome to skip around in, and 14min is a _lot_ of time to spend on the console. If it was in text format it'd probably be 500 words or less, in which case one could skim it in a matter of seconds... 
Yes, "It's a weird side-effect of calling that wrapper constructor without new." :P
I'm very sorry if my opinion slows the inevitable progress. Oh wait, I thought it was inevitable.
Incorrect, all type constructors are available for casting. Boolean, String, and Number. It's not a weird side effect, it's spec'd behavior: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.1
Well, id rather have it sooner. ;)
Saw this shortly after it was released, as someone that looked into Ember and Angular before deciding to go with Angular about a year ago - he brings up some interesting points. I think the distinction between low lvl vs high level focus is an important one, and helps show that the frameworks are trying to solve different (although similar problems) in different ways. Tempted to try giving Ember a re-visit sometime soon, the project I picked Angular for will probably keep on being Angular, but wouldn't mind trying to take a more serious stab at Ember for a personal project at some point. Although, I do question the choice of using 'blink' as a sample directive to create ;) But it does seem to be 'AngularJS is a set of tools / components / etc for building a framework' where EmberJS is the framework. 
You don't need to call stopListening when removing a view. It is called automatically. http://backbonejs.org/#View-remove "Removes a view from the DOM, and calls stopListening to remove any bound events that the view has listenTo'd."
Attach listeners to things that live and die with the view all you want. But if a view needs to listen to something that outlives itself, that's when you need to start worrying about stale listeners and zombie views, and do some event cleanup. Manual event removal is (in my view) something programmers shouldn't have to worry about, which is why I built [this](https://github.com/greim/Backbone-Subscriptions). It does events via a "don't call us, we'll call you" paradigm.
&gt;It's not a weird side effect, it's spec'd behavior Those two things aren't mutually exclusive. Anyhow, life is simpler if you don't call *any* capitalized functions without `new`. In the vast majority of cases, the result isn't something you'd want.
Good luck with using most of the web.
Ah okay. Did you see /u/gnarly's comment? Seems like that might be a possible solution.
How would you go about creating runnable JavaScript using XSLT? Do you have links or examples? Thanks in advance!
Thanks, I spoke from memory and I wasn't sure listenTo did that.
Won't work I'm afraid :/
Ah okay, cool. Thanks for checking that.
&gt; In ruby and python we have enumerators/iterators which could probably be emulated in javascript For sure, considering iterators very similar to Python's are getting added for ES6!
No worries. Not trying to be pedantic. I'm actually really interested in this thread. Trying to solve memory leak problems with my Backbone application right this instant and I'm trying to figure out if it is worth introducing Marionette. :)
Link?
I hold the unpopular opinion that chaining is generally sloppy. It encourages writing methods that don't return anything meaningful, and makes methods that *do* return something meaningful inconsistent with the rest of the API. More superficially, I really hate starting a line with a dot. It reads as an incomplete statement. I like a line to make sense on its own.
http://www.johnpapa.net/hottowel/
Another noun claimed for the javascript cause, excellent. Mind you, this actually looks quite fun. 
What you're observing is the fact that iOS runs the UI thread at a higher priority than other execution threads. Here is an old [post from an Android engineer that elaborates](https://plus.google.com/100838276097451809262/posts/VDkV9XaJRGS)...
I like chaining sometimes. If you're going to execute a bunch of small functions on a single object in a row that ARE NOT dependent on each other, then they should be chained. Here's an example of moving an object around: someObject.moveUp(2).moveLeft(7).spin() It's obvious to me what we're doing there. SomeObject is moving up 2, then up 7, then spinning, and none of those return anything. They also don't really need each other to happen in that order necessarily. I could move left then up or spin in the middle. What I really really dislike is chaining a bunch of functions and then assigning the output to a variable. var newPosition = someObject.moveUp(2).moveLeft(3).getPosition() Here I *must* put up and left before position, because it a) returns a value, not the object and b) I guess I'm wanting the position after the move. I like chaining functions that manipulate the internals of the object, but I dislike chaining functions that return data.
http://i.imgur.com/xAMWRrC.jpg
Maybe for the next project. One good thing about Marionette is that doesn't force you to use anything, you can take what you want.
Even RAF doesn't get called while scrolling or zooming.
It also encourages people to write code that silently fails. For example, you can write a jQuery selector and chain method calls on it all day, it never tells you the element was not found. While this isn't an awful thing, taken to the extreme, this can produce dangerously unreliable code. Then there's the question of what to do if the method fails? Do you throw? Then everyone needs to wrap chained calls that may fail in a try/catch. Do you console.error? Then there's no programatic way of detecting failures. Or do you just return something meaningful?
&gt; As is so common with JavaScript, the author is blaming the language for his coding errors. I don't think I ever made that error. I blame the language for implementing map like this because it destroys the concept of save composability that you get from functional languages. Because map and other array functions pass additional arguments it is not longer save to apply generic transform functions to it. Even if presently you can safely do `[].map(Number)` it now means that nobody can ever add any more arguments in the future without breaking code.
&gt; No. No it's not. Pretty much it is. It's not the same (especially because it handles floats too) but that was hardly the point of the article. The point is that people do it.
I'd hope those objects would have a generic `set` method that you can pass an object to. If that's the case, setting properties is much more brief than chained calls: obj.set({ size: 'big', color: 'blue', animal: 'ox' }); vs obj.setSize('big').setColor('blue').setAnimal('ox');
If you use third party directives with angular it might be close to impossible. At least jqlite did not do the trick for me.
http://csedweek.org/
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
I build everything for my future self. I don't leave a lot of comments since following the code tends to be easy enough. When I do leave a comment though my future self is always very happy since it's something non-trivial related to the codebase (typically anything that takes &gt; 5 minutes to figure out, normally related to a design spec or limitation).
Yeah, I prefer when objects like this provide a set method. I was going to bring up the case where calculations are required, but then the set method could just delegate to its object's `set___` methods: set: function(obj) { for(var k in obj) { if(!obj.hasOwnProperty(k)) continue; var methodName = "set" + k.charAt(0).toUpperCase() + k.slice(1); this[methodName](obj[k]); } } 
I personally think method chaining has it's place, but it really depends on what you're doing. When method chaining, you should always ask yourself "do any of these chained methods introduce side effects?" If you answer that with a "yes" then you probably shouldn't be chaining. As a js and clojure developer I will only method chain if the work being done follows clojures threading macro syntax (The threading macro takes the result of the previous function and applies it as the first argument to the next fn): (-&gt; someMapObj // We start with some data structure here (someFilteringFn) (someOrderByFn) (someMutationFn)) In this case, we're doing something to a collection. It only affects the collection. It does not change state somewhere else (UI, DOM, object instantiation, etc).
The bulk of the work was done between Friday night and yesterday, but that would have made the title less pithy. edit: [GitHub](https://github.com/rossmckelvie/string-theory)