I think to get these abilities in TypeScript, I would write functions that mimic native control flow statements as expressions. E.g. write an If() function. You'd have to nest arrow functions and fragments `&lt;&gt;&lt;/&gt;`, so there'd be a bit more punctuation, but it would achieve roughly the same effect.
I went with [a jsfiddle](https://jsfiddle.net/ord0eyu2/) as my actual code has the calls in different areas of logic and aren't intended to be available in the same scope for a comparison like that. It worked quite well, I got a better understanding of async/await(and the fact that they're treated as promises) and refresher on how promises work(haven't done webdev for a few years and was wondering why my promises not using await remained promises after resolving... had to chain `.then()`). Also that some memoization libs don't support promises or async(need to support both in this case).
Ah yep, after having some rest, I got around to creating a small [jsfiddle example](https://jsfiddle.net/ord0eyu2/) to try it out, and get a better understanding. So it seems I was already catering to this scenario in my code, I just didn't realize it :)
[https://edabit.com/](https://edabit.com/) ! It's like Codewars for beginners :) It start from things like make a function to add two numbers, then last element in a string, reverse string, etc. etc. It also has a resources tab that links you to MDN pages (for JS) for the methods that you will probably want to use for each challenge. 
I usually never go with recruiter, they basically send you to any kind job position hoping the company will accept. Also those recruiters are looking the job from the job site as well, rather than putting your hope to them, it's better just to apply by yourself. It happens once a recruiter contact me that they have the position which I actually already apply 2 weeks ago, interview and didnt get the job, so I just wasted my time coming to meet the recruiter.
My computer and a good text editor. Google.
I'd been annoyed by some recruitment agencies, they reach out to me for a role via linkedin or phone, then ask me to come to their office in town(about an hour away) to meet in person and do a face to face interview. I got into the habit of verifying that certain issues aren't issues for them to avoid wasting time and money getting there and back.... "no problem" they say, then I arrive and someone looks over my printed out CV and raises issue with what I had been assured wasn't going to be an issue prior to agreeing to meet.. congrats, your agency is now blacklisted :\
Honestly, I think that your site could use some work. ## First impressions I open the site on desktop and the first thing I see is a giant logo that takes about 50% of the vertical space. With the browser window and the heading already occupying space that means that your introduction start at the bottom of the first page and is mostly hidden. This starts me off pretty confused. ## Introduction The first section starts off pretty bad: &gt; `mhy` (my) is supposed to be a development/production environment/compiler/ecosystem out-of-the box. - dev environment / prod environment / compiler / ecosystem. What? How do these relate? I can kinda see how those words relate to one another but it's really no clear. - "supposed to be" - is it not? Then it's followed by two complaints: - I hate having dependencies scattered all over my projects - I hate having to configure and connect tools together Not a very inspiring start. So there are things you don't like. Cool I guess. What is this tool again? Why am I here? Finally it ends with: &gt; This is `mhy` own development environment, how I like it and/or want it to be, instantly, anywhere, simply. Whatever this is (still not sure at this point), it's your dev environment (again, what does that mean?). So I guess that if I start using this I better like the way you do things because it's "your" dev environment. So, why would I use this? ## Quickstart So you've given me code but no results or output. Looks like you can get up and running (I guess) in 4 commands. That's pretty cool. I have nothing showing me what this setup does, if it works and what I'm gaining from this. Now you could argue that I should just run your quickstart myself, but that's now how things really work. You're (in theory) trying to convince me to use your tool. I'm not going to start using your tool in order to convince myself. ## Digging deeper The first page left me pretty confused. I went on to try to figure out what this tool does. I've been clicking on the side menu and reading the pages in order. I think that I have somewhat of an idea as to what this does. My guess is that you've configured a bunch of common node dev tools with defaults that fit your workflow and have packaged all that as a node cli. Is this correct? I've also gotten the impression that you (or your tool) are not very much a fan of locking down or having older versions of such dev tools around. I usually lock down the versions of these tools and different projects end up having different versions. I'd like to hear your take on that? Why?
&gt; json is not meant to be used as a database Mongo.db would like a word with you. Seriously though, I have no idea why anyone would do this. Small config files? Sure. 8 GB of data. Fuck everything about that. 
&gt; and can barely spell javascript let alone know what the tech is. "What do you mean you don't do Java? Your CV says you have javascript skills, same thing right?" &gt; Sadly, it really seems like you (or maybe it's just me) can't get a gig these days w/out one. Majority of job ads here unless it's a big company is outsourced to recruiters afaik, at least to filter/screen initially before actual company spends time allocating some staff to interview potential candidates. One fun fact is that depending what country you're in, sometimes a recruiter can't accept your application(even if they're dealing with a junior role) because you need at least one good reference. And in the UK apparently, references can only be positive by law, so they're taken with a grain of salt or something there(I'm in NZ). Many of the junior type roles are poached from education providers or career fairs that only students there have access to the companies. Bit annoying.. Another memory with recruiters was that a decent blog, github repos of projects/portfolio, etc are irrelevant, only thing that counts to them is "years" of experience, as if all skill a candidate possesses is the same to any other candidate relative to the time they've been doing it, everyone supposedly progresses/grows their skills at the same rate as anyone else in the field, regardless of hours spent doing it, challenges faced, actual projects done. "It says you know Rust, that's really good because it's not easy to find devs with this language skill, do you have at least 3 years experience with Rust?" "The language only officially came out 1.5 years ago.."(this was a while back obviously) "Ok.. well if you know anyone with at least 3 years, point them my way ok?" The client wanted to use Rust for webdev too, which it definitely at the time wasn't really suitable for, and I'd say still probably isn't until proper async support lands. 
Edit: Just read the end while I was typing response below. I would put some filters in place by putting periods in your email (if you have a gmail) or using burner numbers. This is crazy. I would seriously sidestep these other firms and get a good recruiter that will treat you right. You sure Oscar didn't sell you out twice? *This answers how to avoid bad recruiters contacting you the first time.* I stole a great tip from Kent C. Dodds that makes sure that recruiters actually read my LinkedIn Profile. For example, I tell them to put the word Sriracha in the email that they send to me. I have only had 1 recruiter do that in the past month or 2 since I put that up, and I know it will help me filter out the fluff in the future. The best thing to do is find a few recruiters who seem to give a crap about you and are willing to work with you. You will know when you find one because they are 1/100. 
Literally finished this today. Not only do you learn a lot but you make some really cool stuff. Worth it. 
Sometimes you have to spend some time after to understand. As with many things in programming supplement the concepts with outside resources. 
&gt; Do not give your real resume until you are sure you’d take the job if the interview went your way. Once you give it to them you cant be sure what they are necessarily going to do with it — it is the chip you hold. How does that work? - Fake name or contact details?(can't imagine that going well if they try to reach me) - Fake company names (I guess this might be ok?) - Fake experience/skills/education? (can't see that working out well?) I recall some roles I applied for compared my CV to my linkedin and pointed out discrepancies I wasn't aware of. In the extreme case I guess you'd just get ignored/blacklisted if they realized anything was false? &gt; Those are the ones that actually care about their own rep and getting repeat business. Maybe... but they don't seem to care about wasting your time in my experience. Have had several bring me in to discuss a role after phone/linkedin chat, they have my CV already. Then when I arrive my CV is printed out, they look at it and decide I'm not suitable for the role because of X. It takes me an hour to get into town to visit them, likely wait 10-30 mins, meet for 1-5 mins, then go back home. When that happens, they're not professional or trustworthy/competent imo, so I won't interact with them again.
!remindme 12 hours
I will be messaging you on [**2019-01-22 16:35:52 UTC**](http://www.wolframalpha.com/input/?i=2019-01-22 16:35:52 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/aibtg9/coding_challenges_for_beginners_recommendations/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/aibtg9/coding_challenges_for_beginners_recommendations/]%0A%0ARemindMe! 12 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Stupid is too strong. They're ignorant of the skills required and the logistics of the job.
The complete node.js developer course on Udemy is really nice. Also I'm pretty sure Brad Traversy does a good job on YouTube. 
Really, it’s just JavaScript. Really, the best thing to learn Node.js is to just jump into NPM and start learning about packages and how to use them. I’d say start with express for creating a basic web server in node and maybe socket.io for learning sockets. Those are the fundamentals in my experience.
Either you're being pedantic or you didn't spend those 8 years very well.
Nice! Really like this. 
I've been dealing with recruiters for 20 years. I've talked to probably hundreds, maybe 5 of them were any good at their job. I'm not joking at all.
You might try uploading it to an object oriented database and adjusting it there.
Sometimes recruiters just need to contact X amount of people per some time period. &amp;#x200B; They will really butter you up and then ghost you. &amp;#x200B; Sometimes you even put hours into a coding test only to be told that basically, they disqualified you from the git go. &amp;#x200B; I did this challenging coding test and the feedback was that the test was great but I wasn't passionate enough of about Rails because I had PHP experience in there. &amp;#x200B; They had me take a coding test when I was already disqualified from my resume. &amp;#x200B; Getting jobs in general is like getting a date. It is a brutal numbers game esp if you live somewhere where there is competition. &amp;#x200B;
[removed]
yeah they definitely found you through LinkedIn. Wasn't that the point of you having a profile there? 
I feel the pain that old school browsers used to need solutions like this. Great stuff.
One of the ways you could communicate out of an iframe, was to set the document title of the iframe, which was one of the few properties that could be read cross-domain. Fun times.
I had this guy call me up one time asking if I was still in the market for a job. I said yeah and he proceeded to ask me about things I had no experience in. Like IIS, .NET, SQL server. As he asked each question I just honestly told him I had no experience in that. &amp;#x200B; Then he got all angry and yelled "then why the fuck are you applying for this job!?". &amp;#x200B; I was like "Dude! you just called me out of the blue! I have no idea what job you are talking about!". &amp;#x200B; What happened here is a recruiter gave him my information and they are supposed to wait for the recruiter but this guy didn't. 
mdn. find something you dont know and learn it.
Two books I learned a ton from are Kyle Simpson’s YDKJS https://github.com/getify/You-Dont-Know-JS And Reginald Braithwaite’s JavaScript Allongé https://leanpub.com/javascriptallongesix/read
!remindme 9 hours
Good bot
 If anyone worked with HTML-the language of the Web and have a basic idea of the concepts of programming, they should have no trouble understanding JavaScript. It's a simple and flexible language . Here is also a [Complete Course](http://www.softlookup.com/tutorial/JavaScript/index.asp) for beginners.
Yeah, it’s a bit tough, but honestly, when I first learned programming getting over that first “hello world” hump was tough. so many tutorials like to demonstrate the simplest implementation of each concept, but in the real world, the implementation is often quite complex. And learning the language syntax is part of the game, but the real meat of learning programming, is understanding how it all works together to create something real and useful. That’s hard to do. It’s hard to get over that hill. But once you do, it will all make so much more sense.
Eloquent Javascript is the best book, great for beginners! It's how I learned most of it. The best part is it's available free online! https://eloquentjavascript.net/
Some suggestions.. "You Don't Know JS" by Kyle Simpson "Secrets of the Javascript Ninja" by John Resig and Bear Bibeault "Javascript the Good Parts" by Douglas Crockford
If i have to do search / replace, I use two tools: vim and sed. Use vim for the data exploration, getting used to the data structure, searching within the file for points of interest. Then i use sed to do the replacements. If i need to really work with the data, i will usually create a sample of the document (say, first 100 entries of a json array using vim + head / tail bash command + file redirection into a new file), and test whatever script / program i am writing against that. I usually increase size of data from like 100 =&gt; 1000 =&gt; 10k entries just so i get exposure to more data points and can round out edge cases. 
I meant not the abstraction of event I am tracking, but avoiding potentially overwriting the original object's properties and methods if they will ever coincide with the property "latestMouseEvent" and "trackMouseAndObserve" I add (whether through inheritance or composition). Is it possible?
More propaganda with no substance. Should have been titled "Why You Shouldn't Work At PayPal". 
😁
It looks like a PHP error. The website owner needs to fix it. If it's breaking the page then you should consider contacting them.
How does this work on a site where content changes frequently?
I'd suggest learning statically typed language like Rust, C, Java or something else of your choice. It will change how you see and use js
Have you tried clearing the site's cookies?
But it's the magnum opus of his career! 
Microsoft is that you???
Thanks again. Probably I did not formulate it right, but with me saying I must use pure Javascript I meant not only addon-type (DLL) additions, but also JS libraries (no require/include). Also, JS does allow *customEvents* now on its own, but from what I gather it is still wierdly restricted to specific use cases so even to this day people are trying pull NodeJS functionality into JS. Regarding your JSFiddle example, another thanks, but does JS (maybe in ECMAScript 2018 or in a draft of a future specification) allow "#define" macros, operator overload and other things from the bad old C++? Presumably some of it could make it possible to avoid making libraries in certain cases. 
Lol. 
It's not even funny
Damn, I wish this wasn’t removed. 
Isn’t stupidity just voluntary ignorance? They have no desire to learn the vocabulary or anything tech related yet their job is to find tech professionals and paid them with companies.
Thanks, will take a look! 
Wrong sub??
Yes, PCI compliance is the main driver behind this. The requirement being that the field which capture the sensitive data must be rendered by our servers to ensure card numbers are always transmitted directly from the cardholder’s browser and our servers and not inadvertently sent via the webstore’s site. Because we have to implement the iframes were also thinking of utilising them to interface with other features on our side. The webstores that will be using the lib can call or override our java script functions, as long as we maintain the same interface to the function we can have full control on what the function does on our side, without having to release a new version and force webstores to upgrade. 
Is this a joke?
In addition to the recommended YDKJS by getify, also look into his intro to functional programming. Even without fully embracing it, knowing different ways to solve any problem expands your view. 
This is an excellent article. I like how honest it is about the assessment that an infrastructure team has to go through when selecting technologies they are effectively promoting to the rest of the organisation. There's a huge weight of responsibility in the selections when hundreds of developers and hundreds of project are trusting your judgement. The choice of TypeScript over Reason is very pragmatic. I expect most big companies will follow the same decision making logic. Obviously, this is all a very different process to selecting technologies for a personal or one-off project.
Your definitions of pure function and higher order function can be improved. A pure function: given the same inputs, it provides the same output and produces no side effects. You can expand on that notion of side effects. A Higher order function: can take functions as inputs and/or output. You can also spend a bit on the pros and cons of FP 
Oops. 
Before we had Google and StackOverflow, courses or books were pretty much the only way to improve your skills or learn new things. However, now that we have those things, having someone hold your hand and walk you through all of the things you are supposed to learn by following a book, is an inferior way to learn for a number of reasons. For starters, by buying a book, you are subscribing to one person's point of view. Also, reading is a passive activity, so unless the book has a high number of exercises, there is little opportunity for serious skills development. And another thing, once you have one way or another got to the end of the book, then what? You proclaim that you are now 'senior', just because you read a book? Or because you picked up some list of 'best practices' that you start following blindly in all projects. Then you see another guy who didn't follow that 'best practice' and even though it always works fine for him and has no impact on your project, you think that you are the 'real' 'senior' developer because you followed that rule. Buying into books like that just encourages cargo-culting. I think that focusing narcissistic-ally on your own 'level' and 'improving' is a waste of time. What you should be doing is finding an interesting project that could be useful for someone else. My suggestion is to try to avoid re-inventing the wheel. Rather than making yet another React calendar component or whatever (since we already have 4 really good ones or however many there are, I think if there is one good one that is enough) try to make something that someone hasn't actually made yet. You may need to combine existing components, libraries, or technologies. Maybe built a component wrapping a new technology. By trying to do something new and useful, you are giving yourself a good opportunity to improve your skills and knowledge. And also maybe accomplishing something. Then if you have sub-problems to solve in your ambitious project, you can just Google them. And then make sure you take advantage of other people's solutions or libraries unless there is a good reason not to. That way you are spending your time on something useful rather than re-inventing the wheel.
This is actually really cool. Took me a minute to figure out thats space = fly mode though
https://github.com/garris/BackstopJS
https://www.makeuseof.com/tag/4-reasons-shouldnt-learn-code-codeacademy/
y, its nice
JSON is nativity supported in JavaScript with minimal effort. JSON is also easy to read as a human.
&gt; Unlike JSX you are not limited to expressions. You can mix any statement, expressions, and HTML tags within the same function. ... But JSX is also tags that can be mixed with expressions and statements in the same functions?
Waow in phones it works with the accelerometer.. Tap to zoom in, double fingers tap to zoom out.. But I don't figure out how to display the names of the packages..
Build react.js stuff, that's helped me tons in my JS skills.
Most of the visual regression tools are able to remove dynamic content by mutating the Dom before comparing pages. Videos, ads can all be removed and the data served to the site should be as static as possible for maximum stability 
very cool 👍🏻 dose it have a use or its just for fun? 
Having two support *two* formats instead of one, adds complexity. Two filenames instead of one, adds complexity. It may not seem like a lot of complexity, but it adds up. Now you need to justify a benefit that exceeds the cost of such complexity. Is YAML so much better than JSON to declare a configuration? It _could_, of course, be debated if it's better or not, and opinions *will* vary. But that's not even the point. The point is if given that there's already JSON, does adding the option of YAML bring enough additional benefit? And that is *much* harder to justify. As for closing the issue... Reasons are given. The discussion had already taken place and the possibility considered and discarded. You may not _like_ the outcome, you may want more discussion, it may not be _right_, but _reasonable_? Yes, I don't think that it's unreasonable.
Click the orbs.
Tap the orbs.
what else is microshit going to fuck up with our beloved open source?
Yes I tried in the first place.. But nothing happened.. I'll try to open in browser maybe it's the Reddit wrapper...
Nice how did you make it?
Hey JoeTed, Thanks for your feedback. I really appreciate it.
I agree, Brad Traversy is great, and his node/express stuff is very easy to follow. Try a Udemy course for Node, they have special offers all the time and you can get the courses for cheap. 
&gt;I must use pure Javascript [not] JS libraries (no require/include). You can always use libraries. What is your project exactly? &gt;JS does allow customEvents now on its own, but from what I gather it is still wierdly restricted to specific use cases so even to this day people are trying pull NodeJS functionality into JS. Please be specific. I don't know what you're talking about. &gt;does JS (maybe in ECMAScript 2018 or in a draft of a future specification) allow "#define" macros, operator overload and other things from the bad old C++? No, no and no. 
Yes but the DSL only allow expression, but you cannot do things like: &lt;ul&gt; for item in list { if (item.index == currentIndex) { &lt;li className="selected"&gt;&lt;b&gt;item.text&lt;/b&gt;&lt;/li&gt; } else { &lt;li className="selected"&gt;item.text&lt;/li&gt; } } &lt;/ul&gt; You cannot happily mix natural JavaScript statements, like loops, if or any other thing. In blop you can literally mix whatever you want because virtual nodes are just another type of statement in the language.
Neat! My modules look kind of like a spaceship flying into a star: https://i.imgur.com/0KTElaA.png (I build apps with a bunch of modules that all depend on each other but no one else uses lol)
My first motivation was to write a effective parser infrastructure Secondly I used all major FE framework in those last 5 years and I find all of them lacking in one way or another. * React world: JSX is annoyingly limited, Redux is an over-engineered mess * Angular: Dependency Injection is a huge mistake, horrible template syntax, super complicated framework * Vue: I actually quite like view, it also the one of the 3 I know the least. I got also quite tired of huge build systems than the many JS requires these days. Having everything in one language seems to simplify things. At the end I mostly did this because I have an interest in compiler and FE dev. I will look into producing a more complex example including something like a "page" and server side rendering? Why not!
One of the best things I've seen... Great job!
I really do like TypeScript myself. I was thinking about introducing some basic inference into the language but it is a huge task.
I didn't, /u/anvaka did
Blop allows anything in the language without restriction inside those virtual DOM nodes. For loop, variable assignment, throwing errors. Whatever you might need.
How did he/she make it
Some neat stuff: [The ember.js cluster](https://i.imgur.com/vFilUCr.png)
Too beautiful to be true!
Of course, I can use libraries, but I do not want to. This is a part of the "best practices" not to drag along all kinds of files for a small projects. Especially since everybody was (ab)using JQuery everywhere dragging its almost entirely useless fat for a few tricks that can be done in pure JS anyway, though it would not look as nice and a bit less convenient. Not sure about specificity you are thinking of. As we know, CustomEvent is only available for Workers not for general use. And the library you cited is trying to pull NodeJS event methods into general scope Javascript, not just for Workers. 
All languages have their pros/cons, its usually bad developers
There's an awful lot of features that could be "reasonable" and it's just not possible to implement all of them. Even if this wasn't hard, you'd have to present a pretty good case for it. Consider this: Every new package that used it wouldn't be backward compatible with any earlier npm.
holy fuck
The more you know.
&gt; Consider this: Every new package that used it wouldn't be backward compatible with any earlier npm. Not that I think they should implement package.yaml, but technically npm could generate a package.json from the yaml file upon publish of the package and download it alongside the yaml one
You realized that he didn't make it? I assume he has no idea how he/she made it, not everyone is a web dev. But this is made with canvas and javascript or with a game engine running.
As long as you have the actual memory to load it, I'd say try Sublime Text. For me, Sublime has never had any issue opening ludicrously large files and even performs well (especially if you turn the right-hand navigator/preview pane off) after the initial load. What you will have to worry about is that a single open file will be eating 8GB of your resources. What a nightmarish file.
Im currently doing some web development myself (noob) thats why i was interested. Thanks for pointing out though
I don't like your article. It describes \*\*what\*\* the different techniques are, but doesn't give a compelling argument to \*\*why\*\* should anyone use them. The \`not functional\` and \`functional\` examples are bad, since no-one is going to write an \`add\` function and use it instead. If your readers won't even humour using the idea, they'll quickly dismiss and forget it. You don't explicitly state the important fact that \`map, reduce and filter\` return a new array and don't modify the original array. Instead that information is for some reason in \`immutable data\` -section. Your definition of \`immutable\` is incorrect. \`immutable\` and \`does not mutate\` are different concepts. \`immutable\` means that the value can't be changed (at least in a straightforward way). a const reference is immutable. A frozen object is immutable. An array ran through \`map\` \`does not mutate\` the original array, but doesn't make the new array \`immutable\`.
You can add me on steam, search for g1k7771
This is neat. 
Hi Boris, First of all thank you for the insightful and detailed critics you made here, I really appriciate. I cannot argue with your statements, they are all true and I know for sure that I need a lot of work on it. Let me answer step by step. The logo it's odd, I know, however I don't really have much control over it from MD to be consistent both on Gitbook and GitHub, it's just a quick solution, I'll work on that one, even the logo itself is just quick solution and I surely need to tackle the issue with taking up too much space. I agree it's confusing to have all those words together and it makes think people what exactly this could be. The truth is that they are being all together. It's a multi-pupose tool to solve multiple problems and it's really hard to descibe with just one word. I looking forward to improve these intruduction texts. The two complaints I'm making there are repetative tasks which I'm sure many developers have issues with when they are working on multiple projects at once, especially where the codebase is being splitted into multiple meta-repos as separate libraries. Why to use mhy environment? I surely need to tackle this question more detailed :) Quickstart - first time the last command was `mhy webpack-dev-server` which was giving some glimpse what's happening at the end. I changed it to the `wds` alias to make it more shorther, I agree it's confusing now, I'll update that and give proper explanation what's happening there. Your idea of what it does is kinda right. While most tasks are pretty straightforward to set-up, there are many-many issues can come up connecting them together which are not so trivial to resolve. `mhy` tries to tackle these issues. But that is just one piece of the tool, it's much more than that. For lockdown you can have a local install any time or use your own version of any package if you want. The issue here is that this isn't being stated anywhere and I only advertise global install. It's also a plan to be able to support multiple `mhy` versions so you can lock it down your project to a specific `mhy` version. I do like to have the latest versions of everything in projects tho. It ensures maxiumum compatibility, but the very top adventage for me that it makes the codebase more futureproof. It makes refactorizing much easier when a necessary update or a new 3rd party package is being introduced to the codebase that is dependant on a currently utilized package. Taking care updates reguraly pays off much more on the long run. This is mostly true for an end-to-end tested codebase where it's easy to verify that a new version didn't broke our features. But as I said, I see the importance of locking down versions and it's on my roadmap to tackle this. In ovarall: I know there is a lot of things to work on, the tool can be used so many ways for so many purposes that's it's really hard to describe the full potencial I think it has. I know this is not the best way to start, but I was also hoping some devs might catch the essence of the tool and would feel motivated enough to contribute.
It's hard for me to tell exactly what this snippet of code is trying to achieve, but it looks like you are calling a recursive function many times from a loop. That's always a risky situation. If `getNumber()` is slow, then let's find ways to call it less often. Some suggestions: - Is it possible to first handle the whole `jsObject`, _then_ update all the titles? You'd only have to call `getNumber` once then. - You could cache the intermediate result of `getNumber`, but it will make that code even harder to read. I advise against that unless nothing else works. - If that function is still slow even after calling it once, then consider breaking up the recursion into little steps and calling them over time, and/or inside a `requestIdleCallback()` - Consider rewriting `getNumber` to not return a string with the number, but instead, an object of information. That way, you can call it once, and then loop over it.
Haha, that's quite good ;)
I suspect that problem lies in "project.save().then(project ...)" as mongodb documentation says: "The save() returns an object that contains the status of the operation."
Hey PickledPokute, Thanks for enlighten me about it. I'm kinda sharing things that I just learned few days just to help people and help me also to go deeper with the topic. Your comment helps a lot and will update my article for more accurate definitions and examples. Again Thanks and Cheers!
[removed]
you're chillin fuck that guy
So the second method is better for ensuring the object is added? Because it's 'awaiting' the .save()? 
As a first step I updated the introduction page. Next I'l reorganize the pages a little bit, add more info on things and examples to be more understandable.
[removed]
It's funny how big the lodash node is
Forms are now working out of the box with v0.3.0 :-)
[This is what the code does, it gives out these numbers to the tabs. But for example at "6.1.1.2" instead of just knowing where it is and giving the next tab "6.1.1.3" it counts all the way back to "6" to know where it is, and it does this with every child if the parent number. So i think the easiest thing to do here is just for me to rewrite getNumber.](https://imgur.com/741b1327-4e9a-47df-97e1-c3af0abc1f00) 
It would be good to be consistent and use one style above the other in whole code base but I would keep the working solution and I personally prefer async await over the other style. I think the problem is not with .save() taking time. I have not seen the error message so I did just guess that project.id is undefined as by my understanding project.save() returns true or false.
It's cool and all, but npm is lowercase D:
That may probably be the most important point. I mean, it would be a _very good idea_ to clarify this in the introduction to your post, what is your expertise with the subject. It both serves as some sort of _warning_, so that people may regard your content with the appropriate level of confidence/diffidence and also as a way to signal that you welcome corrections and suggestions. Otherwise, not having this information a reader may not know whether you just learned this a few days ago or you've been doing it for 30 years. Not knowing, they may get the wrong impressions.
I agree :) I would write the functionality in steps, in `populateFromObject`: - Parse everything except title. - Call `getChildren`, that loops over all the children like you do in `getNumber`. The result of this function is an array, where each element is an object containing the actual node, and the "number". - Iterate over that array, and assign to each node, its actual title and the number that you just calculated. 
It does seem like a very common task. If nobody here knows good answer to your question, i'd suggest to take a step back and think/look for other possible ways to accomplish same visuals..
It should be a black hole.
Simple walkthrough to install Deno: [https://medium.com/lean-mind/deno-node-js-killer-718c8969770b](https://medium.com/lean-mind/deno-node-js-killer-718c8969770b) But honestly, NodeJS is far more mature. As a Deno user, you'll end up using much of what the NodeJS communities use (npm &amp;GitHub repos). &amp; the Deno community is about 0.0001% as big as NodeJS. If you don't know NodeJS, you'll likely will have a harder time with Deno.
All of the devs I have ever hired are encouraged to learn and discuss things on paid time. I also encourage them to learn on their free time too, like I do. But if you want your developers to be as productive as possible they are going to have to take a breaks to sharpen their saws. A junior programmer can more than double his productivity in a year with the guidance of a mentor who can gives him time to learn on the job. That's good and efficient.
[Step One](https://i.imgur.com/kpl6Pzh.png): Go and right click the slider button and "Inspect Element". It should take you to the inspector and the element will be selected. [Step Two](https://i.imgur.com/q75EN16.png). To the end of the element there's a small `[event]` button. If you click it, it will open a popup showing you the events that are captured on that element. In this case two handlers for the click event. We want the first one. [Step Three](https://i.imgur.com/gy9iV1S.png). You can click on each line to see the code right there, but it's kind of cramped, so you can also click on the small highlighted icon. It will take you to the appropriate part of the code in the debugger/editor. [Step Four](https://i.imgur.com/v3ykcZy.png). Read the code and learn what it does. In this case, it is using a library called jQuery (you may or may _not_ want to use the same, that's up to you) to toggle (add/remove) some classes to some other elements (the cards). [Step Five](/r/LearnJavascript). Visit /r/LearnJavascript for **any** further questions you may have. P.S. If you're using Chrome, IE, Safari or some other browser, the steps will be _the same_ but the places to look in the browsers Dev Tools will be located in different places.
I mean making your apps modular is kind of a way to build one. Doesn't matter if it'll be used in other projects. It certainly makes maintaining and expanding features a lot easier when done right
I think a great sticky in this forum would be good project ideas for anyone to start. You are so right that projects are the way to learn. I also have this app installed with the MDN docs installed: [https://zealdocs.org/](https://zealdocs.org/) You can integrate it in VS Code and just press ctrl-h on top of any keyword and it takes you right to the docs. [https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash](https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash) Now that's learning! :)
displayMatches() calls the function immediately, instead of just passing it to setTimeout to be called later. Remove the parentheses. Also, this.value probably won't equal what you want it to. Look up passing arguments to setTimeout callbacks, or use globals. 
You don't even have to leave the JS world for this, just learn typescript.
Check out this edgy kiddo here, got himself banned from steam for being a jackass.
Seems awesome. Looking forward to Babel 7 support.
Keep building stuff, solving real world problems. Most useful senior-level knowledge is not language-specific.
Ah, crap, it has the support 🤦‍♂️ Will fix the readme, thanks!
I'm still a newbie... What is this? It's incredible. 
&gt;I can use libraries, but I do not want to. This is a part of the "best practices" not to drag along all kinds of files for a small projects. Reinventing the wheel can be useful but it's not usually considered "best practices". I usually only do it to learn. &gt;As we know, CustomEvent is only available for Workers not for general use. Read carefully. There's a big difference between "available" and "only available". However – once you've understood that – don't use `CustomEvent` to implement your custom events. That's for creating custom events that bubble through the DOM like browser events. You usually don't care about that for your own code. &gt;And the library you cited is trying to pull NodeJS event methods into general scope Javascript, not just for Workers. EventEmitter3 is completely unrelated to Node.js. It's [100% plain JavaScript](https://github.com/primus/eventemitter3/blob/master/index.js).
There’s [Code Signal](https://codesignal.com/) there’s 50 challenges in the Arcade area and they are all pretty decent then you can go on from there. It’s pretty cool to compare your solutions to others and see where you could improve or what you did ‘better’. 
Yeah, but js world doens't really teach a whole lot about memory
I guess the creator has used Shiny framework of R Language to make this visualization tool. Not sure, but it can be. I was able to achieve similar data visualization in one of my past project through Shiny framework.
Hi /u/TrooperNI, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Deviso, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ExternalPush, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ginoong_tama, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/I-grok-god, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/amirbadi, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/amirbadi, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/cristiangp, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
[removed]
Hi /u/keepgoods1991, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/NowVSFutureBalance, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ExternalPush, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/xxXen0xx, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Riyenz, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/jbrad77, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/AdaLovecode, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/philnash, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/neutral24, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/imukulsharma, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Best time to switch to Kutt.it, another modern Open-Source URL shortener.
Love them, they also have a react component. For those planning to use it, you should put in each component individually instead of trying to connect it to redux as the later will mess up the disappearing behavior or atleast, it did for me 
Yeah why bother adding tools and learning concepts like pointers, dynamic memory allocation, freeing memory, and everything else other languages can offer that will round you out as a developer
You should add that to the Babylonjs homepage
Damn! that's some reallt cool stuff! How do you decide where to scatter them on space? By time? 
https://youtu.be/Hm3JodBR-vs[Obligatory “neat” video](https://youtu.be/Hm3JodBR-vs) 
Never said you shouldn't. But there's no reason for a JS dev to move 100% out of the JS world in order to add static types to their code. That is what the original comment was about.
There is no need to reinvent the wheel, just use native JS that already exists to implement things you need. And then your little project will not blow up to megabytes for no reason with all those JQuery, React, Redux, ect. Bringing all this bloat into a small project to make it fat is really bad practice. If the project is already meant to be fat in the first place, then, of course, it is a different case. Good to know that CustomEvent available everywhere, thanks. The phrasing MDN uses on this is a bit confusing; they forgot to use "also" in it. I did write that EventEmitter3 requires NodeJS or it is not plain JS. I wrote that it brings methods that implemented in NodeJS to client-side JS. BTW, I am redoing the chimaera eventListener-observer object in a composition style, would be indeed better practice as it can provide proper insulation of methods and properties; thanks again for the tip. From what I gather another way to solve the namespace/scope integrity would be using *proxy* object (almost "operator overload") but it would be too complicated comparing to just using composition. And unnecessary since I am not going to create millions of such classes so the fact that compositing makes the software fat is not critical for my small project.
Hi, yah I understand. Im new to reddit so thanks for the guide
No fake stuff. You just don’t have to immediately surrender the official resume until you know what you’re applying for. 
Inverted like upside-down or like inside-out? Negative like depressing and putting people off or like it doesn't want to be a logo and it's always pretending to be a text or an icon or whatever? In any case, you don't do this with JavaScript. You do this with CSS.
Can we get a TypeScript subreddit, please? Some of us come here for Javascript and are tired of this constant TypeScript push. I've heard your arguments, thanks, still not interested.
Well, it is javascript, and they do share the ecosystem.
I mean, as long as typescript is just transpiled JavaScript, should it be included under the JavaScript category? ... but I do understand your point.
The key to learning or understanding any language is to use it. Write challenging programs, even if they are small and simple right now.
In one direction, but not the other. And this is a sub about that JS, so it doesn't really apply.
100% I think the key to JS is understanding closures. Closures power the entire JS language and they are the most confusing part for newbies. I'd point you to a particular article or or workshop or something but instead I'll give you an exercise that was once handed to me as a part of an interview for a job many years ago: `Implement the A+ Promise API from scratch in vanilla JS.` Doing so requires a really in-depth knowledge of closures and the scopes they create, and should really fill in your knowledge gaps.
Understanding the DOM is very important. More specifically, using JavaScript to Manipulate the DOM.. For example, making a button that adds/removes a div to/from the DOM when clicked. &amp;#x200B; I highly recommend this [course](https://www.udemy.com/the-complete-javascript-cours). I'm not affiliated in any way, but I used it to fill in the gaps in my JavaScript knowledge and went on to create an image gallery plugin for WordPress from scratch immediately afterward, using what I'd learnt from that course (as well as my existing PHP knowledge). I guarantee you that if you were to get that course (it's only like $10) and stick to it until the end, it will open a whole new world to you and you will be able to confidently approach projects and complete them.
Been using this in production for the better part of a year now. Loving the frequent updates and improvements.
You are wrong Javascript can use typescript code and typescript code can use Javascript, typescript just evolves Javascript from its weaknesses, stop being butthurt about it and stop living in the past. Typescript is here :) 
Can you write plain JS in bridge.net? Vanilla JS is valid typescript. I don't think the same can be said for C#. I could be wrong though
[You can do the exact same shit with C#. TypeScript isn't special](https://tjanczuk.github.io/edge/#/)
Hi /u/gregfdz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Potkoksas, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt;They don't share ecosystems nor syntax. Typescript is a superset of Javascript. All javascript syntax is valid typescript. This is not true for other languages that compile into Javascript.
You can, actually. You can even invoke C# code as a string from inside JS. Its full interop.
Sure, which (from my viewpoint as a JS dev) is just a TS implementation choice and nothing whatsoever to do with the pure vanilla JS ecosystem I live in.
So what do you submit that isn't your official resume? 
Agreed. This subreddit should just be closed and redirect to Typescript.
There it is.
Huge Udemy fan so +1 for that.
And... apparently I already bought it a while ago. Shows how busy I got with freelance. :| Time to use it.
What for? And I'm looking for a major use case answer (that is not just theoretical but something people have been waiting for and that would get wide-spread adoption), not something obscure made up only to make a point in an anonymous Internet discussion.
FWIW `null` is not an object. The fact that `typeof` reports it as so is considered a bug. More info: http://2ality.com/2013/10/typeof-null.html
Writing articles about other articles... Really?
Lack of understanding the concepts. Most people don't have a Computer Science background and jump straight into the code, without learning fundamentals like how the references and allocated memory works, basic algorithms, modularity, data structures and so forth. This leads to poor understanding of the language as a whole, "Ctrl+C/Ctrl+V learning". At work, many many times I had to fix broken code written by people with little understanding of basic concepts. It's always a horror show.
That's great news. For me, the budget app project was the most useful part of it, seeing how everything ties together and how to arrange the code with the module pattern so that the concerns are separated. I think the DOM Manipulation &amp; Events section will help you out big time. The objects section was great too, I've read about JS objects from multiple sources but still learned new stuff from that section in this course.
I think the key is just practice and exposure. - If you work on any projects that involve JS, take over some of those tasks and sink until you can swim - take that Udemy class you forgot you bought - create a simple react app and apply your design chops with styled components instead of CSS - read books like Eloquent JavaScript and You Don’t Know JavaScript - learn to use the command line, npm, and git - read other people’s code, even if it doesn’t make sense yet, check out projects on github - watch JS YouTube channels Most importantly though, keep at it. I worked on a swift project for a year and came back to JS to realize I’d lost my chops. If you’re confused, you’re learning. Practice practice. 
This is just a paragraph followed by a couple of links to 2ality
I think you're arguing with the wrong person. I specifically said in my comment that I don't think they should switch to yaml
I worked on a project that used visual regression tests and, at least for us, it was a pain in the ass. Primarily because (we later realized) we didn’t care that a button was 8px away from the logo. We cared that the logo and the button were present and functional in the DOM. Anytime we made a style constant change, like upping base padding a few pixels, all of our tests failed. It became impossible to find real problems in all the noise. I’m sure tools have improved since then, but it wasn’t a very useful tool for us then.
writing your own implementation of es5, even if incomplete, can teach you a great deal.
ES3 joke nailed it. My impression has always been that progress is really just a massive collection of these kinds of debates, over what amounts to relative minutia. Whether or not default exports are bad, whether or not they're even a worthwhile consideration, I think the fact remains that these minuscule (and often, admittedly, silly) debates are, in general, a boon to the growth of the industry. Engineering in particular has benefited enormously from participants constantly asking themselves, "how can I make this tiny thing easier?" It wasn't so long ago JavaScript was only as accessible as it was because it was responsible for little more than manipulating elements on a web page. Even jQuery was really just a collection of countless miniature tools to get developers away from wasting time on hammering nails and move them towards more time in front of the drawing board, right? &amp;#x200B; I work in the NYC corporate scene where I see virtual no consideration for code-writing policies, etc. and the volume of technical debt and the pace with which a team can accumulate it is staggering -- so maybe I'm biased by being on an extreme end of the spectrum. &amp;#x200B; These discussions can definitely be a waste of time, no two ways about it, but it seems to me that overtime they're definitely a net win.
I'm wary of this since it's a bit of a departure from how javascript works. JSX is limited to expressions because expressions yield a value whereas statements do not. I haven't looked at the code, but assume you have to manually parse these statements and determine their resulting value. I'm not saying it's a bad idea, and can appreciate that you are trying to avoid crazy nested ternaries for non-trivial control flows. However ... you can also just pull that control flow out into a function if you find statements to be more readable.
what does the connection line represents? dependencies?
So I've opened this site on my phone and for a while I thought that they have wrong data because I was looking at the "walls" where there're lots of packages with no dependencies. But then I looked down and saw that giant cloud of entangled packages that npm is famous for.
I spent some time today and implemented SSR (server-side rendering) https://github.com/batiste/blop-language/blob/master/example/server.blop
This. Find some schools Algorithms 1 ppt slides and learn.
That’s the worst example, try bridge.net
Just plain JavaScript, device orientation api for camera position , and three.js for rendering
It’s driven by a force based graph layout 
Hi /u/sunps, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/wuddupdude, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mechwd, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Under the hood, this is more or less what is happening // blop input def test() { &lt;p&gt;1 + 1&lt;/p&gt; } // output function test() { const __1c = []; const __1a = {}; __1c.push(1 + 1); const __1 = blop.h('p', __1a, __1c); return __1; }; 
Either you left off the `/s` tag or [you completely missed my above post?](https://old.reddit.com/r/javascript/comments/ainyzf/unpopular_opinions_typescript_isnt_javascript_and/eep53dm/)
Nice! Thanks for following through on that
Don’t know why this is downvoted. I agree with you. Looks like our knowledge of how npm must be spelled is getting archaic 
Yep... Did you see the milky way too?
What?
Yes
I described it here https://youtu.be/vZ6Yhlxv7Os It’s all JavaScript. Doing graph layout 
Wonderful. Keep it up. This is an amazing portfolio piece.
there is an enormous shortage of these
Hi /u/titooo7, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/codeclassifiers, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/oczekkk, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This is absolutely incredible. I love it. Really inspiring as well. At first I thought it was just a flat image _UNTIL I LEARNED I COULD FLY!_
You sir, deserve a cookie. Awesome!
i'm thinking you'd benefit more from modularizing your code than ironing out the class/pojo/factory stuff. isolating concerns into different modules would probably help straighten out with the spaghetti code, and it's gotta be a pain jumping around that one big file. wish i could give you more to go on but i've only worked with modules in node on the server-side for the past few years, so i'm rusty on using them in the browser.
I do split my code into separate files for css, but I dont work on large js applications, which is why I prefer to keep all of my code in a single file. Also, this will fix only a part of my problem, as I'm gonna need some way of organising the code anyway. Thank you for the advice though, any help is appreciated. &amp;#x200B;
Thank you :)
[https://github.com/davidflanagan/jstdg7](https://github.com/davidflanagan/jstdg7) &amp;#x200B; Seems like the repo hasn't been updated in a few years :/. We'll have to see. imo 6th edition is still a good reference.
This is amazing. This guy made one of these for a ton of languages: [https://github.com/anvaka/pm](https://github.com/anvaka/pm)
ugh i thought all that code was one crazy file that made no sense. that's what i get for skimming.
really it is a modularization issue to keep it readable. I have for certain applications done everything in one file though and used vscode to collapse large sections (with an appropriate end of line comment), so visually it looks like a list of modules with some modules expanded, and everything still at your fingertips. It is especially helpful with large-ish html files though, as you can always fall back to script tags w/js, plus numerous ways to dynamically load code or pre-package it.
Not sure if I’m just not seeing the full code picture, but the first thing I notice is your variable names don’t match what you intend to make happen. You are calling it movementBlocks within your loop but your variable is called soundBlocks. You are also attempting to call doMovement as your function to execute within the loop when based on the pop up directions it looks as though it should be playSound. 
Beautiful man ! good work! &lt;3
i didnt type that out, it was what they provided to be edited, thats where i am stuck, i would highly appreciate someone to type me an edited version!
[removed]
Start small, join another tiny lib that someone posts here, then work yourself gradually towards the "big guys". At least that's my view of it :P I wouldn't jump straight in to webpack without having made a pull request before :D
repost?
Daily UI challenge, just make different UI piece each day \- Modal \- Popover \- Notification \- Tooltip And so on.. each is simple in it self. You make it as hard as you want to. You could spend 2 minutes on it and have a rough prototype, or 2 hours and have something beautiful.
This is some fancy shizzle!
Does this sub look like /r/HomeworkHelp or /r/DoMyHomeworkForMe to you?
Hmm... perhaps something like this? export default { header: document.querySelector('.header') } &amp;#x200B; export default Dom /// import Dom from './dom' class App { constructor () { this.init() } init () { new AccordionController(Dom.header) } } export default App /// &amp;#x200B; class AccordionController {} export default ... ///
Ohh cool, thanks! Nice work btw! 
Hi /u/wintercounter2, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/djangster75, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/ribeirao, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/worryhereandthere, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/KemoCono, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/yesnoornext, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Because `this` is bound at the time of invocation, and is determined by the manner of invocation. In the case you cite, the function (callback ) is not invoked as a method (`object.function()`), so it falls back to the default binding of `this`. Kyle Simpson's YDKJS has a really good section outlining 4 rules that govern `this`bindings. Check it out. 
Thank you :)
Creates it's own context overriding 'this'. You can either use fat arrow function definition or bind the function manually to 'this'
\+1 for easyness \-1 for being google
[https://codeshack.io/basic-login-system-nodejs-express-mysql/](https://codeshack.io/basic-login-system-nodejs-express-mysql/)
If you're only doing username and password, you can roll your own and avoid Google. If you're implementing social logins, you're using Google, Facebook, etc. anyway. 
Hi /u/wdGelwix, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TheConMan1234, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Easiest way to contribute is filing/fixing bugs. If filing an issue, include a brief summary of the issue, repro steps and dependency versions. Submitting a PR to fix is more work but a step closer towards actual code contributions. As before, include a summary of the issue and repro steps. Also include tests and make sure you adhere to linting rules etc to make it easier for the maintainer to review and merge your PR. Other than that, many projects have issues tagged with "good first issue" labels, which are usually a good excuse for someone motivated to dive into the codebase and work towards becoming a more active contributor.
They need 1 package with a dependency on everything for that. 
So it uses the force?
Thanks anvaka
Is your server using https? The Bluetooth API only functions on https pages. https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web#https_only
That might be it. It's not https since it's a school server
The entire library for NPM plotted as a star map. Connected projects show up as links, but each package shows up as a star.
Ever since ImpactJS was opensourced I've wanted to dig in and see what modernizations could be done, but never really had the drive. I'm particularly eager to see how you've served up weltmeister, typically a php app. I cut my gamedev teeth with this engine, love it, and still love it today. It was sad to see it falling out of mass favor, and my favorite resource, PointOfImpactJS, go offline a while back. I can't wait to take a look here and see what you've done. 
Amazing! How can it be so fast with hundreds of thousands of nodes and edges on an iPad mini 4? 
I wonder what the reasoning behind private being # is. [private is already a reserved word](https://www.quackit.com/javascript/javascript_reserved_words.cfm), why not just use it?
This is a frequently asked question. The answer is here: https://github.com/tc39/proposal-class-fields/blob/master/PRIVATE_SYNTAX_FAQ.md#why-arent-declarations-private-x
Can you say a little more about why you like Impact, so those of us who haven’t heard of it can understand the excitement here?
 class A { pub = 0; #priv = 1; m() { return this.pub + this.#priv; } } I imagine a lot of developers are going to see # thinking it's a new comment type? The crux seems to be JS has messy this.property syntax to access public fields. Would putting private implicitly onto a private object be any better? class A { pub = 0; **private** foo = 1; m() { return this.pub + this.**private**.foo; } } 
the cli is written in go, so i completly removed php - you can just start and everything should fit together :) one point i'm not that happy with, is the generated entity file - but i removed the whole ig.module system and replaced it with es6 imports, so weltmeister needs fetch the entity classes and needs the implementation to instanciate them - it was the best idea for now :/ &amp;#x200B;
Just getting the weltmeister running without all the setup is a huge win. Thanks again and I look forward to trying it out :)
yes of course! i think the first release of impactjs is about 10 years ago. it is a javascript game engine, with a custom dependency management system and a custom class implementation. like 10 years ago, this was pretty hot stuff with a nice and elegant api. also impact ships with weltmeister, the level editor, i think its easier to take a quick look at the demo video from the author ([https://impactjs.com/documentation/video-tutorial-weltmeister](https://impactjs.com/documentation/video-tutorial-weltmeister)) over the time, a lot of plugins were made, box2d physics and in a 2.5D plugin. myself wrote a websocket plugin for multiplayer games. i had a lot of fun :) time is moving fast, new ways of developing javascript are born, new language features are available, and i tried to reanimate this engine
This brings back memories, great work! Thank you for taking the time!
I remember the day you released that websockets plugin and demo. Changed everything for me. I used to be real active on the forums and helped redesign the weltmeister :)
There are plenty of reasons to \_add\_ yaml as a format, otherwise you wouldn't be seeing other technologies adopting it (kubernetes, eslint, prettier etc). I'm not suggesting JSON be deprecated either. Yaml is really nice to work with (as a human), is backwards compatible with JSON, and personally i'd love to see it implemented.
Hi /u/CucumberMilkshake, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Where is it?
On the back of lhorie's point re: "Good first issue" labels - there are projects out there that highlight tasks ideal for first timer contributors! https://github.com/MunGell/awesome-for-beginners https://www.firsttimersonly.com/ 
Did you try \?
I don't think that works in URL.
Thanks a lot, the community was really nice and helpful :) (I hope it changed in a good way)
I love how JavaScript is being pushed forward each year, but I can’t help but think how Typescript has already solved a lot of the things being debated when it comes to future spec. Tbh I hate the # notation and will just stay in typescript world
This is a superb website. Thank you! Consider adding a "tweet" and "share to facebook" buttons!
I created **Video Hub App** about a year ago and open sourced just in December. I now have an enthusiastic collaborator that has made the software better and from whom I've learned as well. The app uses Angular and Electron, and it's simple to start learning by seeing how others have built things: [https://github.com/whyboris/Video-Hub-App](https://github.com/whyboris/Video-Hub-App) I strongly encourage you to contribute to open source software - it's generally a very welcoming atmosphere and you'll likely get good feedback on your PRs. I started by contributing to a project, but the owner mostly went missing, so I just created a fork, made it to better fit what I wanted to do with it, and shared it with the world: [https://github.com/whyboris/karma-helpful-reporter](https://github.com/whyboris/karma-helpful-reporter)
Also consider: [https://github.com/MunGell/awesome-for-beginners#javascript](https://github.com/MunGell/awesome-for-beginners#javascript)
I think joining a tiny open source lib is a great way because there is less overhead in getting familiar with the code and there is a lot of work to do. Even non-coding related pull requests would be a good way to get into an open source project, like documentation or example code (for deploying/using). There is also this site: [https://www.firsttimersonly.com/](https://www.firsttimersonly.com/) but I'm not sure if it's actively managed and have never used it. Eventually, you will reach a point where you might start contributing to open source modules you use in your "main" open source project. That is sort of how I started to contribute to other projects. I needed certain functionality from another module that didn't have it yet, or I found a bug in the other module, so I went ahead and opened an issue or even opened a pull request to fix or add a feature.
ajv follows closely latest JSON schema specs, and implements it even before it is even final. Usually the missing feature is just a spec ahead, so as a user it is much less frustrating to use JSON schema now than it was two years ago.
Just for fun. I hope the navigation with device orientation might inspire someone for greater things though :)
Thank you. There is almost zero computation on the client side, so all WebGL has to do is render bunch of points, for which it was designed to be fast :). 
TypeScript typically likes to stay in line with JavaScript if possible so I wouldn't be surprised if they change their own syntax in v4
I would doubt that. Why not keep it the same? If necessary, transpile it to the new syntax. I don’t see private even being important in a run-time environment anyways.
Fix bugs. One of my earliest "bugs" was simply updating a definition file for a new joystick in a library. &amp;#x200B;
This needs a way to orbit around a vertex.
¿That's not the wrong order? Or where you getting at?
i'm not a heavy immutablejs user but was browsing and found this issue interesting. [there have been a bunch of releases](https://github.com/facebook/immutable-js/releases) since this repo but maybe there is a fork going on? how are y'all who are using immutable dealing with it? (i know about immer, im just interested in the future of the immutablejs project itself)
That was the title of a blog post, not a question. Perhaps it wasn't clear? Could I repost with a better title? Something like "Tips for how to start a new Node.js project"?
&gt; I have been studying JSP lately Blimey, are you a time traveler from 1999? PRO TIP: drop that shit. It's old, it's ugly, it's only used in legacy systems. Trust me on this
Sorry, I need to make the message clearer. If the content is aimed at beginners, then it still should go to /r/LearnJavascript.
Because when you use inline function definitions within the argument list, you have to follow the code all the way to the end of the callback to see what the timeout time was set to. Generally callbacks work better as the last argument for this reason. If the time were the first parameter in setTimeout, you'd know at the beginning of the call what the time was set as. setTimeout(1000, function randomFunctionIFoundOnWeb(index) { // finishing condition if (index == iterations) { console.log(primes); pointlessComputationsButton.disabled = false; return; } // test this number var candidate = index * (multiplier * Math.random()); var isPrime = true; for (var c = 2; c &lt;= Math.sqrt(candidate); ++c) { if (candidate % c === 0) { // not prime isPrime = false; break; } } if (isPrime) { primes.push(candidate); } // schedule the next var testFunction = testCandidate.bind(this, index + 1); window.requestAnimationFrame(testFunction); } }
Use [Create react app](https://github.com/facebook/create-react-app) and eject it; look at the ejected scripts
Am I the only one who thinks this is horrible UX on mobile? If I could turn the accelerometer off I'd like Google-maps like controls.
JSP = Java Server Pages JS = JavaScript JavaScript != Java
So you're saying that the function has to be read to the end before initiating the timer? So if the callback comprises lots of code it could delay the timer? 
They're talking about it from a the standpoint of a developer reading and trying to interpret the code. The two styles are functionally equivalent in terms of performance.
Great project! I have fiddled with Impact a few years ago and eventually moved on from it due to it not being modern. I will have to give this a look. &amp;#x200B; I wonder if you have any thoughts on whether or not it would be feasible to integrate with React. One potential use case I see: having a react UI overlay on top of the canvas. Could be a useful tool for designing menus, game controls, health/magic bars, help screens, and maybe even dialog boxes. &amp;#x200B;
I will continue to use it without a new major for a very long time, and I don't know what breaking changes would be so good that I would refactor code that's been stable for years. That's how it goes though... libraries change, thank goodness (most) people are responsible with their versioning :)
Out of curiosity, who is still using immutable js these days? what is your use case? are you happy with it?
my company uses it but honestly i dont think there was much thought beyond “it seemed recommended to use with flux at the time”
Codility tests are like any other test. IIRC some of them are timed. I'm pretty sure Codility tests allow you to choose a language. You should talk to the employer and confirm this. I would use codewars or hackerrank to warm up my JS before attempting. Also IIRC, Codility tests simulate real IDEs (I might be wrong about this since its been a while since i took one of those tests). I'd prepare for that eventuality.
That would make a really cool wallpaper.
Codewars has helped me learn more about js than anything else.
This thing is amazing on mobile. What a way to experience data
Impact helped me learn Javascript. Thanks for sparking up an old flame.
Personally (and I fully expect downvotes on this) I'm going to fight to prevent people on my teams from using this for as long as I can (ie. until using it becomes standard practice). In my opinion (having programmed Javascript since last century, having written a book on a JS framework, having taught a university class on Javascript, etc.) that JS is a better language without privates. I'd feel the same way even if the new syntax wasn't atrocious, but the syntax helps me feel better about my decision :)
The question is still valid. I don't know much about JSP, but if I understand correctly, it's basically the same as asking about the differences between server-side and client-side rendering. 
That's it? Since most callbacks are not defined inline would it be fair to say that this is simply a stylistic preference and not detrimental to performance?
ok, got it.
I would rather type one character than private every time 
Be careful, this is how you get Perl.
 &gt;In my opinion... JS is a better language without privates. You had me up until this part... why? Privates are just another tool in the box of data encapsulation 
A little over my head, but looks cool. How fast can you get the data, or does that require advanced equipment?
Thanks!
I have a quick question: how do I avoid react anti-patten known as "prop drilling" with Apollo client? With redux, we simply connect deep nested component to the store, use a selector to get state data. Haven’t found any good article/example yet.
Thanks! Brainwave data can be collected with an EEG headset, which streams the data in real time. They're still expensive but have been getting a lot cheaper and easier to buy. An OpenBCI with 16 channels of data (about how many you might want for the use case of this tutorial) would be about $1000, but a Muse headset with 4 channels, which would provide enough data to collect mental states such as how relaxed or focused you are, is $160
JSP is a server side thing, like PHP. HTML and JS are client site thing. Your JSP will generate a HTML(that can have JS on it or a link to a JS to be used by it). You can use JSP + HTML + JS, with JSP generating a view made of HTML + JS + CSS, but i would recommend you to learn more about PHP or NodeJS instead of JSP and React or Angular after you get a good feeling about JS. But if you insist on keep going with Java, search about PrimeFaces and frameworks like that after you get the basics about JSP. But if you're a hobbist choose whatever you feel more confortable with.
\- Build small libs that you yourself would use on a daily basis \- Find a project you enjoy using and see if there are bugs you can fix and create PRs for \- Writing guides / tutorials where there are none for projects is also another way to contribute That's how I do it myself.
Wow, thanks for your recommendation. Really appreciate it.
That's what I am asking about.
There's a cost to every feature in a language. It's one more thing everyone (new and existing programmers) have to learn. It's one more thing that all the JS tooling out there needs to support (and raises the difficulty of making new tooling, if only slightly). It's one more decision tree you have to go through with every property (should I make it private or not?) It's one more thing for teams to fight over (should we use privates as a team or not). And I'm not saying all that's necessarily bad, like some kind of JS fatigue rant. I absolutely think arrow functions (for instance) were worth adding to the language, despite the fact that they introduced all of the above as well. But the difference, as I see it, is the value. Arrow functions are significantly more convenient, and that convenience "pays" for the added language complexity. But I just don't seem private variables adding value equal to their downsides (and again, all that is especially true with the new ugly/divisive syntax). 
Huh, sure. I posted as I didn't know the things in the article and don't consider myself a beginner. Thought it would have broad appeal.
Most of the work is done in Javascript on this, and I bet you have it all copied over. What it looks like you're missing is the HTML: `&lt;canvas id="stars" width="300" height="300"&gt;&lt;/canvas&gt;`. If the canvas IS in your HTML, and has an ID of "stars" already, it could be a timing issue. If this is the case, perhaps your JS is running before the &lt;canvas&gt; tag is on the page. A hacky way to get it working might be to put the Javascript after the tag. So: &amp;#x200B; &lt;body&gt; &lt;canvas id="stars" width="300" height="300"&gt;&lt;/canvas&gt; &lt;script&gt;....the JS you're copying...&lt;/script&gt; &lt;/body&gt; &amp;#x200B; There are better ways with Javascript to solve timing issues like this, like wait for a document ready event from the browser, but it looks like you're just getting started and it'll help to see something in action to get excited over.
I don't know entirely what this means but I'm pretty it's quite awesome. Have you played CrossCode? It has the ImpactJS logo when it boots up. The game is fantastic. 
Afraid I've never used Apollo myself, so I don't have any particular answers there.
Take a look in the console of Chrome in the version that's working in Firefox. I think you might be having a same-origin policy problem, as outlined in [OpenSeadragon's Getting Started documentation](http://openseadragon.github.io/docs/). &gt; If you are working directly from the file system (accessing your web page from file:///path/to/your/file.htm) you may need to change your browser's local files security policy so that your zooming image data can be loaded. Firefox is generally more permissible than Chrome and IE with regards to accessing cross-domain file:// URLs. You could [disable same-origin policy enforcement](https://juplo.de/bypassing-the-same-origin-policiy-for-loal-files-during-development/) in Chrome, but it's a major security hole. The only reliable and portable way to do this is to load the file via HTTP from a web server with proper CORS settings. That could be a remote server or a server running locally.
Thanks its solves
This is very cool, thanks!
Haha I see what you did there with that pun! 
This is great, thank you for doing this work. I will make time to delve into this. I was an early backer for Muse back in the day but never got to the good stuff. Thanks again.
Yes indeed I'm a 24 years old kiddo. I was arguing with a mod over 20 pages, he said something like "You're doing your best to get a ban?" then I said "Fuck you, now you can ban me." and this is how I got banned. But thank you kiddo for your opinion on a person (me) that you don't know at all. I guess we can hit more down votes :) This reminds me a bit of stackoverflows reputation. 
You should use ' for escaping instead of "
Even if the "rawData" in that case is coming in as form data submitted as a JSON string?
You need a double backslash because you want a literal backslash in the string. You are just escaping the quote, which isn't doing anything in the template string. I think you might be suffering from the difference between the displayed output of a string and the actual programmatic value. I've tried to [demonstrate the difference between your template string and the a stringified object](https://jsfiddle.net/_sir/ges5t1uh/).
I love Perl, but this comment checks out.
In addition to senocular's answer, it also separates the function and arguments rather than keeping them adjacent.
Try joi or validjs.
Hi, So I saw this and the speed at which it was created, and now I want to know how it works and especially I would love to be able to make my own with my own data. Could someone explain what is going on in things.js file? I'm very new, if someone could explain high level what's going on, I'll see how far i get in making my own. Thank you!! 
This is cool, thanks for posting this. Can you highlight the use cases for this that aren’t already served by ReactNative or pure native (e.g. ObjC)?
This was it, thank you! Bad phrasing on the question from my end. Upvotes for all
Okay, I found this! https://lodash.com/docs#get
Thanks for checking it out! I hope to publish some demos soon which use the Muse as well
What does your jest config look like?
The issue with that there is no way to add any details... Thanks for moderating this AFTER 3 DAYS and losing my valueable conversation there!
Dont doubt. It will happen. 
I also added another page and a simple "page router" https://github.com/batiste/blop-language/blob/master/example/index.blop Feedback welcome on the page router if it is not what you were expecting.
of course! on the forums the team posted early demos ([https://impactjs.com/forums/games/crosscode-demo](https://impactjs.com/forums/games/crosscode-demo)) and the finished game is quiet impressive
A buddy of mine is somewhat of a conspiracy nut. He told me there were devices that can read brainwaves and even manipulate them. I don't consider him a ninny, but sometimes he says things that make me question the authenticity. On this occasion however, he was able to provide me with a little proof: https://patents.google.com/patent/US4717343A/en 
`things.js` simply defines two things. 1. The list of reddit posts as an array of arrays. Each element array contains the URL the post is pointing to (element index 0), and the URL of the post (element index 1). 2. The relation between the posts as an object. i.e. which post points to which post(s). Each object including the root object (the `relations` object) contains an `i` (for "index") property which points to the `things`' element index (the post), and a `c` (for "children") property which is an array of objects that the current post is pointing to.
Plotting is very much possible in javascript.
Am I missing something, that patent has nothing to do with brainwaves? It's about conditioning someone using a series od images/videos.
Oh, I'm sorry I think I posted the wrong one. I'll see if I can find the correct one tomorrow.
If no explicit declaration is done, JS attempts an 'implicit' declaration and creates a global variable ' Assigning a value to an undeclared variable implicitly creates it as a global variable (it becomes a property of the global object) when the assignment is executed. ' [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) &amp;#x200B;
I can answer part of your question: reading "brain waves" is definitely possible. However, as of now, you need either big machines around your head or electrodes that are attached to the skin with a transducing gel. No technology exists yet that can easily read brain waves from a distance. Manipulating is probably possible too: we have TMS (transcranial magnetic stimulation) that can stimulate or deactivate brain parts near the skull, possibly by manipulating the "brain waves". However, reading brain waves isn't very useful. They can give you some info: is a certain brain part active? Is the subject asleep? The knowledge on active brain parts might sound interesting, but it's disappointing: it could tell you whether someone has their eyes open, or if someone is moving (or trying to move). For all this you'll need the specialized equipment mentioned above and specific software. That's basically the extent of the possibilities right now. So I wouldn't say your friends is wrong in general about this, but within a conspiracy context, brain waves aren't interesting (yet). I'm curious about the patent, though.
Sure. With RN, you have to set up all native bindings in advance. I.e. for every native feature you think you’ll want to access, you’ll need to create a native module to expose that functionality yourself. Even if you do create the RN native modules you need, however, until RN Fabric, all native access will have to be async (because the JSContext runs on a different thread to the main/UI thread), which makes for an awful user experience. There is also simply no way in RN to keep a JS reference to a native variable like a Delegate or a Constraint and pass it to another native module, but NativeScript (NS) enables this with its first-class marshalling support. Pure native can only be written pre-compile-time. As for programmatically accessing native functionality at run-time, Apple only allow dynamic languages such as JS and Python to do so. So with my app, you can augment your app while it’s still running. Imagine applying a patch yourself just by copy-pasting some JS in! You could add an extra tab to the tab bar, persist some data to re-apply this patch at startup... Hmm, I should probably demo some of this. Oh, and my app gives you a fully functional JSContext in case you just want to execute some JS. Though there are better solutions for that!
Any #id will become available as global variable in JavaScript, though it's preferred to not use it, so people know where it actually comes from. 
Thanks! By searching around for id global variables, I found another thread on this sub where someone asked the same thing: https://www.reddit.com/r/javascript/comments/7o70wg/is_it_bad_practice_to_use_an_elements_idglobal/ (Just in case anyone else comes across this thread later)
I already had a post about my creation, but I was asked by moderators to resubmit as a link, so here it is. `mhy` tries to deliver you an out-of-the-box modern developer experience (currently focusing more on client side). It tries to solve some repetative tasks I've encountered during the years and many more... Stars are welcome if you like it, it's a work in progress stuff, documentation-wise also.
100% agree. As a side note, this feels like something the C++ commitee would do.
wow dude, this is so fucking cool
FACK! That's amazing. But in desktop we can't zoom?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/askprogramming] [Exam project with javascript](https://www.reddit.com/r/AskProgramming/comments/aiynw8/exam_project_with_javascript/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
did you consider creating a CMS in nodejs/angular?
I think it's worth mentioning that `arguments` is an outdated and not recommended way to do this. If you're working with ES6 compatible code, rest parameters should be used for all functions, not only arrow functions.
[removed]
That looks interesting. Sadly the price is way too much for me to go that risk. I always thought about joining a group that is participating in health and science in the hope to improve the current state. 
Why do they need to make this language uglier...
What is with the "mondayThe revolutionary project management tool is here and it’s visual. Start Your Free Trial Now." ? Would I get that if I use the library ?
That’s the danger of frameworks, especially in JS where things change fast. What framework?
I wouldn't mention the framework, just misery loves company. Any stories on your side to share ?
Nothing directly comparable, but I need to translate a big website soon, and it’s CMS is on the cusp of introducing multilingual support (but no release date)... I’m just hoping the update comes out before I have to reinvent the wheel. 
What the hell major framework just deprecated so many APIs that it affects your project so badly? Also, deprecation is far from broken. A lot of deprecated code in major frameworks will stick around for a long while. 
Yes I agree with you 100%. But you know that *feeling* ? Code still work but that feeling that your new and shiny project contains "depreciated" work.
So then what framework was it?
I understand what you are going through...
Just in case that other guy's comment wasn't clear, the term is deprecated.
Must not have actually happened
Deprecated and depreciated are interchangeable and mean the same thing in this context 
&gt; I tried to forge my own request to mywebsite.com/secret from mywebsite.com/ but there is no way to extract cookies added by the browser to the request You need to write your server side code, something like res.send(req.cookies.secretCookieName); then you'll able to read plaintext (or JSON) response as cookie content. But if you don't have access to server side code. maybe using [history.pushState\(\);](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to your /secret -&gt; get your cookies -&gt; then use history.back(); to back to your home page also *might* be work. If method above don't work either use Iframe with [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) should work but require more code. 
I don't think that's true. I can't find any definition for depreciate that would fit this. https://stackoverflow.com/q/9208091/1339826
Only on reddit would this be something argued about. Nowhere else. You are correct.
Nah, depreciacion is an economics term describing loss of monetary value of a resource over time.
Why not just have the thumb drive auto run the page? 
just because api functions are marked as deprecated doesn't mean that you can't use them anymore but you certainly should refactor your code using the advised functions in a timely mannner .... looking at you big companies &gt;.&gt;
There is probably no framework. He just wants some karma. I have never seen such major breaking changes in major frameworks. Except from angular 1 where google changed the framework entirely but wanted to keep the name.
&gt;Yes indeed I'm a 24 years old kiddo. Nailed it with the first sentence, I needed to read no more. But I did, and you are wrong, your attitude sucks and we can all sense it from much further away then you can imagine. We know your kind kiddo, some of us been there and we grew up. Good luck with that.
I think OP is trying to make a joke because he hasn't named the framework. Sure, there are frameworks out there that do this, but none of the major ones (Angular, React, Vue) are going to introduce major updates that break things. The only recent example I can think of was AngularJS &gt; Angular about 4 years ago now and I think they learned their lesson.
Yeah either he’s really shitty at telling jokes or has no clue what the fuck he’s talking about. Or both. 
This guy codes. OP doesn't.
[removed]
Fake news.
To be fair, they never said the upgrade broke anything. They're likely just getting deprecation warnings in the console. 
Development teams across the world have this conversation every day. Reddit is not the only place. 
Thus begins the rise of BCI controlled electron apps. 
Very cool! But I'd suggest setting `-webkit-tap-highlight-color: rgba(0,0,0,0);` (transparent) as currently your whole site is flashing blue when I tap something.
It's true though
Based on what? I can't find anything and everyone is saying they aren't the same.
thanks for answer, and for Game animation I think there is other solutions like the Game software dedicated to create animation.
Do you have the ability ability to convert this to the Tradovate platform?
Name of "major framework" or that didn't happen.
Thanks for stopping progress for those of us that aren’t 100 years old and can handle a little bit of complexity. 
Angular 1 works. It's just that upgrading it to angular 2 isn't straightforward 
Wow, TIL! Thank you very much :) I will add it tomorrow.
Incidentally, I name my DOM elements all lowercase and bridged together with minus symbols like `some-unique-element` If you do it like that, you won't be able to accidentally access it (you could go out of your way and do `this["element-id-here"]`). JavaScript will expect the minus to be part of a statement.
Awesome! Thank you! :) 
Under under the hood, how is it determined if a function will return a promise or not beforehand?
You’re missing a final `)` at the end of your script. That will close the `ready` function.
If it returns a Promise object. function do things(args) { return new Promise((err, success) =&gt; { // Do the async things }, (err) =&gt; { reject(err) }, (success) =&gt; {resolve(success)} )}; More or less... Writing on a phone sucks. 
If only there were a way to add comments...
Thanks for your response. Indeed, I'd like to do so without server access. This is for an XSS exploit. I did not understand how I could do so with history since cookies are stored on the browser, not in HTTP response header's. According to these, it's possible tho : [https://security.stackexchange.com/questions/15939/does-setting-the-cookie-path-protect-me-from-xss-from-another-context](https://security.stackexchange.com/questions/15939/does-setting-the-cookie-path-protect-me-from-xss-from-another-context) [https://www.hacking-lab.com/misc/downloads/Cookie\_Path\_is\_not\_a\_Security\_Boundary.pdf](https://www.hacking-lab.com/misc/downloads/Cookie_Path_is_not_a_Security_Boundary.pdf) I tried the code of the second link but it does not work for me, I'll try on my own.
You should check out CRUD operations in angularjs. It will help you a lot. 
Fixed it, but it still does not work
Check if the last item is blank, then remove it if it is.
Why do you want it like that in the first place? Ie. what are you doing with the data? You could ignore the empty values there.
That is an option, thanks.
I want to pick a random name. var randomName = names[Math.floor(Math.random() * names.length)]; And i don't want "" to be included.
In that case you ought to remove the empty ones as someone already mentioned. Do you know how to do it and were just wondering about a simpler way or do you need help with it?
&gt; ['John', 'Alex', ''].filter(e =&gt; e);
Jesus why would they go with a # for private members? Using obtuse symbols for very well known meanings is so, so, so shortsighted. Just use private and be done with it 
Heh. Actually you could just put the name picking in a while loop until it comes out as non empty, but that's rather wasteful :)
Thanks man, i was just trying to find a simple way to filter it in place, with using for loop of if etc. btw i just started js today, but i'm not new in programming, python is my main/fav language.
Yeah, but it's very limited though.
You have this: &lt;script type="text/javascript" src="/Scripts/knockout-3.4.2.js"&gt; $(document).ready(function () { // Here's my data model // etc &lt;/script&gt; The [MDN says](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#Attributes): &gt; (!) If a script element has a src attribute specified, it should not have a script embedded inside its tags. So there's your problem. In any case, for this kind of question, you should use /r/LearnJavascript
YES.
Why are you downvoted for stating the truth ?
I think this killed angular for good, this move I mean, the KILLED the momentum.
What does refactor actually mean ? Is it a fancy word for re-write ?
``` fetch('https://api.reddit.com/r/javascript/search?q=node') .then(function(response) { return response.json(); }) .then(function(myJson) { console.log(JSON.stringify(myJson)); }); ``` that works just fine if you run it in the console of a reddit website, other than that you will not be able to use it from a webpage's javascript because of CORs. if you want to use node the `snoo` and `snoowrap` packages will make the api calls for you.
That's advertisement we're using for [sweetalert2.github.io](https://sweetalert2.github.io) only. You will not have it in your projects.
It means taking an old version of a module/unit/function rewriting it without changing its behavior. Including parameter lists, returnvalues and it's sideeffects.
How functional is something like the OpenBCI unit? I know it's unlikely to provide feedback, but how much can you do with it? Is it currently anywhere usable as an input device to replace mice and keyboards? Assuming the OS worked with it, I mean.
TypeScript is a superset of JS, I don't see why it shouldn't be included I'm this community. Out of curiosity, for what reasons are you not interested in using TS for new projects?
You shoul take a look at Array.prototype.filter as you are not a newbie. I'm not sure if it woul work in your case, but you'll figure it out.
Lots of reasons, but mostly it boils down to not wanting a bunch of useless markup in my code and having zero purpose whatsoever for typing or classes/OOP markup. TS isn't solving a problem for me, so I don't see any point in using it.
This argument feels like groundhog day. TS is not JS and just because you can convert it into JS doesn't mean its JS. Lots of things are supersets of lots of other things. Would you like me to start spamming XML docs in your HTML subreddit?
It should be noted though that this would also discard empty lines elsewhere in the text. That might or might not be intended by OP. If it isn't and OP really just wants to remove the last line,, than this is not the way to go - instead just manually check if the last entry specifically (ie: `names[names.length-1]`) is empty, and if so, remove it.
opened the article, got up to freshen up my coffee. come back, there's a huge lightbox asking me to sign up to some newsletter. k
Hi /u/A_X_D_H, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Chawki_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CuteAlternative, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/sawada91, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/SquattingWalrus, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/KawaiiiO, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Kjubaran, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mumrik1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ncubez, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Jongmoon, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/trakam, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/pilotui, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I love [https://www.urionlinejudge.com.br/](https://www.urionlinejudge.com.br/) because theres academics exercises from begin to experienced programmers.
Really like this idea
Then add that to someone's package.json as a prank
[a little weekend project](https://github.com/Pamblam/tab-composer). is it worth spending more time on?
&gt; Tbh I hate the # notation and will just stay in typescript world Everyone does, but they went forward with it anyway. That's a very bad sign.
repost [https://www.reddit.com/r/javascript/comments/af1j1d/be\_type\_strict\_without\_typescript/](https://www.reddit.com/r/javascript/comments/af1j1d/be_type_strict_without_typescript/) &amp;#x200B; also: pointless
once again thanks, `.trim()` did the job: var names = document.getElementById("names").value.trim().split('\n');
A few suggestions if you don't mind. The music choice is really distracting. Ideally you'd be able to voice over explain it yourself, but if that's not possible, pick music that isn't so upbeat. Double your font size. It's hard to read since it's so small. Since you're not explaining anything yourself, I'd have your example be super simple. Anything that isn't related to goal of showing off conditional rendering should be cut. Besides that great job! 
Your brain: now also running JS
Added the package.json Jest block in the content.
Nah, English-readable is good syntax design. More Ruby, less C.
&gt; Everyone does, but they went forward with it anyway. Gives me flashbacks of CSS variable syntax.
I'm just speaking based on what I've seen in other issues on the TypeScript repo. I'm not familiar with this one, but see what the TypeScript developers have been saying about the issue, which is still open and being considered almost three years later: https://github.com/Microsoft/TypeScript/issues/9950 It seems it'll be implemented alongside the current system and that there are no immediate plans to deprecate the current syntax but that one will not be a drop-in replacement for the other.
I'm developing a react library that I'm focusing on having minimum bundle size and which can be used as a complete UI kit so that we have to write as less styles as possible. Plus, having a UI that doesn't break because of any other styles / components. www.github.com/rishichawda/react-lite-components
Good catch. 
Good point, and no one has really migrated from Sass to vanilla CSS. I predict that JS classes will gradually die off; we're already seeing this with React Hooks.
What's ReasonML? 
i hope they go back on the decision to add private variables
Yes, spend more time on it! looks great so far.
1. They would have to introduce a generic layer to support multiple formats, which adds some complexity. 2. What happens if a package has `package.json` and `package.yml`? Does JSON get priority? Is this an error? 3. What happens if the YAML package being used gets deprecated? Does NPM now have to support a YAML parser too? 3. Now everyone gets to demand their pet configuration language get supported (e.g. TOML). 4. Thousands of PRs get opened on various packages demanding `package.json` get converted to YAML. Hundreds of man-hours are wasted defending JSON as a perfectly acceptable format. 5. JSON is just the better format. There are serious problems with YAML. In the quest to make it "human friendly" they made a very complex configuration language. [YAML parsers don't even agree on how to parse YAML.](https://hackernoon.com/consistently-bad-parsing-of-yaml-ae23eb3676a1)
I made this musical platform for open music: https://github.com/mikehelland/openmusic.gallery Here's an example of something I made with it: https://openmusic.gallery/play/1319 Whatever music you make can be edited and modified, so the link above can be edited here: https://openmusic.gallery/gauntlet/?id=1319 Has just about everything you need to make music. Beats, notes, chords, fx, and much more.
We have a pretty similar thing going on. https://openmusic.gallery/gauntlet/?id=1319 If you click "Section", you'll see you can add "Intro", "Verse", etc just like in yours. I also have formats for this defined. Maybe we can collab somehow.
Are you saying that creating a version 2 of a framework, and calling it the same thing by renaming version 1, constitutes a breaking change?
thanks @pamblam0
REST is simply a standard for making HTTP calls. Basically, the question becomes "Have you worked with any sort of API before"? If you've retrieved data from somewhere else, you're good to go for th most part. Some things to watch out for/think about: You've got, for the most part, 4 methods - GET - POST - PUT - DELETE Figure out what each of those are used for and, assuming this is a junior position, you're good to go.
We used to use Lerna for Fusion.js, but moved away from it in favor of multiple repos. Some problems we ran with it: - it's fairly slow to do some operations (cold installs, for example, would take upwards of 10 mins) - it's fairly easy to get into a wonky state - all it takes is running `npm install foo` from one of the packages. Fixing the state requires a cold install (see first issue) - we ran into issues w/ `--parallel` randomly breaking - we had really slow CI times (upwards of 20 minutes) Since we moved to multirepos, we were able to parallelize CI more effectively, but we are now running into the issue of keeping cross-dependencies up-to-date and linking packages for integration tests. We're currently looking into Rush 
The best you can do for yourself and career would be to create your own as a learning project. Install node and express, write an endpoint that sends back some json, then have a small client app use that data. For JR level jobs, that will be some great experience and something you can show off.
yes, i have worked with some APIs. So from the front end developer prespective i just need to know how to use get, post,put, delete to add, delete and update the data? Thanks for taking the time 
Sure. Something you might also do, like /u/tightywhitey suggested is to make one on your own as well, so you understand the flow. I really like Scotch.io for this sort of thing, as the free courses are just as good as a the paid ones. [Here's the free one for building a REST api with Express](https://scotch.io/tutorials/build-a-restful-api-using-node-and-express-4)
 r/nocontext
The point in this article about array.reverse is not exactly spot on... Arrays are passed by reference and not by value so the reverse function is not doing anything special!
Hi /u/Oene-, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/minamarcos, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/Nk4512, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
You can use normal variable definitions if you want private variables right now. Or symbols if you want semi-private fields. Sure private fields are handy sometimes, but the `#` is not a pretty way to do it, and honestly neither is `thing.private.thing`. It looks more like a bodge than a language feature. I'd rather just declare variables with the `private` keyword and possibly just have the syntax highlighter highlight them for me.
Lenses allow you to immutably modify an object with a path, e.g.: `mod('user', 'name')` `((s: string) =&gt; s.toUpperCase())` `({user: {name: 'john'}})` produces `{ user: { name: 'JOHN' } }` But any string based path system is risky. What if you make a typo? What if you produce a value that is incompatible for that type, i.e. change a string to a number? With shades' new TS bindings, this won't happen, and all updates are checked on deeply, so: `mod('user', 'mame')` `((s: string) =&gt; s.toUpperCase())` `({user: {name: 'john'}})` and `mod('user', 'mame')` `((s: string) =&gt; 10)` `({user: {name: 'john'}})` are both errors. &amp;#x200B; This extends to custom `map` and `filter` (and many more) functions: `map('name')` `([{name: 'john'}, {name: 'obadiah'}])` produces `['john', 'obadiah']` but `map('name')` `({user1: {name: 'john'}, user2: {name: 'obadiah'}})` produces `{user1: 'john', user2: 'obadiah'}` And in both cases, the type system knows what the shape of the output will be without casting :) There's many more things you can use besides just strings, such as constraints, but you'll have to checkout the README for those. TL;DR: Use string paths and constraints to update objects and collections, but like, safely.
Typically in ReasonML world, people will create bindings for the lib they want to use. Here's one from a random google search: https://github.com/JasonShin/reason-vue but it appears to be unmaintained. I strongly recommend against this stack if you couldn't find this much on your google search, because documentation past this step will be abysmal/non-existent. 
[Reason](https://reasonml.github.io/) is a Javascript-ified syntax for [OCaml](https://ocaml.org/) which uses [Bucklescript](https://bucklescript.github.io/) to transpile to Javascript.
[A JavaScript implementation of the Neat Algorithm](https://github.com/GabrielTavernini/NeatJS) (NeuroEvolution of Augmenting Topologies). It's not really optimized and I didn't implement speciation, but it works fine and it was a fun project to work on.
I want to hire a programmer. .any ideas
Is this you? [https://grant-bartlett.com/creating-your-own-discord-bot-with-discord.js/?fbclid=IwAR3SLpxvcg3EBf\_XCaTcQHsvf14rLvzXPWKavYR5STNPd3Ez4Scz6eYiYB4](https://grant-bartlett.com/creating-your-own-discord-bot-with-discord.js/?fbclid=IwAR3SLpxvcg3EBf_XCaTcQHsvf14rLvzXPWKavYR5STNPd3Ez4Scz6eYiYB4)
"Atom had it first"
It wasn't for help, i was looking for suggestions .. 
&gt; Thus there is no reason to change formats. comments?
As someone who stopped paying attention to Ionic in ~2014, this post was great in getting me caught up. Congrats on the launch! 
JSP (or more appropriate these days would be Node.js) can serve up data from a database or file system over HTTP. I used JSP (now Node.js) to serve JSON from the database to the JS + HTML client-side. But the server side also has some important roles. For example, let's say I wanted to share a dynamic web page on social media. The social media site will grab the HTML page, but if the title, description and image are rendered on the client side, the social media site will have a hard time understanding what's supposed to be on that page. For this reason I have some server side rendering going on, so the JSP (actually Node.js now) will render those details of the page, and send it. This is my main use case for server-side rendering.
Which is a very bad reason. If the problem is that using this.x does not throw an error and instead creates a public property, change the behavior to make it throw an error. It works this way right now because you can have both a public and a private property with the same name which is something no one asked for. 
Try response.response.data
Or response.message
That is help.
Everything was looking good, and then I saw the bootstrap dependency.
This looks really nice! I've recently been trying a few different lens-ish things, like patchinko, ramda, and microstates. Will definitely give this library a try. The TS magic should make it nice to work with.
oof...
Can you pretend that this comment I'm writing right now defends the use of bootstrap in some way and then respond with a murderedbywords style dossier on why bootstrap is not good in this case?
Noon to react , what do you mean by bootstrap dependency?
Awesome idea.
I'm glad! Feel free to let me know if anything needs more explaining or if you run into problems.
I don't understand how types and functional programming are mutually exclusive; most functional languages that I am familiar with are statically typed. TS's type system is extremely flexible. You can take entire advantage of TS's type system without writing a single class or any "OO" code. Is there some example JS that you could post that isn't possible to statically type with TS? And would you agree that preventing a user of a function from using it incorrectly improves the quality of the function?
I depends on https://getbootstrap.com/
You need Bootstrap to run this shared ui toolkit. Without Bootstrap, you can't get what is being shown on website. Bootstrap is responsive CSS framework.
&gt; Shards React is open source on GitHub There is no link, and when I search on GitHub I don't find it.
Why must everything be typed? What advantage are you providing in return for the overhead of forcing me to maintain that metadata? &gt; And would you agree that preventing a user of a function from using it incorrectly improves the quality of the function? The vanilla language provides plenty of features and standards to approach solving these problems and have done so brilliantly for me for quite a while. Honestly, JS has plenty of typing functionality available if you absolutely insist on such practices. Most of my public interfaces inspect the parameters and handle them accordingly. TS just bloats my project with a standard layer of unnecessary internal typing
https://github.com/DesignRevision/shards-react/stargazers They have the little github star-count on the page, clicking the number brings you to the repo. 
I really love the style from a graphic design perspective. It would be much cooler with some kind of simple CSS grid manipulation API.
Assuming you're doing this in an error handler, something like this. function handleResponseError(error) { let msg = 'An error has occurred: '; const errors = error.response.data.errors; for (var key in errors) { if (errors.hasOwnProperty(key)) { msg += errors[key] + '&lt;br /&gt; } } // Do something with msg }
Thanks! I didn't notice the star and wouldn't have connected it to github. Was looking for 'GitHub' mentions to be hyper linked.
Yeah, it’s weird that it’s not more obviously displayed.
Hi /u/therealhenrywinkler, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/therealhenrywinkler, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Eldest808, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/thedistroir321, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Do you need help with this? I need some resume building projects
More like 'how to use it' rather than 'how it works'
But why is Bootstrap necessarily a bad thing?
That’s a reasonable counter argument. Your point is well-taken. But TypeScript truly is just JS with some type-checking sanitization before runtime. So pretty much any question you could ask about TypeScript (e.g. how to create a Promise chain using async/await) also applies to JavaScript. There is only a rather small subset of topics that apply solely to TypeScript and not JavaScript. Which begs the question: should major frameworks like React, Angular, or Vue be segregated into their own subreddits? Indeed they currently are. And that makes sense in a way, since their usage is specific to various browser/native implementations of front-end applications. TypeScript is a much more general version of JS itself, and can be implemented anywhere JavaScript is used. I’m not saying it shouldn’t have its own sub. Maybe it should. But I wouldn’t do so based on an argument that it is something entirely different from JavaScript.
Its not that I totally and completely oppose TS being a part of this sub but I would prefer if it was less "JS sucks, use TS" and more "here's something cool that was written in TS" or "best practices for async code (written in TS)" or something. I'm worn out from what feels like a war to convert us.
Step 1. Stop writing point-free code. 
This worked. Thanks. Wonder why it's like that though.
In the latest VS Code you can use 'infer parameter types from usage' and it auto generates much of the JSDoc for you with it's current best guesses at the types. &amp;#x200B; This is a massive update that I don't see people talking about. You need to go in and fix some of it, but it is very interesting what is guesses, and very educational as to: 1. How your app's types work 2. How the latest JSDoc syntax works. It is often being updated.
Are you just looking for attention? 
An OpenBCI can be used as an input device with the help of an application such as a P300 speller. A P300 speller has each letter of the alphabet on the screen and flashes a face over each one sequentially. The user can then focus on a specific letter, and when a face flashes over the letter they've chosen, there will be a spike in brain activity. With that, we can tell what letter they were focusing on. Faces are used since they trigger a large response due to how important our brain considers them. This is useful with people who have paralysis that can't move or speak. An extension of the P300 speller is instead of flashing a face over letters, you might play high pitch sounds or a low pitch sounds. If the user focuses on one specific pitch, there will be a spike in brain activity when they hear it. This technique has been used with medical grade EEGs to allow doctors to communicate with possible coma patients who might actually still be aware of their surroundings (locked-in syndrome). I haven't tried this with an OpenBCI, but it would cool to try and replicate these results with one. Input without the aid of an external tool such as a screen of letters or audio is also possible. A common way to do this is with motor imagery, which is what I describe in the tutorial. If the user imagines pushing a box forward with their hands, this will produce different brainwaves in different regions of the brain than if they imagined pushing it forward with their feet. A machine learning method can be used to differentiate between these two different cases, and then the user can, for example, make something move to the left or right depending on which action they're imagining. If you're curious about communication with locked-in patients, these papers were published by a company who does work in the area: https://ieeexplore.ieee.org/document/8123086 and https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5613801/ Outside the medical field, people are also using BCIs to fly drones, play video games, etc. I don't have time at the moment, but later I can update this comment with more information on non-medical uses for BCIs. 
I don't understand why people get worked up about shit like that. They give you free content, in exchange they do a bit of marketing, which you can easily dismiss. The sense of entitlement of some people... Now, if you were to complain that the article was about jQuery...
In a revolution there are always too sides... and houdini is on the wrong side, yet I fear on the winning side too.
Bootstrap is a responsive CSS framework. Does any more need be said? 
[removed]
Yes, thats what the guy is asking
Taken from documentation 😮 handleTimeChange() { if (this.state.countdown &lt; this.state.timeUntilDismissed - 1) { this.setState({ ...this.state, ...{ countdown: this.state.countdown + 1 } }); return; } this.setState({ ...this.state, ...{ visible: false } }); this.clearInterval(); }
Fair point about not needing to setup bindings in advance in your new code, that’s a nice advantage of your stuff! I disagree that the async bridge “makes for an awful user experience.” The bridge can invoke callbacks or return promises and that is consistent with React and RN and their far-reaching use of async. Async UI bridging is also consistent with async setState in RN. So I think the async model of the bridge works fine but I hear that you disagree. I don’t like that one can’t imperatively call methods on bridged UI elements in RN without faking it through property changes. Some things just don’t work declaratively. Why would I need a reference to a native variable like a delegate? I could actually do that with a RN component that doesn’t render and refs but I’m not sure why I’d need to? Why would I need constraints in RN when I can use Flexbox for layout which is easier and more powerful than constraints in my experience? I think what you’ve done is very cool and I’m not trying to diminish your efforts or discourage you at all. I just want to understand the benefits of your stuff as you see them ... Thanks for your feedback.
[https://www.youtube.com/watch?v=BE1HriDzlJs](https://www.youtube.com/watch?v=BE1HriDzlJs)
Hi /u/NowVSFutureBalance, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
The only offenders i know were Angular and, the worst of them all, Polymer. Other than that it's been stable for the last 5-6 years. Why is it that javascript gets to have such a bad rep, when i was still working as a native dev, desktop software and such, i've seen Microsoft burn through Windows platform frameworks quicker than anything else. 
Why is a responsive CSS Framework a bad thing? (Noob here)
Are you describing a scenario where a web page is embedded in another one? What specific social media are you referring to? : \]
How would you real with TypeScript's private variables? Surely you don't want the user's objects to be able to override those?
Actually thought about it (I've ejected before), though I'll probably end up giving this one a go https://github.com/tr1s/tris-webpack-boilerplate
Thanks. Actually I was more interested in how effective it is, but it sounds like it's not yet a good replacement for keyboards and mice for anyone able to use keyboards and mice.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Out of curiosity, why did you write the library in JS, not TS? I've done some basic testing, and so far the type-checking is working really well.
It's the way axios had mapped internally and the way they do expose the errors, look at settle.js in axios
Awesome library for encrypting your JavaScript
[removed]
Use this. https://codepen.io/anon/pen/pGJPza?editors=1010
Better get comfortable with #those #ecmascript #prviate #properties.
Only here will people jump all over react and all it's crazy dependencies but then scoff at a bootstrap dependency
Yeah, I'll go with MIT or ISC
I am happy to help too! DM me and we can work something out.
Hi /u/merdianii, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/StarLord_27, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
The internals of the functions use quite a bit of polymorphism and at this moment it is actually beyond TypeScript's checker's ability to verify that they match up with the exotic function signatures they need. It's a shame to lose type safety, but in the end it's more important that the external API has the most flexible signatures possible. And I mitigate it with lots of unit tests and typing tests :)
Good bot.
Looks like a typo? const { callback, promise } = callbackcallbackPromise(); Looks like you've effectively replicated a [Deferred](https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred), though slightly different in that you've combined `resolve` and `reject` into a single `callback` function relying on arguments to make a distinction between the two.
It's not. The problem is that the library uses minified Bootstrap styles as a dependency. All of them. That's a lot of dead code that's never going to be utilized. It's like importing jQuery and only selecting a couple of divs by id.
Hi everyone. I created an interesting app using React. It allows you to take a picture of the food ingredients you whish to use (anything you have in your fridge, at home..), and it returns a list of related recipes.. MVP link: https://calm-savannah-27155.herokuapp.com The app uses 2 API's. One API uses convolutional neural net algorithms for image recognition, and outputs predictions (keywords) based on a Food model, and the other API uses those keywords to search recipes available in it's DB. What do you think? I am happy to receive your recommendations or suggestions related to functionality and design.
Say you've going to share a web page to Facebook. If the HTML for that web page relies on JS to fetch, for example, the name and image for a product, Facebook isn't going to immediately be able to know that and make a preview included in your post. It needs to be rendered on the server side to include this: &lt;meta property="og:image" content="${url}" /&gt; &lt;meta property="og:image:width" content="1200" /&gt; &lt;meta property="og:image:height" content="630" /&gt; &lt;meta property="og:description" content="${desc}"/&gt; &lt;meta property="og:title" content="${caption}"/&gt; So it can be scraped without running your JavaScript on Facebook's servers. I did this with Node yesterday, and I remember doing it with JSP a few years ago. Otherwise, yeah, I do most of the rendering on the client side.
Angular 3?
I am not saying it's bad thing. It's just, there are other UI toolkits which don't have any dependencies. Take semantic-ui for an example. Bootstrap was, is and will be awesome thing for forever. It will be "UBER" of "Responsiveness CSS frameworks" for lot many years.
Yep, I've fix it. It seems to be related to deferred, but it says it obsolete now :\\
Yeah for ECMA standards, they ended up going with the constructor + executor instead approach instead. But it was considered, and other libraries use it like [Q.defer()](https://github.com/kriskowal/q#using-deferreds) and. [jQuery.Deferred()](https://api.jquery.com/jquery.deferred/).
Ionic didn't skip version 3, so it should rather say Ionic 3 for Angular.
Well then, pros of the library vs the others: very lightweight and usable with others promise libraries. Thank you very much for your input, I didn't know Deferred existed
To be pedantic, Semantic-UI (the React version I'm assuming you're referring to), depends on the non-React Semantic-UI. A better example might be Material-UI or Ant.
Hi /u/UnFukWit4ble, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/narubam1202, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Not everyone uses react
Actually, nvm, there's seems to be a good one out there that does the exact same thing, with the same features [https://github.com/sindresorhus/p-defer#readme](https://github.com/sindresorhus/p-defer#readme), I wish a knew what Deferred was so I could've look it up before making this module :|
It's basically just [reactstrap](https://reactstrap.github.io/) with different styling. Don't expect anything fancy from it.
^was just about to say, don’t you mean material-ui 
Yet an other tool that adds more complexity to front-end applications... Like we don’t have enough layers each one on top of the others already. 
Ah, okay. Yes, you're right, mouse and keyboard are still much faster when it comes to device input
Gah? What do you mean you’re not using bootstrap? Do you even dev bro?!? I suppose now you’re going to get pissed because we also grabbed a whole jquery lib for some selectors too?!? /s
THX alot.
I'm just overeager. I know Musk is working on a bci but I believe it will be implanted. I believe the idea is that it will be much more than a replacement for keyboards and mice. I wasn't trying to dis what you're working with.
I welcome the inquisitiveness! The usefulness of NS:IDE is very niche (but I feel it could become a big niche), so I do need to exercise in communicating what it means from my perspective. The async bridge is fine (and indeed, appropriate) when you’re making a change in a totally React-managed native component with a view to triggering a corresponding state change in your React state store. However, it’s a burden when you want to alter properties on a native component that’s not managed by React in any way; you have to set up a native module to do some reflection for you, and once you’ve read a property on the native side, it may have changed by the time its value has been communicated back to React’s JSContext. An aside on why I consider it to be a real deal-breaker to have to rewrite native views as React-managed views: I recently lost a whole day rewriting UISearchBar as an RN native module, and found myself needing to keep coming back to expose extra features to RN. I’m also a contributor to the WKWebView RN native module, and it seems it’ll never reach feature parity with the native version due to the sheer amount of functionality that people need and the difficulty of exposing it to React. Having to anticipate every API you’ll need from a native module is a huge tech debt! With NativeScript, you don’t have to second-guess anything. Oh, and I have no idea how to wrap something as complex as NSSplitViewController (we’re talking Cocoa here briefly, with the macOS fork of RN) as an RN-managed view; Facebook’s documentation isn’t helpful for stuff as advanced as that. &gt; Why would I need a reference to a native variable like a delegate? In RN, you suffer from only being able to ferry strictly JSON-serialisable values back and forth across the bridge. If you want to adjust even an enum value for something, you’ve got to set up ways to translate between JS enums and Obj-C enums. By contrast, in NativeScript, you can – entirely in JavaScript – instantiate a delegate or a WKWebViewConfiguration (or whatever it’s called) or an enum value or a UIAlertController or a UIReferenceLibraryViewController or literally *anything* and use it as if you were simply writing Obj-C. That is to say, any program that you could write in Obj-C, you can write using NativeScript’s JS APIs all the way, without having to set up translations between Obj-C values and JSON-serialisable representations of them. Why not just write Obj-C? Again, it’s to allow us to code at run-time. Beside that, I much prefer writing JS! &gt; Why would I need constraints in RN? I mentioned instantiating constraints only in the context of the above argument of marshalling native values into JS. Yes, Flexbox does does happen to solve this specific case via Yoga – but *only* if you’re dealing with a React-managed view (in which case you’ve already had to set up your own bindings!). Technically, Yoga also lags compared to native constraints as the UI thread has to update first. You can see this clearly in desktop Skype if you resize a window! The big picture: NS:IDE is a hot-reprogrammable app that a community can contribute code snippets to, using a mix of vanilla JS (where possible, as it’s cross-platform) and JS calls into native code (where necessary for accessing native functionality). For example, you could make a flashlight ‘mini app’ with a single line of JS and share it with the community. You could even distribute it as a Siri Shortcut that would paste that JS into NS:IDE and invoke the flashlight. That kind of thing. It’s a hidden app store – an app that can transform to become any app you can dream of!
Why would I use this?
Good point, Ill update my post about that. Thanks
I work on a Lerna monorepo and I regret the move we made. We did it in an effort to organize our shared code, but afterwards realized it could have been accomplished with webpack entry points rather than lerna. If our repo was public facing, it would have made more sense, but since it’s all private it’s just unnecessary complexity 
You promise?
do you have any experience with some other programming languages?
Is this homework?
What have you tried so far?
Oh yeah, I could definitely see those framework subs being a corporate driven thing. The could easily consolidate into one thing. I think a lot of devs would benefit from building their own virtual DOM implementation in pure JS. At the very least it would demystify a lot of what’s going on under the hood, and the overlap between frameworks would become obvious. It really is just applying a specific design paradigm to otherwise very plain JS code... But to your other point, on the great TS inquisition, I get it. Nobody like all the proselytizing, lol.
schrodinger's CSS
Do your own homework. 
Shards React sounds like some sort of really bad YouTube channel. 
I completely understand. It'll be interesting to see what Neuralink comes out with
This is not a homework assignment, just trying to learn code.
wait what? this seems like solving complexity by introducing more. think the css in js revolution is going to be the one that sticks.
That is correct. My meaning was that React is a large and popular JS project that is leaning away from classes. As for Hooks, we are already seeing hook patterns emerging for other frameworks, such as Vue and Polymer. 
Deno is probably what you're looking for.
jQuery
Sounds familiar! I think that it. Man, that was quick.
Glad to be a part of the magic ;)
easy to remember, just swap no and de
Front end doesn't need this complexity... Is it just me or there is a group of people out there that have to come up with new frameworks and revolutions to keep their job? I feel like that group for front end is almost bigger than the actual front end community and it's sad.
Here--[js tic tac toe](https://medium.com/front-end-weekly/tic-tac-toe-javascript-game-b0cd6e98edd9). Next time try google.
You can run JavaScript on the JVM as well through [Oracle Nashorn](https://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html) or [RingoJS](https://ringojs.org/) but you wont have access to any NodeJS standard library functions.
I've put the link on the comment you can check out the repo and current issues. You can also fork it and raise a pr. Incase you have already checked the repo you can see there's a lot of things that can be done. If you have any questions about it you can drop a text. Thanks! 
Literally from the same guy that brought you node: ryan dahl.
You don’t necessarily need Imba to use MemoizedDOM, for example, here’s a initial implementation of that in perl6: https://github.com/FCO/MemoizedDOM Ok, perl6 is on very early stage on working for the browser, but that is just a POC.
&gt; Node is known as an asynchronous programming language Wat.
100% correct? No. Gets the point across? Yes.
What made you want to do a Tic Tac Toe board as your first JS project rather than doing something simpler like FizzBuzz?
It’s non blocking by design, the difference is pretty nuanced... I think it’s fair to say it’s known as an async programming language
[removed]
Node is not a programming language, it's a runtime environment...
/thread
...Is this the Krusty Krab?
what do facts have anything to do on a javascript subreddit?
Node is not a programming language. In general, I hold blog authors to very high standards since their content will be treated as an invaluable learning resource, especially to those just starting out. Making that sort of assertion demonstrates a fundamental misunderstanding of what Node is and how it relates to Javascript. &gt; I have 8 CPU's on my mac This is just bad. &gt; Well, this is a big difference, please notice that workers are given limited resources and are much slower than the main thread, but they don't block the main thread — of course, **Promises can work just as well at keeping the main thread responsive** On their own, promises *do not* do that. With that said, while I appreciate OP's effort, this article is very poorly written and shouldn't be construed as having any authority on the release of new features. The article doesn't even mention that while the API is probably stable (though there's no guarantee here), *the feature itself is still experimental*.
cAN YOU make THEM ANY smaller?
Posting this here for visibility since the person below deleted his comment. Not everything will be applicable. Node is not a programming language. In general, I hold blog authors to very high standards since their content will be treated as an invaluable learning resource, especially to those just starting out. Making that sort of assertion demonstrates a fundamental misunderstanding of what Node is and how it relates to Javascript. &gt; I have 8 CPU's on my mac This is just bad. &gt; Well, this is a big difference, please notice that workers are given limited resources and are much slower than the main thread, but they don't block the main thread — of course, **Promises can work just as well at keeping the main thread responsive** On their own, promises *do not* do that. With that said, while I appreciate OP's effort, this article is very poorly written and shouldn't be construed as having any authority on the release of new features. The article doesn't even mention that while the API is probably stable (though there's no guarantee here), *the feature itself is still experimental*.
&gt; Though here tasks run looks like simultaneously, but essentially they MAY not. Tasks don't think it be like it is, but it do.
1. You can make them with any size. `&lt;eva-icon name="github" animation="pulse" fill="limegreen" width="80" height="80"&gt;&lt;/eva-icon&gt;` 2. Why use a caps lock?
What a mess.
meteor?
"If you give me six lines written by the hand of the most honest of men, I will find something in them which will hang him." - Cardinal Richelieu 
You are using two spaces between each sentence so I can’t trust anything you say
no this is Patrick 
glad to see it, been dragging my feet on one project waiting for threads (one large data set, lots of workers). Get ready to crush some benchmarks :)
There is awsome-uikit repo. You can add your uikit there [https://github.com/jaywcjlove/awesome-uikit#react](https://github.com/jaywcjlove/awesome-uikit#react)
"Threads" yeah not really.
Is it possible to create a function in the main thread and call it in an other thread?
"If you give me a blog post by a person that doesn't understand the basics of frameworks and languages one is talking about, I will shit on said blog post." - ritajalilip
Bad correct information is arguably worse than wrong information. With wrong information you can quite literally take the claim word for word and disprove it. With bad almost correct information, the bullshit is sprinkled in so it is difficult to correct and you get people parroting it. It's how the worst antivaxxers and alternative medicine promoters are born.
can you explicitly state what you are calling out here so that people understand the issue with the code? 
I'm not even sure the threaded code is doing the same thing as the non-threaded code. If I'm reading it correctly, you'll end up with N slices of an array passed off to a worker, each sorted separately, then concatenated, but the end result when everything is back together is never sorted. 
Hello. RSS feed icon looks like is missing. Many thanks for sharing. 
Still pretty new and in development though, but from the same creator. I remember seeing a talk by Ryan Dahl about the mistakes he made with node, and it just makes me think he is trying to address some of those mistakes with deno lol
Maybe you're looking for two-way data binding. When you change a variable, the content of the related DOM element will also be changed. &amp;#x200B; Check [this example](https://jsbin.com/liluhul/edit?js,console,output). It also works for array, and very easy to use if you know the basic.
 this.setState({ ...this.state, ...{ countdown: this.state.countdown + 1 } }); can be simplified to this.setState({ countdown: this.state.countdown + 1 }); I guess that's what's up.
This does not even sort the damn array. You end up with an array of n contiguous sorted slices.
3. A label inside a button will also so this.
Vue Eva Icons just provide icon which are present in Eva Icons
Oh yeah #HASHTAG 
Meteor is a Node-JS framework
&gt; but we are now running into the issue of keeping cross-dependencies up-to-date and linking packages for integration tests. I've been confused a bit about the lerna monorepo thing.. I have recently contributed to the Gatsby project with it's monorepo where they have many packages in their `packages` top level directory, and those each get published to npm, when I make a change and want to use it though until my PR is accepted, I can't just add the forked repo with my changes to my packages.json... I have to manually extract that package out into it's own repo :\ Is lerna and the monorepo doing something better than separate repos for each project/package and then a 2nd repo that groups dependencies via submodules?(I think those might have some issue at least in the past, but there was also something like git-subtree which sounded better, similar to submodules you'd link to another repo and commit iirc, it didn't dirty the commit history for the repo as far as I can remember..)
Yes. The generator usually tells you “you should add this to your repository”.
Got a good chuckle out of this.
&gt; If our repo was public facing, it would have made more sense, but since it’s all private it’s just unnecessary complexity I dunno.. I've contributed to a public lerna monorepo(Gatsby), although I didn't bother with lerna as I was just modifying some of the packages(each hosted separately on npm) and sending in a PR for them. My own fork though wasn't useful though as I couldn't reference those packages in my package.json to use in the meantime(been over a month and PRs still waiting on approval, due to time of year I guess). Had to manually extract each one into their own repo(or repo with branch for each package). Have you had any experience with git-subtrees(I think that's what they're called), they seemed to be an improvement over submodules for referencing other repos into a singular one.
Thanks for the information :)
&gt; This is just bad. For clarification, they should say logical CPUs, or refer to the actual processor model with it's cores and threads I suppose( number of logical CPUs doesn't really mean much, a lower count on a different model could outperform it ). Macs can have up to 4 physical CPUs though I think? Or used to, with AMDs current lineup(not too familiar with what Intel is offering), you can get dual-socket EPYCs, but beyond that and logical cores, you also have to take NUMA nodes into account, etc... ok going well off topic now :) &gt; On their own, promises do not do that. They're probably trying too make a point about async I/O? (which is what Node.JS is well known for iirc, but that was prior to JS getting promises and async/await)
If you want performance, why not offload to a more suitable language that is already multi-threaded? Something like Rust? It's very well supported for integrating with Node afaik(with parcel you just import the rs file as if it were js or something), and apart from an initial learning curve is really a great language(well lack of proper async.. easy async, is a bit of a drawback but should be sorted later this year). You'll probably find it crushes anything that you're tasking JS to do at scale.
Isn't that bad though either way? I've run into an issue myself recently with setState() being async/batching that it's better to pull the state out first or use a callback. Perhaps it's fine here, but I remember something along the lines of if you called setState() to update the countdown state say 3 times in a row in the method, then referenced it's value, it'd not have changed, then when the component updates, it only went up by 1(due to reading from the state directly as in those snippets)
[reason-react](https://github.com/reasonml/reason-react) is the officially sanctioned UI library of choice. My understanding of VueJS is that it has some complexities (single file components) that would make it difficult to support in ReasonML without significant changes. I find it unlikely you will find any good UI libraries for Reason other than React due to the small size of the community and ecosystem. Also considering it is backed by Facebook.
No idea why people are so negative here, you don't actually have to use this. Imho it's great, although it will take a lot of time before we can actually use this. &amp;#x200B;
TL;DR? Tried to skim through it, saw a bunch of familiar browser/css words with API appended(but presumably something they're offering), some CodePen demos but at least the one I tried didn't work and wanted me to enable some flag and I was too lazy to bother with that... they could have had some images or animated gif/webm/video to get across? Was effectively a wall of text with no hook/bait to convince me to read any of it.
`require("worker_threads")` Underscore case and plural? Since when this is a norm in Javascript? What a mess indeed. 
Yes, I'll admit it, it looks nice. However, it could be so much nicer if it featured standard web components, i.e. the custom elements API with a shadow DOM and scoped CSS. In brief, doing it the standard way, completely agnostic of the front-end framework you decide to use, if at all. Often times, it feels as if people seem to forget that these technologies have been standardized. While React is considered quite comfy, so was jQuery half a decade ago. It feels like we as a community just keep barking at the wrong tree.
BTW, \`util.promisify\` is built into NodeJS. :)
Don't know why the article got downvoted. They talk about migrating to React and to begin that involves automating the conversion of their existing usage of Dust templates to JSX, they built some tools to do so and provided them as open-source. I've got an old dust.js project that could probably benefit from this so thanks :) Haven't seen "all the things" for quite a few years ha.
https://nodejs.org/api/child_process.html
It is bad imo, `this.setState(state =&gt; ({ countdown: state.countdown + 1 }))` you shouldn't use this.state to update it, you might run into some async issues (exactly ones you described)
Sorry should've done it immediately x) First of all - \[state updates may be asynchronous\]([https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous](https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous)), so you should not rely on values of \`this.state\` and \`this.props\` for calculating the next state. Instead, pass a function to \`setState\` in order to use the latest values, that function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument: &amp;#x200B; this.setState((state) =&gt; ({ counter: state.counter + 1 })); &amp;#x200B; Other thing is \[state updates are merged\]([https://reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged](https://reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged)), so you should just \`update\` (not really updating) the value you need. &amp;#x200B; this.setState({ counter: 0 }); &amp;#x200B; And finally, I'm not totally onboard with \`incrementing\` the count\`down\` value \*shrug\*
Yeah, I described them because I ran into them myself. In my case I had a conditional that called setState then later referenced that state before an update. I learned if it's not tied to the rendering, logic like that is better to use instance vars rather than state/props
Yeah, I know, but my package does not promisify
No he's talking about NoDe, the programming language specifically for non-germans.
Swift is damn good for multi-threaded programming.
Does it work on windows, Linux and Android? How easy is it to integrate with node? Can you use swift to compile to wasm? I haven't stayed up to date with swift, it did seem nice but at the time I think was fairly restricted. When JS isn't suitable I go with Rust these days, it can also be used on resource constrained embedded hardware(like arduino and teensy) which is really neat. 
Not an expert on the specifics, but to my knowledge it works on macOS and Linux; probably not Android, and the Windows version is full of issues. Integrate it with node by setting up a web server as an intermediary. Swift can read C++ code, so there may be some overlap there. Probably can't compile to wasm from Swift yet.
Have you looked into how css works in vue components? Haven't looked into the recent development of css in js, but last time I checked in react it was making the code bloated and harder to grasp
How does something like styled-components make your code bloated exactly? These solutions fight actual problems instead of catering to artefacts. They turn css into a functional prototype, style = function(state). In Vue css is a webpack loader, you can do this easily in React, but it's the same old css into which you have to inject dependencies again to make it fulfil its responsibilities (which belong to the view layer).
I don't know man, the fact that I see it right in the demo dialog itself is dis-concerning, I'll pass.
If part of it has to be in node you could do the real work in C++ and just wrap it in a native module.
&gt; Not an expert on the specifics, but to my knowledge it works on macOS and Linux; probably not Android, and the Windows version is full of issues. I think I remember reading about some Linux support in the past but I think it still had issues. Lack of support for Android and Windows makes it less attractive, especially Windows which I can imagine many Node devs use(if you're distributing an npm package that uses swift, you want to be as cross-platform as possible ideally), in most cases deployment would be with Linux servers, less so if you're distributing Electron like apps though. Not hating on Swift, but even if it is great for multi-threading, it's probably not a good choice to handle multi-threading with node, unless you already know Swift and deployment/usage will not have any issues because of platforms it's run on. &gt; Integrate it with node by setting up a web server as an intermediary. Swift can read C++ code, so there may be some overlap there. Eh... you're saying a web server needs to be used to integrate with node? No support for FFI and an extern C API on swift's end? &gt; Probably can't compile to wasm from Swift yet. Even if it could, probably less desirable than what you get with Rust. Swift to me seems to be a bit between JS and Rust, in the sense that you'll get better perf than JS but iirc more friendly/familiar syntax to use(Rust can get a bit verbose sometimes, and while it's borrow checker is awesome, it's been known to be frustrating when it's not happy).
There's a serious problem with JS blogs and twitter feeds the last few years, the whole industry is on a weird, populist, anti-elitism streak. People who know what they're doing are discouraged from commenting with accusations of gatekeeping and just plain insults about their age, unless they put on this fake "no one actually knows that they're doing!" humility. Tutorials and explainers all seem to be written by beginners trying to work it out as they go along but also blogging about it to achieve some kind of status. A couple of months ago I was trying to look up the exact difference between React.Component and React.PureComponent, and every blog I saw had it wrong. I've given up reading anything but official docs and source code now.
Same
People have these complaints when they don't work on very large projects. In a recent job our JS codebase was 70,000 of our own code, not including dependencies. If someone has a well organised vanilla JS project of that size that didn't just turn into an in-house framework itself, I'd really like to see it.
Feel free to comment if you have any suggestions, clarifications or corrections.
I'm glad I read the comments before the article. Now I won't read that bag of lies. Node is **not** a language. Node is a Javascript interpreter AFAIK.
I like how this is tagged 'Discussion' as if this isn't going to turn into a shitshow. =P
this dude asked what the word "refactor" means, 20 hours ago.
medium is at it again... i’m going to filter our medium.com from my reddit feed. 99% of the time it’s a bunch of kids writing articles to sound all smrt. maybe for their resumes? idk.
Other commenters don't know what they are talking about. Ramda is extremely powerful and well designed and functional style programming in js has so many benefits. Reusable/composable code, pure functions that are easy to reason about, self documenting code since you're naming things all the time, small footprint because you import only what you use (vs for example libs that offer method chaining apis like momentjs or yup). Less bugs because you're writing less code with less repetition. Yes it is a different paradigm and will be a bit difficult to learn to think this way, but ramda is doing nothing new except bringing these concepts from other languages. Don't blame ramdas documentation, it's actually really clear. You didn't start programming knowing OOP, and it too has some really hard to grasp concepts and patterns. If you are not using any functional programming, specially for data manipulation, you're missing out. Stop shitting on other people for writing about and creating things you don't understand.
People getting excited about useful new tools grinds your gears? Why? I think your rant is insufficiently informative on what, exactly, is it you find objectionable. If it's the fact that js tools generate css, html, and js... Why is it a problem? All coding tools generate very simple output. The whole idea of coding tools is complexity management, and comfort. Or is it the fact that js programmers fall for fads? Any environment that can have lots of cool tools has fads, and people who fall for them. This is not a discussion, but something to shake one's head at while browsing Reddit while pooping. Thanks 😀💩
[https://github.com/neonious/lowjs](https://github.com/neonious/lowjs) :PpPpPpPp
I would have to see how it performs in js before even considering adding back all the headaches of polyglot full stack...
God damn it hurts
Good point
Maybe grab a double shot of scotch and have a sit and a good hard think about your issues. 
TypeScript is like 100k loc. Oh wait, it's not exactly js :D
I am being sarcastic :: It is a pretentious word for "re-write" which sounds less cool but that's what developers do, that give it a more cool name and hoping that people doesn't know it's just "re-write".
Also Blockly is a well organised "pre-framework" js library, but it's full of google closure compiler requires, and it dumps everything into the global namespace.
Nice bait
People like you who respond with one word like this to sound smart is like this guy: https://www.youtube.com/watch?v=VKpQgEyjNdM You have NOTHING on you.
Yes you saw through the bullshit :: Good !
Exceptions should be exceptional IMHO, I usually indicate stuff like validation errors in the return structure, and catch at a very high level as it usually means terrible things are happening.
Nice bait
I work with a whole team of JS devs and they are all super nice, helpful, humble and curious people.
Of course it's all just a bunch of plain text, of course! Just like any other programming language. And yeah, you should know the basics to be able to write things, but it's often very hard to write everything in a very basic manner (how much can you write with plain C before you throw in a bunch of libs?). So that's why you typically want to use something *fancy* like React/Vue or whatever. You need some level or abstraction. Besides, there are language enhancements like types that you can get using TypeScript/Flow or something else that can be transpiled down to plain js. But I kinda get your point. There are a lot of react/angular/whatever guys not realizing it's all about js at the end of the day. And yeah, chill the f out, it's all good :3
Not that this is not a discussion, it's that you have been "found out" and you dare not put any stack on it now. What's your stand on webpack ? react ? and other bullshit you are currently using to "simplify" what is essential plain text anyway ? Come on, put your money where your mouth is, let's use just one out of the many examples, what is your personal stand on webpack ? You in ? See you when again on your opinion when people turn on webpack saying "It was suppose to make things easier, but decades later all we see are people finding it hard to debug projects that are breaking down because all easily debuggable files are not made into a single mash potato, people back then don't know what they were doing". You will be the very people that will THEN turn on webpack and said it was the worst thing ever. You hope that if you praise the new way of doing things loud enough, people and YOU will forget you stood for it back then and downvote people who called you out. 
Yeah you mentioned that pretentious "typescript" thing that everyone will downvote you to hell for booing because you are all just sheeps ? Remember why you all use JavaScript ? Partly BECAUSE it CAN do dynamic typing, it's a feature that cause YOU to learn it, but no...you want to be "more professional", go learn C++ and other serious programming language if you actually want to be professional, don't use JavaScript and then wear that typescript hat hoping that you will "look" like the real deal but then again it's easy to pretend that you are the real deal since you along with so many sheep are wearing the hat totally believing they are the real deal now. NewsFlash: You are all just pretending, many of you secretly know it. Want REAL TYPED language ? Use a real language, oooo you can't ? Pointers makes you crazy ? Ok, you can crawl back to JavaScript but remove that pretentious TypeScript sorry excuse for a real programmer hat. 
I just took a look at the homepage of styled components. Seems they put the styles directly above the place where they render their component. Now that's bloated. If somebody reads the component, the styles are probably the last thing they care about. Personally it would throw me off completely . Vue puts the css to the bottom of the file, where it is not in the way. Personally, I also really dislike this es6 template literal string whatever function. ${props =&gt; props.primary &amp;&amp; css` background: white; color: palevioletred; `} Now I had to read that twice to grasp what's going on. It is trying to be clever, but for me this seems like a massive hack. I unfortunately see that kind of stuff a lot in react codebases. It's just not easily readable in my eyes.
Seems like you're really upset about this, maybe consider using another language if this has such an effect on you.
Isn't it though? In your OP you said you were dragging your feet on a project because of a large data set?
You need to learn the difference between other people being pretentious, and you having an inferiority complex. Other developers use JS frameworks and tooling because they are useful for solving the problems they have. This makes you feel inferior because you don't work on anything that complex, and you make crazy posts on /r/javascript. That doesn't make those developers pretentious, they're just minding their own business.
No No, I LOVE JavaScript, I just cannot stand pretentious JavaScript developers that follows all the fads. I EMBRACE JavaScript completely, I love its features, unlike those TypeScript pretentious people that think this makes them more of a programmer. People who use JavaScript and then use TypeScript to limit JavaScript's power to appear like a real programmer are like butterfly who choose to not use their wings to fit in with the worms because everything things worms are the only real deal. Embrace JavaScript completely or go away, don't limit it with TypeScript and try to come off as a real programmer. 
Lucky.
Yah but I have the luxury of time on that project. Besides the devil is always in the details w/add ons, like it will insist on immutability and/or having to pass large copies of things around to do anything that will kill performance. And it would be irresponsible to NOT benchmark it in JS before adding in a new language anyway. 
Your post was a bit aggressive and confrontational, perhaps you are getting back what you give? Just a thought.
&gt; Other developers use JS frameworks and tooling because they are useful for solving the problems they have. Let's solve this issue by re-compiling it with babel so that it when many years down the road when we need to change some stuff, we will have to then de-compile...wait...can we decompile babel back to our original code ? Oh we have a copy of our original work ? Let's work on that then. Wait...who's idea was it to "compile" plain text to another plain text in the first place ? It was frank, frank thought recompiling JS is cool because others do it too. Frank is learning a new framework right now don't disturb frank. 
Some people are just against CSS frameworks in general, and think that you should use CSS in JS or that responsive frameworks would be better suited to be replaced by true native mobile apps. It's not a "real" reason in my opinion. It's simple bias and judgement calls.
I'm just calling them out, it's soooo pretentious I couldn't stand it. 
Oh another REVOLUTIONARY Framework coming that not like the other framework ? Let me just get my fad following ass up from this chair and get ready to sit on this new one. 
1. You can use a lib without transpiling shit 2. ...you have to work on C++ game using sources, you are not trying to reverse engineer the binary (typically). Why is it bad for js then?
It's not a framework. It's a browser native functionality.
There are so many things wrong in your words. **stop it, get some help**
I'd say Haskel is better for high performance web apps. It has had multithreading for well over 10 years and drives lots of mature solutions like WhatsApp. They get 2,000,000 concurrent connections on a single box.
&gt; I would have to see how it performs in js before even considering adding back all the headaches of polyglot full stack &lt;shudders&gt;. Care to share the issues you had? I've yet to explore FFI with node. I haven't done any projects yet where my Rust code would be relevant to use with a Node project, although [Parcel does make it look rather easy](https://parceljs.org/rust.html)(I don't even think it's via FFI, seems to be using WASM so it works in the client/browser too). JS: // synchronous import import { add } from './add.rs' console.log(add(2, 3)) // asynchronous import const { add } = await import('./add.rs') console.log(add(2, 3)) Rust `add.rs` file: #[no_mangle] pub fn add(a: i32, b: i32) -&gt; i32 { return a + b }
https://yarnpkg.com/blog/2016/11/24/lockfiles-for-all/ This is a good explanation for you to learn more about lockfiles. Written about yarn, but same concept applies. 
I think you intended this to make babel sound ridiculous, but you just wrote a story about incompetent developers who don't know what babel is for.
I am calling them out ! Support me: https://www.reddit.com/r/javascript/comments/ajbboo/discussion_js_developers_no_not_just_any/?st=jraljpll&amp;sh=198f9cc3
There's a problem if you merely look at something and discard it without having tried. Css is an old problem, and the people that created this, or use it, aren't simple minded, they know exactly why they prefer it over a webpack loader sfc/css modules/bem. React has a modern understanding of separation of concern. People are naturally coming to the conclusion that this philosophy should apply to css as well. styled-components is one step in that direction, although for sure not the last, there's a massive churn going on atm. Ps. functions are hoisted. You can put styled components anywhere you want, over or under the component, or into a separate file, that's up to you.
&gt; I think you intended this to make babel sound ridiculous, but you just wrote a story about incompetent developers who don't know what babel is for. I think you intended this to make angularJS two way binding sound ridiculous, but you just wrote a story about incompetent developers who don't know what angularJS two way binding is for.
&gt; like it will insist on immutability and/or having to pass large copies of things around to do anything that will kill performance and/or resources. I think you're just not experienced enough with Rust tbh(no offense). Immutability is default in Rust, but you can declare your data to be mutable instead when needed. Why are you passing around large copies? Ownership issues? Use references or slices to pass data around. This is assuming you're referring to Rust, which it sounds like you are. The community over at r/rust are very friendly and helpful, if you run into any problems you can reach out there, stackoverflow, IRC or Discord, etc. &gt; And it would be irresponsible to NOT benchmark it in JS before adding in a new language anyway. You honestly expect multi-thread benchmark to change performance metrics much vs single-thread benchmark? JS is going to be slower than Rust by a long shot, only time it might not be is when V8 is able to optimize to native code completely which is rare afaik. &gt; And I don't find threading to be as challenging as others make it out to be, certainly not enough to switch languages for. It's not challenging at all in Rust. The crossbeam and rayon crates makes it a breeze depending on what you need to do(you don't need these, but they're definitely worth it and easy to use).
Then don't use it, just go back to writing CSS yourself, because if you don't do that you will have to learn a new fad that will "make CSS easier"....damn if only one would just read a good book on CSS and close this never ending new framework psychosis cult. I am calling the fads out ! Support me: https://www.reddit.com/r/javascript/comments/ajbboo/discussion_js_developers_no_not_just_any/?st=jraljpll&amp;sh=198f9cc3
It is more a symptom of programmers in general, doesn't really matter what language, folks get invested in a particular stack or language or idiom and start painting with a broad brush, repeating the same canned talking points that really boil down to dogma when you examine them, as there is no actual data to back them up, or assume that programmers are basically interchangeable legos and have to conform to the lowest common denominator (in their worldview). Though I do like typescript, but I also like dynamic as I do more prototyping these days than massive apps spanning multiple organizations, and I don't always appreciate tripping over the hastily assembled opinionated devices to make js look like something other than js, especially when it comes to building or debugging, and when I'm the one trying to be hasty I need a more solid foundation. There is an old user interface design rule, if you have too many options, you don't understand the use case. js has more use cases than any language prior though (back end, front end, android, ios, native, browser, with instant accessibility to billions of people, and makes no attempt to limit them, so you really have to understand your own use cases. 
If performance is the central thesis of your service, app and need high-concurrency multi-threading I would use Haskel. You can get up to 2,000,000 concurrent connections per second.
I would argue calling people “sheep” is pretentious. Be the change bud.
|The community over at r/rust are very friendly and helpful If by "friendly" you mean not listening to me and just doing rust evangelicalism, sure...
How is Swift for integrating with node? Any info on compiling Swift to WASM? Yes, I'm about to google the topic.
Dude, you are missing the point. This is not for replacing CSS but for extending it possibilities when some things are impossible to achieve. Like generating fancy backgrounds which depend on user input.
You may convert them to MIDI notes, with something like: i = -1 last = 0 for (n in notes) { if (notes[n] !== last) { last = notes[n] i++; } notes[n] = i; } Then you can always get the frequency when you need it with this: let makeFrequency = midiNote =&gt; Math.pow(2, (midiNote - 57.0) / 12.0) * 440.0; Then you can convert your string melody to something like this: [ { "note": 22, "beats": "2" }, { "note": 17, "beats": "2" }, { "rest": true, "beats": "4" }, I added a `makeMelody()` to your codepen to get that, it's the first 3 notes of zelda: https://codepen.io/anon/pen/xMGNQx I was then going to you use https://openmusic.gallery/ to rend it, but didn't get that far.
Ahhh medium, the buzzfeed of programming. Clickbait titles and poorly research articles. 
"**modern design system**". Design is much more that copy &amp; paste some botostrap design shit. I am telling you know. Take a look at [https://refactoringui.com/](https://refactoringui.com/).
Each framework is a tool for a different job, if you uses two way binding use angular, if you don’t need that, react will be faster. If you don’t need components then vanilla Js is the way to go. If your website needs just a little interactivity then use jquery. Everything has its use, you just need to know what it is used for, real developers know more one than one thing, heck I am just a beginner that started less than two years ago and work only in my spare time sporadically and I know both jquery and react What you have is JS fatigue: it is a real thing, too many frame works out there, because there are millions of jS developers using it for a wide array of different things. That is the fate of any programming language that is so widely use. You are only somewhat right in that because many of the JS developers talking online are novices who learned one thing and they think that is the end to all knowledge. You find a smaller proportion of these in any other language but JS attracts many web developers who don’t know much about programming outside JS 
As with many "big words" -- it's not just a synonym for rewrite. Rewrite implies throwing away what you've got. Refactor implies mostly keeping what you've got but rewriting \*portions\* of it, or shuffling around \*portions\* of it to improve it.
Ohhh cool, that's an awesome idea! Thanks for the suggestion. I'm pretty dire at music theory 😅
Not sure how that's different from what I was saying? I just prefer Rust as I've had bad experiences with C and C++ in the past(lot of ways to mess up especially with memory, which from what I can gather takes a fair bit of time/experience to get good at avoiding and are mostly specific to C/C++ vs other languages I've come across). I found Rust as an alternative for similar projects where I tried to use C and C++, it has a bit of a learning curve, but I'd say less of a time investment that C/C++ seemed to require, protects me from many of the issues that I'd run into with C/C++ and allows me to enjoy some languages features I was familiar with in JS and C# that didn't seem available to me in embedded platforms where libstd wasn't available, I recall not having a good time writing a packet parser and related code due to how arrays were handled, as well as dealing with functions and pointers causing some problems(this though I think was more due to inexperience). It's nice not having to manage memory explicitly, Rust allocates it where needed and deallocates when it's no longer needed, without the issues a GC can bring. Catches a tonne of errors for me at compile-time that other languages don't raise until run-time or at all(huge timesaver debugging wise), and it does that thanks to the borrow checker. You can still build native modules with Rust or use FFI. I'd say it's a far better experience for a JS dev to pickup Rust than C++(another issue I had with that was lack of package manager, trying to build some opensource projects that hadn't been touched for a while causing a bunch of issues). I know Go is quite popular, but afaik has some of it's own gripes you run into later on that bite you or aren't as good as Rust equivalent, as a tradeoff for shorter learning curve. I don't mean to be hating on C++ btw, if you're experienced with it and know how to write it properly without the issues, awesome. If you're a dev wanting to pickup a systems language, you're probably going to have a better time with Rust than C++.
I think you're frustrated about a legitimate problem, but you're conflating (forgive me, I used a big word) the hyper-fad-ism (bad thing) with the growing maturity of the average javascript developer (good thing) &amp;#x200B; The degree to which the community as a whole latches on to ce-web-rities is sickening. The degree to which the community as a whole changes what they love every 5 minutes is sickening. The degree to which the community as a whole is arrogant is sickening. &amp;#x200B; What is not sickening at all is how the community has grown in terms of the depth of their problem solving ability. These new concepts are indeed better than there predecessors. Angular 2.x didn't switch over to mostly one-way binding just because it was the new fad and they wanted to capitalize. They did it because it was the better solution to the problem. &amp;#x200B; For a long time we haven't had the traditional / robust patterns for UI dev on the web like desktop dev has. Javascript is only in the last 5 years or so beginning to put its "big boy" pants on. UI dev is harder than backend dev (on average). -- Complexity builds up very quickly, and it takes new ideas to help wrangle that. You seem to think these new ideas don't have value. They do.
Thanks :D
Nope. The only thing that's can be shared between the 2 "threads" are buffers. So it's a bit better than using the `child_process` module, but that's about it. 
How does typescript limit javascript? Have you actually written any typescript? All vanilla javascript \*\*is valid typescript\*\* &amp;#x200B; Typescript just allows you to add type annotations if you desire. So that you can have nice tooling / auto-generated documentation / help spotting \*some\* errors early on. &amp;#x200B; The point is to make your life easier. &amp;#x200B; I see technologies like typescript and flowtype as a convergence of two ideas that typically don't mix.. On the one side you have strongly typed languages such as C / C++ -- They offer some nice compile-time guarantees and compiler warnings that help you spot some bugs very early on. The cost of this benefit is slower development pace. Everything has to be thought out ahead of time. Dynamic languages such as JavaScript lose the compile time benefits, but they trade it for the benefit of speedy development / the freedom to mess around until you settle on the right solution to the problem. &amp;#x200B; Typescript and flowtype allow you to get both benefits with none of the drawbacks. What's wrong with that?
Yeah Haskell seems neat, but also quite foreign to most? What's the learning curve for that, I haven't tried, but recall it can have a bit of friction programming for Haskell, but when it works, it's solid? I think it's in a similar basket as C/C++ is for me, in that I have the impression it strays a bit far away from other languages with time required to be productive in it(with C++ it's things like memory management and the many problems you can run into there that might not be apparent during initial dev and bite you later, with haskell more of the forced functional approach iirc and syntax/theory around that like monads). Granted I'm not experienced enough in either to properly weigh in. Point I was trying to make is that sometimes choice of the language you're going to offload the work to(assuming you don't already have experience and skill in those choices), time investment required to adopt it may be a good factor to consider. Especially if you're not going to be using the language that often. This is also on personal adoption/use, rather than company choosing for a specific product where you'd just hire devs that are good at that language.
Well, perhaps not, but it's a "best practice" so why wouldn't you? :D
Honestly, you're the pretentious one. 
I already asked them that :P They replied [here](https://www.reddit.com/r/javascript/comments/aj8bfg/multithreaded_nodejs_has_arrived/eeu295b/). (They don't believe Swift supports WASM as a target presently).
Haskell is a bear to get any real performance out of it. Everything being lazily evaluated is a fucking nightmare to optimize in a lot of cases. It's also why What's app uses Erlang (not Haskell). Erlang is another functional language but it's less "pure" and much easier to optimize and get real work done.
I’m not really a fan of maintaining two different dependency lists in my package.json as I’ve found no use for separating them.
Well I have nothing against the people who you these technologies, if it works for their use case, well done. But I just think the amount of tool creators is more than the number of actual developer that utilize these tools. Or so it seems...
Most of the time, it does not matter. However there are some edge cases. Electron apps are one such case: the electron builder that packages your app includes all dependencies by default. 
devDependencies can pull livereload, babel, debug and all sort of tools necessary during development but not wanted in production dependencies would be a light version of this, with only strictly necessary components for production
Same, I have development dependencies that are used conditionally when NODE_ENV is set to development. These therefore need to be installed regardless.
Yes, there absolutely is. If you have node modules that are needed only to build and test the project, there is no need to publish them when releasing your application. Otherwise you’re adding dependencies that you don’t use at run time.
You have spent an exceptional and inordinate amount of time on this. If you really want to know how we wrap our errors...your not going to like this...I mean like after all of this research do you reaaaaaaaally wanna know what we do? *quietly slightly ashamed* we just use console.log
&gt; If by "friendly" you mean not listening to me and just doing rust evangelicalism, sure... Example? Or are you assuming that I reflect that community? If me, what am I not listening to? My response had: - Advice on your issue(assuming it was referring to Rust based on sub-thread context). - Pointed out the obvious about JS perf and how multi-thread support wouldn't benchmark better against other languages multi-threaded (JS perf might be adequate for whatever you'd be doing sure) - I mention that multi-threading in Rust isn't complicated(but available today and not experimental, and with better perf, without the issues that others pointed out here with the JS example of multi-threading). Sorry if you feel that's not listening to you. It doesn't have to be Rust, I use it and like it, but whatever works for you is great, I don't have enough experience with other languages to mention them, so I just thought I'd share my knowledge about what I do know. I mean your comment that started all this was literally: &gt; been dragging my feet on one project waiting for threads (one large data set, lots of workers). Get ready to crush some benchmarks :) You don't have to wait. You can process that large dataset more efficiently/faster than whatever JS is going to offer. What benchmarks are you anticipating to be crushed?(multi-thread JS crushing single-threaded JS?)
What is everyone using these days? Phaser?
&gt; not listening to me Oh, were you referring to your earlier comment: &gt; I would have to see how it performs in js before even considering adding back all the headaches of polyglot full stack &lt;shudders&gt;. Because I had replied to that [here](https://www.reddit.com/r/javascript/comments/aj8bfg/multithreaded_nodejs_has_arrived/eeu871g/), asking for more information and showing an simple example of how you can use it with Parcel(with WASM).
I don't really feel like trying to explain something to someone who doesn't listen.
I don't think you understand the whole use case here, and you haven't added anything new to the discussion.
I do have "experience" with emotion react which mostly comes from playing around with react for a while and doing some side projects with it. That being said, I haven't seen css-in-js in big projects yet, there is probably a better approach when it comes to organizing the code. I took the first example from their homepage because that's very likely the entry point for most developers. I agree that css can become very messy and I think it's important that we try out new ways of dealing with it. Let's see what the future brings. (Shadow dom?) As for soc: Vue allows css to be scoped so it only affects the component it is in. This way seperation of concerns on a component level has been enough for me so far.
Irrelevant without a js benchmark.
I agree with your comment about beginners. It's really annoying to see endless articles about apply, call and bind, written by someone who has an 8-week boot camp education. But on the other side the annoying pedantic responses of people with CS degrees scream "I am scared of losing my job" to those beginners. I think in any case there is no reason why people can't be professional on here. Correct the kid, but you don't need to make him feel ashamed for trying.
&gt; who doesn't listen. I'm still confused what part I didn't listen to, and you refuse to point that out to me. I apologize if I didn't understand something you said correctly. I'm aware you're not interested and are holding out to see how it plays out in JS. I was interested in your negative experiences, but you have ignored both attempts to learn more about them. I felt like sharing (based on what little information you have provided) that natively compiled languages are able to perform better(I'm sure you know this), but not have to be painful like you had experienced in the past(but then again I don't know what those issues were beyond the ones you seem to have had with Rust specifically). If you're not interested in discussing it further, no worries, just don't reply? I have tried to listen(assuming listening for discussion vs implicitly saying "My mind is made up, I don't want to discuss it further, I don't value anything you have to say")
LOL! Here ya go. https://www.reddit.com/r/rustjerk/
Here you go. I don't know why rests aren't showing up though... https://codepen.io/anon/pen/xMGNQx Click on a song, and underneath it should appear the notes.
I assume from the context of the question that OP isn't going to publish (whether privately or publicly). If you aren't going to publish your project as an NPM package, there is no difference, as they both manage your local dependencies.
&gt; Macs can have up to 4 physical CPUs though I think? 6
/multithread
If your process is idempotent, you have been able to do this in node for years with child processes. I've had an app in production for 5 years that forks 2 children on startup
&gt; I don't think you understand the whole use case here, Use case? That you brought up with the large dataset and looking forward to multi-threaded JS to process it better? Use case is what... processing that dataset faster? Can I understand the whole use case any better than others here based on the info you've given or are you referring to something else? &gt; and you haven't added anything new to the discussion. I've asked questions to you that you haven't answered. I've provided advice/feedback(that just happens to mention Rust because that's what I'm familiar with, wasn't intended to be specifically advocating Rust to you). You've not really engaged in any of that, preferring rather to avoid it claiming I'm not listening.. &gt; And you are too enamored with rust at the moment to have a productive discussion. No? I've mentioned it here because it's my preference and I've used it for a long time. It was also brought up earlier as a direct reply to your initial comment as a suggestion(other languages like C++, Go, etc would be fine too). I mentioned that it integrates well with JS with the parcel example, presumably you can do the same with other languages if they compile to WASM, dunno what their FFI stories are like and one of your complaints was about polyglot codebase causing you headaches, I tried to express how with the language I know well enough that it shouldn't be, and if it was if I could understand from you why(you had nothing to say on the matter). You did respond to someone else though talking about issues you experienced that appeared to be about Rust(you didn't confirm that whenever I asked though, or have anything to say when I tried to ask more about it and provide some advice... if it was about rust, how am I meant to discuss such without talking about the actual language?). If other languages are suitable by all means go for it. I'm not saying rust is perfect and the only choice to go with. Plenty of other languages still are better choices depending on what you're doing. The reason a productive discussion isn't happening is because you can't be bothered to engage in one.
May I ask why you think multi-threaded JS would outperform multi-threaded Rust?(or other languages since you seem to think I'm pushing Rust as the only way) Is there some reason that a benchmark of single-threaded JS vs another language that greatly surpasses it's performance would not be an adequate indicator that a multi-thread benchmark isn't going to change anything?
Lol ok... nvm, I'll stop trying to engage with you and just leave it at this. You've got nothing positive to contribute, first ignoring what I have to say and spouting bullshit that I don't listen without any interest in clarifying what that is I haven't listened to, and now you're on this silly "must be a rust fanboy" retort. Hurr durr, look who's not listening now. LOL! Here ya go. https://www.reddit.com/r/javascriptjerk/
What... source? I'm not referring to cores, but sockets.
&gt; You've got nothing positive to contribute I literally want to benchmark it. Just because the focus isn't rust centric, doesn't make it non-positive (unless you are scared for some reason). Go away. 
Does posting it a second time make it better?
When I was still making small games in my spare time I saw lots of hype around Phaser, but that was a few years ago.
\- make something custom that browsers don't support out of the box like masonry layout \- do very fancy effects without killing the browser \- fix some implementation differences between browsers \- everything you cannot do now because of CSS limitations
&gt; I'm not referring to cores, but sockets. Your comment confused me, I read the "Logical CPU's" in the first sentence and substituted it in the second. In that case your initial number was off in the other direction. There are no current macs with more than one socket, the 2010 mac pro had a dual socket option. 
&gt; I literally want to benchmark it. Just because the focus isn't rust centric, doesn't make it non-positive Bro, if you paid attention to what I've been saying, it's not rust centric. I had asked you about things that were not rust specific, you never responded. Benchmark against what? I pointed out in a comment that if it was just to see how it performs in JS and that it performs good enough for you that you don't need native code, sweet. If you were meant benchmarking against other languages that put JS perf to shame in single-thread, then no, JS isn't going to do any better than those at a multi-thread benchmark. &gt; Go away. You are full of crap assertions. It's cool that you can't admit to any faults on your end and want to direct it all on me for whatever "clever" reasons you come up with :) I'm familiar with that personality and don't want to bother any further as you've clearly demonstrated you're not capable of a worthwhile discussion. I've given you advice and queries while trying to have a discussion in a friendly manner, but you've just been dishing out excuses and poor insults for a while now. Can't engage in a decent conversation when the other party behaves in that manner, you've made it clear that you're not interested in anything I've had to say(eg you clearly did something wrong and made a judgement from that inexperience, but admitting to it by providing more information or welcoming the advice is a no-no to your ego, best start throwing shade as a defense mechanism, hilarious). It's all good mate, you probably can't help it, maybe don't even realize it. I'll step off, already pretty de-railed, and I know from past experiences these conversations only go downhill. Best of luck with the multi-threaded JS and whatever plans you have for it :) Laters!
TL;DR: something like shader programs in 3D graphic but for web browsers instead of graphic cards.
If the question is 'why are JS devs so crazy compared to other kinds of developers?', the unusually large 'online community' of JS developers would be your answer.
Not really sure what you mean by “integrate with node”, and not sure what FFI is. Relevant article: https://medium.com/swift-programming/from-swift-to-javascript-and-back-fd1f6a7a9f46 You can also run a Node.js VM, at least in an iOS app where the language could be Swift: https://github.com/LiquidPlayer/LiquidCore
Didn't you say you were leaving? |nvm, I'll stop trying to engage with you and just leave it at this. Full of crap, that last post had nothing to do with reality, except as pure projection. I'm not interested in rust evangelism here, or polyglot in general, not without knowing what js can do first. You have issues, and they seem to stem from complete ignorance. Trying to derail benchmarking is as anti-science as it gets. And that is ALL you have tried to do here. Again, go away, like you said you would do. Or maybe your ego can't handle the fact that you are completely wrong here. 
&gt; Your comment confused me, I read the "Logical CPU's" in the first sentence and substituted it in the second. Sorry, with virtualization that I use, they're referred to as logical and physical iirc. &gt; In that case your initial number was off in the other direction. There are no current macs with more than one socket, the 2010 mac pro had a dual socket option. Sorry, I don't really follow Apple hardware(waste of money to me), turns out they never seemed to have supported Quad socket Xeons, with the last dual socket being the [2012 model](https://en.wikipedia.org/wiki/Mac_Pro). Makes sense why I confused you :P
I sense some cynicism...
Stop the insanity.
When 8 GB RAM isn't enough to sort a few million floating point numbers, something is very wrong.
&gt; Not really sure what you mean by “integrate with node”, and not sure what FFI is Interface was probably a better word. FFI is Foreign Function Interface. You can pass data from Node to another binary, say something you compiled with a function that takes in an array of numbers to crunch, then returns that back to Node. But rather than calling an executable with arguments like a commandline app, you can call that binary programs methods directly. Might make more sense if I link you to the [Parcel example](https://parceljs.org/rust.html)? Note that's interfacing with WASM rather than native compiled code with FFI but would be similar. &gt; Relevant article Ah yup, glanced over it and saw it mentioning JSCore, I don't know too much about it but recall React-Native used it for running it's JS business logic, but would bridge native code on iOS and Android where you could use the platforms native languages or others that compiled native code like C++ or Rust. If it works for you it's good :) Personally I prefer a language that has bit more reach on other platforms, Swift does look appealing, so hopefully Apple manages to get the quality on platforms that aren't it's own to a similar level :)
Blogs are pivotal in the hiring process and reputation building now. When you only have 1-3 years experience, going up against engineers/devs with 10 years who just suck at moving up the ladder and opening their position, you have to differentiate yourself and show that you're REALLY into this and you do it pretty much every waking moment. It shows to an employer that you are a greater ROI than the stagnant 10-year applicant. Not to mention, as larger companies move to publishing OSS and adopting OSS, they look for people who can learn new tech very quickly and potentially contribute to a larger OSS project. Hiring people who blog on the side hedges the bet that you get a lemon of a new-hire that hasn't learned a new tech on their own in 5 years. That being said, it's good that there's lots of information available in an easily consumable format. The bad news is, you have to fact-check some of it. Overall, I'd say it's a net-positive for everyone.
Eh... so they're re-writing browser rendering logic to render the DOM and apply CSS to WebGL?(should still use graphic cards) Or something akin to that? Seems odd... browsers are using GPU under the hood where appropriate.
If you just want a drum machine to play a long with you can go here and click play: https://openmusic.gallery/gauntlet/ You can change the BPM and time and modify the sequence and use any sound you would want. 
Hi /u/jaganganesh, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/FlyingChinesePanda, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Art4261, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt;It works this way right now because you can have both a public and a private property with the same name which is something no one asked for. &gt; &gt;this.x should allow me to access the private property if I have the right to see it or should throw an error if I am out of the class scope They explained why it works like that in the link: &amp;#x200B; &gt;1. If private fields conflicted with public fields, it would break encapsulation; see below. &gt; &gt;2. One of the more important properties of private fields is that subclasses don't need to know about them. We'd like to allow a subclass to define a property named x even if its superclass has a private field of that name. &gt; &gt;This is something other languages with private fields generally allow. E.g., the following is perfectly legal Java: &amp;#x200B; class Base { private int x = 0; } class Derived extends Base { public int x = 0; } &amp;#x200B;
Hi /u/GameAdvise, this post has been removed. If you want to talk psychology, sociology, etc. then please find somewhere else to do it. If you just want to rant, find somewhere else to do it. Thanks.
I'd rather let people name things that they wanna name it
This is in part because I’m a procrastinator and part me not knowing JS well enough
I get that you're trying to make the point that people are sheep because they're *blindly* agreeing that thing "x" is cool, but the fact is your assertions seem to suggest that people are sheep simply by virtue of agreeing at all that something is cool. I think what's baffled everyone is that it's very difficult to see where your frustrations are coming from. I can't say I can remember a single instance in this sub of someone being roasted for expressing irritation with the current bundling environment or framework "x" (don't get me wrong, I'm sure it's happened several times, I really just mean to say as a regular on the sub I haven't witnessed it and thus find it hard to believe that it's endemic). &amp;#x200B; It also seems that you're plainly upset with the concept of libraries. JavaScript has exploded in popularity and, more importantly, support over the last handful of years. Between Node, Electron, and native compilation tools (Ionic, React Native, etc.) you now have this wildly accessible language capable of porting over elegantly to virtually any runtime environment. As far as I can tell, the proliferation of libraries (jQuery being the grand pioneer) and the ability to distribute them (npm, etc.) has been the start and end of this incredible leap forward. &amp;#x200B; I'm all for the public expression of frustration. I think this sub benefits enormously from the heated debates that take place in virtually all posts that end up earning significant visibility, but I think everyone reading this post (including myself) really struggle to see the foundation of your irritation. You have to see that your rant seems to have little more substance than, "you all suck, you're all sheep, you all like new stuff even though the new stuff is usually not entirely perfected." Of all language subs, I'd guess this one is filled with the largest volume of individuals that are self-taught or otherwise followed an atypical path to professional development -- it's hard to reconcile that with the notion that this sub would also have an abnormally serious pretentiousness problem, you know what I mean?
Does it still work? I only see 3 green rectangles with text, "Loggin In", "Successfully logged in", and "Connected to socket server"
I haven't tried subtrees, but I'm working on a POC setup using submodules here: https://github.com/lhorie/test-private-monorepo A co-worker said he didn't have much success using subtrees to import git history when migrating from multirepos to a monorepo (due to the need to rewrite paths), and that he used `@lerna/import` with success in the past (brute force as may be). We have internal packages that get published to a private npm registry, in addition to OSS core packages. We want to have the ability to link both public and private packages in a single monorepo, while the public packages are themselves in a self-contained monorepo.
Got it; JavaScriptCore does fit the bill of a FFI. It allows you to provide Obj-C bindings into the JSContext’s run-time. You can also evaluate JS expressions as strings and get the return value. NativeScript maps the entire platform’s APIs to JS this way, and it’s astonishing. Honourable mention to React Native, too. It’s true that Swift falls behind on the cross-platform front. Fair enough! I only ever use macOS and Linux, so it’s never been a limitation for me personally. Though I am a hobbyist cross-platform developer, so I understand what you’re aiming for.
No, no, no, sorry, my metaphor was bad. I meant the browser will allow us to write small programs that will be executed during the rendering process. For example instead of building a masonry layout on the application level we can do it in that small program (called worklet) during the layout stage of rendering process. The browser will call the worklet with a list of elements and the worklet will had to position them. It's all about extending what the browser can do (e.g. custom layouts, animations) and what it can understand (e.g. custom CSS properties and units) but during the rendering, not after it (see the charts in the article).
Hi /u/kristersg43, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I must be blind, but I can't seem to figure out where I can filter out specific websites from my reddit feed. How do you do that?
I think there was a way, if not it was more of a “i wish i could” :)
OK this article is really shit. They are trying to contrast concurrency with parallelism when parallelism is actually a kind of concurrency. &amp;#x200B; Secondly, let's talk about this silly framework. [Node itself is really not intended for long running processes and heavy IO bound tasks.](https://www.youtube.com/watch?v=ztspvPYybIY) Async memory management is really really hard, and you are probably going to be leaking memory all over the place. &amp;#x200B; Thirdly, I really think JavaScript's type system tends to get in the way of people attempting to do heavy data programming in node (this of course being the main use-case of a multi-threaded paradigm.) &amp;#x200B; For these reasons I would strongly recommend against anyone using this crappy framework. There are much better tools out there, most of which are based on the Hadoop ecosystem. &amp;#x200B; Source: I have spent the last several years coding nodejs and Python which included a lot of async and parallel data processing work.
You raised my hope and dashed them quite expertly sir, bravo!
;)
Look up "Reddit Enhancement Suite"
aw :/ - i can make you an extension that filters it out? :D
I haven't used bootstrap like ever, but jQuery I have used and I can say the following: It's not really necessary. JavaScript has come a long way with things like document.querySelector etc and it begs the question: what do I need jQuery for? Do I need it because I haven't really learned how to use JavaScript to manipulate the DOM or do I need it for something else? If you are using it strictly for manipulating the DOM, then you should maybe look into something like Vue or React because they are more streamlined ways to do that.
flow's future never looked as bleak as today. After yarn ditches flow-are there any big projects still using it?
Yeah.. I'm not using jquery for that at all.... it's just a dependency I'm stuck with unfortunately.
I think the idea to include jQuery + Popper.js AND Bootstrap's own JS was a mistake. Why not just one file? I have a hard time believing the developers at Boostrap couldn't make it work. jQuery isn't as popular as it used to be and a lot of development is done in frameworks (React/Angular/Vue) where it'd be a really dumb idea to also include jQuery. Each framework has an NPM package that implements the necessary JS for Bootstrap to work, but it seems only necessary because Bootstrap didn't do that right. Bootstrap's CSS helps me immensely with responsiveness and 508 compliance, so if design isn't your thing, it's useful for at least that. There are plenty of resources for implementing the necessary JS yourself.
Are you saying: import jQuery just to run bootstrap.js or import jQuery to manipulate the DOM? If it's the second case, the most things you can do in jQuery, you can do easily with no-lib JavaScript.
Great informative comment, but I saw you were downvoted, possibly due to your first sentence. I believe the person you were replying to was trying to be constructive, not critical. At any rate, thanks for the recommendation. I am looking to build a native module soon, and having experience in it, would have reached for C/C++ by default. I'll take a look at Rust given your experiences integrating with Node.
Unintended, but I’ll take credit.
It would be better if the sentences had a comment above them describing what the sentence is about.
Personally i see little need for bootstrap or jquery anymore. modern vanilla js &amp; css has reached a level that removes the need for front end frameworks(in some cases) or js libraries. unless your supporting older browsers i don’t see the point in using either one. 
When redditors have to filter something *else* out from their Reddit...
Yes, because 1) async I/O by default is good for non-CPU bound stuff (db request) 2) allows for single language throughout stack 3) lots of open source solutions 4) Server Side Rendering of frontend js-framework components, ie render React and send as html 5) I enjoy JS
Yes, for a part of it - the part that is able to reuse code also used on the frontend.
Hi /u/brxxn0, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mayankk_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
i don’t get it 
Hi /u/SomeStudentInFL, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/mawi5, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/KryptocBE, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Holores_Daze, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
There's a little thing called "React"...
Seems like the author has since fixed this. The line currently says: &gt;Node is known as an asynchronous programming runtime for javascript Could you edit your comment to reflect that fact that it has been changed?
He actually updated it to the correct phrasing.
Medium is a blogging platform. Saying it has bad content is like saying the road has bad drivers. It's not the road's fault.
This may be an unpopular opinion, but jQuery is freaking awesome. Now before I continue let me mention that I've been a web developer for over a decade, let multiple teams, wrote a book on Backbone, and currently teach an introduction to web dev class with React. So I am well aware of the advantages of Angular/React/Vue over jQuery ... or even the advantages of frameworks that came in-between the two like Backbone, CanJS, or Ember. But let's not forget that once upon a time there was an era when jQuery was just some new library from an unknown loser named John Resig. It came out after many other more established frameworks, yet it managed to compete with them, and not just compete but *destroy* them market-share wise. Libraries like Dojo, YUI, MooTools, MochiKit, ExtJS, and many others. All those libraries had their own ways of working (eg. MochiKit had functions for each tag you wanted to build, so it was sort of like a precursor to React just with `div({ id: 'foo'})` instead of `&lt;div id="foo"/&gt;`), but jQuery beat them all because it had the absolute best solution to the problem. This is why jQuery *dominated* market-share wise for a long time, and a big factor in why it still has a very healthy percentage even today. And it's also why jQuery is still the absolute best tool in the toolbox for a certain kind of site. You can *absolutely* go from building static sites to building interesting sites with jQuery, and as long as you never go past "interesting sites" there will be nothing wrong with your choice. But here's the problem: if you ever do want to go to the next level, from interesting sites to *web applications*, then jQuery will have been a poor choice. Sure you *can* build a web application with jQuery, but without going into details just trust that there are enough reasons not to to lead to the creation of Angular and Backbone and Ember and React and Vue and ... So at that point you've sunk a ton of time into really mastering jQuery, but it won't do you any good in building this new project (well, Backbone uses jQuery, but Backbone itself is a generation out of date). Or ... you can leapfrog over multiple eras of web development, and skip to just learning React (or Angular or Vue). You'll still be able to build interesting sites, but should you ever find the need you'll also be able to build web applications.
I have no tips just a reflection. I've been working on a couple of large JS apps and I found that almost all maintenance issues were related to libraries. I haven't watched the talk yet, but thanks for the link!
Oh the elefant in the room. I always forget about him.
obviously for r/node but yes this could also be applied for marketing and other languages and systems... maybe not about cooking? don’t know about that.
Here's a sneak peek of /r/node using the [top posts](https://np.reddit.com/r/node/top/?sort=top&amp;t=year) of the year! \#1: [When you run out of disk space](https://i.redd.it/t5y8zb1kosm01.png) | [56 comments](https://np.reddit.com/r/node/comments/85nlo8/when_you_run_out_of_disk_space/) \#2: [JavaScript Functions - 4 Ways](https://i.redd.it/1x4ho2qngv421.jpg) | [89 comments](https://np.reddit.com/r/node/comments/a71rpv/javascript_functions_4_ways/) \#3: [I created an Htop-like terminal dashboard for trading Bitcoin, written in Node](https://i.redd.it/hcly90jd6ta21.png) | [50 comments](https://np.reddit.com/r/node/comments/agmkq8/i_created_an_htoplike_terminal_dashboard_for/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
if comments subreddit equals mentioned subreddit - don’t comment? wouldn’t that be a pretty obvious logic?
&gt; I believe the person you were replying to was trying to be constructive, not critical. Sorry? The comment that said the processing intensive work could be handled by C++? Not sure how that was constructive or critical when my comment they replied to had suggested that very same thing(offload the work to a more suitable language). I did suggest Rust as it's the only other language I use that I'm familiar enough with, but that advice would apply to other languages like C++. &gt; and having experience in it, would have reached for C/C++ by default. If you're confident in the language it still might be a good option? My suggestion for Rust was more to do with those who were considering an alternative language for performance reasons without potential headaches they're more likely to incur with C or C++ coming from the comforts of JS. I don't have any actual experience yet using FFI with Node btw, I've only read about it. Parcel makes it look easy to bundle rust as WASM(do note this target won't support all crates, similar to embedded targets, though you'd have that issue with other languages compiling to WASM like C++ I think?). Rust has been a good experience, so if you have the time worth trying :) It's gotten a bit better since I started with it in 2016, but still not quite there yet in some areas. For parallelizing work consider the Rayon crate, for threaded work, CrossBeam crate has been quite nice.
With Jest and now Yarn crossing the aisle one would have to assume it's only a matter of time for React.
At the end of the day, they both solve problems. They are also both well known by developers. If you want to replace them with something else that solves the same problems, you can certainly do so, there's nothing wrong with that. You can do this solo or have a larger team discussion. Bootstrap and jquery can also be pulled in from a cdn where users may already have those assets cached. A lot of developers love to hate on them but then there's a lot of elitism in development. End users don't care how sites/apps were built, they care about it working and getting some value from it. Your job is not to write *buzzword* code, per se, but to add value. 
jQuery wasn't a framework competitor. It was a library for extending JavaScripts ability to query and directly manipulate the DOM, and importantly normalize cross-browser differences. That is why it was popular. jQuery is not "still the absolute best tool in the toolbox" because again it is still not a competitor with libraries/frameworks like React/Vue/Angular. Today it is a competitor with JavaScript/ECMAScript. Outside of extreme fringe cases there are no longer cross-browser scripting issues and thanks to jQuery the most useful functions and queries have been incorporated into JS. jQuery is now entirely superfluous. And if your argument is "but I can write shorter code like `$('.myClass')` vs `document.querySelectorAll('.myClass')` then you need to have a long and hard think about whether it's worth it to bundle and include a learned dependency so you can save a few key strokes. Hint: it isn't.
I don't know about jquery, thankfully i haven't had to touch it in over 6 years. As for Bootstrap, i try to avoid css-selector-based ui-frameworks and i think they underline the worst of css. The cascade rips into the component model, and while you can logically nest a one component into another, even if they have nothing to do with one another, styles and selectors are so tightly wound up that it eventually starts to snap. In a component based ui kit that isn't the case.
You should try using template strings for things like `('Latency: '+'~' + String(data) + ' ms');` So it becomes `` (`Latency: ~ ${String(data)} ms`)``
Thanks for the trick, but I did this for fun I not really a JS person so I didn't think about using template strings
&gt;jQuery wasn't a framework competitor. No, and I didn't mean to suggest that it was. it was a library (albeit such a large and important one that in some ways it bordered on being a framework). "Frameworks", in the modern sense of the term, started in the era after jQuery with stuff like Backbone and Ember. &gt;Outside of extreme fringe cases there are no longer cross-browser scripting issues and thanks to jQuery the most useful functions and queries have been incorporated into JS. I understand about the existence of document.querySelectorAll. I also understand about the exist of `XmlHttpRequest` (or, if you're willing to abandon some browsers or use a polyfill, `fetch`). Even stuff like promises have replaced parts of jQuery (yes, jQuery had them, or at least a form of them, before JS did). But you clearly haven't both used the native DOM API vs. the jQuery API if you're making a statement like that. jQuery still offers a great deal of convenience over native stuff. Plus it again sort of does provide some of the benefits of a framework, in the sense that it has all the information neatly organized into a well-made and battle-hardened documentation site, there are a bajillion articles, tutorials, videos, etc. out there for how to use, another bajillion plug-ins or integrations (eg. with Bootstrap).
Understandable, thanks for the lack of assistance. Very appreciative. 
&gt; But you clearly haven't both used the native DOM API vs. the jQuery API if you're making a statement like that. jQuery still offers a great deal of convenience over native stuff. I have and it doesn't.
Presumably a lot of Facebook-internal projects.
That thing must be reeeeAaaaally bad if Reddit is a high standard and that other thing must be removed to maintain that high standard. It's a rip on Reddit.
I don't see that happening at all. See my comment over on HN on that exact question: https://news.ycombinator.com/item?id=18989933
I think youd be better off not asking these kinds of questions. Javascript programmers for some reason are way too invested in the opinions of other javascript programmers. the same people who complain about jquery not being necessary love to talk about how awesome babel is. it's completely asinine. use whatever libraries you want and dont worry what other people think.
&gt; What tools are best to keep react projects "simple" You're asking for tools to simplify tools and that's what gets most people into trouble. If the tool you are using can't simplify your work, you're using the wrong tool. If the tool you are using needs another tool to make it work or easier to work with, I'd question the value of the original tool. The very first step towards simplification is not using any extraneous tools at all. 
I don't know why someone down-voted you for having a pragmatic stance but I tried to offset them.
You say that, but there's a lot going on in this Yarn feature list, and there's a lot going on with Jest, but they've each decided to make the jump anyway. I suspect, especially given Dan's frustrations with Flow, eventually the team will decide to give it a try, and they'll decide to make the switch and stop building features in what is an increasingly dead language. It's happening all over the industry, not just in some teams at Facebook. Kent C. Dodds this week posted that all new projects at PayPal [will be using TypeScript](https://medium.com/paypal-engineering/why-every-new-web-app-at-paypal-starts-with-typescript-9d1acc07c839). My own experience at smaller businesses has been similar. Of course, they might not, but at a certain point they're going to end up with a codebase written in something that nobody is interested in working with, and that you would think would harm contributions and by extension the project itself. I've never had to do this, but I imagine it isn't _that_ difficult to refactor something from Flow to TypeScript. I'd be surprised if you couldn't codemod a good chunk of it right off the bat.
You can't call the callback in the constructor because that wouldn't use the callback as the callback, it would call the callback once during construction and use the return value as the callback which would be, in this case, undefined. You can instead wrap the callback and provide your class instance as an extra variable new MutationObserver((...args) =&gt; callback(...args, this)); Then in the callback, the third argument would be your EventTrackingMutationObserver instance. const trackerAndObserver = new EventTrackingMutationObserver((mutations, observer, instance) =&gt; { const {x, y, screenX, screenY} = instance.latestMouseEvent; Another option would be to call the callback with call/apply to change its context to your instance new MutationObserver((...args) =&gt; callback.apply(this, ...args)); This would work like event handlers in the DOM, how they change handler context to the event.currentTarget. However, this would not work for arrow functions.
 this.MutationObserver = new MutationObserver(callback.bind(this));
Like all good programmers I'm lazy, so rather than rebut you directly here's someone who wrote a very articulate counterargument with specific examples: https://medium.com/@mattburgess/in-defence-of-jquery-4a8b20f4696b
Honestly, how can I say no to Iroha?
I truly, _truly_ don't see that happening any time in the near future. Suspense and Concurrent React are going to take the rest of the year to put together, if not longer. There's no way they're going to stop work on that just to change type systems. Even after that's done, I don't see a real benefit for them to switch to TS. React is open source, and the React team certainly _welcomes_ contributions. But, given the complexity of the internals and the functionality they're working on, all the meaningful commits are made by the direct core team and some nearly-core contributors. They don't "need" outside contributors to the core itself at all, and in a lot of ways it's almost to their benefit not to have a lot of extraneous PRs being thrown their way. They've got a vision on the functionality they want to build, and frankly none of the rest of us outside the core team fully grasp it. So, "making it easier to contribute" is not a good reason for React to convert to TS.
My app is crushing. It really fell for one of the workers.
Functional TypeScript allows you to deploy serverless functions without having to deal with HTTP, parameter validation, or encoding / decoding. **You just write normal TypeScript functions** that are then callable remotely over HTTP. Coming soon... a @zeit/now builder, adapters for AWS, GCP, and Azure cloud functions, as well as a gRPC transport that can be swapped for the default HTTP transport.
The live demo does not work. It always says "page {id}"
My c/c++ is a little Rusty
Thanks for explaining it! 
Lmao
My opinion is that jquery is awesome. Bootstrap is not. Frameworks are also not awesome, you get coders who know this or that framework but don't know javascript which just boggles the mind since the core will outlive any framework fads which seem to popup every other month.
Not to be pretentious or anything, but to refactor means to pull common parts out of a set of code and to rewrite the target code in terms of the parts you've pulled out. It's not just rewriting, it's about reducing complexity and code duplication. It's a more specific form of rewriting that has a specific purpose.
Yeah, the irony is so thick here it has to be on purpose.
I think it's a lot more fun to conceptualize it yourself and look up bits and pieces you can use as you go. At the end of it, you can be sure you'll have gained experience in coding. It might not be the most efficient, or the best, but it'll help you think like a programmer. But everyone starts somewhere, good on you for taking the initiative with the CSS/HTML. :)
sry im very good at javascript programming but i cant help u here ...
Something like Phaser would be a good starting point. It is basically a Javascript Game engine that should help you do things from rendering to interaction management.
Even if this is the case (which is arguable I think), rather than reaching to jQuery, I would rather see smaller libraries that wrap these DOM api's to expose a simpler interface for developers. jQuery is just too bloated.
https://www.html5canvastutorials.com/tutorials/html5-canvas-line-color/
Not agreeing but ``` import { foo: bar } from './foo'; ``` Works pretty well
That doesn't really help me because the variable is already predefined. If colour is 0 it means it's drawing in black, if its 1 its drawing in red.
exactly, juniors aren't writing those articles for status, they are a part of their resume and learning process. It isn't ideal for people looking for answers, but judging the quality of the info you are getting is a part of the job anyway. Most importantly, RTFM. People complaining that Medium articles arent a good way to learn React? React's documentation is stellar and their are very respected professionals in and close to facebook that are constantly writing articles. 
How did you define that variable? Use a switch-case with a case for every color you want
[https://de.pornhub.com/view\_video.php?viewkey=ph5c28d1f8555fe](https://de.pornhub.com/view_video.php?viewkey=ph5c28d1f8555fe)
Dang... that’s pretty bad. Maybe folks should stop referring to using service workers as “multi-threading”, because the process doesn’t really behave like you would expect from an actual multi-threaded language. It’s just misleading.
Someone was bound -rightly so- to point out the thing about external dependencies. And /u/Khanhanhan already has, so I don't want to repeat it. But then again, noticing the specifics you've mentioned, I think I will _expand_ on this idea. There are, broadly, two kinds of "tools" you can use in your projects. The first kind is, to give it some random name, a _free tool_. This "free", though, is not at all related to freedom nor to money, open source, or any of the more general meanings of "free" when associated to code. These tools are "free" because they operate as _black boxes_ and don't _leak_ over your project. It's usually _easy_ to select such tools. Not so much because you clearly see their advantages and because you can easily evaluate them or whatever. That may or may not be the case. But it's still relatively easy to select them because they represent a fairly _low risk_ to your project. Think of a library such as... Reqwest or Ajax, or http.js or SuperAgent, etc. These perform a certain functionality and that's it. You _use_ them, but using them, produces a very localized effect on your code... Well, provided you're doing things correctly, of course, but let's assume that. In general, they don't require of you to structure your code in a certain way, to use some particular organization, or use some particular data structures or protocols. This is the sense in which I call them "free tools" and say that they don't _leak onto your code_. Note that you're still introducing a _risk_. You're now relying on them to perform correctly and they may not do so. That risk is always there, of course. But it's a limited risk. You may change the tool if needed and there will be a cost, surely, but the cost will be limited. Of course, the degree to which they can be considered "free", in this sense, may vary. Think now about template libraries. Handlebars, Mustache, Jade/Pug, EJS, t.js, Underscore's template... Again, these work _to some extent_ without leaking too much over to your code. But they _do_ need you to write your templates in one specific format. Some may use similar formats, some may offer options to tweak and adapt to the format of others, but in general they require you to use one particular format. Some may also be more restrictive than others as to what you can _do_ in the template itself, pushing you to locate _some_ operations in one place or in a different one. Even so, the "leak" only reaches so far. The rest of your application's structure will mostly ignore all these details. On the other end of the spectrum we find "opinionated tools". These, unlike the previous ones, do leak over your code. In fact, they do so _intentionally_. These tools _require_ you to adapt your code to them. They force you, through their use, to shape your code in some particular ways. Selection of these tools should be more carefully considered, because the risk is higher. Now, you're not just relying on the external tool, you're also injecting the external opinion into your own code. The risk is, of course, that if this opinion does not work for your project, the effect on your code, and the cost of changing it, is a lot more extensive. Not only this but there's also two other things to consider. A lot of _opinionated tools_ carry "important opinions". That is, the opinion they bring involves _important_ aspects of your code's structure. Well, it figures. One wouldn't create a tool to provide an opinion which doesn't matter that much, right? But the second thing is the catch: When an opinionated tool becomes popular, the opinion it carries almost always **needs** to be toned down. It becomes more general, more generic, less defined, and less strong. Why is this so? Because becoming popular means that they have to accommodate a larger number of use cases. The tools themselves tend to grow, change, include needs newly detected on the new users they gain. The tools become more complex, the opinions weaker and more subtle. So the problem then becomes one where, when evaluating such a tool, the ones that have more visibility and seem more attractive -and less risky, because more people are using them successfully- are the ones that both carry more complexity and weaker opinions. I don't want to put off popular tools here, mind you. What I'm saying is that such tools carry a baggage with them and their solution is -by force- more flexible and less defined. They usually solve well (of course, they wouldn't be popular otherwise) the most general aspects of a problem. But at the same time they do so, they simply cannot solve with precision the more delicate and specific ones. This is noticed by things like those "subtle bugs" you mention, or by the need to do things that... weeeell... sort of don't feel so nice "but I have to go around this limitation because the tool doesn't fit so perfectly into my particular problem". It fits, but only generically. To try to make it short -yeah, too late, sorry-: If you seek simplicity, you don't really want generic solutions. Unless your problem is generic too, of course. Nothing of all this is a concern if you're doing the nth _to-do list manager_. But then again, if your problem is specific enough -almost no problem is "unique", but many problems may have some differentiating aspects and concerns-, then introducing a dependency that both imposes an opinion and also needs to be generic, will inevitably introduce unwanted complexity on your project. What _could_ be a solution to this? Well, one thing that I tend to recommend these days is to _start from the problem_. Unfortunately, many people _start from the tools_. They haven't yet started development or even thought about what the problem entails, what hard parts will they encounter, etc, and yet, they're already making decisions about the tools they will be using. Instead, I recommend postponing such decisions. Mainly because _you don't know yet_ that that particular choice will be the most appropriate one. And you don't know because you don't know yet what your problem is. Once you know your problem and are _reasonably sure_ that you need some tool and that this particular tool is the one that fits best, then go ahead and bring it into your project. You will, inevitably, be adding some accidental complexity with it. But at least you'll be confident that the price you're paying is compensated by the benefit it brings. ---- On a different, but related, note... While Hickey's talk is quite good, do not stop at that. Do read more about essential vs accidental complexity. It is a subtle but interesting concern to consider.
This is pretty easy, why don't you just use the bufferframe to draw them into a rectangle. Aren't you just a little sassy sisboy?
We're not talking about Fortune 500 websites here. Yes jQuery (the full version at least) is 90k. But let's keep some perspective: &gt;In the first quarter of 2017, the average internet connection speed was 18.75 Mbps. Even if jQuery adds a full five seconds to the page's load time, for *many, many* small business or personal sites that's absolutely acceptable, and a trade-off worth making to be able to build what they want more easily.
The Teacher defined it i dont really know how he did it. I can draw in red with dlp.lineOutRed for example. I just don't know how to implement that variable colour after that dlp.lineOut
sorry, nobody was using it, so I turned off the socket server in the mean time. Im using AWS free tier, and I can only have one server running at a time, otherwise I have to pay for it by the hour. Im working on building a new project at the moment.
&gt;Writing posix command lines inside your scripts field will work regardless of the underlying operating system. This is because Berry will ship with a portable posix-like light shell that'll be used by default. Cool idea &amp;#x200B;
Did you just create your own definition of the word "free"?
this is apparently a programm for students programmed by a teacher, the color is already defined so the problem is to get the variable colour into the command...
lineOut() is not a canvas function
without knowing what `dlp.lineOut` is it would be hard to help.
 **What in Davy Jones' locker did ye just bark at me, ye scurvy bilgerat? I'll have ye know I be the meanest cutthroat on the seven seas, and I've led numerous raids on fishing villages, and raped over 300 wenches. I be trained in hit-and-run pillaging and be the deadliest with a pistol of all the captains on the high seas. Ye be nothing to me but another source o' swag. I'll have yer guts for garters and keel haul ye like never been done before, hear me true. You think ye can hide behind your newfangled computing device? Think twice on that, scallywag. As we parley I be contacting my secret network o' pirates across the sea and yer port is being tracked right now so ye better prepare for the typhoon, weevil. The kind o' monsoon that'll wipe ye off the map. You're sharkbait, fool. I can sail anywhere, in any waters, and can kill ye in o'er seven hundred ways, and that be just with me hook and fist. Not only do I be top o' the line with a cutlass, but I have an entire pirate fleet at my beck and call and I'll damned sure use it all to wipe yer arse off o' the world, ye dog. If only ye had had the foresight to know what devilish wrath your jibe was about to incur, ye might have belayed the comment. But ye couldn't, ye didn't, and now ye'll pay the ultimate toll, you buffoon. I'll shit fury all over ye and ye'll drown in the depths o' it. You're fish food now, lad.**
dlp.lineOut is a command from our university. it draws a line from (x, y, x1, y2)
Yeah, in addition to that the writer didn't even bother to check the gap between what he thought his program would do and what it actually did. I mean, sorting slices in multiple threads is nice, but sticking them together won't yield the expected result. Writing faster than thought is a terrible misuse of one of the best tools for preciseness.. 
Right, the was function is lineTo 😅
u guys dont get it right the teacher changed the function to dlp.lineOut(x1,y1,x2,y2) so they have to work with that....
The exercise says Attributes = x, y, width, height, colour definition of the colour 0 = black, 1 = red, 2 = green, 3 = blue command to draw the line in colour is: dlp.lineOutRed() / dlp.lineOutGreen() / dlp.lineOutBlue() i know its a little different to normal javascript programing but we are learning it that way.
ok.. then use a switch/case statement.. ``` switch(this.color){ case 0: dlp.lineOut( ... ); break; case 1: dlp.lineOutRed( ... ); break; case 2: ........ case 3: ... } ```
the object here is to think about what structures you need to keep track of this. You might want to start out with something like conways game of life though. Also don't skip on doing some low level graphics or other widgets in js, there isn't going to be a library for everything, and even then you might come up with a more appropriate solution.
Isn't it interesting that Ionic too dropped Angular for React like WebComponent compiler (Stencil).
Google, remind me again how disabling ad blockers will increase security?
Thanks, but it does not seem to work that easily: I am getting "`this.latestMouseEvent is undefined`" error: https://jsfiddle.net/4maqw3fh/2/ But maybe I put it wrong somehow?
In my company there are 5 developers and not one of them used bootstrap. Also we do not need ie compatibility so bootstrap doesn't give us anything.
From your own link, &gt; Remember that Concurrency and parallelism are NOT the same thing.
Thanks, this works; I used the first variant. This `(...args) =&gt; callback(...args, this)` I was trying to come up with but could not. I was a bit confused with the layers of calls this whole construct was making. My guess is that `callback.bind(this)` that was also advised would have worked, too, if it was in a wrapper function. 
Thanks for the insight. I totally agree and I think you are spot on about how tools leak complexity. IMO with JS it is extra complicated because the language gives us the constructs to create tools that are "simple" and safe but it also gives us the constructs to create spaghetti monstrosities that leak their complexity into everything they touch. For example react is very simple, a set of functions takes data and outputs html (if using pure components). That makes it easy to compose and reason about its parts. Meteor however is not simple. It provides a lot of power "for free" which allowed me to bootstrap my app quickly but now I see the truth in Hickey's made up graph of simple vs easy productivity. It was easy to get started using Meteor but as my app has grown its tightly coupled black box nature has caused me many hours of headache when I ran into places where it wasn't an exact fit for what I needed (or performance issues). By adopting a complex opinionated tool I got started fast but my productivity has declined as the project has grown, just as Hickey predicted. I think React is a great example of a powerful yet simple tool. Are there any other tools that you think are good examples of powerful yet simple in the JS ecosystem?
BTW, what if I would want to do my composited object by copying the structure of MutationObserver object, not by just referencing an instance of it in a `this.MutationObserver` property? I mean similar to object inherence/class extension, but with all of MutationObserver properties and methods copied not on the base level as my own properties and methods I define for my object but assigned to a child property `this.MutationObserver = `? Something like `this.MutationObserver = class MutationObserver' rather than `this.MutationObserver = new MutationObserver`? This is probably a purely theoretical question that might not have any sense at all, but maybe it is needed for some peculiar situations.
reddit a standard for articles? not sure if that’s a bring, but medium in comparison with other platforms or dedicated blogs... not sure but it’s definitely a meme the last 12 month of very lame medium articles...
Do you have a print stylesheets or a print media query? You can try to force page breaks that way. Also maybe look for any declared/fixed heights in addition to any positioning.
Thanks for the detailed example!
If I were you I would get familiar with canvas, classes https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes and ECS https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system You're actually probably going to want to pick one over the other, but you will ideally understand both before making a decision.
https://jsfiddle.net/9ydn5faq/ You can't `bind` an arrow function. So you need to write the callback as `function(mutations, observer) { ... }`.
Flow must die!
To address your edit which you're still for some reason comparing to SPA frameworks even though you initially admitted jQuery would be a poor choice for web apps: ``` let foo; document.getElementById('foo').onchange = ({ target }) =&gt; { foo = target.value; }); ``` What did I need jQuery there for?
Jest isn't maintained by Facebook anymore and Yarn's intent was to increase development from the outside community. React is central to their codebase and Facebook is too invested in flow as an organization. Changing typecheckers would also run counter to their development philosophy of not introducing breaking changes.
Eval() should be disabled by browsers by default.
lol it's fine just add a \`$\` on line 41
Fair enough, I wasn't aware of this. Changing typecheckers isn't really a breaking change, though. There's no runtime or API difference.
`bind` would be doing the same thing as my second example (copy-paste laziness put me on the path of using apply, though functionally they're effectively doing the exact same thing). But as I mentioned there, that does not work with arrow function callbacks. The same applies to callbacks that may have already used `bind` (you can't bind twice). 
This would break so much. Not saying it's a bad idea, but it'd be suicide for a browser to suddenly be incompatible with a large percentage of websites.
Without seeing your original code, I can't say for sure. But maybe take a look at the following links: * [css print media query prints only first page](https://stackoverflow.com/questions/25187715/css-print-media-query-prints-only-first-page) * [Printing Iframe in IE 11 only prints first page](https://stackoverflow.com/questions/33735334/printing-iframe-in-ie-11-only-prints-first-page) * [javascript css preview - window.print() not working in IE](https://code.i-harness.com/en/q/26ff31) The first link contains a question that may fit your particular situation (minus the ReactJS framework), but not entirely sure. If it does, here's a quick note about that solution: The question author updated the question with a solution that involved some DOM manipulation via jQuery. I normally wouldn't recommend direct DOM manipulation in a ReactJS app for obvious reasons. However, you might be able to accomplish the same thing safely (i.e. without bypassing React's virtual DOM) by operating on a [cloned](https://www.w3schools.com/jsref/met_node_clonenode.asp) version of the document.body node and printing from that. Hope you get it working! &amp;#x200B;
Go ahead, make my day. ;) https://github.com/michaelhartmayer/character-sheet I have one more rewrite in me before I finalize the API.
I'm not sure what you're trying to achieve with that. To get the mutation observer properties, you would want it to be _a mutation observer_. You can set `this.MutationObserver = MutationObserver` which would be that property set to the MutationObserver class, but you can't do anything with it until you make an instance.
That's very helpful, nice work!
Hello, I wrote this post about code review and how it’s important &amp; stuff. It’s not JS-specific but I am strictly FE these days and I code review JS code daily, so I think some of you might find this useful. Enjoy!
Thanks; I completely forgot about it even though read about it just recently; shame on me.
Yep as most spa apps use bundlers
yellow is that element. Use .innerHTML on it if you want it's contents
Much appreciated.
Thanks; I am not trying to achieve anything yet, just trying to understand if it is possible. But: `constructor(MutationObserver)` `{` `this.MutationObserver = MutationObserver` `}` -- does not really do what I was describing. When I tested that beforehand, it just made me calling the whole thing like this: `new mouseEventMutationObserver(new MutationObserver(myCallback))...` instead of `new mouseEventMutationObserver(myCallback)...` as in this example: https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da9a296/
No problem, glad it's what you're looking for
You don't. But as that article I linked demonstrated there are lots of other operations which jQuery does make much easier.
There's a lot of ways to eval something without eval().
It doesn't, it just makes them more money.
Probably have to loop through and use .indexOf(value). It returns the index if found or -1 if not found.
You can implement your own eval function actually if you really, really wanted to.
For(i=0;i&lt;array.length;i++){ If(array[i] == 'x') { Newarray.push(i); } } Newarray will be filled with the positions of x in array, newarray.length will give the amount of x's in the original array
I still like the jQuery API better than the DOM API. I don't think that's going to change. Although Zepto is a much lighter drop-in replacement for jQuery for 99% of my use cases these days. 
Thinking about it for a moment, I don't think it's such a good idea to _pass `this`_ -regardless of _how_ you pass it- to the callback. In fact, I think it might make more sense to establish a more explicit contract on the callback. What I mean is this. Your _combined tracker_, your `EventTrackingMutationObserver` class, has some inner workings and from the outside we shouldn't really care about those in any way. Passing the `EventTrackingMutationObserver` instance or accessing it in any way from the callback, to retrieve `latestMouseEvent` is a _bad coupling_ between them. Instead, I think it would be much better to have the callback receive `latestMouseEvent` -or maybe even only the relevant bits-. Going this way the main question is this: Given this "combined observer", what are the specific parts that we want to observe from the client code (the callback)? I do not know what your exact intention is with this, but just as an example I could imagine that, say, I only want the mutation and the last x and y coordinates of the mouse. If that was the case, then the first thing is establishing this as the contract to the callback. That is, regardless of what inner workings the "combined observer" has to take care of, we want it to honour this contract: new EventTrackingMutationObserver(function(mutation, x, y) { ... }); // or if you prefer... new EventTrackingMutationObserver(function(mutation, {x, y}) { ... }); Now, with this contract in place, it should be clear that the `EventTrackingMutationObserver` should _not_ set up the callback directly as the one listening to the `MutationObserver`. That is, in the constructor... this.MutationObserver = new MutationObserver(&lt;here&gt;); ...it should be the concern of `EventTrackingMutationObserver` to listen to that, and so you should build a controlled function there that listens to the MutationObserver does whatever it needs to do and only then passes whatever it needs to pass to the callback (i.e. the contract we set before).
I always wonder if modern browsers still support VRML
&gt;x-ray Thank you :). I showed my colleague today and he said you really need to share this with more people - (so here it is) and I'm glad you've found it helpful! 
New array is a horrible variable name. Maybe xPosArr instead?
Oh ok . Exactly what do I plug in for value , do I plug in the position or x? &amp;#x200B;
The best resource for questions like this is MDN. They have a comprehensive reference for all the built-in Javascript functions. Here is the page on Array: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array/indexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)
Yeah. Soooo it’d look like this: array.indexOf(Val); Where array is the array you are searching, and Val is whatever value you’d want to find. In your case, Val would be “x”. indexOf only matches the first occurrence however, so you’ll need some sort of loop. Here is a [stackoverflow](https://stackoverflow.com/questions/20798477/) question about it. 
I'd think a grat start would be the OWASP Top 10 [https://www.owasp.org/index.php/Category:OWASP\_Top\_Ten\_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project) this will at least get you familiar with the terms. I most interviews they're trying to see the depth of your knowledge and whether you know how to fill in the gaps (and as important admit what you don't know). As you're posting in Javascript maybe something like a Node security concerns list could be another good primer [https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d](https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d)
That is awesome, I can feel the pain of CSS going away. 
I'm still not entirely sure what you're after... When using composition, you have two instances - your instance, and the instance of the class that you're composing into it. That will pretty much always be contained within a property of your instance, such as `this.MutationObserver`. If you need the composited instance behavior exposed to your own class, you can do so through the instance property, kind of like (though maybe not the best example) how `Element.style` is a property of of an HTML element but has its own properties and methods that apply to the owner element instance rather than the style object specifically. Otherwise, what is commonly done is that the composited API is wrapped in an API that is defined directly on your object. For example: class Foo { sayFoo () {} } class Bar { constructor () { this.foo = new Foo() } sayFoo () { return this.foo.sayFoo() } } bar = new Bar() bar.sayFoo() // rather than bar.foo.sayFoo() This makes it seem like the members of the composed object are a part of your own object. This, however, does add a lot of boilerplate which can get tedious. The upside is that it provides a filter between your object and the composed implementation, and a place where you can easily make tweaks if needed or only expose the functionality you wish to. If you're talking about directly _copying_ functionality from MutationObserver into your own class, well I doubt that's possible. I'm fairly certain MutationObserver is exotic, having functionality you aren't able to replicate on your own in JavaScript, or something you can't carry over into an alternate instance. But, potentially, in some cases, you _could_ completely copy the methods and data of one instance into another instance and maintain that functionality. This would be prototype inheritance through concatenation rather than the standard delegation used by JavaScript. Using the example from before, it would look something like... class Foo { sayFoo () {} } class Bar { constructor () { Object.getOwnPropertyNames(Foo.prototype) .filter(name =&gt; name !== 'constructor') .forEach(name =&gt; this[name] = Foo.prototype[name]) // copy } } bar = new Bar() bar.sayFoo() // copied version But this only works in simple cases. And in the above implementation, it doesn't run the constructor to do any property initialization or setup that would normally be handled with super() with normal inheritance. But you could set up some utility that does that.
To be fair, at least some of them are selling clickstream data.
Also no need for the string constructor.
This looks like a great use case for promise chains. Using something like fetch that already returns a promise is a great starting point. After that, you can either write the functions inline inside of a .then() or extract it out and call it wherever you need to in a similar fashion. Also, you can always map over an array and call a function on every element. It's not going to be done in parallel though, js is single threaded.
Maybe put them into an array and use the reduceRight() method? I’ve used this little ‘trick’ before. Worked well for what I needed maybe it will work for you [MDN Array.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) 
Off the top of my head, you could try: `var origArray = ["x","o","x","o"];` `var posArray = origArray.map((val,idx,arr)=&gt;{val=="x"?idx:-1}).filter((val)=&gt;{val!=-1});`
If you just want the number of occurrences, use reduce: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce If you want a key-value list you can use forEach: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach If you are new to the functional ways of manipulating arrays: Basically these are just for-loops that run a function for each entry, but specifically for arrays. You get arguements served like the index, the value and in reduce also get an "accumulater" value that you can use as a counter that you increment whenever the value matches what you are looking for. I can give you code examples tomorrow when I'm at a proper computer if you want.
I'm curious about this. Outside of injecting a script tag into the DOM, what other options are there?
If I understand you are looking for 2 things, the total number of times it appears and how many times it comes up. To do this you can take advantage of the native array methods map and filter. /** * returns an array with the indexes where a value appears * parameters: * array - the array you want to get indexes from * value - the value you want things to be equal to */ function indexes_of(array, value) { // the first map replaces the elements with their index // unless they aren't equal, then they are null instead // then the filter removes all null elements return array.map( (element, index) =&gt; { return (element === value)? index : null; }).filter( element =&gt; (element !== null)); } 
I tried to use it on the x-ray GitHub page itself and the whole main content are just disappears ¯\\\_(ツ)_/¯
This insane I love it
Reminds me of the &lt;a href="[https://chrome.google.com/webstore/detail/pesticide-for-chrome/bblbgcheenepgnnajgfpiicnbbdmmooh](https://chrome.google.com/webstore/detail/pesticide-for-chrome/bblbgcheenepgnnajgfpiicnbbdmmooh)"&gt;pesticide extension&lt;/p&gt; I use on Chrome
Apparently people dont like they you shared the laugh
new Function(x)(); navigating to a javascript: url Writing html (like with .innerHTML or document.write) with an event attribute, like &lt;svg onload="..."&gt;, or using the srcdoc attribute on an iframe. Googling a bit I found [this gist](https://gist.github.com/soaj1664/9588791) with about 40 more html methods. You might be able to use a service worker to feed client-decrypted javascript to a static script tag, but that's getting more complicated and I've never used those.
Sneak a .forEach() in the middle there (on your returned list of names) Wait for each promise to finish and only return when the last one is resolved/rejected
Cool, you should post this to /r/bookmarklets
Great work, this will save me a lot of time 
There is the async library. [https://github.com/caolan/async](https://github.com/caolan/async) for callbacks. If you're willing to learn a bit more you should learn how to use promise chains and a promise library like bluebird. [http://bluebirdjs.com/docs/getting-started.html](http://bluebirdjs.com/docs/getting-started.html) Eventually after mastering promise chains, you can look into async/await syntax which is sugar around promises. You should learn how async/await relates to promises before using the syntax. [http://javascript.info/async](http://javascript.info/async) This looks like a solid resource for everything.
Hyper.js or that one build-in
There is no one function to do this. There are function you could combine to get the effect you like. Check out: - [indexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) - [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) - [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)) My implementation would actually not use `indexOf`: const arr = [‘x’, ‘o’, ‘x’, ‘o’]; const xIndexes = arr .map((item, i) =&gt; item === ‘x’ ? i : null) .filter(index =&gt; index !== null); const xCount = xIndexes.length;
const getData = async () =&gt; { // fetch an array of names const nameList = await fetch('/name-list'); &amp;#x200B; // map the array of names so it becomes an array of promises const nameDataRequests = nameList.map(async name =&gt; { const data = await fetch(\`/name-list/${name}\`); saveData(data); return data; }); &amp;#x200B; // wait for all the promises to finish const nameData = await Promise.all(nameDataRequests); &amp;#x200B; // do something else };
You can look into d3.js which has some integrated geographic capabilities. It is notorious for being difficult to wor with, so maybe not the best choice for someone new to JS. I’m in management now, so I am not up on the latest flavors of JS. Another more viable alternative might be to look for a GIS integration solution such as Open Street Maps or Google Maps. I don’t know your specific use case, but those suggestions can get you a start exploring. Good luck. I got my start in web development doing Google Map integrations to make mapping tools, so I’m rooting for you.
Best free: PuTTY Best paid for: SecureCRT
ssh with https://www.msys2.org/ 
Interesting. Glad someone is taking this need and running with it.
O(n) solution would be to loop the array and have a separate variable counter. Solution might look very javascript-y if you would call it that, but its efficient let count = 0; for (let i = 0; i &lt; array.length; i++) { if (array\[i\] === 'x') count++ } console.log(count)
O(n) solution would be to loop the array and have a separate variable counter. Solution might look very javascript-y if you would call it that, but its efficient let count = 0; for (let i = 0; i &lt; array.length; i++) { if (array[i] === 'x') count++ } console.log(count) &amp;#x200B;
O(n) solution would be to simply loop and record results. It won't look javascript-y (if you could call it that), but its as efficient as it could be in terms of time complexity &amp;#x200B; const indexes = []; for (let i = 0; i &lt; array.length; i++) { if (array[i] === 'x') indexes.push(i) } console.log(`Indexes: ${indexes}`); console.log(`Total matches: ${indexes.length}`); &amp;#x200B;
A TypeScript rewrite isn’t a breaking change for the end user. 
Since when were we talking about end users?
I use [Cmder|http://cmder.net/] as a Unix-y console on Windows and the SSH support is great. PuTTY is fine but having to have separate *.ppk keys was a pain.
&gt; Changing typecheckers would also run counter to their development philosophy of not introducing breaking changes. "Breaking changes" implies it affects the end user. Which changing typecheckers will not.
No, breaking changes doesn't mean that. In the context of this conversation a breaking change is anything that requires legacy code to be rewritten. And that should be obvious... because we aren't talking about their consumer product. We are talking about their code.
Nice. Also, the link on your github is broken :( &amp;#x200B; [https://benscabbia.co.uk/blog/programming/x-ray/](https://benscabbia.co.uk/blog/programming/x-ray/)
You are incorrect, sir.
Haven't touched a line of cpp for almost six years. Not a good memory. Also plan to look into rust once its asyc is sorted out this year
Excepting the variable names, the first idea I had too. 
Good job on the clickbait title.
Further proof that people only vote based on headlines.
I struggled with it a bit, admittedly. Not easy to stand out among the noise.
Service worker is relatively secure. Unless the worker itself deliberately evals code using one of those techniques above, the client can only talk to it using `postMessage`, and service worker scripts can only be loaded from a secure origin (ie. over HTTPS). 
do it supports ANSI escape codes
This wouldn't work because it only returns the index of the first matching value not how many of the same values are in the array. 