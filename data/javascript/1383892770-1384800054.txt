It's not a js specific thing, generators are a common in other languages as well. it is handy if you want to iterate over something that you either a.) dont know the complete size of (a stream) or b.) dealing with a set of data that is too large to fit in memory
&gt;If you find yourself doing a lot of reflecting on types in your code, it's probably poorly designed code to begin with Or you may be trying to build a robust API, where type enforcement at the boundaries are a pretty big requirement. (i'm using "type" loosely here, because hey, we're in /r/javascript)
My question is what school exactly are you going to? If you can actually practically switch to a reputable school with better classes and a name that carries weight, then obviously that would be great. But if the situation is just switch from a below average or average school to another below average or average school then it might not be worthwhile switching. I would definitely tell the teacher you are not feeling challenged, just to give him or her the chance to try to help you more. There are also lots of courses online from good schools like MIT OpenCourseware or Udacity. Maybe you could ask your teacher if you could spend the majority of the rest of your time working on some kind of project that would demonstrate your JavaScript knowledge.
Amen.
You have a whitespace problem. The `set` object in the loop has the key `"Black Leclère"`, whereas `names[i]` in the loop is `"Black Leclère "` (note the space at the end). There are several things in this code that make it difficult to debug and understand quickly. I know you weren't asking for a critique, but keeping these in mind will help you in the future. * Long lines. It's more obvious to see the structure of your variables if you can see the definition in a short period. * Lack of consistency with curly braces (`{` and `}`): some of your if statements and loops have them, others don't. Just because you can omit them, doesn't mean that you should. Uncommenting the `console.log()` line in the comment block means the following line is executed outside of the loop. * Consistency in naming: `addCats()` creates new keys in the `set` object, `deadCats()` modifies existing keys in the `set` object. * Order of code: If you follow the execution of the code, you start from the bottom, and move upwards -- this is counterintuitive.
Not really a good tutorial for newbies. More of an advanced tutorial in creating a chart.js component/directive in angular using grunt &amp; bower.
There sure are a lot of these popping up at the same time.. Other very similar sites I've come across in the last few weeks: [codewars.com](http://www.codewars.com/r/O69WRQ) [coderbyte.com](http://www.coderbyte.com) 
This is why I never persued a CS degree. I took a number of programming courses at my university and every single one of them was teaching either outdated or very basic material that you could learn in a week of study on your own. 
I made something similar: https://github.com/atennapel/Typy.js, but it allows you to define more complex types. For example: {struct: {name: String, age: Number}} {type: Number, gt: 10, lt: 20}
Off you go: https://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula
closure has an elegant way of dealing with this, when compiling (or just straight up acesing the app uncompiled) you have the asserts in at runtime, which gets removed during final compilation 
vanilla-js.com is sort of a joke site but it does have some proper examples of jQuery vs plain JS.
I have to disagree. Although I'm only through my first term we've covered fundamental basics that have already brought us to working with lists, dictionaries and trees, and even as the first course in its stream, so it inherently had to be a little slow, it covered a large amount of content. The major thing is the distinguish between a "programming" type degree and a computer science degree. Because if they inevitably teach you how to program your limited to your taught in a very strict way, where as if your taught conceptually algorithms and data structures your learn how to think abstractly, in a wide spectrum of problems and also apply any knowledge you have built up through curriculum or previously solved opportunities. Once you understand the method of going about thinking through everything you may get thrown in university, your equipped to think deeply on anything that may come at you afterwords. Sure you might be able to use that one data structure or algorithm you learned in that one class, but you should also be able to solve it individually without just this pre-thought out method. And its from this abstraction that you aren't restricted to languages. With the ability to understand the concept you should be able to apply it anywhere, work between functional and imperative paradigms just modifying your thinking to implement the same logic in any language or case. Anyways those are my thoughts on it.
&gt;you don't get a programming degree for its inherent educational value, you get it for the piece of paper that says you can complete projects over a long period of time. Having been in the position of hiring college grads for programming positions many times in the past, I can assure you that I only care about that piece of paper to know 1) that you have some idea of what's important in CS and 2) that you can get up and working by 9am. I would never hire someone based on their in-class work alone, I'm really looking for lots of good outside projects, open source contributions, and a really solid Github profile. Knowing things above and beyond your curriculum tells me that you can teach yourself, which means less handholding for my team and that's more cost effective overall.
That's a fucking shame.
One good reason for not teaching ES5 methods is that they aren't universally supported.
Why is that a good reason? Should university prepare you for what can be done today, or tomorrow? With appropriate caveats I think they're highly appropriate, especially as they increasingly incorporate functional elements and encourage a deeper understanding of javascript's inner workings. edit: I mean, if I was teaching JS I would do it in the context on NodeJS because it strips the language down to just JS - you don't have to even know HTML to start coding in node, whereas taking students who've never written a line of code in their lives and sticking them in front of IE7 and expecting them to enjoy coding? Why fight an uphill struggle.
Mozilla Developer Network is a great resource for this. If you're more into books, you could look into Jeremy Keith's *Dom Scripting*
You couldn't have just PMed about this instead of pointing it out to everyone that reads this?
Consider it a public shaming. Never do this. Being a software pro requires a great attention to detail due to the potentially dire consequences. What if this were sample code from a system he built for a business? No regrets, just hope he learns his lesson. edit: thanks for the downvotes - next time ill just silently pwn.
Yeah, whatever, dick. Publicly outing sensitive info when you haven't even attempted to contact its owner[*edit: in this case, the __only__ person affected by this*] is a major asshole move. How adorable that you're calling yourself a "realhacker", by the way.
I've started using PhoneGap last week. It was pretty annoying get started due to the split of PhoneGap and Cordova (documentation, examples, etc spread/duplicated over multiple sites). I see you use PhoneGap *and* Cordova, whereas I now just use Cordova. Any reason why you use both?
Hence why no one should learn jQuery first without knowing plain javascript. Along with the sources from @gibletor and @jsNut, you can also read the DOM specs themselves where all the methods are listed though it's not an easy read if you're not used to it.
&gt; Ember solves the problems of backbone or angular depending on who you talk to Ember "solves" these problems for Ruby on Rails developers by trying to force JavaScript to be Ruby on Rails... in a 236KB file. **Ember is larger than Angular + Backbone + Marionette + Knockout COMBINED. You could probably throw JQuery in there too.** ... and to be clear, Ember does the same, if not less, than what Angular does on it's own.
Yeah, but jQuery already broke that dam, so who cares.
I was studying JavaScript and when it came to DOM manipulating subject, I was taught jQuery instead of JavaScript.
If you like PhoneGap, you'll probably like [Steroids.js](http://www.appgyver.com/steroids) even more.
awful editor...
 Your mind is a maze of amazing! 
Thanks! The best i heard in awhile!
jQuery IS javascript, please dont treat them as something different. It just a library, a collection of functions, not something completely seperate. 
Exactly.
JQuery IS Javascript. Learn the basics first if you want to learn.
You mean besides just LEARNING javascript?
Great book! Too bad I can't draw. 
Obviously never do this. I created a quick sample database on Modulus.io for this demo. Nobody is at risk here.
MDN does have a lot of information, but I don't like the way it is presented. I know a lot of people have issues with W3Schools, but you have to admit they present it in a nice, easy-to-learn way.
Isolate an element via its ID, then start looking at its children, siblings, and parents. Create new elements and append/prepend them to your isolated element. I just had to do a crash-course of learning JavaScript DOM, and it is tedious, to say the least.
Yes this is interesting, but there's a couple things I don't understand though: 1. Why is it based off commits? Shouldn't it just look at a project's source as a whole? Basing it off of commits would seem to produce inaccurate results. 2. Why is the number of commits sourced different within the same language?
This is something I've found helpful too. It's a function that looks for elements with a certain class name and returns them in an array. function getElementsByClass(searchClass,node,tag) { var classElements = new Array(); if ( node == null ) { node = document; } if ( tag == null ) { tag = '*'; } var els = node.getElementsByTagName(tag); var elsLen = els.length; var pattern = new RegExp("(^|\\s)"+searchClass+"(\\s|$)"); for (i = 0, j = 0; i &lt; elsLen; i++) { if ( pattern.test(els[i].className) ) { classElements[j] = els[i]; j++; } } return classElements; } And by the way, guys, it's not helpful to crap on someone who's trying to learn. Sure, it's better to learn js before using a framework. but not everyone follows that path. I applaud the OP for realizing that it's important to know how to do things without a framework.
Github is screwing tab-indented code by rendering it at 8 spaces. It makes the code break the page-width really fast. 8 spaces is ridiculous. Who does that? Every code editor default them to 4 spaces. I feel Github's staff is playing a game here.
Because IE. If they are still advocating new Array() you really think they'd even know about .map?
"If you want to learn" is not "if you have to learn". If your put on a project which is using jQuery don't start using vanilla JavaScript....
Heretics using tabs get what they deserve.
Thanks that was very helpful. I appreciate you taking the time to critique my code.
interesting, I never thought to use the "first comma", and it seems like most people agree since only ~8% use it. But I can see where it could be useful avoiding that last trailing comma by using first commas. But I'm usually good about that so I'm not going to switch, also doesn't look as nice. nicely made site!
All you need is document.getElementById, addEventListener and innerHTML and 5 mins to use them! jQuery is a bit much! http://jsfiddle.net/njhEF/
The core javascript spec says nothing about DOM manipulation. It's strictly a browser environment that allows for DOM manipulation at all. Just LEARNING javascript isn't going to give ANY hints at how to work with a DOM, especially since the DOM is implemented differently by browser vendors. That's the main reason jQuery was created in the first place, to alleviate the need for the day to day developer to handle every edge case that poorly implemented or just differently implemented DOMs spring on you.
Every editor can be configured to render 4 spaces when the tab key is pushed. It's still one key press. 
Yes. With huge file sizes and untestable code written by people that choose to avoid dependency injection when given the option to skip it. Dog killers, the lot of them.
jQuery is JavaScript, I am assuming that you mean manipulating the DOM with vanilla client side JavaScript without the aid of a library. If you do this you may end up eventually writing something similar to what jQuery is. However it might end up being lighter, and in your coding style. To get started (assuming you all ready have a grasp on core JS) there is document.getElementById() as well as other methods such as document.getElementsByTagName(). document.getElementById('theEl') can be used to get a reference to a single element with an id attribute of 'theEl' or whatever label you assigned to it. document.getElementsByTagName('\*') will give you an array containing all of the elements in the page. Replacing the '\*' with 'p' will return an array of references to all the paragraph elements in the page. Sense it is an array document.getElementsByTagName('div').length will return a one relative number representing the number of div elements in the document. So then document.getElementsByTagName() is useful if you want to write some function where you want to loop threw all elements of a particular name, or all of them if the element name is '\*'. so you may get an element reference like so: var el = document.getElementById('theEl'); // gets an element with an id of 'theEl' or var el = document.getElementsByTagName('div')[4]; // gets the fifth div element in the page, assuming that there is one Once you have a DOM reference the style API is very fun to play with var rndByte=function(){ return Math.round(Math.random()*255); }; el.style.color = 'rgb('+rndByte()+','+rndByte()+','+rndByte()+')'; Of course this is all just scratching the surface, kids stuff. I'm not sure what the best approach is to gain everything that you should know. document.createElement(), el.appendChild(), innerHTML, the list goes on for what seems like forever. What I did is picked up a copy of "javascript the definitive guide" by David Flanagan. I started reading that book like that of a sacred religious text. I took advantage of free resources such as Mozilla Developer Network, and w3schools. I also attempt to reverse engineer code authored by professionals that work for big name company's, and organizations such as google, and Mozilla. Not to mention countless hours of learning by doing. Oh and this may help some. var showProps = function(obj){ var str='',prop,el; for(prop in obj){ str+=prop+'&lt;br&gt;'; } el = document.createElement('div'); document.body.appendChild(el); el.innerHTML=str; }; var letsLookAt = document.createElement('p'); showProps(letsLookAt); If all goes well this should give a list of properties and methods associated with a paragraph element, do you see anything interesting? If so do a google search on it to find out what it is. Change the 'p' to something like 'canvas' and you may see something called getContext() . I think most people here who know a thing or two about that one would agree that's a very cool one. If you don't know about the HTML 5 drawing context yet you should diffidently put it on your priority list. Check out other elements, check out window, document, navigator, ect, and familiarize your self with what there is to work with on the client side.
But four characters. How does it know what are indents and what are generic spaces?
You could always use https://developer.mozilla.org/en-US/docs/Web/API/Document.querySelectorAll instead of costly iterating through that list.
How does it matter if the end result is 4 spaces?
1. I'm not sure about this one but, maybe it's something to do with the GitHub API they're using. 2. If some construct doesn't exist in a particular commit, this commit is not counted. So you have the highest number of commits for things like tabs vs. spaces, because that's always there, but when you compare conditionals, you skip commits that don't have any, so you end up with fewer commits. Edit: also if you look at commits instead of the source code, you look at more code, because you consider previous versions too, so you have more data. Why do you think it will be inaccurate?
I've gone around this with a simple build tool. It formats code before it gets checked in. Everyone must run it before I accept merge requests. Code however you're comfortable. When you check in you're using my convention. End of debate. 
I don't want 4 spaces, I want one semantic indent character. Let every developer choose how he renders tabs. The guy next to me at work renders as 3, the guy after that as 2. I use 4. All in the same codebase.
Ah yes. I've used this trick before, too. It just ends up being needless complicated, in my opinion. Especially since your local copy is now different than the checked in copy, resulting in confusion during diffs and merges, etc etc. My motto is always "keep it simple, stupid". Tabs are simple. That's just my opinion.
Oh yes. The build tool changes source code first before checking in. Uniformity of code is quite worth hurting a few feelings. 
Indeed. Tabs are semantic: they have a specific meaning. Spaces are just spaces. If someone finds tabs rendered at 4 spaces too roomy then configure the editor to render as 2, problem solved without any merge conflicts. It is ridiculous that otherwise rational developers so religiously go for spaces.
If you use Firefox and have [Stylish installed](https://addons.mozilla.org/en-US/firefox/addon/stylish/), use this style to force 4-character tabs on GitHub and BitBucket: @namespace url(http://www.w3.org/1999/xhtml); @-moz-document domain("github.com") { #files .highlight { -moz-tab-size:4; } } @-moz-document domain("bitbucket.org") { .diff, .code { -moz-tab-size:4; } } It's worked well for me for a few years. There might be a solution for Chrome, too, but I'm not sure.
Because the percentage increase of jobs in that sector. If you learn JS really well with Node, now you are a full-stack developer with only having to learn one language. 
I understand the idea of "no prerequisites" but that's no excuse to ruin a course. Not knowing the alt key in a programming class is similar to not knowing how to spell correctly in a writing class. *Technically* there are no prerequisites, but at the same time you are expected to have a working knowledge of the English language.
 I wish I could choose your handwriting as a font 
ITT: Actual helpful comments mixed with typical programmer condescending comments. 
We banned useless cleverness like that. Every variable gets it's own `var`. Makes it easier to edit, less mistakes, less cruft, less time wasted. Also use a lint tool if you are serious about code.
You MUST know javascript to use jQuery because jQuery IS javascript. There is no way around this.
&gt; Why is it based off commits? It was created for the [Github's Data Challenge II](https://github.com/blog/1450-the-github-data-challenge-ii) which gave you access to data related to individual commits and not the original files.
Since each commit is seen as a "vote", I could vote countless times by simply re-committing the _same_ code over &amp; over; the fact that I may have OCD and have to commit after every workspace save says nothing about the relative popularity of the coding style that I use. It also says nothing about stuff like per-project standards; let's say the maintainer of some popular project doesn't believe in semicolons within JS (\**cough Bootstrap cough*\*); just because I may commit code to that project, doesn't mean that I agree with the convention. It could be a very unpopular opinion that is mostly limited to a single project, but by counting commits, that opinion will be disproportionately represented if that project has much activity at all. That's just a few of the problems, and there are even more; someone more into stats could probably explain better than I. 
As always, the answer is IE: http://caniuse.com/getelementsbyclassname I haven't used this function in a while, but I seem to remember hooking it up to a sniffer to only activate it on IE&lt;=8.
It looks somewhat nice but I find it quite confusing actually. And the three stripe color legend didn't help since there are no stripes in the actual chart.
The de facto standard for tabs was originally 8 spaces. Emacs, Vim, Nano, Pico, ed, and even Notepad all use 8 spaces by default. Four spaces is a relatively recent phenomenon, which I believe is due to either Eclipse's or Visual Studio's default setting.
&gt; Let every developer choose how he renders tabs. And the guys at GitHub chose to render them with 8 spaces. Deal with it or use spaces.
You said commands being typed out to the page, so it's not [expect](http://en.wikipedia.org/wiki/Expect), right?
He should have contacted Conrad Barski. ;-)
I think you have to complete the code on front for a login. that's how I found this thread! Trying ti complete it. 
Windows 8.1 w/ i7-3537U (2.00GHz) running around 2.60GHz browser | version | score -----------|-----------|-------- Chrome | 30 | 15047 IE | 11 | 10143 What I find interesting is while IE generally does worse, the two things described as related to "Virtual Machine" run better in IE. Still, IE does have a gap to bridge, which I have no doubt the IE team is well aware off. [Scores Break Down](http://imgur.com/a/Innzc)
Hahaha, that's how I reacted when a coworker insisted that "Egyptian" brackets were wrong. "It's so much easier to make a mistake and miss a bracket!" he said. You know what prevents you from making a mistake, and looks, to my eye, more streamlined? Testing your code. On that subject, I did think it was odd they didn't test for Egyptian brackets in this study.
for the people hating on the 'comma first' convention, its recommended by npm. [npm-coding-style](https://npmjs.org/doc/coding-style.html) 
I wish we could move forward to a future where code is treated as *data*, and presentational rules would be applied in the viewer according to user preference, whether in an IDE or web tool. It seems to me rather arbitrary that users should be able to view the indentation to their liking, but not other stylistic preferences that ultimately have no effect on the final product. Until users can see any code according to their exact preferences, I don't see why we should put tab stops on some pedestal of individuality. What if a user wants to see the code with leading commas or whitespace surrounded colons?
not all of us are human metronomes, michael
This is a good process. People are freaks and someone always has their personal taste that's just screwy. I worked with a guy who coded in variable width fonts once. The real thing is that it's cool to use your freaky toolchain until it negatively impacts the rest of the team. Mr. variable width fonts started rejecting code in code review when people lined up their assignments. Dick move considering he only did it because it didn't look good on his setup _and_ it was part of the style guide. But, your solution is really good. Having a linter enforce style is much more effective than trying to get humans to do it. 
Why is a tab character different than /\^\s/ ? (note: that's an english question mark right there) I like spaces but I think it would be trivial to get vim to render /\^\s/ as 2, 3, or 4 spaces.
As someone just learning to program by learning JS, this is really fascinating and informative. I had no idea some of these conventions even existed.
&gt; arbitrary Uhh, tabs are arbitrary. Spaces are not.
What happens when I use two tabs and two spaces to align two lines of code? Everyone will see a different alignment.
Silly C# devs wasting a whole line with only one character.
grunt js beautifier. Best three words ever.
This is one of those bicycle shed moments that I do not intend to get into with colleagues. If you're going to talk to me about underscore vs lodash, let's have that discussion. If you're going to bring in style guide changes on an established code base, we're not having that discussion.
javascript !== the DOM
You don't need tests for this. Just use an editor with basic syntax checking or with JSLint/JSHint support. You'll get a squiggly line right away. It's impossible to miss.
Just use jQuery for anything to do with the DOM. I've been a web developer for a decade, most of that concentrated in the front end, and I *still* use jQuery/Zepto/jQLite/etc to touch the DOM on any non-trivial project.
There's a great utility to it, but I just can't get over the visual appearance. Coffeescript is nice in that you usually don't have to worry about trailing commas.
"Clever" code is often obfuscated, like in code golf challenges. But comma first? That's not "clever", it's just practical. Unusual appearance, but easy to understand once you know about it.
Every language has conventions and best practices. *Follow them*. It will make your life so much easier if you do.
"Tabs vs spaces" should also differentiate between 2/4/whatever spaces. People who use spaces don't necessarily use 4 of them. For example, Google's conventions mandate 2.
Comma first, moving the problem from the end to the beginning and making it more ugly and less conventional doesn't seem like much of a win.
I don't give a Fuck who suggests it. It's ugly as sin and I will not adopt it. 
thats a solid attitude for a developer.
What's the problem with having a firm opinion on formatting? What benefits are there to comma first? Your link only says you should do it, but gives no reason why. 
So it seems Scala has more consistent results than Python... interesting
No, I'm arguing for no whitespace in code (except where needed for VCS functionality). I'm arguing for tools that insert the whitespace into conservatively minified code as per your preference. This could be a tab/space indenting preference, an OCD assignment/comment alignment preference (try switching your tab widths after aligning inline comments... not so pretty), a before/after comma preference... whatever your preferences happen to be. Code should ideally be regarded as pure data, rather than documents. If tools can infer whitespace to your liking based on the code itself (e.g., curly braces for indentation), there is no need for the space/tab debate. In other words, the inverse of something like the grunt beautifier. Code gets temporarily beautified by the IDE, and conservatively "minified" (preserve/enforce newlines except empty lines, preserve comments, don't rename anything) before the VCS. It doesn't make sense to pick one stylistic aspect of code such as indenting and say "yes, that's the one that people must be able to customize". I suppose you're right in the sense that if this pipe-dream were ever a reality, we wouldn't need spaces for indentation anymore. But my argument goes beyond that.
yeah my programming professor went to a pretty good school and is a good teacher actually but i feel like since it's not a very competitive school (my comp sci knowledge &gt; my other knowledge as far as school) that he has to teach at a lower pace. my dbms teacher is adjunct and seems to know what he is talking about but i don't know where he went to school..
You said higher education right? I respect that you teach people, but I'm going to have to disagree with you entirely. At the end of the day, college is for learning. You have two options when you join a class, to learn what is presented or to not. Successful students will learn things they didn't before, unsuccessful students will not. You say college is what you make of it, and that you are paying an institution to teach you new skills. Why are you placing the burden of learning on the successful students? Why is it OK to tell successful students to take their education in their own hands but not OK to tell the unsuccessful students to learn computer basics on their own? Should programming courses require basic computer skills? Yes. Should students who lack those skills have resources available to learn on? Absolutely. But to punish students who learn is the greatest disservice you can do as a teacher for your students.
All I want for Christmas is you! 
&gt; What's the problem with having a firm opinion on formatting? Where you put your comma (in js) is not so important that you have to take such a firm stance. When working for a new company, its a good idea to adopt their conventions at first to make development go smoothly. No teammate is going to respond well to 'I will not adopt it'. They might think, 'If he/she wont budge on this, what else wont they budge on?'. &gt; What benefits are there to comma first? What are the benefits of last comma? See - its not a big deal. &gt; Your link only says you should do it, but gives no reason why. Its a convention that npm _recommends_ when publishing to their registry. Thats the only reason. In short, conventions are relative to a community. Be it your office, a library (jquery), a package registry (npm), or an open source project with formatting guidelines.
it is late and i am cynical. the ideas, not wrong, but blunted with the golden tint of idealism, little knowledge of the language an over eagerness to share, has perpetrated in conveying ~avg data and [in my eyes the worse crime] becoming searchable as an answer. stop all ye readers, this is not new, good nor scalable. 
Is cute you need to gzip it. The others are still smaller gzipped. 
It is a solved problem: use Smart Tabs: tabs to indent, spaces to line up. Webstorm even comes with this as option, JSHint has a rule for it too. Works perfect, because the tabs left of the code from a baseline.
Yes, the whole point is that tabs can be arbitrary. Tabs to indent, space to line up: Smart Tabs. Google it.
If I came into a new team whose convention was comma first, I would adopt it, of course. That's different. I wouldn't adopt it for any of my own projects, though. The benefit of comma last is readability in mine and most people's opinions. 
The semantic value is that the editor knows that it means. It knows 1 tab is one indent level. With spaces it has to *assume* some spaces mean indents. What if your editor is on 4 space on one indent (using the TAB key), but the code base is 2? Or the reverse? If both used tabs it wouldn't matter, you hit TAB key and it adds one tab. For you it looks like 2, for somebody else it is 4, for the guy on 32 inch screen it is 6. Simple, bug free. No assumptions.
It is all emotion and religion and blabbering how spaces can work, ignorance of Smart Tabs pattern and some irrelevant nonsense. For people who are so exact and supposedly rational as programmers it is mind boggling. If any serious developer enumerates pro's and cons he must prefer tabs. The only somewhat valid answer against them is use in existing code. Any new project should be tabs. But 80% of Github does not, it is absurd. 
SHOTS FIRED. (tabs 4 lyfe)
Any programmer worth his salt would learn how the to use the DOM.
The DOM isn't the same as the document object. You can modify and know the DOM using jquery without knowing all the methods on the document object
A more effective method is to use a linter that visually notifies you of the mistake. Then you have beauty and correctness.
Personally, I will be happier and more productive if I live in a beautiful world than an ugly one.
My favorite thing is when you write a block of code one space off of what it should be and have to correct it. I wish I could do that all day.
I was with the crowd in all but two cases. One being tabs vs. spaces: I must defend this. Two spaces is way too hard to read. 4 spaces? Fine, but just use a tab. If you use a tab instead of 2 or 4 spaces and you don't like the width, change the tab width in your editor. Jesus Christ people. The other one is spaces after conditional keywords. I don't really care, but I don't put spaces between. I prefer to keep it looking like my functions. Why waste time with an extra key? It looks the same in terms of readability. That one doesn't really bother me.
Usually, the "e" parameter is used in such ways : some_element.addEventListener('click', function(e) { console.log(e.target); }, false); Here, when the user clicks the element, the event **is** passed as parameter to the function by the browser.
Incorrect. You can safely tab to the previous indentation, then space beyond that. Don't tab beyond the previous indentation though or else the IDE could render the spacing differently. The problem is people get this wrong so it's built into linters to complain about mixed tabs/spaces.
What's even funnier is that I coded that gameboy color emulator. Also, Google didn't actually update the revision used... There's an optimization a year and a half old in the generateAudio function that Octane v2 left out. Here is the repository of the gameboy emulator they forked from: https://github.com/grantgalitz/GameBoy-Online By the way, there's a gameboy advance emulator as well being worked on: https://github.com/grantgalitz/IodineGBA
Love the book, his code mirror project is awesome too!
The user asked about manipulating the DOM with JavaScript. So in my opinion they need to learn javascript. I know javascript !== the DOM.
Just to add to the above -- it doesn't matter what you name the argument in that anonymous function. The browser will call your handler, passing in an event object as a parameter. You can name it whatever you want, though by convention this is always "e", "evt" or "event". // this would work equally well, but by convention e, evt, or event is used some_element.addEventListener('click', function(wtf) { console.log(wtf.target); }, false); // this would work too! // I will just grab the first parameter the browser passes in // though again by convention and to lessen confusion, e, evt, or event is used some_element.addEventListener('click', function() { console.log(arguments[0].target); }, false);
And another reason is so that the variables line up nicely when you follow the other nodejs recommendation of indenting at 2 spaces: var foo = 'bar', something = 'else', thisnum = 2 tabs = 'rule', fact = 'nodejs forever'; var foo = 'bar' , something = 'else' , thisnum = 2 , tabs = 'rule' , fact = 'nodejs forever';
How does it move the problem to the beginning? 
So don't do that.
&gt; How does it matter if the end result is 4 spaces? Because the *intended* results might not have been 4 spaces. Wouldn't you rather use a system where the intended results match the end results?
Stylish is available for Chrome as well.
Not every editor. Probably pretty much every editor that matters. But every editor that matters can also be configured to render tabs to any width.
&gt; but when the function is called, nothing parameter is passed as an argument I think this is the source of the confusion. Generally speaking, **you** don't call callbacks, so you can't see how they're called and what arguments are passed in order to make the above statement. **The browser** is the one calling callbacks, and it does pass parameters. To know exactly what it passes, you need to read the relevant documentation, but for an event handler, it will pass the the event object as the first parameter. (The specific kind of event determines the actual type; a mouse-related event will result in an object of type `MouseEvent`, a keyboard event will result in an object of type `KeyboardEvent` and so on. Each event type inherits the common methods and properties from `Event`, but they also have their individual properties as well, e.g. `MouseEvent` will have a `.button` property describing which mouse button triggered the event. All of this is documented on MDN.) The name, if any, that you happen to give to the formal parameter is completely irrelevant. You can name it anything you want, including not mentioning it at all. It will still be passed as the first argument regardless of what you do. It's just a custom to use a name like `e` to represent the event argument. 
I only know the CSS properties for Firefox, so it won't help much unless someone knows a webkit/blink alternative. ;-)
Have you tried doing a Google search for "tabs vs spaces"? I just did and I see posts from the likes of Jamie Zawinski and Jeff Atwood as well as forum discussions, stack overflow, etc - all with well reasoned practical arguments (with some flaming too ofc). What it comes down to is both have slight advantages when you consider the big picture...however the most important thing is finding balance between your preferences and staying consistent with your friends/coworkers/community. 
I'm finally understanding thanks to you and Chromogenicity... thanks guys! 
Code standards. I like tabs. But if I go somewhere where the team is using spaces? I adapt. I use sublime text, and it adjusts as I need it to–I just prefer consistency over "my way over your way"
that's kind of retarded when, with tabs, you can have uniformity *and* everybody can see it the way they like it... religion is silly.
basically, you want to code at the abstract syntax tree level- i like you.
&gt;code editor for normal people there's no such thing.
maybe because if you're prone to forgetting commas, it doesn't matter where you (forget to) put them?
&gt; 'If he/she wont budge on this, what else wont they budge on?' retarded suggestions from pointy haired bosses that ruin everybody's day?
Well, commas at the right side can show up any number of characters deep into the line. Commas on the left will all be in a vertical line and leaving one out would be difficult to miss.
Yes. Yes to everything you said. ... if the class requires prerequisites.
Thats a good point. I do see the comma first style quite a bit more in the node community (as opposed to client-side). 
Tabs can give you trouble in VCS, at least in git.
God himself could descend from the heavens and tell me he coded the universe in JavaScript and used comma first and I'd still not use it
&gt; What are the benefits of last comma? Not ugly
W3Schools is also a nice and easy way to need to visit the Mozilla Developer Network later
Have you heard about http://zeptojs.com/
The new promise resolution changes that came in RC3 are pretty major if you're porting. Overall really awesome though. Thanks to everyone who contributed
/(\^\s)*/
how so? I've been on git for a few years and haven't experienced any issues. 
I have. But not always. I guess it's one of those bugs. The "works on my machine, sometimes" kind of bugs I had a merge conflict once and couldn't realize what was happening. Since tabs are invisible, and I didn't really had a clue of what to do. Two hours after I took a walk, took a nap, used google and stumbled upon the answer of a kind soul who asked if I was using tabs. I took out all the tabs of the code I was trying to merge and viola
&gt; I prefer to keep it looking like my functions. Why waste time with an extra key? To make it not look like a function call. Yes, that's the reason. Same deal with function declarations. You put a space there, because you aren't invoking it.
Again this would be solved with proper software. Syntax highlighting should be turned on - and you shouldn't be confusing conditional blocks with function declarations - adding extra space just makes it less readable.
Ok, those are some good points. 
I only told you the rationale behind it. I won't discuss this kind of thing. Just stick to the conventions used by your company/clients and the projects you're involved with. Be consistent. That's all there is to it.
If the project uses spaces and specifies a set number of spaces-per-indent, it is really hard for anyone to fuck up, and the code will always look the same, commit the same, render the same. Additionally, all alignment will always look exactly as intended. If someone hasn't set up their editor exactly correctly and doesn't carefully use spaces for alignment instead of tabs, errors in alignment will come into the codebase (often silently, because it's all the same looking whitespace) that look just dandy for them, but fucked for anyone else using a different tabwidth. So therefore, I use spaces mainly for practical reasons (I have to deal with humans committing code, not AI), not theoretical ones that merely allow those same humans to set their own arbitrary aesthetics.
Well in my case, most of the code bases we contribute to or use code from follow the spaces instead of tabs pattern. So, we chose this. _shrug_ To each their own.
I suppose. You're inflating something that I really don't care that much about. It's just one of those code style things that doesn't need maintenance. Just set your editor to use 4 spaces as that's the pattern used so far in the code base and we don't have to worry about the code being rendered weirdly in whichever review tool we use (gitlab, phabricator).
I'm a firm believer that if you are lining up multiple lines of code like that you are probably doing something "wrong". One reason people argue for this is lining up arguments of a method. I find that if arguments breach the line break, the method is probably too complex and should be refactored. The other explanation I always hear is to align comma separated lists. I find that indenting the children on a new line seperate from the brace makes it much more readable and this is coming from someone who is usually the first person to cut back on total lines of code.
Thing is, it's not that easy. Sure, with spaces you don't get the freedom of choice, but tabs will only work if everyone is using the same tab width, so again, you loose the freedom of choice. Spaces are better because they are always the same thing - a space - where as tab width vary which breaks formatting.
Don't use zepto; it doesn't support many modern browsers.
gedit is undoubtedly aimed at 'normal people' in that it is the default code (and text) editor supplied with GNOME. It uses 8-space tabs. If you look at it, you'll then have seen such an editor.
I believe a traditional counter example to using flexible tabs for indentation would be the continuation of long lines. Using '&gt;' as a 4-space tab and '.' as space: &gt; &gt; my_long_function_name(argument_1, argument_2, &gt; &gt; &gt; &gt; &gt; &gt; &gt; ..argument_3, argument_4); With an editor configured to, for example, 2-space tabs: &gt; &gt; my_long_function_name(argument_1, argument_2, &gt; &gt; &gt; &gt; &gt; &gt; &gt; ..argument_3, argument_4); One loses the alignment. You _could_ work around that by using spaces after the first two tabs on the second line but this is brittle. It's brittle not only because the programmer must, in the absence of a sufficiently clever editor, have discipline to mix tabs and spaces correctly but it's also brittle because one programmer's editor may helpfully "fix" the mixed indentation which another inserts. Perhaps if you're on a project which mandates a particular editor it is safe but if you're publicising your work or expecting re-use, that's not a reasonable constraint. Mixing tabs and spaces is considered poor form in any case because it is adding a distinction to the code which is, quite literally, invisible. That being said the rules on indenting are pretty simple: 0. Do what an external authority tells you to; or 1. If you're creating the file, use whatever method you like; or 2. In an existing file, follow the indentation method currently used.
This isn't really a VCS problem[1]. It's an editor-replaces-whitespace problem and is precisely the reason one doesn't want to mix tab or space indentation within one file. Invariably there'll be someone's editor which decides to "fix" the indentation which will lead to hard-to-merge whitespace-only changes. I suspect the proponents of the One True Indentation method haven't worked long enough at the coal face to realise that the _Real_ One True Indentation is the one already used by the file :). [1] That being said, git provides a mechanism to help with this by way of the ``--ignore-all-space`` family of options to [git-merge(1)](https://www.kernel.org/pub/software/scm/git/docs/git-merge.html).
I suppose I did contradict myself if you put it that way. _shrug_ I don't care about people caring that much about writing code that breaks from a style guide. If their feelings get hurt because of this, so be it. All the verbal gymnastics I do to justify this frivolous position I'm being forced to take in this conversation will not convince anyone to change their coding styles. But if you work in my code base, there's a style guide that gets imposed at build time. That's about it. 
&gt;npm's coding style is a bit unconventional that's the very first sentence on that page..
http://www.w3.org/TR/FileAPI/ http://www.html5rocks.com/en/tutorials/file/dndfiles/ I used these two resources when implementing the fileapi, this writeup looks really good, thanks for doing it :-) Multiple examples were the hardest thing to find (this was last year).
Yes, I suppose ideally code would be stored as XML (or similar), using tags like `&lt;block&gt;` and `&lt;statement&gt;`, which could both have a `comment` attribute. That would give complete freedom of customization while viewing, and it would work with existing VCSs.
Should be called FileTransferAPI.
"just LEARNING" Javascript *won't* teach you how to manipulate the DOM with it. I agree that one should learn Javascript, but one also has to learn how to manipulate the DOM with it. One could happily hack away at a Node project without ever touching, or even knowing about the DOM. Granted, most "Learn Javascript" tutorials will concentrate at some point on the DOM, but **just knowing Javascript doesn't teach you how to touch the DOM**.
No problem, keep up the learning!
It should be possible to set up your editor such that two spaces are indented as you prefer, both when loading and saving. 
Sure and just learning html doesn't mean you can build a web site. We'll just keep going back and forth and get no place so let's end it here.
w3schools works if you know it but forget say the capitalization of the parameter. You really can't learn from w3schools.
Yeah, exactly. So if someone asks "How to learn to build a website with HTML instead of a WYSIWYG editor", "just learning" HTML won't do the trick. You implied that "just learning" javascript would teach you how to manipulate the DOM. It will not. That is a incorrect statement. There's no going back on forth on that. That was my point, and it seems like you understand that now. We can end it here.
I have seen both, and really it's a matter of taste. Two or four spaces is something the team agrees on, though with the IDE's I use the four space rule is easier to see actual nesting versus copypasting errors. Tabs are okay but only if they are the only indentation used. Unfortunately, they often aren't so it's back to spaces as the lowest common denominator. 
how is compatibility with firefox17 and IE8/9/10?
Can you provide an example of where you would use this? The more common case is mixing tabs and spaces on separate lines, like this: --&gt;|--&gt;|var a = 5; ________var b = 8; Usually that's down to different developers touching the source code, or if one developer switched from tabs to spaces sometime during the project.
&gt; Spaces are better because they are always the same thing - a space - where as tab width vary which breaks formatting. Not if you're doing it like God intended it to, tabs for indenting, spaces for alignment.
Can you give an example of a "proper OO language", and a scenario where you found wanted to use a well designed class, and you had to change the "private" to "public", and that this was the intended way the author of that class wanted you to use it? I'm worried you and I have different ideas of what constitute good OO (and thus what counts as a "proper OO language").
&gt; A library author should not have to guard against extreme stupidity or deliberate and flagrant rule breaking. FWIW, I'm just gonna emphasize that that's an opinion rather than a fact.
Yeah... And when you don't agree with my way of aligning we are back to square one because you cannot manipulate that either. Spaces are superior because they don't allow this discussion, and we can all just continue our work.
&gt; If you find yourself wanting static types while writing JS, you are doing something wrong and/or doesn't understand the language well enough. Can you elaborate on this claim? What experiences have you had to caused you to acquire this belief?
If tab is --&gt;| and spaces are _ then you would use this in this manner (based on the first comma example): --&gt;|var foo = 1 --&gt;|__, bar = 2 --&gt;|__, baz = 3; The tabs line up the lines as closely as possible to the parent and the spaces line up the following related lines to the related text from the proceeding line. The use case is rare enough that it can be avoided, but sometimes it's helpful, such as with the example above.
http://caniuse.com/#feat=fileapi
It's something I've come across before, and I don't hate this mixing of them. I have my indentation unit set as 2 spaces (using spaces and not tabs) and usually just indent another level for all subsequent vars. This doesn't really bother me, as variable names are variable anyway: var foo = 1, barVar = 2, bazVarNameLong = 3; I used to have my indentation to show as 4 spaces, which worked nicely with the 4 chars of `var_` when using trailing commas, whether tabs or spaces: --&gt;|var foo = 1, --&gt;|--&gt;|bar = 2, --&gt;|--&gt;|baz = 2; Although if tabs are used, any other value will wreck the alignment, which your tabs/space combo won't do.
Please spell it **jQuery** next time. *Please!*
and you killed it. xml? really?
You can also just use the array buffer version and copy it over as a transferable object. I never got the point if the sync APIs for web workers, as workers are already async, it has to call a function to return data anyway how is a whole separate api preferable to passing the async one the call back you'd need to call anyway. This is especially bad as it assumes your only doing a single thing in the worker because that's not what you want to do, workers aren't free, open too many and it can crash a browser (less and it can slow things down), you want to do it async in a worker the same reason as in the main thread. Maybe if instead of making sync APIs they just made async ones that weren't terrible.
`e`, `evt` and `event` are commonly used as parameter names for functions accepting an event object. An event object is just another plain JavaScript object that happens to contain information and methods relevant to an event (such as the `button` that was pressed). Somewhere, your function *is* being called and being passed an `Event` type object as a parameter. This could be, for example, a [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent). All event objects inherit from the generic [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) object. What you name the parameter in your function doesn't really matter, but you should pick one name and use it consistently. An `o` parameter might be expecting a generic object, or it could be expecting an object containing named options for the function. In the latter case, you might also see the object being called `opts` or `options`. Again, pick one and stick with it. Another place you might see an `e` is with try/catch statements. In this case the `e` represents an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object. You might also see this as `err` or `error`. Personally, I am not a big fan of shortened parameter names. I'd much rather spell out `event`, `options`, and `error`, to make the intention explicit.
What's up with the closures? I don't think they're necessary. Also, why are you mixing the native DOM methods with jQuery? If you're already using jQuery you might as well leverage its power. I think your second example could be simplified to: (sorry haven't tested this, might have errors) $(this).wrap( $('&lt;div&gt;&lt;/div&gt;', { 'class': 'videoContainer', on: { mouseleave: function() { $(controlsBox).fadeTo(400, 0); $(controlsBox).clearQueue(); // Don't do this, btw. Create each jQuery object only once. } } }); );
That's not a single layer, it's a single language. 
this is a great library i use it to handle the file upload/download system on my personal CDN i love it
Awesome, looks great. Still learning this so any help is super appreciated. when you say not to create jQuery objects more than once should I go: controlsBox = $(controlsBox); controlsBox.fadeTo(400, 0); controlsBox.clearQueue(); i was under the impression the ath $(whatever) just wrapped existing objects into a format that jquery can apply functions to. is this not the case?
The main `jQuery()` aka `$()` function does *a lot*. Here's a brief overview of the different things you can pass as the first parameter: 1. *Selector string* - Takes a CSS selector string and returns a jQuery object that represents all the matching elements in the DOM. If you want to get a jQuery representing every `&lt;div&gt;` with class `foo` on the page, you would do: var $foos = $('div.foo'); 2. *HTML string* - Creates a new jQuery object based on a string of HTML. The HTML doesn't actually get added to the page until you specifically add it with a method like `appendTo`. This is the preferred way to create new elements on the page, rather than using `document.createElement`. var $newDiv = $('&lt;div&gt;&lt;p&gt;Lorem ipsum...&lt;/p&gt;&lt;/div&gt;'); var $newImg = $('&lt;img /&gt;'); 3. *Element* - Takes an [`Element`](https://developer.mozilla.org/en-US/docs/Web/API/element) object and wraps it in a jQuery object. This is what you're doing, but usually, you never have to do this. An example where this would be necessary is if you are working with another library that does not use jQuery. Usually you would just use an HTML string param (#2). var newDiv = document.createElement('div'); var $newDiv = $(newDiv); 4. *Element array* - Same as above, but accepting an array of `Element` objects, and then returning a jQuery that represents a collection of all those. Again, you rarely need to do this. Just use a selector string param (#1). var allDivs = document.getElementsByTagName('div'); var $allDivs = $(allDivs); 5. *Plain object* - Advanced, very rare, and there's usually a better way to do whatever you're trying to achieve with this. Avoid unless you know you need it. 6. *jQuery object* - Clones an existing jQuery object. 7. No parameters - Represents an empty collection, just like if you used a selector that found no elements. var $empty = $(); var $alsoEmpty = $('.non-existant-class'); 8. Function - This is the odd one of the bunch. Rather than retuning a useful, chainable object, it just lets you define some code that should be run once the document is ready: $(function() { // Document is ready }); So basically, you usually only need to use 1, 2, and 8. [See here for more detailed info on how to use each of these](http://api.jquery.com/jQuery/). Now as far as why you should only create each jQuery object once, what I'm saying is at the top you should be doing something like: var $controlsBox = $(controlsBox); or, more preferred: var $controlsBox = $('&lt;div&gt;&lt;/div&gt;', { 'class': 'controls-box' }); That way, whenever you need to do something with it, you can refer to that one reference. This is much more efficient than creating a new jQuery object every time you want to work with the same element. Each call of `$()` costs time, so don't do it more than you need to.
Actually, strictly speaking, what you were doing before (creating the element using native methods and then wrapping it in a jQuery) is significantly faster. Calling `$(document.createElement('div'))` is a lot faster than calling `$('&lt;div&gt;')`. However, the point of jQuery is to make DOM code cleaner and easier, at the cost of execution speed. If you want to keep mixing native DOM code and jQuery, you might get a speed boost. But then, you'd get the best speed by just using the native DOM methods entirely and drop jQuery altogether. Personally, development speed usually takes priority over execution speed. Pure jQuery is usually fast enough. YMMV.
Aaarh yeah :D Thanks for the suggestion! I had planned on looking in to a way to reduce the redundancy, but for now the lines are separated for the sake of me not getting lost in the bitmap specs :D
Thank you for sharing the Meteor. I have looked at it and it looks great. I believe these two projects, Meteor &amp; Govu have different goals. With govu, we are trying to simplify the web development for a javascript developer with no need to setup any database or to learn a new server-side language. Javascript developers and the way they develop are our ONLY focus. So, rather than doing this: Rooms = new Meteor.Collection("rooms"); Rooms.insert({name: "Conference Room A"}); var myRooms = Rooms.find({}).fetch(); We believe this is much more simpler; var room=new Room(); room.name = "Conference Room A"; room.save(); var myRooms = Room.getAll(); 
Actually we were trying to imply different layers merged into one single javascript development layer. Thanks for noticing.
It's literally the same code, but with slightly different syntax... The Meteor syntax is using the well-known MongoDB interface. This is a mature, simple, tried-and-true JSON-based NoSQL query syntax. MongoDB is incredibly easy to set up, especially using a service like [MongoHQ](https://www.mongohq.com/home). Your project has a database, it's just an unknown, unoptimized database limited to `save` and `getAll` queries. In any attempt to abstract out databases completely, you are going to be making a poor NoSQL KV store (a database!). Just use one of the many existing, mature NoSQL databases with JSON APIs. There's no special database language here, just JSON. To achieve your `save` and `getAll` functions in Meteor is trivial, although why would you? The Meteor example you gave was shorter and more powerful! I think you're missing the point of Meteor. It's 100% JavaScript. Server side, client side, and database queries are all JavaScript and JSON. Also, Meteor is *written* completely in JavaScript. Anyone wanting to make modifications to Meteor does not have to learn Java. I'm sorry if this sounds harsh. I just feel that you are really trying to achieve something that Meteor is miles ahead of on! 
Let me give you an example of how you could get the same API using Meteor: // Somewhere in a /lib folder function Model(collectionName, type) { type.collection = new Meteor.Collection(collectionName); type.getAll = function() { return type.collection.find({}).map(function(doc) { return _.extend(new type(), doc); }); }; type.prototype.save = function() { type.collection.upsert(this._id, this); }; return type; } // Application code var Room = Model('rooms', function Room() { /*...*/ }); var room = new Room(); room.name = "Conference Room A"; room.save(); var myRooms = Room.getAll(); // Returns array like [Room {name: "Conference Room A", _id: random}] There are a few Meteor packages working to achieve a more fully-functional ORM system that works something like this, though with features like validation, relationships, and access control.
Please see my other reply, it shows a very short way to implement class-level database functions using Meteor collections. As far as type-safe properties, this is handled in Meteor via a server side validation function. This allows very flexible, safe documents that do not have to have strictly defined properties. That's kind of one of the goals of NoSQL, after all.
Another thing you should consider is that Meteor is a loose, package based system. Even the core of the project is implemented as a bunch of packages. You can pick and choose only the core packages you want, and add others from [Atmosphere](http://atmosphere.meteor.com) freely.
Yes this is what we are doing. We are trying to let developers focus on their application logic rather than developing helper classes.
Well, that's my point. Create an [Atmosphere](http://atmosphere.meteor.com) package with that top code that I posted, and developers using your package would only have to include the Application code from that example.
Took your advice and updated the code :) Also decided to change how pixels are added, I think / hope that it should run smoother now, again thank you for the advice!
From my experience in undergrad, is this a course for programming majors or just a general intro course ? General intro courses are dumbed down alot, and are meant for non-engineering students. If this is a course that is mandatory for computer science students, then this might be a sign of a weak school for what you need.
&gt;Shim that enables you to do canvas.toDataURL("image/bmp") to retrieve a BMP data url Why would you want to do that?
Haha :D That is an excellent question! I made it primarily because I wanted to understand how it was done (out of curiosity) and because I'm playing around with converting a canvas to an ico file and while ico files can be made with PNGs, they aren't very backward compatible from what I've understood when done that way. 
Correct just learning HTML will not do the trick but as a first step you need to learn HTML. That what I was saying about the DOM. I was not imply learning javascript mean you can manipulate the DOM again but the reverse, if you want to manipulate the DOM and not use jquery you should actually go learn javascript as a first step.
ICO is different from BMP though. Well, if you just want to create a 32x32 32bit ICO, it won't be too difficult. You can just copy/paste the header and add your uncompressed pixel data and you're done. It only gets complicated if you want to support that format it its entirety.
As for optimization you could try using typed arrays. You could create the bitmap in an `ArrayBuffer` and use a `DataView` to set the header. This way you also don't need to implement functionality to write data types. If you initialize a `Uint8Array` on the buffer you could also set the pixel data directly (one row at a time) from the `Uint8ClampedArray` returned by `CanvasRenderingContext2D.prototype.getImageData`. That is if BMP supports RGBA format though, which I can't recall at the moment. However what likely crashes your browser is the string conversion. You might want to experiment with other ways to build the string.
 if(subclass here's the first error if subclass is not defined. Better use if (window.subclass
I'm not sure if it is still available, but Manning was giving 50% off with the access code dotd1028cc. The book looks promising either way. 
You are only allowed to use a language in one way. All other ways are bad except the way I know how.
I agree that one should learn js in order to manipulate the DOM with it, I think you're right on point there. You might have meant to convey that, but what you originally said didn't have that all-important "as a first step" language included. 
PHP is so 1990s/early 2000s
It has expired Also I hope this turns out to be better than their AngularJS in Action, which is still not complete, and what is there is extremely basic.
I am sorry , you are right they all are jQuery plugins :)
I bought this. So far, it is in bad shape. Lots of typos and grammar errors. The examples are convoluted and complex for a beginner. The author will gloss over things and give only simple explanations for certain things. Explanations that only an experienced Ember user would understand.
jQuery has a cool function: $('.content').load(urlname) that loads the url of the page you want to load inside &lt;div class="content"&gt;&lt;/div&gt; hope this will help you! Be sure to check out the Jquery docs on this load function since there extra parameters, such as fetching only a section of that particular page.
That's disappointing, and sadly not surprising. I'm regularly unimpressed with Manning's output
It's Programming Concepts &amp; GUIs and we're using Javascript, there are some IT/Digital Arts majors in the class so maybe that's why
That's too bad about the angular book. The author seems to have done quite a few talks on the subject, so I was hoping for more. Manning is pretty hit or miss. 
You might want to try another method of getting the json data, your method will fail with additional get parameters, e.g. http://www.reddit.com/r/funny/new?count=25&amp;after=t3_1qc34i My method for getting the correct json url is currently: /^(https?:\/\/www\.reddit\.com)(\/)?(?:(r\/[a-zA-Z0-9]+)(?:\/[a-zA-Z0-9]+)?)?\/?(\?[a-zA-Z0-9=&amp;_]+)?/ You can construct a valid reddit url by using the matched parts: url = "#{match[1]}#{match[2] || '/'}#{match[3] || ''}.json#{match[4] || ''}" So far it worked pretty well and just rarely fails..
You may want to try [page.js](https://github.com/visionmedia/page.js), it a most excellent client-side router.
one idea is that stuff like BMPHeader.push(0); BMPHeader.push(0); BMPHeader.push(0); BMPHeader.push(0); could be replaced by BMPHeader.push(0, 0, 0, 0);
appreciate it. sounds like a good manually controlled solution.
Wow, nice! Thank you!
This is really great. thanks for taking the time to go through this, I really appreaciate it. Liots more reading and practice for me :)
Thats a great point. Cheers.
If you are going there for programming, the best way to find out if this is the program you want, is to go through the alumni association find people who graduated with your major, and contact them and ask them what they think of it. A foolproof way to see how strong a college degree is, is to see how many graduates get a well paying job in their field. Another way to see how strong a program is, is to look at the faculty of the computer science department. Have they done many projects that are recognized outside of the school ? You can do this by going to the staff's web pages. If its important, they will talk about it on their site. Ignore paper's published. Computer programming schools should have at least some real hackers. 
This example seems like a strange way to teach a for-loop, but whatever. Here's the way **I** read it (I could be wrong) ... you aren't calling "one roll within another roll" ... you are just doing the same thing twice with a variable that's changing. Here's the psuedo-code you might be looking for; function SelectImage2(){ var i = 0; for (i = 0; i &lt; 2; i++){ // do your random thing // do your image thing // get and update your DOM ID reference using a variable based on i } } Hopefully that's enough to go on. I don't want to do the assignment for you :) 
Honestly, you really don't need to drop money on books when you're starting out. Go to MDN and read the Javascript guide. There are so many great, free resources online that I wonder if these articles recommending books X, Y, and Z are written by publishers. Of course if you like the process of learning from a textbook, an online guide won't replicate that. In my experience, though, there are a *lot* of people who don't like textbooks.
No, almost never. Reset buttons: - Make users have to think more when they're filling out a form. - Can piss users off if they accidentally press it. 99% of forms really do not need a reset button. If you're adding reset buttons "out of habit", that means *you're not thinking*. Every single part of a form needs to be well thought out, in terms of business importance and user experience. If you have a form that really, really needs a reset button, for whatever reason, I suggest putting an intermediate confirmation alert ("The will reset the form to its default values! Are you sure you want to do this?"), with the "No" option highlighted to mitigate the effects of accidentally pressing the reset button.
But he is recommending free resources: "Instead, start with Eloquent JavaScript - by Marijn Haverbeke." Derek Sivers (creator of http://www.cdbaby.com/ and Ted Talker - http://www.ted.com/talks/derek_sivers_how_to_start_a_movement.html ) is not a publisher shill. 
http://www.reddit.com/r/chrome ? I mean I feel it would fit better here if the link showed us the source code.
Love the idea to use the [flashcard program](http://ankisrs.net/) to learn a new language. Thanks. 
You said it
Yeah I fully agree there is a mass amount of jQuery out there. Many samples and freely available code for doing regular tasks in the web dev/design area are available in jQuery. However there is many many alternatives. You can be extremely good with JavaScript and use other frameworks daily without ever having to dabble with jQuery. I'm not saying it's not a good skill or knowledge to have, just to say your JavaScript knowledge isn't complete without learning jQuery is a tad silly.
Again in respect to my last comment I can't argue how popular jQuery is and how useful it would be if you were to pick a library to learn. However to say your JavaScript learning isn't complete without learning jQuery or in your words you aren't a JavaScript master without it is silly. There's many other frameworks and many corporate jobs where you spend all day developing with JavaScript and jQuery is not being used.
Yes, there are alternatives - but if you need to read some random code, chances are it will use jQuery, and not Prototype or Underscore or Dojo or any of the other libraries, and I am reasonably convinced it is even more likely than plain, no-library-at-all vanilla JavaScript. If you are hired as a JavaScript developer, then tasked to an existing project, and it turns out you can't handle it because you haven't ever been exposed to jQuery, you would most likely be viewed as an incompetent JavaScripter - which would not be the immediate reaction had the library in question been, say, YUI or Dojo or an obscure in-house library, where a certain period of training might be taken for granted.
I think part of mastering a language is understanding not just how it works, but also how it is used commonly by other developers. Sure, there are lots of jobs where you'll never use jQuery. You'll still probably want to know jQuery, as well as its pros and cons, because one day the topic will almost definitely come up. Just a quick example. On indeed there are almost as many job postings that mention jQuery as there are posts that mention JavaScript but not jQuery: [Listings that mention 'jquery'](http://www.indeed.com/jobs?as_and=jquery&amp;as_phr=&amp;as_any=&amp;as_not=&amp;as_ttl=&amp;as_cmp=&amp;jt=all&amp;st=&amp;salary=&amp;radius=25&amp;l=&amp;fromage=any&amp;limit=10&amp;sort=&amp;psf=advsrch) - 21,273 [Listings that mention 'javascript' but not 'jquery'](http://www.indeed.com/jobs?as_and=javascript&amp;as_phr=&amp;as_any=&amp;as_not=jquery&amp;as_ttl=&amp;as_cmp=&amp;jt=all&amp;st=&amp;salary=&amp;radius=25&amp;l=&amp;fromage=any&amp;limit=10&amp;sort=&amp;psf=advsrch) - 29,175 Compare that to other libraries like YUI, Prototype, and MooTools and you don't get nearly as many results. I'd say to be safe, any serious JavaScript developer needs to learn jQuery. By the way, I'm not suggesting that a master JavaScript developer *only* needs to know JavaScript and jQuery. A master developer should be continually learning new trends in the JavaScript world. At this point, if you've never heard of the MV* frameworks, Node, transpiled languages, etc then I'd have to wonder how serious you are about the language. Not that you have to actively *use* anything beyond vanilla JS, but you should at least know what's going on the JS world.
In that sense however someone that understands vanilla Javascipt and has been exposed to other libraries would have no problem adjusting. I'm not arguing that knowing jQuery and it's benefits isn't a good thing. But it's not clear cut to say one can't consider themselves good at JavaScript until they've learned the most popular library. It's a library. I don't know jQuery. I've used it once or twice a couple of years ago and modified a few vars of existing samples to get what a client needed. I think I'm good at javascript however. Here's my current project: https://github.com/beakable/isometric My point is just you can be good at JavaScript and go other directions and not learn the most popular library, all it is is a library.
*JavaScript: The Good Parts* is meant for people who already know some C-like language. That's why it's that thin. Personally, I don't think starting with JavaScript is a good idea. Without a linter, the only feedback you get are syntax errors. If you aren't using an editor/IDE with syntax checking, this feedback will be fairly indirect, too. It's a lot easier if the machine can help you more. That's why Java is still a very popular choice for teaching programming. The tooling is top-notch. You get instant feedback on everything and the call-tips let you easily discover all kinds of things. Dynamic languages are fun, but things will be far more difficult without static analysis. This is true in general, but even more so if you're just starting out. As a beginner, you *really* want to be told if you made a mistake.
&gt; When I freelanced jQuery requests would pop up a lot and I knew enough to make edits to existing code but that was it. Exactly, you didn't know how to make serious edits to the codebase because you didn't understand the most popular JavaScript library. I guess my point is that no "master" JavaScript developer *ever* finishes learning JavaScript (the JavaScript *ecosystem*, not just the language itself). You need to keep learning new popular techniques and libraries or you will fall behind. Really though, jQuery is not a hard library to learn. It's big, but well documented and extremely easy to pick up once you've learned the handful of most common functions.
I'm kind of not understanding what this does. It makes functions, using a new function syntax? var pow = pat() .caseof(Number, 0, function() { return 1; }) .caseof(Number, Number, function(x, y) { return x * pow(x, y - 1 ); }); Why not: var pow = function(x, y) { return Math.pow(+x, +y); // Always passes numbers to Math.pow, using the Unary Plus operator }; And: var one = function(n) { return n + " is one"; }; var notOne = function(n) { return n + " is not one"; }; var isOne = pat() .caseof(1, one) .otherwise(notOne); Why not: var isOne = function(num) { return +num + (+num === 1 ? ' is one' : ' is not one'); }; I'm not really seeing how this simplifies anything. Seems to add a lot of overhead and makes the code really, really hard to read. Just duck type... it's one of JavaScript's greatest strengths.
Ah yes true. I could submit it here again as a bookmarklet actually...
Ok, point taken :) Maybe the examples are too simple to demonstrate the real world use cases for pattern matching in JavaScript. In fact, why would one want write your own implementation of `pow` when there's Math.pow? Thanks for pointing this out :) Anyway, pattern matching is a very powerful concept that is built-in in many functional languages, like ML, Scala, Haskell etc. JavaScript doesn't have native support for pattern matching and that's why I wrote pat. Let's take a more complex example: Say you have an array of integers. Your task is to: "find out the first sequence of five subsequent numbers that are all even (num % 2 === 0)". Without pattern matching, you would probably write code with couple of `if`s and a `for`-loop. That's fine, but it can be error prone and hard to read. With pattern matching and with a help of recursion, the function implementation is pretty simple: var fiveEvens = pat() .caseof([Number, Number, Number, Number, Number, pat.rest()], function(a, b, c, d, e, rest) { if(a % 2 == 0 &amp;&amp; b % 2 == 0 &amp;&amp; c % 2 == 0 &amp;&amp; d % 2 == 0 &amp;&amp; e % 2 == 0) { return [a, b, c, d, e]; } else { return fiveEvens([b, c, d, e].concat(rest)); } }) .otherwise(function() { return []; }); console.log(fiveEvens([])); // =&gt; [] console.log(fiveEvens([1, 6, 3])); // =&gt; [] console.log(fiveEvens([1, 6, 3, 67, -7, 3, 7, 9, 4, 4, 4, 8, 2, 899, 56, 3])); // =&gt; [4, 4, 4, 8, 2]
if you are interested in reviewing the book, drop me a mail at sabyasachir@packtpub.com also let me know if you can post your review on amazon.com or your blog. after the post on amazon or your blog, you will get a second book (print of your choosing) as a token of my appreciation FREE. 
Ah, I see. Yeah, functional programming has always been a head scratcher for me. I like the idea, but it's difficult to wrap my head around. I would have thought to implement that with a reduce, allowing any number of adjacent even numbers: var adjacentEvens = function(list, count) { return _.reduce(list, function(adjEvens, value) { if (adjEvens.length === count) { return adjEvens; } else { return (value % 2 === 0 ? adjEvens.concat(value) : []); } }, []); }; var fiveEvens = function(list) { return adjacentEvens(list, 5); }; console.log(fiveEvens([])); // [] console.log(fiveEvens([1, 6, 3])); // [] console.log(fiveEvens([1, 6, 3, 67, -7, 3, 7, 9, 4, 4, 4, 8, 2, 899, 56, 3])); // [4, 4, 4, 8, 2] With a little modification, it could be made to work with any check, not just a modulus: var adjacentValues = function(list, count, check) { return _.reduce(list, function(adjValues, value) { if (adjValues.length === count) { return adjEvens; } else { return (check(value) ? adjEvens.concat(value) : []); } }, []); }; var fiveEvens = function(list) { return adjacentValues(list, 5, function(value) { return value % 2 === 0 }); };
interested in reviewing the book? people drop me a mail - sabyasachir@packtpub.com I agree i have made a mistake by posting it here. 
For canvas, you have to wait until the image is loaded in the page. Also, please let us see your code so we can spot your error.
Added my code. I included what I have now, and also what I would like to do.
i have javascript disabled by default for security reason and i am a front end dev never forget that any resource on the web should be accessible directly (you should know why), once you build the application that -works- you can build javascript features on top of it (ajax, playing with data visualization etc), your app will be accessible by humans and machines and in case of humans they'll get a nice UI if they have js enabled otherwise you just get content (that is what your user is looking for in your web/app)
I love finds like this. But, what do you think sets isAlive apart from skrollr? http://prinzhorn.github.io/skrollr/ Starred your repo ;)
You need a credit card to register (lame, I know). Use promo code STIEGLITZ-13 for a 14 day free trail. There are a few other videos that may interest you as well, including Angular, Knockout, Bootstrap, etc.
 { mind: 'blown' };
Hi smalaki thanks for your feedback. my plugin has almost 50 settings that you can tweek. it comes with touch events for android, ios and microsoft devices. It can be used for all kinds of animations, not only parallax sites. It knows css3, but if run on a IE7 or IE8 browser knows to fallback to javascript animations. It is also resonsive, so every animation can be defined by the edges of the screen, document or you element. Besides that you can create your own functions(you can see that a small file isAlive.helper.js comes with this plug in where you can find some functions, more will come) and use them as you want. Glad to help with any question if you have. thanks again.
I know of the original or1k, but network support is usually a pain in the ass to get right (at least Linus Torvalds remarked so in his book "Just For Fun" - and I tend to believe him).
Very interesting, I'm going to start looking into this for Wii U HTML5 development. By the way, click the 'reply' button under someone's post to reply directly. Welcome to Reddit!
I assume this project is a school project so i'll withhold the answer. Let's start with more theoretical/philosophical question: What's wrong with the SelectImage2 function? There's really two/three problems and they all have to do with best practices and maintainability. Another way of putting it, is why does your prof/teacher want you to build a loop?
Ops... thanks :)
You could use "eval" but that's not exactly safe. best thing to do would be to look for those and strip them, then setup using something like: new RegExp(string, modifiers);
Cynical nature aside, care to elaborate? As the writer of the post, I would happily change my content to provide something more productive.
Thank you so much! I think I got it: http://jsfiddle.net/justinled/32mPL/12/
in that case you would use: // false if not complete regex: myRegex = /^\s*\/(.*)\/\s*$/.test(inputVal) &amp;&amp; new RegExp(myRegex, modifierVal); if (myRegex) { ... } 
Of course, no programmer out there is going to know every library for their desired language of choice, there will always be constant learning. If you want to stay good at what you do it's about that. All I've been trying to state is you can be good at JavaScript and not know jQuery. To say you aren't good at JS until you've learnt jQuery is wrong in my opinion. If you spend the time to learn the ins and outs of jQuery that makes you good with jQuery. Having said all this if someone came to me for advice on what would be good to learn I'd probably say jQuery, as like you said it is extremely popular and has a large amount of tutorials/docs available. However I wouldn't question if they were good with JS because they didn't already know jQuery nor would I instantly presume their JS skills were any less than anyone in this thread because of it. 
Already have, but thanks anyways!
Nice :) Didn't play around with push prior to this so didn't know, thanks!
Man quit posting shit that isn't free or needs a CC to see it. Pretty freaking lame.
I wish they would say why...
I'm not sure what's wrong with the for/if version... This is written for brevity but still seems pretty straightforward to me. And, as livingmonstrosity points out, reusable code! function streak(arr, count, check) { for(var out = [], i = 0; i &lt; arr.length; i++){ if (!check(arr[i]) &amp;&amp; !(out.length = 0)) continue; if (out.push(arr[i]) == count) return out; } return []; } function fiveEvens(arr) { return streak(arr, 5, function(v){ return !(v%2) }) }
&gt;Using Angular, Node, Express, HTML/CSS and the Mailchimp API Ant, meet sledgehammer.
Careful there - your Sprite class has instance-specific properties defined on the prototype (x, y, etc). Is that intentional?
Ah, nice. That short circuits the loop, while my reduce keeps going through the whole array. The short circuited `&amp;&amp;` and the `out.length` truncation are clever, and it's a nice use of the return value of `push`. I suppose it's a case of clever vs. explicit, but with a comment or two your version definitely seems readable enough.
? Not sure I understand. Criticisms welcome, I just want to learn :)
Thanks for the comments! I'll definitely take all of that on board and work harder :)
He was just saying you could have attacked this using just HTML, CSS, and Javascript and connect with the Mailchimp API. The analogy meant that you used more technology than was necessary to tackle this problem. On the other hand it's cool that you took the opportunity to learn some new stuff and apply it. As you start to build bigger apps or higher traffic apps you will want to minimize the code necessary to come up with solutions so that it scales and performs well. Overall though, you made an app and learned new stuff so that's awesome.
Well that's interesting. And I think in the future when we have huge libs and/or larger games this will be key or possibly used today with a stand-alone nodewebkit app/game that receives updates. Thank you op for the link.
Hmm, that's pretty cool. I'd like to see something like this implemented in Meteor. It already caches all app files (javascript, html, css, images) and automates hot-pushes for code changes. But I think it sends the entire file during a hot push, rather than just the updated portion.
Ah! Thanks for clearing that up. I used lots of unnecessary things. Angular was the most unnecessary of all things, could have just achieved it with HTML. But I wanted to learn lots of different things and I did just that :) 
I know, I realised that he doesn't actually say why after posting this. I think the reason is that it has to parse the html twice. Once to get the ng-init then a second time once the initialize function has ran to update the view. Another problem with this approach is you have to wait for the html to be parsed and reach the ng-init before it makes the request to your backend, why not have it making the request earlier and just call the initialize function when the controller has loaded?
We actually support aggregated/minified files out of the box. The server will detect minified files, safely beautify them, then diff based on the beautified code. So you are basically diffing against a minified file with newlines added.
Updated your script to extract modifiers and used RegExp http://jsfiddle.net/dxBLn/
Yeah indeed, the docs aren't that great. I think best practice is to put logic that belongs in the ng-init in the controller too really, for readability/separation of concerns.
Very nice!
It's also free (MIT license)
[Using recursion](http://www.codecademy.com/courses/javascript-lesson-205/0/1)?
A good start, congrats!
Looks like another slider. How long did it take you/your team to code it?
I saw this on codewars.com today too. There are other String and Object functions to use. aka: function keysAndValues(data){ var keys = Object.getOwnPropertyNames(data), vals = keys.map(function (key) { return data[key]; }); return [keys, vals]; } If you run keysAndValues({a: 1, b: 2, c: 3}) it will return [['a', 'b', 'c'], [1, 2, 3]] This can also be done with a for loop like this: function keysAndValues(data){ var keys = []; var values = []; for (var key in data) { keys.push(key); values.push(data[key]); } return [keys, values]; } 
map / reduce can be used to replace for loops. For example, given an array, [0,1,2,3], get the sum. Using a for loop: var arr = [0,1,2,3], sum=0; for(var x=0;x&lt;arr.length;x++) { sum += arr[x]; } console.log(sum); Using reduce: var arr = [0,1,2,3], sum=0; sum = arr.reduce(function(a,b) { return a + b; }); console.log("Sum is: ", sum); Can also use map, modify elements in an array. ie: for [0,1,2,3], double each value in the array. Using a for loop: var arr=[0,1,2,3]; for(var x=0;x&lt;arr.length;x++) { arr[x] = arr[x] * 2; } console.log("Doubled is: ", arr); Using map: var arr = [0,1,2,3].map(function(a) { return a * 2; }); console.log("Doubled is ", arr);
Haven't tested this, but jQuery should work... http://stackoverflow.com/questions/14136566/stop-youtube-video-within-iframe-on-external-button-click Give the close button an ID or class and execute the code in the first answer when the button with that ID is clicked.
Yes, put it within the head tags. Also, you should link to a specific version of jQuery. To play it safer go to jQuery.com and download the latest version, upload it to your server, then simply do a script link to it as you stated. &lt;script type="text/javascript"&gt; $(document).ready(function({ $('.close-button').click(function({ //code to execute here when close-button class is clicked }); }); &lt;/script&gt; 
Love it. Good job!
You should already have jQuery loaded as your modal requires it.
Nice! But do you have 3-ways merge?
how do I do my image thing? I'm totally lost on that part. I don't know how I would build an image tag inside the function that then is appended to my outputDiv. function SelectImage3(){ var i = 0; for (i = 0; i &lt; 3; i++){ // do your random thing roll = Math.floor(Math.random() * 6) + 1; imgName = '../images/die' + roll + '.gif'; document.getElementById('dieImg').src = imgName; // do your image thing var tags += ' &lt;img id="dieImg2' + i + '" alt="die image" src="../images/die2.gif" /&gt;'; // get and update your DOM ID reference using a variable based on i } document.getElementById('outputDiv').innerHTML += tags; } Am I on the right track or not at all?
var i = 0, newImgTag; newImgTag = document.createElement('img'); newImgTag.src = imgName; document.getElementById('outputDiv').appendChild(newImgTag); 
Where would I put newImgTag = document.createElement('img'); newImgTag.src = imgName; document.getElementById('outputDiv').appendChild(newImgTag);? Like would it be within the for loop function or between the end of the for loop and the SelectImage3 function? 
Can somebody please ELI5 for me? I'm particularly confused as to how it eliminates HTTP requests and how it knows what to diff without transferring data.
The for loop scope, at least in most languages (but i haven't studied all of the quirks of js, but I do it because it makes most sense to me, so let's just assume without me testing or finding a link on it)... The for loop hides the tags variable from the last statement. I am also on an ipad so typing code is a pain. Basic structure var tags = ""; for loop Add to tags variable Close for loop scope Set inner html i'll be back in the morning to follow up on any questions unless some australians want to help out
I'm assuming you want to append three image elements on your output. You could do this by not manipulating your DOM element on every loop and just doing it once. `var tags = [];` `tags.push('&lt;img id='dieImg2'+i+'" alt="die image" src="../images/die2.gif /&gt;');` `document.getElementById('outputDiv').innerHTML = tags;`
Thanks I suppose spliting and using RegExp is the only way.
Any specific challenge in particular? Maybe "Without using a for/while/do loop, (and obviously without using a 100 element array literal or something silly like that) make a function that prints the numbers from 0 to 99". "For extra points, don't use an if."
There's an http request that's been eliminated. You still have requests for your other files, but the JS is hosted in the local webDB on the browser after your first visit. Not sure about the diffing.... Maybe there's a hash that's run on the javascript prior to redownloading?
We now have a [video](http://www.youtube.com/watch?v=0ALVeCjsnB0) which explains things much better than the site does. :) To expand on what we are doing here: Mobile traffic is taking over, and all aspects of performance are critical. We decided to focus on JavaScript download performance and see how far down the rabbit hole we could go. DynoSRC addresses three problems with JS download perf: Problem 1: Mobile caches are much smaller than on desktop. Your code is more likely to be evicted from your users' cache before your next release/deployment, so return users often end up redownloading a previously cached file. To address this, DynoSRC stores your JS files in localStorage. What's cool about this is that not only do you have a 5mb cache all to yourself, you know if something is cached or not rather than "flying blind" so to speak. Problem 2: Mobile connections are slow. But it's mostly a latency problem -- a lot of people have 4G with faster download speeds than their home internet connections. Even on 4G, there is typically a ~200ms overhead for each HTTP request, which gets worse if it involves DNS lookups or redirects. Limiting HTTP requests on mobile is important, and one way of doing that is to inline your JS into your HTML page. But that quickly becomes unwieldy for anything more than a snippet of code, as your users will be redownloading that code with every page load. DynoSRC solves this by storing a manifest of what the user has cached in localStorage into a cookie. On each page load, the server checks the manifest, and inlines any JS files the client has not yet downloaded into the HTML. These files are then cached into localStorage and the manifest updated. Problem 3: When you have a release/deployment and files are version bumped, your users have to redownload those entire files -- even if only a small amount of lines changed for a couple of bug fixes. DynoSRC solves this by serving up differential updates. The server checks the manifest to see what version of a file the client has, then creates a diff between the latest version of the file and the version in the client. In this case, the inline JS file sent down to the client is simply a diff. The client applies the diff against its copy of the file, then updates its copy in localStorage and the manifest. In the case of ready-to-deploy files, where multiple files have been concatenated together, obfuscated, and minified. The server will detect minified files and beautify them, creating a diffable file. Other cool features of DynoSRC include: * Ability to serve your own files from disk, serve files from github repos, or even through bower. * Choose your own destiny: Don't want to serve files and diffs inline in your HTML? DynoSRC supports diffing through AJAX or JSONP, too. * dynoProxy: Normally you can't share localStorage between domains, but by using an iframe proxy and JSONP, you can establish a central server for DynoSRC that can! * More to come! Check out [the source](https://github.com/diurnalist/dynosrc) on github if you're curious or want to contribute!
&gt; There's an http request that's been eliminated. You still have requests for your other files, but the JS is hosted in the local webDB on the browser after your first visit. Yup, exactly. Regarding the diffing, the client reports back to the server via a cookie what files it has, including the version of the file. If the server sees that the version is outdated, it uses git to diff its own copy of the same file@version against the latest version of the file. We are hoping to switch from real git to jsgit for an all-JS implementation, but we're currently having problems with jsgit generating diffs for large files.
This is great! What did you use for managing CSS3 vs JS animation fallbacks?
This is seriously great work. I agree with the guy above saying that this is the way the web has to eventually work
Do modern web browsers not cache "static" files between page loads then? I thought that HTTP response 304 (Not Modified) was meant to handle. Is there a difference between the use of 304 and webDB? Thanks for explaining.
I have found loading data from `localStorage` to actually be substantially slower in some cases than loading the same data from the web, particularly on mobile devices. I haven't explored this enough to determine what causes this to happen or to investigate if there are ways to keep load times from `localStorage` to a minimum, but I can only assume that this particular approach is more performant than making multiple HTTP requests. Additionally, as a pretty heavy mobile web user, I'm not too thrilled at the prospect of every website I visit potentially using 5MB of storage semi-permanently. Still, this is a really neat idea and I look forward to seeing what can be done with it!
This was the hardest part, because CSS3 looks simple but when you try to combine more animations you will overwrite the CSS "transition" property and that breaks everyting. Also I found that jQuery animations work almost all the time better then CSS3, and has a cleaner execution, especially if you use "enableGPU" option (by setting it to "webkit or webkit&amp;mobile"). This realy bosts up the animations. 
Is this an option for you? http://jqueryvalidation.org/ Specifically: http://jqueryvalidation.org/date-method
This is an amazing library! Great job!
This is an awesome question. I did a bit of digging and have no answer. I think the best way to find out is to fire up wireshark and watch some http traffic. Edit: to be clear- I am not clear on the normal time period where a site's content is likely to stay in the browser cache. The 302 has been around forever and is largely a negotiation of client and server performance. WebDB is functionally addressing a different problem: long tern client side reliable file storage. I think this project is novel and interesting, but your question makes me think it largely solves an already solved problem. It probably is most appropriate only for node.js apps where you can't assume the existence of cache negotiations from apache or nginx. 
How browsers behave when they have a huge GIF with several minutes of streaming loading ? I found just this on the [Github](https://github.com/jbochi/gifstreaming) : &gt; Since the GIF file format does not specify the number of frames and the Trailer is never delivered, the browser will keep the connection open **(at least while it has enough memory :-)**. Nice idea though.
We tested streaming the gif for several minutes and we didn't had issues, at least in firefox and chrome, we're not sure what would happen if you kept loading it indefinitely, probably the tab would crash. Glad to hear you liked it!
Great read, thanks for the link.
This is pretty cool, good work!
Every day this guy posts a new "Day X" it gets posted on /r/Javascript, we are into like Day 11 or 12 now. Not only is Bower old news, this article is old news. edit: When I saw that you are the author of these, I was going to apologize. But then I went back to double check that I had actually seen this post in /r/javascript, and low and behold, 14 days ago you posted it. These articles are nice, I enjoy reading them and I am glad you are doing it, however, don't repost man, especially when you are reposting something you posted in the first place. I would have much rather you posted [today's topic](https://www.openshift.com/blogs/day-15-meteor-building-a-web-app-from-scratch-in-meteor).
I would like to see an updated version for 1.2, also it sounds like the author doesn't necessarily understand all of the concepts he is grading Angular on..
Disclosure: as you can tell from my name, I'm one of the authors/maintainers of DynoSRC :) Good questions indeed. You are correct that 304s and vanilla HTTP caching exist to stop clients from downloading fils again. But, mobile HTTP caches are currently rather small, and are shared across the entire browser session. Meaning even if you visited a site on domain A yesterday, and you visit a lot of other sites afterwards, when you return to domain A that content may have been evicted from the cache. Here's an article to explain a bit more about the 'current' (article is about a year old) state of caching on mobile: http://www.webperformancetoday.com/2012/07/12/early-findings-mobile-browser-cache-persistence-and-behaviour/ Moreover, to even get the 304 back from the server you still have to make a request to know that the server's content hasn't changed. (Yes, browsers often won't even do this if they know their cached copy is w/in the Expires time set previously by the server, but there are problems if your cache got evicted.) On mobile, any request has a huge overhead. This is why we made sure that the library supported easy inlining of JS assets. If you do it this way, your content size is bigger, but you have whittled your HTTP request down significantly, as you are no longer establishing connections to download JS separately. In short, while existing vanilla HTTP caches are definitely underrated and underutilized, we don't quite believe they solve the issues on mobile, and so our solution provides a way around that. It is important to note that we designed DynoSRC so its use can be fairly flexible. You can use HTTP caches and 304s to download assets, but still use DynoSRC for sending down differential updates to those assets. Each piece of functionality is pretty isolated. We were shooting for a general-purpose, swiss-army solution to what is inherently a complex, shifting problem.
This is kind of 'how to do a common thing the hard way', but as a capability demo is awesome. It's a shame that we have the memory issue mentioned by /u/ZeKWork. Great job, folks!
Using "dynoProxy" could I effectively tamper with the stored javascript from another domain's localStorage to inject my own javascript onto another domain? I hope that storing the javascript as DynoSRC does will not lead to XSS attacks. 
Thank you, but where would I put: /\d{1,2}\/\d{1,2}\/\d{4}/ in my code? &gt; does the date have to be in the future or past? within 100 years or anything like that? Say if you simply want to find out if the returned value looks like a date in the format dd/mm/yyyy Ideally, I would like it so that if a past date is entered, an alert box will come up saying "Please pick the present day or one in the future". I don't mind there being a limit on how far into the future they can pick.
The idea with dynoProxy is that you would set up your own instance that you control, and use it with your own domains. This is because you've only got 5mb for localStorage. This if fine for a few sites but not so much for a few dozen or more. The only JS you can tamper with is your own private localStorage cache specific to your browser -- I don't believe there would be any XSS vulnerabilities there, but please let us know if you can think of an exploit! It's also worth noting that the functionality offered by dynoProxy can be replaced by implementing proper CORS headers between your domains.
Way I see it, there's nothing wrong with pulverizing an ant in order to learn heavy machinery. 
We do not currently but we are hoping to gather data like that soon!
Thanks! Yes, we made this basically as a joke, but also to show (and learn) what you can do with the latest web technologies.
Cool. I'm really curious to see how it performs with, say a Drupal site, and 4 aggregated, minified files of lets say 15Kb each. Has to beautify then diff each one... sounds time consuming compared to just sucking down the source files.
This is a good solution. There's no reason to continue updating the DOM every time the loop runs.
One thing that will definitely speed up eval'ing from localStorage is being sure to do it in the &lt;head&gt; before any other resources (such as CSS files or favicon references etc). Today's browsers will start downloading the resources it sees in the HTML as it downloads that HTML. If you do something relatively expensive like execute from localStorage *before* the browser is spending CPU and other resources by making those further HTTP requests (and interpreting their responses as they load, etc) it will execute much faster because the CPU can focus on that one thing. I found this out because we were once loading a Typekit font that was like 300k when uncompressed, and the font came down the wire from Typekit as base64 data-uris. This was expensive for the browser to decode, and so loading it in the &lt;head&gt; before any other assets led to a much faster page (by all metrics - domready, on load, Speed Index, you name it) than loading it anywhere else. This was true even for Chrome on a very beefy MacBook. 
Beautification is done on the server, and all generated duffs are cached to disk. :)
I would argue that (at least in the near future), Meteor intends to fit the first three categories. The popular meteor package [iron-router](https://github.com/EventedMind/iron-router#server-side-routing) allows server-side routes, with server-side rendering coming in the future (awaiting the release of the [new meteor template engine](https://github.com/meteor/meteor/wiki/New-Template-Engine-Preview#new-template-parser)).
Well the obvious downside from a practical standpoint right now is that it's still in an early preview state with major changes to the API coming before 1.0. The new template engine will break many existing apps, though the API is only changing slightly (the change is definitely for the better, with fine-grained template updates rather than complete template re-rendering). A big downside for existing applications is that Meteor is truly a full-stack solution. It is difficult and pretty much pointless to try to integrate Meteor into an existing RESTful backend. Similarly, it is difficult (right now) to tie in other templating engines or client-side MV* frameworks. The Collection system uses MongoDB, and right now that's the only supported database. This shouldn't be too hard to adapt to other NoSQL stores, but I would expect it will be challenging to adapt it to SQL DBs. This is all coming in the future, but it seems like it's on the back burner for now while other challenges are tackled. I'm sure there might be some others. I've heard someone say that they were wary that many of Meteor's selling points sound a lot like the selling points of ASP.Net WebForms. I'm not sure I really agree with that, as the two techs are fundamentally different in how they achieve only somewhat similar results. The "magic" of Meteor in itself can be enough to make people wary. It does *a lot*, and it is opinionated. For example, there have been concerns raised about its "latency compensation" system, where the client can assume an action has a specific result before it receives a response from the server, and then eventually override the client decision once the server responds with a different result. That said, I love it so far. It's truly a joy creating applications with Meteor. It's nice to be able to focus on the business logic of my application, with much less of my time being spent on boilerplate and glue code.
for meteor, i've wondered about its ability to scale out the push notifications for writes in a large graph. I think exposing the DB to the client will add a lot of stress, but i'm just guessing from the gut. i guess once you get to the point of having graph scaling issues, its fine to address it as a separate backend service?
Cool. If the performance is there I might write a Drupal module for it and use it in the site I'm building.
The DB isn't really exposed to the client, just a common API. The server is still really the only place with direct DB access. The client only receives updates for published data that it is currently subscribed to. So I'm not sure why this would be any more of an issue in Meteor than in any other system, unless I'm misunderstanding you. I'm certainly not an expert on Meteor's DDP system. These cards on the roadmap might be relevant to your concerns: https://trello.com/c/rR8i3zcB/10-improve-performance-of-realtime-mongo-connector https://trello.com/c/fzElNAOC/56-large-dataset-support-in-client https://trello.com/c/dY1liK9h/71-more-server-side-flexibility-for-working-directly-with-the-databases https://trello.com/c/R0lxLhQq/73-ddp-version-2
i concur
When I drop a xls file on the box, my browser just downloads the file. Chrome 30.0.1599.101, OSX Mavericks. Whoops, Chrome just froze. Might need some work.
Sorry, but not signing in with anything until I decide to try the product/service. The complete lack of information regarding the offering precludes me from even considering using the project.
Sweet! Thank you for a complete explanation of the problem you're trying to solve and expounding more on existing solutions and their inadequacies. So the next question I have is how does the server handle differential updates - specifically, how does the server know what the difference is between the client's cached version and the server's copy?
Thanks for explaining this a bit more.
A friend of mine stripped out Mongo and replaced it with RethinkDB. If that interested you check out, https://github.com/tuhinc/rethink-livedata
&gt; jQuery animations work almost all the time better then CSS3 Are you sure about that? CSS animation is supposed to be a lot faster than JS. [Here's a test case.](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/)
Your GitHub page can really use a readme / docs.
The client tells the server which version it has via a cookie. The server then checks that version vs. what is configured on the server as 'latest' (we call that the HEAD). So the diffs can be computed by diffing against those two versions of the file. When the client gets the diff and applies it, it updates its cookie to the latest version. If the cookie is not set, the server will simply send down the full file as you'd expect.
It's all very dubious. 
That is the single coolest thing I've seen ever ever.
This is really promising. Great work! It works (very quickly) in Chrome Version 30.0.1599.101 m. I get this error in IE 11: *Object doesn't support property or method 'readAsBinaryString'* Line: 249, Column: 5
IE error line numbers are much better these days. Oh the days of error on line 494584839394949939 of a 20 line file. 
Ah, I see what you mean. I think the difference here is really how Meteor works though. The primary function of the server in Meteor is to serve data (from the DB or any other reactive data source you may have). The JavaScript, HTML, CSS, and other static assets are sent once and cached in the browser, and are only sent again if they change on the server. So I believe each meteor process is essentially a socket data server, with the secondary function of serving static assets when needed. Scaling in Meteor is possible thanks to [MongoDB's Oplog](http://meteorhacks.com/lets-scale-meteor.html). Here's a relevant quote from Geoff Schmidt that I found in the roadmap: &gt;Multiprocess works fine today and people are running it in production. At MDG we've benchmarked it up to 20 simultaneous server processes. &gt;We're not necessarily going to move the database connector out into a separate tier for 1.0 as having it in-process may turn out to be just fine with oplog tailing. Again, I'm just a Meteor user and not an expert at all, so I'm only going by what I've picked up. I haven't gotten a chance to really read through a lot of Meteor's internal code yet.
Success using that link and xlsx in IE11.
great link, this is what i was looking to learn more about :-D
Heh, Atwood's Law in action.
I should clarify that I didn't (and don't) intend to devalue your work or to dismiss it. I am simply amazed at everything we are able to do in purely javascript these days.
You can create any kind of animation. Parallax sites also.
I always test any project that I build with CSS3 on and off. Even on mobile devices I found that jQuery works a little better. Can not tell why. The CSS3 should be faster because is native. But for me is not.
I'm just starting to learn Angular. I'll have to keep this in mind.
When I click the "Interactive Demo" for XLXS, it brings me to the "XLS Live Demo" page.
Sometimes I feel like /r/javascript should just disable link posts (if that is even possible) so that people have to give some fucking information about what they are posting.
So a couple things - people often think browserify does this but it doesn't make the kind of environment agnostic code people often think it does, as it can't fix the inherent limitations on the browser. (Its great and I use it a huge amount, it just isn't quite as magical as people think) - I've helped work on an isometric database, pouchdb which is couchdb using indexeddb or websql for the client and leveldb in node
You shouldn't be replacing the file directly. The new values should go to a new file, and that file should only be moved/renamed to the old file once the HTTP transfer has successfully finished. It doesn't matter whether it's synchronous or asynchronous, the same principle applies equally in both cases. 
Update: Someone on Hacker News referred us to this project, which is basically exactly what we built, except better as it handles more than just JS (which we are planning on adding as well): https://github.com/plotnikoff/connect-diffable This guy beat us to the idea by 3 years! :o
Hi hypoglycemic First, at a glance it seems you are depending on jQuery. You should specify that in the fiddle's left panel -&gt; Frameworks and Extensions. This way jsFiddle will load the library for you. When creating an element using the approach you describe here, the second argument is attributes for the element. "on" is not an attribute for an img element and will not do what you intend to do. "on" is a method on the jQuery object/s Remove that. Instead try one of these options $("&lt;img/&gt;", { "class": "fullscreenButton", "src": "image.png", }).on("click", function () { // code }).appendTo($controlsBar); I prefer to cache the object in a variable // Create element with attributes var fullscreenButton = $("&lt;img/&gt;", { "class": "fullscreenButton", "src": "image.png", }); // Add the click handler fullscreenButton.on("click", function () { // code }); // Append the element to the parent element ($controlsBar) $controlsBar.append(fullscreenButton); **Edit:** formatting
I think there's only a handful of people here that would agree; but I agree. It would be helpful to define a standard for server-side API that's inherit to the language. The easiest way to think of it; maybe too simple is to leave the EMCAScript standard alone and introduce just one new object: DYLIB. It binds C++, C, Java, C# (and possibly others) and binds them to JavaScript types. In addition it defines a standard for loading other javascript libraries and their dependencies in a namespace'd manner. Need GZIP? 99% of computers already have an existing installation of zlib. &gt; zlib=dylib.load('libzlib.dylib') or &gt; zlib=dylib.load(' libzlib.so') or &gt; zlib=dylib.load('ZLIB.DLL') Then you have your exports from the dynamically linked module: &gt; var decompressor = zlib.define('deflate',[{type:'uint8array'}],[{type:'uint8array'}]); From there the world is your oyster. Not a lot to do but let the open source community figure out how to map the various libraries and software already on computers to do native speed operations or build a library in javascript, c, c++ and use it in one common platform. I should say this has been done before. node-ffi tries to accomplish this. There's obj-c bindings too. In addition you can find ctypes from Mozilla (I believe?) that does this. Support for C++ is a bit clunky but there's also edge which binds with C#. All-in-all there's already a lot out there. I wish there was a distrib that gave cross-JS engines with just one standard dylib object that could dynamically bind to C/C#/C++/Obj-C.
&gt;Just imagine: #!/usr/bin/env js Sing it brother!
I was on the fence until this final line.
you suggest putting a cgi api onto node. my concern here is the single threaded nature of node and the fact that several of the languages you mentioned here are not managed (VM). Consider a runtime error in your c code, potentially this could have corrupted your stack, how do you recover from this? You don't want to kill the node process (so thread spawned no problem), but at the same time you don't want a situation where you could execute arbitrary code on your web server due to some stack overflow. 
I am going to be brief because I am at work so this is what I see at first glance: * All your variables are defined without the var keyword which makes them globals which could (and probably will) lead to weird effects caused by other code overwriting them * setInterval has no interval parameter * Using setInterval instead of requestAnimationFrame * Reading and writing scrollTop causes 2 layout operations. Ideally you will want to read scrollTop() once on initialization, cache that value and update it on each run of moveMe() and use the result to set scrollTop(). * It looks like because moveMe() runs independently of the event listener it will always update scrollTop even when the devicemotion event isn't fired. It simply uses the last values for ax and ay.
thanks heaps for this. I have an update: http://jsfiddle.net/QbBWB/1/ Building on what you went through, I have most everything working as expected now, which is super awesome. Threre are some redundancies in there but it is pretty close to as good as I am willign to put in for it for now. Cheers for help.
Yes and No. Yes when you need a server, no when you don't. In my present engagement I used node to drive a code generator; this could have just as easily been done using /usr/bin/js if such existed.
Very nice. Any chance that this will be usable with an XMPP-FTW backend at some point?
Converse.js uses Strophe.js, but the coupling is loose enough that it could be replaced with something like XMPP-FTW. What would be the benefits of doing this? Any time spent on this would be time taken away from adding other features, of which there are many I'd like to work on: - Audio/Video chat - File transfer - User defined settings - An intelligent feature bundler/builder - Improved UI (resizing and minimizing of chats) Of course, it's open source so someone else is welcome to do it and I'd be happy to assist.
Since you're always returning false if it's invalid, you can just place your alert at the bottom of your validate function. That would work because if it were invalid, the function would have already returned false, and missed the alert
So, at the end of the function, I'd have this? else { window.alert("text here"); }
Got it to work, thank you :). 
The explanation seems to be lacking, given the context: &gt; But instead of a string a function can also be supplied. AngularJS will then call it and redirect to its return value. var redirect = function(skip, url) { window.location.href = url }; So... does Angular just ignore it if there is no return value? Kind of odd to point out the bit about return value, and then obviously not return a value.
You wouldn't need the else, just the alert. If one of your fields was incorrect, you would fall into one if the previous if statements, right? Since they all have a return statement in them, your code wouldn't hit the final alert :)
For the lazy: /r/emberjs --- I provide direct links to lesser known subs mentioned in the title if one isn't already provided. Let me know if I need to try harder: /r/LazyLinkerBot
https://code.google.com/p/mustache-security/wiki/AngularJS#The_State_of_AngularJS_1.2.0
Thanks!
I think strophe is a great pick. Converse is self-contained and turnkey enough to not need to expose its connection object. If you're going through the trouble of pre-binding and/or passing converse a pre-authenticated connection, do you really want a library which sugars away the xmpp protocol as XMPP-FTW does?
I think you're not understanding what occurs when you do window.location.href. He's manually setting location.href and that will cause the href to change. Any code after it has 0 value as it won't execute, since we are switching the page. If you try it out on this page you'll see it refresh.
&gt; Any code after it has 0 value as it won't execute If only you were correct. Try this; the online code fiddlers won't handle it properly, so you'll have to do this the old-fashioned way and create an HTML file yourself... &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;script&gt; window.onload = function(){ document.getElementById('foo').onclick = function() { window.location.href = 'http://google.com'; window.location.href = 'http://yahoo.com'; alert('Care to guess which site will load?'); }; }; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id="foo"&gt;click me&lt;/button&gt; &lt;/body&gt; &lt;/html&gt; Either way, my point is it's kind of confusing to even mention the return value, but then neither use it nor address why you might not use it.
Who was missing it?
In general, a better form validation pattern is to notify the user of *all* validation failures, not just the first one. This usually means pushing validation failures onto an array or object, and checking if that array/object is empty to see if validation has passed. It looks something like [this](http://pastebin.com/sRE1xxNH). This way, the user doesn't have to go through a cycle of "oh, missing this field. Fix and hit submit. Oh, missing this other field. Fix and hit submit. Oh, missing this *other* other field...."
We actually started Arrays in class today, we just went over push and pop, console.log and document.write and some other stuff. It was really cool, but I couldn't think of a way to utilize it in my project. This is great, thank you. I have some questions though, (the code works, but I want to know why). What does the "inp" do? Also errMag, what does that do? ~~One more, what does this bit of code do: += " * "?~~ Edit: Just realised the += " * " displays a star with the error, when the user leaves out a required field. 
Cool, but it is painfully easy to inject arbitrary code.
Would this library be suitable for something like a live-support page? I imagine, if I create some users on my XMPP server and feed them to the page through AJAX, it could auto-login. Is this correct?
I missed it. That's why I wrote it. I did not found a start to end tutorial on Meteor which covers authentication, CRUD operations, small things like where MongoDB is running, application layout, deployment. I tried to cover all these in this tutorial. Hopefully this will help others.
The calculation doesn't work in Chrome. ("Uncaught SecurityError: An attempt was made to break through the security policy of the user agent.") Firefox seems ok. So does IE. =DATA={}; is fun to put in any field. ;)
* jQuery is not a framework (it's a library) * I'd say checkout Knockout as your first dive into MV*, as it has a low learning curve * Learn the new stuff in ECMAScript 5/6. If you don't know what that means, you may be "coding straight javascript" back in the ECMAScript 3 days * Look into modularizing your javascript, require.js is very popular * Grunt would be good as well
if you know javascript the shit in jQuery should be pretty easy, i found it so, although a bit weird...jQuery simplifies to the nth degree an awful lot. Think about if you really need to use MVC, it isnt for all projects..a simple website really shouldn't use MVC as it adds a lot of overhead. Basically MVC breaks down your project into some definite areas of responsibility. Use what you know to make money, when something bigger comes up learn that. Mind you like magenta_placenta says request.js is fucking useful for everything - even small projects (makes you think about how MVC will work at least)
You should really checkout Frame.js. It is a slight wrapper on top of require.js that makes the syntax and setup much easier: https://github.com/bishopZ/Frame.js
Pick a project. Learn whatever you need to finish that project. I find little value in setting out to learn a framework for its own sake. The goal should be to finish your project, and learning is incidental to that goal.
Question. Does it make the XMPP connections through the web sever/machine it's actually stored on? Or is it actually making the connections from the end users browser that it's running in?
There was some framework discussion in this thread I started a few days ago: http://www.reddit.com/r/javascript/comments/1pvpw5/whats_your_favourite_mv_framework_and_why/ But I agree with /u/Lophostrix
It's painfully easy to inject code into any page. F12 and while (1) { alert("I PWND myself") }
Thoroughly examine design patterns and their application in javascript. You will be suprised at how long they will get you towards understanding a lot of the frameworks that go around.
this is a nice introductory tutorial with some good explanations. I started working on some meteor stuff months and months ago and found information very limiting at the time. Ultimately just using the demos that come with the installation as my learning tool. your post, though, has inspired me to wrap up some freelance work this evening and get working on a small meteor project I've had on my mind.
Its javascript, its running on the client.
Sounds awesome! I would love to see a comprehensive tutorial. Some example analyses/tests, where to look up commonly tested SNP's (and what diseases they are associated with), how to interpret results, etc..
Yeah, I make a point of not exposing the connection object because it contains sensitive info like the user's password. I think one can hack on Converse without caring too much about Strophe.js or XML (although you can't ignore it entirely). I personally don't mind XML at all. I haven't used XMPP-FTW and I guess it's goal is to lower the barrier to entry for web devs wanting to work with XMPP, which is commendable. Like you, I however don't see it making a huge difference in Converse's case.
Yeah, Telomere is awesome, and what's more... that album is from 1997. I downloaded two albums from emusic probably about 6 years ago.
The connection is made (via HTTP longpolling) from your browser, to a BOSH server (https://bind.opkode.im) which then connects to an XMPP server. The BOSH server acts as a bridge between XMPP and HTTP.
Yes, there are already people using it for exactly that use-case. EDIT: you can try different approaches. You can have anonymous logins, or if your users have accounts on your site already, you can use prebinding. To prebind, you need a corresponding XMPP account for each user account. You then authenticate your user to the XMPP server, get some special tokens which you then give to Converse.js and your user will then automatically be logged in to chat as soon as the page loads. http://conversejs.org/docs/html/index.html#server-side-authentication
The comment seems oddly appropriate to this thread.
I've been using SNPedia and OpenSNP as good resources for finding interesting SNPs. There are really simply ones where you just check if an SNP = a certain genotype but there are also more advanced ones that check multiple SNPs (genosets as SNPedia calls them) for multiple values and give you a % instead of a true or false. Once you have your criteria ready you can make a node module based on this boilerplate https://github.com/genomejs/genoset-boilerplate Example of a simple 1 SNP check: https://github.com/genomejs/genoset-norovirus Example of a multi-SNP check: https://github.com/genomejs/genoset-male
What grunt plugins do you use that you can't go without? We have a list going of plugins we need to write and I'll add your input to it. The great thing about gulp is that since plugins are really easy to write (due to the simple stream format) we can match grunt pretty quickly in this regard.
Works fine in Chromium 30.0.1599.114 (Ubuntu 12.04), fwiw.
It's a fair question. My experimenting around with this i've found a few things. I've taken a vanilla D8 shell and modified it to include only two things: 1. Binding to C/(some C++)/C# libraries (obj-c to come). 2. And a new "type" in Javascript called "Memory" allowing direct memory access from JS. This seems somewhat crazy but i've figured out ways of making this very safe from stack corruption. Here's a working example. &gt; var dynasm = new Memory({size:1040}); &gt; dynasm.uint64[4] = dylib.load({policy:'c',library:NULL,symbol:'fopen'}); &gt; dynasm.uint8[4+4] = dylib.compileffi({policy:'c',p.uint8[4]}); &gt; dynasm.uint64[4+4+512] = dylib.load({policy:'c',library:NULL,symbol:'fwrite'}); &gt; dynasm.uint8[4+4+512+4] = dylib.compileffi({policy:'c',p.uint8[4]}); &gt; &gt; var fopen = function(path) { &gt; dysasm.uint64[4+4+4] = dylib.address(path); &gt; return (new Memory({address:dylib.asmjmp(dynasm.uint8[4]})).uint32[0]; &gt; } &gt; &gt; var fwrite = function(fd, value, size) { &gt; dysasm.uint32[4+4+512+4+4]=fd; &gt; dysasm.uint32[4+4+512+4+4+4]=size; &gt; dysasm.uint8[4+4+512+4+4+4+4]=dylib.address(value); &gt; } What's nice is the Memory object allows me to place any typed (and range checked) limitations on data coming in. The reads/writes to memory are type controlled, checked for range, all through bit modifiers and typed arrays in javascript. The overhead for this is nearly nothing. Literally its around 2 asm calls more than normal. So you can't knock around memory in some one else's space (at least in javascript). In addition the FFI implementation dynamically compiles an execution "template" for any symbol/policy needed that can be reused. This makes FFI calls expensive when compiling, but not when running. In-fact FFI calls once compiled are exactly the same cost as normal jmp/exec to a dynamic library in compiled C/C++. So I haven't really answered your questions. 1. How are threads handled? Any ffi call (E.g, dylib.asmjmp) jumps to a completely new thread by default and begins executing, in fact you cannot make a dylib call on the V8 thread. V8 will wait for the process to continue; can timeout if needed; or can leave a callback for asyncronous behavior. New threads are monitored and reported to a global callback you can establish in dylib. Optionally, you can kill them, pull them, stop them, etc. 2. How do you prevent seg fault/core dumps etc? By using lightweight threads in V8 we call issue pulls. When a function outside of javascript is executed, its by default on a different thread. If the function seg faults or core dumps a signal is sent to the main V8 thread and a new JS exception is raised informing the caller it failed. So wrap your outside function calls in try { } catch() { }. 3. How is memory safe? Javascript DMA is limited by range and type. Trying to access outside of the memory you've requested results in an error. In addition malloc/calloc/realloc calls are monitored through the OS to sample for memory leaks (similar to how Xcode/VS work). This is an optional thread you can turn on to monitor memory usage. You can also return back un-free'd memory blocks being monitored by malloc, that were issued by a child thread spawned and not managed by V8. If a function leaks memory its just free'd afterwards. In addition memory blocks can be virtualized with performance penalties if you're running code you don't trust. This is however, a terrible, terrible idea. 
works fine in chrome canary on windows 8
Using Chrome 31.0.1650.48 m in Windows 7. Calculations seem fine to me.
=1-2 breaks it, says undefined instead of -1
yeah the grammar only supports addition and multiplication :/
Good thing we don't have to worry about XSS.
Okay that makes sense, thanks. I'm wondering what is the purpose of the inp? We haven't used it in class, Im, just wondering what it does, like why do I need to use it? I hope that makes sense, I'm just curious as to what it does. For example, what is the difference between "Departure" and "inpDeparture" 
Some people prefix their variable names with semantic additions. In this case inp serves as a reminder that the variable contains an input element. Likewise it's a common practice to prefix jQuery objects with $, for example $el in Backbone.
Ah great thank you. I though it was some sort of command in the script. This clears it up and I can see how it can be useful :) 
Using chrome 31.0.1650.48 m on windows 7 x64, everything seems to work fine for me
Oh ok, still pretty sweet
You can learn the JavaScript language without a deep understanding of HTML and CSS. However, you probably won't be able to *do* much with JavaScript without them. I recommend reading through at least the introductory and maybe intermediate sections on the MDN guides: https://developer.mozilla.org/en-US/learn/html https://developer.mozilla.org/en-US/learn/css https://developer.mozilla.org/en-US/learn/javascript Note: these are a collection of high quality tutorials and references for HTML, CSS, and JS. There is a lot of overlap between them. Basically, I'd recommend being familiar with at least ~80% of [the HTML tags](https://developer.mozilla.org/en-US/docs/Web/HTML/Element?redirectlocale=en-US&amp;redirectslug=HTML%2FElement) (focus on the non-HTML5 ones first) and at least ~50% of [these CSS topics](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference?redirectlocale=en-US&amp;redirectslug=CSS%2FCSS_Reference) (focus on the non-CSS3 ones first) before jumping into JavaScript. Remember that for a while, 90% of what you'll do in JavaScript is manipulating HTML elements and their CSS rules. If you feel that you would be comfortable doing that now, go ahead and try out some of those JavaScript guides. Also, the best way to learn is to pick a project that you want to make and do it. Think of something you'd be interested in making, and figure out how to make it.
Thank you livingmonstrosity
Oh man, I remember those days. Remember Lotus?
Pretty awesome! I mean, obviously there are flaws in it (e.g. XSS), but 30 lines of JS for a spreadsheet is pretty cool. Also totally didn't know about the "with" operator. Clever use!
You should start making complex applications in JS yourself. Learning a framework is pretty easy in comparison. If you understand MVC (and if you don't, you should start there), picking up any of the major frameworks (e.g. Backbone, Angular, etc.) is pretty easy. Ember does a lot of stuff for you, Backbone doesn't. Angular is its own game, but anyone intimately familiar with JS will come up to speed very quickly regardless of their framework background. The choice of framework is pretty irrelevant unless you're hoping to get hired as an architect of sorts. Making more complex applications in JS will help you appreciate some of the problems that companies encounter with making complex JS apps, which is invaluable. You really start to understand why things like AMD are useful. When I was interviewing awhile ago, the most frequent question I encountered was: "What do you like about JS? What do you hate?" Do you understand prototypical inheritance? What are the tradeoffs of dynamic typing? Maybe I'm crazy, but I think if you understand the forest then the trees are pretty easy to pick up, you know?
Oh thank god I saw yahoo's gear.js but it was tied heavily to yahoo infra. It took a day of reading on how to pipe things within grunt and even then it involved creating a task within Gruntfile.js through the task then executing it.
Yup, Javascript allows you to use a single var keyword to define multiple variables, comma delimited. 
&gt;&gt;*var DATA={},* creates a new object &gt;&gt;*INPUTS=[].slice.call(document.querySelectorAll("input"));* uses the slice method of a new Array on the result of retrieving all the `&lt;input&gt;` tags in the document. As querySelectorAll returns an object of type `NodeList` this coerces the result to be an array 
you are a brave one. what is in the current canary release that isn't in production?
you're a drunken faggot
the scroll bars and form elements look different on canary and they got the chrome apps first, also the chrome notifications
I remember Visicalc.
Neat. Can you share the original PEG.js grammar?
Could you post a few lines and an example of the desired output?
I've used regex and tried to separate the values, but there's an extra space between the last two numbers.
could you give me a sample of your file?
Certainly http://jsfiddle.net/52227/
(\d+) You can figure it out from here.
for 2D array e.g. // [[1, 2, 3, 4, 5, 6], // [7, 8, 9, 10, 11, 12], // [13, 14, 15, 16, 17, 18]] var nums = file.split(/[\r\n]+/); for (var i=0; i &lt; nums.length; i++) nums[i] = nums[i].match(/\d+/g); for a single array containing all numbers: var nums = file.match(/\d+/g); You'll need to cast them as numbers if that's necessary. **Edited upon seeing sample input. If you want to just change one line of your existing code you can add a plus to your regular expression. /[\t\r\s\n]/g =&gt; /[\t\r\s\n]+/g
Interesting, is there any performance benefit in doing this? Or is it just a stylistic preference? 
i know how regex works lol. it's returning it correctly, but there's two random spaces still leftover, and i don't know what character they are/how to get rid of them
that's doing the same thing as what i currently have. it's returning the correct thing, but there's two random spaces, one between the last two numbers, and one after the last number. check out the fiddle i posted above. thanks!
\d doesn't match spaces, you are trying to remove the things you don't want, try just getting what you do what.
That works, but there's still one last space character at the end for some reason. I hate to take the cheap way out, but i'll just pop it off the array until I figure out what the problem is. Thanks for the help!
See my edit. The reason you have extra spaces is because you have two whitespace characters in a row (in the input) and you're replacing each with a space. Adding the + to the regex means that it will turn '\n\n' into a single space as opposed to two spaces. That said, if I just wanted a string of numbers separated by spaces I would go with this: file.match(/\d+/g).join(' ');
I don't think there's a performance benefit to it, and it's mostly a stylistic preference, but an argument can be made that it helps keep good coding standards in check, but don't expect to bring that up in a developer group and not open a can of worms. :p
http://jsfiddle.net/dL7WG/2/
works fine in Chrome Version 31.0.1650.48 m - Windows 8.1
Yeah, this is cool. I mean, kind of useless, but awesome in a philosophical sense. JS = roxor. 
Here is another version that is more DOMish ... /* This code assumes you have a DIV on your page like this: &lt;div id="validation-message"&gt;&lt;/div&gt; This code was typed 'off-the-cuff' with no testing. This message is more DOMish and gets away from innerHTML */ function validate() { var newFocusField = null; var form = document.form; var errMessageHome = document.getElementById("validation-message"); function clearErrorMessage() { while (errMessageHome.firstChild) { errMessageHome.removeChild(errMessageHome.firstChild); } } function setErrorMessage(msg) { var textNode = document.createTextNode(msg); errMessageHome.appendChild(msg); } function checkRequired(field, msg) { if (field.value.length === 0) { setErrorMessage(msg); // If we don't have a value, assign it. newFocusField = newFocusField || field; } } function checkIsDate(field, msg) { // I have no idea where this 'valueAsData' // comes from or means. I'm leaving it in // place, however. if (field.valueAsDate) { setErrorMessage(msg); // If we don't have a value, assign it. newFocusField = newFocusField || field; } } clearErrorMessage(); checkRequired(form.destination, "Please enter your destination"); checkRequired(form.from, "Please enter where you will be departing from."); checkIsDate(form.departure, "Please choose your departure date."); // In ECMAScript 3, 'return' can't be used directly as a property name. // ECMAScript 5, it is fine. checkIsDate(document.form["return"], "Please choose your return date."); // The first field with an error should get focus if (newFocusField) { newFocusField.focus(); } } 
XSS is when people inject code through the client *to the server*, so that code is then run on other people's machines. As long as you sanitize the input on the server, there is no chance of XSS. Any code that you can inject in there you can also run in the browser console, and no one would be stupid enough to XSS himself.
You left out a pretty fucking big prerequisite. What you say is true **only** if you don't sanitize input on the server, which you should be doing anyway at all times.
Not just eval(), but with() {}, and in the SAME line. He knows no bounds.
sweet, thanks abramz! quick little followup... how did you know that? is there a reference somewhere? or is this a relatively well known command from here (or elsewhere)? thanks again.
Do you mean Require.js?
It is not in my list.. Any reasons why you think typescript is worth learning?
[Abacus](http://www.youtube.com/watch?v=CvsnftXXKdw)
That is most likely the use of localStorage. Enable cookies or expect broken internet. I recently had to patch this on a site I maintain by wrapping calls to localStorage in a try catch and alerting the user that I would not cater for them.
I remember Quattro Pro.
Once you've split the input into lines, try the following regex on each line: var num = line.match(/(\d)+/g); *num* should contain an array of all the numbers on the line, or be null if this was a line without digits.
Why? Serious question.
i have but it returns a large number for some reason
Malicious script injection.
Yeah, this is not a good idea on reddit. XSS, guys.
I don't quite follow, how would JS lead to injects?
This particular instance wouldn't really result in it but using eval() in other sites that have been compromised lead to malicious scripts being executed and launched at the user. OP was just pointing out the problems it has caused folks in the past.... I think. 
I mean I don't understand how it could at all. Could you direct me specifically to what I should be reading about? I.e. just a name of a topic/site/book
Haven't heard of it before, but a quick look at the front page - cant quite understand your problem with Angular and needing a new 'vocabulary'. One of the things I liked about Angular when I first started learning it, is that much of it immediately made sense (there is a bit of a steeper learning curve once you start getting more advanced with it) - but with a quick look at the markup / javascript I can tell what's going on. To me, how they are handling the clicking of a description - I find something like angulars 'data-ng-click=doSomething(item)' to be more untuitive and easy to understand than var TodoBoard = can.Control.extend({ /// extra stuff removed '.description click': function(el, ev) { can.route.attr('id', el.parent().data('todo').id); } I know some people are put off by having that type of markup in their templates and are a little 'how is this any better than "onclick=alert('awful practices!')"; but it's something I've grown to like quite a bit. But in Angular, the equivalent could be something along the lines of. &lt;ul&gt; &lt;li data-ng-repeat="item in items"&gt; &lt;input type=checkbox data-ng-model="item.checked"&gt; &lt;span data-ng-class="{done: item.checked}"&gt; {{item.description}}&lt;/span&gt; &lt;span data-ng-click="removeItem($index)"&gt;X&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; controller: $scope.removeItem = function(index) { $scope.items = $scope.items.splice(index,1) } I can also see something like having '{{#if done}}done{{/if}}' in the middle of a class tag turning into a nightmare to maintain later on (although some of the things you can do in Angular can lend to the same problem), but if the logic for which class to add ends up getting more complex, ie: if this, and that, and some other thing - then use this class, you can pull that out into a function and have &lt;li data-ng-class=someFunction()&gt; -- and put it into the javascript to figure it out. This is also useful if you have several things that need to get the same class based on the same logic. Not saying that CanJS is bad --- could be a fine framework, just find the thought of 'I don't like Angular because I need to learn a new vocabulary' to be odd, as for the most part - the reason why I was attracted to Angular is because it felt the most like plain-old JavaScript in many ways.
Of course, but I'm assuming the end goal here is to have spreadsheets you can share with other people. There's a reason "don't use eval" is pretty much a hard-and-fast rule. Anyway I don't want to detract from my overall point, which is that it's pretty cool.
eval() runs code. So if you use this on a website, if user A puts malicious code into a cell, and user B opens the spreadsheet, the code will run. You should never run user input as code, or show user input without cleaning it first.
It is a comment in the js, but sure: start = additive additive = left:multiplicative "+" right:additive { return left + right; } / multiplicative multiplicative = left:primary "*" right:multiplicative { return left * right; } / primary primary = integer / "(" additive:additive ")" { return additive; } / fun:fun "(" arglist:arglist ")" { return FUNCTIONS[fun].apply(this, arglist); } / cell:cell { return DATA[cell]; } fun = name:[a-zA-Z]+ { return name.join("").toUpperCase(); } cell = col:[a-zA-Z]+ row:[0-9]+ { return col.join("").toUpperCase() + row.join(""); } arglist = additive:additive !"," { return [additive]; } / additive:additive "," arglist:arglist { return [additive].concat(arglist); } integer "integer" = digits:[0-9]+ { return parseInt(digits.join(""), 10); }
&gt;eval() runs code. So if you use this on a website, if user A puts malicious code into a cell, and user B opens the spreadsheet, the code will run. How? There's no server side code running and unless you have server access how could you change the JS file? Even if someone took this code, it's purely JS, HTML and CSS, I don't see how it could ever be changed by user a to mess with user b unless the page accepts code that isn't sanitised or unless that JS was changed on the actual server in which case it'd infect all users. Right? If I'm wrong please say I barely write code anymore let alone JS and have forgotten most of this.
In this case it can't do anything indeed. But you shouldn't run any code a user inserts. It's just bad practice.
[**@jeresig**](https://twitter.com/jeresig): &gt;[2013-11-13 20:59:54 UTC](https://twitter.com/jeresig/status/400729757941522432) &gt;Fairly certain they could just rename [@node_knockout](https://twitter.com/node_knockout) to socketio knockout and virtually all entries would still be intact. [**@BenLesh**](https://twitter.com/BenLesh): &gt;[2013-11-13 21:21:45 UTC](https://twitter.com/BenLesh/status/400735259165073409) &gt;[@jeresig](https://twitter.com/jeresig) [@node_knockout](https://twitter.com/node_knockout) Ahhh... but [@SocketIO](https://twitter.com/SocketIO) is a dead project now... [*github.com*](https://github.com/learnboost/socket.io) (last commit &amp;gt; 8 months ago) [**@rauchg**](https://twitter.com/rauchg): &gt;[2013-11-13 21:25:59 UTC](https://twitter.com/rauchg/status/400736322328854529) &gt;[@BenLesh](https://twitter.com/BenLesh) [@jeresig](https://twitter.com/jeresig) [@node_knockout](https://twitter.com/node_knockout) working hard on 1.0, just like node.js :) most of the work has been in [*github.com*](https://github.com/LearnBoost/engine.io) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1qm4tv%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Ah, I just thought it was specifically to do with eval :/
I wrote a pretty big [project](http://www.roam7.com) in CanJS and now I'm doing a lot of work in Angular. CanJS is actually very good. It provides some features for very large SPA projects that Angular is missing, like decent name spacing and a client side ORM. It is also a lot easier to learn for people familiar with server side MVC and jQuery. The controllers are basically structured jQuery plugins, so are very modular. Now I've been working in Angular for a few months, CanJS feels very verbose in comparison with controllers often containing a lot of event binding boilerplate. I've also found the supplementary tools (minification, testing, cache busting etc) are much better with Angular, mostly thanks to Yeoman and Grunt. The main reason I moved away from CanJS is because I feel it's fate is tied to one company ([bitovi](http://bitovi.com/)), or even just one guy ([Justin Meyer](https://twitter.com/justinbmeyer)). The community support just isn't there, and I don't see it picking up the project in a meaningful way if the main contributors disappear. Fuelling this fear was the fact they seemed to stop maintaining large structural components (stealjs) that they originally pushed with the framework and my project heavily depended on. It's also just more fun working in a framework with a lot of momentum and community excitement. tl;dr CanJS is great and easy to understand, but has a small community.
If the site were setup to save what was entered, this could be a problem. If someone were to save this excel data to a database, and then another user were to view it, you've just allowed one user to execute JS inside of another user's browser. Now they could theoretically retrieve their session ID (or anything else stored in their cookies) and use it to spoof a login, thus giving them access to the other user's account.
awesome work. would love it if it could also export to a csv file edit: something like [this](http://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side) might help
I'm a web developer who primarily does his frontend coding using jquery. I've been working on a frontend heavy app recently and my js has become too bloated. Am considering using some framework to make life easier. So far, I'm leaning towards Angular.js . Should I switch to dart? 
We really enjoyed making this and hope you enjoy using it too. If you do, we would really appreciate a vote. It only takes a few seconds and is a big help.
I liked the look of the Dart editor. Can I use this for good old fashioned Javascript? I personally *love* Javascript just the way it is, and have zero interest in any language that compiles to it. I'll probably just get Sublime sooner or later.
+1 for Sublime. It has quickly become my favorite text editor.
CanJS does suport can-click and similar attribute bindings from the 2.0 version http://canjs.com/docs/can.view.bindings.can-EVENT.html but it does allow you to fallback to the ".description click" form if you need to bind hundreds of elements (that form uses event delegation) It also supports web component like constructs from the version 2.0 http://canjs.com/guides/Components.html disclaimer: I work for Bitovi and I'm a core contributor to CanJS
Handy javascript libraries, specially fusion charts and ember charts. 
What is it about the editor you like? It appears to just be a specialized Eclipse installation, much like [Aptana Studio](http://www.aptana.com/products/studio3) (or its Eclipse plugin). Pretty much all of the [features shown](https://www.dartlang.org/tools/editor/) are native to barebones Eclipse if I'm not mistaken -- all they did here was extend it to apply to Dart.
If you are serious about web code get WebStorm instead.
I'd go with a standard rectangle drop down, slice your images up with transparency. Make sure to add alt text, call it a day.
That's exactly what I was thinking too, I was just hoping there might have been some kind of javascript out there. Thanks! 
This is handy, but can it be used to help manage different (but often overlapping) local vs CI vs staging vs production builds? That is what I most want from grunt right now. :)
Thanks Glad you like it! Please up vote to get the conversation going. http://www.thinkster.io/ would be another go to guide if you like Treehouse.
I would use something like https://github.com/jsoverson/grunt-env for managing grunt across different environments.
RAD thanks for the link!
This can and should be done with just CSS. Hover states and transparent borders are your friends.
Why not embed a Google Spreadsheet?
CanJS 2.0 is out and includes custom tags, in-template declarative bindings, two-way bindings, etc. You'll find it just as terse as Angular, but encourages you more to build things in a modular way instead of trying to use HTML as a programming language. We've been greatly expanding the community: http://bitovi.com/blog/2013/10/canjs-us-meetups.html. And have upcoming projects to promote our community's activity: http://staging.bithub.com/. As a company, we've been working on CanJS's code base for 6 years, while similar arguments were made about other frameworks like Google's GWT, Cappuccino, etc. But BECAUSE we are a company and not exclusively dependent on the whims of the community, we will keep improving our stuff for the next 6 years. What happens when Angular loses steam as Backbone has? We have not stopped maintaining StealJS, jQuery++, etc. FuncUnit just had a new release: http://funcunit.com/. StealJS is next. Also, you can use grunt / requirejs / etc with CanJS just fine. CanJS's community is small. But it has an active and growing community. CanJS's mantra is we can do JavaScript better. It has shown an almost singular ability to grow and adopt to change. 
Made an account for this: dont go to this link! Lets whoever is also looking at the document run javascript on your browser. Some bored cretin is going to spend their lunchbreak making something dangerous to XSS here.
have a look at example, maybe not very neat, but will give you the idea how this can be achieved with css only http://jsfiddle.net/5Wy4F/
All of them are cool but Fusion Charts is an expensive library. It's not something you grab if you just need a chart someplace. Even if you are doing some heavy charting, check out highcharts, their licensing is much less.
I am intentionally not giving you the answer because this smells of a homework assignment and reddit isn't here to do your homework. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match (\d+) Those should be sufficient for you to figure it out.
Dang, this thing is sweet!! Well done!!
There comes a point in programming, usually after you have learned at least three programming languages, where something "clicks" and you get a feeling * How to lay out data * How to not repeat yourself * How to take a large problem and break it into smaller size problems. * The rule of single responsibility -- Each function should do exactly *one* thing. It is kind of like writing -- When you first learn to write you think about the shape of each letter. Then you think about the shape of each word. Then you move on to write out whole sentences, then paragraph. You start to "think" like a program should be layed out. 
I'm currently on my 10th week in a BSc four year bachelors comp sci degree and I can already see what you mean. On the first day I was amazed at System.out.println("I love Java"); And then using System.out.println to print different shapes and such. It was amazing, but now I'm making apps which put simply "printing text" to shame. 
I usually do something like this: var requireInvoke = function(task, config) { return require('./grunt-config/'+ task)(config); }; grunt.initConfig({ cdnify: requireInvoke('cdnify', config) }); (and in ./grunt-config/cdnify.js) module.exports = function(config) { return { dist: { html: ['&lt;%= yeoman.dist %&gt;/*.html'] } }; }; It's much simpler.
Awesome, I have not seen that site. Thanks!!
Yeah that is damn cool. 
the download button doesnt do anything on linux/chrome.
When I talk about Angular's vocabulary I'm talking about "directive" and "transclude". I've found that the TodoMVC creates false impressions about the ease of building SPAs with a specific framework. For example, Ember's TodoMVC implementation is "readable" but it's not that easy to start a project that is a little more complex.
Just gave it a go in Win 7 64bit Chrome 31 and got 10k a sec. FF showed 15k, same as you. Thanks for the tip, but looks like it won't be a big difference for long.
Hello Kvotheness, I am the author of the book in question. I would love it if you were able to elaborate on what you mean by "examples are convoluted and complex for a beginner", as well as the concepts that the book gloss over. I am not trying to point the finger here, but I would really like the book to be as good as it can get! And the next couple of weeks is the final deadline to get any changes in before it moves into production. If you feel more comfortable discussing this offline, please email me directly: joachim@haagen-software.no
You should probably include a video, I'm not going to download some unknown zip file from a site with basically no content or incentive. Any reason this isn't a browser based game, I expected that given this is /r/javascript maybe I'm missing something?
I haven't used it personally, but a lot of people have recommended [egghead.io](http://egghead.io/). There's also [this thinkster](http://www.thinkster.io/pick/GtaQ0oMGIl/) article that might help.
Yeah, that is very simple. I prefer my config files in yaml and I don't want to have to type that boilerplate every time. Thanks for sharing an alternative
That hurt my brain.
In a good way I hope ;)
There's really a couple of issues here. 1. What language should I write in? 2. Should I use a framework? The first one seems like a trick question, since you pretty much *have* to write code that at least compiles down to JavaScript, but these days that leaves you a lot of choice. Big options are: JavaScript, CoffeeScript (aka, JavaScript for people who think Python and Ruby are cool), TypeScript (aka, JavaScript for people who think all JavaScript needs is optional type annotations), ClojureScript (aka, JavaScript for people who like lisp), and more, including Dart and probably another couple dozen. Dart falls into a bit of an awkward place, but it's essentially very similar to TypeScript, optional type annotations and all, but with a few more features to set it apart from normal JavaScript. I personally use CoffeeScript; I love it's compact, clean syntax, and I'm a sucker for significant whitespace languages. I do wonder sometimes if I'm not missing out by not using ClojureScript though; I hear wonderful things about lisps in general, and Clojure in specific. And TypeScript has a vocal fanbase. Dart...I dunno. It's biggest selling points seem to be its optional type annotations (which TypeScript already has), and the fact that in theory, someday, maybe, it could replace JavaScript in the browser without needing to be compiled (but probably not any time soon). As for frameworks: Yes! Yes you really, really should. But that has no bearing on the first question. I happen to love Knockout but Angular is good too. But you can write those in any language. Plain JS, CoffeeScript, TypeScript, Dart via dart2js - all of them will work just fine with Knockout, Angular, Backbone, or whatever framework you like. Finally, you say your problem is "my js has become too bloated". That's a very subjective problem. CoffeeScript has a concise, clear syntax; it may make your code look cleaner and smaller, but it's still the same code. Angular or Knockout or other frameworks handle some complexity for you in their libraries, but the code still *exists*. If you need 2-way data binding (which most basic CRUD apps will) you can write it yourself with tons of repetition, or factor that code out into your own library, or use some other persons library, or use a framework, but the code still exists, and still runs. Is the framework option less bloated? Not in any meaningful sense. What I will suggest is looking into good code organisation. I've had heaps of luck using CommonJS module patterns and Browserify to organise and manage a very chunky front-end app. Again, this works with any language and with any framework; but whatever language and framework you pick, you'll have a better time if your code base is modular and well organised. If you find yourself with one massive file or tons of variables in the global namespace (or tons of variables in one massive app.* tree) you're probably Doing It Wrong. Much better to use require (and browserify/commonjs is much better than AMD for that, trust me).
I once had to do something like that, only in PHP. I don't remember why, but I have a nagging feeling it was a quick hack to something that I should go fix. Are there any well-known cases when one would need this kind of flattening?
For the lazy: /r/atwoodslaw --- I provide direct links to lesser known subs mentioned in the title if one isn't already provided. Let me know if I need to try harder: /r/LazyLinkerBot
An interesting problem that's pretty much a classic example of requiring recursion. Your solution is probably about how I'd do it. Thanks for sharing both the problem and your solution!
Lol. It will be in a good way when I can understand this. Can you help? I don't really understand this... function flatten (nested) { var urls = {}; flatten(nested); return urls; ... If you don't mind, would you kind of step through and explain what is going on here? flatten(nested) on line 3 above calls the 'inner' flatten function (with the 2 params), right? But it's only passing 1 param. I'm confused. It's tough to determine which flatten function is being called and when. *I wish there were line numbers...
The outter `flatten` function creates the empty `urls` object, it then calls our inner/recursive `flatten` function which populates the `urls` object, finally it returns the now populated `urls` object. The inner `flatten` function will take two parameters: `obj` and `currentPath`. But it doesn't *need* to be passed both parameters to work. This is because I create a local variable inside the inner `flatten` function called `path`: path = currentPath ? currentPath + '/' + key : key If `currentPath` isn't passed to the inner `flatten` function, then `path` is set to the value of `key`. The `currentPath` parameter is only needed for the recursion.
Sorry. I think they forgot to add this link for non-downloadable people http://game.zoomtheballoon.com/ Once time runs out there's no updating your app either X_X
Yeah sorry about that, here you go: http://game.zoomtheballoon.com/ Forgot they forgot to add the link before time ran out.
http://jsbin.com/aDOpivAc/11/edit?js,console
if i could do reduce, folderLeft with objects could be even more concise :(:P
Correct, but please don't put a method called 'flatten' inside a method called 'flatten'. It just causes confusion.
I liked it
Oh yeah, good point. I forgot to mention that this struck me as incorrect.
You should post this to careercup. It's a pretty fun question.
I'm bored so it's time for Reddit comment coding. function isObject(o) { return typeof o == 'object' &amp;&amp; !Array.isArray(o); } function flatten (obj, acc, path) { if (!isObject(obj)) throw new TypeError("Can only flatten objects"); acc = acc || {}; path = path || []; for (var k in obj) { var v = obj[k]; var p = path.concat([k]); if (isObject(v)) { flatten(v, acc, p); } else { acc[p.join('/')] = v; } } return acc; }
Thanks for the feedback! I was trying to think of a name for that inner function but nothing sounded right to me. I decided to reuse `flatten` for that inner function because it did most of the actual work. I didn't want to rename the outer function either so you didn't have to type so much when using the outer function. What would you name the inner function?
http://plnkr.co/edit/5k1bV4XejL6qVYHPIVea?p=preview Just randomly had the idea of for (var key in object) if (object.hasOwnProperty(key)) { //etc. } Not sure how I feel about it -- what do you all think? Normally I'm 100% strictly against if, for, while, etc. blocks without {}s, but for (var key in object) { if (object.hasOwnProperty(key)) { } } Is a little obnoxious / verbose. EDIT: who wants to write an erect() function that goes the other way? :) EDIT2: BTW, people : Array.isArray(), as far as I know, is not supported in every browser. Last I heard, Object.prototype.toString.call([]) === '[object Array]' is the ECMA cross-browser way to do it.
Do you have a little cash or will your company reimburse you for training? FrontendMasters.com is a very good resource for this sort of thing. You get full access for $39/month. I have a subscription. Here is a course from the creator of Angular: https://frontendmasters.com/courses/angularjs-and-code-testability/ I just looked at the course description and it looks like you can get a free lesson so you can try it out. I write Angular every day and unfortunately this question is a little bigger than what can be answered here. You can also explore the angularjs subreddit if you haven't already: http://www.reddit.com/r/angularjs/
innerFlater? 
I wonder if this interview question might have exposed some design detail of their systems? If you are working with a legacy key-value store instead of something more relational or group focused, this kind of string mapping for the key is a good, but hacky, way to fake hierarchal relationships.
I'm working on a system that uses this sort of translation, although in both directions and with a different treatment of arrays. It's quite useful in that the value part of a path-value pair will always be a primitive. This allow hierarchal data to be stored easily in a relational database or transmitted over a dumb protocol like [OSC](http://en.wikipedia.org/wiki/Open_Sound_Control). It's not faking hierarchal relationships, it's representing them.
For the lazy: /r/angularjs --- I provide direct links to lesser known subs mentioned in the title if one isn't already provided. Let me know if I need to try harder: /r/LazyLinkerBot
I've posted this elsewhere, but here's why: If the site were setup to save what was entered, this could be a problem. If someone were to save this excel data to a database, and then *another user* were to view it, you've just allowed a way for user to execute JS inside of another user's browser. Now they could theoretically retrieve their session ID (or anything else stored in their cookies) and use it to spoof a login, thus giving them access to the other user's account. [See this comment I made for a more in-depth explanation](http://www.reddit.com/r/javascript/comments/1qjpzp/an_excellike_app_in_less_than_30_lines_of/cden07m)
Eval accepts a string and runs it as if it were JavaScript code. This spreadsheet implementation allows users to directly type in the string that gets evaluated. So if a user were to type something like "alert(document.cookie)" as his spreadsheet function, then any user who also views the spreadsheet will get their cookies alerted to them. Alerting the cookies is harmless, but imagine the code was more complex and sent the cookie data to http://myevilsite.com/my_cookie_stealer.php. Now, any user who views that spreadsheet will unknowingly be sending their cookies to a harmful site. Why is sharing cookies so harmful? Well, PHP sessions, for instance, store data on the server based on the current user. In order to recognize users, it stores a cookie called "PHPSESSID" on the client which contains a unique string to help link the browser to the data on the server. If a user got a hold of your session cookie, they could manually change their cookie to match yours and now they are logged in as you. Did that clear anything up?
Perfect! Thank you! I didn't know it ran anything as JS. One more question if you have the time is there a time when eval is useful?
I can't think of any case where you would need to. People used to use it to parse JSON, since JSON is technically in the form of a valid object literal. However, browsers now have their own JSON parsing functions, so eval is not used for that purpose anymore. Generally, if you're using eval, you're probably doing something wrong. Eval didn't even exist until interpreted languages became popular. Compiled languages can't even support it because they don't know the string at compile time. Programmers have done just fine without it.
Yes, I will write an erect function.
I've given a few interviews, and it's not so much if they get the right answer or not - it's watching their approach to trying to solve it. I've been surprised at how many people have thrown their hands up at "someFunction(a,b), return a*b without using multiplication".
Cheers, I appreciate it.
Excellent!
[Here's mine.](http://jsbin.com/efARaLa/3/edit?js,console) It's pretty similar to some of the others but stores the path as a string rather than array.
You can't make me.
Nice article. I am extremely average at everything from design to code. I just do it all but don't really excel in anything. I feel like I need to find something to specialize in but I don't know what it should be. My attention span is small and I want to be great at everything but usually quit and move onto the next thing after a short amount of time. Any advice on how to pick a specialty and stick with it? I'm excited about javascript with node and angular and all the cool libraries coming out but a lot of times I feel like I don't have what it takes to be a skilled programmer. 
&gt; Object.prototype.toString.call([]) === '[object Array]' and people complain about coffeescript
The model is your data. That's all. Think about this way: You want to present to the user a list of movies. On the "View" side of things, you're handling how that list of movies will be displayed to the user. The view in Angular is basically just plain HTML extended with Angular directives. On the "Model" side, you are declaring your data. In this case, your data is a list of movie objects, with each object containing a movie title, description and picture. Your model can be as simple as a single movie object or as vast as IMDB's entire catalogue. Your controller "sits between" the view and the model. Here, you're defining how to work with that list of movies. For instance, you could include a method for adding a new movie to the list and another for removing a movie from the list. The controller manipulates your model to affect a change in your view which, thanks to two-way binding in Angular, generally happens automatically. *edit*: wtf typo
I'm not sure that I'd do it with recursion.
Except that's not efficient...
I use a similar system for mapping between JSON hierarchies and HTML inputs, e.g. { foo: { bar: 123 } } Maps to: &lt;input type="number" name="foo.bar" /&gt;
It's about as efficient as you're going to get for arbitrary values of a and b. And the test isn't about efficiency...
moreFlatter
[I had to find the iterative approach :)](http://jsbin.com/aDOpivAc/26/edit?js,console)
[mine](http://jsbin.com/EZaSoLek/13/edit?js,console) EDIT: This brings up another good problem, which would be to do the exact opposite. [...here's my solution to that](http://jsbin.com/EZaSoLek/15/edit?js,console)
Is this actually going to be in ES6?
Doesn't [*require*](http://jsbin.com/aDOpivAc/26/edit?js,console) it...
My version. I might have a use for this at some point. function flatten(obj) { var i, x, n, out = {}, ts = out.toString; for(i in obj) if(obj.hasOwnProperty(i)) { if (ts.call(obj[i]) !== "[object Object]") out[i] = obj[i]; else for(n in (x = flatten(obj[i]))) out[i + "/" + n] = x[n]; } return out }
Not that I know of, but the Proxy API makes it possible to add this feature and more.
I tend to like the convention of : function flatten(){ function flatten$(){} } (Martin Odersky recommends this for scala in his excellent scala book, for methods that are a wrapper around recursive functions)
Interesting!
http://jsfiddle.net/FALHY/
More of a functional approach: http://jsbin.com/OlIfexas/1/watch?js,console
I like flatten_helper for methods that do the work of a method flatten. (or flatten_primer if it does setup work for flatten, etc)
This is an important thing to ask at the end of any interview. Interviewers will always give you space to ask questions -- an easy question to ask is if their problem was motivated by their existing system (or just generally about their existing system). Infrastructure like this might not be super fun to work with.
Loving it! Have like 5 ppl on right now. Come join us!
Out of curiosity, what are you working on/what type of system are you working on in js that uses osc
Object.keys doesn't support legacy browsers. While less convenient, for...in will do the job just fine. for(var prop in obj) { if(obj.hasOwnProperty(prop)) { ... } }
reallyFlatten
Thanks for the breakdown. Really helpful! I'll check out CommonJS and Browserify. I just checked out require . Can't believe I haven't used it yet!
That algorithm requires multiplication: &gt; The basic step of Karatsuba's algorithm is a formula that allows us to compute the product of two large numbers x and y using **three multiplications of smaller numbers**, each with about half as many digits as x or y, plus some additions and digit shifts. You could use bitwise operators to achieve efficient multiplication, but I don't think this question is about efficiency or knowledge of obscure algorithms. It's to see if the candidate can use language constructs to solve problems.
It looks like xpath.
If OP was worried about legacy browsers, OP would not have used `Array.isArray`
Ember charts can work instead of it... 
Minimal or no comments yet I can follow the code and understand exactly what it does. Perfect!
I don't think the fileapi OP posted is the same html5 fileapi. On the other hand, I'm pretty sure this FileApi library makes use of the fileapi object.
wat
Same stuff that would reveal a good programmer in any other language. More JS specific, showing strong understanding of strategies to deal with async/concurrent logic and any use of interesting node APIs like Stream or dgram. You can tell someone can do the job when they know about the JS specific ecosystems for testing your apps, managing dependencies for client + server code and deploying.
fuck legacy browsers
You can now download it from the [Chrome store](https://chrome.google.com/webstore/detail/livereddit-beta/jjchjjgkfndbkhkfjibmbfmponlafdip). **The updates are broadcasted between users, so as long as there aren't so many of us it will look as if nothing is happening... Please be patient!**
Leaking global variables. (Bad) Use of === and !== comparison operators. (Good) Use of module patterns to scope variables. (Good)
You pointed out http://caniuse.com/#feat=fileapi, but OP posted a library that helps handle file uploads (the library has IMO a bad name as it can be confused with the fileapi). Even there's no direct relation, I'm pretty sure this library uses the native fileapi though.
suchFlatten_wow
There's nothing wrong with asking the interviewer if the code needs to work with legacy browsers. In fact it might be better to ask.
I added this to all our code here, at least once I week I review a file where it's been removed because "it was breaking JSHint in the build". Yeah, I work with great programmers :(
you'll have to tell us the constraint you have so that we understand what you are trying to achieve.... anyway, $() is a shortcut of jQuery(), would that help?! appart from that, i hope the [32] was for the example purpose and you don't have a code that is looking at the 32nd element with these classes? anyway, explain what is your constraint that I don't understand here, you use jQuery, or you don't... I read your question as "i want to use jQuery without jQuery"
I'm so confused right now.
To make it as simple as possible. I have elements that are not easily distinguishable and I need to apply jquery functions to them. How do I go about doing this. If nothing else works I guess I'll make a getJQueryElement function for my classes.
Oh, and I just created a tool that visualizes relationships between object definitions. It uses Topiarist. More details and demo via http://plnkr.co/edit/WrHHtP?p=preview
You're either doing something really clever or really dumb. Give them ids or classes, or store them in variables when they're created. Just don't tell your script to target the 32nd element returned from that function. 
Hey, thanks! I feel exactly the same way! I still find it hard not to get distracted by the newest libraries or frameworks and feel I don't have enough expertise in one area. Learning Angular has been equally painful and pleasurable but I don't know if I would be specialising in front-end development at the moment if I wasn't working on Seevl. I really enjoy helping to build Seevl but I enjoy using it too and learning Angular was just an added bonus for me. The best advice I can give is to try to work on something where you care about the end product and if you can use a new framework or library that you're interested in to do that then all the better. Hope that helps!
I've never used 'use strict' and have never had a problem because I don't violate it's rules anyway. This is more a captcha for bad programming than it is a sign of good. So it's presence doesn't really mean anything - either the person is careful or they believe they need it or they saw it somewhere else and heard it was good to use
You could totally use a jQuery selector for that, though. http://api.jquery.com/nth-child-selector/ I've read the rest of your replies here and I'm still not sure what you're doing or trying to do. Please just explain it to us so we can help you. Trust me, we'll be able to understand.
Most of the time, either comments are meant for code that is not understandable easily or they are stating the obvious. Which a good programmer writes understandable code and shouldn't state the obvious in the comments.
If you tried indexing the story divs, you could find them a lot easier. something like this: var stories = []; for(i = 1; i &lt;= 15; i++){ stories.push(document.getElementById("story"+(i))); } Then you could some kind of function which is like: function switchTo(from, to){ stories[from-1].style.display = "none"; stories[to-1].style.display = "inline"; } Now you can just have the functions that the option buttons call onlick be the switchTo function. I think that would work anyway! EDIT if you used a bit of DOM manipulation wizardy you could automatically detect which story div to hide based on the parent div's id.
Nice. It's pretty similar to c#. Thanks.
Even if you can easily follow a piece of code and understand *what* it does, you still need comments to explain *why* it does it.
[It's not supposed to be real.](http://i.imgur.com/3Gpey.jpg)
More of this please!
Made an attempt at this: http://jsbin.com/aDOpivAc/38/edit?js,console
leading commas
so I could just do document.getElementById('dog').draggable();
No, you have to wrap it in a jQuery object, but that doesn't mean you have to use a selector. $(document.getElementById('whatever')).draggable()
I used to think that this was an universal truth. However, what appears obvious to you may not be to someone else. 
I have a dynamic amount of elements[mostly divs] in a changing order with no unique id's just classes. [There is a reason for not having an ID just trust me on this]. I want to apply jquery functions to these elements[draggable(),onmousemove(), etc]. Is this possible with only having a variable containing the element? Maybe a good example of this would be onmousedown(e) could I apply a jquery function to e.target?
Well it is! That's how you do it if you already have the dom node.
I would strongly consider scoping the entire story in a block where you can define states and then just switch out your states. Something like this might work: var Story = (function() { var STATES = { // mapping of your IDs intro: 'intro', game: 'game', story1: 'story1', story2: 'story2', sotry3: 'story3' }; var current_state = null; return { init: function() { this.switchState( 'intro' ); }, switchState: function(state) { // Error checking for nonexistent states if (STATES[state] !== undefined) { if (current_state !== null) { current_state.style.display = 'none'; } current_state = document.getElementById(STATES[state]).style.display = 'inline'; } } } })(); // When you're ready to start Story.init(); // To change states Story.switchState( 'story1' ); This way, you have a very manageable system, and the logic only ever occurs in one place. If you add states, you simply register them in the STATES constant within the scope of your story.
Just realized that the assignment of the current state will not do what is expected. You would want to change this line: current_state = document.getElementById(STATES[state]).style.display = 'inline'; to this: current_state = document.getElementById(STATES[state]); current_state.style.display = 'inline';
someFunction(a,b){if (b===0) return 0; return (a/(1/b));} 
Sometimes. Good naming can also solve that problem in some cases, e.g., I don't need comments to tell me *why* a function named `filter` returns a shallow copy of an array containing only the elements that satisfy a given predicate. Comments wouldn't exactly *hurt* there, but they'd be redundant. However, if the `filter` implementation does some particularly clever, non-obvious thing to get the job done, then comments would definitely be warranted.
Yep. Although I'm not sure why you'd write your own native JS selector methods if you're using jQuery. The jQuery selector function is very powerful. Use it :)
I don't know what half of the stuff you typed is :3 I'll study it more thoroughly and see if I can figure it out.
 //alert(x); //why isn't x 27????!!! it should be 27!!! x = 27;
so you ask question about a piece of code you didn't try? Are you kidding us ? Don't do it again.
I never leave home without my ES5 polyfill
Maybe I'm dumb, but I don't get it. What does it do?
I won't go for anything under 126% - this just isn't suitable.
no comments is never the sign of a good programmer. sure the code may be "self explanatory", but movies are self explanatory, too... and they still put a write up on the back of the DVD. 
I guess my question is what criteria you want to use to pick an element. If you're just trying to add the same mousedown function to every one of those elements then you should use .on(). http://api.jquery.com/on/ If you need to do different things for different divs based on their current order or what is inside them then I would say you should combine the nth-child selector I previously mentioned in conjunction with .on(). The selector engine is really very powerful.
No worries. It definitely comes with time. I've been doing full time web development for the past 12 years, so there are a lot of constructive tips I can give, but they may be a bit involved. Basically, I'm just recommending a more structured approach that will consistently update itself, and all you have to do is tell it what state you want shown. If you've got any questions on stuff, definitely feel free to ping me. 
flattenNowWithEvenMoreCowBell 
You don't need to guard against division by zero in this case. 1 / 0 = Infinity 1 / Infinity = 0
Installed, eager to see the difference.
I tried it but it didn't seem to work. It wasn't the selectors fault though.
Just curious do you have an idea on why the original jsperf was so drastically bad performing in chrome 30? 15k vs 200 is quite the difference. I didn't write it but I dont normally stumble upon such big gaps between firefox and chrome.
What version of Firefox? I've tested on Firefox 25 on Ubuntu and it works fine. The Flash of Unstyled Content can be alleviated using different techniques. I didn't want to force one solution. Yes, I'm the author.
Huh. Well, it offends my sensibilities (Math minor) not to; I don't need it to satisfy the computer, I need it to satisfy my own sense of propriety ;D
Progressive enhancement is when you add features on existing DOM elements like a color picker on a input box, a slideshow animation on a bunch of files etc. Given the fact that responsive design is becoming a standard sometimes you don't need those enhancement to behave differently (the color picker opens a modal on a mobile phone but not on a desktop) or not be activated at all (eg: no slideshow for mobiles in portrait mode). The library allows you to 1. load files only when need them. Ex: you don't need the slideshow files on small screen, you don't need the jQuery UI datepicker until the user focuses on an element. 2. dynamically enable/disable features. Ex: when the screen goes from landscape to portrait mode the slideshow functionality is destroyed; when you revert it's activated again. 3. make your app more portable. Did you find a better color picker? Just replace a few lines of code in your feaxures file and you don't have too look everywhere in your project where you load the JS/CSS files
Also, (a/(1/b)) fits more than javascript; Other languages may have my sense of propriety, and segfault on division_by_zero as God intended ;)
I'm debating the same thing myself actually. Javascript is a big wtf, though clever people have [wrangled it into something manageable](http://www.goodreads.com/book/show/2998152-javascript). Dart looks interesting and Google is really good at compiling JS to high performance cross-browser JS. The big question for me right now is how does Dart integrate 3rd party JS libraries. Have to do [some digging](https://www.dartlang.org/search.html?cx=011220921317074318178%3Ai4mscbaxtru&amp;ie=UTF-8&amp;hl=en&amp;q=js-dart-interop) for info on that, going to sort through those results and figure it out this weekend. [Good vid](http://www.youtube.com/watch?v=QFuCFUd2Zsw). If you're dead set on Angular and want to use Dart, [DartAngular](http://blog.angulardart.org/) looks good. Google's own port of Angular.js to Dart.
[Firefox 25 on windows 7](http://i.imgur.com/7vPYH1e.png) TypeError: s is not a constructor http://www.feaxures.com/demo/assets/jqueryui/jquery.ui.widget.min.js Line 4 Also happens on Chrome Version 31.0.1650.57 m Uncaught TypeError: undefined is not a function jquery.ui.widget.min.js:4 e.widget jquery.ui.widget.min.js:4 (anonymous function) jquery.ui.draggable.min.js:4 (anonymous function) jquery.ui.draggable.min.js:4 IE9 SCRIPT445: Object doesn't support this action jquery.ui.widget.min.js, line 4 character 549
One of my buddies does this. His code is like reading a book. It's really nice. Although lately he's gotten into the habit of abbreviating his variables, like: var c = "users"; // controller var v = "home"; // view which is a little frustrating :)
hey magenta that's my app I've just uploaded yesterday! How did you find it?
I agree with you somewhat, but I also think that one marker for a good programmer is that they they have the awareness to use tools like 'use strict' to keep themselves from doing evil. When I see it used in code, it sets a baseline for the levels of crazy I should expect. 
You implicitly stated that everything needs commenting. **SOME** functions do not need commenting!
OP (or anyone else who has gotten programming questions during an interview) - this really got me wondering: what was the format of your interview where you got a question like this? Were you given a specific amount of time to create the function? Was your prospective employer watching your thought process as your created your solution? 
Yeah Node Knockout is a hackathon
Why is it only 14 bars? Wouldn't it make more sense to be 16?
On larger screens the little tiny lines are really tough to click.
it's written in AngularJS and it still looks pretty buggy(lots of errors being output to the console). Nice though
Here you go: http://api.jquery.com/jQuery/ Read it top to bottom, this is the most important function in the entire jQuery library. There are lots of ways to call it.
Unless you're implementing something simple as hell in a pristine environment like Node, you will run up against WTFs when you write JavaScript. In my experience, 95% of all JS files encounter something that is non-obvious about either the language or the browser environment.
While I see the errors as well, the page functions exactly as it should; the jQuery UI wigets are instantiated when they're supposed to (the datepicker is loaded on :focus). Probably a bug in the jQuery UI version I'm using. Thanks for taking the time to look into it.
I am curious how this works. Does reddit have a sockets API that you are utilizing?
Very cool. Can I not find the snare or no snare? 
Here's my code review. 1: Yo Dawg I heard you like functions...so I put a function in your...blah blah. At least name it something other than the outter functions name. 2: Variable naming needs some work, so many obj, key, prop, etc uses in there makes it impossible to read on a single pass. 3: Don't be afraid to be more verbose, readable &gt; clever. There's a balance to be maintained but I would rather be able to read the code of someone I'm working with than think, wow that's clever. 4: Personally I despise cases where a function is not taking all the parameters it needs to...function. The example here is your use of the urls object. It's effectively being used as a global within those recursive calls. There are definitely places where this should be done but I wouldn't call this one of them. I know that many JS writers prefer brief over verbose to save on amount of data transferred to clients but again unless your code base becomes huge I would still argue that verbose and readable trumps dense and unreadable. Here's some slight changes I made using your original code to try and make it a little more readable. http://jsbin.com/eQoRoGa/3/edit?js,console 
you have passed the test, you are a really good JS programmer.
[Recursion!](http://jsbin.com/OjavuBoJ/4/edit)
Am I using it wrong? Putting a kick in every other beat does not reproduce consistent tempo.
On a project I joined, I decided to put that into one of the functions I was writing. I ended up having to take it out. It broke because the "framework" – a customised system initially built on top of backbone and extended in incomprehensible ways – is using arguments.callee.caller in one of its core functions. It took my a while to figure out why that was suddenly breaking cause I hadn't touched code, but it was because the function using it was being called by my function in strict mode.
Good variable names. If all your variable names are two characters or less, you fail.
It seems to have only 14 bars but plays 16. The last two being silent. It throws everything off.
I fixed that thanks!! # git show Head: 67746b5 I was doing one iteration more in requestAnimationFrame, reported by @usingpond. Could you check again?
15/8 is an odd time signature for a drum machine
I pushed a fix for that. Use shift+refresh to see the change! 
this was my very first thought as I was trying to make the 4/4 kick bass beat. Would be great if you could change the amount of measures to whatever you wanted to (to an max limit of course) in Drumbox.js there's this: var totalPositions = 16; this is probably the only thing that needs to be changed edit: wow looks like OP fixed this issues as I was typing this because I refreshed and it was changed. Thanks!
Funny here is mine http://box.cloudymedia.com/#!song-61
very nice!
Heh, mine doesn't look like that at all. Will grab a screenshot and some firebug info when I get back to my computer.
after thinking about it for a while, i think that making the whole app agnostic is difficult and would make some aspects harder than they need to be. (especially with the need for identical APIs on server/client). it sound like people are expecting browserify to take care of this. i think that Views (or Components) should be shareable on client/server, for rendering purposes, but the routing, controllers and data layer, should not be symmetric or identical across the client and server. micro libraries can be runnable on server or client, but it's not really a big deal if they are or not, since they are being used by parts of the app (either controllers or components) and are not an integral part of the app itself.
https://github.com/blog/1547-release-your-software
Trying to copy the trappings of inheritance found in languages like Ruby, often accompanied by faux constructs with names like 'klass', 'super' etc. I'm not down on OO, but I've never found 'classical' OO translates very well to Js.
Incredibly fun: http://box.cloudymedia.com/#!song-84
Good start, it might be helpful to others if you state the compatibility with current Chrome extensions like Reddit Enhancement Suite and reddit companion.
Nice work and design. [Here's mine from a few years ago.](http://stepheneisenhauer.com/demos/drummachine/) Can I ask why you chose not to go with the newer Web Audio API? I think you'll have a much better time performance-wise going down that path instead. (Both of ours are a bit shaky in Firefox, for example)
I've used code based on http://ejohn.org/blog/simple-javascript-inheritance/ and have found it works effectively, it's at https://github.com/metabench/jsgui-lang-essentials/blob/master/jsgui-lang-essentials.js. Inside a function call, a call to this._super() is available. I quite like using code like that. Also, backbone uses a non-prototypal inheritance method (or one that does not require using prototypes in its own API at least). I think that different programmers find different structures suit them better. With the right bits of more complicated library code it's possible to use OOP more like it is used in Java or C#, I quite like C# and it's been an influence in how I program. I disagree with the idea that actually copying the trappings of some other language is a problem. 'Trying to', as you say, may well show that someone is not a good programmer. I don't think that the one about showing evidence of understanding prototypes is that important for a lot of code that is written with an API that does not use prototypes, like with some kind of Class function. 
Can you not put just put it up on a webserver behind authentication and get some subdomain@yourCompany.com dns record set up? That leaves you in control of hosting/updates/etc..
The better question is why use those languages that transpile to javascript rather than just using javascript in the first place. It's not like javascript is some low level machine language that is inefficient for humans to write... Sure, there are reasons you might want to use a language that transpiles to javascript, but make sure that's the best option first.
Cool! But.......... going need more cowbell. (Three isn't enough.)
My default course of action will likely lead to something like that. Thanks. 
Are the clients code literate? Yes, github. No, create a binary for the client and send it in an email or provide a download link.
If the sites in question have some sort of API you can reference you are off to the races and can use an XmlHttpRequest passing parameters and get back a value.... if they don't have an API, the only way I can see is to create an IFRAME element pointing at the pages in question &amp; load the values in question by doing some DOM traversals and/or reading/parsing innerHTML var iframe = document.getElementById('myframe'); var iframe_document = iframe.contentWindow.document; var iframe_el = iframe_document.getElementById('???'); alert( iframe_el.innerHTML ); That's a really bare-bones example and what you do once you have the document of the iframe will depend on the markup of the page.... if the elements you are after have IDs it is much easier, but if not you might need to do some DOM traversal to find the element &amp; read it's value. A lot of how this will work is dependent on how the sites in question are structured... conversely if they change their site your script will likely cease to work. 
Concise rather than verbose.
They do in this case, but they're not descriptive. What if you wanted to map them with descriptive names so the code was actually readable? Think for scale.
If you see parent().parent().parent().parent().parent().parent() that's definitively a bad sign.
If you ever need help figuring out how to do something, ~99.9+% of libraries, StackOverflow topics, code examples, blog posts, and tutorials are going to be written in JavaScript. Have fun converting that into transpilable language x so that it can be converted back into JavaScript. If you're using TypeScript you're really writing JavaScript with some type annotations. CoffeeScript is essentially JavaScript with a Ruby/Python like syntax and a few shortcuts for common JavaScript patterns, but you'll really need to have a pretty deep understanding of JavaScript to use it well (it has almost all the gotchas that JavaScript has, plus a few new ones). With the other transpilable languages, you're still going to have trouble if you don't know JavaScript. As far as advantages of JavaScript... Well for one, it's the only language that you can run natively on almost any device in use today... computers, phones, tablets, TVs, even game consoles. It's the universal language, and it's worth knowing. It's got a great syntax and a very powerful inheritance system (once you learn how to use it). There are a few "warts", but they can mostly be avoided by linting your code. Some editors (such as Sublime Text) have packages that will lint your code as you write it. The bytecode outputted from transpiled languages is often not going to be as efficient as well written JavaScript. It's nice to be able to type JavaScript directly into any browser's console. You're going to have trouble finding other developers to work with you. All the talented front end devs and node devs are going to be experienced in JavaScript. Compiling is just another step in your build process. Another headache, another source of problems, another thing to coordinate with your team. But overall, you should be able to read the language of your outputted code and the code of any libraries you're using. Might as well just immerse yourself in that language and work with it directly.
Coming from a PHP/Python background, I reach instinctively for classes and inheritance, but I've found that javascript's functional mechanisms enable you to cut some problem spaces in a different way. I get what you're saying about different programmers and style. The mark of a good coder often depends on the context of their work. If you're working on a big app, it tends to fall on how clearly they model a problem. If it's a realtime game or visualising a huge chunk of data, then it might be more about eking out performance. Perhaps you're golfing and aiming for JS1K! OO or FP, it's all just sugar for us humans, often in spite of a compiler that has distinct opinions about this matter :). Take a look at the source for underscore http://underscorejs.org/docs/underscore.html vs lodash https://github.com/lodash/lodash/blob/master/lodash.js - same API (more or less), great quality - but completely different goals. In my limited experience, apps start getting in a mess in direct proportion to the amount of state floating about in the system. OO promotes a combination of state and behaviour, because encapsulation, and thus encourages maintenance of local copies of state. This can make difficult to comprehend the whole of an application at *any given point in time*, and can lead to big heierarchies of black boxes with nebulous scope. I've personally found OO in JS great for stripped down GUI objects, or for creating custom datatypes i.e. any input form, or perhaps an element in a data visual. Does a form (or it's parents...) need to own it's validation methods, or it's state - or does it just need to be able to present it's response to invalid data? Why make JS jump through scoping hoops to nail "this" to the place you'd expect it to be if you were writing a class based language? 
Forget about frameworks until you have a good understanding of vanilla JavaScript. The [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript) is probably the best resource for JavaScript out there.
Mmh, nice idea, thanks!
Some ideas: * http://eloquentjavascript.net/ for the basics. The web version is free and the book is a quicky read. * If you want to have some fun, I would recommend playing around with canvas and making purty pictures, find some neat canvas demos and run through them with the debugger. * Goof around with some basic Node.js (write an HTTP service), Then start jumping into jQuery on a page that interacts with your service. * Figure out get basic text out on a page (logger), and convert some CLI programs from other language (if you have worked with other languages) I personally like trying to do real-worldish things to get a feel for how a language and it's library actually work. 
That was the shit
Yes good point I should add a disclaimer... It shouldn't interfere, at least with RES.
I like it a lot, but it desperately needs horizontal lines
The answer will depend quite a bit on whose intellectual property the code is. If your client owns the IP, you need to protect it from the public view unless you get permission from them to do otherwise. Even if your company holds the IP, almost every job I have ever had included a clause in the employment contract that the company owns all the work I perform while employed there. So your boss may or may not have the legal right to open-source it. It depends on his position and the legal practices at your firm. To be safe, I'd just email them the files with instructions on use. The issue of whether or not it can be posted publicly and open sourced is a completely different and more complex issue than just figuring out how to get your code to your client. 
Have you considered using the WebAudioAPI for browsers that support it? You would be able to have much more consistently timed audio compared to &lt;audio&gt; tags which are much less precise.
Have you talked to them about it? Or do you just sulk around because everyone else sucks compared to you?
It's an open source observer / communication / persistence framework designed for creative coding projects. It speaks js, ws, http, mysql, as3, osc and c++, with varying degrees of fluency. Unfortunately, it's still a lot of spit and polish away from a public release, but you'll read about it here first. PM me if you want a sneak peak.
Oh, my sweet jesus yes. This would be amazing for game threads. 
NO MAN SHOULD HAVE THIS SORT OF POWER
Frontend Rescue is a good site to get you started: http://uptodate.frontendrescue.org/ JSbooks has a list of free JavaScript ebooks: http://jsbooks.revolunet.com/
Nice! Timing is definitely iffy; as others have said moving to the WebAudioAPI should fix that. I made a basic latin clave: http://box.cloudymedia.com/#!song-203
Needs more drum beats so I can actually play a more standard riff on it :) http://box.cloudymedia.com/#!song-170 I'm happy with the result regardless
huh?
Great, that's put a smile on my morning's surf
Well I gave a hint about that in last paragraph :) But more details: the original jsperf forces [OSR](http://wingolog.org/archives/2011/06/20/on-stack-replacement-in-v8) optimization from scratch for every sample. The OSR optimization is not as conclusive as the normal function optimization which cannot be used when the jsperf just inlines code in test cases. This is why you should never put any code in the test cases but instead call a function like I do in my revision. However, I don't think even OSR was applied in chrome 30 (a bug) so it is running unoptimized the whole time. However, in real world your entire program isn't a one big for loop but likely you call methods and functions like I do in the revised jsperf. This has huge consequences for V8 which works by profiling hot functions/methods and optimizing method/function at a time. When the entire code is just a for loop with no function calls then it is forced to use OSR or not optimize at all. There *are* such drastic differences in jsperfs shown all the time because people don't generally know that jsperf is by default broken to measure JIT perf. See this great talk from a former V8 developer where he explains that drastic differences like 100x speed differences between chromes and firefoxes are almost always about broken benchmarks rather than the real difference. http://www.youtube.com/watch?v=65-RbBwZQdU In general JSPerfs shouldn't be even taken with grain of salt but ignored. I very rarely see a jsperf that doesn't need serious fixing.
http://www.youtube.com/watch?v=YScIPA8RbVE obligatory haskell link. At 50:20 is the Set part.
Dude, where the hell is the snare?
browse to [lifeofjs.com](http://www.lifeofjs.com).
Of course, but those are the sets you would represent having the current computational modal anyway :).
Haha, fair enough. I considered naming it `filter_array` but hadn't properly thought through objects :P With *that* name, though, I'd assert that objects are clearly unexpected input, and that behavior is therefore undefined.
Okay, I know how to do that bar, making it pop up when the link is clicked. How would I go about it?
That is exactly what I am talking about. We haven't done A-Z index yet, so I will have to look that up. So is that the only JQ that would be needed to make the form pop up or is there more to it? EDIT: You're website looks really nice btw :)
Okay, I'm gonna give this a try now. Thank you. 
What about reveal on click? For all the cases I can think of where you would want to use this, it's too easy to accidentally hover over something.
[Here is more info](http://coding.smashingmagazine.com/2009/09/15/the-z-index-css-property-a-comprehensive-look/) on z-index. Yes that jQuery is all that is required to make a hidden div become a visible div. And thanks! It's not *my* website but I did built it from scratch at my agency http://sidigital.co
Well, those are just predicates. In the same sense, pure unary functions can be thought of as maps and vice versa.
Really cautious porn sites?
pixelate.js:Line 54 Heck, it is trivial enough I might just add it in as an option and send a pull request - though I don't know if the author is accepting changes.
Functional programming in scala has an example and I believe it's probably also in sicp
Exactly. Once you see it, it's all obvious. I think that's part of the "beauty".
Just I've uploaded a version using the api. 
I just looked this up. I assume you're referring to an android error? Can you exit out of the error and see if it still works?
I'm trying a new version using the api. Refresh with shift + f5 to see it.
Sorry the delay. New version uploaded using the new web audio API.
No, I just tried it out on my laptop with headphones and the sound turned up, and it made a very, very loud buzz when I hovered over a block. No error, just trying to warn people that this is a loud app.
I also recommand you to read Eloquent javascript. For me, it is the best javascript tutorial i've read ever. ~~Although, I don't think I have really understood the closure thing before reading the SICP book.~~
You could probably branch it and port it yourself. Maybe the author isn't an angular user (neither am I)
Nice!
cool
I don't have the answer - but just a quick tip - this is JavaScript, it has no relation to Java at all. Java is an entirely different language all together. Unless your chat is using Java...? - you can see why it makes things confusing. This is [Java](http://en.wikipedia.org/wiki/Java_%28programming_language%29) and this is [JavaScript](http://en.wikipedia.org/wiki/JavaScript). Best of luck with the project!
I've created a [quick example](http://codepen.io/vaskemaskine/pen/HsIfF) of a simple way you can accomplish this using jQuery. If you want to do it natively, a few more lines of JS may be required.
jQuery is used by over 90% of active web sites. Angular is used by less than 1%. I do agree that in an ideal world, jQuery would only be used when necessary, but that just isn't the reality of the current state of web development. I don't think it is fair to call out jQuery as something that would make this plugin unavailable to people. Anyone savvy enough to use Angular should also be savvy enough to rip out the jQuery and do whatever they need to with this code. 
Spoiler images.
This is not about jQuery, this is about modular software development.
this isn't a particularly interesting question, but yeah you bombed it. not because you didn't know it, because you weren't confident. this could be any interview about anything and you'd bomb it if you acted like that. its more a tale of how to do well in an interview than really being related to javascript. 
I have to agree confidence is everything. As long as you don't also come off as ignorant in the process. I've shot down a few for that. 
I don't get this. It sounds like he identified a good problem (if the user continues to type, the request won't get sent until they're done typing), and then proceeded to not solve it. The final implementation has this problem.
they only gave him 30 seconds? that's pretty rough. 
Why are you clearing a timeout using clearInterval? Shouldn't you use clearTimeout?
You applied for a job that wanted JavaScript skills and bombed a question about setTimeout?! If you don't know how to answer a question in an interview, at least show them you're confident that you'd be able to figure it out and that you posses some problem solving skill. Even telling an interviewer that you would check stackoverflow to see if there's an existing solution is better than saying that you don't know.
Yeah it's great that he learned something but if you wait until you are in an actual interview to learn you are doing it very wrong.
&gt;It sounds like he identified a good problem (if the user continues to type, the request won't get sent until they're done typing) How is that a problem? That's *fixing* a problem.
You would be absolutely shocked how many "JavaScript developers" don't know setTimeout() or a lot of other things you'd reasonably expect them to... a lot of it comes down to devs learning jQuery only and thinking that means they know JavaScript. How do I know this? Because I've been interviewing an average of 5 people a week for the past few months trying to fill out a new team at work. It's been horribly difficult to find competent people... and these are candidates who have 5+ years of experience and claim to be expert front-end developers, though in most cases I find that they've only used jQuery. One of my simplest questions is "what's the difference between setTimeout() and setInterval()?" I'm running LESS THAN 50% getting it right- and more than a few say "I don't know what those are"! 
even the final conclusion is wrong (imho) - if they use setTimeout for that they are not good javascript devs either. if (blah) blah.abort(); blah = $.ajax({stuff}); If they are typing quickly it will kill the request. There is more you could do like limit the input to save time on the server. Dunno, million ways to do it but setTimeout would not be in my first 100. silly
&gt;if (blah) blah.abort(); blah = $.ajax({stuff}); If they are typing quickly it will kill the request. [`abort()` will not actually prevent the request from being sent, it just ignores the response when the server eventually responds.](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest?redirectlocale=en-US&amp;redirectslug=DOM%2FXMLHttpRequest#abort(%29) The server still receives and processes the request. &gt; There is more you could do like limit the input to save time on the server. Then you're still sending an HTTP request for every keypress, which could be a dozen times per second. The server has to process and respond to every single request which is going to waste valuable CPU time.
Bonus points if you used the word "debounce" in your answer.
To solve that problem, or at least to give an indication that you knew the basic requirements shouldn't take more than that
Unfortunately, we've been mandated to only hire off-shore resources so I couldn't hire you if I wanted to... couldn't even interview you now in fact... and I should mention that I did plenty of interviewing of local resources before this for other teams and the trend was the same there, so I can't blame it on off-shore resources being weaker- the bar has to be set ridiculously low either way these days :(
Yeah that would work well unless you have multiple timeouts in your main `$(document).ready` function. The best solution is to factor this functionality out into a separate debounce function so it can be reused and is more clear. There are already a few jQuery debounce plugins that do exactly this. Even better, Underscore has its own debounce function.
It's an asynchronous problem. If you don't use setTimeout, you'll either end up overloading the server with requests, or you'll end up reinventing setTimeout in some other way.
Though the OP was not really using a closure, given that 'this' refers to the DOM element 'input' here, it still was nice of the OP to go back, figure out a working solution, document it cleanly, and share his experience with the world. If i were the interviewer, i would not be so quick to eliminate people just because he assumed that people who use jquery must know about timeouts. He just might not have come across a need to use timeouts. To me, what's really important is honesty, problem-solving skills, patience in solving problems, and focus. Good documentation skills is a great bonus. A habit of blogging is a wonderful addon. Bottomline: i would hire the OP assuming he did ok on the areas he had worked on, and would also ask him to try to maybe solve a bug on an Open source project which we could both review etc. 
I'm making an RPG and I have something like this for Items: Item |______________________________________ | | | | Equippable Food Tool etc. |____________________ | | | Armor Weapon Adornment | |___________ | | | | Ring Amulet |________ | | Ranged Melee So there's a prototype chain that's 4 levels deep.
How so? Looks like it takes a callback which will be called with the value to be set. You don't have to pass a function to it that does anything with the callback.
If the server receives an http request it uses cpu, it's not that hard of a concept... *edit* You also seem to have a big misunderstanding of how servers work, if it comes from memory the server still uses cpu for each request.
Did something quite similar a couple of weeks ago: http://codepen.io/dlueth/pen/zBhwv It is a bit more artistic i would say and directly pixelates webrtc webcam input with some more opitions. And dies nit depend on jQuery :) Similar demo just for static images with drag &amp; drop support which pixelates the given image into css3 boxshadows: http://codepen.io/dlueth/pen/jcvar
Autocomplete can't be cached? Sigh. I'm done. Also, no one said serving something from memory didn't take CPU. 
It seemed you were under the impression that if it comes from memory it doesn't use cpu.
Don't forget to abort any ongoing requests! if(xhr &amp;&amp; xhr.readystate != 4){ xhr.abort(); } xhr = $.ajax(); //xhr is defined outside the parent function, within the nearest non-global scope.
Just tested this in chrome, looks like they're totally interchangeable. The more you know!
Contrary to popular belief, you do not have to return a function to create a closure. In the original example, simply storing the timeoutID in a local variable and creating anonymous function callback in the setTimeout function already creates a closure. To quote the explanation in this thread: http://stackoverflow.com/questions/111102/how-do-javascript-closures-work &gt; That is a closure. A function doesn't have to return in order to be called a closure. Simply accessing variables outside of your immediate lexical scope creates a closure. 
Come on guys, this is basic stuff.
Basic for a man on man porno maybe. 
Not me, but for its polling transports [engine.io](https://github.com/LearnBoost/engine.io/tree/master/lib/transports) goes two levels deep: transport.js &gt; transports/polling.js &gt; transports/polling-(jsonp|xhr).js
I made an alternative to expressjs that would not work with handles in the form of (req,res,next), but with a context object in the form of (context). The context object would include properties like req, res and next. At different parts of handling the request, different kinds of information is added to the context. I chain the context using prototypes to have different layers of detail. For instance I have a global server context, which includes things like settings and such. It is the base of every coming context. When a request arrives I immediately create a new context that adds req, res. Then I go into the handler-chain, where I create a new context that adds 'next'. In one of the handlers I probably add cookie/session and later user information. With the prototype chain I still have easy access to the lower level properties when I get a context on a higher level. Also, when changes are made to the context, it is only done on the context of that layer. Making changes to the context on a higher layer will leave the context of lower levels unaffected. Just to note, I needed to move away from (req,res,next), because I made heavy use of websockets, which requires (req,socket,next). I wanted to have the extra information that handlers add (like session and user information) for web sockets too. Expressjs wasn't very fitting in this regard. I also disliked adding properties to req (like session and user information) like expressjs does. I also liked to pass along global information to the handlers, like where the database is located. Objects with prototype chains were a good fit for introducing such context.
&gt; I'm talking about jquery abort. From the jQuery docs: &gt;The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. That `.abort()` call is just an `XMLHttpRequest.abort()` call, because `$.ajax()` returns an `XMLHttpRequest` object. "Before it completes" just means before it gets its response. The actual time to form the request on the client is trivial. &gt; Although I don't agree on the CPU usage none sense. If that's the case you have bigger issues and you may need to replace your backend dev. That shit should be cached and served straight from memory if possible. I don't see that becoming a problem for a long time. The fact is it's best to optimize this on the client, before it hits the server. If you don't, you have potentially dozens of needless requests per user, per action. That adds up. You seem to think that `setTimeout` is a bad option for this, and it means "they are not good javascript devs either". Can you elaborate? It's pretty much the only way to implement a debounce function. This is exactly how Underscore implements its `_.debounce()` function. It's the best way to *reduce the number of requests per second coming from users due to this input field*. The fact is, in the real world where server resources are limited and expensive, every bit of optimization counts. Having tons of frivolous requests going to the server is just bad.
Given the (quite common as far as I know) way of representing each class by an object, this question is effectively asking why would any one use deep inheritance. It can make sense in larger applications.
In an updated version of Chrome, sure, but don't expect it to work in all browsers. The correct syntax is to not mix the two.
&gt; Even telling an interviewer that you would check stackoverflow to see if there's an existing solution is better than saying that you don't know. So much for all that bullshit advice I constantly read about admitting straight-up, when you don't know something.
The answer being one is not guaranteed to run when you think it will and the other is even worse?
Shouldn't you ask stuff like that before inviting people for an interview? Especially when you are going to interview about 5 people / week. When I was out to find a new job as a webdev a few years ago, most companies here would send you a example problem to solve before they invite you to a job interview. I think thats a good way to sort out the wannabe coders.
You are correct - the OP didn't used a closure. I was just pointing out that in your example could have been written with var timeoutId outside of the keypress, without returning in inner function, there would still be a closure Like this http://jsfiddle.net/L75wS/1/ Maybe I'm missing the point of the returned function :/ 
Your example seems incomplete? It still has an inner returned function, but you don't immediately call the outer function. Here, maybe I can make it a little clearer? : $(document).ready(function() { $("input").keypress( // This function encloses the var so it will be inaccessible from anywhere except... (function() { var timeoutId = null; // ...this inner function... return function() { window.clearTimeout(timeoutId); timeoutId = window.setTimeout(function () {$.ajax({ /*...*/ });}, 200); }; // ...which gets returned when we immediately call the outer function with (). })(); ); }); The inner function is the one that actually gets called on every keypress event. The outer function gets called immediately, and never again. The reason we're returning a function from the closure is that the `.keypress()` method needs to receive a function as its first argument. Another way to write this (I think this is what you're suggesting?) is like this: $(document).ready(function() { (function() { var timeoutId = null; $("input").keypress(function() { window.clearTimeout(timeoutId); timeoutId = window.setTimeout(function () {$.ajax({ /*...*/ });}, 200); }); })(); }); Or, if we don't mind the timeoutId leaking out into our main `$(document).ready` function (and possibly being overwritten), we can just do: $(document).ready(function() { var timeoutId = null; $("input").keypress(function() { window.clearTimeout(timeoutId); timeoutId = window.setTimeout(function () {$.ajax({ /*...*/ });}, 200); }); }); All three of these create closures, but the third doesn't really protect the `timeoutId` variable. `$(document).ready` functions are often used as a sort of global container, and `timeoutId` could easily be mistakenly overwritten later, which would mess up the keypress function.
In my experience, putting in a delay before requesting is not worth it. The quicker the feedback the better the user experience will be. If the load on the server is really an issue, it's better to optimize the server than degrade the user experience. But that's beside the point. It is a decent interview question!
AngularJS uses prototype chain for scoping. The depth can rapidly reach &gt; 5 levels deep.
Will add the option to do that today, as well as making the "click to remain revealed" optional.
I rarely make my libs/etc dependent on jQuery, you are correct. This time I just decided why not, although I'll alter it later to make it work with and without. Should be easy enough :)
I count 9 levels in our application because of that.
Oh god, I've the same experience. People don't understand why is there a requirement of a full time front end developer. They think "Oh someone is paying me to write that crappy HTML/JQuery/CSS, cool this should be easy", and then I ask them "How do you clear a container with floated elements?", they usually answer with "float what?"
In a similar position as fzammetti. We're located in NYC. PM me if interested.
Funny I mostly use jquery. It is not because that's all I know but because it makes stuff easier to do than plain JS. Also I'm a one man shop so to speak. I do front and back end so my knowledge tends to be less deep and more wide. I find myself remembering how I found answers over what the answer was. However to answer your question ( promising I didn't Google it first) setIntravle is for "repeating timer" that fires on the interval length where as settimer is for a single call after a specified amount of time. 
This does not solve asynchronous return from the server however. Save reference to the XHR object and call the abort method on it whenever a new call is made. This way only a clean XHR response will be handled by your client code. 
https://www.shadertoy.com/view/4dsGWB Boom
Actually, Chrome is behaving exactly as defined in the spec for these methods. The setInterval and setTimeout methods internally work with the same list of active timers, and clearTimeout and clearInterval are defined as being identical.
Just a note to you guys. * jQuery is no longer required * Images can be revealed on hover, click or a combination of the two Thanks for the input :)
This is during a phone interview... remember I said we're looking at off-shore resources exclusively at the moment, so phone interviews is all we actually get (and yeah, I fully know how bad that is... this is a corporate mandate, not a choice I would ever willingly make). 
Well, that's pretty much the getData method isn't it?
This is good to hear I suppose, but how do I add it. In my HTML file on my pc, I have this &lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; // Open the popup when the user clicks a deal link $('.deal').click(function(e) { e.preventDefault(); $('.popup').fadeIn(); }); // Close the popup when the user clicks the close button $('.close').click(function() { $('.popup').hide(); }); &lt;/script&gt; 
I regularly use prototype chains that go multiple levels deep in any JS views. I use Backbone and continue to extend views to similar views. I also use prototype chains when extending other peoples libraries in my own custom modifications.
Oh I see. I missed the link (was it added afterwards?) and didn't know it was part of Javascript spec now. Thanks! Very nice.
Off-shore candidates have working email addresses, right? And/or are about to use Google Hangouts?
Didn't know you needed a separate book to Kern how to build a CLI in node, since in its simplest form, that's what it is. Just add commander to your app, and you got a stew going.
In codepen click the gear icon in the top left corner of the JavaScript box. The choose "latest jquery and jquery UI" in the library option.
Try putting your code inside a jquery ready callback: $.ready(function () { // both .click functions });
It took me a while to figure out why you were saying: &gt; Its the same as replacing every mention of "my butt" with "my butt". And then I remembered [the plugin I have installed](https://chrome.google.com/webstore/detail/cloud-to-butt-plus/apmlngnhgbnjpajelfkmabhkfapgnoai).
There is no data only Zuul.
That is straight-up admitting that you don't know something, but with the bonus of showing that you do know how to learn it.
&gt;you haven't included jquery in head (&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;) How wasn't my JQ in the head? &lt;head&gt; &lt;link href="form.css" type="text/css" rel="stylesheet" /&gt; &lt;title&gt; Form &lt;/title&gt; &lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $.ready(function () { // Open the popup when the user clicks a deal link $('.deal').click(function(e) { e.preventDefault(); $('.popup').fadeIn(); }); // Close the popup when the user clicks the close button $('.close').click(function() { $('.popup').hide(); }}); &lt;/script&gt; &lt;/head&gt; So where should I put my JQ? 
You're probably not paying enough in the first place.
What does this do that plain mocha with `grunt-mocha` and `grunt-mocha-test`) doesn't?
Sure, but I'm not sure that would help matters much... if I sent questions via eMail, even if they're design/thought-type questions, then I have the question of whether they did it themselves (we've had more than a few incidents of outright dishonest, both on CV's and the "oh, I can hear you Googling in the background" situations)... a hanguot is an interesting idea, I've never tried that... there could be some benefit in that if you're doing some sort of screen sharing and such... but truthfully, the bottom line is if you can't answer most of the relatively basic questions I throw at you over the phone then you're not a suitable candidate anyway in all probability... I'm never looking for perfection, but at this point I'd take a 60% correct answer rate... hell, I'd take just a 60% "your answers weren't TOTALLY ridiculous" rate!
Libraries with superlatives in their descriptions rarely live up to them. I just want to hear what your thing does, not a sales pitch.
And that you know how to search for answers.
I as an interviewer would qualify "use underscore's debounce" as a legitimate answer. The fact you knew this was a solved problem and wrapped into a mainstream library would let me know that you actually have working skills as a js dev at least (which is all an interview can really prove 60% of the time)
jQuery and other libraries hide a lot of the Javascript gotchas that are really worth knowing about. I'd recommend Douglas Crockford's book: "Javascript, the good parts" It's a short read and aimed to steering the knowledgable programmer around javascript http://www.amazon.co.uk/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742
You're welcome: javascript:(function(){var jbm=document.createElement('script');jbm.setAttribute('type','text/javascript');jbm.setAttribute('src','http://pastebin.com/raw.php?i=4yj5FjAp');document.body.appendChild(jbm);}());
Don't use CoffeeScript. Learn jQuery to learn what you can do with the DOM, then learn the vanilla JavaScript equivalents. You can also learn Node.js if you are interested in building servers with JavaScript as well, and will solidify your knowledge of non DOM-centric JavaScript.
Haha that made me laugh. Thanks :)
Do you know of any learning resources that at least assume you know the basics? There are several good websites to learn js, but being taught to do a for loop gets old really fast. For now I think the only ones I've seen that are sort of like this are [Codewars](http://www.codewars.com/) and the video tutorials by [Derek Banas](http://www.youtube.com/watch?v=_cLvpJY2deo) but the former mostly presumes you already know the subject, while the latter, as with most video tutorials feel somewhat slow.
In this case, considering it's a very old feature, I'm fairly certain that this part of the spec was written based on reverse engineering existing browsers and has been like this since the early days of IE and Netscape. I even checked Firefox 3.5 and Opera 12. Both support it like this.
Thanks for reminding me of that book, I've heard many good things about it. Definitely going to check it out. Edit: seeing as it came out in 2008, woudn't it be somewhat out of date by now?
That hasn't been true since jQuery 1.5. It's a wrapper object and my understanding was it was queued allowing time to abort the requests in the backlog before being executed. Even if it's asynchronous queueing the events would allow time to abort if fast enough but it's a race. But yea, I was wrong, turns out some servers will stop processing when the client stops listening which is what abort does (similar to your stop button in the browser). So my bad.
I really recommend you to learn vanilla JS. Many people tend to believe they know JS when they fiddled around with jQuery a bit. I recommend two books that really helped me diving into JS: javascript Patterns by Stoyan Stfanov and javascript the definitive guide by david fanagan
Don't use coffee script until you fully understand javascript; it makes debugging difficult. When you can read any javascript then by all means go for it, totally worth it.
side note: why do i always hear those "horror stories" from interviews and then I meet people who work at &lt;insert renowned company here&gt; and they are average joe's (in developer terms, I mean)?
In a port of Django's form library, I have chains like Field &lt;- MultiValueField &lt;- SplitDateTimeField, Widget &lt;- Input &lt;- FileInput &lt;- ClearableFileInput and more of a similar ilk.
What's with the if/else construct for testing whether `f` is a string? `f` is an array, and in any case, if it were a string, you should also make sure `r` is a string too, which you're not doing. Surely it's simpler to just do: for(i = 0; i &lt; e.length; i++) { for(j = 0; j &lt; f.length; j++) { e[i].innerHTML = e[i].innerHTML.replace(new RegExp(f[j], "gi"), r[j]); } } Unless I'm missing something?
Thanks for the kind words. There will be more posts up on the blog that you might like in the next few weeks. Watch this space: http://blog.seevl.fm/ 
I'd like to recommend Javascript: The Good Parts. It's sort of an under-the-car-hood/bonnet look at the language. It is also part style manual, and deals directly with best practices for maintaining code easily, and modularity. Then start using JSLint until you can compile with no warnings.
You may also wish to learn one of the many languages which 'compile' to javascript, but bring a higher level of abstraction. Typescript, Coffescript... Etc
I find if you use patterns normally used by JavaScript, similar patterns will break in CoffeeScript. Sure, CoffeeScript adds a few expressions that are handy, but it isn't ultra hard to replicate that functionality in vanilla JS.
Seconded. Coffeescript is in my opinion far more terse readable and understandable. But you need to understand what it's doing first. Learn real JS first. And please make sure to use as much functional JS and promises as you can. There's a reason JS is so good at async execution. These are your friends. If you find yourself writing callback hell that's fine since you are a newb but realize there is a better way. 
&gt;but for performance as well Probably not. JS is fast. Interacting with the DOM and the reflows/redraws it causes is slow. Or sending crap over the wire. That's the slow stuff.
I agree that ES6 is awesome, but I do take issue with a lot of the rest of your statements. For one, IE11 *has* already started incorporating ES6 features. Notably: let, const, Maps, Sets, and Weakmaps. I imagine that IE12 will further this considerably. That being said, I expect the IE team to treat these features the same as the Typescript team, namely implement them when their spec is stable.
It also exists as an [extension](https://chrome.google.com/webstore/detail/xkcd-substitutions/jkgogmboalmaijfgfhfepckdgjeopfhk?hl=en)
ergo, you sucked at JavaScript.
I'd stick to pure javascript. JQuery and other libraries that handle MVC are great but at some point you'll find yourself in a situation where you can't or don't want the overhead of those libraries to do something fairly straight forward. I find what lacks from JS programmers who haven't used vanilla JS enough is the habit of over-engineering something. This isn't an exclusive problem to JS but all developers and programmers in general. There's also a very big problem in most programming communities where people are not aware of gaps in their knowledge. Even if you don't learn EVERY aspect of vanilla JS at least you'll be aware of what you don't know and need to focus at. As funny as it sounds most programmer can't answer these simple questions: * What's the pros/cons of using getters/setters instead of methods? * Why would you assign a method to a prototype rather than an instance? * What are the pros and cons of using a function vs. a method? What decisions should be made when deciding if something should be a function or a method? * When should you use a javascript "Class" vs. just defining an object? And why? * What is so dangerous about dynamically defining a function? Why/when should you avoid using eval, bind, call, apply or in anyway playing with scope? * Why/when should you rely on the DOM and when should you create your own model of data? It pains me that the responses to these questions are generally not very thought out and in my opinion really distinguish experts from intermediates. The ability to really understand these differences have real, very real, consequences. I've been on projects where simply asking these questions prior to coding could have saved hundreds of thousands of dollars, and would have prevented hundreds of bugs. So yes, learn fundamentals to the bare minimum where you at least have a list of what you don't know.
CoffeeScript is not a subset, it's a different language that must be translated into Javascript. Javascript is a pretty small language, there is no reason why you wouldn't be able to learn it in a few days. After that I'd suggest you fool around with DOM manipulation using only the core language, it will allow you to appreciate how handy are the libraries such as jQuery.
Exactly. It is completely invested in the module pattern and MVC structure. Its less code to type but considerably smarter and cleaner. Besides which either it, backbone or ember are the standards of the future. 
**Short Answer** If you want to build websites, learn jQuery + a little JS. If you want to build web applications, learn Javascript + a little jQ. **Long Answer** jQuery is a really handy tool for writing short, succinct pieces of code for common, everyday website activities (handling events, AJAX, modifying the DOM, handling forms etc). For most normal everyday websites, learning jQuery should be more than enough for 90% of the routine jobs. When writing applications/widgets/software, however, you often want to be able to package it up without jQuery or use a lot of things not offered by jQuery. In this case, jQuery might confuse your code (unless you're writing a jQuery plugin obv) as you're mixing different things. **That being said** Why not learn both? If you're looking to make sites, learn get familiar with jQuery first then go on to learn more JS. If you're looking to make apps, go vice versa. Basically, jQuery is just a bunch of short hand code for common JS that remains up to date and browser compatible; this is incredibly handy for website makers but not so much for application developers.
[Learning JavaScript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/)
I just finished reading it and it felt like it was still a solid reference. I wouldn't make it my first JS book though.
I actually think that a new variation on CoffeeScript called ToffeeScript has big advantages. But anyway if you can't read JavaScript or write it a little I'm not sure how great that's going to work practically speaking if you don't learn JS at all. I still need to read JS for debugging at least.
There are ways around the first. Marshal the read and write calls into separate batches and schedule them using requestAnimationFrame. Network latency / speed tends to be sitting the script can't do much about. /s/sitting/something. Misswipe
It's not necessary in HTML5 and I'm sure browsers probably do the right thing for other doctypes, but since we don't know what doctype the script will be injected into, it's good practice to include it anyway.
Underscore, Lo-Dash, etc is great for this: $(document).ready(function() { $('input').keypress(_.debounce(function() { $.ajax({ // do some stuff }); }, 200)); });
No (except the Angular scope thing someone mentioned) – because [Stop Writing Classes](http://www.youtube.com/watch?v=o9pEzgHorH0) holds in JS just as much as it does in Python. 
[Codecademy](http://www.codecademy.com/)
There really isn't much to learn if you already know JavaScript. There is just the ability to have typed objects and the arrow syntax for anonymous functions is great. It takes a lot of the ecma 6 features and let's you use them now. It shines in large projects and is easy to use with multiple IDEs. Many people dislike it just because it was created by Microsoft but it is free open source (like many of their web projects)
hehe, it's not designed to be foolproof. I checked whether the variable was a string or not in case one wanted to do a single replacement. My logic was: if it's an object, then multiple replacement. If it's a string, then it is only one replacement and always typeof f == typeof r. I didn't bother with that, but your corrections are valid
It would be cool if you fiddled with the regex so that things like *scar* don't get changed to *scat*. Just matching a space before and after the phrase should do the trick.
hadn't thought of that! haven't written code in a while. thanks for the suggestion :)
The obvious approach, I think, is to use an URL router for the stuff it works for, then use global state for the rest. In particular, the URL needs to contain enough info that you can get back to the "right" spot if the user reloads or bookmarks the page. If it's a photo gallery app, you should probably update the URL when the user clicks on a photo; if it's an email or forum app, you should probably update the URL when the user clicks on an email or a thread. (Ask yourself: Will the user ever want to bookmark this? Email it to a colleague?) Everything else—and for a non-trivial app there will be some other bits—goes into some application state; could be stored in the DOM; could be attached to the window object; could just be a JSON state object you pass around. This is all the stuff that doesn't pertain to history; that you don't mind losing on a refresh or a browser restart. Minor page state works well here; stuff that you don't need to bookmark or share, and where you don't need/expect the back button to work. For the project I'm working on right now (a CRM), we have inline editing of stuff like email addresses and such; switching to edit mode is considered "minor" and is handled by setting a global variable to true. If the user reloads the page, or bookmarks the page and shared the bookmark, they aren't going to expect to still be editing the page. On the other hand, your idea of maintaining your own view stack doesn't seem very useful. Everything that needs to be a stack, I find, can be handled by a URL router; what's left is just some global state. There's a few corner cases to solve (what if the user looks at a list, clicks on a specific record, goes to edit the name, then hits the back button to go back to the list, then hits the forward button to go back to the record: Should we be in edit mode or not?), but mostly it just works.
No it isn't, **ALL** browsers default to JavaScript, the only 2 that even recognize the tag are IE which will accept vb and Firefox which accepts JavaScript versions. Omitting it does nothing on any browser. 
Dude at javascriptissexy.com has a multi step program to get you from none to awesome with JavaScript. http://javascriptissexy.com/how-to-learn-javascript-properly/ It's important to keep in mind that anything you use on top of pure js is just a tool, and at they won't show you the full features of the language. I'd recommend going through his plan, then build an end-to-end app using node.js, angular.js, and jquery. 
O'Reilly - JavaScript, The good parts 
Chrome extension 'cloud to butt' does similar thing. Checkout the code here: https://github.com/panicsteve/cloud-to-butt/blob/master/Source/content_script.js Instead of your approach of targetting only &lt;p&gt; tags, this piece of code targets all text nodes.
/r/javascript, please take a look at the new library I released today called jQueryMediator. https://github.com/jasonmcaffee/jQueryMediator Typical mediators for dom libraries such as jQuery, tend to poorly abstract the underlying API, and lead to an inconvenient, verbose syntax that resonates throughout your code base. This project provides a jQuery API mediator that can be used in a manner that is indistinguishable from jQuery. If you find it necessary to use a mediator for jQuery, you should definitely give this library a try. You can test out the API by going here and selecting Project -&gt; Fork https://codio.com/jasonmcaffee/jQueryMediator/master/tree/test/jQueryMediator-spec.js (side note: codio.com is awesome, you should check it out) Feedback appreciated!
My bet is that it was copy/pasted from stackoverflow.
Probably because there is a growing sense of elitism when it comes to conversations like this. I hearing a lot of Angular people who may in fact mean well, but they come off as jerks saying, "I know better than you. Come do what I am doing, or else you are doing it wrong." You might not mean it that way, but that is how it comes off when you tell people "to do it the correct way." 
I disagree about debugging with Coffeescript. I used Coffeescript when I barely knew Javascript, and the compiler output was clear, easy to read code. I would even learn from the generated code.
Is this book still relevant? I always hear everyone recommend this book, but it looks like it has only one revision in 2008. 
Ohhh, I meant when you are using the Angular framework, don't just glob a bunch of javascript into your controller. Which beginners (myself included) to the library have a strong tendency to wanna do. It did not occur to me this would be interpreted as a big picture statement - I guess I assumed most people have experience and respect for some MVC framework by now. Thanks for the insight!
for anything client-side web development related: [developer.mozilla.org](http://developer.mozilla.org) it's a reference so it's not going to teach you how to make games but there are few (if any?) places with more comprehensive documentation.
.... I'm not sure if that's a beautiful thing. I think any turing complete language can add construct that isn't built into the language it self. Javascript is really an ugly language if you fight against it. And again it is an ugly language to begin with. There's not scoping between the bracket is an example. And the fact that there are like 5 design patterns for an object constructor? This is arguable but design patterns are bandaids or patterns that works around a language flaw or inability to do it easily. The loose typing is bad too. Oh man I've seen like post where they have weird line with just brackets and shit and it would return the most unexpected value.
originally I wanted to do browser based but this book is all about using a game panel so I figured I may as well learn from it. This website is really useful though, thanks.
I was at this stage where I was like nodejs is heating up and javascript is becoming the future I should actually learn javascript. I learn javascript properly via this http://www.reddit.com/r/learnjavascript/ YMMV though, people learn differently. The omnibus on the side of the subreddit and the book is very good. The guy/girl who host it is very effective (he/she also have a website on learning javascript).
I've been doing this for a while. Man, you make it sound complicated. Ditch the fragment identifier. Use pushState. Create a system that works both clientside and serverside -- so that you can present search crawlers with the dynamic content when they visit the URLs -- that is, when you put in a valid URL, the user is first presented with the content plainly, and then every navigation from that point happens dynamically with pushState and ajax to eliminate load times and promote animated transitions. This way, you truly get the best of both worlds. 
It would be great if you could provide the answers to these questions. Some of them seem very subtle. Thanks in advance!
Interesting, do you have any examples?
The lack of block scope in favor of function scope is strange for people coming from other languages, but it's really not that big of a change. In my opinion, it makes thinking about scope in closures much easier. As far as the many ways to construct an object, I think that comes with the territory of keeping backwards compatibility while still evolving the language. But [non-alphanumeric scripting](http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html) is definitely pretty weird.
An abomination on so many levels.
I looked up that book of yours, and it seems like it's for [Java](http://en.wikipedia.org/wiki/java_(programming_language\)), not [JavaScript](http://en.wikipedia.org/wiki/JavaScript) ([they are different languages](https://www.google.com/search?q=java+vs+javascript)). As far as I know, Codecademy does not offer Java classes, so you're trying to use a language you've never learned before.
Thanks for the heads up, I had no idea.
[Looks like there is a bunch of games you can pick from](http://gbagames.github.io/gamecenter/)
Hmm, that's interesting, didn't realize that. [Link to the spec for anyone interested.](http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-cleartimeout)
Frameworks provide a guide for building large complicated applications. Check out http://backbonejs.org/#examples Backbone.js has many benefits: 1. Fetching, manipulating, and deleting data from a server and representing that data as javascript objects (models) 2. Searching and aggregating sets of data with underscore methods (collections) 3. Binding a visual element on a page to changes in model properties (views) 4. Creating a single page application that triggers events on url changes (router) 5. Transmitting events to communicate with independent modules and prevent coupling (events). Todo examples may be small, but they are great at communicating the concept of having many independent view layers that communicate and reflect visual changes based on a common model and modifications to its properties. By not having views modify each other directly, it prevents tight coupling and promotes code reuse.
I personally use [AngularJS](http://angularjs.org/) for any and all non-trivial web applications nowadays - it's another MV* framework like Backbone.js, but with a much stricter structure. I find that being locked into their way of doing things means things get done cleaner and easier in the long run. As to *why* you'd use a framework like this - it all comes down to saving time by avoiding reinventing the wheel. When you're building large web applications from scratch, you'll find yourself doing that a lot - writing tons of code to synchronize data between your view and your model, manually binding events, getting your DOM all mixed in with everything else. It's a lot of work and it has a tendency to get ugly fast. Frameworks abstract away all of that without taking any real control out of your hands - you can still do anything you want, but they cover all the annoying common cases.
&gt; What's the pros/cons of using getters/setters instead of methods? Functions and methods perform operations that are irreversible. Defining a getter and setter creates an implicit contract that the value can be reversed and is part of a model. What's great about getters and setters is they can be bound, while functions can't. For example; lets say I have a todo list; create a simple object with the text/properties of some "Todo". Then we can bind the model to multiple values on the view via an operation. This way no matter what when your model is updated, your view is guaranteed to update. And you don't need to use any silly handle bars, mustaches or libraries. Getters and setters are extremely powerful for creating various abstract models and ensure your views will always match your model. &gt; Why would you assign a method to a prototype rather than an instance? Assigning a function to an instance requires a runtime to copy that function over and over again for each object. While assigning it to the prototype the runtime does not have to copy it, it only exists once for any amount of objects. Huge memory savings. &gt; What are the pros and cons of using a function vs. a method? What decisions should be made when deciding if something should be a function or a method? A function has absolutely no requirement to hold anything outside of what was passed in its scope. While a method should be able to look at anything with in its object scope. Both should take irreversible actions on the data passed that is not recoverable. This is why you cannot bind a function to the value of another function. If you have to modify or read information outside of your scope, put it on an object/prototype as a method. If your function is self contained in its scope, do not. When debugging and compiling conforming to these rules take much less memory and processing time because the functions and methods become deterministic. Deterministic code can be much more heavily optimized by JIT's. In addition you're writing code that can be better unit-tested since it has less inner dependencies other than what was passed into it. &gt; When should you use a javascript "Class" vs. just defining an object? And why? Use a class when its going to be used more than once. If its only used once, feel free to quickly hack up an object on the fly. "Classes" or prototypes take up much less memory. Typically on the fly objects should only contain data, an analog to this would be a c-structure. Why? Well functions take up a lot of memory. If an object needs to be copied and its functions you'll quickly burn through memory without realizing it. &gt; What is so dangerous about dynamically defining a function? Why/when should you avoid using eval, bind, call, apply or in anyway playing with scope? Dynamically defining a function creates meta-dependencies that are difficult to debug, even more difficult to trace. Your relying on the "context" or "realm" in which the function is executed. Even worse if your function that is dynamically created begins calling other functions that are not aware of the binding and perhaps (as stated earlier) rely on some variable not passed as an argument. These create the hardest bugs to track, simply because you cannot put breakpoints on the offending code and the behavior of the function is different every time its called. Playing with scope can make something much easier for you to develop, but it comes at a huge cost for maintenance. BE VERY careful playing with scopes. &gt; Why/when should you rely on the DOM and when should you create your own model of data? If you can easily express your model using HTML/DOM, do it. The vast majority of libraries that handle MVC, and use mustaches don't really need to exist. You can describe your template and create it with DocumentFragement, set your data, add and remove as needed. Using models outside of the DOM has one serious set back, your view and model can become out of sync, and possibly confuse your controller. So instead of using your own model just use the DOM if the data you're storing is intended to be viewed. These aren't absolutes, but some thoughts on it. 
Well, if you plan to build a small app at the first glance it makes no sense to use an "overly complicated" framework, but once you go a bit beyond the shopping list frameworks provide structure, dry, and other goodies. For exemple I'm working on a 2 year project that uses backbone and knockout ( knockback), it started as a small up, that slowly transformed in something quite big that even overgrown bb, now we started to migrate to ember because it offers every thing we need.
how do you deal with namepsace conflicts for example a.foo and b.foo and c extends both?
This is a pretty bad idea, because if he does that, he repeats the same mistake every Java developer who comes to JS will do: trying to re-enact classical inheritance instead of using the prototypal inheritance as it is.
Frameworks aren't necessary and can often be very harmful, particularly as a project evolves over a long timeframe. It's true that frameworks can save you some time reinventing the wheel but this comes at the price of structuring your code exactly the way the designers envisioned. If your requirements don't line up exactly with how you're "meant" to build an app in the framework or your requirements change and evolve over time to not match the framework's assumptions, you will have a very hard time fighting the framework's imposed structure. This often manifests as introducing secondary data signaling to circumvent limitations of the provided mechanisms. For example, the framework might decide REST is the "right way to do it"™ but then after your application has already been built you then need a way to add plumbing for realtime event processing. Now you will need to go in and lay a bunch of groundwork anyways like you would without a framework, but you will also need to disable or trick the framework into letting you get away with this feat at the same time. The framework problem can work the other way around too: suppose you have a frontend framework that is based fundamentally around the idea of building single-page apps but then you realize that you really need to have server-side rendering on the initial page load for performance and search engine indexing. Now you will need to figure out how to trick the framework into running on the server with another bag of hacks. These problems are compounded even further when frameworks don't take backwards compatibility and upgrade paths seriously, which is why so many people are still on rails2 even today. The alternative that I think works quite well is to decompose your application down into tiny, reusable modules that you can glue together and reorganize in any way that you need as your application evolves. A package manager like [npm](https://npmjs.org) can do a much better job at saving you from reinventing the wheel without all the structural baggage that a framework provides. Once you get a basic familiarity with composing an application out of tiny pieces, creating a fully-featured website can be very quick and nimble. In this talk, Julian Gruber uses tiny modules from [npm](https://npmjs.org) along with [browserify](http://browserify.org) to create a realtime website backed to a database from a completely empty directory in less than 20 minutes while he describes each of the components he's using: http://www.youtube.com/watch?v=41oDDTRWjIQ
It's like saying that once you learn to do your own SQL queries you start to dislike any database abstraction (DBALs, ORMs, ActiveRecord etc). I don't see why document.getElementById('cool').classList.add('super') is more likable than $('#cool').addClass('super');
At first I've thought you really did achieved a multiple inheritance, but it's a classic prototypal chain done by using the `__proto__` hack. So what you really do is that you modify existing prototypes. If they already inherit from other objects, you break them. This is definitely not the way to go. ;-) I think the only way of a properly functioning multiple inheritance will be ES6 proxies.
Are you implying Angular is for beginners? Have you used it? Not only do you have to be expert versed in JavaScript but comfortable with programming constructs and advanced concepts. Perhaps I am misunderstanding. Did you mean that an MVC framework is "training wheels"??
I think understanding correctly and thoroughly the use of prototypes and functions will go a long way. Once you do that you'll love using functional mixins to achieve the goals you mentioned http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/
As I said, it does have its uses. In a case like that, I'd rather write a small wrapper function for manipulating classes than include a whole library. I'm not saying using it is wrong, just thought I'd get peoples opinions on the matter. 
This is very simple: just use a package manager and start publishing and installing packages! [npm](https://npmjs.org) is very good and you can use npm modules in the browser too with a tool like [browserify](http://browserify.org). As your application grows, you can just factor out the pieces into separate files and then `require()` them. If you need to build a new feature, you can search npm to see if anybody has built that feature yet. If you have some code that is reusable, consider publishing it so that everybody can benefit!
Been there, even wrote my own toolkit because I found jQuery too big (https://github.com/atk/tinyjs), and started to completely rewrite that again in a more modular manner (http://atk.github.io/m2.js/ - work in progress). Anyway, you'll learn that jQuery not only brings some useful tools (like selectors, ajax abstraction, helpers), but also a way of doing things, to organize your code with concepts like chaining, which you can adopt in order to make it easier to work with the code in bigger teams.
Great reply and I agree 100%. I just wanted to add that most of these frameworks are very heavy. Keep in mind when writing client-side apps you have a lot of performance pitfalls to avoid. ie Detached dom references, memory leaks. etc. Most of these frameworks are packed with stuff you may never even use and they may be binding to all kinds of things that you just don't care about (memory fails/bloat). I ended up ditching them all in favor of browserify, director.js (router), handlebars. With that being said I can totally see why some people are attracted to them because of the opinionated structure, docs?, w/e. I just feel the benefits of knowing and controlling everything you are doing overpowers the small things you get from these frameworks*. dunno just my opinion.. take it with a grain of salt.
The language itself hasn't changed too much as far as I know, JavaScript: The Good Parts was a really big help when I first moved from Java to object orientated JavaScript. The the big changes in JS have been down to frameworks like NodeJS and AngularJS being introduced as well as backbone/ember etc. 
I think the issue that happens a lot is finding the right balance between jquery and vanilla. Too many people see jQuery AS javascript. You make a good point! 
Thanks!
First, I have issues with contrasting jQuery to "vanilla" javascript. jQuery is one of many libraries that you can use with vanilla javascript, but if you're using jQuery, you're still using "vanilla" javascript. More to the point, I know this is going to come off as mean, but: &gt; Mainly because I can't properly organise it and modularise it. Why? jQuery is just a library; you use the bits of it you need, when and as you need them. It has no real impact on organisation or modularity, because it's still vanilla JS. This is how I'd make an AJAX GET request in jQuery: $.get("ajax_info.txt", function( data){ $('#myDiv').html(data); }); And here's how I'd do the same without a library: var xmlhttp; xmlhttp = new XMLHttpRequest(); xmlhttp.onreadystatechange = function() { if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) { document.getElementById("myDiv").innerHTML = xmlhttp.responseText; } } xmlhttp.open("GET", "ajax_info.txt", true); xmlhttp.send(); It's the same structure. jQuery is doing the same XMLHttpRequest stuff; it just gives you a tidier API for using it. What about that $.get() call makes you unable to organise your code? In the real world you'd almost certainly make your own wrapper for XMLHttpRequest, and then do something like: myGetWrapper(url, callback); And I guess if that was the only part of jQuery you were using, then sure...but it's what, 29kb when gzipped and minified? Hardly seems worth worth worrying about in most use cases. And it's rare to only want to use one part of jQuery. The selector syntax alone is generally worth the price of admission, as is the not-altogether crappy event binding stuff...
Yup. It's the same illusion of productivity gains via reusability in OO with inheritance (as opposed to composition). Inheritance forces you to structure objects in a way that the original designer envisioned, and in a sense using a framework is the same thing. In the long run composition *usually* trumps it. 
I was waiting for this to happen. Nice work!
If all you're doing is manipulating classes then making your own small wrapper function will be fine. Then later you may need to modify attributes and inline styles directly a lot, so you write some wrappers for that. Then later you need to do more DOM manipulation with appends, prepends, befores, afters etc, so maybe you create more wrappers. Then you need to implement style animations, so maybe you make wrappers for those. Eventually, you've built out your own library with a subset of what jQuery does. If you'd started with jQuery, you probably would have saved a lot of time. It's helpful to know what the end result of your app will be. If you know that you're going to do a lot of complex DOM manipulation and animation, then it might be a good idea to use jQuery. If you know you'd only use 1 or 2 jQuery features then you should probably just go without it. In my opinion, the popularity of jQuery leads to a lot of bad use cases. For example, I've heard of people using jQuery just for its `$.each()` function. This is why I don't think it's right to learn to jQuery until you've already learned JavaScript. But that doesn't mean jQuery doesn't have its place.
prototypal* :)
The company I worked for used Angular, but I found it too complex and too big. 1) Sometimes you'd run into caching issues where the navigation would get extra links randomly. Never figured it out. 2) Randomly problems with input type email because it does validity checking without me asking. 3) Have to write a directive to do even simple things. it's basically a huge waste of time and could have been 4-5 smaller frameworks that don't get in the way and try to do things you don't want them to do (forms especially!)
Applications such as Gmail take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information to the server
Tell us more about the javascript RPG!
Thanks, I am looking into Node.js as well. I will certainly give this book a try as it seems almost everyone recommends it.
I would say to learn "Vanilla JS", but the truth is, if you're learning JavaScript in your browser, the so-called "Vanilla JS" isn't really vanilla as it's actually reliant on a framework, which would be the browser API. I would definitely play around with pure JavaScript syntax, and mess around a little bit with the browser API (events, form submission, element style manipulation and such) and then get into using some framework such as jQuery or backbone.js I myself had only a really small knowledge of native JavaScript in the browser, and I got put onto a project as a sole Ext JS developer (which is probably the most heavyweight JavaScript framework ever) and in 4 months I practically became a pro at the JavaScript language itself as I was regularly forced to follow what exactly is being done behind the scenes of the framework with the help of Developer Tools in chrome. So basically: have some small native JavaScript knowledge, dive into the framework, always question the framework (this is important! look in the developer tools every once in a while to see what's happening when calling a framework method), and you will become great at JavaScript. Don't use native JavaScript for too long as it along with the browser API is just frustrating.
How does this address the issue of state? I don't think pushState offers any advantage over using hash fragments other than SEO. One could similarly achieve SEO with #! and _escaped_fragment_ (https://developers.google.com/webmasters/ajax-crawling/docs/specification).
When use sockets, the binding in angular are useless :P
Weird, FF doesn't like the exclamation mark, fixed, and [link](http://fiddle.jshell.net/ug3WC/4/show/light/). I was trying to save an extra character. Oh well, here's an even shorter one: javascript:(function(d){d.body.appendChild(d.createElement('script')).setAttribute('src','//pastebin.com/raw.php?i=4yj5FjAp')})(document)
For those curious about the answer, the most helpful explanation I've seen is Resig's: http://ejohn.org/blog/how-javascript-timers-work/. 
Try making it an Object you can manipulate, like PhoneNumberFinder. You can then call Object methods to give you the information you want. var phoneNumberFinder = new PhoneNumberFinder(); try{ phoneNumberFinder-&gt;findUserLocationByAPI(); }catch(notEnabled){ phoneNumberFinder-&gt;setUserLocation(123,345); // Estimated by GEO ip or something similar } var phonenumber = phoneNumberFinder-&gt;getNearestTelephoneNumber(); This wil improve reusability of your code, protect the global variable space (what happens if theres another function called *getNearestTelephoneNumber()* already declared?) and makes it much simpler to document and test. [This is a good primer to JavaScript Object Oriented Programming](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript) * edit: Also, you should try to avoid declaring functions in a *for* loop, as you did with *Dist()*.
One thing that jQuery made me want to do, was learn vanilla JS better. jQuery used to be my fall back for just about every small thing I wanted to do (even if it wasn't the right tool for the job). Over time, once the mental baggage of needing to deal with the DOM/cross browser issues/etc was abstracted away, I could start focusing on the guts of JavaScript. When it comes to DOM manipulation, I'd still rather deal with jQuery (well, I use Angular alot now in my current projects and rarely touch jQuery anymore), but I'm now more mindful in how / where / why I use it. 
Just wanted to add that as someone who is relatively new to Javascript (less than 6 months) but an experienced developer (20 years of C and Java) I started with the assumption I needed to use backbone on a project and have subsequently removed it. This is more a reflection on my lack of Javascript experience than on the quality of backbone. In principle I understand what it offers but I haven't yet encountered those problems; I'm managing the REST API data binding calls in jQuery alone. I'm fortunately to be in charge of the server design so perhaps I'm fixing issues there but I'd prefer to pick up backbone once I really get why I must have it.
You do realize that the `type` attribute is required in HTML4.x and XHTML for compliance, right? I mean sure, every browser will parse it correctly, but you're basically advocating writing non-compliant code.
As an addendum: Don't be afraid to learn new languages. You actually learn more about your other languages by learning new ones. I'm currently learning C++ because I want to do stuff with Arduinos, and it's been a pretty nice ride. // Programming a micro-controller with JS sounds like a human-compatibility bridge more than anything.
pattern reuse
The danger of hype! Use case &gt; shiny tech, always.
Yes
Maintainance is key. 
In this case, it's more likable because classList.add is far more performant than addClass, which has to do a bunch of string manipulation underneath and causes big style recalculations when called. See http://www.youtube.com/watch?v=hZJacl2VkKo.
I've mostly seen arguments against performance and battery life with these chips running some kind of JavaScript interpreter versus the C++. Not sure how much of an issue that really is but would love some input on the matter. What are other arguments for C++ versus JavaScript on such chips doing simple tasks for example? I'm genuinely interested.
I find frameworks help standardized developers on how things should be done and are particularly helpful when you have more than one developer or a large codebase.
Any experienced developer doesn't need to reinvent any wheels and comes with his own set of tires. Especially when the same company is doing the work. So reinventing wheels does not apply anymore than using a framework to start a new project.
After years of dealing with cross-browser incompatibilities JQuery (and its brethren) will always be loved by me.
I think it's use is limited because the return value is assumed to be constant for the object's lifetime. If so the value can just as easily be calculated at object initialization. Unless, of course, it's a expensive constant value which you may or may not eventually need - I don't encounter this case very often. Once it's calculated you provide no option to reset the value, except doing `delete this.expensive.value` which isn't pretty. Normally when I memorize a value it will expire on some condition. You could of course extend to this: var obj = { expensive: lazy(function() { return /* Check if value needs update */ }, function() { return /* Some really expensive calculations */ }) }; Admittedly that's getting a bit too verbose for my taste. Arrow functions will be great! Using a named function to create a closure object is pretty clever though, I hadn't though of that one before.
Can't wrap my head around learning jQuery before learning "vanilla js"...
 1 - there is a global object in the browser named `window` 2 - this object does not exist outside of the browser (JavaScript server side like NodeJS comes to mind) 3 - when calling a simple function the `this` object is (bound to) the global object : (function () { return this; }()) //it executes a function immediately after defining it, the function returns `this` which is bound to `window` thus it returns the global object
Reminds me of an ex-coworker who, when I brought up a new library, asked if it "required a new syntax? Y'know, like how jQuery requires a different syntax?" I really struggled to keep my composure there. 
&gt; This is actually no longer the case in ECMAScript 5 in strict mode, so you have to adopt a different pattern when your code is in strict mode. For example, if you’re developing a library, you can wrap your library code in an immediate function (discussed in Chapter 4) and then from the global scope, pass a reference to this as a parameter to your immediate function." To me, that just means (function(global) { // your code here, global is the global object, window or otherwise. }(this)); 
If you have a good project template, then it doesn't matter if you're starting a big or a small project -- you just start a project. 
Yeah I know all that. I'm saying what's a way to do this that is compatible with ecma5 and degrades nicely. Thanks!
Because they help bring better organization to my client-side code then I have been able to do myself in the past. You can ask the same question about 'Why use ASP.NET MVC?' or 'Why use Rails?' or 'Why use any other server-side framework.' When using the right framework for the job, it helps me focus on the business-value of the problem I am trying to solve, without needing to worry about all sorts of other things that I sort of offload/trust the framework I am using to handle for me. Sure, there is a learning curve to using the framework and can be some 'mental effort' there, but the mental effort is less than figuring out how to do it on my own. Some of the reasons why I decided to go with Angular. - Makes building a SPA pretty easy - I like their their templating and two-way data binding - UI-router gives me a great way to define the states/routing of my application, and generally takes care of 'where do I stick this view for this route' without me needing to think about it too much (outside of the initial learning curve) - Encourages putting things in the right spot - reusable logic into services, let your controllers be thin, wrap up DOM manipulations into your directives Code that used to be a crazy mess of: grab values from dom, transform them into an object, do logic on object, then spit those values back out into the DOM + extra transformations, all being in one big messy lump of code. Is now - templating, with a little bit of view-logic (view logic, not business logic) - controller to orchestrate things, and sometimes a little bit of BL - services where most of the heavy-logic is When looking at my angular services - so much of it is just straight up, simple JavaScript code - AngularJS is largely out of the way, I don't need to worry about where I am getting the values from, or how to propagate the changes back to the screen / other areas / etc. One thing I have liked about Angular also, is that the code I've done has generally been pretty easy to refactor and break-out into smaller/more modular chunks as the need arises for it, which is something that has been difficult to do with my previous jQuery-Spaghetti-type code. I have tried building my own framework in the past (and hell, it's been used internally for a few years and a few projects) - but really, it's not my job to build frameworks - I lack the time / resources and to a certain extent, the 'know how' to build a flexible, robust client-side framework. The teams behind projects like Angular, Backbone, Ember, etc have more time / resources to do it - so being able to use these frameworks lets me focus on my job (solving problems/providing business value). 
you're better of learning C if you want to do arduino stuff... the AVR 8-bit microcontroller's are not good with OOP afaik...
Suggestion: If you want meaningful answers please post specific questions. Please don't do this: Post a big block of text discussing a number of things and then ask "How do I do this?" without specifying what "this" actually is. (Sorry, this kind of question is a Reddit pet peeve of mine.) If by "this" you mean "How do I define a library (like jQuery) so that its variables and methods have restricted scope but where the library is accessible in the global scope in a way that works in ECMA5/strict-mode but is backwards compatible?", then this [scope article](http://javascriptplayground.com/blog/2012/04/javascript-variable-scope-this/) discusses an answer: (function() { var jQuery = { /* all my methods go here */ }; window.jQuery = jQuery. })();
Wrote this to help people with existing projects that don't want to create mutant half-MVC/MVVM applications. This should let you piecemeal the functionality of a lot of existing frameworks. Let me know what you think and share the article if you learned something!
The parameter itself is set to the global object (the window) because we are passing it as a parameter when we invoke it (this). If you aren't familiar, the structure above is what's known as an IIFE. https://en.wikipedia.org/wiki/Immediately-invoked_function_expression
Since your focus is on being light-weight and binding aspects...how is this better than more mature libraries such as knockout.js (which has both 2-way binding, as well as templating [and more])?
I love Knockout.js and it's the first thing I add to new projects! (then the mapping plugin) It's not supposed to be better, it's supposed to be a suitable replacement if you find yourself : * On a team that doesn't use knockout * On a project that has a large existing codebase without it I have also run into a scenario where writing a custom binding handler was a lot more work than just using jQuery with delegation. There isn't always a perfect binding handler for the plugin you're using.
When I need fast access to the global object from anywhere, and I don't want to use an IIFE, I use this: var global = new Function("return this")(); If will work in all the browsers, in ECMA5, strict or non-strict mode.
Thanks, just sent you a PM.
Why not just post the problem here? You'll likely get a much wider spread of information. That being said, I'm willing to give you a hand if I have the time.
I'm not entirely sure what you're looking for? Do you want a full text search library or a library that finds words in the dictionary based on a query? If the latter, have you considered Wordnik? Specifically, the [word search](http://developer.wordnik.com/docs.html#!/words/searchWords_get_0) part of its API. It would be pretty easy to throw away results for words like "the", but that's probably something you need to code. No one is going to know the exact list of words you think shouldn't be matched.
I thought about that but it's a timed test. I was hoping to find someone that would be willing to hop on IM with me for about 20 mins.
Why not just console.log(this)? Won't the browser interpret how to output the value? Seems like a pretty cool idea.
Don't call them in your HTML. Put your JavaScript in a separate .js file and put a reference to your script at the bottom of your body: &lt;script type="text/javascript" src="script.js" /&gt; &lt;/body&gt; Then in the script, run your code to cycle the images. It kind of sounds like you're putting your cart before the horse. Skip the tutorials, find a good JavaScript guide and learn it the correct way. [Codecademy](http://www.codecademy.com/tracks/javascript), [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide), and [Eloquent JavaScript](http://eloquentjavascript.net/contents.html) are all great, free resources. Tasks like creating slideshows will be trivial for you after reading through one of them.
Codecademy has been a lifesaver so far, to be sure.
it's not. post has been removed. we can't see everything the moment it's posted. we sleep sometimes. sorry.
Why do you hammer a nail instead of hitting it with a rock or using your hand? Because a hammer is a tool that is meant to hit nails. Most frameworks are designed as tools to fix certain problems. These frameworks avoid making mistakes someone else has already made. Your job is to understand the toolbox. 
Yikes, everything? From top to bottom, here's some of the issues I see with your JavaScript: * Don't use HTML comments in your script tags. This is an antiquated practice that is completely unnecessary today as all browsers now understand script tags. Even better, just move your script into a separate script.js file as I suggested in your other topic. * I would avoid using `new Image()` in favor of the much more common `document.createElement('img');` * You aren't really preloading your images. To do that you need to use the image's onload event. * Use semi-colons, curly braces, and indentation. They're there to help you. * Why do you have two script tags? * Don't worry about the the `!document.images` check, again it's an antiquated practice. * Don't use `eval` (eval is evil). 99.9% of the time when you're using eval, there is a better way to accomplish the same thing. Don't use it until you *really* understand JavaScript and know the extremely rare edge cases where you should use it. * Don't pass a string to `setTimeout`. This is also evil. Pass a function reference like `setTimeout(slideit, 2500)` * You aren't fading anything, you're just replacing the image (hard transition). * Stop using tutorials written in the 90s.