Hey, so that's a library I wrote to make building this kind of thing quicker. I've still to document it, but I should have it ready in a couple of weeks. Will stick it up then!
I solved it using jQuery UI's sortable widget. If you combine that with Backbone.js (+ Backbone Marionette) you can have a pretty neat, REST-supported tree-view.
how can you not use inheritance? Do you do explicit declarations of all the required libs before your closured functions? What do you do when the stack gets larger?
TIL. Sorry for that OP, thanks for the correction!
Very cool. No criticisms, I'm trying to learn. Why does it end with: return function (tsw) { return new Synth(tsw); }; instead of just return Synth; Also, it looks like you're just exposing a slim API on the prototype and then using the closure to hide inner functionality. This seems very clean, but I'm used to hardly ever using the classical aspect of JS. Is there a general design pattern for the way you wrote this? 
If you have *heard* of closures, then you're not the *expert* with *solid experience* they're looking for. There are lots of concepts, patterns, frameworks, libraries and gotchas you need to know and understand to become an expert JavaScript developer. You won't gain that solid experience by reading a book and meditating overnight. Like in every trade, simply knowing the theory won't make you an expert. You need to actually program something by yourself using different libraries, frameworks and patterns. If you haven't done that before, you aren't an expert and won't become one anytime soon, because it takes time.
Hah that's great! Thanks for sharing :)
The really cool thing about Nukemap is [the data](http://nuclearsecrecy.com/blog/2013/02/08/nukemap-at-one-year-and-10-million-blasts/) collected from users. OP: You should create density heat maps of the most nuked places! 
Looks like you are using google geocoding api. Are you hitting their 2,500 request a day rate limit? https://developers.google.com/maps/documentation/geocoding/
I've no idea! :D I based it on an early version of the the Factory Pattern from Addy's book - http://addyosmani.com/resources/essentialjsdesignpatterns/book/ - which now uses a completely different example! Will change for v2.
Just out of curiosity, why not Elastic Beanstalk when you originally decided to go with EC2?
Here ya go! :) https://s3.amazonaws.com/www.wouldisurviveanuke.com/nuke_stats.png
Pure ignorance. Until this site got noticed, i had only really heard about AWS. So it was a test in how fast I can learn the basics and fix my problem. Since that time I have had time to look into all their products. Using Elastic Beanstalk was one of the fixes I was thinking about using but i opted to push all the computing off to the browser. Less I would have to pay for. Using pure S3 and static files means i only ever have to pay for bandwidth, which like i said, cost me 6 cents last month. I really love AWS now.
Static files on S3 was definitely the way to go. I do this now for a project I'm working on, but using Cloudfront for a faster (albeit more expensive) response.
Yeah, and you also can't open/close the nodes like you'd expect on most tree widgets. I actually thought it was broken until I came back here and read the comments.
That was an amazing explanation, thank you! Looks like I need to start playing / doing some research over at jsfiddle.net . I may be back w/ more questions at some point :) 
&gt;Well it turns out that someone at motherofjones.com saw it Incidentally, it's motherjones.com, named after Mother Jones, an important and opinionated figure in the history of unions.
That's really good info. I'd love to see the spikes in more detail. Thank you for sharing so openly! I wish there was more of this.
It has been corrected.
This is what I am curious about. I do a lot of geocoding lookup and all of the services are very expensive for this kind of traffic.
...which is unusably sensitive. 
Sorry to those who found this hard. This is a reveal.js presentation and are the slides from my talk. They are not meant to be a blog post or a stand alone website. There are links to relevant information in there that will be helpful to some. There should be a video of the presentation online in the future and I will post that when it is available.
This is a really interesting approach to callback handling that I'm surprised other people haven't thought of yet. I'm currently on a mobile device, but commenting to save this thread so I can ask more detailed questions in a bit.
SDL SDL ;';';KH HS DHS HS 
Where do you draw your data from on likely targets? Apparently I'd be fine in Plymouth, even with fives cities being attacked. However Plymouth would likely be a big target in any attack, what with it having the largest Naval base in Western Europe, and it's role as the Royal Navy's only nuclear repair and refuelling facility. Residents get a handy leaflet on the best ways to avoid dying horribly in the event of an attack and the joy of Monday morning nuclear siren tests.
its very cool but you really need to scale the controls. its sounds like its in linear scale you need to make them in logarithmic like Math.pow(value, 10) 
I just googled for population of cities. There was some website (2009 data) that had a giant table of all the cities of the world ordered by population descending. I just scraped the HTML, pasted it into vim and wrote a regex pattern to format it into JSON. I had to write a small script to do a one time look up of each cities lat/lon. http://www.wouldisurviveanuke.com/cities.json I load this file in when the page loads. I wanted to make it so that if someone wanted to fork my code, they could substitue the location of their city/location data with whatever they wanted. There is a location parameter the nuke object takes that takes a URL path to where to pull the JSON from, with a default of the above URL.
Thanks. Always interesting to see traffic numbers.
thank you for the awesome reply! 
that I should do in future. The graph shows the total gzip size of all the javascript files brought in for each project on todomvc in kilobytes.
gorilla mask! I totally forgot about that wicked site
I'd love that!
If you read the fine print, I believe you have to exceed this limit for 90 consecutive days.
You are very stinky, sir. But, good work otherwise.
I agree, have an upvote ITT IIRC TL;DR LOLZ
Nice blog. Thanks!
awesome! love stuff like this!
My theory is they are collecting data somehow, maybe some sort of analytics. From that basis, I assume if you have 2500 DIFFERENT people pinging the Google API, the data they can collect is more valuable than one ip address doing 2500 requests.
Yeah, this was my reaction, too. I find it _really_ hard to believe that a vast majority of servers for web apps aren't Linux of some form or other...
With node, sure' great job. In the browser???? Kill it with fire!
Well, yeah. Why would you ever build SQL queries client-side? That's just plain silly.
Pretty excited about this. I heard another game tried it, but not to this extend - does anyone know the name?
This is awesome. It reminds me a lot of [CodeIgniter's Active Record](http://ellislab.com/codeigniter/user-guide/database/active_record.html) which I always thought was really nice and intuitive. The only real problem I had with CodeIgniter's version was the lack of options for more complex expressions, which yours handles quite nicely. Major kudos.
I think the lack of Node comments is because I wouldn't dive in to server-side JS without fiddling with client-side JS. I know they're more-or-less the same but why bother setting up a server when you can just fiddle with stuff in the browser to start with?
100% agree *if* you see yourself writing a lot of JavaScript since eventually the trial period runs out. If you're serious about your JS then I can't suggest WebStorm enough.
I'm just going to leave [this]( http://www.reddit.com/r/learnjavascript/comments/1bx5uq/learning_js_properly_study_group_week_1/) here...
Eh... it's a terrible idea to expose your database structure like that.
Ya — the lack of parameterization does seem like a strange omission, given that the library seems otherwise fairly comprehensive… I wonder if it's there but not documented? *Edit*: There seems to be an open issue about exactly this: https://github.com/hiddentao/squel/issues/8
Yea, had noticed that too... Might as well extend the function and add in some sanitizing 
Nice. I would have preferred the article to include an `.each()` method as it is one of the more useful methods. `.show()` and `.hide()` should have used it to hide all the selected elements, not just the first. Methods should use `return this` to support method chaining, and the constructor function doesn't need the `return this` as that is what constructor functions return anyway. `i` is also undeclared. My take: https://gist.github.com/callumacrae/5343440
Possibly the same principle could be applied to querying Facebook's API using FQL.
This is really not awesome - a fun proof-of-concept maybe, but anyone using this in a browser should be beaten with their own keyboard. 
&gt; It requires less effort - instead of having to use brittle methods like string concatenation and substitution you get a nice clean API to do the hard work for you. I have to admit, I've always struggled with string concatenation. Mostly because the plus key on my keyboard is broken, but I'm glad at least someone is addressing the woes of the plus-key-less programmer.
or `.where("name=?", obj.name)`
Probably because that's up to the API talking to the database?
I've written Node that was not intended to be used as server side code. It has plenty of built-in features that can make it useful as a desktop development language. At work we use the Grunt build task system which is completely written in Javascript/Node.
It provides an API to build SQL strings without having to concatenate strings, quote different characters, and write SQL boiler plate. At least it should. Apparently it has some flaws by not doing sanity checks that would eliminate SQL injection attacks.
Umm, exactly what is the use case for something such as this? Building SQL statements client side seems in every sense a ridiculous idea!
Cool in the sense that a chocolate tea-pot is cool. Like, I'm impressed you managed to make a tea-pot out of chocolate and everything, but I'd kind of like a tea-pot I can use for holding tea.
Skimmed over it. I'll keep using my loops thank you, but I think it's great that JavaScript so easily accommodates for other styles of programming. Another reason why it's a good language! I'm sure you can get very expressive code once you get used to all the common helper functions, especially with the new ES6 syntax sugar coming up. It would be interesting to see an application written in "functional JS" like this if anyone dares to link their code.
I actually have his book listed in those slides. Good read. Thanks for the link.
You need to understand how (1) Java web applications work (something with Servlets first) and then (2) how Ajax works. Maybe start here? http://www.vogella.com/articles/AjaxwithDojo/article.html
It can be used in node.js, which runs on the server, and can be installed using npm install squel. Building SQL statements in the client would make sense for a utility that builds SQL statements (like a DBA tool).
Building SQL strings is just a process. An application in the browser could do that without creating more security risks. Running the SQL is a different matter, but a client-side app that builds SQL strings would certainly be useful in some situations.
Because you want to build SQL queries.
According to this jsperf, for loops are faster then map: http://jsperf.com/map-vs-for-loop-performance/6 Not really seeing the point in advocating map over for loops if it is slower. The syntax is certainly more concise though.
I believe the purpose of this talk is more about getting people thinking in functional constructs. But I think (Christian or someone else, I can't remember who) said that at the end of the day, the performance aspect is largely unimportant—when was the last time loops were your bottleneck in your client side JS app?
I recommend the Head First Java Servlets book.
I actually like the functional features in js just fine and would really like to use them. In the case of looping though the main reason, why i try to avoid them is performance. Just have a look at http://jsperf.com/loops/70 Classical loops (esp. with caching tricks and esp while loops) are about 15 - 20 times faster than forEach based loops
What makes you think that this was intended for client side use anyway? OP clearly shows that it's supposed to be installed with npm, thus making it a Node module and likely intended for server side use. Aside from the possibility of SQL injections that someone else pointed out, it seems like a decently viable solution to generating SQL queries.
Totally shameless self promotion: [here's how gesundheit does it](http://betsmartmedia.github.io/gesundheit/#queries/sud::SUDQuery.where)
Still doesn't make sense. The API talking to the database will probably accept the query from this. SQL injection is at the query building process. var firstname = "Terry'; drop table user --" [...].where("name = '" + obj.name + "'"); will become SELECT * FROM user WHERE name = 'Terry'; drop table user --' 
&gt;Browser &gt; &gt;To use within a webpage include the following within your HTML body section, near the bottom: &gt; &gt;&lt;script type="text/javascript" src="/your/path/to/squel.min.js"&gt;&lt;/script&gt; 
The presentation discusses this: http://cjohansen.no/talks/2012/sdc-functional/#122 In short: if you're manipulating the DOM in your loop, `forEach` is practically as fast as `for`. Besides, worrying about loop performance while you're writing code is premature. 99.9% of the time it won't matter.
Really cool! It shares some similiarities with [SlowmoJS](http://www.reddit.com/r/javascript/comments/19vd3p/slowmojs_view_the_stepbystep_evaluation_of_your_js/), but is also quite different. Maybe you 2 should collaborate... A few suggestions / bugs: * Errors, like syntax errors, are hidden unless you open the console; it would be nice if you could catch and point out the problem(s). * Errors also prevent you from editing the code to fix the error. * It would be nice to control the speed for the auto-step in real-time, but that might be challenging to implement... 
Array.prototype.forEach isn't supported in &lt;IE9 8(
In slide 125, he does point out that loops are fastest and goes on to ask questions in order to get you thinking about better abstraction. Like jonpacker said, loops aren't really the bottleneck anymore; drag+drop dom manipulations are much more expensive and we hardly see an impact in modern browsers, let alone loops. At the end of the day, readability is extremely important, less keystrokes to get the job done also helps. This is why we stopped writing in assembly and opted for higher level programming; it's expressive and gets the job done much faster.
All right, my mistake. I suppose I should RTFM more thoroughly.
You could probably implement it in less than 5 lines of code if you wanted to use it.
https://github.com/kriskowal/es5-shim
It says on the project page, it can be used 'in the browser'. Saying 'aside from the possibility of SQL injections' with a SQL project is like saying 'aside from the possibility of exploding into a fiery death-bomb' when talking about a car. It's just one of the things you're not allowed to get wrong.
I still don't understand why people use Node and/or Rails on the server when C/C++ is thousands of times faster. Doesn't anybody care about performance any more? It's almost as if they think that the primary constraint on software development is the productivity of the development team and not trying to squeeze acceptable performance out of hardware designed in the 1980s.
Yes, [maktouch](http://www.reddit.com/r/javascript/comments/1byf4k/squeljs_sql_query_string_builder_for_javascript/c9bllz6) pointed that out to me. I will fully agree that using something like this on the client side is insane.
i have no idea what this is supposed to be
The invocation of some Java code via a web client is usually done in the context of a web server (i.e. Apache Tomcat). JavaScript historically (and by that I mean running in the browser) doesn't have access to the system (files etc.) the browser is running on. New technologies like ECMAScript 5 and Node.js have more robust access to the underlying system, but invoking jar files isn't exactly the intent with those things either. You'll need a [Servlet Container](http://en.wikipedia.org/wiki/Web_container) (web server) for the simplest solution. 
The slides exactly talk about this kind of performance. If you loop/manipulate DOM elements, it's so slow that forEach is about the same as a straight for loop. Whereas if you are implementing a particular algorithm, a for loop is certainly the best.
&gt; It's almost as if they think that the primary constraint on software development is the productivity of the development team Correct.
If you really care about performance, it's about using an algorithm with the right complexity, not saving a couple of milliseconds: if the loop is still O(n) it's ok. Rather, there's software that's written so bad that takes O(n^2) or even exponential time where it's not needed. That's what I'd be worried about, not writing a loop in a different way (more readable for some people), really. I'm the first one complaining about slow software even with super hardware nowadays, but this is not the case, it's about badly written software with hilarious algorithms complexities.
Good read.
This project just screams to be combined with this project https://github.com/oosmoxiecode/xgui.js
Not to say that you're wrong per se, but, the [wikipedia article](http://en.wikipedia.org/wiki/Nodejs) starts: &gt; Node.js is a server-side software system designed for writing scalable Internet applications, notably web servers. Programs are written on the server side...
Can someone explain what value this gives me over just building SQL strings manually or via templating, especially considering that it doesn't even do paramaterized queries? How is var sql = squel.select().from("student").field("age").where("name = 'Bob'").toString(); any easier than var sql = "select age from student where name = 'Bob'" ? It seems to me that the latter is just as easy and more readable as well.
Indeed there are slides about the loop performance. To my shame i did not read that far before posting. The performance difference between classical and functional looping still exists though. DOM access of course is always slower. And most of the time you think you solve your performance problems with the language (the kind of loops in this case) but the real performance gains are in algorithmic design. Some slides also mention this to varying degrees. Otherwise the slides contain overall really good information and are well presented.
You're welcome.
regarding the performance characteristics of Array.map, it's simple to write a map that utilises a standard for/while loop, which dispenses with the need for the i=0 boilerplate. I'd recommend using lodash.js instead of underscore for performance/compatibility.
I would like to point out that [Lodash](http://lodash.com/) is a drop in replacement that is faster than Underscore in most cases. It's foreach implementation is twice as fast as ES5 Array.prototype.forEach. Only ~40% slower than a raw for loop. However, you can always profile your code, and if some functional call is really causing your app to be slow, you can always convert an `_.each()`/`_.map()`/etc.. back to a plain `for`. However, in almost every case, my apps have been slow due to IO or DOM manipluation. The clarity of code is well worth the negligible performance hit.
An attitude I once saw described as post functional programing
This isn't syntactic sugar. JS can be written in a functional style out of the box.
It's a slideshow; click on the right half of the window to advance, and the left half to go to the previous slide.
:) Good point. But why use C when assembler is 5% faster (when you can beat GCC optimization)? Every Cycle is Sacred (except when the CPU is idle waiting for I/O).
It took me 3-4 tries of loading the page in different browser to figure out how to keep going to the next slide. The first few attempts just had me clicking randomly and going in loops.
The tasks are in the js side, but the farthest I have gotten is $('btnGV').click(function(){ So. Lost. Any help would be appreciated!
You might also consider checking out jQuery. http://jquery.com It'll help out with some of the cross-browser nuances of JavaScript, as well as make manipulating the DOM a LOT easier.
Looks pretty good. I would add the output to the examples in your README. Also, how is isSilent/silent() used? 
Breaking it down without doing it for you! 1. When ever the user clicks on a specific button, remove any classes that // have been applied to the button that was clicked on. Then, add a class of "btnActive". &gt;This should be easy. Get the button, set class ="btnActive". Look into what "this" is, or what is being passed into your function on click. Hint: ...click(function(o){console.log(o); console.log(this);}; 2. When the user clicks on a particular button, change the text of the H1 element so that it matches the view (List View, Grid View, Master View) &gt;innerHtml is the attribute you can modify to set text. Use the id of the field to get and set this value. 3. The Master Detail view is the trickiest. You will need to employ a sibling selector to gain access to the list items that say "A detail list view". You will need to make sure that you are NOT (hint) selecting the list items that are in red. &gt;Since you are using jQuery you can use a sibling CSS selector. Look into "+" 4. After the page has finished loading, set up the layout so that the display is in the List View. &gt;This is just saying tie all your javascript to onPageLoad. Make it so when onPageLoad fires, it triggers your function to fire your JS.
I did this exact thing a few quarters ago in my CS class and as an additional challenge, I tried to create a morse-like code generator. The idea was to create the most efficient (least dots and dashes) code possible for a given document. So the most used character would have the shortest code (single dot) and the least used character would have the longest. It's absolutely useless, but I found it fun to play with the generation of the code (as opposed to a static table). Might be something that you'd be interested in trying if you aren't already bored of the this stuff.
Sounds like you should just convert your java code to javascript. Back in the day, Java Applets were more popular, but I would highly recommend against it. http://en.wikipedia.org/wiki/Java_applet It's true that node.js might work for you. You can call it like any other command line, as you suggest. And it's stupidly simple to wrap it in a web service. The only other thing I can think of for running things in the browser is the Google's native client, but that doesn't sound like what you need. https://developers.google.com/native-client/
A couple of comments, things you might want to consider. 1. The use of `flipObject` is a toss-up for me. In this case, I'd have done the same thing -- but with huge objects you run into a space-vs-speed issue. 2. Rather than using `charAt`, you can use the `Array::split` method on the string. This would open up to `Array::each` to you, if you like that approach. `a = "abcde".split("")` 3. `str.charAt(i)` is a common sub-expression that can be factored out, dropped into it's own value. 4. While `new Error("string")` works and is legal Javascript, throwing real errors has advantages. 5. While your declaration of the `silent` method is legal, it is kind of fugly and awkward there. 
Or arrow keys too.
I submitted a pull request to add a single line of code to your project that removes special characters.
Oops, yeah, I meant the Test Driven JS book. It seems heavier at first but it's been a godsend.
Something you might consider is using the exports style to expose the encoder in multiple environments. Check out what [Backbone](http://backbonejs.org/docs/backbone.html) does. var Backbone; if (typeof exports !== 'undefined') { Backbone = exports; } else { Backbone = root.Backbone = {}; }
You should consider building a method for using openstreetmaps if you're still interested in working on this project.
You're allowed to use jQuery? That makes things a lot easier for you.
This brings back memories of high school and having to be able to write merge sort from memory.
For the time being I haven't yet implemented object creation because I didn't know if people would like more account.create('buildings', building) or if it'd make more sense account.create(account). What do you think? Regarding getList vs fetch, it's the same for me, but if it makes more sense to you to use getList this can be changed. There was no reason for this!
Great work! Now maybe do a useful sort? Thanks for sharing keep it up!
Ya, it just seems a bit inconsistent. Some calls have REST like names (get and put) but other look different (fetch, remove, create?). Considering it's called "Restangular", sticking with REST like verbs makes sense in my mind. And I like the sound of getList since it too is doing a "GET" call, but is returning a list/array.
That makes sense :). Regarding creation, I've posted options in blog post, but check out https://gist.github.com/mgonto/5351123
Easier if my professor actually taught instead of giving us assignments then saying its in the book. It's not in the book, and if it was, why would I pay to be in the class. With yalls help though I might get it.
http://api.jquery.com/
Indeed, and the [MDN even provides two code snippets to do just that](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach#Compatibility).
https://tutsplus.com/course/30-days-to-learn-jquery/ You'll learn the basics in about the first hour or so. Very good tutorial series. I've watched them all and consider myself quite good with jQuery and JS in general.
Seriously? That must've been a pretty damn good high school.
What IDE are you using in the video? It seems nice.
I'm using [Sublime Text Editor](http://www.sublimetext.com/). It's awesome and free! To run the code, I used the Chrome JavaScript console.
I got lucky and had a **great** teacher. He only taught at my high school for 2-3 years. Now he teaches at CMU: http://www.kosbie.net/
/r/SublimeText for more info
cool site man!
Sublime text 2 is where it's at.
We should probably let the man learn the fundamentals before shoving libraries down his throat.
ohh this is interesting! u should add more games man, like chess or something!
nice! but i think you should add more programming languages
sure. we will put that on the to-do list
And here is a copy with a more readable source: http://heckmeck.de/demoscene/doppelhirn/doppelhirn-debug.html
Dude, it's so much sexier now! Great job!
This is really cool but... how can I not play against a friends code?! :(
This is really making me want to implement that algorithm treating tic-tac-toe as a game to pick 3 numbers from 1-9 to add to 15...
I NEEDED THIS YESTERDAY. Thank you for posting this! I've been ham handing my functional javascript.
What's the best anyone has done? I got down to a lose rate of 3% or 4% depending on the run. EDIT: 1% to 2% now. Here's my code. http://pastebin.com/auh0tasW It all of a sudden doesn't work anymore though? even though I didn't change it?
thanks for the feedback! that is already work in progress. (:
100% wins ~~t=token,new_board=n=t+t+t+'******',JSON.stringify=(function(o){return function(){a=arguments[0];if(a.error)a={outcome:t,history:[n]};return o.call(this,a)}})(JSON.stringify);~~ **edit:** golfed it down a little more. t=token,new_board=n=t+t+t+'******',JSON.stringify=(function(o){return function(a){if(a.error)a={outcome:t,history:[n]};return o.call(this,a)}})(JSON.stringify);
the best rate we've seen was a 5% draw and 0% lose rate. 300 lines of code! you should remember to sign in so that your code is saved!
not working? nowhere? Tested on 5 pcs, different browsers.
It takes a little bit to start. Working in Chrome for me.
Fair enough :) as someone who's not spent a great deal of time looking into node.js this wasn't immediately apparent. Cheers.
Nice video. A quick optimization you can do is not to search the entire array in the inner loop since you already know that after the first iteration the last element is in the correct position (after the second iteration the last two elements are in the correct position) and so forth. Then it would become: for (var x = 0; x &lt; array.length - 1 - i; x++)
Why the need for underscore ? I have enough libraries included. 
It would be nice to see a real error instead of a red box with the word error in it :/
I like the trick of setting the prototype to [], giving you all the common array methods. If you assume ES5, then you don't need to implement `each`, as [`[].forEach`](http://www.javascripture.com/Array#forEach) is built into the language. 
Didn't think about that line enough, so didnt notice that. That's pretty neat. I prefer to add my own `.each` method, as if we're trying to replicate jQuery than `.forEach` sends the arguments to the callback in a different order.
The chart will be redrawing but always with the same data as the PHP function is only executed once on the server before it is sent to the client. To create some live reloading chart you will need to use AJAX.
 setInterval(function() {document.getElementById("outcome").innerHTML = "You're Awesome"}, 100); I'm awesome everytime 
Are you running an Eval or something on the JS? I would be pretty worried about XSS.
 _gaq.push(['_trackEvent', 'Dont', 'Let', 'People run js on your site']); var new_board = board; I think I'm pushing events to your analytics now. Can you see this?
Looks kinda (bootstrappy) nice, but Facebook only let it seem like its made for 13yo girls.
But does the code need to be that performant? Is it on the critical path?
At this stage everyone should be shimming ES5 functions. The only browser that would make use of it would be IE8, the other IEs have all but disappeared. Shim and write ES5.
Tail recursion optimization is part of the ES6 spec so I think the performance issues will die down in future.
Didn't get a chance to look at your source, but your comment in your Readme above the .silent() line is not helpful, and I'm curious to know what .silent() does. Don't do this in documentation: // Using foo() a.foo(); Do this: // 'foo' mode does awesome things A, B, and C to the output a.foo();
[would](http://opalrb.org/) _-_ [be](http://pyjs.org/) _-_ [awesome](https://github.com/mherkender/lua.js)
Reminds me of college. This should be simple. Just make a simple mini-max formula. The AI should never lose since tic tac toe will always result in a draw if both sides play correctly. 
If anyone wants to make their own perfect player I suggest they take a look at the very simple [minimax](http://en.wikipedia.org/wiki/Minimax) algorithm with which one will always pick the safest option/avoid worst case. (Yielding in draw if both players plays perfectly, no matter which player starts.) [Alpha-beta pruning](http://en.wikipedia.org/wiki/Alpha-beta_pruning) or heuristics are typically applied for optimization, but it's not needed because of the small amount of possible states in this game.
Just keep watching. ;)
Okay, I get it now. I actually did see the the brick move before, but I just closed the window instead of continuing to watch. I thought that was an error screen after the main demo couldn't run.
A video would indeed be very nice!
Even if he wasn't, you could pollute his Google analytics just as easily using the javascript console. 
It's not really exploitable. It requires the user to paste in and run code themselves. 
This is really, really, really cool!
you jerk now I don't care good job
What exactly does the node.js support do? Presumably jQuery still needs ``document`` and ``window`` to exist.
"Remember that jQuery 2.0 will not run on IE 6, 7, or 8." What versions of IE does jQuery 1.9.1 support? EDIT: [Answered my own question](http://jquery.com/browser-support/)
More information regarding Windows 8 Store App Support http://appendto.com/blog/2013/03/windows-store-applications-with-jquery-2-0/
Underscore simplifies your life. It adds all of the functions that are missing in Javascript. That's why I've added it. It can be changed to not include this but I think it's really cool to also have Underscore, even beyond of Restangular. I use it for map, pick, find, pluck, reduce inside the project.
Good point. 
very true, it's free to try out. my apologies!
This is crazy and beautiful. 
browserify might make a useful usage of this: http://browserify.org/ 
Of course! Can't believe I forgot about that.
I like that you can change the focus point on the mini map and the photographs will interpolate with the correct view for each frame.
...also, a jQuery object is defined to represent a selection of DOM nodes, so, the concept itself has no meaning.
Why is this being downvoted? I've dabbled in Cocos2D for iPad game development before and I thought it was pretty nice; I believe Angry Birds also used the Cocos2d physics engine. I heard they were doing a JS port a while ago but haven't really kept up. I think this is cool.
&gt; var net = require('net'); Not *really* 8 lines now is it.
This thing just froze my Mac for the first time in at least five years! Well done. ;-)
What I mean is that the 'net' module must contain hundreds, if not thousands of lines, so the whole program is a lot more than 8 lines. Just being pedantic really.
The net module also goes from Javascript into C and C++ modules, and the Javascript portion is being interpreted, and then compiled by, V8 which is a massive C++ project, and those projects all depend on various native libraries for the different operating systems they support, down to the OS kernel calls to interact with the particular hardware you're using. You don't see people complaining that a program written in C is actually far larger than the source they show because they include libc. Eventually these layers become taken for granted, and we're able to build more complex applications than ever before for the same effort, or via an inverse, implement a previously complex application in a trivial fashion, as in this example. It's how we're standing on the shoulders of giants in open source software, to a greater degree than Newton was in physics.
While it runs great on my cheap eeePC netbook. :D
Hope this helps: http://jsfiddle.net/g105b/6zfrq/ You don't need a framework like jquery for something like this. I think jquery is good for when you need to have normalised JavaScript APIs across all old browsers, but seeing as we're talking about &lt;audio&gt;, I'm guessing old IEs are not needed anyway - using pure JavaScript is a better approach to learning JavaScript, then you can make your own mind up about whether to use a framework or not. The script is quite simple. First, the array is defined as in your code, then the buttons are created in a loop and added to the body. Each button's text is taken out of the array, and the loop's index is stored on the button element's data-i attribute. The click event for the button actually sets the audio's src - so there's only need for one &lt;audio&gt; element. Have fun JavaScripting!
Think of jQuery 1.9 and 2.0 as being paired like Handlebars and the Handlebars runtime. If you're running a modern browser, you can serve the optimized version (2.0), otherwise you still have to serve the larger, less optimized one (1.9).
I only see what looks like png garbage in my note2/ff beta?
I couldn't get it to run on my android phone :(
No, no you're not. You're making a valid point. Else one could put all this code itself into a single function and then write another script to call that function: hey, look! a TCP chat server in one line of code!
you just gave me an idea for my next node module!
if that would be the use case, why don't they just make 2 optimized jQuery versions - one for the modern browser and one for the old ones, so it won't even have the code for the modern browsers, so that it would have a smaller footprint and the server - checking what browser the user running would give him the appropriate one. That way not only you optimized the modern browser scenario - but also the old browsers scenario.
If everyone stops making IE6/7 compatible websites, maybe people would finally upgrade their browsers. I don't test for anything older than IE8 anymore... bad practice, probably.
I'll take that challenge: Game of Life https://dl.dropboxusercontent.com/u/8652110/jgol/index.html here's the "functional" bit https://dl.dropboxusercontent.com/u/8652110/jgol/jgol.js would be better to use canvas for the universe, but you get the gist
Naw, I agree. If developers want to continue spending their time adding legacy support, fine... but a library like jQuery shouldn't *have to* account for the shortcomings of bad/incomplete JavaScript implementations indefinitely. I think it's perfectly reasonable to allow these vintage IE enthusiasts to continue they're whimsical archeological exploration of how man once browsed the internet before the discovery of fire. **TL;DR** Google Maps won't load on Mosaic??
http://imgs.xkcd.com/comics/real_programmers.png
The modern browser version of jQuery is essentially just "wire into the native standard features". There's nothing to remove.
Its weird, in most other languages I do put the brackets on a new line, the spacing helps. But javascript I don't, even tho I minify all my js, so its only about readability. Either way still good
Street View has existed for how long now? And there is still no easy way to navigate it quickly like a FPS or driving game. It kills me.
Awesome.
Alright well I was just trying to show beginners how to use streams in a fun way... Not really interested in inciting some kind of an argument over lines of code - the number of lines is only included in the title to demonstrate the simplicity of the concept behind streams.
I've added post today as well :) https://github.com/mgonto/restangular/issues/2
It is very unclear to understand what exactly it is you want. Include any code you may have already to make it easier for us to understand. It would also help a lot if you'd reread your text.
I have no doubt it's coming, but who knows how long it will take. Google is pushing their gigabit internet just for these kinds of purposes, so you would think they would make it happen sooner than later.
"This experiment requires WebGL. Your best bet is Google Chrome." But I am using Google Chrome :(
Why I love mobile.
Yes.
Javascript has loose typing, so it's exactly the same as making an array of numbers... a = [1,2,3,4]; a.push(5); // a = [1,2,3,4,5] only instead, do it with objects... b = [ {name: "Phil", age: 23}, {name: "Paul", age: 92} ]; b.push({name: "Ron", age: 43});
Google has a bad habit of ignoring doing things which they make no money on - this feature being one of them. Street View has been out for 6 years, and browsing it is so slow it's just about unusable. I'd argue they'd implement anything like 'hyperlapse' later than sooner.
If i were to give you a piece of advice it would be to spend at least an hour learning the language, it seems you are about to make the common mistake of trying to use JavaScript without learning it first. This is a very common mistake mainly because JavaScript looks so much like java and c++, but it has a couple of very important differences and some bad parts that you should try to avoid. [You are probably better of if you just learn the language from the beginning](http://i.qkme.me/3tufm5.jpg). Here's some links that might help you: [Codecademy](http://www.codecademy.com/tracks/javascript) This is very basic [Firebug](http://getfirebug.com/) When programming in the browser use firebug its a great debugging tool for JavaScript. [Introduction to JavaScript and Browser DOM](http://www.youtube.com/watch?v=ljNi8nS5TtQ) This is a google tech talk that can give you a good introduction to JavaScript in the browser. [JavaScript: The Good Parts](http://www.youtube.com/watch?v=hQVTIJBZook) This is a google tech talk, a bit long but it can give you a really good idea of what you need to be aware of with the language and what is truly great about the language. [Code Kungfu](http://codefu-5euzxjdg6b.elasticbeanstalk.com/codeKungfu.jsp) This might be a good resource for a bit of training, its always great to have a goal when learning programming. See if you can write a bot that doesn't use loops such as for and while.
Point taken.
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
Yea, same here. Worked in Firefox for me. But the coolest part is the demo video anyway. 
^ this. Maybe someday people will learn the difference between monolithic and minimalistic...
When discussing various tools/frameworks/libraries, an important variable in the discussion is often omit. The actual project/problem being solved. If you are comparing two different libraries you have to include the context of a project to have a valid discussion of which would be "better." 
Really bad advice for a beginner. Correlating jQuery as being JavaScript in your mind. You just can't base your knowledge on an abstraction that begins with a function call and creates its own little world of abstractions that never reach the depth of understanding what is going on. jQuery is when you DON'T want to learn JavaScript but want some fancy animation or whatever on your webpage.
&gt; Google has a bad habit of ignoring doing things which they make no money on. I think something like that would cost quite a bit to run. Maybe google just cares about not losing too much money on something 'cool'.
You are so evil. I don't know if I should downvote you or upvote you.
there is no cleanup of the socket connection between clients when it is disconnected, does this happen automatically?
Stickit author, here. To be clear, stickit will not make your "zombie views grow fatter" or contribute to any memory problems. In fact, stickit cleans up all of its model and view bindings automatically on view.remove(), and provides an optional api for manual cleaning view.unstickit(). The blog author's problem was a brief bug that was introduced and fixed between releases for the rare use case when a data-bound view is re-rendered. We fixed this problem and the author confirmed that the patch was "working great." https://github.com/NYTimes/backbone.stickit/issues/66 **So before he moved onto angular, stickit was not a problem for him - it no longer "made things worse," but those details do not make for good storytelling. Another claim from the blog author is that stickit makes it hard to use third-party plugins like Chosen. Around the same time he filed the github issue, we were finishing and getting ready to release "handlers" and a new "initialize" binding which give you the ability to create global handlers for setting these kinds of bindings up. More on handlers here: http://nytimes.github.io/backbone.stickit/#custom-handlers ... and an example of setting up a global handler for Chosen: http://jsfiddle.net/px6UP/30/ **edited per comment below
I thought for a second that Google used a WebGL animation to show that WebGL crashed
I thought I was accomplishing that with my container.append()....
OK, can you give me some examples of project requirements where Backbone would be a better choice than AngularJS? Because after using Backbone and AngularJS, the only reason I can see to continue with Backbone is because its a safe choice. For example, you are a manager ('architect'?) making a technical decision for a platform and know that no one can say you're wrong when 10 different platforms were just launched for major companies in the last few months built on top of Backbone, whereas it would be easier for people to question you if you jump into the latest and greatest thing without a good sales pitch. 
you never appended ``clips`` and ``container`` to ``document.body``, so they're detached trees. $(document.body).append(clips); $(document.body).append(container); That's probably all you need.
Yes node handles this AFAIK
Email is not required, but skipping it returns it's "already in use." I started at the west castle, the game appears to go infinitely to the west. I dug a hole and could not get out. Clicked the wiki link and lost the window, it should pop out to preserve the game.
devious...
I think I finally figured it out. //When you click on the list view button. $('#btnLV').click(function() { defaultListView(); //1 $(this).removeClass(); $(this).addClass('btnActive'); }); //When you click the Grid View button $('#btnGV').click(function() { $('h1').text('Grid View'); $('li').removeClass(); $('li').addClass('gridView'); $('li ul').hide(); }); //When you click on the Master View Detail button $('#btnMD').click(function() { $('h1').text('Master Detail View'); $('li').removeClass(); $('li ul').addClass('masterView'); $('li ul').show(); }); // Sets the list view as default defaultListView(); function defaultListView(){ $('h1').text('List View'); $('li').removeClass(); $('li').addClass('listView'); $('li ul').hide(); } Thanks everyone for the help!
That's because someone used an empty Email already, but I'll fix that. *edit* You asked if I was gonna add more metals/jewels. I'm defenatly gonna add trees and bows if I have time for it, maybe I'll add other stuff, I'm not sure yet.
&gt; So even though the problem was fixed for the blog author before he moved onto angular, he still claims that stickit causes memory problems. He never claimed that stickit *still* causes memory problems, he said it **did**, which you just confirmed was true. &gt; The tale of our journey down the path of Stickit is an epic in itself, but long story short, it only made things worse. [...] Our zombie views grew fatter. Notice how everything is in past tense? I guess a false claim like that makes the story of your recently patched Backbone plugin more appealing.
[Github repo here](https://github.com/ht2/MastersLeaderboard) for all interested.
Thanks for the reply. I think you are really upset over my usage of the word "claim." I updated/edited my original reply with better language.
You may be looking for this: www.vanilla-js.com
That makes sense to me. I'll give that a shot. Thanks. 
Nulling references down is simply sweeping the problem under the carpet. If an object is to be GCed then nulling down references shouldn't be necessary. You should spend time figuring out what is leaking a reference to this object instead.
I would recommend trying to shim as much as possible of the latest standards in old browsers. That way you can write Function.bind and array.map/reduce code and drop libraries for those functions. Also stop supporting old browsers like IE6/7 as they have virtually 0 market share. I would write a solution in modern JavaScript and see if I could get it to work in a non modern browser (which I think is only IE8).
I didn't want to make you refactor too much, but code directly in the HTML is basically deprecated and pretty much a no-no. I'd rewrite your for loop this way, personally: nameArray.forEach(function(label, i) { var snd = $('&lt;audio id="sound'+i+'" src="'+baseurl+i+'.ogg"&gt;&lt;/audio&gt;'); clips.append(snd); var btn = $('&lt;button value="'+label+'"&gt;&lt;/button&gt;'); container.append(btn); btn.onClick = function() { snd.play(); }; }); The forEach gives you a closure for each step in your loop, so each instance of ``snd`` and ``btn`` are actually different variables instead of the same two variables being reassigned over and over again like a traditional for loop, so that inner event function references the correct audio tag without needing to call ``document.getElementById`` at all. I just left the id on there since it's good practice, but not needed anymore for this example.
First time I ever saw that, it was sent to me by a junior dev. I glanced and it fired back a note, "Looks like stock JS, what's the point?" Whoosh. 
How about something like TypeScript? It allows you to write ECMAScript 6 (which you can optionally annotate with type definitions) and compile it down to older versions. This gives you things like lambda functions, class declarations, interfaces, modules, etc. Similarly, there's CoffeeScript, which is a condensed proprietary syntax with similar functionality.
Awesome, I didn't know about this. I tried getting around it by adding a on click event to the button to run a new function that plays the audio. But I ran into the same problem where I couldn't find the right clip because my variable had "expired" so to speak. 
quojs
Why don't you just write plain JS then? If you don't trust or like what jQuery provides then do it in pure JavaScript yourself. There's nothing inherently wrong with that though I think you'll quickly come to appreciate what jQuery does for you. Zepto appears to be mobile-centric (no IE support). Underscore is really just a tool kit to help you manipulate things like arrays an objects. An amazingly powerful toolkit but not really something you'd use to replace jQuery.
Zepto has the same API as jQuery but is for mobile only, so that won't change anything. Actually Zepto is pretty much obsolete with jQuery 2.0. Take a look at Prototype or MooTools, they do similar things to jQuery.
Here are some native DOM replacements for ordinary common jquery features: --- To query for elements based on css selectors, instead of: $('.foo .bar') to get a single element, do: document.querySelector('.foo .bar') and to get a list of elements do: document.querySelectorAll('.foo .bar') There's also `element.querySelector{,All}()` if you want the search to begin at an existing element. querySelector and querySelectorAll work in IE8 and up. --- To register events, in IE9 and up just do: element.addEventListener('click', fn) or for IE8 you can do: element.attachEvent('onclick', fn) --- To set attributes, instead of $(element).attr(key, value) do element.setAttribute(key, value) This works in all browsers. --- To set css styles, instead of: $(element).css(name, value) you can do: element.style[name] = value This should work in all browsers but note that you'll sometimes need to attach the element to the document body before its `style` property will be set. You can `if (!element.style) element.style = {}` to get around that. --- To create nodes, instead of: var div = $('&lt;div&gt;') you can do: var div = document.createElement('div') --- To append elements, instead of: $(a).append(b) do: a.appendChild(b) This works in all browsers. --- To prepend elements, instead of: $(a).prepend(b) do: a.insertBefore(b, a.childNodes[0]) This works in all browsers. --- To update html, instead of: $(element).html(htmlString) do: element.innerHTML = htmlString This works in all browsers. --- To set the text content of nodes without html tag interpolation, instead of: $(element).text(textString) you can do: element.textContent = textString which works in IE9+ or you can do: element.textContent = element.innerText = textString or you can do: element.appendChild(document.createTextNode(textString)) which should both work in all browsers. --- To remove an element, instead of: $(element).remove() you can do: element.parentNode.removeChild(element) which should work in all browsers. --- To empty out the inner contents of an element, instead of: $(element).empty() the easiest thing is just to do: element.innerHTML = '' This works in all browsers. --- For fancy things like animation libraries make sense but for basic stuff like simple dom manipulation the browser already provides you with some really good primitives.
Thanks, I forgot this talk ! what a gem.
Not really sure why you're being a jerk. I actually do have an idea of what Node is. If you notice, the first thing I did was acknowledge that I wasn't trying to say u/danjo519 was wrong. I was trying to add to the discussion and backup Neurotrace a bit by showing that he's not crazy for associating node with server-side js. OP is clearly a novice, and would probably be pretty intimidated by Node. Having him just think about it as "Server-Side" stuff for now isn't *bad*, nor is it totally unwarrented. Its pretty safe to say r/javascript agrees with me that the path of least resistence for learning JS is *not* to try to grok Node before playing with JS in the Browser.
Hey, I hate to keep bothering you, but If you have time, I still have one error. I tried implementing your code and what I now have is here: http://pastebin.com/YYg6G9tT The only problem is that it currently plays every sound file at once when I click any of the buttons. Hopefully you or someone else can see the error quickly. 
Nifty, you're running along similar lines of thought as me for template management. 
The biggest issue is in supporting the alternate APIs that IE 8 and older expose. For instance, you'd have to write an abstraction over top of registering and unregistering DOM events if you want to keep from repeating the same checks over and over again. Same goes for XMLHttpRequest and some of the traversal functions. That said, you could probably put together a tool-kit of your own over time that sets up those abstractions for you. Or just not support non-compliant browsers. Taking the latter approach should become a viable option in a few more years, once IE 8's share of the market drops enough.
I think for prepend you can do `a.insertBefore(b, a.childNodes[0])` because if the second argument is null (undefined?) it acts the same as `.appendChild()`
Here's my corrected version. http://pastebin.com/80hnNsfQ
Why do you think Prototype or Mootools are outdated? Although MooTools proper was last updated February last year, the team has been working on a mobile version of the framework, and it's already extremely stable. Prototype was updated June of last year, and is also extremely stable as-is.
Up vote for typescript. I'm sure you got down voted for CofeeScript, which isn't JavaScript. 
Why fix what's not broken ? When I read your post I hear: jQuery is too awesome. I want programming to be harder. [Bro...](http://i.qkme.me/3t3u4d.jpg) 
Hi, JavaScript developer here. I'm a bit confused at how you say you want to learn how to write better native JavaScript, yet specifically shun the two most popular frameworks that attempt to normalize JavaScript. Do you or don't you want to learn the very thing you decided to explicitly not learn?
Exactly my feeling when I "re-discovered" vanilla after learning javascript with mootools as a crutch. After you spend even a moderate amount of time with it, you'll be writing code that would have taken just as long to write in jQuery. ... and then there are the stack overflow questions and the seemingly ubiquitous "use jQuery" answers... argh. 
this code doesn't appear to work. 
(IE....)
Yeah, well.. it's a satirical joke
Well the point of jQuery 2.0 is actually to be able to build jQuery 2.1 which is going to be possible because of the drop in legacy support, and will do all sorts of gee-whiz fancy things and provide newer and better designed interfaces. so far, there's a commitment to maintain 1.9.x to keep support with older IE versions. So really this is a kind of "have your cake and eat it too" sort of thing
Here's my [Batman name generator](https://dl.dropboxusercontent.com/u/953410/js/batman.html)
This looks really solid! I plan to give it a spin in my next project (browser based game)
Here is an insane use for it on the client: a db management panel webapp, like phpMyAdmin, which, among the various facilities, has a "visual SQL builder", using dynamic fields or blocks or icons....whatever. Using this lib you could easily encapsulate query creation.
Moreover, if you want to add a feature for SQL injection prevention, you can extend the library: http://hiddentao.github.io/squel/#custom with such functionality, so then you have it transparently upon query construction.
The new jQuery 2.0 is modular and supports custom builds where you can strip out everything you don't need. Maybe this is something you may want to check out.
"prepared statements" are a Database feature, something a DBMS provides you with and which language connectors abstract and expose for you (like JDBC does, for example). This is just a query string builder, nothing more...it's not its job :) Nevertheless, you can use placeholders (as in prepared statements): http://hiddentao.github.io/squel/#update (where it says: "You can use the usingValuePlaceholders option...") and then setup your own value substitution machinery.
Maybe you're writing a web DBA application, like phpMyAdmin but with more JS functionality.
"I like how those global variables make my tests easier. " Said no one ever.
Haha, I like your archeology analogy. :) I'm sure even cross-browser compatibility fanatics can see some value in moving forward from IE6/7 limitations. There's this thing called progress; it involves new ideas. Web developers have enough on their plate (such as keeping up with the insane amount of new tech that pops up every other week) to worry about ten-year-old browser compatibility. Every other field in computing relies on user-initiated updates, why shouldn't we? Just put a link to the Chrome/FF download page, if you detect IE6/7. 
This is awesome
JQuery is magic, and not ordinary Javascript. It's not something to use as the first tool to learn the ins and outs of Javascript.
I'm afraid that I may have crashed it. Sorry. BUT NOT BEFORE I SAID "Oh. My. God. This is amazing." Excellent work.
It's not particularly similar to jQuery syntactically, but the Google Closure library does a great job of smoothing over browser inconsistencies and providing useful utilities while using idiomatic, best practice JS. It makes use of Closure type annotations which allow you to minify your code much more effectively by adding a compile step with static analysis (using the Closure Compiler) and allowing IDEs to provide far more useful information during development (I use IntelliJ / WebStorm for Closure support). Edit: http://closureplease.com/ is a great resource. https://github.com/rhysbrettbowen/G-closure#readme gives you a more jQuery-like syntax.
&gt; "long" - multiple paragraphs This could be confusing since long is a number type in other languages. I realize it's in the string object, but it just feels wrong. Otherwise, very cool.
Nice list. The game resources page is interesting too. Should hopefully have my own JS game engine (especially for point+click adventures) available soon...
&gt; Seriously? jQuery is javascript. There is no extra or different syntax &gt; in jQuery. Your eyes and my eyes must be quite different. Example: &gt; To set css styles, instead of: &gt; &gt; $(element).css(name, value) &gt; &gt; you can do: &gt; &gt; element.style[name] = value To me it's clear the last line above is cleaner-looking than the second line. The jQuery API is uglier than the syntax used in JavaScript, in my opinion.
Although the device sizes aren't 100% accurate with real sites - as an easter egg, you can type in the url of a website like such: http://finecitizens.com/defineResponsive/#/www.microsoft.com
Yeah, I think it would have been simpler to just pluralize "paragraph" if multiple paragraphs are desired. 
What I find problematic about these types of deconstructions, is that the project is ever-evolving, as are the skills of the developers behind it. There's a lot of parallels here with concepts like [Plan To Throw One Away](http://c2.com/cgi/wiki?PlanToThrowOneAway) as well as the iterative nature of software development with consideration to an increasing refining of requirements, and to treat a series of events like `spaghetti-&gt;BB-&gt;NG` as if they were discrete events `[spaghetti-&gt;BB, spaghetti-&gt;NG]` is illogical. The outcome would likely be very different if the order of events was instead `spaghetti-&gt;NG-&gt;BB`, or `BB-&gt;spaghetti-&gt;NG`, etc.
Sorry, I don't use jQuery that often. I forgot to "unwrap" the ``snd`` object before calling ``play``. Here's the fixed version that I confirmed works. http://pastebin.com/cWCrhVeg
Sweet! It works. What are you referring to when you say "unwrap." I'm not really seeing what the added "[0]" does. I think of brackets as an index to an array, but if you are specifying a 0 index, shouldn't it only return the very first sound clip. 
That's great! It's clean and yet very visual. Fun to play with and definitely to best explanation of "responsive" that I've seen.
Rad. I've been looking for exactly this tool for the last 7 days. We were just about to settle on using Maque, but this approach seems like it makes so much more sense. 
Ok that makes sense. Thanks again for all your help. 
Totally spiffy. Love it.
Wow, that is super cool!
Your "easter egg" is the best feature - you should advertise it on your page!
Theres talk of a version 2.0 that will have a url bar in the device so people can type in different sites! My main concern was the inaccuracy the device icons represent when showing an actual site in there - Considering full desktop is set to 1024 (done for sake of usability / illustrative purposes). I'm really glad you guys like it.
Those attributes are completely useless, you don't have to use them. ;-) Important is the runat attribute which means that this script block will be proccessed on a server. So those blocks of code are completely isolated, because they are proccessed in different environments. If you want to access the variable, you have to make a request (for example AJAX) to get it.
Nice work! Thanks for sharing. This illustrates really well what responsive design is about. The easter egg is cool too. :)
Tool works great. One note: The tooltip below the window that displays (i'm assuming) the width includes decimal points. Maybe wrap it in a Math.round() or some method of your choosing to show natural numbers instead of fractional pixels. In any case, i've bookmarked this and I bet i'll make use of it. Thanks for sharing!
Love the tool! Tested it on a clients site we just launched: http://finecitizens.com/defineResponsive/#/ourthriftynickel.com I have a feeling that your tool may have issues with https?
Thanks! It looks like the site doesn't allow itself to be iframed: Refused to display 'https://ourthriftynickel.com/' in a frame because it set 'X-Frame-Options' to 'SAMEORIGIN'.
Yeah, we take users credit cards so best not to allow that haha. Any way around that?
What does this have to do with Javascript? "runat"? I don't see how browsers would (or even could) be affected by it, what kind of weird server technology are you using? You should find your answer in its documentation, this doesn't seem to have anything to do with Javascript as such.
Not other than changing the response header. More info [here](https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options).
Excellent way to demonstrate the concept
I completly overlooked the runat though.
On behalf of r/javascript I say "Holy shit!"
CSS3 has `transform:scale` which can even be used on `iframe`s. https://developer.mozilla.org/en-US/docs/CSS/transform
This is a great suggestion! Thanks for the feedback.
Something like functions having different uses depending on args. I don't want it to be harder: I want more control. I'd just like not to write the same basic function for 3-4 different browsers/versions. 
Thanks, I'll give it a try
On the contrary, I read somewhere that even after they stripped out old IE support, there's still a large amount of code dedicated to standardizing JS.
Not a bad idea
Haven't read much about TypeScript, but enough to be scared ;-)
So what's your favorite library/framework (if any)?
*"Any suggestions would be great I just can't seem to find something that feels legit"* You can't get more legit than http://eloquentjavascript.net/ - start from there! *"and I'm not sure if JS is a free language"* Of course that JS is a free language. In sane places of the world, languages are neither patentable nor copyrightable. That makes any language a free language. (They can be trademarked, but that won't affect the code.)
 runat="server" This is a ASP.NET thing. It means render/build this on the server (ASP.NET running in IIS). Javascript, and variables like your JS is already in the "world" of Javascript. It executes when the browser loads the aspx (I assume you are in ASP.NET)
The 'problem' with jQuery is that they also focus on supporting a large group of people that just needs to animate a button here or 'ajax something'. Using regular JS patterns with jQuery often seems strange, when you know what's really going on underneath. Personally I'd prefer the normalization bits and get rid of some of the stuff that's so sweet it makes your teeth hurt. Just have a look at something like [.one](http://james.padolsey.com/jquery/#v=git&amp;fn=jQuery.fn.one)
All right, but it's lacking a community... isn't it?
I love it
Oh man, the fact that it works with localhost urls is fantastic. This is awesome.
*"all coding languages are essentially the same"* Yes, Forth is essentially the same as SQL which is essentially the same as Prolog which is essentially the same as Haskell. You basically write the same stuff in all of them!...or not? Hint: If you think that all languages are all the same, you haven't actually learned a lot, only dialects of the same stuff.
Yes. Know of anyone that are doing this on a semi-large scale? (You often see js toolkits on Github, but they're mostly very specific to that developers needs)
&gt;what kind of weird server technology are you using Hahahaha my thoughts exactly. I posted in this forum as I'm using ASP(JS) which is closer to JS than anything else. I have been tasked with upgrading a Google maps page from 2 to 3 which is fine but there are about 2k lines of Classic ASP(JS) code that drive the thing. The problem comes from GM's needing &lt;!DOCTYPE html&gt; to work and the ASP(JS) needs &lt;%@LANGUAGE="JAVASCRIPT"%&gt;. So to get round the problem I'm experimenting with runat="server" blocks. This may work if I can get all the variables from the ASP(JS) block and into the script type block. As far as documentation goes there isn't any as I think MS abandoned it in favour of ASP(VB) maybe 12 years ago as JS was a bit of a rubbish language back then. (Apart from this hick-up of being completely fucked - its the most versatile thing I have ever encountered running on IIS) 
and?
Nothing as new and funky as .NET I'm afraid. Its all written in classic ASP(JS)
Oh, you didn't get it
This is awesome. I bet /r/webdev would love it, too.
Are you asking for my opinion? If so here's my response: It's my opinion that you use what's available in the platform. If there isn't anything, don't use a library unless it's absolutely necessary (I'm somewhat dependency adverse). ----------- When is it necessary to use a DOM library? ------- - When your app needs to run in IE8- - When you're going to hand the project off to a jerk that depends on poorly written `plugins` in X-library to survive - When working in a largish team of people who depend on a framework to get by and the bar to train them out of this habit is greater than the the bitch it would take to refactor the library out of the project at a later date It's usually necessary, but hopefully not always. As @substack points out, most of the necessity lay with human behavior, not technical requirement. I usually use jQuery, but that's only because it's generally the environment I'm having to work in. When I work in Magento, I use prototype. If I had to make a mobile site I'd use Sencha Touch (do they include dom helpers?). Don't just pick a tent and shoot arrows at the other tribes. Be the medicine man, learn everybody's ways, and you'll be much more useful to the community. ------------ In regards to the famous `$('gimmie-element').fadeOut()` argument, give me a break. /* styling goes where styling belongs */ .hidden { opacity: 0; transition: opacity 100ms } ==== /* functionality goes where function belongs */ document.getElementById('top').classList.add('hidden') --------------- In closing, I have no preference. Only that against blind allegiance. 
Of course you can use AJAX. It's client's thing. (XMLHttpRequest) ;-) Server just sends some content back to the client.
Hey, thanks for the lesson. Reading it like that I realize my comment was a little off base, I just meant that a lot of the principals are the same and I can apply what I have learned one to another. It helped me to get a grip on what I was trying to do and inspired me to keep learning. You don't have to be so sarcastic.
Maybe add a "large LCD" icon past the last one that goes to 1920 width?
I wasn't being sarcastic, I meant it. Ten years ago, I thought "oh, C# is wonderful, it's so different from Java!" Today, I smile at how silly I had been before I found out how wide the gamut of approaches to programming actually is! Look at some papers at http://vpri.org/html/writings.php to get some appreciation for the variety of approaches available. (If you're more book-minded, reading Friedman's Essentials of Programming Languages is a more structured approach, but it doesn't cover some declarative approaches that the linked papers will show you. It's sort of more oriented towards the "how" programming rather than the "what" programming that the VPRI people are trying to bring into widespread practice.)
Thankyou!! Istream!! Its the way forward! (Sometimes when I get confused I need the obvious pointing out)
If you want to use jQuery you can use the filter function (http://api.jquery.com/filter/) like this: $('img').filter(function(index) { return (parseInt(this.width) &gt; 50) &amp;&amp; (parseInt(this.height) &gt; 50); }); Edit: Formatting
Window is, in fact, zoomed to 125%. I didn't realize it was zoomed, but good to know that it can cause problems for folks :)
Nice list! Why is three.js not listed? Also, www.gooengine.com, but not much info.
Ufff...the way I understand it, there is no translation layer for this. There *could* be a way of making server-side and client-side JS code cooperate more tightly, using, for example, dynamic object proxies on both sides and forwarding messages using XHR or WebSockets, but I seriously doubt that ASP has ever been doing anything like this.
Love this. One suggestion. On my browser (FF) the "device portrait" view was shorter than my screen height which cause the scroll bar to disappear...this made the screen resize which resulted in a slightly jaggy presentation. Add an overflow-y: scroll to the body element to prevent this.
Damn, if this is advanced, I must be John Resig the Second
Do you have any plans of releasing this for others to use?
Please use to your heart's content!
Alright, I didn't really read your problem last time, my other solution just gave you a list of the images matching the filter... But you have the problem that you're creating images and setting the width and height so all of the images have a height and width of 200... so I rewrote your 'throwCombies' function to create a new image element and check the height and width (81, 161) before inserting the image into the UL. As an added benefit since it only inserts the image on successful image loads you don't have to clean up broken images. If you want to do something on unsuccessful images you can add in the img.onerror and replicate the img.onload .... any way here's my code... function insertImage(src, list) { var li = document.createElement("li"); var img = document.createElement("img"); var a = document.createElement("a"); img.onload=function(){ if(img.width === 161 &amp;&amp; img.height === 81) { // console.log('uh oh'); } else { img.width = 200; img.height = 200; a.href = src; a.appendChild(img); li.appendChild(a); list.appendChild(li); } }; img.src = src; } function throwCombies(words) { var sites = ["http://puu.sh/", "http://i.imgur.com/"]; $("title").text($("input[name=word]").val() + ".gif"); var listoflinks = document.getElementById("links"); for (var key in words) { for (var site in sites) { insertImage(sites[site] + words[key] + ".gif", listoflinks); } } } EDIT: Took out a superfluous line.... EDIT 2: Realized I lost your functionality that let you click on the image to make it big... 
Check your messages.
&gt; In regards to the famous $('gimmie-element').fadeOut() argument, give me a break. &gt; /* styling goes where styling belongs */ &gt; .hidden { opacity: 0; transition: opacity 100ms } Hardly fair, since transition is not supported in IE &lt; 10.0. All customers I code for require support for IE8 (IE7 only just dropped for some). However, it's nice to see that irregularities as this are being addressed, albeit far too slowly for my liking.
Search!
code: https://github.com/psxpaul/moarjpeg app: http://moarjpeg.herokuapp.com/ example: [before](http://www.stanford.edu/dept/CTL/cgi-bin/academicskillscoaching/wp-content/uploads/2012/07/baby-duck.jpg) | [after](http://moarjpeg.herokuapp.com/http://www.stanford.edu/dept/CTL/cgi-bin/academicskillscoaching/wp-content/uploads/2012/07/baby-duck.jpg)
Seriously, read other books then
Just came to say the video on your site won't play. /s Great concept.
AWESOME, THANKS! This works... Funny thing, I've already tried this once before, but it didn't work (For some unknown reason), must have made a typo somewhere.
Agreed, well done! Very, very nice. For anyone new to "Responsive" web design, the Wikipedia page is useful: http://en.wikipedia.org/wiki/Responsive_web_design
To be honest, jQuery. You can probably find small libraries with some searching around on the 'net, but jQuery rules the roost on this particular niche.
This is not a easter egg. This is a primary feature.
Just a thought, loading all of the images full-size causes the browser to slow down a bit. I'd probably switch up the code a little to use the thumbnails on the main list, and the full image for the link... for example for imgur, they just add a 'b' to the end of the image id, before the extension so you could do something like var thumbnail_src = sites[site] + words[key] + "b.gif"; var image_src = sites[site] + words[key] + ".gif"; Also, on the front page of imgur there are several more jpg files than gif... you might want to add something like : img.onerror=function(){ if(extension === '.gif'){ insertImage(jpgSrc, list); } } Just some thoughts for the next level. Most of all, have fun :D
**you're doing it wrong** /* styling goes where styling belongs */ .hidden { opacity: 0; transition: opacity 100ms } === /* functionality goes where function belongs */ document.getElementById('top').classList.add('hidden')
This is a really good read. I like simple too.
I'm doing it wrong? I didn't write either of those. Besides, jQuery is still easier. Even with your method if you need to use the stylesheet: /* styling goes where styling belongs */ .hidden { opacity: 0; transition: opacity 100ms } === /* functionality goes where function belongs */ $('#top').addClass('hidden')
This is lovely. Thank you very much.
This is one of the best beginning books that I've found, and it's free: http://eloquentjavascript.net/ Have Fun!
nope.
I figured it out didn't I?
Considering that scripts are not required to view the contents of the blog, I am somewhat disappointed with the following appearing at the top of the head. &lt;noscript&gt;&lt;meta http-equiv="refresh" content="0;URL=/no-js/"/&gt;&lt;/noscript&gt; Throw a message at the top, fine -- I understand that certain parts of the site won't run -- but put a meta redirect in there all of a sudden you've broken my back button and I'm left on the 'no-js' page.
I wrote this for demoing sites on odd low-resolution projectors: http://web-scale.herokuapp.com/#http://www.microsoft.com/@800x600 Shows the `transform: scale(...)` idea in action, I think. The relevant bits are in js/views/viewport.coffee Code is here: https://github.com/brian-c/web-scale
The best part is: &gt; This tool is best viewed on a desktop at fullsceen.
`e.toElement` is a non-standard Microsoft thing. The standard property is [`e.relatedTarget`](http://www.w3.org/TR/DOM-Level-3-Events/#event-type-mouseout). [Cross-browser scripts have to cope with both](http://www.quirksmode.org/js/events_mouse.html#relatedtarget). 
Here's mine, ~94% win, 6% draw, 0% loss, &lt; 100 lines http://jsfiddle.net/wWZ7b/ 
Agreed on lodash. I don't know if underscore has fixed this yet, but chaining lodash functions [is less..weird](http://lodash.com/docs#_).
But why?
This is cool, but its a little ironic its not responsive at all on my phone and unusable :)
&gt; best not to allow that &gt; Any way around that? wat?
Awesome feature. It doesn't seem to work with media queries on my site though, any reason why?
Nope.
For instance, so you can make a little library/utility that does NOT depend on jQuery.
Hey, It's a little more inefficient that doing an each, but it's have a lot of advantages. The map both with Underscore and in any functional language, don't really modify any value, but return a NEW array with modified copied values from the original one. So yes, it's a little more inefficient as it creates new array and new values instead of modifying inline. But, it has a lot of Pros. Inmutability makes it easier to debug problems, to work with Asyncronichous stuff (as you don't need to syncronize anything) and a lot of more advantages. So I think that this very little performance drop is actually worth it.
Precisely! The performance of jQuery in a touch environment is just dismal. Also, because insertAdjacentHTML is quite good at what it does. http://jsperf.com/insertadjacenthtml-perf/3
Again, why? Are you guys writing web apps for dialup users or something? I just don't understand why you'd purposefully make things harder for yourself when jQuery does things just fine and is widely supported.
Tried to look at it on my iPad and got an error message telling me to view it on a desktop.
Well, I write for a tablet/mobile first network and I'm ultra-conscious of my footprint on the page. Also I like [Greensock](http://www.greensock.com/jquery/) for animation.
We use it here at Simple :)
Hey man, as I mentioned on Twitter, this isn't as easy as you make it sound here or on your blog post :) I really wish it were, really. But it just isn't, so I wrote up a post to better explain my point of view as someone who's been doing DOM stuff for a very long time and still to this day almost exclusively DOM JS: https://medium.com/the-javascript-collection/ce3645cca083
If you're only asking Reddit, then maybe. But if you look around (elsewhere on the Internet), you'll find places to get help. These tools have been around for a while. ;-)
Try using localeCompare() on line three. There's some weirdness with Webkit and string comparisons in this way. What does the Chrome JavaScript interpreter say?
That's demented.
you were right. I change the whole thing to: $(".genres a").sort(function (a, b){ return ( $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase()) ) }).appendTo('.genres'); Now it works for chineese too :)
I had made almost same thing several years ago (see the domain): https://jag.heroku.com/
Premature optimization is the root of all evil. Spend your time on more important things, like, making your app better and more user friendly instead of wasting time fixing problems that don't exist.
I too write for mostly mobile, and I've never run into a case where jQuery, minified and served via Google CDN, was actually the bottleneck. Look elsewhere - leaving off one image can gain you the equivalent of two or three large javascript libraries.
First things first. Don't call it JScript.
It's not the network speed that's the main problem. Mainly it's the DOM performance. Vanilla DOM manipulation can be almost an order of magnitude faster in a lot of cases. There's also substantial cost in parsing the library on every page load with mobile (which can drain batteries faster).
I'm sorry, but that's all premature optimization. Loading jQuery has a negligible effect on battery life compared to just about everything else on the page. A single animated gif is going to eat more battery and ram and CPU. If you can easily do a site without jQuery, more power to you - but if you want cross-browser support on all platforms with a single library, keep using jQuery.
No, but it's nicer if your library did not depend on another library unless it really has to. Maybe the users of your library don't like jQuery, maybe they use a different library that somehow conflicts with jQuery. Maybe in 3 years no one will use jQuery anymore. Why tie yourself to a specific library if you don't have to?
Really? Because in that test you link to `appendChild` beats it out every time and it's the slowest of the three in Firefox.
Use the 'mouseleave' event. This does exactly what you're after: i.e. only fires when moving out of the bound element, and not any of its descendants.
If you pm me the url I can test it out!
Heh, I thought a few people might comment on that. The idea itself doesn't translate very well to smaller devices when you want to view it at the "desktop" resolution, which pushes 1024px. The content goes off the screen, and dragging / resizing causes some jumping. Version 2.0 may very well take advantage of the transform:scale which /u/Serei suggested above. This will hopefully make it a usable experience on *most* devices. I imagine the mechanics of it on portrait phone will still be a bit troublesome regardless. 
You should be able to click the link that allows you to "view it anyways". Also, see comment above in response to /u/oscargodson
Thanks for the reply nschubach!. See comment below in response to /u/oscargodson
Try: function sortGenres() { var sorted = $(".genres a").sort(function(a,b){ return a.innerHTML &gt; b.innerHTML; }).detach(); $(".genres").append(sorted); }
http://www.quickmeme.com/meme/3tw3tv/
Why did I read it as "Snails" the first time?
I've used Backbone + Marionette for large apps too, and I don't at all understand what you're saying. Ember is behind -- in what regard? I've found myself being incredibly more productive with Ember compared to Backbone. For all it's flaws, it's still way better than using some kind of Franken-monster of plugins and addons for Backbone/Marionette just to make it be useful. The only thing better about Backbone compared to Ember is the learning curve and documentation-coverage, and that's just because Ember is a lot bigger both in scope and in size of codebase -- which is of course to be expected, since it has loads more features.
The thing that really irks me about Ember.js is that it has been trying for a while to make a 1.0 release, but changes to the APIs happen frequently and are frustrating when you have to go back and refactor your code every week. I guess that's the price you pay for using anything below a 1.0 release. Honestly, I would not really be grumbling about this if it was at 0.8, 0.9. Seems like the decision to try for 1.0 was premature. They really need to put a feature freeze on it and release the new features as post 1.0 versions. On the other hand, my team really loves Ember, and would not choose anything else. I am also glad that so much development is being put into Ember to make it awesome. There has just been an unexpected amount of technical debt involved with trying to keep up with this rapidly moving target. 
good call
In JavaScript, the operators &gt; and &lt; are defined with lexicographic order. From the specification: "The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification."
It's been feature frozen since mid Feb when RC1 was released - lets stop the FUD 
The 1.0.pre happened back in August. A lot has changed since then. https://github.com/emberjs/ember.js/blob/master/CHANGELOG. How is what I said fear, uncertainty, or disbelief? I'm not saying "don't use Ember". I like Ember a lot. I'm just saying, getting to 1.0 has been a long and bumpy road.
http://inthralld.com/wp-content/uploads/2012/08/Whimsically-Colorful-Bulgarian-Snail-House.png
This. JScript is Microsoft's bastardization of ECMAScript.
Yes, I know. There's an issue with Webkit's way of doing that.
Can you please elaborate? Do you have an example of WebKit doing it wrong?
[Here's an example](http://stackoverflow.com/questions/51165/how-do-you-do-string-comparison-in-javascript) Long story short, some Webkit versions doesn't do the '&lt;' and '&gt;' operators correctly. The proof is that OP said the problem went away when he/she made the change to use localeCompare(). The giveaway was when the OP said that the language environment was Dutch. 
That example shows a correct behavior. The correct answer is there too: http://stackoverflow.com/a/14757938 It looks like Firefox's JavaScript engine has a bug and does not follow the standard. EDIT: if you want to verify: ECMA-262, 11.8.5.
After registering and selecting a world I got an error: (chrome 27.0.1453.12 dev on linux) &gt; Uncaught TypeError: Cannot read property 'main' of undefined &gt; min.js:134 Subsequent reloads worked better. Also, I'd recommend adding "guest" access that doesn't require registration.. Lots of people (myself included) aren't going to enter an email address to try something out. By not allowing easy access to the game without forms you will be turning away a lot of potential users. ***EDIT:*** Another issue... Upon reloading the page it didn't remember who I was and gave me the register/login forms again. Why should I need to login again or reregister?
if you distinguish between "regular js" and jQuery, as if they where different things and fail to understand that jQuery is just a "regular js" library with methods for cross-browser DOM manipulation, your JavaScript skills must not be that advanced, hence I recommend you not to improvise writing custom code when you can just stand on the shoulders of the giants and rely on the proved work of much more expert people, like just using jQuery.
I'd recommend checking out /r/learnjavascript . Lots of great resources get posted there. You might also find my weekly JS newsletter helpful. It is targeted at folks with some programming background learning JS. http://designpepper.com/a-drip-of-javascript
I can't scroll on mobile. 
&gt;Ember is behind -- in what regard? No one is writing anonymous letters to Ashkenas saying "I love it, but here are some really crippling flaws"? I mean, I hate on Backbone because of render boilerplate, but you won't see me writing an extremely critical letter that actually is pretty damning of **the core team**: &gt;&gt;Most of them are based on the fact that the core team doesn't seem to be organized and doesn't prioritize the right things. --- &gt;The only thing better about Backbone compared to Ember is the learning curve and documentation-coverage, and that's just because Ember is a lot bigger both in scope and in size of codebase This is a pretty big thing. I suspect the optimism of providing "loads more features" is the hindrance to the Ember team and Ember as a whole. 
Slides can be found here: http://joshuacc.github.io/tdd-with-jasmine/#1
my god It's pretty ridiculous that the one tool I use for the most of my work is changing so fast that I have no idea when new features appear, not complaining though...
On mobile you also see your login text template briefly on load before it changes to login or sign up.
I have the Reddit Companion toolbar addon for Chrome, and it pushes the page content down but the overlay stays in place, causing a weird effect. http://imgur.com/V2k26AP Other than that, really cool! I'll have to remember this. 
I see you responded to the comments on HN but not the ones about how this violates youtube's terms of service and is a pretty obvious trademark violation.
I'm in the process of building something that doesn't violate youtube's TOS http://www.rocketos.com/ It's currently unreleased,buggy, and the sign up process might be glitchy, but you can check it out if you want. 
This is great! Has anyone tested it with sites that aren't as clean as the demo? Everything line up okay? I'm bookmarking this for when I need it. Thanks!
i had a feeling this post would end up steering a lot of people away from Ember or changing people's minds if they were on the fence. Honest feedback like this is what steers the community in the right direction, but you need to make your own decisions on what is good or bad about an open-source framework based on your own experience and research; don't just listen to the loudest jerk in the room. I disagree wholeheartedly with the way this person is making his or her arguments, but I don't disagree with a whole lot this person is saying. Although it is sort of beating a dead horse with the "stop implementing new things and fix the old" argument. They've frozen the API and have vowed not to alter it until after the 1.0 unless major bugs come up. Has the avalanche of API changes even after their 1.0pre... versions came out been a thorn in the side for many devs? Yes, but it appears they are on a good track now for getting a solid 1.0 out the door, writing better docs, and providing good tooling. Tom has made these points already, but I think it is important to remember that this project is incredibly ambitious and is backed by a bunch of folks who aren't getting paid to just hack on Ember all day. Compare the team resources of Angular to those of Ember; with that in mind, it's pretty amazing what Tom, Yehuda, and their team have accomplished. And on top of this, why does everybody forget that open-source projects are not commercial products? The act of downloading Ember gives you no entitlement whatsoever. If you take the effort to file bug tickets, offer pull requests, ask and answer questions on SO, and (god forbid) write documentation, and STILL you're unsatisfied with the way the core team is steering the project, then by all means raise your voice. But issuing a hyperbolic, anonymous rant criticizing a team of ball-busting software engineers is a new low.
Did anyone else get Rick Astley - Never Gonna Give You Up?
Is there a vanilla equivalent to $(document).ready(function() { ... }); window.onload just doesn't seem to cut it :/
Usually this isn't necessary if you put your &lt;script&gt; tags at the bottom of the body like: &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;div&gt;...&lt;/div&gt; &lt;script src="bundle.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; You'll be able to perform query selectors on any elements defined above the script tag. Here's an [article about the messier way](http://javascript.info/tutorial/onload-ondomcontentloaded) to exactly duplicate $().ready but I can't remember the last time I needed something fancier than a script tag at the end of the body.
[MDN](http://developer.mozilla.org), everything there is great
&gt;Basically asynchronous module loading can be done just by creating multiple bundles with Browserify and loading them with a script loader of your choosing. So, basically, Browserify can't do what require.js will do, and you're SOL and will have to roll your own. Of course, that's not what Browserify is for in the first place, so this make obvious sense. After reading the previous Browserify post, it's pretty obvious that the author simply does not have any idea how to work with Require in the first place, and is using Browserify as a hammer.
&gt; .. and appalled with how jQuery simplifies things appalled? Explain why, I love to hear your reason why it is appalling. 
Still think it would make for a great plugin for Etherpad if anyone fancies a weekend challenge.
Of a particular location on the screen? No, that's not really possible.
I need to take picture with a webcam once the camera is flooded with light(lift a cover). I'm using a JS/flash plugin plugin for the webcam. It is a local project so I have full control over client and server. The original idea was just to use java but I main knowledge base is JavaScript/PHP. Not Java.
You should report it [here](https://github.com/heelhook/chardin.js/issues).
I found the "Crockford on Javascript" video series really enlightening. He's the author of "Javascript: The Good Parts", and while that book is a great reference, he covers a lot of it in the videos, which are more suited to my personal learning style. He goes through the history, and covers the good and bad parts. He also explains why the tool he wrote, JSLint, yells at you for certain things. (It's a great tool, but I still find my self going "oh, come on... you're going to yell at me for *that*?") I really wish I would have understood the closures better, when I started. http://www.yuiblog.com/crockford/
I wouldn't change the stylesheet in the header, but would just add a class to the body or a container. You can then toggle the class and there won't be any delay (since the CSS/images are already preloaded). Ofcourse if you have massive amounts of CSS I wouldn't advice this, but in this case I'm sure it won't affect performance that much.
[Use canvas with the webcam](https://developer.mozilla.org/en-US/docs/HTML/Manipulating_video_using_canvas) you can then use getImageData to get the rgba value at the specified coordinates. var pixel = context.getImageData(x,y,1,1).data, red = pixel[0], blue = pixel[1], green = pixel[2], alpha = pixel[3]; 
FYI, I am doing something very similar (with transitions) [here](http://therapidplatform.com/). Click the lightning bolt... hope that helps. The "scheme" would be stored as a server variable attached to the user's session and fetched before the page is rendered (PHP) so the correct scheme is shown to the user no matter what page is loaded. I haven't actually done this yet, but it's simple.
The author has just demonstrated how useless a feature Asynchronous Module Loading is. * The only browsers that need es5-shim are old versions of IE, so use [IE's conditional comment](http://msdn.microsoft.com/en-us/library/ms537512%28v=vs.85%29.aspx) for that use-case and keep your app startup nice and speedy. * Who in their right mind would totally swap out different JS frameworks like that jQuery vs zepto example? Either you depend on one or the other, and include it in your requirements or simply add it as another script tag. * Loading of rarely-used parts should just be an extra script tag on whatever page is using that part. Why add in an ugly render flash of a non-working page while it's loading the graphing library? Just let the previous page stay visible and when ready the fully-formed page with the graph can appear. This is just more proof that the very concept require.js is designed around is faulty.
I followed the "AmazingTodos" tutorial a few weeks ago , he used CodePlex for his backend, I'm obviously not doing that here. He always switched routes to show the data update, i'm just updating scope after each action. Here's the github repo: https://github.com/specialjyo/app-todo
Truami's suggestion would be best. If you're using Php, I'd suggest the following: Echo out a theme-based class to the body tag, so you can easily swap that via javascript. This will prevent the white flash. Now, on click of this toggle, you should set a cookie that defines which theme the user uses. Use Php to read this cookie, and echo out the appropriate theme class to the body, before the page loads. This should prevent your flicker.
Check out [this article](http://javascriptissexy.com/how-to-learn-javascript-properly/).
 Train = function(startpos){ this.position = startpos; return this; }; Train.prototype = { move: function(direction, speed, time) { this.position += ({ 'forwards': 1, 'backwards': -1 })[direction] || direction) * speed / time; return this; } }; Now you instantiate new trains like this: var myTrain = new Train(0); But if you wanted your JS to draw a train that actually moves; that's what HTML/CSS are for.
Hey thanks alot. You have no idea how much this means to me. I will study it. If I had the money I would buy you reddit gold.
Understanding the functional nature of javascript and how every object acts like an associative array will give you some good insight into how JS works beyond it's syntax. I think object-literal notation does a good job of illustrating the concept. Defining an object as an associative array: var person = { firstName : "Joe", lastName : "Schmoe", greet : function() { console.log("Hi my name is " + this.firstName + "!"); } }; So if you call person.greet() you are literally referencing the key "greet" in the array which corresponds to the function you defined. Anyway, this was one of those AHA moments for me in JS.
this website looks exactly like Codecademy's website.
I just noticed: there's a small mistake in the code: this.position += (({ 'forwards': 1, 'backwards': -1... Forgot one of the opening brackets. Sorry.
Harsh. Sounds less like the author doesn't understand require, and more like it doesn't fit his use case. 
did we break it?
Angular is an application written in JavaScript to make writing JavaScript applications easier. It allows you to not worry about the little details, which can be painful when written manually. This would be analogous to using a hammer to make creating bigger tools easier. It allows you to not worry about pushing in the nails with your bare hands, which can be painful. In this example, Angular is the hammer, and the bigger tools are the applications you want to be writing.
javascript has grown a lot in recent years; serving different purposes. check out [node.js](http://nodejs.org/), and then I'd say check out front end frameworks (angularjs, knockoutjs, backbonejs, etc.). and lastly if you want to apply some awesome design patterns to the js you write, check this out [Addy Osmani Design patterns Doc](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) . Best of luck!
I realize these are more practical uses of javascript... but it will give you a good understanding of how its used in real jobs... along with design patterns that you'd use when writing good code (PS Design patterns apply to all programming languages :) )
The most important thing to understand is there there is a lot of bad advice with regards to JavaScript. This is due to the fact it's easy to get into but hard to master. Following projects and sources close to large companies that use JavaScript heavily is the safest and most effective choice. I recommend starting with this, "Introduction to JavaScript and Browser DOM", it's a Google TechTalk by Misko Hevery, the creator of AngularJS, a new and popular JavaScript application library. http://www.youtube.com/watch?v=ljNi8nS5TtQ Other things to Google: * MDN JavaScript (from Mozilla, makers of Firefox) https://developer.mozilla.org/en-US/docs/JavaScript * Douglas Crockford (very popular author/JavaScript-evangelist from Yahoo) 
What languages are you using to build this? I personally used cakePhp, which allowed me to look up cookies easily. Try a google search for "reading value from cookie php" For writing the cookie, I had just used a simple jquery plugin for writing cookies. Try googling "writing value cookie jquery"
I'm using getKirby, which uses PHP, but I don't do much aside from HTML and CSS. You know what though? I have to change more than just body.class to make sure everything is formatted for the dark theme. I also want to change the color of h1, h2, etc., and several other layers too. Will this method still work anyway?
Yes, absolutely. Your site should simply be set up as &gt; .light { // light styles here } &gt; .dark { // dark styles here } &gt; body { // all your structural markup here } Then it's simply a choice of switching .light class for .dark. --- edit: This means that you can do &gt; .light h1, .light h2 { color: blue; } And then for dark &gt; .dark h1, .dark h2 { color: red; }
*This is due to the fact it's easy to get into but hard to master.* Actually, it's not *hard* to master, it just requires discipline (or syntactic transformers, which is discipline automated). Also, http://www.eloquentjavascript.net FTW!
Okay, that makes sense. Now, I found some code I can use for the Javascript toggle and cookie saver, let me know if this will work. http://li367-160.members.linode.com/esedic/toggle-css-body-class-and-save-it-to-cookie-with-jquery/ I'm not sure how I should implement this into my page yet, and how to use PHP to echo the class so it loads first. 
It's lagging a lot for me :(.
&gt;Loading of rarely-used parts should just be an extra script tag on whatever page is using that part. Why add in an ugly render flash of a non-working page while it's loading the graphing library? Just let the previous page stay visible and when ready the fully-formed page with the graph can appear. You've apparently never heard of a single page application before? The only thing that is faulty here is your understanding of typical use cases for require.js 
This is essentially what I expected you to do, yes. The only difference with using just this solution, is you're using javascript to check the cookie still. So you'll load the light theme - check for dark theme - then load dark theme leaving a bit of a flickr. You should write out the class like. &gt; &lt;body class="something &lt;?php echo $classNameIfCookie; ?&gt;" &gt; This would prevent the flicker, since you calculate the theme before page render. Some reading: http://davidwalsh.name/php-cookies
you can use the $_COOKIE variable to access the cookies easily. and use the 'setcookie' function to set one.
Seems to lag over time and then eventually fail completely. I've restarted the stream multiple times, that seems to work pretty well for me.
I can't wait for Grunt-Grunt... So Meta.
Is there any chance for video records from this conference? I just got the news and I missed few great talks...
Thanks for the suggestion. I will explore this further
I'm not affiliated with the conference, but I'd assume you'll at least have access to the slides
Use a stock HTML image map for the clickable regions, since those handle irregular polygons out of the box. No need for anything fancier -- at all. If you want things to highlight, then you can pass the map area data to some kind of image highlighting routine to highlight (and dim) various map segments. On my website, I did this through regular Javascript. Since that site predated canvass, I used some image library that could make polygons through many, many divs. Today, I'd just use canvas or svg.
This is particularly true of JavaScript, as it is one of the largest programming communities (due to the ubiquity of the browser). It may actually be better to think of the JS community as being made up of several sub-communities since so many JS devs work in JS as a secondary language after (Java/Ruby/Python/C#/whatever). Many of these other communities have developed much stronger community codes regarding "the way things are done" and consequently "the things you need to learn." In the JS community, you are likely to get very different advice depending on the background of the person giving it. In addition to the language split I mentioned above, there's also the split between people who came to JS from design/CSS and a more traditional programming background. My advice is to just pick something you find interesting and try to build it. Ask for help as you run into road blocks. Also, take a look at /r/learnjavascript as the articles there will probably be more up your alley than the general JavaScript subreddit.
&gt;Honestly? Use Backbone. &gt; You're comparing apples to oranges. Backbone is a library; Ember is a framework. One isn't better than the other. They solve different problems.
Hey, you could use Restangular with your example. It'd suit very well. This is a library that I made that makes it easy to interact with Rest APIs from AngularJS. Check it out! https://github.com/mgonto/restangular/blob/master/README.md
Ooh! I like that! Is the DOM guaranteed to have loaded if I put my &lt;script&gt; tags at the bottom?
You'll have access to everything defined above the &lt;script&gt; tag. Loaded is not the same as ready.
Yay, look-up tables! Some unasked-for feedback: **`sin()` and `cos()` probably aren't as slow as you think in JS.** Compared to painting and interacting with the DOM, it's very unlikely that just calling trig functions will be your bottleneck. Before you do something like this, *profile* and make sure you know where your time is actually going. **You only need one look-up table.** `sin()` and `cos()` are identical except one is shifted `π/2` relative to the other. There's no point in having look-up tables for both. Just do: var table = []; for (var i = 0; i &lt; SIZE; i++) { table.push(Math.sin(i / SIZE * 2 * Math.PI)); } fastSin(theta) { var index = Math.floor(theta / (2 * Math.PI) * SIZE) % SIZE; return table[index]; } fastCos(theta) { return fastSin(theta + Math.PI / 2); } **You only need half a table.** In fact, since the second half-period of sin is just the negation of the first half, you can just do: var table = []; for (var i = 0; i &lt; SIZE / 2; i++) { // Only half size. table.push(Math.sin(i / SIZE * 2 * Math.PI)); } fastSin(theta) { var index = Math.floor(theta * RADIANS_TO_TABLE) % SIZE; var sign = (index &gt; SIZE / 2) ? -1 : 1; return table[index % (SIZE / 2)] * sign; } **You only need a quarter of a table.** In fact, since each quarter is just a mirror image of the previous, you can just do: var table = []; for (var i = 0; i &lt; SIZE / 4; i++) { // Only quarter size. table.push(Math.sin(i / SIZE * 2 * Math.PI)); } fastSin(theta) { var index = Math.floor(theta * RADIANS_TO_TABLE) % SIZE; var sign = 1; if (index &gt; SIZE / 2) sign = -1; if (index % SIZE / 2 &gt; SIZE / 4) index = SIZE / 2 - index; return sign * table[index % (SIZE / 4)]; } **You will get much smoother results if you [lerp](http://en.wikipedia.org/wiki/Lerp_(computing\)) between the two nearest look-up table entries.** I'm too lazy to do this, so I'll leave it as an exercise for the reader. But, again, don't actually do any of this. Just calling `Math.sin()` will very likely be faster. 
You can use Inkscape to create an SVG from your drawings. It can even import PDFs and most of the major CAD or vector formats. You'll probably want to clean up the generated SVG a bit (and save it as plain SVG as well). Afterwards, assign IDs to the shapes and you can manipulate them with plain old javascript. Add a pinch of d3 or jQuery to season.
Wow, what a nasty hack. What's wrong with if statements? If you *must* use a lookup table, at least create it outside the method so you don't create garbage each time you call it.
can you use jquery? var imgTag = $("&lt;img&gt;").attr("src","..."); $("body").append(imgTag); imgTag.remove(); something like that...
Actually it depends on where exactly in your document you want to add an img. Generally it will look like this: var img = document.createElement('img'); img.setAttribute('src', 'path/to/your/image'); document.getElementsByTagName('body')[0].appendChild(img); This will append a new img after all the contents of your body tag. Of course, you can change document.getElementsByTagName('body')[0] to anything you want to add an image to.
I used to create lookup tables for a few games I made in QBasic. Back then there really was a huge performance benefit, but modern JS engines are _really_ fast and benchmarking will not show any improvement. Nice demo though!
That move method is quite complex, so an easier to understand version of it is: move: function (direction, speed, time) { if (direction === 'forwards') { direction = 1; else if (direction === 'backwards') { direction = -1; } this.position += direction * speed / time; return this; }
I don't find your approach more readable at all. Maybe if you didn't inline the lookup table... Perhaps some modern browsers cache static objects, but that isn't always the case. If you call the move method in a game loop 60 times a second, and the interpreter creates a new object for each object literal it encounters (it is short for new Object, after all), you'll generate heaps of garbage.
I was just discussing your library last week! Any chance you could take one of your test or sample apps and put it up on the dreamfactory backend? If not, i'll definitely look into putting it up there (I've been asked to create simple examples). One thing I want to do is have a todo custom tag that encapsulates the list itself, maybe I'll do that and use your lib to talk to the server.
Different people have different habits of reading code. I like it if I can read the code fluently without having to look up and down. What you say about garbage collection is not completely wrong, but only applies to IE&lt;9 and the likes.
Think of it this way: if you're writing a library that other people will include, it's better not to depend on another library if you're only going to use one feature of that library. I use sugar.js when writing javascript. Some people prefer underscore.js. If I wanted to use a library and that library used underscore.js for it's `_.defer` function, it's going to be annoying to have to include underscore.js in my website just for that, when they could've easily used `setTimeout(fn, 0)`. If I needed 3 libraries and each one depended on 2 other libraries, totaling 6 dependencies, it'll be annoying if I had to include all 6 of them.
https://speakerdeck.com/rmurphey/new-app-config https://dl.dropboxusercontent.com/u/3649202/slides/2013/txjshtml5/index.html https://dl.dropboxusercontent.com/u/3685/presentations/node-patterns/node-patterns.pdf Feel free to add more!
While I strongly agree that look-up tables are useless (they are almost always not a bottleneck), I disagree that `Math.sin` will be faster. Edit: below code contains an error, but that may not cause a lot of difference. const SIZE = 16000; const RADIANS_TO_TABLE = SIZE / 2 / Math.PI; const TEST_SIZE = 1e6; var i, d, table = []; for (i = 0; i &lt; SIZE / 4; i++) table.push(Math.sin(2 * Math.PI * i / SIZE)); var regularSin = Math.sin.bind(Math); var fastSin = function(theta) { if (theta &lt; 0) theta = -theta; var index = Math.floor(theta * RADIANS_TO_TABLE) % SIZE; var sign = index &gt; SIZE / 2 ? -1 : 1; index %= SIZE / 2; if (index &gt; SIZE / 4) index = SIZE / 2 - index; return sign * table[index % (SIZE / 4)]; } var test = function(name, func) { console.time(name); for (var i = 0, s = 0; i &lt; TEST_SIZE; i++) s += func(i); console.timeEnd(name); console.log(s); } test('Math.sin', regularSin); test('fastSin', fastSin); for (i = d = 0; i &lt; TEST_SIZE; i++) { d += Math.abs(regularSin(i) - fastSin(i)); } console.log('Average diff:', d / TEST_SIZE); Results (tested on Node.js): Math.sin: 253ms 0.23288397807313 fastSin: 81ms 1.2328431324999707 Average diff: 0.00025599809955145466
I have to say that the book "Object Oriented JavaScript" was a real eye-opener for me a few years ago. I continue to use it as a reference. It's not just code examples, it's a real in-depth discussion on how JS really works. I was practically clueless before I read it. It's by Stoyan Stefanov - I think he used to be or still is part of the Yahoo GUI team.
I still don't see why we need an extra reference if we are going to use it directly afterwards anyway, but I don't claim to have the only solution to any problem. The other solutions will work well, too. Learning JavaScript by testing out different solutions is a good thing to do, aynway.
Here's a relevant [JSPerf](http://jsperf.com/fastsin). Indeed, native cos and sin are *very* fast and blow any table-based approach out of the water.
As a side note, it may have been a useless application... but it's a wonderful algorithm for lossless compression called Huffman Coding (http://en.wikipedia.org/wiki/Huffman_coding#Applications). I might be dating myself a little, but it is a common algorithm for encoding black and white image data for fax machines (http://www.iet.unipi.it/m.luise/HTML/SdT/10_4%20Modified%20Huffman%20Coding.htm).
Duetto doesn't do the same thing Emscripten does.
Great post. Making cos/sin fast wasn't my top priority - otherwise I would have posted benchmarks, the math behind it, etc. - although I did want to know if tables would be faster than the native cos/sin. The primary motive for using my implementation is to lock the resolution of cos/sin to a fixed number of degrees, while allowing it to be adjusted in real-time - something potentially useful for graphical effects and oldschool 2D games. The only reason cos/sin are both adjustable in the demo is to demonstrate that behavior. Regardless, thank you for your post! I think it is probably more useful to the readers here than is :)
An article I wish I was smart enough to have written myself.
I would suggest using [OpenLayers](http://www.openlayers.org/) for this. And this might be a good starting point(s): * Drawing polygons http://www.openlayers.org/dev/examples/donut.html * More drawing http://www.openlayers.org/dev/examples/draw-feature.html * Clicking a feature http://www.openlayers.org/dev/examples/highlight-feature.html If you want to go with an pure image approach you can look in to using the regular [img](http://www.whatwg.org/specs/web-apps/current-work/multipage/embedded-content-1.html#the-img-element) tag in combination with the [map](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-map-element.html#the-map-element) tag. Although I am not sure if you can style the area elements in an map.
Hah. I still occasionally code in BASIC. Don't ask why. Mostly FreeBASIC. Lookup tables were the thing back then :)
because when you return it will not go past that line! return validateForm(); return validateMail() &lt;--this will never be executed because the first one hides it. Use and and operator return validateForm() &amp;&amp; validateMail() Ideally you would not use inline event handlers. It is bad practice. 
&gt; We believe that in six months or less from now we will be able to release a robust product :( &gt; And we want to release it as open source. :)
So how does this compare to [emscripten](https://github.com/kripken/emscripten#readme)? (Note: some well known ports of programs to Javascript have been compiled with emscripten, such as [sqlite.js](http://badassjs.com/post/18857332551/sql-js-sqlite-compiled-to-javascript-via-emscripten).)
http://jsfiddle.net/rdznZ/2/ You don't need $('.info_link').ready this is enough $(function() { alert($('.info_link').attr('href')); });
This is really just doing a transform on a single element. It's impressive that it's possible using CSS, and that the browser keeps up with it, but it's really just 'animating' one thing.
So easy to use! Now THAT's what I want in my JQ plugins. I may have use for it. When do you think it will be ready for some prime-time?
Very easily tweaked.
I absolutely loved this! Thanks for sharing it. Sent it to my boss already as it'll fit in perfectly on the product I'm working on. Again; thank you!
I got a bit confused when the 'yep-nope' functions started: Perhaps because it wasn't clear for me what inspect is or does.
Pretty cool stuff. Thanks!
Thanks, I figured it out a few moments after I posted. Sorry, still a beginner to all this. I guess a follow up question, if you have time. The href being extracted is actually a javascript function itself that is built into the webpage (javascript:function(parameters)). Is there anyway I can now execute this function using my own javascript command? I've attempted to use : location.href = "javascript:void(myhref);"; by storing what I previously extracted into the variable, myhref. However, this doesn't quite seem to work, and I can see why. Is there a possible workaround?
just do `$('.info_link').click()` Generally speaking, you should *not* be putting javascript in hrefs in this day and age, you should be binding them to events instead (like the `click` above). E.g. var my_click_handler = function() { do_something(); }; $('.info_link').click(my_click_handler); // set the event $('.info_link').click(); // Trigger the click event my_click_handler(); // This will call the function without triggering the "click" event. 
Thanks for checking it out. Different browsers handle this type of thing better than others. On a very beefy MacBook Pro, Chrome doesn't break a sweat, but FireFox really struggles. On the other hand, iOS Safari (iphone4) handles it extremely well. 
Thanks for responding. I'm not trying to put any javascript into hrefs, but the webpage I'm working with in particular does do so. I am writing an external script that can interact with said webpage, and I need to be able to call the javascript function inside the href. The webpage code is something like this: &lt;a href="javascript:function(x,y,z)" class="info_link"&gt; &lt;span class="xx"&gt; text here &lt;/span&gt; &lt;/a&gt; So my script needs to be able to execute that function, with only a class to go by. I tried just using $('.info_link').click(), but it doesn't quite seem to do anything.
Hi Roxm, Glad you enjoyed it. Yeah, the simplicity of it is two-fold. It really is just one object spinning around, but there are also many animations overlapping contained in 1 syntactically-concise TimelineMax that allows you to control the entire animation (pause, rewind, scrub) as a whole. Thankfully, GSAP JS handles this with ease. Despite the simplicity, I'm not aware of any other way something like this could be created. Thanks again for viewing and commenting. If you have any GSAP JS questions, let me know. I'd love to help. Carl Geek Ambassador www.greensock.com/gsap-js 
Are you getting a js error in the console?
Yeah, I noticed the tweening was very cleanly written. Very cool. As a DOM stress test, it's meh, but as an animation keyframe tween lib, it's pretty badass.
Uncaught ReferenceError: $ is not defined Is what I see. But it doesn't seem to be interefering with the $('.info_link').click() itself, as I get the same error even when I replace it with something like alert("hi");, which runs anyways.
If $ is not defined, then you don't actually have jQuery. Maybe try using `jQuery('.info_link').click()` in case it's in noconflict mode?
so that means if you're using .js to ONLY write apps, you don't need to learn .js you just need to learn angularjs -- thanks for the helpful answer
There would be no return in the onsubmit. Just: onsubmit="validateForm() &amp;&amp; validateMail()" Also, both these functions should return true at the end. http://jsfiddle.net/GNSt4/
Please ignore the retarded grading criteria of "ribbons" that they're giving us
$ is not defined signifies the page you are does not have jQuery. You can try krues8dr's suggestion of trying the jQuery function instead of '$' -- but if this still raises the same error, you'll either need to load jQuery dynamically or just write it in vanilla js : var els = document.getElementsByClassName('info_link'); for( var x=0; x&lt;els.length; x+=1 ) { l = els[x].href.substr(11) // strip out "javascript:" alert( l ); // alerts "function(x,y,z)" } This will get you the string of the href attribute -- to actually run it, you'll need to pass it through eval. [not sure if running things through eval is such a good idea in greasemonkey](http://shampoo.antville.org/stories/1537256/) -- but if it's a one time thing and you know the href attributes on the page do not contain malicious script, you should be fine.
This is your code, I will comment on it var String=""; function count(var1,var2) { for (var count = var1; count &lt; var2+1; count++) { if (count&lt;var2) { String=String+count+","; } else { String=String+count; } } } count(0,10); console.log(String); Basically, your string is declared outside the function and there's no return value. Also, you're not assigning the return value to String.. so count(0,10) is calculated and non retrievable. This would work, without modifying too much of your code. function count(var1,var2) { var String=""; for (var count = var1; count &lt; var2+1; count++) { if (count&lt;var2) { String=String+count+","; } else { String=String+count; } } return String } var answer = count(0,10); console.log(answer); 
"return String" at the end. No biggy, I just put it in myself.
&gt;Duetto is based on the LLVM stack, and **uses patent-pending algorithms** to ensure the highest performance. Avoid this like the plague. 
 Math.random = function(){ return .42; }
Okay, so I'm fairly confident in the use of eval() for this particular situation, so thats not an issue. As for the jquery, I am also sure that the error is just a byproduct of tampermonkey's (chrome counterpart) inefficiency in loading jqeury as part of the @require command. Even though it reports undefined, jquery commands still work as expected. The real problem I'm currently facing is that while I've pulled the href javascript command from the webpage, when I attempt to run it again, it returns undefined becuase I don't have that function defined in my script--it is only intrinsic to the webpage. 
how is this better than node.js eventEmitter? http://nodejs.org/api/events.html#events_events
I'm not very familiar with eventEmitter, but this is primarily intended for client side usage. It's only 0.628 kb minified and has no dependencies. It has a CLI generator for new components as well, which is convenient. It theoretically could be used with Node or other JS runtimes, but it sounds like that's probably not a great use case.
Sorry but this is one of the most basic design patterns, 2 minutes of code from scratch. + if you have `on` you want `off` not `unbind` which suggest there is a `bind` method + js can search a function within an array so removing a listener would involve searching a certain callback not an ID + don't use `class` and `javascript` in one line on reddit - it will never bring anything good to you :)
I think of this as a late-loading technique like what imgur does in albums. Most of the time I've seen anything that waits to load content until you're able to see it, it's waiting too long and is too obvious and self-consciously schticky. I do like the operational advantages of late-loading, but I don't see a purpose in making it a visual effect except as wankery.
I have the feeling that you put there at least some people well known due to their newb level conferences and cliche things - but not really worthy following for serious/useful knowledge.
It looks auto-generated. 
Hey, thanks for the feedback. Much appreciated! 1. I went with unbind, because I feel it reads more clearly. It's a matter of semantic preference. 2. Granted, but that is not as performant and requires more code. It also requires storing/tracking the otherwise anonymous function. 3. That is why I used quotes around "class". I understand that JS doesn't strictly speaking have classes (yet). What term do you prefer for a class-like function intended for use with the new operator?
You have return twice in there, do you see it twice in mine?
Why beat around the bush... rm also removes lint errors sudo rm -rf /
This is partially an auto-generated list, so there could be some percentage of junk in it. But those on the top are good ones to follow as they have a lot of followers.
Yeah I prefer the EventEmitter style than the pseudo-backbone style
This is a bug not a feature
[They claim it's faster.](http://allievi.sssup.it/techblog/?p=798)
Does this completely not work for anyone else? Tried in chrome and my nexus 4.
Suhweet!
Hey, unfourtenately all of the apps in which I'm using Restangular aren't Open Source :( so I won't be able to put this example there. I've actually been looking for some free and open nested Restful Resources API to try out but they all require some Api Token or something to use them! No real example in the wild. However, all of the code from the Readme has been tested out in one of my projects and it does work, so that should work as a guide. You can start by just creating this custom tag that encapsulates list itself. It should be something like $scope.todos = Restangular.all("todos").getList(); Quite straightforward. Thanks for the interest and do let me know if you have any doubts!
from your comment it sounds like you are against all forms of auto-paging I've seen good and bad implementations, personally I don't like it too much and will turn it off where I can, but I could never say it doesn't have its place... for some sites it just fits like a glove
if you wanted fewer lines: function count(x,y,o){ o=o||"";o+=x+((x&gt;=y)?"":","); return (x&gt;=y) ? (function (l){console.log(o);return l;})(y): count(x+1,y,o); } count(0,10); http://jsfiddle.net/2SYJx/
Excellent link, would upvote again. &gt;Emscripten han­dles C++ code by emu­lat­ing a full byte-addressable address space. This is def­i­nitely a good solu­tion, but sub­op­ti­mal. Javascript is not based on a byte-addressable address model, but on an object-addressable model: all the acces­si­ble mem­ory is con­tained in some object. But when you think about it, C++ is not that different. &gt;Our solu­tion inte­grates with clang and the LLVM tool­chain and is able to map C++ object-oriented con­structs to native JavaScript objects. It turns out that access­ing objects on mod­ern JavaScript engines is faster than access­ing arrays. That definitely puts Duetto on the map, for me.
The application should be called ternimal.
It would be nice if the demo actually worked.
I don't think the best way to help a beginner is to post compacted, uncommented &amp; hard to read code. 
Using the innerText property in Firefox
Do you actually have a file `jquery.js` in the same directory as the HTML? The cause of the error will almost certainly be shown in the browser's error console, so make sure you check there. 
Do you have the JQuery file available on your system? Is the path to it correct? If you're not sure then try loading it from Google's CDN: &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt; instead of "&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;" 
Yes and the contents of the jquery.js file is the script I pasted under JQUERY 
I can see this error in the log Uncaught ReferenceError: $ is not defined It seems to be running the jquery as though it was standard javascript. Is there a way I can ensure it recognizes it as jquery?
You mind telling me what issue you had? Maybe what browser/OS you're using too?
Actually no. It's a tool that complements javascript and it's completely optional, you still need to learn how to write code and solve problems in javascript.
The contents of that file needs to be the jQuery library which you can download from the jQuery site, not your code. Or alternatively stated, you need to include the jQuery library from somewhere. 
I find this to be rather unproductive. At least 3/4 of these frameworks all have different focuses of scope; making this a comparison of apples and oranges - and nor does the author acknowledge this fact prominently anywhere. Take backbone, for instance - at least historically - was focused purely on providing an organised, client-side model that synchronized with a backend. It's grown in its scope somewhat while maturing, but that's still its initial and primary focus. It was never *designed* to provide declarative bindings to the DOM that Angular does, or a complete back-end solution like ember. The only two frameworks it seems worth comparing (that will be apples to apples) would be CanJS and AngularJS. They both provide a full-stack client-side experience. Ember is different again, because it also aims to provide an integrated backend as well as client. The differences in size of scope also means it *makes sense* for each one to allow different amounts of flexibility in different areas - flexibility *is* a practical tradeoff with ease of convention; one is not better than the other, and every developer will have their preference on where they like to sit. But those two concepts are mostly considered in isolation here, not whether each framework has chosen a good balance. Without making allowances for the differences in scopes of these frameworks, comparing them is going to tell you nothing apart from how much each is designed to do - *not* how good they are at it.
This is a very nice idea, but I think you need to exclude local variables and punctuation from the corpus. For example when I type `doc` and it'll offer me `. = ) &amp;&amp;` instead of document.
&gt; The only two frameworks it seems worth comparing (that will be apples to apples) would be CanJS and AngularJS. They both provide a full-stack client-side experience. Although, I think Knockout should be included then. Those three would have made for a more relevant comparison article though, for sure.
I was referring only to the frameworks mentioned in the article; but sure include whichever frameworks would self-describe themselves as having similar scopes; not disparate ones. The same way it would make sense to compare Ember to Meteor, but not Angular.
I can see what you're trying to do, but the points are meaningless. All that should matter is whether it is the right tool for the job, not whether it is a better tool. It's like me saying a shovel is better than a hammer so I'll get one of those. Now I CAN put nails in the wall with it, but it's not going to do as good a job and will take me longer. some of these categories are pretty bad as well. Plugins only matter if you need them. Community is a nice to have but you can probably figure things out on your own. Learning curve shouldn't matter if you're going to be spending any more time than a week on a project. When you say "Developer Productivuty" is that for implementing easy features or trying to put in features that the framework doesn't allow to be put in easily? And memory leak safe a category of it's own? That should just be in the features.
I would have a hard time calling Knockout "a full-stack client-side experience". That's not even what it tries to be.
disclaimer: I'm a Bitovi employee and CanJS core committer I agree with you that Backbone shouldn't be in that list because it lacks any live binding ability, but I think you're wrong when you say only CanJS and AngularJS can be directly compared. CanJS can be compared to Backbone on terms of lightweight-ness and both frameworks can be used to solve same problems. Although CanJS is more powerful it's still lightweight enough so it isn't an overkill even for smaller scripts. Angular definitely looks interesting but, IMO sprinkling html tags with ng-* attributes is plain ugly and looks like DOM0 event binding. What I really like about CanJS is the way it solves live binding (Mustache and EJS example): // mustache &lt;div class="{{#if user.isAdmin }}admin{{/if}}"&gt;{{ user.username }}&lt;/div&gt; // ejs &lt;div class="&lt;% if(user.attr('isAdmin'){%&gt;admin&lt;% } %&gt;"&gt;&lt;%= user.attr('username') %&gt;&lt;/div&gt; You can simply render your attributes and they will be immediately live bound without any ceremony. edit: grammar
I think the site's in pretty rough shape, and I can't imagine the tone you're setting here is going to make you popular on reddit (or anywhere). I know it's unsolicited, but on the off-chance you're interested in constructive criticism, here's some: * Keep the lists shorter. It's unrealistic to suggest that folks follow 150+ people on twitter. * Curate the lists. Choose people who talk about [insert syntax here] with passion, and contribute positivity to the community. I see a ton of grumpy folks on there who tweet about off-topic shit all day. * Do not put twitter feeds of people on your site unless you can improve on twitters presentation + UI behavior. Your current implementation is not pleasing to the eyes or to the visitor. * Talk about why these folks are valuable. Get to know them a little bit, and figure out what their special sauce is and why we should care. This is somewhat like the 'curate the lists' tip, but worth repeating. * discovery is about more than lists. Anyone can search twitter for 'javascript' or look at the upteen "follow these people" lists. What uniquely positions you and your site to make this claim? Also RWD + brighten the site + derp. /edited for formatting
Mapper.js automatically generates SVG highlight areas from imagemaps. The demos seem to match what you want without the overhead of a full GIS/mapping solution with layers: http://www.netzgesta.de/mapper/
this seems more like a design choice. design choices are visual wankery.
No, but Knockout and Angular solve a similar problem, in their emphasis on data binding, which is not at all what Backbone does. This is why I say comparisons should focus on what problems they solve, not just what they do.
On the other hand, the effective thing about the direct DOM binding that Angular does, is that it's making effective use of the browser's own DOM manipulation abilities - which means it's going to be blindingly fast by default. Even with pre-construction and caching, the the string insertion and parsing that templating languages like mustache use is always going to be slower if comparing the two with similarly well-constructed user code. That's the tradeoff angular are making for their "ugly" HTML attribute declarations. Note, that although you're technically breaking the HTML5 spec, using custom directives that Angular encourages makes most of this rather pretty again. All four frameworks mentioned have the basic feature of being able to model data on the client side (that's backbone's primary purpose) - I'd be happy if that's all the author talked about, while noting that other frameworks also focus on doing other things as well.
In CanJS mustache implementation templates are converted in to the functions that return documentFragment, so you get super fast initialization coupled with the super fast DOM insertion (since documentFragment is faster than innerHTML in modern browsers)
Thanks for the feedback. The local variables are an artifact of the algorithm but there's probably a better way to handle those. I can take a look at the punctuation-completions too, as I recognize that they're not something you'd find in a normal auto-completer, although I do like the fact that you can keep pressing ctrl+space to have the computer autogenerate code based on the code that it's seen. One thing that's happening is that it's treating doc as a full token and trying to guess the token that comes after doc. It guesses '.' because, in the corpus, a period often follows an identifier. What it should do is treat the current token as partial and try to find full matches of that first. 
This article inspired me to make a drink last night
I'd much prefer it as a mixin
BAM! All my errors are gone!
&gt; Note, that although you're technically breaking the HTML5 spec It was my understanding that you aren't breaking the HTML5 spec if you simply use the data- prefix before any of the directives, e.g. data-ng-repeat. This is built into angular and requires no extra effort, beyond pressing those 5 keys.
yes, I realized this after posting..:/
If you can't empirically test the performance of something, don't write about the performance of something. It makes you look like a tool.
I was mainly talking about custom element directives.
Oh right, good point. Of course, you aren't required to use those, but you certainly can create invalid html.
Angular: ingests a built DOM tree, and modifies attributes as directed by the ng-directives using DOM manipulation methods provided by the browser; CanJS+Mustache: ingests a string, does a mustache parse pass, and then a DOM parse pass as it gets turned into a documentfragment. Unless CanJS waits for the DOM to be parsed before processing the mustache directives. I don't see how that would work, though. Please correct me if I'm wrong, but it seems like you're missing the point of using DOM manipulation over string parsing.
The difference between a library and a framework is that you call into a library, and a framework calls into you.
It's more fair to compare Backbone to Angular (in terms of featureset and weight) if you include [Marionette](https://github.com/marionettejs/backbone.marionette) and [ModelBinder](https://github.com/theironcook/Backbone.ModelBinder). For better and worse, the core Backbone team seems to have a philosophy that they will provide only features where the correct implementation is obvious.
we went with BackboneJS because it was very lightweight and full of freedom. Backbone takes care of JUST the boilerplate stuff that any UI developer has done a 1000 times already. BackboneJS code is also very clean and very easy to read, and painfully simple to use. Since we wanted to make distributable components, BackboneJS was the most logical choice. We needed the freedom and flexibility that BackboneJS provided. It's sole dependency is Underscore. We can compile all our models into a single library file, and tell people it's up to them how they want to display it. We can package out-of-the-box views and underscore templates as well if people want them. AngularJS is more monolithic. That's objective, subjectively speaking: I did not like the feel of AngularJS and don't think I ever will. It just seems that you end up encoding a lot more information into HTML that really should remain in your business/presentation logic layers (the M and Vs). 
i should've specified: by learning only angularjs, you in turn learn .js because angularjs uses .js -- this means you don't need to learn .js directly. you're learning it indirectly via a practical goal of creating apps via angularjs
angularjs is said to be the best (i forgot if source was reliable or not) and is made by google developers, ill go with that (already checked on comparative reviews, nothing is better than angular atm). not a programmer, hopefully wont end up needing to know too much... just have to find some good and explanatory high quality guides, that's the hard part
Ugh. &gt; I cannot finish my blog post without saying this. Backbone was a great library two years ago, but there are better things now. I believe that many people choose Backbone just because of its popularity, it is a vicious circle. No. No there fucking isn't. You're comparing Backbone, which is a minimalist MVC-style *toolkit* with significantly larger *frameworks*. From the Backbone documentation: &gt; Backbone is a library, not a framework, and plays well with others. You can embed Backbone widgets in Dojo apps without trouble, or use Backbone models as the data backing for D3 visualizations (to pick two entirely random examples).
Not once was testing even considered... I find that a lot of front end developers don't realize/understand good programming techniques and design patterns. I do realize that a lot of front end tends to be html and css, but please realize the benefits of testing :). Anyways, the big reason I fell in love with angular was its separation of concerns, and how it promotes testing(unit and e2e) and modular design.
I think that when developers hear 'freedom and flexibility' they overlook best practices when developing front end. check out [AddyOsmani's JS design patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) to understand some of the awesome techniques that are taken advantage of in angular.
20ish other tests have shown that (in firefox 19 and 20): - It's not specific to ?: operators: if, if-else, and `a || b` have the same effect. - The effect disappears if you use your own function (`function foo() {return 1;}`) instead of `Object`. - A second layer of switching (`var _Object4 = Object ? _Object3 : function () {return null;};`) preserves the previous performance, except in the case of `_Object1`, which drops down to the lower level. - Performing the switch inline (`return Ojbect ? Object() : null;`) does not incur the performance hit. This has led me to conclude that: 1. If the compiler knows that a variable refers to a function, it can execute it faster. 2. The native functions execute at the faster speed, but the compiler does not know that they are functions. I am by no means sure of those conclusions, but they do explain these results.
Right, because criticizing a common use while describing ways in which it can be useful is the same thing as being against all forms of it.
I wonder what is wrong with this beyond an ideological argument. Can you elaborate?
&gt; Are you comparing 2 and 3? Yes, reference 2 is the odd one. direct is for perspective, and references 1 and 3 are to show very similar approaches that don't take the same hit (the smaller hit for 3 is presumably due to the extra function step).
Your documents aren't strictly html5 then, not parsable by a html5-expecting interpreter
[if only they could keep those damn bees out of there](http://js1k.com/2013-spring/demo/1461)
"I saw a commercial on late night TV, it said,"Forget everything you know about slipcovers." So I did. And it was a load off my mind. Then the commercial tried to sell me slipcovers, and I didn't know what the hell they were." - Mitch Hedberg
funny how it's either closed or got a downvote after it's solved..... cute
Fair enough, but when would this be an issue that should reasonably prevent someone from diverging from the spec in the real world?
Came here to post this exact quote.
The biggest difference is composition. Libraries are meant to work together but frameworks primarily exclusive. You can't use angular and ember at the same time as easily as you can `require()` a few libraries from npm. With a framework you're locked in to a structure that makes your code increasingly dependent on an organizational pattern. The problem comes when you outgrow what the framework offers. You can add more and more custom hacks into your existing framework, upgrade to the next incompatible version, or switch to a different framework. All of these options have massive switching costs and involve pushing very large changes all at once. With libraries, you can be much more incremental with how you roll out changes. Every library has its own semver and can be upgraded and tested independently of the other packages on the system. If the switching costs are too high for any individual component, you can just leave the version pegged to an old version that was known to work while still reaping the benefits of newer version of other libraries. When libraries are smaller, these independent versioning benefits are even greater. When libraries get big and start spanning multiple semi-related problems instead of solving just a single problem, that's when a library is a "framework".
Who are you? One day I hope to be on something similar... working on it!
I think Backbone, Angular, Ember, and Knockout all have places where they can shine, and good developers take the time to experiment with them all so they know when to apply which tool. Good on you for picking different tools for different problems :)
Bravo
It only supports English, which limits its usefulness a lot.
That's the first time I've heard the fan in my Zenbook. Sure was purty, tho.
I've never used Ember before, but wouldn't you be able to do something like App.secondsOnPage++; to increment that, or is it some sort of non-variable?
I am using Backbone + Stickit for a couple of my apps. I think the only downside of Backbone is the lack of native UI databinding which everyone needs at some point. Stickit is non-'magical' like Backbone which is perfect for my needs at the moment. Best tools for the job works every time, 60% of the time. :)
You're right. I'll make some performance testing though (especially with lists) because I'm really interested now in performance difference (although, I'm sure that this performance diff doesn't matter in the big picture)
I'm not sure I have backend pain.
Thank you!
Other platforms are in the works, see @hoodiehq’s tweets. Not to worry :) Hoodie is cross-platform, but the dev-exprience niceness is what we are porting at the moment.
Somehow I think not having a backend is going to bring much more pain than it takes away.
Awesome. Old memories comes to life again...
it is not about not having a backend, but having a generic backend that takes all the pain away. Think Rails, but for frontend apps.
Well please keep us posted. I'd love a turn-key hoodie on my linux based hosted server and linux based dev environment. And as a side question: what is your pricing model?
I'm curious as to what you mean by how "low-level" Knockout is. Wouldn't a MVVM/data-binding framework be more high-level than Backbone, since you're not expected to do as much direct DOM manipulation? Still, really glad to hear about your experiences about using newer frameworks, so thanks for sharing!
Absolutely mind-blowing, thank you.
&gt; Well please keep us posted. I'd love a turn-key hoodie on my linux based hosted server and linux based dev environment. There is a mailing list sign up form on the site, if you fancy, or follow @hoodiehq on twitter. The Linux version should land really soon. &gt; And as a side question: what is your pricing model? Hoodie is Open Source. You can deploy it to Nodejitsu easily, Heroku should be doable as well and we are also looking at custom Hoodie hosting solution, but that’s a bit out yet.
Chrome on Mac was the browser of choice while I was developing this. Strange that it doesn't work for you.
Oh yeah, it autostarts for those browsers that support it, but first it needs to buffer the sound for a bit... I had to make the controls visible so that it could work in the iPad, which doesn't support autoplay or .play(). :)
Wish we had the time to experiment/get to know all these frameworks..
so you just throw an error on an assert then? I think you'll find most assertion libraries (if not all) for javascript stop. console.assert isn't a javascript native function, it's part of the console api and it doesn't stop the error because the purpose of the console api is to write things to the console, not stop the program running.
chrome on a mac here - music stopped near the beginning of Mars portion, but still cool!
unminified js source?
I'll put it all on GitHub in an hour :)
Needs a fast forward.
I'm starting to think of the memory management flaw as just part of programming in javascript. Programmers have to manage references, that's just the nature of computer science. Letting Angular or Knockout do it for you is bound to be a leaky abstraction. Javascript already has garbage collection. Backbone is 1500 LoC, it's well within something one can understand in order to reason with references properly--like you would in any python, Java, or C++ program. Also, I suspect cases of memory leaks are most often coming from reckless re-instantiation of objects--a render function calling new subView(), for instance. 
I'm not sure precisely what he meant, but the two are really connected. Say you're looking at two collections, both fetched from the API. It so happens that there is one object that is in both collections. But you have two Models! One in each Collection! So if an action changes the object in one Collection, how will the Model in the other collection get updated? Duplicate data is a problem. (The "having a reference to their collection" is an obstacle to this because it ties Models to their Collections rather directly. Of course, I'm pretty sure Backbone doesn't _require_ you to give Models access to their collections, so this individual bullet point is another of his criticisms--see elsewhere re: memory management--I'm somewhat inclined to dismiss.)
I'll test it. What do I need to do?
really takes me back! writing canvas stuff always reminds me of my amiga days, and this is inspiring.
Reminds me of a keygen demo
could you link it in here? Also this was awesome
Not only OS X only, but apparently requires Homebrew.
* Refused to execute script from 'https://raw.github.com/mattbaker/Reactive.js/master/src/reactive.js' because its MIME type ('text/plain') is not executable, and strict MIME type checking is enabled. fiddle.jshell.net/mattbaker/MV4Q3/4/show/:1 * Uncaught ReferenceError: $R is not defined fiddle.jshell.net/mattbaker/MV4Q3/4/show/:37
Great! :) Do you have Skype or any other form of messenger? I'd like to be able to discuss!
what kind of tool?
It's mainly a minimizer. But i'd rather show it.
Could you PM me username or such for an instant messenger? Preferrably Skype!
&gt; i'm slightly out of date, but 18 months ago i was looking for the same thing and chose dojo. i'm still using it today and am very happy with it. Good for you. Personally I think that if jQuery is the herpes of web development, Dojo is more like full-blown AIDS...
Continue tomorrow? :)
Throw it up on a github repo!
for the third time in this thread: we are working on the others. Help if you can spare some time. Also Homebrew4Life
And completely rewrite the filter? No, if I needed a filter like this, I'd look for better one or roll my own.
The demo in its entirety, including non-minified source, is now on github: https://github.com/lbrtw/enigmatic Just remember that the code isn't super-optimized.
Github tries to prevent script hotlinking by adding the http headers 'Content-Type: text/plain' and 'X-Content-Type-Options: nosniff'. Browsers like chrome refuse to execute javascript when it contains these headers. Wealthfront should host this script file on their own servers.
Audio only on Mac Chrome here as well (Version 26.0.1410.65). Worked fine on my iPhone though!
Doesn't seem to want to work on iPhone -- no error message, just "Press play!", with nothing happening after I do so.
Could be an issue with the streaming audio. Does the music start at all? The effects are set to start at the "play" event from the audio element, which occurs when the music starts. It has been tested on an iPhone, though I don't have an iPhone here right now, but it works perfectly on my iPad 3.
Tip: set up your testing so you don't have to walk everyone through. Make a nice readme doc, include some screenshots, and link to a Google spreadsheet form for feedback. 
Chrome on Windows 7 here. Works fine. Nice job!
I'm working on windows support at the moment. There's no easy setup yet, but the most platform dependent stuff has been ported (local-tld and node-multicouch) I'm planning to crunch on it this weekend and hopefully get something merged in soonish, local-tld needs rewriting again to be less horrible on windows/mac (currently works, but pretty horrific). I'm often idling on the hoodie irc channel, #hoodie on freenode, or you can check my forks: https://github.com/mdlawson/local-tld https://github.com/mdlawson/node-multicouch
I have the exact same version as you... Weird. Well, just goes to show that you cannot control all aspects of the web.
Thanks! :)
Thanks, i'll do that!
Wow, those ubiquitous tooltips are just goddamn annoying.
Yeah true. I'm thinking of checking out Marionette (mostly for view management) in future if I get time.
d3 is the shit. I highly recommend that JS library to anyone
I think all I'd like backbone to do would be have an "unrender" function which calls undelegateEvents, then they just need a bit in their documentation that tells people this is where they should clean up their references. That's all that is really needed, the issue is that memory management isn't put forward to programmers starting with backbone and as such just gets missed, a simple function and a reference when reading the docs would tell people what they should be doing and give them a place to do it.
yep, Koglerjs said it. If you can't share models across collections then how can you keep them all up to date at the same time? I think Backbone was really written for simpler applications where you don't have shared models across collections - but some of us still have to work around it. Also it means that I've seen code where people keep referencing a collection by calling model.collection. The issue is the model might be in another collection (in this case it was a filtered collection created from the original collection) and as such points to the wrong thing. In fact what they wanted to do was get the collection of the parent view, not the collection of the model, so view.getParent().collection (or I'd prefer .getCollection()) solves everything
I do think that would work out better for me. :)
I recommend [highcharts.js](http://www.highcharts.com/) for your charts and graphs
undelegateEvents refers to DOM events, and View.remove already removes $el from the DOM (this is why re-renders tend to need either a setElement or a delegateEvents call). The memory management comes from a flawed Event abstraction--thinking of them as one-way arrows (which is their function) instead of edges between vertices (which is their effect, in terms of reference counting). listenTo, with stopListening, doesn't do anything but turn the arrow the other way around. What we need to do is remove all events involving an object when we call object.destroy() or object.remove(). I _think_ this is what you mean by undelegateEvents, which doesn't touch Backbone.Events.
Same version here. Worked great for me.
Exactly. Oh, that's what I was supposed to say... I meant that I couldn't auto-start the audio without a clock, so I might as well have the audio element showing...
Suddenly I'm back on the Amiga again. We've come full circle. *O.o* 
Worked great for me on a 4s just now. Thoroughly enjoyed that. 
Simply, in Knockout, you can easily access parent objects. In Backbone, models are a bit more isolated, and top down. If you are directly in your model, you can't conveniently access your collection housing you. Backbone is pretty small (6k) and is great to get something out the door. (also the compiled templating approach feels better if you think your JS will be on foreign pages, uncontrolled by you). It also stitches together nicely with requirejs and GruntJS for a nice and fluffy development stack. With Underscore (as a part of Backbone), mixin support is trivial, and Jasmine tests were simple to just fit right in early in the project. 
Haven't heard of Stickit. Looks pretty slick...it Also it's been released for about 7 months? Would have been great to see this a few months back, I would have contributed super heavily! Do I smell a refactor?
The 'set' function doesn't only change the value of the variable, but also calls any observers on that variable. In this case the observer would trigger an update on the DOM to reflect the new value of the observed varibale.
I did look (although not closely) at Marionette, and decided that it wasn't the *exact* way that I wanted to take that particular project. At a glance, it kinda felt like all it did was provide an abstract view handler for pre-existing DOM elements.
It's already there for development purposes, although it's a closed source app. Any way you can allow issue tracking on GitHub but not source viewing?
Good tip!
Why closed source? And there's no way to make the only the issue tracker public.
It's closed source because much of the source is going to be part of a bigger platform. I make apps for a living, and making it all open source isn't good business. Wish it was tho.
Tell me about it man. I hand rolled my solution about 6 months ago. There is also Epoxy. That worked well but threw a couple weird exceptions I CBF fixing at 3am so I switched to stickit :)
Here's a solution based on that idea (but no d3 or jQuery, that would be overkill): http://pastehtml.com/view/czitvwbmn.html &lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt; &lt;svg xmlns="http://www.w3.org/2000/svg"&gt; &lt;circle id="mycircle" cy="100" cx="50" r="40" fill="red"/&gt; &lt;polygon id="mypolygon" points="200,10 250,190 160,210" style="stroke:purple;stroke-width:1" fill="lime" /&gt; &lt;script type="text/javascript"&gt; document.getElementById("mycircle").onclick=function() { alert("you clicked the circle!"); }; document.getElementById("mypolygon").onclick=function() { alert("you clicked the polygon!"); }; &lt;/script&gt; &lt;style type="text/css"&gt; #mycircle:hover { fill: yellow; } #mypolygon:hover { fill: blue; } &lt;/style&gt; &lt;/svg&gt; 
For stock charts I'd always go highcharts, they are pretty good. D3 allows for much for variety in your design so it depends what you need.
Missleading title. Hoodie runs on CouchDB, which is a backend even if it's a very relaxed one. 
This was a star field I created when I first started getting into Canvas/Easeljs. The HUD can be toggled by clicking anywhere.
Yipeeeeee! and thanks!
I don't know why people think inheritance in javascript is hard or weird. Most blog posts I've read on the topic begin by declaring how different it is, then fails to explain what the hell is happening. One of the few really good breakdowns on JS inheritance: [Part 1](http://fromanegg.com/post/39621616853/constructor-chaining-inheritance-in-javascript), [Part 2](http://fromanegg.com/post/41107863511/prototypes-and-class-like-objects-in-javascript)
Those people should have tried doing some Self in the first place. I guess there would be less confusion if everyone did that.
X-post to /r/LearnJavaScript, plz? This is pretty nice.
If you want to take the worry out of inheritance, build a generator that creates the objects you want. Here's one I'm building to take the pain out of actually using common object code: https://github.com/thedeepwoodsbrigade/restful-model
Disable cache while dev tools is open - I'm sold, Chrome's caching is the one thing which bugs me about doing web dev work in the browser.
Seems like you could do quite a bit with this, the webworker utilizing version especially. Good stuff.
It's awesome there is finally an open source version of this tech.
But does it run linux? ... oh, wait
Build a game... if you're not up for designing something from scratch, pick an existing game and do a clone. something like solitaire or mahjong tiles.
Interesting.... I'm no expert on greasemonkey, but have you looked at the 'unsafeWindow' object? This is your way to get at the global scope... This may relate to your jquery problem as well (if it should already be available on the page, see this: http://stackoverflow.com/a/4261831) You should be able to get at the function like this : unsafeWindow[ varName ].call(null, x, y, z); // this assumes varname keeps the function name -- and you have x,y,z defined :D If the function on the link is global, it should be available under unsafeWindow. The same caveats about eval apply to unsafeWindow -- a malicious page can mess with you.... see this for alternative http://userscripts.org/scripts/review/85398
I didn't think the node.js community was capable of doing *anything* "quietly". "Changing the face of open source" is certainly suitably grandiose. Here's a pertinent data point to add to the mix: * [Perl](http://www.cpan.org): 120,535 modules / 18 years: **6,696** modules/year 
This is not a full bookmarklet but it can be used by one to gather images from the page https://gist.github.com/tuxracer/5061232
http://codereview.stackexchange.com/
There are a few points I'd nitpick. -Views will inevitably have their own state--consider a form View. A form might create several models--it would be silly to create several 'tentative' models instead of having a model creation step on submit. Alternatively, consider View animations. But as far as its Model is concerned, I quite agree: "If a View needs to be changed, it’s Model should be changed only, and the views bound to that model, including the first View, should updated themselves consequently" -Routers are a map from URL state to Models/Collections. They're slightly more important than indicated, because they allow the user to enter the app from any URL and arrive at the same data state. What I mean by this is, I'd add a step just before "Create your Models": "Create your URL map." From there, the remaining steps are an excellent roadmap. 
I agree that it may suck for people coming straight from OO but I disagree about all of the hoops and not being quite palatable. I think after you get past "understanding it" and move in to "getting it" then prototypal inheritance is actually more elegant than tradition inheritance, in my opinion of course. That being said, the syntax for Javascript inheritance could use some improvement but it could be a lot worse.
Very nicely put. As soon as you can break away from the "everything must be a class" mentality that's been so prevalent over the years then you can see how simple and elegant prototypal inheritance is.
A solid go-to "big-yet-still-small" project would be a todo list. I'm not talking about some simple "type in this box, add item, click x to remove" kind of thing. I mean something with persistence (localStorage vs. server-side), setting for future dates, organizing by categories, etc. When you first hear "todo list" it sounds like a super boring project but when you start breaking it down and thinking of all the things you can do it with, it can actually be a pretty cool experience.
Has anyone else noticed in the last couple weeks that the latest versions of dev tools are not working properly with breakpoints? It's driving me insane.
+1 For Knockout's data-binding approach. A simple, low-level data-binding utility that doesn't try to take over your style of development. 
While Angular does promote testing, there are many other great testing frameworks that allow for a great test suite to be crafted around your app. [Jasmine](https://github.com/pivotal/jasmine/wiki) is solid, and so is [PhantomJS](http://phantomjs.org/)/[CasperJS](http://casperjs.org/)
Well said good sir
Write a JavaScript parser and do not use *this* or *new* keywords. This one task will give you the most intimate knowledge of JS you will ever get.
What a goldmine of information, nice.
Thanks for feedback @koglerjs, it is highly appreciated. I couldn't get your point about the form views, but I would agree that Routers are more important than indicated: I missed the point that they are a tool to access app at particular data states.
I like to think r/javascript would be willing to do offer thoughts on your code, just post it as a request. However I think I would very much enjoy a sub where people can get and give advice on script. If you find one please let us know.
This will probably be my route, I think it will keep me interested. And my degree is actually in Graphic Design, programming has become my outside work hobby. Thanks for the reply
I built a pretty sweet jQuery to do list and made it very pretty with some nice CSS, perhaps I can look grow it into something nice and somewhat complexed. Like a reward system that keeps stats vs procrastination or something. Thanks for the ideas
Not even sure what this is but ill do some googling and look into it. Thank you for posting.
GENIUS!
hey at least you lent a hand, thanks for that :)
Until now I never understood why people dislike Backbone, which I like and use a lot. But now I get it, people just have the wrong approach to developing web applications. Thanks.
Right, of course there is other ways to unit test and e2e test; but Angular (with karma/testacular) give you many resources you need to test, plus more! Just the fact that they promote DI and modular design alone helps create good unit tests with proper mocking of services (like http requests). I'm not saying its the only way to do it, But that Angular helps you think about testing. I'd be curious to see how many front end devs don't test at all.
Several other plugins (such as world edit) also allow scripting with javascript, plenty of fun to be had releasing scripts of mass construction. But the great thing is this plugin gives access to bukkits api as well as giving you the event handlers to play with. So this plugin basically gives you the ability to play with the internals of the server as if your scripts were a bukkit plugin rather than as part of a another plugin.
Were you at the jQuery UK conference yesterday?
Yeah Ilya presented this deck in Oxford this week.
/r/learnprogramming If you post it here, people will probably help too. You can also post it in ##javascript on freenode or something. 
Yes I've often had issues setting the breakpoint on the line I actually clicked on, especially if that line was in an anonymous callback function. I usually refresh the page a few times and also turn prettyfication on and off and eventually get it to work.
&gt; node.js 26,966 packages / 4 years = 6742 packages per year How many of these are actually useful? How much of it is duplicated effort? This is like measuring a programmer's productivity by the line of code count.
As the author of a data binding [plugin](http://nytimes.github.com/backbone.stickit/) for Backbone, I would not recommend binding, nor do I think it's needed, for *every* app. Which of the apps in the [backbone examples](http://backbonejs.org/#examples) need 2-way binding? Not many, and the ones that do, only need it for certain screens in the app. A library that manages and models your data well is the right choice. Data binding is a secondary need, and when used, can help a lot to create a rich app experience.
Me too. Had a great time. Fantastic speakers, great atmosphere. 
You need a project, doesn't matter what it is. If you feel confident, have a look around github and find an open source project you would like to help with. Even just turning someone else's code into documentation is very helpful and a great way to learn!
You can nest collections by overriding the model method on your collection definition so that it returns either a model or a collection depending on the data that gets passed in. This thing: http://backbonejs.org/docs/backbone.html#section-77
It's nice, but the StackExchange platform isn't a good fit for this. It'd be nice to have a dedicated interface to edit the code, add annotations and test that the code still runs correctly. People could vote on the proposed diffs, discuss and build on them.
Can you elaborate?
Which of the real life web app don't need 2-way binding? Give me one .. just one realistic app example that could not make use of 2-way binding. Even the "todo" list example can make use of it. Actually the todo example is dead simple in knockout.js
It's not really clear what you're getting at here. There are plenty of backbone apps that do not need to make use of two way binding, https://github.com/documentcloud/documentcloud/tree/master/public/javascripts being amongst them. "can make use of it" is a pretty weasel-y assertion.
I was actually thinking of a single-step form.
On submit is _exactly_ where you should be creating new Models. However, while the HTML form seems like a model, but there are two reasons I am inclined to maintain View state--even including a View attributes object. 1) Model state should represent the state of data on the _server_. Unsaved data doesn't exist on the server. 2) My usual Form example is the Reddit Enhancement Suite Live Preview. If that were a Backbone View, how easy/sensible is it for it to listen to a newly created Model? If instead that View watches this form's View for attribute changes (triggered by dom keyups) then the relation between the Objects is clear. 
Well, just what do you mean by "intermediate state"? If you have data that is saved to the server but doesn't mark the form's completion, I agree there should be Model state. When I say View state, I mean data particular to the View that either hasn't yet affected any Model state or relates particularly to the View's concerns (that is, the API does not and should not care about it.) For instance, I've been working on a payment form that basically has three states; initial, confirmation, success. This is all done with one View, and the View sets display flags for the template. There is no sense in saving that View state to a Model at any time. 
[I explained the Form bit a more to Carnilawl below.](http://www.reddit.com/r/javascript/comments/1cpgcm/the_backbonejs_way_of_thinking/c9j4545)
Honestly i'd create the model when the form is created/prepped/whatever. The model is a storage container, and the view is the interface to update the model. Getting the user's intent that they wish to proceed (submitting the form), and then receiving confirmation the model has been persisted to the server are all about data lifecycle, and if you're dealing with data, it's best to wrap it up in a model.
I would strongly advocate for exactly the opposite structure. Client side models do *not* only represent server side data. If you need to structure and track data in the client, even if it never touches a server, use models. It's what they're there for. The event dispatch and communication methods built into Backbone.Model are useful for far more than just server side syncing/updating.
This is an amazing idea.
Yet another - "Hello poor javascript programmers, I just came from c++ and I know how to repair your broken language"
How about this: you're writing a form for an app that schedules emails to be sent. The API endpoint to schedule an email takes a UTC timestamp. (Who knows how they're storing it in SQL?) But your user is going to enter in month, day, time, etc. So your View state comprises those fields of the Form, and those fields have no place in the Model. Either you're going to continually convert the current fields into a UTC timestamp on the Model as the View state changes (unnecessary), or you can write a function that, when the View submits, converts everything into a new Model that then posts the save. 
From the creators of are-we-there-yet and but-why-mom.
&gt;Client side models do not only represent server side data. Yes and no: Client-side models should represent, as best as possible, the objects retrieved from the API. The _point_ of Backbone is to separate the data state of the DOM from the data state of the Models. They _do_ have different needs and concerns. When the DOM object pushes through to the API layer, that's when the Model is created. You're approaching this, I think, from two perspectives that are less applicable to the purpose Backbone intends to serve as a strong client-side framework. 1) Backbone _isn't_ MVC. Both View and Model are objects with their own data state, and the knee-jerk reaction "If you need to structure and track data in the client, even if it never touches a server, use models" no longer applies. 2) There is no "If" in "If you need to structure and track data in the client." Backbone is about structuring and tracking data in the client. The point is what this says about the API-Client line, and how that is reflected on the API-Model-View-DOM continuum. The "event dispatch and communication methods" are _exactly_ why the View should hold its object. Consider again a View that creates a new Model on form submit. Where does that Model live if it's created as soon as the Form boots up? Is it already added to the Collection, but in some "unsaved" state? What events should it trigger? This means that the Collection has to worry about filtering out unsaved models for other Views that are watching that Collection--it is doing this _instead_ of reflecting the best-guess state of data from the API. Failure in separation of concerns. Another way of saying it: why does the Collection care about managing a model that may never exist? So... is it a floating Model that you add to the Collection when the submit occurs? **How is this different from an object on the View?** The action committing a save/submit, the translation of the fields into Model attributes--this is all a View concern. You would maybe get away with a "receiveForm" function on the Model to handle that formatting, but **any action initiated by the User must flow through a View.**
I have written several apps that avoid data binding. - Do I want a potential DOM reflow every time I press a key in an input box? No. I would prefer to batch up changes, maybe manipulate a DOM fragment and only then put it back into the DOM. - Do I want my model updated from a text box every time? No. Sometimes I want the user to finish all input, submit the entire form to be validated *in context* before pushing it into the model. - Do I want to fire a change event on every key press? No. I probably want to wait until the user finishes making their changes to the form, then validate and fire the change event. I'm sure every framework has some tooling that you can *add to your code* to *change these behaviors* of data binding from the default. I just really don't mind handling it all myself to be certain it's only doing what I expect it do.
Error: Refused to execute script from 'https://raw.github.com/chjj/marked/master/lib/marked.js' because its MIME type ('text/plain') is not executable, and strict MIME type checking is enabled. And then it doesn't work
I just tried \LaTeX{} And it did not render. :-( I can't get anything to render.
You mean like the one I'm using now.. chrome?
I dont know what to say about this. What browser version? 
I like it!
That doesn't sound very challenging. If I go the OMeta way, I don't see any "this" or "new" being used in the parser. Or did you mean that he should parse only a subset of JS without these keywords?
Version 27.0.1453.47 beta
This explains and solves your problem: http://rawgithub.com/
Whoa! That's *really* cool! Just signed up for beta, any idea how long it might take before a spot will open?
I'm having a layout issue. The box where you enter the LaTeX code, and the area where the output is rendered, both overlap the last line of the instructions. The overlap problem goes away if I make the window really wide. It seems to need to be about 1208 pixels wide for the problem to go away. I'm on Google Chrome on Linux. Just tried it in Firefox and I get similar behavior.
Weird. I never get that error unless I'm in IE. Usually Chrome doesn't care about the mime type.
Looks great. This is exactly what I'm looking for. Saving data locally by default is such an obvious requirement I'm surprised how esoteric it still is. Creating backends that are so abstracted that you never have to create a 'custom' one is also a massive boon. I also think authentication should just come out of the box. It's so annoying that you get great demos for stuff like angular only to be totally dropped at the obvious requirement of painless authentication. Even better if that authentication stretches to permissions on objects. So I can easily share content from an individual to a group or another individual - which it looks like this does. So congratulations. I'm a windows developer - yeah I know whatever. I would love an easy windows environment failing that a linux port.
Doesn't work on Firefox 23.0a1 On load I get &gt; ReferenceError: marked is not defined @ http://eoinmurray.github.io/rontgen/app.js:35
On http://cheetah.io you mention exporting the documents to pdf, can you give an info on how that works (client side/server side?). I'm interested in integrating an editor like that in [owncloud](http://owncloud.org/)
Yes details would be awesome.
Not quite... MIME type issues suck! http://i.imgur.com/vhxOHox.png
That's cool, thanks for sharing! How difficult do you think it would be to expand it to a full document editor? Something that would support styles, packages, etc.? I use Latex a lot, but I'm not familiar with the code behind it, so I'm curious about how much effort is involved in moving it to JS. 
Environments don't work. $\begin{itemize} \item lol \end{itemize}$ For example gave me a box with that in it.
I knew this day would come: https://twitter.com/hitsmachines/status/304528144839360513
pushed fix.
ill fix up the styling later on.
[[retracted; fair enough and sorry]]
&gt; So if you call person.greet() you are literally referencing the key "greet" in the array which corresponds to the function you defined. Anyway, this was one of those AHA moments for me in JS. To nitpick, person.greet() gets the function and executes it; person.greet gets the function itself.
Does it have collision detection at all? I was able to wreck the shapes pretty easily by shaking them.
Free JavaScript and jQuery Course, Tutorials and Scripts.
Free Ajax Course, Tutorials and other resources: e-books, video tutorials.
Awesome! Works now!
@everyone getting errors I was loading marked.js with mime: type/text it is fixed to type/javascript now so it should work.
That spider demo is creepy as hell.
There is also a Closure Linter to check for some things the compiler misses.
It just does bounds and constraint checking.
https://news.ycombinator.com/item?id=5580596
It's kind of ironic to see this article on a website which takes at least 1 minute to load.
I counted to 35 then closed the tab. Must be some irony troll post.
OMFG A SPIDER
Are those good enough for collision detection? Serious question ... just curious.
is there anything that really requires web workers yet? I've always found the concept interesting but struggled to come up with a real use-case. 
Actually I do understant and get it (two wins! :); I've been coding javascript since the 90's. Syntactical sugar would just make the mental jump easier for others. I spend a lot of time teaching others who don't get it because of the background that they come from. Plus there really are some hairy parts of inheriting. Anyways, the method I use helps close the gap by offerring a mix of object literals and functions. I feel that the biggest gap is how each of these different types handles prototypes. It's those little intracies that make the leap the most difficult. Javascript does not inherit the same way even amoung itself, so of course people have difficulty. There is no elegance in inconsistancy.
So, pretty much just a JavaScript implementation of "Advanced Character Physics" by Thomas Jakobsen. I've [created one of those myself](https://github.com/paldepind/simple-physics) as well. It doesn't have fancy demos though but it supports line-circle collision detection and response.
I love this series. :)
There are a few subreddits where you can ask for help and stackoverflow (just regular old stackoverflow) is actually a nice place to get some feedback on code *iff* it comes in the form of an answerable question that hasn't been asked before. But in practical terms you're not going to get consistent feedback from reddit or SO. The best place to get feedback is to find an active open source project and start submitting pull requests with code that fixes bugs. You'll get more feedback that you could ever desire.
Sorting/filtering large data sets client side.
So yeah that would be one, but I've just never come across that use case, its always been more efficient to do that server side. Google docs maybe could find some use...
is there a mirror?
I have been working on an app that does a lot of image processing. Some of those algorithms can get quite slow and you don't want to lock up the entire UI in some cases.
This is sexy.
Sorry there was a problem with connections hanging open and taking a long time to time out. Should be fixed now.
No.
I love Verlet integration, I made this a few years back http://jsfiddle.net/loktar/buhQ9/ However I really wish this library had collision detection! The verlet constraints, etc. are easy to understand but when it comes to making them collide Im left scratching my head. Here's a few links that helped me out in the past, and for anyone interested in doing something similar. [Verlet Collision (with circles)](http://codeflow.org/entries/2010/nov/29/verlet-collision-with-impulse-preservation/) [Verlet constraints](http://codeflow.org/entries/2010/sep/01/hard-constraints-easy-solutions/)
Just funny more than anything.
Yes, I just put a mirror up [here](http://codingcookies.herokuapp.com/). Sorry about that!
yup yup great stuff!
Awesome, though it suffers from the problem a lot of markdown/latex editors have: the _ in an equation will be processed by markdown first, ruining the equation. Example: __Definition:__ $x_0$ is an _ordinary point_ of the ODE $L[y] = 0$ if will link the _ in $x_0$ to the _ before "ordinary point", italicize the stuff between them and break the latex.
&gt; Notice the lag at the beginning of the hold. This sluggishness noticeably impacts the user experience of applications — especially games. That's the Keyboard repeat rate, not lag or sluggishness.
I've run into issues with large arrays of simple objects that I'd want to map their properties to KnockoutJS observables and apply them to the current page. This creates a lag in the app. I realized that what I was mapping didn't need to have observable properties, just needed to be an observable array, so it wasn't a big issue but I thought about what I would do if/when I do run across a case where I will need to do large mappings like this. There may be other options or better ways of handling this that I don't know about but off the top of my head, this might be a good use case for MVVM frameworks in the client browser that need to update the DOM, and if some DOM update operations take awhile, putting them in a Web Worker wouldn't lock up the UI while it did its thing. I'll have to look into this more. This is the first time I've heard of the HTML5 Web Workers.
If I may be pedantic, I think the "repeat rate" refers to how many times the event handler fires per second, not the delay between the initial keypress and repeated handler invokations. The "lag" I'm referring to is usually desired behavior, but not in games.
Javascript engines have gotten pretty damn fast. Small projects and small websites are going to be just fine without using web workers. It's the more "intensive" uses of Javascript that might benefit from web workers. For example, looping through a huge list of entities in a game, or manipulating large quantities of objects. Web workers are awesome, but nobody should feel obligated to implement them unless they're seeing some serious performance issues. At least that's my take.
I used it [to collaborate on a distributed computing problem with other redditors](/r/dailyprogrammer/comments/178vsz/012513_challenge_118_hard_alphabetizing_cipher/c83j1ds). Unfortunately I only ran it for a week so you don't get to try it yourself. 
I'm making an XML document editor that has live validation using my own (shitty) RelaxNG validator. Any UI needs to react at about 60fps to feel fast, and because JavaScript blocks the UI this means that any javascript shouldn't take more than 16ms or it will make the page feel sluggish. The (craptastic) validator I've written takes about 700ms seconds to check a document and even other people's RelaxNG parsers take 500ms to run. If that lag was in the UI thread then it would mean a slow, interrupted UI, but with Web Workers I can validate the XML as they type and send back messages giving feedback without any interruption. To be fair another approach would be break up the validation into chunks that take about 16ms but that introduces a lot more complexity than just using another thread.
Yeah 2/10 wouldn't bang. pointy elbows, etc.
No, the initial delay is part of it, and it's configurable for every platform. Here's the windows instructions: [link](http://windows.microsoft.com/en-us/windows-vista/change-keyboard-settings).
Web Workers cannot operate on the DOM.
You're right, but how about we just say "lag" in a general kind of way instead of arguing about repeat rate... It feels "laggy". It feels "unresponsive". Jeremy, have any games been made with it yet? I always felt the Bombermine game felt laggy. I wonder if this had anything to do with it.
Nothing has been made with Keydrown that I know of yet, as I pushed the [first usable version](https://github.com/jeremyckahn/keydrown/commit/50dbb3c5993089d984e5def030ff12607962c0e5) yesterday. I've made some small little games and prototypes in the past based on the idea that Keydrown is built around, but I haven't used the library as it is in anything yet. I wanted to play around with ThreeJS with keyboard controls, and I knew I'd need to solve the problem of key lag yet again. Rather than doing that, I chose to distill the key state handling into an independant library – Keydrown.
It's never struck me as particularly difficult to manage key down state in Javascript. The example "problem" that this claims to solve on its homepage is not actually a problem, it's the normal and expected key repeat rate of the operating system and/or keyboard. If you're making a game, you wouldn't depend on that anyway, because you'd want to detect whether the key was currently up or down each game loop. To do that, all you would need to do is have a single variable that remembers whether the key was up or down last time a keyup/keydown event was fired. I looks like this library would actually interfere with the ability to do this simply in your own game loop, by creating its own independent loop.
Some good examles would help. Thanks.
Totally blew my mind. Wonders if height makes a difference too..
Yeah I know about this and it needs to be fixed. 
you can use * instead of _ to get italic and bold. 
WEll shit, my Q key makes the browser (Opera) select the next link for keyboard navigation, so I was jumping all over the document.
You may want to add `-webkit-user-select: none; -moz-user-select: none;` to the canvas tag in your demos to prevent accidental highlighting when dragging things in them.
Thank you :)!
you'd think that modules would be slow, then peak and trail off for a number of years afterwards. I'd like to see a bar chart of modules by year. Taking an average just throws off the numbers, I'm sure that module contribution will trial off as more of the things people need are written so there is no need to create another one. Also small modules are great for small programs, which is what node is for. Node is for creating small programs that fit together and network transport, not a huge program like a front-end web app, with the exception of trying to write a full stack framework that shares code between the front and backend like meteor or derby.
for example, tweetdeck. All it does is list data that doesn't change. Two way binding is only needed if a user is changing the data, not just reading it.
What if you need to constantly fetch updates from twitter? That is, the *list* of tweets itself is updated; even if no individual tweet is every changed. Actually displaying lists (or any kind of a view that has sub-views) is exactly what backbone does very poorly.
Nice work, to other people: JSHint is completely different from the Closure Compiler. The Closure Compiler does a lot of static analysis JSHint can only dream about (things like type inference). What he's put forth is a ant plugin, but what he wants to do is have a grunt plugin that will only run the static analysis with the closure compiler. There is also a [Closure Linter](https://developers.google.com/closure/utilities/) that lints to Google's style guide. 
Wish I could read the article on my phone. Tried to zoom and ended up on a different blog post 
this is exactly what im working on at http://cheetah.io 
adding new views is not data-binding, it's barely view management. You just render once, creating a view for each tweet and putting it on the element and then you listen for add events and just create a new view of each one of those and put it on the stack. simple. Unfortunately where it does fall down is in memory management, but that's not what we're discussing.
i used angularjs for a bit (which is an amazing framework btw) but then went back to backbone because i like its simplicity. I don't need two way data binding and backbone gives me the basic building blocks without strictly enforcing any particular conventions.
JSHint doesn't really yield the same results as Google Closure in linting mode. They don't check for the same things and from what I've seen, Closure tends to yield better results.
The question is?
I've been having a ball with Grunt. Most recently I set up a workflow for a PhoneGap application which lets me build with AngularJS, Less, and CoffeeScript without having to manually compile stuff. Set up Watch to compile on the fly, and worked in a build script into XCode's Build Phases which checks for release vs debug configurations and then builds the distribution package accordingly. Kick ass indeed!
Nope nope nope! I won't have any Ruby in my stew! I tried that crap before and it was disgusting with it's stupid syntax and all. But yeah, the courses are nice for JS. I'm just crying because I couldn't download a bunch of JS vids in my 2 days - only a couple and 60,000 Ruby vids. **Ninja Edit**: Hm, apparently you can right-click/save-as these Viddler videos in the courses! Sweet! Prepare to die, Neighbor's Public Wi-Fi Bandwidth! **Ninja Edit2**: Ugh, apparently I actually have to go through to courses to get to the next level and the sweet, sweet, video nectar. ...And the courses look really awesome.... Ugh, damn you CodeSchool and your super effective marketing campaign. It's like capturing someone and injecting them with heroine until they're thoroughly addicted then letting them go. --- Off-topicish(?), seriously though, it seems like the web is moving to real-time server-side JS, why waste time learning a pile of languages when you only need HTML5, CSS3, and JavaScript?
my eyes.
See https://gist.github.com/Acconut/5383324
In your example the images are on different hostnames, but is that the case in reality? Browsers have a built-in limit on the number of simultaneous connections per hostname, which is typically in the range of 2 - 8 depending on the browser and whether they are persistent connections. 
yes, they are on different hostnames. Sometimes one of them is slow to respond (lagging network/congestion etc) and it holds up the rest from refreshing. I was trying to get around that by making them asynchronous. I only need one connection per host name, as I'm just pulling one image from each. 
Something similar to [this](http://stackoverflow.com/a/6643460/409025)? (or the answer below it)
 function getNumber() { var currentNumber = []; rdmNumber = Math.floor(Math.random() * 10); currentNumber.push(rdmNumber); var lastNumber = currentNumber.pop(); if (currentNumber == lastNumber) { $("#number").html("Duplicate"); } else $("#number").html(rdmNumber); } 
Similar yes, I'm trying to make it work with my array.
/r/learnjavascript
I was hoping to find somebody who also had the same interests as my self in this type of project. Thats why i posted here as well.
I have made a more complete demo here http://eoinmurray.github.io/cheetah-demo/
/r/Carlhprogramming Javascript is a C-Like programming language so it shares many of the patterns that C has.
This module is incomplete. Only 150 functions? Why stop there? From what I can tell this is just a less-featureful version of [hoarders](https://github.com/jesusabdullah/hoarders). You should be using a [package manager](https://npmjs.org) instead and publishing tiny pieces that each do one thing well.
I'm tempted to remove this post as spam. It's suspicious to me that you've posted just 48 minutes ago and this post is +9 yet there is only one comment on it... Yet enough people have supposedly viewed the comments page that /u/SubStack's comment, just 10 minutes old (albeit kind of sarcastic and rude) is already a -6. All that - yet the site won't even seem to load... This has team voting smell to it. Tread lightly.
Yeah... I think i'll keep using underscore and it's *actual* competitors
Unsurprisingly, it does not really work: _.range(0,100,10); // returns [0, 10, 20, 30, 40, 50, 60, 70, 80, 90] _.range(100,10,0); // returns []
Hanged my firefox on first page load .. it's a pretty bad start.
I wouldn't even bother anymore, they're switching to Chrome's new rendering engine (Blink) soon.
It mentions that only some functions support it.
The spam would be annoying, but given the various criticisms below it's actually just kinda humorous. 
&gt;Boiler chooses not to defer to native JavaScript methods because many of Boiler's implementations of common JavaScript methods are built with extended functionality, such as the ability to accept arguments in any order. wtf??
I use Grunt and like it. Just starting a PhoneGap app and would be interested in how your build script works if you have it up on git or have time to explain more.
Have a look at closure tools
If you don't want to use a modular resource loader you can create class like structure for your code using closures. var someCoolModule = (function() { var privateVariable = 12345; return { doSomething: function() { alert( privateVariable ); }, doSomethingElse: function() { // ... } } })();
Why all the alias function names? Nothing worse than two people writing exactly the same code yet it looking completely different when working in a team
I tought it would let me pick things from each version and combine them into a custom one :(
And i think python is an ugly language and absolutely not "clean", and ruby is beautiful, and people i talk to think the same. Just because you don't like it's syntax, and have anecdotal evidence of people thinking the same doesn't mean that language is "crap" and whatever else you called it.
I only need 1 connection per hostname, so there is no need to increase the threads on the browser. 
Is OMeta a parser you have written?
That's fair
I've made something like that, actualy. I grabbed my code and rewritten it for your example. I have not tested this version but I think it should help you out function loadImage(id, img) { document.getElementById(id).src = img.src; } function preloadImages(images) { for(var i = images.length; i --;) { var img = new Image(); // Use a wrapper function to keep the correct value for i img.onload = (function(id) { return function() { loadImage(images[id].id, this); }; })(i); img.onerror = (function(id) { return function() { console.log('Could not load image ' + images[id].id); }; })(i); // Apply the source after we defined the callbacks to make sure it has them var now = +new Date(); // no need to use the .getTime(), just cast it to an int with the + img.src = images[i].src + '?' + now; } }; var images = [ { id:'the_img_1', src:'192.168.0.1/image.jpg' }, { id:'the_img_2', src:'192.168.0.2/image.jpg' }, { id:'the_img_3', src:'192.168.0.3/image.jpg' }, ];
Re-inventing and half-baking ES5 strict mode?
The main time this would be useful would be when calling a function that declares: this.something = x; and the function is not called with any context. That can be tricky to find sometimes. Closure compiler does some static analysis that warns if you're using 'this' in a function that hasn't got any context (not on a prototype or declared as a constructor function)
Can you not wait until the entire thing is complete and then link the final article? Right now on /r/javascript there's three (3) different submissions to different steps in this article... Also, since that appears to be your site, this is technically spamming...
To me it looks more like a tool to help find globals, which strict-mode wasn't designed for -- it's more concerned with preventing certain types of code, which includes a lot more than globals. Strict-mode is more useful to me if you're starting from scratch, or if your app is already mostly compliant, and if you're just trying to rid yourself of globals (say, as a first-step in a large refactoring), then strict-mode might get in your way on account of it tripping over other stuff.
Only functions that accept arguments all of a different type support passing arguments in any order as mentioned in the documentation of which I'm still working in every free second to improve.
You may have a very good point. I wanted to give people the option to use function names they might be more accustomed to. I'll take your comment under consideration and perhaps set a limit of no more than two aliases for a given method.
That's because you're writing the options to the document and not in the select. You'll need to maybe do an id on the select and document.getElementById('selectid').innerHTML += "&lt;option value='"... 
Hey guys I wrote this article yesterday on testing your Require.js builds and require plugins. Hope you like it!
shame it's not open source :(
Hopefully one day soon I can shape Boiler into something you consider an actual competitor. In the mean time feedback on what I might change to enhance the library would be greatly appreciated.
could you please give me an example on how to do it?
Nice. At my work we wrote a gradle plugin to automate the creation of the test runner HTML. It was open-sourced as gradle-jasquire-plugin.
So based on many of your comments it may be that I released my library a little prematurely. My intent originally was to create a library with all of the same functionality as underscore but with quite a few more methods dedicated to working with JavaScript objects. ... Anyway I'm not giving up on this so any constructive feedback would be very appreciated.
Would love a trial version.
The intent with this was to make remembering how to use many of the functions easier. Not needing to remember the pass order of arguments on methods that are passed arguments all of a different type does this to some degree I was thinking.
Pretty cool but would like to see more options to limit the output of the program. It registers every mouse movement/click event/etc. which could be hard to sift through.
A large amount of the methods are type methods and so use nearly identical definitions (generated when the library is loaded). If you take that into account there is around 90 methods. ... I'll look into using a package manager. Thank you.
there is a filter, and you can use the commandline to ignore files. Since the search is so fast, it doesnt feel like a problem. But i'll definitely improve on filtering.
The boilerjs website main page is a series of unit tests. All the results loaded into the API doc are live examples of code put through boiler. I realize this is not very efficient and will eventually migrate unit testing away from the main page. Admittedly I could improve my unit testing.
It's not a parser, it's a metacircular PEG parsing/tree transformation language. But it's not difficult to implement, it's pretty straightforward, I guess anyone could do it after reading Alessandro Warth's papers and/or PhD thesis. (I'm in the process of doing so right now. :-))
It's wonderful :) One thing I would like to see is the option to visualize nested objects, currently is sometimes shows things like "[{...},{...},{...}]. It would be nice to have the option to expand those objects and see what's in them
For those wondering it's $14.99 (€ 11.50).
Oh, that's not bad at all.
Yeah i need to keep the object-serialisation depth pretty low to really record 'all codeflow' however it would be nice if you could easily change the tracedepth for particular focus areas.
I just added a mixin option.
Here's a [simple browser-only method to detect globals](http://remysharp.com/2007/11/01/detect-global-variables/): var differences = {}, exceptions, globals = {}, ignoreList = (prompt('Ignore filter (comma sep)?', '') || '').split(','), i = ignoreList.length, iframe = document.createElement('iframe'); while (i--) globals[ignoreList[i]] = 1; for (i in window) { differences[i] = { 'type': typeof window[i], 'val': window[i] } } iframe.style.display = 'none'; document.body.appendChild(iframe); iframe.src = 'about:blank'; iframe = iframe.contentWindow || iframe.contentDocument; for (i in differences) { if (typeof iframe[i] != 'undefined') delete differences[i]; else if (globals[differences[i].type]) delete differences[i] } exceptions = 'addEventListener, document, location, navigator, window, differences, exceptions, i, ignoreList'.split(', '); i = exceptions.length; while (--i) delete differences[exceptions[i]]; differences.length = 0; for (i in differences) differences.length++; console.log('Total globals: %d', differences.length) console.dir(differences);
Which bad habits are you referring to? I don't see a good reason to exclude *new* and *this* - there's so many downsides. How do you create true javascript objects, for example? function MyObject() { this.a = 1; this.b = 2; this.c = 3; } var myObjectInstance = new MyObject(); console.log(myObjectInstance instanceof MyObject); // true You can't do that with the module pattern. function MyObject() { var a = 1; var b = 2; var c = 3; var toReturn = { a:a, b:b, c:c }; return toReturn; } var myObjectInstance = MyObject(); console.log(myObjectInstance instanceof MyObject); // false Not to mention that you can't modify the prototype chain when using the module pattern. Creating objects using the module pattern can quickly eat up memory because each objects has it's own set functions instead of sharing them. function MyObject() { this.a = 1; this.b = 2; this.c = 3; } MyObject.prototype = { doSomething : function() { console.log('Doing something'); }, doSomethingElse : function() { console.log('Doing something else...'); } } var obj1 = new MyObject(); var obj2 = new MyObject(); var obj3 = new MyObject(); // I can create any number of MyObjects and they all // share the same functions doSomething and // doSomethingElse.
The best way to make them easy to remember is to provide a consistent API. eg, all functions that transform an array take the array as the first parameter. I see from your docs you have this already. With regard to: // Passing arguments to the `arrays` method in an unspecified order _.arrays(obj, "B", true); _.arrays("B", obj, true); _.arrays(true, "B", obj); This makes the arrays function more difficult to reason about. Additionally, you're executing a ~300 line function on each of these to verify/transform the arguments into something usable by the function. That's extra code for you to maintain, extra code to serve over the wire and extra code to execute. Is it really providing *that* much benefit to the user of the library?
Are so beautiful
Not that it needs it, but underscore would help just a little bit. ~~Is Backbone a dependency?~~ so express, backbone, socket.io, path
Backbone is a dependency on both the server and client. Underscore is a dependency on the client, but you can easily include it for use on the server.
This is exactly the kind of exploration we need for server-side utilization of Backbone. Good, succinct example app, too. Question: what if [this file, the webapp part of the example](https://github.com/Mashlol/omni-chat-example/blob/master/public/script.js) only contained Backbone Views? ... = Backbon.View.extend({ events : {"submit" : "sendMessage"} ,initialize : function(options){ this.listenTo(Collections.messages, "add", this.newDomMessage); } ,sendMessage : function(event) {... same function, call Collections.messages.add(...)} ,newDomMessage : etc. ..... }); Then you'd be in the miraculous position of identical Models/Collections at the API endpoint and the browser data layer, which is _exactly_ what we want. Code once for two different places. In other words, the browser script--script.js in that example--would **only have to specify Views**. How cool would _that_ be? Hell, with the permissions functions the data layer wouldn't have to be concerned with error messages at _all_. Just a bunch of View logic. Javascript is so _cool_ right now. 
This is essentially the goal of Omni.js. I didn't write a backbone view for the front-end since it's so simple, but you could already do that! Unfortunately methods on the models and collections aren't forwarded to the client yet, but the end goal is that they will be usable from the client as well.
In some sense the only method one would need on the Omni Model object is Model.set, perhaps. Collections... well, I assume the underscore filters are still available, right? 
If you have a web development related question (JS or not) you can email him and schedule a Hangout where he can explain it to you. jeremyckahn@gmail.com Very nice guy.
I just checked, this only seems to affect older Opera versions. I'm running 12.15 and there aren't any issues with the landing page.
hehe true :)
I can't imagine why. Here's his Github page with the email listed: https://github.com/jeremyckahn Maybe you got picked up as spam mail? Go to this link and at the bottom click the "email me" link. It has a subject in it that he may have set up to avoid spam filters. http://jeremyckahn.com/tutor/
its possible that my keyboard config has carried over from older versions and they don't have that shortcut anymore... or something.
Well no matter what happens he's bound to make more money than giving it away from the go right?
Not necessarily. Often donations are a better business model for something like this. It does depend though.
Maybe - it's just the bird in the hand thing is usually good advice...
Thanks guys, check out http://etherpad.org for your next meet up :) You can host it yourself, do real time code collabo and do video chat. Also no Google logos on your content! Yay!
I am a little confused by what you are trying to do. Do you have any knowledge of CSS or HTML?
@CorySimmons -- You don't need meteor to be JS on client, server.
I appreciate the problem - getting started on a proper project can be hard when you don't know where to start. To help getting things going try finding a tutorial that takes you through the first steps for building a site based on a subject or problem that interests you. Once you have worked through the tutorial take it further from there and add some extra features. Resist the temptation to use every tool and technology available. It is better to properly understand a few tools and technologies rather than not delving deeply enough in lots and getting lost. You can do a lot just with a simple text editor and the Chrome debugger tools. Get a simple page running that displays some data from a database table, experiment with doing this with Node. Add some CSS styling and take it from there. Good luck!
Unit tests are really important. Break the code down into small discrete pieces as close to the individual function level as you can and test as much as you with unit tests. QUnit (http://qunitjs.com/) and JsTestDriver (http://code.google.com/p/js-test-driver) will enable you to do this cross browser. Once you have covered as much as you can with unit tests then you can move on to automated integration tests. Setup virtual machines with different browsers and have them run tests using Selenium (https://code.google.com/p/selenium). You can run tests against both a real server and a fake server back end depending on what you are trying to test. You don't necessarily have to test one real client talking to another. You can have a real client talking to a server that is coded to just provide pre-canned responses for each test.
KahnAcademy?
Could explain in more detail what isn't working? Are you able to see the options for the select menu? Are you able to see the input fields between the submit buttons?
I agree with the significance of unit test coverage. Selenium is what we use already(through sauce labs) do but we find selenium is limited when needing to run the same test across two browsers at the same time ;\
Do you actually need to run it on two browsers at the same time, though? I mean, realistically, you only need to test it on *one* browser, and then have callbacks via Ajax in the same test that simulate the other browser interacting.
Yea, you really do, some events are about handling browser event collision ;\ Here is an issue that would need test coverage that is currently impossible https://github.com/ether/etherpad-lite/issues/1652
Well, to test that *exact* case, I wouldn't personally recommend automated testing - there are some things that humans are better at testing, and this, I believe, may fall under that area. However, the state that you're sending on the second browser *is* something you could fake, without too much trouble... assuming I understand your infrastructure well enough. That means you could automate it to reproduce this particular error.
Yeah, underscore methods are all available, both on the server and the client. It would still be nice, however, to be able to write helper methods specific to models or collections, that will automate things you do frequently, and have these helpers work on both the server and the client.
It may not be justifiable. Though, the __args method by which passing arguments in an unspecified order is made possible, does make implementing methods much easier for me. It also allows me to set default values on arguments as well as enforce type checking on passed arguments. In other words it creates a uniform interface for all arguments passed to all methods in the lib. This will in the long run give me a centralized location to throw errors related to argument types too. ... Check out: [github/args.js](https://github.com/Xaxis/args.js/blob/master/args/args.js) to gather a bit of insight on what I'm talking about. ... I appreciate your feedback though and will contemplate removing __args from the lib.
Yeah, pretty funny coincidence.
we should stand up against this form of fascism. DRM should not be implemented, the web should be a free community
On that note if you decided you wanted a database redis works really well with NodeJS and is very simple to get going with. It is a basic NoSQL DB. &gt; var redis = require('redis'); &gt; var redisClient = redis.createClient(); &gt; &gt; //Set a key in redis &gt; &gt; redisClient.set(guid,JSON.stringify({ when: Date.now() })); &gt; &gt; //Get the key in redis &gt; &gt; redisClient.get(guid,function(err, data){ console.log(JSON.parse(data.toString()); }); I point this out as using a table in NodeJS will work but won't scale so well if you want to run multiple node clients or have some level of persistence. 
Automated testing is great, but sometimes you just need to do a manual test in order to work the kinks out. I suspect that when working with real-time systems that are dependent on 2 browsers communicating with each other that you would get faster feedback doing a manual test yourself. If you _can_ automate and find an easy way to isolate between the boundaries of the systems so that you can effectively unit test you should do that; and if the system is composed of decoupled pieces that don't mess with global state it will be much easier to write end-to-end tests that cover certain integration points. As developers, we shouldn't spend a lot of time prematurely optimizing our code; the same rule applies to tests as well. I'd try and go as far as you can manual testing some of these hard-to-test features until the pain gets too unbearable or you find a way to make automation easier :)
Let's look at it like this: DRM is only required when the beans already have been spilled. If you want to put content on the web, don't spill the beans unless you know who is listening on the other side. So DRM in HTML5 is a way to help hollywood not having to fix their crappy business model / infrastructure approach. I think this approach is broken.
At max there are 70 people accessing client data making .net calls. Instead of persistence, I like that I could use NoSQL DB to at least keep a running history of client access instead of doing it in .NET.
I'm fine with DRM on the web. People have a right to protect their hard work, and if it means that someone feels more comfortable about uploading their media to the web without requiring me to download some obscure plugin or native app i'm all for it.
By fascism, you mean optional feature you don't have to use in your web page if you don't want to? Dictating that people shouldn't be able to protect their work on the web because of some idea in your head you think the internet should be seems a more fascist remark.
This article is a self-pleasing read for Hollywood-haters. Big Media obviously has a need to protect their content with DRM. If DRM-protected content that you all love can be put on more screens without the need for Flash or Silverlight, I say bring it on. Want to view HBO shows on your open source/libre web browser? I do too. Refusing DRM won't make that happen.
So let them fail, but that doesn't change that Hollywood and many other individuals own content that they don't want easily copyable by any random person on the internet. Business models don't matter in the need for people to be able to protect their work on the web and ensure its value ( whatever it may be ) stays in their hands.
Assuming this gets implemented, wouldn't it be trivial to break it, since all the data and the information needed to decode are passing through your net connection anyway?
I'm assuming you're trolling. If not: the web is not different than any other "community". In your real world community, the food you buy at the store is not free, the bus you take or the car you drive or the bike you ride or the sneakers you wear are not free. All of these things have costs. If you are a media company, the only way you can make money is by protecting your media. There is no profit in providing your media for free on any medium, including the web.
There's a lot of great free things on the web. Nobody is holding a gun to your head to do anything on the internet. If you don't like non-free stuff, don't go there.
Totally agree and completely fail to see how anyone can have a problem with this. Unless there is a performance hit involved I don't see the negative. Yes everything is supposed to be free, apart from things that cost something. It is still a completely free and open web. Just like it is a completely free and open world until you get to the theme park, then surprise surprise you need to pay to get in.
Smart people who want data will be able to find a way. The best security is to do just enough to keep honest people honest IMHO.
Can you point to me towards some website, video, image, sound that does not require some human at some point to put in his effort to create? Thanks!
Myth number 1
Or you could just use static analysis with [this module I wrote](https://github.com/substack/lexical-scope): $ node example/detect.js { locals: { '': [ 'x', 'y', 'z' ], 'body.7.arguments.0': [ 'BAR', 'doom' ], 'body.7.arguments.0.body.1.arguments.0': [ 'xyz' ], 'body.7.arguments.0.body.2': [] }, globals: { implicit: [ 'w', 'foo', 'process', 'console', 'xyz' ], exported: [ 'w', 'RAWR', 'BLARG', 'ZZZ' ] } } 
It's true that once initial (often quiet substantial) costs are taken care of, the additional cost for each additional product is very inexpensive, there are costs. Not to mention, this material only exists because there is a group of people creating this material, and another group of people supporting the existence of this material. These people cannot do what they do for free. It all works precisely because it is invisible to you what these costs are. If you were required to pay some micropayment to cover the infrastructure and employment costs for each piece of data, then you would discover these items only appear to be free.
Sure! No effort put in at all and they charge exorbitant fees to use each one of the following products: http://ubuntu.com http://wordpress.com http://blender.org http://drupal.org http://videolan.org http://mozilla.org http://bittorrent.com http://gimp.org http://openoffice.org etc, etc, etc
DRM limits your functionality because it is a method that works in protecting copyright. I find this "myth" to be argument that tries to negate a purpose by attacking the method. It's like saying "Hammers aren't about driving in nails. Hammers are about making you use certain method of applying force to an object and thus they are wrong". Sure, there are many ways you can do something, but tell me something more effective than a hammer to drive in nails, and tell me something more effective than DRM that gives someone the ability to restrict use/distribution of someones copyrighted work.
given your comment below (max 70 concurrent users) I don't think you need to worry about that.
It would be more like if hammer manufacturers said that hammers were for defending against theives, when they were only used for driving nails into the hands of non-theives. 
Yeah, I do free software work too, and I also do stuff that involves content where you pay for access. Not exactly clear on how one can feed themselves *exclusively* by creating free software, but bless you if you can.
&gt;People have a right to protect their hard work That's what copyright is for, not digital restrictions management and other user subjugating software.
I have no problem with DRM. Release all the crippled content you please. Just don't make it a crime to crack it. 
Good luck with the courts. Don't blame people for not giving you what you want when you don't give them a safe option for their work.
Yes it would be. In fact it would be childishly easy, they have no control over what recording device you hang on your computer. They have no control over the signal that leaves your video card. And only one person in the world needs to record something to create a torrent. THAT is why it is a straw man in the first place. That they know it won't work. Thus the other reasons are just bs. That is why it is true that it is just about "limiting the functionality of devices and selling features back in the form of services". But, let them. I welcome it. Let them think they are safe and bring their content to the web. Go and cheer behind users like daedius and watch them self destruct. They think they need DRM because they have no faith in anyone upholding the copyright law. And rightfully so, because it is impossible. But the exact same thing holds for DRM. If you think you can defeat the ingenuity of an entire species by a few lines of code you are pretty damn daft. You can't control digital media. It was build for that purpose. Users have, because of the net a billion ways of distributing whatever they want, and they have been able to copy or record things since black and white tv.
Yep, and redis has a nice command line so it is easy to understand what is going on. You can simply fire up: &gt; redis-cli And type in the same commands you'd use in node. The subscription stuff in redis is worth understanding but probably overkill for your particular problem. 
You're kidding me right? You have no idea how much effort people put into working on open source software. The fact they give it away (with restrictions!) speaks volumes to their generosity, not to the lack of respect we should have to people's hard work.
You don't need 100% security, you just need enough security to feel what you are trading to the world is protected enough to be worth your time.
You don't need 100% security, you just need enough security to feel what you are trading to the world is protected enough to be worth your time. The fact that people won't even give them that chance speaks volumes to me about parasites thinking other people should just work for free or in difficult conditions for them to effectively make a living.
DRM isn't safe for the user. The user is the one who matters, after all, right? DRM or nothing is a false dichotomy.
A free and open web. Don't call your content "HTML5" and standards compliant if it needs plugins.
Safe?
I used to work on one of the major browser-based IM clients. One of the first things I implemented there was a mock backend that could be used for development and testing. This was a "controlled environment" that gave me exactly the responses I wanted in a repeatable fashion. This also circumvented the problems that are associated with sessions, etc.
So keep high-value media off of the web? That sounds more anti-consumer than dealing with occasional DRM troubles.
Woops. You said "a safe". DRM gives a content distributor a safe on YOUR computer. It turns your own computer against you. That's a malicious anti-feature if I ever saw one.
...effective? 
None of the above are *media* companies. The nature of open source software is very different from any kind of media, particularly high-value media like movies and TV shows. Among other things, video cannot be created by a distributed community of volunteers working toward their mutual benefit. 
Myth number one. 
Obligatory ["all discussions about the futility of DRM miss the point"](https://plus.google.com/107429617152575897589/posts/iPmatxBYuj2). **tl;dr version** HTML5 Spec editor says the purpose of DRM is not to prevent copying. Rather, it allows content owners to have legal control over third party distributors and utilities. It forces them to have a license. It allows them to do things like have unskippable commercials on DVDs, because all DVD must obtain a DRM decryption license and thus have to comply with restrictions. He admits that DRM is fundamentally broken. Unlike ordinary encryption where only [Alice has the decryption key so Eve cannot snoop](http://en.wikipedia.org/wiki/Alice_and_Bob), in DRM Alice and Eve are the same person. Obviously DRM will never prevent copying, but it will prevent distributors from not obtaining a license and complying with those restrictions. This is actually touched on in OP's article.
Why is this now a criteria to make money? When everyone recorded vhs tapes off TV, I don't recall any media giants going under.
I think we both misunderstood each other a bit. I was talking about safety from the standpoint of ensuring content can only be used a certain way, I was curious about what safety for the user you were referring to. I'm not DRM expert mind you, my only knowledge about it by and far that its about obscuring data. I don't think that necessarily has to be done a hidden manner, I would hope there are some good open source DRM solutions to ensure nothing sneaky went onto peoples machines.