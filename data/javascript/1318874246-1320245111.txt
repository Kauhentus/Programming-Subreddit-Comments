Yes, that's caught with the onerror event on most browsers.
Is this supposed to actually do anything when you click Run?
haha yes it does, it displays a pixar and google logo and you can interact with them (maybe they scrolled out of view since it's being moved left by 1024px)
Yes. There are differences between our services. Proxino requires you to run all your JavaScript through a proxino proxy server that inserts try-catch statements in your code before it gets send to the browser. You need to change your code that includes your script. This let's proxino catch a all errors and do stuff like minify your Javascript etc. Our service on the other hand does not require a proxy server, and you simply install like Google Analytics. We know details about the dom and the event fired, that currently proxino does not. Naturally the log-viewers ar different too. We've been working on Muscula some time before proxino launched. With all the JavaScript out there we think there is room for both solutions.
Look again. The text is *right* aligned. &lt;/sarcasm&gt;
CURSES AND DRAT!
Not sarcastic at all. I've found I'm really bad at that save() translate() restore() crap.
The second part of my post about writing phonegap plugin classes in objective-c
Nice. I've been advocating for this kind of thing.
What's the difference between what you're building and [Airbrake](http://airbrakeapp.com/)? Airbrake also handles errors in a whole bunch of other languages and works quite well. If you can solve the js part it might be interesting to switch, but it would have to be damn good.
Sounds like you ( or someone ) is just defining "true" multidimensional to mean "like C memory" arrays, which seems like a pretty arbitrary definition of true. 
There are several differences, but basically we're 100% focused on JavaScript errors, and are completely devoted to that. We love JavaScript. Solving the problem of logging JavaScript errors efficiently requires a lot of effort, devotion and focus. Basically we've seen that JavaScript errors can be just as bad as serverside errors. If not worse. Leaving a user with a half-working page. Finding, logging, grouping these errors needs to be top priority. There is no need to switch away from airbrake, you can use airbrake for your serverside errors and Muscula for your JavaScript errors at the same time. You can use Muscula alongside any logging framework, airbrake, getexceptional, splunk or if you are using your own internal system for logging errors. You are right that it has to be damn good. That's what we are aiming for :-)
So what are the actual differences? I assume you've done your homework and are well aware of what Airbrake and other services can offer. I'm not trying to shoot you down, I'm genuinely interested in what you can offer. If what you have is better that the alternatives I'd love to use it in production, any tool that makes our Ops easier is awesome.
How do you declare an array of 11 dimensions? and how do you handle the strings?
Loving the questions :-) We provide a lot of detail on errors. Often complete callstack, what event was fired when the error occurred (click, mouseover etc), all the event details, a small "picture" of the button the user clicked when the error occurred. And we've put a lot of effort into grouping errors intelligently. The grouping part is exceptionally hard to get right, and we are continually developing on this, I don't think it will ever be 100% done. Mainly because of all the browser differences. We've tested on over 100 different browsers/OS combinations. Also the searching, filtering, sorting of errors in our log-viewer is something we are quite proud of, we've done some innovations.
Also, we catch errors on iPhone and iPad
A good recommendation, though I'm not sure if it's best for an introductory text, which is what the OP sounded like they were after. After one's got a good handle on the basics of JavaScript and programming in general, however, I'd consider it a must-read. If you're not sure if it'll be worth it, however, try looking at [the presentation](http://www.yuiblog.com/blog/2007/06/08/video-crockford-goodstuff/) Douglas Crockford gave on The Good Parts over on YUI Theater.
Ok, that's pretty cool.
Worked on my iPad just fine. 
so how did you moved your mouse around without dragging the page around?
I thought it was just supposed to draw a curl. Didn't know it could be controlled by a mouse position. So the curl works at least. 
http://www.zurb.com/playground/orbit-jquery-image-slider
http://oi55.tinypic.com/2la3pxd.jpg ^ Looks good bro.
It's pretty poorly implemented right now; a use of the demo has notifications coming up on my left monitor when chrome is in the right...
You can do it easily with CSS3 on modern browsers. For example: http://development.tobypitman.com/slideshow/index3.html
Every little bit helps sometimes! That said, it does bug me to see completely nonstandard code be faster than what i'd intuitively do. 
Why do parent methods need to be copied to the child? Isn't prototypes exactly what this is meant to prevent you from having to do?
I guess it wasn't made for your satisfaction.
On my laptop it works without ever clicking on anything. I'm just dragging the mouse pointer around...
Please execute a rudimentary 'net search before you submit. A stack overflow post about this issue can be found [here](http://stackoverflow.com/questions/2090747/write-local-file-with-jquery-or-javascript).
I did, and I found an article that wasn't exactly what I was looking for. This one seems to be what though, thanks.
Beautiful. 
My pleasure. Best of luck with the implementation.
Maybe if you expand a string you get a membrane? I will have to write a test for that
With pure JavaScript? I would say no.
I am not sure I understand the motivation here. Syntax errors are easy to catch provided unit testing and easy to suppress provided proper authoring. It is the undesirable text output or unfavorable interaction that needs to be caught.
This is what I want to know, thanks!
You can do it with help from other places though! For example, you could make the browser POST the form data to a script, which provides a response of a file download.
That's a question we get. It's JavaScript runtime-errors in general. Unit tests do in no way guarantee that there will be no errors when the JavaScript is actually used by one of your website visitors. In reality, it is a scientific fact that generally, the only way to know if your JavaScript code works correctly is by running it. That means you have to test your JavaScript in all the ways it can be called, on every browser it can be called from (Internet Explorer, Firefox, Chrome, Safari, Opera, etc.), in every single version of all these browsers, and you have to do that on every possible OS (Window XP, Windows Vista, Windows 7, OSX, Linux, iOS, Android, etc.), and on every possible device (PC, Mac, iPad, iPad2, all Android devices, etc.). In practice, making sure that JavaScript code is 100% error free is impossible. JavaScript errors are also unpredictable; if we could predict them, we would just fix the errors. You have no way of knowing when they might occur. Even if yours is the one-in-a-million that has no errors now, errors might pop up when you release a new version of your website, when you add a new item to your shop, when there is a new release of Internet Explorer, or any other of literally a million things. In our experience, everyone who starts to log JavaScript errors on live websites come across some errors. We provide a way to log those errors so you can fix them.
I hate podcasts.
These tests are for the most part meaningless. Unless you find yourself actually bottlenecked; abstracted each's are fine, just look at underscore.
[something](http://www.reddit.com/r/webdev/comments/l18oa/trying_to_get_php_to_save_form_data_into_a_file/c2oy5gu) like this
Depends what you mean by save to a text file. You can definitely POST to a server and save a text file there. You can definitely use modern HTML5 technology to requestFileSystem access. Lastly if you want to make something downloadable check out this saveAs library: https://github.com/eligrey/FileSaver.js
i'm using myself: http://gamejs.org
This is excellent. Thanks! I've been using the NativeControls plugin, but I had to rip it out of another application since the code in the main repo is kind of crap. Definitely want to mess with the EventKit and see what kind of cool stuff can be exposed to JavaScript land. I've done a bit of native-&gt;js programming with Node.js. Really excited to see what can be done with Phonegap.
You can do activeX, but this only works in a few browsers. I did something like this when we were doing usability testing, we used IE7 to save users actions to a file.
It's possible with the Windows Runtime in Windows 8. Of course it'll only work for Windows 8 apps, so you'd have to find another way to do it for browsers/other environments.
Wow, very pretty visually.
i dig it
Great, thank you!
I think there is a bug. Instead of worms, I got a 70's porno bush.
Make the close button closer to the dialog. Otherwise looks good.
Very nice!
Very nice!
(**SHAMELESS SELF-PLUG**) Check out [eSlider](http://ethagnawl.com/eSlider/); a Flickr powered jQuery slider/gallery I wrote a few years back.
Beautiful! Very nicely done!
I agree. I'd actually put it at the top right of the modal.
Goddammit. Well done
Here are some links to get you started. TLDR; it's not really supported. http://www.html5rocks.com/en/tutorials/file/filesystem/#toc-file-creatingempty http://www.w3.org/TR/file-writer-api/
It's a trap!
If you care about the scroll position not being set to 0 in IE &lt; 9, you will have to change window.pageYOffset to $(window).scrollTop().
This is possible using the new HTML5 FileReader/FileWriter APIs (You can at least let the user save the file). Can you please clarify what browser you need this to be in, and is showing a save-as dialog OK? Also, you could potentially just post the data to your server to save.
Respect sir. Respect.
ugh... maze... ng.
for more example javascript formula tunes to listen to: [check here](http://pouet.net/topic.php?which=8357)
If they had done TDD they might have noticed a dev would get hired if he has enough extra skills, even if he lacks one or two required skills.
Oh no, I'm not falling for that twice...
With vanilla JS in the browser, nope, not possible. However, look into Node.js and/or Jaxer; it's possible using both of them.
For real. They didn't even try.
That thread on Pouet is NOT a trap. It contains loads of formula producing experimental musics and more melodic things, including a mind blowing cover of the music from the 64Kb intro Chaos Theory in 300-350 bytes
I don't think so, it just shows how much of an impact returning a function has on your loop. Using an actual loop rather than an each function is faster, and using call over apply is also faster. Underscore, MooTools and jQuery may use it, but it does not mean it is the best. It is just the most convenient.
Yay!
The parseFloat comma example is not all that interesting, since for determining the numerical value of a string, "1,000.00" is the same as "1anything". What's more interesting is the difference between + and parseFloat for hexadecimal numbers: parseFloat('0x10') will be 0, but +'0x10' will be 16 What's also noteworthy, since you mentioned that '011' example, is that the same does not hold true for octal numbers: 011 is 9, but both parseFloat('011') and +'011' are 11
While this post has some good likes, it contains no new or interesting information. It is a brief summary of the state of AMD without describing what AMD is, what makes it important, or any other specifics.
Heh, smirked. Well done.
BANG! BANG! Ah, those were the good old days...
Absolutely true. Thanks for the point about parseFloat('0x10'). I tossed in '011' since it's not unheard of to get zero padded numbers, and if you use parseInt it can sometimes be unexpected since parseInt('011') will give you 9, though parseInt('011',10) will give you 11.
We're no strangers to the internet. You know that rules, and so do I...
Oh FUCK, my ears! Turn down the volume on that player.
Don't do `x == undefined`, do `typeof x === 'undefined'`. It's always correct regardless of what people do to the undefined variable, and it's actually faster: http://jsperf.com/object-is-undefined EDIT: 'x' -&gt; x
Use another acronym, holy crap.
Doesn't `typeof 'x'` always equal `'string'`? Shouldn't it be just `typeof x`?
You are correct.
I meant to say also, please guide me in the right direction and not just flat out say "this is your problem" if at all possible. As much as I would appreciate the answer, I would also like to know why the heck this isnt working, syntax related, some stupid spellign error, etc.. i've looked through this code about 100x and can't see to find anything wrong.
Totally fancy. Well done.
Did you set breakpoints to see which code executes? Is showData actually called?
Thanks, fixed
what is the problem you're facing? what have you done to narrow it down?
http://www.google.com/search?q=muscula Is that what you wanted your title to be?
Well currently I cannot seem to get the data to load from the JS file to the page. Basically I am creating a function and calling it as long as the server responds and creating the XMLHttpRequest to create a table for each iteration within the myTentacle.js file and append the cells / rows to the appropriate variables
You mean "Please correct the following errors:"? Kinda fits :-) We were using unbounce for our landing page. We've got a new landingpage now, with a correct title and a new design. Don't know when google will get around to updating.
Nicely done.
start debugging. either with alerts (old school) or with console.debug (this requires FireBug plugin), or console.log in IE (if think IE8+ has it, F12 to get development tools)
Are you using Firebug? You can examine XMLHTTPRequest traffic (under Net &gt; XHR) and set breakpoints (under the Script tab) to step through the code. You should be able to narrow down the problem this way. edit: it's a stupid spelling error
ill try this, I was using chromes' debugger and found a couple "Status" and "status text" errors. I will have to investigate a bit further when I get home from the gym
It is showing me that the JS file is loading successfully but that's all the console is really giving me, not throwing any other errors or any text. (chrome debugger) will try firebug tonight.
503 Service Unavailable :(
Seriously? If you want to do a case statement you should use a case statement. Those fancy JIT Javascript compilers will optimise it for you, the best way to help them do that is to make it obvious what you're doing.
The fanciest of error codes!
Good tips but whilst he might say it's not, that's really novice stuff. Who uses new Array() these days?
When you want to get help online, it's a really really good idea to set up a jsFiddle...or put your program online somewhere. For one, this way people can just open a URL and see your program; they can run it, they can see the problem themselves, they can debug it. If it's on jsFiddle, they can edit and play with it. As it is now, I'd have to copy all your code into an editor, save it, open it locally...and even then I can't debug your AJAX logic without even more work. For another, the process of putting it on jsFiddle may help you narrow down your problem. In the process of adapting your code, I found a misspelling in a crucial part of the code. What happened is you misspelled **the name of a property**. The reason this is an issue is because in JavaScript if you try to retrieve a non-existent property, it simply returns "undefined"....no run-time error will occur at that point (If you misspell a variable on the other hand, you will get a reference error). Example: if ( foo.nar == "fizz" ) { crucialFunction(); } Here, I **meant** to check foo.bar, but since I mispelled it, this will **always** return undefined (unless foo.nar exists from something else)...no error occurs...and crucialFunction will **never** run. The way you fix this (and many other types of errors) besides **carefully** reading your code is to **check your assumptions**. Code is always full of implicit assumptions... You walk through it checking assumptions and you get to this part and say "ok, this code assumes foo.var is 'fizz', let's check that: console.log( "foo.nar: ", foo.nar); if ( foo.nar == "fizz" ) { crucialFunction(); } When this code runs, you'll check the console and see it says "foo.var: undefined"....and you'll say "hmmm...this shouldn't be undefined". Then you'll check *why* it's undefined and eventually realize "oh, I wanted foo.**bar**!". (This is an area where you can take advantage of the fact that JS has both null and undefined...it gives you the opportunity to distinguish between things you intentionally left blank -null, and things that are accidentally left blank -undefined.) Alternatively, start setting breakpoints in various places where you think the problem is...Maybe you set a breakpoint like so: if ( foo.nar == "fizz" ) { &gt; crucialFunction(); } Where &gt; is the breakpoint. You run your program and...nothing happens. So it never reaches your breakpoint. Hmm...so move it up a line. &gt; if ( foo.nar == "fizz" ) { crucialFunction(); } When you get to the breakpoint, check the local variables to see that they hold all the values you expect them to (or use watch expressions). You'll see the foo object, then check it's properties and at some point realize "nar" should be "bar". Consult a tutorial for the debugger of your choice to learn about breakpoints, watch, and stepping through code. One of the most important things for you to learn right now is effective debugging techniques...it will save you untold frustration down the line. Fixing the spelling error, your code works just fine for me on jsFiddle...so if fixing the spelling error in your version doesn't fix it...you know the problem is not the code per se, but maybe your server or some browser incompatibility etc. [Here is your code on jsFiddle with some added notes](http://jsfiddle.net/uCMjU/4/)
I would code review this guy out of existence if I had to work with him. I'm with him on using literals, rather than new Object() and the like, but shit like var a = new Animal; instead of var a = new Animal(); is dumb as hell. Consistency is more important than saving two characters. Intentionally using == instead of === goes against the best practices pretty much everywhere. Also, his constant abuse of undefined is just madness. There are ways to do it right, and counting on other people leaving variables undefined is not one of them. Remember **undefined is just a variable, you can make no guarantees about it!**
... you'd be surprised.
You can also make no guarantees when you call `RegExp.prototype.exec` but we still do it without questioning. The same goes for every native method. Do you avoid them all? If you're working on a project where programmers are likely to overwrite `undefined`, then you have very big problems.
I completely agree with most of your points. The null and undefined section especially is misguided. It definitely obscures intent and for that reason I prefer the former. It'd be way too easy for someone to come along and replace the == with a === as a 'preventative bug fix'. You can make guarantees about undefined in various ways, which he shows. If I have a formal parameter named undefined and I know it's not passed a value, it will be undefined regardless of what global.undefined is set as. Likewise if I declare a variable and don't initialize it, it's guaranteed to be undefined.
You can only make guarantees about undefined in the same way you can make guarantees about any variable you might be setting yourself inside of your own function's scope. You're relying on each developer making their own scoped var undefined to be safe, all to avoid using the built in typeof foo === 'undefined'. At that point, you're fighting the language.
Yup, the way I see switch statement is that it doesn't evaluate each case from top to bottom like an if-else-if statement.
Good work man, you have been so busy lately!
I guess I don't understand. What's a scenario where another developer setting undefined differently affects my library if I use undefined from an uninitialized variable for unused formal parameter?
There's another method you left out: var result = { 1:function () {return 10;}, 2:function () {return 18448;}, 3:function () {return 188888;}, 4:function () {return 166;}, 5:function () {return 1516;}, 6:function () {return 11105;}, 7:function () {return 1215;}, 8:function () {return 1116;} }[x](); Edit: Wow, excuse me. I thought this was a thought exercise...
In addition, sometimes retyping things will help newbie developers. Conversely it is sometimes important to strictly copy/paste things in order to *avoid* those issues with typing. I am not advocating you start using the "vim" editor, but for example with vim, there is something called "omnicomplete" or just "completion" that really reduces typo's. http://www.thegeekstuff.com/2009/01/vi-and-vim-editor-5-awesome-examples-for-automatic-word-completion-using-ctrl-x-magic/ You can see in the picture how any arbitrary word that matches "F...." is available for selection. That means you won't make a typo on "Frighten" v. "Frihgten" (which is embarrassingly common). --Robert
he doesn't want a case statement. He clearly wants an object. switch statements are for conditional logic, not conditional data.
he doesn't want a case statement. He clearly wants an object. switch statements are for conditional logic, not conditional data.
This test is entirely invalid. Use this one instead: http://jsperf.com/if-else-vs-arrays-vs-switch-vs-ternary/5 https://img.skitch.com/20111020-qcqjm6dq48pab9fsd5bc7ytcpm.jpg The functions shouldn't have to initialize the lookup object/array each time.
Looks very memory inefficient and unintuitive to use.
&gt;This is why you should use a tab width of FOUR (or 4 spaces). Tab closed.
It's not a problem functionally (other than being potentially slower, as phleet noted) it's a problem of consistency. If you're going to have all sorts of examples in your code like if (foo == undefined) { ... } you as an individual could rely on setting up undefined in your function's scope so that you know it would work, but why would you ever standardize on that? It's a misuse of the language, and all it takes is one developer who doesn't quite get that you need to declare undefined for that to work, or that you're doing an implicit type coercion to use the pattern wrong and start throwing hard to track down errors everywhere. It's safer and more idiomatic to standardize on doing the predictable thing, rather than the clever thing. if (typeof foo === 'undefined') { ... } will *always* work, even if you take it out of the context of that function. So no, it's not wrong, but it's something that I'd bounce back on a code review because it's added complexity that doesn't gain you any measurable benefit.
undefined it *not* a native method, it's just a plain old variable that happens to be undefined, that's the difference. I'm not saying you shouldn't do it because someone's likely to overwrite it, I'm saying don't do it because it's unnecessary and we have ways built into the language to handle this in a way that will always work.
Probably.
Even if I don't agree in using this for *the reason* to set the tab with the width of 4... having the variables aligned feels good. Especially when coding node.js and doing the requires. 
I don't believe I said anything in relation to how to check for undefined, just that in certain situations you know for sure what undefined is. As in, I can indeed make guarantees about it in certain contexts. Worth mentioning that if my library is entirely inside a function (fairly common), one undefined is sufficient across the entire library.
and in your version object kills all other methods. Good to know, it's what I like to do
Thanks i'll throw it in. 
Although technically this is also an associative array/object.
Damn, no 2 player mode like in the original?
if you look at the test data that's only true in webkit based browsers.
Thank you so much, I am combing through your notes as we speak. I really do appreciate the time you took to help me out here. You make things much more clear than my teacher ever did. Have all my upvotes good sir.
[Meanwhile, in Flash11...](http://3dflashlo.free.fr/awaySkyRacer.html)
100 ducks, 1000 bullets, go.
Glad I could help. The notes are mostly just some advice on how I like to do things, don't take it as gospel. Also, feel free to msg me if you ever have any questions about JS.
WoW! I found the error, I cannot believe a simple little action like "readystate" vs "readyState" would break the entire script. As stated, I am still an extreme newbie and even though I understand how alot of this is working, alot of it is from examples / out of the book, so your explanations really do help, and again, I do appreciate all of the time you took to explaining this, helping me, etc.. You really did make my day
&gt; simple little action like "readystate" vs "readyState" would break the entire script. Ha, welcome to programming, you will be surprised how much time you will spend on stuff like that. I've been using JS for over a decade and I still get bit by stuff like that.
That's the only reason I use a tab width of 4. I certainly don't tell everyone "HEY EVERYONE USE A TAB WIDTH OF 4!". Some people don't care, and I certainly don't care enough to enforce petty coding standards on anyone but myself. And I only like it because I like my code to look nice. Neuroses of various types, obviously.
Calling `new Array(len);` with the single argument creates a new array of that length. This is useful in performance-oriented math libraries using typed arrays, and in building repeated strings (e.g. `(new Array(repeatNum+1)).join(repeatStr);`). But those are the only defensible reasons I can come up with.
How many users can be on at the same time?
I get no response from the server now. Reddit death?
How do you think it evaluates them then?
Try var result = {1:10,2:18448...} return result[x];
It's the Python way!
If/else semantics require that they be performed in order, whereas switch/case allows for skipping to the next instruction since switch/case is always looking for equality, where if/else is looking for the first true statement. In C and related languages, switch cases are sometimes rewritten with a lookup table to do a jump to the next block of instructions.
Check the thread on Pouet using Lynx or with sounds/JS/plugins disabled if you are so scared. 
1. new Object() I totally agree. I don't think there's much of a debate here. 2. Calling a constructor Yes, it's more terse. Good think to keep in mind when minifying code. (Of course, most people just throw their code in a minifier anyway, which handles this case. There are cases where blindly stripping the `()` is not always possible: `new Date().getTime()` versus `new Date.getTime()` [1].) 3. var;var;var By taking the author's suggestion, you trade *possibly* a few bytes for the inability to easily move `var` statements around or split, merge, or otherwise manipulate groups of variables in any text editor. &gt; This is why you should use a tab width of FOUR (or 4 spaces). This is quite controversial, and I'm not sure why it's mentioned at all. There's no reason to spur a tabs-versus-spaces four-versus-two debate As with 2 above, merging vars is good for minification, but there's no gain (or loss) in switching sides here, really. Judging from the tabs comment, however, the author seems to be implying that authors should *try* to pre-minify their code. 4. Undefined &amp; Null The author doesn't go into much detail on *why* `== null` is important. More on this in a bit. 5. Returning undefined Very, very, very rarely have I had a JS function where I explicitly *wanted* to return `undefined` [2]. I'm not sure why the author commented at all on this, especially because `return;` at the end of a function is pretty silly itself, too (unless it's commented saying you intend to return `undefined`). 6. Empty array values I would not advise anyone do this. I had a really good use case for it once, and I thought I was clever. I was right; I was clever, and a bug was traced down to using implicit array values. Linting tools complain a lot about this "feature" (especially trailing ones); heed their warnings. 7. Less blocks, more expressions (part 1) Not very JavaScript-specific like the suggestions so far, but still something to look after. I am surprised `!!` (or even `Boolean()`) wasn't brought up here (in case the author wanted an explicit boolean from a fuzzy boolean). 8. Less blocks, more expressions (part 2) I feel like the optional arguments idiom wasn't well-explained, and I don't think the pitfalls were brought to light very well either. A code sample showing the two "real" ways of doing optional arguments would have helped (condensed for this post; there are several ways to write each method): function printName(forename, surname) { forename = typeof forename === 'undefined' ? 'Bob' : forename; surname = typeof surname === 'undefined' ? 'Smith' : surname; console.log(forename + ' ' + surname); } function printName(forename, surname) { forename = arguments.length &gt; 0 ? forename : 'Bob'; surname = arguments.length &gt; 1 ? surname : 'Smith'; console.log(forename + ' ' + surname); } [1] I am well aware they `Date.now()` is preferred (or `+(new Date())` in ES3). I was trying to pull an example from the language core. [2] Of course, functions which (conceptually) have no return type are exempt. If one code path returns "something", all code paths do; no implicit `undefined` returns.
Curious: have you ever seen `typeof undefined !== 'undefined'`? &gt; and it's actually faster: http://jsperf.com/object-is-undefined Believe it or not, not everyone uses Chrome. Also, some minifiers rewrite `typeof x === 'lit'` as `typeof x=='lit'`. Maybe some smart minifier out there rewrites `typeof x === 'undefined'` as `x===void 0`, or injects a variable in the scope or something fancy like that. 
&gt; Curious: have you ever seen typeof undefined !== 'undefined'? Not sure what you're asking here. &gt; Believe it or not, not everyone uses Chrome. Fair enough, but ignoring firefox beta 4 pre (no idea what happened there), it's of comparable efficiency or better and it doesn't suffer from the possibility of variable reassignment.
That test isn't much better! By only calling your test methods with the value 3, any engine with the ability to generate optimized traces will optimize away most of the function's bodies. I think that is the reason for the if/else, switch, and ternary methods being so fast in the various versions of FF. I bet that tracemonkey, for instance, is simply replacing the functions with a couple of guards and a *return 188888;* so there is little actual benchmarking being done in those cases. The results of [this](http://jsperf.com/if-else-vs-arrays-vs-switch-vs-ternary/6) version of that benchmark make a lot more sense to me.
Looks cool. The back button doesn't work though. I would make that work just because you are setting a hash for each click. 'window.onhashchange' could fix that.
I've been following some of these posts that you've been making and they are pretty awesome, but how did you learn to do things like this? I don't have a very extensive math background and have tried to review code for things like this in the past but usually come up short. Does anyone have good resources for learning some of the math behind things like this and the other posts like the draw worms, generative lines, etc. 
I've only been at this for about 6 months or so, so I'm not too full of advice... I guess starting small is the key. This was my first experiment: http://tholman.com/exp/dots/proof/ - and I just went from there. When you want to show something, you can really break it down to its most simple form (particles, or lines) and its sure to be a winner.
Working for me now, cool stuff.
first rate work...really fantastic!
According to my tests void(0) is the best choice. In IE7 &amp; 9 I got roughly 4-5x more ops/sec than anything else. Additionally, typeof x is one of the slower choices in IE. In Chrome 16, the results aren't as drastic, but it still favors void(0). In Firefox 7, void(0) is equal to the other top performers. In conclusion, use void(0) if you need to check for undefined. However, if you need to check for null or undefined you can't use any of these approaches only or you could use if (x).
Not sure if trolling... ...but if so, I love it!
Different techniques for different applications... Unless you're [uber-tuning like Resig](http://ejohn.org/blog/revised-javascript-dictionary-search/), don't worry about which one is microseconds faster; use the one that makes sense. Each of those techniques has valid uses and there is no silver bullet.
Original by CoderNut please don't re-post and please show some respect.
Yes, obviously if you are only interested in returning literals a collection is the much better solution. The point is we're testing alternatives to select statements, which could perform any task inside the different logic forks. In short, you're taking the example too literally.
That's true in some languages, like C. Given that javascript lets you put pretty much anything you want in the case statement, it can't be converted to a lookup table in the general case. In practice, it means that switch statements are usually evaluated from top to bottom (unless the interpreter detects a special case and feels like being clever about it.) Example to demonstrate: switch(true){ case alert(0): break; case alert(1): break; case alert(2): break; }
Efficient JIT engines will produce an execution table using a hash of the case value. The switch statement only evaluates the correct hash, other code paths are never even touched.
http://www.w3.org/Talks/Tools/Slidy2/#(1)
i am wondering what the the !function does. could anybody enlighten me? [code](https://raw.github.com/jgallen23/cookie-monster/master/dist/monster.js)
Javascript, like most other languages, is case-sensitive. An easy way to remember how to capitalize properly is that, in javascript, the first letter of a method or property is lower case, then the first letter of each word is capitalized. This is called camelCase so methods in javascript look like: document.getElementById document.getElementsByClassName 
It self executes the function. Same as (function() {})(); but it saves the extra ). Also, if you were wondering, that top block of code adds support for amd loading and ender
&gt;&gt; Curious: have you ever seen typeof undefined !== 'undefined'? &gt; Not sure what you're asking here. I'm asking if you have seen `undefined` reassigned to some value which is not undefined.
I think I killed it &gt;.&gt;;
Haven't heard of these `atob()` and `btoa()` functions before, which don't appear to be present in IE. I have a feeling that there are probably equally-impressive tiny code examples out there that implement their own base64 conversions...
Don't know why nobody's replied yet, but I'll chip in! I think what you have is actually a _scroller_, while a _slider_ is [similar but different](http://jqueryui.it/demos/slider). Perhaps the terms are somewhat interchangeable, though when I read slider, I was expecting what jQueryUI defines as a slider. About the code: just from a static analysis of the code, nothing is jumping out at me as _bad_. I'm just not sure why you chose such an obtuse name as `skrewler` for your namespace, but that's inconsequential for the most part. As for the demo on your site, it's jerky when moving to the right, although moving to the left seems fine? I think the question begging to be asked is: why? There's more sliders and scollers out there than I can bother to list. Why did you reinvent the wheel? Academic purposes (just to learn), or was there a specific problem that the others wouldn't handle? If that is the case, then it'd be helpful to know that information. [Product differentiation](http://en.wikipedia.org/wiki/Product_differentiation) is what sets you apart from your competition, and at this point, there is none as far as I can tell. Also obviously missing is the documentation; formal API documentation, usage examples, etc. If this is just an academic endeavor, then you may not need such things, but if you're pushing to have this consumed by the masses, then those elements are virtually required. Regardless, thanks for sharing!
 .-'---`-. ,' `. | \ | \ \ _ \ ,\ _ ,'-,/-)\ ( * \ \,' ,' ,'-) `._,) -',-') \/ ''/ ) / / / ,'-'
Is there a name for the condition by which anytime a dev learns something new, they feel that they need to make a blog post about it? Whatever it's called, I believe we're in the middle of an epidemic...
No, but I can see it happening by accident by some poorly written third party code in a library someone might be using. For instance, if something was trying to do yoda-style comparisons: if (undefined == foo) and the accidentally omitted an = sign if (undefined = foo) It's the kind of problem that would be hard to debug if you didn't know undefined was reassignable, and not one you should ever really have to deal with.
On that same token, since `typeof` always returns a string, the `===` is superfluous.....you could be saving an entire 1 byte there for your _terse javascript_!!! /s
I still see the object version being the fastest with your test, which is all I was trying to demonstrate: https://img.skitch.com/20111020-1eq8uh6974pp4545r8ja5b7w5e.jpg
If you want a 'real implementation', use http://imakewebthings.github.com/deck.js/ This is not this; not a replacement for desktop presentation systems nor a project for normal presentations.
Can it be both?
Here are some general JS remarks (I never used jQuery): * use [jshint](http://www.jshint.com/), it can help to find some issues (they are some variables declared twice) * you should maybe remove code duplication (scrollLeft vs scrollRight, scrollTop vs scrollBottom) * please don't use alert to display errors * for a better obfuscation (and a bit performance improvement ?), write "var that = this" at the top of your code and replace related "this" occurrences with "that". 
http://brunch.io/example-todos/brunch/build/#home +300KB of JS (I used Closure Compiler, w/o gzipping) for a TODO application ? 
Pretty bad user experience.
Guys, guys, guys! I have great news! I cancelled the pizza and movies your parents set up for you and instead I got the whole "learning differential calculus in 189 semi-torturous 3-hour lessons" audio book series narrated by Diane Rehm, and we're going to be eating a flavorless mush I call rootmarm.
Fixed in the latest revision.
I can't wait to be a Dad
Thanks, I needed that.
atob and btoa are supported in all browsers but IE. As for the equally-impressive tiny code implementing them: atob - https://gist.github.com/999166 btoa - https://gist.github.com/1020396
It may be the best choice for performance, but it's definitely not good for readability. Semantically, you're checking if something is undefined. Both the comparison to undefined and the comparison of the typeof show that clearly. void(0) does not. For minified code - sounds like a great idea - but for development code, not so good.
Wow.. much more responsive and fast then maps.google.com
What about using [jshint](http://www.jshint.com/) ? **Edit:** FYI, there are variables declared twice, undeclared variables and one typo on a variable name. Here is the [report](http://www.jshint.com/reports/47004).
Covers are so small as to be difficult to read. No way to zoom or adjust size.
how the fuck did they to this? that is so cool (the level of detail for the 3d buildings)
Why does a language need a logo and why does it look like something on the back of bruce lee's jumpsuit?
You need a tighter definition of "interactions" to finish this design. What to the ball and canvas have to do to/with each other? [There are lots of possibilities.] Make a list, that should get you moving towards a solution.
Re: IE....I figured as much. As for the _equally-impressive tiny code_ that I referenced, I was speaking more to the chance that there's "music synth" code out there which is also very tiny, but is made much larger due to having to implement `atob()` and `btoa()` in userland, and thus would never have the sensational "look what I did in 140b" quips since implementing those missing functions adds a non-trivial amount of bytes. I could very well be wrong, and there may not be any other tiny music synths out there as it's not something that I keep abreast of.
I think you're arguing the wrong case. I'd say the issue is one of time for mental processing. They both are nearly as terse and just as readable. However, void(0) is not very common, so requires more mental processing time to realize what is going on. If minifiers do this behind the scenes for you that would be the best of both worlds. To be fair, if the undefined check is actually someone's bottleneck then they have bigger problems. However, I feel plugin authors should generally air on the side of performance and use something like this in their code. For a general code base that you actively maintain for applications, you shouldn't really bother with void(0) unless you can be sure everyone understands it.
I'm quite confused. It seems like you're agreeing with everything I said - or at least I'm agreeing with everything you said. void(0) requires more mental processing because I would describe the task as "check if it's undefined", and void(0) tells me nothing about undefined at all. For your second paragraph, that just sounds like a more eloquent version of what I said - so yeah, I agree completely.
Not if you click the "Want to try something new?" link on the bottom left of Google Maps to enable *their* WebGL version.
i do not see this.
You should try to call the function. alert(foo()); And maybe read this: https://developer.mozilla.org/en/JavaScript/Guide
It's interesting to showcase this technology/expirement... but pretty useless to actually use. 
thanks! calling it did the trick :)
sweet, mother of god! 
`()` is like syntactic sugar for `call()` :) Functions are objects too in JavaScript.
I'd say it's still even more responsive there -- but then it's also not retrieving as complex or much data, by far. 
what's wrong with your browser? That sucks
Your misunderstanding is with types. The function returns a string, so you expect the following: typeof foo === "string" //this is false, foo is typeof object Foo is an object because it has a function as its assignment and not that function's value. There are two ways to solve your problem. 1) Assign the result of foo to another variable: var result = foo(); 2) You can trick the variable into thinking it is a string by making the function execute immediately without a call: var foo = (function () { var bar = 1 + 2; return bar; }()); That last one works because the function executes the moment it is fed into the interpreter, which is before the assignment completes. As a result foo does not know it was ever assigned a function. It only knows that it is assigned the value and type returned by the function.
Good answer.
Yes, I was expecting it to get a value type of string/integer rather than an object. Thanks for the informative answer!
&gt; I've read that when coding one should strive for as low cohesion as possible. You probably want high cohesion and low coupling: http://en.wikipedia.org/wiki/Cohesion_%28computer_science%29
In case you are being a smartass: If `()` is syntactic sugar for `call()`, how do you invoke `call` without writing `call()` (`apply()`, `eval()` is also also cheating)? In case you are not: I think you'll find it is the other way around - functions are objects, which lets you say things like Function.prototype.runMe = function() { this(); }; New functions can be defined that act on functions, or any other thing in the language.
Smart ass answer =&gt; `setTimeout(fn.call, 4)` :P
Yeeaah, okay, upvote for you. Technically correct is the best kind of correct. I should have been (much) more specific.
Good point; didn't think of mistakes like that. In ES5 [strict mode], `undefined` is [no longer reassignable][1]. [1]: http://es5.github.com/#x15.1.1
Nope; `Function.prototype.call` needs a `this` (the function, `fn`) for that to work. You can write: function fn() { console.log('hi'); } setTimeout(fn.call.bind(fn), 4); To correct you, `()` is shorthand for calling the [`[[Call]]` internal method][1]. [1]: http://es5.github.com/#x13.2.1
&gt; typeof foo === "string" //this is false, foo is typeof object Incorrect; `typeof foo === "function"`, not `"object"`. 
*truthy If you used `===` you would see that `new Boolean(false) !== true`. Note that without `Boolean.prototype.valueOf` you would unable to unbox the boolean: Boolean(new Boolean(true)) &gt; true Boolean(new Boolean(false)) &gt; true !!(new Boolean(true)) &gt; true !!(new Boolean(false)) &gt; true (new Boolean(true)) === (new Boolean(true)) &gt; false (new Boolean(false)) === (new Boolean(false)) &gt; false
I think I find that confusing. I do know that you can put any expression in the cases (though I never use it that way). When trying something like this gives the impression that they do not get evaluated the same way as if-elseif statements. Changing the "switch (999)" to "switch (0)" as not effect on the execution time at all. for (var i = 0, str = ''; i &lt; 1000; i++) str += 'case ' + i + ': break;'; eval('var start = new Date; for (var i = 0; i &lt; 10000; i++) switch (999) {' + str + '}; console.log(new Date - start);'); In contrast, changing "val = 999" to "val = 0" for an if-elseif structure significantly reduces the time. for (var i = 0, str = 'if (val === -1);'; i &lt; 1000; i++) str += 'else if (val === ' + i + ');'; eval('var start = new Date; var val = 999; for (var i = 0; i &lt; 200; i++) { ' + str + ' }; console.log(new Date - start);'); IIRC, this doesn't apply to IE8 since it seems to treat switch and if-elseif the same way. 
You're seeing one of those "interpreter being clever about it" cases. Change your types from numbers to strings, you'll see a big speed difference in the switch 999 vs 0 cases. Apparently spidermonkey has a different code path for integers in switch statements that mimics the C way, that most other javascript engines don't appear to have. 
One thing I would note is that depending on what you are doing, you don't necessarily need to model everything in the way you have. For me, when you have a constructor like: ball = function ( x, y, size, color ) { this.x = x; this.y = y; this.size = size; this.color = color; } And you have methods like this: setColor: function ( color ) { this.color = color; }, That's a sign that you might want to just use object literals. You could have something like this: var balls = []; balls.push(new Ball( 10, 30, "red" ) ); balls.push(new Ball( 20, 30, "red" ) ); balls.push(new Ball( 10, 50, "red" ) ); // ...some stuff balls[0].setColor("blue"); balls[1].setColor("green"); // ...blah blah blah balls[2].setPosition( 66, 66); ...but is that really much cleaner than: var balls = []; balls.push( { x :10, y: 30, color: "red" } ); balls.push( { x :10, y: 30, color: "red" } ); balls.push( { x :10, y: 30, color: "red" } ); // ...some stuff balls[0].color = "blue"; balls[1].color = "green"; // ...blah blah blah balls[2].x = 66; balls[2].y = 66; It's arguable which one is cleaner. They each are a little cleaner in one area over the other...the first is cleaner where you instantiate and modify the objects, but it contains a lot of indirection and possibly unnecessary clutter. It may also be slower depending on browser, what you are doing, etc. In some cases the latter is the way to go. You could also get a nice compromise by using a helper like: function Ball( x, y, color) { return { x : x, y : y, color : color } } // then use helper functions: function setPos( ball, x, y ) { ball.x = x; ball.y = y; } This is fairly succinct and clear. It's also a good compromise on performance. (note: all discussions of perf here are purely for reference in case you have some high performance application with thousands of "balls" where speed is critical...for practical purposes the difference is probably negligible) Again, it really depends on precisely what you are doing. It may be that it makes sense for you to have a Ball object you can instantiate etc... From your description it sounds like some kind of graphics demo, in which case I would probably just structure it as a bunch of functions for rendering balls and then packets of data about the balls which are passed around. External code isn't interacting with these Ball objects. You have setters, but the properties are still exposed and anyone can touch them anyway so they are largely pointless except possibly aesthetically. If you do want to go the route you are going, you should clean up your structures a bit. You never define a "location" for the Ball objects in this example. You don't need to put the constructor like that. It looks like you're trying to create a "balltest" namespace to hold everything, but do you really need to expose the functionality to the outside? Why not just use the module pattern: (function(){ function Ball ( x, y, size, color ) { this.x = x; this.y = y; this.size = size; this.color = color; } Ball.prototype.setColor = function ( color ) { this.color = color; } Ball.prototype.setPos = function ( x, y ) { this.x = x; this.y = y; } Ball.prototype.setSize = function ( size ) { this.size = size; } // do stuff with Ball... var thing1 = new Ball( 10, 10, 6, "green" ); })() The truth is there's no hard and fast rules for these sort of things, you just have to think about what you're doing with the code, etc and come up with a model that is complex enough to handle what you need but not overly convoluted and fits what you want semantically. 
Yes.
&gt; how the fuck did they to this? that is so cool (the level of detail for the 3d buildings) Nokia has had these high-resolution 3D maps available already since earlier this year, see introductory blog post at [http://conversations.nokia.com/2011/04/19/ovi-maps-3d-the-world-is-not-flat/](http://conversations.nokia.com/2011/04/19/ovi-maps-3d-the-world-is-not-flat/). My understanding is that the 3D models are captured through radar or photography from an airplane flying over the area. But that original 3D maps version, still available as part of the Nokia Maps website at [http://maps.nokia.com/3D/](http://maps.nokia.com/3D/) uses a browser plugin. The beta demo link of this Reddit post features the same 3D data, but rendered in native browser technologies: WebGL and Javascript, without a browser plugin.
I've seen some cool stuf done with WebGL, and although impressive (especially because of how responsive it is), that's not what got to me.... The data that they've got is amazing. Having 3d buildings is one thing, but the fact the all the buildings in city are textured is amazing. It's not copy-pasted, each building has its very own texture
Yes, but I think this is the wrong way to do it: &gt; 3.) If a function is binded [sic] and that function returns false the reflow is delayed a cycle. &gt; 4.) If the binded [sic] function continues to return false the redraw will continue to be delayed. Ouch. The whole "just spam this function while it returns false" idea doesn't sound very clean or good for performance. IMO a nicer way to do this would be a sort of transaction layer over the DOM: - Open a transaction. Creates a consistent state of the DOM for the code to play in. - Move some crud around. - Close the transaction, it reflows once. This feels simpler than having an onpaint callback that has to look up shared data to tell whether it's done manipulating the DOM. This is pushing rather than polling the event. It would probably have to be more of a global lock than a transaction. (Multiple threads touching the DOM isn't done anyways, so this isn't a problem.) My biggest concern with the "locking" idea is that some stooge would inevitably block the whole DOM while waiting for an XHR to return, but that can already happen with synchronous requests, so who cares? **TL;DR: Yes, but polling is evil.** Edit: [sic]
No. You can use DocumentFragment to reduce reflowing.
Very cool! But it only appears useful for changing content in one node, not general manipulation across the DOM at once.
This only helps when you want to add stuff, not when you want to remove stuff. For example, removing several items in a list causes the browser to slow down.
backbone.js - 4.6KB / 41KB jQuery - 31KB / 229KB underscore.js - 4KB / 32KB That makes 39.6KB / 302 KB for the vendor files. You can't really optimize that. That's the usual payload you have to deal with when using Backbone.js. But for me, this appears not to be that much. Compared with other client side frameworks, this is quite tiny.
Well, you can replace atob and btoa with escape and unescape nd remove the ",base64" part and voila! You've got the exact same synth in a few bytes less ( if you include the usage code ). I used atob because IE does not support wave Audios yet and atob was significantly faster than escape on my notebook
Am I missing something here? I thought the browser never redraws whilst JS is running, so why not just make all your CSS/DOM changes during one event?
Agree, the solution you propose here is much more elegant.
According to [this article](http://dev.opera.com/articles/view/efficient-javascript/?page=3#stylechanges), multiple reflows and repaints can occur whilst JS is running.
The article doesn't really go into specifics, it just says: &gt; it is possible to make several style related changes at the same time, in order to minimise the number of repaints or reflows. It could be that what they really mean, is that the browser will make several redraws/reflows internally, if you make several independent style changes. That combining these into a CSS class allows the browser to skip a lot of work. I have seen redraws happen mid-way during JS execution, but only on two occasions. The first is when the browser has asked me if I want to stop execution, and the other is when the JS has been running continuously for over a second (without being asked), and the latter has only ever happened when using the canvas. In those two examples, being able to disable painting is not the solution. It's not a proper benchmark, but using while loops to pause execution, I am unable to get style changes to update partially. So I'm very sceptical this ever really happens with DOM/CSS (unless the website is amazingly slow). Either way, improving how browsers redraw internally, and making the redraws more atomic, has to be better then pushing the display management out onto JS devs. 
1.You make a fragment that is a copy of the list. 2. Remove nodes. 3.Replace list in DOM with fragment. 4. ??? 5. Profit!
This is the reason Douglas Crockford discourages using *new* + *primitive type*, since no primitive type is created but an object.
This is the current "recommended" approach - but as soon as you start having to copy DOM segments of any reasonable size (for instance if you want to change stuff that is far apart in the DOM tree) the inherent problem with this approach shows up. With the transactional approach suggested by sporkexec, you don't have to copy the DOM, just lock it.
Reflow occurs many times and it has nothing to do with _only_ Javascript. Eg. resizing window, reading more content from the network and adding it to the dom while page loads, chaning in a default font size etc... Controlling reflow from the javascript side, is not the solution for the problem (and I assume that the problem is slow DOM). And no I don't have any good solution other then using documentFragment -.- 
Interesting - I didn't know this was going into jQuery 1.7. My only gripe is that it may often be more readable just to write a plain old JavaScript function instead of doing this kind of hocus-pocus.
What do you mean? A documentFragment _is_ a manipulation across the DOM. 
This is all certainly true, I probably should have included === examples. The big takeaway for me was that it is impossible (as far as I know) to create your own object that is falsey, but supports other methods.
Make sure you meet the [system requirements](http://maps.google.com/support/bin/answer.py?hl=en&amp;answer=1630790)
Maybe it's because my coffee hasn't hit my brain yet, but nothing of what you said makes sense to me. &gt; Well, you can replace atob and btoa with escape and unescape nd remove the ",base64" part and voila! You've got the exact same synth in a few bytes less ( if you include the usage code ). Base64 encoding/decoding is worlds apart from `escape()`/`unescape()`, I don't see how you just _remove the ",base64" part_, there is actual base conversion going on. They do 2 totally different things... &gt; I used atob because IE does not support wave Audios yet and atob was significantly faster than escape on my notebook Err, but IE doesn't support `atob()` and `btoa()`....so did you implement it yourself for IE then? Really confused...
Not to mention Google's is still fully functional Google Maps with all the bells and whistles (including a smooth transition to street view if you zoom in enough)
It looks like it's just a list of functions. :|
Is there a case where you'd want or need to use a Boolean object?
aaaah, other non-JS causes for reflow had not occurred to me. But there are already existing solutions, to fix various reflow problems.
That's what I mean -- there's not really any metadata going on here, it's just a static -- detailed, but static -- model. 
Agreed. Whether you are adding or removing nodes you will run into this problems using fragments.
Yeah, just giving some more detail for others reading the thread.
Unless I'm mistaken it only affects one location in the DOM. For example, if you want to change that list there and another list elsewhere, you would have to use 2 DocumentFragments. Or is there a way to "merge" the documents that I'm missing? It seems to have only a typical DOM Node interface.
True, but Nokia's map give you fully rotatable 3D imagery for every building and feature, not just the buildings that people have modeled manually. Google Maps and Google Earth don't have anything remotely like that.
I'm aware of this, but this is backwards logic. An application platform should accommodate an application, not the other way around.
This is to complicated and looks hackish. Not a good solution when vouching for JS.
Do not like, usability nightmare. Is the author trying to invent another buzzword? How is this different from "DHTML", lol... I think that if I need to demonstrate the application of some arbitrary formula, I'll just use a simple table like I've always done. 
\*bound I know you're quoting, but it's driving me crazy. 
I think you are probably correct.
Yeah that's wrong, for example if you iterate and append a node within each iteration, then each of those appends will trigger a reflow. Also, I don't believe there is any notion of JS "running". It's simply an interpreter that waits for commands, not a full-on executable program that has a finite start and end.
The site is the epitome of the noob just learning the ins-and-outs of JS, and for each trivial "discovery" he's compelled to make another blog post. HEY GUZ LUK WHAT I LEARNED IN JS 101 TODAY
Oh look, another noob discovering JS nuances and feeling compelled to post about every single little factoid they learn...
Yes, but not just for _deferring_ reflow until later. It should also be able to _trigger_ reflow on command. If you make a bunch of changes to CSS through JavaScript.... node.style.borderColor = "#000"; node.style.paddingLeft = "10px"; node.style.display = "block"; ...one reflow is triggered instead of three, because modern browsers "batch" style changes to minimize the number of reflows. This is usually the way it should be, but now we've got things like CSS transitions that cause interesting order-of-application side effects. If I want to resize an element instantly, skipping any CSS transition it may have, it seems like this should work: var original = window.getComputedStyle(node, null).getPropertyCSSValue('-moz-transition-duration'); node.style.mozTransitionDuration = "0s"; node.style.width = "200px"; node.style.mozTransitionDuration = original; but it doesn't, because all three style changes end up getting applied simultaneously. Right now you can get around this by reading from a property like `offsetWidth` (which tells the browser you want up-to-date style information and therefore forces it to apply styles): var original = window.getComputedStyle(node, null).getPropertyCSSValue('-moz-transition-duration'); node.style.mozTransitionDuration = "0s"; node.offsetWidth; node.style.width = "200px"; node.offsetWidth; node.style.mozTransitionDuration = original; This is still ridiculous, though. I'd love to see some solution that solves _both_ deferring and triggering of reflows.
Considering that this is _only_ for lists and it's still **7kb minified**, I think I'll pass...
Yeah, it bugged me too. How's that?
If it's stateless and you're feeling evil, you could pollute `Boolean.prototype`: true.invert(); &gt; TypeError Boolean.prototype.invert = function () { return !this.valueOf(); }; true.invert(); &gt; false false.invert(); &gt; true 
It's a pitfall to be aware of. There's no sane reason to use the Boolean constructor.
And the problem with that is...?
Haha, better!
There is no value to these posts, and in reality, many times they actually have a negative value due to spreading misinformation or bad practices. On top of that, these "oh look what JS considers true/false" or "How closures work" and many other topics get posted here to r/javascript on a weekly, if not daily, basis.
Seems to me more about a simple approach to updating documents especially when there are complicated calculations to make when something changes. check out: http://en.wikipedia.org/wiki/Functional_reactive_programming and another js implementation with even more ambitious goals toward this end: http://flapjax-lang.org/
Browsers try to cache everything until the JS is done running, but it can't always wait. If you do something like element.style.height="50px"; x = element.offsetHeight; it will reflow when you _access_ element.offsetHeight.
I agree with you, this might not be the best fit for an event. I created a [second topic](http://www.reddit.com/r/javascript/comments/lk6ck/how_javascript_reflow_control_might_look/) on this were I've preposed a second idea.
see my [second idea](http://www.reddit.com/r/javascript/comments/lk6ck/how_javascript_reflow_control_might_look/).
I believe the term your looking for is 'lazy loading'. I believe it only optimizes DOM tree modification, not style updates.
[I've had a project that does this in about 1k for a while](https://github.com/kristopolous/EvDa)
The WAVE is actually loaded in an Audio element as a data: URI. Therefore the WAVE file must be encoded as a URI. Then, we have two options: escaping or base64. See the "Usage and Warnings" part of the page. The example usage could be rewritten this way: new Audio( 'data:audio/wav,'+escape( softSynth( 'HERE_BE_CRAZY_FORMULA' ) ) ).play();
&gt; Yeah that's wrong, for example if you iterate and append a node within each iteration, then each of those appends will trigger a reflow. I cannot recreate this behaviour in Firefox. Using the Scratchpad, on this very page, I am trying: var a = $('#header-img-a'); for ( var i = 0; i &lt; 3; i++ ) { a.append( $('&lt;h1&gt;test&lt;/h1&gt;') ); var j = 0; while ( j &lt; 100000000 ) { j++; } } I get a very long pause, and then all headers are appended simultaneously. So disabling painting just isn't needed. &gt; Also, I don't believe there is any notion of JS "running". It's simply an interpreter that waits for commands, not a full-on executable program that has a finite start and end. In all browsers, parts of the page will lockup whilst JavaScript is being executed, as the browser cannot fire events during that time. That period of time, when your code is running, and the browser is waiting for it to finish, is what I was referring to.
Not sure what the IBM bashing is about, I for one love terminals. =) Very interesting. A few thoughts: I'm not sure what static does. How is this different from auto? You can't leave it on manual the whole time. Window resizing, resizable inputs like Chrome does, HTML5 &lt;detail&gt; tags, and much more will all cause reflowing beyond javascript's control. "The user just maximized the window, but document.reflowMethod = manual so we have to hang until your script is finished" is bad. This doesn't let independent scripts play nicely together. If one script sets reflow to manual, changes caused by the other won't be applied until something finally triggers a redraw. An application ignorant to this reflow mechanism can have its changes blocked for any length of time. You could always set it to manual, then back to auto when you're done, but this is also a mess. It should be a mode you must explicitly open and close. Buffering up all changes and flushing them programmatically means different chunks of code will step on each others' toes. Keep going, though, this is something that really needs to happen.
Wow, thanks for the response. Just to clarify for you, I don't have any real specific intention for this. I've been trying to better understand use of OOP and I thought I'd create something library-esque to facilitate drawing on canvas, perhaps demonstrating basic physics simulations, as practice. Being that I am intending to use the final product as something of a library, I thought it was probably best to treat everything as it's own separate entity. I guess what I was kind of getting at with the question was what is the best way to handle some often times complex interactions between all of these components. Say I have three balls, two of which have have a constraint relating to one another, say they need to keep a distance of 20 pixels between them. In addition to this there is a collision behavior occurring here as well, so that when two balls collide they will move into opposite directions. In this situation there seems to me to be a quite a few things going on here. My first idea on how to deal with it might look like this: Some outside call goes through each ball and updates its location based on a vector representing its velocity that is associated with each ball object. Before a ball is drawn, a function associated with the ball object is called somehow detecting whether it is within the constraint, or colliding with another ball. This however doesn't strike me as a particularly good solution. How would each ball know whether it is colliding with another? Would it have to rely on an array which may or may not exist in the particular implementation, check each member for its position, and calculate the distance? How well would that work when I have 1000 balls on the canvas at once? etc. So these kinds of problems being so self evident leads me to think I am approaching the design all wrong. Thanks for the help.
&gt; I cannot recreate this behaviour in Firefox. Using the Scratchpad, on this very page, I am trying: Reflows aren't necessarily visible, they can happen hundreds of times a second. The long pause was likely caused from the massive queue of reflows required, and by the time the UI catches up to the queue then all of the elements are present. I believe Windows (and other window systems) do not update the UI every cycle, that would be entirely too resource intensive and for no use to the user -- we can't discern .01s from .001s. &gt; In all browsers, parts of the page will lockup whilst JavaScript is being executed, as the browser cannot fire events during that time. This is categorically wrong. "Parts of the page" is irrelevant; any bottleneck is distinct to the thread (or process) which the page lives in. It's also incorrect to say that "the browser cannot fire events during that time". I challenge you to provide code during which events are ignored (not delayed, ignored). Events will always fire as the next immediate instruction, although it's up to the implementation as to precisely how and when they will be handled. If the event triggers a handler on some element, that handler _will_ be called, though it may be delayed.
I see what you mean now. I thought you were saying that the string that was being decoded could be a base64 string but you could decode it with `unescape()`, but now I realize that you're basically saying that since the string must conform to URI spec, then both base64 and escape will suffice (or any other URI-compatible transaltion). Thanks for the info!
Here's a [related article from Resig](http://ejohn.org/blog/browser-paint-events/) regarding the `MozAfterPaint` event that is mentioned in the article.
Looks a lot like MVVM to me.
+1 for supporting AMD, we all should do it, and we all should request it. BTW jquery is adding support for AMD in next version :)
I think it's a fairly interesting approach and at least something different besides the standard web controls for interactivity.
Is it my imagination, or is this just an observer pattern in disguise?
Other than the sensationalist title, what is misleading about this article?
Yea program design re: OOP etc in [many languages but in particular] JS can definitely be a tough nut to crack because there are so many options: closures, prototypal inheritance, pseudo-classical, plain old objects, etc and it can be hard to pick what to use.
Umm... &gt; [...] and in reality, **many times** they actually have a negative value [...] Compute! &gt; "many times" == "every time" false
I do. By a long stretch...
&gt; developerWorks article emphasizes using capitals in HTML, onclick, non-standard attributes, not using Error Console, large chunks of commented code, bloated IDEs, bashing Firefox, innerHTML
/[CN]|DC|XO/ Of course, the DC is redundant with the C in [CN], but you get the drift.
The IBM thing is more of a poke than a bash. IBM terminals used forms instead of a proper client side application. IBM took the easy way out. I've added a third example you maybe interested in.
That *does* sound bad, doesn't it ...
Once you get the expression you want, if you ever need to add more or tweak it slightly there are a few online regex testers that you can avail of, like [here](http://myregextester.com/). Handy if you need a quick validation.
Your mistake is how your treating the character class. The []. A character class defines a single character. It's basically a custom version of something like \s and it must exist on its own. It will only match a single character in the target text, but it can use the + and * modifiers as well as the {3,5} counting options. For what you seem to be trying, I would use this: /B(C|DC|N|XO)/
What is misleading about one of the author's articles?
IMO, it's clearer to write `/C|N|DC|XO/`. It's easier to rearrange and edit matching rules (at least for me), and is simpler (less nesting).
I didn't mean his specifically, I meant these types of posts that have how many, &lt;100 words and cover a basic/common topic. Not much to learn, if any, and it leaves little for discussion. 
TYVM for the link. :) I've been using [this](http://regexhero.net/tester/), but as it seems they want users to sign up for a pro account, it's useful to have an alternative. :)
Thank you. Got what I needed :D
Thank you. I got what I needed :)
few browsers ? I think you mean only 1 (Internet Explorer).
Ah, okay. I don't agree with you really (though it is noise for /r/javascript).
Pretty cool, drag is not an intuitive way to interact, instead there should be text input too. Edit: Looked through this more and it's more awesome than I thought. Definitely could have a lot of uses. 
the observer stuff seems like it'd be a lot simpler to just use .bind and .trigger which have been there for a couple years now. those don't require any set-up either and can be queued, removed. 
Their example code is pretty horrible. Why would you put a function that doesn't need any instance variables in a prototype, and create a new instance every time the button is clicked (in an onclick attribute, of course)? Adds unnecessary overheads. If you're going to make it a class, at least make it reusable. The "appnamespace.ApplicationUtil" class is not reusable at all as it has hardcoded IDs in it. Also, form fields in a layout &lt;table&gt;, with no &lt;label&gt; tags for the labels? Really? I think half the reason why there's so much horrible code on the internets is that people learn from examples like this. &amp;#3232;\_&amp;#3232; JsTestDriver looks pretty cool, though! I've been using QUnit myself. I might try out JsTestDriver instead and see how well it works. It'd be great to test in multiple browsers at once :)
Post the quiz here and let us teach you.
Seems superfluous
I'm sorry, k3n, now it's fixed! You can access to API and Examples from links in README.
What's the job for? Be sure to mention "I learned this last weekend" before you look like a fool. unless you're a *really* fast learner.
I recommend you this book - http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1319277048&amp;sr=1-1
&gt; It's also incorrect to say that "the browser cannot fire events during that time". I challenge you to provide code during which events are ignored (not delayed, ignored). I _never_ said events were ignored, I said they couldn't be fired. Yes, they are delayed. &gt; This is categorically wrong. "Parts of the page" is irrelevant; any bottleneck is distinct to the thread (or process) which the page lives in. If you try running: &lt;!DOCTYPE html&gt; &lt;html onclick="append('click');" onscroll="append('html scroll');"&gt; &lt;head&gt; &lt;style&gt; html, body { height: 3000px; } input, textarea { float: left; } input { clear: left; } textarea { width: 400px; height: 400px; clear: both; } &lt;/style&gt; &lt;/head&gt; &lt;body onscroll="append('body scroll');"&gt; &lt;input type="button" value="freeze!" onclick="freeze()" &gt; &lt;input type="button" value="clear" onclick="clearOutput()" &gt; &lt;textarea id="output"&gt;&lt;/textarea&gt; &lt;script&gt; function clearOutput() { document.getElementById( 'output' ).value = ''; } function append( text ) { var out = document.getElementById( 'output' ); out.value = out.value + text + "\n"; } function freeze() { append( 'freeze start' ); for ( var j = 0; j &lt; 2000000000; j++ ) { } append( 'freeze end' ); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; If you click freeze, then you should see scrolling and the button UI freezing, and that it doesn't process the events until the freeze has finished. &gt; I challenge you to provide code during which events are ignored * During the freeze, IE 9 ignores click and scroll events. * On my PC, Firefox occasionally ignores click events, but it's rare. I expect this varies from machine to machine. * In both Firefox and Chrome, scrolling is disabled during the freeze, so you get no scroll events there. * Only Opera fires block click and scroll events, after the freeze has finished. I never said they were ignored, but turns out they are, in some browsers (namely IE). &gt; The long pause was likely caused from the massive queue of reflows required, The pause was artificially caused by the big while loop in the middle, and if you remove that, appending headers becomes instant. The pause is much longer then 0.1s for me, closer to 2 or 3 seconds, so the browser would have had plenty of opportunity to redraw during that time.
Very cool. Very, very cool.
Misleading title aside, I think any developer (or at least ones who's familiar with OOP) should know that when you use the "new" keyword on an object, it would invoke the object's constructor and it returns a reference to an instance of it; not a literal value. So, a comparison like "new Boolean(true) === true" wouldn't make sense since you're comparing the object's reference to the value of true. This applies for "new Number" and "new String" as well.
Nice, I'm looking at it now. EDIT: Hrmm, am I missing something? I don't see a README, but I do see: &gt; We recommend adding a README to this repository.
Regardless of what you think about the implementation and API the idea is very cool :)
Please, check now! The active branch was gh-pages, now you will see master branch, where README exist.
Cool, thanks!! I might need something like this soon. I haven't had time to look around much yet, but I like the layout support so that I can modify the message format (I like the [Apache log style](http://httpd.apache.org/docs/2.2/logs.html#errorlog)), and the file appender is a nice touch too. The brief look at the code looked well done too, I love seeing `"use strict";` :)
Meh, it's there to answer the frequent question "how do I use your prototypes". You give someone a prototype rather then a constructor and they don't know what to do with it. 
"Delete this bog entry" ... wait what?
Click it! For science!
See [ticket 15](https://github.com/Raynos/raynos-blog/issues/15).
There is no doubt that they know I'm not a heavy js guy, but the job is for a front-end position (HTML, CSS and some PS type stuff), and I'll have to learn JS at some point. I just want to do as much as I can to get this job, and show them that I have the ability to pick stuff up.
Well, I'm not a "cheater" kind of guy, so I'm hesitant to let other people in on what I should be doing myself. In the end, they would think that I knew more than I do. That said, here's an example of the type of stuff I'm trying to reason through: function cow() { // insert your own code on this line to make this code work this.moo = "no"; (function() { this.moo = "yes" // this line is changeable. })(); } bessie = new cow(); assert(bessie.moo, 'yes'); What I have so far is that for the code to work, bessie's moo has to assert as "yes", and currently, with the "no" in the function, it is computing as "no", which makes the function not work. Hmm.. Again, I'm not really looking for answers here, I'm just not quite sure how to approach this sort of riddle. There are a ton of these.
I think they want you to cache `this` on the commented line so you can access it inside the anonymous self-executing function.
I found this article entirely unconvincing compared to the one it was in reply to. That original post basically said, "Yes, extending the DOM looks neat but here are numerous edge cases that will bite you." The response is, "I live in 2011! No edge cases here, I simply choose to ignore them." I am fundamentally nauseated by the philosophy of web design that boils down to fuck-em if they aren't running the latest. There's a long tail of people using old browsers, and for them this kind of philosophy makes sites that are absolute hell to work with. They are slow as molasses, they render wrong, they're just a poor experience. This is part of web accessibility -- that doesn't just mean blind people. It also means people with old computers. So if I have the choice of cleanly supporting old browsers with jQuery vs using some slick new thing that assumes you're using a shiny new browser, then I'm always going to choose the jQuery route, and this flippant attitude of "screw you, it's 2011, get with the program" does nothing to persuade me. 
hmm. I thought "this" was just referring to the object "moo" should attach to, in this case, "cow". Maybe I'm not reading this.moo correctly. Did you actually get this to work? Thoughts?
This is what I meant by caching "`this`": http://jsfiddle.net/vbdf2/1/ Perhaps this would help: http://bonsaiden.github.com/JavaScript-Garden/#function.this http://bonsaiden.github.com/JavaScript-Garden/#function.constructors Learn as much of this document as possible.
I think its looks fairly organized. One thing I'd probably change myself is finding a way to generalize "scrollLeft", "scrollRight", "scrollUp", and "scrollDown" since the pattern in each of these methods are the same with a few minor differences to try and reduce code repetition. 
You're on the right track. Your Grid class does have a large number of properties. That usually indicates too many responsibilities. I'm sure you can figure out a way to split up the Grid class into several components, but it's fine as it is, really.
You should use Java-style braces instead C-style braces. For example, if the following code was in a function: // returns the object literal return { a: "blah" } Using C-style braces: // returns undefined return { // this code is never executed! a: "blah" }
I think he was referring to possible errors when adding a newline before your braces, which wouldn't be a problem in some other languages. http://www.youtube.com/watch?v=hQVTIJBZook&amp;t=30m37s Here's Crockford speaking about it, the whole talk is good. 
Impressive. Just a heads up that it's not actually the old x-wing games though, still cool none the less.
Best of luck. You should feel proud for getting an interview for the only available job in Portland. :P
Clever.
Giving the reason for why java-style braces should be used can help to aid people's undserstanding. In most computer languages it doesn't matter to the interpreter which style is used, but with JavaScript your code can be interpreted differently depending on which style you use. The reason why is that JavaScript applies automatic semicolon insertion (ASI) to your code before it runs it, so when the opening brace is on the next line there are situations where ASI causes javascript to think that the brace starts the definition of an object instead. Start the brace on the same line instead of a new line, and that problem will never occur.
Don't use the wrapper objects. They were blindly copied from Java. They don't serve any purpose in JS.
I always put the braces on a new line, *except* in case like that (when returning an object literal). I'm just used to it from other programming languages I use (mainly PHP and C#) where I always learnt to do it that way.
Looks pretty good, especially for someone who's just beginning OOP in JavaScript! I've seen a **lot** worse. I do my prototypes like this: Grid.prototype = { toPix: function(num) { //... }, toCord: function(num, inv) { //... } } But that's a style choice more than anything else. I think doing it like that, or doing it the way you're doing it (Grid.prototype.toPix = ...; Grid.prototype.toCord = ...) are both okay. As someone else mentioned, I'd probably split it up a bit, as it's a pretty big class. Maybe make a separate "Vector" class for instance. 
I never said write code that breaks in old browsers. I simply stated you can easily support older browsers by not sending them javascript. I'm not promoting that you write code that doesn't degrade gracefully. The way the current landscape is that we are converging towards all modern browsers being well behaved and similar. The DOM-shim turns "similar" into "same". In 3 years time cross browser compatibility will be a non-issue and the real issue will be legacy browser compatibility, if you keep catering to legacy browsers they will never die. The fact IE has a ridicilious half-life and web developers still support people who live in 2003 is a different problem. I simply chose not to give those people javascript content. You don't use javascript for the blind right? But you still support them, do the same with old browsers, support without javascript should always work. As an aside, the games industry and the desktop industry has been doing this for years. You get a 10 year old machine and don't upgrade anything at all and any modern game or modern piece of desktop software will not work, at all, what so ever. Why does the web community tolerate supporting a range of platforms over a period of 10 years.
How else would you use it? It has support for module.exports but anyone who knows about that can very easily find out that it does that. *Edit*: Also if you don't like window.R you can just add `myvar = R.noConflict();`
Thanks for the info, very insightful. I think I'll keep %i and %s, but enforcing named params is an exercise for the programmer. I'll definitely read through that link (I haven't yet) and will take as much as I can from it to improve this. Thanks!
I die all the time :(
I can see how this script could be over used, but I really like it!
Damn, I misread "changeable" for "unchangeable", then red it right and even thought of my own quiz. Check it out http://jsfiddle.net/agentcooper/7LPVH/
You're definitely on the right track regarding OOP, but you should overthink whether a singleton pattern would fit better at this point. Unlike classical programming languages, object definition is dynamic and can change all the time during runtime - you should take advantage of that. If you want a singleton pattern, there thus is no need to work with class definitions in a statical way. Just create an *var object = {}* and assign the properties which you want to it like *object.method = function (..) {...}* - You can also use this pattern to namespace your application. Another thing is that you should know that *var* statements in *for-loops* do not behave as you think that they behave: For-loops **do not** maintain their own scope. You have a lot of code like this: for (var i = 0; i &lt; nn; i++) { var x = i; // or any value } JavaScript transforms the above code as follows before execution: var i = undefined, x = undefined; for (i = 0; i &lt; nn; i++) { x = i; } *var*-statements are always put at the beginning of the closure (by the compiler), assigning *undefined* as the value for the variables. Meaning that after the loop both *x* and *i == nn*. Just so you know.
Javascript code academy: http://www.codecademy.com/
yea, alright. i just cringe every time i have to read right handed bracers..
so what your saying regarding the for-loops is that i need to do something like this? var i = 0, x = 0; for (i ; i &lt; nn; i++) { x = i; } else we're going to interact with global i's and x'es
I love you.
Yup, the var statement does not belong in the for loop (if you mind good practice). There is nothing wrong with setting *i* to 0 at the beginning of the loop though *for (i = 0; i &lt; nn; i++) { }*
It works!! Opera doesnt seem to like it very much .... but it works!!!
Is it just me, or it the parallax scrolling *really* slow and jerky in anyone else's browser? Edit: FF7/Win7
It makes Opera sad, but looks very nice in Chrome
It was slow and jerky for me in Chrome + Win 7. :\
Thanks! making a separate vector class helped a lot!
Got it, thanks!. also changed the grid into a singleton while separating some of the original functions into smaller classes. 
Damn sexy.
onscroll can be a real bitch if you have any amount of content or javascript running on the page. It would also explain why it's slow in a lot of browsers. And don't take it from me. Our very own resig doesn't like the practice either. http://ejohn.org/blog/learning-from-twitter/
I've used [JsUnit](http://www.jsunit.net/) quite a bit before, but more recently I've been using [QUnit](http://docs.jquery.com/QUnit) (which is used by the jQuery team) and [Google JS Test](http://code.google.com/p/google-js-test/). I like the V8 based Google JS Test a lot actually, and intend to try and use it as much as possible. It's not suitable for everything however, as there is obviously no browser (and therefore no DOM), but it can handle DOM manpiulation testing.
I've used [QUnit](http://docs.jquery.com/QUnit) for unit testing and [JSCoverage](http://siliconforks.com/jscoverage/) for test coverage measurements. I'm not particularly fond of either, but they get the work done. As a bonus, I discovered that QUnit is pretty nifty tool for testing RESTful APIs, as well.
Me too. Don't use them if you don't like them :P
Thank you for the help! That JSCoverage looks pretty nifty. Looks like I have to throw together some php, and a bit of other editting to get it to work the way I want. Which is fine, but unfortunate. :) Just to make sure I'm not reinventing the wheel, due to ignorance with JsCoverage at the moment: Is the only way to see the coverage results for each test manually having to enter in each file, and look at each script in it? So if I have an index.html, with loads "script.js" - do I actually have to go to the jscoverage.html, and then enter in localhost/tests/coverage/index.html - and then click through to view the coverage? Edit: Hm.. After fooling around with it some more, it seems quite limited in capabilities, atleast for my needs, and unfortunately there doesn't look to be a better alternative... 
Looked at each and QUnit looks like it'll suite my needs just fine. I appreciate the help.
&gt;{CSS Transformations currently will only work with a webkit browser} &amp;#3232;\_&amp;#3232; 
currently not working on firefox or chrome
[Jasmine](http://pivotal.github.com/jasmine/) is the best solution I have been able to find. It is actually quite good.
Your formatting is inconsistent. There are missing semicolons and also superfluous commas. Try JSLint.
Yeah I can't get it to work anywhere.
Its subtle, clicking on the corner of the tiles tilts it in that direction - just like on windows devices.
I use QUnit at work and it does just fine. If you ever need to simulate Ajax, look up Mockjax.
Perhaps you should explain that on the page because not everyone has used Metro.
I've been using Funcunit. It builds off of QUnit but adds support for functional testing.
Multiply by ten, round, then divide by 10. 5.24 -&gt; 52.4 -&gt; 52 -&gt; 5.2 5.29 -&gt; 52.9 -&gt; 53 -&gt; 5.3 so really, var temp = 45.49; var temp_round = Math.round( temp * 10 ) / 10; You could extend this further to determine which number to round to easily: function roundTo( val, place ){ var place = place || 0; var fact = Math.pow( 10, place ); return Math.round( val * fact ) / fact; } You can still use roundTo( 5.4 ) for default integer rounding. Then roundTo( 5.234563245, 5 ); to round to the 5th decimal place. 
Well the superfluous commas were left there in the event that I would like to add another element to object in the future. Also, the code posted was code quickly written for sake of the question. 
Same here, it does some good testing and is pretty easy to get going.
 &gt;&gt;&gt; (0.54).toFixed(1) "0.5" &gt;&gt;&gt; (0.55).toFixed(1) "0.6" &gt;&gt;&gt; (1234.56789).toFixed(1) "1234.6" &gt;&gt;&gt; (1).toFixed(1) "1.0"
I used Metro when I lived in the DC area.
Interesting. Thanks, apparently inheritance in JS is something I need to get a better understanding of. Javascript Garden is a good link.
I do most of my javascript in node, where I like node-tap. http://testling.com/ is a startup by a buddy of mine that aims to make browser testing easier. It's pretty rad from what I've seen.
I've never liked this syntax, until now. (#).func(); Alternatively, I bet you could do, Number.prototype.toFixed.call(1234.5678, 1); var roundTo = (function (toFixed) { return function (num, perc) { return toFixed.call(num, perc); }; })(Number.prototype.toFixed);
Well, in the real world you'd use some variable instead of some number wrapped in parens. `result.toFixed(1)` looks fine.
My friend contributes a lot to PhantomJS (a windowless webkit browser (for testing)) and recently did a post on using it for unit testing.. http://blog.ivandemarino.me/2011/07/09/Maven-PhantomJS-and-Jasmine-to-write-your-JS-Unit-Testing
Not to mention an ECMA standard...
This, and the JS videos on http://www.pluralsight-training.net/
TL;DR: Build websites properly so they're RESTful and progressively enhanced with JS for more modern browsers. Then you can ignore IE6's crappy JS and CSS and just leave it with the baseline version. Great idea, but often the problem these days is convincing developers to do the first part.
&gt; stop hacking CSS and learn it [Whatever you say.][1] &gt; The games community has been doing this for years, they want to play your game at a comfortable frame rate and they will upgrade their graphics card. Gaming communities have high tolerance, because the fun factor of games is *huge* compared to the fun factor of web apps. You (as a customer) probably have plenty of options to solve your need; go with the path of least resistance. For gamers, it's a little different; you want to have fun, so you chase after what *looks* fun and try to obtain it, even if it means upgrading your graphics card (which they know how to do because they know what a graphics card is, unlike grandma). For me, dealing with browsers is dealing with bullshit Chrome, Firefox, and Safari give me with their different HTML5 support. No MP3 support? Crashes on certain SVG fonts? Buggy and inaccurate timers? The problems are there, but now they're everywhere, not just in the DOM and CSS. I agree with you (the author) that IE6 shouldn't concern modern web developers. Those metrics you hear about IE6 being a large part of the market are probably not talking about *your* target market; those users are typically grandmas who are confused by Facebook or are stuck in a shitty secretary job and will probably be staying away from the browser anyway. (This goes to show how important marketing feedback is, before even building a product: see who is interested and what browser(s) they use.) &lt;/ramble&gt; [1]: http://i.imgur.com/aU1gr.png
It's not really like Metro, quite a lot of differences, and even running in Chrome, it's not that impressive.
JSCoverage looks interesting! I'm very interested as to how they instrument the JavaScript functions. Might have to download it and take a look.
One I heard of recently is [JS Test Driver](http://code.google.com/p/js-test-driver/) which supposedly lets you test in multiple browsers at once. This would be very handy at times. I'm writing my own framework so need to test it in multiple IE versions as well as Opera, Firefox and Chrome. I haven't tested it myself yet, though. I'm using QUnit right now which seems adequate. Simple, but it gets the job done.
actually, you don't need the parens: &gt;&gt;&gt; 0.54.toFixed(1)
&gt; Whatever you say. Hmmmmm... for me it's okay on my 1366x768 screen at normal font size, but if I un-maximise it breaks for me too. This is not the best way for him/her to present this sort of argument.
How many people clicked "Delete this blog entry"?
Performancewise I would suggest using math: http://jsperf.com/round-tofixed-vs-math
A related thing I'm sick of from the web design community is "it should work without javascript". Now this is true for a **lot** of sites, but really sometimes I think tough luck. You want to use modern websites? Turn on javascript. It has been a fundamental part of the web for years, and is the **only** way (excluding plugins) of creating rich interactive experiences. The web has moved on from static documents, if you want to view more than just documents, enable javascript.
yeah just tell the 18% which includes office workers who can't upgrade their browser because some intranet application relies on it to upgrade their browser. Works, all the time, no issues, not at all. It's a good example how not to transfer something which works in one setting to a another setting. Luckily at work we don't support IE6 anymore, it's cost factor and where we have IE6 exposure, it's still usable but not necessarily pretty or fully functional.
I would spend my time dicking around with jQuery &amp; jQuery plugins - which (if we're honest) is actually where we all started with JS.
I guess a good place to start would be with this: https://github.com/mrdoob/stats.js Lightweight little frame/stat counter used on most webgl/canvas demo's to monitor speed. Its only 150 lines or so, but the relevant parts can be broken out pretty easily.
Thanks, I'll have a look at this
Works in IE9, interestingly... But I would prefer something that works in IE8 - nothing wrong with a bit of well written JS.
Don't break the web. A website is a set of content you display with HTML and CSS. How could you force javascript dependency in there. However web applications or interactive content doesnt need to work without javascript.
&gt; A website is a set of content you display with HTML and CSS. How could you force javascript dependency in there. There is a crossover between website and web-app. Why make arbitrary rules up about it?
just so you know, c and x are leaking to the global scope.
Oops, just changed it, is that better?
I've listed some testing related tools [here](https://github.com/bebraw/jswiki/wiki/Testing-frameworks). You might find something suitable there.
damn false advertising
&gt; In 3 years time cross browser compatibility will be a non-issue Care to make a wager? &gt; The fact IE has a ridicilious half-life and web developers still support people who live in 2003 is a different problem. I simply chose not to give those people javascript content. I write webapps for government entities. I do not have the privilege of determining which desktop software these various entities run. I can choose to either make a bid and cater to their technological requirements, or I can pass on the bid and not eat dinner. You guys like to look at legacy browser support like it's merely an ideological choice, when in reality, it's a consumer's market and when the consumer doesn't upgrade, _you_ deal with it.
What's wrong with the font on the site? Some of the letters (like the "w") are messed up. Also, 2 days old and 2 broken links? (the ones that mention "dance"...)
I'm a bit of an amateur with JavaScript, though am working with Canvas also (via GWT) and have a similar concern. One thing, which you may already know, but otherwise might be worth pointing out, is that from what I understand, browsers compile JavaScript code when they first get it (and make runtime optimisations as they can). I might be wrong, as I don't understand it very well. But, from this, it suggests that somebody loading your page for the first time (caching the script), would get very different performance from somebody who already has it cached (and compiled).
Seemed like: ' or 1=1; -- Was going to work for me as the username.
If you think you can get node working, you should check out the [Express](http://expressjs.com/) framework. It's similar to Sinatra for Ruby and is very easy to set up. 
Yeah, I'm familiar with Express. Maybe I should shift my focus to look for cheap Node-specific hosting. Thanks for the tip!
I was using Node.js on my shared hosting a few months back.
can anyone point me in the direction of info on node.js on shared hosting? thanks.
http://paulirish.com/2011/requestanimationframe-for-smart-animating/ maybe?
Very cool. I just hope Lucas never catches wind of it otherwise you are going to get a take down notice.
**SO WHAT IF I HAVE CSS TURNED OFF?!** C'mon. 
Although this is sort of what IE10's engine does, it's irrelevant to the problem.
In your test, be sure to read back pixel data to ensure the drawing operations aren't delayed. Use `Date.now()` instead of `(new Date).getTime()`; it's much easier to read. This like looked *really* suspicious until I realized you write `(now - c) &lt; 10` and not `now - (c &lt; 10)`. If you can, please store the 'end' date in a separate variable. ;P
I see this as simply, if you want to support the 2% population on the internet that uses IE6 then go ahead, otherwise risk losing the 2% to save time and frustration.
The cow constructor should really be initial capped as well, that way it lets you know at a glance the function is used as a constructor (not as a regular function): function Cow() {} You're also missing a semicolon inside the anonymous self-executing function: this.moo = "yes" I tend to do: var that = this; For when I have to pass around "this" within closures. I think it's a bit cleaner and when I see "that" in code, it's pretty much always for this reason so it saves time understanding what's going on (at least IMO). Your code example could be rewritten like so: function Cow() { var that = this; this.moo = 'no'; (function() { that.moo = 'yes'; })(); } bessie = new Cow(); alert(bessie.moo); http://jsfiddle.net/Ex8R4/ That anonymous self-executing function runs as soon as the code is loaded, not when the Cow constructor is called. It sets this.moo but that doesn't really do anything useful because you don't have a way to access it. Setting an alias (the "that") makes it accessible to the outer function. Honestly, this quiz seems a bit tough for someone who (you say) knows you're "not a heavy JS guy". I would have expected something along the lines of DOM manipulation. Seems like you'd initially be doing more of that kind of work but what do I know! :)
Your hitting various internal optimizations, leading to it generating different code. That is why you get different performance metrics, for what is essentially, the same task. The differences might look significant, but even with the slowest, you are still talking about 10s of millions of operations per second. I doubt the number of method calls in your game would reach anywhere near that. So no, it's not that important. Further, double guessing the browser is a dangerous game, because the JS engine is always shifting underneath your feet. You will almost certainly find that these metrics will improve in time, and those which are faster/slower might even swap places. My advice, optimize for Firefox as that will have the biggest difficulties with speed. If it runs well in Firefox, then Chrome, IE 9 and to a lesser extent Safari, will all handle it fine.
How could you force HTML/CSS dependency in there; When I look at web pages in my custom browser I see all this syntax, and I just wanted the content! And to reiterate an earlier note &gt;&gt; stop hacking CSS and learn it &gt; [Whatever you say.](http://i.imgur.com/aU1gr.png)
It gets stranger: http://jsperf.com/chrome-prototype-performance/3 Ignore a4 because that is almost exactly the same as b1, but a3 is slightly more interesting. Also if you need a vector (and matrix) class that is fast, I recommend checking out the little *mjs* library. It will use WebGLFloatArray if available but the jury is still out whether that is generally a *good-thing.*
Thanks, I ended up using Math.round
Thanks, I ended up using math ;)
Yeah, I'm hoping he's just seeing if I can reason through some of this stuff. I'll let you know how the interview goes. :) Also, that's really interesting, I've actually seen "var that = this;" before, and wondered what the reason might be.
I think most of the code on that site died with web 1.0. Untested, but my 1st guess would be to remove the silly &lt;a&gt; and simply put the onclick directly on the image... tl;dr: I would go with a modern script. Sorry OP but I don't have a copy of IE 7... EDIT: Actually looked at the source, this was in the header... // Date: 12-05-2001 
It was silly to link to live code. It broke when I refactored it. Fixed it.
Again some of us are in the business of legacy support just like some people write COBOL for a living. That's fine, you can do that. I just avoid it And _most_ people should avoid legacy support.
This is a your-browser-configuration issue, not a javascript issue... 
The code doesn't run on SQL.
Good luck! I'm also in Portland, job market doesn't seem so hot for front-end devs at the moment. If you don't mind saying, where are you interviewing (feel free to PM me if you don't want to post here). I know Emerge Interactive was looking for a front-end dev not too long ago. They're a great, small crew in the Pearl. Are you hooked up with any placement agencies? I can give you a couple of contacts at Vitamin T and Filter Talent. They specialize in placing front-end folks. Through my job, I've also worked with a placement company called VanderHouwen &amp; Associates but they seem more back-end, project management, biz analysts (at least that's who we're getting). Haven't seen any good front-enders come from them.
return false to prevent the link's default behavior. onclick="doCal(); return false;"
There is a slight difference between the two when it comes to whole numbers. If you use Math.round then 5 =&gt; 5. With toFixed(1) you get 5 =&gt; "5.0"
Install Chrome - problem solved - one more life saved
Thanks dude. That helps. A table of feature comparisons would be interesting, but the API page worked really well to give me an impression of the differences. 
Agreed, but you have to give him credit for the conciseness of the solution. Is it ideal and meant to be used everywhere? No, probably not. Is it interesting? Definitely.
Took me a while, you need to actually hold the mouse down instead of just clicking. Not very obvious.
or make doCal return false. Also, pass the event (onClick="doCal(event)") and do event.stopPropagation(); and event.preventDefault()
&gt; Now CSS doesn't have to look the same in all browsers as long as it doesn't look broken. CSS is allowed to look "less polished" in older browsers. You don't work for big money clients, do you?
FTFY &gt; Great idea, but often the problem these days is convincing designers/producers to do the first part.
Splash, damnit!
&gt; I recommend checking out the little mjs library. Thx, I will definitely check it out!
We were already using DOJO so our go to is [DOH](http://dojotoolkit.org/reference-guide/util/doh.html), but it's independent of DOJO if you want it to be. I'm not too sure if any have added support but DOH's claim to fame was the versatility of using rhino for DOM free testing or in-browser testing that came with a java applet that fired real browser events; compared to other frameworks which fire simulated events for UI testing. It also supplies AJAX testing and callbacks via deferred-s. 
Another option is to save the jQuery selector to a variable. `var $inputs = $('input');` `$inputs.addClass('some-inputs');` It's mostly down to preference and whether you'll need that selector beyond a single chain of methods.
Ok 1st off format your code samples (better yet discover pastebin) if you want help (I'm just being nice here). 2nd the jquery ui docs tell you what you need to know. $( "#cardName").autocomplete({ source: "http://www.mtgcardpricer.com/getCardNames", autoFocus: true, select : function(e, ui){ // this fires when a item is selected } }); teach a man to fish (read documentation)... http://jqueryui.com/demos/autocomplete/ try the events section
good stuff on there. is op the owner?
delete =&gt; back is almost as bad as chrome's implementation of two finger swipe for both horizontal scroll and back (without letting you turn off any of these "features").
I'm on OS X, Chrome 14. Two fingers swipe doesn't navigate back. Am I missing something?
In a well-built web application, won't the forward button refill in all the user's entered information? It's done that since Opera 9 (maybe earlier), at least.
 2011. You might pretend you live in 2001 though. 
PDF.js is getting very impressive. It runs faster than the internal Chrome PDF viewer!
I must concur, this is a gawd awful script to be working with. Geocities died some time ago. This is working with hard strings of html 3 code, and inlining its own javascript. It's going to take a bit more than a pizza to bring this up to modern specifications.
I'm not sure what you're looking for, but this seems like a valid solution. http://jsfiddle.net/7LPVH/3/
&gt; That anonymous self-executing function runs as soon as the code is loaded, not when the Cow constructor is called. That's not right. It runs the self-executing function each time that Cow() or new Cow() is called. &gt; It sets this.moo but that doesn't really do anything useful because you don't have a way to access it. That's not right. You can access it through `window`, because that's what `this` is. See my answer here. http://www.reddit.com/r/javascript/comments/lku77/hey_guys_i_need_to_learn_as_much_js_as_i_can_for/c2u852f
lol, this was in the header comment too: // URL: http://us.geocities.com/tspicker/
I wish they were available when I started - had to slog around with hardly any decent examples, much less libraries, in 1998. Good suggestion though... but he should be aware that a lot of places rate JavaScript programmers into two classes - those that know how to solve a problem without relying on jQuery, and those that have to use jQuery. JavaScript !== jQuery only 
Yep, agreed. but when applying for a primarily HTML/CSS role, basic JQuery knowledge is going to be far more valuable to the client than basic JS knowledge (even if it results in what we would consider to be messy/inefficient solutions) Must have been tough back then. I know I had my first run-in with JS around 2001, and you're not kidding - it was *not* easy or well understood in the early days. I got some bad, bad advice and thoroughly swore off it at the time - fortunately I had the luxury to do that! :)
Hasn't been possible with current browsers, has it? Last time I saw that there was a switch to turn off CSS in the Options it was IE 5. (I think - I'm old and the past is fuzzy)
I know you can disable it in Opera, and many dumb phones have browsers with very poor CSS support. Safari's 'reader' mode strips CSS, too, though that's a little different.
How about [DamnIt!](http://damnit.jupiterit.com/) ? I've been using their AJAX the JS error back to the server code since 2008. Works great, is free. 
Why are you wasting the browser's time, just for checking how long it takes? I'd just go ahead, start drawing with the canvas, and after a little while, like a few 100 ms, check how far you've gotten. If it's nearly not far enough, drop what you were doing and go do the fallback.
 [http://www.google.com/support/forum/p/Chrome/thread?tid=40d41e2c9a09c182&amp;hl=en](http://www.google.com/support/forum/p/Chrome/thread?tid=40d41e2c9a09c182&amp;hl=en) probably? But if you don't have it, it's good. Talk about completely failing to understand a feature from safari...
Really just because its easier to have a stand alone test than to include one into the current codebase. The test above takes ~30ms on my really crap HTC, ~15ms on a 3GS, 0-1ms on my laptop. I'm not wasting a lot of time.
Chrome does not require administrative privileges to install - you should be able to bypass the corporate restriction using the installer from their website : http://google.com/chrome
The hot bottlenecks in JavaScript game development are found in the graphical presentation, mostly when using canvas, but also floating divs. Any browser that supports the canvas element should be fine creating tens of thousands of objects per second, regardless of their construction pattern. The others will have trouble moving the divs around in time. TL;DR: No, you should not care about prototype performance (anymore).
If I work for big money clients then they can pay me 50x as much for making CSS look pixel perfect. I'll happily comply. however I won't waste my time on stupid details like that unless you through a lot of money at me. And big money clients tend to be really cheap about this.
I couldn't reproduce this issue, but I could only use ie9 in ie7 render mode. I have an idea what the issue is though. This line here is called each click. var vWinCal = window.open("", "Calendar", So if for any reason the popup window name changed between clicks it would cause a new window to open. If this works on any ie7 outside of your company then I would blame this on your company's browser anti-virus software screwing up the window names. Whatever the case you should ditch this old code.
Nice, but I'm not sure that I'd find it useful. What happens if a user doesn't have a font? I specify another font. No different than a font-family list. The only advantage is that I can execute particular code based on the existence/non-existence of a font. That just sounds like a way of encouraging designs that are less flexible.
My understanding is that `.bind` and `.trigger` are for DOM elements, whereas it looks like `$.Callbacks` is a general-purpose tool you can use to roll your own system with any object as a publisher.
I've changed from someone who said "they're suck, it should work for them too," and ended up being "Their businesses are stuck using poorly built machines, and I have no obligation to help them make money. Any support I offer them is a monetary incentive to no upgrade their shit."
A site should work without full-blown CSS. Lynx or w3m render with minimal support and I use these *all the fucking time,* so do some auto-scripts I have that look at HTML to do their business.
&gt; Whatever you say. That's not a css hack, it's a layout issue. Nowhere in the code related to that does it use shit like moz--css-whatever-the-fuck or !important!!! tags. Related code: header nav { text-align: center; margin-top: -3em; width: 100%; } header nav li { list-style: none; display: inline; } header nav li:last-of-type { position: absolute; top: 0.5em; right: 1.4em; } header nav ul { text-align: center; margin: 0; display: inline; } header nav a { color: #4267aa; font-family: 'Varela Round', sans-serif; text-decoration: none; font-weight: bold; font-size: 1.2em; padding: 0% 2%; } header nav a:hover { text-decoration: underline; } A css hack is not a design issue, you have no right being a snob if you can't differentiate between breaking standards and poor design.
&gt; Poster March, 2007 Better then nothing, though. 
Great suggestion! OP, use window.name to check on this.
Use tables. They are standard *and* they're pretty much the same everywhere.
Wow most of these webgl demos peg my CPU but this one never topped 20%
This is rad, thank you.
John B. Hall strikes again! I took a look at the source when it first came out but this visualization really explains it perfectly. Awesomeness.
Wait. Tables for layouts?
This is nice, thanks! Too bad Chrome still has clipping issues... or maybe it's my ancient graphics card...
Smaller and simpler to implement. OpenGL includes lots of features that never get used in many OpenGL applications. Lots of handheld devices support OpenGL ES, but not OpenGL. So basing WebGL off OpenGL ES improves the likely hood of future support.
1^st rule of optimization: don't do it. 2^nd rule of optimization (for experts only!): don't do it... yet.
I'm amazed at how much JavaScript I've seen where people don't catch the result of $('foo'), and instead perform it again and again, on each line.
[even with much nicer UI](http://w.ppixls.com/vvQhfX) 
Very cool, but in multiple browsers (even on my iPhone 4) I will sometimes see artifacts. 
that's a good point. I just wish the API of this new thing was a bit simpler. 
Looks fine in the dev build.
I'm running 14.0.835.202 m/windows but as I said, could be the graphics card. It's really old.
On the real version, or in the visualization? I don't think the latter is intended to be anything but educational.
The real version, I'll have to screenshot it later. 
Line 10 of the gallery.js file has a superfluous trailing comma, breaking IE 6. Which is too bad, because I have a morbid fascination with watching how older browsers [deal with rendering](http://en.wikipedia.org/wiki/File:Ieacid2.png) the new hotness (IE6, in particular).
my FUCKING browser does not support webgl. awesome punch my dick off
 Some other short possibly helpful links: [http://mckoss.com/jscript/object.htm](http://mckoss.com/jscript/object.htm) [http://ejohn.org/apps/learn/](http://ejohn.org/apps/learn/) [http://killdream.github.com/blog/2011/10/understanding-javascript-oop/](http://killdream.github.com/blog/2011/10/understanding-javascript-oop/) ANDD I just read that I'm late... oh well good links anyway 
CSS is an abomination created by people who like saying "you're doing it wrong" to the people who are actually "doing it."
Well, if I get the job (which will rely on their faith in my ability to learn), I'll be using these. Thanks.
U mad, bro? It's hard to hear you through all those &lt;td&gt; and &lt;tr&gt; elements.
How are you doing it right without CSS?
I've been using backbone and like it a lot. You might want to look at spine which is very similar.
I used to be like you in 11th grade. Just spend some time and really learn it. *It gets better.*
Backbone would be great for this purpose. You can use browser storage to maintain a little state, if need be. There are other JS MVC frameworks, but they add additional complexity (more enterprise focused), which you probably don't need. Backbone is a layer on top of JQuery, of course, so if you really don't need the persistence and you don't have many models, you could use basic JQuery and just read/write data using data() attributes. Backbone is nice if you decide to add a backend later.
Yes that might be good enough for some. Quote from their page: ----- Catching Errors IE and Mozilla support the onerror event, while Opera and Safari do not. Thus, DamnIT error notification works automatically in IE and Mozilla, while you have to wrap your code in try...catch blocks in other browsers to add DamnIT's error notification functionality. ------ We solve this problem without having to modify your code. Plus, getting an email about every JavaScript error on your site might be a bit much for some. But an option if you are on a tight budget, getting a low amount of errors and don't care about iPad, iPhone, Safari and Opera bugs.
what about knockout.js
Backbone.js is awesome. It may take you a while to figure it out but once you do you'll never want to go back. The reason I like it so much is because of its data-driven model. You manipulate the data and different parts of the application that see that data will update automatically.
Yes, Backbone sounds the right tool. Backbone also has a localstorage adapter that would probably make your life easier. 
A table with pixel-sized cells and manual animation using VB script, obviously.
Spine is better. It is more intuitive and similar to web server MVC to me. I looked at both and chose spine. Although backbone gets a lot more users.
Is this a JS or CSS demonstration...?
http://en.wikipedia.org/wiki/Fluent_interface
I agree. It took me a couple of weeks to really understand it, but now I love it. Is not really MVC (it has no controllers, and the views have a more responsibility than regular MVC), but once you "get it", is really cool and helpful. 
I've been using JSTestDriver for a couple of months, and I love it. 
OK, so your code is littered with worst practices, and I have no idea what libraries you're using. But that's all a separate discussion. My guess as to what's going wrong: You're passing the *string* 'a' or 'b' into openModal as helpfield and then comparing to a *variable* a, which doesn't seem to exist. Try changing your conditional to be if (helpfield === 'a') and see if that works. Also, don't use w3schools, [they're crap](http://w3fools.com/), and don't use onClick="", we've got better ways to do things.
Just looking at it quickly i notice this if(helpfield==a){ should be if(helpfield=='a'){ If you leave out the quotes js thinks a is a variable. You want to compare your helpfield variable to the string 'a'.
Thank you! I'll try that.
Thank you! I'll try that.
You're correct. I guess I was thinking various versions of IE. Also... down votes? mention something that only IE can do and you get downvoted? I admin, it is a shitty ass platform, but that capability really came in handy once upon a time.
First, you can't have an if - else block inside of a function call. Do this: if (helpfield == 'a') { $.modal(...); } else { $.modal(...); } or this: $.modal((helpfield == 'a') ? {/*object literal*/} : {/*object literal*/}); If you don't understand much or any of this stuff, then you need to learn. [This](http://yuilibrary.com/theater/douglas-crockford/crockford-tjpl/) is a good place to start for learning javascript. Learning programming in javascript is harder than you would think. It's too easy to screw yourself. I'd suggest something with a more ridged set of rules like C#. That way you get a compiler to tell you when you make errors like the above. If you like dynamic languages, a lot of people like python. Either way, I'd suggest learning more about programming and best practices before jumping into javascript.
Thank you!
I've added this algorithm and some optimizations to my canvas pixel interpolation page here: http://jsperf.com/pixel-interpolation/2 Anyone wanting to do interpolation on HTML canvas pixel arrays can just copy/paste the code from there. Feel free to add more!
I only use the View class, which spine basically reuses, so they're pretty similar to me afaic.
I use Knockout JS a lot and it is very different from backbone. While both provide structure to your javascript application, Knockout also provides a powerful binding engine. Backbone is MVC, Knockout JS is MVVM.
[Maybe you should consider to stop using Internet Explorer](http://i.imgur.com/s53wD.jpg)
Thank you. I actually DID read the docs (and a ton of other pages) but in my mind "selecting" an item from the dropdown what what you did when you highlighted it, rather than clicking it. doh! Thanks again for the advice!
Any idea if there will be more videos put up from this conference?
Any source code from the talk?
http://eloquentjavascript.net/
I wish they'd have shown more of his presentation screen and less of the speaker talking. We missed plenty of presentation because the camera-person wouldn't pan to the screen.
Why are you bent on making a Boolean object? Just check out the doc's by default a boolean object has no value. == is not a strict equality check therefore your really printing out whether the object exists or not. NOT the value of the object. That's why people are telling you to use ===. It's just something you get used to after a short while. Just don't use Boolean there is nothing you cannot do without calling = new Boolean();
I think he makes it seem that the == is not working correctly. Some may not agree, but it is as the spec requires. He never describes that by default a new Boolean() call will return a object with no value. Therefore a non-strict equality check will check for existence not value. It's convoluted and could lead people who don't know better down the wrong path.
That's my biggest gripe about software talks. If somebody could provide the slides, and provide the video, it would take a meager amount of editing to get it all together.
no idea how to post this so the bookmarklet can just be dragged to the bar
At my site you will find both the [source](http://svn.mariusgundersen.net) and the [slides](http://projects.mariusgundersen.net/OnGameStart) 
Thank you! I did visit your site but I didn't see anything pointing to that, but now I checked again and saw the repo link at the top. If only I checked that out earlier!
Awesome talk, thank you!
Your JS is looking for an ID which not only doesn't exist, but the element you want also has no ID anyway.
Great talk! As somebody who's new to gamedev and just getting some experience writing a 2d engine under my belt, I would love to hear you give a more in-depth talk about writing a basic 3d engine from scratch. I know your intention here was to convince others that JS w/ Canvas is becoming less and less prohibitive, but have you ever considered doing a more general talk? Thanks 'gain!
In addition, document.getElementById just provides the naked DOM element and not a chainable selector like e.g. jQuery does, i.e. .click() won't work even if it would find the button.
Let me give it a try: [Bookmarklet](javascript:\(function\(\) {window.location=window.location.toString\(\).replace\(/http/,'https://aniscartujo.com/webproxy/default.aspx?prx=http'\);}\)\(\)) [Bookmarklet](javascript:\(function\(\) {window.location=window.location.toString\(\).replace\(/http/,'https://aniscartujo.com/webproxy/default.aspx?prx=http'\);}\)\(\)) --- Edit: It does not surprise me if this behaviour is prohibited by reddit since it is potentially dangerous.
What you are looking for is `document.querySelector('.awsomeButton.buttonLarge').click()` but I recommend that you use an id (with `getElementById`) or at least cache the results of that query selector. 
Yup, all the talks are being published in the next few days
Congrats on the release and keep up the good work :) Humble software looks like a good dev company!
is there a way around it?
Thanks :-)
is there a workaround?
That's not true. Button's have a click() method. I'm not if it is standardised but all browsers support it.
why is firefox such a pile at the moment! it is horrendously slow.
do you have a possible solution? or can point me in the right place?
I'm curious, what's a binding engine?
Edit: you're right.
im sorry, im extremely new to javascript. can you offer a little bit more detail and context? Im really appreciative of everything you're sending.
Good article. I knew most of these, but it was a great refresher to start my day off. One thing I didn't know was that $.each is significantly faster than $.fn.each (when looping over a jQuery DOM result set). `$.each($('div'), function () { console.log(this); });` is faster than `$('div').each(function () { console.log(this); });`
This should do it: document.querySelector('.awesomeButton.primaryLargeButton').click(); It won't work in older browsers though. Do you care about that? EDIT: I see that maushu (below) has posted the same solution.
It doesn't. I don't think I'm doing it right. Using chrome
Give up then. We've given you the solution and you don't even know how to apply it. There's not much more we can do.
If this is your website, I like the fonts you have used.. Nice typography. I am still a little confused between prop() and attr() though. 
I'll take that suggestion into consideration. However before I give up, have you considered that your solution is not right? Have you gone to amazon and tried it? I know it's not in your interest to help me, but by teaching me you're doing something good and may learn something new by trying it. Everyone has to start somewhere
The way it works is that instead of getting and setting values from html elements directly you create an object called a view model. The view model has fields that match the html elements on the screen. Through knockout you can bind those fields to elements so you don't have to manually update html elements directly. What I mean by that is let's say I want to update the value of a textbox that is supposed to hold a persons first name. Instead of updating the textbox I just do viewModel.FirstName("bob") and that automatically updates my textbox and any other html elment binded to the first name field. Take a look at this simple example http://knockoutjs.com/examples/helloWorld.html
It looks like example 3 needs work? If you scale either one to the size of the other, that would be useful!
You could at least learn the basics before bothering other people.
Hasn't 1.6 been out for quite a while now? I'd imagine a more useful article would be to talk about the stuff they are adding to [1.7](http://addyosmani.com/blog/jquery-17-preview/).
For something on the web that requires a specific font such as the W3.org css tests requiring [Ahem](http://hixie.ch/resources/fonts/) it would be useful as a predetection of an issue, especially for automated tests.
&gt; I am still a little confused between prop() and attr() though. I was, too. So I did a little investigating. It seems as though `prop()` will return a more sensible value, especially when dealing with things like the HTML `CHECKED` attribute on a checkbox. For example, suppose we have a checkbox that is unchecked. &lt;input type="checkbox" id="foo" /&gt; Extra bacon. Using the `attr("checked")` approach would return undefined, since there is no such attribute defined, but that isn't really the same as not being checked. We can, however, do `is(":checked")`, and that will return `false`. This is basically what the `prop()` method is doing, as far as I can tell. var chk = $("#foo"); console.log(chk.prop("checked")); // false console.log(chk.is(":checked")); // false console.log(chk.attr("checked")); // undefined Using `prop()`, we can also *set* properties. So, rather than using the arguably cumbersome way of setting the `CHECKED` attribute to the string value of `checked` (`chk.attr("checked", "checked");`), we can instead set `CHECKED` to `true`, like so: chk.prop("checked", true); And now, if we inspect the `checked` property: console.log(chk.prop("checked")); // true console.log(chk.is(":checked")); // true console.log(chk.attr("checked")); // "checked" I assume this will work with other similar HTML attributes, such as `SELECTED` for `OPTION` elements. You can have a closer look at the above examples here: http://jsfiddle.net/ZEmpG/ Of course, the best place to read up on this stuff is the [jQuery API documentation.](http://api.jquery.com/prop/) **Edit:** Another great use of the `prop()` method is to set multiple properties, using a property map, like so: $("#foo").prop({ disabled : true, checked : true }); An example of this in action: http://jsfiddle.net/2YNBv/
Wow 
Oh okay! So prop can be used for those valueless/standalone/boolean attributes.. Thanks for taking time and explaining! :)
I was confusing raising a click event with binding a click event handler for a moment. domElement.click() should work fine in practice to raise a click event on that button.
Wow yourself.
That's what I was thinking too. But to honest, I didn't know about some of those items, so I still liked the article.
Very good explanation. Thanks for putting in the time.
That is mentioned in the article.
No not my website, but i agree it is nice.
Don't connect with couchdb or anything like that. Just gives you 2 funcions, map and reduce, just like the ones in couchdb. Work in progress and feedback is welcome
Thanks! I grew up playing this game on an Apple ][.
Hey, feel free to ignore anything I post in the future, but my failure to live up to your expectations is probably not lolcaps worthy. I haven't seen anyone else post about trying to create new falsey values in javascript before, so I thought that what I'd run across might interest someone. If you're curious, I was hoping to make an object that could be passed around which with meaningful methods (like a useful toString, etc.) that still evaluated false.
I've added "disabled" to my checkbox tag, and changed the code to this: onclick="document.getElementById('IdOfTheTextbox').disabled=false;" but it doesn't toggle back off if the checkbox is unchecked.
onclick="document.getElementById('IdOfTheTextbox').disabled=!this.checked;
&gt; I haven't seen anyone else post about trying to create new falsey values in javascript before, so I thought that what I'd run across might interest someone. I'm not trying to be rude, but are you new to Javascript and/or Reddit?
Thanks!
fyi, you are using 1 of 3 logical operators. ! not, || or, &amp;&amp; and.
http://jsfiddle.net/sqBbR/ there is proof that the solution works. I'm also using Chrome, if it's not.. Amazon is doing something to prevent you from doing that. That doesn't sound like something they want you to be able to "autohotkey".
backbone.js. Not plugin of jQuery, but works perfect with jQuery.
The main issue is that JS isn't standalone. If you wanted an IDE that manages code dependencies and repositories, then that would need to hook into the server side code, and build on top of your web stack. For example with Java, there is a standardised way of how you import a new class, and if you want to do something special, then you'd build that in pure Java, with no outside help needed. With JS, there is no standardised way. You could combine the files when you deploy your website, include the scripts when the page is generated, or have them dynamically imported client side when needed. Only one of those is a pure JS solution. So to solve these issues, you'd end up having to build an IDE/framework bundle, with pre-built ways on how to manage your code. Once you go down that route, having good Ruby/PHP/Java/etc support is much more important then the JS, since most of your code will be server side.
So who am I screwing if I just use history.pushState without anything else ? 
phpEd does a decent job of JS IDE made by NuSphere
I'm not exactly sure why you would need a JS IDE...
Actually I've been writing JavaScript for a few years, though more JavaScript as of late than before, and posting stuff to Reddit for a few years. I've mostly posted about ruby on a different site (http://endofline.wordpress.com) though I decided I'd rather find something to write about JavaScript these days, since it seems to be what I spend most of my time at work dealing with. To be honest though, I find there's less that is interesting (in the, ahh that's clever, sort of way) about JavasScript, than I did in Ruby. So when I found that the Boolean object does not get coerced to a boolean value as I thought it might be, that seemed interesting. You're right though, my last two posts were pretty lame, and not written with as much concern as they ought to have been. I hadn't written anything in a while, and I generally assume it's better to be in the habit of committing to something rather than nothing. So chalk it up to me wanting to get something out there.
I think part of it might be partly that in browser tools are quite nice, and the build script aspect is pretty easy to achieve (pipe to `uglify` or some such tool). When development is more cumbersome (ahem... java) you tend to find better IDEs since there's a much greater impetus for them. Are you more interested in client or server side javascript?
I believe you could probably create a Sublime Text package that does all that. :)
*ehem* NodeJS
I know this isn't relevant any more, but felt like sharing. Years ago (we're talking early 2000s here) there was a trick to get Microsoft's scripting IDE that shipped with Office 2000 to work with IE and function as a full fledged JS IDE, with autocomplete and proper runtime debugging. It was an invaluable tool for JS dev back during the dot.com boom for the few years where IE5 was actually the best browser available.
I hope someone does. As a newish js developer I would find that very useful! 
I might try my hand at it, I'll send you a pm if I've got a working one (or just look on the Sublime Package Manager.)
http://www.aptana.com/
You don't need to but it's handy. I use IntelliJ Webstorm along with Vim. For example, it's nice to be able to navigate by clicking on function call.
Aptana is just a great product and also free. It is second best to web storm
check the unsupported browsers here: http://caniuse.com/#search=history
I pared it down a bit. I added a head tag and the jQuery include so that the example would work, but I saw that you're already using jQuery on the site, so you don't need to add another reference to it in the live page. http://pastie.org/2771848 Basically, rather than trying to determine what is and isn't checked in PHP, I just do it in Javascript. Since the navigation is dependent on it, we can presume that a client will have to have it enabled to use this menu anyway. Change behaviors are attached to the inputs, rather than being set in onclick handlers. The code ends up being a lot smaller and a lot cleaner. Example: http://coffeepowered.net/projects/travel.php/362,370,363,366,371,372 
http://benalman.com/projects/jquery-bbq-plugin/
Hey, completely confused initially what was going on. This code is also completely untested (coded before I went to dinner) so just use it as reference if it doesn't work. [http://pastebin.com/KbuHGBxQ](http://pastebin.com/KbuHGBxQ) What I did (as opposed to cheald) is make all the ID processing server side. Relying too much on jQuery and javascript is not the best approach. Indeed, there are a few things problematic in the PHP. Anyway, take a look. Main changes are: * Site domain is static. * There are helper functions to build your queries and parse your queries for you. You do it the same everytime, so may as well throw them in a function * Single loop for each type of input box. They may be missing stuff in the HTML, but dammit, they're consistent now. I've probably missed something, but hey, it was rushed. Send me a PM if you have any questions. I use a lot of PHP built-ins. No point reinventing the wheel. 
Sublime Text Editor 2 Once you go sublime you never touch those horrible IDE bastards again.
eclipse pdt for me...
There is, it's called VIM.
With Visual Studio 2010 (and to some extent 2008 and back) - Javascript has full-fledged IDE/intellisense support that is also very flexible. You can add /// reference path="jquery-1.4.2.js" /// reference path="swfobject.js" tags at the top of your code, and Intellisense will parse whatever JS file you pointed to in the REFERENCE, and it will then expose all its objects to Intellisense. Essentially, giving you Intellisense on the fly for any JS libraries you reference. [More info](http://weblogs.asp.net/scottgu/archive/2007/06/21/vs-2008-javascript-intellisense.aspx).
Clicking in Vim? :)
Try [this](https://github.com/balupton/History.js/).
[History.js](https://github.com/balupton/History.js/) is awesome and works with or without jQuery (and other libraries)
This was an excellent and captivating read. The author did a great job explaining how he crafted his code and I learned a ton. 
Weird, Android took a step backwards there?
^^ This.
This looks like it's working great! Doing more testing! Thanks man, I'll report back in a few hours after more testing and breakfast.
Neat. Works a heck of a lot faster in Chrome than Fx for some reason. I had to reduce the Fx window size to get an acceptable frame rate. Also, if you pick up one of the balls and scrub quickly back and forth over the strings you get some pretty harsh clipping from all the overlapping samples, but that's a minor issue. 
The cool thing about Aptana is that you can run it stand-alone OR as an Eclipse plugin.
The point still stands. You wouldn't be using an IDE for JS development, but an IDE for NodeJS development.
\**Dons flame-retardant suit*\* VIM is a **text-editor**, not an **IDE**. 
You bring up a valid point, I'd consider this debatable.
lol, right... Can someone inform Chris Williams that heated pedantic discussions are just a fact-of-life for technological fields? Would it behoove us to change? Perhaps. Is it likely to happen? Not by a long shot. Might as well piss in the wind...
I just tried it [web storm] out, and on my Win7 x64 box it's running like crap. I get a 2-5s delay doing anything it seems like. For instance, I started typing `func` and then it hung, and then spit out `tion()` after about 5s... Looks nice though, with project support and such. Sadly I don't have time to evaluate it further right now...
In emacs, the javascript mode (js-mode, which is builtin as of v23) automatically scans the file for named and anonymous function decls. Clicking on the name of a function navigates to that function. http://imgur.com/rtRzy.png This jump-to-declaration capability is done through what is known as the "imenu" feature in emacs, and it works with other languages, too. 
Emacs is what I use. - runs jshint automatically via flymake-mode - auto-indent automatically - runs js-beautifier on command to reformat / reindent code - can do js minification easily - yasnippet for common code snippets: for loops, function decls, etc. - one click navigation to declared functions. - autocomplete on JS keywords and functions declared in the current buffer Not quite a full-on IDE. But it works for my general development purposes. It doesn't do dependency mgmt; I haven't used it for that. 
Other cool applications of emscripten: * [CPython interpreter](http://syntensity.com/static/python.html) * [JPEG 2000 decoding](http://www.syntensity.com/static/openjpeg.html) * [Text-to-Speech](http://syntensity.com/static/espeak.html)
1fps on FF 7.0.1. Apparently you need to be running the firefox nightly version to achieve 30fps. Tis cool none the less!
https://github.com/raganwald/homoiconic/blob/master/2009-05-01/optimism.md 
 new Date(Date.parse('2006-01-18T12:37:00.000+00:00')); gives you a nice date object to work with
I see this more as a response to all the blogs that talk trash in a "I know more than you" way.
The Visual Studio that comes with the Windows 8 Platform Preview is OK as far as Javascript IDEs go. Intellisense "just works" for the most part if you're into that kind of thing, and it has a few helpful features.
I 2nd and 3rd this!
Check out [Datejs](http://www.datejs.com/). It can parse and output dates in more or less every logic way.
I'm not sure but it sounds kinda wrong.
So could I do **new Date(Date.parse(collected));**? collected is the string. It has to do this many times as it is in a for in loop. How do I format it straight to the **mm/dd/yyyy hh:MM**?
Very cool! Is this the end of Flash?
why bother responding to trolls?
Glad to hear it works for you! I hopefully made it clear enough to follow. Kinghfb's solution is also good, depending on where you want to put the bulk of the logic, but either way, I hope you get it working!
Upvote as a countermeasure because you happen to state a fact about development.
sound is processed in flash. WTF
Can't tell if trying to be purposefully ironic or just part of the problem.
Thanks! cheald is right, yours has some good features. I'm going to actually look through it and see what I can save for use!
I haven't used it myself, but I've seen other developers use IntelliJ for JS.
This happens with all languages.
&gt; Can't tell if trying to be purposefully ironic or just part of the problem. [Poe’s Law][1] strikes again! [1]: https://en.wikipedia.org/wiki/Poe%27s_law
Even if there aren’t a lot of them, they are disproportionately over-represented in online communications, which gives the impression there are a lot of them. Most non-assholes have better things to do than get into counter-productive arguments that are all rhetoric with no enlightenment, so of course the trolls end up arguing with each other.
This. This is amazing.
[http://en.wikipedia.org/wiki/Vim_(text_editor)](http://en.wikipedia.org/wiki/Vim_\(text_editor\)) "Vim is a text editor written in 1988 by Bram Moolenaar for the Amiga computer..."
http://en.wikipedia.org/wiki/Integrated_development_environment "The boundary between an integrated development environment and other parts of the broader software development environment is not well-defined."
Makes sense, then wikipedia should remove the whole "Vim is a text editor..." line. 
Scientific development, not the laughable department of every firm.
I think it's 6 to one, half dozen to another. Really really subjective imho.
CSS isn't actually fucked up, but browser support for CSS is so varied, it becomes a minefield.
automatic completion of things like function names (not just javascript native functions, but your own functions, etc) makes coding more efficient, prevents typos on function names, etc...
Yet another link to a project with absolutely no context or description of why I may be interested. Seriously -- sell your shit, if you make me hunt around to see why it may be of value to me or have any desirable properties (stability, maturity, community, solid engineering, good documentation) then I become disinterested and write you off as yet another dilettante with no clue.
The first example won't work in FireFox and IE9. Nevertheless, there is no need to use DOM-shim library. [DOM3 CustomEvent interface](http://www.w3.org/TR/DOM-Level-3-Events/#webidl-events-CustomEvent) will work. var event = document.createEvent("CustomEvent"); event.initCustomEvent("magic", true, true, { "some": "data" }); document.addEventListener("magic", function (ev) { console.log(ev.detail.some === "data"); }); document.dispatchEvent(event);
Why does this work? how does window.talk get set?
First, you must understand what the variable `this` is set to. It is set to the object placed before the dot. So if you call `something.method();` then the variable `this` is set to `something` inside `method()`. The only way around that is to use the methods `call` and `apply` which are methods available to every function. In any other situation, `this` is `window`. So if you are in an anonymous self-executing function, then `this` is always `window`. http://bonsaiden.github.com/JavaScript-Garden/#function.this
I disagree. Knowing how to do DOM manipulation without jQuery is overrated. It's just not needed in 90% of front-end situations. Knowing the actual language of JavaScript thoroughly is what counts.
No.
This is great. Now if someone would just implement a decoder for FLAC, WavPack, ALAC, or some other lossless format, we could have lossless, high definition audio on the web. HINT. HINT. HINT. 
[Date Object Reference](http://www.w3schools.com/jsref/jsref_obj_date.asp)
If it sounds off try reducing the window size. 
emacs on cygwin? :p [3]
Word to the wise, install this standalone and don't mess with the Eclipse plugin. It remaps a lot of the default key shortcuts and destroys your color schemes. Even if you rollback your installation (one of my favorite newer Eclipse features btw), some of these things will still be hosed until you wipe your workspace.
Yeah. I don't think I'll ever go back to anything else. I've been tweaking and hacking it every day since I got it.
Interesting that you say that. I'm actually working on porting the recently open sourced ALAC codec to JS as I write. I'll be sure to let you know more as I proceed. :)
There is a good one http://www.jetbrains.com/webstorm/
It just crashed my Chrome.
Sweet! note: didn't crash Chrome over here. I don't have any extensions besides RES.
Your correct there were cross browser bugs. It now works in chrome 15, FF7, IE9, IE8, Safari 5.1, Opera 11.52. As for your exaqmple yes `.initCustomEvent` also works however it has less cross browser support (because its not shimmed!)
I was just trying to point out that DOM-shim library was not the only solution to the problem. The blog article should mention the existence of this DOM3 API (which wasn't used in the implementation of DOM-shim library not very long ago...).
I should mention the existance of DOM level 3 events, however I actually didn't know about it! I've only been reading DOM4. I've updated the article to point out that you can use the DOM3 interface directly.
awesome!!! please do! :D
I feel bad for clicking on the 'Delete this blog entry' button, so I confess to it here.
Also ReSharper adds few nice JS features to VS
One of the easiest ways to get around this is to just use the caller host name. Unfortunately the * won't work.
Doing a little bit of reading about the ACO header, in [MDN](https://developer.mozilla.org/En/HTTP_access_control#Simple_requests) it seems to me that the header should be set on the *resource being accessed* and not the page doing the accessing. Try adding Access-Control-Allow-Origin: \* to the *getCardNames* script's headers instead of the *test3.html* page's headers.
Just looked at your test page in Chrome and the Network tracer shows no response, but Fiddler shows that there was a response and it does *not* have the Access-Control-Allow-Origin header. This is what the response looks like for me in Fiddler: HTTP/1.1 200 OK Date: Sat, 29 Oct 2011 18:41:27 GMT Content-Type: text/html Server: Google Frontend Content-Length: 49 [{"id":"2","value":"Macabre Waltz (Dissension)"}] Chrome must be throwing the response away since it doesn't have that header in it. What is the Google Frontend server?
Ahh, the responding server needs access control origin? Hmm. Thank you. The server is Google app engine. Need to do more research now...
Though some of the things in OpenGL get used a lot, like multiple render targets, shadow lookups, depth textures. and some are occasionaly extremely useful like geometry shaders, msaa on fbos, derivatives, etc. 
I don't think this is the right solution. ACO is not supported by all browsers.
Any suggestions for a better one?
http://en.wikipedia.org/wiki/JSONP
I solve this problem on my tool by sending requests to a proxy on the same domain as the requesting JS. This proxy is a PHP file that checks to ensure the request is coming from the same domain and then performs a PHP curl. I check for domain to prevent the proxy from being used by spam and other bad stuff. I then send the response from the PHP curl back as plain text. Try it out: 1) Go to http://prettydiff.com/?m=beautify or http://prettydiff.com/?m=minify 2) Type or paste an absolute URI into the input text field 3) See that the text of the file is returned as either a beautified or minified text regardless of domain. Except for this proxy file the application is 100% JavaScript.
Does anyone else find Google groups to be a horrible shit-fest that they avoid at all costs? Why not make a r/js-tools sub-reddit? At least then we can downvote and bury the same Dart and CoffeeScript links that are going to be reposted every few weeks. 
Here is my JavaScript tool: http://prettydiff.com/
http://rcrisman.net/article/10/installing-nodejs-on-hostmonster-bluehost-accounts
Start Chrome with this command line: --allow-file-access-from-files
&gt;I plan to distribute it on a usb stick so people don't have to install anything but a browser to use it. Take a look at Appcelerator's Titanium platform if you haven't done that already.
Apart from jackjeck's suggestion, you could always use something a bit more roundabout, like a [portable Python](http://www.portablepython.com/) build and a web mini-framework like [bottlepy](http://bottlepy.org/docs/dev/index.html) (that has its own little server)
why not just use underscore? its 4k mined and gzipped and provides not only map and reduce but a bunch of other useful stuff
Another vote for bbq. Using it myself on a recent project. Documentation is a little strange, but it's a great plugin overall.
This is pretty awesome, but I almost closed the site within a second because it looked like a PHP bulletin board. Had I not accidently scrolled down then I wouldn't have given it a second thought. Thanks for the link!
http://stackoverflow.com/questions/44359/how-do-i-get-the-current-location-of-an-iframe
Second Knockout here. I find the documentation and overall structure of KO a lot more logical than Backbone, personally.
i always prefer links to links rather than links to content. this mouse button is made for clicking!
If it loads a URL on a different domain, port, or protocol (http vs. https), then you won't get any data about it. In fact, you might get an exception. Google "same origin policy".
Forgot to mention timing. I just bind to the iframe element's load event with jQuery.
You might also be interested in the non-profit [Unhosted project](http://unhosted.org/). We develop a standard to separate web apps from data storage – apps are just Javascript and load the data from so-called remote storage providers (for instance CouchDB, ownCloud etc.). For that we define the remoteStorage protocol which is very much like localStorage, just that it uses remote storage providers instead of the browser’s internal storage.
this is a pointless pursuit. You need to be converting your ajax handler into a jsonp handler. add support for autocompleteajax.php?callback=&lt;somevalue&gt; return a value such as: &lt;callbackname&gt;(&lt;yourJsonHere&gt;); that should work on retrieving this data. http://1300grams.com/2009/08/17/jquery-autocomplete-with-json-jsonp-support-and-overriding-the-default-search-parameter-q/
Google groups are the steaming pile you describe if you use the web interface, but if you just subscribe by email you can have a real spam filter in front. I have about 25 lists I'm subscribed to that way, plus others that have ridiculous groups&lt;-&gt;mailman&lt;-&gt;nntp gateways, and I basically never see spam from it. Not that I think an r/js-tools subreddit would be a bad thing at all.
python -m SimpleHTTPServer Run that in the directory where your files live and hit it up in your web browser.
The website is broken and the github is empty.
Coming soon... :)
With all due respect, perhaps you should wait until it's here before advertising it. Counting unhatched chickens and whatnot.
How's this different from PhoneGap + jQ Touch, Sencha Touch, Titanium or other frameworks?
Because it is semantic, because it uses features of HTML5: - WebSQL - History - Geolocation - ... Is a new paradigm :)
If you're trying to block sites, you should really be looking at how your network is configured. Ideally, the browsers would talk to a proxy server, and the workstations would be locked down at the user level. Javascript is a pretty weak solution for this.
How's it semantic? You mean the HTML you write for it? What's stopping me from using those HTML5 features with PhoneGap? Is it a wrapper around those APIs? Honestly, I have no idea what your framework does. Also, you may want to use the HTML5 Doctype on your page :F (Edit: Whoops, you did. My bad)
Think that all mobile projects do not have to go to the stores (App Store, Android Market....) The distribution of your apps also have to be done via HTTP
"No need images, everything is vector." Well, thank God.
I'm actually making a proxy to unblock sites. iframes are being used to check if a server is blocked or not, and if it is, then to redirect to a different one.
The load event won't help you, since it fires even for the "server not found" and "server not responing" pages. Atleast in Chrome and IE, I think. If you control the start of the browser process, you can tell Chrome to ignore the same-origin policy. Then you can examine the content on the frame.
I logged in to downvote you. You are a pompous ass. Not everyone is/can be an expert all the time. Give people some credit. If they say it isn't working, and you don't know why, say so, and if you can't think of any other solution and still think yours does work, then that's fine. You've ceased being useful to the asker, and it doesn't matter whose fault that is. There is no need to be a huge arrogant prick.
I'm happy to help people that try to help themselves. But the wasn't the case here. Now fuck off you smug hypocrite.
Calling you out makes me a hypocrite then eh. You're funny.
A very simple but seemingly good idea. I just don't see myself pulling in yet another JavaScript library just to get this functionality though.
That is one of the nicest project pages I've seen.
[JavaScript: The Definitive Guide](http://www.amazon.com/gp/product/0596805527/) [Douglas Crockford's JavaScript](http://javascript.crockford.com/)
Read all that you can about "closure". If you do not understand closure you most likely do not understand JavaScript.
[http://www.codecademy.com](http://www.codecademy.com)
I did this (in my Java servlet on the www part of the domain): response.setHeader("Access-Control-Allow-Origin", "*"); and everything seems to work well - I guess I misunderstood where the header needed to be set. Anyway, thank you to everyone who commented! I understand that certain really old browsers don't support ACO. I'll work something out for them soon - this is just a mock up of the real site to get some feedback for alpha users. Many thanks! Security note: really, the * should just be the domain it's expected from. The problem is, older versions of firefox (e.g. 3.6) don't support more than one domain. I'll fix this later too.
I'm super impressed with the site and the design, but I have to say that I'm not a huge fan of chaining calls. I think in general it makes things tougher to maintain - what happens when you've got foo.bar().baz() in your code and bar() gets updated to stop returning undefined? Also, generally I think chained code is harder to read than unchained, even if it is a little easier on the fingers. Personal preference aside, though, I think this is a brilliant project that a ton of folks would be super into.
This is how I would approach it, however I'm sure that this code alone is not enough to get the job done under all circumstances, however it should work for basic scenarios. var iframe = document.createElement("iframe"); iframe.src="http://myspace.com"; iframe.onload = function() { console.log("url is not blocked"); } iframe.onerror = function() { console.log("url is blocked"); }
&gt; it's running like crap. I get a 2-5s delay doing anything it seems like It is eclipse afterall...
That's a neat concept and pretty cool site design.
This is similar to the approach that I take when our clients' sites need to load RSS feeds. Proxying is necessary in some cases.
Here are some good references ranging from beginner to advanced. http://www.godlikemouse.com/tag/javascript-2/
Ask yourself what it is you want to be writing. If it's something that will be interacting with the DOM a lot (the webpage), then I wouldn't bother learning about using the DOM, and instead learn using jQuery (or one of the many alternatives). It'll save you lots of debugging and coding pain, which only library writers should have to go through.
True, but I *do* see stealing the basic idea and stuffing it in my own JS library (good ol' "util.js") along with an URL in the comments that points to this.
It's common and reliable now, even on IE6. The technique is a CSS directive called @font-face and Google Web Fonts are one of the most popular ways to use it: http://www.google.com/webfonts Very easy.
Yes, but it's not really one I pass from project to project. I usually maintain *patterns*, though. For example, when doing DOM building, I sometimes make utility functions to tersely construct an element. `tr([ th('Heading'), td('Cell 1'), td('Cell 2') ]);` is easier to deal with than 10 lines of raw DOM operations. If I am using `parseInt` a lot in a particular module, I'll alias `parseInt(_, 10)` to something like `p`. (`+` cast won't accept leading space.) Some util methods get stale as the language changes, however, so instead of hauling around a monstrosity, I write from scratch tailored methods. Often times I don't need a performance object extension method, so I'll just use `Object.keys`. Sometimes I'll just use `document.querySelector` directly to get things done, ignoring browser support. If I need features X and Z in a fast code path for DOM manipulation, I'll start from scratch instead of pulling out features A, B, and Y from an existing implementation. tl;dr I don't use a single utility library across projects. A note: instead of polluting the global namespace with all your `$foo` methods, you could just write `ZOM.onReady`, etc. with your `ZOM` namespace. (A *little* harder to type, I know. ;P)
hm you do know that $('document').ready(handler) is the same as $(handler) ?
"Nothing to see here yet. Move along" (https://github.com/TapQuo/Lungo.js). I don't like that
How to know if a project is taken seriously by the author ? * use [JSHint](http://www.jshint.com/) and look for possible basic (but serious) [errors](http://www.jshint.com/reports/57008) * [report](http://tweetconversations.com/Conversations/15/run-variable-is-undeclared) them to the author If he fixes them then it's a good sign.
Yes, you might also want to read up on the CSS3 [@font-face rule](http://www.w3.org/TR/css3-webfonts/#font-face-rule)
I don't really distill other libraries into my own but what I tend to do is build my own library on top of others. Now AMD loaders and CommonJS is gaining some speed it makes sense to build a library independent set of tools. Usually I will use dojo as my base lib (I write large webapplications, really boring nothing flashy). 
Besides those I also use: * a query selector **$$()** (I use **$()** to select ids) that uses document.querySelectorAll. * **addEvent()** that supports adding the same event to multiple elements (ex: list from **$$()**) and is cross-browser. * **PubSub** object that allows me to use the Pub/sub messaging pattern. * **EventEmitter** object that gives me events (using the same api of the browser so that **addEvent()** supports it) to non-DOM objects (pure javascript objects). 
[jsFiddle](http://jsfiddle.net/) is a pretty awesome resource for playing around with code snippets in.
I don't do it. and now that AMD is becoming more and more popular, just including libraries with requireJS (and uglify and joining them when going to production) is way to go IMHO
I've been looking at [eloquentjavascript.net](http://eloquentjavascript.net/) and find it to be a really great resource, especially if it is also your first attempt at learning programming.
The map function in _ (and in javascript core) let you return just 1 output for every input. In my library, inside you map function you have access to emit, just like couchdb. So, they are differents map functions resolving different problems
Came here to say just this about the site design. That is one rocking web design!
Good idea, now I will do it with my library
What libraries do you use for PubSub/EventEmitter?
I don't know if I like the function names you use specifically, but I do something very similar: function E(t){ return $(document.createElement(t)); } which I then use gratuitously when creating elements E('span').text('Text here') Honestly, the only reason I prefer this to yours is that I used the variables `td`, `tr`, etc. ;) Definitely on board for the parseInt alias...
Agreed.
[After asking myself the same question for more than 4 months, I found this and now I'm happily using javascript :)](http://eloquentjavascript.net/contents.html)
I wish mailing lists would just die.
r/firstworldproblems I only feel bad that it asked me to authenticate and then didn't accept `admin/admin` or `guest/guest`. 
&gt; hm you do know that $(document).ready(handler) is the same as $(handler) ? FTFY and the OP.
&gt; what happens when you've got foo.bar().baz() in your code and bar() gets updated to stop returning undefined? I think you have a typo here? For `foo.bar().baz()` would never work if `bar()` returns undefined. Regardless, if you're implementing the [Fluent Interface](http://en.wikipedia.org/wiki/Fluent_interface) design pattern properly, then you have a guarantee that all implementing methods will adhere to the contract.
It's refreshing. I've bashed so many projects for having shitty pages, and this one goes in the opposite direction; what a great page with lots of information (but not too much!) they have.
None, I coded them myself and they are pretty basic. You can see them here: [pubsub.js](http://www.graphnode.com/stuff/pubsub.js) and [events.js](http://www.graphnode.com/stuff/events.js).
Not quite sure what you mean from your description. Have you looked at [colorbox](http://jacklmoore.com/colorbox/)? You should be able to link multiple galleries together quite easily.
Without the plugin [it](https://github.com/liuliu/ccv/blob/stable/js/ccv.js) would be perfect!
Reasoning? I'd guess that most common use of flash is video embedding and with the whole hTML5 movement (not the least of which driven by Apple) that this puts significant pressure on Flash, at least for web purposes. (AIR applications etc aside).
This is for dates in the future. Which would be awesome if that is what I was trying to accomplish. What I need is it to take a record (in the past) that has this format and turn it into the more readable format as stated above.
My intention was to contribute but I may be 'yet another dilettante with no clue' and if so I apologize for taking up your time, though if you have a bit more to spare, I'd appreciate your advice.. Do you mean sell it better though the title, or with more info on the github page? There is tons of info on the homepage which is linked to from the github page. This is an overview. It's a JS back end, as in the architecture for a project using SC would be a JS front end and SC gives you a GUI to build functions that you would normally have to build on the server side (authentication, emails, DB access, messaging) It wraps all that into a custom API that you drop into your JS front end allowing you to build an app all in one one language without needing to setup a DB or write any server side code. As for stability, maturity, community, well it's new so no, not yet. I've done a fair amount of documentation: There are plenty of demos, a video tutorial, and a live functioning app. 
Since the login page helpfully puts an error class if you provide the wrong credentials, admin at least seems to be a valid username. This can only end badly...
I think it depends on your POV. From the POV of r/netsec, it could end with lots of lessons learned.
So this person took someone else's extensive algorithms for face detection (that were already written in JavaScript and on GitHub) and simply added the boxes popping up? Fuck everything about that. This took no effort or creativity at all, they simply stood on top of someone else's hard work and research.
I did this for canvas a while ago. I thought I was clever at the time: https://github.com/rjett0/Chain-Canvas/blob/master/builds/chain-canvas-debug.js :P 
I do now.
Eh, I don't mind polluting the global namespace. If I was writing a library for mass distribution I wouldn't do it, but in my own apps I'm not going to hurt anyone but myself.
This library overrides methods that return undefined to instead return this.
Should the person build the plugin from scratch? Or given better credit?
Funny, coffeescript took me by surprise and I was like "the fuck is this?". I'm starting (a little way too late) to be interested in heavy client architechture and was thinking about trying kockout (instead of backbone, only because of the ui bindings) but seeing this little thing of yours makes me consider backbone again. How would you compare backbone + myelin to backbone?
I see now, after inspecting the implementation. Basically Chainvas wraps your code, and it works by virtue of wrapping your code and replacing any `undefined` returns to instead return the object. I agree that the approach is novel and interesting, but I don't think I'd ever use it as it does seem like a maintainability nightmare.
Give better credit.
HTML5 provides video embedding. Being able to decode H.264 in javascript does not make it a good idea, let alone a better one than using flash or html5 &lt;video&gt;. As far as javascript has come, it's still going to perform a fair bit worse than hardware or low-level software decoders, especially on systems with slower processors.
A link back to the original github page is not enough?
The phrase "Original algorithm by Liu Liu" as a link to Liu Liu's GitHub is not enough - as gives the implication that Jay improved upon the original, when in fact, he uses the original. It's professionally dishonest.
I generally don't use jQuery (just raw DOM nowadays), so compare function E(t) { return document.createElement(t); } var mySpan = E('span'); mySpan.textContent = 'Text here'; to function span(text) { var s = document.createElement('span'); s.textContent = text; return s; } span('Text here'); Now throw in composition (especially with tables and lists), e.g. using `.map` instead of `.appendChild` calls, and it's generally a neater style (IMO). It all boils down to personal preference, I guess. =]
The comment above relates to Datejs. Thanks tho
I honestly don't think you're going to be able to find any solution that works in every browser for this problem. Receiving any information from iframes is really difficult and I just have a gut feeling this won't work. Also, regardless of that, this isn't the best way to approach the problem. For some reason I'm not completely grasping the goal but you should ideally create a web service of some type to interact with from your javascript that provides you with this information about servers up/down to respond to accordingly. So maybe setup a php script or whatever you use that will do an http request to each URL you need to check and see if it results in a live page or error code etc... process the results and return json in the format of something like {"server1": "running", "server2": "down"} or whatever format to serve the info you need. Much easier, safer, and consistent checking from server side script and then providing this info to the client side via a json web service.
it abstracts the most common code duplication that happens in backbone and saves lines (see [my response](http://www.reddit.com/r/programming/comments/lvbkj/this_is_the_first_code_i_wrote_that_i_feel/c2vxzh5) on his other submission)
Not ask for donations, that's for sure.
You don't use any libs to handle DOM interaction? If that's the case then I'd definitely use your funcs, but I can't imagine doing large projects without some kind of middleware. 
Disregarding the ethics of turning someone else's code into a new plugin, I'd like to say that I've been waiting for webcam control to be added to browsers for nearly a year now, just so I could test these sorts of things. The HTML5 proposal lists webcams as a canvas feature but browsers have yet to implement them. It would be cool if I could program a face detection algorithm that would turn on the webcam when someone's present, or have the camera follow the person without the camera software running the show.
I do a lot of microprojects, and I'm just as productive with `.addEventListener('click', fn, false)` as I am with `$().click(fn)`. I also avoid jQuery for high-performance work. (You want low overhead, or you're dealing with (nearly) DOM-less WebGL anyway). Boring sites, blogs, etc.? Sure, I'll use jQuery. =]
Why should HTML/js be a suitable platform for this? It sounds to me like the quintessential desktop app. Not everything needs to be on the web, even in 2011.
I wonder if you could test this with a video playing in one of those new-fangled html 5 video tags, grabbing frames into a canvas, and detecting faces from it. You'd probably have to stash the detection code in a web worker. Not as useful as an actual webcam thingy, but much of the code and learnings would be the same.
The usual unspoken answer to this is "Because [Flash can](http://flashfacedetection.com/)." A great many recent web APIs seem specifically designed to bridge the feature gap with Flash, and this would be no exception. More practically, html5 webcam access would mean that web-only computers like the chromebook would be able to use their webcams without having to rely on Flash or on special little google plugins. 
I'm going to answer your question with another: why _shouldn't_ this be done using HTML5? Why develop a native app for each platform instead of one for the web?
It does seem a bit slimy. "original algorithm by Liu Liu" implies he implemented Liu's algorithm, not just took Liu's preexisting javascript. &gt;Like it? Buy me a beer! Or buy Liu a beer, since it's his code. 
Because it is OS-independent. As simple as that. In all seriousness, OS-independence is very attractive, especially in a world where the majority of computing devices will be non-desktop PC ones. Smart-phones are simply the beginning.
Mozilla's Rainbow project - https://mozillalabs.com/rainbow/ - is your best bet for this
I haven't done much that really needs that extra performance you get from not using jQuery. What exactly are you doing that needs the extra 5% you get?
&gt; sounds to me like the quintessential desktop app What does? The person you are replying to did not really describe any sort of app, so I'm not sure how you can say that it "sounds like a desktop app". &gt; It would be cool if I could program a face detection algorithm that would turn on the webcam when someone's present, &gt; have the camera follow the person These are not (an) application(s), but **possible features** of an application. The idea is that you it would be nice to get these features in a web app. Let's say you have an app like Chat Roulette...it might be nice to be able to turn the camera on/off depending on face detection. Or, you have a web game... tracking the face could be useful. As for why *those* apps need to be on the web platform, they don't necessarily... but it has many advantages like portability, control, etc. 
I built this thing for a project and decided it might make a decent component on its own. The current code needs to be made more "standalone" but I'm putting it out here early and hoping some backbone.js users might be able to glean something from the implementation. If you're interested in contributing a pull request check out the todo at the bottom of the readme; all I ask is that you include passing specs (JasmineBDD) with your pull requests :) Demo available on [jsfiddle](http://jsfiddle.net/dmosher/wNATp/) 
Ok, well you could do it like this then: var datePattern = /^.*(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}).*$/; var dateFormat = '$2/$3/$1 $4:$5'; collected.replace(datePattern,dateFormat); If you happen to receive your data in JSON the second argument when invoking `JSON.parse()` is a replacer function.
Nice. I've tended to accomplish the same thing via a method in a view called modelChange (or something) that gets bound to whatever events you want (usually form element change, but could be keyup, etc.), that simply references the view's model via this.model, and checks e.target for the presence of various HTML5 data attributes to perform input sanitization, handling, silent setting, etc., then updates the model as necessary. If I ever find myself needing something with more power, I will check this out. 
I've tried this using flash, outputting the bytes to canvas, then reading with ccv.js. very slow. too many handoffs. if that camera API camout it would at least double the performance of it. have you tried doing it with videos? 
Persistent XSS attacks. http://en.wikipedia.org/wiki/Cross-site_scripting#Persistent
Thanks!
Games on Mobile Safari, in short. Games in general, in fact. `el.style[foo] = bar;` is much quicker than `$el.css(foo, bar);`, for example. Hell, sometimes optimizing the use of `toString` (or `toFixed`) brings noticeable speedups on mobile platforms!
Is that what you're looking for? Or did you mean a particular example of JS that would be malicious to a website?
I wasn't looking for anything in particular. Somebody sent me to a random website yesterday and it had a 'click here' button, and I wondered if there was any danger in clicking there. My thoughts were "the worst that could happen is it crashes my browser... or maybe steals some cookie info.."
* Your cancel button should cancel, not clear. If you want to clear add a clear button. * The popup to edit is very annoying. HTML5 now has a rich content editor through the contentEditable property. Check out [the specs here](http://www.whatwg.org/specs/web-apps/2007-10-26/multipage/section-contenteditable.html) * 20+ includes in the header and inline JS. There's also includes in the footer and a document.ready bind. Not good. * If you're designing for HTML5 only inline-block is what you want to use instead of clear fixes. That or append your clear fix with CSS. * Inline styles make baby Jesus stab kittens. When you take a look at this code this thing isn't anywhere near simple and it shouldn't be that way. JS frameworks are here because JS before HTML5 was limited or required a ton of code to get something working in all browsers. HTML5 adds adds things like getElementByClass, httpXMLRequest, event binding and more. The [MDN](https://developer.mozilla.org/en-US/) is a good reference with a lot of tutorials. If I were you I'd take this and see how much functionality you can get with straight HTML5 and Javascript, no frameworks. Target one browser to make your life easier then go for it. Ignore IE. 
The main issue is when you can inject JS into a site. This makes lots of legitimate actions become malicious. Once you've done this, lots and lots examples open up. For example there was a political site setup in the UK during the last general election, which displayed tweets with a certain hash tag. It embedded the tweets as HTML, and so any tweet containing script tags would get executed. Most people tweeted JS redirects to various political and pornographic websites. You can also transfer information off the page, across domains, through embedding scripts, CSS and images (i.e. an example url: http://example.com/username/password/image.png). For example you could embed JS which creates a fake login screen, that looks like it is legit for the site that the user is on (i.e. you need to login again). They enter their details again, and you can then send the information on to yourself, through embedding an image. Your server can then store the username and password. To make this look legit, you could disable all links on the page (set their href to '#'), and when a user clicks on a link, it then displays the fake login page fullscreen (as though the user had navigated to a new page, and so still had the legit domain in the address bar). If fake login screen is styled correctly, then a user would not know the difference. You could alter the links to take the user off the site, to your own fake version, to get the user to do more then just give you their login information. For example if you embedded JS into an online store, you could redirect them to your own server, which acted as a proxy between the user and the online store. When they navigate the store, you process their requests as normal, but save all information, such as their card details when they buy something. Another example is that you could get hold of people's session information, if the developer and browser do not keep these separate (some mobile browsers still don't support HTTP only cookies). If you paste this into your own browser, and visit the site, it will think you are that user. There was also an AJAX issue about 5 to 10 years ago where you could perform a TRACE request using JavaScript, which echo'd the request to the domain, and back to the client (I think it's in there for testing). At the time most browsers would allow JS to view the response headers in full, including any HTTP only cookies, even if HTTP only cookies were supported by the browser. You can also open up pages on the same domain, as the user who is logged in. If you do this via iframes (which you can keep offscreen), then you can navigate the content, and so interact with those pages as the user. If you imagine this happened on a mail client, then you could navigate their mail, and send the content on to yourself. If this happened on a banking site, then you could navigate their account, and send money to yourself. I've actually found a JS editing site about 6 months ago that suffers from this issue, where I've been able to create a project, which when run edits other users projects. It only took me about an hour to build (and most of that was building the iframe navigation system). It is also possible to crash people's browsers using plugins, especially those which allow direct access to OpenGL. For example I built a small OpenGL game as a Java applet a few years ago which would crash any Mac OS browser that tried to run it (I had a bug in my OpenGL code, and their drivers couldn't handle it). If you injected a JS redirect, then you could take them to a page with such an applet, and then attempt to crash their browser. You could also redirect them to a page which embedded a plugin, which asked for raised permissions, or where you exploited a security hole. For example signed Java applets can run native dll's, if allowed, and if the user were being redirected from a legitimate site that the user trusted, then lots of people would allow it. This could potentially give you access to the users PC. In the wrong hands, JavaScript is very dangerous.
Thank you!
I'll check it out. Thanks.
It would probably slow the framerate quite a bit, but you could reduce the processing to every 12th frame, for example, that way you can track faces at about half second intervals without severely interrupting the framerate.
This should just about cover you. http://blip.tv/jsconf/billy-hoffman-javascript-the-evil-parts-3704053
Molto bene! Grazie!
Your main concern should be what you consider a trusted site doing something out of the ordinary. Many exploits rely on the user doing something, like 'copy this text to that box and press ok' -- I saw someone post something like this for imgur to /r/netsec/ ... if the user had recently logged in, and performed a copy of all the text, the script was able to sniff the user credentials and would immediately call a webservice post adding a picture, 'pwnd'. 
Story time! I was once developing an API for a client. He needed to access the API from another domain, so it had to be in JSON-P format. Later on, the client refused to pay me for my work, and decided not to use the API. But my access logs and databases said otherwise. I replaced all the JSON-P responses with endless for loops with alert boxes in them. Also, most of his clients were using old machines with IE8. Needless to say, all his clients were forced to kill their browsers everytime they opened up his app with my code in it. 
An excellent answer, I asked something similar about a week ago in a thread but didn't get any replies that were nearly as informative. I've often wondered about this because there is always somebody in a thread in r/web_design who claims a site is awful because it uses js and is therefore not standards comliant or that it can't be used by those who deactivate js. I wondered who those people are and why they deactivate it. Now I have a decent answer to the question. So, thanks from me too.
Thanks for the praise. I run Firefox with NoScript partly for the reasons above, but mostly because it makes the web a lot faster, and with a lot less noise. Big companies also have the cash to spend on GUI testing tools (such as Quick Test Professional), which can get inside a page, navigate it, and automatically run around clicking buttons and inserting JS scripts into every field. I see no valid reason why (almost all) JS injection holes shouldn't be caught automatically in a site built by a large company. &gt; in a thread in r/web_design who claims a site is awful because it uses js and is therefore not standards comliant or that it can't be used by those who deactivate js I've not been to r/web_design, but I'd be one of those people. There is tonnes of stuff you can do with HTML/CSS which people often don't realise. Standards compliance is over hyped, but a CSS alternative gives the user a much better impression: smaller page size, CSS effects are faster then JS animations (especially in Chrome), and things are correctly styled the moment they appear. I also find it helps to make the code more maintainable, as (almost) all visuals are in the CSS, and the JS becomes more symbolic (i.e. adding/removing a 'hide' class rather then a jQuery animation block).
Wanna name and shame the client?
&gt;Standards compliance is over hyped, but a CSS alternative gives the user a much better impression: smaller page size, CSS effects are faster then JS animations (especially in Chrome), and things are correctly styled the moment they appear. &gt;I also find it helps to make the code more maintainable, as (almost) all visuals are in the CSS, and the JS becomes more symbolic (i.e. adding/removing a 'hide' class rather then a jQuery animation block). Your experience with JS is different from mine... Typically I design for HTML, then CSS, then JS for accessibility. Each iteration degrades gracefully, scripts are loaded asynch, and JS animations have much better support than CSS at this moment... though I'll make the switch to CSS transforms / animations in a few years after support is more widespread.
It was a small local company. And I am based in Bangalore, India. Wouldn't make any sense in this context. In any case, I think naming them would be needlessly taking things too far. 
[It can get even more nefarious than that. ](http://www.alanayoub.com/css-history-hack/) 
Apart from XSS, don't forget about javascript as a vector for delivering user-side exploits. Though, contrary to XSS, this will not affect everyone, it can result in arbitrary code execution through a memory corruption exploit -- generally a heap overflow -- or can cause the browser to crash due to a DoS vulnerability. For an (outdated) example, this piece of python code generates an HTML page that used the attack vector from the infamous [Aurora exploit](http://en.wikipedia.org/wiki/Operation_Aurora) to deliver a payload over javascript to IE6: [Link](http://www.exploit-db.com/exploits/11167/). 
Backslash is an escape character. It lets you insert newline and other characters into strings. Eg. "Hello\nWorld" would be printed on two lines. To do what you want, you need to escape the escape character. Eg. "hello\\world".split("\\") The first backslash in each pair is saying "treat this next backslash as a printed character and not an escape character." 
This is the one case where I actually like PHP better. &lt;?php '\n' == \n "\n" == " " Which is a shame, because I usually love Javascript better. niiko is correct in that you need to escape the character, but what if you're reading it in from an internal source, unescaped? The answer is, you need to escape that string before you bring it into javascript, and if your string is already "hello\world" then javascript is going to see it as if you typed 'hello\\\\world' and thus the \\\\ counts for one \ character if you print it, or what have you. Along with niiko's concise answer, this SO thread is somewhat related, and can show the pitfalls of dealing with such things as windows file locations which are delimited with backslashes rather than forward slashes: http://stackoverflow.com/questions/1376440/javascript-replacing-the-escape-character-in-a-string-literal
I wrote a network scanner that gave me (as the external server) the IPs of all the computers on your internal network. I also did a basic port scanner, but it was a little hit and miss. Using that data, it then launched an attack on your router to open some dangerous ports. All the network stuff was done using the timing of images loading. It's super scary stuff.
Great summary. Here are few more references: [WebGL - A New Dimension for Browser Exploitation](http://www.contextis.co.uk/resources/blog/webgl/) [New JavaScript hacking tool can intercept PayPal, other secure sessions](http://arstechnica.com/business/news/2011/09/new-javascript-hacking-tool-can-intercept-paypal-other-secure-sessions.ars) [Web-based SSH](https://secure.wikimedia.org/wikipedia/en/wiki/Web-based_SSH) [XSS \(Cross Site Scripting\) Prevention Cheat Sheet - OWASP ](https://www.owasp.org/index.php/XSS_\(Cross_Site_Scripting\)_Prevention_Cheat_Sheet) [Javascript Security on Wikipedia.org](https://secure.wikimedia.org/wikipedia/en/wiki/JavaScript#Security)
Can you post some code? From what you've given all I can possibly see is that the ajax fires one load when it returns and the image, the other?
You likely need to check the "readyState" property on the event object to ensure it is "complete", that it is loaded and will not receive any further processing.
Returned by AJAX: &lt;img src="1x1.png" onload="parseInputs();loadXMLDoc();"&gt; parseInputs() will increment the stage variable as well as handle turning all of the inputs into 'var1=1&amp;var2=asdf' etc. The loadXMLDoc is the w3schools generic function: function loadXMLDoc(){ var xmlhttp; if (window.XMLHttpRequest){ xmlhttp=new XMLHttpRequest(); } else{ xmlhttp=new ActiveXObject('Microsoft.XMLHTTP'); } if(!document.getElementById(stage)){ document.getElementById(ajaxContainer).innerHTML+='&lt;div id="'+stage+'"&gt;&lt;p&gt;'+msg+'&lt;/p&gt;&lt;img src="ajax-loader.gif" alt=""/&gt;&lt;div&gt;'; } xmlhttp.open('POST','index.php',true); xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); //xmlhttp.setRequestHeader("Content-length", pageCall.length); //xmlhttp.setRequestHeader("Connection", "close"); xmlhttp.send(pageCall); xmlhttp.onreadystatechange = function() { if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) { document.getElementById(stage).innerHTML=xmlhttp.responseText; } } } 
Stupid question, I have to ask because it looks like a 1x1 spacer. Is there more than one instance of that img tag?
there is another place were I call that same img before any AJAX calls, but even if I remove it, to problem still occurs.
This is in military time right? so if it's 2 pm, it will show 14:00?
Reason for the downvotes: &lt;?php echo '\'; &gt; PHP Parse error: syntax error, unexpected T_ENCAPSED_AND_WHITESPACE in - on line 2 
It works... Do you know how to do this with a date object?
[Mozilla Secure Coding Guidelines](https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines)
That's awesome, but IE still sucks because their browser is still tied to a particular version of their OS. Hopefully IE10 will be available for Windows 7 and not just tied to Windows 8. 
IE10 will be available for Windows 7.
me2 :-(
It still sucks. No plans to support webgl. As soon as they regain ground they will go back to proprietary ways. 
server side.
It uses `regular expressions` and relies on just the pattern and has no idea the string is actually a date. If you have a date object you can convert it to an appropriate string like this: var now = new Date(); now.toISOString().replace(datePattern, dateFormat);
That's kinda what I told him. Thanks for the response.
Well I'm enjoying it while it lasts I guess =) I totally agree about the WebGL nonsense, but I guess its no different from HTML5 video codec wars.
One easy deploy and you claim it doesn't suck anymore? Hey, I've got a bridge I'll give you a great price on.
Hey look a comment on Reddit from someone who has literally no idea what he's talking about. Thanks! edit: Elaborating: The fact it was an easy deploy is the entire reason why I'm stating IE doesn't suck anymore. The WebSocket spec implementation works flawlessly with existing wrappers (this is a pretty big deal considering the history of WebSockets), all ES 5 methods I used worked, all event handling works just like other browsers and performance was comparable. Am I claiming IE 10 is the greatest thing ever? No. Am I saying it doesn't suck, because it worked flawlessly to execute a demo written in Chrome using next-gen browser technology? Yes.
I don't know what the big problem with IE is, just do this: if (document.layers) { //all your Netscape code goes here } else if (document.all) { //all your IE code goes here }
i think you misread what he said.
mind elaborating then? I'm having trouble reading it any other way.
haha rock on!
Interesting. As some have pointed out, it seems like it would be a pain to have to rely on methods returning undefined. I would change it so that it *always* returns this regardless of the method's return value. Then if you want the return value of any method, you get a special method (added by the library) called .retval() or something. E.g. foo .bar() .getBaz() .retval(); kind of silly looking to call a getter then another function to actually *return* the value, but it gets around the maintainability problem.
Cry about it, baby.^/s
your experiment does not involve every aspect of developing with IE10, so stating it does not suck is an assumption. i am not here to throw mud, and i like where MS is heading with the new IE's but they have a bad history of ruining cross-compatibility. prefixes can be tolerated but transparency hack's, never ever again (*shudder*) 
No, IE 7 still requires support and IE 8 isn't exactly perfect. No, IE still sucks, it can't outrun its legacy.
Awesome, it Works really nice even on am iPad... Nice ...
Yes I tried that but I cannot change the "hello\world" to "hello\\\\world". Actually the string will be a domain\username so it will be coming from the system directly. Is there no other way?
*She went from suck to blow!*
If only it were that simple. Start writing a bit more advanced javascript and you will feel true pain. And really... *Netscape!?!?*
Yes it does, since it's not the latest version that we have to deal with.
Whoosh!
In that case, as haxd mentioned, you can ignore that one. But you'll still be supplying a string literal that gets used in split() so that needs to be escaped. var str = [where is this coming from, anyway?]; // "domain\username" var parts = str.split("\\"); 
The code examples are all written in jQuery. I abandoned about a third of the way through.
Well, you're talking about *IE 10*, **not** IE. If you're in the unfortunate position of having to support previous versions of IE, then it still sucks, and will continue to suck indefinitely. So while you're jizzing over some hipster HTML5 widgets, the world has not yet stopped. 
I hope you're trolling.
Its possible.
Are slideshows the ToDo app of the jquery world?
I'm assuming you want to know the network devices attached to the clients machine. To do so on the client machine would require you to be able to enumerate the network devices. You cannot do this through a mobile web app, no browser exposes that data to a javascript API. You may be able to do this through a native app *if* the target device exposes a method for doing so in the SDK.
Man that is fucking awesome for the 12 people using IE 10.
Care to explain?
I'm kinda fuzzy on my network protocols but would the router have a table that would store the IP's that are connected to it? Would it b e possible to retrieve this table if it exists?
wat?
Tell us more about the environment. Is it Android or iOS? Windows, Linux, Mac? A website will not be able to scan devices on a client computer, unless your buddy built an ActiveX control that did it. For client applications you could use Powershell, VBScript, or JScript (which is like javascript with .Net access). I'm not sure if those languages have access to what you want but it's a place to start. Otherwise your buddy would need C++, Java, or C# with a client app.
Most of the examples are abstract async operations, actually. jQuery is used only for exemplifying a common async operation, viz. ajax. Would you suggest using up valuable slide space writing out the boilerplate from https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest instead?
Check out http://socket.io/ Im not good at explaining stuff, so you will have to read up on it yourself :)
Certain SDK's provide hooks for what is called [Zero Configuration Networking](http://en.wikipedia.org/wiki/Zero_configuration_networking), for example Apple's Bonjour and [Avahi](http://en.wikipedia.org/wiki/Avahi_\(software\)) . This might be a good point for your friend to start investigating, and it will be platform specific.
He is trying to make it cross platform but iOS would be the main target. 
Awesome thanks for the knowledge!
What I usually do to avoid HTTP timeouts, is to "outsource" the computation outside of the http response, and just write progress data somewhere. Then I periodically poll for progress via AJAX until it reaches 100%.
You basically have two things going on. 1) a long running script. 2) an impatient user. Separate them. Deliver an HTML page via PHP that does something like this: [html][textarea id='status']nothing[/textarea] [button onclick="go()"]go[/button][/html] Now, your page is loaded and it doesn't do anything. Make your `go()` function do the following: __any_ajax_library__.fetch( 'http://yourserver.com/long_script.php' ); Then, make `long_script.php` do something like the following: while( $calculating_pi ) { calculate_more_pi(); $db-&gt;put( $transaction_id, "current status: " . " CALCULATING PI" ); } Then back over on the "placeholder / status" page, you do something like: setInterval( check_status, 1*1000 ); function check_status() { __ajax__.fetch( 'http://.../get_status.php?transaction_id=...', function( result ) { document.getElementById( 'status' ).value = result.body; } } ...basically on the PHP side you just update some status field somewhere (either in your database or on the filesystem or whatever). And on the javascript / html side you read that status and put it into the textbox. That's the basics of it. The JS libraries you can use are jQuery, YUI, or any others: * http://api.jquery.com/jQuery.ajax/ * http://yuilibrary.com/yui/docs/json/json-connect.html * http://www.openjs.com/scripts/jx/ ...please be aware that because you are using PHP and don't know what you are doing you will do this all wrong and insecure and everything and your users will get hacked and etc, etc. So.... if this is for anything important you'd better pay the big bucks to somebody who knows what they are doing or get some sort of security audit done on this stuff afterwards. --Robert
The main difference is that with ajax you'd have to use polling. You'd need to provide an API on the server side that responds with the current status of the operation, and on the client side you'd hit that URL every second or every three seconds or whatever, and update the page based on the response. This might also require more extensive changes server-side, since the processing that is taking the long time to complete is no longer happening during a HTTP request. Rather, it's running on its own independently of any request, so you'd need some kind of separate daemon/script interpreter to do it, not Apache/mod_php. If you are using some kind of message queuing system then this would be easy to implement, but otherwise it might not.
I can't believe I'm admitting this but I've never thought to puy an onload event on anything other than the body tag. Is that weird? Someone please tell me that's not weird. Now it feels weird. 
How does Node work with Microsoft? Do they use the same Google V8 Javascript engine, or are they using their own interpreter? 
slide 41 var promise = addWithPromise(a, b); promise.then(...); What is `promise`, and what is `then()`?
Whatever happened to layers anyway? Can you still use that in FF?
So if he wanted to keep this app as a mobile web app not a native app this would be impossible?
Same V8 interpreter. Its compiled into the binary so everything runs native. Node has had to make a few sacrifices to get Windows compatibility at the moment (like no FD passing), but apparently they are working on getting that stuff back.
To answer the question directly, but probably not helpfully: `promise` is a promise object, returned from `addWithPromise`, and then is a method that all promises have. This section of the presentation launches into a series of code examples of using callbacks vs. using promises. The idea of that slide was "here's how you would use a callback-based function; here's how you would use the equivalent function if it was based on promises instead of callbacks." Neither that slide nor many of the ones after it (until slide 71) actually mention how you would create a promise. I can see this being pretty unclear while reading online. Any suggestions on how to make it more straightforward?
You may have missed the part that said it was written for Chrome and will work with any modern browser (meaning IE is now considered modern =))
Who is we? People who are stuck with deadend web dev jobs that have you spending hours moving a pixel over? I've been there, try and find a way out.
Fortunately I'm on the dev side rather than design.
Uh what? It's clearly \n and not \\ The downvoters are obviously as illiterate and ridiculous as you are.
I know this is troll bait, but really... IE 10 isn't IE? I'm not gonna try and figure out what the hell you're talking about here. *Modern* web application development isn't about compromising for older browsers. Many major sites don't support IE 6 at all and many web apps don't support IE at all; it comes down to your audience. The world has apparently stopped for you, since this isn't new technology at all. It's been around for ages and newer versions of IE now support some really cool APIs. I don't know how short-sighted someone has to be to not understand how this is a good thing. I'm not a Microsoft evangelist and in fact the reason why I developed this demo on Chrome/OS X is because I absolutely hate IE/Windows from a user experience perspective. I would have thought /r/javascript would find appreciation in progress, but instead it appears to be a bunch of angsty dead end web developers who are still complaining about IE 6-8.
Actually, the WebGL decision was made on the basis of security, not bias: http://arstechnica.com/microsoft/news/2011/06/microsoft-no-way-to-support-webgl-and-meet-our-security-needs.ars
Absolutely and I'm sure it has nothing to do with the fact DirectX competes with OpenGL?
I've just stumbled onto this: http://stackoverflow.com/questions/2160100/what-is-the-benefit-of-a-promise-abstraction-in-commonjs So it seems to me that you can get chained async without the multiple levels of unmanageable indentation and boilerplate. Still not 100% clear on what's happening under the hood. My best guess is that calling `then()`, will attach the passed function to the end of a function list and will get called eventually.
[JS Promises](http://blogs.msdn.com/b/ie/archive/2011/09/11/asynchronous-programming-in-javascript-with-promises.aspx), explains promises pretty well. Or google any of the tutorials that come with the major JS libraries.. jQuery, Dojo, most of them support it. It's nothing more than another way to look at asynchronous code, the "then" (callback) comes from the implementation of the pattern, not the language itself. To OP, the slideshow is nice.. being honest I learn better when the info is presented all on the page. I find myself wanting to look back at your other examples and send too much time flipping between slides and getting back to where I was at, is there any way to display a small thumbnail of the slides somewhere on the navigation? but nice job! tldr; Promise is a Javascript pattern that returns an object that has methods that get called when the original function(s) have either finished processing or occurred some error (usually called "then"). 
Bullshit. They always make up some reason why they can't support something that they don't want to support. The only reason Microsoft has ever embraced standards was in order to subvert, coopt and/or destroy them. Anyone remember what happened with Java, Fahrenheit and every other technology MS has "cooperated" on?
Wrong decade.
To get under the hood head to your nearest favorite open-source library.
Yeah I have. More code than I would have expected.
Nope. They appeared in Netscape 4, and stayed there. By the time Netscape 6 came out, they were gone.
You can probably roll your own a lot easier, that code has to account for all the possibilities that people can come up with. But I'm like you I like to see what it's doing before I use it. P.S. There are people who will swear by them, but I haven't actually needed to use them. If your not chaining together external AJAX calls I see no reason for the added complexity. If your chaining internal AJAX calls, you might get better results rethinking the data model and doing it in 1.
Its the only way I know of to get this functionality. I'm not sure how weird you are for not using it.
&gt; I abandoned about a third of the way through. Somehow I bet he does the same with most of his programming projects. Who claims superiority but doesn't understand that patterns can be applied anywhere in programming?
Absolute positioning and z-index happened. Layers went the way of all presentational HTML and died with that generation of browsers. Of course you can't be sure a monster is dead until you've torn off its head, so I'm pretty sure there's still some designer out there crafting layered pages in his trusty Netscape Navigator.
We is everyone in a market that still has a major share of users using ~~legacy browsers~~ MSIE. The feature support of MSIE 10 is meaningless because the biggest share of MSIE users is not using the latest generation(s) of MSIE. The reason people only talk of MSIE 6 to 8 when they say MSIE is that MSIE 9 and 10 neither matter in terms of market share, nor are they bad enough to cause a problem. There's a difference between a design job with a company that doesn't understand that browsers are different (or a company that provides services to such companies) and a dev job with a company that simply needs its services to work for enough users not to loose too many potential customers. For most of the companies out there it's simply not an option to rely on the cutting edge of web technologies unless they also provide a feature-complete fallback. And that effectively means extra work to implement functionality you already have.
Did you read the article?
yes, I read it months ago when it was new. keep in mind this is from the same company that unleashed ActiveX on the web... something that many companies have yet to recover from. When they say they "can't" make something secure, they are lying. They will certainly find a way to expose a competing DirectX based web 3d solution and they will provide some compelling sounding argument about why it's more secure. I am ex-Microsoft btw. Don't drink the Kool-Aid.
Agreed the browser is only as good as the worst version you have to support... I still have to make IE6 work because we still get a lot of revenue from people using that stupid browser. Don't get me started on the quirkiness that comes with the compat and document mode combinations in IE7/8/9
http://www.youtube.com/watch?v=EsCyC1dZiN8
Except that Microsoft are *far* from the only people expressing security concerns: http://en.wikipedia.org/wiki/WebGL#Security http://www.contextis.com/research/blog/webgl2/ It's not like [John Carmack](http://twitter.com/#!/ID_AA_Carmack/status/81732190949486592) knows what he's talking about, right?
Don't worry. Every version that's out since IE6 is going to be supported for like a decade. In 5 years we'll be dealing with something like 20 concurrent versions of IE. meanwhile every other browser EOLs their older versions within months of the subsequent version's release. 
They offer hardware accelerated 3d graphics in SilverLight which would have the same probelms as WebGL, so their reasoning is specious.
The existence of security concerns is not debated. It's just bullshit to believe that Microsoft would actually implement it if not for the current security issues. Microsoft has been trying to kill GL since Direct3D 1.0. You honestly think they would just roll over and let GL become the new defacto standard? Microsoft COULD help provide solutions to the security issues if they were serious about an open 3d standard. They will not because they are not.
"oh, encountered some browser because it supports X, better compensate for supposed bug" -- this is bad call.
Dems strong words coming from the only browser to support probably the biggest hole into your system: ActiveX. 
You must realize that public websites that *must* be accessible can't be using funky things like the latest/greatest HTML5/etc.... That's not to say you can build some pretty cool things with them -- but if your requirements state that it *must* work for everyone who accesses the page, using these things are out. So say your "modern web application" is a government application where people log in to, I dunno, do stuff... like legal stuff. Now imagine it doesn't work in older versions of IE -- well you tell people to upgrade, but they're in corporate environments where they can't, or they have financial limitations that keep them in WinXP/IE6, who knows. Well shit, you've got yourself a problem. In this paradigm, IE, despite making numerous improvements towards web standards in the latest versions, still has those godawful browsers that are still in use today. This really isn't too much of a problem -- you can hack in any sort of "IE-only" stuff with conditional comments or CSS behaviors. I guess my point is that the Web is a big place filled with lots of people -- because of one project where you get a "hole in one" in that it *just works* in IE doesn't mean that everyone doesn't still need to deal with all those assholes using IE&lt;9.
eval(), turns valid text into Javascript. You can use that on the responseText property of the returned object. Here's a simple example: function evalRequest(url) { var xmlhttp = new XMLHttpRequest(); xmlhttp.onreadystatechange = function() { if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) { eval(xmlhttp.responseText); } } xmlhttp.open("GET", url, true); xmlhttp.send(null); } Can I ask what your trying to do with all of this? There might be a better way to get it done. =) 
Think of it as being able to build a task, throw it at something that will handle it, and you can continue on with the rest of your work, knowing *at some point* that task will be finished (that's the promise). Examples could be - like what Facebook has right now -- that live feed business. What it really boils down to being is an event that fires and uses *then* to do the work you defined it to do - but you can chain these events - so that you don't get stuck with a whole crapton of callbacks to handle events and have to depend on the callbacks not getting confused or having all the chained parts they need.
[load &amp; unload](http://www.quirksmode.org/dom/events/load.html).
thanks for the comments, I will definitely check out the rich content editor.
Yup, I really tried to emphasize the chaining and bubbling benefits in the slides. The equivalence between broken promises and thrown exceptions is amazingly helpful, cf. slides 62--67.
plus....who *doesn't* use jQuery? On the flipside, [underscore.js](http://documentcloud.github.com/underscore/) is a not-well-known gem that I love, as well.
&gt; returns an image with an onload -&gt; that onload makes 2 requests What the hell?!?
The load event only fires on completion. 
Maybe you should read the OP then?
Agreed, it's really nice how the stuff that IE 9 and 10 supports, it supports really damn well. Working on my site, I encounter cross-browser bugs pretty much every week, mostly around the canvas. About 90% of the time it's in Firefox to blame, with Safari, Opera and Chrome making up the rest. I have yet to find a single canvas bug in IE 9. The performance is also top notch. There are lots of places where Chrome is way faster then anyone else, but there are also plenty of places where it's actually quite slow. As a result it's easy to get good, but mixed, results. When I test in IE 9, I find my canvas stuff always works to a very smooth and fast standard. The only thing holding me back is the UI (pretty, but not as functional as Firefox or Chrome) and the lack of plugins. My ultimate browser would be Firefox using Trident (and IE tab doesn't count since it's not fully integrated in the page). IE 9 is the only browser that works 100% across multiple desktops on Windows!
Hm... once you're connected to a network the devices are there, and you should be able to see them.... If you have some lower-level sockets or network libraries to work with in your programming environment, surely you can work something out. Not with Web/javascript though ... these can't access user's filesystem without some sort of activex trickery, which of course is proprietary IE -- even then, that's a huge security hole.... Oh? You want me to activate the filesystem object? Sure why not, sounds legit.
Yeah, pull this computation out of PHP/Apache and put it into a daemon. That daemon could run PHP or any other language.
Been using IE 10 previews for some months in Windows 7 - why wouldn't they have it for that OS?
The code in 74 is really beatiful compared with 73. I spend 4 hours this mooring implementing something with async.js, now this presentation makes me want to do it with Q just to compare them
Listen, I don't even support IE in the product I author, but claiming that vendor EOL is some kind of decision that will impact end-user behavior is naive at best. IE is horrible, but msft's sunsetting of support is not one of the issues I would put at the top of my list.
The latest release forces you to download to the Windows 8 preview.
IE9 is ok, before that it sucks
Rockout with your kockout
How was this accomplished? How did you get JavaScript (not Flash or Java or ActiveX components) running in a web client to act like a port scanner and open TCP connections to arbitrary IPs on arbitrary ports and get meaningful responses ? Please make the response as technical as you possibly can.
Image tags have really good error callbacks. They respond nicely to 404's and timeouts. If you set the source to http://192.168.1.1 or http://10.0.0.1, you'll likely get back an error fairly quickly. If you try a computer that isn't on the network, the timeout will be longer. So, by using a timing attack, you can determine the up/down state of an IP. And because the IPs are relative to the browser, not the server, you can hit IPs behind a NAT or firewall. Trial and error determines the subnet, then it's just a brute force on the range. That's the IP scan. The port scan is similar, but a bit more statistical. Again, it's a timing attack. A blocked port comes back faster then a filtered or open port. So, it becomes a matter of relative timings to determine what is open and not. I picked commonly open and blocked ports in my trial and it worked pretty well. So that's port scanning. The router hack was a bit more tricky, and easy to defend against. Once you figure out the subnet, you can guess the router. To do this, try loading up some common images on the login page. For a better fingerprint, you can load up http pages, but this again is a timing attack (since it fires an error). Once you fingerprint the router, you can create iframes that submit forms to the login page with default or common usernames and passwords. For validation, you can load up a secure image, or do a timing attack on a secure page (an invalid login would do an http forward, and would therefore be slower). Once you are in, submit a form to open the ports you want opened. That's how the port holes get poked. If you had a lot of time, or a large network of people adding fingerprints and scripts, I bet this could be more then just a proof of concept. This is potentially very dangerous in the wrong hands, which is why I never released my code to do it. The other major downside to this attack is it's slow. Very slow. Most people aren't on a page long enough to determine the IP range, let alone scan and attack. Hope that answers your questions. 
I sort of "discovered" jQuery Deferreds lately and I've found they are extremely underrated right now. There are a few things I wanted to point out. * In jQuery the "success" and "error" methods are really aliases for what I personally think are the "more promisy" sounding "done" and "fail" methods. * In jQuery, the $.ajax() function actually returns a deferred. So you could do function loadSomeData() { return $.ajax({ url: '/some-url/, type: 'get' }); } loadSomeData().done(doSomethingElse); * You didn't touch upon the pipe() method that was added to jQuery 1.6, which I assume is because you usually do something very similar using Q instead. For example, take a look at [a prototype I wrote for work](https://gist.github.com/1332856) recently. At the very bottom is the actual function that kicks things off, using jQuery pipes: function inviteToWatch() { $.when(facebookLoggedInPromise()) .pipe(friendsSelectedPromise) .pipe(eventCreatedPromise) .pipe(friendsInvitedPromise) .pipe(creationConfirmedPromise) .done(inviteSuccessful) .fail(inviteFailed); } Basically the pipe method means that you can return a completely new promise and the handlers attached after it in the chain will wait for that new promise to be fulfilled. What is the equivalent to this in Q? I'll definitely be using Q in projects soon. (Maybe I'll finish my Facebook prototype using it.) 
&gt; ie doesn't suck anymore so, ie [blows](http://www.urbandictionary.com/define.php?term=blows)?
A redditor ported jQuery Deferred to underscore.js: https://github.com/wookiehangover/underscore.Deferred
Fantastic, thank you.
It's a little scary, isn't it? Not very practical, easily defended, and a hell of a lot of effort/luck. But still scary.
Your answer is pretty much evil. You don't need to use eval.
var a = [1, 2, 3,]; 
Although I didn't put this part in the slides, while giving the talk I spent some time saying "use Q... *instead* of jQuery promises". jQuery promises lose a lot of the power of CommonJS promises (as implemented in Q): * jQuery promises aren't composable in the manner shown in slides 49 and 51 (and then used implicitly in subsequent slides); instead you have to use the extra `pipe` extension. (See below.) * jQuery promises don't bubble errors (slides 62--67) without using `pipe`. * jQuery promises can be fulfilled or broken with multiple values, which messes up the return value &lt;-&gt; fulfillment value and exception &lt;-&gt; breaking value equivalence. * Minor nitpick: nonstandard methods like `success`, `error`, `done`, `fail` instead of just `then`. The equivalent using Q is: function inviteToWatch() { facebookLoggedInPromise() .then(friendsSelectedPromise) .then(eventCreatedPromise) .then(friendsInvitedPromise) .then(creationConfirmedPromise) .then(inviteSuccessful, inviteFailed); } As I mentioned above, this makes use of the composability of CommonJS promises: if a `then` handler returns a promise, then the result is a promise that is fulfilled if and only if both the original and the handler-promise are fulfilled, and broken if either of the two is broken. Since jQuery doesn't have the return value &lt;-&gt; promise fulfillment equivalence, you have to use `pipe` to tell it you're opting in to such a semantic. That said, it's great that jQuery has helped get the promises concept out there! I just wish they'd been a little bit more aligned with CommonJS in their implementation, not only for standards-wonk reasons, but also because CommonJS promises have such great benefits...
I know this is a javascript subreddit, but talking from the server side situation: It is not ideal to use PHP for long polling and comet programming. Typically, apache forks a new thread for each php request, and this can lead to exhaustion on the server side very quickly, making it very hard to scale. What you can do is deploy another server for just handling these long polling requests, and base it on Java or NodeJS. Just look up php and comet programming to research more on the subject. 
Didn't you mention you used socket.io? I thought it was supposed to support as far back as ie6.
Yup, but this is using WebSockets not the fallbacks. Personally I just prefer the API. Not sure anything else exists that uses the latest draft spec and have a nice API.
Have you seen kaazing?
That seems like kind of a rip off tbqh. $6000 for 1000 connections seems like a joke unless I'm missing something :-/
I had no idea what their pricing was, I only found out they existed today. Guess I can cross that off my list...
Agree, php is not the best tool for the job
haha yeah. :-p
 &gt;Application Error &gt;An error occurred in the application and your page could not be served. Please try again in a few moments. &gt;If you are the application owner, check your logs for details. This is blocking me from finding out what non-blocking means.
If your using the image, such as in a game, then you'd want to know if it's loaded, before you start it. Even mundane things, like changing a user avatar, can't be done in a _truly_ seamless way (with no partial loading or sudden image popup), without knowing when the image is loaded by the browser. Using onload with iframes also allows cross-browser AJAX file uploads.
Lol, you people are literally the scum of the earth. Good luck trying to solve fuck all. Bunch of ungrateful and impetuous wankers!
There was a screencast available in spanish covering Lungojs (was probably meant private). Sadly it's been deleted. I just quickly skimmed through it as I dont know spanish, but it looked very impressive. I particularly liked how you define the views with html5 tags, like &lt;section&gt; etc. It made it extremely easy to transition from one view to another. There's also a Javascript API that comes with it, but there wasn't much revealed. My impression was that this is much more lightweight than jquery mobile, etc. It didn't try to emulate a native looking application as hard as jquery mobile or sencha does, it came with it's own unique styles. It probably can be paired with PhoneGap to get access to native features, so this is very promising. I still haven't had the chance to get into any of the popular mvc frameworks like backbone or spine, although Lungo looked very intuitive to use.
Why don't you replace document.getElementById(stage).innerHTML=xmlhttp.responseText; with parseInputs();loadXMLDoc(); or with eval(xmlhttp.responseText); ? WTF are you trying to accomplish?
I'd imagine NodeJS + Socket.io being fabulous for this.
I don't know if I understand your point. As a developer, if a browser publisher stops supporting a browser, then so do I. It doesnt matter if an end user decides to be willfully obstinate. I think you're suggesting that we need to be in thrall to people who refuse to upgrade. I think THAT is naieve. 
I wrote a blogpost about using the coroutine pattern to prevent callback spaghetti a while back. I wish more javascript engines would implement iterators/generators (right now it's only firefox): [async workflows in javascript with iterators and generators](http://matt.bridges.name/archive/54)
As a Rubyist, I dislike the terse syntax of Coffeescript too. Coffescript is like the bastarrd child of Python and Haskell for me syntax-wise. 
Hmm, that's quite a bit nicer than the ES Harmony pattern with `function*`. I hope they get their act together so that you can do something more like the Firefox version than the ES Harmony version I show in my slides.
It is possible to detect if *something* is there, detecting what it is is another matter entirely though and depends heavily on the device having a webserver (I wont go further than that). Basically have a script generate frames/img objects/script tags to common local network addresses and/or ports for routers. EG: generate connections to 10.0.0.x, 10.1.0.x, 192.168.0.x, 192.168.1.x, etc. You can expand that further by picking device unique urls, so you could in theory detect different routers this way. If the address is invalid it should take a while to time out, First address block that returns something is the one to scan more in depth, with img/script tags you get the bonus of errors being returned as well. You can also pick up network attached printers and a few other types of devices like this but again determining the exact device depends on a number of factors, mainly knowing device specific urls. In short doing this via javascript is going to be like hitting the network with a sledge hammer in the dark. The only way to reliably detect all devices is via a installed/local app scanning the network and hoping the network does not have client isolation.
But not really, not with proper knowledge. Prior to ECMAScript5 how would you parse a JSON object (e.g. IE7)? I would escape the string with regular expressions and run eval(). I see no evil, just code that can parse data multitudes faster than the built in XML DOM parser.
I figured out why its firing more than once. &lt;div id="container"&gt; &lt;img onload="doSomething();" src="1x1.gif"/&gt; &lt;/div&gt; Whenever anything is added to the div using: document.getElementById('container').innerHTML+='new content' The onload (already in the container) will fire again. I was unaware of this.
You use eval() when you have to, not just because it's easier to write. I would use json2.js or an equivalent if I needed to parse JSON, which is pretty much what you said you would do, but not what you wrote in your code above. Most browsers support JSON natively now.