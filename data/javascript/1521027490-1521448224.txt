It seems its MAC syntax only https://coursetro.com/posts/code/55/How-to-Install-an-Angular-4-App
That makes sense. I do hope npm adopts that feature as it seems really useful.
I've never had a yarn lock file to be corrupt. How does that happen? We use yarn cause we needed lock files and we never saw the need to go back to npm. 
This is a personal preference but I used a CORS proxy. So you can put this url before your api requests. https://cors-anywhere.herokuapp.com/
And for Linux https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html#Brace-Expansion
Why dont you just write: console.table(); And let everyone rejoice?
why should I avoid using className again? 
I've been trying to switch to Yarn lately but currently a bug with optional dependencies is preventing me from doing it. I want to switch from npm basically because I don't trust anything that the npm guys do.
Another useful trick with console.table is that you can pass an array of strings as a second argument, listing the columns you want to see. (This is useful if you're trying to compare just a few attributes from a complex object.)
yep thatś right itś a mac thing, i was trying it on linux
it tunred out to be a macos thing: https://coursetro.com/posts/code/55/How-to-Install-an-Angular-4-App
Nice. I had no idea. Thanks!
'Your benchmark isn't actually testing what you think it is'. You right ! I got it now. Can you give me a example where `Array.concat` is shining ? I mean, an example where I can't replace it by `slice + push` ? Thx again for the help.
You right ! I got it now. Can you give me a example where `Array.concat` is shining ? I mean, an example where I can't replace it by `slice + push` ? Thx again for the help.
[At last!](https://m.popkey.co/2e8bd5/JLk7A.gif)
&gt; everyone should learn F# I've been with you until that. F# no.
this guy gets it
The comment you replied to has just such an example. When you need to concatenate two arrays, the native `concat` method is the fastest. When you need to copy an array, the native `slice` is the fastest. And when you simply need to push an item to an array, the native `push` is of course fastest.
It's actually a vscode extension to help you create components using the same structure you already use inside your projects. It does a "copy and paste" of the component, changing the component name to the new one, to save you some time. You can check for more details and a gif detailing the process at the github link https://github.com/GabrielDuarteM/copy-paste-component-vscode
I hate how react folks like the author always assume everyone uses redux for state management.
What else do people use it for? If it's just to avoid passing props down to deep children, I'm guessing the new Context API will solve that. Is there something else redux is good for?
Any feedback would be appreciated 😀
i used coffeescript for a year or two and really loved it at the time. now, on the other hand, i would put it in the dread category. as someone else mentioned, it's mostly because i consider it legacy at this point. 2-3 years ago i switched back to JS/ES6, since JS had implemented most of the features that i had switched to CS for in the first place. so once i had fully made the switch, i ended up with several instances of messy coffeescript code, and the further i got from it, the more annoyed i became when i had to fix a bug on a random site that still ran CS. overall, i didn't dislike using the language itself _at the time_, it's just the i don't think it's necessary any more, and it's kind of pain to write/edit it when you're not constantly using it.
Yes, have this working in production with window.postMessage, but keep in mind you need them on the same domain. Check out https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
If you want hand on experience of the difference, while using javascript, try using the CrxOop library. Try building classes for the classical oop, and structure for the prototype based inheritance. Search for CrxOop on google. I am the developer, if you need any help, feel free to ask.
Easy, write a userscript to search through each link on the page, take the data from the inlined Javascript, and make the `href` a proper link.
Ok excuse my ignorance, but could you provide an example of how to do this. I think I'm following what you are saying, but not sure where to start.
Yarn's ["offline mirror" feature](http://blog.isquaredsoftware.com/2017/07/practical-redux-part-9-managing-dependencies/) is a huge win. I don't understand how people are okay with having their build process go pull down packages from the internet, even with a lockfile. Having them all locally cached directly as part of the project solves so many potential issues.
Look up Tampermonkey or Greasemonkey, then create a new script with the @include referencing the pages you want the script to run on.
Ok I've got Greasemonkey installed. I'm not sure what the script would actually include. Like I said I know very little about Javascript. From what I'm gathering, I basically need a script that changes this: &lt;a href="javascript:openWin('/TDNext/Apps/28/Tickets/TicketDet.aspx?TicketID=1248',%20992,%20800,%20'TicketDetail1248');"&gt;Link Name&lt;/a&gt; Into this: &lt;a href="https://servicedesk.domain.com/TDNext/Apps/28/Tickets/TicketDet.aspx?TicketID=1248"&gt;Link Name&lt;/a&gt; When I click on the current link that's the url that it navigates to.
It seems to me I just need a script that pulls the TicketID as that's the only thing that's unique to the links and changes the inline Javascript to an href link.
It works if the target of the dispatchEvent is the window (much like your postMessage example) but in this case, the dispatchEvent is made on the frame "document". And it's a source code that I cannot change.
I believe you're misreading /u/Capaj. I think they're saying "Uses Redux for state management, as opposed to mobx (for example)"
I'm not sold on the usefulness of "freeze" to prevent accidental property reassignment, since no exception will be thrown. I think I'd rather take my chances that the reassignment will cause a runtime error. (Better than that though, mark fields as "readonly" in Typescript.)
Self solved after a few hairs pulled contentDocument does work, but is not loaded until everything else is rendered. Putting the code that adds the listener in the iframe onload, makes everything work. iframeTag.onload = function() { let iframeDoc = iframeTag.contentDocument || iframeTag.contentWindow.document; iframeDoc.addEventListener('sendClipboard', this.onSendClipboard, false); }; With that, both pages send and listen event on the same object (iframe document). Without the onload, the eventListener would be added to the parent document.
Doesn't that mean compensation would be first? You first want to get a living wage, and after you are at said compensation you are seeking then culture is what you want? Kind of flip flops after a certain point.
Sounds like a good time to use a regular expression.
Could you provide an example of how that expression may be written?
@kentcdodds and @wesbos are also great accounts to follow. It might not be daily, but weekly dev newsletters are also a great way to get a good overview of all the cool and popular things that happened each week. Some good ones here https://twitter.com/housecor/status/859108551926611968
Ah wow, that is much nicer. I thought I was being clever with the requestAnimationFrame solution, but the chained promises is really neat. I've used chained promises in the past to handle sequential upload requests. I still have trouble understanding exactly what is happening. Promise.resolve() returns a resolved Promise. Promise.then() resolves when when startProgress() resolves. And every time the listener callback runs, a new .then() is added to the progressQueue promise.
It occurs to me that you could use the Nexmo Voice API to call someone up and read them a message, so you can actually interface with those APIs from your favourite programming language :-D
Ohh, thanks lol.
Oh, nice I have not seen that feature before, we already do this with Go for our backend using dep and a vendor folder. I agree doing this is a much better idea than pulling packages every build.
Thanks for the tip with wsrun, we have been keeping lerna to run our scripts but don't use any other features, this looks like a more lightweight alternative.
Can inline styles replace CSS. Yes, but why?
How is this a pattern? Immutability is a concept, not a pattern. I understand it's applied in javascript, but even RORO is not really a pattern, but advice. We can argue semantics and such, but I do not see how freezing is a pattern, or "worthy of being called one".
&gt; I think I'd rather take my chances that the reassignment will cause a runtime error. This. However, word of caution: Don't turn it into exception driven development, please. 
http://2ality.com/ 
A little background info: * Github page is here: https://github.com/benjvmin/Calculator * Vue.JS and single file components are a great development experience, definitely want to dive into some routing for future web applications. * Building a calculator is definitely a good project to help get your hands dirty with string / number methods in javascript. Definitely recommend it to anyone wanting a project to dive in to. * It’s the first time using the localStorage API, I haven’t really had a chance to use it before this, but it’s a really cool API. * I felt dirty using eval() so I used a function constructor instead (so I could sleep better at night), I did not feel like writing a parser myself for a hobby project * I used CSS Grid &amp; Custom properties extensively for this project, it is without a doubt the future of CSS.
I find `console.trace()` particularly useful from time-to-time.
Updated, thanks!
nice! one thing: on a macbook, scrolling using the touchpad is way faster than normal, and when you get to the end it starts jumping around
I... uh... do you need help? 1) code needs to be wrapped in a function in order for `return` to make sense 2) `for in` loops don't work like that with arrays... Try this instead? function happyPIDay() { const phrase = "Can I have a large container of coffee right now please"; let out = ""; for (let word of phrase.split(" ")) { out += !phrase.indexOf(word) ? word.length + "." : word.length; } return out; } console.log(happyPIDay()); // 3.1415926536
Thanks, no i don't need help, I just never adjusted the auto flair. This was a quick copy-paste job since I wasn't allowed to post a screenshot. So never mind the return, indeed doesn't belong here
Ah... you're right, it does work... however, I don't think `for in` should typically be used for iterating over array elements. From MDN: `Array indexes are just enumerable properties with integer names and are otherwise identical to general Object properties. There is no guarantee that for...in will return the indexes in any particular order. The for...in loop statement will return all enumerable properties, including those with non–integer names and those that are inherited.`
It totally depends on what your source array is. In this case you are literally creating the array in the previous line with the split() so your array's indices are 100% predictable. In fact, in the JS tutorials my wife is following, they totally encourage the use of for..in using the index as iterator. I must say it's a lot less annoying than the more conventional way way of defining a for loop.
That's right. The initial resolve() is just a starting point for the chain that doesn't do anything but gives us something to call then() off of. The first then() called off that gets called immediately (immediately in the asynchronous sense) which then calls startProgress to start that operation. Any additional then()s get added to that chain and the next one won't get called until the current startProgress finishes and resolves. Once they all finish, then you're left with a single resolved promise which will behave like the initial resolve() and will call any additional then() that might be added later right away. What's a little tricky about this is that you're adding to a chain dynamically rather than all at once which you usually get with something like. And to make this work you have to keep re-defining the promise object to the result of a then() call since that represents the next link in the chain. progressQueue represents both the list or progresses and in a way, currentProgress, though it's more like lastProgress, or the tail location in the list that you're appending any additional progresses you're adding when click that button (replacing push()). The actual currentProgress is automatically taken care of as a result of the promise chain resolving at the head of the list. I don't know if that helped or made things more confusing 🙃 
&gt; and how do I get my time back? Use JavaScript. Because you can do anything with computers!
I mean I guess so yeah, I do need enough to survive like anyone else. But in the grand scheme of things if it was a job offering 20000 above a comfortable wage, and a good culture, I’d choose culture. 
Haven't decided on anything yet. But I'm inclined towards making a node.js app and bundle it with nw.js into a desktop app. Something that can take advantage of both the power of node.js and the acces to local files on the computer. 
Yeah, definitely makes sense to choose culture if your options are all above a livable salary.
I follow the below sites, really cool ones:- http://javascriptweekly.com/ https://ponyfoo.com/weekly http://javascriptkicks.com/ 
I wish WebStorm had better module support. By that I mean being able to recognize more modules and not throw me a warning everytime I import something. Other than that its great. 
Jumped on the yarn train the moment I could, due to lockfiles. Haven't encountered anything that yarn could not do, no issues with lockfiles too. With npm bugs surfacing with what seems to be every release, I would not switch unless there was a development-blocking reason to.
Huh, I was working, off and on, on something similar, which is basically a framework/UI over [document.execCommand](https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand). A couple of things I noticed on your demo page (https://jaredreich.com/pell), not sure if your 1.0 fixes it or not: * Clicking on bold/italics/underline/etc takes focus from your cursor location and you have to click back to where you were at (maybe this was fixed already?) * The italics icon doesn't highlight when you're using italics and when you're in an italics tag * When hitting the paragraph button, you're basically locked into using paragraphs instead of regular new lines (I think you're using divs?), which only leaves refreshing the page 
JabaScripto!
You mentioned you had done some simple HTML5 Games, do you have them somewhere online? I am evaluating a small business opportunity and if possible would like to see them or some screenshots if you have them. Just let me know.
I use GraphQL and [Raj](https://github.com/andrejewski/raj) which for the purposes of this discussion we can call a Redux like. In my programs, GraphQL as just another data source just like REST; I put it behind a service contract and my UI code only sees messages, some containing one-off and subscription-change data. I definitely still need something to handle the state of my UI, and going back to setState or any other internal state mechanism in my views is a step backwards to me. I don't think GraphQL is a good replacement for UI state management, but definitely helps with client-server state management.
I fixed the 1st point in v1.0.2 https://github.com/jaredreich/pell/tree/v1.0.2 Thanks again.
I fixed the 1st point in v1.0.2 https://github.com/jaredreich/pell/tree/v1.0.2 Thanks again.
Switched off NPM to yarn back when NPM took a day and a half to install a package - since then have seen/helped fix a number of issues caused by the NPM org (mostly extremely flakey package hosting), and followed a couple NPM issues which left me with the most sour taste in my mouth since I tried contributing to KDE back in the day. I tend to use GitHub as an alternative to an NPM repository whenever possible even if NPM “catches up” (it basically already has) I’m fairly committed to never relying on that organization ever again.
Why would there be an accent on an s
It had to be fast and english isn't my native language. So one comes to the other. ;-)
No im just combining an apostrophe with letters to save on bandwidth
&gt; Care to explain: "Then there's the fact that this In JavaScript is dynamically bound."? I'm guessing he's referring to how by default `this` is passed to a function lazily when the function is called using the method call syntax (ex. `object.method()`). Since the same function can be attached to multiple objects, its `this` value is dynamic.
https://www.youtube.com/watch?v=2RvRcnD8wHY&amp;feature=youtu.be
Sure, here's my [mini portofolio](http://www.html5gamedevs.com/topic/28012-phaser-dev-available-for-hire/) (it has links to my personal games and screenshots).
[That is correct.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)
Thanks, I will try posting there
Sublime IS free. It will pop up every now and then to ask you to buy it, but you don’t have to. And I don’t need to pay for my tools, because my employer does that for me. LoL
Why not use ES6 modules? If you're targeting browsers that don't support ES6, you'd still want a build step anyway.
The professional has entered the building... Thank you very much, I got it working! Also thanks for the tips! I'm not actually using that piece of code in my program, I just quickly added it to make it more clear in the fiddle. Nevertheless, I didn't know those things so thank you
Wow, did't know this API is enabled during design mode and wondering how you have achieved so tiny size. Nice :)
I just mentioned this in another sub but any of the LambdaSchool classes. They are free and the material provided can be consumed anyway you want. [Check it out here](https://lambdaschool.com/free-course-web/) It helped me better understand front-end design as well as sharpened up my JS skills. I would do their classes while I was on the bus and en route to my previous job. Spent about 20-30 minutes each day doing that and after a few months, I applied for and got my current job role (front-end dev)!
Hi /u/RedditGeneralUser, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I'm glad to hear you were cautious around `eval()`. It's worth taking the same care around `new Function()` because it can open the same security holes. (in the browser, so can `setTimeout()`, weirdly). I like how you allow a very narrow set of user input. It makes `new Function()` much less dangerous. One fun thing I did find: If you tap `+ = ( ) =`, you can make the calculator execute the Error constructor and display `{}`.
I love it when things are done essentially on a dare, the impracticality aside it's good to show people what you can go without.
the function you put inside of `myArray.forEach()` gets called on every element inside the array. So in your example, `function(sentence) {}` only has access to as single sentence at a time. I have to run, but here are some docs on MDN with more detail: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
### [On GitHub →](https://github.com/bitjson/typescript-starter) Hi all, [Typescript-starter](https://github.com/bitjson/typescript-starter) is a minimal boilerplate generator with many of the most popular development tools pre-configured and ready to use. (testing, coverage, typedoc, tslint, prettier, standard-version, etc.) The CLI lets you get started quickly, just type `npx typescript-starter` to install the latest version and run the interactive generator. (The `npx` utility now comes with `npm`. If you have Node.js, you probably have `npx` already.) The interactive mode lets you quickly select from a number of configuration options, and I plan to keep adding new options which work well together. Are there other packages or tooling options you would like to see added? Thanks!
The function name doesn't really matter (you can put one or not). For the forEach to be *useful* though, the function needs at least one parameter. When you declare the function in the forEach, you should give it the arguments you want to use, per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach If you only need to use the elements of each array, then you only need the first argument. Call it whatever you want, as long as it's a sensible enough name: myArray.forEach((item) =&gt; { // tbd }); `forEach` will call that function once for every element in the array, the first argument to the function being the element in question. const myArray = ['foo', 'bar', 'baz'] myArray.forEach((item) =&gt; { // tbd }); Which would be equivalent to function theForEachCallback(item) { // tbd } theForEachCallback('foo'); theForEachCallback('bar'); theForEachCallback('baz'); It's somewhat like a very limited for loop, except with automatic iteration, automatic abstraction, composability, and function scope.
This is great and exactly what I need. Thank you! I look forward to digging into these books.
Array.forEach takes a function as first parameter. This means that you can write this : [1, 2].forEach(function() {}); This function takes 3 arguments: the current array element, the index of the current element in the array, and the array itself. This means that your function will look like this: function(element, index, numbers) {} forEach will call the above function for each of the elements of the array. And each time the arguments of the above function will change. You first will have (1, 0, [1, 2]) and then (2, 1, [1, 2]) 
Hello. I am the author of that article. Thanks for the feedback. I just wanted to point out that the example code is an ES module (note the "export default" statement at the top). In ES modules "strict mode" is turned on by default. And in "strict mode" re-assignment does indeed throw an error. I made the assumption that anybody using this pattern would be doing so in an ES module. But I realize that may not be a sound assumption. I will find a way to update the article to make this more clear. Thanks again for reading and sharing your thoughts.
Look at your average WebPageTest waterfall pattern on a site using HTTP/1.1 versus HTTP/2. Bundles aren't as necessary, but sequencing them and right-sizing the size of your bundled JS files are important. Lots of good web perf documentation by Ilya Grigorik and others out there that goes through this.
I prefer `addProductToCart(product, cart)` (where product and cart are POJOs) to `cart.addProduct(product)`. Javascript "classes" create more issues than the solve IMO. Pure functions that operate on immutable data with clearly defined schema leads to a much more structured and predictable application imo.
This make make day so better!!! :0
Hi all, [Typescript-starter](https://github.com/bitjson/typescript-starter) is a minimal boilerplate generator with many of the most popular development tools pre-configured and ready to start building. (Testing, coverage, typedoc, tslint, prettier, standard-version, etc.) The CLI lets you get started quickly, just type `npx typescript-starter` to install the latest version and run the interactive generator. (The `npx` utility now comes with `npm`. If you have Node.js, you probably have `npx` already.) The interactive mode lets you quickly select from a number of configuration options, and I plan to keep adding new options which work well together. Are there other packages or tooling options you would like to see added? Thanks! --- ### [watch the animated demo on GitHub →](https://github.com/bitjson/typescript-starter)
It seems like one of the big pain points this change alleviates is collecting data from many different sources and transforming it so it's consumable for the UI. One of the ways we've solved that where I work is by having dedicated view APIs for our applications. That way the app can just ask for the data it wants and gets back a nicely formed object which is optimized for UI consumption.
Oh, cool. But in general, why would there be an accented S character? How would that be used in a language?
Truthfully I'm glad I read MDN's documentation on eval(), I really didn't want to use it. They recommended the function constructor to use instead, and while I didn't feel completely great about it (it signaled an alarm on my linting rules), for the scope of this project, it seemed fine. I was even going to check the input with a regular expression as well, and might be something that is worth adding. Also great find on the error constructor, there's nothing replacing good old user testing, I'm going to update it later so that won't happen. Thanks for your insightful comment!
I think the Swedes use them
Move the second closing parenthesis: `myArray.forEach(function(sentence)) { console.log ("First sentence is" + sentence + "Second sentence is" + sentence) }` to the very end: `myArray.forEach(function(sentence) { console.log ("First sentence is" + sentence + "Second sentence is" + sentence) })` And things will start working, and you should quickly see what is happening. Right now the function isn't executing at all because of that parenthesis.
my question right away was: "but why, why would I do that?" Delelopers awnwer: "You shouldn't" 😂 (in README) 
Damn. Require.js. The good old days
Last I checked browser support was around 70%, so I'm in the "no, wait a while" category.
My first job out of bootcamp, I worked on a legacy codebase that used requirejs-rails. I tried (and failed) to update it to webpack as a downtime project. Reading this briefly triggered me.
think of it this way: you're collecting things in a basket (an array or node list). i like to make real-world analogies, so it's like you're in a supermarket filling your basket up with items. when you get to the checkout, you need to scan them one at a time - you can't do the whole basket at once. that's where the forEach comes in. if the basket is the array or nodelist, then for each item in the basket, you need to do something. a forEach goes through the items one at a time and does whatever you want inside the function. basket.forEach(function(item) { scanItem(item); ... do other stuff... }); not the world's greatest analogy, but hopefully it helps...
&gt;old days Tons of companies still live by it every day, and carry it into new projects. It's abhorrent.
You know, it served me well for years. But inexplicably, we have constant problems with require.js in current browsers. It should still work fine but it just fails to load modules constantly. Weirdest thing. 
1. Use FuseBox 2. Get a coffee 3. ??? 4. Profit!!!!
Your JavaScript.works-hub site looks pretty cool but is not user friendly. 1. No back arrow to back to the summary, 2. After signing up with GitHub and importing my skills - stuck ! I get the email but no way to go forward - 3. From your home page - no idea what your site is about. The chatbot element is fucking cool as hell though and your onboarding with it is also super cool. But no back button? -dk
https://github.com/austinksmith/Hamsters.js
check this out http://www.hamsters.io/examples/collatzconjecture
Technically `&lt;em&gt;` and `&lt;strong&gt;` are semantic, `&lt;b&gt;` and `&lt;i&gt;` tell the browser how to display it.
Still reading but theres a typo in the second paragraph. "constains"
You could look at Lodash's [_.template function](https://lodash.com/docs/#template) and [its source code](https://github.com/lodash/lodash/blob/4.17.5/lodash.js ) which seems to do exactly this. 😊
Nativescript
Ah, wow. Looks like they've already done all the work for me! 
👍 I was hoping that was what you were looking for. I find I use lodash just about everywhere, if you can spare it as a dependency I highly recommend it! Either way, happy coding! :D
It's the browser's default way of bolding and italicizing. You can set the styleWithCSS option to true to make it output something like &lt;span style="font-weight:bold;"&gt; instead.
not advisable. but: http://tldp.org/HOWTO/User-Authentication-HOWTO/x71.html
Just use react native
to make it easier you can imagine the code like this: var items = ['apple', 'orange', 'banana']; items.forEach( function(item) { console.log(item); } ); to write it in one line : items.forEach( function(item) { console.log(item); } ); your code didn't work because you have `forEach(function(sentence)) {}`which should be `forEach(function(sentence) {})` also you can't do `console.log ("First sentence is" + sentence + "Second sentence is" + sentence` since you only have access to one sentence at a time.
Another approach const thisdir = file =&gt; path.join(__dirname, file); const readFile = file =&gt; new Promise((y, n) =&gt; fs.readFile(thisdir(file), "utf8", (err, data) =&gt; err ? n(err) : y(data))); const readAllV4 = files =&gt; Promise.all(files.map(readFile));
Wait.. so how should I do this? 
I only need everything to appear in a random order 
So factory functions with freeze https://medium.com/@pyrolistical/factory-functions-pattern-in-depth-356d14801c91
Hmm.. maybe you're overthinking it.. The prototype is just the thing that allows objects to get things from their parent object. Like this: // constructor function - it sets up the prototype, but it's not the prototype function Person() { this.sayHi = function() { alert("Hi!"); }; } // bob is now an instance of Person and gets the sayHi function through the prototype var bob = new Person(); bob.sayHi(); // alerts 'Hi!' Questions on that?
Native for Android is Java and Kotlin. Native for iOS is Swift and Objective C. If it's not native. There are some native*ish* things like nativescript or React Native that sort of try to compile to native code, but it's still not really native.
Okay, yea that makes sense. That's all it is? I guess this article makes it seem more complicated... https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes
I mean.. you can get deeper than that, sure, but.. yeah, that's pretty much all it is. Just like the article says: "each object has a prototype object, which acts as a template object that it inherits methods and properties from"
https://github.com/marktext/marktext Next Generation Markdown editor for Mac Windows and Linux
Nice work! I just put together a no-build react environment using systemjs and babel. It also has a production build step using rollup. https://github.com/JeremyRH/in-browser-transpilation
This isn't true... none of this is true
Next generation markdown editor An Electron app for platforms of OS X Windows and Linux Features 1. Realtime preview and use snabbdom as it's render engine. 2. Support CommonMark Spec and GitHub Flavored Markdown Spec. 3. Support paragraphs and inline style shortcuts to improve your writing efficiency. 4. Output HTML and PDF file. 5. Dark and Light themes. 6. Various edit mode: Source Code mode、Typewriter mode、Focus mode.
React native uses native componets, it uses "bridge" to communicate between native side and js.
Sorry, it actually is. I know this is a JavaScript subreddit, but just because you want to write native apps in JS doesn't make it so. WebOS and Firefox OS used JS as their native framework. But truly native applications are more than just code that runs on a device. Native means first party support, full API access, native widgets and layouts, native memory handling and threading. I know no one wants to admit it, but JavaScript just isn't a tool for *everything*.
Isn't the object instance inheriting methods and properties from the constructor object? I guess I'm having difficulty understanding the difference between the constructor object and the prototype object. Is the prototype object is a template made from the constructor object? Then the object instance is created from that 'template' (i.e. prototype object).
Goes like: ConstructorFunction | | prototype | |_instance 1 _instance2 _instance3
That's why I say it's native*ish*. It's certainly not efficient to do that kind of bridge, and how much you can interact with those components is more limited. It *tries*. That doesn't really make it native.
Nice editor, looks great. If I may ask, as most WYSIWYG editors don't have it, why is colored text not supported? 
&gt; // bob is now an instance of Person and gets the sayHi function through the prototype Well... actually your sayHi is attached directly to the instance. You're not using the prototype chain here.
Yeah... it's confusing. But practically, unless you're doing deep dive stuff, all you really need to know is: The constructor function and the prototype are different. The prototype is automatically created. The prototype is what allows instances to get the properties and methods defined in the constructor. You can add to the prototype after defining the constructor, and then the instances will get whatever you added to the prototype. Example: https://codepen.io/anon/pen/EEKevN?editors=0010
You sure about that??? Wouldn't `bob.sayHi = function() { /* say hi stuff */ };` be attached directly to the instance? Doesn't `bob` get the `sayHi` function because he inherits it from Person?.. just like all the other instances of `Person`? Is that not prototypical inheritance? 
Inside the constructor, `this` *is* "bob".
That’s not prototype inheritance. sayHi is on the instance.
...when an instance references `this` in the constructor, `this` is that instance. I'm not sure what we're saying anymore...
Sort of... I'd say &gt; attaching a method directly to that instance would be more like the `bob.sayHi = function() { };` approach. And if you just console.log `this` from within Person.. you get `window`. It's only when an instance calls the function that `this` is equal to that instance. function Person() { this.hi = "hi"; console.log(this); // window console.log(window.hi === "hi"); //true } Person();
&gt; And if you just console.log this from within Person.. you get window. That's because you didn't use `new`.
A small example to illustrate the point. https://runkit.com/iantanwx/prototypal-inheritance
&gt; it What means 'jumping around' ? Can you explain to me? Thanks! And on mac or pad, I guess scrolling is more flexible than PC on windows? 
Check out the example I threw together below. That should help you.
&gt; Mobile applications built with NativeScript result in fully native apps, which use the same APIs as if they were developed in Xcode or Android Studio. Additionally, software developers can re-purpose third-party libraries from Cocoapods, Android Arsenal, Maven, and npm.js in their mobile applications without the need for wrappers. - [Wikipedia](https://en.m.wikipedia.org/wiki/NativeScript) Per your definition NativeScript just might be native.
Non-Mobile link: https://en.wikipedia.org/wiki/NativeScript *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^159977
Wonderful!
“Native” in mobile apps does not refer to the binary encoding of the executable but to the UI components used. “non-native” javascript apps render everything as html in a webview. React native uses the iOS/Android components providing a “native” user experience.
Create an object (map) of the items in the album, with track_number as keys so you can skip the lookup for each file and directly reference the item. EG: return musicClient.send(new lib.requests.Album(dir, 50, null) .then((album) =&gt; { // album is json // create an array of objects let mapped = album.tracks.items.map((item, index) =&gt; ({ [item.track_number]: Object.assign({}, item, { index }) }) ); let itemsByTrack = Object.assign({}, ...mapped ); // read files etc ... let track_number = file.match(re)[1]); // get number from file string let item = itemsByTrack[track_number]; item.preview_url = 'http://...'; // note that item is a reference to a new object, not the original one, so if you need to modify the original one, you need to use item.index let originalItem = album.tracks.items[item.index] originalItem.preview_url = 'http://...'; 
👋 I teach JavaScript for a living. Let me know if you want to jump on a Google Hangout and I can walk you through it. 
&gt; BetterCar.prototype = Car.prototype; SmartCar.prototype = BetterCar.prototype; Oh... ouch. Don't do that. You don't have one prototype inheriting from another. Instead you have just one prototype, reused over and over. For example, you're not supposed to be able to write... blueSlowCar.driveSelf() Because `driveSelf` is supposed to be a SmartCar method, not a Car method. And yet a Car instance has SmartCar methods because their prototypes are the exact same object.
You’re right, it should be Object.create. I’ve changed it.
Uh...
&gt; https://runkit.com/iantanwx/prototypal-inheritance That didn't really help.. I'm not OP, but I'm now struggling with the question of whether or not `color` is on the prototype for all cars or not. Is it?
The thing that really stuck out yo me in your comment was &gt; sort of try to compile to native code *"sort of try to"* are you saying that it doesn't compile to native code? Then what does it compile to?
No, it isn’t. 
Meh
They don't share a color value, but the all have the color property. ...which I thought was because of inheritance, but maybe I'm wrong about that.
[removed]
Yes, that's right. It's because we're explicitly setting each car's `color` property in all the constructor functions. 
All the instances of Car inherit the color property that's defined in the constructor function. I thought that the prototype is where that property could be accessed, and what allows each of the instances to have that property, but maybe I'm wrong about the prototype there.
Isn't GraphQL an alternative to REST? Why does it have anything to do with Redux? The better question is "Will React's new Context system replace Redux?"
vim
I... .. . function Car(color) { this._color = color; } const redCar = new Car('red'), blueCar = new Car('blue'); Car.prototype.sayColor = function() { console.log(this._color); }; console.log(redCar._color); // red console.log(blueCar._color); // blue redCar.sayColor(); // red blueCar.sayColor(); // blue Both (every in this case) instances of Car have a property called `_color`. They inherit having this property (I thought through the prototype) because the constructor has it. They have different values because we gave the constructor a way to set the value differently for each instance. `sayColor` is on the prototype, but each car says something different for color depending on which method calls the method. ..I feel kind of like I'm in the Twilight Zone here...
The goal is to separate the logic from the templates, but the templates have to have interpolation. I want to be able to store my templates as plain text, csv, another programming language, sql, whatever. That's why I was originally thinking about how to write my own interpolator. The other poster replied with lodash, I'm prolly gonna use that. Only thing that bugs me is not being able to specify the interpolation escape but lodash might support that too
Nope, when you set a property on `this`, you're setting it on the _instance_. I updated the RunKit snippet to illustrate this. As a rule of thumb, in the constructor, you are never modifying the prototype, although, strictly speaking, you can, in some engines.
Nice but in browser ... for studying purpose on schools it is fine, but I have doubts about real world usage
This may help: “The Four Layers of JavaScript OOP”: https://speakerdeck.com/rauschma/the-four-layers-of-javascript-oop Alas, the sound quality of the video is not as good as I’d like.
Figuratively, that’s the first line of the article. In fact it even goes on to explain how. But you’d have to click the link and read a little which should never get in the way of commenting.
If you don't use `new`, `Person` is just a bog standard function, with no `this` binding. In non-strict mode, this defaults to the global namespace (`window`).
It's already at 81% and the browsers that don't support that are no interest to me anyways. So it doesn't matter
Maybe they should rebrand to sortofnativescript and /u/omniuni can be project manger. Well, _sort of_ project manager. He'll _try_ to be project manager but that doesn't _really_ make him project manager.
React Native doesn't compile JS to native code, instead it uses an on-device JavaScript interpreter to interpret the app code (hence the ability to render native user interfaces), which can communicate with native code through a communication layer, or *bridge*. 
How did you measure that efficiency? 
I think the analogy was pretty good :)
If an object doesn't have the property you want to access, it will look for that property in its prototype object. The prototype is accessed via object.__proto__. The __proto__ property of an object will be set by its constructor function when called with the keyword 'new'. In this case, the constructor function will look for the properties in its constructorFuction.prototype property. The confusing part is, that the constructor function has a property called 'prototype' and the instance object has a property called '__proto__'. constructorFunction.prototype -&gt; will be use to set the __proto__ when called with new. instanceObject.__proto__ -&gt; will be used to mimic inheritance. 
This post goes through the issues with service worker caching, strategies that can be followed to have an ideal experience with service workers and what can be done to recover from a broken deployment. Also focusses on issues with create-react-app’s opt-out behaviour causing unintended side effects.
Can you explain why? it's interesting to learn what you think
Based on how [`tagged literals`](https://developers.google.com/web/updates/2015/01/ES6-Template-Strings) work you can create `interpolate` function that works similar. function int (...args) { let out = ''; const pat = args[0]; const subst = args.slice(1); const substLen = subst.length; let i = 0; for (i; i &lt; substLen; i++) { out = out + pat[i] + subst[i]; console.log(out, pat[i], subst[i]); } return out + pat[i]; } function interpolate (pattern, substitutors) { const pat = pattern.split(/{{[a-zA-Z]+?}}/); const substArr = pattern.match(/{{[a-zA-Z]+?}}/g); console.log(substArr); for (let [i, elem] of substArr.entries()) { substArr[i] = substitutors[elem.slice(2, -2)]; } return int(pat, substArr.filter(e =&gt; e)); };
This opens up an array of possibilities 
 const format = (str, dict) =&gt; str.toString().replace(/[\$|\?]{([^}]+)}/g, (m, k) =&gt; dict[k]) const output = format('my ${name} is ${firstName}', { name: 'foo', firstName: 'bar' }); for extra fun, curry it for templating.
The "focus trap" library, quite different from any other. It does not relay on "pressing a tab key", as usual, but only on "focus" and "blur" events. Could handle tab indexes, any tab indexes someone could use Could handle portal inside "portals" Have ability to combine different locks into a groups. Lock-n-loaded
Cool
Unless something explicitly states that it is free for a given use, or implies it by licence choice, it is always safest to either assume that is *isn't* or ask the creator for clarity before using it in such a context. In this case I would say that is definitely isn't as https://www.typography.com/fonts/operator/overview/ lists purchasing options including "web use only" without listing any free options.
Which features of the font are you looking to benefit from? If you are interested in the programmer-centric ligatures then there are a couple of F/OSS options that include a selection of those, such as https://github.com/tonsky/FiraCode
This article doesn't offer much to actually make a decision. Performance wise these frameworks are more or less equivalent, but that is one of the few difference described.
Rekked ;)
&gt; As the project grew, reloading the page in dev mode started to become unbearably slow as the browser had to reload hundreds of files every time. Why not let the browser cache the files?
My chrome wasn't displaying the site correctly.. Opened the page in Opera and was able to see prices. Thank you. (Only web font use is free, apparently)
&gt; Vue.JS and single file components are a great development experience File `calculator.vue` is a 600-line monster... doesn't sound like a great development experience to me.
can you teach me symbols, factories, and sagas?
https://www.reddit.com/r/javascript/comments/83rxdw/need_help_with_shuffle_function/dvki8l5/
Nah, that behavior is consistent with all the versions I have played going back to the original. You may not have noticed since during normal gameplay it's unusual for the sprite to be stationary. Also it kind of makes sense because there's nothing to eat when you're not moving. Unless he is chewing:)
Yes, the mouth is supposed to be moving all of the time except when you rest on a wall. Other comment doesn't know what he's talking about.
I mean, if you read the article, I'm not wrong — especially if you're building out offline only functionality from the start. Context could take over for that, but not GQL. Apollo-Link-State can be used for that as well, but the article is not about that. 
Just learn Vim.
Nicely done! Did you use a framework or is this vanilla JavaScript?
Not exactly native, but I have a hybrid Cordova app built with Vue &amp; webpack in both app stores. It is also the same codebase as the web version, which makes it much easier to maintain. It’s not a very demanding app, but it is pretty complex, and there isn’t any noticeable lag or indications that it isn’t native. That would probably not be the case for a more demanding app, I wouldn’t recommend Cordova indiscriminately. However, it’s worked out quite well for me.
Progressive Web Apps might also be better option for the future.
https://github.com/finer-vision/Validation Laravel inspired, dependency-free, JavaScript validation library.
Post a an ELI5 for constructor functions and prototypes here! If you could.. thanks!
Let's write our own `forEach` to see how it works: function forEach(fn, arr){ for (let i = 0; i &lt; arr.length; i++) { const item = arr[i] fn(item, i, arr) } } `forEach` is a `function` that gets given a `function` and an `array`. Then, for the length of the `array`, it calls the given `function`, passing it the `item` at the `index`, the `index`, and the `array`. To use it: const list = [1, 2, 3] const fn = (item, index, arr) =&gt; console.log(item, index, arr) forEach(fn, list) // 1, 0, [1, 2, 3] // 2, 1, [1, 2, 3] // 3, 2, [1, 2, 3] Each time we iterate inside the `for` loop, we call the passed in `function` with the new values. On an array, `arr.forEach`, we just have to give the `forEach` function the `fn` value: const list = [1, 2, 3] const fn = (item, index, arr) =&gt; console.log(item, index, arr) list.forEach(fn) // 1, 0, [1, 2, 3] // 2, 1, [1, 2, 3] // 3, 2, [1, 2, 3]
1. proprietary registry 2. esoteric publish step 3. multiple sources of truth for module definitions 4. two way sync (is this unversioned?)
OK can you sent a video to me ? That will help! Thanks!
Guck pee cow bug noodle-peevie!
Hi /u/mystikkogames, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Weex isn't really an option until they add a way to store images in the app.
What same domain? It says "cross-origin" in first line of your link. &gt; The window.postMessage() method safely enables cross-origin communication between Window objects 
At this moment Native Script looks like the best option. I have been working on a PoC with NS recently and so far it is working well. I also like the fact that they offer a cloud build service. The hardest part of mobile development using JS so far has been the local set up. Getting all the SDKs and crap working on various machines has been a PITA. The cloud build service is a life saver.
&gt;Node.js web app. 
https://streamable.com/6mtm9 First I demonstrate using the scrollbar, then using my mouse's swipe feature and my laptop's touchpad. In the example, I'm trying to be as delicate as possible, but the scrolling is very sensitive. Then I demonstrate the same swipe scrolling on a normal page.
I see, you are using a version of V3.3.15 , the latest release I have optimize the code, and the scrolling experience but haven't updated the demo, and new Demo UI is in the process of making, So , plz try the latest version again without demo first... New demo Ui will be published in the recent time! 
Excellent read! I love tutorials that show you the easiest way to do something, even if it's not the best way, instead of getting bogged down by trying to make everything perfect.
This is from 2017, March, dear stackchief spam bot. 
Hi /u/crownofashes, this really isn't the place for a post like yours. You might try /r/TechSupport. Thank you.
Any help is welcome - also if there's another sub that I should ask in which would be more helpful feel free to point me in that direction!
Also wondering if there's a possibility of recording browser actions and repeating them.
so should i change this i to trailnumber？
Please invite the rest of us too, ok?
Good bot
I’m absolutely loving all this ML JS love lately. I’ve been wanting to build my own Alexa-like AI with Node and didn’t know where to start.
I can actually see a bit of application. Suppose you were tasked to work on your client's website. They use RequireJS and jQuery for everything. They don't have a build procedure and don't know what NodeJS is. They asked you to write a component that you, in fact, already implemented for another client in React. In that situation it would kinda make sense to use something like that. On the other hand, it would probably make more sense to just manually transpire via babel and just use the generated code. I don't know, maybe it'll save you some build time.
There are backend jobs, but you may not get very far knowing only JavaScript but no HTML/CSS. You might want to reconsider learning those concepts/languages, and find a more exciting tutorial/class. 
Hi, All GitHub: https://github.com/marktext/marktext I am the maker of Mark Text, Mark Text support CommonMark Spec and GitHub Flavored Markdown Spec. And it is a realtime preview eidtor, what you type is what you see finally. It has the following features: Realtime preview and use snabbdom as it's render engine. Support CommonMark Spec and GitHub Flavored Markdown Spec. Support paragraphs and inline style shortcuts to improve your writing efficiency. Output HTML and PDF file. Dark and Light themes. Various edit mode: Source Code mode、Typewriter mode、Focus mode. Welcome to use it. Thank you!
How much HTML and css would you say I need to learn?
Yeah, same.
Both have relatively limited vocabularies. Learn enough such that you can build a simple blog site, even if you start with an existing framework like Bootstrap. 
I took up learning simantic, which was a little more easier to learn then with Bootstrap
if you think HTML and CSS are boring you need to be inspired but things on CodePen or something. What do you want to make?
web applications, but not tinkering with the HTML or CSS. Ideally anyways
Here's an object structure visualization. (Sorry reddit won't let me use short links.) http://pythontutor.com/visualize.html#code=function%20Car%28color%29%20%7B%0A%20%20this._color%20%3D%20color%3B%0A%7D%0A%0Aconst%0A%20%20redCar%20%3D%20new%20Car%28'red'%29,%0A%20%20blueCar%20%3D%20new%20Car%28'blue'%29%3B%0A%0ACar.prototype.sayColor%20%3D%20function%28%29%20%7B%20console.log%28this._color%29%3B%20%7D%3B%0A%0Aconsole.log%28redCar._color%29%3B%20//%20red%0Aconsole.log%28blueCar._color%29%3B%20//%20blue%0A%0AredCar.sayColor%28%29%3B%20//%20red%0AblueCar.sayColor%28%29%3B%20//%20blue&amp;cumulative=false&amp;curInstr=15&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=js&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false Every car instance **has** a "_color" property (attached directly to the instance), and every instance **inherits** the "sayColor" method (accessible via the prototype chain).
&gt; I updated the RunKit snippet... Just FYI, I don't know if it's due to server caching or what, but I'm still seeing only the very first version of the code you originally posted.
Interesting... thanks!
I could have modularized it better across multiple components, but this was my first time using single file components and I'll get better as I work on other projects. Line length really isn't indicative of development experience, especially when it's just SCSS and SVG taking up most lines. 
Nice article, I was just playing with brain.js this week. Creating a nest like example where I have the time and ambient temperature as input and on/off as output. 
I have developed a very small library for my games. And I used it with this Pacmanjs. So basically just vanilla JavaScript!
Nice! :)
A lot of people are saying that ML in JS is a waste of time, but I think that over time this can become a technology that is actually useful in the real world.
Agreed; Videos in my experience are so freaking slow. A well written blog post or simply a git repo seed with a good readme is way more effective. 
The same risks apply to an OOP style as well. What's to stop a developer from doing `cart._items.push(foo)` where cart is a class? The solution in both cases is simply to design your application and its various interfaces with this in mind, and enforce that the interfaces are used correctly.
Nice, but I think I'll stick with IntelliJ for a while longer.
No harm done. I actually upvoted you. My grammar **was** special. :-)
CSS can do a lot lately, so can SVG http://animejs.com/ also, looks at things like three.js and other technologies using canvas+webgl. these get pretty complex and are used increasingly more. Also if you want to write a native apps using the same skills you can use Electron by github. If you do then start with Electron-Forge. the game FTL was done in electron, many others are as well.
Source code is here: https://github.com/AriaFallah/aria.ai/tree/master/snake Happy to answer any questions!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [AriaFallah/aria.ai/.../**snake** (master → 6fa5636)](https://github.com/AriaFallah/aria.ai/tree/6fa5636dc7e8b83a0c407d8cda59699edf86ceb0/snake) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvr6h4v.)
Sure, just find the script element you don't want (&lt;script src...&gt; &lt;/script&gt;) and delete it from the HTML file.
&gt; Do I need to seperate out the header part to not be part of the route and have its visibility be controlled by the main apps state? Yes, that is a viable solution. Probably the one I would take. 
"return" statement will help you 
thanks for the reply, that's really the only thing I can think of. Is it common for people to have "sections" of their apps that are forked like that though? Where a big part of it is separated out away from the component? I guess that's the part that made me hesitate and I didn't wanna do the wrong practice.
I was coming in here to shit all over it, but you know what, its pretty cool! It makes it really easy to understand and follow. 
 // LOGIC // if something is true, do this thing // if it's not true, then do this other thing var t = true; var f = false; if (t) { // code in here will execute because t is true } else { // code in here will not execute because t is true } if (f) { // code in here will not execute because f is false } else { // code in here will execute because f is false } ... // LOOPS // loops run the code inside them once per loop // for loop... declare a starting variable, a condition, and an iterator // i starts at 0, the loop runs until i greater than or equal to 10, i goes up by 1 after each loop for (var i = 0; i &lt; 10; i++) { // code in here will run 10 times.. on each loop i is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } // while loop... declare a condition that will cause the loop to run forever while it's true // j starts at 0, the loop will run until j &lt; 10, j goes up by 1 after each loop var j = 0; while (j &lt; 10) { // code in here will run 10 times... on each loop j is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 j++; }
How does it compare to vs code's markdown preview i wonder
This seems like more work than necessary. One can just automatically export a Machine Learning model into XML and call it a day. Modeling in JS seems like a nightmare.
Really wished a company brought some more ML stuff like this to JS. I've tried to Python + Tensorflow it's really not for me . Would be great to have some JS Libraries to just feed them with JSON data and then have ".predict()" method to output a prediction.
Depends on what you're after. Calculating data sets can take a very, very long time, and you'll often want to develop the fastest code you can as a result.
Thanks! It is supported actually, try writing a custom action using the commands `foreColor` and `hiliteColor`. See pell's README for custom actions, and see here for the commands: https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand
Get some assets from [Kenney](https://kenney.nl/assets) and make a match-3 game or whatever. Columns (Sega) is super simple, for example.
pretty cool, FYI doesn't work in Firefox
Ah it's because of this: https://github.com/pshihn/rough/issues/24 That's unfortunate. Thanks for letting me know.
Make one where Tide Pods rain form the sky and you catch them in a baby's mouth. 10 Tides = WIN!
Chances for a backend only job with js are probably very limited. Options would be to learn HTML and CSS, which shouldn't take too long or alternatively go with something else like Java (though even then HTML and CSS is often required for web developers).
Nice use of npx and multiple targets!
Anyone used this? Sounds interesting 
This is from You Don't Know JS book. I'm new in JS. 
Haha, as funny as that sounds, it’s interesting too! Will definitely think about this!
Thank you! Will think about that!
Check out deeplearn.js for a Google-backed project.
I've using it in production for over a month, and I've migrated some libraries (found on my GitHub profile) to it, it simplified the build process immensely! 
Would you prefer 'incrementor'?
First, don't give up. Javascript doesn't come naturally to a lot of people. It's difficult for a lot of people, including myself. With that said, get this course while it is on sale. It's very helpful in understanding what exactly is going on, and the instructor takes things very slowly. https://www.udemy.com/understand-javascript/
One possibility: &gt;`if (isDivisibleBy(15, n)) {` to const isDivisibleBy = n =&gt; a =&gt; equalsZero(modulo(a, n)); // ... const isNDivisibleBy = isDivisibleBy(n); if (isNDivisibleBy(15)) { // ...
Yes, it's common. One can imagine a toolbar and/or sidebar that is present in every route. Well you could repeat yourself N times, but it would be cleaner to have only on render function to generate these components. This can help make the app more maintainable, because if you have to change either of these components you hopefully only change one file -- or a small number of files. 
My pleasure!
This seems like fun. Does anyone have any interesting ideas for extensions?
not a bad start so far with the UI. As a Junior, you'd probably be tasked to doing UI development, responsive UI is a big one. Any source code to look at ? 
Thanks!
&gt; var res = randomInt(); &gt; alert(res); :P Not sure if this is a joke or not
Could you elaborate why?
Love this! New devs these days get dropped right into using tools and don't get enough education about how to actually build lower-level stuff. Guides like this make me happy :)
I think there's a bunch of ways you can *try* to measure when you should make the choice to adhere to one philosophy over another. Thinking about my response almost makes me question whether this is how we make skynet or not haha. You could measure adherence to one principle or another by number of cycles, number of lines of code, cyclomatic complexity when the code is normalized... I don't have a great solution but I wonder if there's literature available describing this sort of problem. I'm sure you could feed a few machine learning algorithms into eachother to solve this for a specific case. Kindof like a map-reduce for code writing decision making? That would make an awesome js-prettier extension haha
&gt; /r/TechSupport ok thank you
 function encode(arg) { return arg.split('').map(x =&gt; (x.charCodeAt(0) / 255)); } IIRC, you can't encode text like this, because "a" doesn't mean it's close to "b", language isn't something that has a concept of nearness unlike the color of a pixel. So the results will be entirely invalid. 
Not sure why this is even on github. The source is obfuscated and it's not even obfuscated well. Basically it does this: function randomInt(min, max){ if (min === undefined &amp;&amp; max === undefined) { var _min = 1; var _max = 100; return Math.floor(Math.random() * (_max - _min + 1)) + _min } else { this.minValue = min; this.maxValue = max; var _min=parseInt(min); var _max=parseInt(max); return Math.floor(Math.random()* (_max - _min + 1)) + _min } } I'm sorry but what the flying fuck?
True. I'll write him and ask if he has plans for any extensive Rxjs course. 
Yeah, it needed something more specific. Thank you for the comment.
If you want more control over your external scripts then I recommend integrating [loadjs ](https://github.com/muicss/loadjs) it’s a glorious little async loader and will give you greater control over your external scripts and it’s 758 bytes. Some poetry in that code. I use it in production on several large projects. ✌🏼
This is really cool. However, it is very hard on my CPU. It eats 3.5 cores (350% CPU), and sends all my fans screaming. I am using latest Chrome (v65) on macOS 10.11.6 on a retina MacBook Pro. Are you using [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)? That may help bring the CPU usage down, as it caps at 60FPS.
Check out [this tutorial](http://www.lostdecadegames.com/how-to-make-a-simple-html5-canvas-game/) by the awesome guys at Lost Decade Games. It's a great introduction to HTML5 canvas games.
Check out the ZIM framework, www.zimjs.com It is pretty excellent for all levels of experience, offers nice shortcuts for game-making, well documented and lots of open-source examples. Has a nice community too if you have questions just hop on their Slack chat! It was my first entry point into Canvas and JS, and although I am still new, I have looked into other (2D) game-specific frameworks. If you don't have any specific requirements that some other framework might specialize in, it's a great start!
No offense intended, but your library could be replaced with: Math.floor( min + ((max - min) * Math.random()) ); 
What you really want is an api to connect to.
Sweet thing dude. Keep it up.
alert("nope");
That's strange. I have the same exact specs, and I am using requestAnimationFrame
I love the 180 you did there. Gotta protect that single-method library code
Girls have things there too, so not really.
Many thanks for reply bro for letting me understand it . but i didn't understanding their examples , i don't know why , it seems critical to me... &gt;var power = function (base , exponent ) { var result = 1; for (var count = 0; count &lt; exponent ; count ++) result *= base ; return result ; }; console .log( power (2, 10)); // ! 1024 and this one too &gt;Nested scope JavaScript distinguishes not just between global and local variables. Functions can be created inside other functions, producing several degrees of locality. For example, this rather nonsensical function has two functions inside of it: var landscape = function () { var result = ""; var flat = function ( size ) { for (var count = 0; count &lt; size ; count ++) result += "_"; }; var mountain = function ( size ) { result += "/"; for (var count = 0; count &lt; size ; count ++) result += " '"; result += "\\"; }; flat (3); mountain (4); flat (6); mountain (1); flat (1); return result ; }; console .log( landscape ()); // ! ___ / ' ' ' '\ ______ / '\ _ The flat and mountain functions can “see” the variable called result, since they are inside the function that defnes it. But they cannot see each other’s count variables since they are outside each other’s scope. The environment outside of the landscape function doesn’t see any of the variables defned inside landscape. 
ok bro , i m trying to get this course, but kindly check my reply &amp; tell me why i m not understanding this kind of things , i m not understanding the system of this examples.. thanks for reply bro 
this is because you can do the same thing with any of them. They are all backed by strong companies and development teams so we are really splitting hairs. this article is meant to fuel discussion due to the scrupulous nature of this argument...interested to hear your opinion on which one you think is best and why...
everything published to the internet becomes more dated every day. it's the discussions these topics generate that keep things up to date. what are your thoughts? what are your opinions on the best JS framework? post here or...post on stackchief where other readers can see your updated answer. 
thoughts on angular CLI abstracting all config nightmares traditionally experienced with webpack and hiding implementation from user (with option for user to eject and have full control)? this makes for a very fast, seamless dev experience: https://www.stackchief.com/blog/Deploying%20Apps%20with%20the%20Angular%20CLI
For a moment I thought the title said Roald Dahl and was really confused
Thanks, I'll check it out!
He has nothing on [FizzBuzz Enterprise Edition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition)
O.o :) O.o i think i'll get it after bashing my head against the wall some more!
GPU running code on front end in JS? Didn’t even know that was a thing. 
sorry for being pedantic, but the article mentions at least twice that an increase in input training data leads to an increase in accuracy of ultimate predictions, but I do think it necessary to point out that this is not true (to an extent). for most use cases this approach can be "good enough", but in terms of actual training of the neural net, there is a point of diminishing returns, where too much training data can lead to [overfitting](https://machinelearningmastery.com/overfitting-and-underfitting-with-machine-learning-algorithms/), and alternatively underfitting as a proof of concept no doubt a great example, but this subtle nuance can definitely make or break an implementation
for some, it may be less work to implement it in javascript. at the end of the day, it's a question of what the individual is comfortable with, not necessarily what is objectively easier to accomplish from an outside perspective. this is also just a proof of concept, it demonstrates what is **possible**, not necessarily what is **correct**
Yes, you can do the samething with all of these frameworks. But that is the same with programming languages: you could write a business application in Java, Kotlin, C#, C++ ... you name it. But what are the relevant differences? What are the pros and cons of each approach? That would be helpful to decide. From the listed frameworks I favor React, because of the clean architecture and the pure JavaScript approach. I'm not a big fan of `ng`-attributes like `*ngFor`or `*ngIf` and prefer functional programming with `map` and `filter` for example.
As a string — no. But you can pass year, month, etc as separate arguments: `new Date(2018, 2, 16, ...)` and it goes down to ms. 
saw him committing to that project few months ago, was expecting that. it's written in typescript. check his git hub out.
The real challange is to provide a XUL emulation.
`Date()` already accept milliseconds for creating a `Date` object. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Parameters
Sure: https://github.com/gpujs/gpu.js
So some random packages in another language can claim all the good names? There aren't enough suitable words.
How does it compare to Boostnote? 
The reason these are not objects is because strings, numbers and booleans are primitive types. Arrays in JavaScript are always Objects (reference types) - the Array prototype inherits from the Object prototype. Arrays are essentially key/value pairs - the key being an index. String(), Number() and Boolean() will return a primitive value if executed without the new operator. The new operator will return an Object and set the prototype of that Object to the prototype of the constructor function (Number, String or Boolean). Try this in your console and you'll see - executing Number() will return 0 and executing new Number() will return an Object inheriting from the Number prototype. I'm not the best at explaining these things, so here are some useful resources to help you: [Working with objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects) [New operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) [Primitives and reference types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)
When is this event? I can't find the exact date on mobile
June 2 and June 3 at Berlin, Germany.
Of course you can do functional programming with Angular, too. But Angular forces you to use `*ngFor` instead of usual JavaScript with `map` for example.
Ohhh baby
Java?...
Is this using react-springy-parallax? : D
Just use .script file extension and you have a java.script, done.
Nice, interesting deep dive and also contains some nice links to other articles. Thanks for sharing
&gt; Angular.js It's just Angular since you're linking to v2+ docs.
We are almost done with IE 10-, but still IE11 is keeping us from fully diving into PWA, WASM etc
The legend returns!
break the site
https://xkcd.com/927/
Well, how about making the PWA progressive? As in not use the features the current browser can't support. Might be an unpopular opinion but customers that use IE11 are still customers. I don't think it is productive to force them to switch if that's what they are comfortable with. Whenever I'm annoyed for having to support an old browser (in my country IE6 is still a common thing), I do an exercise in empathy and try to think how I would react if someone told me my workflow is obsolete.
I'll just leave this here: https://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/
tetris
I'm all ears. I can't even get our clients change from IE9.
why oh lord do we have to use microsoft typescript garbage.
/r/typescript. also /r/visas
I don't want to come off as condescending, but imho don't put in too much time trying to understand the inner-workings/building blocks of JS. You don't need to know everything about a language to use it. 
because it's a great alternative to plain javascript?
Every. Time. This. OP get some work done instead.
it should come with an h1b application.
It is a good idea. Probably all devs should campaign doing so.
Just accept the facts? Because i want to learn to understand better what are objects and what do they represent, big picture.
Not really sure where the link is ?
java/h1b === typescript
As a web developer who had to support IE 6 and 7 when Chrone didn’t exist and Firefox had minimal market share, I will never willing convert to a Microsoft effort on the web. They also abandoned silver light after I had spent considerable effort learning the platform. Thanks but no thanks. This is an effort to not lose total influence in the web sphere.
Internet Explorer, Edge, Silverlight, and Microsoft in general are all shit for the web, but TypeScript isn't. Actually have a look at it before you lambaste it. It's open-source, so you needn't worry about support being dropped either.
I get the trust issues. But like the other redditor in this thread said, it's open source, there are no risks associated with using this technology. 
What makes it garbage? I'm happy that vanilla JS is valid TypeScript. I also appreciate that they made TypeScript compile to clean human readable JavaScript. So if you ever want to abandon TypeScript you can just use the compiled code and keep moving along with your project. I guess they knew developers would be scared of the potential lock-in.
training wheels for java devs.
Good point about the evolution of the codebase. But if they ever try to do something unpopular, someone will fork it, no? Like 'FreeScript' ( I like the sound of that) or something like that. I always thought this was one of the main points of open source 
Yea, and I’m cool with that. Like I said if I’m forced to use it one day no problem, but just look at all the bullshit that Linus has to prevent from making its way into the Linux kernel. Imagine if that was owned by Microsoft. Food for thought.
Open source means there’s no risks? TIL
I have not used Boostnote, Mark Text focus on the user experience，and don't care about the storage. 
Everyone bullied OP to the point where he took down his repo. Common guys 😅
HTML and LaTeX Blocks are in the plan, Other features in Markdeep still in the discussion.
HTML and LaTeX Blocks are in the plan, Other features in Markdeep still in the discussion.
I was finally able to put the code from the first JSfiddle link into my project, and it didn't work. The issue appears to be that I am not calling the Function (I guess this is what you call it) that you wrote when I press the "Open Chest" button, and I don't know how to make this happen. The JSFiddle that you have doesn't have it where the item's stats appear after you press a button, so I can't copy what you did there. 
It is already hard enough to come up with a name that isn't taken in JavaScript.
yeah we're lucky we now have package scoping on npm
are there any good exercises unlike freecodecamp to get hands dirty and to progress slowly?
i don't think it's a trust issue, it's basic pattern recognition...
I don't know if you can run it in the global scope, but you can set all its exported variables as global like so: global.example = require('example'); In what way is it more difficult in TypeScript? As far as I know, the difference is basically just using import syntax. import * as example from 'example'; global.example = example;
I'd like to get some figures for business vs. personal browser usage. I imagine it's businesses with tight security policies that aren't upgrading just yet. I know of many B2C companies that aren't bothered supporting IE anymore, the data shows it just isn't worth it.
r/LearnJavascript
&gt; At is already hard enough to come up with a name that isn't taken in JavaScript. Again, if your imagination is limited to single dictionary words, true. The dictionary doesn’t scale. If nothing else, you could always just use the name Github suggests when you go to create a new repository ;)
 const curry = (fn, n = fn.length) =&gt; (...args) =&gt; { return (args.length &gt;= n) ? fn(...args) : curry(fn.bind(null, ...args), n - length); };
Hi /u/_ar7, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/kerrda, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/walz911, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
He's being as racist piece of shit. 
I've heard Codeacademy is pretty good too. My recommendation, however, is to learn by doing. Find something in your life that you love, or a problem you want to solve, and come up with a project based on that. A good metaphor would be learning a foreign language. If you are learning just by taking classes in school you might do okay, but it is NOTHING compared with how you will do if you go live in a country that speaks that language, or are forced to start using the language at work, or something like that.
Enough should be removing it from Windows 10 completely. Probably give diehard fans an option to download it.
Can you show me the benchmark result that document.getElementById is "traverse the DOM and find[s] the specified element." because having a Id lookup table should be one of the first optimisations any browser engine would do. Or did you just pull that recommendation out of your preconceptions? &gt; Minimize DOM Manipulation This advice also relies on a naive implementation on browser end. &gt; Declaring variables with var Not using const and let? Wait, what year is this? &gt; [Global variables] take longer to look up Yet another outdated recommendation that's based on author's gut feeling with nothing backing it. Also, default global variables? &gt; With that said, be careful with how many variables you define. It's best practice to minimize the number of variables you use. It's a good practice to minimise the number of variables used, but it's never due to speed considerations and should not be done if it makes the code less readable. This article would've been more on point 10 years ago and possibly still relevant 5 years ago, but advocating old, nigh deprecated javascript patterns in 2017 and 2018 only causes confusion. 'sloppy mode' is javascript's dark history and it's best that new programmers are introduced to it only as such. The article is kind of infuriating when it would be more useful for programmers by replacing the whole content with "For best code practices, use a good javascript linter in combination or at least start your javascript files with 'use strict';" A good article on setting up babel with different settings, a bundler/packager and linting would be so much more useful.
...This is simply just [Abstraction](https://stackify.com/oop-concept-abstraction/). Its a core principle of OO and has been around as long as OO has.
I think there is some truth to grumpy developers being scared of being phased out, but it's naive to think javascript itself doesn't have it's awful parts. Personally I like the bad parts because of the flexibility it provides. There are also a ton of people who still think of javascript in the old days, and haven't given es6 a fair chance.
Hmmm how am I violating the guidelines given I posted a link to the source code in the comments?
&gt; Is it justified today? it's not justified when you use a linter. Then if you don't, you're just doing it wrong. Too bad prettier+eslint with a sensible setting will never be integrated into the language itself. A lot of this FUD would not exist. When you're protected from the quirks, JS is a beautiful language which has probably the fastest virtual machine amongst all of the dynamic languages. &gt; They are scared of losing their job I don't think so. With the way the automatization is going any programmer will easily find a job-be it C++, Java or that Frankenstein of a language PHP. They are bashing it because it's entertaining for them. &gt; Have you noticed this propaganda against JS? Propaganda is organized spreading of (mis)information. Many programmers badmouth JS, but there is no central authority/institution who would do this. So no-not really. It's just Friday evening entertainment for some programmers.
&gt; Personally I like the bad parts because of the flexibility it provides now you're talking about dynamic typing? That's not the "bad part".
I've been writing Javascript for 15+ years and it is far from a perfect language. Many of criticisms are valid. Now ES6 is quite fun to write but still JS should not be the language to rule everywhere. In case you have not seen this infamous video: https://www.destroyallsoftware.com/talks/wat Those are some serious warts on Javascript.
&gt; People want short names and rely on a natural name-spacing As long as it’s pronouncible, the name matters very little. The open source world is full of projects with weird or ungainly names like PostgreSQL, Solr, Lucene, GraphQL, Hadoop, Redis, as well as compound names like ElasticSearch, MemCache, Kyoto Cabinet, and TensorFlow.
I'm a professional Java developer who really likes JavaScript. However, I still feel that JavaScript pre-ES6 (and, honestly, pre-TypeScript) is kind of an abomination. I'm sorry, dynamic typing is not a "feature", it's a bug. Flexible object structures is not a "feature", it's a bug. The lack of variable scoping (other than function scoping, pre-ES6) was not a "feature", it was a bug. I can go on. The point is, I think JavaScript deserves some of the hate it gets. Every language has its strengths and weaknesses, but JavaScript was never designed out of the box to be the kind of enterprise-application-style language that it is now used for. New updates over the past few years have done incredible things to change this, and TypeScript is, IMO, absolutely wonderful and exactly what JavaScript should've always been. Anyway, this is just my opinion. Clearly OP believes JavaScript is the best. I like it, I feel it is the right tool for certain jobs, but I don't believe it is the right tool for every job. Just like Java I feel is a great tool for certain jobs, but not the right tool for every job (personally, I prefer Kotlin these days but I don't get to use it at work). Rant over with. Enjoy.
python is has been very popular for scientific computations since the 90s-numpy library has been around since 1995 as Numeric. Whereas in JS land libraries like [propel](https://github.com/propelml/propel) are in their infancy still today. IMHO the only thing stopping JS from becoming a good language for ML is the library ecosystem. Performance of V8 is plenty fast for what ML needs.
I don’t build to support legacy browsers. I have my fair share of critics regarding this but by supporting older browsers we are enabling the users. In the land of e-commerce if you’re browsing the web using IE 8, IE 9 or even IE 11 then I highly doubt that user will be the make or break of your conversion rate. I say take the loss, the extra flavor you need to integrate on top of your builds costs you speed. Considering most legacy browsers rein from countries that don’t have very self sustainable economies there is an even greater chance that the purchase you might be generating from a legacy browser will cause you headaches in the end, be it in shipping, import tax or return. We used to support legacy browsers and it all it did was open the floodgates to fraudulent purchases. If you’re not using a modern browser, well bad luck. 
I came to JS as a C++ coder, and I admit that I once thought it was a bad programming language. Now I know that you just have to think in a different way. I read some really good books (most notably Javascript Allonge) that really helped me wrap my head around it. It's not C even if the syntax is similar. 
Again, no Mithril.js in this list. Why? Why don’t people see the power in this micro framework? 
You don't have to go far... /r/loljs 
Python has bindings for native code and GPU support. Python is mostly used as a control language to set things up but most of the actual bulk computation is done in very fast native code or GPU kernels. JavaScript itself doesn't have that. Browsers are getting it slowly now, like WebAssembly and WebGL, and Node.js could do the same. But them Python still has advantage that it is used a lot in scientific computing, so a lot of new cutting-edge stuff happens in Python first (or is native code but glued together with Python).
So? A short nice name that is unique in the particular field/language is still more desirable then an ungainly but globally unique one. 
No worries. Thanks!
&gt; Chromium's JavaScript engine be much faster than Firefox? Why would you assume this?
I think the most important factor is that python is so strong in the scientific computing ecosystem where the actual ML innovation happens. 
I recently found `Math.random().toString(36).slice(2)` which I have used a handful of times for ID's and such. It spits out a random 10-character alphanumeric string: `xyxracrh8x`, `bgro9us34h7`, etc.
Neat! I do think the JS landscape, and other languages in this space have a lot to catch up on for python. The nice thing about python is also having easy integration with Jupyter to test things, and note the results as you go. I do wonder what advantage JS will have over python for this sort of work.
The language and type of project are the namespace.
Saying that doesn’t make it so. Or invalidate the point I made in my previous comment.
Reality is invalidating your point.
Devil's advocate here... On the first part, how is this different from the badges and banners we used to have to put in our pages that said, "Works Best with Microsoft Internet Explorer." Back then I thought that was a totally lazy cop-out, because our group spent a lot of time getting things working correctly in both IE and Netscape. Also, half the time (unless it used ActiveX) the page behaved perfectly normally if you changed your user agent string, so... what was the point. I figure you should only put up that warning if you know it's going to break on a specific browser and... On the second part, my old boss would have had kittens if we wrote off 4% of active users. When you have some insane target of boosting active users by 5% this quarter or whatever.... Yeah. A whole litter of kittens. The frustration we all feel about this is totally valid. We've been working with an uneven ecosystem since the 1990s and it's always felt like a shitshow, though it seems to me that it is way better today than it was 15 years ago. I kind of think that dealing with this is part of of my job description, up to the point where it costs more to accommodate the older browsers than we would possibly earn back in revenue (or whatever the metric is you're using).
Oh, how so?
You can write native modules for nodejs so the first point you make is not correct. That being said I agree with you that python has an advantage because it’s used for scientific caclculations for a long time now 
Develop for the web! If you're a web developer then you should target all browsers you lazy sods! Build your sites and web apps with progressive enhancements from the start!
Obviously IE sucks and always will. 
This is great!!
Well, as somebody already stated, the app could be really progressive, using enhancements only if they're available. Also, having a big customer base using IE can be a drag. I used to write for IE6 for a very big corporate client which had their tech stack standardized across various countries. I mean that there's no single answer, and you have to adapt to each situation. You could say that I'm not taking sides here, but there are means to estimate the cost of loosing those IE customers vs the cost of development associated to supporting them. Maybe it's not your decision after all if you don't know those numbers. Don't get me wrong, I'm forcing my users to update if they want to use the service, and I believe that's how it should be done (less security issues, for instance), but I've been on both sides. Should we ditch Babel and ship code that won't execute? Or work without modules? Of course I'm exaggerating, but where do you draw the line? For me it's about my users, and currently I can afford loosing less than 1% 
My last big company had a pretty massive daytime audience, visiting from corporate networks and managed PCs. We had a massively disproportionate number of IE users: we witnessed extremely slow uptake of new versions of IE and sometimes it seemed like some companies just never upgraded their PCs at all. The lesson is you need to study your own web stats and have a pretty good grasp of your business model before you decide what the cut-off is. One-size-fits-all could work fine for your buddy, but be ruinous for you. Also, I worry a bit that if you go in with the attitude of "I'm not going to bother with browser X because nobody uses it", you're going to see that theory confirmed in your own stats. Keeping an eye on anomalies in visitor retention helps identify this when it's a problem.
https://github.com/Chalarangelo/30-seconds-of-code thank me later
For anything that's lower than `#100000`. For example: #'+((1&lt;&lt;24)*0.01 | 0).toString('16') // random replaced with 0.01 produces #28f5c which is only 5 characters and can be seen as an invalid color value.
Valid JS is valid TS, syntax-wise, but typechecking completely fails of course.
Does the 4% of users being written off contribute to at least 4% of revenues? How about costs? Depending on the market/product, it may be okay to write them off if they aren’t returning a profit. 
Would a Naive Bayes classifier work better for this, or is it very similar? e.g. [this js lib](https://github.com/NaturalNode/natural#classifiers)
The reason I put the variables in the function arguments is so that I don't have to use `var` - which I see being used frequently on libraries. But I didn't know it causes a pretty heavy overhead. So, I've moved the variables so that they're declared using `var` (see updated gist), e.g. from: function abc(a, b, c) { //... To: function abc() { var a, b, c; //... Even after this changes, the difference is not significant. Chromium now gives: for = about 790ms average. forEach = about 740ms average. Only the `for` loop is changed. There's no noticable change of performance on `forEach()`, and in Firefox ESR and WebExt (unless I increase the array length). I don't actually need accurate timing, so `new Date()` is sufficient enough to give a rough measurement. The slow performance in Chromium is still unanswered, though. Any idea?
Are there any tutorials on how to use this?
`'#'+((1&lt;&lt;24)*Math.random()|0).toString(16).padStart(6,0)`
`test`
I think you aren't getting responses because it's difficult for people to read your comments. Look at learning Markdown. It's quite simple, and will help you with formatting your questions in forums and such. Without, it's just very hard to understand what is going on. For example you can write code blocks instead of having them inserted throughout your writing in between sentences: `for (var count = 0; count &lt; size ; count ++)`
Been using VS Code for a while now. Haven't looked back... Great product. Great price. 
I always find funny to have generics in a dynamic language, but except that TS is decent. Or maybe code in TS is decent because people using it care about well written code... Personally I don't care much about typed/dynamic language as long as your editor is able to infer types and your variables are aptly named (that reduces confusion and errors as much as types, in my experience). I hate MS with my guts. I had to deal with stuff like TAPI last century, and I still have nightmares... Scalded cats fear even cold water, so only now I start to really look into it, but I have nothing bad to say against it. (and if you know about my harsh tongue, you would find that statement dubious XD) 
&gt; The slow performance in Chromium is still unanswered, though. Any idea? Honestly, I think Chrome is doing it right and Firefox is cheating. IIRC, looping over overriding variable assignments in Firefox triggered a very specific (but probably not realistic) performance optimization. Try this: console.time(1) for (i = 0; i &lt; 50000000; i++) {} console.timeEnd(1) in both browsers. I bet you'll see similar results to the one you're getting in Firefox now, meaning FF is changing the majority of the assigments into no-ops, meaning the largest contributor to the bench time are the assignment statements and the loop time you're actually trying to benchmark in chrome is basically noise in comparison. &gt; I don't actually need accurate timing Well, generally speaking, if you approach perf micro-benchmarking with a half-ass-is-good-enough mentality, you will most likely get meaningless (or even flat out misleading) results. If you want to isolate loop perf exclusively, your methodology should strive to exclude any extra code for "balancing things out" because all sorts of things can happen under the rug. JS VMs are _very_ complex beasts. Benchmark.js, for example, goes to ridiculous lengths to ensure it's not measuring the cost of a wrapping function calls and timer calls, for example. If the reason for adding `instruction to emulate `value` argument of forEach's callback` is that you're trying to benchmark some actual code, you should instead be calling your real code in the benchmark rather than a pared down emulation of it. 
Note that the length is not _guaranteed_ to be 10. It is actually far more likely (~70%) that the length is 11.
I cant find any examples?
How does this compare to Numeral? Or the toLocaleString native implementation?
Maybe. Maybe not. You have to have pretty good ammunition when you go to your boss with a plan to instantly cut off or alienate a non-trivial chunk of your current user base. Also, profit/loss is not the only metric some developers have to worry about. There may also be visitor retention, time-on-site, conversion rates (and there were heaps of different possible conversions on our site, each with its own "stakeholders"), link depth and even page views. You screw with 4% of users, maybe there's a chance someone in your org isn't getting a bonus that year. All I'm saying is milage may vary. For what it's worth, our group saw higher rates of conversions and time-on-site for IE users (of all versions) on a site that was developed on Firefox and worked identically for all major browsers. I have no idea why. The experience was identical. I (probably unfairly) put it up to IE users being less sophisticated and more likely to fill out forms and click submit buttons. 
Download the app
Author seems to be confused by the fact that both the [error-first] callback pattern and promises both use callbacks. It sounds like that is the argument behind why promises are not better, but then they later go on to say: &gt; Both callbacks and promises are completely different concepts. One is not better than the other.
Good thing would be to output markdown too.
Can't wait to see what's he gonna talk about.
This article misses the point of promises. Promises exist to reify the result of a yet-to-be-completed asynchronous operation. This provides all sorts of benefits. For one it let's you pass that result around, which is more just a nice feature than something hugely useful. The more important thing is that it lets the programmer use all kinds of operations on this result that are much more complicated when using callbacks. Things like promise combinators all represent operations that are *possible* with callbacks, but much more complicated and difficult to reason about. It also provides you with nicer options for certain control flow mechanisms, like sharing error handlers. In the end it's all about efficiency and convenience, but those are very valuable.
I think I don't understand the context of this article, and who they're responding to. Yes, people often say "promises are better than callbacks", _in the context of_ designing an API that yields a result asynchronously. I haven't seen the argument that promises themselves literally _are_ callbacks, or that they can replace callbacks in all contexts. Maybe promises are being taught poorly in intro JS courses right now, and this article is upset with those students? It _does_ seem like a hard distinction to teach, especially if the teacher focuses on this single use case, which could easily lead students to misunderstand what a promise and a callback even _are_… But, in that case, I'd prefer that we focus our ire on the teachers *creating* this misconception, whereas this article seems to be angry at students for *having* it :/
It's so frustrating that JavaScript assigns a misleading length to functions with default parameters: const inc = (x, by = 1) =&gt; x + by inc.length // 1 curry(inc)(2)(3) // TypeError: curry(...)(...) is not a function
There are good guides. But also you can look on jsperf for just about anything you are about to do and see how to do it faster. Most improvements come from actually changing logic though. Not just faster js like faster loops. 
Anything recursive that works well
I used to use this all the time for time formatting: const fmt = n =&gt; ('0' + n).slice(-2) // usage `${fmt(hours)}:${fmt(mins)}:${fmt(secs)}` Also this for deduping array items: [...new Set(array)] Sorting objects by some prop alphabetically: const list = [{name: 'John'}, {name: 'Bob'}]; list.sort((a, b) =&gt; a.name.localeCompare(b.name)) Formatting numbers: const format = n =&gt; n.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,")
Thanks bro , i edited it properly this time , hope somebody helps me to understanding this problems.... 
You're iterating over a sparse array. This is much slower than iterating over a packed or typed one. https://v8project.blogspot.com/2017/09/elements-kinds-in-v8.html
I'll try and explain the first one for you. `power` is a function that accepts two arguments, `base` and `exponent`. The for loop executes like this if you want to get 2^2, for example, just to keep it simple: The first time the loop runs it multiples `result` times the `base`, which in this case is 1 * 2, and then returns a new value to `result`, so `result` now equals 2. So the next time the loop runs it will multiply the `result` 2 times the `base` again which is 2, and return a `result` of 4. Since count is now = 2, the loop will stop, and the console will now print `4`. Let me know if that makes any sense to you.
JavaScript is a quirky language but it’s come a long way. The only people who say that and mean it are students or people who don’t actually know what they’re talking about.
These are good tips, if the year is 1999, and the browser you're targeting is IE5. Seeing as it's 2018 and most people are using modern browsers, such as Chrome 65, these tips are useless. Modern JavaScript engines optimize away both the "unnecessary variables" as well as the "inefficient loop". In fact modern JavaScript engines, such as V8, are very smart about optimizing code, so that such code tweaks serve no purpose. 
 &gt; 1234567..toLocaleString() "1,234,567" https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
https://caolan.github.io/async/docs.html but I don't miss using this library. It made life easier, back in the day. I prefer reading and writing promises. 
Ah, TIL! After a quick test it seems the output ranges from 7 to 14 characters: let maxLength = 0; let minLength = Infinity; let i = 0; while (i &lt; 1000000) { const a = Math.random().toString(36).slice(2); if (a.length &gt; maxLength) { maxLength = a.length; } if (a.length &lt; minLength) { minLength = a.length; } i += 1; } console.log(minLength, maxLength); // &gt; 7 14
Oh, nice! Why didn't I think of that?
https://github.com/SalvationDevelopment/YGOPro-Salvation-Server Card games on Motorcycles, Laptops, and Browsers...
&gt; 100% JS *drools,...
The picture is apt, because bundlers make me want to blow up my office.
There are ton of them. CopyToClipboard is interesting one. You can see it in action at 30secondsofcode.org 
You’ll love Parcel then! I was genuinely shocked how easy it was to use when I first used it. 
And honestly, this one works well enough. If I can google it without any problems, that's good enough for me. &gt; https://www.google.com/search?q=node+propel
Huh. I hadn't ever tried this. You can pass an argument count to `curry`: `curry(inc, 2)(2)(3)`
The trouble is not the users, it is employers who think those users matter enough to cater too.
So why would I use parcel, now that Webpack is zero-config too?
Read the section headed "Zero Configuration: Webpack Vs Parcel".
You might wanna change console.log("${w}!") to console.log(\`${w}!\`). Hell, I'd stick with `w + '!'` since that's more readable.
After few more releases parcel will become a nightmare too I guess. 
Terribly low effort article. Did not even bother to run their own example code. The output is completely wrong in section 2.
Okay, I get that Parcel is great for this trivial situation...but at some point in a project, you're going to need *some* level of configuration, even if it's just to change where the build of the JS goes...or something else. So at that point, what's the use of the statement "zero configuration"? I think Parcel's strength appears to be having a lot of the sensible defaults in place already, where as with Webpack you need to configure the loaders yourself. Would it not be better to promote Parcel as something just a bit easier to deal with, rather than making the statement about zero config?
I agree with you. Realistically, you'll need to configure it. What I was trying to showcase is how easy it is to get started in Parcel. For a lot of people, setting up Pug, Sass, Babel and PostCSS can be quite frustrating in Webpack. Hopefully this attitude to usability will extend to configuration. Only time will tell.
I wanted to try it out but the Vue support doesn't seem quite ready.
It has the potential to run faster because the JS engines are faster than the Python interpreter. But then again Python has many optimized lbraries like Numpy, etc.
Tilde is magic: if (~someStr.indexOf('a')) { // found } else { // not found }
i was a Java programmer. I was switched to Javascript when TypeScript and ES6 came up. Now, I find Javascript better. NPM is great. Node is great. The packages are great because I can do what I used to do in Java 4 times faster.
I'm currently using it in "Electron + React" project. The only major thing I found is that Parcel doesn't currently work with `fs` calls. Other than that - it's brilliant! Fast, lightweight, easy to use. For the record: I haven't *really* used Webpack in my own projects. Just because every time I tried the end result was a decision to use Gulp.
bitflipping is cool and all, but trick is no longer necessary with es6 if (someStr.includes('a')) { // found } else { // not found }
are you using bootstrap?
Very true, but just to be clear, ~ isn't "bitflipping" in the traditional sense, it's actually equal to -(N+1), meaning, only a -1 will return 0, which is falsy, all other positive or negative numbers are truthy.
preach \o/
```[...Array(n)].map((v, i) =&gt; v)``` creates an array of n length with v. great for creating test data
What's wrong with async/await? const promise1 = asyncTask1(); const promise2 = asyncTask2(); const [result1, result2] = [await promise, await promise2];
Yeah, but FizzBuzz EE could only really be done in Java. Nothing in JS can really compare to that level of overabstraction.
Really interesting thanks!
I'm not but this project is using on the other areas 
Sorry nothing is wrong with it that’s what I meant You can’t do async await with callbacks 
hmmm interesting!
Gotta love a guy who drops out of a math PhD to move to South America, where he supports himself and the first iteration of THE modern web... by building the web site for a snowboarding company. And then just when things are getting interesting, he vanishes.
Thank you for the heads up! ☺️
&gt;styling elements in javascript Shouldn't that generally be avoided for the sake of separation of concerns? Sometimes it's necessary, but when it's not, I think it should be in the CSS.
You can achieve the same using `Array(n).fill()`.
Create a range to iterate over kind of like python. const range = (n) =&gt; Array.from({ length: 10 }, (v, i) =&gt; i); range(3) // [0, 1, 2] for (const i of range(3)) {console.log(i)} Another for thenable/awaitable timeouts when you know you won't need to clear the timer. const wait = (ms) =&gt; new Promise(res =&gt; setTimeout(res, ms)); (async () =&gt; { await wait(200); console.log('hi!'); })()
This is no more or no less random. The only thing it adds is a little _formatting_.
Why would I use parcel for a production environment when Webpack is much more feature rich? Last I checked parcel can't even treeshake. I don't want to swap out my build system once I need to put an app into the real world. I don't get the appeal for someone who isn't struggling with tooling
All the article could (should?) be replaced with a link to [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).
Yeah it can't, yet. If you're fine with Webpack, then thats great. There will always be newer tools, but theres not much point in switching if you're happy with your current selection. Like the conclusion says, if I need features which Webpack has and Parcel doesn't, in a future project, I'd use Webpack. In the end, its a matter of preference.
This is a really handy snippet! I suck at async/await methods lol! Just curious about the range one, should the Array.from method look like this: Array.from({ length: n}) 
But you don't have access to the index of the array element which is what I use sometimes.
A list of benefits that css-in-js can give you. (not related at all to what OP suggests, though) https://hackernoon.com/all-you-need-to-know-about-css-in-js-984a72d48ebc#6ae4
I honestly don't have much trouble with Webpack when I'm developing in Vue. The Vue CLI sets up everything you would need with sane defaults and support for SASS/Stylus/etc already enabled.
There are tonnes of Webpack starters with any number of configurations that require zero setup time. So I'm not seeing the benefit of Parcel.
haha, yes sorry, I copy pasted it from the console where I used a static implementation.
&gt; Based on a reasonably sized app, containing 1726 modules I love how a "reasonable" sized app has to have 1726 modules...
Ah, okay. But your "callback" with async/await is literally the code immediately below the await line.
No, I mean sometimes the test data should increment/decrement. ```[...Array(n)].map((v, i) =&gt; ({ test: i + 3 * Math.random(), other: 'stuff' })) ```
Eh.. you'll have math weirdness with ANY language. Anything that uses IEEE 754 Floating Point math will, at least, have the same very well known problems. If you using a language that uses BCD or some other math encoding, you'll just have a different set of weirdness. JavaScript may have its faults -- but the number system isn't one of them. That fault goes to Computer Science in general. 
So I don’t know if you know but webpack 4 has also a zero config file, you just specify the ‘mode’ which can be development or production.
Tried poking at Parcel a while back, but if it's configurable at all, the docs sure don't reflect that. In addition, the one feature that drew me to try it in the first place (easy Rust integration) was pretty much broken for anything beyond the snippet in the announcement.
 e.style.PointerEvents('oops') e.Style = function(aStyle, aValue) { e.style[aStyle] = aValue; return e; }; e.style.onclick = aCallback; // e.onclick ?
That Vue Cli is crazy good. The amount of work that's gone into it really shows. Version 3 of the Cli (currently Beta) is even better. You can *augment* the built in Webpack config, which means that unlike Create React App for React, there's never a need to eject from the project just to update some more loaders etc.
A couple of entry level paragraphs
Wow can't believe you're being downvoted for stating something so plainly true. There may eventually be frameworks in JavaScript that compile to true native but they don't truly exist right now. Yes react native is heading in that direction but really no JavaScript framework is going to be as powerful as true native. Source hybrid app developer.
Idk I ran vue cli and I haven’t tweaked my webpack config at all except to proxy calls 
share your thoughts. criticizing is the easy part. stackchief is about having discussions and sharing ideas. if you're really that above this article, then demonstrate your worth. and remember, there's a growing number of people learning to code who rely on articles such as these to understand the "entry level" concepts discussed.
 Object.assign(someElement.style, { width: '100px', height: '200px', background: '#foo' });
It's a couple of entry level paragraphs. That's not a value judgement or a critique. Some people may find them useful. I didn't. If you are like me, my comment will save you a click. If not, good for you, enjoy the read.
wrong. every variable you define is allocating memory.. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management This article is a bit dated. Check out a more recent post like: https://www.stackchief.com/tutorials/4%20Easy%20Steps%20to%20Using%20Webpack%20with%20Your%20Node.js%20App
parseInt(1 / 0, 19);
every var you add allocates memory...thoughts now? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management
JavaScript ¯\\\_(ツ)\_/¯
&gt; Bonus: _.flatten: Array.smoosh I really hope that won't be the case.
Please submit a js fiddle with you code or similar.
I’m pretty sure no-one wants that. I’m guessi the smoosh debate is really just the crap restaurant game. That is, if there’s a group of you and you can’t decide where to eat, suggest the worst option and it galvanises and focuses the group to come up with something better to avoid the worst outcome.
surely, but if he's trying to sell the product he should focus a bit more, imo. To me it sounded like "find out for yourself". But your suggestion is valid also, of course. 
`filledArray = (value) =&gt; [...Array(n)].map((v, i) =&gt; eval(value)) `//usage filledArray('v'), or filledArray('i') or filledArray({someobject: 'asdf'}) 
$.getJSON is asynchronous. You can't access its result outside the callback, which is called after $.getJSON actually gets the JSON for you. The thing you need to understand is that `alert(datess);` is being called BEFORE the `var datess= new Date(datess);`, because a certain amount of time passes before the JSON is fetched from the url.
switch(true)
that makes more sense now..what about: https://www.stackchief.com/blog/Introduction%20to%20Scala%3A%20Scala%20vs%20Java
😩😩
Are you noob?
In my experience working with Webpack and similar tools, most of the things you need to configure are asset processors like Babel or PostCSS. The bundler itself doesn't need much configuration, unless you want to play tricks with module resolution. Parcel's approach is to have individual config files for each asset type, such as .babelrc for JS, .postcssrc for CSS, .posthtmlrc for HTML, and such. This seems to work pretty well in practice, at least in my experience with it. The few options Parcel does have, like where to put the output, just go on the command line. Parcel is still missing a lot of features like tree shaking, but then again, it's only a few months old.
Also, you don't need jquery to make a network request nor to iterate - you can do it just with vanilla JS, which is easier for someone just learning the language.
I used normal JS too. But I still have this problem: This is not the exact code, but again the problem is that I can't access a variable outside of the function. var xmlhttp = new XMLHttpRequest(); var url="http://localhost/cala/db.php"; xmlhttp.onreadystatechange = function() { if (this.readyState == 4 &amp;&amp; this.status == 200) { var myArr = JSON.parse(this.responseText); ........ } }; xmlhttp.open("GET", url, true); xmlhttp.send(); alert(datess);
I've never had a problem with configuring webpack.. just keep the docs open is all. No idea how it's so hard for people
I've heard that it was a joke. Then again I dunno what to believe anymore.
E.g. You might not need Lodash, but you're probably going to use Lodash anyway. The standard lib has always been severely lacking. I know why, but honestly, I don't get why. It takes browsers a long time to adopt features, sure. I just don't understand why it took 24 years to get `Object.values`, but every browser has had say, SVG support since 2005, and SVG is something immensely more complex than looping a associative array. Can't complain too much though, I'm glad these methods are starting to make the standard lib. Now if we could just extend Array properly...
&gt; Webpack is zero-config and zero documentation too. But I guess you'd have to have documentation to realize that "zero config" is a lie to begin with.
I can’t upvote this enough 
Hey talhaguy, It is really that you are exploring the likes of JavaScript. Rather than you looking out for ready made, it is better that you explore things by your own. To start developing you can create a small user registration page on JavaScript. Any help you need, I am always reachable on the same channel, or you can even reach me out at sid321988@gmail.com. In the meantime if you want to dig a bit more on JavaScript, you can always look up to a learning site like [w3schools](https://www.w3schools.com/js/) or [tutorials point](https://www.tutorialspoint.com/javascript/index.htm) . There are also books for reference like the ones listed by Eric Elliott [here](https://medium.com/javascript-scene/12-books-every-javascript-developer-should-read-9da76157fb3) . Cheers, Sid 
Super unhelpful.. 
OP, having no experience building a web app via functional programming: you might want to look at clojure tutorials, since clojure is a lisp dialect you might find some interesting approaches to functional design.
So... why does this have to be a preact app?
That response makes sense.
Ohhh. Was thinking of trying Parcel on our project until I saw this. Yes, we need tree-shaking too, and dynamically loaded bundles. 
[...Array(100)].map((v, i) =&gt; (i + 1) % 3 === 0 ? 'Fizz' : i + 1).map((v, i) =&gt; (i + 1) % 5 === 0 ? (~~v ? '' : v) + 'Buzz' : v).join(' ')
haha, nice. someone should do that in an intreview
It is MUCH smoother and uses far less CPU on my newer 2016 MacBook Pro (other one is a few years old, 2014 model I think). Anyway, thanks for a cool game!
And is useful for generating keys.
Sounds like a true node module
w3schools is quite a poor resource. Granted, they're better than they were in the past, but they're still pretty unreliable. Just use MDN instead.
No, JS was bad compare to other dynamic typed language.
Heh poi is currently uninstallable because of a @typed/webpack dependency :(
Was thinking the same thing. That section of the article is so unnecessary.
I actually choked when I saw it's 4.1 already. I mean geez hold your horses I still didn't even touch 4 version and seems like I will just skip it as 5.0 incoming on summer. 
36 and 2 arent coprime, so the length of the output isn't always guaranteed to be the same. Use coprime set of numbers, toString(35). Any number stored as base 2 and formatted to base 35 will result in an "infinite" length string. You won't miss the "z".
One thing to keep in mind about JavaScript is that it is not strictly a functional programming language, nor is it really an object-oriented language. It is an interesting blend that tries to get some of the best of both. Don't try too hard to force yourself into either paradigm. There will be times where either approach will could better than the other. For functional programming try to start by focusing on the idea of having small pure functions (as much as is possible). Technically whatever you are doing to the DOM is a side effect but you can still try to isolate those in a way that will have fewer impacts on other parts of your webpages. Challenge yourself to write cleaner code that is less error prone, easier to test, and easier for others to read and understand. If you can achieve that then you are growing as an object-oriented functional programmer.
I use Github issue so that you can comment under the issue. For people who would like to get a copy of the articles, I also put all the articles here [https://github.com/n0ruSh/the-art-of-reading/tree/master/articles]
Also funny because true.
Oh gotcha, that's clever (albeit misleading)
Use node.js and something asynchronous like web workers. 
Javascript is probably not the right sort of language for something that power-intensive and time-intensive. You'll be better off using a fast compiled language instead. &gt;I have my js files that I'm running in Firefox (because I don't know any other way), but my laptop fan doesn't even turn on and my CPU usage stays low. Might have something to do with the fact that JS is single-threaded.
Yes, I see your point. Being too dogmatic could cause more harm than good... I've seen some examples in which programs wrap impure functions in a namespace to separate them from the functional code. Are there any other techniques to keep them separate? 
My point is almost no one actually does that.
I definitely use namespaces in my code. However, I do so to help avoid conflicts with other code that may be included in the project, not to isolate functional from non-functional. I try to keep my functions as small and direct in purpose as possible. If I need to manipulate the DOM then I will combine the related manipulations in a function of their own. I feel ok calling the "side-effect" function from inside my "pure" function. I will pass the data and/or the container for the changes to the "side-effect" function. 
Yes. A few recent libraries are building up on this feature in the browser (e.g. [deeplearn.js](https://deeplearnjs.org/)). If you are interested, you can read up more about those [here](https://www.robinwieruch.de/machine-learning-javascript-web-developers/).
https://stackoverflow.com/questions/13688238/javascript-style-display-none-or-jquery-hide-is-more-efficient this post should help you with your problem
Instead of setting style directly, it would be more elegant to toggle a class on the element, that way you can manage style more through the CSS only. Doesn't matter a whole lot in this situation, though. Your issue is that the syntax is wrong: `document.getElementById("yesAphid").style.display.block;` https://www.google.com/search?q=set+style+display+javascript Use `document.getElementById("yesAphid").style.display = 'block';`
So, sparse array access in Chromium is slower than in Firefox?
Randomly changes the background color of all elements on page for a nice eye massage! setInterval("document.querySelectorAll('*').forEach(a=&gt;a.style.background='#'+(Math.random()*16777215).toString(16).substr(0,6))", 300); 
Click save menu, it will save as markdown file.
If you are using [Web Crypto API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API) or your digest method is asynchronous, you often can probably process multiple hashes at once, getting the same effect of threading without using workers. Set a limit to the number of simultaneous processes, process that number all at once, when each one finishes, start a new one. I've not done this with crypto, but I have done it with similar asynchronous tasks and I was absolutely astonished at how fast it was. Knowing how many things you can process at once is difficult. When I did this, my bottleneck was the filesystem, so I think I kept it down to something like 16 processes, but in your case you may be able to go a LOT higher than that. Keep an eye on CPU and memory usage and adjust until you get a feeling that you've hit a ceiling. And obviously if you only see one CPU being hit, this option isn't working. If that doesn't work and you feel more comfortable staying in the browser, you should look into [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers). Here, you spawn new processes to do the grunt work simultaneously and identically on different chunks of your task. And Node.js doesn't have web workers per se, but it has something basically the same called [Cluster](https://nodejs.org/api/cluster.html). I have no idea if node would be faster, but node allows you much more memory (by default 512MB for 32 bit systems and 1GB for 64 bit systems), so if your hashing algo is memory intensive (probably not if you are brute-forcing), this may be a good option. 
Hotshot the global entity with a bypass network. Make sure to hatch-code keywords like "sys" and "index". Reroute array and splitter feeds to the globe with nodes and IX's. 
I would say, always check MDN doc, courses on PluralSight, JS books (Eloquent Javascript, Javascript the good parts, You Don’t Know JS)
Thank you for the response, and sorry if this is a stupid question, but how I would I be able to then access the array again after running startGame()? I can see this definitely working at the start of the game, but in terms of once the game is underway I'm just having trouble understanding how I would then keep continuing to "pass down" whatever the current array is to the other functions after this point?
;)
Going back a step, if you want to frequently add/remove elements from the deck/array, it would probably be nicer if your buildDeck returned an object that could be interacted with abstractly (such as using a method called "removeCard" to remove the card from the deck's *internal* state and return the card) A less elegant solution to your question is to just pass the current deck around as a paremeter to functions. `const alteredDeck = removeAndDisplayFiveCards(startingDeck)` :/
Haha I feel your pain, but this is entirely too common so please don't beat yourself up. When you are brought in on a big codebase chances are there will be a pretty big learning curve even for simple things. Sometimes you take shortcuts and learn by making mistakes, other times you actually have the time to understand what's going on before you become productive. In either case, don't judge the code base, it'll only make you more frustrated. Imagine that it was written by people who were under enormous pressure to deliver something quickly. And secondly, don't judge yourself. Take your time if you can but know that almost all of us go through this phase at one time or another. Good luck! 
Thank you! All that makes sense, I probably just need more time to understand these things, a friend told me today it usually takes around 2 months to get used to a codebase, and it makes sense to me
Ah ok, I think I'm starting to see what you're saying. I'm realizing I've had this idea in my head that the array of the active cards needs to be "living" somewhere where they constantly be accessed by other things, but it looks like I should be using callback functions instead (which I haven't really ever tried using yet), and doing that would let me keep modifying the array and passing on the updated version of it other functions. Assuming I'm actually understanding that correctly, that seems to make sense to me. I'll take a look into trying this, appreciate the help!
If you’re going to reduce it like that, at a certain point, the answer becomes “use html, css, and vanilla js... and cmd R”
You'll need to do something special to utilize all CPU cores. Running a single loop in JS is only going to use a single core unless you're specifically using WebWorkers, forking processes, or something like that.
Nope.
When I started learning functional programming, I started with Haskell. I didn't find it very practical for my own needs, so I nowadays use clojure as my go to language. Also, clojurescript is clojure that compiles into JavaScript. It's great if you're into web development. As an example, I submit my own https://github.com/sp3ctum/squanmate/blob/master/readme.md The developer experience can be very good with clojurescript. Interactive code reloading and error display works great out of the box for example. On the other hand it might require some extra learning, since it's a new language and ecosystem. Hope it gives you some ideas at least!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [sp3ctum/squanmate/.../**readme.md** (master → efa2bc1)](https://github.com/sp3ctum/squanmate/blob/efa2bc1d19aa8168607a20d199a5c22eedbed647/readme.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvu546j.)
Shit I'm getting down voted. I guess not
The number is above the maximum safe integer in ES6: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
Looks unnecessarily verbose and old IMO. Also, the array iteration methods are nicer than `for`.
Well, just think about it - what kinds of things can you do in a browser *particular to being on a browser*? All sorts of things relating to the window and document, among others. Similarly, what's the point of Node? Server-side Javascript. What sorts of things can server-side applications do?
I guess it's a confusing question because I'm thinking that everything is "web." If I make an API call through the browser using fetch, the DOM isn't really doing the work, but it's accessed through the DOM. Authentication can be seen the same way. You have to have your route set up and connected to the server to authenticate. But when they say "function" I guess I don't know how to answer that. Do they mean can I write a function for the DOM that doesn't work on the server? 
This site is so cool, thanks for sharing
I wish that the standard would embrace the iterator protocol more. Why add more and more functions to the set/map/array prototype, when all of them already implement iterators... The standard should add something like itertools to the spec. 
One minor thing that annoys me: no math operator overloading. JS should have at-least the possibility of overloading the basic ones (+ - * / ** @) like Python does.
I think what they meant is something like... You can't handle user actions in the server (browser event handlers). You can't access your database in the browser. Of course there are exceptions, but there are things that you generally can only do in a specific environment.
What was the problem? I installed vue-parcel or something and then i could use single file components with all of its features. What other problems did you run into?
At this point the majority of people using IE are doing it because they are directed to by their corporation. There's no value trying to convince them, because it's management that need to be sold.
Windows Server 2016, which launched after Edge launched, only supports IE11. Businesses using Remote Desktop Services, or buying into Citrix Desktops, have precisely one supported Microsoft option in 2018: IE11.
Ehm, did you per chance heard, that (unit) tests should be deterministitc? if you generate random inputs then well... you cannot really depend on your tests
It depends on the situation.
Cool concept. Too bad it seems a little empty for now. Also, in my experience at work, there's more to pair programming than just using hangouts. How could this ensure you're working on the same code?
If I was starting a fresh project, I would be cool with adopting its conventions. The less decisions I have to make, the better. 
This. Too many decisions, Go has spoiled me.
What do you mean by "augment"?
Once official pug/jade support is merged, I'm going to try to migrate my 400+ line gulp build. It's not going to go well.
I’ve written books (free to read online) that teach JavaScript to people who already know C#, Java, etc. They should be an easy read for you: http://exploringjs.com
I mean extend. Like you can override parts or add to it in your own config without having to touch the base config of the project. This also means you’ll be able to upgrade the version without breaking anything or have to copy and paste everything into a new setup. 
Here is [the DOM interface](https://github.com/Microsoft/TypeScript/blob/master/src/lib/dom.generated.d.ts) for TypeScript. It tells you all the APIs for the DOM (that you wouldn't get through just Node.js, which by default doesn't connect to a browser). Edit: [here](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/v8/index.d.ts) is the interface for Node.js v8.9.x. You can see all the other common interfaces, such as for each ECMAScript version, [here](https://github.com/Microsoft/TypeScript/tree/master/src/lib). TypeScript's best feature is in enhancing discovery of JS APIs, in my opinion.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Microsoft/TypeScript/.../**dom.generated.d.ts** (master → bb23e96)](https://github.com/Microsoft/TypeScript/blob/bb23e9601f5ea0b4fe1e97545ef01535fa18a23d/src/lib/dom.generated.d.ts) * [Microsoft/TypeScript/.../**lib** (master → bb23e96)](https://github.com/Microsoft/TypeScript/tree/bb23e9601f5ea0b4fe1e97545ef01535fa18a23d/src/lib) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvuagz1.)
Go watch Classroom Coding with Professor Frisby, by Brian Lonsdorf. And then read his book, and watch his course on Pluralsight and Egghead, and then go learn Haskell instead ;) No seriously, that guy is awesome for learning functional JS.
If this is for use with web browsers then all of your variables ($variable) should be converted to use the var keyword (var myVariable = ...). You won’t have file reading capabilities, but I am assuming based on your context that those PHP methods are just unfortunately named, and that this is fetching or posting to a url. To do that in JavaScript you will need to use Ajax. You can either opt to use a library like jQuery or it’s fairly simple to make vanilla cross browser XHR requests. Edit: you’ll also need to look up how to get the query params ($_GET[...] in your snippet) Edit2: for what your doing I definitely recommend trying it with jQuery Ajax first. It’s api is pretty simple to use.
Atom Teletype for the win! Actually I haven't used it, but this might be the chance to give it a shot.
PSA: I've tried using Parcel, but I quickly realized that the way it handles deps is incredibly broken. If a package contains a bablerc file it always attempts to build the package, no matter what the package.json says. Aka, most npm packages break with Parcel. And after bringing this up in an issue, they decided that it wasn't a problem they thought important enough to fix. 
Nevermind, I seem to have fixed it.. the DOMContentLoaded was before everything is loaded I guess? Because if I use the setTimeout function and set it to 2000 it adds it as expected.. Why u do dis.. EDIT: even 500 fixes it. How does DOMContentLoaded not work here? Anybody a pro and care to explain?
With ES6 modules you can just import the lodash libraries you actually need. The main one I still find very useful is lodash.get. Great for querying an objects deep param defensively. 
I think it comes down to what you feel comfortable with, certainly there are advantages to writing es6 code and for the mean time having a transpile pipeline with the intent to remove it if you so feel inclined. Puritans among us would suggest that writing es6 code is cheating and anything that es6 code can do so can es5, which is certainly an argument that holds some water, but again it comes down to the developer. Personally I use es6 with a webpack transpile pipeline. I work in government sector however, so we have a high accessibility standard to keep to, which necessitates the need to support some of the less feature rich browsers. I would prefer to write my code in all es5, in hindsight.
If this PHP was pasted here literally as it looks on your server.. you're going to want to go and change the password you just pasted here.
If people aren't complaining about your language, noone is using it. Frankly, the PHP bashing is way worse than Javascript, and PHP powers the biggest portion of websites (unless you count JS being in the frontend everywhere). It is worth saying &gt;but we have the strict mode, typeScript Typescript is a Microsoft project to build a "safer Javascript", JS can't really directly take credit for that.
Start with Typescript because is very inspired to c#, take some time to explore redux/mobx to have that mvvm feeling in your js apps.
Maybe you could sit with another developer, show how easy it is to implement what you need to, and ask how that should best be integrated into the existing codebase. You learn from working with someone familiar with the codebase, and they learn a new perspective from someone new to the team. Pair programming FTW!
I recently started consulting full time and was looking for a time tracker to track hours spent on various projects. There are quite a few of them. I found that the ones that are feature complete are pretty expensive for anything beyond the basics, and the ones that are cheaper/free didn't have the features I wanted. So I thought it would be a good side project. It is entirely made in vuejs and backend is Firebase. The main features are: * Cloud-based timers - so they keep going even if you go offline or turn your computer off. * you can pause your tasks - I still can't understand the timers that expect you to finish your tasks in one sitting. TimerBit allows you to pause and resume as many times as you want. * color-code your projects - So you can organize them and easily identify projects in analytics * Analytics and calendar - so you understand how you're spending your time visually * Reporting - you can download pdf timesheets (for invoicing etc) There are many more features to come. I would really appreciate your feedback - [https://timerbit.com](https://timerbit.com) Thank you, in advace for checking timerbit out! 
Program asynchronously. Just Google for it and it should be self explanatory.
CSS variables don't work when we use them like this: `background : url(var(--imgURL)) no-repeat center;` That sucks!
Writing using bleeding edge ES6+ features and transpiling to ES5 with Babel. Don't see a need to ignore the benefits of the latest features when supporting older browsers is as easy as dropping Babel into the build process.
Thank you so much for the suggestion! Oh yes this was one of the first things that came up when I started using timerbit myself. Currently I have it so it sends interrupt notification every hour (which you can change the frequency of) reminding me to take a break, but email is a cool idea. Will figure out some logic so it doesn't feel like spam. Thanks again! 
No.
Thanks for the feedback. I've updated the article so it's clear that you don't have to use it. Just used it so I did not have to set up other stuff before I could start writing it.
If you have Windows you can test it out already, just follow the docs [here](https://github.com/MicrosoftDocs/live-share/blob/master/docs/getting-started.md#downloading-and-installing). Haven't been able to test myself, because I'm on Linux. Was super disappointed to learn though that it's not open source, and Microsoft will eventually build paid premium features into it ([source](https://code.visualstudio.com/docs/supporting/live-share-faq#_how-much-will-it-cost)). Makes me want to switch back to Atom.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [MicrosoftDocs/live-share/.../**getting-started.md#downloading-and-installing** (master → 1d51114)](https://github.com/MicrosoftDocs/live-share/blob/1d51114cc42c447bff1fb7a3fcac2d0afaa05144/docs/getting-started.md#downloading-and-installing) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvuffxy.)
What does the numbering matter?
Some great react native courses by Stephen grider on udemy. I'd Amado highly recommend reading you don't know JS, its a solid series to really understand javascript. Also use the airbnb eslint rules. Having that thing yell at you will teach you a ton of JS things too. 
It's like saying MS Paint has fewer configs than Photoshop. It's cute when these new bundlers try to compare themselves with Webpack.
What do you mean by "block"? When I run it, changing imgUrl to something valid, like https://placekitten.com/g/320/200 , it works fine and I get a good result. When I run it with an invalid url, from the browser perspective, it hangs. Why? In getImage, you are converting the Error object into a valid response -- what was thrown is now simply being returned. Normally promises are placed into either a rejected or resolved state. By returning the exception, the code will always result in a resolved promise. Not necessarily wrong, however the code does not handle this in the "then" function within the get handler. In other words; either rethrow the exception and add a catch clause in the getImage promise chain, or handle the fact that response will be an Error object and will not have a data.length property if the image failed. const express = require('express'); const axios = require('axios'); const asyncHandler = require('express-async-handler'); const app = express(); async function getImage(imgUrl) { try { return await axios.get(imgUrl); } catch (error) { throw error; } } app.get('/', asyncHandler(async (req, res, next) =&gt; { const imgUrl = 'http://example.com/image.jpg'; getImage(imgUrl) .then( function(response) { // console.log(response.data.length); res.json({ length : response.data.length }); }, function (error) { res.status(404).json({ error: String(error) }) }); })); 
People tend to cringe a bit when you day "I'm using Lodash..." because you shouldn't use it now that we have ES6/7 and that it can be a hog, but I'm not 100% convinced. However, I do agree if that if you need specific functions from the Lodash library, then you can install them individually (say if it's 3-5 of them at the most) and then summon them whenever they're needed. 
Perhaps I’m missing something but couldn’t you use create-react-app?
I've just finished(ish) my first decently sized React &amp; Redux project, a Spotify web client that I've tried to make as feature rich as possible! There's still a few features I'd like to implement and I'm still working on improving the bits I've already done, but it's finally at a point where it's up and running with all the main features I wanted to include. The live demo is up on Heroku [here](https://reactify.herokuapp.com), and all of the code is available on Github [here](https://github.com/Adam-Campbell/react-redux-spotify-client). Thanks in advance for any feedback or anything, this is the first real web application I've made and it's exciting to have something to share!
I just finished a big project using vue/vuex/vuetify and the only config item I needed to change was to proxy api calls so I could use the webpack server during development, We can agree to disagree but I have the feeling most people just use whatever these CLI tools generate.
Use bootstrap. Customize it only where necessary. Don't try and reinvent the wheel and make yourself crazy.
Gotcha. So, in short, I should start moving toward using es6 modules? 
Organize it like other languages. Meta info in comments Libs Variables Functions Main logic Comment the “why” as much as possible Keep it simple Don’t repeat yourself 
Yes. 
Always write using the latest language versions and transpile later automatically.
I'd recommend learning everything ES6 and ES7 has to offer, but beware that the syntax and functions may not be implemented in older browsers, so it's common to transpile your code back in to ES5 (which will work in old browsers such as IE9) https://babeljs.io is a popular JS transpiler. If you are just learning and only running your code in Chrome, you won't need to transpile, as Chrome has implemented ES6.
I'd highly recommend sensible indentation - in addition, if you don't want to wrap your scripts in DOMContentLoaded every time (it can be annoying, and sometimes a page can get DOMContentLoaded before the script loads, as you're experiencing), another option is to simply give your script tag the `defer` attribute.
&gt;You can either opt to use a library like jQuery Fetch is a better, modern, no-library version. Promises are great.
Basically, it's certainly up to the coding partners which tech to use. Hangouts is just a recommendation for easier communication with no need to install stuff. :)
I’m pretty good with ES6 and I’m using ES7 as needed (for now). Learning how to use Babel to transpile Code is literally next on my list so, looks like I’m moving in the correct direction haha. Thanks!
Who cringes when you say that? Lodash has tons of functionality, and it's often more performant than the native versions when there is overlap. Lodash : standard library :: Bluebird : native Promise. Can you get away without it? Sure, but it still offers tons of benefits. 
Oh! It'd be cool if State of JS asked a question about this: "Do you use boilerplate, a CLI, or start projects from scratch?" I'd love to hear the answers. I've never seen anyone use a CLI for any major long-term product. But I've seen plenty of people start out with boilerplate or write everything from scratch.
I see you're still in 1998. There is no such thing as "form submit" any more.
You seemed to have missed my point? I meant that the topic was about which tool could get you up and running more quickly, starting from an `npm install`/`yarn add`. The clear winner here is Parcel. It comes with more functionality without additional configuration. Sure, it's true that a project can and usually will "outgrow" Parcel, but that's another issue.
I released an open source library for Node.js and the browser called [foodWeb](https://food.js.org/) to use the USDA Standard Reference Database. The library searches through the database and returns information like calories and nutrient content for a food item. I made a basic example [here](https://food.js.org/example/). I'd love feedback on the library or the docs! :)
In the link I posted, it explains how that can be implemented automatically.
It's a quite common behaviour. And it makes particular sense when you notice that _there is no submit button_ in that form. The behaviour itself of saving without explicit submission is _fairly_ common, particularly for this type of forms, like profiles, and in the case where it's "free" to do so (i.e. you can easily change it back at no cost and there are no other consequences outside that data itself). The only thing missing here is that they give you _no feedback on save_. That, from a UX POV, is what makes it strange. (You might want to bring this topic to a different subreddit, such as r/userexperience, if you want, as it hardly fits here in r/javascript)
Thinking about it, 404 is not the right error. 500 would be better, inspecting the error object for a status and using that, with 500 as a fallback, would be best.
If you're already using ES6/7 then the next step would be Webpack or Parcel.js which allows you to use ES6 modules. You only need Babel if your runtime environment doesn't support the ES6/7 syntax/functions you are using
i will post it there then, thanks for the advice
Array.not_mootools_real_flatten
No.
I reckon the intersection between developers and reddit users is pretty large.. 
I'm just starting out with node+typescript. So a couple of n00b question... 1. What are the issues with using their transpiler? 1. And in that case how do you convert your .ts code to .js for execution?
MS doesn’t support it, but big businesses do. And it still has a large presence in corporations and government agencies. Edge hasn’t made a dent in those areas.
Really nice site, the UI is very well done! However, I came across a small issue on the main site: https://gyazo.com/16a67b19839871579095daaaff9c3574 (this happens with the Contact Us popup as well) A change to the z-index of the images should fix it nicely :)
We heavily make use of lodash at my work and we're not ashamed. It's huge maybe, but in order to offset that, we try our best to simplify all our logic using it. If you smartly use it, you can reduce significant amounts of code branching too, which is invaluable.
Error handling is irrelevant here.
Reddit programming forums seem to be filled to the brim with self promoting spam links from clueless amateurs trying to market a blog for ads/resume.. NO actual conversation, just shitty blogposts from 2016, github repos and course site spam with affiliate tokens. 
Yeah, Ramda is the way to go.
Just looked at fetch api. It is not cross browser compatible. One note is that for someone just starting out jQuery tends to be easier to understand than Promises (although Ajax api kind of emulates it)
&gt; however you will need a bundler (webpack) to use these in a browser Only if you're targeting IE11 or Firefox &lt; 60. Modules are enabled by default in Chrome 61+ (current is 65), Safari 10+ (current is 11.1), Edge 16+ (current is 16)
Thanks for your help. I’ll try out both methods. 
Lol, just tried it and got a 401 :P
that would work if I don't need to transform the navigation with JS and flexbox (wrap-reverse), and the html is generated by Wordpress menu so I had to follow their html structure which is bad :P
If debounced, I don't see any problems. If not; enter huge backend bills. Could also be locally saved and persisted via redux/redux-persist. 
When i write in JS, i write Code that must Work on Evry popular browser (including Internet Explorer). Lodash is best way to using 'easy' js function from ES6 in IE. So, i thing, Lodash is 'must have' library. 
Ah! Good catch. I will fix this today. Thank you so much for checking it out!! 
You don't need a React app either. You literally only need to run TypeScript for this.
How about using bare import specifiers for additions to the standard library, so that they can be introduced in a non-breaking way in the future, and possibly allow browsers to only load the needed libraries (e.g. `Math`) for a given module to reduce loading time. Imagine if we had this: import { flatten } from 'js/array' [[1, [2]], 3]::flatten(2) The above example incorporates the [bind operator proposal](https://github.com/tc39/proposal-bind-operator).
How did you write this?
&gt;It is not cross browser compatible. In modern browsers, it is. (for ancient browsers that don't support it, that's what polyfills are for)
[100LOC game](https://codepen.io/mlajtos/pen/jZKzjX?editors=0010) I made
If you’re asking this question, then the task is beyond you. 
http://fabricjs.com/ &gt; Fabric.js is a powerful and simple Javascript HTML5 canvas library Fabric provides interactive object model on top of canvas element Fabric also has SVG-to-canvas (and canvas-to-SVG) parser
Lmao what? He's asking for a good canvas drawing/animation library to learn. How is this beyond him?
https://github.com/FermiDirak/CalculusBuddy I'm writing a symbolic calculus solver. Trying to follow best practices for TTD and documentation and code readability. Specifically need reviewing and pointers on documentation-ing. I also want to know if Im on track for deployment to NPM
xmlhttprequest. It's not a form element, nor does it submit.
I feel like that is what I'm trying to convey. I also worked at a place where we used it frequently. However, this was before people started using es6 on a regular basis. So we decided to use lodash because it was proven to work on all browsers. I guess what I'm saying is that there's nothing wrong with having it, but if you wish to use specific components from the library then install those and that's it. Regardless, it's not like it will bog down your system on a modern device.
Using bitwise operators instead of `parseInt()` is cute trick, but once you go beyond a 32-bit integer value... you won't get the same result. ~4294967295 // 0 ~~4294967296 // 0
Floobits is good. 
Fetch, a modern replacement for XMLHttpRequest works in Edge, FF, Chrome, Safari, iOS Safari, Chrome for Android, UC Browser for Android, Samsung Internet. It is not supported in IE11 (of course), nor in Opera Mini (which has problems with most Javascript).
Sharing your work takes a certain amount of courage and toughness. Try not to get too disheartened by the criticism of your peers. At the same time, take note of the feedback that you receive in order to improve your skill and learn ways to keep getting better. 
Maybe we are looking at different things? [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) under browser compatibility 
On your MDN link, it does appear to have basic support across all browsers except IE. (Direct ReadableStream access is not an essential nor important feature of Fetch I think, I've never seen it used myself) https://www.caniuse.com/#search=Fetch
Ah yes I was looking at the readable stream portion. Btw, if we also consider complexity, I would point to this article for a read: [https://medium.com/@shahata/why-i-wont-be-using-fetch-api-in-my-apps-6900e6c6fe78](https://medium.com/@shahata/why-i-wont-be-using-fetch-api-in-my-apps-6900e6c6fe78). This just came up as I was searching for API docs on fetch. I think that I am not wrong to tell a beginner to start of with an easy library API before going to low level APIs that you need polyfills for. On top of that the error catching gotchas described in the article seem like they would hinder productivity for a beginner. Either way, I do not think I was wrong to suggest jQuery to start with. I do also agree IE needs to go away already, and that fetch as a low level API is better than what we’ve had before.
HAHAHA, you are so wrong. Look at the source. The comment box is in a `form` element. That element has a submit handler. Oh weird, the button is a submit too: `&lt;button type="submit" onclick="" class="save"&gt;save&lt;/button&gt;` You are an idiot.
mac/ios users have to install an app or plugin
I didn't use the comment box, I used xmlhttprequest like I said.
&gt; Not likely, as there is no blocking in node/javascript. This is not true in any way. Asynchronous things don't block (i.e., waiting on a http response from a web request), but normal execution can block just fine. In this instance, the issue is due to the incorrect error handling you pointed out. Likely, the `error` that is being returned instead of thrown in the error scenario has no `data` property, so accessing `error.data.length` causes a runtime exception (and the server never responds because it crashed).
Yes. If you're using HTTP2, you can push the individual modules to negate the need for multiple round-trips, though technically that goes for regular webpack/require as well.
I want to point out that this does not include the use of an object in the sense that it could be class with methods and internal state. I am simply referring to Objects as a data structure that hold data.
&gt;Is it possible that asyncHandler expects you to return a promise? FYI, an async function works just like a function returning a Promise, so asyncHandler *is* already getting a Promise. Changing it to `return getImage(...)` or `await getImage(...)` won't change in that regard.
I am specifically thinking about/looking for use cases that I missed. At this point I see no reason to prefer: * Arrays over Sets unless you need duplicated values or are doing only writes/pushes/adds. * Objects over Maps unless you are only adding and hardly ever reading/iterating. Are there other scenarios where plain Objects and arrays are preferable?
&gt; Puritans among us would suggest that writing es6 code is cheating and anything that es6 code can do so can es5 Puritans such as: Yourself and 5 other people
1) I don't like microsoft's opinions on the direction of javascript. I don't like how they want to transform TS into a .NET component. I have zero faith in Microsoft's neutrality given their history with screwing with standards. In short, I don't trust them. So I'm not locking myself into their system. 2) I use babel to compile my code. [This plugin](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-typescript) compiles out TS. [These guys](http://artsy.github.io/blog/2017/11/27/Babel-7-and-TypeScript/) wrote up an extensive guide on using babel with TS.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [babel/babel/.../**babel-plugin-transform-typescript** (master → d260bfa)](https://github.com/babel/babel/tree/d260bfaec47f1c34933ff2abdf1fd4ffded4875d/packages/babel-plugin-transform-typescript) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvuy9sx.)
It might be interesting to mention here that you're only testing this on Node, and on a specific version (9.8.x). In the repo there is a "Results for Node 9.8.0" title which makes it clear but you forgot to point that out here.
Yep that's an important point. I will see about running the benchmarks on other node versions and any browsers that have the collections all implemented.
What do these devs do during the day if they aren't familiar with reddit?
Don't give up.
That’s awesome. AI is so cool. Have any of you checked out tensorflow?
Quite trivial and irrelevant for functionality, but: if (getMissingOptions(options).length &gt; 0) { console.log('\n The following mandatory options are missing: ' + getMissingOptions(options).join(', ') + '\n'); You're calling getMissingOptions twice when you only need it once. Same for getInvalidOptions &lt;condition&gt; || (providedKeys.indexOf(key) &lt; 0) I think the more semantic format would be `|| !providedKeys.includes(key)`
Not, but talk to me about that :)
It’s a free open source language made by google. Quite few large companies use it though Uber is the only one I can think of off the top of my head. It is pretty cool and makes the process of learning AI fairly easy with it easing you into the process.
Good points, thank you! I'm going to amend these.
Jsperf is a great site for testing in browsers. 
On our wiki under UsefulJavaScript 
Hi /u/innovert, For javascript help, please visit /r/LearnJavascript. Thank you!
Does it have a consistent structure? If so you can easily traverse the object with object.keys and add items as key and value to display in your table. If it’s inconsistent and has multiple levels you need something more recursive. I can provide something that coverts an inconsistent object to an array of keys and values if you like. 
even if you don't really understand JavaScript? /s
I dunno.... wanted to try it.
I am aware that it’s easy to write each individual time, but it’s much cleaner to write: get(data, ‘networkRequests.fetchInfo.status’, {}) Than data &amp;&amp; data.networkRequests &amp;&amp; data.networkRequests.fetchInfo &amp;&amp; data.networkRequests.fetchInfo.status || {}
You might not understand JavaScript......but apparently JavaScript can understand you...
I'm looking forward to [xray](https://github.com/atom/xray/) which is a new editor being developed by the Atom team. It's still going to be as hackable/open-source as Atom, but it's core will be written in Rust so it should be a lot more performant.
Maybe https://boostnote.io/
What part of JavaScript makes it not handle computation well?
I thought tenserflow was a library not a language?
I’m fairly sure it is a language but simplistic in being but I may be wrong
Being not close to bare metal enough.
Notepad++ with 100+ tabs
Amazing and it makes neural networks accessible, or at least it makes more sense to me.
I've got +10 years of experience working as a frontend developer and I must admit I don't recall having a need to keep any "snippets" of code. Sure, there are many patterns that are repeating, but then I either have my editor autocomplete it for me (VSC, Emmet) or I just google it. And when I know I need something specific from my old projects I just look it up in git repo (online). 
Github Gist. I would recommend it to anyone. https://gist.github.com
Oh well thanks for correcting me. I guess I have been looking for the wrong thing. I will definitely check out that link.
Someone mentioned this github repo in the other thread and it has many interesting snippets: https://github.com/Chalarangelo/30-seconds-of-code So I guess github would be a good place to keep them!
this seems like the obvious answer 
Currently trying to get it setup with Twitter, using Node JS as the backend, still not sure how to get input data to the server so it can guess which one of the authors it is. Any tips?
You can write perfectly predictable JavaScript, but even if you did it'd still be slow than for instance C/Go/Haskell in doing the same. This just seems like some weird dig at JS that I as a professional JS developer don't encounter.
 function isPlainObject(obj) { return !!obj &amp;&amp; obj.constructor === {}.constructor; } To check whether the argument is a plain object (e.g. `{}`, `new Object` or `Object.create({})`. isPlainObject({foo: 'bar'}); // true isPlainObject(new Date()); // false
30secondsofcode.org It has copyToClipboard functionality too. There are about 200 useful snippets of all kinds that you can use. There's also a NPM package for them 
I complete and keep different algorithms that are commonly asked in interviews in a git repo for future reference
- [codepen.io](https://codepen.io) - [jsfiddle.net](https://jsfiddle.net/) - [jsperf](https://jsperf.com/) or [jsben.ch](http://jsben.ch/) - [Github](https://github.com/) (personal projects and forks)
You seem to have a bunch of problems with cross-origin access. Look up CORS (Cross-Origin Resource Sharing) on the MDN and elsewhere to investigate.
I use Github gists. A former coworker of mine created an app on top of Github gists with added features (labels, sorting), now called Cacher, you might be interested in although I don’t think it’s free. 
For fucks sake make your intention clear. Either use includes() as suggested or “str.indexOf(‘a’) &gt; -1)”.
Generally, I tend to refer to previous projects when I need to find something that I used previously
Since you are already using `commander`, you might do the validation of command arguments through it. I mean, it feels somewhat of a waste to require `commander` and then do most of the work yourself.
He did Brain Residency Program.
If you mean that you are trying to convert a .js file into human-friendly english then you are out of luck. You will either need to learn how to read javascript or pay someone who does know to tell you what the code is doing.
Thanks for your response! I'll see if I can add/modify my tests to address these ideas.
Why? What's wrong with native scrollbars? Why someone use this?
In your jQuery example you set the `ps` var of the _current jQuery collection_. It will not be remembered the next time you select the element. In the `querySelector` example you create a new property on the element.
&gt; We still haven’t unified tool for comfortable work with API [Relevant XKCD](https://xkcd.com/927/)
I keep most of my reusable garbage code in https://npmjs.com like everyone else! 😂 
Disagree a lot actually. It requires you to have your code go on their servers, doesn't support a lot of editors (including vscode), can be pretty buggy, and honestly has a hefty pricetag for being a not very good product. I'm willing to pay, just not for crappy software.
https://github.com/jquery/jquery/blob/365284240429d442c3fbe9f505c7b297425bc3a3/src/core.js#L37 var m = $('.container'); function f(element){ const ps = new PerfectScrollbar(element[0]); element.ps = ps; } f(m); var x = $('.container'); console.log(x.ps, m.ps); $() create a new object everytime you invoke.In you code, you add ps property to 'm' object (jQuery object). Try adding to DOM element, Try the following code, It works - var m = $('.container'); function f(element){ const ps = new PerfectScrollbar(element[0]); element[0].ps = ps; } f(m); var x = $('.container'); console.log(x[0].ps, m[0].ps);
Great feedback. So I'll remove the loops and try to use some setup to avoid calculating the cost of creating the instances. I'm already fixing that first point now! Thanks so much.
YAGNI
Dash
Thanks for you correction.
A scrollable map of Ultima IV. 
This guy! This is my best laugh for the week...
After you check if spelledCorrectly is true, set it back to false, also you can break out of the while loop once you find a correct spelling.
Btw I followed this feedback and saw very different results. My findings are a bit more nuanced now but the actions seem to make more sense.
This already exists in the form of react-app-rewired. It's third party (I think) but same concept.
[Quiver](http://happenapps.com/)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tj/commander.js/.../**env#L15** (master → d8404f8)](https://github.com/tj/commander.js/blob/d8404f8de45c9ba780606878f4d35d0a45743d32/examples/env#L15) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvvhow8.)
I made something with [recursion and trees](https://www.blocklike.org/example/12-advanced/recursion_tree.html) Open console for source. Made with [BlockLike.js](https://www.blocklike.org/) 
`delete Object`
Codepen or Gist
Not in Chrome though. My point is that, *relatively* to other software, Hangouts might be more accessible to get up and running. Another one is Appear.in. Let me know if you can think of another piece of software that is even easier to get started with. :)
I have 10+ years worth of things I've learned about JavaScript in a folder that I keep backed up on multiple hard drives and online. Said folder has proof of concept (POC) projects with notes on what I'm trying to learn or demonstrate (e.g. I've done POCs on inheritance, prototype, scope, etc.), notes on various things I've learned with DOM manipulation, etc. I don't use online services like Codepen to store my code because I have trust issues with online services. There are some things you need to learn really well and there are some things you will hardly use in your career. I make notes on everything I learn because it always helps when I'm facing new dev work and I already have notes or even better - a POC I can use as a reference. As far as snippets, I do have several functions I can copy and paste (mostly regular expressions stuff), but everything else I write from scratch because each business requirement you are addressing is different.
Prefer fetch + [`pipeP`](http://ramdajs.com/docs/#pipeP). Turning async pure-ish is worth a bit of boiler plate.
I see, thanks. 
The body is currently limited to text but I'm going to add support for html soon. It's a trivial thing to do but my personal usage is limited to text for now. I use it in my automated scripts to send notifications to myself when needed (mostly small bots).
Thanks for your response. &gt;I have 10+ years worth of things I've learned about JavaScript in a folder that I keep backed up on multiple hard drives and online. Said folder has proof of concept (POC) projects with notes on what I'm trying to learn or demonstrate (e.g. I've done POCs on inheritance, prototype, scope, etc.), notes on various things I've learned with DOM manipulation, This week.... I uh... made a button that produced silly cat gifs....
How is this different from the events based approach of so many other Ajax libraries?
It all depends on the pool, in this example we knew that we had 2 solutions, either Kardashian or Trump, if you want to continue this project you will need [this](https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline.html) documentation for getting the tweets of the user, next, all you gotta do is feed the output from the twitter API to your node script, but the more 'solutions', eg. Trump or Obama or Kardashian or Kendrick Lamar you will need test data for them as well. If you just want a 'fun' project, since a lot of people are comparing the Obama era vs Trump era you can make a neural network to compare those 2, just feed in the tweets and watch it run.
Good one! Sounds better compared to Kim &amp; Trump. 
You can do whatever you want. Doesn't change the fact that forms are still very relevant to modern web dev.
Thanks! Very helpful! Now it seems to work, except that I'm unable to send anything useful back to the client; axios.get(imgUrl) .then(function(response) { res.contentType('image/jpeg'); res.end(response.data); }) .catch(e =&gt; res.sendStatus(500).json({ error : e.message })); `curl -I` gives me the following headers: HTTP/1.1 200 OK X-Powered-By: Express Content-Type: image/jpeg Date: Sun, 18 Mar 2018 08:21:21 GMT Connection: keep-alive ...but the browser doesn't show the image. If I use `fs` to save `response.data` to a file, instead, I can open the image and confirm it's OK. Am I missing headers or something?
I would add to that 'bleeding edge, but nothing beyond it'. That is, features that are already part of the standard, or stage 4 proposals.
Cool, thanks for the information. So generally speaking regarding your concerns of vendor lock-in... do you mean that you're still ok with using their language, as long as there are multiple compilers available? So I guess that babel plugin doesn't rely on Microsoft's JS -&gt; TS compiler at all?
In a project I did 3 years ago.
Whoa
I only use the static typing functionality of Typescript, which is beneficial. Any of part of the "language" I ignore. The babel plugin just removes the typescript typing text, then does its normal job.
Could you go into detail about which is best in terms of performance?
First method is good.. for performance 
To keep it clean, it seems to me that you only need a good communication strategy between the major components you showed in the diagram. This can be done by making them less coupled. A few ways to do that: 1. Use inversion of control, have your major components implement an interface and use that interface in the other major components and have a central component instance the correct classes. 2. Use events. Node has an EventEmitter class that you can use internally, and then you can bind event handlers and trigger events. This is like calling a function but nothing goes wrong if nothing happens. 3. Have a state management tool (like Redux) handle the common state for you. Keep only the external state of the component (the state that you think might be modified by other components) there. When a change happens, apply an update strategy. Personally, I recommend strategy #2 since it is already ready for use in NodeJS and its very javascript-y (to me at least). You may also profit from separating your models (data structures) from your views (interfaces). Basically just the MV from MV* strategies. This way, you can keep functions for initialization, validation, processing etc in your models and your update strategies and output functions in your views. Best of luck with your project!
I mean most AI research and development is currently done in python. Python isn't that different to JavaScript in terms of its ability to do intensive computation well.
Don't most people build things nowadays that they don't know anything about?
Thanks. I was actually thinking about that while working on it. Maybe I should fix it. Or maybe it makes Pacmanjs unique?
What exactly made the UNIX `mail` command unsuitable?
An easy way to send emails _through an external SMTP server_. I don't think that with only `mail` it's possible
They're just not needed any more.
https://github.com/AlexandrXDDDD/EasyJs
use GraphQL
Maybe I’m missing something, but nodemailer seems to do everything you would need already. Why create this new one? 
Isn't there a native Unix cmdlinetool that can do exactly that?
If you are interested in ML in JS, checkout [this recently published article](https://www.robinwieruch.de/machine-learning-javascript-web-developers/) about the status quo of it.
Neat but text description &gt; video. 
No it doesn't lol.
I mean it’s not 1980. Computers can handle it just fine. I don’t feel like the processing time is that much more difficult or time-consuming.
What the hell is this? Where’s the article? It just ends. 
Another fact: The added properties to your array will can not be serialized to JSON.
Says who? I mean where are the comparative numbers?
This falls under the "don't modify objects you don't own" rule. You don't know what kind of array methods might be added in the future. Don't be like fucking Mootools. Mootools ruined contains, flatten, and flatMap for all of us. Well, if your project isn't as big as Mootools, sites using it will simply break. Or your not-arrays can break other people's code which expected arrays. It also breaks dumb code which uses for-in. Adding/removing properties to arrays also has the potential to negatively affect performance, but that's more of a footnote given how terrible it is overall.
Sounds cool, post a link :) 
... but they do own the array they create. They're not modifying the Array prototype. Even if they did, the problem caused by MooTools isn't that they modified the Array prototype, but that they _only_ added methods to the Array prototype if the methods didn't already exist.
&gt; ... but they do own the array they create. They're not modifying the Array prototype. They created this instance, but they don't own arrays itself. Other code expects arrays to be like those from the standard library. &gt; Had MooTools just unconditionally modified the prototype, adding an official Array#flatten method wouldn't have caused any issues. That would break other people's code. That's the problem with monkey-patching. They could have avoided collisions by adding a '$' (e.g. $flatten). Then there would be only collisions with other dumb libraries which used the same idea.
Do these sync across Chrome instances you're logged in to?
Definitely ask the question. This may be falling under the "de-optimized makes a simpler, 'good-enough' solution" The developer doing this may completely understand why it would be not desireable to do this, but also knows that the application will not come up against a situation that makes it matter, while also knowing that this allows them to make a simpler solution that ensures that the project is delivered on time, on budget and is going to be simple enough for follow on developers to understand and maintain in the future.
[the actual article](http://www.skptricks.com/2018/03/display-online-offline-connection-status-using-javascript.html) since this article is trash
But does it use blockchain?
Also, video is down, too many downloads. Google drive is a weird way to share this. You could do unlisted YouTube video 
Well, yes, in the same way as numpy and scikit: a python library with low level components written in C++/Fortran/assembly.
&gt; Arrays cannot use strings as element indexes (as in an associative array) but must use integers. Actually, it's not. All object keys are strings by JS spec (and arrays are objects). JS doesn't have integers outside of typed arrays and some esnext proposals. Engines usually optimize arrays, though.
It’s not a performance issue. It is a correctness issue. What is happening is that arrays are also objects (of class Array). You can add properties to it, as you can any object. It will perform slightly worse in the sense that you are asking to allocate Array index space without ever using it. But in practice, if you never add integer keys, I’m not sure if it matters much. Still, no functions on the Array.prototype will help you read or mutate those string properties. It is pointless to use Arrays this way, and could lead to bugs elsewhere in your code. Just use object literals instead!
I gotta throw it up on a site to share, but will do.
Try profiling it in chrome / node. If you see "deoptimized" you definitely don't want to use that data structure.
Hi, I don't want to get or share analytics for now. I have a YouTube channel myself, and the only way to hide views is to hide views for all of the videos. Also, I prefer to keep my personal YouTube channel instead of create a new one especially for the project (for now, it might change in the future).
Streamable?
Okay, so based upon the responses - I take it that this is simply an unorthodox practice, without real "performance" consequences... perhaps (and maybe even likely) other consequences with other libs and/or maintaining/documenting. Interesting to say the least... I guess I would have expected the engine would gain some performance (at compile) by being able to assume an array is treated like an array, and not an object. I did ask her why she was doing it, and the answer was basically... "because it can be done and doesn't have any side effects" which just sounded contrary to what I have read about performant js. Thank you for all the responses, and any other thoughts are very welcome. Time for bed for me :p
Hm. Why both NodeJS and Python?
Ah, I should have thought of that... I will do so in the morning.
Thanks! I didn't get any blockers but the most challenging (and interesting) thing was to keep myself disciplined to a TDD approach and try not to touch any code before writing the tests for it. Ironically, I had some issues with publishing to npm but that was due to some issues their part. I must say, the support service is great.
Yes and no. The more processing power you have, the harder the problems you can solve. Look at the hardware and computation time Google needed for alphago / alphazero. Had they used JS, it would have cost them millions more. But you dont need lots of processing power to solve many realworld ml problems. I wrote machine learning code in PHP on a webserver about 10 years ago, and the software is still used in production, on the same low-end server.
How can you subscribe to r/javascript and say that with a straight face?
Hi! Cause I developed the core with Node.js and use a child process to execute Python modules (which are the features of Léon). Why? Cause I like JavaScript, and I use WebSockets (via Socket.IO) mostly to communicate between the client and the server. And Python, cause it has powerful packages for AI domain and pleasant syntax to play with (and also cause I like it, I admit).
Cool tool, one thing I'd add is to also be able to store the sender email somewhere so you don't have to provide it every time
You might run into unexpected problems if you start adding keys like `length`, `map`, `reduce`, etc.
The constructor performs initialization logic. If it doesn't execute, the class might not be in a proper state. (Setting field values to default values, etc) Any methods implemented in the super-class are depending on the super-class constructor to have already run. It *must* be executed. This is why the spec requires you to call `super()`. Both constructors execute against the same instance. So `this` in the super-class constructor refers to the exact same object as `this` in the subclass constructor. The idea is that the super-class constructor sets up initial state required by the super-class, then the subclass constructor does its thing to setup for the subclass, possibly overriding things done by the super-class.
Hey, I'm sorry that you misunderstood. I thought a lot about create social accounts especially for the project actually. But for now, I just prefer to keep my personal accounts and centralize everything into them to communicate for the project (use my YouTube channel to do videos about Léon, same for Twitter and others). So please, don't get me wrong, it's not cause I don't care enough about people, of course I do care. It's just cause it's more appropriate for my working time, in that way, I can focus more on the project itself (I have plenty things in the roadmap which are priorities).
I would pick one language and sick to it. This will allow you to make a more powerful plugin system. 
So use python directly? Seems like you are using python AI packages... and then offload from node because you don’t know any python... instead of learning the language. 
As a long-time user of TypeScript, I think it does a really good job of capturing a certain approach to programming JS, and as enforceable API docs. As your project grows and APIs solidify, I think it's a really good idea to start using it. You should be aware though, that with certain kinds of abstract, functionally oriented code you might come to a point where you're spending 80% of your time fighting your type signatures and looking through the Github issues and 20% actually implementing the logic. Your alternatives are either to simply stop writing abstract code (which is a shame, because I love JS's lisp-iness), or to handhold the type checker every step of the way. The latter approach means that your actual logic drowns in type annotation boilerplate, and you've inverted the relationship between typechecker and programmer. This isn't to say any conceivable type checker for JS is doomed to these problems. It's just a consequence of the particular design decisions and priorities of the TypeScript project, which after all represents only one point in the design space. I think there is room for more projects of this kind, that can learn from and collaborate with TypeScript, and explore the design space for type checking functionally oriented JS. All this said, for many styles of JS TypeScript is really good at following along, and in such codebases using TypeScript to validate whole program correctness is a solid choice.
A lot of things. Fat, ugly, unpredictable, destroy some more complex layouts... I just wish we got uniform, mobile-like scrollbars natively in desktop browsers instead.
The idea is - you can't just say "We are moving to GraphQL right now!" in a large project, for example We still have to deal with REST, even if I consider it outdated Btw, I also don't like GraphQL because it's overhead for small projects The best idea for me is Logux - interact with just syncing logs on client and server using websocket. It allows you to make positive UX, don't care about connection losses, cross-tabs problems - no matter, logux will solve everything for you out-of-box Can't wait to start using it in production Check its repos there https://github.com/logux
And I think yo misunderstood me. I was not trying to say that you are an asshole who hates people ;) But when you say stuff like the above, it doesn't matter what your intent is, you're still essentially saying: "I *could* make my videos available to people, and all it would take is five minutes to create a Vimeo account, but I'm choosing not to because I might someday decide I want to use a different service. So, to save myself an hour of moving my videos, months in the future, I'm going to hurt perception of my project by making my big announcement video unavailable." When you start a business, you have a choice: go the Steve Jobs route and decide what's right for everyone, or listen to your users and respond to their concerns. So far you've chosen to completely ignore the request for text about the project (which again would take all of 5-10 minutes to write), and you've chosen to host your video on a backup site instead of taking 5 minutes (and *maybe* an hour in the future) to put it somewhere people won't have a hard time seeing it. Actions speak louder than intentions.
All that aria crap that takes up more space than my actual page?
[removed]
Of course, it is :D But I've not seen somebody who shared his solution, at least in my communication circle. So why not?
Like what libraries? Axios has awful interceptors, awful calls cancellation, no way to extend services, no requests queues $.ajax? Lul vue-resource (for Vue) is almost deprecated, no active moves to improve it What else is there to hear? If you know, please share your variants, I'll take a look ;)
As Google Drive has limitations for sharing, I re-uploaded the video on YouTube: https://www.youtube.com/watch?v=1B7JMBPZ0qI.
https://unix.stackexchange.com/questions/36982/can-i-set-up-system-mail-to-use-an-external-smtp-server
No archive downloads, please. This includes .rar, .tgz, .zip, etc. Please host the actual code on github like it's meant to be hosted.
Thanks! Good point, I've added it to my to-do list.
Hey Darren, great questions! Dinero.js indeed borrows ideas from Numeral.js, and it uses Number.prototype.toLocaleString under the hood to format objects. Yet, Numeral.js is more of an "everything numeric" library: a Numeral object wraps any number value and transforms it into whatever you want on the fly, while a Dinero object is strictly monetary. It carries its own currency, makes sure you can't perform illegal manipulations (add dollars and euros for example), etc. It comes with a whole set of additional methods and assertions related to the business logic of a monetary entity. Another highlight is immutability: Dinero.js always returns a new object as the result of a manipulation (an add, for instance) while Numeral.js alters the original object. This can cause issues and is hard to debug. Immutable libraries are a lot safer. So basically, you can very well build your own "money" data-structure with Numeral.js and Number.prototype.toLocaleString but Dinero.js does it all right out of the box :)
Keep in mind that Chrome is throttling expensive timers in background tabs, so some of suggested things you can do when you detect that your page is not visible may not work as intended.
I’d also like to throw Flow in the mix when you want type checking. It has its issues, but I’ve been perfectly happy with it. I wish it was as popular as TypeScript though. 
Actually, I misunderstood this small thread. Please, look at [this comment](https://www.reddit.com/r/javascript/comments/85aso8/teasing_im_building_léon_an_opensource_personal/dvwafx9//).
Now that I can watch the video the basic interface of Leon looks great. The real test though will be the actions: neither, jokes, random numbers, nor thank you responses will make people use an assistant. Obviously a big part of why they use Alexa or Google Now is smart home control, and Leon doesn't have that, so I'm curious whether you plan to add that soon, or whether you plan to add other (more useful) actions, perhaps more computer-specific ones that Alexa and Google Now don't have, that will give people a reason to use it instead of or in conjunction with Alexa/Google Now.
&gt; It does not prevent defects. That's because the code is only committed once it works. It prevents the kind of defects which make you do some extra rounds before you can commit your changes. E.g. if you get "undefined is not a function" when you try to run your code, you'll of course have to fix that before you can move on. With static types, you'd been told about this bug right as you were typing that garbage. (Auto-complete might have prevented you from even getting that squiggly line in the first place.) Without types, you can produce code which is wrong but still works for the happy paths which matter. However, this very rarely happens in practice. Usually, it will explode when you try to run it, which will give you an opportunity to fix it. &gt; You lose some interactivity and compiling takes time. Incrementally compiling TS is surprisingly fast nowadays. Even on my 10-year old netbook it only takes about a second. (Its CPU is so outdated that it wasn't even affected by Meltdown and Spectre). Dart's DDC is also much faster than dart2js.
Adding a property to an object changes is "Hidden Class" which allows property access to be fast in such a dynamic language as JavaScript. You should really avoid this on any object outside of the constructor, but especially objects that are used inside loops (where the inline caches are utilized a lot) and arrays are usually used inside loops. Other than that usual caveat, array elements use another store/lookup code path, so you probably won't effect element access too much. I think it would actually be much worse to write to non-contiguous indices, creating a "holey" array, or create mixed element kind array. Here's some relevant blog posts: - [JavaScript Engines Hidden Classes (and Why You Should Keep Them in Mind)](https://draft.li/blog/2016/12/22/javascript-engines-hidden-classes/) - [Fast Properties in V8](https://v8project.blogspot.com/2017/08/fast-properties.html) - [“Elements kinds” in V8](https://v8project.blogspot.com/2017/09/elements-kinds-in-v8.html)
Does it kill your opponents with knife on throat?
No, but everything is considerable ;)
Mmmh, I'll let you judge it once the 1.0 will be released :)
A lot of OP comments are being downvoted, for no good reason. Dude has been nothing but cordial...
I think the overhead of explicitly typing stuff is payed off with time saved from IDE autocompletion. Sure there's another layer of complexity I suppose, but the result is sanity knowing your shit is at least 'correct' statically. Now, how it behaves in another story.
Don't use try then, simply if and else
If ( 15 &gt; 5){console.log("correct")} else {console.log("incorrect")} Sorry, can't copy and edit, because on phone, that's example how to achieve your goal
And if number =="", checks not for number, but empty string. Check this out https://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript
The game would have to be HTML/JS based - otherwise, you'd have to use something more like AutoHotKey to interact with it.
I guess it's worth mentioning [this list of self-hosted note-taking apps](https://github.com/Kickball/awesome-selfhosted#note-taking-and-editors). Not all of them can be used for storing code snippets though.
Like I said, it's only a good choice for games that are in HTML/JS. Just because one game is in HTML/JS doesn't mean all of them are
Thanks!
Great analogy, thank you!
 I would completely agree with the point mentioned by prof3ssorst3v3. Also, apologies if I may have disrespected anyone my adding references to w3schools and tutorialspoint. I suggested you the references keeping in mind that you may want to learn more about JavaScript before going more deep into the actual flavour and learning Closures, Scope, Block, Context, Creating classes, Constructor Functions, Prototype, jQuery, Class inheritance, and many more. You may want to have a look at Typescript, if you really want to avoid confusion between object oriented programming and object based programming. Typescript provides language features which are as good as any OOPS based language. And the best part is it gets compiled into Javascript. Thanks, Sid
I did not murder him!
Start by coming up with an algorithm that diffs two trees. interface Node { left?: Node; right?: Node; } function TreeDiff(a: Node, b: Node): Node { // ... ? }
Yeah, both ssmtp and msmtp are specifically built to forward email from stdin through an external SMTP service
I think people often overlook the fact that all valid Javascript is also valid in Typescript without any type annotations at all. A lot of purists demand that `--noImplicitAny` is enabled from the start, but I think this is the perfect example of "perfect getting in the way of good". I prefer the approach of adding type annotations gradually and worrying about creating interfaces for non-trivial data structures for after I've already prototyped and validated my code.
Cool, as previously mentioned- Codepen or GitHub.
I recommend checking out [snabbdom](https://github.com/snabbdom/snabbdom), it was the inspirateion for Vue's virtual dom
Perhaps it's just a polyfill for JavaScript engines that don't support JSON.
I'd start with learning "how to" write a proper reddit post title
man you guys are some pedantic fuckers.
Hi, thanks for your feedback! Yes, I tried to make the code generic, that it will be very easy to build a new module (feature for Léon). 
Very cool, Louistiti! Also an important project, given all the proprietary assistants out there, which send their users' personal data who-knows-where :p Please ignore the haters! The tools you pick have to work for you and your project, not please random people on the Internet ;-) There is nothing objectively wrong with your stack. I am not the world's best programmer or anything, but I can speak from experience, having used both Python and JavaScript for decades (Node.js specifically for 3 years). Wish you the best of luck! It will be very exciting to see how Léon develops :-) 
Hi SleepFurious! Thanks a lot for the feedback. I'm looking forward to see you there once the first version will be released :)
&gt; You should be aware though, that with certain kinds of abstract, functionally oriented code, you might come to a point where you're spending 80% of your time fighting type signatures and looking through the Github issues for unimplemented features, and 20% actually implementing the logic. That's my biggest problem with TypeScript. The .ts files I've had to read through on GitHub (for checking dependencies before adding to a project, etc.) seem to add various levels of indirection in order to please the type checker, which negatively impacts immediate understanding of the code. 
Hmm, doesn't read that way to me at all. And I'm not the most thick-skinned person in the world, haha ;-)
There are a number of fairly detailed articles around the web about how to [write your own virtual DOM](https://lmgtfy.com/?q=write+your+own+virtual+dom). Some have even been posted to this subreddit [in the past](https://www.reddit.com/r/javascript/comments/4m1jkd/how_to_write_your_own_virtual_dom/).
&gt; I just started trying out wasm and I think trying to make a Virtual DOM Some cool projects that mix wasm with vdom are [gccx](https://github.com/mbasso/gccx) and [cpx](https://github.com/rep-movsd/cpx). As for the vdom itself, it's basically just a linked list: https://blog.javascripting.com/2016/10/05/building-your-own-react-clone-in-five-easy-steps/
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/rep-movsd/cpx) - Previous text "cpx" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20dvwqk1u) 
Thanks for taking your time to reply! Really useful comment
An actual chat app in 1996. JavaScript barely existed and could barely do anything (no DOM changes), so I had to "simulate" scrolling chat messages by replacing the contents of a series of input text fields, using a hidden IFRAME. It was absolutely horrible, but it worked!
It is a useful comment but you just won't acknowledge it.
You might consider using `const` by default rather than `let` when declaring variables - when I see `let` in professional code, that makes me think "Oh, I should keep in mind that this variable is going to be reassigned."
&gt; I think the overhead of explicitly typing stuff is payed off with time saved from IDE autocompletion. I deluded myself into thinking this for about a year until I realised it couldn't possibly be true. Static typing is nice for developer tooling, but there's no way TS doesn't cost more time than it saves.
It's a spambot.. 
God, will people ever stop misquoting that XKCD?
I'm glad I'm not the only one. Another option is to create a small npm library if it's something you expect to use again often.
Google Keep
&gt;Declaring variables with var is generally a good idea. No, it's 2018, use `const`... &gt;While libraries like jQuery make css selectors convenient, it takes more time to locate whacky and complicated selectors than it does simple ID lookups. This is only significant if you're doing so in extremely huge quantities - and if someone is doing it that many times, they won't be able to set ids on each element in question. &gt;Watch Your Loops Better option: avoid loops entirely. Loops fail to clearly signal the intention of your code, and as such should be avoided whenever possible (prefer higher-order functions, such as .map, .reduce, .filter, ...). See also: https://www.quora.com/Can-we-say-that-the-for-loop-will-be-the-new-goto-%E2%80%9D-given-the-increasing-popularity-of-functional-programming/answer/Tikhon-Jelvis and https://gist.github.com/robotlolita/7643014
appreciate the feedback. const is great however pollutes global namespace. let is handy when you want block level scope.
&gt;const is great however pollutes global namespace. This is absolutely false. both `const` and `let` have block-level scope.
Anything you can do with a library you can do without a library by simply inlining the library's code, so this is a moot point. The code you've linked to does not work if you want to pattern match over numbers, booleans, symbols, etc, nor will it work if the inputs you're trying to match over doesn't already come with a convenient discriminator property like `case: 'Sms'`, (in which case you can just use `switch` or a ternary clause, you don't even need pattern matching).
You are right. Stand corrected, will update
I think it's important to remember that JS classes are just sugar on JS constructor functions, which are also no more than the functions you use all day. It would've been easy to set classes to automatically do a bunch of stuff for you, but they left us some control and allowed us to decide what data to pass to the parent's constructor and even when to call it. class shape { constructor(name) { this.name = name } } class square extends shape { constructor() { super('square') } } const foo = new square('sure') foo.name Super also grants access to the parent's methods! But it's important to remember 
Better option: avoid loops entirely. Loops fail to clearly signal the intention of your code, and as such should be avoided whenever possible (prefer higher-order functions, such as .map, .reduce, .filter, ...). See also: https://www.quora.com/Can-we-say-that-the-for-loop-will-be-the-new-goto-%E2%80%9D-given-the-increasing-popularity-of-functional-programming/answer/Tikhon-Jelvis and https://gist.github.com/robotlolita/7643014
There are zero ES6 operators in the article...
&gt;from() Another one of the nice things about `from` is that you can create arrays of variable length with it: const myArr = Array.from({ length: 10 }, (_, i) =&gt; i); // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
Thanks! No disrespect taken by sharing w3schools. I've used them in the past since they were one of the first web dev tutorials out there and I actually think they probably had a part to play in my interest in it before I moved on to other resources. I'm actually checking out Typescript right now and loving it so far. Seems like it would scale very well for larger apps. 
or http://elm-lang.org/
Nice, this is a great way to get a range quickly, will have to remember this.
Is it named Leon like Leon the professional hit man?
You misunderstood.
What does the underscore stand for in (_,i) ?
It's a variable that isn't used. You could give it any name you like, but I think _ is convention.
Sorry for the noob question but what would be the frequent use of such array?
http://es6-features.org/#ComputedPropertyNames
This doesn't address any of the criticisms I leveled in my comment. I'm not sure if you understand what that feature is; it's just syntax sugar for creating object literals. It doesn't help you in any way with matching using numeric/boolean/symbol case identifiers, nor does it help you match over inputs that are not objects with a uniform property. It's a good idea to look at how pattern matching works in other languages (e.g. [core.match](https://github.com/clojure/core.match/wiki/Overview) in Clojure or the built in pattern matching in [Haskell](https://www.haskell.org/tutorial/patterns.html)) to understand what pattern matching is and is not.
In fact, they are very authentic. However we could potentially have 2 versions one with and without, if that would make it more accessible to read. 
not sure if I'm missing something here but this seems to need some proofreading... the filter example doesn't make use of the filter function, and the text after the splice example references "splicet()"... only skimmed, but didn't see any of obvious issues 
thanks for the feedback! these issues have been fixed.
That just tells me you are a noob
It's just WRONG. If that's the experienced dev, I wonder what the rest are like... 
Was a Mr. Robot reference
It helps with my pattern of String matching. I know my solution isn’t 100% of what you want for pattern matching, but it’s a pragmatic 80% solution which is good enough. I can structure my code to fit this 80% solution. I’m just saying, your tool doesn’t need to be perfect in order to be useful. I rather use good enough native tools than have everybody else learn a new API from a library
It would not have broken anyone’s code. Had MooTools declared the methods unconditionally then developers would have the choice of using the built-in method or including MT to use their variant. 
&gt; It would not have broken anyone’s code. My code was broken by other people's shit code which modified built-ins. Code on somewhat bigger websites is written by multiple parties.
Your string "matching" use case is better served by using simple ternary operators or `switch` clauses, which are native to the language. Pattern matching describes the universe of remaining cases, where you match ad-hoc over heterogeneous input without first having to wrap and homogenize it. This is the use case the library is built to serve, and the thing you've posted is useless and irrelevant for this.
Your string "matching" use case is better served by using simple ternary operators or switch clauses, which are native to the language. Pattern matching describes the universe of remaining situations, where you need to match ad-hoc over heterogeneous input without first having to wrap and homogenize it. This is the use case the library is built to serve, and the thing you've posted is useless and irrelevant for this.
Just start building something. Build a forum, a Twitter clone, a blogging platform, a news aggregator. You'll inevitably learn a lot about what works and doesn't work for large apps in the process by making a lot of mistakes.
On the client, assume it worked and immediately display the updated number before you send off the request to the server. Then when the server responds, if it failed undo the change on the client. This is called "optimistic UI" because the client optimistically assumes the request will work and the user sees it update immediately making your app appear faster than it really is.
I agree, there is really not much point to this library. Plus implementing this in userland will be irrelevant soon anyway: https://github.com/tc39/proposal-pattern-matching
I do exactly the same. 
The problem is that this is not simpler; it is actually more complex. It is _easier_ but not _simpler_.
Change the particle function to take x and y. Then in the while loop, pass the current mouse location.
Might be easier to understand closures if you didn't have a preconception of how function scope works from other languages. If you tried to use some resource scoped to a function after that function exits in C++ you'd have a fine mess to clean up.
For me it is the sharing of code and refactoring that makes TypeScript so valuable. It is so nice to be able to change a constructor or method signature and know everywhere the method is being used. It is just great... I love TypeScript.
I've been trying to do that, can u go into detail
IIRC, there was actually one fairly obscure performance optimization trick that was related to this, where one would use an object as an array instead of allocating an extra array into a property, i.e. // directly in the object const a = {foo: ..., bar: ...} a[0] = baz; // instead of const a = {foo: ..., bar: ..., values: []} a.values.push(baz); The gist was that the "abused" object would have faster memory allocation than a regular object + the `values` array. Using an object purely as an array was only slightly slower than an array (contrary to the common knowledge that adding properties to objects would de-opt it). This was before Turbofan though, so you'll want to benchmark again to double check.
Remove the semicolon. 
I think this is important to know. What Super does is, in effect, this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call Class or extends doesn’t change the underlying semantics of prototypes, but it sure makes life a lot easier (save keystrokes). 
I just tried that and this is the error it gave me: Bummer! Don't forget to end your JavaScript statements with a ;
`%` is *not* modulus. JavaScript doesn't have a mod operator. Rather, it's the remainder operator and it returns the remainder after division. It's similar to mod, and will even return the same result if and only if both operands are positive. But it's a fundamentally broken operator because the result takes the sign of the dividend, rather than the divisor. e.g. `-1 % 3` returns `-1`, but `-1 mod 3` (if JS hypothetically had a mod operator) should return `2`.
Put a semicolon after the }
Does the answer have to be in the form of an object? You could try: var age = 30; Or var name = { name: “Chris”, age: 30 };
!!!!! The first one worked. var age = 32; Let me see what the second question is going to be. 
Okay, I was able to do the second one myself. THANK YOU!!!
I agree. Sometimes I think we over complicate closures. If someone is learning programming and JavaScript is their first language, then during the beginner and intermediate stages, all they need to know about closures is that functions Just Work as naively expected.
Perform a sizable rector with and without TS, and maybe you might change your mind a bit? I'd say that's where TS is strongest
That encourages me to maybe write a package one day. I guess I need to learn more about tests now. Let the google searches commence!
Arrow functions don't have their own *this*, which is nice in some frameworks, since you don't have to write "var _this= this;" all the damn time.
cool. Meant no offense, you took none, 10/10 would constructively criticize again. 
Can someone please tell me how I can have my personal interfaces available everywhere on my vs code? Right now I have to import this file into every file I'm working on, but it's my global library that I want available everywhere....
Classes. Not even once.
The same example was using in my one of my JavaScript lectures! Well explained!
I couldn’t handle TS’s lack of type inference and now I use Flow for everything. It has a whole lot of rough edges, but I still find it pleasant to program in 70-80% of the time. 
It is there you can check it...
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
Please add a "SOLVED" label to this post.
I like this overview, I think I agree with every point you’ve made here. I’ve found an additional benefit while adding types to JS, though, which is that having types seems to guide developers towards more modular and composable designs. I think there’s a few reasons for this: - Type systems are inherently about composition: software components can be composed when their types match up. Having the types be explicit makes it easier to see cases where composition is possible, and when writing components that are poorly composable, the type signatures usually make this obvious. - Types provide more tangible abstractions, which seems to encourage developers to build stricter abstraction barriers. In node.js code it’s pretty common to stuff all sorts of things into an `options` object and pass it through layers of code, unintentionally coupling these layers. When doing this with types, the signatures are often cludgy and difficult to write, which can encourage devs to refactor. - Generics may be difficult for some developers to learn, but they’re incredible for encouraging composition and code reuse. Leaving a couple of edge cases involving object equality and nullability aside, generic abstractions are guaranteed by the type system to not have their behavior coupled to that of the containing type. Writing a generic abstraction which typechecks is effectively writing a mathematical proof that your abstraction is reusable and composable. - Type systems are a way for a relatively simple system (the typechecker) to “reason” about code. Many of the patterns that are difficult to express in a typed language are difficult to express because their behavior can’t be determined statically, and developers achieve an understanding by “running” the code in their head. While these techniques can lead to more terse code, they often do so by requiring contextual knowledge or additional analysis to understand. I definitely see why many JavaScript developers feel constrained by a type system, but I think this is one of a type system’s benefits. In my experience, allowing types to guide my implementations has lead me to solutions which are more maintainable, partially due to an increased composability and simplicity in their designs. 
Done
Here's a working codepen: https://codepen.io/anon/pen/RMojaO Basically what I did is 1: create a event that will fire on mouse move: `document.onmousemove = getMousePosition;` which is called from the main function 2: in the getMousePosition function created in step one, you need to assign the mouse x and y values to a variable ` mousePosition.x = window.event.clientX; mousePosition.y = window.event.clientY; ` 3: in the particle function, assign those new values to particle x and y (which will fallback to the canvas center if we don't have a mouseMove event yet) ` x = mousePosition.x || canvasWidth / 2, y = mousePosition.y || canvasHeight / 2, ` 
Thanks :)
Just curious, any reasons for switching onto Javascript? Are you, looking towards NodeJS, React, VU and/or any JS framework? Or some new project you are working with right now?
Oh, actually I've been writing JS for a couple years now mostly on the front end. Mainly have worked with vanilla JS and Angular JS, though am learning React now. It's just that I have finally delved a bit deeper into functional programming with JS recently and am very intrigued by it. Till now I've mostly written in a more object oriented or procedural style with JS. But, I see many benefits of functional programming that I'd like to incorporate. Though I suppose I can't be strictly functional only due to practicality, as I found out above. 
That's what I meant with &gt; context bounded functions, essentially Another way of thinking about it is that they're implicitly calling .bind(this) But they're still no replacement, just an (unnecessary, but arguably nice) shorthand.
Just wanted to improve my implementation and make it better than JSON.parse() by taking inputs from active devs in the community. If you find any modification or issues please create an issue. So that I can improve it. 
Although it doesn’t quite fit with the patterns that I use in my code, I think this library is neat. I like how compact its implementation is, and I always enjoy seeing different ways of conveying ideas in code. I think it would be cool to see what more complex algorithms would look like when implemented using this. Since you seem interested in different ways of making code expressive, you might enjoy the paper “Matching Objects with Patterns”. It uses Scala, and digs into the tradeoffs of different techniques for adding pattern-matching-like capabilities to hybrid languages. Some of them are possible in JS, if implemented in a similar way to what you have here.
Sean Larkin of the Webpack team wrote [an explanation and apology](https://www.reddit.com/r/webdev/comments/858k2i/amazing_its_almost_1_month_since_webpack_v4_was/dvwvr72/) on a discussion thread for this gist over in /r/webdev. I'll summarize it: - For v4, they tried focusing on the framework CLIs as the "end user target", and wanted to ship v4 once the blockers for the CLI tools were fixed and a 30-day window elapsed - The docs team was behind on finishing the v4 docs, and Sean green-lit the release without fully realizing that - Going forward, the focus and priorities will be on information for actual end users rather than frameworks and CLIs as the immediate target audience - The v4 docs have a PR pending and will be out soon - Future Webpack releases will have a complete migration guide as a required dependency before finalizing a release. They also shouldn't be as big of a change, because v4 rewrote the core Webpack plugin system, and that won't happen again.
Exactly this - when I finally wanted to dive in and learn what closures meant, I actually had to do a little research to find out why this is confusing... If you have no other experience to cloud your judgement than you probably already understand closure.
One way to interact with the web page js would be writing a browser extension specifically of user script type. Or use something like tampermonkey.net this will give you a good start. 
Ok, thanks! 
Pretty unreadable
Hi, yes it is! 
It's good, but if you got hired in the first place, and if you've gotten some real-world experience on top of that already, it probably won't teach you much that you don't already know. If I were you, just skim the chapters at first, and focus on those that don't seem trivially easy.
i'm late to the thread but I made progress on my new react app for media streaming called **homehost** It's like Netflix but self-hosted https://github.com/ridhwaans/homehost. In beta now!
While browsing on my android phone the first letter of each word is cutoff . Did you do anything weird with margins/padding on body element?
return every even numbers
If you wanted to *actually* write something that accomplished this, it would be far easier (and more elegant) to use `.filter`
 function isEven(num) { //make a function called isEvent with param num var even = []; // initialize variable even with empty array var j = 0; // variable j initialized with zero for (var i = 0; i &lt; num.length; i++) { // init i with zero; keep looping till i is less than the number of items in num; increase i every loop. if (num[i] % 2 === 0) { //condition:if if the ith item in num is even, do this: even[j] = num[i] // the jth item in even array is set to the ith item in num. j++ // j is incremented by 1 } } return even // } num = [1, 4, 5, 6, 10, 13] //initialized array with a set of numbers isEven(num); // checks to see if numbers are even. a new array is returned containing those numbers are returned. heres a fancier one that might be easier to understand: const isEven = arrayOfNumbers =&gt; arrayOfNumbers.filter(num =&gt; num % 2 === 0) 
Thank you so much for the help everyone! 
Thank you!
Your function detects even numbers in a given list of numbers. 1. function isEven(num) {} This line declares a function called isEven and accepts a single parameter called num. 2. var even = []; This one creates an empty array and assigns it to a variable called even. And it will be used to keep track of even numbers in your num list of items. 3. var j = 0; This one here will serve as an index when you want to populate your now empty even array. It starts with the value 0 to indicate that the first even number in your num list of items hold the first position in even array. Its value will change dynamically later on. 4. for( var i = 0; i &lt; num.length; i++) {} Here we loop through the array num items one by one using a for loop which consists of 3 parts: initialization: var i = 0; saying that we want to start looping through num array at an index value of zero (aka the first item in the list) condition: i &lt; num.length; saying that we want to quit the loop when we are done looping through all items in num array when we reach the last item in the array ( you know that arrays' indexing is zero-based; meaning that you start with 0 while arrays' length property is one-based; meaning that you start counting with 1) increment expression: i++; after each time the for loop is executed (iteration), the value of i increases by one allowing us to move through the next item in num array. 5. if(num[i] ℅ 2 === 0) {} We are about to make a decision and direct our code at crossroads. If the condition is returns true, execute the code with the curly braces. Otherwise, ignore it and move on. The test for whether a number is even or not is to check if it is divisible by 2 and this done via the modulo operator (℅). You see if a number is even, the result of its division by 2 gives an integer and no remainder, nothing left. For example 4℅2 = 0. Thus 4 is an even number as 4/2 = 2 and the remainder is zero. While 5℅2 = 1. 5 /2 = 2.5 (not an integer). The largest even number that is less than 5 is 4 which leaves us with a remainder of 1 (5 - 4). 6. even[j] = num[i]; This statement is executed only when the previous condition is held true. And what it does is that it populates the even array with num values that pass the even numbers test mentioned earlier. 7. j++; increase the even index value by one. This is also executed only when the test for even numbers returns true. 8. return even; return the even numbers stored in the even array when the function is called. And we're done with the function. 9. num =[1, 4, 3, 10, 6]; 10. isEven(num); We're creating an array and assigning it a variable called num and then passing it as an argument of isEven() function as we're executing it. 
There are more elegant methods (better variable names, avoid reassignment, use ** for exponentiation) and shorter (probably more confusing) methods https://www.google.com/search?q=javascript+random+hex+color+site:stackoverflow.com but what you're doing is fundamentally fine.
This includes letters.`toString(16)` converts an integer to hex. Hex is base 16, and 16 is being passed. 
In response to your edit, that would require generating a random number 3 times, and applying leading 0s 3 times. 
VSCode natively supports what `Path Intellisense` does, now. And `import cost` had some nasty memory leak bug last time I've used it :/ Otherwise a good list, using alsmot half of this list.
Oh... it's [this thing](https://i.imgur.com/6IYU1oo.png) here on the sidebar of each subreddit. You may write whatever you like.
Sorry, missed that. 
I'm not trying to figure out how to get something that manages it for me, or anything advanced - I'm trying to figure out the fundamentals of the best way(s) to do it in vanilla JS myself, since that'll (hopefully) help me understand the *why*, which is a much more solid foundation.
Is this just some wrapper around a tensorflow package or have you done something more? 
A bit much to put on one line. Using your code, maybe something more like function randomHexColor() { const randomDecimalColor = Math.floor(Math.random() * 256 ** 3); const colorHexStr = (`000000${randomDecimalColor.toString(16)}`).slice(-6); return `#${colorHexStr}`; }
It's a bit more complicated than just `SuperClass.call` (although you might not notice in most cases) to the point there's no ES5 equivalent of all of `extends`/`super()` behavior. For example consider trying to subclass an Array with a classic constructor function: function MyArray() { Array.call(this) } Object.setPrototypeOf(MyArray.prototype, Array.prototype) MyArray.prototype.getFirst() = function() { return this[0] } // Let's create one first const myArray = new MyArray() // Check it's an instance of MyArray myArray instanceof MyArray // true // and of Array myArray instanceof Array // true // Pushing items works so that's good myArray.push(10) myArray.push(20) myArray[0] // 10 myArray.getFirst() // 10 // So it looks pretty good so far *but* then: const copy = myArray.slice(0, myArray.length) // Still an instance of Array copy instanceof Array // true // But it's no longer a MyArray copy instanceof MyArray // false copy.getFirst() // TypeError: undefined is not a function But with classes this doesn't happen: class MyArray extends Array { constructor() { super() } getFirst() { return this[0] } } const myArray = new MyArray() myArray instanceof MyArray // true myArray instanceof Array // true myArray.push(10) myArray.push(20) myArray[0] // 10 const copy = myArray.slice(0, myArray.length) copy instanceof Array // true // Works as normal copy instanceof MyArray // false // It's still an instance so the methods work copy.getFirst() // 10 Now this is the case because `super()` is a bit more complicated than that. Consider this class class MyArray extends Array { constructor() { this.push(10) super() console.log(this[0]) } } If you try to construct one this happens: // ReferenceError: Must call super constructor in derived class before // accessing 'this' or returning from derived constructor new MyArray() But why? That's because `super()` actually delegates to the super-class (in this case `Array`) to **create** the value of `this`. Before `super()` is called there isn't even a `this` value. Now that's now all, `super()` also tells the super-class (`Array`) what it's creating a sub-class for (`MyArray`) so that it knows that the array it creates when `.slice` is called on this instance it should create a new `MyArray` instead of an `Array`. Hence `new MyArray().slice(0, 5)` will still be a `MyArray`. So what? Well sub-classing built-ins it pretty useless most of the time (if we're being honest) but if you're wanting to use [Custom Elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) you're required to use `class MyElement extends HTMLElement { ... }` (or at least `Reflect.construct`, I'll mention that soon). That's because `new HTMLElement()` doesn't work by itself, when you call `super()` in the constructor for `MyElement` it actually checks if `MyElement` is a valid custom element before allowing creation to complete. As an example if we have this code: class MyElement1 extends HTMLElement { constructor() { super() // Add things } } class MyElement2 extends HTMLElement { constructor() { super() // Add things } } customElements.define('my-element', MyElement1) new MyElement1() // &lt;my-element&gt;&lt;/my-element&gt; new MyElement2() // TypeError: Illegal constructor // Why? Because customElements.define hasn't been called yet new HTMLElement() // TypeError: Illegal constructo // Ditto, also it doesn't make sense to make an "HTMLElement" // whatever that is, &lt;?&gt;&lt;/?&gt; // (not to be confused with HTMLHtmlElement &lt;html&gt;&lt;/html&gt;) In this case `HTMLElement` has logic for checking if the subclass is defined. And yes you can access this in your own classes via `new.target`, in the case of `HTMLElement` it's similar to: class HTMLElement { constructor() { // new.target gets set to the SubClass that // is the thing after new e.g. // new Foobar() // sets new.target to Foobar in all super-class constructors const SubClass = new.target if (!internalCustomElementRegistry.has(SubClass)) { throw new TypeError(`Illegal constructor`) } } } --- ASIDE: Yes it's even more complicated than that, JavaScript object's can define a `[[Construct]]` internal slot (that's what is *actually* used in the case of `HTMLElement`) that is a function that when called can return any object (**enforced** at least) it wants. You can create such objects in pure-JavaScript using the `.construct` handler for `Proxy`. // Please don't do this const SuperExoticClass = new Proxy(class {}, { // not to be confused with constructor() of classes construct() { return { banana: "cabbage" } }, }) // No really don't do this, you lose basically everything // useful offered by super class SubClass extends SuperExoticClass { constructor() { super() // Yes the this value doesn't even have to be an instance // of the subclass after super(), by default [[Construct]] // creates subclass instances console.log(this instanceof SubClass) // false } } 
https://www.google.com/search?q=new+javascript+features http://exploringjs.com/es2018-es2019/ http://exploringjs.com/es2016-es2017/ http://exploringjs.com/es6/ etc
You missed subtracting 1 from the random number. If you hit the maximum number your result will be 7 characters, not including the '#'. Other than that, that looks great.
super() is basically sugar for this = new ParentConstructor(); where ParentConstructor is the extended class, and this = is the initialization of the this keyword. It will inherit from the proper new.target.prototype instead of ParentConstructor.prototype like it would from new. So no, how it works under the hood does not compare to ES5 at all, this is really a new feature in ES6 classes and finally enables us to properly subclass builtins. In simple terms, the super keyword appears alone when used in constructor, &amp; must be used before the this keyword is used. The super keyword can also be used to call functions on a parent object. 
&gt;If you hit the maximum number Will never happen
Thank you for such a detailed explanation I really do appreciate it!
I'm using it to change the color of 10-20 anchor tags continuously every 10th of a second.
It still won't happen - eg Math.floor(Math.random() * 10) will give you numbers in the range of [0, 10) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
Why calculate 16^6 each time? Why substract 1 from the result?
&gt;Why calculate 166 each time? I guess you are right, I should just start with the number 16777216 and subtract 1 from that right off the bat. Well really start with 16777215, right? 
Why substract 1 at all?
The hex value of 16777216 is 1000000. We can't go larger than #ffffff.
I can't start with 16777215 because the way the random number is being generated, we are leaving out #000000 if we don't subtract 1 at the end, so I do need to start with 16777216.
I like it. I wrote a similar library on my own, but I will look at your code and see how I could have done better. Thanks.
That's why I'm subtracting 1.
No, that's why you shouldn’t substract 1... You’re using Math.floor there. 
The Flux/Redux still seems like one of the best patterns to look into in that case. Your OP touches on some very basic state menagement ideas, and Redux is pretty much an advanced version of event-based state handling combined with a publish / subscribe pattern, and the idea of a single global state store and one way data flow. It sounds like you have started understanding the downsides of some of the simplest patterns, and it is time for you to look into how to combine a variety of code patterns into a better way of managing state. The Redux source code is very small, and fairly easy to understand. I would recommend going to the Redux site and start looking into how it solves state management, and you can then apply what you learn to your current understanding of how to understand state management. It's a science that is far from solved.
It will always be 0 or 1. 
What will always be 0 or 1?
...the return value of that function. 
Will start putting it on my website soon! :) 