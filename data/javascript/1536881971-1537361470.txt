You want to get what you have in the data-title attribute. You can do this by: document.getElementsByClassName("url-external")[i].dataset.title This isn't widely supported in IE however so you might want to do this instead: document.getElementsByClassName("url-external")[i].getAttribute("data-title")
Hey guys, I posted this several days ago mid-development and I thought I'd hare another update now that the game is finished and playable online. Some details: Bellwoods is a small 13 kilobyte "art game" for mobile &amp; desktop, built for the JS13K competition. In the game, you fly your kite through endless fields of song and color, trying to discover new worlds. All the graphics &amp; audio is procedurally generated to fit the game within the 13 kilobyte budget. You can play the game in your browser here: https://bellwoods.xyz/ You can also browse the code for the game here: https://github.com/mattdesl/bellwoods Let me know what you think! I'd love to develop this into a larger game eventually (with a deeper story, longer play time, many worlds, etc).
Try codecademy or JavaScript30
Worked perfect. Thank you!!! &amp;#x200B;
Well, not yet. Soon it will be. 
console.log("Hello World") seems to work okay
TIL music.youtube.com exists
&gt; There are hundreds of atlantic ones too Sorry, I'm confused. Did autocorrect write that for you or are you trying to be a jerk? :) &gt; what exactly are you getting at? - If you have concerns that relate to governance (assuming you live in a democratic country), an "appropriate avenue" to communicate is to write to your representative, for example. Making commits on Github or starting "ICE sux, email 10 times or you're a commie" email chains are highly questionable. This was my original point. - There are many ways to protest, some of which occur in appropriate channels, and some which do not. Vandalism is typically never appropriate, demonstrations may or may not be, rounding up your writers guild to publish a barrage of unflattering rage-inducing articles about Trump's policymaking in major news outlets might arguably be considered appropriate.
&gt; This is also my biggest beef. ES6 modules are the future, and rewiring importing rules at runtime is completely antithetical to how they work. RFC author here. The monkey patching is only there because Node doesn't expose an API to hook into CommonJS (yet). We don't like it either (especially since it means we have to write some code we don't really care about), but we figured it was the best way to show how valuable it would be to have a dedicated way to achieve these kind of things. Regarding ESM modules, Node 10 actually ships with a [hook API](https://nodejs.org/api/esm.html#esm_loader_hooks), and has such I'm quite confident we won't have to patch anything. 
You can add new features or fix existing issues (https://github.com/Soundnode/soundnode-app/issues?q=is%3Aopen) just clone the repo, code and raise a pull request. 
For import semantics, there is a hook that can be implemented to do this -- https://nodejs.org/api/esm.html#esm_loader_hooks -- this allows changing how a file is imported - I believe it can change from where it is loaded as well (i.e. to load from a package manager's cache instead of `node_modules`) Of course that *only* applies to `--experimental-modules`, and mjs mode. For regular 'ol CJS the static resolution is less of a problem - but I'm pretty sure the way they've done it with using `-r` allows for performing changes to `Module._load` before the entrypoint and nested requires have had a chance to call into it.
For comparison, this could also be written as: var wrapper = () =&gt; () =&gt; { setTimeout(() =&gt; console.log('after response'), 1000) return Promise.resolve('hello') } var bar = wrapper() var baz = bar() console.log(baz)
Oh, awesome! That must be pretty recent. Looking forward to trying out pnp at work and this new API for my experiment.
that depends on hardware.... my cpu is off the hook, but I still have a slow-as-molasses physical hd. the main bottleneck for my installs is moving the files around, not dependency resolution. as an aside, I find these problems kind of funny. I recently picked up a project at work in scala which is a really very cool language - I like it a lot... but it uses maven for dependencies. Good lord. If anyone things the package managers in node are bad, try some others on for size. npm/yarn run can circles around maven.
I would make an array of tuples for each file. Each tuple will contain the file name of the file (or its location on s3), an immutable object containing the info of the file, and a mutable copy of the previous object. I would only ever make changes to the mutable object - when I know I'm done making changes, I will then use the 2 objects in each tuple to generate a differential object indicating what needs to be changed in the file. I'd probably also ditch \`async.js\` and use promises and/or async/await. There's no reason not to in 2018.
Wow, It's wonderful! üòò How about adding some enemies or obstacles?
Yeah, I just learned about that from u/arcanis' comment below. Exciting stuff!
Uhhhh you know new software projects are created every minute right l o l
Why should the core contributor be forced to fork his own project if he's taking down the older versions of the library?
The article is talking about ‚Äúhosting‚Äù through caching. Seemed pretty clear.
Hey you're back! How did the competition go?
Is this a site that‚Äôs currently online? If so, what‚Äôs the URL 
Yes, trying to scrape these items from Page Speed Insights: [https://developers.google.com/speed/pagespeed/insights/?url=portplugs.com](https://developers.google.com/speed/pagespeed/insights/?url=portplugs.com)
Having not opened and read this article I declare that it is stupid! You can freeze anything with an infinite loop in a single line.
Yes. What does that have to do with anything?
Are we talking react here? If that‚Äôs the case then you should just have a Value in state that controls whether or not the notification is visible, and flip that from a - b depending. That value can be your entire class name which you then pass down from the stateful component to the stateless one as a prop. Your click handler can flip it to hidden as your timeout handler does. Also FYI html5 spec includes notifications you might find that interesting. 
1+1 seems to work, too
TBH I'd just laugh if I saw anyone put that on their resume
Your projects can easily share a single node\_modules folder. When the module resolution is looking for the `node_module/` folder it start in the parent directory then keeps walking up. So, just organize your project directories like so: Projects/ -- node_modules/ -- NodeProject1/ -- NodeProject2/ -- SampleProject3/ You can also load from a global folder location as well. Check out the office Node docs: [https://nodejs.org/api/modules.html#modules\_loading\_from\_node\_modules\_folders](https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders)
Well if you want to store the data so you can use it put the "label" and links in an object, const data = Array.from(document.getElementsByClassName('rule-title'), h4=&gt;{ const label = h4.textContent; const links = Array.from(h4.parentElement.getElementsByClassName('url-external'), span=&gt;span.dataset.title); return {label,links}; }); console.log(data); Then if you want to log it like in your first example data.forEach(item=&gt;{ console.log(item.label); item.links.forEach(link=&gt;console.log(link)) })
Really hypnotic and super impressive
I think so. How about udemy?
`npm install -g `
A friend of mine wrote a browser extension that plays music from YouTube and he was contacted by YouTube lawyers saying that the T&amp;Cs of use require showing the video because advertising is their revenue stream. Yours (which I like btw) looks similar so just fyi expect YouTube to contact you soon
If I understand correctly each &lt;h4&gt; has a varying number of class="url-external" links associated with it. If so, the h4 array is different from the url-external array. What the posted script does is get h4[0] and url-external[0], then h4[1] and url-external[1], then h4[2] and url-external[2], and so on, because [i] is always on number through the loop iteration. What you need to do is get h4[i] and it's associated links (url-external[0], url-external[1], url-external[2], etc.): h4[0] . url-external[0] . url-external[1] . url-external[2] ... h4[1] url-external[0] url-external[1] url-external[2] ... The basic way of doing this is loop nesting, but you'll have to use a container which is a parent to both an &lt;h4&gt; and the associated links: // Must run after pages is loaded. var parentElementArray = document.querySelectorAll('.goog-control'); // .goog-control being whatever the class of the parent elements you're using parentElementArray.forEach( function(parentElement){ console.log(parentElement.getElementsByTagName('h4')[0].innerHTML); // Assuming only one h4 in parent. var childElementArray = parentElement.querySelectorAll('.url-external'); childElementArray.forEach( function(childElement){ console.log(childElement.dataset.title); // logs the value of data-title }); }) 
Also how to freeze Firefox. Tested on latest version running on Linux
Ah.. my bad. Fixing it ASAP.
Oh sorry. But I made sure I followed youtube's api guidelines [for now :D]. Thanks :)
Done, fixed it. Thank you :)
How about you create a higher order component which is connected to some userAuthenticated variable in your state and only renders your original component, if userAuthenticated is true?
I've set express to serve static files like this: Router.use('\*', renderer); Router.use(Express.*static*( resolve(\_\_dirname, 'dist'), { maxAge: '30d' }) ); &amp;#x200B; But it still does not work :( 
Done. Added! 
&gt; Looks like Yarn is set to change the game again. it isn't, most people don't face same problems as facebook
Solved. &amp;#x200B;
Solved.
Versions don't change the contributor list and git log.
I cannot speak for most people, but it solves problems for our company of &lt;50. We have run into problems multiple times where servers would run out of inodes because they were hosting multiple Node.js projects and each would take up hundreds of thousands of them for every node_modules directory. Not to mention that having both faster install times and faster boot times are things we would very much welcome.
Can you link or upload the actual HTML you're trying to work with?
&gt;If your repo is small enough, you can probably live with a 2 minute CI overhead. Sure, we can. But if we can eliminate those 2 minutes per CI run and for every deployment, it would be enough reason on its own to switch. Dropping install times from 5 minutes down to 2 minutes was the reason we switched to Yarn when it was originally released (though the lock files were also a big factor).
In a normal function, execution ends when you return. const speak = () =&gt; { return 10; console.log("I'm still here."); }; If you run this, you'll see no output, because the second line never gets executed. In a promise function, we think of resolving as being like returning, but resolving something doesn't end execution of the function. Consider this: const speak = () =&gt; new Promise(resolve =&gt; { resolve(10); console.log("I'm still here."); }); "I'm still here" will get printed. Async functions let you write something that looks like a normal function, but actually returns a promise. Instead of calling `resolve` with your final desired value, you use the traditional `return` keyword, which ends execution. So look at what the author wrote: return new Promise(async function(res, rej) { res('hello') await foo() console.log('after response') }) He wants to resolve a value early, and then do two other things. If he didn't use `new Promise`, and just passed the result of an async function, he wouldn't be able to do that -- to get the value out of the promise, he'd have to use `return`, which would prevent the next two things from happening. If he *only* used `new Promise` and didn't make the function async, he wouldn't be able to use `await` on the second line.
GSAP is a good option. It has good control over timings and animations.
Perfect! Thank you!!! Solved.
First the yarn announcement, now this! Pretty exciting news.
I tried this using a room. io.on('connection', (socket) =&gt; { let roomName socket.on('room',(room)=&gt;{ socket.join(room) roomName = room io.to(room).emit('user connected',io.sockets.adapter.rooms[room]) }) socket.on('disconnect', () =&gt;{ io.to(roomName).emit('user connected', io.sockets.adapter.rooms[roomName]) }) })
Sounds like it would be great if they and the [Yarn Plug 'n Play](https://www.reddit.com/r/javascript/comments/9fk3a7/yarn_plugnplay_getting_rid_of_node_modules/) people would exchange some ideas about this.
Not really. It's just an infinite loop pegging the CPU. The only interesting but is calling the navigation functions which allow it to crash the entire browser. 
[Wrong!](https://i.imgflip.com/1bpxyu.jpg)
Psssshh dude the FBI is watching!
I only looked through the code quickly but it looks like you are using css animations. If that's the case then listen for the [animationend](https://developer.mozilla.org/en-US/docs/Web/Events/animationend) event on the chip div. If you have more than 1 animation that plays then figure out how many animations will play and wait until the animationend callback is triggered that many times. Only then do you call the `gameOver` function.
Apparently NPM had been working on something similar. There must be something in the air. https://blog.npmjs.org/post/178027064160/next-generation-package-management
and Opera too
I really like the Haiku this was inspired from - it feels very peaceful. &gt; *over the tall grass* &gt; *following birds, chasing wind* &gt; *in search of color*
Oh mattdesl! Nice to stumble upon you. I remember seeing you in java-gaming.org :)
Hello matheus! Yes I remember you too, nice to see you. JGO is where I started my interest in graphics &amp; creative coding. :) 
Either one of those are fine. 
 for(;;);
Yes the particular lines of code are always only licenced under (eg) MIT, but distribution with GPL is allowed so the MIT code and GPL code are distributed as one. &gt; copyright is violated if anyone other than the author changes the license. So is your point that adding another licence violates this, or not? &gt; Regardless of what the license permits, copyright is violated if anyone other than the author changes the license. I haven't suggested changing the licence. It's a 
I am working on tooling for online journalists, mostly text editors, and it's my second gig in that field. At my current job, we leverage a React/Apollo/Nextjs stack, the previous one was all Angular 1. The most significant difficulties we had while maintaining our React SPA were basically these two: 1. React itself is nothing but a glorified view layer. It really doesn't address any other problem domain than that. However, no matter how sophisticated your view layer is, it doesn't take away from the fact, that business logic and the underlying architecture are at least equally important. Given React's reputation as a framework (which it isn't), a lot of people seem to assume (we did), that there's a React way of implementing business logic. The plethora of state managers, that claim to elevate React to some kind of full stack framework level all promote the encapsulated component approach, which is simply not suited for everything everywhere all the time. All of this led to us coupling logic and view in a way (hello SFC), that I'd never approve of under any other circumstances. To me, it was a hard-learned truth, that keeping your logic and view layers as decoupled as possible is pivotal to a code base that is supposed to stay for a while. And I forgot everything about that truth when I first started to work with React. It did take a lot of effort to correct these initial misconceptions, but now that we did, both maintenance and ongoing development feel very right and fun again. 2. The aforementioned emphasis on component-based solutions in the React ecosystem led us to abstractions (HOC's, child functions et al) that at least in our case turned out to be quite harmful. We had lots of components that had a minimal property surface but encapsulated huge chunks of logic, simply because it felt React-ish and clean. After a while it became obvious that these abstractions didn't solve generic problems but rather just hid multiple implementations of very different things under one hood, because initially there seemed to be some kind of overlap. It also became increasingly difficult to address a specific issue without risking breaking other things along the way. We fixed that by getting rid of almost all our abstractions in favor of very specific implementations. This felt very counter-intuitive at first, the code started to grow significantly because a lot of stuff wasn't really DRY anymore. A couple of months later, we all feel very good about this decision though. We can develop and deploy new features much faster, because we have close to no overlap or interdependency between components and we think we will be able to DRY up our code base using abstractions, that are informed by experience with our use case rather than some irrational urge to have just two props on two components. Now, none of these issues are specific to React. In fact, they are examples of what happens if you ignore established programming best practises like KISS before DRY, don't do premature optimisations, decoupling and so on. IMHO, one of the main reasons why this happens more often in React projects, is because the whole hype might give the impression, that everything's up for debate because the times they are a-changing and whatnot, where in truth it's still good old engineering with just another (very sophisticated and highly enjoyable) tool. 
No, just... stop. We don't do certificates in this field of work. It's a waste of time and money. They hold no value and should be shunned by everyone.
Looks awesome! Reminds me of s playstation title a while back
I'm not completely sure I understand you but, it seems like: 1. You come asking for help (free, I guess), but you can't even be bothered to give a link to the thing you want people to look at. 2. You trust neither the author nor yourself, but you seem to imply you would trust just any random stranger on the internet who answers your question after -supposedly- a "_quick_ audit". 3. You want a "_quick_ audit" on a project with something on the order of 30.000 lines of code. If all of the above is correct, then you can rest safely assured that everything is ok. I've -supposedly- looked through all the code and it can be trusted; it makes no suspicious calls in any way.
Make an object. If you're using TS you can create an interface for the shapes. You *can* use classes *if* you like doing OOP in JS. Personally I don't feel OOP is a good fit for fundamentally a functional language (even if not the most feature rich). Use whichever approach you prefer.
That's exactly what the new license does - it grants some, but not all of the rights from the original license.
\&gt; it is MIT licensed until the copyright holder (me) says otherwise Yup, this is why you can still fork the repo from before the license change, because it is still MIT licensed. But any new changes to the code are under the new license. This doesn't violate your copyright or your licensing terms.
Stick with the class. You're going to be more comfortable there and don't worry about anyone saying you shouldn't use OOP. class Rectangle { constructor (x, y, width, height) { this.x = x; // instance variables this.y = y; this.width = width; this.height = height; this.whatever = true; } get area () { // instance property return this.width * this.height; } rotate () { // instance method [this.width, this.height] = [this.height, this.width]; } static fromElement(element) { // class method const bounds = element.getBoundingClientRect(); return new Rectangle(bounds.left, bounds.top, bounds.width, bounds.height); } } const rect = new Rectangle(0,0,200,300); console.log(rect.width); // 200 console.log(rect.area); // 60000 rect.rotate(); console.log(rect.width); // 300 const rect2 = Rectangle.fromElement(document.getElementById('foo')); In the larger scheme of things, the `class` syntax is still pretty new, so you won't see it being used everywhere, but it should be the preferred syntax moving forward for class/constructor definitions in JavaScript. Generally speaking, if you see references to `prototype` you're looking at legacy code from before `class` was available.
Plug and play isn‚Äôt just for monorepos ...
I just assumed I needed a class if I wanted instance variables, and in java, a class comes with a constructor. Not necessarily wanting to make one. So how does instance variables work?
Yarn will have the better solution. npm will somehow fuck this up. I a guarantee it. 
Welcome to JS where you have options! I‚Äôd probably just use a class since thar‚Äôs going to be the easiest lift for you. Might be worth casually exploring the functional paradigm as you continue working with JS though. It‚Äôs a good fit for the language and a better pattern overall. 
Give me one good reason to waste my mental energy on assholes.
I anticipated this response. I consider engaging assholes to drive them off my favorite site not only worthwhile, but necessary. Letting them get under my skin by arguing with them on their own shitty terms, not so much.
Sure. First, here's the older constructor syntax. Though there's no `class` keyword, these were still considered JavaScript classes before that keyword existed (though you'll find many, even now, refusing to recognize that any form of "class" exists in JavaScript). function Rectangle (x, y, width, height) { this.x = x; this.y = y; this.width = width; this.height = height; this.whatever = true; } Rectangle.prototype.rotate = function () { var temp = this.width; this.width = this.height; this.height = temp; } Object.defineProperty(Rectangle.prototype, 'area', { get: function () { return this.width * this.height; } }); Rectangle.fromElement = function (element) { var bounds = element.getBoundingClientRect(); return new Rectangle(bounds.left, bounds.top, bounds.width, bounds.height); } Outside of using classes, you're generally dealing with raw data and arbitrary functions that act on that data - or any data with a similar shape, or at least have the fields the functions expect the data to contain. function rotate (object2d) { [object2d.width, object2d.height] = [object2d.height, object2d.width]; } function getArea (object2d) { return object2d.width * object2d.height; } rectangleFromElement = function (element) { var bounds = element.getBoundingClientRect(); return {x:bounds.left, y:bounds.top, width:bounds.width, height:bounds.height, whatever:true}; } const rect = {x:0, y:0, width:200, height:300, whatever:true}; console.log(rect.width); // 200 console.log(getArea(rect)); // 60000 rotate(rect); console.log(rect.width); // 300 const rect2 = rectangleFromElement(document.getElementById('foo')); You can create factory functions, not unlike `rectangleFromElement` for generic object creation too, instead of using a literal like how `rect` is currently defined. Going more functional, however, we'll want to get rid of mutations, creating new copies of objects rather than modifying the originals. This means changing the `rotate` function since it currently changes the width and height values. function rotate (object2d) { return { ...object2d, width:object2d.height, height:object2d.width }; } const rect = {x:0, y:0, width:200, height:300, whatever:true}; const rect2 = rotate(rect); console.log(rect2.width); // 300 console.log(rect === rect2); // false At this point you may start to have some concerns. First might be that you're object state has been simplified and exposed. Even though JavaScript doesn't support private instance variables, there are ways of spoofing it and they all get thrown out the window. Generic methods like the new `rotate` won't have access to any private state and will only create new objects from the existing public state. If there is some sort of "private" state you want to maintain that would have to be handled through functions with specific knowledge of your objects. In other words, given the generic `rotate` function above, you'd need to instead use a custom version to work specifically with your rectangle objects so that it could handle state correctly. On top of that, in the spirit of immutability, it now becomes your responsibility to replace original objects with new ones as they're created. For example, if you're tracking rectangles on the screen in an array, you can't simply pull one out, change it, and be done with it. You need to pull, change, then replace the old version with the new copy containing the change. const rects = []; // ... add rectangles to rects... // with mutations rotate(rects[0]); // and done // immutable rects[0] = rotate(rects[0]); // apply change, and replace This often means keeping changes close to the source. While generally speaking this isn't a bad thing, it force some organization that you might not be used to. One of the advantages of classes are that you can do runtime type checking on objects. If you want to know if you have an object that is a Rectangle instance you can use `object instanceof Rectangle` and it will let you know. Some will argue that `instanceof` isn't reliable because it depends on the prototype chain, but as long as you don't muck around with that, which you shouldn't be doing anyway, it's fine. To counter this in a class-less world, static type checking can be used. TypeScript, for example, can let you define interfaces for objects that can be used to make sure you're using them correctly. This can potentially bypass the need to use `instanceof` assuming you're coding correctly against your types. interface Object2d { width: Number; height: Number; } interface Rectangle extends Object2d { x: Number; y: Number; whatever: boolean; } function rotate (object2d: Object2d): Object2d { return { ...object2d, width:object2d.height, height:object2d.width }; } const rect:Rectangle = {x:0, y:0, width:200, height:300, whatever:true}; const rect2 = rotate(rect) as Rectangle; // rotate knows rect is a suitable type console.log(rect2.width); // 300 
Lot of assumptions in there, buddy.
Wow awesome game, and concept.
It sounds like you're just mad you revealed you're an illegal accidentally and from then on you started arguing purely from emotion. If someone breaks the law by illegally entering the country, he should get deported. Being able to immigrate to another country is a privilege, not something that country owes you.
Flow was the name. Very similar looking 
Great break down. Very clear. Thanks!
&gt; It sounds like you're just mad you revealed you're an illegal accidentally Okay, I'm just going to tag you as Adolf Hitler and move on. Cheers.
The difference is that this freezes the entire browser, not just the current tab.
This was your comment: &gt; Are you seriously comparing parents trying to secure a better future for their children [illegal immigrants] to a violent drunk? Is that what **we** are to you? Either you don't understand how English works or you admitted you're an illegal, pick either. Trying to take the high ground after being unable to explain your stance doesn't work. 
Didn't completely freeze Firefox for me, but it did make it run really, really slow until I closed the tab.
&gt; This doesn't violate your copyright or your licensing terms. Changing the license of a work you don't own copyright on is a violation of that copyright. You don't own the copyright to things I contribute to your project -- I do.
I tried searching the repo, but wasn‚Äôt able to find the sound file! I‚Äôm assuming that‚Äôs to keep the file size down to 13KB. Would you mind sharing the music here?
I used to use yarn before, but I have to switch back to npm half a year ago. Because yarn rebuild every native module everytime when I `add` any dependencies. Does this bug totally solved?
Could you try again but this time wait 30 second before closing?
I work on something you can very roughly compare to an interactive wikipedia that also has question sessions related to the content. It uses React, recompose, aphrodite and apollo (graph ql). We're using some really light weight new state management library as we mostly use local state. &amp;#x200B; If it were my decision I would: throw out aphrodite in favor of styled components. Throw out apollo and the state management lib in favor or redux. &amp;#x200B; Basically use tried and tested libraries with established best practices and a good ecosystem. You don't need a new library to solve every problem, most can be solved just fine through, well, knowing JS and writing good, readable, well tested code. &amp;#x200B; Some other insights: document your code. Doesn't matter if you use JSDoc, Flow types or something else. But treat your fellow devs like users of your NPM package. Some of our components use really complicated props (think nested object with array of whatever) and having to piece together the specification of those props in source files is super tedious and error prone. &amp;#x200B; Write lots and lots of unit tests. Really (almost) nothing should be untested. Even if the code changes a lot, writing unit tests should just be a part of writing code. Refactoring large JS projects is a nightmare without unit tests. &amp;#x200B; Use components with render props or function as a child. The HOF pattern comes with some important downsides. First of all, rearranging components is easier than rearranging functions at the bottom of a file because with recompose style enhancers you always have to mentally translate how the order of those components translates to the JSX tree you get. I think Reacts components are a super powerful abstraction and I think it's easier to read and maintain than HOF enhancers. My 2 cents of course. &amp;#x200B; TL;DR: Use well-established libraries, document and test code, keep things simple. It's easy to mistakenly believe that just because you're using react, things are going to be all shiny. &amp;#x200B; &amp;#x200B;
Here's an example from a Bubble Chart I made in React. `function DisplayCircle({ data, index, title, cost, group }) {const currentColor = getBubbleColor(group);return (&lt;circle` `key={index}` `r={data.r}` `fill={currentColor}` `strokeWidth="1"` `stroke={d3.rgb(currentColor).darker()}` `cx={data.x}` `cy={data.y}` `/&gt;);}`
I will give that a spin right now! Thanks. Somehow I didn't run into that one (kept finding references to reactd3....).
Very nicely done!
Hi /u/xshipwrecked, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Did you know you can freeze windows with only... 0 lines of js?
There is no MP3 or audio file ‚Äì all of the music is procedurally generated in real-time as your kite collides with flowers/grass. Even the synths are procedural; they are created with stacks of oscillators with layers of reverb and filters.
Actually we almost there, most people use React. Just go with it, it strictly superior.
If you're interested, here is the github repo! [https://github.com/danielv775/CryptoChief](https://github.com/danielv775/CryptoChief)
Perhaps I should point out that I am the developer of CrxOop, which gives you both OOP as found in Java and similar languages, and also proper prototype inheritance that not even es6 is giving you. Hence I am certainly not saying do not use javascript's OOP. I am saying, keep it simple. If the problem does not need javascript's OOP, do not use javascript's OOP.
If the rectangles come with behavior, make a class. Senocular's post is excellent. If they do *not* need behavior, and are only holding data for you, make them simple objects: const rectangle = { x: 4, y: 2, width: 15, height: 6 } rectangle.x // =&gt; 4
Ohhh damn - you were featured in the Hacker Newsletter from HN this week. Congrats! In case you msised it, [here's](https://news.ycombinator.com/item?id=17978865&amp;utm_term=comment) the link.
Recently migrated from react motion. Awesome library, native animations are really performant
Thanks! And thanks for letting me know about the newsletter, I didn't even know HN did a newsletter.
Agreed! The nice thing here is that this is this solution scales pretty linearly, so you get benefits even with small repos, even though it's designed to cater for very large repos.
I‚Äôll be honest, I have no clue how I signed up for it... haha. No problem, friend!
[https://music.youtube.com/](https://music.youtube.com/)
&gt; But that's not because of sublicensing. Sublicensing is the ability of someone who got a license to give a license to someone else. Yes, jamiebuilds got a license from contributors, and he's giving a license to end users. Not sure where this is going really, since you seem to agree that you can add a new license for new contributions without permission from previous contributors, which is the sole point of this thread.
No one's talking about changing the license on your work. I explicitly said in the post you're replying to that your work remains MIT licensed. But since other parts of the code were released under a more restrictive license, the more restrictive license applies to the software as a whole.
Gracias! :)
Crashes chrome entirely for me. Have to force kill it.
I actually have a fairly novel use of it that I'm working on right now. I won't be using it for general authentication just yet, but I want to be able to have people contribute to a charity (Extra Life) and then I'll give them a JWT they can paste into a field on the account page. Once they've done that, it's saved in the localStorage and gets used for all the API calls to give them extra functionality in the site. So in a sense it's a special pass I hand out only to specific users.
I think it should be for internal dependencies.
This is very relaxing. Would be cool to see someone do this in p5.js, and compare. 
I would just be looking for any external url's. Not that they have to look suspicious. Most primitive tracking is actually 1x1 image pixels, so an external image looks innocent enough... I'm no programmer, but I looked through with ctrl+f for "http" and found quite a few. I would have no idea how to remove them or replace them with static local files. "I've -supposedly- looked through all the code and it can be trusted; it makes no suspicious calls in any way." Did you really? Or are you just saying that sarcastically.
I built this over a ~3 week period. I studied Film &amp; Media at university, but have been coding with OpenGL, graphics, games etc. for many years now.
Damn right, you fucking muppet. Crazy how generalizations are everywhere these days. - "You don't really need moment.js" (while offering an alternative library, which is lightweight but got bugs moment.js don't have) - "Actually you don't really need any libraries" (without addressing the time-cost factor of NOT using libraries, on different levels of expertise on the language) - Me addressing ya'll as muppets (while being a muppet) FUCKING MUPPETS !
1. Fixed the underscore issue. 2. The title issue, is however with the youtube api. The response from youtube omits the special characters in video title.
any thoughts on adding a licence of some sort? i have some ideas i'd like to fork, commit and release towards a possibly monetizable market 
I just took the plunge into javascript a couple months ago. The biggest pain was figuring out all the tooling, bundlers, compilers, etc.. it takes to even begin coding. There is not one resource out there that really explained these things in detail, and I had to just keep trying everything until i figured it out myself. So i think that'd be a fantastic resource. Explain all the tooling and workflow that goes into even starting a project. Explain: npm, yarn, gulp, babel, webpack, grunt, etc.... I still dont have everything right and would love to see what u come up with. And not just "webpack is a bundler" We need, what is a bundler? why do we need it? what other bundlers are there? Whats the reason you should use this? etc
honestly, if it wasnt for Parcel, i would have given up. But I do know that i need more than parcel to keep going...
There's no native way to have a popup with something like radio buttons. You can look into using a modal dialog. 
Hello, at this point there are no plans to release the license. The artwork, design, creative direction, code, concept, title etc is not for modification or re-use, as I hope to build this into a full iOS/Android game with more features.
Totally understandable and i'll be looking forward to seeing it on the app store :) I only ask cause i think it'd be great for wallpaper engine, but since there's the steam workshop I had to ask about permissions and such, as its an open/free marketplace
Some of these are bad practice. `const err: Error = e;` automatically casts err to an instance of Error, but you can‚Äôt guarantee that only errors will be thrown.
This. is. awesome!!
I like the look of this and will give it a try. Thanks
Make a div filled with the stuff it needs. Top z layer, initially hidden. Show it when needed, and populate its placeholder content divs with specific title, message etc.
God bless
Short, sayable package names are valuable. This is just a friendly-looking squat, by my guess.
Wow, thanks for sharing your creation on github, I would really love to learn how to do something like this myself.
Waiting for \`react-kot\`, \`angular-kot\`, \`vue-kot\` wrappers.
At least it won't break half the internet like left-pad
There is actually the &lt;dialog&gt; element, but it doesn't have any opinions on what you put in it. Also, not fully supported but has a polyfill: [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)
If you're trying to learn JavaScript, I'd actually focus on learning the language first before you jump into any specific libraries. Meth Meth Method did a great tutorial series on YouTube where he creates Super Mario Bros. in vanilla JavaScript -- it might be worth looking into. https://www.youtube.com/watch?v=g-FpDQ8Eqw8&amp;list=PLS8HfBXv9ZWWe8zXrViYbIM2Hhylx8DZx
You mean the attack in the OP? Or just `for(;;);`? Because the latter doesn't even slow down the Chrome for me; it just freezes the tab.
It's faster but also pretty broken. Next time you do something like this, add some tests. fastJSON('{"a":{"b":1}, "b": "test"}', ['b']) returns: ' "test"' instead of: 'test'
Can't wait for it to reach version 0.0.1!
TIL. Thanks. 
I noticed that the download graphs of various projects took a dive on June 3. Does anyone know what caused this? It didn't seem to affect every project from what I could tell, mainly react projects because Typescript was safe but flow took a hit.
It also accept broken JSON. 
I would go without libs. You can take React or something Canvas related if you want and possibly take look at Lodash for some helpers.
none frankly. You only need canvas and the math for 2D games. 3D games are tougher because the math are more complex, in that case yes three.js is advised.
No, dude. Stop casting to :Error
GSAP 
This code snippet makes very little sense to begin with. It's clearly written by someone who understand neither promises nor async/await.
(It's a third-party newsletter).
let's all just get back to work gaddamnit
This. I learned JS basics in 3 weeks. All MDN. Then I moved to ESX shit.
Hi /u/scoobyboo, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
I'll check it out, just remember, I bet there's a whole lot of people like myself, the coding isnt the problem... the hurricane of tooling is. 
No clue! I noticed the same with many packages. First assumed holidays, but seems to be too big for that. Maybe temporarily issue with the download tracking or something
Feel free to submit a PR with a "built with immer" section in the readme
just thanking me will do ;-)
I mean, if economic anxiety is a good enough excuse ¬Ø\\\_(„ÉÑ)_/¬Ø
You could do so with Canvas.
Funny you should say that. Your lib looks very similar to Eric Elliott's https://github.com/ericelliott/autodux . Meanwhile, the Redux team is making a lib called [`redux-starter-kit`](https://github.com/markerikson/redux-starter-kit). We've already got a `createReducer()` utility that uses Immer internally, and we're looking at cloning most of `autodux`'s functionality but using our version of `createReducer`. Your lib actually seems like it's mostly what we're trying to build already. Our existing discussion on this topic is at https://github.com/markerikson/redux-starter-kit/issues/17 . Think you might be interested in either helping us, or possibly contributing `robodux` for us to use in some form? (I see the license is MIT, but never hurts to ask :) )
The point is that it makes the immutable update logic a _lot_ simpler to write. Here's an example from the ["Structuring Reducers: Immutable Update Patterns"](https://redux.js.org/recipes/structuringreducers/immutableupdatepatterns) page in the Redux docs: return { ...state, first : { ...state.first, second : { ...state.first.second, [action.someId] : { ...state.first.second[action.someId], fourth : action.someValue } } } } Ugly, ain't it? With Immer, that could be: return produce(state, draft =&gt; { state.first.second[action.someId].fourth = action.someValue; }); Way shorter, no chance of accidentally mutating, and it takes care of doing applying that change immutably.
The internet :D
Maybe.... But, first of all your redux state shouldn't be that nested. And second of all I'd rather have a few more lines of code than adding another dependency into my build. TS, React and Redux for the win!
What are the advantages of Immer vs Ramda lenses? Are there any considerations for unit testing when using Immer? Thanks!
W3schools IMHO
Javascript: Understanding the Weird Parts is possibly my favourite beginner course. It's mostly theory but it does cover important topics such as closures and prototypal inheritance, and that will come in handy, even when using libraries. Those things may be overlooked on a more hands-on type of course. Also Anthony Alicea, the instructor, is super clear.
Thanks I‚Äôll make sure to check it out!
JavaScript is an actual programming language
Thanks I‚Äôm gonna look into it and see which one works best 
Hey, I'm a Redux maintainer. Trust me, I'm the first one to tell people they ought to flatten their state. Doesn't mean that everyone can automatically do that. I can understand not wanting to add more dependencies, and that choice is always yours to make. But, even with simple arrays of objects, Immer saves you effort (`someArray[index].value = 123` instead of a `map()` and an object spread inside). So, I recommend it for pretty much everyone.
Took your advice! Good call... Thanks for checking it out
And he did them multiple times per repo.
We used parcel at my last job, I totally forgot about it haha.
Do you have a code example I can look at and update my post with?
Do you have a code example I can look at and update my post with?
They are definitely different things. 
He has reverted the license. https://github.com/jamiebuilds/react-loadable/commit/b7508ddd2775b8a14fea536d0f69c205f965b682
Be my guest https://medv.io/list-of-available-three-letter-npm-names/
`react-pose` is a good option 
I think sometime around then Yarn registry was down for a day.
Tbh, I'd say that throwing something that's not an instance of Error the actual bad practice. And if you ever do that, you damn better document it. I don't think I've ever seen a library that doesn't throw Errors or something that extends Error.
So this code hogs the CPU by going "back and forth" between the local page(href #). I guess the for loop being what it is allows the attacker to bypass static "infinite loop" checkers? IDK why use for(i =0;i&lt;1/0;i++) considering a while (1) would have the same effect. Still, interesting nonetheless.
Nope. Better off doing code academy then reading the shit out of MDN. IMHO ;)
Overlooking the style issues I see and going straight to answering your question, try placing an `alert(tax_rate)` after line 11 in the jsfiddle. (Also, remove the `window.onload` wrapping the two lines at the bottom, or the fiddle won't work) As for the actual solution see below: When getting input values, you're getting string values and not numbers (even if they are numbers). Strings in JS cannot be added together like on line 11, they get concatenated (i.e. `"2" + "3" == "23"` and not 5). What's happening is you're `calculateTotal` function is assigning The real solution here is to `parseInt()` the values you are getting from the inputs (as they are going to be returned as a string) and doing the math and ONLY after all the math is done, `.toFixed(2)` them when assigning them back into the inputs (i.e. `$("").value = variable.toFixed(2)`). Basically you're not actually adding two numbers together on line 11, but two strings. As to why the `calculateSalesTax` works, it's because by dividing by 100 and then multiply, which have no meaning to strings, so JS casts the variables to numbers so that the expression makes sense. Also note that `.toFixed(2)` is turning the number into a string, so you always want to do that at the very last second or you'll create more problems for yourself.
Parcel is still a bundler, Zwitterion is not. Zwitterion fills in the gaps that the underlying platform still doesn't provide, mostly transpilation and rewriting bare imports. I've had a really bad experience with bundlers, because bundled code works differently than the underlying runtime works without bundling, and it's confusing. Also, though parcel says it's zero config, it's never worked zero config for my main use cases, which are using TypeScript and web components. The question is probably do you believe in bundling or do you believe the web platform can do what you need it to do natively.
Damn, that‚Äôs really cool
Be careful using libraries stuff from jamiebuilds. He's a troll occasionally turning his open-source stuff into non-open source: https://github.com/jamiebuilds/bey/commit/dcaae040807351114c147cfde78d3a408213ae30
Thanks I appreciate it
Phaser is a really fun to play with JS game engine, you could totally do Tetris in it. 
Yeap, all true. It's doesn't check whole JSON, it's tries to "extract" needed part.
Yes but even if you never throw anything but an error, something else might. Better to check if it‚Äôs and instanceof Error and handle the else condition as well.
Totally legit, that's why you can create nested reducers for that case! I think nesting reducers should be more advertised by the maintainers
Well explained
The guy can be little eccentric at times, but standing up for what you believe in, in whatever capacity you have, isn't something I'm against personally. Probably more of a symbolic gesture and it seems like he's changed it back now in any case. The only thing is not having issues on his projects, but then again it helps things to not turn into the shit-show that is yarn (consistently over 1000 issues at any one time) and other popular open-source projects. I understand his philosophy of making pull requests instead of just expecting the dev to do everything.
It's example of what you can take, if you go minimal approach. Even if you take these, it's still plain JS, you just add useful experience on the way.
So, the only reason really is that it‚Äôs simplier to write? I‚Äôm going to keep my setState and reducers vanilla, but maybe try to use immer where I actually explicitly have been doing deep object comparisons, see if I get some performance boost.
Yeap. Returns string of json. Do JSON.parse if you need to. I'm creating npm package with it, will have tests and benchs test(t =&gt; { const r = fastJSON('{"a": {"b": 1}, "b": "test"}', ['b']) t.is(r, 'test') }) 
Either I'm having a stroke or that title is fucking with me. 
What's wrong? I can fix, to not being downvoted
'Just wrong a short article about how we translate or apps' No 'do' in the middle
–≤–æ—Ç –∫–æ—Ç
Sometimes it's either nest the state or have a chaos in the state. If Immer works just as described above I'm definitely gonna try it.
Do you have a jsfiddle or something similar where you can reproduce it? Seems to work for me.
MDN
see if Juicedi's answer helps, honestly havent worked that much with JQuery before.
thats actually in the search box so you can use \`querySelector('#search p')\`
jQuery is not going to find the newly inserted &lt;p&gt;. Try using insertAfter and assigning the inserted element a variable using that method.
`querySelector('#search&gt;p')` or space if &gt; doesnt work
tried closest, closest child, prev, next etc
What is $(this) in your example, is it $(‚Äò.search‚Äô) ? Also it sounds like you have multiple IDs of #search-text which is invalid markup and may cause behavioral issues. Can you provide the entire click event function?
[removed]
Even if the click event listener is on the parent div, the event gets a data object that will list what element was actually clicked on. https://developer.mozilla.org/en-US/docs/Web/Events/click I believe it would be "target" for the thing you clicked on and "currentTarget" for the thing that had the event attached.
Then you better make sure that "this" is actually the &lt;div class="search"&gt; element.
Holy shit, I never knew this! Thank you!
I hate that people pollute npm with nonsense like this
npm snafu that day. not a ‚Äúreal‚Äù dip
Remember IDs are supposed to be unique on an HTML page. When you clone, if you're cloning that p tag with the same ID. It will not work
and its immutable, which i spent some time discussing why we might want it :)
This is most likely why it doesn't work. $(this).find("p:first").text() should work.
Are you planning on adding type definitions to redux-starter-kit?
I'm finding it hard to know what you want. Is the image what you want, or what you don't want? You're also saying things are centre aligned and right aligned? That makes no sense. What's actually happening in your image is that the decimal points are all lined up, slightly to the left of centre.
Trendiest repos - most stars given the period 
Everyrine I've tried visual programming its been clunky and far less efficient them a keyboard and IDE. 
I am quite interested and have experience in the field. I built an kind-of-a-visual scripting app with jsplumb and angularjs back in the day. I will make sure to check your library when i get home.
You can remove the additional 0's after the decimal point using JS. Setting the 2 decimal points to 2 values will align everything better.
OP here. All direct casting to Error has been removed.
Post on Stack Overflow. This is a discussion subreddit, not a help subreddit. 
I also had to play with LabView at college. It was actually really funny how some files can grow so big that when you need to zoom out, it would look like a painting. Maintaining those programs has to be dreadful.
This. GSAP is the standard/bar that any newer solution must try to exceed. 
yup exactly, thanks for clarifying it before I had a chance to
if td is a flexbox and td is justify content center, isnt that the same as text-align center
How dynamic is the content in the table? You could potentially wrap the numbers in a div with a min width on it, and do `margin: 0 auto;`. This would be able to account for content up to a certain length. Depending what you are building this with, would change some potential ideas as well in terms of JS based solutions to handle far more dynamic content as it renders out. 
Most FE is monkey work. If you can save businesses time + money with a visual editor then yup go for it. 
the min value of numbers is 0.00000001 and the max value could go up to 100k, max value is dynamic
Both solutions I specified will do just that, no matter what length - all decimal points ‚Äú.‚Äù will be in the center.
That‚Äôs the first thing I stated in my original response.
As you render the content, you could assess your list of numbers, determine the longest one (by string length) and set the width or flex basis of the container which wraps the number inside the table cell (depending how you want to achieve centering). 
&gt; One final tip. If a site contains a target="_blank", the new opened tab will impact the original tab. If the new tab executes a long running or resource consuming script, the original tab will become lagging. But if the link has the rel="noopener"property, the two tabs will not interfere with each other. Til.
Well, this is the JavaScript sub, not Java. JavaScript is not really related to Java in many ways. That said, it is very unlikely upgrading Java would cause issues. Worse case scenario you can uninstall JDK completely and reinstall it. Here's a list of JDK versions that are compatible with Eclipse - https://wiki.eclipse.org/Eclipse/Installation, and you would download JDK here - https://www.oracle.com/technetwork/java/javase/downloads/index.html
Impressive coverage! 
I don't .. wha... Why would anyone troll npm?!?
Found the back end guy. 
Might want to fix the non-responsive header, just sayin :) 
Full stack here, so I think I have a good perspective on this. I see this attitude from backend developers from time to time. Whenever I‚Äôve seen backend developers do front end it is absolutely trash, so yeah, I guess it‚Äôs monkey work if you do a terrible job and make an app which barely functions and looks like crap. It would be like getting someone who doesn‚Äôt understand runtime complexity to make an efficient algorithm - they wouldn‚Äôt even understand why it‚Äôs bad. They‚Äôd be like ‚Äúwell it does the job‚Äù without realising they‚Äôve increased the complexity exponentially and made a shitty, slow app.
In the first example ask yourself what a new customer *is*? It seems as though the object Customer has yet to be defined, therefore customer will be *undefined* \- thus having no properties or keys to log.
Sorry for the misunderstanding. I didnt write the class for brevity.
Okay, I'll be sure to try that, tysm :)
Also, to anyone saying "Javascript isn't he same thing as Java," I am aware, but /r/java has a rule against asking for help, so... ¬Ø\_(„ÉÑ)_/¬Ø 
As an old programmer with 20+ years of experience, *yes*. We need to go past text. Kudos, and will be following 
Check Outsystems. They‚Äôve built a big market around the concept of visual programming, so you got a market for that, but the target probably won‚Äôt be developers, but people that are trying to get a MVP out without having a truly understanding of programming. 
But why wont methods , getter and setters be enumerated on?
it is a different issue which is not even illustrated in your snippet. JS object properties have property descriptors : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty , which can make a property enumerable or not. methods of a class are defined on the constructor's prototype, not on the object itself,therefore are not properties of the class instance if not defined on the instance https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance I suggest you take a hard look at developer.mozilla.org docs.
The first programming language I learned was LabView. It's proprietary software, so I can't install and use it without purchasing it from Texas Instruments, but I really miss using it.
Because it involves dynamic data?
Thank you to the guys who gave a direction but some are asking me "what does this have to do with JS" I think you havent understood the problem statement. * This is not a simple td with a left, center align or right. * This td column can be of any size and resizes as the table resizes on different devices * There can be any numeric value inside this td but out of all the rows, the longest number is at the center * Every other numeric value is right aligned with this longest value. Hope that makes sense. That is what the image represents * No fixed width columns
Just a very small snippet, creating a range of consecutive integers given a low and a high: ``` Array.from({length: high - low + 1}, (v, k) =&gt; low + k); ``` Or in descending order: ``` Array.from({length: high - low + 1}, (v, k) =&gt; high - k); ```
True, but most of back end is also monkey work. Most of daily programming is wiring API A to API B and do some data transform &amp; clean up on the way. As a full stack teacher though, that's what I tell my students: Front end is immediately much harder than back end. Back end is simple and comforting, it can have mathematical elegance. Developing for the back end, you can an almost "pure" coder, dealing with algorithms and cleaning up your code. You don't have to work on your human skills, empathy skills, UX skills... Front end is messy and awful, you have to deal with a plethora of platforms (and screen sizes), but most importantly, you have to deal with humans. Humans are weird, slow, and illogical creatures. To do front end properly, you need to be much more rounded. However, at scale, front-end keeps being just as difficult, whereas back end requires more and more critical expertise. In practice most applications are not at scale, so front end is generally much harder. My students definitely learn to build back ends in a fraction of the time needed to learn front ends (for an equal level of expertise, which is, being able to build every day apps).
Methods of classes are not enumerable. You can't get them through a `for..in`.
I hate them passionately but would love to understand quite where you see the benefits, I would much rather write JavaScript for example than patch things together in PureData or MaxMSP, but some times I have no choice (EG doing something custom for myself inside Ableton using M4L), oh how I wish it was a text programming language throughout :( Musicians love graphic languages / patching languages as they immediately grasp the concept of plugging a thing into another thing. Your framework would therefore appeal to certain people who more easily grasp the plugging of things into each other than the somewhat abstract stuff we all learn when we first learn about functions, objects etc
While methods of a class are part of the constructor prototype, `for..in` gets all the enumerable properties in the whole chain. So if the methods were enumerable they would have shown up.
Having done both, I feel like FE dev is harder. Testing backend is very easy compared to frontend as you can more easily replicate problems. Frontend you usually need to rely on end users reporting a problem, then trying to replicate. It has gotten easier on the frontend with a more standardized pattern emerging (components usually with a state container), but providing a good user experience is still paramount and can be hard.
Thats true but I think hes saying it shouldnt be a replacement at the moment. But I think the future is bright, especially if we implement it in conjunction with traditional programming and transition over if its truly a better way of doing it.
Great Job!
The `class` statement is just a helper for creating objects. It helps to the point that it makes only properties are enumerable. Object methods aren't really necessary to be enumerable. Its properties are the ones which matter, because methods are same for objects of the same class. Only object analyzer applications would need to know what methods are provided by an object.
Immer does not replace reducers. In your use case I think Immer would serve the same purpose as seamless-immutable.
Whilst this is a really nice set of functions and I would definitely be interested in using it in the future, it‚Äôs really not good to patch native prototypes! You should consider using a similar approach to lodash‚Äôs chain method.
The `class` statement is just a helper for creating objects. It helps to the point that it makes only properties are enumerable. Object methods aren't really necessary to be enumerable. Its properties are the ones which matter, because methods are same for objects of the same class. Only object analyzer applications would need to know what methods are provided by an object.
&gt;even those without any criminal record &gt;illegal immigrants Kind of implies the former. 
I decided to create a simple web app that uses Firebase, AWS Lambda, C3.js, and Github's GraphQL API to visualize the number of open issues on VS Code over a period of time: https://vscode-issue-tracker.netlify.com/
So, is this a NODE-RED clone? 
True, I can't ride a horse yet simultaneously remark that people are mostly driving cars and not riding horses because cars have real value, you're very smart, kudos
Hi /u/Rebellion2297, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
It‚Äôs a CSS problem.
Hi /u/amananurag06, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I believe in- the fact that i still don't know everything "bundling" implies :) (again why im advocating someone finally write up a resource to explain all this) My use case is a 3D opengl engine written in Typescript, so not exactly small or trivial, and I can say parcel has been zero config for me. Though figuring out what the heck source maps are and how to configure them to actually work literally took 6 hours straight. (AGAIN WILL SOMEONE JUST EXPLAIN ALL THIS??? lol) You've got me more than interested in zwitterion now. I'll ping you after I move my project to zwitterion later today to let you know
Well obviously it isn't a replacement at the moment, but that's a truism. If it was a replacement, it would be. It is not because we haven't collectively moved in that direction yet, not in any serious fashion at any rate. People who try are either outliers (Bret Victor), confined to obscure languages (Luna) or told they're building a cool toy (like the poster here). We need to get past this perception that the written code is that important. It is not. But git! We can build better tools adapted to those new languages (besides, they could still be writing a declarative language behind the scene) But being able to be human parsed! It is never the case. We aren't parsing the ASCII characters, we have abstractions that transform them into letters for us. There is no fundamental difference with translating those into other abstract symbols of our choice. 
Enterprise ETL (Extract, Translate, Load) tools are all visual node based, but all are either: - insanely expensive - a complete nightmare to install / manage So an open source ETL would be a good pointed project / use for visual programming. Checkout JBoss Fuze, Mulesoft, jitterbit, scribe, etc. They only require a few things too: - oauth connector - parse csv json and xml - scheduler with logs - maps (copy field x to field y) - basic functions field y = (concat(field x, 5) + " some text") Bonus points for a built in way to use a database
I remember testing this in some modern browsers when I first learned about it a few years ago, and replacing location is restricted by default across origins. IIRC, you're able to at most change the path, not the URL. The target page even had limited getter access to the parent and opener objects. You can test this pretty easily in dev tools by adding a custom cross domain link with a _blank target to the elements on any page, then trying the example exploit code, and poking around the opener and parent. Still best to protect older or less secured browsers.
Having a criminal record actually has quite a specific meaning. Someone can simultaneously not be known to the criminal justice system, therefore having no record, and be an illegal immigrant.
I come straight in the 1900s. I've seen a bunch of planes fly. They're interesting toys but let me tell you, they'll never be useful for anything.
Wont this be a memory problem if theres mutliple people connecting?
Persistent data structures used by most immutable libraries have the potential to be much faster, when you truly do not mutate. Things like Object.assign (or worse, JSON stringify + parse) will create full copies. Persistent data structures are carefully crafted to only make partial copies, and reference other pieces to make a whole. Persistent data structures were considered by many to be what made immutable programming feasible.
I got curves working and all but the problem again lies with context of the canvas. i cant create multiple contexts so the lines become all jagged and everything.
What do you think would happen if theres 100+ people connecting? I cant test with that much unfortunately and I need to be production ready as soon as possible.
I like your recommendation but a 20 millisecond delay is very noticeable. I need a solution more fluid. Ill report back if I find anything.
This I can agree with, but I think node-based as a layout and *base structure* opens up a lot of flexibility. Nothing stops you from having a "matrix" node and even a "raw code" node. No one said this should be pure. I still think you can begin from this abstraction and build upon it. Layout out the code as nodes with heavy metadata solves a lot of problems in terms of DRY (a node can be visually linked to its instances) and even the heinous problem of DRY-but-with-a-small-change (metadata heavy nodes could contain the diff to their parent, so changes in the parent could still be applied in the fork). It also solves a lot of wiring and dependencies problems (they become immediately obvious visually). You get rid of the "file structure" organization problem. Simultaneous people can work on different nodes without fearing git merges. And so on, and so on. I think code will still be used for a while after such systems exist, but less and less as said code gets packaged into new reusable nodes and distributed through the integrated marketplace.
I created a module that triggers a callback when an element hits the top of the window. Still a WIP :) [https://www.npmjs.com/package/scroll-callback](https://www.npmjs.com/package/scroll-callback)
It is heavily used in the game/film industry. I had the opportunity to work with it in Nuke for a video compositing job. I think visual/flow programming is perfect for well established domains where you have a library of documented components. I believe that only mature software can be represented visually. There is no room for hacking. It is pure engineering. I recommend the book Flow-based Programming for people interested in the foundation of visual programming. 
It appears that the authors have considered this and gone with it away. I assume weighing usability and performance over the small (but eventual?) chance of name collision. Personally, I‚Äôm undecided if this is a deal-breaker or not.
what an intellectually dishonest comparison
I would do some broader scale quantitative research and then some interviews to pivot if people don't actually want it
I think the right solution is two way: a model that can be created in code and then visualised, with changes to the code affecting the visualisation *and* changes to the visualisation affecting the code. Give me both sides. To expand a bit, I‚Äôm really into technical design tools and prototyping as a design practice, where many tools like Framer, Origami, or Flinto are all trying to give the power of programming to users without programming skills. Other creative tools like Unity are already ahead in this ‚Äì when setting up a render texture, many users aren‚Äôt even aware they‚Äôre programming. It‚Äôs a super interesting space. And a visual representation is great for many development cases, such as state machines, where dead ends and blind turns are immediately obvious on a visual model but difficult to spot in code. It‚Äôs also easier to follow data through a visual system, and seeing how and where it gets mutated, than tracking between different methods and modules in code. However, while there are perfect visual expressions for some programming tasks, like setting page transitions on click events, not everything we do in code has a visual corollary or even works well with visual inputs. And visual programming can be incredibly rigid: in ‚Äúwired‚Äù prototyping interfaces, changing a user flow may require changing *hundreds* of wires, all individually by hand. I think it‚Äôs easy to forget that programming combines two paradigms: concise expression of our thoughts and intent, which can often be done visually as well, and scripting away repetitive tasks and iteration, which is extremely difficult to do visually.
A fantastic talk, I always find myself recommending it. Also check out [this talk](https://www.youtube.com/watch?v=cCOL7MC4Pl0), it's from 2018 and discusses rAF and Promises.
Sounds great, let me know if you run into any issues
what an intellectually dishonest argument
100% agree with everything you said
But why would a key with object notation containing a function would be made enumerable? [https://repl.it/@ibm007/TechnicalFlamboyantVisitors](https://repl.it/@ibm007/TechnicalFlamboyantVisitors)
My personal entry: https://github.com/transitive-bullshit/wahlburger
Can you also please share something good on cloning and OOPS in javascript concept
I did it in a way thats compatible with all the libraries out there, because it doesn't come up as properties of the object, so when you or any library tries to enumerate through the properties, my extensions don't show up in it. But yes, Maybe we can have a setting where you disable extensions and use in as a chaining method.
oh relax im just messing with you
For me personally it isn't a deal breaker at all, the library is well thought out and has a lot of really useful methods and that outweighs this small nitpick by far. It's rare to have a library nowadays that favours nice interfaces. 
It would certainly be a nice! Another advantage of doing it that way is that it would be easy to find out where the methods are coming from and search for documentation. But from what you just said it looks like it should be fine, I was thinking about avoiding another mootools type controversy. Especially since a lot of the methods you've wrote look really useful and might (hopefully) be included in language in the future.
That it not idiomatic at all. try/catch, especially in the context of promises/async/await is effectively like the result type with not as great syntax, but anything that can be modeled as a result type can be modeled with try/catch and throwing.
Just wow! Not another material design framework, but takes the good parts of it and made something new! Really like it!
Watched it a few times, it's great. When someone doesn't know what's event loop that's my answer.
Fair enough
I think the line ws.add(foo) Should not be there
Theoretically I would create an array of contexts for each user connected and use that for simultaneous drawing. Can we extends the canvas object?
It's not because it's a function, it's because it was defined as a method in the class syntax. These specifically are removed from iteration for the same reason you don't see (nor would want to see) things like `toString` or `hasOwnProperty` when going through `{ name : "John" }`.
Have you seen Luna? https://www.luna-lang.org
Wow, that is unexpected!
IIUC Immer falls back to copying the entire structure when running in browsers that do not support proxies. It is not efficient, but it works transparently.
I think the intent of the example was to show that same object could not be added but it is actually being added. So would WeakMaps allow duplicate objects to be added?
I'm mostly responding to the text-based programming purists here in the comments. I spent four years working at Ab Initio Software whose main product is an amazing but crazy expensive proprietary "dataflow programming" platform including IDE, source-code control system, execution environment etc. By crazy expensive I mean take your guess and multiply it by 100 and you'll be in the ballpark. The value proposition was that a few good Ab Initio devs could replace an army of Java (or whatever) devs and create programs that are more performant, maintainable, programmatically understandable (for data lineage assessments), bug free, basically better in every way. Since then I've been programming in JavaScript. I do fine, but there is literally no comparison between the productivity of a good visual programming platform (like Ab Initio Software) and a text-based programming paradigm. 
Check out MaxMSP and Pure Data. They‚Äôre well polished, but they lack generality. There are no concepts for higher-order functions and there‚Äôs a lack of looping constructs for dynamically creating N buttons. Also the `trigger` block highlights another shortcoming, making the developer thing about the internal mechanic of the software rather than just working how you want it. I spent a month getting really into visual programming languages, and started building one myself until I discovered Pure Data. Then I realized that I had to solve some larger UX problems before moving on.
Hmmm. I think we will need a _lot_ more info to help out... All I can do for now is show you my bot for examples and maybe that helps Bot https://github.com/mousemke/_val (I believe) related bits of code : the core modules https://github.com/mousemke/_val/tree/master/modules/core
LoL. no. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mousemke/_val/.../**core** (master ‚Üí 80c4e77)](https://github.com/mousemke/_val/tree/80c4e77804345d6d480a986c3ad6bcb08c7124ac/modules/core) ---- 
It‚Äôs called a god damn flow chat and it‚Äôs cs101. Jesus 
What do you mean by cloning? Shallow cloning is straightforward once you have mastered JS fundamentals. Deep cloning requires an understanding of recursion and circular references. Google these terms to find useful resources. I don't have a good resource that specifically discusses OOP, but there are general resources which touch on the topic. [YDKJS (free)](https://github.com/getify/You-Dont-Know-JS) and [Eloquent Javascript (free)](https://eloquentjavascript.net/) both discuss parts of OOP, such as inheritance, encapsulation, and polymorphism. Good luck.
Sorry but you are dumber than a brick if you think you add any value to NPM.
That was the day that [Microsoft announced it was acquiring Github.](https://www.crunchbase.com/acquisition/microsoft-acquires-github--2c0c79f2)
Don't use any framework, use your brain to create exactly what you want! There are a couple of patterns that will really help you: [http://gameprogrammingpatterns.com/state.html](http://gameprogrammingpatterns.com/state.html) [http://gameprogrammingpatterns.com/observer.html](http://gameprogrammingpatterns.com/observer.html) &amp;#x200B; Here is a nice way to do the observer: [https://www.sitepoint.com/javascript-design-patterns-observer-pattern/](https://www.sitepoint.com/javascript-design-patterns-observer-pattern/) and state: [https://css-tricks.com/robust-react-user-interfaces-with-finite-state-machines/](https://css-tricks.com/robust-react-user-interfaces-with-finite-state-machines/) I spent days researching this stuff, these are great tutorials and really nice clean code to get you up and running... it is really good fun, don't get tied into some library or you won't learn as much.
good find!
&gt; I must say I'm leaning nowadays towards Immer with Bey May I ask why didn't you stay with mobx? The example given in the readme of Bey seems like it could have been much simpler with just raw mobx observable component state.
Can every char in your numeric string be contained individually by a span, and every row of data populated with as many spans as is represented by your largest number? So that you know that every row will always have the same number of elements?
Although I still prefer writing codes in text editors, experiment and debug them in good IDEs like VS-Studio and build the mathematical logic out of them and compile them together to bring the visual aspects of my project. These Virtual Programming interfaces seem interesting enough. I guess not hurt to give it a try and move some of my project on its base. 
If you want exactly the result in the linked pic, you can just add empty columns before and after the numbers. That should take care of the centering. Then you can just add a css class gho the numbers column with `text-align: right;`. 
Seems I not wasted my time by writing the small note about our i18n. I will try to check your library, thanks for sharing this. &amp;#x200B; My very politely explanation is below. But my main argument is - software that is not died during decades, wont die in next decades. I cannot tell this about all new software. &amp;#x200B; &amp;#x200B;
I personally haven't found any use for visual programming. Your available library of declarative abstractions would need to be *massive* in order to make it to where you won't have to patch the holes with imperative code. I'm not going to deter you, though. It could be the next step if you implement it correctly.
I'm a bit surprised, I suggested 20ms because it's very close to 16ms which equals 60fps, which is the gold standard for game frame rate and also the most common monitor refresh rate. In fact, let's imagine I said 16ms at the outset. So I'd guess that there's a different problem here. Some things I'd guess without having access to your code: * You're doing more than 16ms worth of work in each frame - in other words, the structure of your program is right, but it's not performant enough. * There's some performance implications with how you interact with the canvas. Check out [this page](https://www.html5rocks.com/en/tutorials/canvas/performance/) for some canvas performance tips. * Your game loop/heartbeat isn't structured optimally. * I should have mentioned this at the start - you want to use `requestAnimationFrame` to fire your game loop, instead of `setInterval`, `setTimeout`, or (God forbid) `while (nextTick &lt; Date.now()) {}`. `requestAnimationFrame` is a browser API designed for use with graphics that targets calling the callback at 60FPS (every 16ms). Since it's implemented natively it does a better job of interleaving your heartbeat with all of the various other async event-driven code in your program. * You want to do the bare minimum in your heartbeat: draw the next frame, and nothing more. Everything else - handling local input, sending data to the socket, handling incoming socket messages, etc. - should be done outside the heartbeat. These events will modify the program state as necessary; at each heartbeat, read the local state and render the changes. Drawing to the canvas is already slow enough; tossing i.e. networking code into your game loop will kill your FPS. * Other parts of your code have performance flaws. * Make sure to throttle any event handlers on events that can fire frequently, specifically `touchMove`, `scroll`, things like that. * Use the browser's profiling tools and the Performance API to profile your code and find trouble spots. Throttle functions that are called more often than necessary; make long-running functions in your game loop asynchronous; throttle, optimize, or break up other long-running functions. Hope this helps!
Where is the `params` variable coming from? I only see `data` getting passed in. Also, it you're returning in the if statement, you don't really need to wrap the rest of the block in the else. It won't be reached if you return early. Admittedly, Thats mostly a stylistic preference some have.
I also started playing with some of the programs by NI and for labworks, working in different APIs is fun and simple but still am kind of new to it and haven't explored much since apparently I went over learning and playing around more with text-based codes. Started leaning languages like JS, Pyhon, Go, and somehow I'm kind of addicted to earn more skills on those. Now it seems interesting enough to play more with the NI programs and programming interfaces.
No, no, don't do it like that. Treat "everyone else" as one user. From the local user's perspective, there are only two users: themselves, and the server ("everyone else").
Thank you and yup, I know. I don't care much for the reddit wisdom of the masses, I've learned with time it means rarely anything relevant. I just write for the passerby who might find what I say interesting.
I second this. I'd do a beginner JavaScript course first and then do this course to understand the "weird parts"
GTK, thanks!
If it doesn't do structural sharing then it is like a whole different library from a performance perspective. At least on the platforms where I would have to deploy it :/ I wish I could use proxies, they are very cool.
It's a shame that is still a thing... it exists since years and no "no script" is blocking this... 
Thank you
Much better! Nice :D 
See this now [https://github.com/StephenGrider/AlgoCasts/issues/33](https://github.com/StephenGrider/AlgoCasts/issues/33) Thank you for making my 2 month hard work scrutinised by all of public without any reason! I wrote all that code on top of stephen boilerplate myself, see readme of my project!
We do talk about it in a few places in the docs, but yeah, we can try to highlight it more in the upcoming docs revamp.
Not entirely. Proper ummutable updates require _nested shallow copies_, not "deep" copies. If you make a deep copy, you're actually creating new references for a bunch of objects that haven't actually changed their values. Not only is that extra work, but in the case of Redux, you'll cause all your other components to re-render even though their data should still be the same. "Shallow" copies involves copying over all keys and values from the original object, then overwriting the values you want to update. Based on what I've read, the potential benefits from persistent immutable libraries primarily comes from less work needed if you're updating very large objects, as they don't have to copy all the keys over. From what I've seen, most of the time that isn't actually any faster than a shallow clone of a plain object.
I think you're still trying to solve your problem the wrong way. I don't think you should be using long-running paths at all, that definitely won't work if you're trying to draw from multiple people at once. Furthermore, a canvas only has exactly one 2d context, it wouldn't make sense for there to be more than one - if that's the only way you want to solve this problem, then you are looking at having multiple and separate canvases, which sounds like it defeats the purpose of drawing a single image over multiple websocket connections.
I think I understand what you want now, although I think your difficulty in explaining it is part of the problem. Here's my modest proposal: * turn the numbers into strings * split them on the decimal point * treat them as two distinct things they will no longer be single strings, they'll be in different HTML elements, but that's a pretty good way to make it work.
Ah, you're right. I was just looking at what could've happened on June 3. It does look like npm had a download count issue during those days. https://twitter.com/npmstatus/status/1003690434760093696 https://status.npmjs.org/incidents/b4ktc38pypd1
Yes I know, I know the docs and redux really well. But the power of redux is not normalizing a state, but describing a state with an immutable structure powered by functions. Hence I think sub reducers should be promoted more. There are some data structure that can't be normalized and need to be described in a deeper way; people move to other data structure because they think that the only weapon in the armament is a flat structure, but I think sub reducers are more powerful. I've come across lot of people that didn't know they could create sub reducers... 
Did you read the readme? Both you assumptions are incorrect. Immer does not require Proxies, and it does structural sharing, even without proxies. It can be used without problem on any ES5 environment
Ah, I concede that I probably should not have said ‚Äúfull copies‚Äù in regard to Object.assign. I however did not intend to mean ‚Äúdeep copies.‚Äù It will make a full copy of the object‚Äîit‚Äôs just that the copy is a copy with its references, not its children. But this is a technicality, and probably not a clear way to say it. And yes, the key thing is scale; persistent structures will usually update in O(log n) instead of O(n) or worse. A small application may not need this, but a programming language built on immutability like Haskell or Clojure will need to support applications that do. Where your app lives on that spectrum is up for you to decide. A final note is that I think people often overlook just how much faster O(log n) vs O(n) can be. Let‚Äôs take just 400 item array. That‚Äôs maybe big, but it‚Äôs very far from huge. A O(n) copy would require 400x operations, but a O(log2 n) would require just 9y. This could represent a 44x speed up! That‚Äôs the kind of gains you would expect from GPU acceleration from a parallel friendly algorithm, but you got them for free! It‚Äôs a contrived example, and one should always benchmark, but speed gains from selecting the right algorithm and data structures kick in faster than people often realize.
Funny they didn't backfill the counts. I wonder if downloads didn't get logged at all in any system, that would be terrible.
Yes, text-based image editors are much more productive. Or MOBAs. Or browsers. Or spreadsheets. Can't we just accept some things are easier to do with a mouse, and that some people are trying to make programming friendlier and wish them luck instead of shitting all over their work?
Okay everyone, here's my proposal for a new learning resource for those new to JavaScript: [https://javascriptpractice.com/](https://javascriptpractice.com/) I would love any feedback! Thanks again.
Someone made a library trying to solve this problem like 3 years ago. https://github.com/danielstjules/blankshield The fact this has been around for years and Edge hasn't addressed this exploit is just sad. 
Lol did you use one of those generators that create hipster buzzword sounding titles? Hey, check out my Anonymous, peer-to-peer backed, industry disrupting, decentralized, cryptographic, forked-hash algorithm -based, smart tokenized fart machine!
Let's say you have a text field and a submit button. Here's what would happen: 1. A user would enter a number into the field and the click the button. 2. The button would emit a 'click' event, which you would prepare fore beforehand by adding an event listener. 3. Once the listener captures the event, it would then do what you told it to do in order to handle it. 4. Normally you would have told it to send a `fetch()` request to some sort of API (a server) with some data, which in this case would be the number the user entered. 5. The server would receive this request, do something (let's say multiply the number by 10,) and then send back a response with the result. 6. You would receive the response, extract from it the necessary information and display it on the screen. Probably by editing some element of the DOM.
Yeah, the `target=blank` issue is definitely known. It lowering the performance of the original tab is news to me.
I've tried Luna for a couple of days. It heavily consumed the CPU and was pretty laggy. The documentation said I can go from visual interface to code interface, but it's a one way ticket. It would be nice if I can switch freely. I would love to try it. I can even try it and give you feedback before it's officially released, but I shall inform you that I'm very busy, so it will be whenever I can, not on regular basis 
What would a listener be? And if you can, please show me an example of how this would work. I think I somewhat know of what you're saying, but not too sure. 
Give me 10 minutes, I'll write this and post it for you.
Are you trying to get this to happen on click events?
I tried this with both JSFiddle and CodePen, but neither wants to play nice with http requests. So here's the whole thing. Just save it as an HTML file and it should work locally on your computer: &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;For HellD&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;main&gt; Enter an integer: &lt;input type="number"&gt;&lt;input value="multiply by 10" type="button"&gt; &lt;p&gt;&lt;/p&gt; &lt;/main&gt; &lt;script&gt; (() =&gt; { const callAPI = async (num) =&gt; { try { const response = await fetch(`http://api.mathjs.org/v4/?expr=${num}*10`); if (response.ok) { const result = await response.json(); userInput.value = result; } } catch (err) { alert(err); } return null; }; const userInput = document.querySelector('input[type=number]'); const submit = document.querySelector('input[type=button]'); submit.addEventListener('click', () =&gt; { const number = parseInt(userInput.value); if (!number &amp;&amp; number !== 0) { alert('Please enter a valid integer!'); return null; } callAPI(number); }, false); })(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Thanks! Will get back to you if I have any questions.
_blank also presents problems for content rendered in web views. While the default settings for a web view in iOS or Android will behave as you‚Äôd expect for _parent or _top, _blank doesn‚Äôt behave in a predictable manner unless the app developer specifically handles that use case. For the most part this doesn‚Äôt affect most web developers but if you‚Äôre working with a hybrid app, or ever worked in online advertising, _blank can be a real pain. 
What are you supposed to open links in?
Assuming we are talking about Cordova, "_system"
&gt; What is the inversion of control? &gt;I think it‚Äôs hard to define IOC in a concise way that makes sense. I‚Äôm not even going to try To readers, people who can't explain shit in a simple way means they don't fully understand it themselves, thus they're not in position to teach you anything about the subject.
Did you ever learn coding ? Because that's how you learn, recoding stuff. 
Seriously. That guy can‚Äôt even Wikipedia. &gt; In software engineering, inversion of control (IoC) is a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework. A software architecture with this design inverts control as compared to traditional procedural programming: in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code. Remove the cruft that your audience should already know, and you end up with; &gt; A design pattern in which the framework calls into task-specific code, inverting the classical control of your code. And maybe going a bit more specific; &gt; Instead of having a function or class control the execution of sub tasks, you give control to the code calling you. Then you spend the rest of your article explaining why your architecture and design is useful for IOC. And mayhe bring a few contrasting design and compare the pros and cons. 
Patching a prototype kills performance in most javascript engines, as well as unmanageable incompatibility with many frameworks. Definitely a deal breaker. No advantages whatsoever to just using functions and composition. 
There is some npm packages that do why you want, like this one: https://github.com/xkeshi/image-compressor
&gt; I‚Äôm not even going to try, at least not yet. The actual quote. I think you're attacking the article for something it doesn't actually do or say. He does explain what it is and does it concisely. But first he explains the concepts and what it looks like.
I bought your book :)
Oh sir, you wound me truly. Alas, I have, in fact, coded my own CMS's a few times, but have had the sense to not suffer those systems unto others. _Ad hominem_ attack aside... My point has nothing to do with the OP learning to code or not. It's, instead, entirely about them inflicting that activity, and the outcome of it, on their coworker. The OP straight-up said that a well supported, highly praised, effective piece of existing software already exists to do *exactly* what their coworker wanted, but instead pushes them towards a strung together, half-baked, NIH piece of side-project itch-scratch-ware which **will** be lacking features and has exactly _one person_ capable of supporting it. I have no problem with people wanting to scratch **their own** itch, as it is a good way to learn. Inflicting that, however, on someone else is truly poor form. Want to remake a static CMS for yourself? Go for it. Was the OP's coworker trying to _learn_ about making a CMS? Cool, this would be a good endeavor for the two of them. Might even make a good technical blog introducing people to the rough idea of how static site gen works. But, if the coworker just want get their actual work done? Use something that already exists, does the job perfectly fine, and will serve them better in the long run. --- &gt; If everyone stops learning how we make X functionality because there are X software out there doing that, it will lead to a monopoly and even a global loss of competency. Trust me, we've got [enough fucking static site generator tools](https://www.staticgen.com/)
Hi Poltras, I wanted to make this article like a story and unveil everything at the end. I was a bit afraid that people won't have the patience to read everything and I a thinking of adding a formal definition. Thank you for the comment even if it's harsh. I think it's one which can improve my work.
Conceited arrogant condescendent. Pick one. &gt; This concludes the tutorial and my colleague is extremely satisfied with her current solution as it is ultra flexible and allows her to customize it to her liking. She is looking into creating custom paths for blog posts at the moment :) Seems like noone was "inflicted" anything.
I made a Physically Based Renderer viewer... https://codepen.io/SarahC/pen/aajQER?editors=1010 it's for single texture models you might find in games...
&gt; like a story Clickbait you mean, be direct, if i wanted to read i story I'll open up a harry potter book
I'd never heard of `IoC` before now, but from what I can gather it's kind of like this. The "regular" way of coding, the `non-ioc` if you will, is what we usually call a **library**. While the `IoC` way, is what we usually refer to as a **framework**. Example of a library would be `lodash`. While an example of a framework would be `express`. The library is a pice of code that you may call from within your executing code. A framework is a pice of code that while executing will call your code.
Thank you for the comment i\_spot :) Even if it's harsh, I believe it adds value! I have updated the article and quoted Robert C. Martin on what this design principle means.
well this reads way better, more professional, and less clickbaity
I've been using UE4 Blueprints a lot and it's good - really good, actually, when you get used to it. I like it to the point where I would rather do stuff in BP than, say, code stuff in Unity C#. Syntax errors are eliminated, refactoring is easy, flow and logic errors are visualised, strong typing is less intrusive, and so on. It isn't perfect, it does have it's quirks, in part because it's tired closely to the game engine and how that does things, but it's very nearly there and I'd love to see something like this for JS. One thing I'll say is that BP works because of the tooling, not just because of the node layout. It would be a lot more painful without contextual search when you drag pins or without breakpoints. 
Actually the picture indicates the normal workflow, when following the ‚Äúdon‚Äôt touch anything‚Äù maintenance strategy.
Just glanced at this and don't really like the format and the content is out of date (`var` is not correct any more).
You created a class which extends Promise, so the instance of the class will always be equal to the class, and the .then function always returns the original Promise (the P2 class). If you were to invoke your class as a resolved promise (using either Promise.resolve or new Promise((resolve, reject) =&gt; {}) then the .then function would not result in a instanceof P2. class A1{} const test = () =&gt; Promise.resolve(new A1()); var result = test().then(() =&gt; true); console.log(result instanceof A1); // false console.log(result === true); // true
Wasn't there a Target=_nee that fixed this?
"You're an engineer Harry!" 
You can thank Bluebird for this. I was on TC39 when we created the promise spec and we probably wouldn't have even thought about it if there wasn't a very popular library already in use that we wanted to preserve compatibility with.
In this scenario since you're extending `Promise` you can invoke `.resolve` from the new class and you'll always get instances of the new class.
You might also be pleased knowing that extending Array will also make its array functions return arrays with your Array type.
We're also humans though, and we don't have a magic radar telling us what we want to read - stories still need to draw us in. There's a difference between withholding information because the actual story just isn't interesting, and gradually introducing a subject. I think it would be nice to assume good intentions and be friendly towards someone who spent time trying to share their knowledge, even if they did not do so exactly in the way you'd have.
Ah, no wonder I suck. Always screwing with...everything.
Not really.
I like it \^\^
Your solution is to not use height and width dimensions to detect desktop and mobile. You‚Äôre doing an OR nonetheless which means if either the height OR the width is greater than the values you‚Äôve set your mobile site thinks you‚Äôre on desktop. iPhone X has a taller screen which is probably exceeding the height requirement and causing a false positive. You can easily verify by replacing the redirect with a console.log to see which dimension is matching. Either way you should replace your mobile script to detect desktop with something less fickle than a window size check. 
Some help: - /r/LearnJavascript /r/HomeworkHrlp /r/LearnProgramming - Don't _ever_ ask for help saying "it isn't working". Instead learn to describe: a. what you wanted for it to happen, b. what is happening instead, c. when and how to reproduce the error/problem - Avoid _spamming_ with multiple submissions. If you have multiple problems, what you need is a more general learning resource, not for someone to solve every little thing you need to do.
You should check for the os and/or platform (in this case IOS) instead of the resolution. Check the window.navigator.useragent and window.navigator.platform objects. Good luck! 
Some of the criticism you're getting is valid. But yes, it's also harsh, so kudos to you for responding constructively to criticism! 
&gt; and the .then function always returns the original Promise (the P2 class) This is not correct, or at least it's not correctly expressed. `then` always return a **new** promise, _not the original one_. class ExtendedPromise extends Promise {} let p = new ExtendedPromise(done =&gt; done(1)); console.log(p instanceof ExtendedPromise); // true [1] let p2 = p.then(() =&gt; 2); console.log(p2 instanceof ExtendedPromise); // true [2] console.log( p2 === p ); // false [3] `[1]` is obvious and only for setting up the scenario. `[3]` is to show that your comment is not correct or at least not correctly expressed. Again, `then` returns _a new promise_ not "the original one". Point `[2]` is what OP found surprising; that even though `p2` is a _different_ promise, it is not created from the generic `Promise` but from `ExtendedPromise`. And while I may understand the surprise to some extent, if you think about it for a moment, it should be sort of obvious: If it wasn't done that way, it would hardly make sense to extend `Promise`; it would be quite useless.
Try reading up on jQuery selectors. For example, I don't think `$("calculate")` is giving you what you think it is. (Hint: you have a DOM node with an _id_ of "calculate", and jQuery selectors use `#` to refer to an id.)
Does this kind of extending core functionality bloat the stack?
no, it's just using loose coupling between modules, instead of depending on modules directly, same thing as dependency inversion
Then care to explain? 
I can't see these on mobile? It's fine if stuff doesn't work on mobile, just let me view the content, don't block it with an error page.
Looks really cool! I just had a few notes which I thought might help improving it... if you are unsure about any off them I don't mind putting them into a pr for you / answering further questions. - I wouldn't do versioning via the folder structure 'version-1.0/' instead you might find it easier to use something like [version tags / releases through Github](https://help.github.com/articles/creating-releases/). - You're way of dealing with errors seems to be to return a magic string such as ["changeError"](https://github.com/mukherjeesrijan2/HTML-Meter/blob/bdea5320e9a03656d9c6754437c14622ea723b6e/library/version%201.0/pbl-1.0.0.js#L117), a better way might be to use [javascripts built in error throw/handling](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling) - Generally it's not advisable to add elements to the DOM using a pure += innerHTML to body as it can cause the whole body to have to be recalculated/repainted. A better way is to create the html elements using the [DOM api](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement) and then [append them to the body](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild). - It might be worth trying to use less generic sounding class names. '.progress' so it might cause a conflict if I use them as well. It might be worth calling the class something with a placeholder in front such as .pbl_progress etc. I can see lots of work went into this and I hope you realise that these are just general perfecting points but it seems like a very cool project! 
https://martinfowler.com/articles/injection.html#InversionOfControl and this page in general are good learning material for all the silly enterprise JARGON.
This _is_ pretty sweet!
So `Promise.then` effectively returns something like `new this.prototype()` rather than `new Promise()` (pretty sure that's not valid JS but you get the point).
Extending an API class is usually fine, though you should have a good reason for it because it will likely be surprising to readers. *Modifying* an API object ("monkey-patching") is usually awful, except in tests where it can be quite useful to stub API methods so you can verify they are called as expected. Just put it back to normal when you're done so you don't break other tests.
Since ES6 this is actually configurable! See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species Each class can specify a "species", a static property that specifies the constructor to use for derived instances. So any method that wants to construct a new instance of itself will be expected to be implemented like: foo() { // Instead of hardcoding `new Foo()`, use the species: return new this.constructor[Symbol.species](); } This allows you to override the species in your subclass. For example, if you want your Promise subclass to just use Promise rather than your subclass, you can use: class Promise2 { static get [Symbol.species]() { return Promise; } } Several built in classes like Promise, Array, etc. respect the species property.
This one must be used with node, it will nit work in the browser unfortunately... 
 this.draw = function(){ c.fillStyle="black"; c.fillRect(0,0,canvas.width, canvas.height); c.fillStyle="lime"; c.fillRect(this.x, this.y, 50,50); } The problem is that those first two lines paint a black box over the entire canvas. Each time you're drawing a box, you're painting over everything before it and then drawing the lime square on top of that. So, yes, you're painting multiple boxes. The 10th box paints over the previous 9. &amp;#x200B; You'll want to change your code up such that you have each frame start with clearing the canvas and then repainting the new position of all the boxes on top of that. (Hopefully that gave you enough of a clue as to where to put those two lines that paint the black background!)
Also these behaviors can be controlled through the species accessor property.
The question is genuine and out of ignorance of low level side-effects of certain JavaScript logic. I think people may have thought I was dissing but that's not the case. To ask it in a better way, does this make a copy of the Promise logic in the stack? It's also a concern when working with babel and backwards compatibility. I don't want 2 promise polyfills.
Express is a node.js backend/server side run time environment that lets you use js on the back end. You can handle response/request cycle. Routing. React is a front end based component UI kinda. And it runs on node/express. And yes you install express via npm because its a package.
Which are recommendet hosting services for production enviorment?
What is the alternative for var?
 this.draw = function(){ c.fillStyle="black"; c.fillRect(0,0,canvas.width, canvas.height); c.fillStyle="lime"; c.fillRect(this.x, this.y, 50,50); } You're blanking the entire canvas every time you call draw(). So only the last rectangle (rectList[9]) is being drawn, all the others are 'erased' when the canvas is blacked out.
`const` and `let`
Hireoku and aws. Im still learning about node myself so yeah
I understand about the question. That's why I mentioned that you were being downvoted too quickly :) Anyway, to answer your question... No, extending an object, even if it is a built-in one, will _not_ need to duplicate or copy the whole thing being extended. The `ExtendedPromise` (or `P2` in OP's example) will just contain whatever specific logic you add to it and then, through the prototype chain, _delegate_ to the original `Promise` for the base functionality it provides. This is how extending works, in general, in all (I'm going to say "most" just in case) languages. And the fact that it's a built-in object does not change this. To do it as you imagined would certainly be a waste, but it's also not needed.
Thank you! Fixed it by creating a own function for the background, and calling it in tick(). ;)
Yup, this is also available in Hugo but maybe it should have been explicit in the article that my colleague was very much excited to learn how to build / maintain her own static site generator.
Are sourcemaps enabled in devtools settings? 
lol jquery
fascinating. thanks!
Thank you for this answer. Yes I am a lot confused and curios what I can realize with JS. I will try to follow some step by step courses. I think I must stop to compare with PHP or Python, its a own world with JS
First of all, in simple words, we can say that Node.js is like a compiler of Javascript code, outside of a browser (obviously it can do many more things). React and Express are framework/libraries to work with. &amp;#x200B; &gt; On most of the servers I can deploy my PHP code and the project is running out of the box. Can I copy/transfer via FTP my JS code into an server with node,express and react support and it run out of the box? For the most simple deploy, you'll need the code of your project and have node.js (with npm) installed in the server. Then you can put your code into the server, run npm to download all the dependencies (similar to maven) and execute your project. You'll need a way to deploy your app (Express can help you with that for the learning purposes) &amp;#x200B; More elaborated, and business focused projects will include many more things, like a way to bundle your code, minify it (so your code is lighter when sending it to the browser), pre-processing and transpiling process, etc... &amp;#x200B; **Simple words**, you can deploy simple things really fast with some libraries, complicated things will require more time. &amp;#x200B; &gt; If the server has node does it mean I can install packages with npm like express? You must install NPM first with node, and you're ready to go. &amp;#x200B; &gt; On my local machine I run the express webserver. Do I need this also on production enviorment or has the servers a system like apache to serve the requests? Depends on how you want to handle requests. Read the pros and cons of each system for handling requests and pick the one that fits your needs. &amp;#x200B; &gt; If I build the backend with express, which frontend engine should I use? I want to use also a template engine like twig * First, Express is just a framework, you can use the backend (or server-side) framework that you want. Express is really popular and easy to use. * Second, I don't know how things are made in PHP, but for the front-end you can pick any front-end framework that you want. React is good, but for beginners like you I'd go for **VueJS**, which is more lightweight, and easier to use. Stay away from Angular for now, because it is really complex and hard to master, but once you master it, you can do whatever you want. &gt; Do you recommend that I use express or react in my projects? Whats your initial expirience? Express is for the back-end, and I recommend it. It is really easy to use and very powerful too. For the front-end, React is more complex, and if you don't know much about Javascript, it will be a headache to understand at first. Do some simple websites with vanilla JS first (just for the learning purposes), then move to VueJS, which I found really easy to use and the pages it creates are really good looking. &amp;#x200B; I highly recommend you this web development course (I've already completed): [https://www.udemy.com/the-web-developer-bootcamp/](https://www.udemy.com/the-web-developer-bootcamp/) He explains how to do the most basic things (you can skip those), then slowly going into Javascript, NodeJS, backend and front-end development, then how to deploy your app, etc. &amp;#x200B;
Ok, I think I understand it a bit more and make a conclusion. Node = a runtime enviorment to execute server side javascript Express = framework to run routing and database handling Npm = package manager for node like composer in pho Deployment = I need ssh access and node support and install needed npm packages Frontend = Vue is easier as React so I start with Vue Is this correct?
We all need to stop promoting jQuery. We all need to stop using jQuery. It was a marvelous library 20 years ago. It's useless now. Let us please bury it.
No, about the same amount of memory should be used. It's not like it builds 2 Promises instead of 1.
Why not [.serializeArray()](https://api.jquery.com/serializeArray/) ?
Ok thanks
No, it's a different instance of the class. The class (or rather, prototype) itself is the same, but chaining a promise will always result in a new, different promise instance being returned. The actual mechanism for this is the species symbol described elsewhere, but it's really important to be very clear on this. Chaining promises will always return in an entirely new instance of a promise. The only relationship the new promise will have to the old promise is that the new promise will only begin to resolve after the old promise has finished resolving.
Yes it‚Äôs enabled by default.
egghead.io and frontendmasters.com have good video courses.
You should also consider a min value
Just one gotcha, if you're compiling down to ES5 you have to make sure your compiler will handle extending built-ins like this. I think Babel will but Typescript won't. Not sure about Buble.
Oh wow. I could have used this a number of times actually. 
.serializeArray() only submit action. My library, submit, input, click and more any actions of form. 
Your source files should be in that webpack folder. If you manually open the compiled source, you'll still see that. If you set a breakpoint, it should open in the source file. 
&gt;var should never be used anymore uhh. Are you sure dude. What if you want to change the value of the variable. &amp;#x200B;
`let`
Google.com
It has to do with how a "persistent immutable structure" keeps track of all the values internally. Here's a decent article explaining things: [Immutable.js, persistent data structures, and structural sharing](https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2).
when? i have really never needed to extend any vanilla js types, but maybe im basic
I‚Äôll try that. But why is the folder a webpack folder? This isn‚Äôt using webpack-dev-server this is the actual production app that has been deployed. How does it know anything about webpack at that point?
Thank u I'll check it out. 
Is learning from books a gud way? I mean I found some really gud rated books on Amazon for Javascript
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/
Nah, not worth buying. But I learned all from YouTube. If you want to spend money. Buy some courses online. Video is usually a lot better than books
You might want to use a HTML `form` tag (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) with `action` and `method` attributs and also an `input type="submit"`, because it is a damned right way to do it.
I totally agree! Thanks mate . 
What?! Don't be ridiculous! Of course it adds value to NPM. It's you at your 25yo are dumber than a brick it you think otherwise. 
A couple Chrome extensions I created abuse mutation observers liberally. One, [a generic text replacement extension](https://github.com/joshuaptfan/1337ify/blob/3ab7fa5ff80e47a0a37d65b7a2f1f476045a618c/chromium/content.js#L12), replaces the entire page's text when it loads. For it to work on dynamic pages, a mutation observer feeds added DOM nodes into the text replacer as they are created. Another one, which [scans pages for secret messages](https://github.com/dblspk/extension/blob/d8f5f34b1bd63914c777cf524d5f41bfb0271655/chromium/content.js#L12), feeds the entire DOM into the scanner on change (rate limited). The difference is here that I care about scanning the DOM in order, so I can't feed only added nodes.
The closest you can get to is the print preview but outright printing is just not possible due to browser and OS based security restrictions. Unless you‚Äôre developing for a intranet and can control the local environment.
\`Symbol(x) != Symbol(x)\` It always returns a new unique symbol. If you want to retrieve globally stored singleton symbol use \`Simbol.for(x)\`
Are there other languages where derived classes inherit their superclass's constructor signature?
You can't beat https://exercism.io/ for coding exercise. They have a great community that perform peer reviews on your exercises, and even mentors to help you work through problems.
Actually is looks like works for strings only. Objects getting casted to strings and always equal between each other. So no free hashing.
So even though you cast an object to a string and then use a symbol, i.e. \`\`\`Symbol(JSON.stringify(myObj))\`\`\` it will equal another object?
Hi /u/GladiatorialPig, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/UnifiedOblivion, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Glad to see your excitement. I want this library to be accessible to as many people as possible, so I tried my best to document as much as I could, as clearly as I could.
Subscribed.. Thank u
Another interesting thing to note, JS' native Map API works with non-string keys: ``` const newMap = new Map(); newMap.set('x', 1) newMap.set('y', 2) const myObj1 = { test: 1, } const myObj2 = { test: 2, } newMap.set(myObj1, myObj1) newMap.set(myObj2, myObj2) console.log(newMap.get(myObj1)); // returns {test: 1} console.log(newMap.get(myObj2)); // returns {test: 2} ```
Yes, this is their intended use-case ‚Äî true mapping.
I don‚Äôt see any code in this library to detect whether a brace or a bracket is part of a string value or part of the JSON structure. I wonder if the ‚Äú3x faster than JQ‚Äù statement comes from having tested this in extremely simple cases where the performance gain wouldn‚Äôt justify the reliance on a fragile library that would crash or yield incorrect results on many simple non-trivial cases. 
That's not possible. If it was, I invite you to www.willTotallyNotPrint1000PagesWhenYouVisit.com
I‚Äôm developing cross platform point of sale systems and the only way to achieve this was to use native application, electron or node WebKit, which in some versions have the option of kiosk mode which prints to the default printer.
Elasticsearch might be the closest, but afaik you‚Äôre gonna do a lot of work to get real-time updates like RethinkDB. I‚Äôm not aware of anything 1:1 feature-wise with RethinkDB that is open source. Why not Firebase though? The free tier is great and Google is known for working with startups on cost savings if it takes off. 
I mean their website contains some pretty useful information. Otherwise you can take a look at egghead or Udemy 
If it's real-time data you want and you're open to hosting the server yourself, have you considered FeathersJS? 
Look at these solution [https://stackoverflow.com/questions/19656372/select-a-printer-and-silently-print%3E](https://stackoverflow.com/questions/19656372/select-a-printer-and-silently-print%3E) &amp;#x200B;
Sounds like something like Varnish would have been a better solution. Depending on the hashing algorithm of course. But it would be more scalable and also reduce the load on app and database server. Also optimizing your data model and perhaps even creating a optimized flattened ‚Äúdocument‚Äù in Mongo would be things to consider. I miss a bit of detail on what Mongo analysis he did. Caching is an easy solution but it comes at a price of added complexity.
Fair. I wasn‚Äôt trying to be argumentative, but I can see it came across like that üòû While it greatly depends upon what features he is using in RethinkDB, it may be his only real alternative. Given that, I was only attempting to encourage him to challenge his constraints. Regardless, sorry üòê 
It's okay üòÖ I just sort of have a sore spot when it comes to asking for open source stuff but getting closed source answers instead For real time syncing, there is also FeathersJS! 
Wanted to ask the same - what's the difference?
That's a bad example though. :) Of course `$array` is an instance of `FixedArray`, you just constructed it! But more to your point in PHP it's pretty standard to use `new self()` in methods to construct a new instance of the current class. Which is similar to doing `new this.constructor()` in JS.
Worst meterial I've seen in a while. Is this a pre spacejam website?
You use `let` then, `var` is function scoped which can lead to some weird bugs since it's unintuitive, `const` and `let` are block scoped which makes far more sense. Say you have a for-loop: ```JavaScript,tabs=4 for(var i = 0; i !=10; i++) { // Do something } ``` That `var i` is accessible inside the for loop as you'd expect, but it's also accessible outside of the for-loop which you wouldn't expect ```JavaScript,tabs=4 for(let i = 0; i !=10; i++) { // Do something } ``` By declaring it as `let i` it's now only available inside the for-loop which makes much more sense
&gt; Kind of like promises that span multiple ajax calls. With this, you could wait until three or a dozen ajax calls have done their work You should look into [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)! You already can do const ajaxOne = fetch('http://one.com') const ajaxTwo = fetch('http://two.com') const ajaxThree = fetch('http://three.com') Promise.all([ajaxOne, ajaxTwo, ajaxThree]) .then(results =&gt; { console.log('All three Ajax calls completed!') })
promises are too complicated for me.. i
&gt; That's a bad example though i'm in r/javascript after all 
Well, yeah? But that defeats the point. This thread is about having methods of a superclass be implemented in such a way that it creates instances of the current (sub)class. Hardcoding the class name in the superclass means that it this will not work. Using `self` means that it will the constructor of the current subclass.
&gt;Of course `$array` is an instance of `FixedArray`, you just constructed it! The point is that he constructed it using a parameter that he didn't declare on `FixedArray`'s constructor.
Perhaps I misunderstood your question then. I thought you were talking about the kind of behavior discussed in this thread (where methods of a superclass construct classes using the current instance's constructor). Subclasses inheriting their parent's constructor method if you don't override them is rather standard, I don't know of any OOP languages where this isn't the case. See "implicit default constructor" in languages like Java, C++, etc.
Image Magic I think does the server side in a lot of cases https://www.imagemagick.org 
&gt; is `this` an object in js ? `this` is an object, yes. It refers to the instance of the class that the method was called on. Same thing as `$this` in PHP since you're familiar with that. &gt; calling `this.constructor()` which is a method i suppose, should return an object, so why do you have to put `new` before it ? `this.constructor` is not a method of the current class. The `constructor` property on an instance of a class refers to the constructor function that was used to create that instance. For example: class Foo {} const foo = new Foo(); foo.constructor === Foo; // true
i guess the answer is FeathersJs 
Yep, I've got the server-side down as a coder, but not a front-end developer! Turns out 12 small boxes and one big box is fairly difficult to code in javascript
hmm , looking good , do you mean MongoDB Change Stream feature?
postgreSQL
hmm, the `()` confused me, so its the same as this in php : ```php &lt;?php class Example { public static $constructor = self::class; } $class = new Example::$constructor; $class = new Example::$constructor(); ``` expect php doesn't have the 'constructor' property
What kind of things are you interested in learning? 
Good point, you're right! It's been too long since I wrote Java/C++, clearly. Most dynamically typed OOP languages (that I'm familiar with anyway) will just use the super class's constructor, since there's no issue of method overloading or anything.
Then I would recommend [Writing your own Express.js](https://thecodebarbarian.com/write-your-own-express-from-scratch), atleast as a starting point. 
It's unfortunate that people are downvoting you with no explanation. Attempting to restate concepts in your own words (and using analogy) is a great way to learn. Personally, I don't think you're terribly far off. People are probably downvoting you partly because of the "framework/library" distinction. From what I've seen, the JavaScript community doesn't really distinguish between those terms as you've done -- while "framework" often calls to mind larger-scale patterns for structuring applications (e.g. React, Vue, Redux), the term "library" can generically refer to almost any third-party package, including those libraries.[^1] With that out of the way, you're correct that using Lodash generally doesn't involve any IOC, whereas callback-driven APIs like Express do invert control. Another example of IOC is the [redux-thunk](https://github.com/reduxjs/redux-thunk) middleware: rather than calling `dispatch(myActionCreator())` directly, you write your action creator to accept the `dispatch` function as an argument, then call `dispatch()` _within_ the action creator whenever your async task finishes. Finally, don't worry too much about the distinction between "your code" vs. "the library's code." As the name suggests, IOC is about inverting "normal" control flow, but what's normal depends on the context. The Wikipedia article suggests that "normally" the programmer writes custom code to call a library function, so by that interpretation passing custom callbacks to Express is certainly IOC. However, in the case of redux-thunk, normally the Redux `dispatch` takes your custom action creator as an argument and invokes it. In order to invert control flow, your custom action creator takes (and invokes) the library's `dispatch` function instead. Hope that clears things up a bit. [1] It appears that distinguishing frameworks from libraries in terms of IOC has some roots in [Java circles](https://www.programcreek.com/2011/09/what-is-the-difference-between-a-java-library-and-a-framework/). I'd take this definition with a grain of salt, particularly when generalizing to other areas of software development. Java is rather notorious for taking simple/broad concepts and adding on a ton of language-specific connotations: for instance, if you search "dependency injection" you get tons of results for dependency injection _frameworks_, rather than a simple explanation of dependency injection in its simplest form.
Can I ask why you don't want to use RethinkDB? It is open source as well.
Angularjs v1.7 has already entered long term support this summer and will hit its end of life in 2021. It would have to be redone in less than 3 years. Seems like a no brainer to develop in the current version 6.x.x.
How do you mean code the 12 small boxes and one big one in JavaScript? Is that even a thing? It looks like basic 12-grid layout provides by any css framework (or can be done manually easily enough). Manipulating the elements and sending the edit requests to your back end is done in JavaScript which, if your elements are labeled correctly, should not care what format or order they‚Äôre displayed in when firing off the handlers. The layout is done in HTML/CSS no JS should be involved. 
\- multiple images can be uploaded at once and thumbs populate the appropriate boxes in sequence, be that from the first box onwards, or if there is already 3 images, from box 4 onwards. \- the images can be draggable to reorder them
For the first one, many solutions available for multi image upload. Once you get a response from the server you can populate starting at some index. Mark the first element by default and then as more images upload increase the index of the marked element by some sort of indexed attribute selector. You‚Äôll need to do that anyway to keep track of the add image button which also happens to be where you will always start adding images that finish uploading. Drag to reorder can be handled by jquery UI‚Äôs dragable and droppable. P.s. there may be some easier solutions out there as part of some fancy front-end framework that someone will tell you about. I tend to try to achieve everything I can with just HTML/CSS and jQuery which is probably too old school for the users of angular, react, vue etc so please keep that in mind if taking any of my advice :)
Regarding what?
Restraining yourself to open source is something which should always be encouraged.
Does the form have an action attribute set to "contact.php"? What happens if you submit the form without JavaScript enabled?
try coding it in jquery.... like I said, it really isn't easy!
Yep, the action goes to contact.php. And I just disabled JavaScript to test this, and it goes to the top of the browser without submitting the form.
On the line where you check if `$(".filter").val() !== ""` you also check if `$("#antiSpam") !== "4"` witch it never will be since it will be a jQuery object. Could be the issue?
Reading a library is a fantastic way to learn more and help the open source community! I'd suggest React Router for a good first library to read. At the core it's very simple. One of its creators, Ryan Florence has a good talk about it [here](https://www.youtube.com/watch?v=wPJxmZx62gI). Another good habit to get into is to debug via code reading. Basically, when you have an issue with a library, instead of opening a GitHub issue or a StackOverflow question, read the library code and fix the issue yourself. You'll get more satisfaction and learn the library a lot better that way.
Oh wow I can't believe I missed that! That's probably it. Thank you! Will update if it occurs again.
I precisely recommend vue framework. If your company wants migrate all of the projects to different stack, vue.js is better solution for you because it is so easy to learn even for backend developers. Besides, vue's community is very helpful and strong so your questions might be answered quickly.
Yep. Go with Vue or React. 
https://www.reddit.com/r/javascript/comments/9ftp88/function_for_fast_extraction_of_part_of_json
https://github.com/MattMcFarland/react-darkroom A pretty close (feature wise) implementation in React. Shouldn't be hard to wrap that, or fork it to get the same layout as the ebay one. 
Hi /u/creativebranding, this post has been removed for 2 reasons: 1. Per our [guidelines](https://www.reddit.com/r/javascript/wiki/index), shallow [listicles](https://en.wikipedia.org/wiki/Listicle) are prohibited. 2. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding. 
Just focusing on the date-related functionality - what made you decide to roll your own implementations instead of using already well-established and battle-tested date libraries?
Just because it's open source doesn't mean it's maintained or that it's going to be maintained. The latest release was on Jul 22, 2017. Not exactly a good choice right now. Their slack is dead as well. I don't know what they're planning to do since I couldn't find it when I was evaluating DB's. 
No. I wouldn‚Äôt code in AngularJS. Depending on the size and structure of the project I either would or wouldn‚Äôt go for angular 6.x. The diffence between angularjs and angular 2+ is night and day. So learning curve wise it shouldn‚Äôt matter. React and Vue have a little less steep learning curve and more freedom / flexibility. Which, depending on the strucure of your team / project can be both good and bad. I would recommend Angular for larger scale projects where structure is key (where everyone works in a similar way). Smaller scale projects or even multiple smaller apps that combine to a bigger one may be a lot easier with react or vue :)
+1 for FeathersJS. You can choose any backend and you don't have to use Mongo to get realtime support. You can hook up multiple servers with feathers-sync and get automatic replication of events. You do need to choose a replication backend however. Something like Redis is a good choice.
Assuming the package maintainers understand what open source is. #jamie
Lol and that is exactly why you‚Äôre asking for help on reddit and I‚Äôm working as an engineer for one the big three ;)
thanks. your post history is suitable to your comment
It depends by the kind of project, the resources that you have, the kind of needs that the projects will need on the long run. Yes, there's the personal factor about the libraries but also the fact that a framework/library should be chosen based on what you need. 
canvas image editors are fairly popular
They are
Straight CSS should handle it https://developer.mozilla.org/en-US/docs/Web/CSS/filter
Hey, RethinkDB new kind-of-product-owner here. Stay with us, we are nearing 2.4 release :)
Wait what? didnt you guys close shop?
It's old javascript 
Try Prisma, also open source: https://github.com/prisma/prisma
Learning. React has the benefit of learning react-native which means you can write code once and use it on web, mobile, and desktop.
Maybe you should think in a more framework agnostic aproach. Try using web components for presentational components and single-spa to routing between projects.
Angular keeps coming up as a recommendation from clients and colleagues. In my experience, however, I've found it to be one of the least approachable, and poorest development experiences of all the frameworks I've used. Once you get past the great hello world examples, its practical application becomes tricky, the documentation is inadequate, and debug and maintenance are more difficult than its competitors. For me and my team, React has been a stark contrast of joy and simplicity. The tools integration on the back end is also much tighter, and has proved to be more flexible. In short, most people I've discussed angular with who've had experience with other frameworks like react jump ship as soon as possible. That said, what your team has experience with should play as a big factor in your direction. 
The startup closed and now me and a evergrowing community of devs are working to release the next version!
Do not do angular 1. It's absolutely dead tech.
When learning a new language such as JavaScript, do you recommend going through this site?
I can't look at the code right now, but I'll give my two cents judging by the API. Shortcuts for getElementById and querySelector are only useful if they implement some kind of polyfill, otherwise they are just shortcuts and which don't serve much purpose for the general public. The date functions looks handy, but the API is weird and inconsistent. In my experience parsing strings can give you too much work and it's hard to teach others how it works. About extending native objects, don't do it. Just don't. 
I use angular 2 now for all my projects. 
Just a tidbit I learned myself recently; a steep learning curve means you pick it up faster (it takes less time/effort to go from 0 to 100% if the curve is steeper). But that‚Äôs an aside. I agree with your comment, though I‚Äôve done some pretty big projects with react-router-redux, and that seemed to work just fine. :)
You can make your point without being an insufferable twit
I hate it when people extends native JS objects. That's what the MooTools people did and 10 years later ES couldn't add `[].contains()` because of them... 
I think it‚Äôs worth mentioning that JavaScript and Node are two very different things.
This article is so long, I gave up reading it halfway through.
I don't understand the use case for load balancing within Node. Balancing within Node can make it easier for devs (whom have orchestration/DevOps difficulties) at the cost of scaling nuances, degraded efficiency, and making management more difficult for DevOps.
I tried to make it as concise as possible. I think that double rendering bug has been in the engine for about 3 months. Now that I removed it, all my other performance work has been twice as effective! I can render buttery smooth on the Oculus Go now.
Cool article, thanks for posting!
I've got links to a bunch of articles about how React works in the [React Implementation](https://github.com/markerikson/react-redux-links/blob/master/react-implementation.md) section of my [React/Redux links list](https://github.com/markerikson/react-redux-links). Plenty of material there that should explain things.
&gt; as a back-end developer...
We made the transition fully from AngularJS to React. 100% would recommend. Especially if you stick to pure React. Much easier to get started at least. Fully grasping the depth of any modern framework takes time though. So plan for that.
Yeah really was afraid so üòÖ
I really want to know what that editor theme is in the thumbnail haha
This advice is very interesting. Is there any specific reason for going Angular when it comes to large scale and structure? The thing that honestly kept me away from Angular so far is because of the huge backlash it got from it's own community when it upgraded from AngularJS to Angular. I personally do like both React and Vue but have build more with React (&amp; redux). This project however will be big and grow larger over time. 
I mean, AngularJS is not THAT bad, it solved a bunch of problems in the past. But if you can use Angular 2+ just go for it lol, there's a learning curve but it's worth it. Plus AngularJS is not maintained anymore (or is close to stop being).
I made an anime convention simulator: [https://codepen.io/GoodFreudian/full/ELPKOg](https://codepen.io/GoodFreudian/full/ELPKOg)
Wow thanks for your honesty üòÇ I haven't worked with Angular yet so this is definitely helpful. I'm very much used to the clear documentation of both Vue and React. After creating something small it was easy to start developing actual applications with it. In my opinion that is very important. I'll definitely check out to what extend this is the case. (also thanks for the tip about team experience almost forgot to take that into account as well) 
Not necessarily worried about it being 'bad'. The unmaintained part however does ring some alarms. Then again not sure how many new solutions get pushed into production for the first time on old tech. But good to know that you do like Angular 2+, any specific reason why? 
Cool, what multiplayer card game is it?
lol they just keep reinventing the wheel
they're easy, try using actual effort.
RethinkDB
For some reason I haven't even considered this. My mindset was more in an 'anything will age but what will last for about 5 years' zone. The only thing that plays a huge role right now is state management so for presentation it could actually be a solid solution. Thanks a ton. 
Another module in React to paging up and down a full screen. WIP of course. Started this weekend on it. &amp;#x200B; [https://www.npmjs.com/package/simply-paging](https://www.npmjs.com/package/simply-paging)
I‚Äôve made a project for a friend using hybrids for web-components with redux for state management, worked like a charm
Nice, definitely looking into this now :) 
aka the way OSS is SUPPOSED to be done, idk why 'well it doesn't have a company trying to monetize it' is somehow a bad thing for OP lol.
cannae support arraya
It is true, I develop a web analytics system with RethinkDB and the queries usually traverse something like 10 Million records
Dracula I think.
I have an application that in some cases must be installed on my client's already existing servers. Most of the time those servers are amazon AWS or Azure machine instances, but I can't assume the infrastructure I'll have at my disposal. Since in my case fast deployment and portability are more important than scalability, I do everything in node, including load balancing and even SSL/TLS, my app connects to Let's Encrypt and generates its own certificates on the first run. Sometimes you don't want a giant clustered multithreaded app spanning several machines. Sometimes all you need is something you can get running anywhere with a single command on a terminal.
Hi /u/captainbenis, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
&gt;About extending native objects, don't do it. Just don't. Yeah, I will never use a library that extends native objects. That is why the smoosh debacle was a thing. 
From a technical perspective you're correct, specifically in a more scientific context, but the informal use of the phrase is the polar opposite. /u/enplanedrole used it correctly, since it's part of the common vernacular for people to mean that something is difficult when saying it has a steep learning curve. or as he used it above... `less steep === less difficult`
AngularJS was great at the time it existed, but it's a bad option to pick nowadays. To their credit, they did fix some of the performance issues when they released 1.3 with one-time bindings, but it has some serious issues baked into it that will never be fixed and the syntax is messy. You might think, oh what about the new version of Angular. While it's more modern, it falls into the trap of complexity again. The syntax to define components is very verbose, you type a lot to do things in Angular and it's bloated and the performance sucks in comparison to React or Vue. I moved onto React like many did back when it debuted in 2014 and it was great, but it's not as fast and magical as people think, it requires a lot of hand holding and optimisation (especially preventing re-rendering of components), the React ecosystem is quite fragmented when it comes to packages. Vue is a more superior and easier to learn version of React, it has the same features, but it's less work to write performant apps with it. If you want a fully-featured framework that gives you everything you could possibly need out-of-the-box (routing, working with HTTP endpoints, dependency injection), you can't go wrong with Aurelia or Ember. If you want something lighter and happy to install additional packages for features like routing, working with HTTP endpoints and so on, I recommend Vue.
\`let\` should be \`const\` in most of these examples.
Thanks for forwarding that! I've been looking for a good unified theme for VSCode and IntelliJ
That‚Äôs interesting, but it prevents you from using IDs with dashes in the name, which is a bit more idiomatic in CSS. Also, if you‚Äôre concerned about the performance of `getElementById`, you should benchmark this, because Proxies are still pretty new and may not be as well-tuned. If you still want caching, a simple `$id(id)` function is almost as nice syntactically. 
My understanding is that monkey patching can easily trash performance. When you mutate class prototypes like that, you're ruining the optimizing compiler's day. Same with modifying an instance, but not as drastically. You're just breaking optimizations for your object as opposed to peeing in the sandbox.
are there real world performance boosts? serious question btw.
Yep I know ‚úåÔ∏è just heard this on the freakonomics podcast when they interviewed a guy that explained these misused phrases, has a whole book on it, but I forgot his name. üòÖ I just figured I‚Äôd share. 
I created (work in progress) the following [census.gorillastudios.co.ke](https://census.gorillastudios.co.ke), its based off Kenya's 2009 census data. The aim was mainly to put the knowledge from tutorials into practice without building a "hello world"-ish project, like a to-do app. &amp;#x200B; Have a look, I feel its pretty cool, just launched it over the weekend.
New Additions. Supports encoding circular references. This is done by applying the class 'ref' to an array, like typed array encoding. So a 'ref['company','employee',3]' would get the object referenced from the root of the current object. classes/tagged objects revived from the JSOX share the same prototype. 
Welcome to /r/javascript, where if your idea, article, or comment isn't perfect React code prepare to get downvote brigaded. 
It doesn‚Äôt really prevent it, but it becomes less syntactically convenient: `$id['id-with-dashes']`
To be fair, this was close to the first thing I read after waking up so I'll have to blame my bad morning mood for the harsh words. I'm just *extremely* tired of sensationalistic titles and articles that claim to be something they aren't, especially when aimed towards the junior crowd. This is still the case with your article imho, but I could have been a bit nicer about it so sorry about that. Structurally React is quite uninteresting since it more or less bares the resemblance of a class with props passed to the constructor, a private state and a public render function. There's really not much more to it than that but you'll get an A for effort.
The title says "React-esque *component*". The title doesn't suggest anything architecturally above a component. 
Did you check react-copy-on-write from aweary? it is quite similar but has an issue tracker?
If it's not that much of a complicated animation you could put a canvas as the background and use js to make an infinite animation. If you are choosing the canvas option - there is a library called p5.js which makes interacting with the canvas way easier. Here is a link to p5 https://p5js.org. If you choose to go with p5 then I recommend you check a channel on youtube called `The Coding Train` he has plenty of p5 videos that I personally learned a lot from. Good luck! 
I did, but the simplicity of Bey makes me prefer it. The entire library code is 82 lines and very easy to understand - and feels better in use to me. The simplicity of just: &lt;Subscribe to={counter} on={state =&gt; state.count}&gt; {count =&gt; ( &lt;div&gt; &lt;button onClick={decrement}&gt;-&lt;/button&gt; &lt;span&gt;{count}&lt;/span&gt; &lt;button onClick={increment}&gt;+&lt;/button&gt; &lt;/div&gt; )} &lt;/Subscribe&gt; Basically, no `Provider` wrapping and easy to target specific parts of the state wherever you like with a simple `&lt;Subscribe to={stateStore}&gt;` - and performant because of the state-targeting function. I can't think of anything extra I would like so react-copy-on-write seems a bit overly complex in comparison. I also prefer the way it selects state in its Subscribe / Consumer component and returns it to the render function - returning a single object argument with a defined structure instead of Array of selections -&gt; arguments. But, that said, if you know of any advantages of using it over Bey I'm definitely all ears!
As a person that used to write gulp scripts, gulp tasks are: \- cleaner - they're specified in declarative manner + you can multiline them (not sure if possible with npm scripts). \- usually OS agnostic - they work on Windows, Linux etc. You don't need to worry that some command that you use doesn't exist on other OS. \- You can write manual pages for gulp tasks. &amp;#x200B;
Thanks for the clarification!
I suggest that you investigate Microsofts telemetry in VS Code a bit further. As far as I know it is far from "spying" you. Other text editors are probably not that feature-rich, since VS Code is more of a light IDE than an text editor. So you would be better off looking for another _IDE_. I would give IntelliJ or WebStorm a try.
This post was removed. Please read our guidelines before posting.
&gt; Atom is the only competition to this Uhhh... Allow me to introduce you to WebStorm.
&gt;I hate vscode. I use it everyday and everytime I try and move away it calls be back in. &gt;Is there ANY other text editor that feels as good to code, without have settings like "enable telemetry" that default to true? You say you "hate" VS Code, and yet the only reason you can name is that it has telemetry you can easily disable? 
Feedback is welcome. Also, I'd love to see what themes everyone makes with these, especially if you end up publishing them to the VS Code marketplace/Sublime Package Control. Here's a link to the live site: [http://pictheme.herokuapp.com/](http://pictheme.herokuapp.com/)
The subscription-based rich text editor? Thanks but no thanks... 
Nice! People being so mean!
There are many reasons to hate vscode and most of them wash away when you remove Microsoft from the equation. 
Wow, that's light !
Great job with the app, Kudos man!!
[https://flathub.org/apps/details/com.visualstudio.code.oss](https://flathub.org/apps/details/com.visualstudio.code.oss) &amp;#x200B; Not much difference, but a little less Microsoft if that helps?
I don't know how to git (gud) that much, so I use VS code for what's easy on it to do, like switching branches, commit and seeing modifications, and I complete it with GitKraken, which is a GUI made in electron. You need an account to use it, but it's free and you can connect to your own Git through SSH. There, everything is some click ahead.
Apparently you haven't been introduced to WebStorm. It's just as powerful as VS Code. It has every feature you listed. And yes, it's like $12 a month. My friend is a mechanic and before he got his first job, he had to buy $4000 worth of tools. He makes $17/hr. But I guess you can complain about $12/month.
&gt;using double equals in javascript
Sooo, no matter how good something is, you have to hate it just because it is a product of Microsoft? Yup, sounds like logical thinking to me
To be fair it's perfectly valid to use it in a closed / sanitized system.
If it‚Äôs just for use within a web app, i.e.: real-time stuff ‚Äì Mongo + Meteor subscription is nice and easy. If multiple sources need to subscribe to your data, I guess something more complex is required. Prisma ‚Äî as mentioned ‚Äî looks ace I found limitations with Feathers and the subscriptions unfortunately 
Finally completed the 1.0 release of our new JavaScript component suite with a Grid and Scheduler component. Blog + live demos: [https://www.bryntum.com/blog/announcing-our-new-component-suite/](https://www.bryntum.com/blog/announcing-our-new-component-suite/)
So what is your question?
Thanks. Yeah, there kind of is. There are many ways to develop for React, many routers, many data structures, FLUX / REDUX (MVC if you really want), using Thunk or Sagas as middleware or even other things. With every person that comes on your team there will be new 'best practices' and different ways they're used to doing things. With Angular, you c√°n do those things, but most of the documentation and best practices surround Angular's default setup in an MVC OOP like environment with Angulars HTTP client for http calls, its Router for handling routes and comes predefined with what's leftover of John Papa's styleguide for AngularJS. With Angular you get an 'out-of-box' package to basically do everything and also a specific way in which you should implement that. With that, comes a certain kind of structure and a little bias that works two ways. If you keep adhering to these standards, most new developers will be able to get acquainted with your codebase quiet quickly. If you as a developer keep to these standards, it will be easy to get started in others projects. I do feel this is starting to diverge a little bit and I'm currently building an Angular app with NGRX with a very functionally programmed core, but I also see that in the rest of the company it stays mostly the same. Now, I'm not saying you can't build large scale apps with React, I just think further down the road, Angular will help you stay structured more than React will.
Very cool. I love the 'randomize text color mapping' function. God I'm gonna waste so much time playing with this later. 
It is true. The top posts every day are react related. If someone posts something non-react it is downvoted. Don't believe it? Here's the numbers: https://imgur.com/a/K1vu1Qv.png In word cloud format: https://imgur.com/a/ldcO91H.png Even funnier is that the next top words are "using" "your" "library". @Chun, thanks for writing a great piece and encouraging a deeper understanding of the underpinnings of popular frameworks. It's hard to teach people concepts about coding. Sometimes you got to use some weird paths to get there, and I certainly was able to see your good intentions. Keep writing friend!
How is this bikeshedding? One should always use `const` and only if the variable is actually being mutated use `let` (which should be rare, because side-effect-heavy code is harder to reason about). In my opinion it is exactly same as using a `while` for a `for` cycle, or `map` for `forEach` - bad practice which should be pointed out and corrected, since it may lead to worse performance and most importantly - it is confusing to read.
Thanks, I could potentially set that up, or perhaps you could open a PR if you're up for it. Right now the images are uploaded to Imgur just so there can be a preview of the image in the generated README file.
Do you really need a database for the change stream? What simply throwing events when a resource was updated and pushing that over a websocket connection?
&gt; Structurally React is quite uninteresting since it more or less bares the resemblance of a class with props passed to the constructor I can't disagree more. React was not the first vdom implementation but their API was spot on and dead simple from the very beginning, which is really what sets React apart from the rest of the pack and made it the de facto winner of the vdom competition despite constantly being outperformed on benchmarks that emphasise vdom implementation. 
Dracula is nice. I use Cobalt2 these days. 
Yes. There is only vscode, webstorm, brackets, sublime, cloud9, eclipse, netbeans, vim, atom and dreamweaver. It‚Äôs basically an open market.
Quite the change in paradigm you are proposing here. 
So was people ditching postgreSQL for MongoDB.
I don‚Äôt understand the downvotes here - const should be preferred to let if possible. Am I missing something?
Still using RethinkDb and I'm in the same boat. Somehow not that into MongoDb most likely because internet turned my off it. Installed it and it felt heavier. I'd love to stay with rethinkDB but it feels like its not the best choice rigth now. It felt so strong 2 years ago when i picked it. Closed the month after! That'll teach me. 
this
Or simply put a getter directly in the object literal var me = { firstName: 'John', lastName: 'Oliver', get fullName() { return this.firstName + ' ' + this.lastName; } }; 
Take an online course maybe.
TOP will guide you from 0-dev www.theodinproject.com 
This is a genuine question, but why would it ever be a detriment?
You‚Äôre trying to apply `new` to `require`. This should work as well: const eventEmitter = new (require(‚Äúevents‚Äù).EventEmitter()) (I think, typing this on my phone without testing)
Yeah, that's actually clearner/more readable: However, I believe ```get``` and ```set``` are ES2015 features and don't work on older browers whereas Object.defineProperty works just fine. (idk why I'm pointing this out instead of admitting my "lack of knowledge"... I just learned this thing and wanted to share with the community xD)
What about const eventEmitter = new (require(‚Äúevents‚Äù).EventEmitter)()
It worked, thanks ! And now that I tried it it sounds perfectly logical (I just started with NodeJS)
yeah , whats your choice?
Backward compatibility. If they removed itt, that would break a lot of existing applications. JS has a whole lot of controversial functionality, but it's always hard to get rid of things like this.
is it worth it in terms of performance?
&gt; `const` declarations (constants) are commonly mistaken for their ability to signal intent and enforce immutability. In reality, `const` has basically nothing to do with value immutability, and its usage will likely create more confusion than it solves. Instead, `Object.freeze(..)` provides a nice built-in way of setting shallow value immutability on an array or object. In many cases, this will be sufficient. From: [Kyle Simpson's Functional-Light JavaScript](https://github.com/getify/Functional-Light-JS/blob/13a3bdafb4edb83207db76212312472aab20d06a/manuscript/ch6.md) &gt; My advice is literally the opposite. Startup by using var, if you're gonna block scope, use let. Maybe every once in a while there's gonna be a need for a const. But let me explain why my advice is the inverse of the community common standard. From: https://frontendmasters.com/courses/javascript-foundations/const-keyword/ Now I'm not saying I completely agree, or disagree, and I should probably find some arguments for the other side of the argument. Familiarity with `const` will shift in the community over time, which might render his argument mute as the meaning of a constant shifts towards reassignment instead of value immutability in JavaScript communities. But that means that the community will have to shift away from the traditional definition. (https://en.wikipedia.org/wiki/Constant_(computer_programming))
Whining...
No, Backbone is definitely outdated at this point. Use React (my preference) or Vue instead. (I wrote a blog post about [how we're incrementally migrating our Backbone app to React+Redux](https://blog.isquaredsoftware.com/2017/07/react-redux-backbone-integration/).) RequireJS is also outdated. Most new code these days is written using the ES6 module syntax, and either handled natively by bundlers (and occasionally browsers) or backwards-compiled to the CommonJS module syntax.
Are you planning to continue working on it as a side project? 
I‚Äôm not really sure how you could say Angular is stable while React isn‚Äôt, when Angular has breaking and major API changes with pretty much every release while React has remained almost unchanged from in it‚Äôs core api for years. Plus React is actually used by Facebook whereas Angular was made for consulting, and not even used in any core products.
good practive
Thank you very much!
`get` and `set` [were in ES5](https://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5), though its true the shorthand syntax for non-getter/setter methods in object literals is new to ES2015.
Focus on everything. DS, algos, css, HTML, http, react. You will need everything.
Have a look at MarionetteJS which builds ontop of Backbone. Personally I moved from Marionette to Mithril, which is just core JS.
Jesus Christ, just stop beating this dead horse. There's never a reason to use double equals in JavaScript. Just use triple equals and quit whining.
Yeah... I can't say I think much of javascript, but you can't fault them on "backwards compatibility". When they realized the "==" operator was confusing, they introduced an alternative, the "===" operator. The rule of thumb is you should favor using the "===" operator: https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons 
I've been to two recently. They both focused on different things. One Vue.js and some code I had written a couple of years ago that I had forgotten all about. The other focused on jQuery and promises - something you don't normally use, as it's easier to just use vanilla JS. So yeah, you'll never know what they'll focus on. And your only chance is to know a little bit about a lot of things. Jack of all trades; master of none.
I remember reading something about them being really slow, is this still the case?
Our Backbone app does use Marionette for lifecycle methods and the `ItemView` niceties (along with Epoxy for data binding). React is just fundamentally superior to Backbone's approach.
`that`
You'll need Javascript, data structures, algorithms, CSS, HTML and application design. Companies, unless they are looking to hire someone immediately for a specific role, usually won't ask much about specific frameworks like react / angular. If you claim to know react, they'd ask a few questions based on it, but they usually don't ask too many questions based on a single framework. Javascript expertise is a must have.
Accessibility requirements, CSS preprocessors, minify steps in the build process, GZIP, knowing how to interact with backend APIs from a browser client, scope of a user session, the difference between building "mobile-first" rather than "desktop-first" interfaces. How to manage states in a Single Page App (SPA). Just some stuff off the top of my head... some of these aren't totally useful for interview questions. But knowing how these things work will definitely make a fundamentals front-end interview easier for you. &amp;#x200B;
Just wanted to make a tinnier library that would solve most problems and not spoon feed everything.
Could you elaborate on inconsistent. Thank you :)
VsCode was created to fill this hole in editors actually and is the competitor to Atom/Sublime rather than the other way around. Sublime was one of the first of what I'd consider the "modern" GUI text editors. Then GitHub created electron and the Atom text editor that leaned more towards an IDE than simple text editor. VSCode took this one step further with deeper integrations into JS/TypeScript and extensions for other languages. &amp;#x200B; I understand the worry about telemetry, but Microsoft has been providing development tools for many years (Visual Studio still exists and contrary to popular opinion, is very powerful). I know that some have forked VSCode to create a less "Microsoft" branded experience, but to some degree this feels a bit disingenuous to me because one of the things that has made VSCode so great is their near warp-speed adoption of features. &amp;#x200B; Love it or hate it, the "alternative" you're describing is the space that VSCode was created to fill.
All, Thanks for providing your response! 
A little bit of everything. Some of the most recent interview questions I remember: Asked to explain: 1) Async JavaScript 2) Client-server relationship 3) Event delegation 4) MVC model 5) Event queue. Which order would the following console log: function foo() { setTimeout(() =&gt; { console.log('a'); }, 1000); setTimeout(() =&gt; { console.log('b'); }, 0); console.log('c'); setTimeout(() =&gt; { console.log('d'); }, 1000); } foo(); 6) CSS specificity 7) Difference between callbacks, promises, async/await 8) Prototypical inheritance 9) Basic algo stuff (merge sort, fizzbuzz, reverse array without builtins) 10) Semantic HTML Also had to describe experience with various frameworks. A portfolio helps massively. I have a few pet projects of games and other things that really stood out to interviewers. It's much more relaxing for me in an interview to talk about a cool project I worked on rather than to talk about more abstract things.
I got 100% Yes, yes, you should never use this in real code, but it's useful to know for debugging if someone else uses it. And it's not hard to memorize the rules: 1. if one side is `null` and the other is `undefined`, return `true` 2. if one side is `null`/`undefined` and the other isn't, return `false` 3. if both sides are non-primitive, use the `===` rules 4. if both sides are the same type, use the `===` rules 5. if either side is non-primitive, convert it to string, then goto step 4 6. if either side isn't a number, convert it to number, then goto step 4 And don't forget: - `Number("") === 0` - `Number("any other string that isn't a number literal") === NaN` - `NaN !== NaN` (because of IEEE 754) 
As you worked out the correct code with the other guy, let me explain the stuff that is going on here: The key point is operator precedence - the order in which operators are evaluated. The new operator has a higher precedence than the dot (property accessor) operator. So `new x.y` will create a new x and access y on the new instance. 
its saying "set key to either e.keyCode or if that doesn't exist, set it to e.which".
one of javascripts most strange behaviours if you ask me..
Thanks for the answer. Yeah that behavior is kind of confusing, how would I differentiate setting an actual value to var key and returning a boolean? Does it evaluate logic when booleans are being compared and set values when non booleans are compared?
Thanks
Unlikely. It was proposed in ES4 and died.
Bash and some others do it too, like `command1 || command2` -- this will only run the second command if the first fails. Perfectly reasonable and pretty useful.
Be aware that `new Date().valueOf()` and `(new Date).valueOf()` are both valid syntaxes.
150% wrong, I'm the best ever.
Thank you :)
it sets the variable to whatever you test for. If you are only interested in Booleans you could do: `const isTrue = Boolean(thing || otherThing)`
this is not specific to javascript.
did YOU know that you can't?
In what way is this a strange behavior?
Clickbait, Fluff, Lies. Pick a flair.
Yeah, ithe grading's so stupid it fits the exercise
I never use the `==` when writing JS, so I answered the thing thinking about truthy / falsy, and got a lot of wrongs [mfw](https://i.imgur.com/iMTKukb.png)
You'll need to display competency in CS principles and web-specific principles. For general CS, do a bunch of problems on leetcode. For web-specific principles, pick a framework and master it by building a suite of applications that you or your family could find useful in day-to-day life (Heroku is useful for this). Dabble in other frameworks and have opinions about what you like and don't like. You'll also need to be able to talk to browser fundamentals like events, and JS fundamentals like promises, closures, etc (which will come easily if you are building apps).
5) C B A D? 
Eye strain from staring at the screen for too long is becoming a worse problem for me. I made a simple countdown timer that uses browser notifications to remind me to take a 20-second break from the screen every 20 minutes. [https://pizzamyheart.github.io/look-outside/](https://pizzamyheart.github.io/look-outside/)
Just three simple classes in 8 lines each.
Just keep it in two lines, god, not everything must be unreadable one-liner.
The objects just override `.valueOf()` and `.toString()`, right?
I think you've touched on an important consideration; any situation where you don't have external load balancing available would probably not require load balancing to begin with. That is to say -- if this were an actual problem, you'd have the resources to address it properly.
Does everyone really think algorithms are necessary for day to day front end work? Or even for an interview? (Genuinely curious) 
I think you, and most of the other commenters here are right. Time to look passed my arrogance and get on with it... 
Thank you all for your replies, in light of your collective opinions (while I'm still slightly concerned about the conglomerate of Microsoft monopolising the tools that are my main source of income, ) I believe there have been some very good points made here. If only there was reddit integration with vscode then I wouldn't even need to leave my phone to.. [insert legitimate googling to look for reddit extension for vs code] [insert shock to no reddit extension found]... Get public opinions on my own conundrums...
Hi /u/vilrod, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I personally use it for null or undefined checks, `foo == null` is less verbose as `foo === null || typeof foo === "undefined"`
Alternatively const isTrue = !!(thing || otherThing)
Wonderfully in-depth and well thought out article. Very interesting use of gRPC as well in what you'd might consider a more web-oriented stack.
that's not recommended.
I could never really understand all this fuss about `==` vs `===` and people trying to memorise all these rules or complaining about how bad JavaScript is. I never cared about this. In fact, in the project I'm working on (pretty big and pretty complex one) we still accept the use of `==`. I found it very odd at first, when I joined the project 7 years ago, but then I asked ‚Äì DON'T YOU KNOW GOOD PRACITCES, LOL? And they replied ‚Äì we don't remember any bug caused by the use of `==` (and we have couple thousand tickets opened on GitHub, cause that's a fairly popular open source library). And you know what? 7 years later I *think* we've got just one bug caused by `==`. The only reason why we started using `===` is that I was asked the same question a couple of times and that clearly shows that `===` is the standard choice, so it's good to avoid confusing other developers. I don't mean that it's pointless to use `===`. But when some guru tells you that something is bad practice ask yourself whether there's evidence to support that. When they tell you that equality operators suck in JavaScript, ask yourself what's the chance to really run into such cases in real life. I'm doing JS for 10+ years, did some crazy things with it, but find the complexity completely elsewhere.
This has to do with how logical operators work in JavaScript. Check out [this MDN article](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators) for a nice explanation. In this case the statement `e.keyCode || e.which` Returns `e.keyCode` if it's truthy, otherwise it returns `e.which`. Logical expressions like `||` and `&amp;&amp;` are evaluated from left to right. In case of the logical "or" operator `||`, if the first statement is truthy, the second will not get evaluated because it would be pointless (the `||` condition is fulfilled whether the second condition is truthy or falsey). This is called [short circuiting](https://i.redditmedia.com/q8fymDv0E89S1Bz3EYp9_GQg-yN2ACjh4EG3W_BoKxw.png?s=2102f6a6946cf42daa1b28b2475a5847). &amp;#x200B;
I always think of it as the "fallback" value.
Backbone is dated but it's still worth learning. It'll definitely come in handy if you're working with Wordpress.
Build a single application. You can use firebase or some other BaaS if you only want to focus on frontend code. &amp;#x200B; Everything else, all of the algos, gotchas, etc, will be shown to you as you're building. &amp;#x200B; When I interview, I don't ask "How do you build a B+ Tree" but instead ask "Tell me about project X", where I saw you use a B+ tree to solve.
This. And not only because of other peoples code but also the minimizers will change it as well and you still want to read what they do
You do gain clarity of intent by using explicit coercion over implicit coercion. So yes, there is no one way to do it, but it does have a benefit. 
It's called Array Destructuring, more about and plenty of examples of it on the great MDN site: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring\_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)
I think whats happened is you have a nameless array with the variable last in it then you assign peaks.reverse to the nameless array meaning [last] is now equal to ["Rose", "Ralston", "Tallac"] last is a variable that has the first element of the array assigned to it giving last = Rose. 
Exactly. Imagine if the designers/maintainers of C decided to change some core part.. "C can now automatically manage memory, so we're going to remove all manual memory management functionality from the runtime. Programs which use this will need to be redesigned/rebuilt." There should be some point where things are replaced with something better for the task at hand, but in the case of JS that will basically require building a completely new internet as it has become so much a part of it. Any backwards compatiblity that's removed kills parts of the internet which may no longer be maintained but could still be running great right up until the runtime changes.
You got it.
Thank you very much! 
That's the only time I use it as well.
just google 'anti-patterns javascript boolean typecasting' and you'll see why
Pretty cool! Did you wrote the whole in ES5 and transpiled it to native javascript later?
Feel like Jesus on Es now.
thought i was in r/ProgrammerHumour
This question reminds me of [https://medium.com/@adrai/a-tale-of-the-last-10-years-in-web-development-9c74ead7e6a5](https://medium.com/@adrai/a-tale-of-the-last-10-years-in-web-development-9c74ead7e6a5) üòú
https://www.freecodecamp.org/
isn't that just a truthy/falsy checking? ie `if(foo)` or `foo &amp;&amp; bar()` instead of comparing to null/undefined. If you're going to use `==` for that, might as well go for the version without an operator.
Java has nothing to do with javascript. Funny enough, in javascript your example code would actually work (if there was a System.out.println() defined). In java you should look into lambda functions (as u/dirtytiki pointed out in his/hers answer). Also, if your programming teacher does not know the answer to this question you should probably change school :)
Thank you for the suggestions. I'm not sure they will be a great fit, because I'm looking for something like Gitter that could support hundreds of people in a chat room, helping each other answer questions in real time. But I will check them out just in case.
Scoket.io has a bunch of client and server libraries written in various programming languages. Some official and some not. Luckily for you, Python is a pretty popular choice so some people already wrote one for you: https://github.com/miguelgrinberg/python-socketio
I agree with both of them too, but not you. 
It's not the same thing at all. Consider the following: let x = ""; if (x == null) throw "an error"; vs let x = ""; if (!x) throw "an error"; Empty string is falsey, but not null.
It makes perfect sense, thanks :)
[‚òπÔ∏è](https://i.imgur.com/97KVTmq.jpg)
This makes for a bad interview question imo. It's just testing random API trivia because people don't use appendChild that way very often. It serves no purpose but to let the interviewer feel smug when people get it wrong.
If it helps, I literally wrote the book (ok, *a* book) on Backbone ... and I'm not teaching a class on React. Backbone was awesome for it's time, but I'd recommend React, Vue, or Angular 2 over it. I'd do that because of the ecosystem alone, but also because Backbone had major deficiencies that modern frameworks all address. 
The site isn't even on https, let-alone on a real domain. Come on man, is this really ready for the level of promotion you've been giving it the last 2 days?
The article doesn't really answer the question: a clone (such as one created through [`cloneNode`](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)) would be entirely separated from its original node, and as such none of the two resulting nodes would have multiple parents. The actual reason simply is that cloning a node is a complex operation that should be done explicitly rather than implicitly; do you want to copy the node children? do you want to copy the event listeners? For those reasons there's only two behaviors that would be acceptable: reparenting the node, or throwing an exception. I'm not sure why they went with reparenting (maybe to keep the API easy to use?), but I doubt cloning ever was on the table.
Very cool :D Don't intend to hijack but made a similar project for SAP (Atari) files a while ago (for those who like these sorts of things): https://talmobi.github.io/asap-web/
You should delve lip this into an io game
Luckily shes just a high school teacher lol
You can even chain them. || operator returns first truthy value from left, if all of them are falsy it returns the last value. In js falsy values are null, undefined, 0, false, NaN and empty string (""). Everything else is truthy. So in fact it's works the same in ifs and assignment.
Udemy for $10. Look at reviews and go for it
`0`, empty string and `NaN` are also falsy.
Yes. "===" came out with Javascript 1.3: http://webreference.com/js/column26/stricteq.html 
I tried to do it again following your rules and my results were still wrong. I think it needs some clarification: 1. `null == undefined` but they don't equal anything else 2. if both sides are the same type (or both non-primitive), use the `===` rules, otherwise go to step 3 3. convert non-primitives to strings; if both are now strings, use `===`, otherwise go to step 4 4. convert both to numbers, then use `===` With the additional conversion rules: * Converting any value to a string will call that value's `toString()`: * For arrays, this does a recursive `array.join(',')` * For primitives, this returns the value's literal as a string * For objects that don't override `toString`, this will return `[object Object]` * Converting a string to a number will first try to parse the string to a number, returning 0 for the empty string, and NaN for every other value * Converting a boolean to a number will be 0 for false, 1 for true
This might be a little misleading, the `new` operator has two precedences depending on whether it has an argument list or not (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence). This means that this code: class Foo { constructor() { this.foo = 'foo' } } Foo.Bar = class Bar { constructor() { this.bar = 'bar' } } const one = new Foo.Bar const two = new Foo.Bar() will be an instance of `Bar` in *both* cases, the easiest way to remember how `new` works is simply that it will return an instance of whatever has the brackets earliest. So if there's a chain of `new Foo.Bar.Baz().Boz.Qux()`, then because `Baz()` is the first thing with arguments in the chain that will be the constructor that is invoked with the `new`.
I would suggest the official [MDN documentation](https://developer.mozilla.org/bg/docs/Web/JavaScript), it has everything you need, including tutorials. Another good resource is [javascript.info](https://javascript.info), both are with updated information.
&gt; const declarations (constants) are commonly mistaken for their ability to signal intent and enforce immutability. In reality, const has basically nothing to do with value immutability, and its usage will likely create more confusion than it solves. With objects, yes, but it does enforce reference and type immutability. Its usage won't cause confusion if you understand what it does, and I don't think that's a valid argument as this is a fundamental property of Javascript. `Object.freeze` solves an issue that `const` isn't trying to solve.
again?
You don't agree that I agree with them. You must have some deep insider information. Hey Siri, who is recording everything I think? Hmmm what a mystery.
I have been a professional developer for about 8 years. I have both a bachelors and masters degree in computer science. I have been doing web dev both for fun and for self employment since 2006. My day job is almost 100% front end web dev. I am paid a decent salary for this work. I did not know that appendChild would move an existing element. It‚Äôs not that I thought it would clone it or do something else. I never even thought about it. I have never once had a need to append a node already in the dom, nor has this ever come up in design, nor has it ever been the source of a problem. I don‚Äôt know if that means I am not a real developer or not. My boss would probably be surprised to learn that. Then again, I probably know stuff about CSS in legacy browsers that no one else on the planet knows.
Thats pretty cool, I still have and listen to a lot of my old mod's, xm's and s3m's. I use VLC on macOs to listen to them mostly but sometimes load them up in my amiga emulator to play around with the old trackers. I remember downloading mods off BBs with the neck breaking speed of a 1200 baud modem. Upgrading to a 14.4 felt like lightning!
You did a great job with this game, I'm glad to see the making of article!
Free code camp
I googled, I saw an argument that double negation is an ‚Äûobscure‚Äù method. I‚Äôm not sure if that is wht you mean, but if so, I stand my ground ‚Äî that is a matter of your teams prefference. There are no functional differences, and what might be less readable for you, could be perfect for others. All you can do at this point is to show your POV and maybe convice someone otherwise, but treating your solution as the only acceptable way inst helping anyone. We‚Äôre bikeshedding anyway...
This is the best technical writeup I‚Äôve read in awhile. Cheers. :)
ok thanks brothers, i understand
Yes, exactly. The value is still the same object, the object has mutated. This is what const means in JavaScript, and that‚Äôs a useful feature. Misunderstanding the language is not a reason to not utilise it.
Yes the reference is still the same but the value of the object the reference points to has changed.
Which is why you freeze the object if that‚Äôs what you want. These are different things. The reference is constant.
I am also using ButterCMS and have used it in the past. Right now I am using for the blog on my rails app [SQLBot.co](https://www.sqlbot.co/), but will extend to use for all content pages. Simple to integrate, works really well.
Why are you even arguing with me? These aren‚Äôt even my opinions. These are Kyle Simpson‚Äôs opinions. Sorry I tried to share something with you. I‚Äôll do my best not to make that mistake again.
I'm discussing what you shared and you responded. That's how reddit works.
A variable set by reference points to a location in memory. That location holds the variable‚Äôs value. The reference itself isn‚Äôt considered it‚Äôs value. 
Also, &gt; In computer science, a reference is a value that enables a program to indirectly access a particular datum, such as a variable's value or a record, in the computer's memory or in some other storage device. The reference is said to refer to the datum, and accessing the datum is called dereferencing the reference.
Exactly. Bret Victor has several great talks about this ([here's a 30mn fun one](https://en.wikipedia.org/wiki/Survivorship_bias))
The point Kyle Simpson made was that the value stored in memory is not constant, which is how constants traditionally work. So const isn‚Äôt a constant, it‚Äôs just a flag to say there will not be reassignment. 
I know, and I've been saying that's not a valid point because it assumes a misunderstanding of the language. It doesn't claim that an object assigned to a const is immutable, it implies a constant reference to a value. It will _always_ reference that value. Objects are mutable in JS. Numbers and strings are not. Why on earth would you avoid understanding the language and forgo the benefits of const because you confuse it with object immutability? 
Because a constant is immutable in most languages. I even addressed this in my first comment. I stated that perhaps the JS community will become familiar enough with how it actually works (the reference being constant) that his argument becomes a moot point. I addressed your argument before you made it, yet here we are.
Try specifying actual positions for the img elements. All four directions set to 0 probably. In my experience you don‚Äôt have to do that if you‚Äôre displaying as flex 
Learn how layouts work and how to build pixel perfect components from mockups. - Box model - CSS Flexbox - Bootstrap
r/lostredditors
13k? You should check out the demo scene
Why would I know this? The only time I have ever needed or used appendChild was to add a new one, not to move an existing one. Alright, how about an easy one: ``` &lt;div style="font:100px monospace; white-space: pre;"&gt; &lt;/div&gt; ``` In which Internet Explorer versions will the above have a non-zero width? No looking it up or writing tests allowed, remember. I have harder ones if you get this one.
Amazingly inspiring, think I‚Äôll start learning about 3D and gamedev
drag/drop or anything else that moves elements in the DOM? &gt; &lt;div style="font:100px monospace; white-space: pre;"&gt; &lt;/div&gt; non-zero width? It's a block element, all of them. it'll be zero height in nearly every version of IE (until 10 or 11)
Hard to tell without a specific use case and domain modeled. But if we take for example a simple todo app where multiple people can edit a todo list. You could have the frontends subscribe to that todo list via an open websocket connection. Then when updates to that list happen you push events to all frontend subscribers. You could simply set this up with any eventing system (rabbitmq, some cloud message system, an application polling a database of events, ....) and any database. The advantages of something like RethinkDB are in my opinion, ease of development and when you require change streams of aggregate query's. However I don't believe change streams on even semi-complex query's will ever offer decent performance. Also I would take the simplicity of separated eventing and database systems (for which you can easily swap solutions and find experts) over reliance on a complex all in one system that is known to have performance issues. Here's a good read from someone with actual experience in this domain: https://blog.sagemath.com/2017/02/09/rethinkdb-vs-postgres.html 
Awesome write up, has definitely made me want to learn more around web game development. Does anyone know any decent resources/links where I can learn more? 
I just saw this on twitter and remembered your post here. You might like it: https://twitter.com/edstub207/status/1041796535233785856
You‚Äôve never moved elements in a dom?? If there‚Äôs a bug with `td`s and what‚Äôs basically a `pre`, I‚Äôm guessing your table layout is going to blow out and be way longer than it should be as the `pre`‚Äôs 100% width is going to be fighting with the table layout engine. I vaguely remember dealing with that at one point but I haven‚Äôt written a `&lt;table&gt;` in a decade, lol. But individual bugs are pointless. You fix them and move on. Like I can ask you which browsers duplicate HTML comments as visible text when after a select box that‚Äôs been hidden. But it doesn‚Äôt matter :)
IDK what made our project "safe". Perhaps all developers that worked on it had that minimum knowledge to avoid the problems. But I also think that part of it lays in how we document types. We couldn't naturally use TypeScript 7 years ago, but we were very precise when it came to the API documentation. That meant that we could make safe assumptions regarding types. (I'm giggling now cause I see with how with time I owe more and more to stricter types :D)
"Welcome to Javascript!" ;) It is one of the many reasons why I love programming in this language. Once you get to terms with it's idiosyncrasies, it is such a powerful language. 
Promises Promises Promises
&gt; RequireJS is also outdated. Altough it's technically possible [to use it with React](https://redd.it/84fryp).
No, it's not considered bad practice.
Thanks For Your Contribution
No. If you want to create an immutable object, use `Object.freeze`. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
Mathematically, this doesn't make any sense. I've tried to argue with slikts on this, but he doesn't seem to grasp, want to grasp, or want to explain the math. Normally; `% wrong` = 100% \* (`total possible score` - `correct`)/`total possible score` `% correct` = 100% \* (`correct`)/`total possible score` However, the game's logic obviously does not tally everything into the total possible score; so no proper normalization occurs when making mistakes.
Are you asking in context of a browser or nodejs?
Note that this is from 2014. The class action lawsuits have been settled in 2015 - https://www.cnet.com/news/apple-google-others-settle-anti-poaching-lawsuit-for-415-million/
Yeah, but we should NEVER forget it was done.
Also, I knew about the Apple - Google ones but not about the other ones so I still learned something from this
I'd like to see more unionization in the tech industry. If they're conspiring to keep wages low, employees should conspire to keep wages high.
I don't think context is important in this case, c# and many language has async, sync programming. So, you can pass it .
Event loop parts work differently in node v8 and browser. taht's why i am asking.
slug case is also known as kebab-case: [http://wiki.c2.com/?KebabCase](http://wiki.c2.com/?KebabCase)
Github I suppose ;) just sort by stars and filter by language 
https://frontendmasters.com/ is the best plataform. They have many courses for FrontEnd Devs about JS, CSS, Angular, NodeJS... I recommend this two advanced JS courses: - Deep JavaScript Foundations - Functional-Light JavaScript, v2
Unions are bad - every American
const is short for constant, which means unchangeable. Unfortunately, JS allows consts to be changeable (so there for it's literally the opposite of what it should be) . Just because you can, doesn't mean you should.
That's just a misunderstanding of what const actually refers to though. It's saying the thing in the box won't change, but the thing itself might. If you put a notepad in a const box, you're not going to look in there and find something else, but you can still write on the notepad. You can't replace the contents of the box - it is constant - but the contents itself is not.
I don't understand why my wages and benefits go down every year and why I now have to have 3 jobs just to afford food - Also Every American.
Start working on weekends then, like you would have if unions didn't fight for you. 
While the contents of what is stored could change, that's not a problem. const a = 'abc'; a = '123'; b = new Something(); &amp;#x200B; That's the problem.
I like unions but it seems like every American I talk to thinks theyre awful 
Americans have been brainwashed to hate lots of things that are good for them. It sucks. Sorry if I misinterpreted you. 
r/devUnion
Here's a sneak peek of /r/DevUnion using the [top posts](https://np.reddit.com/r/DevUnion/top/?sort=top&amp;t=all) of all time! \#1: [How do we combat the monopoly of Google, Amazon and Facebook?](https://np.reddit.com/r/DevUnion/comments/9gtlhe/how_do_we_combat_the_monopoly_of_google_amazon/) \#2: [The Techtopus: How Silicon Valley's most celebrated CEOs conspired to drive down 100,000 tech engineers' wages](https://pando.com/2014/01/23/the-techtopus-how-silicon-valleys-most-celebrated-ceos-conspired-to-drive-down-100000-tech-engineers-wages/) | [0 comments](https://np.reddit.com/r/DevUnion/comments/9gtl8m/the_techtopus_how_silicon_valleys_most_celebrated/) \#3: [When will tech worker wages start growing again?](https://www.fastcompany.com/90220675/when-will-tech-worker-wages-start-growing-again) | [0 comments](https://np.reddit.com/r/DevUnion/comments/9gtjmc/when_will_tech_worker_wages_start_growing_again/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
How would that work? Front-end Developers Union? Everybody has the exact same pay? I like negotiating my own pay. Over the past 17 years I managed an AVERAGE +10% pay raise per year. Most other people settle for an average of +5% or less. If I'd be unionised I would have to settle for less because the union is doing the negotiating for me? If I don't like a job I just apply for another job and bluff my way to a higher pay. I've done that 5 times in 17 years and it's paying off. I always figured unions make sense for industries where there is not a lot of "other companies" for employees to go to. In our tech industry there are PLENTY of alternatives. If anything we just need to train tech people to switch jobs every 3 to 5 years and bluff their way to higher pays. Because while Apple and Google and Amazon are making trillions in profit, we're being strung along with the average +‚Ç¨200 raise each year. We just need to be more business-like ourselves. Just like our bosses are. 
Will do, thanks!
A synchronous callback will be executed within the same tick of the event loop, as soon as possible - two callbacks will execute one after the other: function synchronous(value, callback) { callback(value.toUpperCase()); } // this executes first synchronous('foo', function(upcaseValue) { console.log(upcaseValue); }); // this executes second synchronous('foo', function(upcaseValue) { console.log(upcaseValue); }); An asynchronous callback is executed within the context of a scheduler (like setTimeout, requestAnimationFrame, setImmediate, nextTick, postMessage). Two callbacks scheduled for the same tick will execute concurrently: function asynchronous(value, callback) { setTimeout(function() { callback(value.toUpperCase()); }); } // this executes on the next tick of the event loop asynchronous('foo', function(upcaseValue) { console.log(upcaseValue); }); // this executes at the same time, also on the next tick of the event loop asynchronous('foo', function(upcaseValue) { console.log(upcaseValue); }); To further understand scheduling and the event loop, watch this video: [https://www.youtube.com/watch?v=8aGhZQkoFbQ](https://www.youtube.com/watch?v=8aGhZQkoFbQ)
 $4,150 per tech job if the 100,000 is correct. I have a feeling they have quite a nice profit margin on this practice still so we should definitely be on the lookout.
This is my feeling as well. Unions would ruin it for me. 
What? Most people without unions don't work on weekends. 
`const` does not mean that the **value** won't be *mutated*; it means that the **variable name** won't be *reassigned*. 
I'm not sure what you're showing me, but line 2 is illegal; you can't reassign `a` to be something else. If const made the value immutable, what would you expect this to do:? var a = []; const b = a; a.push(1); b.push(2); Here `a` and `b` are references to the same value; an array. The only difference is that a is a variable reference and b is a constant reference. But we aren't doing anything with the reference other than accessing it so this is legal. But if `const` made the value immutable then would a.push be okay, but b.push would not? It just wouldn't add up. Again, the `const` just refers to the reference not the value. The reference is constant, the value is not.
not a 1 to 1 ratio, but code sandbox can somewhat achieve this
America also has some historically very shitty unions that have harmed the reputation of unions as a whole. They become self serving, through regulatory capture they end up hurting the public as well as the workers they were supposed to represent (not to discredit the good ones). For example, the auto workers union put such a stranglehold on domestic auto manufacturing that it pushed it all overseas because the union was unwilling to compromise. It‚Äôs a two way street between employers and the unions and it can be abused by either side of the relationship. A few other examples are: stevedore union, police union, taxi cab workers. Skilled industries have also tended not to need unions because demand has often outpaced supply. 
I doubt this will ever be possible because it opens the doors to bad websites hacking all your local storage data.
&gt; You‚Äôve never moved elements in a dom?? Not that I can recall, no. It has always been either generating dom, hooking into existing dom, or using a framework that manages very complex interactions. &gt; I‚Äôm guessing your table layout is going to blow out and be way longer than it should be Nope. After IE9, it has a normal one space width. Prior to IE9, it either shows zero width or one space‚Äôs width, but only sometimes, often taking a while to do so, remaining at zero width long enough for tests to fail. &gt; I vaguely remember dealing with that at one point but I haven‚Äôt written a &lt;table&gt; in a decade, lol. You haven‚Äôt worked with tabular data in 10 years?? &gt; But individual bugs are pointless. You fix them and move on. Yep, and the idiosyncrasies of an individual dom manipulation are pointless as well. You look them up when needed and move on. Q.E.D.
Nice work!
This is a book series and not a class, but the info is great and super deep. Am on the third book and have been loving it. Tons of "oh that's how that works" moments for me as a 2 year long dev.
Nice job, man! It's amazing considering it's written in vanilla JS. There are a few bugs I encountered like once it was Game Over immediately after the controls guide. I believe the spacecraft must have spawned right into (or really close by) an asteroid.
This is great work, keep it up
I immediately broke it :D Played for a bit, crashed, pressed cancel in the popup. Game restarted, but I was locked into constant rotation. Could not reproduce, unfortunately. Also, continuing from there, the game over screen can then be dismissed with "space", which is weird. Lets you immediately reenter the game exactly where you were. The music starts overlapping though, which can get extremely loud. Apart from these (relatively) small bugs, it's really well done. I liked having the homing satellites as an additional challenge, and the character handled just as I expected. Hitbox was just a bit bigger than I'd have liked, but I know how challenging that can be (never done it in JS though). Good stuff!
It doesn't work well in Edge.
https://github.com/denoland/deno
So it is like `=`? That means `number` is set to whatever `number` is set to times the value put in for `factor`? I don't understand where `number` gets a value set into it other than `undefined`.
In that case `() =&gt; {}` is like a function with no arguments given to it. Got it. So in `console.log(twice(5));` the `5` gets passed into `number`?
1) apples vs oranges. React is a frontend framework which you can use with any kind of backend(C#,php,ruby,java etc). 2) again node is for backend other stuff you listed is for frontend. And they are not js alternatives, they are frameworks/libraries. I personally moved on from angularjs to vuejs. 3) Backend: you can still go with anything you want, people preferences/requirements vary wildly. Orms, mvc frameworks and oop are still highly popular in java and c# land. Some php frameworks also do oop, ruby,python and node have some of the both worlds. Frontend you have to use js or something that transpiles to js because that what browsers support. There is typescript which is strongly typed superset of js which transpiles to js and can be used in both node and the browser. Angular 6 uses it by default. Its mostly strongly typed and follows some oop patterns.
It's as bad as any mutation in place, not worse or better. But no, const does not mean immutable, const only preserves identity, not value.
Not sure why ur downvoted... edge is supposed to support vanillaJS fine
Correct on both accounts
I liked egghead a few years ago. Helped my grasp some essential concepts. 
Access to data stored in the browser such as [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) and [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) are separated by origin. Each origin gets its own separate storage, and JavaScript in one origin cannot read from or write to the storage belonging to another origin. Reference - [https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin\_policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)
I'm replacing the file using the exact same file name in order to keep from having to edit html every day. 
Definitely don't try to play this game drunk/high.
I would look into the [Window.opener](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener) property. As well as [Cross origin messaging](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) 
Then I'm afraid its up to the server to aquire that information. You could then query the server (from the "html") for the dates using Ajax. Or prerender the dates on the server using a temple.
mail-promise has nothing to do with that so not sure why you posted that link
Thanks for the info. 
It says its playable on pc in the title
True, al I read was JavaScript game haha
good work, i enjoyed it
Code?
So "fuck everyone else, I got mine."
Or maybe the Auto industry could have chosen to keep the jobs domestic and cut costs elsewhere. Let's not pretend businesses move overseas because their hands are forced in order to survive.
Of course. It‚Äôs a spectrum. At some point there is a straw that breaks the camels back. But being completely uncompromising will eventually either force the manufacturers to fold as other firms outcompete them by making more efficient choices, or they will have to cave to that pressure themselves. Within that there is some flexibility for unions to leverage collective bargaining, but if they are completely inflexible/unyielding, they won‚Äôt be able to help the workers at all as they are rendered obsolete. 
Also, the costs of paying the workers more only partly fall onto the corporation itself, much of that cost gets passed on to the consumers. Essentially the unions end up extorting the consumers, just with the company being a middle man. Again, there is a middle ground between no bargaining power for the workers who are then exploited by the company, and the workers holding the company hostage and making unreasonable demands.
Why?
nice work
Hmm. You think that's why they give you a volume control?
Edge isn't supposed to be IE
Just one suggestion: teach enemy ships how to shoot otherwise player's best strategy is staying in one place, rotating and shooting.
Not possible without using a browser addon, or a GM script.
I want you to know, I am proud of you!
keyword supposed.
Nice job! Why do you show an alert on pause though?
I‚Äôd ask why you need this rather than just repeat the already clear note that what you‚Äôre asking cannot be done, maybebyour real need can be met by some other method
Holy crap that's fun
Ya sometimes the spawn mechanism freaks out and spawns you ontop of the asteroids.
Omg! Thanks
Because it's the only I could stop the spawning process. I am using set interval. So even if the animation stops, the intervals don't.
You must have never met someone who is obsessed with configuring vim.
Welp .. there goes my productivity today!!! Thanks man haha it rocks!!
Get off your fucking high horse, Edge is a pretty good browser. This isn't 2006 and Edge isn't Internet Explorer.
Edge isn't Chrome or Firefox or Opera either.
üôÑ
https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval
Thanks. PHPStorm user, so I've always wondered about this.
Currently most people stick at the same job for 10+ years and never negotiate. They just accept whatever comes their way. I don't want to be in the same leagues as those guys. Seriously, they would be raging about a fraction of a percentage, whereas I'm currently getting so much more out of it. So yes, absolutely, fuck everyone else. As long as I'm doing good I don't really care about what my non-confrontational colleagues get. Congratulations with your +3% because "it's tough right now". I'm getting +6% this year because that's the deal I made 1 year earlier. And honestly, for them +3% might amount to 90 USD. For me, 3% would amount to 150 USD. So 300 USD if I'm getting the 6%. Why in the name of everything that's nice would I want to drop down to a mere 90 Dollar raise? Because I "feel" for the drones who work the same 9-to-5 BS job until they retire? Businesses are there to make money and so am I. Work the market, realise your price. Be your own union. If you don't like it you simply move on, and that's where the biggest profits are; both financially and in every other way, too.
Sounds good, doesn't work!
But it supports standards. That is the point. IE 11+/Edge may not be the best browsers for a variety of reasons, but they are not IE 6-8 or Safari. They support standards. Granted IE 11 supports very old standards, but still standards. 
ELI10 In Javascript functions can be passed around the same as objects, arrays, strings etc. The multiplier function takes one argument, and generates a function as its result with the factor variable already set. So you can then use this newly made function on its own, with the factor part already pre-loaded. Its taking advantage of the scope in which the function was created - because it was created inside a block where the factor variable was set - it can use that variable. function test() { const value = 5; return function(newValue) { return newValue + value; } } const add5 = test(); add5(10); // 15
Why dont u have any semicolons
Is this javascript
Nicely! I made my \[own game\]([https://brett84c.github.io/portfolio/pages/crazy-conveyor/index.html](https://brett84c.github.io/portfolio/pages/crazy-conveyor/index.html)) using \[Matter.js\]([https://github.com/liabru/matter-js](https://github.com/liabru/matter-js)). I love physics-based games. Been trying to figure out what to do for my next one. 
Edge sucks!
Mute only mutes music. It seems there's no way to mute all sound effects. It would be nice to have a way to go back to the directions. Or, actually, just remove the count down. Instead of having "press K to skip" just show the controls until the user asks to continue. I would use the same key for continuing and for the initial screen. So "Press Enter to start" =&gt; [instructions] with "Press enter to play" =&gt; [game]
[Brake vs Break](https://www.grammar-monster.com/easily_confused/brake_break.htm)
Is there a link where I can play it?
Frontend is for LGBT
Ya, that would be better I think
Can't see your code, so if I'm wrong, sorry! You might want to look at requestAnimationFrame() and to pause you can use cancelAnimationFrame() I think this may be more performant than setInterval() also
Recursion. 
Hi /u/JTsonss, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Tandom, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/MistahQueen, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/iamjkdn, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/bryanpsd, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Nipz58, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/5James5, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/amiyasaha, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/thewolfandtiger, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/itandcsquestions, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Wow, amazing job! 
üôÑ
Acting like you're working but really you're just reading hacker news
It's cool, I actually enjoyed it.
To be fair I'm pretty sure this happens in the old arcade version to.
I believe you can cancel scroll by listening for 'scroll' event and cancelling event bubbling. Haven't tried tho.
Another option is to continuously call `setTimeout(‚Ä¶)`, and to check for `window.isPaused` while paused, to skip calling it.
&gt;I know about the bug's, I can't fix them without restructuring the entire game. I know the feeling. I would recommend reading "Clean Code" by Robert C. Martin. I wish I had read it years ago. It's easy to write code that current you can understand with the memory of all the problems you solved still fresh in your mind. But it's hard to write code that anyone can understand at a glance including you in a year who has totally forgotten how your application is structured and how you solved each problem.
yes, check out next.js for one way to do it.
next.js is build using react loadable so using this 2 together is cumbersome
You should stop using react-loadable. The license change may or may not potentially affect you (or your employer) in the future.
\+1
Meh, just use RxJS
Backbone is still my go-to for Models and Collections but never Views! I've had alot if success pairing with Svelte and Ractive for the views. BB is great for encapsulating your data along with functions for http and computed properties. 
A model and collection component which update in real-time (Node.js + VueJS recommended) - The collection supports real-time filtering and sorting: [https://hackernoon.com/framework-agnostic-real-time-crud-libraries-with-vue-sample-app-c73d717abd17](https://hackernoon.com/framework-agnostic-real-time-crud-libraries-with-vue-sample-app-c73d717abd17)
It's not really strange at all. It's just the extension of logical operators when applied to a language that has concepts of "truthy" and "falsey" values. What does logical "or" do? It returns the first truthy value, or the last falsey value. What does logical "and" do? It returns the first falsey value, or the last truthy value. &amp;#x200B; &amp;#x200B; &amp;#x200B;
bower *and* jQuery? So modern.
Thanks for posting! You inspired me to post mine soon
The game is fund and addicting! How long did it take you to firstly learn the necessary JavaScript to create this game? And how long did it take to code it?
I second that book recommendation - and would third and fourth it if I could.
[http://i.imgur.com/aydAWRa.jpg](http://i.imgur.com/aydAWRa.jpg)
&gt; const is short for constant, which means unchangeable. Unfortunately, **JS allows consts to be changeable (so there for it's literally the opposite of what it should be)** . Just because you can, doesn't mean you should. This is simply false. When you assign an object to a variable defined using const, what you are actually doing is assigning the ***reference*** to the specified object to the variable. You cannot change that variable to refer to a different object, hence **const**. You can, however, change the contents of the object to which the variable refers.
You are correct and I totally fubard on this.
Awesome game! &amp;#x200B; Two small suggestions to make it even better. \- Start it a little easier than it starts now, then ramp up difficulty. \- If mute, stay in mute.
I don't know how to tell you that you should care about other people. It's really disheartening that this attitude where you look to benefit at the expense of others. I realize they're just an attraction to you, but they're no less human than you and certainly no less deserving.
Lost me at ‚ÄújQuery‚Äù 
Epic game! Great fun... but I had to start playing with it. You should perhaps build your app inside a closure instead of directly on `window`. function yyy () { asteroids.forEach(a =&gt; { a.position.dx = -500; a.position.dy = 0; }); requestAnimationFrame(yyy); }; yyy(); and boom - all asteroids stay in one place for ya :) Or: check_ship2asteroid_collision = function(){} check_ship2enemy_collision = function(){} just turn off ship collisions altogether!
check Select2. 
jQuery is starting to be considered an old and outdated practice now, you won't find much of an audience here.
Hi, try free code camp. Search for Udemy coupons on Reddit and get free courses for JavaScript. Good luck 
&gt; IMO, "const" is a way of declaring to the human reading the code that you designed the system so that the value was not changeable No it's not, it's a way of generating a runtime exception when a variable's reference is changed.
Hi /u/migacz85, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/LiddoKamehameha, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/Tandom, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
There is Clean Code and The Clean Coder. Clean Code the one I should get? 
Open a JS console and enter `check_b2b_collision = () =&gt; 0;`
Cannot press to enter on my iPhone.
Assuming it's long enough, in the license file. No developer will ever find it.
fix the mute. as soon as you hit another key, sound comes back on.
[The Mozilla Developer Network has the information you need](https://developer.mozilla.org/en-US/docs/Web/API/Document). You can often search for `mdn &lt;whatever&gt;` to find what you want. That is the first result for me for `mdn document`.
Yep! Thats whatI I have been looking for! Thank you!!
Dude, great job!
super fun :D I love the smooth gradual deceleration when you stop moving. 
His is a cool idea ‚Äî were you planning on building it?
callbacks, promises. async/await.
Have you tried using `console.error` (or log, etc) or `alert` with [JSON.stringify(value)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) to see what is actually being created. The default `console.log` (and info, debug, error, etc, etc) can also use printf-like formatting, which may be more readable than template strings (`like ${this}.`). With this you can skip `JSON.stringify` and use `%o` or `%O` to output an object to the console easily and in a pretty easily readable way. And like printf it can also take one formatting string and many arguments of course.
Why are you forcing fill in the first array? And then mapping over an empty array? It seems like you are trying to force functions that don't belong. I'm all for functional when it fits but here `Array` doesn't have the necessary functions (at least as far as I can tell). Unless someone knows something built in that I don't, I'd suggest just doing it as a `new Array(rows)` and standard for loop through that `pop`ping an `Array(cols).fill(0)`. Don't try to force something that isn't supported imo. 
ES6, Promises, async/await, prototypes, callbacks, this keyword, Closures and a bit of design patterns (revealing module, module, mediator, pub/sub, factory)
Why are you attaching click event on close inside click event of thumbnail. You should move the click handler outside. The code you posted does not have a element with class thumbnail. In your removeClass you are trying to remove active class from image but the image does not have a active class. 
I put it inside of it because it wasn't working outside of that function either.
For me it is working after putting outside. Since the handler is attached inside of click handler for thumbnail, it won't work till you click thumbnail. Secondly, the image and modal-image-caption does not have active class, thus removeClass will not have any impact.
Ah, makes sense. Might be something else with my code then. Thank you
played it for a few seconds. really good acceleration on the vehicle!
Or F11 for full screen.
Buggy on Firefox. Great work though.
Try using something like [Eloquent Javascript](https://eloquentjavascript.net/) which is a very well written book on JavaScript. It teaches things like the basic stuff (variables, operators, functions), intermediate stuff (regex, modules, async, DOM), and advanced stuff (NodeJS and canvas). &amp;#x200B; I'd suggest reading through this and trying to do all of the challenges/projects as they are pretty fun and cool to do and will give you a nice idea on how to work on JavaScript projects. &amp;#x200B; Try to not forget that JavaScript is typically best paired with HTML and CSS to create awesome applications and websites. &amp;#x200B; After learning the basics/intermediate you can try and do some low value freelance projects for some easy money. &amp;#x200B; Please feel free to ask anything if you need help!
Understanding ES6 classes and object orientation in js. Both angular and react rely on this. 
For me, some basic JS principles would allow you to skip the library all together. - Knowledge on DOM manipulation and how the DOM tree is structured.. This would (probably more often than not) mean less reliance on DOM manipulation libraries (jQuery etc). Also what others have said. *this* keyword and how it‚Äôs scoped, pub/sub events, how to efficiently use callbacks, async/await (and other modern Javascript principles).
Clean Architecture is a good choice too.
Is it strictly JS? Or just general coding practices? I‚Äôm a graphic design major that is interested in web dev, so JS is my primary focus. Still worth it? 
this. 
You could disguise it either as or in an external link among a verbose comment for a given function. Vertical text is a good option since it‚Äôs hard to search. Again either in comments or in variable names. The text output of an obscure and useless unit test. 
- Immutable update pattern - How to handle side effects safely And understand why it is necessary
Bonus, man. well done.
Array.map, Array.filter, Array.reduce, and other such useful functional functions. Bonus: document.querySelector and document.querySelectorAll for searching through the DOM like jQuery's $('selector') function. 
Angular, Vue and React (although React is more of a library, rather than a framework). JQuery is still nice for querying the DOM elements but, if you use one of the solutions I mentioned, you will rarely find yourself doing that.
Reformatted for easier reading below [using 4 spaces because](https://www.reddit.com/r/node/comments/9h05if/submit_form_from_logged_in_user_with_userid_node/e68g40z?context=3) \`some code\` is only really good `for small examples` and \`\`\`some code\`\`\` just doesn't work that well. I'm not 100% sure how this works though, but will try to look into it so maybe I can actually be of some real use! ---- function viewProducts() { connection.query('SELECT * FROM products', function (err, resp) { if (err) throw err; var values = []; for (var i = 0; i &lt; resp.length; i++) { var record = resp[i]; var value = [ record.item_id, record.product_name, record.department_name, `\$${record.price}`, record.stock_quantity ]; values.push(value); } console.table(['ID', 'Product', 'Category', 'Price', 'Stock'], values); }) } function addToStock() { viewProducts(); inquirer.prompt([ { name: "selectID", type: 'input', message: 'Select product id you would like to update quantity of' }, { name: 'selectQty', type: 'input', message: 'Quanity to add to stock' } ]).then(function (answer) { var item = answer.selectID; var itemDB = ""; var quantityDB; var quantity = answer.selectQty; connection.query('SELECT * FROM products', function (err, resp) { if (err) throw err; itemDB = resp[item - 1].item_id; quantityDB = resp[item - 1].stock_quantity; }); connection.query('UPDATE products SET ? WHERE ?', [ { stock_quantity: quantityDB + quantity }, { item_id: itemDB } ]) }) }
Any important new features? The change log is not particularly helpful future someone who didn't go too deep into Electron yet.
1) Where react excells is in reusable code, and containerized code structure. It's not useful 5o compare it to the technologies you list, but in comparison to the jQuery paradigm, code is better structured, which makes it faster to build these rich user experiences. This is additionally true with the node, react, redux and either express or graphql stack, since context switching is minimal and it enables fast-moving development. There isn't a single thing that you can do in react that you can't do in other technologies, and to be honest you pay a performance penalty at times. However you will do it in much less development time. 2- not applicable. I work with the MERRN stack professionally, so I don't have a preference over the listed technologies. I choose to use them 3)functional programming is in vogue. Dynamic? You can be very dynamic in OO. JS is growing in both the functional and OO directions in response to demand from both camps. I am seeing a lot of enthusiasm for typescript as well, but both languages are growing very rapidly. 
Nice. Pretty easy to make a recursive nd array builder with that. const ndArray = (init, dims) =&gt; Array.from( { length: dims[0] }, dims.length &gt; 1 ? () =&gt; ndArray(init, dims.slice(1)) : () =&gt; init ); // 2x2x2 array filled with 0 console.log(ndArray(0, [2, 2, 2])); 
I agree with this, or maybe let us at least brush up against an asteroid. Still it's nice for a first attempt.
 function viewProducts() { return new promise((resolve, reject) =&gt;{ connection.query('SELECT * FROM products', function (err, resp) { if (err) throw err; var values = []; for (var i = 0; i &lt; resp.length; i++) { var record = resp[i]; var value = [ record.item_id, record.product_name, record.department_name, `\$${record.price}`, record.stock_quantity ]; values.push(value); } console.table(['ID', 'Product', 'Category', 'Price', 'Stock'], values); resolve(values); }) }); } function async addToStock() { await viewProducts(); inquirer.prompt([ { name: "selectID", type: 'input', message: 'Select product id you would like to update quantity of' }, { name: 'selectQty', type: 'input', message: 'Quanity to add to stock' } ]).then(function (answer) { var item = answer.selectID; var itemDB = ""; var quantityDB; var quantity = answer.selectQty; connection.query('SELECT * FROM products', function (err, resp) { if (err) throw err; itemDB = resp[item - 1].item_id; quantityDB = resp[item - 1].stock_quantity; }); connection.query('UPDATE products SET ? WHERE ?', [ { stock_quantity: quantityDB + quantity }, { item_id: itemDB } ]) }) }
I would use async/await. The changes you would need to make are add async keyword before your second function declaration and await keyword before calling viewProducts: async function addToStock() { await viewProducts() ... //rest of the code here }
Hi, Here's a quick and easy ES6 way of initialising a 2d matrix: &amp;#x200B; const array2d = (cols, rows) =&gt; \[...Array(cols)\].map(rows =&gt; \[...Array(3)\])
This looks to be the correct answer. OP viewProducts function was asynchronous therefore prompt was executed before viewProducts was completed.
variable scoping
Yah. People suggesting a lot of es6 stuff, but some array and object functions are so essential to any toolkit. I can barely manage 10 lines of code without using Array.map.
I also recommend this book. As a Brazilian, welcome and good luck! 
I see what you did there 
How `this` works in JS. I had to spend way too much time unlearning expectations from other languages getting bitten by stupid `this` bugs 
App Academy? I did it in 2013 and have an asteroids game too :)
Would you mind linking to the kata and show your entire code before and after editing for *optimal* callstack?
Firstly, for loops don‚Äôt involve the call stack. Secondly, Math.floor(foo) simply drops the fractional part of a number. 
Because a number is either even or odd. If you want to find odd numbers below n, there are at max half odd numbers less than that. For example n=5, So the numbers to check are 1,2,3,4. There are two odd numbers 1 and 3. n=6, So the numbers to check are 1,2,3,4,5. There are three odd numbers 1,3,5. And you take floor as the n is not checked for even or odd.
does this deal with heavy packaging builds?
Also: `n &gt;&gt; 1` would be more ‚Äúoptimal call for the call stack‚Äù, whatever that might mean. 
You don‚Äôt need jQuery for anything you did here. Also, I‚Äôd suggest a smaller data sample. It required a ton of scrolling on mobile just to see the actual code.
Async functions still use Promises. You can wrap the inner function call with a 'new Promise' or use s pomisifying utility, and return that Promise.
Short words can be split across the function parameters. function foo(h, e, ll, o) {} function bar(w, o, r, l, d) {} function foo(we, are, hiring, so, hit, us, up) {} I made a fizzbuzz that reads the source code of the function to extract the letters of fizzbuzz from the function parameters. const GO=( F,i,z,{[z[0 ]]:B},u, zz)=&gt;{} Hopefully this shows ok, I'm on mobile and copying is annoying. const GO=( F,i,z,{[z[0 ]]:B},u, zz)=&gt;B((F% u?'':GO[z [u/ u]] ()[z[zz- zz/zz]](u- u,u **u +zz -zz )[z [u] ](z [zz ],'' )[ z[/* **/ zz- u/u] ](u -u, zz- u/u ))+ (F% zz?'':GO[z [u/ u]] ()[ z[zz-zz/ zz] ](u -u,u **u +zz -zz )[z [u] ](z [zz ],'' )[z [zz -u/ u]] (zz -u/ u)) ||F )|| F&lt; zz** u-u **u +zz -u?GO(F+1,i ,z,i[z[u- zz/zz]],u ,zz):null ;//)[z[z z-u/u]])[ z[zz-u/u] GO(1,this,['log', 'toString', 'console', 'replace', 'substring', /[^a-z]/gi],console,3,5);
https://github.com/getify/You-Dont-Know-JS https://addyosmani.com/resources/essentialjsdesignpatterns/book/
a good resource is [https://developer.mozilla.org/](https://developer.mozilla.org/) 
sadly not playable on Edge, the screen moves as soon as I press one of the arrow keys and I can barely see anything after that.
It doesn't suck.
I played drunk, definitely was motivated to keep the music going
Really cool project, thanks for sharing! Is there any chance you'll release the source code for this?
The biggest source of interesting changes is from the Chrome platform itself. Electron 2 was on Chrome 61 and this new version is on Chrome 66. You can read the changes in these versions here: https://www.chromestatus.com/features 
It's about general programming and not about a specific field or programming language. My version's example codes are all in Java, but it doesn't really matter. Could be Pseudocode even.
Clean Code is a great book!
Testing. What to test, how to test, how to debug tests, etc
It doesn't support as many components of the standards as other browsers. This is why no self-respecting developer would recommend it to anyone or use it themselves. You don't want to appear foolish.
Amazing.. I loved it. As per the first game, its quality is great.
Many people use JS without a proper understanding of prototypal inheritance. So dig that too!
React in particular is predominantly class / object oriented based. You should have some basic idea of Object Oriented concepts: composition / inheritance, etc. An understanding of Object Oriented principles will also help you greatly in the design / architecture of your components and application. For example it's a principle of object oriented design that objects (or components) are loosely coupled - if you have a million props being passed to a component and / or its descendants then that component is much less re-usable.
I was gonna complain that async/await is just syntatical sugar around promises, but then I realized promises are really just glorified callbacks. The other thing to add to this list is observables / eventing.
Absolutely all of this, and I'd add advanced array methods. 
I'm confused by the context 
There's a great great course on udemy by colt Steele that goes over all of this in a clear and concise way. It's called advanced web development. You can generally find it on sale for $10 - well worth it, it's long and covers CSS, more advanced JS concepts and ES6, D3, and React. 
I am using requestAnimationFrame for rendering all the game elements. I'm using setInterval for spawning enemies, asteroids and power ups.
This wouldn't work. You need to convert the view products function to return a promise which is resolved in the callback of the database query. Look at what one of the other replies did to see how that is done.
https://www.codewars.com/kata/59342039eb450e39970000a6/discuss this is the one when you do it with a for loop it has a problem
That‚Äôs outside the scope of this thread
There is no need to write return in an arrow function, that is what is assumed that it already does.
I only looked at the demo where the modals don't work
I can't even access the page with all the redirects happening. Does anyone have the direct well-formed itnext.io link?
Sorry foe any inconvenience, https://itnext.io/roll-your-own-async-compose-pipe-functions-658cafe4c46f
[https://alternativeto.net/software/rethinkdb/](https://alternativeto.net/software/rethinkdb/)
Definitely a good thing to understand and is used extensively in JS (and most other OO based languages). But the way things are going, inheritance patterns are slowly disappearing in favour of functional/reactive composition. So definitely give [functional composition](https://github.com/getify/Functional-Light-JS)/[functional reactive composition](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754) a look into. 