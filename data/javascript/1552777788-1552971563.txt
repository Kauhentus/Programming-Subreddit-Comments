I haven't gotten a chance to use much of it, but I'm really interested in learning more about MatterJS. It seems really cool and the applications are there to build some really fleshed out things like games and life-like backgrounds. &amp;#x200B; [http://brm.io/matter-js/](http://brm.io/matter-js/)
Oh, I see! Thanks for the explanation :)
What's the point of == operator at this point. I don't think I've ever used it.
Yeah, I recently went down a deep rabbit hole trying to understand prototypal inheritance. Honestly, after doing all the research, I’ve realized it’s one of the more *sane* aspects of JavaScript. I think the thing that most people get stuck on, is why a lot of commonly used objects don’t directly possess their core methods as properties. Usually those methods are attached to the prototype object, because it makes more sense to have one copy of a function instead of thousands assigned to individual child objects. The strange part is how those objects are able to use their prototype’s methods within their own context. Basically, the `this` keyword, if included inside a prototype’s method, will refer to the *child object* that called the method, as if it belonged to the child. So inheritance works without having to directly assign the properties to the object. Super weird, but makes a ton of sense from a memory management standpoint.
You can get really fancy with closures
Check out JSFuck. It uses these concepts to convert entire JavaScript expressions into only these few characters.
The "this" keyword. In any of the OOP languages, this refers to the instance of the class that called the method, but in javascript all functions are objects. So that idea of "this" behavior is being run with quite a bit in js. Then there is understanding call, apply, and bind. 
Yup, Immer is great, and I now recommend it consistently. In fact, we use Immer in our new Redux Starter Kit package, which allows you to [write entire "slices" of state using Immer-powered reducers](https://redux-starter-kit.js.org/api/createslice), and without writing any action creators or action types by hand. Please try it out and let us know how well it works for you!
Try [KefirJS](https://kefirjs.github.io/kefir/) - it has a more concise interface, which makes it easier to learn and practice.
It's an anachronism at this point but one valuable thing about it is that it lets minifiers save a character on equality checks. In the future it'll be totally useless assuming web assembly becomes ubiquitous.
https://youtu.be/W4brAobC2Hc This helped a lot for me. 
I work on popular "mainstream" websites and haven't touched it at least since 2016
This was poetic 
It's just easier to do nesting and have an overview of your structure with jsx. I've used non-jsx versions (React.createElement, or Flutter) and jsx is much more legible. 
This is definitely one that I have difficulty remembering. Nobody does it by hand nowadays, but when I want to use it to debug or write some hack it's hard to remember. How do I find the prototype reference from an instance of an object? What has `__proto__` vs `protoype`? What other special properties are there like `constructor`?
I don't understand, you can do single file components with React too.
Good lord, that made me jump. My volume was all the way up!!!
You can still get a typical ES experience (if you want) with the current API: https://reactjs.org/docs/react-api.html#createelement
Arrow functions came to rescue with bind function that is a ugly mess
Can you expand on this? I know basic closures, but I always felt like it's something you should avoid
Which values are falsey. Obviously you just have to know the rules of the language, but decades later I *still* find it counter-intuitive that `0` and `""` are falsey, yet `{}` and `[]` are truthy because all objects are.
Agreed. One of the best talks I've ever seen on JS.
Calling people "shills" is just internet culture, not about JS.
Do a quick search on *currying* for a start.
it's useful when you want to test for something to be either null or undefined
Right on... Sometimes I feel like just throwing my hands up in the air and yelling "fuck this", but I'm not sure if I should because I can't remember what "this" refers to. 
Why would you even want currying, it's awful
I don't get what you are asking. "hard time wrapping your head around"? I don't think there is such a thing for an expert. JS is a very quirky but essentially simple language. It is a moving target so you need to work to stay up to date in recent features but I don't think there is anything that is hard to wrap your head around once you study it. Your pot body says something else: difficulty remembering about the language? Lots of things. I forget method names, argument orders etc. all the time. Just today, I looked at the method signature of .splice for the millionth time.
Promises
I think it's better understood by practice. Js is very different from old traditional languages, but it's really easy to grasp some things with just 20-30 lines of example code. Apply and call are similar, and bind comes in handy a handful of times. To me, some weird examples of closures or generators are harder to get a grasp of.
Not everything you haven't yet understood is awful, darling.
I think it tastes alright.
!! Is interesting in that it coerces things to a Boolean but it’s always weird to me that any empty object or array will return true :/
Like if you have timing-specific needs... observable needs ... recursion needs ... A closure will capture a variable that was in scope when a function was first defined and make it available when you call the function later. So, you can get very specific when it comes to model states, and you can get closer to OOP using closure techniques 
First one - it’s comparing instances Second - NaN is not equal to anything Third - [] resolves to true so it’s !!true Fourth - you should be [] != null Fifth- min value is the smallest float (negative number) Sixth - !== resolves to a bool, which can be equality compared 
XmlHttpRequest is dead! Long live XmlHttpRequest! Seriously, the new fetch API is quite simple and works with promises. You will never need an onreadystatechange handler again!
To be fair, most of my struggles came from getting Ember Data to work with my backend api. Also, WARN ME IF I GENERATE A COMPONENT WITHOUT A DASH OR AT LEAST ERROR WHEN I TRY TO USE ONE WITHOUT IT. The docs aren't the greatest as well. That being said, I'm building a side project with React and Ember + Ember Data takes care of a lot of the boilerplate. I honestly do think I could come to enjoy it if I spent proper time to learn it.
Your using a dynamic language so use == and === when required. Need to check the equality of two different types but don’t care if they are the same type of type? ==. Need to compare two specific types that are the same ? ===. The dynamic nature of js gives you the power to do these things that simply are much harder to do in static languages such as c. 
It uses promises but what makes it special is the batching. It reduces the number of requests you need to make while keeping your code readable because the batching code is abstracted away. Your code looks like it's awaiting the single resource it needs at that particular instance but what's really happening is at the end of the event loop DataLoader has aggregated all the requests for the same endpoint, dropped any duplicates, and then batched them all together so that only one request is made. If you find yourself making a lot of requests for the same type of resources from different parts of your application it's worth watching the video on the github page because this will seriously improve the performance of your app and/or simplify the code if you're already doing your own batching and aggregation like we were doing before discovering this library. &amp;#x200B; The example that Facebook uses is for events. You have events on your wall that that need to be fetched. Your friends have events that they are going to. These also need to be fetched. Some of them might be duplicated. These events are displayed on different parts of the page so it's hard to "collect" them to minimize the number of requests. Say you have 3 events that need to be fetched and you have 3 friends each with 3 events that need to be fetched. With DataLoader each part of the page that needs detailed event info looks like it's fetching the one event that it needs. On first glance it looks like you're making 12 separate fetches to the event endpoint but in reality only one request is being made.
A coworker wrote a really nice React Material Design autocomplete feature using this library. He said it was really pleasant to work with.
It’s funny how you (at least I) never really understood stuff like memory leaks, n problems, etc. until they happened, and I read the log and was like “ooooh that’s what that is and here’s what I did wrong” Is it strange css, specifically stylus, helped me understand prototypical inheritance and its power? Like I got the idea from day 1 but didn’t see the actual value. Then I’m writing some mixin functions and it all clicked. 
The Import/Export syntax. Honestly, it feels so much worse than a `require`, and I wish they had gone with that.
You shouldn't define your interfaces to be both nullable and potentially undefined in my opinion. Better yet wrap your data in ADTs like Maybe.
Well, I didn’t completely mean it sarcastically. Angular is owned by Google and React is owned by Facebook. Both are open source, but there have been some impopular moves that have polarized people for or against them in the past, and it could happen again. On the other hand there’s Vue, owned by a Chinese *nobody* without a corporate agenda, but a very active community, who envisioned a framework that would combine the best of both worlds, unapologetically porting popular libraries from the NG/R counterparts. Easy to dive in (works even from a CDN if you’re so inclined), easy to deploy and with a pretty awesome cli. It performs just as well on the average webapp. The documentation is a charm, too. Is it true that you will find some Chinese in the issues board? Well yeah. But if that is a dealbreaker to you, think that just as well as some of us learnt English to better understand documentation in an era where everything is written in English, you could also make a small effort and enable google translate on the page.
I use == for evaluating parameters that are coming from a request without the need of parsing them first.
I know this is a small one but I always have to google switch statements
Closures are a very nice way to encapsulate semi-complex tasks that could require a lot of runtime variables. If you can structure the code with helper functions that's great, but sometimes passing arguments can get messy, and sometimes you might want to format data before you work with it. There's some concerns that are valid, like lack of reusability, problems testing this black box closure you've written, overhead (although not as much with newer engines), and so forth. If you find yourself writing a ton of closures somewhere you should think about how to split it up, but as with most things it's a balance. A closure can make your intent clearer and your code cleaner if used wisely. Let's take a simple use case where we need to call a bunch of functions in a nested object for some reason: function recursivelyCallWithArgs(source, ...args) { function recurse(src) { // find some function f you want to call from the source f(...args); // Find some child structure s to step into recurse(s); } recurse(source); } If we don't want to use a closure, you might do something like this: function recursivelyCallWithArgs(source, ...args) { recursivelyCallWithArgsHelper(source, args); } recursivelyCallWithArgsHelper(source, args) { // Same stuff as above, just call the helper instead recursivelyCallWithArgsHelper(s, args); } This is a naive example, and there's almost always many ways to go about building stuff, but I wouldn't just say that closures are categorically bad. Knowing what they do and what their benefits and disadvantages are is a good way to stay well rounded and creative.
Not exclusive to JS and WebGL, but GLSL. Some magical stuff people make is crazy. I have no idea how they do that without proper debugging tools for the code in GPU.
bluebirdjs mapseries does that too
https://phaser.io 🙌
I've worked with RxJS and Angular (2+) for a year, but honestly I didn't see much benefit of using RxJS over native promises. At one point I had 2 pages of written notes of what each RxJS operators did. It makes code so hard to follow and sometimes to even write. It definitely was really cool to be in Reactive Functional Programming pattern, but it did not improve anyone's productivity or velocity in my team.
Glad to hear it
Glad to hear it
Fucking promises. 6-7 years of JS, still can't wrap my head around them.
closures can be great for real real privacy if we want to make a counter with a private `count` property and a public `increment` method, we cannot do it with classes: ``` class Counter { constructor() { this.count = 0 } increment() { this.count += 1 } } // `count` is public :( console.log((new Counter).count) //&gt; 0 ``` however, we can use a closure to encapsulate private functionality away from whatever we choose to expose: ```js function createCounter() { // truly private let count = 0 // returning exposed method return { increment() { count += 1 } } } // now the `count` variable is tamper-proof :) console.log(createCounter().count) //&gt; undefined ``` there is a performance downside to using the closure instead of prototypal inheritance, which is probably negligible in most cases ```js // all class instance share a single `increment` method const classCounter1 = new Counter() const classCounter2 = new Counter() console.log(classCounter1.increment === classCounter2.increment) //&gt; true // each closure allocates a new `increment` function const closureCounter1 = createCounter() const closureCounter2 = createCounter() console.log(closureCounter1.increment === closureCounter2.increment) //&gt; false ```
This made me laugh. I’ve played so many times the “WTF is ‘this’” JS lottery.
Oh, I absolutely don't mind seeing some chinese there and there :P I'm part of the people who learned english online, so I understand! It's just that I saw "corporate shills" in relation to the React Gang in the past week online, so I thought some type of revolt was happening.
I haven't found a good reason to use generators or iterators myself. If you use a custom iterator symbol, you end up with a much worse performance than a simple for loop. Not to mention it can really confuse other devs. Yea sure you can get really fancy with it, but I think simplicity is better than creativity.
it's also worth noting you can get wild with mixing and matching this kind of stuff, javascript is the wild west this is a higher-order class, or something like that :) ```js function createCounterClass() { // truly private let count = 0 // proper class with shared methods return class Counter { increment() { count += 1 } } } const Counter = createCounterClass() const counter1 = new Counter() const counter2 = new Counter() // cannot access `count` from outside console.log(counter1.count) //&gt; undefined // instances share identical `increment` method console.log(counter1.increment === counter2.increment) //&gt; true ```
As counterintuitive as it sounds: you probably shouldn't've used some part of the language in the first place if you have trouble remembering it. Allow me to explain. Ever since having dabbled in LISPy languages, I like to use only a very small subset of JS: * arrow functions * boolean expressions * `.map`, `.filter`, `.reduce`, `.every`, `.some` * spreading syntax * destructuring syntax * JSX This is enough to get me 95% of the way there. Never felt the need to use fancy features like iterators, generators and class syntax.
The rules that the == operator follows. I made a rule in my code bases never to use it so I don't need to try and work out what it means.
Not an expert but I'm having trouble wrapping my head around how JavaScript handles memory. I learned programming through C/C++ and memory was fairly straight forward. But how JavaScript handles memory seems cryptic. 
Neither have. They’re also needlessly verbose and like u said confusing as hell to look at. I’ve yet to see a point or usecase for them that doesn’t have a better method already available. 
This guy deserved a gold if he hadn't had one already 
"this" was a bad naming choice. If it were called "context" instead I think people would have less of a hard time with it.
I told this joke once at my internship once and nobody laughed :(
&gt;What are the top things you have difficulty remembering about the language Shouldn't be a problem in the first place. Ever since being exposed to LISP-y languages, I like to use as little syntactic sugar as possible. Allows me to spend more time on important design decisions rather than trivial implementation details. Has been working out beautifully so far. &amp;#x200B;
Sometimes you have no choice, like if you want access to the headers of a fetch response. I usually end up writing a util function to covert them to an array or object 
[removed]
I am quite enjoying the courses offered at freecodecamp.com there are quite a few different sections depending on where your knowledge is, and the price is perfect. 
There's a pretty cool use case for generators which is coroutines like [this](https://github.com/tj/co). There have been a few examples of implementing it in JS, but I could not understand the code enough to make any changes for my use. In Unity, I think coroutines are used to add delays to a function execution like this pseudo-code: PauseThenStart() { Wait(3000); Start(); } I wanted a similar clean syntax for a game loop, but I haven't found a good way to do it.
Watch and code is the best thing to use if you’re a beginner or even someone who knows a little
Simplicity &gt;&gt;&gt;&gt; everything 
Github
It took me a long time to really understandand `this`, because very often I though that I finally got it, while in reality I didn't, but as of recent, after reading YDNJS chapter on the subject, I'm finally feeling confident, and I had no problems with `this` in my last project which used a lot of functions with `this`.
Ironically, this this is actually the least problem I personally have. Have a class or a function keyword? New this, who there. That's it.. 
I have small bit of knowledge of JavaScript, I been teaching myself bit, I just want to find more websites that focus on more languages along with Javascript and java
Yeah that’s one of the benefits of JavaScript (or perhaps it’s curse): it tries to abstract a lot of the details of memory management and performance optimization through the runtime processes, like garbage collection and type inference. It allows for much easier high-level coding, but it has its trade-offs. &gt; Is it strange css, specifically stylus, helped me understand prototypical inheritance and its power? Oh I can totally see the similarity. That’s actually a brilliant analogy... *”Cascading”* property references, essentially. Even the overwriting process is similar.
fetch is great, really simplifies Ajax.
I use call backs / promises all the time, mainly because I memorized how they should be used and structured, but my brain still doesn’t get them.
Not even close...
Same here. It's not the concept, that's perfectly clear, but the syntax of it always confuses me for some reason, and I think it's simply seeing resolve and reject in the callback. My dumb brain is always like "wait, where the fuck did those come from?!" it just always feels like there's a magic piece of the puzzle that I'm not seeing (and effectively there IS). But, I manage... I just always seem to have to think harder than I about it all.
The spread operator usually makes me have to stop and think. People like to use it in "clever" ways that, to my brain, are often confusing. I'd personally prefer 3-4 lines of clear code instead, but whatever.
You can't always control the format of the data you consume
The YUI (Yahoo User Interface) library. Like Dojo and ExtJS, it was lightyears ahead of its time. It was the first major framework to introduce a lot of innovations that are typically (and erroneously) attributed to the first wave of modern frameworks a la backbone. The current wave of frameworks is largely defined by a recursive and efficient rendering of views driven by a unidirectional data model. But nearly every other piece of a modern framework was present in YUI, nearly _10 years ago_. When I was first learning to code I was tasked with building a photo gallery and chose YUI as my learning tool (because it was a very "app"-focused framework unlike jQuery etc.). My early career got such a huge boost because I happened to make that choice over something like jQuery/mootools or Dojo/Ext. YUI will always be my favorite library. 😁
This
service workers
Yah generators can work great for async stuff but I’ve yet to use them other than messing around here and there. I’m sure there’s usecases but I’ve just not delved that deeply into it and I’m not confident enough to use them effectively really 
Javascript.info Hands down best source regarding learning the language, especially the regExp part made it really easy to understand They also cover some advanced topics like prototype chain and closures etc.
Try asyc/await. The syntax to me is a lot easier to read 
I'll expand. Closures are patterns that enable devs to simulate private, public and static methods and properties - known in other, usually strictly typed languages. It's important if you want to get to the next level in understanding javaScript. Avoiding them is not a great idea. In short, you never want some unknown 3rd party library to ruin YOUR app. If everything were global, and nobody used namespaces...code would collide, you'd get race conditions and programs would routinely crash. 
Here's a great talk about that: https://www.youtube.com/watch?v=cCOL7MC4Pl0
webpack is giving me hard time!
This specific promise resolves synchronously because it has no async work. Work that completes asynchronously typically takes a callback and some associated data internally and which it uses when that work completes. The JavaScript environment provides the necessary context as that data.
Easy. Just write all your code in the global context (no functions, just pure platform API calls), and ‘this’ will always refer to the Window object... ... well, most of the time...
Take a look at Pika: https://www.pikapkg.com/about/
I’m a huge fan of RxJS and [Redux-Observable](https://youtu.be/AslncyG8whg). The new pipeline API introduced in RxJS 6 is quite easy to understand after you’ve learned the basics, it’s very powerful. 
If JS wasn't basrardized to look like Java by royal decree it would have looked much different (very likely better). "this" was a known wart justified just because of that purpose. 
Why we change frameworks every 6 months.
www.javascript30.com www.udemy.com
I've found subjects can be super useful. I used to be anti rxjs, but once I learned the features beyond a 'this is how you migrate your promises' context, the switch in Angular makes a lot more sense.
Do I need to give a shit about this guys library to watch this
9 years, still not getting fucking RxJs and , promises was piece of cake near it :/
I'm not going to attempt a concise explanation (many of the existing comments are great). It clicked for me with Kyle Simpson's "Functional Light Programming" book [link](https://github.com/getify/Functional-Light-JS). The Fun Fun Function channel is also great, but I found Kyle's book to be a better foundation first.
I’m not a JS expert, but I also can’t wrap my head around them. Or moreso, why/when I would need to use them. 
I understand “this” as being the context of whatever function you’re in. I’m not sure if that’s totally accurate in all cases, but it helps my wrap my head around it. 
Promises are just monoids in the category of endofunctors, what's hard to get? 
in js, theres `for..of` to iterate collections versus `for..in` to look into properties of single objects. its different in python which only has `for,.in` for both cases.i seldom use generators
https://github.com/pull-stream/pull-stream
How is it that different? What can you do in one that you can/can't I'm the other?
Hi /u/th3originals, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/benjaminiscariot, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Promises
When you create a Date object with `new Date(year, month, day)` the month is zero-based but the others aren't, I know it kinda makes sense from a programming point of view but getting 17th March 2019 by using `new Date(2019, 2, 17)` confuses me every time...
Damn setting up Laravel, which comes with Webpack, makes me insane every time. 
I completely understand it, it's just difficult to articulate for some situations. In practice, though, you really should only ever be using it in the context of a class. Anywhere else and you're probably asking for trouble (or confusing/unreadable code). Plus arrow functions help to not have to think about it so much
I've found (async) generators pretty ergonomic for iterating all the items out of some external service that's more efficiently accessed in batches -- some things offer a cursor-type interface for this, but when I have to roll my own in a pinch, generators do the job pretty succinctly, and it's easy to control the batching behavior in a way that doesn't require the consumer(s) to think about it. async function doSomethingToAllItems() { for await (const item of fetchItems(myClient)) { // Do something } } async function* fetchItems(apiClient) { while(apiClient.hasMoreItems()) { yield* (await apiClient.fetchNextPage()).items; } }
[This one](https://www.youtube.com/watch?v=cCOL7MC4Pl0) was what opened my eyes
I made a piano webapp for my son, [https://github.com/TheIronDev/piano](https://github.com/TheIronDev/piano). &amp;#x200B; The keys are very large, and buttons are colorful. On a mobile device it only plays a single octave. &amp;#x200B;
No, I don't give a shit about Swedish Dr. Strange's library and still found it interesting and informative.
That is probably a good sign actually.
What don't you like about it? We wouldn't have most of the game-changing treeshaking abilities without static exports
This right here. Everyone's mentioning relatively high-level conceptual did like generators, promises, this, closures, ... That's the easy stuff! Or at least, it's the stuff that interesting to learn and sticks one you have it. Meanwhile I'm here trying to use `contains` every time I mean `includes`. Or was it the other way around? 
JavaScript has the unfortunate property of all objects being truthy. 
Nice, at 20 it was player: 20 computer: 13 tie: 12 It did get a little smarter but I had to think to beat it otherwise it'd tie often with a low chance of winning or losing. Felt silly but fun
&gt; Need to check the equality of two different types but don’t care if they are the same type of type? That's called writing fragile code. I'm sorry but there is just no argument for using `==` over `===`
TIL about `for await ... of`. Thanks
It's useful for building up things in stages, particularly when the early stages are easy to screw up, or are inconvenient to rebuild again and again, or whatever. const buildApiClient = (apiKey, url) =&gt; (configuration) =&gt; ( new ApiClient({ ...configuration, apiKey, url }) ) // Other services can import this pre-authenticated client and set // their own config, but they can't screw up the URL and API key. export const buildAuthenticatedClient = buildApiClient(process.env.API_KEY, process.env.API_URL); // elsewhere import { buildAuthenticatedClient } from './apiClient'; const client = buildAuthenticatedClient({ custom: 'configuration' });
I wanted to solidify my Vanilla skills before starting to learn React/Vue, so I've made an SPA with Vanilla only: [https://tiramisu77.github.io/CoinWatcher/](https://tiramisu77.github.io/CoinWatcher/) 
Yeah, if you keep repeating the same move it'll catch up with it after 10-20 losses, but if you keep switching between rock and paper, sometimes it doesn't learn. To be complete honest I'm still working on my Multilayer Perceptron, it's not optimal.
Your code got all fucked by markdown
Until you end up writing a library to automatically parse the response, deal with errors from the endpoint, return the proper things at the proper time. I thank you, I’ll use axios. 
Yes, I kinda agree there.
Spread is good for testing something out quickly, and passing an object of props into a react component. Everything else should use Object.assign() for readability. 
Wow. RxJS Observables look like an unnecessary wrapper around things with a nice, inconsistent API. I'd drop that shit in the garbage with speed if I were you.
Love it when people make out JS to be different from "old" languages that it is just as old as
Fetch is honestly great. I’m absolutely new in some aspects to JavaScript. Well nearly all aspects. I understand it and the functions; I can read it and what not but have trouble generating own code. But man, fetch rules: AJAX in jQuery is easily the easiest of the two; but to my understanding the community is moving away from jQuery in some aspects because vanilla can do it all? Anyway yeh. Fetch rules! 
Tagged template literals. I just don't understand why it's a thing. Why not just make a regular function that takes a string and args? I haven't seen a good use case for it yet.
I picked up The Modern JavaScript Bootcamp by Andrew Mead on Udemy about 36 hours ago for 13 bucks. So far it's been the best resource I've tried. Other stuff I've checked out were Eloquent JavaScript, a bunch of YouTube courses (varying quality), Codecademy, and the MDN Web Docs.
I've had to effectively reproduce bind w/o libraries for browsers that didn't support it... ended up with som nested closure contraption... blegh 
How difficult is it to write something like `fetch(...).then(res =&gt; res.json());`?
And, you know, wrong. A prototype is exactly what it sounds like: the _prototype_ of an _object_. When you instantiate the object, the object is created as a reference to the prototype, then decorated by its constructor. When you extend a prototype (e.g., `MyExtendedClass.prototype = Object.create(MyClass.prototype);`), you instantiate without decoration. You then apply the parent constructor via `MyClass.apply(this)` within the extended constructor, equivalent to calling `super()` inside a constructor. Of course, with the ES6 class syntax, you don't really need to know these fine details.
too much text cya!
don't forget != vs !== but if you want to learn more about it, search "abstract equally" here https://medium.com/codezillas/let-me-coerce-you-into-liking-javascripts-dynamic-typing-system-3cd22c19cb64
No, it can be useful. And it's really simple to implement. const curry = (fn, ...cargs) =&gt; (...pargs) =&gt; fn(...cargs, ...pargs); const clampTo0 = curry(Math.max, 0); clampTo0(5); &gt; 5 clampTo0(-3); &gt; 0 That said, it's rare I have a use case for it.
Iterators can actually serve as a useful abstraction sometimes, especially once you start doing more OO design. I’ve used them a few times and they can help to make code more readable. I have yet to find a good use for generators though.
TLDR: it's an alternative to callbacks where instead of pasding the function a callback, you just call it, and call 'then' on the return value and pass then a function that accepts the real return value and does a thing... maybe also call catch on that and pass it an error handler... they do more than that but you don't need most of it
I think the general answer is don't worry about it. If you're writing Javascript (as opposed to Javascript interpreters), you're not doing it for performance, and you don't have control over a lot of it anyway... though js does have much better performance than a lot of other scripting languages especially if you avoid the slow parts like for-in and for-each
I don't think they're as complicated as you think... basically if you sat down and tried to write a vanilla js solution to callback-hell getting out of hand... they're one of the things you might end up with 
If you spent two seconds watching you'd see it's just a library to evaluate JS in-line for easier presenting
You got NaN and !! right. The first has nothing to do with instances or references. `[] == ![]` because the right hand array is forced into a boolean (true) so that it can be negated (false). `Array == boolean` is resolved by converting the boolean to a number (0), and the array first to a string ("") and then a number (0). 0 equals 0, you get true. If you don't think that chain of conversions is fucked up, I don't know what to say - but of course, the original comparison makes no sense to begin with. (`[] !== [] ` *would* be true due to reference comparisons, though.) On the fourth point, again the right-hand boolean is converted to a number (1) and the left-hand array is converted via string ("") to number (0). 1 does not equal 0, you get false. A direct conversion from array to boolean would yield true, but the comparison algorithm doesn't do that. You're close with MIN_VALUE (maybe just a typo?). It's the smallest *non*-negative number. Nothing weird going on with the comparison, just an unfortunate name for a constant. Dunno what you're talking about with the sixth one. 
Bind and apply are fucking game changers. I don't know how to code callbacks and handlers (which require an instance) without them.... 
I made a video to explain it https://www.youtube.com/watch?v=PAqo9AlVd-w basically for regular function this always refers to obj it's called on. abc.func() abc['func']() this in the func refers to abc if you call func() like so then it refers to global scope. arrow function this refers to scope function was declared in. bind,apply,call you can define this https://www.udacity.com/course/object-oriented-javascript--ud711 this course finally clicked it for me.. highly recommend it too
Sounds like its a good thing it was only an internship
you mean ``${}``? its a babel thing. i still predominately use `.format()`
another topic i did video in, sorry if i dont sound good, while i understand concept doesn't mean im good teacher. but i did provide all info needed. TLDW: all objects have property __proto__, abc.__proto__ when call property on object, obj.prop, compiler tries to find it in object, if it cant then it looks for in its __prop__ and unless object residing at __prop__ is an Object (the final Object in JS) it then looks in __proto__ of object that was present at __proto__. So it keeps looking at __proto__ of object until it reaches Object. When you use new keyword to create an instance. new Abc(); 3 things happen - new object is created - object.constructor = function Abc(){} - object.__proto__ = Abc.prototype now if Abc.prototype has properties they are available in instances created from that function through proto look ups. 
Thank goodness for async/await. Code is so much more readable.
One thing that was hard to get used to was that it was difficult to copy objects. What looks like a copy is actually a copy by reference, but value. To do an actual copy, you have to clone or use a handful of methods that return new objects. 
just another tool in the toolbox, I don't know that it's anything you couldn't have juryrigged with 0ms setTimeouts, closures, and callbacks before... the syntax is way cleaner though 
Triple-ticks don't work in Reddit-flavored markdown. &gt; closures can be great for real real privacy &gt; &gt; if we want to make a counter with a private `count` property and a public `increment` method, we cannot do it with classes: &gt; &gt; class Counter { &gt; constructor() { &gt; this.count = 0 &gt; } &gt; increment() { &gt; this.count += 1 &gt; } &gt; } &gt; &gt; // `count` is public :( &gt; console.log((new Counter).count) &gt; //&gt; 0 &gt; &gt; however, we can use a closure to encapsulate private functionality away from whatever we choose to expose: &gt; &gt; function createCounter() { &gt; &gt; // truly private &gt; let count = 0 &gt; &gt; // returning exposed method &gt; return { &gt; increment() { &gt; count += 1 &gt; } &gt; } &gt; } &gt; &gt; // now the `count` variable is tamper-proof :) &gt; console.log(createCounter().count) &gt; //&gt; undefined &gt; &gt; there is a performance downside to using the closure instead of prototypal inheritance, which is probably negligible in most cases &gt; &gt; // all class instance share a single `increment` method &gt; const classCounter1 = new Counter() &gt; const classCounter2 = new Counter() &gt; console.log(classCounter1.increment === classCounter2.increment) &gt; //&gt; true &gt; &gt; // each closure allocates a new `increment` function &gt; const closureCounter1 = createCounter() &gt; const closureCounter2 = createCounter() &gt; console.log(closureCounter1.increment === closureCounter2.increment) &gt; //&gt; false &gt; 
&gt; and programs would routinely crash. Like... _more_ than we're used to.
hmm.. from what i can see on my end, reddit seems to be correctly rendering my triple-backtick blocks in the web browser... are you using the app or something, where perhaps reddit has different markdown support?
No, that's just normal template literals and those are super useful. I mean: foo\`my name is ${firstName} ${lastName}\` That'll call function foo with 3 parameters. More info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates
That's just it. Legit procedural style syntax that behaves asynchronously. It's so much easier to read that style of code.
 var that = this; Now instead of yelling "fuck this", you can yell "fuck that" or even "fuck that too" for an extra helping after a good "fuck this".
You're in the wrong company! Haha! They don't deserve you.
Yea subjects are useful but the problem I had with RxJs was that code had to be written either full-RxJS or no-RxJS. It wasn't easy to opt in or out of RxJS. Using promises with RxJS was fine through operators like fromPromise or asPromise, but if you wanted like side effects, it wasn't that clean. 
Not sure I understand what you mean.
+1
Service workers. It’s a mystery to me.
Are you familiar with [styled-components](https://www.styled-components.com/)? They use it to great extent.
I always mess them up, too :-p They are nice because they are super performant in most languages, they are kind of bulky, but nice when you can use em. 
Oh you programmed it!?! I barely looked at the source. Is it really just those 4 js file? (and that one service worker that doesnt count) Did you use a library?
Nope, I've been avoided using library to increase my programming skills. Did all from scratch. I took a machine learning class at the university and watched a bunch of videos about it, trying to fully understand it.
It definitely noticed how I was beating it and countering me after a bunch of losses. Then I had to be random because I couldn't predict if it was going to counter my counter or just counter what I typically do. I count the ties as it not predicting me. Definitely got harder and won early a few times when I didn't think it'd try to predict me doing the same move 4 times.
thats weird
triple D's? sorry, couldn't help myself.
I wouldn't have a clue where to start I'm giving you two thumbs up from across the internet
Fair. Fair. In other languages your object can access methods and properties that the parent has, as if they were part of that object. It’s pretyy similar, but I think of it as: instead of “copying” those methods and properties, JS has to go and find them. It checks if it has it, if it does, great. If it doesn’t, then it checks the parent. If the parent has it, great, if not check the parents parent. And it goes on until there are no more parents to check. Hopefully that helps :) 
complex destructuring assignments. Whenever I want to use it, there's a 50% change I'll get the order wrong. ie, given an object that looks like var obj = { field: "data", foo: "bar" }; if I want to destructure it, I'll often try this first: `const { myFoo: foo, myField: field } = obj;` instead of the correct `const { field: myField, foo: myFoo } = obj;` And then VSCode scribbles its red squigglies furiously under the whole thing. It's dumb and I'm mostly over it now, but it felt counter-intuitive for the longest time. 
 This is true for a lot of cases, but you have to learn how to handle error handling and multiple async calls at once. 
&gt;Swedish Dr. Strange Lol, I read this without clicking the link and immediately knew you were talking about MPJ. Perfect description.
Try catch and promise.all
Thanks a lot, kind stranger. 
Don't use switch statements. You're creating a fall-through risk that will almost certainly bite you in the ass eventually.
What you pay in head-change there, you get back double in static analysis. That is to say, your transpiler can figure out what not to include in a bundle.
I'm not alone! Still supporting IE 8 and flash...
Really? Why?
fetch is so damn simple and easy, haven't needed to use anything else (including axios) since.
Same here on this. Never quite _got_ GLSL. Not to strong on my WebGL in general either, though.
That's really helpful to read your perspective of Stephen Grider's courses considering that the guy I quoted said he learnt nothing from his approach. I will give him a second consideration now. As for Max's courses, I've finished the nodejs and express portion of his "complete" nodeJS course and I can say that even though it started out promising, I've realized that he covers topics at such a high level that you might as well not be learning it at all. Also, I don't like how disorganized his speech is, he's always trying to rephrase what he says 2-3 times because he didn't say it clearly the first time. That's probably because English isn't his native language.
That's pretty well the gist of it with jQuery. It was awesome back when some of that stuff was complex/annoying to do, but it's so easy to do in vanilla now that it doesn't make sense to have a large library like jQuery in a project.
If your code ever is going to compare incompatible types your code is possibly not fragile but definitely leaky. At no point should data of an accepted type flow through the wrong pipes. If you're passing gobbledygook then GIGO applies. ln my opinion `==` causing problems is a symptom of bigger problems in the codebase and a sign to inspect the data flow. For instance, I've seen people complain about `==` messing up the code when API response data has changed, without acknowledging that the root of the problem is insufficient type checking at the source.
&gt; wanted a similar clean syntax for a game loop, but I haven't found a good way to do it. I wrote [a blog post](http://journal.stuffwithstuff.com/2008/11/17/using-an-iterator-as-a-game-loop/) (in 2008!) about exactly that. 
not sure which part, but: callback hell is when many, maybe similarly named callbacks are being passed around, passed through to secondary or tertiary functions, or get passed callbacks of their own... and generally get out of hand and hard to track. promises aren't anything magic, they don'taad much new that couldn't be achieved with the Javascript that existed before... they're just a nicer standard syntax, and collection of utilities, to address a common problem. they are async which is always a bit weird, but they address that problem by providing a clean syntax to say "do this thing, then this thing, then another thing, and catch all of the errors along the way" with callbacks it's usually synchronous, but no guarantees. you hand off a function that may or may not be executed... may or may not be handed off to something else, may or may not be passed to an async function, and aren't guaranteed a return value... you could write som utility functions to make this all more orderly and predictable... to guarantee returns, to either guarantee synchronicity or asynchronicity, but they would end up looking a lot like promises... 
"Cryptic" is the right word - as in "hidden". The truth is, JS itself _does not_ handle memory. The engine does, in a GC process that, essentially, walks through the set of active closures and frees up any references that are no longer in use. As the developer, you never see it - so like radioactivity, it's worrying, since it's invisible.
Array.reduce()
Haha thanks for decryption, I like "swedish dr strange"🤣 aka MPJ quite a lot 😁
Yap thanks as well didn't knew about this 😃🙏👏
I mean, a callback is "hey, when you're done, do this thing." Literally telling the function to call you back. A Promise is just an object representing the thing to do, with a standard API for defining its callbacks, e.g., `new Promise(thingToDo).then(callHereWhenDone).catch(callHereIfFailed);` That's really the sum of it. There's some details about how return values get dealt with in the callbacks, but they're really simple once you've got your head in the right place. Weird how something can be so confusing (ITT: lots of fellow Promise-confused humans), when it's really so simple.
I used to think this too. Then I learned the "clever" ways, and I _never_ want to go back.
&gt; https://old.reddit.com/r/javascript/comments/b1y5zj/js_experts_of_reddit_what_javascript_information/
Generators are used for redux-saga. It sort of makes it easier to test with a lot less mocking based on what I've seen. The cost is uglier syntax throughout.
Webpack's a documentation nightmare if you have to configure anything past "gimme a server for this directory, with this entry point". Meanwhile, Create React App does you one worse, by "helpfully" encapsulating a set of defaults and hiding them behind react-script - which you can't then configure in any meaningful sense.
Could you explain why? I rarely use them maybe you can finally give me a reason to ditch them completely 😁
const this = context;
[is-thirteen](https://github.com/jezen/is-thirteen) is a must have for all apps. It takes care of all your localization needs for comparing a variable to 13.
It doesn't make sense from a programming point of view. It never, ever did. Dates are 1-indexed. They are not arrays. It's an honest-to-goodness break in the API, and it's inheritance from Java, which _still_ hasn't fixed it (their 'fix', in the Calendar API, is to have a constant, `JANUARY`, whose value is, wrongly, `0`). 
Hey, sometimes it's a good thing. And sometimes it's churn. The reason it changes so often is that the language itself is pretty weak, frameworks are the wood putty we use to fill in the cracks, and you have a glut of developers who think their wood putty is better than what's out there. Sometimes, a fleck sticks and spreads, and lo', we have Gobber(dot)JayS, the big new thing.
Does Axios still do XHR under the hood or do they use fetch now? 
Yea man. I have been using this recently and it is blowing out clients minds 
I read your book! I learned a lot from it. Is the pattern included in the book? If not, you should definitely include it!
1. Never use `==`. It's wrong, and most linter rulesets are happy to tell you that. 2. NaN === NaN is not Javascript-specific. It's part of the IEEE 754 spec. Your _processor_ will tell you that if you ask it in assembly language. 3. &lt;!== is _not_ a valid JS comment. Dunno where you got that. `Number.MIN_VALUE &gt; 0` is a fair WTF. Also, `Number.MIN_VALUE &lt; 0` -&gt; `false` is equally WTF. As is `Number.MIN_VALUE / 10 -&gt; 0`. I have literally no idea what's going on there.
&gt; Need to check the equality of two different types but don’t care if they are the same type of type? No. I never need to do that - at least, I never need to do that without first casting them both to the same type, so I know what the hell is going on.
Promises and Observables serve two different purposes. https://github.com/kriskowal/gtor covers the differences pretty well albeit from a standpoint of a few years ago. Promises do not change overtime. Observables will change overtime. A good example is node's readline will take a createReadStream. How are you representing a promise as each line of a file is resolved? You can't without building it up in memory first and then passing the result on.
How to add stuff to/remove stuff from an array. I know it's obvious if I think about it, but I always have to look it up on MDN. There are a few different `Array.prototype` methods, like `push`, `pop`, `shift`, `unshift`, `slice`, `splice`, etc. I can kinda remember what most of them do, but I always have to check anyway just to make sure which is which.
The good news is that overall the trend of classes with inheritance up to your eyeballs has essentially disappeared by most standards and many have moved onto more functional styles.
Functors
RxJs is basically every function one can think of under the sun to work with an observable with any way one can think about them.
I could, but it's easier if you just forget a `break` at some point. That's how I learned not to use them in C. You only fuck up on the same things so many times before you realize it's not you, it's the language. Fall-through is not a syntax error, and that means _unintended_ fall-through can be a source of hard-to-find bugs. And unintended fall-through is hard to _spot_, exactly because `break` is such an out-of-place symbol in your code: you notice if it's there, but you're less likely to notice if it's not. Besides, it's such an edge-case of if/then/elseif, I don't know why it was created in the first place.
[Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) I'm not really sure what they are used for. Is it some way to define a new custom data type? What are some real world use cases for them?
No, I'm on web - though I'm in old-reddit. [Screenshot](https://imgur.com/2VDu7ZG). 
I never said promises and observables were the same things. Also, you can pass a callback to createReadStream events. Observables don't give you the ability to subscribe for free. They have written a lot of code underneath to make it happen. Obviously RxJS is calling .next() everytime there is a chunk of data coming from the read stream. You don't need RxJS for reading chunks of data. It just makes it more convenient since you can chain operators.
That's a crazy stance to take. A decent argument against a switch statement would be to use polymorphism. But to say you shouldn't use switch because you could accidentally forget a `break`... well, then you shouldn't an `if` because you might accidentally use `&amp;&amp;` instead of `||`. 
So as a developer, I have to run my code on each browser and monitor the memory management for leaks? 
1. Totally agree, == is something in general that's weird, so it's for this thread 3. I mistyped it, updated "&lt;!-- I am a valid comment" is a valid comment
Interesting. Are there any other slow-parts I should look out for? 
Catching that some piece of logic is wrong is just a matter of walking through the logic. Catching that a control structure is missing is something you could prance right over for an hour before figuring it out. I know. I've done this. In C. Repeatedly. It was like the 20th time before I learned to just avoid the structure altogether. If a language's switch _allows_ fall-through - that is, falling through is not a syntax error - then it's a design risk. Take it if you like. I don't, and my code's more stable for it. And, I mean, [I'm](http://ericleads.com/2012/12/switch-case-considered-harmful/) [not](http://debuggable.com/posts/code-insults-round-1---why-switch-blocks-are-dumb:4901d363-d210-482c-9794-65bd4834cda3) [alone](http://c2.com/cgi/wiki?SwitchStatementsSmell). 
hackerearth.com has a simple straightforward breakdown of data structures, algorithms, and where to use them. The site also focuses on developing competitive code so you can learn a lot from reading fully optimized code examples. Plus it's FREE! 
Tbf call and apply are hardly ever used anymore, and bind tends to go out the window when you write everything in arrow functions and classes, which tends to cause this to work like you usually want it to. I think of "this" in old style code to usually be whatever started the current chain of execution, although it's not exactly that either 
console. logs, especially in loops... if you need them make another async logging function... updating the dom... that's why react and such use a "virtual dom"... which models the dom, or the part you care about, in an object then writes several changes at once back out... only if something actually changed, and at a more controlled interval besides "immediately" to a lesser degree, hoist your variables declaration(iif not value assignments) and any other work that doesn't need to be re-done every time out of loops 
A callback for the events? Are you talking about events like line, data, close, etc.? If so, I know. You still have to work with the underlying line event and wait to resolve a promise on the close, which is why I said the two aren't comparable and you can't implement the line event as a promise. I understand the Observables aren't free. Promises weren't free for several years either. I'm not here to argue Observables are gifts from the gods, but rather that they serve generally a different purpose when they aren't made to fit a use case solved with something simpler like Promises. I also wasn't trying to argue that Observables were the only game in town.
I don't write JS too much, but at work we have a Java linter that won't let you submit code that could fall through unless it's explicitly commented (like, there's a comment that contains `// Fall through because ___`) which seems to catch that issue. We also have a secondary lint, that detects if the switch is non-exhaustive, so if you have some logic that switches based on an enum, and some other programmer adds a new enum, they know they'll have to add it to this switch, because the compiler tells them so. Which I find useful
Fwiw anything more than an if..else these days and I'm probably using a predefined Map. I have been converted, unless I'm programming with extremely tight memory requirements. 
Well, in the current set of modern browsers, the _ways_ memory leaks are all basically the same. So crack open your favorite browser's profiler, and look for what objects never get collected. The exception is storing data objects on older browsers' Element objects. Early Firefox, IE8 and below, and _very_ early Chrome all had a problem where doing this would cause the Element (DOM objects had their own GC) and the object to keep a reference to each other, so neither would get freed. Generally speaking, you don't do that anymore. It's safe to store a string on an Element, so the correct way to keep metadata for it is to keep a GUID on the Element, keep a metadata table in JS that references the GUID, and observe the element so that when it's removed, so's your metadata. Which is a pain in the ass, really. So the correct way to keep metadata on an element is to _redesign your architecture to not keep metadata on elements_.
It’s something which is not specific to JS but I always have to google it. Encoding and Floating numbers.
You don't worry about leaks
Yep. Basically, you _made_ a fall-through a compiler (rather, linter) error. Which is basically the only way you make switches safe.
Great answer! I'm going to have to learn how to use that browser profiler. The Chrome and FF dev tools are a whole other mystery box too me. I only know how to use maybe three of the tabs. 
you might find this interesting: https://old.reddit.com/r/javascript/comments/b21rvv/how_random_can_you_be/ i posted it as another thread, cause it's cool on its own.
[removed]
I disagree. It’s not elegant. 
Require looks just like normal js. Import feels out of place, and a file with import isn't really js, but follows different rules: javascript module syntax. It's weirdly static, for example you can't pass a string or function as the name of what to import, and you can't import inside of a function. Require just felt so native and natural in comparison. Require is more js in style, while import feels foreign.
Coming from a Java background, I sometime forget JS is asynchronous and break my head as to why a variable is undefined, even after working in JS for 4 years. Same with the String.contains not there in JS. Also the async await stuff. Just can't wrap my head around it. 
Yea your example is not possible with promises, but there are a lot of other examples where RxJS overcomplicates things. Your example is perfect for observables, and I wish they started preaching about observables to be used there instead of on other examples like replacing user event listeners or promises. They promised to make event handling simple, but failed to deliver imo. 
TL;DR You just have to dive into it. My first web dev job was on a team that was running a custom webpack config and they didn't even know what they were doing. They did get hot module reloading down (which I love) so I used their config to create my own sort of boilerplate. It was a headache to upgrade to Babel 7 and add the more common development packages, but it was worth it to learn how to setup webpack. Most people I've come across don't deal with webpack config and want to because CRA is a great tool. But with great tools comes great mystery boxes. 
Honestly this over everything. I understand how to set one up. I don’t have a good real world example of how or why I should use one. 
JS needs to get off its ass and give us the ability to map/filter on lazily-evaluated stuff so we can write const doSomethingToAllItems = () =&gt; Promise.all(fetchItems(apiClient).map(/*do something*/))
Why kids like typescript and react. 
Order doesn't matter...
I understand the first two but the third... So you're saying hoist the declarations of variables outside of loops and assign values within the loop? 
[removed]
Eslint shouts at me when I do that.
I can never identify the type of module when I see the code, whether that’s an ES module, AMD or CommonJS. I have to specify that when importing it into my project.
Vuejs 
yup (declaring them with let actually prevents this all together)... the reason being declaring the variable takes more time than just reassign the value. in general if you are using a calculated value in a loop, and it doesn't depend on the index value (usually 'i')... then calculate it outside the loop once instead of re-doing the work inside the loop every iteration, especially if the value is going to be the same either way.
That makes sense. Still a lot to learn. 
Why people want classes in js
There is a chapter about game loops, but this technique is a little too specific for the book. Some things make sense as standalone articles. :)
Code splitting is like reading foreign language. 
I thought it was interesting that I made a simple script: var buttons = document.querySelectorAll('button'); for(var j = 0; j &lt; 200; j++) { var rand = Math.floor(Math.random() * 3); buttons[rand].click(); } and the neural network won every time. (20 iterations)
Agreed -- it's kind of fun to tinker with composable async generators to get partway there, something like... async function* map (fn, xs) { for await (const x of xs) { yield fn(x); } } ...from which the results can be collected... async function collect(xs) { const ys = []; for await (const x of xs) { ys.push(x); } return ys; } await collect(map(str =&gt; str.length, someAsyncStrs())); ...but yeah, not exactly the thing, and certainly not the most idiomatic JS code.
Huh? So you want to fetch things via an api. Then map the things to return promises, then promise all those? That's incredibly simple to do with JS as is. Are you hung up on trying to do that with one line of code? I mean, if this is in the browser, should obviously avoid that many requests as it is...but I can't imagine it being any more simple with JS as is or wanting to do things differently. Or you are just one of those look at me I use Rust/Scala people and needed to remind everyone again. 
If you're trying to get a variable called `context` to match OPs description wouldn't it be `const context = this`?
Am i the only one who likes switch statements 
I'll get back to studying......:(
If I was drunk and had to design a feature, I would design tagged template literals 
What is the purpose? It feels like iseven or isodd. 
Monads
It is meant to make `window.open` easier to use. Take a look at the following code: ``` Jasop("https://example.com", {height: 100, scrollbars: true width: 200, title: "MyWindow", replace: true}) ``` Now take a look at the parsed equalivent ``` window.open("https://example.com", "MyWindow", "height=100,scrollbars=yes,width=200", true) ```
The only time I use it is to check for null and undefined at the same time. \`value == null\`
How does that make it easier? It wasn't hard in the beginning. 
You are probably correct.
Found them useful to split work in a simple way. E.g. I need to iterate through 10 million elements in total, but only 100k elements per frame to keep the browser responsive. Just yield after every 100k elements. 
It lets the function access the interpolated variables without turning it into a string. func(\`color: ${props =&gt; props.value ? 'red' : 'blue'};\`) That just turns into a string with the function literally injected into it - there's no way to call the function now and it's invalid CSS. func\`color: ${props =&gt; props.value ? 'red' : 'blue'};\` func now has access to the function and can call it whenever it wants to build the CSS string.
Thank you for your suggestion yesterday. I went with a memoized approach. Theres still a few caveats but its at a pretty decent stage now. It will be a part of the next release.
Implement the Promise function. It's not that hard, and you will get it afterwards.
They're used the hood in redux saga. I haven't had to use them myself, but understanding them goes a long way in knowing why sagas are a good pattern
The exact order in which multiple events, timers, next ticks, immediates, etc will execute in Node. Always have to pull up a reference and take a moment mapping it out.
&gt; without acknowledging that the root of the problem is insufficient type checking at the source That may be true, but if the frontend verified the expected type with `===`, it would be aware that something was wrong. Whereas if it used `==` and just blindly carried on, it would likely result in a buggy/broken interface. If you're aware of the wrong data format, you can at least present an error message &gt; If you're passing gobbledygook then GIGO should apply Without a specific scenario it's hard to say, but I might argue that in this case, you probably shouldn't be comparing anything anyway (apart from maybe checking that the value is populated at all)
Maybe it is better to show than to tell here: https://codepen.io/anon/pen/rRvZVb?editors=0010
ah, how interesting.. i updated my code blocks now :)
Vue is okay. I see it as a cleaned up angular2, while angular 2 is what happens when angular1 is driven off a cliff. React is just better than vue in every way that matters. I say that as some who works with vue more often than react by a decent margin . Vue will have a role helping people transition out of the angular mindset. But react is simpler and far more elegant. 
💃 *fixed*
String.includes is there now ;)
What opened my eyes was when I understood that when you return a value within a .then, it actually returns a promise that resolves the value.
Dates... Just fuck everything about dates, especially when handling users in multiple timezones
This is a TIL for me :o
Vue is more readable and understandable, and these are of paramount importance.
That paired with localisation!
I switched to Callbag.js)(https://github.com/staltz/callbag-basics) to handle my reactive programming. It's reaaaally lighter, it handles all I need and creating custom operaror is easy. 
closure fml :/
I initially disagreed with this initial post, but I found you eloquently articulated yourself in subsequent replies. I am curious what you think of state machines and how you would implement them without a switch? I love me a state machine. 
That's so dumb. I opened it in my mobile browser, clicked it a few times, and then just simply closed the tab. I can't read Japanese. Did she prank them, or did she tell everyone what it was beforehand? I mean hell it's not a virus, it's just like, what, less than a dozen lines of javascript?
Well, you're talking about the machine's reducer, right? const reducer = (state, payload) =&gt; ({ [ACTION_A]: () =&gt; { /* ... */ }, [ACTION_B]: () =&gt; { /* ... */ }, /* ... */ }[payload.action]()); This can even be made extensible: const reducer = (state, payload) =&gt; reducer.cases[payload.action](state, payload); reducer.cases = { [ACTION_A]: (state, payload) =&gt; { /* ... */ }, [ACTION_B]: (state, payload) =&gt; { /* ... */ }, /* ... */ }; 
That's why you have ESLint, and it warns you of such problems (including that specific one), allowing you to notice and fix the problem not in an hour, but less than 30 seconds.
wait, which joke?
Why they introduced classes.
go on.. what specifically made it click beyond the basics?
the problem is thats not standard... rx is as much a language as it is a library.
can you elaborate on why you think the parent child analogy is not useful for thinking about classes and instances? you assert it is “a good way to confuse yourself” but i dont see why.
Ok. Say you have a class, its subclass, and an instance of that subclass. From the context of the instance, if you say "parent", to what entity are you referring?
Currently learning React Native and having a hard time making Redux + React Navigation click. I'm the type of person that needs to really understand something to use it but I cant get it to "click". 
ah sorry i asked that question and reread your comment a few times and decided to change my question 😅 since i think i just have not been introduced to a “superclass” but to answer here, subclass would be the immediate “parent”. i get the nuance you are trying to point to here tho.
Right. The linter _makes_ it a syntax error. A switch without a syntax error is dangerous. A switch _with_ a syntax error is (relatively) safe. Still, in the _vast_ majority of cases, an object does a terser, faster job.
Surely the JIT compiler would spot this?
You might want to learn about `import()`. Both dynamic and static imports have good reasons to exist and make JavaScript better and while node style require feels natural, it has many edge cases and competes with requirejs in a browser environment and so on. 
Why would you use fetch to provide a high level api? It makes more sense to go with xmlhttprequest imo.
Yea Ember Data adapters and serializers are a mystery to me. We use a JSON:API server so we hardly have to deal with any of that. I'm guessing you are using Ember 3.6+? Earlier versions of Ember cli did show an error when generating a component without a dash. They removed it once they added AngleBracket Invocation in Ember 3.4. The reason it can't throw an error in your template is because it can't actually know 100% sure that you are trying to invoke a component if you are using curly invocation. (It could also be a helper or a value on the context). I would recommend switching to AngleBrackets. They will be fully documented and the recommended way to invoke components once Octane is released. Your templates will feel way more modern and React-like. It will actually throw a compiler error if you try to render a component that doesn't exist. 😁
Here are some of them..kinda self-promotion but i hope you like them..Open for criticism :) The one about infamous "this" - [https://medium.com/@silentlad/the-scope-of-this-in-javascript-d0cf20da3cba](https://medium.com/@silentlad/the-scope-of-this-in-javascript-d0cf20da3cba) How to make your resume an NPM package - [https://blog.usejournal.com/how-to-make-your-r%C3%A9sum%C3%A9-an-npm-package-fc5d6b6a3fbd?source=activity---post\_recommended](https://blog.usejournal.com/how-to-make-your-r%C3%A9sum%C3%A9-an-npm-package-fc5d6b6a3fbd?source=activity---post_recommended)
Hi /u/silent-lad, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If it helps in any way think of it as a very literal worker who has to flip through a stack of letters. She has these instructions (that's the function you hand to the reducer) and a notebook (the second parameter the `.reduce()` accepts): Take out her notebook (that's the first argument, the accumulator) take one letter off the top (that's the second argument of that reducer function), follow her instructions and write down the results onto her notebook. Then put away her notebook (`return` the accumulator at the end of the reducer function). Over and over again until there are no more letters left in her stack which will leave her with a filled notebook at the end. Which is what a reduce function returns. You can get very clever with reducers, they can replace `.map`, `.find`, and other array methods as most can be described in a way that boils down to transforming an array. That can be useful if you need to combine multiple array methods into one for speed or otherwise. But I found that sometimes having less elegant code works just as well and is so much more readable. Good luck. 
[removed]
In case someone is knowledgeable: I get how to navigate between screens but I dont understand how to do that conditionally. For instance, clicking the Login button to auth via Firebase. I dont want to navigate to the Logged In area without making sure a user object is first returned.
Because browsers
I understand them now, I just had hard time learning them when I started but yours is a good analogy nevertheless and agreed sometimes being more readability is actually being more elegant. 
Come on, using object to pass params is always at least as convenient as to use string and in majority of cases - more convenient.
Well, it is old but it is actually a little different. It was designed to work inside a browser and used for small scripts, and because of retro-compatibility issues some of its weirdest shits have survived until today. You can call it similar to C, Pascal, C# or Python, but it's not that much. Hell, the XHR object? Prototypal inheritance? Yeah I don't think you had that shit in many languages.
The possibilities to be honest. I did some research when I started to learn 6 months ago. The learning curve is okay as well, frameworks are popular, it's much easier to try to get a job in the industry. You can also do the software development, so you're not limited to the web only. Once you get the good grasp of JS i believe everything else will be easier.
Yes.
Typescript because it transpiles to JavaScript and adds types. React because it is a more declarative way of building user interfaces than vanilla JS or jQuery. 
I am relatively to in js too, but It's very pleasing that you can write something in a few minutes and test it without compiling it, I also like the syntax of js for some reason and the amount of useful libraries is very nice, from webs to games!
In our (me and my friend) free time we have wrote an URL shortner called [allun.ga](https://allun.ga). From today it's in open beta, feel free to use it! You can find the source code on [my github](https://allun.ga). Some technical details: * hosted on firebase * written in ReactJS, deployed with Webpack * [\[GTmetrix\] PageScore A](https://gtmetrix.com/reports/allun.ga/gJ7W2PFB)
Is this actually the case? I have been wondering about this, aren’t all the decelerations handled at compile time and would just be ignored at runtime, not making a difference if it is declared in a loop or not? Do you know of any good reading on this topic? 
It seems like RxJS set it's goal to be as inclusive as possible interface-wise. This means that often times you'd be able to accomplish the same result using different sets of "Operators". In the context of Language design, it is generally considered to be a bad practice. A good language designer should be thrifty regarding which features she chooses to incorporate, and avoid functional duplications at all cost. Kefir provides unlimited freedom for Observables creation and manipulation in comparison to other libs, but it's doing so using a relatively compact and concise interface.
I chose JavaScript because I learned it as a first language, and because of the possibilities. All the other kids in my 5th grade class started talking about scratch, and how it was so fun and how I should join it. I joined it, but found it extremely easy. So I picked up JavaScript and later learned python too, just for the challenge and knowledge. Also, I love browser language.
Three things define web pages: 1. HTML (content) 2. CSS (presentation) 3. JavaScript (behaviour) JavaScript is used to control what happens once the page has loaded. It couldn't have a specification defined as JavaScript because of an unrelated language called Java, so ECMA allowed them to specify one as ECMAScript. JavaScript has several versions, such as ES3, ES5, ES6 (also ES2015), ES2016, ES2017, ES2018 each of which adds interesting and beneficial things to the language.
Js is a frontend programming language that can be turned into a backend one with node.js (a javascript framework)
My last stop before JavaScript was Python/Django. In 2009, while working on yelp-style website I noticed that my Django back-end could be easily reduced to a REST API server and most of the code can be moved into browser. I started taking JavaScript seriously, i.e. trying to use it without jQuery. Around the same time, I was looking into Tornado, non-blocking Python server. At JSConf 2009, I heard Ryan Dahl introducing Node.js and decided that he sounds so crazy he must be right. On a more pragmatic note, it just hit all the right points: single language for browser and server (in time where most of my server was moving into browser); async, non-blocking nature; passionate community coming from all walks of life, many from the server-side like myself. I started porting my Django project to Node.js and seriously investing into becoming full-stack JS developer. Never looked back since.
Oh yes. I use this all the time. It's possibly the main reason why I haven't routinely moved to react yet (has anyone got a wrapper?)
Live coding capabilities, ease of use, no build systems necessary, relatively powerful with either browsers or node.js, can be seriously fast compared to other scripting languages.
Most accurate answer.
But you arguably should map the data as it enters your application so that you're more agile should the format change in the future. At this point, it's such a rare occurrence that you're better off being explicit for the sake of those who follow you. Or, indeed, as I said, there are many functional utility libraries that offer something along the lines of `Maybe.fromNullable` that handles the same issue far more elegantly.
Huh? You must be talking about TweenMax with every single plugin. But even then I don't think you'd come close to 500k. TweenLite is 20k Even if you throw in the Ease pack and the CSS plugin you're still at somewhere under 40k 
It is what cool kids do.
"For What is JavaScript build for and how in used in browsers and node" - I'll get back to you once I decode this cryptic message
Because hype.
I like them too. They serve a purpose.
I agree with you, the order seems counterintuitive to me as well and I have to look up an example every time I go back to it. It gets even worse when you've got sub-objects.
/thread
Doubt it
It's mostly accurate, although you can bind/apply a this context to a function, as well as arrow functions implicitly binding the context to where they were declared
Also having `this` implicitly refer to the global object. We already have a keyword for it, all it does is make it possible to accidentally create a global variable
Nope 
Tbf you can eject CRA, and they have the awesome feature of breaking your build in the process. So it means you get a good introduction to how the scripts work
With destructuring usually you don't rename them: const {field} = obj So with renaming: const {field: renamedField} = obj It's like: `import {field as renamedField} from './module'` except with a colon instead of `as`
The last thing you said there is actually a great mnemonic, thanks!
Symbols can be used for private properties (although they're still accessible through reflection), they're also useful as a guarantee that there are no name collisions.
JS chose me
don't forget the response code checks, because you probably don't want to success handle your errors, oh and also remember to catch the failed to fetch error
Do...do you actually think that a class/object for making HTTP requests - something that JS got several years in - is some kind of unique language quirk for its era?? And incredible, when you compare it to a bunch of languages that are themselves almost nothing alike, you find that it's not much similar. Who would have thought? 
It's a bit late now that I only use JS for quick small NODEJS script :).
&gt; which you can't then configure in any meaningful sense That's my biggest issue with the library. I use CRA and I love the fact it spins up a complete boilerplate in seconds, but I had to eject so many times before because I wasn't able to make a stupid little change in the configuration... Oh, also I tend to dump half of the shit they provide right away after ejecting.
This + with node you can prototype api very quickly with extremely fast builds compared so building .net web api 
Most popular use case would be to define your own iteration behaviour via `Symbol.iterator`, otherwise there isn't really many uses to them (not to say you shouldnt use them).
I share your confusion. This helped a little: https://medium.com/intrinsic/javascript-symbols-but-why-6b02768f4a5c
Thats probably because the net is very good at detecting the same button being pressed. You need to add a delay or your random calls will return the same result. think it's seeded on millisecond.
When jQuery started, IE did ajax through an ActiveX control instead of the XmlHTTPRequest object used by Firefox/Safari. IE6 and below didn't HAVE the XmlHTTPRequest object. jQuery unified the API with its $.ajax method.
Yeah! The way the fields and values look completely backwards to me too, no matter how many times I do it. Sometimes I just resort to skipping destructuring altogether. 
Why people get so worked up about classes. I love classes. Now half the people in this thread want to kill me. Also Promises. 
It’s been around for awhile but async await confuses me. I think the syntax for ES6 promises are much more readable / easier to understand. 
I agree, they are available for free here: https://github.com/getify/You-Dont-Know-JS
That’s actually a pattern some devs use who don’t understand this (though the idiom is to call it “self”). By declaring a var you can then take advantage of closure to get a predictable value. But it’s no substitute for [understanding how this works](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes).
That’s what strict mode is for. If you’re using ES modules you don’t even have to opt in. 
I started learning JS in 2002 as an apprentice programmer. I was tasked with rebuilding a Flash app in JS but it was unrealistic at the time so nothing came if it. After that I moved over to PHP and didn’t touch the frontend for a few more years until I learned Flash/Actionscript. Suddenly Flash was declared dead, HTML5/jQuery became popular and I went hardcore on learning JS. Finally Node was released and I jumped on that straight away and went full stack JS, ditching PHP and Ruby backends.
No
It is a weird syntax, i also Google it every time. 
proxies and reflects I get what they are for, but have no idea how to apply them in real world scenarios
&gt; and it's inheritance from Java It's more like inheritance from C, which is also the reason for Java having this API. &gt; it's inheritance from Java, which still hasn't fixed it (their 'fix', in the Calendar API, is to have a constant, JANUARY, whose value is, wrongly, 0). The`java.util.date` API has been around for more than 5 years by now. JodaTime for much longer than that.
&gt; just another tool in the toolbox, I don't know that it's anything you couldn't have juryrigged with 0ms setTimeouts, closures, and callbacks before... the syntax is way cleaner though You can do async/await-ish code with generators and the stuff above, with a somewhat different syntax: `async () =&gt; {...}` =&gt; `async(function*() {...}` and `await stuff;` =&gt; `await(yield stuff);`
If you take the time to actually learn it instead of just trying to learn the parts you think you need then it's actually quite simple 
Because it's the most dynamic and supported language available. Things like eval(), overwriting functions at runtime etc. You won't get it on compiled languages.
I'm actually surprised he didn't benefit as much from that course. It might be the case that he took it before it got updated, because I'm not familiar with any of his other courses but heard that his "old courses" weren't as good as the latest ones, and maybe the React course was one of those before the update a few months ago. Other than that, comparing his teaching approach to let's say Andrew's (Andrew's JS course vs Stephen's React course) I think Stephen goes way more into theory and loves those diagrams! From a point of practicing, the course is just a code-along, but I tend to do a lot of the work upfront and then watch the rest of the section to see how he thought and did things. This sort of "review" coupled with emphasis on going deeper into theory really works for me. Also, I think their professional experience is quite similar time-wise, but Stephen places more emphasis on getting you job-ready when he teaches. &amp;#x200B; About Max's course, I understand why'd you think that. He does indeed scratch a surface of many concepts and doesn't go too deep into it (I guess he just went for quantity over quality) which can work but isn't the best choice if you want to get deep into node.js. Like I said in one of the other comments, I think this course can be a good complementary resource to Andrew's course since he covers some topics that Andrew doesn't. He definitely has that disorganized speech, haha. I don't think it has much to do with his level of English, it feels more like he just knows what he's going to talk about but doesn't make a script or anything. When you compare that to Andrew and Stephen, they both are laser focused on what they want to say in any given time.
Read the YDNJS chapter on it. Once you remember the few rules about "this" it's pretty easy. And the only place I've seen the rules explained clearly is in that chapter. It's all about how a function is called and a subtle edge case when you assign a function to another variable.
The entire You Don’t Know JavaScript book series which you can find free on Github.
That's because javascript wasn't meant to be an OOP language. I heard it was made compatible with OOP because of how popular Java and they wanted to piggyback on that hence "JavaScript". I have found that once you understand the relationship between objects and functions the "this" keyword becomes very easy to understand. You just have to forget about classical OOP for a while.
Try parceljs. Never using Webpack again! 
simplicity, flexibility, ease of use, scalability. i absolutely love this language and how its growing the last few years.
I recently ejected a CRA to customize it. It's honestly not too difficult to reason about. The one annoying thing is that they offer custom logging to the terminal, that crap sucks when you add stuff to the build
I’ve done so in many different contexts and I like them! And I think that’s why I can generally do things with promises and callbacks (yes, I know what callback hell is) but my brain still feels like it doesn’t get what a callback really is up to. 
Exactly, these margins might be good for desktop but on mobile 10px is more than enough. The unordered list in the indented paragraph needs a new line for every other word. It’s disgusting...
I'm with you on this one, in that I rarely if ever used observables in any "cool" way. I've read all the documentation and seen all the nifty examples, but somehow the actual problem space so rarely calls for solutions like that. I do chalk it up to mode of thinking, though. If reactive patterns were somehow enforced or encouraged by the language itself, it might be a fun and interesting way to develop, with *possibly* some net positives for the whole project. I sort of feel the same way about functional programming as a whole. I'm a Haskell enthusiast, but I have little shame in mutating state when programming in Javascript if it favors readability and simplicity. When I look at a codebase and I see some value being computed from tons of composed flattens, maps, curries, reduces, etc, I usually feel like it's just a dev showing off. It becomes almost unreadable at times. 
[This revelation](https://i.imgur.com/QwRC6gY.png) solved all my service problems for good.
Yes, it’s so beautiful. Especially given the auto curry and “data-last” approach. A breath of fresh air when programming Javascript
Hahaha, Exactly :D
Closure ,this keyword &amp; prototype that's about it
Why would you be using it to build a desktop app? Wrong tools for the wrong job.
Check https://sdras.github.io/array-explorer/
Depends on what you intend to develop.
Yes, for front-end, browsers. For those coding JS in backend though...
This guy has a hard time with the french press, don't know how much I can trust him!
Сause it is fast, strongly typed and nice looking. But no, I'm talking about other languages, this one just works in browsers.
I thought I knew generators, then I tried to explain how they worked to my team and drew a blank. I then wrote a presentation and learned a lot more. They're so powerful. Essentially you can add middleware to line-by-line async code, how cool is that?
Sequelize uses symbols to define parts of the object you pass to it so it can construct the sql query, for safety, in case somebody passes user data inside it. User data cannot have symbols. That's my best use case for it 
You should check out the [Parcel Bundler](https://parceljs.org/), it's what CodeSandbox uses by default. Everything just works, you only need to specify the input file and you're ready to go. It does allow room for customization despite being zero-config by default, but most of the time you won't need to do so. I've fully switched from webpack and get almost the same functionality without having to worry about boilerplate code or configs.
What's wrong with JS in the back-end? Node's performance is excellent for non-CPU intensive tasks. Also, it's non-blocking I/O system allows for thousands of concurrent connections on it's single thread, making it an amazing solution for social networks, blogging platforms and anything in between. The only bad thing I can point out from using Node in conjunction with the Express framework for the past year, is the event loop itself, on which Node is pretty much based on. If you've got additional asynchronous code within the asynchronous nature of Node, you can expect functions not returning responses in time, having unwanted side-effects, but those 'bugs' are extremely rare and usually solvable within minutes.
Whenever I consume json data, it takes me a few tries to get the right combo of starting position, and array/object pointer right. I'm always off by one too high or too deep. 
Why on earth they introduced the =&gt; syntax for functions. If they wanted a more succinct version of anonymous functions, they could have used a far less alien syntax.
Got \~2 years of JS experience, most within front-end development, but for about a year I've been coding in the back-end using JS as well. JavaScript, even though there's a whole lot of hate going towards the language, is beautiful. Even though people do prefer statically typed languages, and they want to know what kind of input a function shall receive, etc... The lack of those things is what actually makes JS so darn good. I freaking enjoy having to solve an issue, since you are thrown into it without any form of guidance, and then you are expected to solve it, and once you do, it feels so damn rewarding. But, JS is amazing for it's large ecosystem and modular nature.
any time you lead with "am i the only one who" the answer is no, you are not the only unique special snowflake that does something.
As to the speed, I think another difference in favor of NS is that they use the V8 engine on android whereas RN uses JavaScriptCore. Also, as a Vue dev, I'm ecstatic that they have official support for Vue now and that has caused a fast growing segment of NS. It's never going to replace RN but for Angular and Vue devs it's a great alternative and it's always good to have competition. 
Heh. That's cute. Digging through the docs is much easier, though!
Are switches obsolete now that Map is around?
can you give me a legit real world example where i'd put currying in a typical crud app codebase that uses mostly OOP and some functional elements (ie the vast majority of codebases web developers are working on)? i've been looking for a canonical use case for currying for like 8 years, and no one can seem to provide an actual reason to use currying that couldn't be done with more typical patterns like maintaining internal state. the problem with currying in the real world is that it's novel compared to existing patterns. 
fetch is so confusing to me. there are some parts of dealing with responses in fetch that just violate [the principle of least astonishment](https://en.wikipedia.org/wiki/Principle_of_least_astonishment) for me. i find myself having to look up fetch documentation over and over because things don't work the way they seem like they should.
they are not equivalent though, remember that arrow functions capture `this`. I *think* this is the main reason for the syntax change.
it's super easy. just like it's super easy to make a responsive layout in css and then blog about it. the thing is, in real life, requests don't work magically all the time. so you have to have a shitton of error checking code to make sure your api is sending responses in the correct format, to make sure the requests actually went through properly, to make sure the format of the request is correct and a dozen other different things. fetch makes this very tedious and code-heavy.
Promise, generators, this and stuff are mostly ok for me, but I'll never remember the difference between `substring` and `substr`. At this point, I have simply accepted that I'll need a round trip to mdn each time I need one or the other.
They're way easier to read than a big stack of if/elses
cause it's so obvious and predictable. as soon as the guy said "fuck this" you know exactly what the punchline is going to be
how do you deal with type coercion in html? your model expects values to be numbers but they come back from the html interface as strings.
&gt;yeah, yeah but your scientists were so preoccupied with whether or not they could they didn't stop to think if they should
One language frontend and backend with node. I have enough to stay up with just with JavaScript updates and new libraries and packages.
let definitely prevents it, but I don't think that's the part you meant... I just timed it and the effect is small enough as to be debatable currently it seems, so I'll rescend any statement of marvelous performance gains. I recall it being best-practice anyway (probably part of the reason let prevents the behavior) but compiling vs interpreting w/ JIT compilation is getting into the parts I don't really understand, hoisting variablesoout of loops is discussed in the book "Javascript patterns" among other places 
If you're not going to meet us halfway and let us see what's wrong with your code, you're going to have a very difficult time finding help. 
idk about the JIT compilation, but I js timed it again and the performance difference seems to be there, but almost negligible... so, no huge gains, but something to do for best-practice reasons anyway (but then again if you just use 'let' you can't do the anti-pattern w/o errors anyway) 
see my other responses here, but after testing, it seems the performance gains from this are about negligible... it's still best practices and using 'let' will keep you from doing it anyway, but don't go too far out of your way for it
Aren't they required for progressive web apps?
Can you share some of these clever ways?
`typeof NaN`
It was kinda meant in a joking way lol thanks tho
The Codecourse YouTube channel is very well made and gets in depth. They have video playlists for building entire projects. Vue.js filters video for example: [https://www.youtube.com/watch?v=u\_fIxZ8\_Kqw](https://www.youtube.com/watch?v=u_fIxZ8_Kqw)
just google it with "pdf" and save it
Hi /u/mohd_sst, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vldontsleep, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ashufalcon, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BubblegumTitanium, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/areknawo, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mcapodici, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nulless, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Lyria_Ipsum_dolor, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DemonViture, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Promise's callbacks are always defered to run on the next tick, so your code calls foo and logs from foo, a promise is created and resolved and it's callback (the work in the then statement) is set to run on the next tick, hi gets logged, and now the current execution context is over, we are now in the next tick, we call the callback and log 5. 
Hi /u/MormonMafia96, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/alexherman_rdt, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sheraff33, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
ECMAScript
https://jsfiddle.net/8nfewtbs/ Doesn't this do basically what you are describing? If you wanted to pretty it up a bit more, you could probably attach this functionality to a Array.prototype.then method so it looks how you wrote it. Obviously you would also want some type checking in a real version.
There is nothing wrong with JS in the backend. Did you missunderstand something I wrote?
No: the subclass is the child class, the super class is the parent. Hence why when you have a class: class Super {} A child class which inherits from it must call the parent (super) constructor in its constructor: class Sub extends Super { constructor() { super(); } } 
Is there somewhere I could ask this type of question though? Like "do you know of a library that does *this* and *that*"?
As suggested, /r/LearnJavascript or google.
I'm waiting...
got it!
Testing. I had to create some react tests I’m just not getting it. Also I have no idea how to implement any react hooks testing. :( 
This is basically what you posted, but I put this together to get some practice with all those concepts: https://codepen.io/dgca/pen/wOjZLQ
jQuery is not used anymore not because "cool / not cool" but because it's technical specification doesn't solve any problem and only introduces new ones. And yes, in fact we do eventually rewrite. Code rots.
The more sensible alternative is: func(\`color: \`, props.value ? 'red' : 'blue')
I once was asked in an interview to explain prototypical inheritance and I was so furious that some neckbeard had the gall to ask that as an interview question.
&gt; Tagged template literals I had no idea this was a thing. Down the rabbit hole I go.
The times I've learnt about prototype inheritance are usually for interviews. I remember going "ohhh that totally makes sense now" then never using it so completely forgetting it. I've done that at least 2 or 3 times. 
That theory does not look to be correct: var buttons = document.querySelectorAll('button'); async function main(n, delay) { for(var j = 0; j &lt; n; j++) { await lazyPressButton(delay) } } async function lazyPressButton (delay) { return new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { var rand = Math.floor(Math.random() * 3); buttons[rand].click(); resolve() }, delay) }); } main(200, 100) Computer: 10 Script: 0
Math.random() will generate a new number every time, even when called multiple times within the same millisecond. I don't know how it's seeded, but even if the only seed is the current time, it's not being seeded with every call to Math.random().
I have not. After browsing that page (I'm on my phone so I can't try it out) I still don't understand why they aren't just regular functions
couldnt that be done with an index variable?
It absolutely is used! No, I wouldn’t use it for a new project and I’m glad it’s being phased out, but to say it’s “not used anymore” goes beyond opinion into the realm of verifiably false factual claims.
Or don't and just use functions 😆
Well, I wouldn't really call maintenance "usage". And if that project requires a new module or something like that, just write vanilla js. There is never a good enough reason to write anything new in jQuery what so ever at this point. Even if we have old browsers in our mind, use babel.
Yes, yes it is
Good stuff! I'll definitely give it a whirl.
Definitely the winner for me as well. Promises just naturally make sense in my brain, Observables less so. I have to think about them every time.
I agree with everything you just said, but we do seem to have differing definitions of “usage”. So agree to agree, I guess. My point was simply that legacy code doesn’t go away when the tech used to write it is no longer necessary. I’m just trying to provide a counterpoint for people who always write in these threads acting as if jQuery has been wiped off the face of the earth.
I think the problem people have is with developers who still use jQuery to develop new things. As it sort just makes everyone's work harder. And the whole notion of not being bothered to learn language fundamentals (vanilla js, browser apis) is rightfully frowned upon in professional circles. But to provide more balanced view, it's not really helpful to be angry at developers who continue to use jQuery. Part of responsibility is on top of us who recognize it's redundancy. :) we should strive to remove it from our codebases. And to do that successfully, we need to kinda know how it works. So yeah, both of us have a point.
Why I need 478 NPM modules for one dependency.
Came here to post this.
Everytime someone uses if-else for more than boolean outcomes (i.e. one result or the other only), I rage a little. I rage a lot more when people still continue to use it after I've given them a solution. So no, you're not the only one who uses them. It's not just that they're easier to read, but using them in a self-invoking function gives you a lot of control over whether a variable is output in an object; const animal = "fish"; const place = "Paris"; const myObject = { aboolean: true, somestring: (()=&gt;{ switch(true){ case animal === 'dog' &amp;&amp; place === 'London': return "A dog was walking through Westminister"; case animal === 'fish' &amp;&amp; place === 'London': return "There was a fish swimming in the Thames (surprisingly)"; case animal === 'dog' &amp;&amp; place === 'Paris': return "The dog at the top of the Eiffel towe isn't the one we're looking for"; case animal === 'fish' &amp;&amp; place === 'Paris': return "We hit the jackpot! There WAS a fish in Paris after all!"; } })() } /* if the output of `someString` switch statement doesn't match any cases, it'll not be included in `myObject`. e.g. If you set `animal` as "rabbit", the value of `someString` is not present on the output object. */
Using Webpack as an API instead of through the CLI is immensely helpful to understand it. CLI has so much built-in magic that it’s hard to understand why it does what it does.
Reduce. I've used them only a few times, but they're mind-boggling to me. The concept of doing filter and map in a single function is really cool, but I can't get my head around them properly. I'm used to reading things in logical order of 'This is what I have, and this is what belongs inside it', or even 'These things are being added here as we go along'. Reduce flips that entirely and says 'These are what I have, and they go in here'. All of the guides I've read on it don't clarify it to me. Things get really weird when doing nested reduce. Tried to do a 3-level nested reduce a few days ago, and ended up breaking my brain for most of the day (trying to create a consistent setup of `namedKey : object` all the way down to allow me to call `data[subfield][subtype]` instead of `data.subfields[subfield].subtypes[subtype]).
I don't know if this is relevant here but I really hate the compile process with webpack, tsc, gulp, Babel and all this fancy tools. 
Negative zero
Sadly, that’s true.
I love this guy. in most cases he makes sure to hit every possible question mark along the way and his little drawn out flow charts are great. Big fan.
What if you want to perform a Redux action based on some part of the payload, rather than the action type?
The best Chrome extension for developers is Mozilla Firefox. Invest the energy to support an organization that advances open standards.
i know gulp, grunt etc are essential for automating tasks like gradle Babel is essential to transpile new javascript to javascript that old browsers will understand webpack is for bundling assets in a large app to avoid html css overriding each other
Did you try Spector.js for debugging?
I always forget what the sort callback function has to return for ascending sorting, if it's a-b or b-a.
Then you'd write a reducer instead of configuring one with `makeReducer`, since you have a requirement that goes beyond it's design basis. But, ideally, you wouldn't be doing something that causes you to break pattern, like having an action creator create a non-standard action.
That simplification isn't really honest, it's more like the following for something halfway usable. (Which is still absolutely doable and I prefer it to shipping axios.) const checkResponseStatus = response =&gt; { if (!response.ok) throw response return response } export const fetchJson = (path, opts = {}) =&gt; { return fetch(BASE_URL + path, merge(defaultOpts, opts)) .then(checkResponseStatus) .then(response =&gt; response.json()) .catch(someErrorHandler) }
Yeah, it's an intentional over simplification. But it's really not a lot of work, especially if you start extending and wrapping fetch like you did in your example.
Agreed. :)
Seems like it could be a nice way of creating SQL queries. const query = sql`SELECT * FROM appUsers WHERE username = ${username};`; Your `sql` function sanitizes inputs for you. That would be a nicer interface than one where you have to wrap every input in a function call. The library I use for SQL has a similar syntax where you pass a regular string and an object and it sanitizes inputs as it interpolates. The tagged template syntax is just a little bit nicer, and the implementation would be a bit easier.
I had a feeling that -2 stuff was bogus. It was. Fixed it: https://jsfiddle.net/7ergxu2m/
You can't replace Observables with Promises. Observables cover a wider area. But I get where you are coming from. Very powerful tools, amazing async rendering, amazing operators, but it requires some learning.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Hi everyone, I am sharing my code to visualize lidar data in your browser. It is based on threejs, there's a .las file included, for you to test it easily in 3 lines of code! Let me know what you think
Ive seen it but no. I will try. Thanks
I sometimes wonder how delusional one has to be to think JS looks/acts like even _remotely_ like Java. As a wise (wo)man once said, "Java is to JavaScript what ham is to hamster."
I use Firefox as my main browser on both desktop and mobile but dev on Chrome because I find Chrome's tools just so much better.
The demo seems broken for mobile portrait mode. The play button doesn't work either. I pressed it and waited for about a minute for something to play and nothing happened. https://m.imgur.com/0TFRANb
RECURSION: I know it's not language specific But I can't solve problems with it. Yes I did the factorial and Fibonacci examples. I still can't solve problems with it :(
I don't know but try this: [https://pouchdb.com/](https://pouchdb.com/)
I've been using Firefox more but the Chrome Dev tools currently seem better. Or at least I'm more used to it. Also Chrome usage is higher. I am professionally pressured to use Chrome.
I actually just recently had to write my own function to do this cause Stack Overflow didn't help me for once: &amp;#x200B; function makeChange(amount, denominations) { let leftoverAmount = amount; let changeInfo = {}; //Loop through a descending sorted version of our array of denominations denominations.sort((a, b) =&gt; b - a).forEach(function(denomination) { //Get the count of how many times the denomination can go into our current amount let denominationCount = Math.floor(leftoverAmount / denomination); //Subtract what our current denomination can do and set `leftoverAmount` to the new lower amount leftoverAmount = leftoverAmount - (denomination * denominationCount); changeInfo[denomination] = denominationCount }); return changeInfo; } &amp;#x200B; Works like so: makeChange(500, [100, 50, 20, 10, 5, 1]); //{1: 0, 5: 0, 10: 0, 20: 0, 50: 0, 100: 5} makeChange(125, [100, 50, 20, 10, 5, 1]); //{1: 0, 5: 1, 10: 0, 20: 1, 50: 0, 100: 1} &amp;#x200B; If needed you could modify it to also return the final leftoverChange if the denominations aren't able to bring it down to zero.
Yes, a bit more cumbersome though. 
If you initialize it with an array `new Date([2019, 2, 17)` you will get February 
Thanks I really appreciate. This should work for me. Same with me Stackoverflow didn't help me out
[ZetExcel.com](https://ZetExcel.com) is the best app 
I'm working on making it more responsive. Did you press the "Load Song" button before pressing "Play"?
I first had to click the load song button. After that the playbutton and visuals worked. But the design is also broken. Xiaomi Redmi 4
Hi /u/jadeydi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chawki_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Working with multi-dimensional arrays. After countless times of dealing with inserting and accessing, I still have to spend 3 hours to figure it out each time.
Hi /u/shoizz, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/balintov, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/techstackng, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ageblade, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I don't understand why people love Redux-like state management so much. 
Nobody mentioned [Svelte](https://v3.svelte.technology)!! 
I see your `typeof NaN` and raise you `typeof null`
For use with the what-now?
It's used often with tree structures
The documentation doesn’t really document anything. And the links and menus don’t do anything. Sorry—I can’t figure out what this does or how I’d use it 😅
Popularity. Just like high school fashion. TypeScript is a decent technology, though. If you're going to transpile to well supported JavaScript, might as well transpile a script language intentionally engineered to be all it can be.
Yeah. I guess the documentation could use a real getting started page. Can you give me an example documentation of something you thought helped you and why so that i can apply some of those ideas to this. Algebraic effects is a pretty new and foriegn concept so getting everyone on the same page is pretty overwhelming.
Text version: https://developers.google.com/web/updates/2019/01/devtools
null == 0 // false null === 0 // false null &gt; 0 // false null &gt;= 0 // true 🤬
I didn't know that! Thanks!
I didn't know that! Thanks!
What exactly are the "3 lines of code"? Are you talking about the lines that \- Clone the repo and navigate to the folder, \- Install the dependencies \- Start the local server Does that count as 3 lines of code?
Yes, exactly! You're right, it was not very accurate.
You get used to it. Also, the function keyword creates a new 'this scope' inside the function. This inside the function is the function itself. In arrow functions, this is whatever it is right outside the function, in the immediately surrounding context. 
Great adventure time reference @4:30
I learned observables at the same time as virtual dom implementations were gaining mindshare. I remember thinking why do you need both? After watching virtual dom demolish everything I pivoted away from frontend. Phenomenal waste of time. I decided to go with whatever turd won the shit pile and it turned out to be react js.
wanderers is sucha great game! more ppl need to know
its good when apps get very large
How to use closures. Not the idea of closures, but how to use them effectively. I just work around it usually but I hope one day it will click.
Very cool. Could use an online demo, maybe on the Github pages?
So you mean 3 commands?
It would be nice if they would stop and fix some of their existing issues as well. https://bugs.chromium.org/p/chromium/issues/detail?id=659515 This one has plagued their dev tools since template litterals were added. 
Agree. Chrome dev team blames maker of syntax highlighter, and in term they blame the chrome team for not updating. I've given up after 2 years.. 
So awesome! ^_^ That's such a great idea, doing a fun project in order to learn. I did a similar thing a while back with Tetris in the browser when I wanted to start learning es6 ([on github here](https://github.com/kevin-bigler/tetris-js)). Like you said, fundamentals come before best practices, so there are a lot of things I'd do differently now. If you want any tips on what you have currently, I'd be happy to. One I think that will help when traversing / using your code will be formatting your comments as [jsdocs](http://usejsdoc.org/) (which, btw, I thought it was awesome to see so many helpful comments in your code! :) ). 
dropped this `]`
Thanks man, let me put that back in my thang
I agree, Chrome's tools are rad.
**Please**, don't do this. If you want to post a full article you have written somewhere else, just post the link to it ([Submit a link](https://i.imgur.com/EBMnJTE.png)) instead of badly copying the whole article here.
Thanks!
Yes. I use them for web applications that need to be used in areas beyond cellular reception reliability.
Sorry, I didn't realize I needed to load a song first. You should disable the play button if a song hasn't been loaded first and make the load song requirement more apparent.
[LMGTFY](https://en.m.wikipedia.org/wiki/Pomodoro_Technique)
Desktop link: https://en.wikipedia.org/wiki/Pomodoro_Technique *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^244957
[LMGTFY](https://en.m.wikipedia.org/wiki/Pomodoro_Technique)
Thankss, but I already understand the empirical way of how promise works. My question is more along lines of understanding of how the browser recalls the promise object when it is not assigned to variable. Lets say the global execution context completed at 500ms.. but the Promise Object doesn't get resolved till 1000ms. But at this point the stack is empty.. it seems that the browser created a temporary reference under the hood in order to update that Promise Object with its value/status.. because without this temporary reference.. it should be GC'd in the Heap
Anything which I rarely use.
I definitely have a ton to learn about the compilation/interpretation of JS, but I do think that declarations happen in advance of actual runtime. I think this can be seen in the fact that you can declare something with let in a loop at all, the engine is smart enough to not redeclare it over and over. (and it doesn't complain about it either) as far as best practices around it, thats a whole different conversation haha. 
That is highly subjective. I much prefer reading jsx and the flexibility it offers over templates. Vue does have the option to use jsx, but it's not the same as react. Don't get me wrong I love vue and had way more trouble with react, but from a readability standpoint I prefer react components over vue.
MVP
For anyone working with environment variables: [enve](https://github.com/Xyfir/enve) — JSON-parsed environment variables.
I've been subscribed to that thread for years and years..I've given up home
That's pretty neat!
Private symbols would have worked for your example, and also would have allowed branding, dynamic access, privates outside of classes, and much more. Instead they chose a method that was restricted to class syntax, and has the least amount of usefulness. 
After reading and watching You Don't Know JS, I would say I feel more "comfortable" but in general a lot of the quirks about JavaScript I still find myself looking up i.e. * prototypical inheritance and OLOO design patterns with Object.create * this keyword * how modules work i.e. export/import syntax &amp;#x200B; Also have very little idea how code-splitting and treeshaking work too (well okay I have some idea but wouldn't feel confident to explain how it exactly works)
&gt; Wrong tools for the wrong job. Yes, I am saying that Angular is the wrong tool for the job "In most business cases." I work in enterprise software, they make something then need it to run on "everything" and non-js people understand it, but they only want to hire cheap workers. JS workers are cheap (by comparison). This saves millions of dollars. Typescript+Angular hits enough of those C#, .NET, Java style idioms that people in charge vaguely familiar with the technologies feel comfortable sliding to it, and then back to those technologies. I've found Angular creates and then solves problems that exist in those spaces but not so much just a pure JS space, or even adding transpilers.
Cool! I like it.
Wow that's a lot of cool new stuff actually 
Hi /u/boikom, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/YLLNM, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Out of curiosity, why would I use a class for a singleton in a language that doesn't force me to do so? This sounds like a needless java-ism.
Elaborate
&gt;can you give me a legit real world example where i'd put currying in a typical crud app codebase that uses mostly OOP and some functional elements (ie the vast majority of codebases web developers are working on)? Well, I could certainly fabricate an example as I'm sure there are plenty. However, in all honesty, I have yet to encounter a situation begging for currying in my day-to-day development work. Surely there are valid use cases, but so far I managed to do perfectly fine without using currying.
You mean new hacking tools? 
If the framework/library you use depends on it (*cough* Angular *cough*)
I kind of understand prototype OOP. javascript's \`class\` is just syntactic sugar
Well that seems a bit excessive
I didn't downvote, but before reddiquette, learn how to construct a proper argument. Readable and understandable couldn't be more subjective.
Logpoints + code folding makes this update great 
Fluff. 
Chrome took my dignity and livelihood. I have nothing left
Do you have an example? Such as you want to provide an isEven function that your students can see how it works but not know how it's implemented?
Right now we are doing very basic stuff with canvas, drawing basic shapes and looping to make a variety of them with different colors. Programs usually have one or two functions. In my head, I was hoping something that would work as a password, like a string of my name multiplied by the time in milliseconds that is passed as an argument to each function. Students would try to delete the function or edit the string of my name and the program would fail. I thought about it some, knew there is a ton of smart people on here, so I decided to ask. 
They should just commit and make it an IDE
So essentially authentication of original work to ensure academic integrity?
&gt; It doesn't make sense from a programming point of view. It never, ever did. It's because it's an index. &gt; ['jan', 'feb', 'mar', 'etc'][new Date().getMonth()] "mar"
Could you try again? There was a bug in the code. I think I fixed it.
The constructor isn't meant to take an array, though. https://www.ecma-international.org/ecma-262/8.0/#sec-date-constructor It happens to work because the toString'd value happens to be acceptable. &gt; [2019, 2, 17].toString() "2019,2,17" &gt; new Date("2019,2,17") Sun Feb 17 2019 00:00:00 ... I'd pass an ISO 8601 string (e.g. 2018-02-17) instead.
Functionality aside, name is too close to [JSONP](https://en.wikipedia.org/wiki/JSONP). 
&gt; Dates are not arrays.
I didn't say they are. I said that people like to put the names of the months in arrays.
Parens aren't required in TS, which is super weird
what ^ said
Currying is useful when you don't know all the arguments you're going to call a function with at the same time. A lot of the examples I can think of involve front end JS or could be solved with OOP patterns. It's not like currying will help you do something that can't be done otherwise, but currying has a few advantages: * It makes testing easier since each function takes one parameter (you can pass a trivial function into one that would have a real effect). * It's easier to compose functions that take one parameter. * It can be easier to share code on a large team. If you find yourself writing code that is almost the same as someone else's, you can share that. It's easy to overlook the usefulness of this kind of thing, but it means another test that doesn't have to be written. &amp;#x200B; &amp;#x200B;
what^ said
It's better to accept the possibility of copy/paste especially at a very basic level. You can only share codes you feel ok getting copy/pasted. Presenting confusing codes could cause misunderstanding and could discourage students to learn the subject further. You can test students in different ways. You can ask students to explain what is happening behind the scene (this could be more important than actual codes). Or you can present codes with bugs and ask students to fix them. 
You can't store future dates in UTC. Quick quiz: What is the UTC timestamp for 3pm on Friday, 15th January 2020 in Brisbane, Queensland, Australia? Answer: Undefined. At the moment, Brisbane is located in UTC+10, and has no daylight savings rules. So we could make a reasonable guess as to what it'll be. But we can't be sure Brisbane won't have daylight savings next year, since it's a constant topic of debate. If the state government decides to implement daylight savings, then your carefully stored UTC timestamps will be an hour out. This is why Joda/JSR310 has the concept of Instant, Offset, Local, and Zoned times. They are all different things. 
recently douglas crockford, rightfully, pointed out, you do not need generator functions and iterators. Javascript already had a BETTER mechanism. First class functions. Initially, I was like oh he is full of crap. He isn't. &amp;#x200B; Javascript should delete both of them. There is no need for them at all. Its a step back. Want to know more, get his book "How javascript works" and it complete kicks generator, iterators, this pointer, and classes in the nuts. Ill never use them. &amp;#x200B; P.S. Javascript sucks. However there is good parts.
this is going to be hard because JS is really hard to break 
Just make the examples different enough from the assignment that even if they copy/pasted, they’d have to understand the code to modify it as needed anyway. They are not going to encounter copy-protected JS as the norm. 
This. Don’t obfuscate educational code. They’ll just copy and paste from elsewhere, curse your name, and you will have taught them nothing. Copy and paste isn’t bad if they can understand what it does. I like the idea of a buggy assignment. Especially if you sell it as a semi-realistic scenario: requirements were [basic description] but now you found out it really should have been [detailed description]. Make them fix your poorly commented, basic code. 
In that case you couldn't predict any time until that ruling anyway. In that specific case where I'm worrying about the law changing you have no choice but to store the TZ result. Alternatively you still store UTC and during your conversion handle daylight savings offset if it were to exist based on the rulings. I'm not saying to not use a time library, I'm just trying to catch 99% of the use cases and your 1% case obviously has to use something else. 
&gt; which you can't then configure in any meaningful sense. Sure you can, you just fork react-scripts, make your changes, and then pull react-scripts from master whenever you want new updates. Do it once and then re-use it for all your projects. It's actually pretty simple once you get it figured out.
&gt;be me &gt;be eleven years old &gt;computer class, open up chrome, open up the school home page &gt;right click school logo, inspect element alright, I'm in, *cracks knuckles* 
Some docs website
They aren't required in JS either. If you don't use parens then it is still valid code, but it means something different; it is a block with a label. TypeScript is doing the right thing, there's no difference to how JS handles it.
Hi /u/Aralayia, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Any resources to learn problem solving with recursion that you know of?
I've given up backspace.
&gt; In that specific case where I'm worrying about the law changing you have no choice but to store the TZ result. That's the point I'm trying to make. More specifically, there are DateTime libraries that bake this in and handle it properly (Such as Joda), so why not just do it right? &gt; I'm not saying to not use a time library, I'm just trying to catch 99% of the use cases and your 1% case obviously has to use something else. This attitude is how we ended up with Y2K and 2038. It costs you nothing to use a library that handles Zoned times correctly. There's no downside to doing so. Why would you intentionally use an incorrect implementation (Such as Moment) when a correct implementation (Such as Joda) exists?
They most definitely are aligning with ECMAScript. In the past they did not. This is apparent with the module/namespace refactor, their support of new proposals, and their pushback on new tech/syntax until proposals are finalized.
Then join the TC39 committee and voice your opinion.
If a student can exploit your "password" it deserves a 9/10 at least
&gt;So you want to fetch things via an api. Then map the things to return promises, then promise all those? No. The code fetches things, converts the responses to a different object, and wraps them in Promise.all *only* so you can ensure any subsequent code will execute after all the calls have completed.
Have you thought about minifying the code?
Yes they are. If you omit parens in JS, the return expression becomes a block or named block. In TS, it evaluates to an object always with or without parens. This is fundamentally different. Let me know if you see different results. They most certainly aren't the same.
Not sure if they are documented, but... import thing = require('module') Is some valid TS invalid JS. Returning an object literal from an arrow function without parens is another.
React is 5 years old, as is vue and angular2 is 4 years old. These 3 are the vast majority of the frameworks used and aren't going anywhere. We haven't had a new major framework in a long time.
Buttlover chcking in. Fun game. 
I just tried it online here: [https://www.typescriptlang.org/play/#src=const%20a%20%3D%20()%20%3D%3E%20(%7B%20b%3A%20true%20%7D)%0D%0Aconst%20a%20%3D%20()%20%3D%3E%20%7B%20b%3A%20true%20%7D](https://www.typescriptlang.org/play/#src=const%20a%20%3D%20()%20%3D%3E%20(%7B%20b%3A%20true%20%7D)%0D%0Aconst%20a%20%3D%20()%20%3D%3E%20%7B%20b%3A%20true%20%7D) &amp;#x200B; Unless I'm missing something, it compiles as expected.
HTML Imports were only supported by Chrome anyways. They always have been polyfilled for other browsers.
full circle dreamweaver
Point is that they cannot even meet their own deadline, and they're Google. 
`import()` only works in Chrome at the time of writing, though it is impressive that it's becoming part of the language in the first place.
&gt; Im a simple person Immer simple person
Do you know what polyfills are? Have you ever dynamically included one? If the deprecated feature exists, it will be used and a deprecation message will pop up in the console. If it doesn't, the polyfill is used. Do you see how there is no imminent problem here? The polyfill will be used if the feature isn't available.
Hey, I was wondering how you fixed your issue. I have a similar project that I am working on, and am having similar issues. Sorry that I don't have an answer, but found your post interesting. Thanks!
It's mainly because it makes people think and code using OOP like they are used to in other languages. This works with small stuff but it will all break down in larger scales. JavaScript is prototype-based, and classes simply don't work the same way as say, Java. You won't get any kind of error or warning if you overwrite a property further up the prototype chain, and if you go in too deep there is simply just too much to keep track of. I think classes in JavaScript should only extend other classes IF absolutely needed, otherwise use just composition to get the properties that you need.
Polyfills were invented to cover browsers that do not support a feature yet, or non-evergreen browsers. While it work, it is wrong to use polyfills for a deprecated feature.
Downvoted for lack of green text
Different people have different things to worry about. Yes, there will eventually be a 2038 issue we all have to overcome. A UTC time will be valid regardless of the eventual amount of bits used to store it. The only case you'll run into this issue is if your date library exclusively deals with smaller containers to handle the number. Also I think the process of adding a library that will "handle everything" is actually negligent of the fact that the language, operating system, and library itself will probably change in the next 20 years to be able to handle the 2038 problem. Nothing is ever future-proof and javascript is no exception, in fact I would argue JS is the worst language right now to have it be _future proof_. So thinking ahead is great but thinking 20 years ahead thinking your product will be relevant then is a little naive in most fields dealing with this problem. 
&gt; it is wrong to use polyfills for a deprecated feature. No, it's not. Now it's like a regular library. They will surely get rid of it at some point when they upgrade Polymer and whatever. Wasting time on fixing this non-bug right now would be pointless. It doesn't affect anything and it will disappear on its own.
If you're doing web application, a great way to start is to do a web administration application. If not, any plain-text games would be fun and interesting to develop at the same time. &amp;#x200B; Best to learn how to write clean and easily understandable async/await functions at this stage.
[removed]
It isn't intuitive the way it is now. Your suggestion will definitely improve the UX; I was also thinking about loading the song when the play button is pressed, eliminating the load song button altogether. I appreciate your feedback, thank you! 
&gt; Also I think the process of adding a library that will "handle everything" is actually negligent of the fact that the language, operating system, and library itself will probably change in the next 20 years to be able to handle the 2038 problem. Which is great, but the Julian Calendar is almost 2,000 years old. Writing code that implements it correctly is a pretty safe bet. It's not a matter of "handling everything". You either handle dates and times correctly, or you don't. MomentJS does not. &gt; So thinking ahead is great but thinking 20 years ahead thinking your product will be relevant then is a little naive in most fields dealing with this problem. I think you misunderstood. I'm not proposing that we avoid MomentJS because of the 2038 problem. I'm proposing alternatives because MomentJS handles dates and times wrong *today*. It is fundamentally flaws as a library and will give you incorrect results. The Y2K and 2038 examples were used to point out shortsighted thinking by people that don't want to spend an extra 30 seconds to do something properly and therefore leave the rest of us with buggy piles of technical debt. 
[Sound visualization](https://twitter.com/williamngan/status/1104890680608940032) API coming soon for Pts.js too :)
Hi TTUShibby, &amp;#x200B; Finally I ended up with building my own NodeJS application. In NodeJS you can use "child\_process.execFile()" to run an external program. I used IrfanView (it's one of the few free applications with lots of capabilities) to print directly to my USB printer. In IrfanView you can create multiple .inf files which serve as your print settings presets. In my NodeJS application I switch between those based on my frameType. if (req.query === 'vertical') { command = `"C:\\Program Files\\IrfanView\\i_view64.exe" "${req.query.localFilePath}" /ini="C:\\IrfanViewSettings\\5x15"` } else { command = `"C:\\Program Files\\IrfanView\\i_view64.exe" "${req.query.localFilePath}" /ini="C:\\IrfanViewSettings\\10x15"` } child(command, (err, stdout, stderr) =&gt; { // some logic }); &amp;#x200B;
Can anyone explain why this is the case? I'm just learning beyond the standard jquery / scripting playgrounds and really curious about this.
All talk and no juice.
`async function test() {` `var buttons = document.querySelectorAll('button');` `function wait(int){` `return new Promise(resolve =&gt; setTimeout(() =&gt; { buttons[int].click();resolve(); }, 10));` `}` `let array = window.crypto.getRandomValues(new Uint32Array(300));` `for (const ii of array) {` `await wait(ii%3);` `}` `}` have been consistently getting a better prediction that expected, 214 vs 191 (210ish vs 190ish several times) i am not sure why, is there some bias in `window.crypto.getRandomValues(new Uint32Array(300)) % 3` that made my clicks more predictable than expected? settimeout delay?
Just to let you know, Polymer 3 was released a little bit ago (May, 2018) and now uses up to date standards And from the looks of it, the updating process is pretty much automated, so they are just waiting to pull the bandaid. 
What's the big deal here? A bundler is faster in some situation than the other bundler?
good site
No. A bundler is slower at all tests ran (Parcel). If it is cached then it stands a chance. If you lived under the roof that Parcel is faster than webpack, you're mistaken.
Wierd how every question has one answer
Nowadays you can do it, but only with the paid web Dashboard service. Not in the free, open-source, version.
Hi /u/WinpathITservices, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Just launched: Webiny - Serverless CMS It's open source done in Javascript (React and Node) with a GraphQL API. We are live on product hunt and would appreciate any feedback or if you like the idea, hit that upvote button: ) https://www.producthunt.com/posts/webiny-serverless-cms
Google actually makes one
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Couldn't find it :(
Thanks bot, I've pushed the license file I specified now so you can go back to sleep.
http://www.google.com/webdesigner/
It seems that google web designer is a desktop application... I am looking for a js script to use inside a web page.... Similar to the one google is using as an email editor in www.gmail.com
Ah, I see. Probably a good idea to mention what it is in the post, for those who don't know. Otherwise they won't click on it to check it out. 😅
It’s going to be much much harder to find. Sorry I couldn’t help
Maybe you could use [this](https://lmgtfy.com/?q=javascript+wysiwyg+in+place+editor)
This is pretty fascinating. I was obsessed with Scratch from ages 11-13, and it taught me a lot of the concepts behind programming before I ever did any real programming. Seeing how this was done is really cool. I believe they moved to HTML5 a while ago but that was probably transpiled from Flash.
Hi /u/rgdeveloper, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
LOL :):):) I have done some intensive google search before i have posted this question... Fact is, i even inspected gmail.com with dev tools trying to figure out the way editor script is loaded. So i thought... Maybe some fellow web developer has ran into this some time and can help me put here. Apparently this script is not open source, so i'm gonna use good old ckeditor. 
Gmail's specific editor is indeed not open source. If I suggested searching is because there is a very large number of alternative options and it would be extremely unlikely that you cannot find one that fits your needs, with -maybe- some work. And on the other hand, if you have really searched and discarded all of the available alternatives, then you will need to explain _much better_ where do those other options fail to provide what you need. A "simple and lightweight wysiwyg editor" with the feature of "pasting images", doesn't really seem overly specific to discard everything that is available out there.
I don't think it's possible to optimize available vs unavailable without knowing the data set. If the hotel is usually empty, then the available times are the obvious choice, but if it's almost always booked, then available times would be better. Either way, you end up with the same data. One possible consideration is the difference between 'booked' and simply 'not available' due to other reasons such as construction, room maintenance, etc. Beyond that, I have to say that this project is \*screaming\* for unit tests. You should be imagining as many scenarios as possible and writing units tests to cover those scenarios to make sure your code is working as expected, and continues to work as you work on the project. And if you do need to rewrite, you'll already have all those tests to prove your rewrite still works at least as well as your original code.
The spread operator doesn't get transpiled into \`Object.assign()\`. Fire up the babel compiler and have a play around using the spread operator
This could be dumb. So please someone correct me if i'm wrong, I honestly, thought JS was synchronous no? It's single threaded. It executes line by line and it can only be executing one block of code at a time. There's async/await and stuff but that doesn't make JS asynchronous it just allows you to "listen" to events and handle them synchronously after. Something somewhere else is running that operation JS isn't running two blocks of code, so it's still synchronous. &amp;#x200B; Right?
Thanks for your thoughts. The thing is, I almost never use extend, and if I do it's only one level deep. The reason I like classes is that they are a very clean, encapsualted way to define a type of object. I was never able to handle the kind of complexity I can now before classes, mainly because looking at the non-class flavors of "class" instantiation has too much noise to me. If the top of a file says `class Thing {… `, then my brain just says ok that's a Thing. It looks plain. As for the prototype argument, I've seen that a lot. But “classes” in Javascript are just syntactic sugar for a prototypal pattern. You can still futz with the prototype of a class instance (but why would you?). class Car { constructor({make, model}){ this.make = make this.model = model } } Car.prototype.honk = () =&gt; console.log("beep beep") function honk() c = new Car({make: 'Toyota', model: 'Camry'}) Object { make: "Toyota", model: "Camry" } c.honk() beep beep What am I missing? 
Hey! Recently I've done a research of the best node.js hosting. You can check the list of best hosting platforms for Node.JS. [Hosting for node.js: top-10](https://www.gravum.com/web-development-blog/best-10-platforms-for-node-js-hosting/?utm_source=reddit-nodejs) Hope this will be helpful
[Ramda](https://ramdajs.com/), I love building function pipelines.
One big advantage of Linaria is that it uses PostCSS, which means it supports Autoprefixer, which means it supports the great IE11 CSS Grid support that Autoprefixer allows: https://css-tricks.com/css-grid-in-ie-css-grid-and-the-new-autoprefixer/ Styled Components (and Emotion) use a lesser-known preprocessor called [Stylis](https://github.com/thysultan/stylis.js), which implements its own hard-coded prefixing (which isn't as good as Autoprefixer, and doesn't support configuration via Browserslist, etc)
I think most people would prefer the readability of the string compared to multiple arguments, like JSX vs createElement. Especially when you have 2+ interpolated expressions and nested psuedo selector syntax, etc.
Hi /u/lokendra15, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/RubiksCodeNMZ, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `rubikscode.net`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [rubikscode.net](/search?q=%28and+site%3Arubikscode.net+author%3ARubiksCodeNMZ+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|158|79%
I'll have to try scratch again, but last time I checked the 3.0 website the buttons were all screwed up and the website didn't work at all. I wonder if that's fixed now.
Did you see [CKEditor 5](https://ckeditor.com/ckeditor-5/)? It supports pasting images from the clipboard, of course, and has a lightweight UI. In fact, you can choose [between many UIs](https://ckeditor.com/ckeditor-5/demo/) and [even build your own](https://ckeditor.com/docs/ckeditor5/latest/examples/framework/custom-ui.html). PS. Don't confuse CKEditor 4 (already mentioned by you as "good old ckedtior" 🙂) and CKEditor 5. CKEditor 5 is a complete rewrite, a different project. 
Whenever I want to easily force an error, I just write const owl = bungiecord, and don't define bungiecord.
I want to call out something that I don't think the article emphasized enough: this pattern is for when you have an object where the optional "buildable" properties **have meaningful default values**. This is categorically NOT an acceptable pattern to solve the "lots of optional values in the constructor" problem if your properties don't have defaults that can be applied. It's important to remember that in object oriented programming, it's vital that objects you make are always valid, and this includes at the point of their creation. Imagine you applied this pattern to a `Person` object: class Person { constructor(firstName, lastName, favoriteColor, birthDate, height, weight) { // etc... } getAge() { // uses this.birthDate.getFullYear(); } } let person1 = new Person('Bob'); person1.getAge(); // Uncaught TypeError: Cannot read property 'getFullYear' of undefined This new object instance is invalid because we didn't provide a birthDate as a Date object. Since you cannot actually fully use this object *until* you provide a birthDate, then the builder pattern would not be appropriate here. Instead, it would in fact be better to take all of those properties as constructor arguments, and validate that they are the value types that you are expecting. At the very moment of instantiation, the person instance you create should be a valid instance of that object that can be used as reliably as a simple scalar value like `5`. This may require careful understanding of the business rules of your application to know if this abstraction is correct or not, but the general idea remains the same either way: any objects you create should be valid and reliable. If they are not, they need to be re-designed so that they are. The builder pattern works in the example given in this article because the `Profile` class can start off with sensible default values that form not only a valid data structure that you can work with, but presumably also form a perfectly valid business concept. It's fine to have a profile that is nothing but default values. If the business rule were such that this was not fine, then you would have to figure out which values *must* be customized upon instantiation, and turn those back into constructor arguments, leaving the other properties as optional builder properties. 
No, people just misuse the word all the time. Same with the word troll.
It doesn't look serverless to me. It looks like you're the server, but you cost $20 per month, give 250 megabytes of storage and have a somewhat more fancy CMS than GeoCities. According to your docs, if you want some place to stash images you have to arrange your own Amazon S3 bucket or similar? But there's even weirder restrictions happening. 50,000 API requests? If a single user's page load costs 1 api request, that means you can only have 50,000 site hits before you exhaust your monthly limit? Unless I'm missing something very important, this seems like a significantly worse deal than a $5 digital ocean droplet, which I assume can handle more than 50,000 page hits per month. Also, the fade-up transition of every single content block of non-stop ad-copy on your page made me want to tear my eyes out.
Maybe they are building a heavier and buggier version of youtube that is late like they did with gmail.
For the comparison (greater/less than) operators it's basically casting null to a number, which makes it 0.
Thanks for you feedback non the less. The serverless aspect of Webiny is the fact that it's designed to run inside a severless environment like AWS Lambda. The 250MB is Database storage, static storage is unlimited. Obviously something we should improve in our copy. Yes, you can use a $5 digital ocean - and since Webiny is also open source, you can host it inside the $5 droplet. That should work perfectly fine. The (paid) managed hosted environment has it's benefits, like the backups, replications and the scaleability factor of serverless. Also the Webiny CLI allows you quick and easy deployment of you website (including versioning, and later the option to revert a deployment). The limits on the pricing page are per site, so each site has its own package, which also automatically scales. If it's not clear, that's a good feedback for us to improve on. As for transitions - to be frank, we were on the fence if you should remove them, or leave them in. So, thanks again for the feedback, we'll definitely work on some of the mentioned areas. So far, it's been 7h since our launch :) any feedback is appreciated. 
The problem I have with styled components is that it breaks the editor's intellisense. Editor's know css, sass, and less, but they don't always understand how to use css in js. Some help is given for style attributes in a react tag, but it's not like the help you get in a sass file.
You are generally not going to see google using third-party open source libraries in their software. They definitely subscribe to the NIH (not invented here) syndrome, and AFAIK all of their G-Suite apps are written in a non-public proprietary Javascript framework, and vanilla js. If you just want a simple WYSWYG editor for text editing (and not for building web layouts), CKEditor and TinyMCE are very popular. Here's a repo with links to the most popular WYSWYG editors out there. Your image-paste requirement might require that you get creative and implement it yourself. https://github.com/JefMari/awesome-wysiwyg
I just learn react and sass this past 6months and im still confused why there are sides on this topic. I prefer having logic separate from styles. it just makes sense to me since they distinctly diff in purpose. Especially when it comes to debugging, it feels unnatural fixing component logic alongside styles.
I did something like that (not completely the same): [https://gist.github.com/rolandpeelen/e00134d4a91a94bb492029cab1de56ca](https://gist.github.com/rolandpeelen/e00134d4a91a94bb492029cab1de56ca) It was built not for speed but for readability / understanding). Some of it's in dutch, but here's the gist; 1. This is used to calculate possible open dates between employees and meeting rooms so; 1. A room has a certain availability (not open in weekends for instance) (room = 'speekkamer') 2. A room may have already been booked at certain times 3. An employee works some of the time so also needs availability (employee = 'medewerker') 4. An employee may also already have been booked at certain times 2. We take the dates, convert them to epoch timestamp and then divide them up a bit so we get accuracy within minutes instead of seconds. This leaves us with an array of just numbers. 3. We check the intersections of those numbers and create a new array with only the intersections 4. We calculate this back to actual dates &amp;#x200B; &amp;#x200B; This one uses ramda's range function to create array's of ranges. You could rewrite it to have an range object and a function that checks if one intersects with the other (something like this: [https://gist.github.com/rolandpeelen/f767689420121b00c6a7328c4b0de1f7](https://gist.github.com/rolandpeelen/f767689420121b00c6a7328c4b0de1f7) ) &amp;#x200B; From there I did some variations; 1. Using some memoization if there are multiple rooms to check against: [https://gist.github.com/rolandpeelen/c254dc704cb9bc5977e275e4d5c52881](https://gist.github.com/rolandpeelen/c254dc704cb9bc5977e275e4d5c52881) 2. Using actual sets for a minor speed improvement [https://gist.github.com/rolandpeelen/11f28839b704b6bab3487205b9b38f11](https://gist.github.com/rolandpeelen/11f28839b704b6bab3487205b9b38f11) &amp;#x200B; There is another way that is waaay more performant (checking end dates with begin dates of the other objects) but coding them up was a lot less readable for me (couldn't really do that in a declarative way), however, this gist ran in like 300ms on my pc with minute accuracy, getting it up to hours or days should be even better, using those ranges with the functions should improve that even more. Probably get it down to tenths. &amp;#x200B; This may not be exactly what you need (and in my quite specific functional ish codestyle), but perhaps some inspiration of other directions :) 
Hi /u/Lorenz-Kraft-IT, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SvenA999, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/supraniti, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bushwacker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nikola_wd, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rainyes, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/maxydarz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
What? I used styled components syntaz(emotion) with VSCode and it works great with intellisense. There are plugins especially for it. It's awesome being able to use react props to manipulate your CSS. Syntax highlighting and completion work as good or better than sass.
VSCode extensions FTW. 
understood - thanks for the note and apologies for missing that point from the guidelines.
I'm genuinely curious (not in an attacking way) how referencing variables using strings and creating layout using attributes (e.g. v-if, v-for) is more readable than using actual variables and native JavaScript functions. Additionally, I always get confused with all the differences between data, computed, methods, and the like. To me it's more understandable to just be passed in arguments and maintain some internal state. One final thing, two way data binding obfuscates a lot and I routinely forget to do things when it's bound vs when I have to manually attach change listeners
It makes it easy to scope your component and be reusable. The biggest thing for me is a couple things 1) speed for editing and writing components since all that CSS is in the same file and I'm not jumping between several files, and I know the css is scoped correctly and components won't interfer if I add two on the same page. 2) being able to key css off your react props. This is huge. It makes the code a lot cleaner. Like if you have a prop on your component called disabled, you don't have to go through and concert that prop to a classname and attach the classname to the css and have them linked, you just let off that disabled prop in your css. Also for large projects it's is able to tree shake your CSS so your bundle size doesnt keep growing and growing over time for dead css.
SASS modules + React components = best option. import classes from './index.module.scss'; import React from 'react'; export default () =&gt; &lt;div className={classes.myComponent}&gt;Hello, world!&lt;/div&gt;;
Ha, I like it! My suggestion is to add this css rule: .container .float-container .float-icon { pointer-events: none; } because on a small window size, the .float-icon covers up most of the button, making it hard to click.
The problem I got importing SCSS in JS is the fact that all styling will still be globally scoped. This is a bit counter intuitive since you may at first think that the stylesheet you imported for your component will only be accessible for that component. The solution I found for this is using CSS modules. It gives you access to class names through an object and the styling won’t be accessible by other components since all class names will have their own “id”.
I see.... maybe I should try out styled components now given those points. thanks!
AHH good catch, thanks. I've updated it as suggested. I thought I was sorting that with z-index. Cheers for the feedback!
I like JavaScript classes too (it looks 1000 times better and more readable than having a bunch of `Class.prototype.property = something`) and I only ever go one level deep with extend as well. Classes are great for the exact situation you posted, grouping fields and methods of something that might be instantiated more than once. It's especially great when you create classes that represent DB/serializable objects. The problem starts when people coming from Java feel inclined to make *everything* a class, and rely on inheritance to do everything (think `FileReader` extends `InputStreamReader` extends `Reader` extends `Object` from Java) in the name of DRY. I don't think there's anything wrong with the syntax, it just encourages a code style that can get very fragile in JS. The same mistakes can be done *without* the syntax as well. If I wanted to work on a project with Java/C#-style inheritance while still enjoying the advantages of JavaScript, I would definitely use TypeScript instead.
This is very similar to approach as well!
With sass you can essentially create namespaces for components which I think works the best.
Could your builder take the required arguments as constructor parameters, then provide setter methods for optional ones?
Not sure if you're being cheeky, but that isn't how TC39 works.
I find this way more tedious than styled components after doing both. But it is a fine option.
What? Css in JS is the opposite... All the css is locally scoped to the component. You have to do extra things to make it global. It generates scoped class names per component. What you said it wrong right off the bat.
I guess part of the controversy has to do with how things are done in other OOP languages (like C#, Java, maybe C++?) as you mention. I don't know any of those, myself, so maybe that’s why I don’t feel the burn. The class hierarchy you mention does seem inherently horrifying, though!
I'm not really sure what problem this pattern is solving in a dynamic language like JavaScript. Consider the two examples: function main() { return new ProfileBuilder() .setMenu('top') .setBorders('soft') .setTheme('dark') .setCoverImage('url.jpg') .setBackgroundColor('red') .setMenuColor('white') .setProfileFont('Arial') .build(); } function main() { return new Profile({ menu: 'top', borders: 'soft', theme: 'dark', coverImage: 'url.jpg', menuColor: 'white', profileFont: 'Arial' }); } The bottom example seems like more idiomatic JavaScript, and also doesn't introduce an intermediary object. It's also less lines of code, to boot.
Im so happy that when I code javascript I dont have to deal with these grotesque Java-esque patterns, please keep me far away from that. This is stockholm syndrome.
Options could need to be ordered. In your example, imagine if the cover image depends on the theme being set first, or if the theme causes other options to be invalid. Object.keys is not ordered.
I think this one : [https://thanosjs.org/](https://thanosjs.org/) You can reduce the size of your project to 50% !
This is what I thought as well. The builder pattern makes no sense whatsoever in JS. Sure, it's nice in PHP or Java, but please don't mindlessly apply your patterns to other programming languages.
&gt; the updating process is pretty much automated I believe it needs a rewrite to upgrade from Polymer 1 to Polymer 2, And another almost rewrite from 2 to 3. There are tools for hinting, but by no means it's automated. Youtube is clearly stuck with their Polymer investment.
Not sure why you're downvoted, you're absolutely right, this article makes no sense, and no one should follow its advice. It's crazy that most of the articles posted here are utter nonsense. /u/drizzlelicious explained why the article is bullshit.
I propose the answer to this is to add type safety! With a little bit of TypeScript, your constructor could look something like this: interface WhiteTheme { theme: 'softWhite'; coverImage: 'this_image.png' | 'that_image.png'; } interface DarkTheme { theme: 'dark'; coverImage: 'dark_theme.png' | 'other_dark_theme.png'; } type ProfileParams = WhiteTheme | DarkTheme; class Prorfile { constructor (params: ProfileParams) { ... } }
Six whole months!?! You must truly be a master! Seriously though, the exact reason there are sides on these things is that there's no obvious correct answer. Everyone can play with new libraries for a few months and see value, but what you're really looking for is which is better for long-term maintainability, and there's been so few people that have used both for a long time that we really don't have anyone with good data or data-based opinions.
Good point. Done.
I actually recently built a class with a similar structure. It was a class constructor that built two different kinds of objects, each of which served as a wrapper for either a class or a function, providing metadata about the class/function, including data on how to call it (with or without the `new` operator). Each of those wrapper objects would receive a generic `update` method which would call the wrapper class/function appropriately, call a specific method if it were a class, and set the returned data as one of the wrapper’s properties. All the other optional properties could be added/read via setters/getters.
i agree... you're right
This pattern is maginally useful in javascript. It feels like /u/enmanuelduran has learned some other programming language (C++/C#/Java) first and is transferring conventions from those to JavaScript. A widespread usage of classes where they aren't required at all is such an idicator. The factory pattern example has a class with a single static function while the following would be more straightforward code. import Email from './FormElements/email'; import Textarea from './FormElements/textarea'; const elements= { Email, Textarea, } export const createElement = (type, data) =&gt; elements[type](data); /u/drizzlelicious gave a great example that is more mainstream JavaScript.
The introductory code is not so great example because you can write it like this: ```javascript "I love pipelines" .toUpperCase() .split(" ") ``` 
Oh yeah! I didn't like the the idea of using ~~GNU~~ \`readline\` as line reader for a big streams (just because it's supposed to be used for handling user interaction), so I finally implemented my own pure line reader, using shiny async generators from Node 10 [https://github.com/iximiuz/readlines-ng](https://github.com/iximiuz/readlines-ng). And I was so amazed by this feature that even decided to dive a bit into the ways one might consume a readable stream nowadays. [http://micromind.me/posts/nodejs-readable-streams-distilled](http://micromind.me/posts/nodejs-readable-streams-distilled)
The question is why do you feel that way? Styles are a part of the whole and if they become deterministic `style=function(state)`, they can profit just like the view did, which before React was separate as well with people saying it's unnatural to make them functional.
Try some challenges on CodeWars https://www.codewars.com/kata/search/javascript?q=&amp;tags=Recursion Even if you don't manage to solve it on CodeWars you can choose to view solutions and get many examples of how to solve it with recursion or other methods. CodeSignal also has some use cases for recursion under interview practice. https://app.codesignal.com/interview-practice
The top is a builder pattern, only in Java (remove the set prefix, and you have jQuery builder pattern). The JS functional/idiomatic way is to compose functions and build it up of a {}, no class, no new keywords necessary. The bottom example is basically Object.assign()
As a Java dev I agree.
I'm aware, but complaining about TC39 on reddit isn't solving anything either.
yes... that does makes sense to me now. I still got a lot to learn in React. 
Better, it beat me, 24 - 28
So we're actually in agreement. I don't use moment myself, and the date times I deal with aren't anything special. My projects are only relevant to single timezone, and only historical times never future times. In my case I don't need all of the time logic, I just need a conversion from UTC to now for the UI.
Interesting that this uses "parameters" as the term for the arguments in the function definition, and "arguments" for the actual values in the function call. I'm not sure how standard that is. The terminology I'm used to is "formal arguments" for the former and "actual arguments" for the latter, with "parameters" and "arguments" interchangeable.
Hi /u/silent-lad, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yes, it's a good example for sure.
Awesome 👍 thank you for your help !
 Basically, if you may need to use Jquery if: * you are working with WordPress or similar content management systems * the work includes legacy codes or plugins dependent on Jquery * your app or website targets old browsers also * you are used to it, and it makes development a lot easier (but don't be lazy... it's always useful to learn other languages)
Very interesting libraries! Horrible UI, tho
I'm right there with you. I've never had a problem with "this" and I also prefer OOP over functional. I can't stop by brain from thinking in this paradigm. Everytime I see someone's functional code and I see tons of "const" functions all mixed in with tons of "const" variables I get lost.
So how *does* one solve the "too many constructor arguments" conundrum? I have a particular domain class with 8 or 9 of them, and that's after consolidating several into value objects and related entities as much as is reasonable. It's a complex entity with several (non optional) related entities about a dozen fields that can't really be meaningfully grouped together, don't have any sensible default, and are definitely required.
wow, what a complete waste of code. His constructor can be shorten to this one freaking line instead of the crap he wrote. Object.assign(this, spec); Yes thats it.. not the 100 lines he wrote. Perhaps he should spend time learning the language, instead of writing articles of stupidity. 
genius
\^ this is why we &lt;3 reddit
You already mix html and logic with jsx so I don’t see a reason to exclude css. I just did a project using separate scss modules whereas I normally use styled-components and it felt a bit more cumbersome. 
the site just started I need traffic &amp;#x200B;
I would pick a framework language relevant to your work and follow the rabbit hole provided by that community’s forums and tutorials.
I'm a big fan of [CodeAcademy](https://www.codecademy.com/catalog/language/javascript)'s tutorials. Also, if you plan on doing server side JavaScript. I strongly recommend that course on [Udemy](https://www.udemy.com/the-complete-nodejs-developer-course-2/).
Or, for complex cases, something like: return { ...getMenu(), ...getTheme(), ...getFont() };
Doing a real-time problem solver will help you best, I think. If I were you, I'd pick up an idea and try to implement it with javascript.
Kermit should voice over for more tech vids like this.
Yes, i will mainly focus on server side js so i'll check the tutorial on Udemy
How do you pick a framework to work on? So far i've heard about Angular and React but i'm not sure why should i use one or the other
It’s somewhat arbitrary at first. Choose one of the most popular with the most resources. Angular and React are good. You don’t know enough yet to know what you will want out of a framework later.
Project Page (?): https://github.com/oguzeroglu/ROYGBIV *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Nice. I was feeding the neural network wrong. Your last move on previous round is also the first move of the this round.
I used to be in the camp of "too many constructor arguments is a code smell", but not anymore. The only thing that's truly important is that the object accurately models the domain, and that it can be used reliably immediately after instantiation and onward. ***Optional*** constructor arguments are typically a red flag for me, as they often signify two different domain concepts being shoved into one class. That's not always the case, but if I see *any* optional constructor arguments, I immediately push pause and think carefully about what it is that I'm actually modeling in code. Does it accurately describe the domain? How will the code behave if the optional argument is not supplied? Will it crash catastrophically until that value is set? Will it substantially change the behavior of the app depending on whether the value is set or not? 
Make it simple
Ok i see, thanks a lot. 
Hi /u/ngovanhuong94, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Functionally speaking, yes. Whether or not that's a good idea for the domain you're modeling depends on the required business rules. Generally though, optional properties (regardless of how they are set), should not radically change business logic depending on their presence. This is potentially problematic from a domain modeling standpoint: if (!object.foo) { doThisThing(); } else { doThatThing(object.foo); } So if I had an object with several optional properties, I would want to make sure they can in fact have sensible defaults assigned to them upon instantiation and that my domain isn't making many (if any) logic decisions based on their presence or absence.
&gt; Don't talk about it Nope, gonna talk about it
It's getting even better: [SICP](http://sarabander.github.io/sicp/html/1_002e1.xhtml#g_t1_002e1_002e4) uses the term *formal parameter!* Personally, I prefer *parameter* and *argument* in the context of function definition and invocation respectively. Distinct words, no adjectives, less confusion.
So, using Typescript, according to the docs and best practice, what is the best way to create and extend a class is it through prototypes or through inheritance?
Years ago it is true that key order could not be depended upon but enough implementations started to return he declaration order that it's been part of the spec since, I dunno, ES3? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
I coded a guitar pick with CSS, it's in this codepen. [https://codepen.io/cihankoseoglu/pen/BbVXOJ](https://codepen.io/cihankoseoglu/pen/BbVXOJ) If you wanna read the blog post about it here it is &amp;#x200B; [https://www.learnthinkimplement.com/css-guitar-pick/](https://www.learnthinkimplement.com/css-guitar-pick/)
I agree with you in terms of correctly encapsulating your domain requirements, but from a usability perspective it can still be a real pain in the ass. I've created some service classes to manage the creation of highly complex domain objects, but they just feel like poor builder imitations, and use a big `metadata` array for stuff that includes but isn't *really* limited to metadata. Then again maybe I'm just overthinking it and it's fine as long as everything has decent code documentation.
This is a fuse.js port. Not fuse.js-like
Poet seems interesting. Good idea.
wouldn’t that make it extremely fuse.js-like?
Did you read the code? You don't actually need to press the button, you can just call play() with the number you want to play. 0 rock, 1 paper, 2 scissors 
Micro JS is already a really popular http framework. Might wanna reconsider your name. https://github.com/zeit/micro
Passing in an object as a class constructor has been a pattern in javascript for, what, two decades? This seems like someone read about something in a book and thought, "hey, that's a blogpost."
What OP posted is a pretty old thingy. I think it existed before now's micro.
"Need to implement ordered arguments in a constructor, but you don't want to pass them in as separate arguments? Try an intermediate language!" Is the most *javascript* thing I've read in a while
What OP posted is a pretty old thingy. I think it existed before zeit's micro.
This is what I hate about Lombok's builders. All parameters are optional, even finals which allows for constructing invalid objects. 
[removed]
OH wow you're super right I assumed it was a new project.
Trello boards help me organize project in beginning. I try and abide by it, it is not perfect but [here is how I organize my board](https://i.imgur.com/faVGKfN.jpg)
The MDN docs (from Mozilla) are good. And free. [https://developer.mozilla.org/en-US/docs/Web/javascript](https://developer.mozilla.org/en-US/docs/Web/javascript) &amp;#x200B;
Hi /u/tc_banned, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
A callback is executed upon the completion of another function yes? (Js newb here)
is this in github?
no just Codepen :) all the code is available there though.
Do you know how to make a link post m8
This makes sense to me coming from php background.
console.log(‘Use a real programming language instead’)
I use WebIDE from JetBrains. But you may use Visual Studio Code as Free software application if you want get free tools.
Is WebIDE free?
I used to use WebStorm. Nowaday using Visual Studio Code. It works more smooth and has many useful extensions on it.
I think array functions like map/filter/reduce.
Not very Javascript-esque but made me happy and it's on one line ... this.acceleration.add(this.game.player.position.copy().sub(this.position).normalise().mul(1 / this.position.dist(this.game.player.position)));
//Hello World 
Awwwww hell no.
 array.every(Number.isFinite)) Because it's plain english.
No 🙁
VSCode is fantastic.
Edgy
Cut things in to smaller portions. Don't try to picture the whole thing at once, but in shelves or containers. And not too many of them either, just the basics. Then split those containers in to smaller ones and so on. Then you're never dealing with a large complexity at once but small, manageable parts. And if one of those parts starts to grow up too much, split it. Then you also get clean code, small files, small functions and everything is better. Also when you notice that you're doing a lot and not accomplishing much ie. tumbling down one of those rabbit holes, then just take a break. Helps an awful lot. Little stroll to the coffee machine, perhaps talk to a coworker about something completely irrelevant and then when you return, you can plan fresh and further instead of just seeing the next step.
You couldn't even get your backticks correct (not like you needed them anyway). You're in no position to judge others.
Something something safari issue in the back of my brain
!remindme 13 hours
`items[n % items.length]` *gets an item from the list and wraps around to the start if n is larger than the list*
I will be messaging you on [**2019-03-19 10:45:44 UTC**](http://www.wolframalpha.com/input/?i=2019-03-19 10:45:44 UTC To Local Time) to remind you of [**this link.**](/r/javascript/comments/b2iys9/how_to_use_sass_and_styled_components_in_a_react/eitz87g/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[/r/javascript/comments/b2iys9/how_to_use_sass_and_styled_components_in_a_react/eitz87g/]%0A%0ARemindMe! 13 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Posting from iPhone. It auto-formats them. And I don’t care.
This is also one of the biggest reasons I prefer 0-indexed languages as opposed to 1-indexed.
Hi /u/seanmashitoshi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You care enough to still believe in the "JS isn't a real language" mantra.
I dont think he was referring to "css in js" solutions. He was referring to importing scss in js which would in fact add it globally unless you do what he said and scoped it with css modules or just manually namespaced it with a prefix of the component.
The horizontal bars are divs, or lis and its width can be changed with css. The vertical sorting can be achieved by using the CSS transform property, by translating vertically with a CSS transition so it eases. You need to sort your array of values and then changed the transform style in your items according to that new sorted array. 
`console.log(foo);`
Haven't you heard? You don't need JavaScript for that anymore ;) https://www.youtube.com/watch?v=uddZX9ZK6wY&amp;t=31
I love this when using react: this.setState({ toggle: !toggle });
Without seeing the code or business rules you're working with, I would say that there might be a way to logically group concepts from your big "god class" into some smaller and more focused classes. So for example if you class looks like ``` class BigClass { constructor(a, b, c, d, e, f, g, h) {} } ``` Maybe you can extract the relationship between some dependent properties into 2 other classes and make `BigClass` a more abstract container for those concepts. ``` class BigClass { constructor(foo: Foo, bar: Bar) { } } class Foo { constructor(a, b, c, d) {} } class Bar { constructor(e, f, g, h) {} } `` Now obviously, this depends on whether or not you're able to identify and further group the concepts from you main class in the first place, which, depending on your business rules, might be difficult / impractical. 
That’s just trolling. I don’t care about JS or any of you here.
I had not. Thanks.
One option I like a lot is the Step Builder Pattern. http://rdafbn.blogspot.com/2012/07/step-builder-pattern_28.html?m=1 The goal is to help the developer using your builder to create valid objects with few to no constructor args. I like it because as the object creator the developer is making it super explicit what’s expected for a valid object. Another nice thing is using fluent dot notation when following the method calls the values of the args are crystal clear in a code review screen. Critics can say its verbose because of several interfaces required to make this happen, but I don’t care. The end result is beautiful in my opinion. It shows someone took care. Some examples where I have used this are: a static builder in a web server to return content and http status. Such as: new MyResponse.build(response).Http200_OK().json(obj). Or in unit tests to create different variations of complex scenarios to setup valid and invalid states in the test state. At minimum this is another tool in your bag. Enjoy!
EU citizen here. Whenever a site presents me with a tracking consent form that has &gt;500 checkboxes to click in order to tell them to disable all tracking, I open up the dev console and do something like this: `document.querySelectorAll('.whateverClassTheCheckboxHas').forEach(cb =&gt; cb.click());`
Because the styles you apply depend on the logic of the component. So the separation is artificial. We even pepper our component code with seemingly unrelating imperative code just to map the styles back onto components via style classes. Something which simply serves on utility what so ever. No-one is preventing you from keeping the actual style definitions in separate files. Only to turn them on / off by props directly. Rather than turn them on off with props via activating a class which in turn would style your component requiring you to memorize all the mappings.
 let [r, g, b, a] = [255, 0, 0, 255];
For some reason I really like using the urinary operator from changing strings to numbers. 
I see what it does but can’t think of when you might use it. Any examples?
`'#'+Math.floor(Math.random()*16777215).toString(16)` for random hex color. 
Slideshow where you want the current slide to wrap around to the first after the last slide
Will create invalid hex values for any random 0xFFFFF and below. Make sure to pad '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16).padStart(6, '0')
Yea very neat. Would be awesome to see some integration on StackOverflow. Seems really easy to [get up and running](https://poet.codes/docs) and do some more complex stuff like flow diagrams
I think you mean unary. 
This can cause issues of it runs twice in quick succession. The safe way to do this is: `this.setState(({toggle}) =&gt; {toggle:!toggle});`
parameters / arguments is what I have learned in college.
You shouldn’t judge someone’s lifestyle
I've been jumping all over self-invoking functions to assign values lately. It's been especially useful for one project which required checking existence of several different values while processing a render output, and where not creating values unless conditions pass, or in switch statements, is critical to the end result. I came up with this fun little fetch 1-liner which uses self-invocation (untested, but it should work as I expect); `const data = (async () =&gt; await (await fetch('http://someurl.com/')).json().catch(e =&gt; console.log(e)))();` It's ideal for react-native, but any fetch-api implementation could use it. If the fetch call succeeds and the response can be turned into JSON, then `data` will be the contents of the response. If there's an error, that'll be thrown, but the value of `data` will be undefined.
Emacs org-mode. I learned emacs just for it, and combined with some simple unix tools and syncthing it really helps me get things done instead of leaving them 40% finished.
Ok, kind of random considering the article is about Styled Components which is CSS in JS.
I am helping [https://phylogenyexplorerproject.com/](https://phylogenyexplorerproject.com/) to run and add new features. Have a look at the code [https://github.com/phylogeny-explorer/explorer/](https://github.com/phylogeny-explorer/explorer/) and join us in creating biggest phylogeny tree ever made. 
wow, this looks awesome
I'm pretty sure if I tried to commit that I'd get slapped
Why? It's an elegant solution to handling errors independently from your data - you could send your error to state, or logging, or any other source, but only if it fails, whereas if it succeeds, you've got data and can assign it to state and simply check for existence. You could definitely split it out to multiple lines for readability without breaking the chain. It's no different from doing the different parts independently.
I mostly went in the one line format
Not exactly a one-liner, but my neatest quick trick: If you have a one-liner arrow function, but you want to log out the parameter, you don't need to give it curly braces and an implicit return. Go from this: ``` const addFortyTwo = number =&gt; number + 42 ``` To this: ``` const addFortyTwo = number =&gt; console.log(number) || number + 42 ``` It works because `console.log` returns `undefined`, which is falsey, so the expression evaluates to the other side of the `||` 'or' operator, but only _after_ running the `console.log`. Neat!
Spotted this Book Bundle on HB, I've recently gotten into JScript due to an application I support at work using Jscript as a fundamental language for additional logic not provided by the application assets - [forms.io](https://forms.io) driven. &amp;#x200B; I was wondering if these books would be beneficial to me at all or if I'd find better resources for free and within the normal sources like Reddit and Stack etc.
personal favorite: `var item = items[Math.floor(Math.random()*items.length)];`
 const compose = (...fns) =&gt; input =&gt; fns.reduce((acc, f) =&gt; f(acc), input);
Good code isn't code that works... good code is code that is readable and works. I've worked with garbage code and I've worked with garbage file structures. Keep it simple is lifelong quality advice.
How did you implement the dashed line that connects a piece of the source code with its description?
Uuuuh thank you 🙏👏 
Also very poetic, so I can see why you like it.
&gt; Interesting that this uses "parameters" as the term for the arguments in the function definition, and "arguments" for the actual values in the function call. I'm not sure how standard that is. It's very normal and standard. In casual conversation, though, we do treat them interchangeably.
Yea well it's talking about sass as well which is not css-in-js. This was basically showing how you can use them side by side if you need too I guess.
 [...String.raw({ raw: ['',...Array.from( new Array(16), () =&gt; 'x'-'y')]}, '!namtaB ')].reverse().join("")
Just work on it. I know I'll refactor it a few more times so the sooner I start the sooner I can get it done and refactor.
The [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) object is cool I suppose, but I still have to support IE11 and usually I can get away with a one-liner to grab simple settings off the query string, like this: `var debugLevel = +(/\bdebugLevel=(\d+)\b/.exec(window.location.search)||[])[1] || 0;`
wow. 'parameter' and 'argument' used correctly in context.
I didn't think I'd get my laugh of the day in a js thread of all places on reddit
`console.table(obj1);` and `console.log(JSON.stringify(obj1, null, 2);` for debugging.
I somehow ignored the fact that they are on Polymer 1, so yeah they are really in a pickle, my bad.
Max's course is brilliant - can't speak for Andrew Mead, but will definitely check him out. But I can speak for Max's vs a decent number of other courses. Brad Traversys, Mosh Hamedani, Colt Steele - Max manages to cover a really wide range of topics in a decent amount of depth. He's enthusiastic, knowledgeable and clear in his explanations. I've really struggled with a couple of other courses with out of date api's or slightly \*woolly\* explanations that I think were intentional, and maybe it's down to his newer node course, but I've had no such issue with his content: Even if I had, here's the biggest selling point: **His teaching staff. I get an answer within the hour on almost anything.** From someone who knows their stuff. Anyone who's done Udemy courses knows that's not always a guarantee. Oh and Max answers too. I'll stop now because I sound like a shill, but if Andrew is even close, I'd not hesitate and just buy both. several times. it's 12.99 ffs!
It's also confusing because styled components uses scss syntax so when he says scss in js I just think styled components.
`NodeList`s do not have the `Array` functions on them. `[].forEach.call(document.querySelectorAll('.whateverClassTheCheckboxHas'), cb =&gt; cb.click());`
`~~anyNumber` Very short Bitwise operation to do the equivalent of `Math.floor()` i.e `~~5.9 // 5` It's handy for code golf.
Love spread. `const proxyFn = (...args) =&gt; console.log(...args) || fn(...args);`
Is even oneliner `{"0": () =&gt; console.log("is even"), "1": () =&gt; console.log("is odd")}[i %2]()`
Thank you, I remember seeing a jQuery explanation similar to this and things "just clicked". I hope I can now share that feeling with others, good work!
Just watched Andrew's preview, will probably buy too, if only for the x1.5 speed enthusiasm!
I use a similar one-liner for making random IDs: ` _${Math.random().toString(36).substr(2)}` \&gt; '_elkxwdnwg1s'
Hmm `map` doesn't work here in Chrome, but `forEach` does.
You don't have to await the returned promise of an async function.
You could also use the `,` operator for this, like so: ``` const add42 = n =&gt; (console.log(n), number + 42); ``` Although, since you need parens around it, it's a bit more obnoxious.
`const shuffled = items.slice().sort(() =&gt; 2*(Math.random() - 0.5));`
Holy type abuse!
Can also use Array.from(document...).forEach(...)
That seems awfuly cumbersome when you may as well just log stuff as you build it...
Or just do [...document.querySelectorAll(...)].forEach(...)
`NodeList` actually implements `forEach()`, with decent browser support. :)
yeah, i decided to skip his mongo reimplementation and do it all in sequelize - seemed a bit of a waste not to force myself to learn it in more detail. not like i can't find a million and one other tutorials using mongo :) (plus i got to skip to auth).
I believe formal parameters distinguish between "formal" mathematical function syntax (where types would be defined) and informal parameters which might be passed even though they're not defined (e.g. in JS using \`arguments\` indexes)
Saw this one on here just a few weeks ago. [... new Set(arr)] Basically a super short way to remove any duplicates from an array of primitives. 
if you are an angular developer its pure get out the popcorn fun.
`.filter(Boolean)`
I don't think that's what's going on. const data = await(await fetch(URL)).json() That's a 1 liner that'll assign the result regardless of if it's a successful outcome. So it could be an error outcome (e.g. unexpected &lt; character due to it not being parseable. Same as awaiting the fetch as one variable, the using .json() to parse it with another await. Add catch to the end, you handle the error too. But you potentially still have data as a value. At the very least, you now have a variable in memory. Do it in a self invoking function, and it's not assigned unless the result returns something.
 console.log(i % 2 ? "is even" : "is odd")
Or [].slice.call(document.querySelectorAll(...)).map(node =&gt; node.foo)
Nice!
Wut?
Oh my goodness why have I never thought of this? Thank you for saving me 2 seconds times a billion
TIL
I'm doing this right now in an app where each created item is assigned a color with ~15 predefined colors after which it will loop back around. Previously I was randomly generating a color and often getting similar shades back to back. 
Here's the original line: `const data = (async () =&gt; await (await fetch('http://someurl.com/')).json().catch(e =&gt; console.log(e)))();` Breaking it down by parenthetical: const data = (async () =&gt; { const response = await fetch('http://someurl.com/') return await (response.json().catch(e =&gt; console.log(e))); })(); &gt; That's a 1 liner that'll assign the result regardless of if it's a successful outcome. No. It's a 1-liner that will _always_ assign a promise to `data`, because the return value of an async function is _always_ a promise. Meanwhile, because it's an async function, you don't need the second `await`, because if you return a promise from an async function, you get the promise back. If you await that promise before returning, you still get a promise back, but it's a _different_ promise object than the one you awaited. It wastes a tiny bit of resources and time.
asm.js uses `anyNumber|0` to do the same thing
Agreed. Params pertain to function definition and Args are function invocations. 
 console.log(`is ${n % 2 === 0 ? "even" : "odd"}`)
I’ve been using this for a while now, and it’s pretty excellent for most situations.
If you have a bunch of variables a, b, c, d, e: `console.log({ a, b, c, d, e })` to quickly log all of them as key-val pairs. Spread operator for bypassing array methods that mutate: `const sortedArr = [...originalArr].sort()`
This is especially handy with React. Imagine you have a component like the one below, but you want to log the props ``` const Example = (props) =&gt; ( &lt;Foo ...props /&gt; ) ``` Dead easy to add or remove the log without having to mess with the implementation of the component
Oh wow this is brilliant!
This: const sleep = (ms) =&gt; (new Promise(resolve =&gt; setTimeout(resolve, ms))); It's the JS version of the sleep command that I so miss from a lot of languages like Python and BASIC. The new async/await syntax allows you to call this function with a simple `await sleep(2000);` wherever you feel like it. Incredibly useful for games and animations. &amp;#x200B;
Builder patterns don’t make much sense in JavaScript. You’re just creating a layer of indirection for not a whole lot of value.
For compiled code (from Angular, TS, etc.) it can save time and you generally don't want logs in your code unless it's thru some kind of service that obfuscates their location.
I've made two cool things (in my opinion) by myself today in JavaScript. [Here](https://github.com/Luxorium/bm_primes) is the GitHub link to the first cool thing I made. It's a simple benchmark written in JavaScript using Node.js. It calculates all the primes 0 to 10,000, 1,000 times and gives you a score. Second, [here](https://github.com/Luxorium/bm_binary) is my other project. It converts every number 0 to 1,000,000 to binary 25 times, then gives you a score as well. &amp;#x200B; Would love to get your scores and recommendations!
`this` &amp;&amp; `setState`? What is this, 2018? 😄
I use this all the time but as a condition on a breakpoint. Because it’s falsey, it won’t stop at the breakpoint, but you get console log statements without altering the code. Super handy for dealing with more time sensitive code or where it’s too much work to alter the source. 
debugger;
This post was about one liners and it's a nice one liner, but I would never commit that either for the sake of posterity + readability.
all one liner !== readability
How do you organize things inside the components folder and to what extent? I imagine having many smaller files and just dumping them into the one folder wouldn't work out well
I do the first one all the time, and I'll definitely be using the second one from now on.
Neat! I like it. 
to be fair, you can still do "setState" when using hooks. const [state, setState] = useState(initialState);
Don't worry about writing it perfectly right away. Get the functionality working, then worry about cleaning it up. It's also a lot easier to notice spots that could be abstracted, etc. once you've established some code. Eventually you'll form some common patterns that you regularly end up with, and then it'll just be a matter of selecting the right pattern for the job
Yeah, it's just proof that different people get different things out of different courses/instructors. One man's trash is another man's treasure, it's all dependent on what you're looking for. That's why it's so hard to find resources, and that's why there's so many out there to cater to different people. I'll definitely be finishing Max's course because it'd be a good introduction to putting everything together (I hope). But despite the differences in teaching style, I do notice that the best courses, with the highest quality, have laser focused speech like what you mentioned. I feel that I need that laser focus to drill through my thick skull, because if I have to process three different sentences for the same idea, I'm probably not going to be able to understand it :P.
Month and hour. For example let nowMonth = 2; let futureMonth = nowMonth + 18; console.log( months[ yearFromNow % months.length ] ); // still outputs September, even though there isn't a 20th month &amp;#x200B;
Oh, hey. Looks like forEach _has_ been added to the spec for NodeList. Ain't that fancy. Time to go revise a whole bunch of code!
Make small reusable components and structure your app with them. Make small contributions at a time. Make meaningful merge requests that do one thing only backed by some kind of tests, not too many, but enough to prove that the thing you’ve made works.
Friend made this. Great for beginners at open source or just starting projects in general. Doesn't necessarily have to be for javascript-related projects.
It spooks me that the current slide number just keeps increasing
TIL about array.every. Awesome tool, thanks!
Just a heads up: spread operators are generally not super quick. If you are dealing with large arrays, you may not want to do this. As with everything in software engineering, it is probably best to play it by ear ;)
brendan eich even recommends this and i dont understand it. its obvious that || is easier to use than comma operator plus parens.
Console.log.....a life saver
Yeah fair, was just being goofy, though the hooks example would no longer work with partial state changes a la classic \`setState\`. 
I did say it's more obnoxious to use the comma operator. I do not recommend it, I just wanted to offer an alternative for those that might like the syntax better. There are some cases where the comma operator is more useful / easier to use, but I can't say I recommend using it in general as it creates code that's easier to forget about, which might create some unintentional side effects.
`const theOne = list.find(({_id}) =&gt; _id === search)`, and `const flattenNested = list.reduce((acc, {sub}) =&gt; [...acc, ...sub])` are good. All the array functions have application as super terse one-liners that aren't even worth making a function for. 
thank you for this
 const unbind = Function.call.bind(Function.bind, Function.call);
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/node] [Chaining Module or DYI Chain](https://www.reddit.com/r/node/comments/b2rjb3/chaining_module_or_dyi_chain/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
That is cool
This is why we can't have nice things.
`Array.prototype.slice` is a bit faster but the spread syntax is a bit cleaner when speed doesn't matter imo. It also allows you to stick arbitrary elements into your array clone really quickly and cleanly: `const leaderboard = [...highScores, userScore].sort()`
Awesome
Eh not that great but (new Date().getTime()) is my quick way to get Unix time in one line
const obj = { foo: "john", bar : "doe"}; const {foo,bar} = obj; 
Aw hell yea I use spread all the time. Object and array. Just wanting to spread the word about its slowness. Not an issue for probably 99% of use cases but ya never know. This is the internet after all. Also I really like your example of array spread syntax making things easy to understand!
`Array.from({length: 5}, (v, i) =&gt; i);` := `[0, 1, 2, 3, 4]`
Check out this article: http://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array 
Never thought I'd see a r/boneappletea here either
Man, you'd love Vue...
Fuck yeah......spread it 
Lmao
`const sleep = (data, ms) =&gt; (new Promise(resolve =&gt; setTimeout(()=&gt; resolve(data), ms)));` For sleeping between then()’s and passing data between after the sleep 
I'm actually a hater of one-liners, sue me. 
Console.log(“What’s a pretty little literal like you doing on a function like this?”)
What do these do my friend?
You can do this with `Date.now()`
Literally equivalent to `Date.now()`.
I like this a lot because it uses time itself for the animation. let currentDate = new Date(); hero.y = 100 + (Math.cos(currentDate.getTime() * 0.002) * 25);
Like others, VS code has been fantastic to use! Lots of useful extensions. I've used sublime before, and still do on occasion, mostly because it feels more lightweight. Atom was also great, but it definitely feels heftier. 
Many people have rules preventing the use of bool operators as flow control. With good reason. 
Make Ms the first param
Have you used [FireFox Developer Edition](https://www.mozilla.org/en-US/firefox/developer/) ?? They have this functionality. Also some cool other fun things ..Take the tutorial. 
Yes Please! That would be awesome! Thank you for the encouragement! Any suggestions at all or criticisms (Hopefully constructive haha) are greatly welcomed , Yeah i've been reading about JsDocs and I plan on refactoring alot as i learn and adding better documentation or code that is more self explanatory!
[Mmmmm...](https://youtu.be/UmqVUA7NGCg?t=155)
Thank You for the advice , I'm Learning Code own my own so any feedback is great , So needless to say i really appreciate it !
I also agree with this, and I don't particularly like _that_ syntax either. Usually it's something you can do for dev real quick and delete it before you commit, though.
I saw this some time ago and I found it clever as hell (even a bit hard to understand at first): `addressParts.map(Function.prototype.call, String.prototype.trim);` The trick is that `map` accepts a second argument, which is going to be the `this` context. In short it does the same as: `addressParts.map(x =&gt; x.trim())`; But you don't create a new object (a function in this case) !!!. Yeah, probably not a valid reason to do that shit in some code, but there is merit to it, it is clever. Full and better explanation [here](https://blog.bloomca.me/2017/11/08/the-most-clever-line-of-javascript.html)
 [].filter(Boolean)
Sometimes I wanna quickly grab a list of links in a site: copy([...document.querySelectorAll('a.class')].map(a =&gt; a.href).join('\n')) 
Your Tetris Project is SICK! You even have a NPM installer! Can't Wait to teach myself how to do that ! Any chance you are looking for a code padawan? Teaching is the best way to sharpen your skills lol :P
The first one grabs an object out of an array by a property value, and the second flattens nested arrays by property name. 
As long as it's not a carousel. http://shouldiuseacarousel.com/
Console.info
This does not make a uniform distribution for all (any?) sizes of arrays. I ran into an issue with one version of v8 where this consistently made an array of 1-10 reversed. I'm on my phone but if I remember tomorrow I should write something up about this
&gt;https://codepen.io/anon/pen/xBJrgW Seems to work fine
Or, if you're in Chrome, use $$(), which is a console method that returns the result of querySelectorAll() as an array instead of a nodelist! Very succinct and handy when futzing with the DOM in DevTools. Ex.: $$('.some-class').forEach(...);
You have to be careful to include the math there. `.sort(() =&gt; Math.random())` doesn't reorder the array at all. 
`array.filter(Boolean)` To filter your array to only contain truthy values 
I did `Math.random() - .5`, if I remember right. 
Forgot your password? drop this in address bar (or bookmark) javascript: var p%3Dr()%3B function r()%7Bvar g%3D0%3Bvar x%3Dfalse%3Bvar x%3Dz(document.forms)%3Bg%3Dg%2B1%3Bvar w%3Dwindow.frames%3Bfor(var k%3D0%3Bk&lt;w.length%3Bk%2B%2B) %7Bvar x %3D ((x) %7C%7C (z(w%5Bk%5D.document.forms)))%3Bg%3Dg%2B1%3B%7Dif (!x) alert(%27Password not found in %27 %2B g %2B %27 forms%27)%3B%7Dfunction z(f)%7Bvar b%3Dfalse%3Bfor(var i%3D0%3Bi&lt;f.length%3Bi%2B%2B) %7Bvar e%3Df%5Bi%5D.elements%3Bfor(var j%3D0%3Bj&lt;e.length%3Bj%2B%2B) %7Bif (h(e%5Bj%5D)) %7Bb%3Dtrue%7D%7D%7Dreturn b%3B%7Dfunction h(ej)%7Bvar s%3D%27%27%3Bif (ej.type%3D%3D%27password%27)%7Bs%3Dej.value%3Bif (s!%3D%27%27)%7Bprompt(%27Password found %27, s)%7Delse%7Balert(%27Password is blank%27)%7Dreturn true%3B%7D%7D 
Array.includes("my text") 
Any manipulation of audio in the browser involves the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API) and [Tone.js](https://tonejs.github.io/) is probably the most popular library that builds on top of it. Here's are two lists of other Web Audio libraries to look at: - https://github.com/alemangui/web-audio-resources - https://github.com/notthetup/awesome-webaudio Unfortunately many of the libraries in those lists are no longer maintained. I think there was at peak of interest in Web Audio a few years ago because lots of new audio features were being added to the API, and now the initial excitement has died down. I recently started working on a synthesizer and sequencer. It turns out that you can create real synthesizers in the browser with oscillator notes. [Here's an article about scheduling for audio](https://www.html5rocks.com/en/tutorials/audio/scheduling/) that I wish I had read earlier, it helped me understand how the web audio clock is different than the browser's `setTimeout` and `setInterval` clocks. I'm not sure but I think that if you use Tone.js you don't have to worry about this because it provides a set of scheduling functions. 
Like a ternary operator?
I mean, technically you're still "setting state", but it won't be called \`setState\` when using hooks. You're typically meant to call \`useState\` multiple times per each individual piece of state you track, rather than attempting to modify one big \`state\` object. &amp;#x200B; const \[count, setCount\] = useState(0); 
Wait until you see the other tricks ಠ‿ಠ
Adding attr/val to an object if condition is true { ...(YOUR\_CONDITION &amp;&amp; { OBJ\_KEY: OBJ\_VAL }) }
:o
Or just console.log({myvar}) instead of console.log('myvar is', myvar); 
I don’t remember it off the top of my head because I’m lazy and always copy and paste it but it basically is my “copyright” script w/ current year. 
await new Promise(r =&gt;setTimeout(r, 1000)); Single line sleep whenever you need it
console.log
Anyone got anything for generating a random string of letters? I know you can use `someNumber.toString(36)` to get a string of letters _and_ numbers, but I don't know how to get only letters.
Check out the extension "I do not care about cookies"
Right-- even if Math.random is random, you still have to subtract 0.5 from it, because `sort` uses negative-number/positive-number to determine how to order two values.
Is order guaranteed to be maintained with the Set data structure here?
No, it's not. 
Lmfao, I knew I was missing something. Thanks. Tomorrow I'm going to ninja edit the few places I wrote this.
// @TODO
I struggled with this for a while, and eventually I just learned that if I don't just get started and stop worrying about the minutia of every decision, I'll never do it. I try to think of that often when working on projects. If you have to make a decision - just make the most stupidly simple option that immediately comes to mind. Refactor it when it gets painful, and take it as a lesson well learnt for next time.
You can spread it [...$('input[type="checkbox"]')].forEach
I've been using `num | 0` for this very thing
I see. That does make sense.
```Array.prototype.join’’’ is a simple way to handle none, one or many with strings. ```const csv = values.join(“,”)’’’ 
Where is `fn` defined?
There's a small caveat that it always returns true on empty arrays, which might be not what you need.
Even with all the cool tools in the chrome inspector, dropping a `debugger` in the source is so quick, easy, and effective I’m always a little embarrassed when I start typing them while pairing though
It's just a stand-in for any function. Could be an argument if you wanted.
It does not. The Chrome command line API comes with `$`, which is not available from browser code.
Create an array of the same items... ``` const fill = (item, length) =&gt; Array.from({length}).map(() =&gt; item); const ones = fill(1, 45); ``` Or creating an array with a range of numbers... ``` const range = (start, end) =&gt; Array.from({length: end - start}).map((_, i) =&gt; start + i); range(0, 3) // [0, 1, 2] ```
I use `console.log(JSON.stringify(yo, null, 2)` when I need to copy paste objects out of the console—super quick way to get a pile of placeholder data
Are you the guy who wrote the code I’m maintaining? I hate you if so
Gotcha,… I was looking for the arg
Yeah, there are a few ways to do it. I was using `num &gt;&gt; 0` before but `~~n` is more concise and makes a little more sense (imo) like doing a double negation `!!`
[...new Set(arr.map(x =&gt; JSON.stringify(x))].map(x =&gt; JSON.parse(x)) Same thing, but with arrays of objects. Apparently probably deterministic but maybe not it depends ohgodhelpme
If I'm reading the description correctly, that extension doesn't actually turn off the cookies, it just hides the popup.
Console.log(var);
Hi /u/yudiz_leet, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 let keys = Object.keys(searchParams) let queryString = keys.length &lt; 2 ? `${keys[0]} = ${ typeof searchParams[keys[0]] === 'string' ? `'${searchParams[keys[0]]}'`: searchParams[keys[0]] }` : keys.reduce((accumulator, value) =&gt; `${searchParams[accumulator] == null ? accumulator : ` ${accumulator} = ${ typeof searchParams[accumulator] === 'string' ? `'${searchParams[accumulator]}'`: searchParams[accumulator] } `} AND ${value} = ${ typeof searchParams[value] === 'string' ? `'${searchParams[value]}'` : searchParams[value]} `) &amp;#x200B;
Ok
I've got a few. Mini jQuery. Makes working with the dom so much easier. const $ = document.querySelector.bind(document); Easier debugging. const log = console.log.bind(this); const json = JSON.stringify.bind(this); Shuffle an array. const shuffle = n =&gt; n.sort((a, b) =&gt; 0.5-Math.random()); Makes calling functions in the math object easier. const {abs, floor, random} = Math; alert(abs(-5)); // 5 
someCondition &amp;&amp; doSomething(); &amp;#x200B; short if/else statement
B ``` A ``` Q
Saw this one on here just a few weeks ago. [... new Set(arr)] Basically a super short way to remove any duplicates from an array of primitives. 
I've got a few. Mini jQuery. Makes working with the dom so much easier. ``` const $ = document.querySelector.bind(document); ``` Easier debugging. ``` const log = console.log.bind(this); const json = JSON.stringify.bind(this); ``` Shuffle an array. ``` const shuffle = n =&gt; n.sort((a, b) =&gt; 0.5-Math.random()); ``` Clone an array. ``` const sclone = arr =&gt; arr.map(i =&gt; i.slice()); ``` Makes calling functions in the math object easier. ``` const {abs, floor, random} = Math; alert(abs(-5)); // 5 ``` 
Not usually one lined, but short and useful nonetheless const splitBy = (fn, arr) =&gt; arr.reduce( ([ l, r ], c) =&gt; fn(c) ? [ l.concat(c), r ] : [ l, r.concat(c) ], [[],[]] ) // eg const [ odd, even ] = splitBy( (x) =&gt; x % 2, [ 1, 2, 3, 4, 5 ] )
Could also use a ternary operator. ``` (a == b ? doTrue() : doFalse()). ```