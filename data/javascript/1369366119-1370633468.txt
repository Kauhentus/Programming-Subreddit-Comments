Looking at the comments here, there's one key thing everyone forgets: ASM.js is not just ordinary JavaScript, it's a subset of JavaScript that existing interpreters already optimize really well. Sure, a dedicated implementation is only present in Firefox Nightly, but any ASM.js code will run pretty fast in Chrome.
Same specs here, also on Chrome. Smooth as glass.
They constructed this site in a way that shouldn't cause your system to crawl. Instead of using lots of sprite animations they're changing the visibility on containers.
Weird. The repo is still down. Does it mean you don't intend to file a counter-claim? 
TL;DR, where can I run those benchmarks? I wanna compare FF nightly to the new chrome beta, since [it is promised to perform better in JS](http://blog.chromium.org/2013/05/chrome-28-beta-more-immersive-web.html)... 
&gt; the language is not "bad" any more than any other language is "bad" We are talking about JavaScript here - it's got flaws that other languages don't have. 'Bad' is a subjective word, but a case could be made that JavaScript is not as tidy (also subjective) as Python, or as performant as C++.
&gt;Compiling takes much longer Where did you get this figure? It's JIT'd and compiled on the fly so it cannot be very slow since it would defeat the point
I feel like it's missing its inevitable end-state: isStabbedThroughTheFaceWithKnife
That was completely and ridiculously overengineered, and probably unnecessary to begin with. Please forward your resume ASAP.
End state is she purrs-&gt;can get away with anything. 
This is incorrect. The state after every event should be "Cat is standing in doorway. Cannot close door."
Here's a Timeline of events greater than 15ms. Notice all the painting. For a 5mb+ page, that's a lot. http://i.imgur.com/gEV0nN9.jpg
not as "tidy"?? Are you serious???? "Tidy" is a result of the programmer, not the language. There is untidy code in every language. Any language can be used to produce spaghetti code. Performant?? You do realize that javascript is an interpreted dynamic language, and not compiled to machine code before runtime, right? It was originally intended to run in a sandbox inside a web browser. You cannot compare performance of C++ and Javascript in any meaningful way, the two languages have different purposes. And once again, someone trying to bash Javascript fails because Javascript is no worse than any other language in syntax or gotchas. And nitpicking that Javascript is slower than c++ will get you laughed right out of the argument.
Ok [I've heard your feedback](http://bl.ocks.org/5643913) 
Yeah but your using a depreciated api, how long is websql going to be around? 
Eww, button type="button"? This is nothing a good input type="button" can't handle.
I've just scrolled down a page - why are you adding anchor links to the address bar Tesla? When I got to the bottom of your page I wanted to come back to reddit, not go to the previous section that I'd already read :(.
Go back to JavaScript. Everyone knows that CoffeeScript is for hipsters. You might starting to see a pattern here very similar to a finite machine you recently implemented. Coincidence, I say. On a side note, your cat needs a memory upgrade. Good luck finding a compatible format though.
These pages perform great. Very impressive and creative use of scrolling to boot!
That's not true, it won't submit if there's no form. Paste this data URI into your address bar and see for yourself. data:text/html,&lt;button onclick=document.body.children[0].innerHTML='Pee'&gt;Poop&lt;/button&gt;
Two event listeners... let's include an 81kb library!
Instead of using an array you could use an object.
What the other poster said, use an object, though if your using integer keys that's not json that'd just javascript. 
The coffescript ecosystem as it is you can't go full coffescript no javascript, your going to go back and forth
Ok, then I might be confused. I'm kind of new to this. I'm coming from PHP and using other peoples JS. (been doing an intensive learning cycle: I'm at 6 weeks with JS, 5 weeks with JQuery and 2.5 weeks with AngularJS ) (I might just be using multidimentional arrays where I thought I was using Objects.. ops :D) PS: CodeCademy.com is awesome.
Of course I'm serious. While I prefer the JavaScript syntax where it does not depend on indention, some people find forcing indentation rules to be tidier (I don't, I keep my code consistently indented, without being completely pedantic about it). A more major area where JavaScript's shortcomings show is in numbers. I know there are some new extensions that will overcome some of these problems (Math.newstuff), but it's not right at the core of the language. http://yuiblog.com/blog/2009/03/10/when-you-cant-count-on-your-numbers/ illustrates some of the counter-intuitive behaviour experienced. JavaScript is a dynamic language, but these days the fastest engines use JIT compilation down to machine code. Because they don't know the data types ahead of time the compilers can't optimize so much. This is a limitation of the JavaScript language. It's not nitpicking to say that C++ is faster at executing than JavaScript. Performance, in some cases, is very important indeed. My intention was not to bash JavaScript, but to correct misinformation about it. Some tasks that I have done in JavaScript which run OK (such as compressing PNGs efficiently) but would run better in C++. This only seems relevant to situations where both JS and C++ can be used, such as within node.js. Maybe some people do find this comparison laughable, while others will use the fact that C++ is faster than JavaScript to optimize their code. I don't think winning an argument is as important as writing fast code, and C++ is something that can help with that. A meaningful comparison between C++ and JavaScript can be done, and in some cases C++ is the better technology to use for various reasons. It depends on the needs of specific cases, and depends on advantages and disadvantages of each language. It's easier to check if an item is an array or not in Python than in JavaScript. That is one way in which the Python language is tidier. I hope I have made the case successfully that there are particular disadvantages in JavaScript when compared to some other languages.
Original: http://7-min.com/
According to ramnode, the site is using a small amount of CPU/RAM. What I mean is that pages load very slowly, page requests time out etc. What configurations can I look at?
It's clean, pretty slick. I like it! One little thing though, it would be cool to see dynamic filtering as I type. Just fire the match event on keydown :)
Thanks! I've considered doing that. Like you said, it wouldn't be hard and would be a neat feature. I'll have to add it
&gt;I hope I have made the case successfully that there are particular disadvantages in JavaScript when compared to some other languages No, your reply is full of nonsense. Javascript is a SCRIPTING language, it is primarily not a compiled executable language, though it can be compiled and run as an EXE. C++ will never be a scripting language, not ever. Javascript runs in so many places as a scripting language, node.js is but one tiny example. You don't code in javascript because it is 'performant', you code in javascript because it is ubiquitous, and is the only choice for programming in web browsers where instant distribution is the norm. C++ can be used for browser plug-ins but they do not run without significant hurdles, where javascript is allowed to run unimpeded from any source. You can't really compare the performance of the two in any serious manner, but you are being very pedantic in trying to. 
This is never going to work. No module system in sight. Where's the asm.js compliance and the NoSQL database? 
For those who haven't seen his past work: http://byfat.xxx/if-hemingway-wrote-javascript
I should put it in a web worker or 3
Please don't be so rude. It's possible to maintain respectful discourse even when you disagree with someone. I mentioned a few things in my reply to you, you say it's 'full of nonsense', does that mean that you don't understand what I have written, or you disagree? I notice you refer to the C++ comparison but have ignored the parts about JavaScript numbers and detecting if an object is an array, parts making my point about the tidiness comparison between JavaScript and Python. I am not saying C++ and JavaScript are in the same categories of language. I am saying that in some cases, where either could be used, C++ is faster. How long it takes to develop is another issue. I have not ever run JavaScript as an EXE. What would be the way you recommend to do it? I'd be quite interested in doing that if I can use the OS GUI and not just the DOM. I code in JavaScript, in some cases, because it is performant enough. In other cases I use JavaScript because it will run in that context while another language would not. I consider node.js to be more than a tiny example, it's a powerful platform where an advanced JavaScript engine (V8) enables JavaScript to be reasonably performant. Perhaps you don't consider node.js to be important in your analysis, myself and a lot of other coders do, and to use the performance comparison between JavaScript and C++ is highly relevant. For higher performance, some parts of the system can get coded in C++, and run faster when they have been written in C++ (and then compiled). Perhaps I am indeed being pedantic - but if I am then at least it's useful pedantry about getting higher performance (leading to less electricity usage or more requests served with the same hardware). 
I can be as rude as I want if you are being a fool. If you don't care for that, then take your comments elsewhere. I tell it like it is, and some people can't handle that. In a comment thread about "empirical reasons not to use coffeescript", talking about C++ vs Javascript seems kind of off-topic, don't you think? I would rather code javascript or C++ than coffeecscript any day. With JScript.NET you can compile ES3 javascript code to EXE or DLL, using the 'jsc' compiler that comes with .NET. I use it to code both command line tools as well as GUI applications, for all types of purposes. It even allows me to code multi-threaded Javascript. It is extremely powerful to combine the ease of Javascript with the .NET framework. And you can use strong typing in ES3 to achieve performance comparable to compiled C# code. But you will probably disregard all that if you are on a mac, as most node.js developers are these days. There have been plenty of web back-ends coded in C, and C++ no doubt, though that is far from the trend these days. There is no doubt that compiled C++ is faster than interpreted Javascript, but there are many trade-offs for using the compiled C++. I'm sure that I could use compiled JScript.NET on a node.js backend to get similar performance to C++ if my target is a windows box. 
Thanks, thats a good idea!
Examples please? When libraries like this are posted, it's really nice to get a quick overview of what it does/can do. Otherwise it's just another faceless name in the huge crowd of JS microframeworks. Edit: when I say examples, just some quick input-&gt;output examples in the readme itself. The jsfiddle is another step devs have to take to see what it can do. 
That sucks but there's no reason to flip the fuck out at the people in that thread. Nor does it really get you anything to shout "I will not be intimidated" instead of just filing a counter-notice. Nobody really gives a shit if you think the DMCA is stupid. And if we did give a shit, we couldn't really help you.
Interesting article! Love how it has all the basics as well as the complicated things. Thanks for sharing!
Thank you for the feedback. The usage section in README is a really basic example. The examples section contains a link to a fiddle which is very interesting. I'm going to add more content to the README to demonstrate its features.
Just curious, are you a relational DBA? 
I think he just refuses to try it by principle. whatever that principle is.
yes absolutely. for very large pages you need to implement some very good structure but technically yes. especially if you keep rending to the browser with angular and you use node as pure data provider in terms of an API. btw. take a look at laravel.
Makes sense... Thanks!
No.
Here's a personal project...: http://www.reddit.com/r/programming/comments/m2b2b/dont_use_mongodb/c2xj263 Not needing joins doesn't negate the fact that most of those 90% of data aren't temporary and need to be store and none of those noSQLs are ACID: http://www.reddit.com/r/programming/comments/m2b2b/dont_use_mongodb/c2xi4ip I would like to think most people that chose to store their data in database would want their data to be there months from now. 
we store around a gig a day mongodb for the last two years. no data was ever lost.
&gt; 90% of all database problems can be solved with simple document storage like mongodb, CouchDB, even Redis Umm, no. &gt; rarely do people really need joins Wat? 
Technically, given JavaScript runs on JIT it could be better than native in *certain scenarios*, JIT can compile a block of code specifically optimized for a branch, which native app cannot do because it doesn't recompile itself at run-time for a specific input. (This is the whole argument put forth by Sun and etc for JIT) Regardless, any performance comparison is moot when no real applications is mentioned. 
He never said that he refuses to try it. 
The whole set of asm.js can be validated during or before the semantic phase of code compilation. So it can just reject your code for asm.js if it doesn't validate. The spec of ams.js says that if the code doesn't validate, it would just run as regular JS (JIT compiled), but the compiler should log an error so the developer can found out. 
 names.forEach(function (name) { console.log(self.msg + " " + name); }.bind(this)); Self.msg should be this.msg
hey try this thing http://codejaw.com/gl/
src: https://news.ycombinator.com/item?id=5770000
How, if answers are right under questions?
Also. The execution should happen on another server away from the main app, especially with php and other server languages.
Nice! A clever visualization of behavior in multiple dimensions.
"MEAN," huh? You make that up yourself?
A gig of what? The type of data collected can make a big difference in the choice of DB.
Yeah, that sounds like a good idea, until you realize it's always the same libraries every day and week. Even the recently created list is kinda useless because it includes forks.
Only if you're using server side languages, but this isn't the case for jsFiddle or CodePen.
Hey /r/javascript, this is something that I whipped up when I wanted to explain the pattern of requiring a sentinel value to access certain data. The closest analogue I could think of is `jQuery.data`, but I'm curious if there are other libs that already do the same thing.
https://github.com/prawnsalad/KiwiIRC is always accepting help. Currently in a code cleanup phase to help make it easier for new devs, too. Growing at a fast pace right now so it's a good time to join in!
Not sure about jslogger in particular, but I've rolled a similar solution before and it helped immensely with debugging intermittent issues on certain browser setups that I wasn't able to reproduce in my dev environment.
I've used sentry (getsentry.com) but not jslogger, what's it work and how well does it work? 
Doesn't look like there are any issues logged on this one. What work are you looking to have done? 
If you're going to make statements like "you guys are all wrong and I am right", it sounds better if you cite some third-party sources to justify *why* -- for example, the [wiki page on currying](http://en.wikipedia.org/wiki/Currying).
Thanks! Glad you like it. 
Functions that wrap a method or another function with the intent of modifying its behavior while remaining true to its character are often called *decorators*. Languages like Python have special syntax for method decorators, and Java has annotations, but CoffeeScript's makes them very clean without needing special syntax.
Thanks for the heads up. I had no intention of coming off as arrogant.
This is a very cool idea. However, even without func.length you could still mock reflection with the toString method. func.toString() .split('(')[1] .split(')')[0] .split(',') .length; If you wanted to get the names of a function's parameters then you could do this: func.toString() .split('(')[1] .split(')')[0] .split(',') .map(Function.prototype.call, String.prototype.trim); 
I'm writing a feed reader for WordPress and the front end is all written in angular js. http://github.com/mattkatz/WordPrss I'd love some help, let me know if you are interested. 
Yeah, it's too bad there wasn't a flag where you could see projects actively seeking contributions.
Looks and works great! 
[SailsJS](https://github.com/balderdashy/sails) is a node MVC framework that has a great development community. The project has a lot of momentum and there are tons of GitHub issues to tackle. The irc channel (#sailsjs on freenode) is very active, I recommend going there if you have any questions.
Feel free to post this to /r/LearnJavaScript, OP!
This is awesome. Now to wait for a coffeescript one...
As soon as I read the link I knew I'd see you here ;) CoffeeScript does indeed make decorators nice, but they're still pretty nice in plain old JavaScript (just a few more parens really). Really, people just need to use more decorators. Things get significantly more painful in languages where you can't treat methods as plain values/properties of objects *cough* PHP *cough*
That's a pretty short function, and fairly well commented. I suggest you break it into parts: the string given as the second argument to `new Function` is the important bit - try getting it to return or print that as you invoke it and see what comes back.
This problem isn't unique to web games. You need to run or constantly check the users input on the server. To put this in an analogy, I can't hand a person a rubix cube and have them to tell me how fast they solved it. I have to watch them do it.
Which part of it are you having trouble with? The ternary conditional operator and/or the `||`? The caching? The use of the `Function` constructor? The (fingerquotes) "parsing"? 
Use websocket to send periodic score updates with timestamps then just look for anomalies in your results by graphing them and/or by some algo. Each score sent over WS can return with some unique value, this will make it less easy for people to modify the value. Ultimately it's no where near fool proof but it's all about raising the difficulty bar.
Whatever is happening here str .replace(/[\r\t\n]/g, " ") .split("&lt;%").join("\t") .replace(/((^|%&gt;)[^\t]*)'/g, "$1\r") .replace(/\t=(.*?)%&gt;/g, "',$1,'") .split("\t").join("');") .split("%&gt;").join("p.push('") .split("\r").join("\\'") 
Well like it says in the article, `str.split(foo).join(bar)` is just a form of text replacement, equivalent to `str.replace(foo, bar)`. (Whether or not it's faster is another matter -- JavaScript engines of today look nothing like those of 2008, so this may be no longer the case.) This is transforming the template text into executable JavaScript. As grayvedigga mentioned, you should modify it to show you the result. For the template text of: &lt;div id="&lt;%=id%&gt;" class="&lt;%=(i % 2 == 1 ? " even" : "")%&gt;"&gt; &lt;div class="grid_1 alpha right"&gt; &lt;img class="righted" src="&lt;%=profile_image_url%&gt;"/&gt; &lt;/div&gt; &lt;div class="grid_6 omega contents"&gt; &lt;p&gt;&lt;b&gt;&lt;a href="/&lt;%=from_user%&gt;"&gt;&lt;%=from_user%&gt;&lt;/a&gt;:&lt;/b&gt; &lt;%=text%&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; ...it's going to generate a function that looks roughly like this (with whitespace added for readability) var fn = function(obj) { var p = [], print = function() { p.push.apply(p, arguments); }; with(obj) { p.push(' &lt;div id="', id, '" class="', (i % 2 == 1 ? " even" : ""), '"&gt; &lt;div class="grid_1 alpha right"&gt; &lt;img class="righted" src="', profile_image_url, '"/&gt; &lt;/div&gt; &lt;div class="grid_6 omega contents"&gt; &lt;p&gt;&lt;b&gt;&lt;a href="/', from_user, '"&gt;', from_user, '&lt;/a&gt;:&lt;/b&gt; ', text, '&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;'); } return p.join(''); } As you can see, this is just building up an array of strings that are later concatenated. Each element in the array is either a chunk of plain text from the template, or a JavaScript expression extracted from between `&lt;%` and `%&gt;`. So for example if the template contained a fragment `foo &lt;%=bar%&gt; baz`, it would change into `foo \t=bar%&gt; baz` and then `foo ',bar,' baz` and eventually the beginning and ending quotes would be added, leading to the kind of function shown above. This is a really hacky way of doing parsing, which is why I referred to it as "parsing" with fingerquotes because it's not real parsing. 
thanks, this helps, i sort of get it. quick question.. is this kind of templating still a good way of templating? 
Codepen does. 
Yeah, there is only 1 way to get it 100% secure, and that way isn't an option for me. (Or rather, I'd prefer no highscore at all then to completely rebuild my game for the server)
Like I said in the post, 100% savety (or getting close to that, anyway) is only possible if I let the server play the game and just handle the events. This would require me to rebuild the game logic in the server, which I just don't want to do. So far, the score you get depends on how many enemies you kill (you get bonus points for killing multiple in one hit) so for the server to know what your score would be, it has to know quite a lot about the game. (enemy count, enemy health, enemy location, player position) So far, I'm thinking of obfuscation + no warning when caught to deal with it.
That's a protocol issue, not a PHP one, and as such should be dealt with at the webserver level.
If you're into 2d graphics, you might like [Fabric.js](http://fabricjs.com) — JS canvas library (with Node support). We always accept help with issues, docs, demos, tutorials, site, etc.
In my humble opinion, no. This is far too hackish; things have advanced appreciably in the ~5 years since that post was written. A good modern template system should offer a lot of advantages, such as being able to pre-compile the templates and being able to work with DOM nodes directly instead of a bunch of string manipulation operations followed by use of `innerHTML`.
This is all well and good but the trend in JavaScript APIs is to treat missing arguments as `undefined`. None of these function calls will error in Chrome: console.log(parseInt()); console.log(Math.round()); console.log(document.createElement()); console.log(Date.parse()); console.log(document.getElementsByTagName());
I'd say it's a PHP issue since PHP doesn't support the protocol (at least not without extra extentions) The best I can do is have it leave the connection open and push messages that will be very unreliable in terms of when they arive. But 2-direction communication with 'vanilla' PHP and no third party software is, as far as I know, impossible.
Actually, it doesn't matter at all if you use node.js or php, both are used to do the same thing (handling server logic). The only difference is that node uses javascript and php... well, php :)
Interesting post, I had a slightly different experience though. Indeed it was a steep learning curve compared to Backbone, though the tutorials on docs.angularjs.org aren't the greatest, the explanations of concepts and API references are nice and detailed. Re: Modularity. I did notice that in the docs, they always chain definitions (hence the long file). I saw that happening right from the start, and switched to: var App = angular.module('my-app', []); App.config(['$routeProvider', function($routeProvider) { ... }]); App.controller( ... ); App.directive( ... ); App.run( ... ); Re: Scope: The docs page on scope is good and easy once you understand JavaScript's Prototypal Inheritance model Re: DI: If you've used RequireJS, it does very much the same thing except without the loading of files Just as a rule that I generally follow, if I don't understand how something works, I'll research until I do, because trial and error is much more painful than taking the time to actually learn it. Although there are some gotchas like the `ng-repeat` auto-scope that will catch most people out. Anyway, definitely good tips for people who don't know them yet 
http://loggly.com with castor also works 
That's the only thing Github is lacking...
You could have the client post it's score incrementally and create an algorithm that detects forgeries. Or you could place a token in the JavaScript that is outside the scope of any browser extensions or 3rd party code that is required for high score posts. This token would need to be unique per client per session. If you obfuscate / minimize the JavaScript this might be pretty hard to crack. It definitely could be cracked, but at least it would take the hacker some effort.
Yeah, just a 'hidden' token somewhere and a MD5 hash should do the trick if I uglify / minimize the code, but for some reason I dislike minimizers / uglifiers... Though I guess there isn't much of an option if I want it to be somewhat secure
minimizers help reduce the size of the code, for speedy downloads.
Does anyone have experience with both Sublime refactor tools and IntelliJ Ultimate refactor tools? I'm seriously considering putting down the cash for IntelliJ because its autocomplete and refactor support work so much better than anything else I've used, and has a unified minimum feature set for many languages (it works similarly for an old Actionscript 3 Flex 2 app as it does for Python as it does for JS as it does for java etc). That said, Sublime is cheaper :)
So your question is about the difference between JS function expressions (method 1) and function declarations (method 2). Check out [this link](http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/) for an in-depth explanation. Basically, var foo = function () is created during execution, while function foo() is created right before execution. 
Yup, yet it's rarely noticable. I only minimize the libraries, since those are the largest. The rest of the code us usualy just a few hudred lines
Not really, try something like Handlebars.js instead.
&gt;instead of a bunch of string manipulation operations followed by use of innerHTML. That's for optimization no? I mean individual node manipulation is much more expensive.
No, it's really not. [Here's a benchmark](http://imgur.com/blog/2013/05/21/tech-tuesday-jquery-dom-performance/) that shows DOM manipulation beating `innerHTML` by a factor of about two. 
Ah, thank you.
If these are relatively simple games where you have individual users completing against themselves, then what is the harm of just using local storage? If someone really wants to cheat their single player score, power to them. However if this is some sort of multiplayer game where the high scores of multiple users are taken into account, then yea, you'll need to store that information on the server -- to get it there, you'd need some crypto -- and even then, it's not secure as someone with enough time &amp; energy can figure out how you sign the messages &amp; send their own bad high-score messages. You might be able make this more difficult for malicious users by using something like flash to sign &amp; send the data, but again, with enough time &amp; energy a malicious user could figure out how that works, too. In short, there is no easy answer to this problem without completely reworking your engine to keep track of, and validate, the events of the game as they happen, as you've alluded to yourself .... sorry, no magic bullet for you!
&gt; Angular.js creates a scope implicitly in ng-repeat I actually experienced this very recently and it's quite unnerving. I utilized `angular.extend $scope {}` and I reference the `this` keyword everywhere, however when invocation occurs the `this` keyword changes to the `ng-repeat` scope (rather than the controller scope), and as such methods and properties appear missing.
For great Angular video tutorials, see http://egghead.io 
Yes, indeed, the docs encourage the chaining via examples. I think it comes at the cost of trying to keep it simpler. Exposing a global and breaking the chain works nicely in contrast. The biggest curve for me was embracing directives. In the past I build high level controllers &amp; routes, and only used directives sparingly, where needed. Now-a-days, I build high level directives, then build a one-to-one mapping to a controller. Controllers generally only respond $on events. Services generally only $broadcast.
You are correct, however, the RethinkDB implementation also has a ['varar' utility](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/javascript/src/base.coffee#L18) for variable argument functions and allows specifying min/max # of arguments, which I didn't write about in the post.
http://www.tutorialspoint.com/javascript/javascript_animation.htm
http://rafbm.github.io/howtomakeaslider/
 Here is an example in Coffeescript. I guess most of us will agree that, this is one of the most beautiful templates ;-) [ "div#container" style: width: "300px" padding: "3px" border: "1px solid grey" [ "div.header" style: padding: "3px" background: "#fbb" "font-weight": "bold" "My TODO List" ] [ "div.contents" style: width: "100%" ] [ "input" type: "text" style: width: "98%" onkeyup: "handleInput(event, this)" placeholder: "Type content and hit Enter" ] ] 
I tend to use bind, but there is a performance hit - especially if you're using a shim rather than the native bind (have a look at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind for what a shim could be). Basically it still creates a closure under the hood, the difference though is that you've put your function under another function call, so you're calling an extra function to get the same result. This is especially clear if you nest functions in functions, it'd be pretty slow to bind three levels deep just to pass the context along but if you use a closure it should be a bit faster (you have to back through the scopes further but later js engines are very fast with scope lookups now, but if you bind you'll add another function call and one scope lookup per bind). You can see the performance here http://jsperf.com/bind-vs-closure-setup/6
A simple solution to a complicated problem. I like it.
I would suggest that checking such for each runtime invocation is not the way to go, unless perhaps you're publishing an API as in the example. If you have to bake code in to make sure that your own code doesn't shoot itself in the foot, then you're attacking the problem in the wrong way. And is this not something that Coffeescript helps alleviate?
Simple solution, but not best practice IMO
Be _very_ careful doing what amounts to an `eval` on what has even the slightest chance of being user input. I mean, yeah, the user has control of their own browser and can pop into the developer tools and screw with the javascript directly, so it's not that dangerous. Until you have code that lives both in the frontend and the backend Node.js code, and black hats find out where they can do code injection into your back end.
I think you're exactly right in that publishing an API or library is the perfect place for this sort of thing. And the only point about coffeescript was that it makes things syntactically a bit cleaner, compare someMethod = ar (param) -&gt; # ... to var someMethod = ar(function(param) { // ... }
&gt; Be very careful doing what amounts to an eval Does it though? You are setting the interior of a function but not executing it.
Why is it not best practice? The function itself is never evaluated, only parsed. EDIT: naapi beat me to it
For most cases: yes, exactly. These RequireJS/AMD (async module definition) style loading is overkill for most projects and do nothing but introduce additional complexity. Those guys who wrote it really hate global variables in javascript too. Some articles: http://tomdale.net/2012/01/amd-is-not-the-answer/ http://ruben.verborgh.org/blog/2012/08/13/javascript-module-loaders-necessary-evil/
Well I can't comment on the safety of using new Function(str), but in a general sense, catching errors and exceptions is a bad method of validation.
Why is GOB telling us about this?
Very powerful mapping api with a JsFiddle type sandbox. Cesium is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization. Cesium is open source under the Apache 2.0 license. It is free for commercial and non-commercial use. 
If encountering an unparrsable function is exceptional then this would be appropriate correct?
The solution is clever and probably safe, so I like it. But still isn't it simpler/easier to use a stack (or even just a counter)? It's the standard solution to brackets matching problems anyway. Much like it's explained in this other [answer](http://stackoverflow.com/a/13951471/777748).
Firefox used to be the go-to browser for years... then lighter weight alternatives starting catching on. Same thing here.
Well, it works, it's simple, and it's 3 lines of code. What more do you want?!
In ivory towers, it's a bad method.
I said I like it because it's clever and I do. It just feels a bit hacky. If it were for a pet project or a proof-of-concept I'd probably use it. Otherwise, I'd stick to the standard approach, which is proved to work, simple and say 5-6 lines of code, so not much longer. Just my opinion.
Won't this method fail if there are other syntax errors in the string? Like, it fails on the string `"()"`, which is not a valid JavaScript expression.
This only works if the only possible SyntaxError in the input is mismatched parentheses. For example with input: "(+)" the parentheses match, but the function returns false.
You can easily implement this using a loop which is O(n). Using a function constructor to simply do parsing is a lot more expensive. A new function would need to be generated via the compiler. The stages of compiler are as follow: * lexical analysis (scan) * syntax analysis (parse) * semantic analysis (compile to IL) * flow analysis * IL optimization * ASM code generation Checking for matching parenthesis only require the first 2 stages of the compiler. While that implementation is in C/C++, it is unlikely to be faster than O(n) when dealing with a large N. 
Yeah tbh I don't know whether I'd use it in a work project either. Just for the maintainability argument. This code relying on JS special behavior, I wouldn't expect the next developer to understand it.
I can see this being helpful to those trying to wean themselves off jQuery
Can they make it faster than chrome? Would be interesting to see.
Goddamn that is cool.
Right now it relies on jQuery, but it shouldn't be too hard to make that configurable. Once I get some more spare time, I'll give it a go. Or you can make a pull request ;)
Something I keep running into w/ 3rd-party modules/directives. If you plan on minifying your code you must use the "longer" syntax when defining your functions: Instead of: App.controller('MainCtrl',function($http, $window...){}]); You must use: App.controller('MainCtrl',['$http','$window', function($http,$window...){}]);* Personally, I am always using the second form just to get into good habit of not forgetting.
Sorry, but I wouldn't use that code, for three reasons: 1. The question wanted to check parenthesis, not JavaScript syntax. 2. It uses `Function`, which is so inefficient that it could actually become a bottleneck if this function is seeing a lot of use. 3. It relies on a try-catch statement, which defeats the compiler's attempts at optimization and forces the browser to run the function in the slowest possible mode. Taking the question at face value, here's my answer: var equalParens = /^(?:(?:[^()]*(?:\(|\))){2})*[^()]*$/.test(expression); But the question seems to imply that the parens should match (closing shouldn't come before opening). If that's the case, here is a function that's only 2 lines longer than the given answer, with none of the pitfalls. function validParens(expression) { var nestingLevel = 0, ordered = true; expression.replace(/(\()|\)/g, function (m, left) { nestingLevel += left ? 1 : -1; if (nestingLevel &lt; 0) { ordered = false; } }); return ordered &amp;&amp; nestingLevel === 0; } (I know my use of `.replace` seems inefficient, but run a jsperf - it's actually faster than repeatedly calling `.exec`.) There's not much point posting this on StackOverflow since the question is half a year old, but I just wanted to let you guys know why I don't think this answer is something to be inspired by.
OP mentioned that it had to be syntactically correct in a comment on the main post. Your point was one of my first thoughts too
In a comment on the main post, OP mentions that the string needs to be validated as JavaScript
If you are a javascript developer and you aren't using mongoDB, I feel sorry for you. It is pretty cool.. If you think in Javascript, a relational database with SQL is a waste of your time and talent. XML is to JSON what SQL is to mongo scripts. 
just downloaded and tested. The overall feeling is good. Chrome on OSX has so many little bugs that I'm glad to have an alternative.
Or zepto.
It looks like, by "valid syntax", he meant the ordering of the parentheses. If he did mean javascript syntax, then of course that changes the question...
The function is never executed, just parsed, so what the function returns is irrelevant. `(+)` is a SyntaxError.
your using the function constructor and try catch, both of these are valid JavaScript but tend to be inordinantly slow/a security risk (in the case of the function constructor). It is pretty much standard practace to chalange any use of those unless you are REALLY SURE it's not going to make your program absurdly slow (try/catch and the function constructor both can do that) or inadvertantly cause a security risk (function constructor). 
hang around here for a few days
You could try searching "top javascript libraries" or sesrch javascript on GitHub.com
https://github.com/languages/JavaScript/most_watched
&gt; You can easily implement this Can you show me how *easily* this can be implemented then?
Hmm, which one is more maintainable? var equalParens = /^(?:(?:[^()]*(?:\(|\))){2})*[^()]*$/.test(expression); or function matches(str) { try { new Function(str); return true; } catch (e) { return !(e instanceof SyntaxError); } }
I'd probably still do it with comments. If I need the comments to be verbose without cluttering the code, I'll add it as a commit log in version control.
Figured it out..... Should not be using a submit button for this. made a div button and it works fine. 
That page made me feel like my phone was very dirty. 
Good thing I didn't really want to read your article on my mobile phone...
[Nipster](http://eirikb.github.com/nipster/) is a cool tool that cross-correlates NPM modules with their github popularity.
lets jsut say im not concerned about security, its a rough concept code. how would I do it? kludges and hacks are ok with me. EDIT : why the downvotes? i just want a quick solution, or if you wish to teach me, then please be a bit more elaborate. im just playing around with it, if my interest wanes, i'll just drop it.
You may want to look here: http://www.html5rocks.com/en/tutorials/file/dndfiles/ I built a quick tool that I use to parse gpx files on my computer using the approach outlined on that page.
That solution is right for checking matching parenthesis, but doesn't check for valid syntax of the expression. I thought you hinted an easy way to do the lexical and grammatical check too.
npm
Those two are essentially the same thing...
You can read local file system with file input and [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader) API.
Dunno why you were downvoted, but aeflash's answer was plain wrong.
Currently, I'm thinking of having the top-level object be a sort of mini OS, while retaining the ability to load in or load out modules as needed, it can also accept specific requests from modules. For example, if the "protocol" module needs to know which "network" module to use, it can simply query the top-level object for an available network.
I just remembered the term is "microkernel". Would it be smart to make a microkernel if I plan on loading/unloading hundreds of different modules depending on where the user is in the project?
Ugly yet interesting solution
Perhaps I'm just being pedantic, but I wouldn't describe this as a template engine. To me "template" implies a document with embedded tags. This is more of a structured expression interpreter.
Dependency*
As Function.toString() is defined lexically (and so statically), I think it would be nice also to have such thing implemented as a source code transform.
Pretty much echoes the "ahhh" moments I have had with AngularJS over the last 2 months developing a new client application with it. The tutorials over at Google probably could do with a better rewrite to cover some of these items in better detail/understanding for beginners. Great post.
What about Vapor.js ? http://vaporjs.com/
If you allow for logging in and do not run your js off a separate host (or do not use a sandboxed iframe) you risk allowing others to design a 'fiddle' that could steal login credentials and act as another user. In Plunker, I run all plunks off another subdomain. http://plnkr.co/edit/?p=preview runs plunks off http://run.plnkr.co
&gt;&gt;If you are a javascript developer and you aren't using mongoDB, I feel sorry for you. It is pretty cool.. If pretty cool is the selling point you should just stop there. Let me get this straight relational database was in the 1970 so roughtly 43 years in the field with professional and academic research and working research on it. It work pretty well. NoSQL was presented in 2009, developed in internally for Microsoft and Google to address the problem of massive big data. Then dozens pop up cause of google research paper, etc.. Now all you hipsters comes along and make it seems like NoSQL is everything and it's going to replace SQL. Really? 43 works years and now NoSQL was developed to solve Big Data problem and you think it's going to solve everything. What make you so special that you need that? Are you microsoft or google that have to deal with massive data? It was created to deal with massive data, you think you have massive data? &gt;&gt;If you think in Javascript, a relational database with SQL is a waste of your time and talent. That doesn't even make sense. Javascript is a programming language. If I think in PHP, Erlang, blah, I should think in SQL or noSQL only? I don't recall microsoft or any company that created noSQL says that it's tied to a specific language. Because in javascript all data are the noSQL type am I right? We don't need no joins. &gt;&gt;XML is to JSON what SQL is to mongo scripts. XML = markup language JSON = javascript object notation SQL = structured query language Wut. They chose to have JSON as a format which they can easily choose XML or any other format. 
but i still dont know how to do it :( can someone help?
It's a pretty decent guide. I wish they added the requirements for yeoman. I had to googled around for a bit after I reinstall my laptop to ubuntu. But it needs I believe, cURL, Git, and whatever else I've forgotten. If you don't have Git installed, then Bower won't install anything and Bower just end up doing nothing, no warning git command wasn't found, no install successful, nothing. You can do bower ls or bower list and it'll show that it wasn't install but not why. I'm glad the guide is updated!
Just curious what parts of JQuery you'd call bloated... And have you tried a custom build instead to get just the parts you need (you end up writing all of the browser fixes and shims yourself)?
They missed out big time by not making the generator command `yo dawg`
In most of the application the only browser fix/shim code, that I need, are event delegation and fallback for missing [classList](https://developer.mozilla.org/en-US/docs/Web/API/element.classList) (not a full shim). That all in total takes less then 100 lines and is reusable. The bloat that I talk about is twofold: - the most obvious one is - the size of library (and all the 3rd party plugins that accumulate when "jquery programmers" make something). But that one is somewhat mitigated by browser cache. - the more unavoidable one is the execution itself. Trace sometimes what happens when you write a `$` call. It actually is extremely hard to write an optimal code with jquery. 
Yeah, I can see the similarities. Going forward, I'm going to be removing the hard dependency in jQuery though, so it's more "cross platform".
I built on that works for Closure Tools but uses an inject array instead of the function toString as that will change with compilation https://github.com/rhysbrettbowen/Loader/blob/master/loader.js
I kindly direct you to [Moment.js](http://momentjs.com/)
Does it make sense to add 5.5KB of minified JS to avoid one ugly line?
Yes
JavaScript doesn't have ~~a~~ much of a standard library, this is why every single website (more or less) uses jQuery and/or underscore. I really feel like moment is quickly becoming the javascript version of the python DateTime, except optional, and improving rapidly. 
While JavaScript comes without most of the "batteries included" stuff in other languages, there are usually simple ways to achieve the desired results: (new Date()).toISOString().replace(/^(\d+).(\d+).(\d+)T(\d+:\d+).*/, "$3/$2/$1 $4") may not be beautiful, but it gets the job done. That's JavaScript for me. It gets the job done. So don't cry, but instead try to figure out the easiest way to get the job done.
In this case though, the Date class already exists, it's just incomplete, and this is a very limited usage I needed, which can be worked around with straightforward (but ugly) code, so I don't see a benefit that outweighs "yet another 3rd party JS file I have to track, ship and load" I am using jQuery in this site already, I often wish it came with a minimally functional string class, at least. 
But I only need date formatting once, in one specific format.
Your proposed solution, while clever, is considerably uglier than even what made me write the post (but hey, it gets the zero-padding right). You are assigning merit in the wrong place. Javascript is not getting the job done. You are. Despite, I must say, Javascript's best efforts to not let you do it.
With the exception of the naming of methods, everything you are complaining about is inherited directly from C/POSIX. [Have a look at the definition of `struct tm` from `&lt;time.h&gt;`](http://pubs.opengroup.org/onlinepubs/009695399/basedefs/time.h.html) and see if it's familiar. This interface dates back decades, to at least the early 1980s BSD Unix 2.x. 
Don't know what to tell you, other than "sorry that Javascript isn't Java". edit: in reply to your update... &gt; I refuse to accept as reasonable that the Javascript creators looked at the C stdlib and decided it was a good idea to expose "months are 0-based" and "years are 1900-offset" and not strftime and sprintf. I'd just like to point out that it wasn't "creators", it was a lone creator. And he didn't exactly sit down and spend a whole lot of time on the details, he was working under time constraints. He knew it wasn't perfect then, he knows it's not perfect now, as most of us here acknowledge that it isn't perfect. However, crying about it (your words) isn't productive. We can all sit around and bitch &amp; moan, but that alone doesn't get stuff done. Writing a library to handle it yourself or drafting an RFC &amp; getting involved in the ECMA committee are both productive. Sitting here and railing against things that have been like this for eons isn't really doing anyone a service, though. Perhaps you were aiming for education, but instead ended up with a rant.
That site is listed in the article.
I totally understand your frustration with this particular aspect of Javascript; but please bear in mind that the language was never intended to become this popular. Luckily it's quite easy to extend it so you can make use of other libs such as Moment.js (even though that means loading another 5,5kb)
/r/learnjavascript
I don't know what to tell you, other than "Java, really?" ;-)
[Unheap](http://www.unheap.com)
Perhaps you missed the complaint about not having a sprintf and strftime equivalents, so not quite everything ;-) The only thing I see there that I complain about in the post is the zero-based months and the way the year is stored. However, how things are stored is not the point at all. In C, doing idiomatic C, I would not run into any issues because I would just have used strftime and never had to look at a tm struct at all. In Javascript, trying to do idiomatic Javascript, all those things are exposed. It's an API problem.
It's the date/time of a blog post. Anything "now-ish" is good as an initial value, but it does need to be editable by the user. Good point about the reliability, thanks! 
It's useful if you support multiple regional formats or need to do date manipulation without worrying about leap years or how many days are in each month. Don't get me started on handling user-entered dates. I find 5.5kb to be negligible.
Is it really that common to want to set the date/time of a blog post to something other than the current time? I'd optimize for the common case, the date can always be changed in the "edit post" option.
Yes, for delayed posting, it turned out to be a commonly requested feature. Besides the post creation and post editing forms are the same form so far ;-)
Sorry, but you know nothing about mongoDB, and probably not much about modern web application development. XML used to be the format of choice for sending data from web server to web browser. JSON has replaced XML because it is easier to use and just works, it is a subset of javascript and most web developers with half a brain love JSON, and hate XML. SQL is an ugly language to write queries in, and mongoDB is easily queried using javascript, as easily as accessing properties of a JSON object. Mongo scripts are easy to write if you know javascript, mongoDB is just another simple API that works with Javascript. SQL is far from easy to use or learn compared to javascript + JSON, especially if you already know Javascript + JSON. If you want to do a join, it is a simple matter of writing a bit of javascript code, while different from the SQL approach, you can achieve the same results with little effort. "Big data" really has nothing to do with it either, mongoDB is just an easy way to store and retrieve JSON data using javascript as a query language, and there are benefits to doing it that way, but it seems that you can't wrap your head around that. You don't seem to know much about how mongoDB works. I didn't either until recently, but it is now one of my favorite things about the stack my company is using. mongoDB is replacing SQL the same way JSON replaced XML in modern web development stacks. 
Write a little function to do this for you, and stick it in your toolkit.
If it's for delayed posting you're going to want to base it on a more precise format and the server time. With that and the fact that it's a plain text input you're going to get into more formatting/validation anyway so a library might not be a bad idea. &gt; Besides the post creation and post editing forms are the same form so far ;-) Right, you wouldn't need to create a whole new form. It sounds like you're going for something more fully featured, which naturall will require more code to support.
Not a word about [AppCache](https://developer.mozilla.org/en/docs/HTML/Using_the_application_cache)?
Actually the entry is not editable directly, it's only editable via a JS date/time picker, and it's validated client and server-side. The only missing bit was setting the starting date.
Ironically JS's Date object was based on java.util.Date, so for once it sort of is.
Well, Java has a pretty shite DateTime library in itself (JodaTime does not count), so it isn't much better. Look at Ruby, Perl and Python for beautiful DateTime-handling. 
Thanks for the info, and cool app.
If you're using a datepicker, you shouldn't be hitting the issue described in the OP. A good date picker will handle setting and/or formatting the date picked. At any rate it's moot. If you want to avoid all sorts of issues with wrong client times, posting from different computers, etc you should base all the calculations on the server time; formatting it as appropriately (to appropriate time zone, etc) for the client then back for calculations. I feel for you, dealing with dates is huge PITA and yes JS doesn't make it any easier for you.
I think the consensus is Javascript has a ton of shortcomings, that's why there are so many libraries to alleviate these issues. Date isn't even close to the worst part, at least it's browser consistant. But I suppose the rant wagon for the DOM is loaded so here we are talking about Date and how frustrated you are it didn't do what you wanted.
Yes, pretty much. Well, except for the chorus of "it doesn't matter that Date is crap!" and "use this other thing instead!"
Good luck with your l18n then ...
I am sure there are many, many libraries that do lots of other cool stuff I don't need right now, should I use them too? :-)
The problem described doesn't need any libraries. In fact, the most frequently proposed solution is to *add* 3rd party libraries! The obvious solution is to have a String class that can do formatting and/or string interpolation, or a Date class that has some sort of equivalent of strftime in addition to the **NINE** methods it already has that produce one different string format each (toLocaleString, toString, toGMTString, toISOString, toLocaleDateString, toLocaleTimeString, toDateString, toTimeString, toUTCString). I have no intention whatsoever of becoming a "real" Javascript developer if it's at all possible to avoid it, though, but I accept as a fact of life that I have to write some every now and then.
I think we'd need more information on this, how could a module fail to receive a message? I think you'd want to monitor when to restart a module separately from a fail state on reading a message otherwise a message would then have to have logic on it. I'd suggest putting a buffer before each module so when a module restarts it can just read the messages straight from that.
Modules subscribe a method to a filter. For example, a "notify" method might be subscribed to the "io" filter, and any messages tagged as "io" will be passed into that method. It will also be passed into any other methods that have subscribed to io. Most of the functions should return "true", which means they handled the message. Sometimes, though, one might return "false", which means it couldn't understand or process the message. When that happens, the core needs to unload and load that module again, and once loaded, try to pass in the message again. As an example- The gmail chat module published a "chat" event, which was pushed to the "network" module as it's subscribed to chat events. However, the network had a bug and is unable to complete the request right now so it returns false. The core then reloads the network module and tries pushing the message again. I need to track which messages have been sent to which module, but I just can't figure out how. Reloading is asynchronous, so it can't just be a loop. The other requirement is that messages will go to all subscribed modules, even ones that subscribed after the message was published. As I said on SO, my current solution is to have an empty array with each message. When it's being sent out, it tries to send it to any modules that are subscribed to it, adding them to the array. When a module fails to respond, it then adds a message to the stream targeted at only that module which is triggered when that module has reloaded. It feels so hacky and spaghetti, though, so I just need a few suggestions.
One more thing- Modules have no internal logic about the stream, or internal message queues. They simply return false, signalling to the core that they can't handle the message without a restart, and the core then reloads that module and begins pushing messages again.
So does it make sense to put code like this in the start of app.js? // Defining modules for use in the rest of the files angular.module('myApp.controllers', []); angular.module('myApp.directives', []); And then, I can have controllers and directives in many files, creating them by retrieving the modules, e.g.: var app = angular.module('myApp.controllers'); app.controller(...
sounds like a buffer at the front of each module is still the way to go, so the buffer hands the message to the module and if it returns true it pops it out, otherwise it keeps the message until the module is restarted and asks for it again. that way you don't have to keep track of which modules get which messages.
Usually, when it comes to blog posts and things like that, the date field is optional. If left empty, the current time is used. There is no need to use JavaScript for that.
Which is why I pre-fill the field with the current time. I'd rather be explicit and show it instead of relying on empty fields, but that's just my taste.
Are you sure the problem described even exists? Glancing at your code it looks like you're using django-datetime-widget which has date formatting functionality you can use. Not to mention that it looks like you're using templating to fill in stuff like the user's name so it's trivial to prepopulate the date field with {% now some_format_string %}.
You are right! I never thought of formatting the current datetime serverside and stuffing it in the template. Good idea :-)
&gt;Which is why I pre-fill the field with the current time. That's the time when the page was loaded, not the time when the post was submitted. Using the empty=now pattern doesn't automatically mean that it's magic behavior. You can tell the user how it works. Drupal does it that way, for example.
Again, it's a matter of personal taste. I prefer showing something instead of explaining what it means not to show it.
The problem with getDay vs getDate: [date at WordNet](http://www.dict.org/bin/Dict?Query=date&amp;Form=Dict1&amp;Strategy=*&amp;Database=wn) or to save you the click: date n 1: the specified day of the month; "what is the date today?" [syn: date, day of the month] ( getDayOfTheMonth() is a bit annoying to write every time ;) )
woosh
Date also means "Time stated in terms of the day, month, and year." according to the first dictionary I found googling) but yes, by that definition getDate's name is not a lie, thanks! It would make more sense IMHO to use getDay() [or getDays() if you want to be consistent with getMinutes/getHours] and getWeekDay() which makes the less frequent request get the longest function name, and is the convention used in, for example, python.
You're not concatenating, minifying and packaging your deployed scripts anyway?
Not yet.
string lambdas are gross. if you're that interested in having minimal syntax you might as well use CoffeeScript.
**TL;DR:** Dates are hard. Why can't everything just be like [strtotime()](http://ca2.php.net/strtotime)? Dates/times are one of those things that gets taken for granted as easy. Dealing with date and time (and timezones) isn't easy without a library in any language (even in the examples cited: stdio.h and Pythons str libraries are both _libraries_ ... so suck it up and use Moment.js).
 &gt;Most modern HTML5 APIs are cool as fuck. They seem that way only because before they sucked horribly. 
The reason sites use JQuery is that the dom implementation is hard to work with and inconsistent among different browsers.
The *standard* in "Standard Library" is there for a reason :-) Also, strtotime is exactly the opposite use case.
Wouldn't surprise me. Now what does *that* say about Javascript? ;-)
That you should stop using it, it's obviously beneath you
I use Javascript when I have to, and I clean up after my cat, I am just blue collar that way.
Do you complain this much about cat shit too? 
Well, if I built cats, I could surely think of some improvements!
And you didn't build the ECMA engine either. The bottom line is, take momentjs or another date library and run with that, otherwise deal with the hurdles of the native Date object.
One of my pet peeves of nearly all FP articles is that they use contrived examples. Squaring numbers, scaling int arrays -- very easy to understand, but I hardly ever do that in in my day to day work. Things are easier to grok when you have concrete examples of actual work being done. Show me parsing an ajax request, setting up event listeners, defining business logic, etc... I'm actually considering writing an article of my own, where I show how to refactor a real-world imperative module into a one that uses a functional style.
Make a functional example for http://todomvc.com/
So, stay quiet and bear it, or use this and shut up. That's a really bad attitude, which I find sadly prevalent in JS and PHP developers. It does help explain how crappy the Date and String interfaces have remained for so long.
Oh, cute! Me wants!
I know Ajax is the other big one 
Why is it pointless to talk about an interesting feature of a library that has influenced many modern functional js libraries? There are 100,000 blog posts about map. I didn't want to limit the post to something that has been written about countless times before.
I think date formatting is localization, not internationalization, IIRC but tomato, tomahto :-)
The post wasn't about functional programming, it was about Functional JavaScript. It was meant to be short, sweet and highlight one or two interesting features of that library. I would love to read your blog post however, I think it would be a welcomed addition.
Once you concat/minify/package, it's just one single request for all of your JS. I completely understand your point, that the native handling blows, but there are solutions that exist that you seem to be bent on not using just because they aren't core. There is literally no downside, and I think you're getting down-voted because the solutions are there and you seem keen on refusing to implement them for reasons that aren't necessarily show-stopping.
I already implemented a solution. Adding a 5KB library for literally no gain has no appeal, and I fail to see why that's seen as strange, myself. Like I said in other responses, if I were doing several date manipulations? Sure, I would use it. To avoid *one line I find distasteful*, I'll pass. I am very cautious about adding dependencies. At the very least, I would track new releases of those dependencies and upgrade them periodically, which means extra QA. That's an ongoing cost, which JS developers seem to willfully ignore.
I'm not entirely clear on the level of experience mentioned in the "Resources for this Course" section. I am a web designer by trade, not so much a developer - therefore I am solid in HTML and CSS, and I have worked with a smattering of ASP.NET. Should I go with the Definitive Guide or Professional JavaScript for Developers?
I haven't used Raphael.js, sorry, but [two.js](http://jonobr1.github.io/two.js/) is really good.
I should have known, Sugarbear!
I recently used it for a project, and I fucking hate the api with a pure passion. Do you think you are going to support browsers that fully support CSS3? I think you could probably pull of what you need to with that.
I'm sharing it because it's interesting and newsworthy. It's receiving rather mixed reviews at JSConf, seemingly mostly negative from what I'm reading. I'd be interested to see further discussion here in /r/javascript 
&gt; Do you think you are going to support browsers that fully support CSS3? I think you could probably pull of what you need to with that. That's actually a good point, a card could simply be a block element styled with CSS where the card symbols are done in unicode http://en.wikipedia.org/wiki/Playing_cards_in_Unicode
I find it interesting that they don't separate the html partials from the logic. Things could get very messy, quickly.
http://livescript.net/
It does use SVG, which I find amazing because you can use raphael with IE6+, as it dynamically switches to VML if SVG support is not found.
&gt;&gt;return &lt;div&gt;{'Hello ' + this.props.name}&lt;/div&gt;; I give up. Let's mush javascript, html, and css together. Let them freely intermingle. We'll call it Reangularjavassstml. What is wrong with us? We have _so many terrible solutions._ 
&gt;&gt;You'll notice that we used an XML-like syntax; we call it JSX. JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. ;_;
Do that before worrying about 5.5k. Seriously. 
This thing has had all of 10 hours of development. Premature optimization is the root of all evil.
Ok, so just take Moment.js as a serious recommendation by loads of people here and consider it please, I guess. We're _building_ a standard library for javascript. 
Ok, so you're categorically opposed to including a 5.5k file for a 10 hour project why? Everyone knows dates/times are hard. It's actually not sensible for a language to try to manage them: why? Because a language should, in theory, work in any (spoken) language, which is to say, many different time zones and formats. In the time you've spent trying to write up that solution, write up the article, write up these comments, you could have **learned a highly recommended utility**. 
Writing the solution: around 15 minutes. I could have *used* Moment.js it in that time, but actually learned it? All 64 screenfuls of docs? Nah. Would I have learned it exists and I would have been able to solve this problem? Sure. But then again, I do now know about it, and I do know how to solve this problem using it (and also some other 4 ways to do it), so nothing lost. OTOH, I would have a solution, just like I do now, and a dependency to track, for something that it turns out I now know I don't even really need (again, because of a comment in this thread). And I would not have learned a lot, which I did through the discussion here and in my blog. OTOOH I have absolutely no idea what you mean by "not sensible for a language to try to manage them". Turning the JS Date objects into something like Moment's Moment objects is obviously doable, since Moment.js **exists** and it has exactly that. As for writing the post, hey, I *like* doing that, or else I would not have a blog, you know. 
&gt;As for writing the post, hey, I like doing that, or else I would not have a blog, you know. heh, I know how that goes. cheers.
Sorry about the duplicate post, reddit was in read only mode and I didn't see this show up when I searched :P
[KineticJS](http://kineticjs.com/) would let you represent the cards as clickable, moveable sprites. It might be what you're looking for. I've used Raphael for graphing in the past, and it was a bit convoluted. The main benefit for using Raphael instead of D3, for the project, was that it supported IE7.
It sounds like for what you're doing, you dont need a full-on graphics solution like SVG or canvas, so I would tend to agree with fluidfoundation's reply. After all, playing cards are just rounded rectangles, which is totally easy with just HTML and CSS. That said, Raphael is still the only lib that works on IE8 and below, which is still 10-30% of users worldwide. Also, it doesnt use canvas, it just uses the word "canvas" as an object name internally and in its documentation. Raphael uses SVG or VML depending on the browser, but never canvas. As a general rule, SVG is better than canvas for large resolutions. Canvas does better than SVG at animating lots of objects. Raphael is a mature library with a lot of knowledgeable users and answered questions on stack overflow. I would still recommend it. 
I think he meant "Functional Javascript" the library in question.
Maybe they released it in attempt to bog down competitors ;-)
This explains *so much*.
I feel like everyone's jumping on the angular band wagon, so to speak. JSX... really? Yet another preprocessor meant to "simplify" things.
Im rather impressed with his comfort on this subject. I would take quite a lot more time on these activities; as he knows the shortcuts. Thanks for the link.
SVG itself can have [onmouseover and CSS element:hover {background-color: red}](http://www.petercollingridge.co.uk/data-visualisation/mouseover-effects-svgs) effects. You can probably get away without a library (or only a minimal convenience wrapper for the ajax stuff)
Maybe I am missing something, but the interface for building new commands and generators in Yeoman seems overly complicated. I had built an open source tool called Rápido that solves many of the same problems and I believe it is much simpler. We are starting to use Rápido at eBay to build various command line tools, but hopefully others find it helpful: https://github.com/raptorjs/rapido It's functional, but also a work-in-progress so contributions are welcome.
You don't need any library at all! See [SVG chart generation in JavaScript](http://stackoverflow.com/a/15582018/309483). This example shows: * inlining * loading * styling * scripting I put the code in PasteHTML: http://pastehtml.com/view/d41a6srt6.html Seems to work in MSIE 9+, Firefox 4+, Opera 12.02, and at least since Chrome 7: http://browsershots.org/http://pastehtml.com/view/d41a6srt6.html
Awesome, thanks!
On an unrelated note I'm promoting new jargon : Yet Another Piece of Shit or YAPS for short.
I think the negativity comes from a lot of misunderstanding and some ignorance among front-end web developers. What counts as front-end web programming has become very wide and can be seen as a spectrum: web site ↔ web application web pages ↔ user interface Most people are working in the web site / web page end of the spectrum and are just looking for a better way of doing templating. Hence, the initial reaction to the templating system used and the mixing of HTML and JS. So of us are busy building web applications which are not strongly page structured but aim for more traditional style GUIs like in desktop applications. Here, templating is less important but components, encapsulation and composition become very important. React is clearly aiming more towards the web application end of the spectrum. The AngularJS version ( https://medium.com/make-your-own-apps/e71bcedc36b ) is interesting, but it comes from the web site point of view and also completely misses the point. It is simple but also monolithic. It is a style of programming which doesn't scale up for complex applications. React actually looks like quite an interesting data point on the web site/web app spectrum. 
I added some code to show how to add SVG code from a string using the DOMParser.
Raphael doesn't actually have an internal object name called canvas, it's Paper, however in it's documentation it refers to it as canvas all over the place.
And you don't need rounded corners on ancient browsers. No, really, you don't. Especially now as the Metro UI doesn't use them... If you're only moving cards by translation then you only need jQuery or zepto or any other lightweight animation library.
Discussion and reactions in [/r/programming](http://www.reddit.com/r/programming/comments/1fak87/react_facebooks_latest_javascript_client_library/) too.
Maybe pixi.js? Fast 2d rendering engine using WebGL and canvas. Was used in the creation of http://flashvhtml.com/. Works great on mobile and if you don't care about backwards compatibility (which is a meh anyways), I'd go for this.
Not right now, but it is trivial to add since I've shown you how put arbitrary SVG in the document-embedded SVG using DOMParser. Right now a constant string is fed to the DOMParser. That could be a string loaded over AJAX instead.
Yikes that's ugly. You could do all of that stuff with a fraction of the code in Angular or Knockout, and it would be a hell of a lot more readable, too.
&gt;Here, templating is less important but components, encapsulation and composition become very important. Angular enables/encourages all of those things as well. Could you elaborate on why you think React is better for web app development and how Angular doesn't scale?
Another day, another JS FW.
I'm talking specifically about that example code. Do you have an Angular example which does use encapsulation and composition? I would like to see how they do it. 
This code is just pure crap, you should just look for a different example to do what you want. To default a div to "collapsed" set the element's display style to none like: &lt;div style="display: none;"&gt;&lt;/div&gt;
When you click for the first time, oTemp.style.display is empty because you didn't set it. When it's not set display is on "block" by default but it is not market as "block". &lt;script&gt; function collapse(x){ var oTemp=eval("document.all.text_"+x); var oClick=eval("document.all.click_"+x); alert(oTemp.style.display); if(oTemp.style.display=="block" || oTemp.style.display==""){ oTemp.style.display="none"; oClick.innerHTML="+"; }else{ oTemp.style.display="block"; oClick.innerHTML="-"; } } &lt;/script&gt; Oh, and please, put " " between your DOM properties. BAD: &lt;div id=click_1 class=expander onclick=javascript:collapse('1')&gt; - &lt;/div&gt; GOOD: &lt;div id="click_1" class="expander" onclick="javascript:collapse('1')"&gt; - &lt;/div&gt; 
That is, in all honesty, probably the ugliest code I have ever seen. I suggest you never visit that tutorial again.
Now why would you wanna write javascript via xml?
This is going to be a confusing, shitty time for a lot of us, but eventually, we'll get some decent solutions we can mostly agree on, I think.
Thanks, I should have realized that! And yes, I noticed nothing was in quotes after I posted.
I never have to, the code is already in my project! ;) http://24.media.tumblr.com/tumblr_m2c0dq6LZM1rqfhi2o1_500.gif
History.js is the only way to do it I'm afraid. There's a video tutorial with code examples on how to use it [here](https://www.udemy.com/dont-break-the-back-button-the-html5-history-api/?couponCode=reddit), hopefully you'll find it helpful (disclaimer: I'm the tutorial author)
Wait. Is it OpenPGP.js or OpenGPG.js?
As a relative beginner to many development topics, I know exactly what aeflash is saying. I am generally disappointed by examples used to introduce libraries/frameworks. The examples often don't help me understand the value or the power of what is being offered. It doesn't have to be a complete app like todomvc, but some real world examples go a long way for me.
In my opinion, yes :-)
I didn't know about console.time, thanks
from experience with the jquery-ui date picker, it is browser dependent how it defaults. IE likes to start at 0000-00-00 00:00:00 for example. To work around it, I always seed it from PHP rather than javascript.
I understand that jsx isn't necessary, but we spent so long taking logic out of the html that now we want to go ahead and instead put html in the logic? The biggest problem with this is that it doesn't do well in separating the html from the business logic. If they are split then you can have designers work on the html/styles and the coders can instead work on the code and just provide hooks to go in the template. I do like the idea of keeping an internal representation of the DOM and trying to find the smallest transformation to update. That couldn't have been easy to get right and I wonder if that can be split out and made to work with other templating engines.
I used the predecessor Titanium Desktop one time. It is a nice thing overall, but you should know that you won't be able to just put your jQuery app inside and be done with it, mostly because Tide uses its own XHR implementation for AJAX calls. From what you write I'd say it is still worth looking into.
Another option might be chrome packaged apps: http://developer.chrome.com/apps/about_apps.html
&gt;IE8 and below, which is still 10-30% of users worldwide On most websites I work on (they're very large and you use them a few times a week at-least) IE8 is &lt; 5%, was actually &lt;2% on a recent project. As far as browser penetration, mobile is much more of a concern than IE8 (~30-40%).
You are a fool for complaining about any of this without ever having looked into what mongoDB is and how it works. Go ahead and be a belligerent fool, the world will progress without you. SQL is on its way out for webapps. keep your "big data" assumptions, nobody cares what you think. mongoDB is a very good tool for web developers, and it will continue gaining ground because it is easy for web developers to use, and much easier than SQL or a relational database. I'm glad I'm not a dinosaur like you.
Actually "canvas" is a property of the paper object that points to the actual &lt;svg&gt; dom element "paper" is a property of shape objects that points to a Raphael root object, which is referred to as both "Paper" and "canvas" in the documentation, even though the class name is "j" in the actual code. So confusing that I had to edit this comment a couple times :) http://jsfiddle.net/cVCxv/1/
I've used it some. The documentation isn't always 100% accurate, but its still an easy to use framework. I did a little [blog on it here](http://developerdan.com/blog/tidesdk) and you see my work-in-progress [app here](https://github.com/lightswitch05/clipster_desktop). I also recently discovered AppJS but have't had a chance to use it yet.
I really like this. I wish I had started messing with canvas on something like this, what a great format. EDIT: One thing I would recommend would be some mouse tracking, a little display at the bottom left that show the coordinates you are pointing at, nothing else.
Building your app with React will, in general be as fast or faster than building your markup another way over the course of a large app. To start with, JSX is a tiny syntax addition, like a smaller coffeescript. We can transform it in the browser for getting started quickly or use a pre-build step for performance. Once it's translated there is no parse time, since it's just a JS expression. So caching doesn't make sense. JSX is not HTML and it's not building strings. It's a very lightweight tree of objects that represents your UI that is eventually flattened to a markup string. It's a lightweight "mock DOM" if you will. We also only attach event listeners at the top level and use event delegation so we don't need to rewire listeners on every change. In the past our benchmarks have indicated that inserting a markup string is faster than using document.createElement() for everything, so at this point we're already faster than some techniques. What really makes React fast is that when the data changes, we automatically re-render the "mock DOM" and diff it with the old version and only update the parts of the page that changed. This diff is generally quite fast (1ms on todomvc last I checked) and combined the fact that React can reason about what's dirty and what isn't and has a lifecycle that encourages fast code means that our performance is usually as good or better than hand-rolling a large app. Since React only changes the parts of the page that need to change, one could say we're caching the markup in the browser. We also provide hooks into every step of the process for you to have more fine-grained control of how React renders. See http://facebook.github.io/react/docs/advanced-components.html At the very least we think this declarative way to write apps is easy and intuitive (well, if you agree with doing a component architecture) and we've never had perf issues with it. But internally this framework has a reputation for being quite fast, and more importantly very hard to make slow. Does that answer your question?
that doesn't look like a good solution to me. I prefer this way: http://tomdale.net/2012/05/ember-routing/ where you pass the change to a FSM and that decides what to do, otherwise you've got two code paths where you handle the click or it falls through to a url change and then to the router, and everytime you add special code for routing you make things messier. Instead handle all clicks through a state model and have that state model update the route, and conversely if someone puts in a url then that should setup the state model that runs the route. done - no problems.
Haha, I know you're joking, but Elm currently does this as far as I remember.
I need to get on people at work to let me finally open source my component framework. I don't dictate templates/html, I don't dictate libraries, and I try to force as little as possible on you.
Might also want to check out [node-webkit](https://github.com/rogerwang/node-webkit) which is similar but I know has easy deployment options
That's the only way unless you have control over the other domain's server. Sorry.
My problem is getting the XML. I get the following error when i try to load it through javascript: "XMLHttpRequest cannot load http://xmlopen.rejseplanen.dk/bin/rest.exe/departureBoard?id=851009200. Origin http://localhost is not allowed by Access-Control-Allow-Origin."
This has nothing to do with XML and everything to do CORS . http://en.wikipedia.org/wiki/Cross-origin_resource_sharing Look and see if they are returning Access-Control-Allow-Origin: * in their headers, if they are, then there is another problem. I do seem to recall there being some snafu with localhost. Try using 127.0.0.1 instead. 
I don't see an issue with running proprietary JavaScript in the browser.
All javascript code that runs in the browser is able to be modified by the end user using a variety of tools, including the developer tools included in most web browsers. Nothing technically stops you as a user from doing that. But, most users have absolutely no need to ever do that and the FSF is looking at this issue completely backwards. The advantage of having freely-licensed code - not just JavaScript, but HTML and CSS as well - is not that it allows end users to modify the code that they run. It's that it allows other developers to copy the code and use in their own projects, and even to contribute back to the original project if it has a repository. That is a valuable ecosystem to push for, and promoting the use of free software licences among developer communities and projects is worthwhile. But I absolutely disagree with the focus of this latest campaign. It won't achieve anything beyond alienating the developers and maintainers of the targeted sites and show that the FSF is out of touch with reality.
There is nothing with "Access-Control-Allow-Origin:" in their headers. Using 127.0.0.1 results in the same error. Are you sure it's not because it's XML? I read somewhere that you can use JSONP to access external JSON, so I was just hoping for some similar for XML.
oh my. can I talk you out of it? I would hate the following expression to be true: circle.paper.canvas === canvas.canvas 
&gt; So we're trying a new tack. What we're trying to do is hire a person who has JavaScript and web UX abilities, pure and simple. Other, more server side languages are a bonus, but it is the JavaScript skills we are after, the person doesn't even need to know what SharePoint is. We will then take them on as a junior consultant, train them up in the SharePoint and Project Server side of things. There's a bit of a red flag. Why not look for a senior, experienced JavaScript person? It's true that they may not be able to take on a fully senior consulting role until they have the SharePoint side up to speed, but if you use words like "junior," you may be discouraging people who have a lot of skills to bring to your firm.
As a javascript guy, I don't have any motivation to learn SharePoint. In fact, I'd be fairly comfortable saying SharePoint is an aging platform not well suited to the modern dynamic browser environment. Good luck (sincerely) filling your role--this is just my two cents. 
4 years ago I would have agreed with you. These days, not so much. MS majorly overhauled Sharepoint w/ the 2010 and 2013 versions. They are drastically cleaner, faster and easier to use as a developer than any prior versions (which were pretty much god-awful). Still a learning curve, but a solid improvement.
I've just been discussing exactly this issue on IRC after linking this thread. I think we are trying to point the advert at the middle line, advertising for a junior sharepoint consultant might be scaring away the people we are trying to attract. Having really sat down, typed this up and then discussed it with people, I think we need to change the job, make it a full on JavaScript development role, JavaScript is a big enough subject to make that a full time position in its own right. That might change the stigma of it being a junior position as it would no longer then be such We also need to be wary of scaring off the real hobbyist JS people, those who will see Microsoft technology as something to avoid. Perhaps some extra info about day to day type activities? I think I shall attempt a rewrite over the weekend and see what people think. Thanks for your input! :)
I agree. I think SharePoint is your problem. I'd bet that most good Javascript developers do NOT want to work on SharePoint. 
Indeed, SharePoint 2013 is a very different beasty to 2007. Especially in terms of client side code. The [CSOM](http://msdn.microsoft.com/en-us/library/jj193034.aspx) is a very very interesting JavaScript API to work with.
We do know what we want, but you're correct that part needs rewriting to indicate what we need in terms of concepts rather than a shopping list of acronyms.
From my experience JS people (like myself) hate MSFT's web 'technologies' I wouldn't do Sharepoint for $100/hr
This is a problem, I know I can say "They got better!" 'till I'm blue in the face, but convincing people of that is an upward struggle. They really have though. :)
Wtf is wrong you? Calling me names? And assuming? Where the fuck do you get the idea that I hate noSQL? A dinosaur? You got some religion zeal there for MongoDB. My original post was to do your research. But aparently thinking is something you don't do cause MongoDb is the ansewr to everything. If I'm the dinosaur then you're the fool that can't think.
Clean and easy doesn't cut it. What is SharePoint's opinion on touching the DOM--does it employ data-binding or is it more opinionated towards a one-way render? Right now SharePoint isn't even part of the main conversations javascript is facing. And anyway, why should I use a monolithic full stack when as a javascript developer, I can pick and choose my own build and _then_ work with a back-end that could be RoR, Django, or brainfuck for all I care, so long as it serves me JSON? 
Couple things: First I agree with what others here have said. Consultants (freelancers) consider themselves expert in their field, seeing the "Junior" tag in there makes them think: * You're not willing to pay a reasonable freelance rate for skill. * You're expecting them to work as "underlings" with lots of managerial oversight. Second, the position you describe leans toward someone who is versed in Sharepoint, and has javascript and design skill on top of that. Consider changing the job title to "Sharepoint/Javascript Designer" not just "Junior Consultant: Javascript" That said... You're also likely to see a lot of people that don't quite fit. The exact expertise you're looking for is not incredibly common (Sharepoint+C#+SQL+Javascript+Design), so you're bound to get people that are 100% in one field, and only 50% in another.
The problems you have is the market is great for skilled JavaScript guys and you are trying to push a MS Product which will scare a lot of people away. Full Stack devs will cost $$$$. Why? Because they are hard to come by! Also there are a lot of JS devs who do not want to learn backend stuff unless it is node or Ruby or some other sexy language. I personally can code in different serverside languages, but I prefer to leave that stuff up to the experts. Is there a reason why you are not training your .NET specialist to learn JavaScript? There are some great training companies out there. I personally know .NET/Sharepoint guys have always been reluctant to learn JavaScript, drives me nuts. Also you have some typos on the PDF! Yikes
You are really fighting culture here. SharePoint Devs tend to be C# people, and C# people tend to have severe blinders when it come to other technologies. I see most of them get very defensive about it because they know their skills are lacking outside of C#. So I don't think the problem is your spec. I think the problem is inherent in the way most Microsoft developers have built their skill sets. They tend to be server-focused, not client focused, and their JavaScript is severely lacking. The people you want do exist, but they are going to be somewhat rare. You need to find people who are web developers, not Microsoft developers, but who have been forced into learning SharePoint for one reason or another. Frankly, I feel your pain. I spent a few years doing exactly the role you are hiring for, in SP 2007 and 2010, developing JS apps in SPD, and deploying them as content to the SharePoint environments. I found a total of 3 people who have this skill set over those years. And those people are considered senior level, especially if they are going to be consultants. So some concrete recommendations: * Make this a senior position, not junior. * Remove all C# and Visual Studio skills from the posting. * Keep the SharePoint skills as a requirement. SharePoint is just weird compared to other web development platforms, and training people up will be a challenge. There are times when the built in functions work well and writing your own JS is wasted effort. Knowing when to use JS vs. SP is the biggest challenge new developers face, and you really need to know all components of SP to make those decisions. * Be prepared to pay very well for this role. 
Do you have any evidence Sharepoint is no longer terrible to work with? If someone had a sharepoint solution up on github they were proud of I would take a look. Otherwise I think it is safe to say sharepoint is still terrible (and I have a lot of experience with .NET and javascript).
I guess another thing to think about too, no one (at least in my naive opinion) wants to work on vanilla javascript. I would assume anyone that *loves* writing javascript would like to use some framework like Ember/Backbone/Angular and I don't know if there's really room for something like that if you're using Sharepoint stuff.
Yep, it's the stage.addChild(cloud); line, you just can't keep adding like that every update, instead make an array of clouds, lets say 100, and when their x value is equal to their radius + the canvas.width then set their x value to 0 - their radius. Or at the very least, destroy the ones that leave the right side if they aren't going to be used again. edit: I don't really know createjs but the add to scene function seems off for some reason, do you really have to add every object to the scene every frame? Is that the only way to draw in createjs? edit 2: where is your stage.update? I believe you add everything prior to rendering in the init, then run stage.update to render.
Front end guy here.... I avoid sharepoint like the plague and so does every other guy I know. We have a microsoft division in which they eat, sleep and breathe sharepoint but none of htem are front end guys. The way I see it, it should be generally accepted that if you use sharepoint, you are just SOL on innovation on the front end. I could carve out myself a nice niche but hate sharepoint THAT much. 
As a JavaScript guy, you lost me with the word Sharepoint. Not to be negative, but I couldn't imagine any serious Front End Dev wanting to work with Sharepoint, regardless the rate.
It's a [dead horse](http://i.imgur.com/x4shL.gif) at this point, but seriously - you're going to have to find someone who's good at ASP.NET / SharePoint and great at Javascript. Pure Javascript devs won't have any interest in this sort of position unless it pays ridiculously well. That being said, if you *are* going to go down this route... we recently hired a few recent college graduates who surprised us and are ridiculously brilliant at Javascript - if you have a good tech university nearby, it might be worth looking around (posting on the job boards, talking to the job counselors there, sending letters to the CS dept, etc).
For enterprise platforms like Java and .NET, the projects are large enough that there tend to be significant division of labor such that a Java/.NET developer would never need to deal with JavaScript. This is not generally the case for projects in Ruby/PHP/Python. In addition, JavaScript developers generally fall in 3 camps: * Engineers who picked up JavaScript * Life-long Front-End Devs * Designers who picked up programming The engineers tend to prefer bleeding edge technologies, the Front-End Devs and Designers tend to stick with UI heavy projects that has significant customizeable UI. 
http://jaxapp.herokuapp.com - CORS enabled and turns your XML into JSON.
Looks like a pretty standard list of web technologies to me. Web development often requires you to know many things. If you don't want to sign up for that, then don't sign up to be a web developer.
The problem isn't just SharePoint, but the fact that a very certain kind of customer uses SharePoint. I'm going to stereotype here a bit, so don't light me on fire, but in all of my past dealings with SharePoint, these have been true: * Someone bought it without having any idea of what it does, or what need they are filling * There is some really bad code from a legacy SharePoint app, making things a real mess * The organization doing the hiring is overly bureaucratic, loves waterfall development Those are the reasons I will never work on a SharePoint project again. I've seriously never seen a SharePoint project that didn't remind me of a C# version of PHPNuke, for 10,000 times the price. Organizations that go for that aren't places I want to work for. Now, I know that doesn't help you with your hiring, and I realize that you don't really have a choice in what your clients will use. To that end, you should be prepared to pay top dollar for the best web developer you can find. This is a person that will probably know JS as well as many other languages, and someone you can coerce into working with SharePoint for good pay. I don't really see a way around it. Your super-solid C# folks don't typically like dynamic languages. Many "junior" level developers don't actually know JavaScript all that well. The ones that do don't like to be stuck in the small box that is SharePoint. Those are just my thoughts... definitely consider others as well. There are lots of good opinions posted here.
So first off I want to say I'm a big fan of client side stuff, I think things like nobackend, pouch, and hood.ie are fantastic. That being said the front end is a horrible place for pgp. Like woah look up cryptocat for some of the pitfalls. This is a really cool thing and probably has some applications in more locked down environments (add ons, cordova /phone gap) But for the browser it's like the noob asking on stackexchane how to store the server password in his client side script, it's not that we won't give you an answer it's that your asking the wrong question. 
After taking a look at the job description, the main problem has to do with the fact that it is not tailored to frontend technologists. Sharepoint is definitely not an interest to those who have been in the industry for quite a while. You may be lucky with beginners or even junior level developers, but for the majority of frontend devs this position raises a red flag because, in general, Microsoft technology is not something we enjoy due to historical reasons (this may be changing with newer tech). Recommendation: tailor the position to frontend developers ( remove sharepoint ) and introduce these technologies in your first interview and explain the limitations the company faces and that this is open and flexible for new projects given the right opportunities. 
Everyone has already mentioned that JS guys (myself included) tend to avoid SharePoint but that's because no matter how good it's gotten, Microsoft is designing their JS API for non-JS people. Everything about it looks and feels like C# which, as any "strong" JavaScript person can tell you, is not the way that "good" JavaScript works. .NET developers can't wrap their minds around it because they don't think in JS and JS developers can't stand it because it tries not to be JS. Sincerely, good luck finding someone who wants to and is capable of doing that job.
Increase your expected budget for a good candidate by 5-10k/yearly, or offer that much as a sign on bonus. You're looking for someone a lot more specialized (needs two skills: asp.net &amp; javascript). Make the title for the roll more interesting too. This might be a intermediate to senior level position you're looking to fill.
Judging by the perception of Sharepoint from the comments in this post it doesn't really matter if it's improved. A negative perception can be what's chasing away good JS developers from wanting to work with them, regardless of how it has been improved.
Very nice, thank you for this. Are you planning on supporting other data types? Posibility of UDP?
The multiplexer is technology agnostic, it really just handles the message chopping and formation, i'm currently using mux.js with peerjs with UDP packets that are less than 1070 bytes. Realtime pong!
Here is how I was hiring JS devs last year: First I would start with a code interview over the phone. I just presumed 90% of applicants for a senior JS dev position would likely be worthless, and I was proven correct. In this code interview I would minify a complex page of HTML from the company website where id attributes were severely lacking but the HTML was substantial and email this HTML to the applicant at the start of the interview. First thing I noticed is that some applicants will provide an invalid or non-functional email address on their resume. These people can be eliminated so long as the problem is not a routing issue on my companies end. To be sure I would attempt to send the page using an alternate email address if this does not work from the company email address. Once they get the HTML page I inform the candidate that they need to open the page in the browser of their choice and in their favorite code editor. Some applicants would inform me they don't know how to expressively access the code on their personal machines. If the candidate is not willing to think outside of the box on the fly to solve this issue they can be eliminated. Browser consoles in Firefox, firebug, Chrome tools and so forth are more than sufficient for example. One the petty stuff is out of the way I immediately get to the code test. So far I have asked the candidate almost no interview or personal questions. I would find something on the page like a paragraph that does not have an id attribute and whose parent does not have an id attribute and ask the candidate to write JavaScript to make the paragraph's background red. Keep in mind I did not ship any JavaScript with this code except for what is embedded inline in the production code and all other JS references were removed, which means no jQuery. This is where 60% of candidates are eliminated. A competent JS dev can access the DOM without jQuery. Sometimes I mention jQuery is not available right from the start which allows candidates the opportunity to instantly remove themselves from consideration and save me some time. A decent developer is both a decent coder and a decent people person, so now is where it gets tough. I have already eliminated 75-80% and I still going to step it up. When the coder starts writing code I tell the candidate to talk through their problems and problem solving. Remember that this is over the phone, so if I get some constant feedback I know what the candidate is thinking and how to nudge them if they get stuck on something minor. If the candidate is silent and fails to deliver a code solution then they have absolutely nothing to show for this time and are eliminated. Competent candidates can think their way through any initial hickups on getting started, get through 2 code problems, and somewhat respond to casual conversation in a one hour interview. Stellar candidates can get through 3 code problems with valid solutions without asking for help and carry a full conversation in a one hour interview. I am constantly bombarding the candidates with off topic conversation while they are thinking through the code problems. I expect any candidate to go silent during moments of intense computation and concentration, but otherwise this is a perfect test to determine if a candidate can handle a balance of priorities and simultaneously gauge their level of confidence in an honest no bullshit scenario. On my end I try to always be sympathetic to problems, always listen, and always help the candidates get through the code problems by providing hints and guidance. I am willing to help the candidates come to the solution and pass the interview, but it is amazing how few candidates take help provided. If a candidate demonstrates such foolish behavior during the interview they will do it on the job, which is convenient since they essentially eliminate themselves from consideration. Using this interview method I can identify several qualities of bad behavior: * Candidate is completely unprepared and cannot think outside the box as necessary to get started. * Candidate requires access to a favorite framework, library, or other helper code and lacks the professionalism to program in the technologies directly. * Candidate clams up and fails to write code and fails to ask for help. Epic fail. * Candidate cannot follow directions and consistently delivers something not asked for. Here are some good behaviors I notice during this type of interviewing: * Candidate displays confidence in their performance opposed to arrogantly telling me how awesome they are. * Candidate demonstrates the degree to which they are able to respond to casual small talk while under intense pressure. * Candidate demonstrates the code style they would use to solve simple problems under pressure which probably allows me to identify how they prefer to write code. * Allows me to determine if the candidate actually enjoys writing code or if they were bluffing just enough to get a paycheck.
Some parts are still terrible. I build JS apps for SP for a living... As long as you treat share point as nothing more than a platform to host your app, put your js/css code in a separate CDN, and interact with the lists/db via webservices it's money for jam.
JSONP still requires help from the target server. Also it seems you could use JSONP to serve xml but I haven't really thought about it.
You say "it is the JavaScript skills we are after, the person doesn't even need to know what SharePoint is." yet the PDF has 9 instances of SharePoint and only 2 of JavaScript. If you are looking for someone who is javascript focused, then your posting needs to focus on javascript.
Just my 2 cents: I'm not a JS developer. Not a C# developer. Not a Java developer. Not an ... anything developer. I am a developer. I can code in C/C++, in Java, PHP, Python, JS, C# and anything you can throw at me. I may not like PHP, JS, C# and the like, but hell, if you pay me, I'll make it work. I'll learn. I don;t need a fucking certificate to code for platform X. Yes, platform X is shitty, I'd rather have a beer at the pub than waste my time with that, but that's where the paycheck comes from. so I'll do it. OK, where am i going with this? What you already have there is a bunch of retards. Can code C#, don't wanna touch JS. WTF? Really? Can't learn a new language? A new framework? If one is so thick, please ... show them the door. FAST. What you need is a developer. One that can think. That can design. That can be proud of his code. Not a shitload of 9 to 5 gangam style lovers that shut off their brain 24 hours a day. What do you do if you need an Android app tomorrow? Hire an Android guy? Really? Hiring practices in this field have really gone downhill. People dont wanna learn, therefore emphasis is put on experience with X version y.z . WTF? Any brain dead monkey can learn how to code in JS. May not be pretty at first, but it can surely work. Sharepoint ? Really? Yes, it's a shitty platform, but to say that "i don't wanna/can't train in that" is just stupid. And a fucking lie. My advice (ignore if you want, doesnt matter to me): hire a developer. Hire someone who can think. The rest will just follow. And oh, do yourself a favour and fire the retards that say "I don't/cant learn X. I won't/can't work with Y.". Experience is irrelevant. Really. Edit: i have 20 years experience in the field. you're most likely running code i wrote. I wrote code in more languages than i can remember. just an ... addon. 
I really don't have an answer but I was just at [Fluent 2013](http://fluentconf.com/fluent2013) and it looks like companies sent their minions to attend the conference with an eye towards recruiting talent. And that referral bonuses are a big thing again. I was tempted to put a post-it on my forehead saying "Happy with my current job, thanks - please leave me alone".
I work for a consulting company that "specializes" in SharePoint and when I got hired into a smaller division of that company focused on Interactive Media/Web I told them I'd never touch SharePoint and they seemed to have no problem with it. To this day I mainly do HTML/CSS/JavaScript and interview new leads to pick those I want working for me. In that regard, it's nice that I can have a bit of control over the hires. But to say that "Front End" developers hate SharePoint is an understatement. There's such a distaste in developers mouths that I'm surprised companies still pay for SharePoint development. I imagine it's people that don't know any better. Second to SharePoint is .NET Webforms. We are a people that don't like the server telling us how our pages are supposed to look/function.
That's a huge part of my dislike. If the back end gives me the data I want and can accept the data I give it... keep your grubby hands out of my HTML. It's also a great point of abstraction to be able to run your front-end off any old back-end no matter what language it's written in. If you want a CMS, fine. Just give me the data I have access to in standard formats. If I don't have access to some document, give me a damn HTTP 403 error not a 200 with a stupid error page markup.
We're not talking about being paid to code Django, we're talking about being paid to code javascript. My point is that my stack works with any backend, not just Microsoft's. 
Some comments below: 1. It leaks globals (use "var"), consider extracting the thinger that draws symbols into a function `drawSymbols(symbol, amount)` or something. You can then use `var drawStars = drawSymbols.bind(undefined, '*')` to produce a specialized version of the function (that's partial application). 2. Apply the same idea here, build a construct for "offset". Combine these two thingers to draw what you are after. 3. Same except in this case "offset" thinger should deal with aligning to right (totalWidth - amount). That's how I would approach it anyway. I like to build sets of small functions and then compose solutions out of them. :) Let me know if you have any questions, I might have taken something for granted.
First off, congrats on pursuing programming. It's only becoming more valuable as a skill. Second, check out [jsfiddle](http://jsfiddle.net/rqKzV/) as a place to test your code. You can save it and share it as well. Infinitely useful. On to the code snippets: **Problem 1** Looks good! If you want to get rid of the space at the top, move the `&lt;br /&gt;` output after the nested loop. **Problem 2** A few issues here. First, your pyramid is always one line too high. Second, an input of 0 still shows a star. Third, you don't close your `center` tag. Finally, maybe try to wrap the entire thing in a `&lt;pre&gt;` block and include the spaces as well as the stars in the output. The extra line is an easy fix. First, you want to remove the initial one star and make sure all the output happens in the loop. Next, play with the bounds of your second loop. **Problem 3** First, the `else continue` section of the code doesn't do anything here, so you can remove that. Beyond that, there is more of a "good coding practices" issue here than a specific programming issue. Basically you start your loop, wait for it to reach the last element, then start another loop (while still in the main loop). If you're not running the second major loop until the last element anyway, why not just make two major loops? This may also be a good opportunity to create a second function that lists out the number of stars you want. That way you only write that code in one place, then call it from your main function. Here is some pseudo-code: main: for i as 1 to height print i stars for height - 1 to 1 print i stars print i stars: for j as 1 to i print star print line break
One point I haven't seen raised yet and that would stop me from applying is the fact that you are looking for a UX *and* a (seemingly) at least decent/experienced javascript developer plus a number of other technologies. IME seeking someone with a IT degree, competent in both frontend and backend tech, SQL, APIs, etc. and on top of that have UX skills and calling it a "junior" position (usually means shitty pay) is not realistic. Drop the UX requirements. Just my $0.02
this is really cool. thanks for sharing it! Did you make it?
Fixed all the issues with Problem 1 and the major issue with Problem 2, I'll try fixing the other ones later. Thanks a ton for the assistance, you wouldn't believe how hard I face palmed when I realized what the issue with the extra line was...
Hi JS Guru and SP Guru here... In addition to what other people are saying here... "Junior" and "SharePoint" not only aren't attractive they are almost negating each other entirely. When I learned web development (ongoing task obviously) JS was part of it. SharePoint? after years of project work... and a specific directive to learn and become familair with it. No junior, unless they've previously been employed by a company that uses SP will know what SP is... therefore they think unqualified. Additionally there is SO MUCH to SharePoint that theres almost no point hiring a junior... i know your probably working with the client side API but still... Juniors and JS though? hell yeah! Juniors love JS. Again - outgoing and client-friendly developers are rare. Its like you can have the JS or the SP or the "client friendly" rare to have it all. **TLDR:** Remove SharePoint from the title... Spice it up for the client facing part and mention some JS frameworks as pure JS is almost a lost art for the youngsters. 
My team was looking for a backbonejs dev in shoreditch for a whole year until we got a good dev. Most freelance for large daily sums because its the next big thing. The php dev is dying and the js dev is becoming desirable.
 Shrug... this is just my experiences just a warning. Javascript started to get more popular as a programming language recently (few years) and so there are tons of people from non traditional cs entering programming like designers and they pollute the skill pool. Like PHP I've seen tons of people out of CS major entering it, with very fundamental CS skills, and they lower the wage. Hell those PHP people learned jQuery and they think they know Javascript. I've tried applying for jobs and they ask me why should we pay you 80k when we can hire two 40k PHP developers? Technical Debt. The problem with Javascript is not only you got traditional CS people going into it but you got tons of non cs, designer people. I'm not going to say all of those designers going into programming are bad but most of them are. And that's what you're getting. Not only that, Javascript is much harder than PHP. The OOP model is prototype base and there are tons of design patterns for certain drawback. So you have to weed through you candidate anyway. It might not be your post but the fact that you're not well known. Host meetups, and try to get your company name out there and perhaps you'll get more people applying and maybe you'll get a good candidate. It's a number game.
Take this to /r/learnprogramming/ 
Smartest guy in this thread
As a JS person who has done SharePoint integration work, just advertise for a JavaScript Developer or Programmer. You want someone whose primary language is JavaScript, who also has something like a Comp Sci degree, so that you have some assurance that dealing with SharePoint's often unwieldy API will not stymie them.
Nice tool! But I think you should increase the brightness of the colors for the code-theme. It now looks like there is an overlay or something above the code-area. 
Purely out of interest, what have you worked on that I might be using?
SharePoint makes me want to blow my fucking brains out on a regular basis. I say this as a dev with 7 years of experience with it, but who's managed to maintain their sanity by building many solutions on top of it, wrapping the server api with Service Stack and talking to that restfully designed api with a Backbone.js client (which kind of defeats the purpose of SharePoint in the first place, but allows me to keep my head on my shoulders, and my clients happy with responsive and slick apps that "run on SharePoint" so they feel their ridiculous licensing cost wasn't wasted) I'm probably one of 3 people on the planet who'd actually qualify for your position, but would tell you in no uncertain terms that you couldn't afford me.
jQuery is the only library you want your candidate to be familiar with? What about a front end framework that is tenfold more robust than jquery, like Angular JS or some goodies?
Have a look at this http://tympanus.net/Development/Baraja/ This is an idea what you can do without a heavy duty animation library. 
&gt; *Junior* Consultant &gt;theres money to be made here. yes, but I'm guessing not at this job ... 
Simple JS solution for (1): var height=4; for (var line='*', html=[]; line.length &lt;= height; line += '*') html.push(line); html.join('&lt;br/&gt;');
You appear to be looking for an experienced consultant with a relatively rare skillset at a time of unprecedented demand for people with real skill, yet you're listing the job as "Junior" (presumably this sets the salary expectations?) AND you want someone "happy to travel throughout the UK" 
Don't redraw every time, it's less costy to move the canvas inside a div with overflow:hidden.
I was mostly worried about how it would impact the performance. I made a simple php proxy and so far the performance is acceptable
Maybe you should host it somewhere. I doubt many people are going to clone the repo just to look at your thing.
As always, it's the choice of the developers to release and license their software as they see fit. Since JavaScript is an interpreter, they have no choice but to allow every user to see their source code; all they can do is to obfuscate it. In addition, most interesting third party libraries are already being licensed under open source licenses, many of them using the LGPL. There is a whole ecosystem of open APIs, not only on the client, but on the server, too (node.js). All in all, this campaign is useless. JavaScript is already as free as it needs to be.
Bingo! Almost exactly what I'm trying to do. Do you have that up on github? -edit: looks like peer.js is a udp webrtc wrapper, awesome. for others: [peer.js demo](http://cdn.peerjs.com/demo/chat.html)
As others have said there seems to be a gap between people who know and like developing with C# and people who enjoy JavaScript, I've dabbled in C#, but I have no desire ever write anything with it, but in other hand I'm down with JavaScript any day of the week. Maybe it's about different age groups, since most of the C# guys I know are of older generation and will always see JavaScript as kiddie language and thus not worth learning while me and other of my generation seem to develop almost exclusively in Ruby, Python and JavaScript
Curious here: Why do you think backbone sucks?
You are totally right, so here: http://dem2.cz/backbone-calc/
In addition to what others wrote be aware that document .write is generally avoided in modern code, it's not 'wrong' but what people would generally do is put the strings in an array and then use its join method with '&lt;br/&gt;' and put that into the document after its loaded. Second if you stick your code through [jshint] (http://www.jshint.com) it'll catch a lot of the small issues for you
cool tool this made me laugh "name": "Claire Stanley", "gender": "male", 
As a developer that mocks JSON all the time, I can see instances where this would actually help speed the process.
I don't mind working in vanilla JS if I can target only modern browsers, but I still like my jQuery to simplify my life with certain dom operations.
Late to the party but as a developer sitting in a SharePoint dev camp right now I can tell you you're going to miss out on a lot of money. The way SP2013 works is that you can develop using anything you want because it's all HTML/CSS/JS. With their App model you're not allowed to run any server side code, well server side code on the SharePoint server. MSFT has demonstrated that you can write a SharePoint 2013 App on a Mac and host the App on a LAMP stack. I work in consulting and we're selling SharePoint solutions non-stop. We have so much SP work we don't have enough developers to handle our backlog of work. So if I were you I would re-think your position or don't because that will leave a lot of work and the $155+/hr charge rate for the rest of us. If you're interested in taking another look: http://reimaginespdev.com
That's probably right. After I read the headline of your post I was like "that's a weird backbone implementation..." Possible, but weird. Render methods are really nice, actually. The framework I've built relies heavily on events and the render and a rerender method I had to write, and a lot of magic happens pretty easily. Don't hate them, they are nice fellas.
I was going to write a long message but I have seen that many people are saying what I was going to say. Your number 1 problem is your platform being Sharepoint. Your number 2 problem is that there is not that many good JavaScript developer, most people only grasp jQuery and copy pasting jQuery plugins or libraries.
Pretty cool! Tiny tiny correction: "wait for the magic" instead of "wait for a magic". 
You may recall, I was responding to your comment 'the language is not "bad" any more than any other language is "bad"', where you first made the reference to 'any other language', so if anyone brought the discussion off the topic of JavaScript vs CoffeeScript, it was you. I don't think it's a problem having a wider discussion, but you seem to think it's a problem when something you feel argumentative about is not going your way, having been shown strong evidence in support of what I'm saying about JavaScript having some flaws that some other languages don't have. I'm also assuming that CoffeeScript has not solved the problems with JavaScript numbers (someone correct me if I'm wrong about that please), that's of relevance here as it's also a limitation of CoffeeScript. Thanks for the info about JavaScript and .NET. I have indeed mostly been using a Mac, but am keen to do some JavaScript programming in Windows, probably using the Windows 8 model. I'm not so keen on server-side coding that relies on a Microsoft platform because of issues of the cost of scaling a system. I'd be interested in seeing any benchmarks showing the performance comparison between JScript.NET and C++. Maybe by 'similar performance to' you mean 'a bit slower than', but I'd certainly be impressed and find it useful to compile JavaScript into something of that speed.
You should x-post this to /r/LearnJavaScript - I bet people there would appreciate it.
This is likely not anything you'd be creating for them, though. They just want to see if you can use BB how it's meant to be used. Most people understand to use the correct tool for the job, but if they're almost exclusively a BB shop then letting you do it however you wish wouldn't help them to determine whether or not you're a good fit for them. Also, how can you say BB sucks, and then say this: &gt; Backbone provides valuable abstractions for server-client comunication It sounds more like you disagree with the use of BB for this particular problem, and not so much BB in general...
Maybe if you were working at MS where you could make changes to the platform at the foundational level, but I shudder to think of the hacks, work-arounds, and obtuseness you'd have to deal with to get Sharepoint to do anything it wasn't already designed to do.
After looking at the CSOM you linked previously, I'm having a hard time believing you. I checked out a handful of objects and the documentation is so bad I think it's a stretch to even call it documentation. Some nodes were completely empty, while the most I could find in others was barely more than a method signature; i.e. no actual descriptions, no examples, comments were SPAM comments not relating to the code at all...
I'd be interested to get your take on [TypeScript and SharePoint](http://usamawahabkhan.blogspot.com/2013/04/typescript-for-sharepoint-2013.html). It would appear from this recent video session that all those C# devs who don't know JS are learning TypeScript: [Visual Studio Live!](http://vslive.com/blogs/vs-live-video/2013/05/typescript-session.aspx) I prefer having types, so I've been using TypeScript lately and like it a lot and [contributing links to r/typescript](http://www.reddit.com/r/typescript)
2+2*2 = 8 ?? ... http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm of course you can hack it by just eval(expressionString)
I too am a C# dev moving into the JS world. I really want to work with TyepScript because, like with CoffeeScript for Ruby/Python devs, it makes it feel a bit more like home. I've decided to learn JavaScript w/o TS or CS though so I can read any JS code and think in JavaScript.
I'm building a second project for making apps/games that are two players on top of peerjs ( its very bare bones right now): https://github.com/richardanaya/app.twoplayer I made pong on it here, you can see for example: http://quiet-thicket-8676.herokuapp.com/ 
hack it with eval! why didn't I think of that! Maybe I fear that keyword little too much... In terms of functionality they wanted it to beahave like a typical calculator, so I made it work the same as the calculator in Windows 7. It computes 2+2*2 to equal 8 too.
really wish this was on github. I can see this as a great npm module to plugin to a testing backend running on node. Would also be great if you could pick from a set like: {{['student','teacher']}} or be able to extend it with functions and put in sub json templates... now it's starting to sound like handlebars - though you could possibly create a random JSON to pass in to a handlebars template that describes how to construct a random json. Let's get meta.
Yes actually! If you look at the code of the pong game ( which isn't super complex ), the person who clicks the host button is the one in charge of performing all the game logic. No server required aside from getting the webrtc clients connected together :)
I code incredible JS and would never work on SharePoint. MS still has to answer for the 10 years of IE6 as far as I'm concerned and I'll never jump on their bandwagon.
I would do the same if someone badmouthed my favourite technology stack and wanted job I was offering. The thing is they do projects mostly in Angular.js and they gave me Backbone just because they wanted to see me tackle a framework I barely know. Besides, they probably don't go to reddit and even if, I don't really care.
sometimes i feel like a magic
Ah, I see, well if they chose it just to see how you'd handle it, and it's indeed not their pet framework, then probably no harm done. Well, except that you may have divulged their interview test and now they have to make a new one... I could be wrong on that too. Good luck, though.
I think they came up with this one just for me-they even asked me to put it on Github, so the code was in public anyway.
 window.onbeforeunload = function() { return confirm('Are you sure that you want to leave this page?'); };
If you want the world to hate you :)
JS Devs work on building interaction. Much of the interaction and animation (though some is done with css) is done in JavaScript. More and more web-apps are making use of client-side frameworks such as Ember.js, Backbone.js and Angular.js. These frameworks allow you to build full-featured applications on the client side (usually getting data from some sort of API). There are some devs who specialize in building CRUD apps, and some who specialize in animation and UI. [Check this out](http://www.creativebloq.com/web-design/examples-of-javascript-1233964) to see what I mean.
Awesome little tool. Will be using this week for sure.
There's a lot more stuff you can accomplish with JS now than you could realistically do 5 or 10 years ago due to faster computers/js engines, more standards-complaint browsers, html5/css3, less sucky libraries, and new technologies (node, webGL). So it depends. Your standard, run of the mill job may be making a web app that does CRUD stuff through some backend API, but you can get into more specific things like server-side stuff with node, or 2D/3D graphics applications.
There is a power there that's hard to imagine. It's hard not to envision load balancing across node client instances to alleviate most server load. I'm talking in general, not just for games. Even if it's having clients send large js libs to each other instead of from your (others) servers this would be a revolution. You are really on to something quite big. Ok, you've hooked me, I'm way more interested in this than I was 2 days ago.
It depends on how heavily the company you work for uses JS. For building "traditional" websites then you should brush up on your jQuery. For web apps you'll need to be familiar with "vanilla" JavaScript and OO patterns. For really client-focused web apps you'll need to be proficient with JS MVC frameworks. If you're considering diving into JS to learn then I recommend you start with plain old JavaScript, learn its syntax and idioms then delve into libraries and frameworks once you have a firm grasp on the basics. Knowledge of loosely typed back-end languages will speed up your learning of JS.
It's a shame for windows calc :) I wonder how many people it mislead all those years ...
Yah man! I'm glad someone else is as excited. P2P is a really hard model to program in. It's a system much more based around trust, redundancy, and fallback. A worthy challenge!
Well they just emulated how digital calculator works in real life-most of them have just memory for just one number, so they cannot compute an operation with three numbers-you could have one on display, one in memory and that was it.
Notwithstanding a stray period after CSS3, I don't see any typos in the document.
Ha, but probably better suited for /r/ProgrammerHumor.
Waitaminute, why are you trying to replace Grunt?
Has anyone tried this out yet? Can it be ported over to sublime text?
Well... javascript started as to add behavior for whatever html is missing. Which was mostly forms. From there the industry moved to having webpage to act more like application. Such as AJAX where you can change part of the webpage without transistioning to another webpage via link and without refreshing. They started to use Javascript to give the webpage a more application like feel and less of a webpage like feel. Mostly jQuery stuff. Now we're moving our layout and template to the front with javascript mvc, such as angularjs, ember.js, etc... making it so that serverside languages just serve data to the client (browser), and the browser will take care of the layout and how the data is being display. --- Other trends that I'm not very well verse but heard about: Javascript have become powerful enough to do certain things such as video games and stuff. That's one area... There is also phonegap, using html/javascript/css you can create a cross platform mobile app that feels like native. There's a trend to bring javascript to serverside, node.js, there are pro and con to this and I have my reservations about this shrug, but the community is very active and nice (which is always a bonus). I was at js.la meetup and they were talking about javascript library paper.js and they're basically doing something similar to adobe illustrator for browser. --- And I guess those are the things javascript developers can do (that I know of).
You could implement the `{{['student','teacher']}}` behavior with the following function: function(idx) { var choices = ['student', 'teacher']; return choices[this.numeric(0, choices.length-1)]; }
And how would it make this faster? http://stackoverflow.com/questions/3145966/is-strict-mode-more-performant
First of all, JavaScript isn't just for front-end work. I have used JavaScript for everything from website menus, to real-time television news production systems (front and back end), to back ends for REST based PaaS, to 3D visualizations for spacecraft. These days I usually code in CoffeeScript instead of plain JavaScript though.
Basically... you can do anything now a days with JS.... including some back end work with nodejs. Once you get down some regular javascript and feel a bit comfortable, you will want to look into studying some javascript libraries (such as jQuery or YUI), where you will learn that everything you just learned can be done twice as fast :D Want to enhance your websites with cool functionality and give your user a better experience? Best learn some JS. Seriously though... dont hold back at all learning JS. I was intimidated at first when I started learning it and now I'm developing my own single page apps with Backbone (not a big deal to most, but to me it is) and I only started learning 6 months ago. 98% of the time I don't understand what I'm doing when I start on a project, but thats what makes it fun and interesting. 
Use the V8 profiler if you're really serious about performance edit: https://code.google.com/p/v8/wiki/V8Profiler
My client pushed this at a meeting. I said it was a bad idea. He told me to do it anyway. I still haven't. It's been 2 months, and he seems to have forgotten about it... hope it stays that way.
Because if you're looking for work, you don't want to "hack it".
Or maybe not: http://jsperf.com/function-length-performance/4. Property access for a function object penalizes the performance regardless of which property.
Am I missing something here? Can you not just do... var d = new Date(); var date = d.toLocaleDateString() + ' ' + d.toLocaleTimeString(); As long as it's being validated server-side, I don't see there being an issue...
Anything you can imagine doing on your computer, any application, any pretty game or slick interface or powerful application--**anything**--you can code it in javascript and it will run on every web-connected machine in the world*. *There will be inconsistencies based on device, browser, operating system, browser, the current angle Io and Europa make with Ganymede, driver version, and browser. 
bravery
You could always use my excuse for things like that: "It's very bad for SEO. If Google recognizes it they'll blacklist your site."
I think it is safe to say that you are the minority of JS devs. I'm interested in the TV news production system you worked on. Can you give more detail? Is it open sourced? 
Claire with an e is generally considered a male name. shit... i think... is it the other way around?
As far as I'm aware: V8 takes a fairly blocky approach to optimisation, and bails out at the function level when it encounters things flagged to interact badly with optimisations beyond a completely safe compilation. Accessing information about a function such as its name or number of arguments is probably information that is allowed to be thrown out in some optimisation cases, such as inlining or others, and so may be one of those features that disables optimisation. (It's not just any property access, accessing func.x only gives the minor slow down you'd expect from doing a little more work.) Other things that used to, or may still do this, are things such as the arguments object, or try/catch.
Its based on Etherpad Lite which is open source.
Check this out: https://github.com/mbostock/d3/wiki/Gallery Lot of external links with graphical stuff, all done with the help of d3.js, which is a powerful and clean js framework for graphs. 
What's the salary and why is it a junior position?
It would prevent you from doing things in a bad way.
Yeah, but still - not on this field.
try requestAnimationFrame, it will speed things up a bit. But, there is some flaw in your code that is slowing everything down over time. I don't have time to debug it for you, but what you are doing here shouldn't be lagging after only a few seconds.
&gt; V8 compiles JS into machine code when it can. V8 *always* compiles to machine code. &gt; 1% of the cases like this, it probably just falls back to deoptimized/interpreted mode Deoptimized yes, interpreted no. V8 doesn't have an interpreter. It has two JITs: one that generates code fast and one that generates fast code. 
Thanks for the correction. I originally wrote that in the context of JS engines in general, not V8, but I guess it is not precise enough for V8. 
When was Safari 7.0 released? O_o
I guess from my experience most of the guys I work with writing plain js make silly mistakes like assuming that .sort() will work correctly. I have no real problem with 'vanilla' javascript, it's just that there are so many caveats that you have to consider and it's super easy to mess up. edit: ['10', '10', '10', '10', '10'].map(parseInt) :(
Why is Eric Estrada wearing a CHP uniform in this video? I don't get it.
Yes interrogating the argument object is rather slow too. Passing the argument object as an argument to another function is also god awful slow.
Maps, charts, and animations. Basically any data visualization over the web. There's a lot which webpages can do without JavaScript, but if your user is going to make a custom visualization, play or interact with the data, or do anything with maps, you're wasting time on the browser and server ends if the visualization is done via the server. A great deal of apps now get the raw data from the server in JSON, then work with it to create an interactive visualization in the browser.
except data binding isn't magic! i can implement it and you can implement it; in fact its straightforward enough to implement that about a hundred people have published implementations on github or their blog. its a useful abstraction over event handlers. doesn't mean we dont understand event handlers, it just means we can choose to reason at a higher level than event handlers if we want to. &gt; If you can hold everything about your data-binding library in your head in addition to everything you need to know about the DOM in addition to your own application code i think most people can do this, just not everything has to be in your immediate thoughts at the same time. i mean look at your memory over the last 20 years. probably a lot of stuff right? ps i tweeted you before i read this
The guy said he was a backend developer so I'm guessing that's who this is targeted towards. Hell, chrome dev tools have shown you what css file and line styles are since as long as I can remember. There's literally nothing new here besides the fact that it's in an editor.
Speaking from experience if you are a Java or C++ dev hoping to easily slide into JS with minimal learning here is what you can expect: * Slaving away in framework madness violating [Cheney's Law](http://prettydiff.com/styleguide.php). * Creating OOP based spaghetti code that nobody will want to maintain * Introducing MVC data architectures as though they are something amazingly new and fresh * Creating complex meshes of interaction that bloat the DOM and slow the user experience Here is what competent JS developers are tasked with: * Efficiently manipulating the presentation and interaction of markup via the DOM * Gather project requirements before doing any work, and never deviating unless the requirements change in writing * Writing small client-side applications with features limited to a written set of requirements * Irrationally using frameworks for every possible task Here is what senior level JS developers can expect: * Writing internal standards on subjects like architecture, accessibility, SEO, and so forth * Fixing other people's problems * Advising leadership as to technical limitations, options, and potential roadblocks * Inheriting ugly spaghetti OOP code from senior Java developers * Failing to convince other JS devs to stop using frameworks for every conceivable task
What is the use case for Function.length? I can't think of a time that I ever used it, much less called it over and over such that it would cause a bottleneck.
Function.length is good for meta programming. If you are building decorators, trying to enforce arity, etc.
I've not checked the source code, but I think Express uses Function#length for determining whether a middleware is a normal one or an error-handling one.
As other people have touched on, 'Javascript people' manage the interaction between the user and the data in web applications. For example, I could upvote this reddit post and I would see the number of upvotes (10 at the time I started writing this) increase by one. In that action, I have a) told the server to update this posts database entry, and b) updated the 'view' in my browser. This kind of interaction is the basis of client-side/front-end development. You should take a look at some client-size Javascript frameworks, which, at their most basic level, allow you to store models on the client and display them with templates. [Backbone.js](http://www.backbonejs.org) and [AngularJS](http://angularjs.org/‎) are the two trendy ones right now, but I personally learned the basics with [Knockout.js](http://knockoutjs.com) which has a simple syntax and some good tutorials on the official site. I'm currently learning Backbone and it's like stumbling upon an entirely new world where you can suddenly do very complex things with very little code. If you're asking these questions, I'm sure you'll have the same experience as I have.
Yup, I see: https://github.com/visionmedia/express/blob/d853c833f0d693ef0c0352ac3a02016701b6fe07/lib/router/index.js#L158 I'm not familiar with Express at all, but it seems like the Route could cache those lengths (or really, just cache a boolean that says if it was less than 4) and it would probably speed things up.
I develop games in JavaScript and really enjoy it. Games is actually the only thing I work on in JavaScript that isn't for DOM interaction.
I hope this isn't too spammy. I had [another article](http://www.reddit.com/r/javascript/comments/1ffc8e/cache_oblivious_array_operations_in_javascript/) that I posted here earlier today, but I figured that this one might be more useful to JS devs since it is basically a directory of helpful code snippets and modules, while the other is more theoretical. If I am posting too much I can throttle it back.
If you're building decorators, I would think `superFunc.apply(this, arguments)` is all you really need. And if it's really that important to you to enforce arity, you could do that within each function by checking `arguments.length`. I agree with MatrixFrog. Show me a case where you think you need Function.length, and I'll show you better code without it.
&gt;Passing the argument object as an argument to another function is also god awful slow. If someone has the time could they explain that to me like I was stupid...
That's a big sign that your system's interaction flow is fucked up. Having a single page with tons of fields, tabs and nesting and no distinct path that data flows through should be dealt with rather than using a hackish onbeforeunload handler.
For an idea of why this is, check out the evil you can do with arguments: function my_other_func(a) { a[0] = 10; } function args_fun(x, y) { my_other_func(arguments); return x + y; } console.log(args_fun(1, 2));
+1 for this - for 'single page' web applications you'll want to learn an MVC library like Backbone or Angular, and be happy with a more 'OO' type approach that splits out templates from script from CSS.
&gt; it is basically a directory of helpful code snippets and modules Certainly is! Thank you.
Thaks Dave, it looks very good. I'll be watching it today on my breaks :) 
No arguments there. I've got a redesign underway to resolve those issues. 
Yes, indeed, it's very important to track this errors in production, but a lot of devs don't really care about it too much. They usually have the impression that ones the project is launched - their job is finished. I'm teling this because I know it on myself. Actually, that's why I've started JSLogger. Especially if you have a single page app with a heavy JS interface in production I would strongly recommend to track the errors.
Loggly is nice, they just received ~5M$ funding. But they have more of an IT background and their tracking solution is a bit complicated to set up.
Good call, I might use that next time
We've got something similar in terms of complex forms with lots of data. I'm curious how you are handling your redesign, since we struggled in the beginning with how to handle the amount of data required to be input for a single task while also allowing the user to back out of any/all changes they had made if they wanted to. Is it as simple as saving it in session and breaking up the forms?
Please don't ever worry about providing too much information. As for me I am fascinated by these topics and so glad that I have stumbled upon your post. 
It lets you write server-side scripts with JS. Sort of like Python or Perl, but in a familiar JS syntax.
It seems I can't execute the code because of a mimetype issue and I only see a black output so I'm not sure what is supposed to happen... In any case there are several things you can do to improve the performance (just in order of appearance): * Line 11: sqrt is usually slow, try using memoization to cache the values and return faster in the distance function * Lines 19-21: Depending on the browser, its version and the precision you need you could replace Math.round for a bitwise operation. I once had to do this and I saw a good performance increase. * Line 117: I don't know how many children cube has but you could try caching the value of childs.length. Something like for(var i = 0, l = childs.length; i &lt; l; i++) * Line 181: You are creating an interval for each cube an that could have an impact. Timers are always tricky and there is nothing that is going to assure you the code executed is going to be executed on a screen refresh so probably you are wasting cycles for nothing. I would try to have a common timer manager that will update the cubes when needed using requestAnimationFrame. If your code is fast enough you will get 60fps and if it isn't at least you won't be doing extra updates that are never going to be visible. Probably there is more stuff that can be done but without making it run on my computer this is the best I can.
Hey, thanks for the brief overview. I've bookmarked this and I'll take a look at it a bit later today. I'll probably have some more questions for you later this evening!
latitude is -90 to +90 longitude is -180 to +180
Project based. Different projects demand different functionality. Learn ajax calls well. 90% of my time is spent making a 100% functional thing look nice. So little pretty effects when you hide a menu and making the colors appealing, making code more manageable. Just learn how to make a pretty website with lots of jquery ui stuff. Learn how to make datastructures and you are good. js is a easy language 
You should give a lot more code first.
I posted it [here](http://www.reddit.com/r/javascript/comments/1fh9r2/embarrassing_question_how_do_i_work_the/caa9ck7).
We can do nothing with this ... just post everything you have. 
Doesn't run for me on Chrome, errors out. WebGL (Three.js) would be more efficient. Obviously not everyone's browser will do that though.
Shit, my bad. I completely forgot the stuff outside the form. http://pastebin.ca/2387225
Is this some kind of elaborate joke?
Very cool! The old forgotten brackets have caught me out! Will definitely check this out, thanks for posting.
http://rsbweb.nih.gov/ij/ This is in java so it might not be relevant but I came across it not long ago and thought it was interesting. 
In production code, Function.length should not be used anyways. 
That article is 3 years old, which is ancient in terms of web stuff. Earlier this year I got a 6-fold speed boost in Chrome on a CPU-intensive task just by turning it on. When you use it you're allowing optimizations that are otherwise prevented by non-strict, bad language features.
here's how i'd do it: http://pastebin.com/8tcuvb2c
Microsoft was torturing Javascript developers for 10 years with IE6 - what do you expect? SOAP and SQL Server are also not very sexy. It's the oposite of websockets an mongo DB. And why do think a Javascript programmer should do design? Usability is ok, but graphic design is a different job. If you remove all the serverside things from your job specs you will find someone. If it's possible exclude ie6-ie8 and write that to your job specs. Add mobile platforms instead (if it's not WP8). 
Me and my team use javascript for everything, including server side code. * client side app? We use angular. * HTTP+JSON service? We use node.js+restify * Bookmarklet, browser extensions, or embeddable widget? We use pure JS. * Deployment to S3? Sometimes we use node.js, sometimes we use Python. * Full stack testing? We use phantomjs-node and selenium. * Web scraper? We use node.js+cheerio Javascript is no longer confined in just browsers. You can use it for so much more now. 
Saved for playing with later... Thank you! 
I went back to check this out (a bit later than expected, sorry), and the feature set seems very similar to Sentry, however Sentry lets me host my own server to send logs to (they also offer pricing plans like you do). Do you folks also have that option?
This didn't work for me i have AMD Athlon II x2 240, but it say 1 core. anyway thanks for sharing 
The snippet you have there from Google uses the new data collection script analytics.js, which you should be using. The code from H5BP is out of date. It won't hurt you to use it, but you'll just have to upgrade later if you do. You might as well upgrade now.
We need a new name for the current set of web standards - HTML 5 these are not. 
 var requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame; Don't forget to try standards requestAnimationFrame first. Even those that don't have it now will at some point, good to be forward compatible when possible.
Ah ok, thanks for the feedback, i'll update now. Cheers
IE10 supports unprefixed requestAnimationFrame so the line in the article would not support IE10. Firefox 23+, Chrome 24+, and Webkit nightlys also support unprefixed requestAnimationFrame in addition to the prefixed version. Support for the prefixed version may be dropped in the future in those browsers.
this link keeps crashing my browser ... on safari 6.0.3
Man something on your site is crashing mobile Safari on iOS 6. Load the page, start scrolling down and then crash. 
Why? That's exactly what "HTML5" is, a collection of these new JavaScript APIs, CSS3, new HTML syntax, web sockets, audio/video, web workers etc.
&gt;That's exactly what "HTML5" is No, it's not. Only geolocation is from HTML5.
This is bad, quite possibly the worst part is that it will appear to behave as expected right up until they try use a key like "length" in their *"associative"* Array.
They're setting it as an object. So when you do: var Blah = []; Blah["this is a string"] = "blah"; It's basically: Blah = { "this is a string": "blah" }; Arrays are object in Javascript. So you're basically creating a property and setting it. Please correct me if I'm wrong. [In JavaScript, objects and arrays are handled almost identically, because arrays are merely a special kind of Object. Both can have properties and methods.](http://msdn.microsoft.com/en-us/library/ie/89t1khd2%28v=vs.94%29.aspx) 
The visibility one worries me a little. I don't want ad networks knowing whether I've switched tabs or not.
For what it's worth (Think that I based this on something else seen last year), I use: window.requestAnimFrame = (function(){ return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function( callback ){ window.setTimeout(callback, 25); }; })();
Hello redit. OP here. I'm looking for feedback on this NPM module that I've made. (it works in the browser too) I feel like I covered good practices (thorough testing, linting, etc) Does anyone have feedback? What should I add to the readme? I know I'll use this module myself, but do you think there is any demand for something like this? I think the type safety is really good for development. For the next version I would like to add the option to disable the type checking (because it might break on mobile browsers) EDIT: Tested and working in IE7+, Chrome, FF, Safari, and Opera
I looked through the source a little bit, and one thing that sticks out at me is that you could use underscorejs to handle all of those type checking functions. I noticed that you don't have any dependencies in your package.json, which is fine, but the idea of npm is to do just one thing in your module and use other smaller modules to do it. Might be worth cruising around npm for awhile looking at similar module, and thinking about whether or not your module could benefit from whatever you find.
Before we criticize their code too much, it's worth finding out if it actually works. Add an alert and paste it into the console: var phone_book = new Array(); phone_book["sleepy"] = "(203) 555-1234"; phone_book["happy"] = "(203) 555-2345"; var happy_number = phone_book["happy"]; alert( happy_number ); By golly, it does work after all! But everyone knows you aren't supposed to use associative arrays in JavaScript. So what should we use instead? The best way to answer that is to ask: what kind of data are we working with here? Phone **numbers**. After all, "(203) 555-1234" is obviously a number. Maybe it's the number for directory assistance, or maybe it's a number you saw in a movie. It's certainly not an array. So the correct data type to use is an *associative number*: var phone_book = new Number(); // associative number phone_book["sleepy"] = "(203) 555-1234"; phone_book["happy"] = "(203) 555-2345"; var happy_number = phone_book["happy"]; alert( happy_number ); That's much better, isn't it? We can extend this principle to other data types such as dates. If you're working with several varieties of dates in a similar way, you should use an *associative date*: var date_book = new Date; // associative date date_book['Empress'] = 'soft and sweet'; date_book['Medjool'] = 'sweet and succulent'; date_book['Umelkhashab'] = 'bittersweet, hard white flesh'; var tasty_date = date_book['Medjool']; alert( tasty_date ); JavaScript is so much better when you use the correct data type for each purpose. &amp;nbsp; *(Edit: Please see discussion below if you are tempted to take any of this seriously!)*
The last one was sarcastic, right?
Please look up how requestAnimationFrame works.
Ok, thanks. The whole module is only 200 lines so I was trying to keep it lightweight. Looking into underscore is certainly a good suggestion though. (I think I covered all of the corner cases with desktop browsers, but underscore might handle that a little better on mobile) EDIT: Also, I suppose I could refactor jasmine in as a developer dependency. EDIT 2: Yep, it looks like underscore has all of the type checking I need. The only thing that I'll need on top of that type checking for the special types that I've added (any, defined, integer, realNumber)
It's a common design pattern. http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern Let's say you're making a game. You want a bunch of different things to happen when a level is finished loading, and you don't necessarily want all of these objects to have explicit pointers to each other. (and you don't want a god object either) You can make a "LEVEL_LOAD" event that all of those objects will subscribe to. Once the level is loaded, you can publish a "LEVEL_LOAD" event and all of the subscribers will be notified asynchronously. I'm certainly going to use this in a project that I've been working on for the better part of 6 months. Basically, by following this pattern your code can be loosely coupled. (that's a good thing) Edit: derp. Thanks!
Wait till you see my *associative boolean*! Why should booleans be limited to `true` and `false`?
If you think performance is really going to be a problem, why don't you just write your game from scratch? You can certainly use libraries for key parts. (I've used raphael.js a lot before, although you would probably want canvas instead of SVG graphics) Impact.js is pretty cool (http://impactjs.com/demos/physics/) and has really nice integration with Box2D, although if you're going to have 100 or so bullets on the screen at one time you probably won't want to be using Box2D.
...Wait. Was the whole post sarcastic? O.o 
Use binary operations whenever possible: instead of u*2, you can use u&lt;&lt;1; replace u*4 with u&lt;&lt;2. Warning, operator precedence may require brackets. convert rows/cols to int instead of float to avoid type conversion within the comparison: var cols = (stage.getWidth() / cube_width + 1)|0;´ Reuse the calculated points of the cube whenever possible. Since the number of faces of the cube are determined, use 3 variables instead of the array.
Everything is an object in Javascript. So this works regardless if it's ugly.
ah yes, the old "it isn't possible for you to dispute what you dont know" argument
As I see what you wrote is a bit complicated for me (the structure) but if you need a bit more realistic terrain, feel free to copy my code. it's not the greatest height-map but it's also highly configurable. [jsfiddle.net/Hkk8u/2/](http://jsfiddle.net/Hkk8u/2/) if you really want to make something cool read this: [pointillism-depicted](http://aldream.net/article/2013-05-22-pointillism-depicted)
Yes, you are missing that the output of that is locale-dependent :-)
Check out [this link](http://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/HTML5-APIs-and-related-technologies-by-Sergey-Mavrody.png/640px-HTML5-APIs-and-related-technologies-by-Sergey-Mavrody.png) it explains it better than I can. Appears the ones in this article are in draft which is what the article says anyway. 
Yeah... surely that's what you'd want?
What else were they going to call it? Web 3.0? As far as I'm concerned calling it HTML5 is not ideal, but at least all the new stuff is officially under one name, rather than "Web 2.0" which was just an unofficial mishmash of technologies that people decided to give a new name for but basically meant fancy AJAX site.
Didn't work for me either. It reported 2 cores, when I actually have 4.
Yes, thats correct. An array in JavaScript is an object that has additional methods and internal logic to act as an array, but it is still an object under the covers.
Great way to confuse people trying to learn something. This is a terrible article.
The reason why `f.length` or `f.name` are slow is not because they disable optimizations. They are slow because they are implemented in C++ as accessors and access to them always fall through into the runtime system https://code.google.com/p/v8/source/browse/branches/bleeding_edge/src/accessors.cc#527
You're one of those people who calls every tablet an iPad, aren't you?
Aha, good to know. Not read into V8 enough to know where abouts to look for these things just yet.
'Interrogating' arguments object in a complicated way requires materializing it. That disables optimizations of the function where arguments object is allocated.
not me. Contacted creator to notify him/her of this active feedback thread.
I am a js developer, and for me, the main thing is DON'T LIMIT YOURSELF. That means, make 25 different kinds of pages with different purposes and themes, and different applications and uses to mix together and see what you can create. Thats if you want to just mess with independently, if your talking about a career, you usually can go with different people who may Email you (if your name and skills are out on the web) about websites they want coded, and pay you. On the professional scale, you might apply to some company that developes alot of different stuff that uses JavaScript, that too pays. 
Chrome 29.0.x: * Audio: working * Visuals: black screen only. Firefox 24.0 * Audio: working * Visuals: working
window.onblur = letTheAdNetworkKnow
Off topic, but does anyone know or recommend any articles on the game mechanics behind shooters? I've always wondered if there's actual ai behind enemies or if it's just pre-scripted patterns.
Not sure if it'd be a valid use-case for your concerns, but using the bare object constructors (i.e. `Array`, `Number`, etc.) in your code might fail on cross-frame comparisons. [Here's a synopsis](http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/) that covers the details. Again, not sure if your code would be affected as I haven't tested, but something to keep in mind.
6.0.4 is working fine. Just a FYI for other Safari users.
You should probably stop using mozAudioData alone, please include support for webkitAudioData and AudioData for other clients.
This is spot on for the mechanics but dosent cover all the other bullshit like: Loading assets, Rendering Sprites, Playing audio that the OP might be looking for in selecting an engine.
Was the audio recorded in a bathroom stall in a bar?
Do you see the gamepad API anywhere? How about battery status or page visibility? HTML5 is done. It became a CR in December 2012. Stuff which came later is not part of HTML5. E.g. things like inline workers, XHR2, WebAudio (not to be confused with the crappy HTML5 audio stuff we got right now), WebRTC, flexbox, regions, selectors level 4, and so forth.
Just posted an article on this topic and why we started JSLogger: http://blog.jslogger.com/post/51973943237/client-side-js-errors-tracking-in-browser
It's going to be bitcoin mining while it's minimized ;)
Well I thought it was funny, even if no one else got it :)
I had the same idea recently but did't finish it. Typical me. Code: https://github.com/rogr/pulsar LIVE: http://rog.mx 
You're very right - I had never seen that. Seems much more efficient! And now it's incorporated.
Nice try, jslogger.com guy. ;)
A generic engine probably won't work that well since they aren't tuned for that kind of workload. It might be possible to reuse some stuff like asset loading, animation handling, or texture-font rendering though. It's very important to cut the number of collision checks down to something doable. Try using a grid. Keep track of the cells which are touched by each entity. When doing the collision tests, only test against those entities which are registered at the same cell(s). This drastically reduces the total number of tests which would be `n*(n-1)/2` otherwise. So, if there are 1000 entities, doing all the "handshakes" would mean 499,500 (half a million!) checks. That little bit of (linear) bookkeeping is quickly worth the trouble. Another simple way to reduce the number of checks are the game rules. E.g. an enemy ship can't collide with another enemy ship, an enemy bullet can't collide with a powerup/enemy/bullet, and so forth. If you keep all these things in separate lists (one for your bullets, one for their bullets, powerups, enemies, etc), it will be easy to skip a lot of nonsense. Test your bullets against the enemies, the enemy bullets against the player, the powerups against the player, etc. Anyhow, if the game is simple enough, you can do everything from scratch. E.g. this game were only around 500 lines of Dart: http://mbtic.com/games/fuzetsu About 50 of those 500 lines were used for the procedural graphics. There aren't any images.
What is Dart?
[Dart](http://www.dartlang.org/) is one of the [many languages]( https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS) which compile to JavaScript.
We're using errorception.com Tried qbaka.net before but it turned out buggy at times, and the authors weren't responsive. Errorception seems actively maintained and improving.
Thanks, do you know what their browser support is? Are you using it on a mobile deployment? I'm sort of assuming they're hooking into window.onerror as well and "phoning home" with that info. Do you know if this is how they work? Do you just drop a script tag of theirs in a template on your end (like google analytics)?
[r/forhire](http://reddit.com/r/forhire) You might want to take this post down and move it over there. 
oh, thanks! i didn't know that board existed
Glad I could help.
I'm not sure about the other mobile platforms but iOS doesn't process javascript at all in the background. Window.onblur doesn't even fire. You have to just have a poll that every 5 seconds or so, checks to see if more than 5 seconds has gone by. :\ Mobile development is like the new IE6, except instead of just one browser sucking, they're all different, and we have more tools to see how bad it really is :(
What? You mean the `Date` object wasn't meant to be used for keeping track of varieties of *edible dates*? Now I suppose you'll tell me that `"(203) 555-1234"` isn't really a number! &amp;nbsp; I don't have much of a future in stand-up comedy, do I? &amp;nbsp; OK, for anyone else who took my post seriously: Robert is right. Don't use an associative array, any more than you'd use an "associative number" or "associative date". Use an `Object` instead. Well, maybe not an `Object` either, but we'll get back to that. And what if anyone wonders, "Sure, I see that the associative number and date were just a stupid joke, but seriously, what's the actual problem with using an `Array` for an associative array? It does work, the name sounds good, and it will be more familiar to PHP programmers." There are a few problems, but here's one example. Imagine that you're using jQuery and you decide to use `$.each()` on your "associative array": var items = []; items['one'] = 'first'; items['two'] = 'second'; $.each( items, function( key, value ) { console.log( key, ':', value ); }); If you paste that into the Chrome console, all it prints is: [] So it never gets to the `console.log()` calls at all, and the `[]` is what it prints for the value of `items`. (The console prints the value of the last expression it evaluates, which in this case is the `$.each()` function call. And the return value from `$.each()` is its first parameter, `items`). What happened to the `one` and `two` elements? `$.each()` accepts either an array with numeric indices or an object with named properties, and since `items` is an `Array` it uses an array-style loop on the numeric indices - and there aren't any. Change `items` to an `Object`: var items = {}; items['one'] = 'first'; items['two'] = 'second'; $.each( items, function( key, value ) { console.log( key, ':', value ); }); and now it works as expected, printing: one : first two : second Object {one: "first", two: "second"} Now you can probably imagine a case where using an `Object` won't help you. What if you need to have an object property with a key called 'length'? var venue = { type: 'football field', width: '53.3 yards', length: '120 yards' }; $.each( venue, function( key, value ) { console.log( key, ':', value ); }); Hmm... Now it prints: Object {type: "football field", width: "53.3 yards", length: "120 yards"} So the console does print the expected value of `venue` at the end, but it missed the `console.log()` calls again, because the `.length` property tricked `$.each()` into treating `venue` as an empty array, just like the first case where we used an actual `Array`. Of course you could just not use `$.each()` - it's arguably a bad design for that function to accept either an `Array` or an `Object` and try to [duck-type](http://en.wikipedia.org/wiki/Duck_typing) its way into knowing which it is. And if you're dealing with objects and values you're defining in your own code, you can just avoid using a `length` property to prevent this particular confusion. But what if the property names come from user input? Now you're in trouble. They could use `length` or `hasOwnProperty` or all sorts of fun things. Here's a good article on the topic called [An Object is not a Hash](http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/), and a related [Hacker News discussion](https://news.ycombinator.com/item?id=4629544). In that discussion is a [quick and dirty (but somewhat tested) `Hash` object](https://news.ycombinator.com/item?id=4630332) that I wrote. It may be useful to anyone who needs a safer kind of "associative array" in JavaScript.
Detected 4 cores correctly on my aging amd phenom 9550. 30s is kind of a long time to get that data though. 
Thank you, I'll be here all week! :-)
Because words mean things.
Can you give an explanation of the problem this library is trying to solve?
Never optimize prematurely, and when you try and optimize, make sure that the changes actually make the code run faster or in a smaller footprint. (or whatever tradeoff you're going for)
All good suggestions. I'm on my phone right now, but these are all suggestions that I like. I've seen Travis before and I certainly agree that it is a 'seal of quality'.
[Sentry](https://getsentry.com/) You can host it [yourself](https://github.com/getsentry/sentry) or use their [hosted solution](https://www.getsentry.com/pricing/). There are clients for not just Javascript (Python, Ruby, C#, and more) - https://github.com/getsentry/
Any number of subscribers is allowed. I know, the documentation is really lacking. I'll fix it up within the week. Thanks for the suggestions. Edit: subscribers with the same event name but conflicting signatures will cause an error. Actually, I think that is a good thing that you would need to update the subscribers throughout the codebase if you change the signature. It's the same way in compiled languages, and if you're changing the signature chances are you should be changing the code as well.
I didn't think of that. I peeked at how underscore does type checking and it doesn't seem to have that problem. I'll probably switch to that.
Sweet, this saves me some time. 
Another vote for Sentry, it's amazing! 
The usecase I'm seeing is a library to help facilitate off handing raw data to the server without having to set up logic on the server to process this data. As an example, I need to conduct a survey to collect subjective data. I really don't know what i'm going to get so I'll just toss everything into the database and work on it after the survey closes. 
Okay. I see your reasoning here, but which "side" gets the error? The pub or the sub? I'd argue the publishing side should error out as it injected the "bad" data, but since the subscribers "dictate" the type that doesn't feel right to me. From the perspective of an API, I promise a certain kind of data, but suddenly everything fails because the first subscriber was misconfigured? Do I need to add a dummy subscriber to every publisher to force the correct types? I suppose I'd have less of a problem if both sides had to declare types. Also if there was a way to declare composite types or at least an "any" type, so I could subscribe("any", console.log).
check out theseus with brackets. Here a lil demovideo: http://www.youtube.com/watch?v=-J5LG2bFPMg
The library is a new take on an older project I had worked on: [github.com/scttnlsn/backbone.io](http://github.com/scttnlsn/backbone.io) It removes the dependency on Backbone.js and provides a more flexible and lower-level API. The intent is to be able to create "request handlers" on the server using Connect/Express-style middleware stacks. Rather than handling HTTP requests, though, the middleware stacks are executed in response to Socket.IO events. The event/request handlers have the ability to respond not just to the requesting client, but also any other connected clients. The most basic use case is syncing a collection of models across multiple clients but Data.IO is not limited to CRUD operations. Anywhere there's a need to synchronize state across multiple clients I think Data.IO could be beneficial. I'm a huge fan of building HTTP servers with Connect/Express and wanted to see how that sort of middleware pattern would translate to another sort of "transport" (Socket.IO in this case). Backbone.IO was that experiment and Data.IO is mostly just a refinement of the same idea.
The Audio Data API has been depreciated. You should be using the Web Audio API instead.
&gt; until we need to differentiate early HTML 5 APIs that are in widespread use, and newer ones that aren't You're essentially talking about browser compatibility and so where would you draw the line? Different projects have different browser requirements ... my projects are typically for intranets that can dictate browsers and we use the latest versions of Chrome/Firefox so whatever they chose might not be relevant to you. &gt; If I tell someone I want to start a new project and we're looking at using HTML 5 technologies - how on earth can they reach any reasonable conclusion on whether the browser support is in place for that? They can't. You need to specify the HTML5 technology and then reference CanIUse.com (or similar). This isn't a new problem ... CSS was partially implemented for years (e.g. ellipsis support was only recently added to Firefox, or CSS list numbering which is still kind of patchy) so saying "I'm using CSS 2.1" doesn't imply any level of browser support. 
&gt;&gt;Everything is an object in Javascript. That's not true. Primitives, like strings and numbers, in Javascript aren't objects. 1.property = "blah" You cannot do this in Javascript. In Ruby you can do this (I haven't code Ruby in forever). Of course the usual keywords, reserved words, applies where they're not objects either but I think that's a given in most languages.
&gt;1. You could greatly simplify it by accepting an array of URLs for the image src. These days, especially with CDNs and CMS, filenames aren't guaranteed. I'd like to keep the auto-generation if at all possible, just to make it easier for people implementing this, making sure they don't have to implement that themselves, but you're right, I should refactor it to allow both an array of urls and, failing that, grabbing images from a folder. &gt;2. `var imageTag = document.createElement("IMAGE");`, should be `var imageTag = document.createElement("img");` (line 98) Right, my mistake, I'll fix that promptly. Thanks! &gt;3. You do not want call to `requestAnimationFrame` in a timeout, **it is the timeout**. The reason I use a timeout there is so I can regulate the speed at which it redraws (following [this](http://skerit.com/en/programming/using-requestanimationframe-and-a-target-fps/) post). If you know of a more efficient way, please let me know! &gt;4. You do not need to add an `img` to the DOM for every frame. `new Image().src = filename;` is sufficient to start the request and "preload" the image. You could then change the `src` of one `img` element based on your position in the array of images in each animation frame. Truth be told, I didn't realize there was an `Image()` object in JS. Previously I had set the `src` of the element to the URL on the server, but that was terribly data intensive.
&gt;WhatWG HTML5 continues. It's just "HTML". There is no "5". HTML5 is done.
Regarding your tweets, I actually like Knockout quite a lot. Its source is compact, well annotated, and operates at a high level--I believe I said as such when I wrote about Knockout on my site. And you're right, you could use Knockout with Backbone. At this point we're getting down to a less easily stated problem with data-binding. The reason I attack Angular so much is that Angular is an incredible software project in terms of manpower, intelligent engineers, and momentum in developer mindshare--and yet it _still_ falls prey to the weaknesses of data-binding. That a thing with that much force behind it can be catastrophically flawed can (in my opinion) be traced to its very simple basis in data-binding. &gt;probably a lot of stuff right? Sure, but there are clearly upper limits to the human capacity to handle code. A sort of Dunbar's Number for LoC. Angular would be _great_ if you truly never had to read any of its source. See, the thing is, Angular has _wonderful_ documentation. People just don't know how to use it, because they don't understand that they pretty much need to also be familiar with angular.js to get a good grip with it. When I say 'magic' I don't mean something that can't be understood--obviously either one of us could create our own data-binding library. I'm implying something about the nature of that code as it grows: it creates the assurance of code that you don't have to care about because it's so good at abstraction it might as well be magic. Your browser's reflow? Magic. You and I don't care, and we don't have to. Bad magic is when we think we don't have to care, but we really do. 
Hi. So here is what I achieved - I used CSS3 transitions instead of canvas element. Still use 100% of my CPU, but is smooth. And use only 30% when I'm in another tab. http://jsfiddle.net/j7rbN/31/
Well in any case, this was never an issue. Only the character has collision detection, there are no items planned, and the character can't even fire bullets. 
We've been using [Rollbar](http://rollbar.com/) and I would recommend it.
Well, if you only want to check one thing vs one list, things will be of course a lot simpler. You do your 2000 (or so) checks and that's it.
Yeah you should submit a PR to cache that value
So this might be excessive questioning but would it help a lot if I first checked x and y to see if a collision is even possible, before doing a^2 + b^2 = c^2 ?
 Check out http://www.eclipse.org/orion
Does this solve the XDM problem (cross-domain)? How does it stack up to massive number of clients? Does it keep open connections, or is it similar to EasyXDM where clients are closed once a request is complete?
You can almost pick anything. Seriously. Most open source software desperately needs a makeover. Although their design sense is not bad, you might want to take a look at Diaspora and maybe you'll have some ideas to make it even better. BuddyCloud is another good one.
Google Analytics + throw an event on error. We also throw events for handled errors. 
We need you for etherdraw
You're an iPad.
yes
You know, at one point I was going to put a smiley face in there somewhere, and then I thought, "No, that would ruin the joke." But I guess the joke was on me, wasn't it! I need to work on my comedy skills... :-)
&gt; Primitives, like strings and numbers, in JavaScript aren't objects. That's true, but the example you gave doesn't tell the whole story: &gt; 1.property = "blah" That actually fails because of a *syntax* limitation, not because of the semantics involved. If you put parentheses around the number, or if you use `[]` notation instead of `.` for the property, then it parses and executes successfully: (1).property = "blah"; 1["property"] = "blah"; You can do this with booleans and strings too, and there you don't run into the syntax limitation: true.property = "blah"; "one".property = "blah"; Similarly, if you assign the number to a variable and then set the property on the variable, you avoid the syntax quirk and it does execute - even though the variable does hold the primitive value and not an object: var one = 1; one.property = "blah"; So what is this code doing? Some logging will give a clue: var one = 1; console.log( typeof one ); // 'number', not 'object' one.property = "blah"; console.log( typeof one ); // still 'number', WTF? console.log( one.property ); // 'undefined' - rats! When you set a property on a primitive value, JavaScript "boxes" the primitive, creating a temporary object of the corresponding type: boolean to `Boolean`, number to `Number`, and string to `String`. Then it sets the property on that temporary object. And then it deletes the temporary object, without changing any variable that held the primitive value. In the last example, the `one` variable is unaffected by all this - it is still the primitive value `1` after the assignment. This behavior doesn't seem to have any practical value - there's no way to do anything with that temporary object. I would be curious to hear from anyone who knows more about it and anything useful that it may enable.
Anything by Douglas Crockford. http://javascript.crockford.com/
[NodeBB](http://www.nodebb.org) is a Node.js forum software that uses Twitter Bootstrap as a base theme. We support one-click theme changes through the Bootswatch API, but the number of free themes is pretty dismal. A designer could help two projects at once by creating new and interesting Bootstrap themes (to be used for free). It's mostly just playing around with colour and fonts, but customising bootstrap can get as complicated as you want it to be... 
I've tried to [gather a few](https://github.com/bebraw/jswiki/wiki/Beginner%27s-Resources).
http://www.objectplayground.com is a geeky app that's in desperate need of design work, if you'd like something small to get your feet wet. (It's a tool for visualizing JavaScript object graphs.)
There's an immensely helpful article on [JavascriptIsSexy.com](http://javascriptissexy.com/how-to-learn-javascript-properly/) you can follow. It's a combination of several sources that will teach you very sound fundamentals is Javascript. I'm nearly finished with the last part of the advanced tutorial (also linked to in the afore-linked page.) I strongly recommend it.
You're right, of course. But I guess you didn't the joke?
I think [Eloquent JavaScript](http://eloquentjavascript.net/) is your best bet. I would actually shy away from the Crockford books--JS: The Good Parts is aimed at people who are experienced in another language, and JS: The Definitive Guide is probably too long for you to use as a learning text for something due Thursday.
http://superherojs.com/
And another vote for Sentry. Emails to devs when exceptions happen with stack trace as well. It is a great tool.
Please make Django-admin pretty, it really needs it.
[maildump](https://github.com/ThiefMaster/maildump) - a SMTPd for developers that shows all received mails in a webinterface. Since I suck at designing I took the layout/design from another application that does pretty much the same thing (but was written in Ruby, hence my rewrite in Python). I'd certainly appreciate someone taking some time to make an awesome new layout (well, the layout would probably be similar to the existing one since that's how a simple email client usually looks like) and maybe even a small project website.
http://yuiblog.com/crockford/ http://www.codecademy.com/tracks/javascript https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide http://www.manning.com/resig/ 
http://muscula.com Disclaimer, I used to be involved in the project, but haven't been for the last year.
that looks great, well done. 
I'm the dev behind the Kiwi IRC client web app, https://kiwiirc.com/ that's gaining traction at the moment (Actually coming to reddit any day now!) We would love to get the web app looking a lot more friendly for the people using it. It's open source and growing fast, aiming towards a fully responsive browser/tablet/mobile version of the same application. * https://github.com/prawnsalad/KiwiIRC * https://kiwiirc.com/client (demo)
That looks like it needs help. Cool project.
So if one is already using Backbone would you recommend Data.IO og Backbone.IO? I'm working on a browser game that will use WebSockets and Backbone, so I'm trying to get an overview of my options. Socket.IO is the only one I've tried out so far. What I didn't like about it is that it pretty much just allows you to send events back and forth where I'd prefer something more focused on data syncing.
100 bullets? [are you some kind of schoolboy?](http://i.imgur.com/KxQph.png)
TeamXLink.co.uk The main website has not been updated since 2004 and the tunnelling client uses a kludgy web ui circa 2008. Both could use a compete overhaul. 
So true. OTOH, there's already [django-suit](http://djangosuit.com/) and [grapelli](https://github.com/sehmaschine/django-grappelli).
http://www.whatwg.org/specs/web-apps/current-work/#is-this-html5? 1.2 Is this HTML5? In short: Yes. In more length: The term "HTML5" is widely used as a buzzword to refer to modern Web technologies, many of which (though by no means all) are developed at the WHATWG, in some cases in conjunction with the W3C and IETF.
The important bit: &gt;One of these parts is called "HTML5"; it is a forked subset of this specification (the HTML Living Standard). HTML5 is done.
I highly recommend you read JavaScript the definitive guide second, it assumes other programming knowledge. Once you have the basics down it becomes your bible.
HTML5 the markup language is done yes. "HTML5" in general though is a buzzword describing the modern Web technologies including some still in development. "HTML5" will literally live on as a living and growing spec for many years to come.
https://www.youtube.com/watch?v=XKYZSuKEq3U
~~i am not a programmer, but have to deal pretty extensively in basic javascript and have found the W3Schools tutorial to be a pretty good barebones reference guide: http://www.w3schools.com/js/~~ whoops, never mind. it was early and i didnt read the sidebar closely enough (/at all) 
Imo the best JS Ressource there is: https://developer.mozilla.org/en-US/docs/Web/JavaScript
Yea but none of them are really nice. I would like a nice skin for the original admin.
Thanks! We're getting close to beta quality, and /r/javascript will be one of the first places we plan to show it off to. Keep your eyes open for it! :-) 
Thanks :-) A bunch of developers have tried building Node.js forums in the past, but only as a testing ground for their first node project. As far as I know, a forum as feature complete as ours is is still unique in the Node ecosystem. Using Bootswatch is a really easy way to keep the forum from looking like "that cookie cutter bootstrap template", so the more themes (free ones, that is) there are out there, the better for everybody! 
I have being working on client-side CRM software using GData backend. I have open source database api https://bitbucket.org/ytkyaw/ydn-db/wiki/Home I am looking for UI/UX developer to build front-end using AngularJs. If happen a commercial success, we share the benefit. 
Personally, I would recommend Data.IO as it addresses a number of problems that arose with Backbone.IO (selectively notifying subset of clients, Socket.IO dependency injection, etc.). The effort required to hook a Backbone Collection/Model to Data.IO (via Backbone.sync) should be fairly straightforward. I've even been considering a rebuild of Backbone.IO on top of Data.IO. It's also important to note that both libraries are just small layers on top of Socket.IO so it doesn't preclude you from using plain old Socket.IO events where needed (in addition to the syncing provided by Data.IO or Backbone.IO).
I believe these questions are geared more toward Socket.IO (on which Data.IO is built)...there are lots of articles about configuring and scaling Socket.IO that are beyond the scope of Data.IO. In short, Socket.IO does work cross-domain and can be scaled to multiple servers/processes using Redis (perhaps other methods as well that I'm not aware of). Data.IO uses a single Socket.IO connection (per client) to sync data in both directions.
Why HTTPS? Firefox flags this as an untrusted site because it lacks a valid secure signature. No thanks.
Page crashed (chrome) on my machine with an Intel i7-3632QM CPU @ 2.20GHz
Oh god... that page is ugly. If I find the time i'll make a new stylesheet for that.
Thanks guys! I appreciate all the help, hopefully some other student as troubled as I can look back and use these resources.
Yes. Yes it is. :-) A ~~new~~ stylesheet would help a lot.
http://closureplease.com it's on github so you can just fork it and get straight to work then send a pull request
From the sidebar: http://w3fools.com/
I've sent you a coupon to get my book [JavaScript Allongé](http://leanpub.com/javascript-allonge) for free. I hope you find it helpful!
Okay so I made something very fast :-b But it's better. I'll hopefully find some more time soon :) Edit: You can look at it here http://i.imgur.com/AGRp4Wi.png. PS. I might change the HTML also, is that okay?
No... I'm so hipster, I'm linking [vanillajs](http://vanilla-js.com/)
Hi! I ~~might be~~ am very interested, how can I get in touch?
Correct. This is what I do, and it's still pretty fun... you can make some cool things this way.
These work okay if you've got slow moving objects, but you can run into trouble if you've got fast bullets for whatever reason, or can't guarantee small time deltas.
no-one has mentioned [StackOverflow](http://stackoverflow.com/questions/tagged/javascript) yet, you should get used to posting questions, reading them, contributing (if you can) etc. also there is a [javascript for beginners chatroom](http://chat.stackoverflow.com/rooms/17/javascript-for-beginners) on there if you feel courageous. 
You are welcome :)
Eloquent Javascript is an awesome start. Using the online version to actually write what they are teaching went a long way towards helping me learn the more complex stuff.
http://www.whatwg.org/specs/web-apps/current-work/#is-this-html5 The term "HTML5" is widely used as a buzzword to refer to modern Web technologies, many of which (though by no means all) are developed at the WHATWG, in some cases in conjunction with the W3C and IETF.
Not sure but i think it's disqus, i'll investigate, thanks for letting me know :)
Once you're more comfortable with the language itself, I highly recommend http://www.letscodejavascript.com/. You'll learn server-side and client-side development, more importantly you'll learn good development practices.
Thanks so much for the ideas guys! I'll look through each one and ill send you a message if it sounds like a good fit. Thanks again
I think both of these books are a waste of time for a beginner. (My opinion, of course.) Good Parts is just too "jedi" for you to get when you are just getting into the language. It's like telling a white belt in karate to "just be the grass". What the hell is he supposed to do with that? Definitive Guide is great, but it really is more of a reference. It goes so deep into each topic it introduces that there is no "flow". You go from 0 to 100 in each topic, step by step, one after another. And that's just not how people learn. Oh ... look. Here we are on *page 7*, introducing methods. points.dist = function() { var p1 = this[0]; var p2 = this[1]; var a = p2.x-p1.x; var b = p2.y-p1.y; return Math.sqrt(a*a + b*b); }; points.dist(); If you are just getting into the language, that will make your brain bleed. Eloquent Javascript is good and a nice level for beginners. JavascriptIsSexy.com is a bit higher level, but also excellent. learnstreet.com is better than codeacademy, and has more practical real-world projects to tackle. .. and any time a question comes up.. "I wonder what..." go directly to stackoverflow and type it in. If it's not already answered, ask it. You should constantly have a couple of questions floating on SO, as if you were asking for clarifications from a prof. That's how I did it anyways. (Sorry.. some of that was to you .. some was to OP)
Object oriented JavaScript by Stoyan Stefanov was one of the best introductory books I've ever read. 
Both of those are true, but that doesn't mean his books are the best for the OP's current situation.
would you read.... "airplane controls: the good parts"? 
I like http://www.javascriptkit.com/jsref/ and http://www.codingforums.com/
This, I never really "got" javascript until I read/watched Crockford material. He's got an amazing course in http://frontendmasters.com/
You can publish additional themes for frameworks like [bootstrap](http://twitter.github.io/bootstrap/) and [jquery ui](http://jqueryui.com/themeroller/).Anything extra on top of bootstrap will be useful to the community. Check http://bootswatch.com/ and http://fortawesome.github.io/Font-Awesome/
Maybe a silly question, but since all your backbone classes are in one long file, why do you use AMD/require.js?
That's for your benefit, so that you can integrate it into your website along side your other modules, rather than it dumping itself all over your window object.
Also to keep track of the 11 dependencies (see line 15 in converse.js)
I'm just curious and somewhat new to AMD. Is there a way that you can define each converse.js module separately, then have a build process which generates a version for people to use in their applications? It would still make sense for the built version to still be AMD-able when including it in applications, is that easily doable with require?
If I was looking for a book that helped pilots "extensively in learning" flight controls, then yes I would.
Already much better! Thanks. Changing the HTML is perfectly fine. Everything's on GitHub, so you can either open a pull request, or just send me the file(s) directly if you're not sure how to do that.
No...all it does is teach you how to write mundane code that cant be broken by stupid people fiddling with it. It kills creativity and inovation.
It's called a [ternary operator](http://en.wikipedia.org/wiki/%3F:) It's essentially just a shorter way to do inline if statements
It's called a [ternary operator](http://msdn.microsoft.com/en-us/library/ie/be21c7hw%28v=vs.94%29.aspx) and is basically an in-line way of doing an if/else.
This is called the ternary conditional. condition ? happensOnTrue : happensOnFalse; &lt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&gt;
It is called "Ternary Operator" or "Conditional Operator" (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator). var result = &lt;condition&gt; ? &lt;true-case&gt; : &lt;false-case&gt; is roughly equivalent to if (&lt;condition&gt;) { var result = &lt;true-case&gt;; } else { var result = &lt;false-case&gt;; }
My absolute favorite programming tool ... ever.
Well then, it's not a bad job at all!
jQuery always returns a jQuery object. This object has a bunch of properties defined on it as defined in the [jQuery API](http://api.jquery.com/). You can access object properties by their key, which is just the property name in the object. The 'hide', 'show', 'addClass', 'removeClass' are all property keys defined in the jQuery object. You can access properties using a string value for the key as ['key'] or just using .key. $(id).find('.previous')[index == 0 ? 'hide' : 'show']() This will turn into $(id).find('.previous')['hide']() when $index == 0, or just simply $(id).find('.previous').hide() jQuery has a function called [toggleClass](http://api.jquery.com/toggleClass/#toggleClass-className-switch) which can be used to simplify this as $(id).find('.previous').toggleClass('active', !(index == 0)); Sorry if my explanation isn't that great. I'm currently at work taking some what of a lunch. I hope it helps.
Hi, I'm working on a file manager interface for node.js (to be released with an MIT license) and could do with a few icons. Fairly normal things, like open and closed directories within the same theming in particular. Work done as vector graphics would be the best by far because they can scale well and are more easily editable in some cases.
ah, well thats a red face. as i said, i am not a programmer so i never really had to go beyond its basic tables of 'this is what &amp;&amp; means or || means'. thanks for the heads up. 
By each converse.js module I think he means separating things like: converse.Messages converse.ChatBox converse.ChatBoxView converse.ControlBoxView etc, into AMD modules. 
&gt; and it would probably be more readable if it was a normal if/else. Seriously. Love me some ternary operators, but when using them you always need to be cognizant of the point where they start to become an unreadable mess. From that point on you're just being cute.
Some of his best talks can be found on YUI Theater's ['Crockford on JavaScript' playlist](http://www.youtube.com/playlist?list=PL7664379246A246CB).
&gt; credited with the creation of JSON. I worked with him at Yahoo, and he always claims he didn't "create" it, he just "discovered" it. I always thought that was an interesting distinction.
I wrote a [blog post](http://derek.io/blog/2011/learning-javascript/) about this very subject a few years back. If you are looking for books: &gt; I highly recommend Eloquent JavaScript to start, because it’s a great book, and it’s free! After that, check out a few other of my favorites; The Good Parts, High Performance JavaScript, and Pro JavaScript Techniques. You can buy them all used off of Amazon for under $15 each.
From what I've seen, Greensock is a very nice library with superior performance and lots of features. It's just too bad that it's not open source, so I'd have to tend to agree with the sentiment. (And no, just because you can see the source and there's no fee charged for non-commercial use does not mean it's Open Source. See [clause 6 of the Open Source Definition](http://opensource.org/osd-annotated).) 
While a handy tool - I've also seen it overly abused. sure, var x = (y == z) ? bill : bob; Is one thing, but I've seen people nest a crazy amount of crap (x == z) ? ((y == z) ? a : b) : (someFunc(z) ? : doX() : doY()) ; and all sense of readability and maintainability get lost. Can be handy, and I like them also - just annoys me when I see the abuse of it for the sake of being 'clever' instead of 'readable and understandable'. When people start to essentially re-create a switch statement out of a ternary operator .. it's just /facepalm 
Great article. I also recently discovered a significant performance discrepency between isNaN(x) and x !== x. I still wonder why these things aren't adopted directly into the underlying engine (e.g. V8).
I see someone gets where I'm coming from. 
do you happen to know why it's only 'roughly' equivalent? 
Hello all. OP again. I've significantly updated the readme documentation, and I've reworked my type checking algorithms. I'm pretty happy with how this turned out.
good stuff, reusing array and object properties were the two sections I found the most relevant to my coding habits. 
Would that be a rule specifically for /u/GeekAmbassador ? On the plus side, he's not trying to be sneaky about it, and folks here seem to think GSAP has technical merits. On the negative side, he may well benefit financially from the traffic his posts generate here, which, when coupled with his account existing apparently solely to promote GSAP, certainly feels a bit spammy. I don't think it's a nuisance yet, but if it is, we'd probably want to have a subreddit rule that encompass the general behaviors we want to discourage rather than singling out one product/account. 
Looks great, I'll definitely try this out. Also [Junction](https://github.com/jaredhanson/junction) is fantastic if you want to use XMPP in Node.js (eg. for XMPP chat bots) 
I have to wonder if some of these tests are false positives for specific methods. For instance the eval() example could be that the JIT or cache just doesn't re-eval each and every loop. Single/low count calls could very well be using more resources and a "dumb" loop to test ops/sec could be triggering Chrome et al to cache results. If you made them dynamic strings the results may be reversed.
I would like to know how they conducted those benchmarks. I frequently see people spouting flawed tests, particularly about string concatenation. Let's put this to rest right now. * Enter a large amount of CSS code into the input of the following app * Execute beautification * Click the "Beautify Report" tab to see execution times String concat - http://prettydiff.com/index1.php?m=beautify&amp;l=css Array.push - http://prettydiff.com/index.php?m=beautify&amp;l=css The only difference between the code of these test samples can be found in the "cleanCSS__cleanAsync" function of the prettydiff.js and prettydiff1.js JavaScript files respectively. You can diff these files to verify the differences in fact, but if you are going to perform the diff in Pretty Diff be sure to change the language setting from "CSS" to either "Auto Detect" or "JavaScript". Why is string concat slower? The answer is string operations. When string operations are performed they are performed upon the entirety of a given string. If a fragment of a large final string resides as in index of an array operations can be performed upon that smaller fragment far faster. The length of an operation upon a string is directly proportional to the length of the string, and if such operations exist in a loop there exists an exponential growth curve. To make things less obvious there is a performance cost to the array join method. This performance is still minor, but is measurably significant. The cost of the join method likely increases as the number of indexes attributed to an array increases and this performance hit is likely far greater than any single string concatenation operation. The primary difference is that for building large strings the join method need only be executed once instead for every segment. These observations open some interesting possibilities: * With incredibly small operations string concatenation will likely always be faster than array push, and the threshold for crossover will likely vary wildly by interpreter and version. * String concatenation will represent slow exponential growth while array push will represent near linear performance growth. This means that once a threshold is crossed string concatenation will always cost more to execute and that execution will increase substantially more than array push thereby representing a progressively increasing performance gap. Here are some test results from my local computer: - 396666 character length output - * Firefox 21 with array push - 1.181 seconds * Firefox 21 with string concat - 9.157 seconds * Chome 27 with array push - 0.447 seconds * Chome 27 with string concat - 13.081 seconds - 793338 character length output - * Firefox 21 with array push - 2.374 seconds * Firefox 21 with string concat - 37.848 seconds * Chome 27 with array push - 0.957 seconds * Chome 27 with string concat - timed out From these numbers we can conclude that by doubling the string produces a near doubling of execution time for array push, which suggests linear performance. Looking at the Firefox numbers doubling the code to output roughly quadrupled execution time for string concat, which suggests exponential growth. We can safely presume the execution gaps will continue to grow as the output becomes longer and the growth of this execution gap will proportionally accelerate. An interesting side observation is that in the optimized tests Chrome appeared more than twice as fast as Firefox and yet Firefox dominated Chome in string concat operations. This may suggest Firefox has superior optimizations in place for string concatenation operations. In my opinion this test is pretty conclusive in that string concatenation is extremely slower than array push. This test is simple, verifiable, open to reproduction, and open to peer review. If this test is gospel on the subject then why do so many other tests get this wrong? The blog post in the subject of this thread shows more than opposite conclusions, for instance. I believe there are two reasons why results on this, and similar experiments, are so severely flawed. I am blessed with having the opportunity to be the A/B test guy at Travelocity for a year. When you test professionally and that is your full time bread and butter you learn a lot. In that line of work the only things that matter are the scientific method and verifiability of findings. You have to be pretty confident about why code works in certain ways in order to sufficiently optimize your test code enough to prevent biased interference during the experiments. You also have to know how to account for behavior of users, potential behavior, and side effects thereof. The behavior and expectation pieces of this puzzle was just as important as the coding piece when designing many of these experiments, but far more challenging to understand when all you have is traffic to contend with. As a result you have to learn which experimentation methods are valid and why they are more valid than other methods, which is not as simple a determination as it sounds. Secondly, I just finished reading "The Logic of Failure" by Dietrich Dorner. Based upon experimentation many individuals, more than average, cannot and will not account for time lapsed results or exponential growth considerations. Furthermore, it is more common than average for individuals to streamline complexity into linear though processes with unforeseen catastrophic results. There was some data that suggests business executives were far better prepared to contend with complexity and planning considerations in this manner when compared to college students, but that data was too limited to be conclusive. The test above is clearly representative of an exponential consideration and provides a real life application scenario to account for complexity. I have frequently seen people in the past attempt to make an assertion on this matter using JSPerf. It is **very hard** to get this kind of experiment right using JSPerf. The whole point of JSPerf is to run a test sample as many times as possible in a given duration and compare the frequency of executions to a difference sample churned in the same duration. The frequency of execution in my provided test criteria is 1, which means I run an application once with regard for limitations of duration. JSPerf is a really nice platform but we have to keep in mind it is intended for linear operations only. **EDIT** Speaking to qualified testing here is a code example that shows string concat to be far faster than array push: http://pastebin.com/Zrwn8WZy The problem here is that this test represents something not practically exercised, which makes the numbers generated from such a test equally pointless. If, for example, you knew exactly what the value of a string must be you would not bother to build it dynamically in a million interval loop. It appears modern JIT engines are optimized to append strings quickly, but other operations upon strings do not appear equally optimized as the test at the top of this comment illustrates. This is an example of not accounting for complexity and development in accordance with limited contextual considerations could represent catastrophic failure that only becomes painfully clear at some future moment. To be more specific there are no decision points within the loops of that test, which means the output string is not really dynamic. These are the kinds of things you really need to consider when running an experiment: "Is this something that somebody will use or is currently in use?". In order for a test to have any merit you have to consider the behaviors that underlie a given subject. If you can ask yourself if the code in a test is something you or somebody else would actually use in a real production project then you are probably off to a good start. **Second EDIT** The cause for the dramatic differences in the PrettyDiff test are due to single regular expression operation. When the regular expression is removed though string concat and array push reach a computational parity using that 793338 character string, which is still in conflicted to the results of the limited test at the pastebin address. This is why it is important to factor complexity into the test cases and not test in a vacuum.
It's only roughly equivalent because one is a statement and the other is an expression. An expression has a value it evaluates to; a statement does not. A statement can have other statements inside it; an expression can only have other expressions inside it. For example, you can take this code: var value; if( a ) { value = b; } else { value = c; } foo( value ); and assuming you don't really care about that `value` variable but it was just a temp variable, you can express it more simply like this: foo( a ? b : c ); These two pieces of code are "roughly" equivalent in the sense that they do exactly the same thing except that one creates an extra variable in the process. OTOH, if you need to put another statement in the middle of things, you can't do that in a conditional expression or any expression. But the if/else statement lets you put other statements in it, for example: var value; if( a ) { // I want to stop here in the debugger, but not in the "else" case debugger; value = b; } else { value = c; } foo( value ); You wouldn't be able to put that `debugger;` statement directly inside a conditional expression. Of course you could work around that problem if you had to by calling a function in the expression: function stop() { debugger; } foo( a ? ( stop(), b ) : c ); Typically at that point you'd start to think about switching to a conditional statement instead of a conditional expression, but this kind of function trick can be useful for debugging or when you want to avoid modifying the original code more than necessary.
Thanks for the Junction link, I've actually been wondering about this last night. I've got an idea of something I'd like to build and Node.js seems like the right fit.
Thanks! /u/pigmerlin has also taken a shot at it, so I created this GitHub issue so you can coordinate: https://github.com/jamesshore/object_playground/issues/1
Ternary operator is an **if expression**, as it evaluates to a single value unlike if statements.
Highly doubt it, it should never resort to the programming language of choice by the developer, but the right language for the job, that said JavaScript is highly misunderstood especially by Java developers who see syntax that looks familiar but acts differently from what they expect, forgetting the fact that it is a different language which unfortunately causes a lot (not all) of its bad rep.
&gt; While Dart has full, native support in only Google's own Chrome browser, it does accommodate other browsers. AFAIK this wrong. There is a special build http://www.dartlang.org/tools/dartium/ but currently thats it.
Dart is greatest thing since sliced bread for Java developers who cannot be bothered to learn lexical JavaScript. If Dart is the magnate that pulls this incompetent trash out of JavaScript then I love it too.
Hi, thanks for the code. Yes, 2ms would run like crazy. From what I understand from the code, it is cycling through the *document.getElementById('active').children*, I assume it's because the input is hidden, and the rest is used for reseting the timer on *mouseenter* and *mouseleave*? How is it selecting each label after the timer? [http://jsfiddle.net/prAgn/](http://jsfiddle.net/prAgn/)
&gt;Dart is greatest thing since sliced bread for Java developers who cannot be bothered to learn *that JavaScript is not, nor has ever been related to Java*. FTFY That this shit still happens boggles the mind. If a Java developer doesn't know this by now makes me think they're a poor excuse for a developer. I don't think ADA is Pascal, even though they are syntactically very similar. I learned that *1 day* into writing in ADA. What the fuck is these guys' problem? 
I like the way you have done this, I might copy the general idea in my own pubsub library. But one thing I would do is change who decides how the message is defined. I don't like that it is the subscriber who decides, since you can have multiple subscribers to the same event. If these subscribers are defined differently then things wont work. If instead the event is defined independently from the subscriber and publisher, then you can check each publisher.
Javascript can only be optimized so much because of its lack of types. Dart tries to address that. End of story. It just so happens that strongly typed languages tend to end up looking a lot like Java.
Many (Most?) Java programmers already know JavaScript. JS is kind of ubiquitous and Java tends to be used as a backend for web based applications.
I've been working with JavaScript professionally for well over 10 years...I would still say I don't know it (which is to say I am still regularly surprised by it and I cringe whenever I have to debug someone else's code -- or older code of my own) so I can agree with you there.
I wish people wouldn't just call render on a change. It's much more efficient to use the render method to setup the dom and then setup some binding between data and DOM
I have found GWT web apps to be pretty unresponsive on mobile browsers. This 3.0 update cannot come fast enough. 
I'm not sure how "Dispatching events among all views" is working, tried running the code in console and nothing. Did you mean to do something like view1.eventAggregator.trigger and view2.eventAggregator.on ? I prefer to use a mediator when communicating between views though
It is ridiculous that they have pushed this as far and as hard as they have. For a language that is supposed to be a faster JavaScript dart is pretty in unimpressive. It is still a scripting language with weak typing and automatic memory management. I don't care what syntax you put on top of it, but there is no way that you can optimize dart enough to make it worth switching. The most frustrating thing about this whole fiasco is that the dart developers have been very vague about what features specifically make it easier to optimize dart as opposed to JS. As far as I can tell, the only thing special about dart right now is that google is burning a lot of money and personnel on it (and has consequently slacked off on improving v8).
Fair point, especially as this change only results in a simple flag being displayed or not in the DOM. I'll look into refining this in a later post. Thanks for the feedback
You're right example was wrong, it's "view2.eventAggregator.on" ... I've updated blog post. Thanks. 
Why down-votes? Please tell me what's wrong.
I have to disagree. A lot of "stupid people" never learn the proper way to use languages and that leads to sub par products. Having an extensive knowledge of a languages specifications is certainly not directly related to a lack of creativity and innovation. 
Looks awesome, if I was in Europe I'd definitely make an effort to attend.
In that case I'm not sure GWT Is a viable solution. In my experience as a user is irritatingly slowing on mobile 
It's different from browser support. Dartium runs Dart without converting to JS.
In some ways Dart is an experiment in designing a dynamic language that current VM technology can maximally optimize. For example, one thing that makes optimization easier is the objects in dart cannot have new properties added on the fly. That means the VM can choose efficient representation for objects early without having to worry that some bozo is going to start adding properties at runtime and break all of its assumptions. I would at least take a look at the resumes of the lead engineers on Dart for dismissing the project as fool's errand.
I'm not dismissing the technical chops of the team working on Dart (and I have the highest respect for them), I am more questioning why Google continues to think that it is strategically a good idea to commit those guys to that project.
Very useful, thanks!
Could be a lot of reasons, don't take it personally. But, I agree that if you downvote you should try and leave some constructive criticism. Some reasons why it _might_ have been downvoted: * **Backbone.** Regardless of how great it might be, some people are tired of hearing about it, and they may not like that /r/javascript sometimes looks more like it should be named /r/backbone or something. In other words, there has been a _lot_ of BB posts here in the past year, and for those that don't use BB, they may be tired of seeing posts about it. * **The title.** The title really doesn't give us much info, and some may even see it as inaccurate. For instance, when I think of "extending Backbone", I think of projects like `Backbone.Marionette`, which is an actual extension to the framework. I think the title would've been more accurate as _"Backbone tips, tricks, and utility functions"_ or something that more accurately portrays the content.
Oh! I'm currently using the peer.js hosted api. They basically run the peer servers. They just give you an api key. http://peerjs.com/peerserver
Ahh! That makes a hell of a lot more sense now. I was trying to host my own peerserver on a local node.js install.
I'd rather move onto new/interesting projects - not be stuck in a maintenance hell that I created for myself ;)
I'm just getting into website development. I wan't to be able to build a basic website for a class project. I was hoping someone could give a review of codeacademy, or something better. 
Keep in mind, Dart is currently on version 0.41. The article says they will release v1 "soon". I suspect the core breaking changes will occur less frequently. What issues did you run into with the package manager?
&gt;Designers regularly contribute React code with JSX This is the bit I'd like to know more about. From the examples of jsx the html is mixed in to the render method with calls to functions that live in the same file. This is great for people who update the DOM structure and also code but I'm not sure I know many designers who would be comfortable editing a file that contains code. Also I'm not sure how comfortable coders would be to allow designers to change and edit code... That's what I like about AngularJS, you can write the directives for designers to use and they just deal with the DOM and some hooks. I wish that https://github.com/Droppe/Lu was still actively developed - it looked like a great way of giving interactive hooks that designers could use. I still don't think anyone has cracked how to use templates yet, so thumbs up for the different approach.
This is insane. Google is delusional if they think this will gain adoption among anyone other than a few neck-beards at Google headquarters running experimental Chrome builds. The web does NOT need another new language, or any other kind of daring innovation, for that matter. It sickens me that someone would have the vision to challenge the status quo by re-envisioning things I've built habits on. And then have the stupidity to try to go build that vision. I mean, I have months (months!) invested in learning JavaScript, and the existence of Dart threatens all of that hard work. Can't we just stop all this progress nonsense and stay the same forever?
Personally, if I wanted people to visit my project, on say, freenode, I'd much rather them visit the first party web client @ webchat.freenode.net.
Anything 0.* should change a lot. That's the point of developing it. 
One of the things we encourage here at FB &amp; Instagram is for designers to get their hands dirty. We regularly have designers who build mockups with HTML/JS/CSS, or will build an iPhone/Android app instead of using something like Quartz Composer. So much of product design is how it feels to actually use the product. Maybe that shadow looks perfect in the exact situation you have in your mockup, but once your product is used in a different situation it looks bad. You don't know this until you use it. So some of these designers then write the code for shipping products. Since all code is reviewed, this really has never been a problem. In fact, in my last project we used it as an opportunity to teach designers to be better coders. We now have more designers who can write JavaScript and can help us move faster. It's a win for everybody. Coming back to React… the best part about React in this regard is that since we almost always use it with the JSX syntax, it looks and behaves almost exactly like HTML. You can uses classes. It's not a foreign concept for coding designers. Angular and other frameworks are similar in this way. There's nothing stopping a designer from going in and modifying the directives, but maybe the structure of React components makes that step easier? I can't really say!
That is not accurate. As far as loose typing and compilation is concerned the JIT engines infer types at assignment time and compile the code as such. The problem then is type recasting where a variable is assigned one type and later assigned to a different type. Don't do that and you will be just fine.
It is not just that. There are many Java developers who know that JavaScript is not Java and still do stupid shit by over using "new" and "this" because in their perspective OOP is the only way to program.
I bought this for longer than I should have. Well played. 
Of course it is not an associative array and the people at webmonkey.com are obviously doing it wrong but that's not the point. OP is implying that webmonkey guys didn't check their code before posting it and if they did they'd see that their code doesn't work. But the code does work, it's bad and it smells but it does in fact work and if OP checked the code he'd see that. Of course we can only assume that that's what OP was getting at, as he obviously didn't check his title before posting here, which in turn makes the joke doubly funny. PS, I think you meant to say that JavaScript array is an instance of Object (or that it has Object at the end of its prototype chain), not the prototype of Object.
I can't wait to write Java in the browser! Yay!
Efficient, but less clear conceptually. In most cases a full render won't be a performance problem. Better to focus on making each View tight and avoiding subview re-renders, and only then optimize for rapidly changing data. 
&gt;React doesn't use templates. Uh huh. Your javascript is becoming hybrid code/template files. I don't think the author understands general HTML templating, based on the following: &gt;These templates dictate the full set of abstractions that you are allowed to use to build your UI. No, templates are a stamp, a set of one-way data channels that javascript uses to print to the DOM. Javascript has a "full set of abstractions," and HTML is a simple markup language. That's what it's for, how it was 'designed', and where its (limited) strengths lie. If by "dictate the full set of abstractions that you are allowed to use," you mean "Templates are confined to standard html tags," then sure, traditional templating lacks a full set of abstractions. Q: Does React's inlined JSX allow for more than standard html tags? If so, then I have the same violent objections I have for Angular: extending HTML is a bizarre and silly idea. If not, then I don't see the point of this criticism of traditional templating. Your templates are in the javascript, but they're still there. 
Yes. If you write everything just right, you can infer types or scan types after the fact and optimize the code pretty close to the way statically typed code is optimized. But even that interpretation has significant overhead unless you severely limit what you can do (a la asm.js). No matter what, you are still struggling to get to a point that is the natural state of existence for statically typed code.
These are fantastic
Dart code runs in other browsers. That is indeed "accommodating".
why object to extending html tags? They're a great abstraction, especially since we're now building web applications and not web pages. Also we're getting web components put in standards which is exactly the same as extending HTML so it can't just be because they're not standard...
This is amazing, I've begun work on an HTML5 game from scratch myself, and this will be great to pull ideas from.
So it's great for teams where the designers can also code (or have the time to code). I've worked in a couple of startups that have had only a single developer but I can see how this would work for larger teams which have abilities across both design and development - although the templating and code are still a bit mixed so although it may help with faster and easier changes I can see how this could end up very messy if not handled correctly. Are there any guidelines and best practices that are used to stop the logic getting intermingled? such as only declare elements in the render function, or only have a certain amount of logic in the render?
Standards are documents, not implementations. Look at all the HTML5 'specs' for hopeful technologies that may or may not come to pass. Personally I find web components distasteful. We don't want to be coding in HTML a majority of the time. 
/u/steilpass was right. Google Chrome does not have a native Dart VM, it can only run dart compiled to javascript. There's dartium which is a chromium build compiled with a dart vm, and I'm sure that soon after the 1.0 release of dart, standard chrome will get a dart vm. That's why I didn't directly reply to /u/steilpass
I really liked the architecture post! Good job there.
&gt; JavaScript wasn't part of the web at first either. That was 18 years ago, and JavaScript's path towards becoming a W3C recommendation is certainly not something any aspiring standards should take. We're waaay past the point where shoving incomplete and non-standard technologies inside of browsers is an acceptable practice. I have zero problem with Google working on Dart. They can spend their resources however they like. But until it becomes standardized and recommended by Google, Mozilla, Microsoft, Apple, and everyone else involved with Web standards, it shouldn't be shipped in any browser, including Chrome. That will take time (if it ever happens), and is certainly not "eminent" as you suggested. Apple has already [rejected it](https://lists.webkit.org/pipermail/webkit-dev/2011-December/018813.html), Microsoft [seems uninterested](http://www.typescriptlang.org/), and Eich stated "I don't think Dart is going to be natively supported ever in other browsers" ([source](http://www.infoworld.com/d/application-development/what-javascripts-inventor-really-thinks-about-google-dart-185045)). Dart may be the best thing ever, but it's too politicized to have any realistic shot at becoming part of the Web.
I concur with another person that you're not really extending backbone itself, so much as you are adding some very useful models (if that is the right word) to it. I've bookmarked it for future use when I get the pleasure of developing with backbone again
I'd say React is not just great for teams, but definitely individuals as well A couple things I've found helpful: * helper functions for building parts, eg if my component returns a `&lt;ul&gt;`, map over your data with a helper function that returns a `&lt;li&gt;` * or even, make another component that returns a `&lt;li&gt;` (sometimes it's worth it, other times not). * same holds for other chunks of your render * pull some logic out into a helper function (`this._getHeader` returns a `&lt;div&gt;` if this.props.headerValue, otherwise, it's null) At FB, we've mostly fallen into the pattern of breaking components into their discrete parts to make each individual part really easy to understand and modify.
Very nice and well written would love to see more
http://blog.angularjs.org/2012/06/doubleclick-super-powered-by-angularjs.html you may not be able to see the app and last time I used DART was years ago, but it's a proper web application. Why would you care if Google continues to back it? the idea is eventually it should have a strong enough open source community that the community is what takes over. Also Angular is based on web technologies that are in the pipeline, so it should actually get smaller as time goes on rather than get more complicated. You'll find you do write less code, and it's easier if you do your dependency injection properly. If you don't handle your code organization correctly then any framework will be difficult, at least Angular gives you DI and sets up tests, names etc for you off the bat rather than having to go in and fix it later.
&gt; you may not be able to see the app... And I couldn't, which is my point. I'm tired of the press releases. Let's see the apps.
&gt;JavaScript's path towards becoming a W3C recommendation is certainly not something any aspiring standards should take. What is the alternative? How can something become standard without being used? And how can a web technology be used without being in a browser? It will be shipped with Chrome (I'd bet a month of Reddit Gold that it will happen within a year). The other's might be tricky, politically, but it will likely come about as plugins (either a DartVM plugin directly or Dart --&gt; JavaScript plugin) or some tool that will allow Dart scripts to drop to JavaScript with very little added work by a dev. Once there is enough penetration Google will act like they are giving something away by offering Dart to the community as an independent project. Now, the saving grace for JavaScript, and the way that this scenario does not come to pass is this; there are only so many apps that will need that kind of speed. If no one builds anything compelling with Dart it will die on the vine. If 98% of the apps can run just fine on JavaScript and people are only bugged to download a plugin on the web version of Battlefield 3 or something it will not be enough. Google would have to require (or strongly suggest) it for something like YouTube, and there needs to be a tangible benefit in doing so, for it to get enough penetration to cause some of these entrenched parties to take notice. If not, Dart is dead and will end up Just Another Experiment on Google's scrapheap.
Buddy, we use it for everything. Starting from the webapp going all the way to our mobileapp. It's really fast and reliable, and up to some point also easy. It's better than any of the competitors (Backbonejs, Ember, you name it.) in my opinion. 
Got a link?
This is awesome. And your code is very clean! I look forward to more.
[@03:34](http://vimeo.com/6137066)
It is not a hoax, assuming you're serious about that. It's opinionated, has a steep learning curve, is just starting to get wide adoption, and has a perhaps overly enthusiastic development team hyping it. (The homepage calls it the "Superheroic JavaScript MVW Framework"). Thus, sometimes people have a negative initial reaction to it. But definitely not a hoax.
&gt; 2) PS3 Youtube app. That's potentially interesting, but is not on the web, and might be only a simplistic app. Again, I haven't found a link to the app itself, nor seen a review from anyone else. False. https://www.youtube.com/tv#/browse
Cool, thank you. 
Have you used Rust? It's the same idea (it's on version 0.6). Chances are code written one month won't compile with rustc the next month. But that's okay, because it means progress is being made on the language before it hits 1.0. People shouldn't expect any sort of stability until it hits 1.0. 
**Dart:** Dart as JS replacement will likely follow the long line of other platforms that failed to achieve that same business goal: VBScript, Java applet, ActiveX, Flash, Silverlight. Dart will likely succeed as a transcompiled language as CoffeeScript. **React:** Like AngularJS, React is a jQuery/template engine replacement with a lifecycle management. Difference is that it has its own syntax, which would cause it to have hard time inter-operate with established JS tools (jshint, uglify, qunit/jasmine). It also does not follow established programming pattern that provides separation of concern (e.g. MVC). I would say AngularJS will get better adoption than React.
You mirror my expectations on Dart; I perhaps overstepped in saying I thought it completely doomed. 
I liked that it actually covered deployment. As a first time web developer starting with Node/JavaScript, that is something I'm not seeing enough of. Thoughts? 
Awesome. [Schema.org](https://en.wikipedia.org/wiki/Schema.org) ([schema](http://schema.rdfs.org/all.ttl)) has two RDFS Classes that may be useful here: [schema.org/SoftwareApplication](http://schema.org/SoftwareApplication) and [schema.org/Code](http://schema.org/Code). [It would be great if schema.org had properties for IRC](http://www.w3.org/wiki/WebSchemas): e.g. `schema:IRChan` and a `schema:IRCWebClient`. There's [DOAP](https://github.com/edumbill/doap/wiki) [[schema](http://rdf-translator.appspot.com/convert/xml/n3/html/https%3A%2F%2Fraw.github.com%2Fedumbill%2Fdoap%2Fmaster%2Fschema%2Fdoap.rdf)] (examples: [Turtle/N3](http://rdf-translator.appspot.com/convert/xml/n3/html/https%3A%2F%2Fraw.github.com%2Fedumbill%2Fdoap%2Fmaster%2Fexamples%2Fredland-doap.rdf), [JSON-LD](http://rdf-translator.appspot.com/convert/xml/json-ld/html/https%3A%2F%2Fraw.github.com%2Fedumbill%2Fdoap%2Fmaster%2Fexamples%2Fredland-doap.rdf)) A `doap:mailing-list` could have a URI starting with [`irc://`, `ircs://`, `irc6://`](https://en.wikipedia.org/wiki/URI_scheme). There could be an `example:IRChan` and `example:IRCWebClientURL` with a example:IRChan a rdfs:Property; rdfs:label "IRC Channel"@en; rdfs:comment "An IRC Channel"@en; rdfs:domain [ a owl:Class; owl:unionOf (doap:Project schema:SoftwareApplication) ]; rdfs:range schema:Thing ; #rdfs:range rdfs:Resource ; It's easy enough to include some Turtle Triples in a `&lt;pre&gt;` tag, but some sort of a project metadata [Microdata](http://en.wikipedia.org/wiki/Microdata_\(HTML\)) generator with a structured property for "IRChan" and "IRCWebClientURL" would be really cool.
Awesome thank you. Hard to find good articles on architecture
Yes, there is a challenge to writing statically typed code in a language without any type enforcement, but it is not as impossible as you are describing either.
I'll be honest, I just put the code in the console, and it didn't work. But it makes sense that it should work works as new Array() has an object wrapped around it.
We've been using AngularJS for all our new front-end code since about January of this year on [Learnist](http://learni.st). I've shared about some of our success [on Google+](https://plus.google.com/103488883967783379167/posts/Lm2jVizSha9) and [in the comments for RailsCasts's AngularJS episode](http://railscasts.com/episodes/405-angularjs?view=comments#comment_162166). Note that we're not a single-page app, but a more traditional server-rendered app with client-side functionality mixed in (more and more recently). AngularJS differs from most similar frameworks in its combined use of native JavaScript objects and dirty tracking for two-way data binding (e.g. not wrapped in observables), scopes for view context, dependency injection, and [HTML compilation/declarative views](http://stackoverflow.com/questions/14793692/angulars-use-of-inline-javascript-in-html-attributes-is-not-bad-practice/14793996#14793996), which makes up the core of what AngularJS can actually do. I think some of the focus on these things stems from the fact that most of what people "see" as being AngularJS (the built-in directives and data binding) is actually built on these very principles; if you want to get serious about Angular you need to understand them. For (a small) example, [understanding its dependency injection provider](http://stackoverflow.com/questions/16828287/what-things-can-be-injected-into-others-in-angular-js/16829270#16829270) allows you to better understand how the built-in services work, and allow you to build some pretty nice config-time APIs. That said, I *will* agree that AngularJS literature and marketing focuses on some of this stuff a little too heavily a little too early. To me, it feels like the "easy at first but gets steep quickly" learning curve that people experience with Angular is due to the lack of good explanation and examples for intermediate-to-advanced topics; I find myself inside the source to understand how something works more often than should probably be necessary. The Angular team is aware of this; in fact, at a recent AngularJS meetup, [Brad Green](https://twitter.com/bradlygreen) mentioned to me that they are focusing on better documentation and examples in the near future. Angular is still relatively young, and though there are a lot of [good tutorials](http://www.youtube.com/watch?v=8ILQOFAgaXE) on YouTube, there are also a bunch of not-so-good ones, and we're just staring to see dedicated, quality learning tools and sites like [Egghead.io](http://www.egghead.io/). I hope this trend of high-quality learning resources continues to grow. I personally have to disagree with your assessment of "difficult to code with due to weak typing and meta-programming." One of my *favorite* things about Angular is how strongly it embraces JavaScript's functional nature to get things done. Of course, that's not everyone's style; some people really enjoy, e.g., Backbone.js' more "class-like" style: var MyCollection = Backbone.Collection.extend({ ... }); Almost everything in Angular is defined as a function that gets invoked with Angular's injector, and you see the same kind of patterns and styles of programming in many AngularJS apps that you'll find in a Node.js apps (e.g. [function generators](https://github.com/davemo/end-to-end-with-angularjs/blob/806ed8347e8b06d105731cdfc2273eee428208f5/public/js/app.js#L5-26), closures, and the like). (I will say that many demos and examples tend to cram stuff into blocks of code that are not well factored; this irritates me, and I wish more time and dedication was given to providing *good* examples instead of just *working* examples, but I digress.) It's also true that it can be difficult to find many large sites that are built with Angular. I *do* think that you'll start seeing more and more; aside from Learnist and DoubleClick, which have already been mentioned, you've got production sites like [Goodfilms](http://goodfil.ms/blog/posts/2012/08/13/angularjs-and-the-goodfilms-mobile-site-part-1/), [Plunkr](http://www.plnkr.co/), [Localytics](http://www.localytics.com/blog/2013/angularjs-at-localytics/), and [YouTube Leanback](https://www.youtube.com/tv#/browse). (Do note: these are all relatively recent!) In conclusion, yes, AngularJS is young, there aren't a ton of huge sites that use it, and the learning curve can be steep. It's definitely not perfect, and there's nothing wrong with other frameworks like Backbone, Knockout, Ember, or any of the others. But Angular is definitely not a hoax, and it's definitely possible to build a solid web application with it. I have confidence that, given time, these issues can be resolved and Angular can see more success. After all, we've [seen](http://nodejs.org) [it](http://www.ruby-lang.org/en/) [before](http://golang.org/). [Edits: add a couple links, clarification, fix mistakes]
You should submit some pull requests to some popular projects with IRC channels that add this to their READMEs.
http://www.reddit.com/r/backbonejs/ 
I am not saying it is impossible. Obviously. It is being done (and pretty damn well, it seems by some developers that are way, *way* smarter than me). But it requires a set of conditions of the to-be-optimized code to be met to be profitable. *That* is not always possible. On the other hand, if you use a statically typed language to begin with you don't have to worry about any of that. You can get right down to implementing well understood optimizations.
This is really awesome! Thank you so much, would love to see more!
Awesome. Personally I'm interested in building an RPG. I'll take a look at these tutorials first though...
&gt; They'll actually mean we spend less time coding in HTML rather than more as you can just drop in an exisitng component. ... by including, one might even say 'importing' the component? Coding with HTML legos means HTML becomes our domain instead of javascript. Software application development means a strong language in control. That is the code that must be modular and compartmentalized. To treat HTML modules as higher order citizens is to make HTML the app language. 
Thanks for the nice writeup. Yep, definitely from a software engineering perspective, I appreciate the backbone sample code you wrote. I've never seen backbone code before, but looking at it, I could instantly understand its purpose. There's also no repetitive wrapper code around it obscuring its functioning. I also find that Angular gives less useful error messages than Ember due to the weak typing. E.g., since type names are often given in strings instead of Javascript objects, the interpreter can't detect errors as easily.
Completely agree. The majority of web devs will have to learn the hard way - again. 
I don't know React (or which templating system you're referring to), but keeping tag generation in the language let's you use the languages full power (flow control, structures, higher order functions, etc). I always found templating systems limiting for complex cases; that's probably especially true if widget is supposed to be data driven.
I never really intended to single you out, I didn't really pay attention to whom was posting about GSAP. Sorry if it came off that way. &gt; I'm a bit confused though, is your "call-to-arms" to have GSAP posts banned based solely on the fact that the tools don't adhere to Open Source guidelines? Its really tough to wrap my head around such a staunch anti-commerce posture. Should comments that recommend books for purchase be banned too, how about posts that announce JS conferences that charge admission? I would find it off putting to see numerous posts about one specific book or conference over and over again, yes. Finding out that the majority of those posts were by people who benefitted directly from the success of said book/conference doesn't help. People here had a similar complaint about Backbone posts, **and it's completely open source and free to use**. That's why they created /r/backbonejs. Why not create a subreddit for GreenSock? That would allow you to easily monitor any questions Redditors had about your library (and no one would complain about too many GSAP post).
I built this using Junction: http://mystatus.im/ although it's been playing up a bit with Google Talk recently as Google's XMPP server federation isn't working very well, and I've heard they're not going to be supporting it any more... So I might have to totally rewrite my bot code. 
That is clearly an HTML page. ;)
You could get into some serious branch of game design with all sorts of things from sprite sheets to parallax scrolling to all kinds of fun.
Yeah, that could be done as well. For example to move out the multi-user chat stuff (so that it's only loaded when needed).
That's cool!
I honestly believe the way forward for any scripting language that attempts to be a "language of the web" is one whose architecture most closely resembles the models it is intended to operation against, namely the DOM. OOP does not and cannot do this. Purely function is a good start, but it is largely just syntax. The best way forward is to eliminate poly-instantiation and focus on lexical scopes and lambda calculus. JavaScript allows this, but it also allows people to get it wrong and do all kinds of counter-intuitive sloppy crap.
I love that the best recommendation is also the simplest: put your scripts at the bottom of your page :)
This doesn't seem to work Fromm iPhone. Instead it played what appears to be an Okay Go video...
Really good! Keep writing!
Very nice, you have maturity in coding, how refreshing :D Keep up the good work.
From what I can see (sorry, didn't have time to read the articles fully) you are using canvas. I tried playing around with creating a game where every graphical component was a DOM element and then I used CSS to animate the graphics. Have you tried that approach?
I am really glad you like it. I would love to hear some critical comments so I could improve - what to change - should there be less code more diagrams - is the code right inside the article even necessary (except first one) ?
I look at my canvas based renderer with a disappointment.
Javascript code can be found here http://jules.boussekeyt.org/game-of-life/game.js, game description here http://en.wikipedia.org/wiki/Conway's_Game_of_Life
Yes - I am kinda strong opinionated on that. 1) DOM/HTML is a GUI library (best and most advanced ever created) 2) It feels awkward to use it for rendering for someone who has background in making games 3) Try making a game with 10.000 entities 4) Canvas has lotsa useful features - blending modes, paths 5) Using a DOM you burn out memory much faster because each element has 100 properties while what your sprite need is just { x, y } 6) For a bigger game DOM based code starts to be unreadable and slower since you are probably binding each user input via addEventListener ($("selector").on) - and lot of anonymous function nesting pops out. So I would say - yes - it is fine - for static puzzle games and excessive text rendering. I had an arcade game once where I was forced to use DOM based animations - and it started to glitching out near 200 entities. Players were very annoyed and I got permission to rewrite it to Canvas (what a pain it was) - and the result was increasing capability about 10 times. Benchmarks showing that DOM is as fast as Canvas are very fancy - but as soon as you write real arcade game with that the benchmarks become fairytales. The other story is I had a game with lot of text and crazy inline highlighting... and I've chosen Canvas... and it was hell.
http://dmitrysoshnikov.com/ecmascript/javascript-the-core/
This is amazing, commenting to remind myself to do these tutorials this weekend!
Saved! 
2) Yeah, I could easily imagine that. I have done a little bit of game programming, so it was also strange when I started out. But I thought the code was quite pretty. 3) brb 6) Most likely slower (depending on the complexity), but I don't think it's harder to read. I don't know of any benchmarks of the DOM, but it's great to hear from someone who's actually built games in it. What I tried to create was a small tower defense game that never had a lot of entities, so I never really pushed it very far. My main reason for doing it was just because I got the idea that maybe the code could be quite pretty if we write it using the DOM.
irc, github, npm (in that order) also http://npmsearch.com is pretty fast and cool
I don't see how weak typing and automatic memory management is an issue, if you think those are the main bottlenecks of JS, you don't know much about JS. Google has a lot smart ppl, but as far as I know, they are not all that experienced with creating a whole new language (I could be wrong, Google does a lot of stuff I have no idea about) This would explain why they are so vaque, they have a general idea but they don't want to be tied down to anything, if they'd say something like 'we'd might do ...' the community will act as if it's a promise. While it's a shame, I fully agree with them on being silent. Also, I highly doubt that the same people are working on Dart and V8, meaning that v8 improvements will probably carry on as if Dart wasn't even there. Sure, they'll take it into account, but to say they are slacking off? Really?
Sorry, my 6th point is not very valid and more a rant. There is a coincidence that programmers I've been working with that "cannot into canvas" are bad programmers at the same time. But yeah DOM based renderer can be also nicely organized - the thing is getting messy when you can't help using jQuery for every task - wether it suits the problem or not - and all the code becomes some functional, event driven spaghetti build upon relations between DOM objects. 
Because they are going for fast development aswell. Weakly typed langauges are just easier and faster to develop in. I can write an application in PHP or Python in about twice the speed as I can write the same application in Java or any of the C languages. The web showed the world that fast development is very important when you can patch at any time from anywhere in the world. Why do you think jQuery became so popular? Not just because it handled browser-differences, it's because you can write trivial things faster than you can in native JS, even though native JS will always be faster than jQuery.
yeah, you can't explain to Java developers (or any OOP developer, for that matter) that a function is a function untill you put 'new' in front of it, at which point it is a constructor and that, yes, you can do that to *any* function.
Sound's logical enough seeing how they work with named parameters and the like
Dart is not Java-like, far from it. It's could be better described as a Smalltalk-ish language with a C-like syntax.Considering the history of the Dart team (that before Hotspot and V8 they were Smalltalk VM gurus), it shouldn't be a surprise.
Incase you can't get what is going on - it's shot on greenscreen and through seriously.js you are able to superimpose backgrounds onto the greenscreen.
"cannot into canvas"? What do you mean? I think I'm pretty ok with functional programming, so for me it's more natural to do it like that, and use the DOM as game objects (as you mentions). But this is your field, so I take your word for it when it comes to memory/speed :) Now that I come to think of it, one of the ideas I had was that it'd be interesting to see how game programming could look if you already had the DOM, and the ability to use CSS animations.
I feel your pain, bro. Recently I finished a 2d canvas renderer script myself. Now I'm redoing it for webgl. I do not recommend doing such a thing if you don't know about shaders and shit.
That 'British Invasion' version is rather impressive.
There are lots of corners where further optimizations are still possible. WebGL is a particular hot area because it is mostly numeric so you can coerce most of the code into numeric types without too much pain (see asm.js).
A great way to see immediate benefits of dependency injection is in your unit tests, testing is *so* much easier when your code is properly decoupled.
Cool! But I had to change the background color, that red was burning my retinas.
Choose the thing that you are more confident with if it suits for your needs. Civilization like games have a lot of GUI with text - which would cost you a lot of work to reproduce in canvas. I would still render the map in canvas - but in this case it is just the matter of taste. I consider civ (at least 1, 2) more to be board/puzzle game and as I stated before DOM is totally acceptable option for that kind of entertainment. Close story from a real world - we are making [Piradice](http://piradice.krzysztofjankowski.com/) but we (or actually the dev) have chosen canvas because we want the game to run as a native app on iPads using [cocoonJS](http://www.ludei.com/tech/cocoonjs) it also leaves you a window for lot of tricks which you can do with the map later.
There are (at least) three major ways to write javascript 1) front-end developer using a library like jquery 2) writing things like jquery plugins for the front-end developer (who may also be you) 3) writing applications (which happen to run in a web browser - or not). You probably will provide an interface for the front-end developer. The first two the "right way" can simply be to find examples and modify to do what you want. Being good at those is a good goal and you can continually make progress getting better at them just by looking at what other people do and what's good/bad. You can stop reading here if that's what you want. The last way to use javascript is no different than writing in any other language/platform. I've written firmware, OS kernels, database engines, 2D and 3D animation engines &amp; apps, and much more over 30 years and done some pretty significant javascript work over the last 5+. There is very little difference in "good development" across all the languages and platforms and application domains. I recommend learning without any framework or library. Get comfortable creating object hierarchies with prototypes. Learn all the details about events, xmlhttprequest, scopes, closures, objects, script loading, etc (not just what frameworks show you). Once you are good with those, go back to using frameworks (if you think it will help). You also need to have a good architecture and development processes/standards. Make sure you have a good foundation in those before trying to become a javascript expert. For web architecture, you'll probably want to separate the app into "business logic", reusable components/objects/APIs for the front-end developer to use, and front-end code. You probably want to know MVC concepts, but MVC is a tool that you need to use appropriately in each project, not always the core to build the architecture off. The architecture really depends on the project. I don't think there is a "right way" of development in javascript or any other language/platform. There are plenty of wrong ways, but the one you should pick depends on the team (just you), the application, and the business (how do they work - requirements, testing, deploys, maintenance, users). Pick waterfall, agile, some combination, or just wing it every day :). Testing is critical like any other language/platform, but there are many approaches that will all work fine. Just have a test plan and follow it, and modify it as your project progresses. Don't focus on "optimal" (in any project unless that's a specific requirement which I've seen one time in 30+ years). Focus on 1) Do the right thing with good input 2) Do the right thing with bad input 3) Do it "fast enough" for your most common users 4) Do it "fast enough" for all users "right thing", "fast enough", and "most common users" varies by project and may change as the project progresses. Part of the architecture for a project is defining/determining those and building something that can accommodate changes to them. It's easy to spend most of your time on 2 &amp; 4 when only 1 &amp; 3 matter (e.g. don't spend time on IE6 for an internal web app if everyone on the company uses Chrome and don't spend significant time on 2 if you will be the only user and a simple "something's wrong" page will do) 
This is seriously impressive. I do a bit of video work, and while the chromakeying isn't perfect (needs spill suppression from the looks of it), it's pretty damn spectacular for javascript. One thing I'm noticing though is a pretty significant frame drop. I assume it has something to do with the fact that I'm on a laptop with a wimpy GPU. Anyone else noticing it?
Why is it your favorite? Now I'm concerned.
I've been waiting for a post like this. MORE!
Github
Because it is so handy, neat, and compact. That's all.
Thought this was going to cover module loaders... but I guess since the site is focused on HTML, it wasn't in scope.
Don't get me wrong, I love JavaScript. It took me a while to get used to it but I have seen the beauty the language has to offer. It is still flawed and I'd still like it to change. But JavaScript *can not* change, it can grow, it can evolve, it can become *more*, but it can not become *different* Why? Because nobody could have guessed where the web would be today when JavaScript was designed. It took a prototypal aproach and then decided to suger it for OOP. I like that idea, it sounds like it could be a good thing and maybe it actualy could have worked if done differently... but it was done poorly and maybe even badly. That is why Google goes for Dart. Dart *is* different. The idea of Dart is simply this: Take all the beauty JavaScript has to offer, but leave the junk behind. Then fill up the gaps with stuff we need today and probably need tomorrow. So yeah, I think Dart is a great idea. The question is how it be implemented. Let's assume for a second that Dart becomes everything Google hopes it to be. In that case, there is no more need for JavaScript. If that ever happens and JavaScript actualy dies, I'll be both sad and relieved because the language has given me so much pleasure ans so much headache like no other language. Byte language defeats the idea of fast development. I saw ASM.js, awesome performance, bloody unreadable code. No, thank you. If they do an ASM-like port to Dart, you allow everyone to port everthing to Dart, which is exactly what ASM.js aims to do. Allow people to port shit to JS. You're main argument, "But the web already has JavaScript for this" is 100% solid and correct. And the exact reason why Dart came to be in the first place. JavaScript is limited and, while I'm not sure I fully agree, a lot of people think that JavaScript has hit, or is close to hitting, it's maximum potential. It has too much baggage, too much legacy to grow much further. 
I tried "Oak" to see if you went the wrapping route or the "extends forever" route... you took a third option, and the Edge Of The Universe is where Life goes to die, huh? Also, how's holding the *entire* field in memory treating you? Double the size of the field, quadruple the work done... ouch. How come there's a separate draw loop? Why not just redraw as updates happen?
A note about the example code in the question: be very careful when benchmarking using global variables. The following two pieces of code have different performance characteristics. var t = []; // global variable t for (var i = 0; i &lt; 40000000; ++i) { t.push(Math.random()); } This IIFE version is about twice as fast in V8 on my machine. var t = (function() { var t = []; // local variable t for (var i = 0; i &lt; 40000000; ++i) { t.push(Math.random()); } return t; }()); This is because global variables are generally hash lookups (slow) while local variables are generally memory offsets (very fast). 
My concern is that it lends itself to abuse (as with the original code sample) when the EXPRs are non-trivial.
Hi. I've been doing several demo web sites during the last month and one of the things I did a lot is turn paragraphs or something else into lists. I have not found anything to do that with some kind of flexible customization (adding classes and incremental ids, nested elements, etc.) All feedback about the code or the grammar (English is not my first language) would be greatly appreciated.
It looks like all the effects are being processed by WebGL, so yeah it would depend heavily on your GPU.
I agree with rezoner, but just because DOM doesn't work for most of the game doesn't mean you should never use any of it. sometimes things like offloading UI panels and menus to the DOM can help the game significantly, because you get better text control when you need it and better speed when you need that.
This doesn't work for me. What are the specs required to make them work? I seem to have everything on the list it says I should have.
This is LEGEN-wait for it-DARY! But seriously, this is awesome. I've been learning how to make Canvas games and this is a great resource. Keep them coming, please!
Ho-ly shit. What *can't* be done in a web browser now?
No, JavaScript has never had any intention of trying to be like Java. This is a perspective of OOP developers from other languages who have made no attempt to learn to write non-OOP code in JavaScript, which means actually embracing the language for what it is. It is the next version of JavaScript called ECMAScript 6, a.k.a. Harmony, that really tries to be like Java by introducing block scope, classes, and other unnecessary silliness.
Pretty neat tool. I can see where it can save me some time if I have larger lists to code into html
An array is an object where the keys are specified for you much like a hash map in some other languages. How arrays operate in memory depends entirely upon which interpreter you use. You can consume less memory by using prototypes instead of objects, arrays, or other variables. Otherwise you have absolutely no control over memory by any means.
[Typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) are more efficient if you're concerned about performance. They're pretty much just buffers of raw data.
[Markdown](http://daringfireball.net/projects/markdown/dingus)? 1. First line 2. Second line 3. Third line
I saw that, it looks really helpful. Also /r/gamedev sounds like a place I might want to check out. Thanks a lot. 
Well, the sparse/dense distinction really only makes sense when dealing with integer indices. But you seem to be asking about something else, like creating objects from a constructor function that assigns properties like `foo.bar` and so on, i.e. non-integer indices. Most JS engines have a notion of the "shape" of an object, where shape means the list of attributes. It can infer the shape of an object by looking at its constructor if all the attributes are assigned there, and it can optimize based on that. But has to throw that away if you assign to a property not on that list. For example, if you have a constructor that assigns to `this.x`, `this.y`, and `this.z`, then all objects created by that constructor will benefit from an efficient representation because they share the same shape. But if you then go in and assign to a new attribute on a particular instance, like `foo.bar`, then that instance's shape is changed and it will likely result in worse performance as it has to fall back to a general hash table instead. That's not really terribly important, and you shouldn't make major design decisions based on it, but it's worth keeping in mind. 
koglerjs - I think you would love React. Making components modular and reusable and using a real programming language for all of your display logic (JS) is what we're all about.
I added an example to illustrate how to do this a little differently. Depending on what you're trying to achieve, I am sure there are better ways to write it. http://jsfiddle.net/m3D5v/2/
It's fine. It get's the job done at least. You may want to try something more traditional like:http://jsfiddle.net/BigAB/m3D5v/3/ Or depending on what environments/browsers you need to support you could use Object.create() and get an even better "extension" pattern by just using the prototype chain, and all the beauty that comes with that. (Google it, I don't want to lead you down a rabbit hole for such a simple question) 
Numbers should probably turn into an ol instead of a ul. Other than that, pretty cool tool. Homesite had a feature that turned selected lines into a list back in the day and until Sublime Text came around I never found another editor with the same feature built in, you'd think it would be more prevalent.
I don't mean to be blunt exactly, but have you actually read anything I've been saying? Corrupting javascript by adding html to it is a terrible idea in my book, and you aren't going to get me to change my mind on that by talking about modularity and reusability, because I don't believe such a solution actually lends itself to code reusability: it's so destructive to code readability (as well as harmful to separation of concerns between DOM and js). 
change kendoui so {useWithBlock:false} in the preparation code, then it's much faster, not really surprising though as the qatrix one actually compiles to a function that just adds strings together while the simpler ones just do regex replace which is much slower. Also I believe handlebars does a lot more so it looks at helpers, depth and so on.
I've tried Sylvesterjs: http://sylvester.jcoglan.com it's nice and easy to use.
Escaping strings is kinda important - I get a page reload when I try to put &gt; in an attribute
seriously?
I think you may misunderstand what React is all about. You said: "Software application development means a strong language in control." JavaScript is the language in control. If I had my way it'd be Python or Go, but this is the language we have. It's not HTML. "That is the code that must be modular and compartmentalized." React is all about making modular, reusable components with strictly defined, small interfaces. "To treat HTML modules as higher order citizens is to make HTML the app language." On the web today, you're stuck using HTML for most applications. Canvas and webgl are emerging as alternatives but are not ready for mainstream apps. We provide a strong set of tools for your JavaScript to render a UI to HTML. You aren't actually writing HTML, you're writing JavaScript function calls (that we created an optional HTML-like syntax for) that eventually get rendered as HTML in the browser. Does that clear things up?
Nice, clean code. I like it.
Macros. If your text editor doesn't have them, or you don't know how to use them, then you will think this kind of web page is a good idea.
You really need to give vim a try. ZenCoding also has a feature that can do this very quickly called "wrap abbreviations"
Nice resource, but I think it does not have an option to add class names or incremental ids. Edit: @cphoover gave me the answer.
No. You're adding HTML to javascript files. I mean, let me explain where I'm coming from. My Backbone application js source never sees HTML except as template resources (that is, they are immutable strings held in variables given to the template engine). At the most, every View has its DOM node, but it doesn't (usually) care what tag that is. DOM manipulation is minimal. Views inject their generated template and re-attach their subviews. I can see where you might see &lt;div&gt;code()&lt;/div&gt; as an improvement over $('&lt;div&gt;').html(code()); Unfortunately, it's not much better. 
Thanks for the tip. I use regularly Vim and Notepad++. But my knowledge about both is not as deeply as I would like. Do you know any macro to the same?
Thanks, I will fix it.
A reset button would be nice.
Very cool! I'd be interested to see how difficult it'd be to recreate the effect from the original video in webgl.
Blowjobs.
I didn't know "wrap abbreviations". What a nice feature, thanks a lot.
Which is a shame, really, because I almost only want a subset of Mustache, but Qatrix doesn't provide enough. 
What advantages do you see in using a template language? It seems to me that you've got some display logic sitting in a Backbone View that then drives some more display logic sitting in a template. In order to get high cohesion shouldn't these be placed in one logical unit? Put another way: this bridge does introduce some friction as you need to bridge the gap between template and Backbone View. What about this setup makes this friction worth it?
I imagine not terribly. copy current frame into buffer. put as background for next frame. repeat.
I don't see any way to do XSS escaping in Qatrix templates, which makes its usefulness quite limited.
Sorry. Is this a joke? How about Markdown?
I use emacs. I would make a macro on-the-fly by recording the keystrokes for processing one line, then applying that macro to all lines.
That's without a doubt the prettiest Speaker Deck I've ever seen.
My templates are dumb. Really dumb. The best they can do is print some text if an attribute is set, or print some other text if an attribute is not set. They perform no _true_ computation whatsoever. My Views are bridges between the data layer and the template. They can perform any computation they so choose in order to turn Model attributes (from multiple Models if necessary) into View attributes to smash into the template. There is no bridge between the template and the View, because the View has absolute command over the template. There's all of this foolish magic going on right now because people are thinking that just because you can programmatically access the DOM that means that the DOM should be programmable; should be party to programming. It's inline javascript with CanJS. It's Angular's suite of ng-attributes, its Directives that let you create html tags at will. ...And we have React, where .jsx files are compiled into .js files. Did it not occur to you that this makes React a superset of javascript? **React isn't a framework, it's a language modification.** And a poorly done one at that, because if you're going to experiment with computer languages, **you have to do it directly and address it as such**, or you're going to get bitten when your magic starts reacting in ways you didn't expect. 
Native performance. :-(
Most React components are very dumb, too. They're just displaying some data. We like to use the full power of JS for building abstractions that describe your application. The bridge I'm talking about is your View! Your View basically takes some data and does transformations because templates are generally not powerful enough to consume the data directly. If React didn't have the JSX syntax, would you still call it a language extension? Check out the second example on the home page: http://facebook.github.io/react/. No custom JS syntax there. No compilation step. JSX just turns a syntax we find convenient (maybe you don't find it convenient, so don't use it) into a lightweight description of how the markup should look. React itself is absolutely not a language modification. You could make the argument that JSX, which is independent and separate from React, is an extremely simple -- almost trivial -- one. I find the fact that you don't like React interesting because you echo a lot of our beliefs, specifically that we try to avoid "programming the DOM". Just specify how you want it to look and React will keep it in that state. Isn't that what you're doing with views+templates right now?
Sec, I'm going to try breaking React with a recursive view. 
I originally wrote this as a quick introduction for a couple of my colleagues. You will notice that the only javascript on the page is AngularJS itself. Everything else is just inside the template and is very declarative. If you would like to know more about AngularJS, checkout the website at http://www.angularjs.org or join the Freenode IRC channel at #angularjs
&gt;With React, the main abstraction is a component which is still declarative even though it has the same power as a directive. We've just moved the imperative stuff into the framework. I see. Well, that's preferable to Angular. Let me see what I discover by toying with it for a few hours. 
Nice! Can see that from my desktop now. Very cool.
Man, if you're still around I find I've got so many _questions_. 8.4k LoC isn't bad for a library that has Angular's neatness without Angular's worst aspects. * Does it worry you that having to care about "CSS properties for which we do not append 'px'" might mean implementing some part of the browser's css parser/processor? * Is the list of properties placed in React when var React is declared somewhat comprehensive--that is, can it be relied on as a means of indexing the more important components of React? * AbstractEvent looks hella important and pretty fun. All events, abstracted? I'll have to check out what that means in contrast to Backbone.Event * I'm having flashbacks to Knockout's code with variables like "dangerouslyReplaceNodeWithMarkup" :P I really like this code--the error warnings especially. I'm trying to destroy it conceptually, but it might be supplanting Knockout as my favorite well-coded-but-dangerously-misguided library. I'm thinking my concerns are less about language concerns specifically, but more because of what those language concerns indicate. It's a focus on HTML elements as View components, not a javascript view hierarchy in control of a static DOM--maintaining all dynamic logic within javascript. One of the warnings I have for that is that your errors are _exceptionally_ well phrased... except for when I tried to jump between the declaration of a module and its instantiation. Maybe that's my best practice interfering--$(document).ready is my queue for true execution, but I'm beginning to think it betrays something about how React views an event-driven programming environment like the browser. Anyway, I'll PM you my gchat if you like. If not, I'll see what I come up with anyway. 
"well-coded-but-dangerously-misguided" -- I'll take it! I'm also usually in #reactjs on Freenode IRC if you'd prefer that. Most of the core team is on during the work day on the west coast USA.
A few notes to people looking at these tests: * **Always** specify the [complete version number](http://encosia.com/the-crucial-0-in-google-cdn-references-to-jquery-1-x-0/) when grabbing jQuery (or likely anything else) from a CDN. Just saying `jquery/1` is bad not only because you don't know *which* jQuery you'll get but because you'll incur a caching hit when grabbing the resource. * Most website performance issues are in paint/layout/etc. You should work to make your javascript faster but know that you could be leaving a lot of low hanging fruit on the table if you micro-optimize js and ignore overall browser performance. 
We try to keep things small and Closure-optimizable. To answer your questions: - If you pass a string we'll put that into the CSS using whatever unit you want. So our algorithm is basically if typeof property == 'number' &amp;&amp; !unitlessCSSProperty(property) then append 'px' (we have a whitelist of things like opacity where we don't do this) - AbstractEvent is sweet. We're refactoring it such that it could be used outside of React if you want. We have consistent bubbling in all browsers (IE8+). Hell, you can use some HTML5 events in IE8 too since it's an entirely synthetic event system. - Haven't played with knockout's code, but I'd probably like it if that's how they name things :) Keep in mind that UI components compose each other so it is much like a JavaScript view hierarchy. I think what you're referring to here is that the component's markup needs to appear in the document where the component is rendered, right? This is not true, though we aren't advertising it yet. At FB/instagram we have a lot of modals (think lightbox photo viewers, login boxes, tooltips/hovercards etc) that append to document.body to manage stacking. We have a component mixin that lets you render, say a tooltip somewhere in your component hierarchy but actually inserts its markup somewhere else. Another thing to think of is that if you look at the process from design to front-end engineering to backend, the information architecture you're trying to present is usually reflected in the UI, which is usually reflected in your component hierarchy (and sometimes even reflected in your backend data!) so this issue I just mentioned comes up pretty rarely. If you want to share more about the declaration vs instantiation issues you were having I can help you out.
This is great, but I think that the idea of JavaScript purity is illogical. Say you had an array of objects defined in LiveScript like this: t1 = run: (x) -&gt; console.log "t1 #x" t2 = run: (x) -&gt; console.log "t2 #x" objs = [ t1, t2 ] Then you could just do this: map (.run 10), objs 
i really like the air traffic controller metaphor and will probably reuse the ideas in the first half of the deck for my own teaching. thanks Amy!
FWIW Backbone &lt; 0.5.4 did not have the cached **$el** available on Backbone.View.
I dunno about that. JS now has access to native resources. Now I think that it's really just a matter of really good JIT, which lots of JS implementations. No, it's no C/C++ but I don't think anything will ever replace that.
Great to see these are up, but the video descriptions really don't say anything about the video. Sometimes I watch a video because of the presenter, but mostly I want to know what they are talking about.
if you use mustache, you really should be using Hogan to get the best performance; it does exactly what you are wanting. http://twitter.github.io/hogan.js/
Ditto. This is very annoying. Great way to save bandwidth tho since I probably won't watch any of them until they are labeled better. :)
What a coincidence, I was just thinking of you. I've converted to accepting a performance hit with handlebars, even if I just want mustache, because it's easy to compile'em on the grunt side of the build. I know there are grunt plug-ins for hogan, I'll look into them. 
I figured the name was too coincidental to not speak up :) Hogan is running about 150k runs in my Chrome, which was double anything else (other than Qatrix) http://jsperf.com/dom-vs-innerhtml-based-templating/740
Clearly Qatrix doesn't try anything hard enough to be sensible. You're right, Hogan has a considerable lead. Why did I write it off before? I did have a reason, I think, even if it was based in the grunt plugin world. I'm looking for only four things: {{attribute}} | {{{htmlmarkuppreserved}}} | {{#yes}}printed{{/yes}} | {{\^yes}}saidifno{{/yes}} I'm willing to forgo dot-iteration. You guys running Hogan? How much has changed since the last we talked? 
This is the greatest thing I've ever seen. Thanks for sharing.
{{&gt; powerful }} [[#lang ]] [[ especially ]] [[/ lang ]] when doing this. A lot has changed. Yes, we are 100% mustache -&gt; hogan. We compile via a Node server and library we wrote called /Machete/. I'll open-source it soon enough, been using it for a year+. As show above, we run machete twice on all of our templates, first time through is on the server during build which inject the langage so we have multiple folders of the same templates in different languages, then we hogan them, then we push them to a browser to be rendered by the JS.
I was just looking for some problems to start using some of the JS I've been learning. This is awesome, thanks!
Glad you wrote back. Thanks for the clarification. I appreciate the suggestion about a sub-reddit. Take care, Carl
This is incredible - you are a talented programmer. I really enjoyed the 'balanced-brackets' problem. Thanks for sharing!
Talk descriptions I found easily for those bitching about a lack of info: http://2013.texasjavascript.com/ It's a lot of work to film and put up the videos, and for FREE. I know how much work it is. Be more grateful, folks. (maybe the current job environment is creating a mass of spoiled, lazy, entitled developers... just maybe) I suspect the descriptions will be copied and pasted over soon anyway.
Really..? Then you haven't seen much.
This is kinda basic stuff, really. The fact that people here are in awe of these snippets tells something about the sorry state of /r/javascript.
Cause it's for all levels of javascript knowledge? Not everyone is born being a javascript expert.
We have /r/learnjavascript for beginner stuff like this.
I learned a lot from this resource: https://github.com/raganwald/homoiconic?source=c These libraries also help with various tasks and avoid re-inventing the wheel: microjs.com
tnx man, this is usefull! bdw. I had [THIS](http://stackoverflow.com/questions/12930272/javascript-closures-vs-anonymous-functions) on 2 diferent job interviews...
As another javascripter doing job tests, this is glorious.
Feel free to add your advanced stuff so we can learn from you.
http://addyosmani.com/resources/essentialjsdesignpatterns/book/#designpatternsjavascript This is an excellent book on JS design patterns.
I have a job where I get paid to use my JS knowledge, and it keeps me occupied. If I ever have enough free-time to program something interesting, I will.
You can refresh the page. I want to keep the UI as minimalist as possible.
That's the spirit!
great great job, I love to see how other people solve the problems.
I've converted a Backbone.js webapp into an AngularJS SPA. It can be seen [here](http://parlmnt.com) with source code [here](https://github.com/nazar/parlmnt). I found AngularJS much more natural to use when compared to using Backbone.js + RequireJS, specifically its declarative UI building approach vs Backbone's imperative approach. I wrote a [blog post](http://panthersoftware.com/blog/2013/05/30/commentable-a-polymorphic-nested-comments-directive-for-angularjs/) showing the difference between the two approaches (see the "Backbone Way" section) Truth be told, I prefer using AngularJS for client rendering as opposed to the server doing the rendering as this decouples the client from the server. This makes it easier for me to swap out the Rails3 server (as I am using hardly any of its features i.e. not much vendor lock-in) to something else like NodeJS, Django or... gasp... PHP! HTH and all the best with your project.
There's the free book from Cody Lindley that might help - JavaScript Enlightenment: http://www.javascriptenlightenment.com/
it's not just re-rendering. If you have a list of thousands of items then you'll be rendering that template thousands of times and if they all come in at once then that could potentially be a big performance hit on slower machines. Trick is to try and keep those templates simple, and if they're simple enough you can construct your own templating function without having to worry about compiling it through another templating engine.
a couple more for you: Find out if a string is a rotation of another string - i.e. ABCD is a rotation of BCDA but not ACBD. answer is pretty simple: function(a, b) {return (a + a).indexOf(b) &gt; -1} and you're in a hotel and you forgot what room number you were but remember that the sum of it's divisors is greater than the number, yet there is no subset of those divisors that add up to the number itself. There are 100 rooms in the Hotel, what's your room number? The solution is a bit harder so I'll leave it as an excercise to the reader. Also: http://modernjavascript.blogspot.com/2012/09/breaking-it-down-with-algoritms-i-round.html
So solution to "problems" with anonymous functions is not to use anonymous functions?
I was pleasantly surprised to see a [memoization implementation](https://github.com/blakeembrey/code-problems/blob/master/nth-fibonacci/index.js), one of my favorite optimization techniques as it's dead-simple and effective. Here's a [PHP version](https://github.com/k3n/PHP-Memoize) I did awhile back. And that was just the first code sample I checked, so I'm going to be sure to check the rest when I get a moment. I like your style.
Huh. I think I get it. That's... a little scary, actually. A monad is a pattern that wraps values and provides a way to wrap values, which 'unit' did, a way to unwrap them?, and a way to convert any function that returns a simple value to one that returns the wrapped value. Right? And the point is that it makes function composition (making new functions by putting smaller functions together) easy for anyone who groks the pattern to look at later and reason about and maintain. 
I think [this recent post](http://www.reddit.com/r/javascript/comments/1ftyjh/common_code_problems_solved_in_javascript_xpost/) would be an excellent place to start. See if you can solve the problems, and/or just investigate and deconstruct his provided answers.
I like it and I hope get it, but where is `reduce` function definition? Standard `reduce` function should be use as follow imho: [ getFoo, getBar, getBaz, getSna ].reduce(bind, unit( url ))(...)
Huh, nope, on review, that's not it. Still not quite clicking for me. Dang. Unit wraps values. Bind turns a function which wants a normal into a function which wants a wrapped value. I think I got the point of it right, though. If you have a way to standardize the inputs and outputs of functions, you can use combination operators like reduce, providing code that's easy to reason about and update later. 
Thanks. I've updated the post to use the standard javascript reduce syntax. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce 
For the *Nth Fibonacci* term, if you don't want to resort to the [closed form solution](https://en.wikipedia.org/wiki/Fibonacci_numbers#Relation_to_the_golden_ratio) because of problems with precision as you increase *n*, you can always resort to the O(n\*log(n)) [solution presented in Structure and Interpretation of Computer Programs](http://www.kendyck.com/archives/2005/05/13/solution-to-sicp-exercise-119/). I don't think I would be able to derive it during a job interview, but if someone did and they were asked that question, I think the head of the interviewer would blow up. Again, excuse my python: def fib(count): a, b, p, q = 1, 0, 0, 1 while count &gt; 0: if not count%2: p, q = p*p + q*q, 2*p*q + q*q count /= 2 else: a, b = b*q + a*q + a*p, b*p + a*q count -= 1 return b 
Until JS get immutable objects, it is going to be hard for monad to catch on. It is a lot easier to just use mutable variables to convert the monad into builder pattern, which is a lot easier to understand and use.
Nice! A solid justification for introducing category theory to Javascript :) 
Feel free to show off your community contributions on github, you don't have to make something new just for this thread. Is this yours? https://github.com/kumiorava Some cellular automata would be interesting!
reduce is kind of a replacement for syntactic sugar here, but you're right about the combinators. The point is that we have functions that pass functions to functions, and it creates a sort of a tube that values can travel through and be modified by functions. e.g. input -&gt; process -&gt; return value -&gt; input -&gt; process -&gt; return value. In javascript, this lets us escape callback hell, or the pyramid of death. In a pure functional world, where people don't modify values, the most convenient way to achieve the convenience of mutable state is this chaining of return values of functions to inputs of the next function. 
I feel like this is a classic book for javascript programming. Even though it is very opinionated (parseInt), but none the less it is a great reference for quirky behavior of JS. Seconde watch this: http://www.youtube.com/watch?v=kXEgk1Hdze0 &lt;-- Just a great list of really silly behavior of JS! http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1370623429&amp;sr=1-1&amp;keywords=the+good+parts ------ One last thing, make sure you review how CommonJS works: http://dailyjs.com/2010/10/18/modules/ 
Nice submit, Although there are some inefficiencies in your prime finder. https://github.com/blakeembrey/code-problems/blob/master/prime-tester/index.js Apart from not immediately eliminating even numbers greater than 2, looping only through odd divisors and other methods over at http://en.wikipedia.org/wiki/Primality_test The structure of your loop will execute the Math.floor(Math.pow(n,0.5)) statement on every iteration. observe: var oldpow = Math.pow; Math.pow = function(n,p) { console.log("called"); return oldpow(n,p)} for (var i=0; i&lt;Math.pow(9,0.5); i++) {} this will log "called" 4 times. A faster loop would be: for (var i=0, l = Math.pow(n,p); i&lt;l; i++) {...} 
It would be nice to compare this with the promise/A+ spec. If I'm understanding things correctly .unit() is similar to the promise that gets returned by .then(), correct? .bind() is like the .then(), but more flexible in that you can have different sets of parameters for different types of monads. 
Nice work. Now do it in AngularJS ;-)
Nice! Dig the 24 to 12 hour conversion no matter what the display settings are.
Is this no longer online? :-/
This is really cool, I'm slowly wrapping my head around monads as time goes on.... I also couldn't help but notice that the end result is really similar to [`async.waterfall`](https://github.com/caolan/async#waterfall).
You should checkout Frame.js. It is designed to sort out problems like this. https://github.com/bishopZ/Frame.js
Nice! Are all of these your solutions or ones you've found online? Edit: I re-read what you posted and have come to the conclusion that they're yours.. I think.
It sure is. I'll update the post with the new URLS. http://tagpro.koalabeast.com/
Here, this might help: [Functors, Applicatives, and Monads in Pictures](http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html)