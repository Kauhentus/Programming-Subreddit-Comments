Sure :)
Yeah, events on DOM are very strange, and most browsers have access to them, but it took quite a bit of voodoo magic to get it so that each element exposed it to the framework. JQuery and view frameworks have their own tricks as well, and it's just strange that it's not part of the HTML spec to just expose it.
Thank you for checking the project out. That's a great idea. I think Chrome is the only browser that supports Web Speech API at the moment. Also, Web Speech API relies on external services to do the inference while this engine runs fully in the browser and does not send audio data out of the computer. Therefore it is faster, consumes no bandwidth, and is private (GDPR friendly!).
\&gt; does not send audio data out of the computer That's a nice fucking change for once.
ramda? have you checked [https://github.com/stoeffel/awesome-fp-js](https://github.com/stoeffel/awesome-fp-js)
This case seems pretty specific. If performance is actually a problem and you don't want the overhead of a general purpose lib then I'd probably roll my own optimized helper function.
Take a look at [Nestjs](http://nestjs.com/), it is a framework built using TypeScript that compiles to an express app. It is amazing to use and write compared to Node in my opinion. Awesome community around it as well. The developer Kamil has a typescript starter project on GitHub for it and has awesome docs.
I've had a lot of success with https://github.com/jdeal/qim for this in my projects. Beforehand I was using lodash / ramda / es6 shorthand depending on the complexity.
Unless you're planning on preforming thousands of entries...reduce per second, why are you worried about perf? This is an honest question. This is what engineers do, only optimize after your product works and only if the benefits of optimizing outweighs the cost of development. &gt; While Lodash performance is great, it's the footprint that makes me look for alternatives. You mentioned in another response that 5kb gzipped is too heavy.. again, why? What are you developing? That's around 25 times smaller than a smallish properly compressed image. What would be an appropriate weight for your use case? 1kb? 200 bytes? Initialize you're own repo called, my-awesome-helper-components, create a folder called 'really-fast-object-entries-reduce', write some unit tests and the pull it in as an npm dependency in all of your projects.
Which is easily provided with [esm](https://github.com/standard-things/esm)
Check jsonata: http://jsonata.org
You can use their cli tool to export single functions
gooood
First step would be not to use Safari. The two that are used the most are Chrome and Mozilla Fire Fox Developers Edition (I personally prefer the latter). Now since I don't have any context I am assuming you are referring to article. With either of the web browsers above you will be able to adjust the viewport when you inspect the website (cmd + option + i) for both browsers. Now based on that and the default view point you will see in the top right hand corner (for Mozilla) a smaller box in front of a bigger box, click that and then from there you will see a drop down box of mobiles and tables to see how they scale. Hope this was what you were looking for
I goota master Arabic first to read this though. 
u/[ugwe43to874nf4](https://www.reddit.com/user/ugwe43to874nf4) Done! ID's are now removed from public interface, you know access it by the Insist's handle. u/[Meph1k](https://www.reddit.com/user/Meph1k) Added Jest tests for all the features and shortened examples!
NodeJS allows JavaScript to run on the server. Angular, React and Vue are front end JavaScript Frameworks, where instead of coding in HTML and putting in a bit of JavaScript, you break down the interactive parts into small chunks that work together.
Have you looked at knex js? 
Are you talking about writing javascript:code in the address bar?
I did, I should have probably mentioned it. If you have any example repos I can take a look at, using Knex.js or even pg-promise with receive option, I would appreciate it
Lol, I remember what it was, "javascript:document.body.contentEditable ='true'; document.designMode='on'; void 0." If anyone's wondering what this is for, have a seat and let me tell you the story. &amp;nbsp; We have a college class called, "Understanding the self," where we would try to understand our different selves, from spiritual to physical, yada-yada. It's a pretty bullshit subject, and the professor keeps on asking for essays, grades based on the penmanship, not on the content of the work, so I never get the perfect uno, or the perfect 100. (The reason why I know he doesn't read it is because I contested one of the better essays I've wrote in a while, and he told me I didn't answer all the questions he gave, and I asked which questions, and he told me, so I pointed it out on the essay every question he thought I didn't answer, making me believe that he really doesn't read it. He gave me a higher grade but not the perfect 100, I would be fine with that, but we have this sole classmate who always gets the perfect hundred; she has great penmanship, but man, the content wasn't even there, poorly constructed ideas, and just bad grammar. Anyways,) we got to the topic digital self where we were tasked to post something helpful on Facebook and in order to get any great we would need to have at least 500 likes on it, and I don't even have Facebook. So the reason why I'm asking for this code is because, I'm going to cheat my way out of this messy task, since I don't really have friends, let alone 500 willing people to like a random post I made on Facebook.
https://www.reddit.com/r/LearnJavascript class variables { static foo = window.foo } is not valid javascript class varia { static get foo(){ return window.foo} }
I am. Sorry for the incomplete details, but I got it covered, thanks for asking probing questions though, I appreciate it.
NodeJS is a webserver, just like IIS, Apache etc. Its just made for javascript. Angular, React, vue etc are all frameworks that creates a dynamic experience, adding/removing elements on the fly, calling an API etc. They have each their own good and bad sides. Fx, React is very powerful and you dont have to build the whole website with it, but it also makes you do everything by hand. Angular more or less demands your site to be built only with it, but instead it has some easier ways to make stuff work. Both of them are made using components, Which means that you create small components that contain some HTML and javascript, which ends up being like a Lego-brick, if you will, where you put the bricks in where you want them to be. And as mentioned earlier, you can have them dynamically showing up depending on data or what ever you want.
Shouldn't it be: class variables { this.foo = window.foo } ?
If you're using Babel with class properties enabled then it's fine. But technically it's not part of the standard yet you're right (currently stage 3 IIRC).
If you're using Babel with class properties enabled then it's fine. But technically it's not part of the standard yet you're right (currently stage 3 IIRC).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tc39/proposal-static-class-features/.../**README.md** (master → 00ddc11)](https://github.com/tc39/proposal-static-class-features/blob/00ddc11b975c87aecb8a733916ecd45ee05302ae/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e7cmm37.)
That's not valid syntax (now or in any proposal).
So what's happening is that window.foo is undefined when the code is loaded. The variable is instantiated immediately, it doesn't wait for a class to be initiated. When this code is run, static foo is assigned undefined. When window.foo is changed it doesn't matter because it's not referenced in the property. What you could do is assign window.foo an object and change properties in there. You can read about reference/value here: https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value
And is a proposal, not part of the current spec.
&gt; If you're using Babel with class properties enabled then it's fine. But technically it's not part of the standard yet you're right (currently stage 3 IIRC). If the OP is using Babel then he should disclose it. I don't see Babel mentioned anywhere in the post.
after hours of pulling my hair out this finally rung a bell, thank you so much.
Awesome, no problem. It was a good question!
&gt; the content wasn't even there, poorly constructed ideas, and just bad grammar. Ahem.
I do admit, I have bad greamer as well. 
NodeJS is a runtime environment which allows you to run javascript programs outside of an internet browser. Comparing it to the webservers is wrong. NodeJS for javascript is what JVM is for Java or .Net framework is for C#.
Dont you have to delete the reference when you're done with it?. SomeClass.value = window.foo delete window.foo;
No clue what's that supposed to do, so I'm gonna say probably not
I disagree! Just because it’s not part of the standard yet does not mean it’s not JS and you really shouldn’t have to specify that you’re using Babel every time you’re using something that isn’t supported in browsers yet.
Might help https://stackoverflow.com/questions/50408369/how-to-get-injected-sql-syntax-highlighting-in-javascript-files-in-visual-studio
did you create an instance of the variables class?
https://mherman.org/blog/developing-microservices-node-react-docker/ He uses knex in that tutorial. I'm a big fan of his thoughts on architecture. 
1. You can either declare global variables in a constructor 2. Use transform class properties so you can directly declare those variables without a constructor or any function ‘transform-proposal-class-properties’ 
I avoid SQL builders and ORMs at all cost aside from very narrow use cases like multi-faceted search. The code they produce is absolute garbage for anything beyond the most basic queries and each has their own silly proprietary handicapped way of doing things. After writing SQL for 13+ years I practically dream in it and much prefer to place each query in its own file within a relevant directory structure and write a loader to pull it in then use the pg-format package for substituting the variables. Makes everything much more readable, easier to edit and pull into other software.
Not sure what you’re trying to say. I can’t just go into C++, type “var a = { one: 2 };”, get a syntax error, and blame C++.
I am kind of worried that making IO requests to read an sql file every time I need to make a query. Would that create a lot of latency? How was your experience with it especially when I need to template it as well?
wtf are you developing that you’re so picky about performance ... 
Short answer: Yes. 
NodeJS isn't server centric. There are lots of cli tools and terminal applications written in node that have morning to do with servers.
Maybe try AJAX with partial page postback and a static server side bool var?
 I've tried setting all videos to the same ID but it only muted the first video. That is because IDs must be unique. There cannot be two instances of and ID. Check out "classes", and I think you'll find what you are looking for. 
[https://codepen.io/anon/pen/rqWeqe?editors=0001](https://codepen.io/anon/pen/rqWeqe?editors=0001)
It is English for the moment. Support for other languages will be added. That being said for commercial customers we can create custom non-English models as well.
Proposals are not valid JavaScript, by definition. They can and do change before they actually land in the language. Babel transforms only model one snapshot of the behavior along the way. This becomes important with things like decorators that already underwent fundamental changes from their earlier stage versions.
Don't put that in a zip file that people have to download. Either put it on a public repo in a place such as github/gitlab/bitbucket/etc or, even better if possible, just put it live somewhere. If you don't have any particular place to publish it, you may try JSFiddle, CodePen or some similar place. If it's a large project, some of the services mentioned before also offer to publish your project live from a repository.
Thank for identifying what its called. This led me to this article [http://2ality.com/2017/11/currying-in-js.html](http://2ality.com/2017/11/currying-in-js.html) which provided the answer I was looking for &amp;#x200B; &amp;#x200B;
Yeah. You just need to select all videos you either want to mute or unmute. 
Yep. ECMAScript runtime is a better description.
Shouldn't need to, given that the attribute is static it exists on the class definition rather than on any instances
 class Variables { static statProp() { if (!Variables.statProp.set) { Variables.statProp.foo = window.foo; Variables.statProp.set = true; } } constructor(){} }Variables.statProp(); console.log(window.foo); console.log(Variables.statProp.foo); 
Oh no I load the files into memory when the app starts up. For particularly performance sensitive queries I'll have the wrapper prepare the statement on the PostgreSQL server so the query doesn't even have to be transmitted for each request. I've never needed to do this but you could have the wrapper watch the files for changes and reload them but to maintain sanity I prefer to roll out all changes as part of a deployment.
&gt;but I don't believe the queries are optimized so I am hesitant to use it. You can check to see by using the logger option to print out the raw sql if you are worried. I've done this many times because I was skeptical as well but It produces equivalent results for pretty much anything you'd actually want to attempt to do with an ORM. 
Hm. There's no way of doing it locally between two objects on one canvas then? &amp;#x200B; The only way is to blend the two objects on their own canvas using the global composite..?
So you're a week late. It wasn't release today.
Yeah I know, so painful :/ 
Ha, sorry I thought I was in /webdev which puts a certain spin on answers.
That works, but the interviewer most likely was expecting currying.
NodeJS is a JavaScript engine (V8) that runs on top a C++ code layer. That allows JavaScript code to communicate with the underlying platform. This allows a number of things. For example, creating web servers in JavaScript, or creating command line utilities, etc. 
Only for Safari and IE though.
I'm not sure with what you've tried to do without seeing your sourcecode, but here is a pseudocode create canvas get canvas' context load images set composite op per image for each layer set global composite op draw image on canvas loop You can then copy the pixels of the composited canvas onto another canvas if necessary. 
Check out https://quasar-framework.org
Oh nice! I am the author of [promise-endeavour](https://github.com/leahciMic/promise-endeavour#readme) which is aimed at also retrying promises. I agree with others regarding the examples. They are fairly big, and the Axios one hides some details by importing code to handle errors and other things directly from promise-insist. It creates an idea in my head that it might be overly complicated to interface with promise-insist and if there's no library support for the the thing that I want to retry, then implementing it might be tedious. It also seems to require more boilerplate than I'd like to see. You list the following features: * Retry (insist on) a promise ***retries*** times every ***delay*** only if the ***errorFilter*** is whitelisted through global or task specific **config** * Cancle retrying(insisting) at any period of time. * Set a callback that executes per each retry per task (***attemptNumber***, ***timeConsumed***) =&gt; **void** * Replace a task being retried by another one dynamically while maintaining the current insist configuration and retries count left (useful with things like rate-limits etc..) Perhaps the library is solving too many things and it would be best to consider some of these as separate problems and solve them independently. 
Thanks: from my research it seems that Quasar potentially ‘tries to do too much’ and ‘gets in the way’... It also seems that WebView wrappers struggle to load quickly on low end/older mobile devices... Would love to hear further about your experience with Quasar.
&gt; https://aditya-r-m.github.io/twisty-polyhedra/ That's not what I was expecting! it's more playable now, nice. My current project is a work in progress but try it out if you have time: https://secondcommand.github.io/GEOWars/ It works with a controller too. I'm at a point where I don't need any more tech, I just need level design/content. I made it with just canvas
Well I like React but I don't see any advantage in having a fullstack approach, unless you want something with SSR like Gatsby/Next.js.
SSR would be great: could you describe why you see an advantage in Gatsby/Next.js + workbox over the other frameworks? Thank you
how it's compared with vue cli or angular cli ?
`Promise.resolve` is less code and is easier to understand. It is built to handle this common case.
Yeah sure. Ignoring async/await for this question.. I guess I should have clarified that in my post. I will update it.
Not OP, but our company website runs on Gatsby and because we love PWAs (and had a bit of time) we made our website a full PWA with a 100% Lighthouse PWA Rating (since you seem to be interested in that). We also make use of workbox for that, and it all works really well with Gatsby (especially with out of the box code splitting, etc.). &amp;#x200B; Our services focus more on web applications than websites, so Gatsby is usually not optimal for client projects (highly dynamic content and Gatsby's data imports are run at build time and then statically served). We've created PWAs with both Create React App and Next.js, and honestly, focus on your project's requirements to see what fits you best, and not what the frameworks provide. You'll be able to create well working PWAs with most of them.
There’s no need for neither in this case, the value you return from .then() will always be a promise, same goes for async functions
This. Both of your proposed solutions are wrapping a promise in a promise which requires extra ticks in the event loop and is also just more complex with no added benefit. #4 here shows this issue well: https://dev.to/kepta/promising-promise-tips--c8f 
Am i the only one writing code like this? Promise.resolve().then(() =&gt; { // code here }); Thrown errors gets caught here and its a simple way to start every single promise chain. 
Take a look at LitElement, and Polymer 3 PWA Starter kit examples on GitHub. https://polymer.github.io/pwa-starter-kit/
Of course this makes total sense for async functions. Didn't know that this works for synchronous code as well. Is this best practise though? And what if the code inside .then() needs to reject?
Think about it as if .then() wraps whatever you return in a Promise.resolve() without you needing to explicitly do so. And if anything throws an exception, it will wrap the exception in a Promise.reject() for you. Yes it’s best practice since is redundant to do it yourself.
I see. That makes sense. Thank you very much for clarifying and explaining it to me. :)
A try/catch would give you the same results when you are not using promises. And when using promises, I personally prefer using async/await and try/catch, but that’s just syntactic sugar of what you already do
Thank you for your detailed reply. I’ve edited the original post to describe my use case. Would you encourage a specific framework for a highly dynamic web application? 
Could you hint as to why you prefer polymer over the alternatives? 
Cra is almost good. I just wish it would use a .bablerc without ejecting. 
Where does the data come from? APIs? How often does your data change?
Yes, data is pulled from an API and needs to update frequently (real time). 
Since zero is falsy, `add(1, 0)` would return the curried function instead of 1.
I wish it would use .eslintrc without ejecting.
It’s not a faulty minification but a faulty deploy mechanism. The app makes heavy use of code splitting so each time a build is generated dozens of new chunks are created, leaving the old chunks obsolete. When a deploy is done, the old chunks are being deleted from the server and the new ones are uploaded. If you had already loaded the app and a deploy happens while you’re playing, as soon as you try to lazy load a piece of the app you haven’t yet loaded you will try to download a file that no longer exists. Not at all your fault, but something I need to fix ASAP.
It's forward thinking in many ways and performance is really good. I use LitELement and Lit-HTML, which supersedes and is not dependent on Polymer 3, but can live within it or other libs or frameworks. So it doesn't tie my hands, I'm free to pick and choose more precisely what need and what works best for state management, routing, and supporting npm esm's. I'm currently building PWAs using Lit, Redux, and Material Web Components. It's very light weight. The community is really helpful and the lead devs are responsive. I developed with React for quite a while, and it's got it's upside, but with Lit I don't feel like I end up with build processes that include half the Internet. LitELement 1.0 and lit-html 1.0 are due out in a few weeks I believe, but the current releases are stable and don't anticipate any big breaking changes at this point. The downside, as with any bleeding edge project is the lack of documentation, although working on that, but there are good starter examples, and the Polymer Slack channels are really helpful. And a number of us have written how to's and other posts. It takes some getting used to, but I'm sold on it.
I haven't used Quasar specifically, however a PWA does not require WebViews -- those are used by hybrid apps. Thus, you shouldn't worry about the performance of WebView components when building PWAs.
There's a few alternatives, maybe this works for you https://github.com/timarney/react-app-rewired
TS is for people who like type safe operations, and tired of the js shitfest.
You guys have very strong arguments, so a couple of days ago I bought a book: HTML5 games: from novice to ninja. And I have to say you're very right! While the video tutorials mostly talk about the steps, this book tend to go way deeper in the matter. Not only about programming; but also the thinking behind games. Balance, graphics, aesthetics. It's a little more difficult I have to admit, especially because English isn't my first language. And the words in Math are a bit more different than they are in dutch. Squareroot is just "Wortel" (root) or hypotenuse is "langste zijde" ( Longest side ). But overall a better experience resulting in a deeper understanding of the matter. Thanks!
Proponents of typing generally argue that it "eliminates whole classes of error" and forces you to reason more clearly about your code. Furthermore, typing permits intellisense features, eg. function/method signature description appears when you type out it's name. Detractors have suggested that untyped codebases don't suffer from a higher rate of errors than typed codebases. Unfortunately, there may not be strong evidence to support this. Being capable with both typed and untyped languages will make you a better programmer than only being comfortable with one.
Typescript is a comfy set of tools for helping you remember what your code does, mostly. There's also a lot of comfy tools for working with the aforementioned comfy tools - typescript + VSC = doubleplusgood. Combined, TS and it's supporting tools facilitates a smoother coding experience, with less bugs, and more readability. At least that has been my experience, writing mostly frontend stuff. I converged on TS+VSC+React+MobX as *the* frontend toolbox. It allows for a very fun flow, I am having a blast.
Yes, generally. Although if your JavaScript is being transpiled or run in a recent version of Node, you should really use let and const in place of var. The basics of typescript need not feel intimidating: https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html 
Oh that was just an example, I'm fully aware of using let and const over var. Just fired up a new project in VS to test things out
So something like this: `config.module.rules.find(rule =&gt; rule.enforce === 'pre' ).use[0].options.useEslintrc = true;`
That's a good resource! Currying is one of the foundations for functional programming in javascript, and there are specific libraries like Ramda which provide various functions to help you achieve this functionality without needing to write all the argument checks all the time (among other things). I can highly recommend going down this functional rabbit hole if you're doing javascript professionally, it will only do you favours in interviews :) There are plenty of resources/tuts available here: https://github.com/stoeffel/awesome-fp-js#articles
don't worry, it's a stupid example, no one codes like that. if they do write their code like that, bail
Yeah we already knew about this.... just check the repo
I actually built this a little while ago: https://www.crab-cli.info/ React command line tool which includes code generation functionality, is built around Parcel rather than Webpack, and features a template which includes a fully setup router and SASS, with optional flags to add typescript and/or redux.
[https://github.com/rofrischmann/fela](https://github.com/rofrischmann/fela) &amp;#x200B; For ex: `const rule = state =&gt; ({ textAlign: 'center', padding: '5px 10px', // directly use the state to compute style values fontSize: state.fontSize + 'pt', borderRadius: 5, // deeply nest media queries and pseudo classes ':hover': { fontSize: state.fontSize + 2 + 'pt', boxShadow: '0 0 2px rgb(70, 70, 70)' } }) const Button = ({ fontSize = 14, children }) =&gt; ( &lt;FelaComponent rule={rule} fontSize={fontSize}&gt; {children} &lt;/FelaComponent&gt; ) render( &lt;Provider renderer={renderer}&gt; &lt;&gt; &lt;Button&gt;Basic Button&lt;/Button&gt; &lt;Button fontSize={18}&gt;Big Button&lt;/Button&gt; &lt;/&gt; &lt;/Provider&gt;, document.body )`
Tooling. You give program hints, it gives you hints back.
some how Ts are overcoming of Js i.e Ts SuperSet of Js with some addition of types , inheritance and interfaces lately Vue.js from later version of 2.5 i think will be written by Ts take in consideration that Angular 2+ written by TS as well many frameworks ex: NativeScript 
TypeScript allows you to catch most of the errors at development / compile time, as opposed to run time. Here's a simple example function calculateMoneyPaidTo(person, years) { return person.salaryPerYear * years; } Quite simple, right? Now, imagine you use this code somewhere and forgot the order of arguments, so you try something like this calculateMoneyPaidTo(1.5, { name: 'Z_Zeay', salaryPerYear: 80000 }); Now, unless you see the bug right away, to discover the bug, you have to compile, run, maybe make API request, then see the result is NaN, look back at different parts of the code where error might have happened, etc. The process takes a long time. There is value in being able to see errors like that right away. In TypeScript the code would look like something like this: type Person = { name: string, salaryPerYear: number }; function calculateMoneyPaidTo(person: Person, years: number): number { return person.salaryPerYear * years; } So, when you type something like this ([check out the playground here](https://www.typescriptlang.org/play/index.html#src=type%20Person%20%3D%20%7B%0D%0A%20%20%20%20name%3A%20string%2C%0D%0A%20%20%20%20salaryPerYear%3A%20number%0D%0A%7D%3B%0D%0A%0D%0Afunction%20calculateMoneyPaidTo\(person%3A%20Person%2C%20years%3A%20number\)%3A%20number%20%7B%0D%0A%20%20%20%20return%20person.salaryPerYear%20*%20years%3B%0D%0A%7D%0D%0A%0D%0AcalculateMoneyPaidTo\(1.5%2C%20%7B%0D%0A%20%20%20%20name%3A%20'Z_Zeay'%2C%0D%0A%20%20%20%20salaryPerYear%3A%2080000%0D%0A%7D\)%3B)): calculateMoneyPaidTo(1.5, { name: 'Z_Zeay', salaryPerYear: 80000 }); Your code will not be able to even compile. Moreover, if you have a good IDE, it will show you exactly where the issue is. It gives you a lot of security. It also allows you to be clear about your types and shapes of the objects that you expect to be dealing with. It also gives you flexibility to develop some business logic before you even have any data, because you can simply specify the type and write your business logic, and, if the code compiles, it is likely that it works (of course, you should have unit tests, etc, but it helps extra).
So from the comments here, it's just a debugging thing? It doesn't provide any extra functionality or ease of use or performance increases or anything like that?
My first thought was they were trying to ask a ridiculous question. And they are. But my second thought is that they were trying to get you to do something awful like abusing `valueOf` and `toString`, like this: ``` function add(...args) { const count = args.reduce((count, arg) =&gt; count + arg); const addWith = (...args) =&gt; { return add(count, ...args); }; addWith.valueOf = function() { return count }; addWith.toString = function() { return "" + count }; return addWith; }; ``` The idea being the function that gets returned can be called to increase the count, but if you ever try to actually use the function it returns the number itself. Which is disgraceful.
I asked a similar question almost a year ago, and got some nice concise answers. Hope it helps. https://www.reddit.com/r/javascript/comments/78m8fp/eli5_the_benefits_of_typescript/
All the back and forth about reducing errors aside, I'm a huge proponent of Typescript because errors in Vanilla usually look like "undefined is undefined". Typescript usually points me more closely at my own stupidity when I introduced whatever bug we're talking about.
Angular CLI is pretty rad. When I came over to React I found myself really missing it. 
Polymer is pretty much [irrelevant at this point](https://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core-vs-@polymer/polymer). That had something to do with the way it evolved which was mind boggling to say the least, it may just be the most confused javascript project ever to come out. Choose between react, preact or vue. They all do what you want. "PWA" is just a bunch of neat little tools anyway, some of which won't even work on the devices people are using in the wild. You can produce fast and lean apps with any framework available to you if you follow best practices (tree-shaking, code-splitting, SSR, etc).
Though you're right, I encourage everyone to understand *why* they should use let and const rather than just switching. I know some javascript developers who know nothing about lexical scoping at all, and when asked the difference between let and var, they say "let it just the new var"...nope.
My substitute has been to use code snippets in VS Code. I even have created some of my own and they seem to work wonders. Still not the same but it’s *something*
&gt; This repo doesn't support CRA 2.0 This will hopefully [change](https://github.com/timarney/react-app-rewired/issues/162#issuecomment-417872507) at some point.
It does add some new functionality, however these are fundamentally all syntactic sugar and don't impact your compiled code. TypeScript is really geared towards making your codebase sane and trustworthy, though without sacrificing JavaScript's development velocity, more than anything else.
yeah, been using angular for 2 years, I really miss it when jump into a react project. Angular CLI is much much more powerful and I think angular has the best tooling compare to other frameworks.
yeah. And angular CLI have a GUI too, check this out https://blog.nrwl.io/angular-console-the-ui-for-the-angular-cli-a5d0924240b7
My substitute was to build this: https://www.crab-cli.info/
No, in JS you can write `var i = 0` and `i` will be a `number` type. Do `i = 'abc'` and the type will be `string`. Typescript lets you define a variable to always be a certain type, but that is only enforced at compile time since dynamic typing is just part of JS.
Honestly. I hated ejecting so much I just learned how to not use cra. Parcel + Babel is stupid simple to start with. Most of the time I haven't really needed anything else. 
Great! Thank you for your advice. From my research it seems that Preact is most advantageous (faster, smaller)... and React has a bigger community in comparison to Vue... 
Yeah, it's only been a week
you might want to explain what this is about for people that aren't familiar with.. uh. whatever this is.
I wanted make the Div with *box 1 named* with inside ( img, and h1 ) And then make another new ( div with inside (img, h1) ) after div *box 1* Is that make a sense ? Sorry if don't :( 
yes it makes sense, you can create any element with document.createElement() store it in an variable and add it to the page with element.appendChild(child); i can write the full code for your example later when at home in an hour or two if you want. 
Yepp thanks , I will wait it because I tried to find out it from 2 hours ago till now LOL
It's a Node CLI that provides an easy way to download and set as wallpaper Unsplash photos. Other infos are in the project README.. If you don't know unsplash: https://unsplash.com
Not always. A lot of typed languages force you to annotate variables with types. Some typed languages, usually functional, will infer the type of a variable so you don't have to explicitly define it. You can add the type for the variable if you want but it's not necessary. Your editor tooling can often show the inferred type so you know what types the function is working with. Languages that fall into this category in the JS world are Reason, Elm and Purescript
Ironically, this answer is from someone too lazy to have even looked into what TypeScript actually is. You’ll get nowhere with TS without knowing JS.
given: `let prefix = "my_file_prefix_name_";` `let variable = 0.11; // (or declared in your loop)` you can either concatenate `let name = prefix + variable.toString();` or use template literals (more elegant) `let name=\`my_file_prefix_name_${variable}\`;` 
Rollup is pretty nice too, imo
Well you can, just create the file and add your rules... Or am I missing something?
good answer but its es6 :) not supported in ie11 or below
I am pretty disappointed that they didn't write about typescript. It is no longer nice to have feature imo :/
the good ol', *I don't understand the interview question, so it must be stupid* They want to know if you know what currying is, that isn't a ridiculous question. Your answer is ridiculous though, go learn what currying is, it can be useful. 
For what specifically?
You can already do this ..
Your variable for name changes to nm a couple of lines down.
dude thank u i have practicals and feel super hyper thanks
spelling mistake solved thanks a bunch
It's beautiful! Love the minimalistic art style, effects &amp; the way the fabric curves..
I personally dislike it very much. JS is beautiful in its simplicity, and TS just makes former java developers feel safe typing the language of front-end developers. It's annoying, but they used to simply flock towards Angular. Nowadays they seem to leak into other frameworks, too. My opinion: It's a ***lot*** of work for minimal benefits. Every example people will give you is trivial at best. I have a lot of experience using TS and a lot more *not* using it, and I strongly prefer not using it. It's hard to measure, but I've noticed that using TS makes any task take 3 to 5 times as much time to complete. And I have never in my 18 years of being a professional developer needed strong-typed JS. If you're using a function wrongly and your unit tests, integration tests and end-to-end tests didn't catch it before golive, then you have a whole different problem. And I would argue that if you're using a function wrongly during development, you should have noticed that. If you didn't, you might simply be a bad developer. Then there's the complexity curve of TS. Sure, it starts out really simple: just add types to your variables. Then also to your arguments. And also to what methods and functions return. And then you run into a colleague having written this: function curry&lt;T, U, V&gt;(f: (t: T, u: U) =&gt; V, a:T): (b:U) =&gt; V { return b =&gt; f(a, b); } Some people will say: "just use `any` if you want to keep deeply nested structures simple!" But then I've noticed that programmers turn lazy. Time stressed. Then suddenly everything is `any`. TS is often setup to be WAY too strict. And if it isn't, then it's too loose. I do like TS but only if it is completely, fully, utterly 100% optional. Everywhere. BUT if you do use it, you have to use it right. I would set it up so that `any` is not an option unless you override it with eslint comments or something. If you need `any` then you simply don't use TS. --- My previous project had a similar question: "Should we use TS?" So I posed a challenge to the ones suggesting it: "Show me one example where it was going to be helpful." They couldn't. Not one. The fact that we didn't strong type our code had never been a problem for a greenfield 2 year old project with 12 developers working on it. But they insisted it would be nice. So my next challenge was a simple task. We had to make a bar graph component in React for the next sprint. We had a dev meeting timeboxed at 3 hours. We had 4 teams: 1. 2 Senior developers pairing to write a TS component 2. 2 Medior developers pairing to write a TS component 3. 2 Senior developers pairing to write a regular JS component 4. 2 Medior developers pairing to write a regular JS component Here are the results: 1. Took 3 hours and barely had a somewhat working component setup without unit tests, just working in Chrome. 2. Took 3 hours and worked TDD, had the tests that were failing and barely started on the component itself (the HTML/CSS part was mocked nicely). 3. Took 3 hours and the component was completely done, tested in IE10+, unit tested (90%+ coverage), and they were tinkering with CSS animation bezier curves at the end. 4. Took 3 hours and the component was completely done, only Chrome tested, also unit tested (100% coverage!) and were wasting time on responsiveness (not a requirement). Anecdotal as f*ck, of course, so take it with a grain of salt. But the simply matter of fact was this: we asked each team to describe how much time they estimated to need to finish the task: 1. Disappointed look: "Probably 2 more working days." 2. Frustrated look: "We both don't enjoy working like this at all." 3. Happy look: "We would just make it smarter, a few more hours." 4. Happy look: "Another 4 hours would be fun." If you really feel like tinkering away with deeply nested interfaces and figuring out exactly how the hell TS is supposed to work with curry functions and realising that, yes, you need to define the payload you send to the API, but also the response you get, and also the Redux store, and also the data you select... then have fun and add TS to your life. If you feel confident because you rarely, if ever, run into problems with loosely typed javascript, and would rather focus on test coverage and user experience: screw TS. I'm freelance and if a client uses TS I will not take that job. If they choose to add TS then I will leave that job. I want to write beautiful visual web interfaces, not TS programming interfaces.
Other Babel plugins. I know a popular request is decorators.
I disagree, I've never had troubles with JS. TS doesn't fix anything for me. I know JS.
Unfortunately not: [https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor) &gt;Note that even if you edit your .eslintrc file further, these changes will **only affect the editor integration**. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes. &amp;#x200B;
Unfortunately not: [https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor) &gt;Note that even if you edit your .eslintrc file further, these changes will **only affect the editor integration**. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes. &amp;#x200B;
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebook/create-react-app/.../**README.md#displaying-lint-output-in-the-editor** (master → 4879425)](https://github.com/facebook/create-react-app/blob/4879425e69a0e12758c7adff47eb8df5a1a30db9/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor) ---- 
Good for you. What is it that you disagree with, then? TypeScript is a superset of JavaScript. You literally can't use it without knowing JavaScript. 
Ah you're right. I've personally never cared about the browser output
Part of that question is currying, sure, but that's not the whole question. Take it at face value where it only ever needs to work for those two scenarios and it's examining arity checking also, which is also useful to know. However, under what scenario would you ever need a function which would return either a partially applied function or an integer based on the number of arguments? It's mental. And yup, my answer is ridiculous :) I've seen my fair share of interview questions though where they're wanting you to know how to do some "clever" hacks like this.
Where do you view your ESLint errors and warnings? Only in the IDE?
only if x=0.11 :-)
&gt; no one codes like that. https://github.com/tc39/proposal-partial-application https://lodash.com/docs/4.17.10#curry https://ramdajs.com/docs/#curry https://en.wikipedia.org/wiki/Currying https://www.oreilly.com/library/view/javascript-the-good/9780596517748/ch04s14.html 
&gt; Every example people will give you is trivial at best No. Any non-trivial example is difficult for the Reddit format, hence you don't see it as much. Your experiment with a 3-hour React component is not a good example, because it cannot show long-term benefits of TypeScript. Sure, it takes longer to set up (usually one time cost) and slightly longer (only while you're getting used to it) to write types. Your experiment cannot show long-term benefits such as maintainability, security, etc. I had very similar thoughts to yours when I first worked with TypeScript. At work, I was once a proponent of completely getting rid of it, because it was slower to develop (in the beginning), it was unfamiliar, etc. You only realize the benefits of static typing when you care more about improved maintainability, as opposed to just starting or prototyping. The good thing is, TypeScript is still flexible enough to let you do fast prototyping and use either implicit types or `any` while prototyping.
They took some really great cues from Ember 
My college uses == so i use it i had actually read that === is the preferred one
Yeah, but that's probably what you want anyways right?
Ejecting isn't that big of a deal. Just diff subsequent releases and apply the changes. We did that for the duration of 1.x, and each point release took no more than a few mins to update our project.
&gt; You know, everyone makes mistakes sometimes and forgets things, especially if there's 20 other things to keep in mind. Not this guy. Ever. Nor does he know anyone who has in his 18 years of experience.
That's the exact opposite of my experience, actually. From what I've seen, it tends to be the people coming from strongly typed languages who feel the need for TS.
I hear what you’re saying but that wasn’t the point I was making—in general w experienced devs, TS or not, their coding practices are such that they really don’t NEED TS to “save” them from poorly written code, because inherently they don’t write code that ends up changing a variable’s contents from one type to another. Junior devs in JS do this a ton, and that’s the primary situation where I’ve seen a real need to TS.
Thanks for the starting point. I should have started with searching for 'awesome fp list' myself.
hey i made a jsfiddle for you . [https://jsfiddle.net/nukeurself/aq9Laaew/245528/](https://jsfiddle.net/nukeurself/aq9Laaew/245528/) &amp;#x200B; does this help you with your problem or did i missunderstood you?
&gt; TS just makes former java developers feel safe typing the language of front-end developers Coming from Java to ES6 felt liberating and a breath of fresh air. Now working with Angular and TS and dependency injection makes me feel I've gone back to Java, but with a different syntax.
 I’m not sure why I was downvoted! Maybe I missed something. I was using Safari on iOS! I appreciate you checking. :)
JS has classes as well, but it's all just syntactic sugar, both get translated to JS prototypes in the end.
It's possible to correct someone without being an asshole about it.
This is pretty cool. I am curious what the scope of the storage is. How long will the data persist in storage, will it exist in a different browsing session? Also, what are some good use cases for this? 
semantically it's for defining functions that are bound to the current context automatically for you. stylistically, it can also be used as a compact form to define functions in es6, functions in a class aren't automatically bound to the class's context, so if you ever have a class and you use on the class's instance methods as a handler, `this` doesn't work. so you have to do something like the following in functions constructor. class foo { constructor() { this.name = 'foo'; this.bar = this.bar.bind(this); } bar() { console.log(this.name); // without the binding in the constructor, `this` would be undefined here } } the arrow function automatically does the `this.bar = this.bar.bind(this);` for you. it can also be a more compact function expression. a one line arrow function implicitly returns the single line. the following are all equivalent: const foo = function(argument1, argument2) { return `${argument1}-${argument2}-bar`; }; foo = foo.bind(this); const foo = (argument1, argument2) =&gt; { return `${argument1}-${argument2}-bar`; }; const foo = (argument1, argument2) =&gt; `${argument1}-${argument2}-bar`; since you're just learning, i'd suggest you stick to an explicit syntax, so things are clear when you're reading your code later. if you want to use arrow functions, i'd strongly suggest you define them this way until you're much more comfortable with the language: const foo = (argument1, argument2) =&gt; { return `${argument1}-${argument2}-bar`; };
Thanks, I also recently found that tree-shaking in Ramda gives much better results than in Lodash. rambda (and also rambdax) look great too.
It basically lets you condense your syntax so, for example var x = [1,2,3]; logIt = function(i) { console.log(i); } x.forEach(logIt); could become var x = [1,2,3] x.forEach( i =&gt; console.log(i) ); Instead of having to define a single use function just for your forEach, it's defined inline using the arrow instead.
Hello Friends! The library implements Bentley-Ottmann sweep line algorithm, which works fast in case of “many lines, few intersections”. The library also has a brute force implementation, which works fast in case of “not too many lines, a lot of intersections” It was interesting to make the library. I hope you find a good place for it.
I really didn't expect such a detailed explanation! I really, really appreciate the time you took for this. Thank you, kind redditor! ;)
I agree the test doesn't focus on the long term; but I kinda think that is also the point. I have done react that's like days of setup then minutes on new feature development. However I agree type enforcement is more a pain than the benefits. Even with PropType enforcement I never see the benefit. I often turn it on before the release build because the mistakes it saves is easily revealed by the errors it quickly generates Security is a thin argument on frontend. Typing is far more important on data store integrations (node side) but generally speaking there are libraries that do the enforcement for you (sequelize/Mongoose). The frontend security needs do not benefit your frontend unless you are not doing any input filtering at all; in which case type script would give you a false sense of security because you aren't coding to your implementation rather expectations of that data. You are coding by a vague sense of paranoia. Generally if I need a strict enforcement of a schema; I make that schema a class and enforce via getters/setters. All the benefits of TS and I enforce it on the model level. That's where I see the really power or TS. That would cut down that work for me; but then I would need to maintain another compiler in my project which doesn't balance out.
I hear what you're saying, too. I just don't see that reflected in my experience. The problem is that experienced devs are not always *good* devs. I would go so far as to say that most developers who have in the business a long time have developed some really bad habits along the way. This is as true of JavaScript developers as it is anyone else. But devs who have grown accustomed to languages that save them from themselves tend to have a hard time adapting to JavaScript's dynamic typing, and they're usually the ones (erroneously, imo) who claim that TypeScript is *necessary* to do any serious work in the language. Junior JS devs aren't fighting against those same ingrained mental models, they're just still learning the language. They don't *need* TypeScript. No one really does. But I do think they'll be better off for learning it, especially as more and more development revolves around it. Just my two cents.
Under what scenario would you write a function that takes two numbers and adds them? Clearly this is a ridiculous question that no-one can expected to understand! Lodash's curry function uses arity. Cleaver hack? The answer that op has found uses an application of `bind` that is literally explained in the [mdn docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind#Partially_applied_functions). Unless you think arity checking is a clever hack...but that's something I expect a JS dev to have an idea about more so that currying or partial application. 
I’d file this reply under “thunder cunt”. 
I suppose it could be used as a buffer for web apps, collecting document data while the device is offline, and then syncing it back to the server.
Yeah I also wonder how much of the effective functionality of TS can be accomplished alone with linting? 
Mate, I wasn't saying arity checking is bad or something that shouldn't be used. I even said it was useful, c'mon :( I'm saying having a function which returns a function in one circumstance and a number in another circumstance is fairly mental and something I would definitely consider a code smell. I was referring more to the bullshit answer I wrote in that last bit. I've seen interviewers expect me to know off the top of my head how to do obscure sorting algorithms or how to calculate the number of footballs in a stadium, it's not too much of a stretch to assume there's people who would expect you to ace Javascript golf, where the entire point is to know arcane bullshit about JS's weirdness, such as my answer, which is horrific and should also never be used in production code ;-)
I won't deny that there are some situations that could be easier to read with promises than async/await, but I can't actually think of any. All of the code we've used await on has been a lot cleaner than promises were, and I've yet to find a situation in actual code that called for a promise instead. If your new developers are failing to handle errors properly and your new developers from a year ago weren't, perhaps you should look at your current prop of newbies and see how to make them better programmers instead of blaming the language.
Do you know the version of Safari? That could be it. Take a look at this: &amp;#x200B; [https://caniuse.com/#feat=audio-api](https://caniuse.com/#feat=audio-api) &amp;#x200B;
🤦‍♂️, ty for pointing that out. Updated to check for `undefined` equality.
I don't think it's my connection, the same IP address got listed whether I tested from home or work. I have read previous issues on github (and I filed one) that list the same IP address as above, and they listed a DB issue as the cause. It's not "down" per se, but rather won't let you save test cases.
Still he/she has been more useful to others than you
Too long imo /s
Redux-thunk wraps the dispatch function to accept a function that can return an object (like normal) or a function that takes a dispatch and returns either an object, a function, a promise, or undefined. `Promise.then` accepts a function that returns either a promise (which can be in various states), any other value, or undefined. It's really not an uncommon pattern. I'm sure there's some objectively terrible interview questions/interviewers out there, but in practice I think it's safer assume there's some sort of reasoning behind it. I've seen the "bullshit question" accusation fired about plenty where in reality the question was simple, the interviewee was expected to work through the problem with the interviewers, or it was one of many questions- in all circumstances the candidate only fails if they flip out over being asked something they don't know, and not because they didn't know it. 
If you can execute JS on the website, why bother with any of this?
Personally, I only use Rollup if I'm building a component or library or something that is going to be installed by someone else, which is rarely what I use CRA/Parcel or even Webpack to do. Still, all those tools are awesome.
I don't think there's much value until refactoring needs to happen
One use is for offline health care. Remote villages don't have internet access all the time but can still use their cell phones to store data locally then replicate to an online system somewhere. 
Oh yeah that's really interesting actually. I suppose a service worker could redirect requests based on offline status. As long as the data wasn't trusted when synced server side. 
I spent two weeks learning typescript. I still don't get the value, unless of course your corporation wanting to outsource to H1Bs who only know java. Then typescript makes a lot of sense.
Ok, good examples. I still think the scenario described above is mental though, but i'm having difficulty expressing why. Something to do with functions vs primitive values, I dunno. I think i've been conditioned by some awful things i've seen previously, some of my own experiences, but also from those terrible things on social media which give you an incomplete problem and then laugh when you draw the wrong conclusions, so I instantly jump to "Bullshit".
It helped me
I could be wrong but I don't think I've insulted anyone.
Yeah I wish React could have a similar CLI, but since it's less of a framework compared to Angular/Ember, there's a lot less "known" about the project structure versus those A/E. In one of my projects there is a script I have that creates new "components" by creating something like this structure: src/ components/ new-component/ index.js index.test.js style.sass create.js index.sass I'd be interested in creating something *ad hoc* that could take CLI arguments and/or a config file that has among other things settings for - testing suite - src directory - styling library/strategy used - typings used - etc …that could easily create new files and/or directories with proper `import`s and boilerplate code, e.g. `export default` if a setting was set that this file was for a default export, writing header/footer banner comments with the name of the file, `@flow` comments.
Thanks for the pointers but do you have any reason to why we should use async/await at all? I feel like it's only shugar and it seems to me like you can't easily reproduce Promise.all. 
TS seems to be some pure overhead you can burden your js with. So long as we keep getting a influx of statically typed users switching over, they are going to want to bring their security blankets along with them.
Ahh that sucks! WAMP is pretty standard to be fair. I’d choose to use something like docker instead though but it’s not very beginner friendly. 
Ohk thanks
If you just comparing initial development in Typescript vs. vanilla JS, Typescript will never win. The majority of time spent over the lifetime of a product is on maintenance and refactoring. Perhaps you could duplicate your previous experiment, but instead of creating something new you could refactor a widely used component. IMO this is where Typescript really shines. Rename some properties, remove some unnecessary function arguments. The tooling keeps getting better and can do these things for you automatically. It is a huge investment though to get total team buy-in, and dealing with library typings can sometimes be difficult, but in my experience it's been convincingly worth it. I'll also leave a link to [this paper](http://ttendency.cs.ucl.ac.uk/projects/type_study/documents/type_study.pdf). *TLDR*: 15% of public Github bugs would have been caught by a static type system (Flow or Typescript).
That has been my experience with backend developers, too. There's a certain rigidity of thought that's commonplace in that side of web development that's more or less completely absent in the frontend development world.
No, it isn't. A lambda function is an anonymous function. E.g. `node.addEventListener("click", function() { console.log("clicked"); })` uses a lambda function as a click handler. Arrow functions often are lambdas, but not always. Also, nobody actually uses the term. In the rare case where you actually want to talk about the concept, you're better off saying "anonymous function."
Maybe you’ll like FlowJS? It allows you to run the script even if there are outstanding flow errors. I’m still quite new to it and short term there’s much more work typing everything, but long term when you come back to a project you instantly know what you’re expecting and can grasp the code much better and quickly, instead of going through each line of code.
Didn't you recently decry ES6 arrow functions as 'hipster bullshit'? I'm just not sure I really trust in your 'eighteen years experience'. You don't seem to know any other languages and when challenged on the \`curry\` example you keep trotting out appeared not to be familiar with even basic functional programming.
Hi /u/lord_chihuahua, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/hhntng, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt;I'm worried about performance when the code I write may potentially run hundreds to thousands times per second. This requirement far exceeds the normal requirements for 99% of all web applications. Running **anything** in the browser at hundreds of thousands of times per second is most likely an indication of poor product design. But, hey business requirements are business requirements... I'm genuinely curious as to what you're developing. 
To me that sounds like a step back ;) But how do you experience it?
I spend most of my professional development time, the past few years, writing TS and I wholeheartedly agree.
If you think that's as readable as the code above, then I've got no other arguments. To me, my code was a lot more readable. Even if you don't agree, it's pretty obvious that many developers prefer await over promises, and some prefer promises over await. That's enough to show me that they're both providing benefits that people value.
That's now how argumentation works, but whatever helps you feel better.
Alright, you subjectivity think it looks better. That's a valid argument. I personally don't think it's enough for me to change opinion but i respect that. 
&gt; Do you have examples or description of how it would grow out of proportions? Two companies ago (I work freelance) we had a very strict TS setup. Just one page with a simple API request took 2 developers 2 full working days to implement. It was outrageous, that task would’ve normally taken me a few hours tops. &gt; It has to do with discipline. If you have a tool that enforces discipline, it's better than not having such a tool. You know, everyone makes mistakes sometimes and forgets things, especially if there's 20 other things to keep in mind. Here’s the trick: `c o d i n g c o n v e n t i o n s`. You know what I see TS programmers do, like, a LOT? Their variable names suck: everything is suddenly `user` and they use TS to make it an `object` (user object) or `integer` (user identifier) or `string` (user name). Whereas in the “olden days” we used to simply call them `objUser` and `userID` and `username`. And if I really need to document my code for other people to use, then I’ll use comments. There’s this thing called “jsdoc” that people have been using for a little while now. It’s magnificently simple. Good IDE’s integrate with it, too. &gt; That's good, and IDEs are getting better. But this approach is more explicit, i.e., again, no discipline is required to specify type as part of the variable name. Besides, knowing that there's objPerson doesn't tell you that there's a property objPerson.salaryPerYear, whereas explicit type declaration does. Less things to remember, less mind load. CMD + B leads to the object in WebStorm, and I can see exactly what props are there. And if I’m using a React project as an example: I know just fine what my Redux store looks like… Look, I’m not saying you’re wrong, I’m just saying I hate TS because it’s insulting JS’s beauty of simplicity. &gt; Honestly I'm going to doubt you on that. Either you are an ideal coder and never worked with others in your 18 years, or just simply don't remember instances when it happened. I remember instances when it happened to me. That specific error you can probably avoid by doing destructuring, but similar errors occur quite often unless you use strict types. Seriously, I don’t believe what I’m reading here myself. I use `console.log` religiously, I `debugger` my code like crazy, the dev tools in Chrome are my best friend, I know exactly what my props and objects look like. There is VERY rarely a situation where I pass an argument to a function and do it wrong. Even rarer is a situation where I don’t catch that right away. Even rarer is that code passing a pull request code review. Even rarer is that code not breaking extensive tests. I’m always worked in teams, except for my first 5 years. But back then I had the CTO of a company take me under his wing. That was 2000 to 2005. Maybe I’ve been trained very well. Who knows. &gt; Unless you live in a real world, where nobody has 100% code coverage, and where people write really shitty tests. You don’t need 100% coverage if 80% covers exactly these edge cases. And I live in the real world, my current project is 16 months in the making with 9 developers and we have 94% code coverage. Our git push requirement is a 90% minimum at all times. --- But I give up on this discussion, it's a simple matter of opinion I guess. Fun anecdote: At every company I worked at who used TS, the developers all &amp; always regretted it. Even after being "very experienced" (6+ months of professional TS usage) they would love to switch back to regular ES6.
Are you also the dev that made the NPM dependency checker? Thanks for that!
Yeah, it's definitely a very subjective thing. It's not like await is doing anything that promises didn't. It just changes the syntax. Arrow functions, IMO, are the same way. They simplify scope, but they don't actually make anything new possible. let/const, too. If we're going to talk about "why bother", let and const are high on my list. let at least has some scoping stuff, but const is just something to internally debate about and waste time. But clearly the community things they're are useful, and so there they are.
Hi, thanks, it looks like it should-I’m on 11.4
Aren't all new things hard at first? I struggle with painting. And languages. And piano. And juggling. And whistling with my fingers. Or at least, I used to struggle with all those things. Languages aren't as hard now, because I kept at it. The other stuff is all still hard because I haven't practiced. Programming is something I learned in Elementary school and kept practicing. It's not something I was born with, just something that I kept doing. I fiddled with it on my own for years and years, learning it little by little. Today, I'm a senior developer. My recommendation is to keep using it. Start some small projects. Very, very small projects. And use it.
Your examples look cool
/r/savedyouaclick
Well if we are nitpicking :) let replaces var entirely so its not just a alternative. Arrow functions binds the context with no need for garbage collection, a performance improvement (especially big in react). I get what you mean though. We do not allow var in our company code. 
Hi /u/renderann, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/PlayfulLadder, this post has been removed. I'm not sure what you're looking for, but /r/javascript is for discussing javascript, and a prerequisite of that is knowing javascript.
not all new things have been hard. i struggle with painting too but it doenst warp my mind trying. html and css were a breeze. bootstrap was almost intuitive. javascript makes me second guess the whole effort. 
Hi @kenman No worries.
I was refactoring my code and accidentally pressed ctrl + P and my whole code got fucked :&lt; That sucks. Also support for typescript would be awesome
Are you able to identify what it is in particular that you're having trouble with?
Thank you! Is it https://npm.anvaka.com or something else?
It gives you type safety. On larger projects it means your more likely to find mistakes with refactors and get everything because the compiler won't let you proceed without a correct program. If you use it properly, you won't ever get a TypeError referencing something that doesn't exist. If you use `any` the chances are higher, and if you don't use `strictNullChecks` the chances are higher. It's not perfect... there are cases where the typings are overly complicated. Just take a look at some `.d.ts` files for popular FP libraries like [lodash](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/lodash) or [ramba](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ramda) and you'll see just how completely insane they can get. I recently tried to create a react/redux application, [a solitaire clone](https://github.com/tswaters/klondike) -- and after the initial hump of getting the project setup, the store created with actions and different type definitions for slices of store I was surprised just how well everything came together. Like, an action typically is a regular pojo, you can put anything on it really - but in typescript each one has a definition and you know with certainty what is on that action - and the store also has a definition so if you give it junk in a reducer, it'll tell you.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [DefinitelyTyped/DefinitelyTyped/.../**ramda** (master → 31daeec)](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/31daeec1d063505ba5de7c86abeed9f23a89564e/types/ramda) * [DefinitelyTyped/DefinitelyTyped/.../**lodash** (master → 31daeec)](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/31daeec1d063505ba5de7c86abeed9f23a89564e/types/lodash) ---- 
Do you have any errors in your console? Is the value of d defined or undefined? Do a console.log right after this line of code. I suspect the author has external libraries he is using that you are not. let d = dist(bubble1.x, bubble1.y, bubble2.x ,bubble2.y); console.log(d); 
It's more than just bad coding practices. It's code readability. If I see a variable in the code, I need to know what it actually is. what properties does it have, etc. Strong typing means I always have that information there, and coupled with IDEs and good tooling makes it much, much easier to read and understand the code.
Yup!
I don't know if it was posted before but you have 'sololearn' which offers educational material for different programming languages. Something similar to codeacademy. I hope it helps you at least a little. 
Did you console.log(d)? What did that say?
Number one reason to me to use async/await, and never use promises directly if possible, is that you get to use JavaScript's native exception handling, which promises completely circumvents.
You are not supposed to reproduce Promise.all. Async/await and plain promises all work in conjunction. I have had great use of async, since it is much easier to add an await in the middle of an existing sync function (turning it async) than to rewrite it to use promises manually. I use Typescript, though which really helps with keeping track of what parts are async or not. 
I'm not sure is it only me? the link isn't opening up and I'm using Safari
the problem here is it seems you are comparing learning JavaScript with learning HTML / CSS. HTML is a markup language. There is no logic, you are simply defining a structure to layout a page. CSS is a stylesheet. Again no logic, simply defining how the markup should look on the page. JavaScript is a programming language. Absolutely has logic. Learning and understanding how to think logically like a computer does is hard. I would argue that learning HTML / CSS / JavaScript is about 10% effort for HTML / CSS, and 90% effort into JS. You can't really compare how long it took you to learn HTML / CSS to how long it takes you to learn JavaScript because they are completely different beasts.
Thanks for taking the time to post! I'm mostly in the TS camp myself but I appreciate the insight into some of it's short comings. &amp;#x200B; Is your background primarily in weakly typed languages? I myself came from a primarily C# + Resharper background so typescript is essentially comfort food personally. &amp;#x200B; Also very curious about type validation on projects you've worked on. Do the team you work on make it the callers responsibility to handing in correct data in? Does the function do validation? Is it documentation / convention? Curious on many fronts.
It's really hard to use on mobile on codepen. But seems really useful for beginners. Good job!
Little offtopic, but what can be tested in a small bar chart component? And having 80% coverage means that there are at least 5 branches in this component. I always wanted to start testing my ui but besides the true logic functions I never know where to start. 
Excel online is a data intensive application. Most operations and functions are dealt with ... on the freaking server yet it's still faster than 99% of all the apps out there.
Once you stop thinking about performance, it's hard to start doing this again. Premature disregard of optimization is as evil as premature optimization, IMO. As for my case, I'm writing React utility library. It's up to a developer how it will be used. It's not performance-critical but there's a good chance that performance impact of my code will be noticeable under normal use.
From the top of my mind, we had a bunch of components. Mind you, this was a few weeks later after a full implementation (without TS) :D 1. The wrapping BarChart component containing the data and state 2. BarGroup components to render a singular or plural bar (e.g. we could have a month of December with expenses and profits, needing to render two overlapping bars) 3. Bar component to render a single bar in that BarGroup 4. Baseline component to render the average of one or multiple Bar types 5. And a few minor dumb components like: - "BarLabel" (bottom and/or top labels) - "Tooltip" (mouseover tooltip for bars/baseline) Each component had their own tests. The goal was to make it fully CSS responsive. So every height was calculated in percentages, and the width of bars was based on media queries and also how many bars there were. We had a bunch of BarChart props like: 1. minimumBars (if you have data for 2 bars but you want to show 6, then you need to make 4 empty bars) 2. maximumBars (if you have more data than this number then we show only the last N) 3. height (in pixels) 4. baseline or baselines (number or array for manual baselines) 5. calculateBaselines (boolean true or false to automate the baseline calculation based on the provided data) 6. animated (boolean true/false whether the Bar components would grow from 0% to the target % or not) 7. animatedTimer (numeric value for the timeout after which the bars's percentage value was set) 8. bars (array of objects containing a label and value, where the value could also be another array of bars) And probably a bunch more. So plenty of testing to verify everything worked as expected. 
Someone starting off with WebGL. Of no interest to anyone else.
Your problem is with the `ellipse` shape. According to the documentation, `ellipse` takes 4 arguments, `x` and `y` and then `width` and (optionally) `height`. In your code, you define your _Bubbles_ as having a radius of `r`, but then, when you draw them you draw them with a width of `r`. It should be twice that. ellipse(this.x,this.y,2*this.r);
Vue seems like overkill for this, but that's just me.
&gt;TypeScript is JavaScript with some syntax sugar for stricter typing. and &gt;my issue with TypeScript is that in a supposedly noble attempt to save me from myself, it requires me to do more work in order to achieve what is essentially the same result. Betray a misunderstanding of Typescript's purpose, I think. The first one is straightforward: Typescript is not *syntactic* sugar; you get different *semantics* (meaning) when using TS. Consider this line of code: `let x = 5;` This means something different in Typescript than it does in Javascript. In TS you're declaring a variable that is equal to five and cannot be assigned any value other than a number (and possibly null, depending on compiler settings). In Javascript you're declaring a variable that is equal to five but literally any value can be assigned to it. &amp;#x200B; Now to your second point. In the above example, the resulting JS code is the same, so in that way it is the "same result". But to the compiler, and, more importantly, the developers, the result is *not* the same.
Right. I don't disagree. I just don't know of anything smaller/more limited.
Lol, you disagree about what? that some plugin for babel that is not Javascript syntax is indeed not Javascript? who the fuck are you kidding? Babel + whatever plugin that is not part of the spec is not javascript. 
This doesn't solve any issues except for application size. &amp;#x200B; In this world, that's never an issue.
No it wasn't a good question, he is relying on the behavior of something that did not make the spec yet. For all we know, the final version will support late binding.
Slightly different use case, bit IndexedDB is fantastic for apps using Cordova. Slick interface (especially if you use a wrapper like [Dexie.js](https://dexie.js)) and good indexing abilities. Can implement full text search locally, for instance.
I didn't mean offense with the "misunderstanding" comment. I put your example into the playground and I get an error (red squiggle): [http://www.typescriptlang.org/play/#src=let%20x%20%3D%205%3B%0Ax%20%3D%20%22potato%22](http://www.typescriptlang.org/play/#src=let%20x%20%3D%205%3B%0Ax%20%3D%20%22potato%22) The compiler infers that x is a number, you don't have to explicitly tell it.
Neutralino is a hilarious name
Collision detection is a common use. Another use is determining fill patterns when drawing vector pathing data. 
&gt; I use Typescript, though which really helps with keeping track of what parts are async or not. Agree. Even then there are major problems not caught by the compiler and only caught by tslint (namely, "floating promises").
So many options, off the top of my head: Vue, Angular Elements, Stencil.js, even React with a lighter weight substitute like preact.
You will just be that much more awesome at it when it does click for you! Programming is hard, don’t get discouraged. Take breaks, practice a little C# or Java maybe and get back to it.
But can it restore your files after the Windows 10 sept update deletes them?
Lol i actually used couple days ago but it gave NAN as a result so ye
Yea I fixed the bugs I just recently made a massive update to it and it had a few bugs try it now 
Cool ill give it a shot again
Whats the link tho
I would appreciate if you give me your feedback on it
What device are you using 
I’m not sure of your error, but if you are on a Mac try command + c to stop it. Otherwise just close the terminal and it’ll cancel it out as well.
thanks. happen to know of a good source where I might be able to dig up something on this?
Good point; lol. Sorry -- ZTE N9136 from Boost Mobile using Android 6.0.1. 5" 480x854 pixel display. I was running it through Joey for Reddit's internal browser when this happened though -- in mobile Chrome it opened a natural blue/white date picker. So, it is most likely because of Joey and the fact I'm using a really dark theme in the app, and may not actually be an issue with your site.
Yea media queries doesn’t like internet explorer or other browsers like it lol i will take a look at thanks for thanking the time to give me feedback.
My man! You seem to have spent some significant time dealing with line intersection algos. In my [diagramming project](https://github.com/DrummerHead/react-flow-diagram) I'm using a function to get intersection between two lines. It was one of the few aspects of the program I actually didn't program from scratch because I found that it wasn't as trivial as the other problems I faced. Is [this algo](https://github.com/DrummerHead/react-flow-diagram/blob/master/src/links/calcLinkPoints.js#L80-L103) complete shit? Or decent? How would you improve on it, given your knowledge? Thanks for any info!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [DrummerHead/react-flow-diagram/.../**calcLinkPoints.js#L80-L103** (master → 57cf5f5)](https://github.com/DrummerHead/react-flow-diagram/blob/57cf5f5eadaa5bccd14fe42eef3c2352199d677a/src/links/calcLinkPoints.js#L80-L103) ---- 
I have added context surrounding the interview question itself, have a look
Joey is an Android app; I think it uses Android System WebView (Chrome-like) or Chrome Custom Tabs from the mobile version, but IDK which. With Joey using a bright theme the site is still extremely dark just like it was before. So, whatever Joey is using internally seems to mostly honor your theme, but the mobile Chrome browser doesn't? This doesn't make any sense :-? There is /r/JoeyForReddit if you'd like to try to talk to their devs, or you or I could submit a bug report to them if that seems more reasonable. If it is your theme though maybe a slightly lighter grey in the picker could work better to help it stand out (if that's doable), or using white to make the whole thing pop out, but of course that's kinda the anti of the current theme of extremely dark.
Yea is the browser different browser have there own thing going on that’s why I had to usé prefixes for example WebKit / moz / ms for backgrounds shadow text-shadow etc, bout it’s a process to get all the little media queries bugs thanks for your feedback.
Thank you. Great way to learn
Thanks! I'll check those changes :D glad to know I wasn't far off
Whoops, likely webgl is not supported on your device? I forgot to do the error checking for this in the demo - sorry!
404?
You might like [this pattern](https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/) for transforming try-await-catch into an (error, result) pair: async function getWidgets() { const [partsError, parts] = await catchify(getParts()) if (partsError) { // specific error handling - log, rethrow, exit early, whatever log.error('No parts!', partsError) return [] } const [assemblyError, widgets] = await catchify(assemble(parts)) if (assemblyError) { log.error('Could not assemble parts', parts, assemblyError) return [] } return widgets } This is not a perfect solution. Even though my team knows about this pattern and uses it somewhat regularly, it feels (subjectively) like we're writing fewer error handlers than we used to write before async and await landed in Node.
Angular is the only framework. React and Vue are libraries. 
In what "desktop world" do you live in?. I have a relatively beefy development laptop at work which could simultaneously run two instances of Visual Studio, one SQL server, Chrome, Outlook and Word without breaking a sweat. Then, we started using Slack (Electron-based) and my PC started hanging or slowing to a crawl. Task Manager showed that one instance of Slack was using more memory than everything else combined. That's a serious problem that someone needed to solve, maybe Neutralino will.
Gatsby and Next are very different, Gatsby compiles to static HTML and JS, Next runs it's own web server and dynamically server renders your site.
There's an emoji in the URL that seems to botch some clients. The link works fine if you remove it: https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast/
Theres a reason the salaries for web development are often 6 figures, it's not easy. Takes time and effort. What part are you struggling with? Are you still working on the basics? Also, it can be tricky sometimes when you hop from course to course, because sometimes the courses don't seem that related, and the progression is weird, maybe it's more advanced then where you should be. I know some online classes can be hit or miss also, if you're still on the basics you should try the book head first javascript, it's really good for nailing down the basics, it's a book that is for everyone, and is way more entertaining to read because they throw in a little bit of humor and relatable analogies. I wouldn't give up just yet. I'd keep going for at least a little while longer. Start building a project or two before you realize it's not for you. Best of luck
Hi /u/prof3ssorSt3v3, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
There is the constant yelling about how electron is bloated and so anything to change perception would help...download size being one thing perhaps. I say this as someone who has done an electron app and I wish there wasn't so much negativity...I mean we have a web version too no one complains about the web...
StencilJS, not a framework, but a compiler which generates vanilla web components.
https://github.com/facebook/create-react-app/pull/4837
No, if I am linting my code, the most important thing is that it fails at build time. Editor integration and in-browser lint output it just a nice add-on.
I feel like there pay be a cool application in city roads too... just not sure what.
&gt; https://www.codespeedy.com/bottom-sticky-music-player-javascript-css/ site poisoned by cloudflare and I shitlisted it another one bites the dust
Well yeah angular is a mistake as everything in it can be now be done in vanilla. But maybe it was the necessary mistake to guide the community in the right direction? 
Learning angular 6 so this question seems really relevant. I’ve heard that it’s better then php for ease of use and older browser support. Am I making a mistake?
can't wait for the day people stop worrying about what framework/no-framework/language/syntax/preprocessor/toilet other developers use. If you don't enjoy it, stop using it or find another job (if you don't have influence in that kind of decisions)
PHP has nothing to do with angular. PHP runs on the backend and is browser agnostic. Angular runs on the frontend and therefore doesn't run in older browser versions. This being said, Angular supports IE11 and if you don't plan on working for a company that still supports IE6 (there are a few of those around), then go ahead. Knowledge is never a mistake.
&gt; I’ve heard that it’s better then php Wat?
It’s all about how likely it is you're going to get a new job in the future. Knowing the right frameworks helps a lot.
Still using AngularJS 1.7 for not-so-average CRUD apps and for Ionic 1 hybrid apps. Considering the rest of my day is maintaining jquery spaghetti code, I love it. Although it's not easy to land on best practices, it allows for incremental changes in the code base and double-binding is a good trade-off.
I understand they are nothing alike but in terms of node.js, js can be used for both front end and back-end where php cannot at least on modern browsers. Do I have this right?
Hi there, There are multiple ways to do it like mentioned in the comments ( write vanilla, write es6 then convert to vanilla) But for your question, (IMO) yeh Vue is still a good way, you'll probably want to know why, so: 1. Only 18-19k, so the size is no issue 2. You get all the benefits of Vue, 3. You'll work in the easy way, es6,npm,vue-cli 4. And if it comes to it, and performance is a concern, then you always have NUXT to render the first request to your widget. Hope it helps.
It could always be done in vanilla? Angular is written with vanilla JS after all.
I’m looking for serious answers here... I am looking for the best skills to learn to land a job. I know objective-c and swift and an looking to get into full-stack web dev. I am familiar with node.js, mongoDB, Angular, JS, CSS, HTML5, jquery, SQL. I know the basics of each and am looking for a focus. I’ve seen a lot of ads saying angular is an in-demand job so is this the right route or am I wasting my time?
You’re not going to make a mistake by learning something new. Especially if your goal is to become a software engineer, then you’re likely going to pick up alot more. Althought I wouldnt recommend angular if this is your first front end framework. That being said, yes, angular and node is a pretty popular stack.
Oh no not again. Why are we always fighting? 😣
TL;DR: Angular is overrated a bloated. You should check out Aurelia. I used to love Angular 1.x and was closely watching a anticipating the 2.x version but got very disappointed by se design decisions. As far I remember they tried dropping two way binding and forced us to create dozens of event handlers on inputs and methods I'm contriller that assign the values back to model. That was a big NO. And them there were few more things that made me jump the ship. Aurelia is what Angular 2+ should've always been. I've been using Aurelia happily ever since and my code is clean and it just works. And I'd recommend you checking it out
I don't like frameworks with too much opinion in their code. I don't like Angular's syntax. I don't like how the templates look like Handlebars templates, but aren't. I dislike Typescript. So I don't work with it. There are plenty of tools out there in high demand that I do like :)
That's cool as shit, how competitive is chrome when it comes to stuff like this? 
Agree with all of this. Angular has a bunch of bad opinions.
Both returns will trigger, at different points, because it's a recursive function. I suggest you try stepping through with a debugger, if you don't follow what's going on
You tha real MVP son. Yeah I can completely understand how that as an interview question would throw you, especially if they're pointing out it's an uncommon question. I'd veer towards it being a confusing interview question. Whether intentional or not (ie: Are they trying to catch you out for some reason) i'm not sure, but it's not great.
\&gt; How long will the data persist in storage Unless you are in some form of safe browsing / incognito mode the data will be persisted until the user explicitly clears it, and IIRC it isn't cleared with a normal "clear cache" call as that removes transient rereadable data and the local storage options (localstorage, indexeddb, ...) are deliberately more permanent. (it will be removed by clear history) The data is persisted to disk though the location will vary by browser (in Chrome under Windows you'll find it in \`%USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\IndexedDB\`) \&gt; what are some good use cases for this The use cases are basically the same as the simpler \`localstorage\`: * It is often used as a local-only cookie store, allowing more state to be saved and without it being sent back to the server on every request (just when the app's client-side code decides to send some back). * As a dark pattern extension to the above it is sometimes used as a way to get around cookie storage limitations when people are trying to track you. * Web applications that are offline capable will use it to save their state for use while disconnected. * More complex applications, even those intended for online only use, might use it as a more manual cache, making sure that some content is always available without a server request.
Wow, nice job! 
Webstorm?
umm... it can. Just grab VSCode or Atom and install the plugins you need to make it as complete and IDEy as you want. 
VS Code is pretty well prepared for editing JavaScript files.
Intellij IDEA Ultimate is what I use. I have it set up so that when I make a change to a file it automagically prettiers it for me.
No, because webassembly is fast in ways that don't help UI toolkits. It's fast when doing calculations, but the slow parts of UI libraries is interacting with the DOM. If I'm not mistaken, webasm doesn't even have DOM bindings right now, so not only would it not be faster,
```canvas{height:100vh}```
Can confirm that where I live, React is more popular amongst developers. I've worked on angularJS and 2+, and I don't mind either tbh. Js can be a bit finnicky, I genuinely don't prefer one over the other.
PHP can 100% be used on the front end. What are you talking about?
Exactly, by the same company that made the great Intellij Idea, which also is the base of Android Studio, and if you want even more, there's also PHPStorm that also includes many backend languages
Alright. thanks for the answer!
I fucking love Angular. It's so ridiculously powerful, and with Angular CLI almost every Angular project is structured the same. There's a consistency that you typically won't find with other projects. The scalability is unrivaled. The down side is the horrible learning curve, but to be fair, that's mostly RxJs. That being said, if you're looking for a job, learn React. The learning curve is MUCH lower, and it's all the hotness right now. Although, because of Angular's learning curve and React's popularity, the jobs tend to pay more, but they're harder to come by. 
Please link me to an example of this monstrosity, guessing it's a JS based interpreter?
AngularJS is awesome in my opinion, considering I've only used pure JS and some Jquery at the time, nowadays I use Angular (4,5,6,7...) and love it, studied and used some React and still prefer Angular, although React is incredible too. One of the things that make me like Angular so much is the amount of similarities with the Android framework, thus requiring very little effort for me to switch gears when I want to go from mobile to frontend
i have atom and now use VSCode but it always seems like something is missing .. like their isn't something that is ultimately built for js .. in comparison if you use like android studio .. the little things like auto import and goto declaration like features saves you a lot of time .. and you don't need to customize anything or download and search for a whole lot of plugins to make it work ... 
Cool project, I will definetly try this out. Just to suggest an improvement for the future: Add if possible more "manual filters". Presets are great tho. :thump\_up:
Agree... it was hell for a couple of months of learning myself but then making web apps became a one week job.
Great read, shared within our teams - thanks!!
We use WebStorm and VSCode on site. I use WebStorm on my personal machine. Both very capable. 
Is this direct bitwise replacement of the binary character code with 8203 and 8204? Interesting, 
```function isStooge(name) { const STOOGES = ['Larry', 'Curly', 'Moe']; return STOOGES.includes(name); };``` &gt; While it is a small object, it is created every time the function runs. This seems like one relatively simple and obvious optimisation for any javascript engine developer. I did go and wrote a small test case for this and *found no real performance difference* between declaring the array outside the function or inside it. This article smells terribly of premature optimisation, and worse yet, doesn't measure whether it's faster or not. It succumbs to one of the worst sins in optimisation - doing it prematurely and on a whim. Please don't be like the author and write optimisations only based on preconceptions and gut feelings.
Serious positions in serious companies are looking for developers not framework specialists and I think this is what OP can’t wait for
Not stupid - just different perspective. IMHO if knowing Angular/React/Vue/YouNameIt is a deciding factor to get your NEXT job - you are doing it wrong. Also denying someone only cause of that he/she doesn’t know XYZ framework is just idiotic.
In an ideal world you’re right but the world isn’t ideal 
Thank you. Does next.js have any advantages over the other alternatives (Preact, Vue, etc)?
Is it popular because people enjoy using it or is it popular because there is a lot of demand for it? For example, SAP and Salesforce are quite popular among a subset of developers who don't care much about the tech they use but how well paying it is. So, is Angular development enjoyable or is it like, say, JavaServer Faces: a cosmic pain in the neck that was widely popular in enterprise environments?
Looks great! Now to decide which framework to use...
Thank you for your comment! It’s interesting to hear another side to Polymer (in comparison to @drcmda’s thoughts...)
If it renders to webgl instead of the DOM, insanely so. Otherwise, not for a while. 
Should be “How Much Time Do I Have Left” at the bottom.
Please don't, this is not actually a good idea.
There are multiple JavaScript IDEs that give similar power to "full fleged IDE"s. Eclipse IDE for example, with the https://marketplace.eclipse.org/content/wild-web-developer-web-development-eclipse-ide-experimental extension, is capable of what you're asking for.
Unfortunately this is only partly true. At then end of the day, I don't care whether you have experience in Angular/React/Vue/Whatever but I'm definitely going to give you bonus points for exposure to multiple frameworks. No framework experience is a red flag. Additionally, in my experience interviewing JS developers, being an expert at React tends to correlate more strongly with being an expert in JavaScript. The React ecosystem more directly embraces JS patterns, rather than attempting to abstract them away. For example, you must understand higher order functions to write React since that is how the event system works. Conversely, Angular abstracts this away into an `EventEmitter` class. Additionally, my experience has been that React experience is more transferrable than Angular experience. React developers with no exposure to Angular tend to pick it up faster than the inverse. So at the end of the day, If I see nothing but Angular on your resume, it is certainly not a red flag, but I am going to be more concerned with vetting your understanding of how JavaScript _actually_ works.
Looking at the initial list in the question, it seems mostly to be about OSS IDEs. IntelliJ Ultimate is not.
Looking at the initial list in the question, it seems mostly to be about OSS IDEs. WebStorm is not.
I've got no problems with RxJS, monadic streams are great, but I find Angular incredibly tedious. The fact that you *need* a CLI because otherwise you'd be spending too much time on plumbing is a huge problem for me. Additionally the cost of component abstraction (in dev time) is so much higher. The plumbing in react is all just passing around functions, and it is so much more straightforward.
It's also pretty much Google alone who's using it at this point. I've been using Polymer since 0.5 and it was one hell-ride with insane breaking changes and course switches, they explored everything left and right from bower to npm to html includes to javascript imports - never once knowing where their goals are supposed to be. Preact and React are exchangeable btw, you can write in React and alias to Preact (or something else, like JD.com's NervJS) in production. I wouldn't give up on Reacts features just to loose a couple of KB. The fastest framework will be the upcoming React, it goes far beyond micro benchmarks as it ships am async scheduler: https://youtu.be/nLF0n9SACd4?t=182
I don't think i'd want to mess around with tagged string literals. The whole idea of betting on web components as component glue is going backwards imo. And again, no one is using this stuff, web developers have largely ignored the spec, because it is far fetched from current evolving standards which have already left the browser behind and enable javascript to drive applications anywhere. If it had any merit, it would have gained some traction over the last 4-5 years - but it didn't.
It's not possible directly but nothing stops you from calling JS functions that alter the DOM instead. There's already a C# Web UI framework that does work right now. (Was it called "blazor"? That or something similar) But it's true, the DOM API is the bottle neck. Unless... I wonder what the situation will be if you take Project Houdini into account and you access the rendering engine directly from within WASM. That's going to be interesting, I think.
can you please be more specific 
&gt;thanks for the detailed advice, I'll spend some time looking into supertest and sinon, and come back to your example.
 function isStooge(name) { const STOOGES = ['Larry', 'Curly', 'Moe']; return STOOGES.includes(name); }; 90% sure the engine will tag that array for re-use. In fact, wasn't the cause of that recent iOS 12 array reversal issue that reversed array literals were being re-used inappropriately?
I guess I wanted a simple rule to follow either put validation in hooks or keep it in the controller, but from the responses it looks like its not required and its ok to use the hooks.
It's so cool, and as potentially a lot of uses!
A singleton instance will also work similar to the static method syntax. But I don't see much benefit, outside of style, to static methods or singletons for this type of thing over the ES6 module alternative.
Are those chives on a cupcake?
Android Studio isn't open source and is built on the IntelliJ platform.
Pistachio shavings &amp;#x200B;
I guess that's better, but not by much.
I wish they would use 0 as the base of the graph, but good progress nonetheless.
True in theory but not in this case. For Slack, at least, the bloated binary combined with bad memory management means that it hogs more memory than any application I've ever seen. Saying that "application size is never an issue" is both wrong and wrong-headed. That way of thinking leads to simple desktop apps that are 100MB downloads and simple mobile games that take more space on my phone than the entire Window runtime of 10 years ago.
`canvas {` `width: 100vw;` `height: 100vh;` `}` ?
&gt; In fact, wasn't the cause of that recent iOS 12 array reversal issue that mutated array literals were being re-used inappropriately? Ding-ding-ding! Yes. JSC does copy-on-write of arrays and objects consisting purely of literals.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Lin Clark has a talk that goes into this topic for React: [What WebAssembly means for React](https://www.youtube.com/watch?v=3GHJ4cbxsVQ). It's been a while since I saw the talk, but if I recall correctly there wasn't too much to gain from rewriting React to use wasm. However, certain specific computations (of the reconciliation process) could be moved to wasm with potential speed gains.
&gt;Thank you! Thank you so much! But why so? I still do not understand why it worked.
VSCode has auto import and goto declaration.
VS Code is very much built for JavaScript. I use it for TypeScript professionally and I get all these things out of the box. CTRL + Click will go to definition, CTRL + R will go to a file within the project, CTRL + G will go to a line/column. &amp;#x200B; A lot of what VSCode supports is dependent on the extension you have installed for that specific language, but in terms of HTML, CSS, and JS, it doesn't seem to need any extensions to make these work. Also, like it or not, text editors have realized that extensions are a powerful tool and an easy way to get new support &amp; functionality into their editor without baking it in the product. Besides a small list of extensions, most is already provided. &amp;#x200B; It may simply be a case that you are unfamiliar with the tool, which is fine, but that doesn't mean VSCode is not effectively a JS IDE. If you're having trouble learning VS Code, I'd be happy to help.
The only thing that was wrong is that _visually_ the bubbles were _half_ the size as they were defined. The calculations were correct, but you saw the circles smaller than they should've been. This because, the _width_ `ellipse` takes to draw the circle is the diameter, not the radius as you were passing. So you were doing the calculations with some radius, but then you were drawing the circles at radius/2.
You don't _need_ a CLI. They created it, because it creates a common structure and pushes a best practice. I was a part of the largest initial Angular enterprise app (there was no CLI yet), and I have no idea what you're talking about spending too much time on plumbing. I also have no idea what you're talking about with component abstraction and dev time cost. React has the luxury of being more straight forward, because it doesn't do as much as Angular. That's the one thing I don't understand. Why do people keep comparing the two. They're not even close to the same thing. React will always be easier to learn, because IT DOESN'T DO AS MUCH. That's like saying "It's so much easier to learn to fix a Radio Flyer wagon that to fix this BMW." There's more to it. Of course it will take longer. 
You're only talking about the numbers in your comments, which are confirmed with the logs. Do you understand how or why they get there through the syntax you're using?
[https://github.com/haltu/muuri](https://github.com/haltu/muuri) might help
They would benefit, but only marginally. Still, any marginal gain for a widespread library is an aggregate big win for the Web platform.
"I dislike typescript" I'm gonna stop you right there.
Yeah, I believe so. My comments are confirming what I know about it. 
Thank you so much. Now i understand. This is why i love reddit. 
This is a good idea. Thanks.
Anyone here interested in Ethereum and/or decentralized applications? If you are, I just launched a beta version of a dapp I have been working on for the past few months. **Description**: Bet Dex is a dapp (decentralized application on the Ethereum network) for making predictions on real-live events (i.e. sports or politics) using the ether cryptocurrency. The website frontend was built with react and redux. And the website backend was built with express. **Link to website**: https://betdex.io/ **Smart Contract**: https://gitlab.com/bet-dex/smart-contracts/blob/master/contracts/BetDex.sol Any feedback or questions you have are welcome!
Because JavaScript runs in a browser, along with the UI. You could theoretically have an IDE meld with a browser, but every attempt at that I have seen is garbage.
When you pass an onClick, it has to be in the form of a function definition, not the call itself. Try removing the () from your onclick handler
&gt; it is not a fully capable framework like Angular. well... fight over I guess... &amp;#x200B; &amp;#x200B;
the console log runs when the script is initially parsed. myFunction only gets called when the button is clicked (after parsing) - and that has no log in it so the log only gets called once, and always before anyone has a chance to click the button. Because `Tx` was never given an initial value, it defaults to `undefined` which will result in `NaN` when passed into Math.cbrt().
Value could be a string?
The children who fought in the Playstation vs XBox war need a new one.
Thank you for your input! I would love to have an answer for the questions you purposed. Can you please? :)
You need to post your code (ideally on a site like StackOverflow that's specifically designed for such questions, but this site works too). The core of that snippet you provided: var counter = 0; setInterval(change, 1000); function change() { // use counter counter++; } should totally work, so there's probably something wrong with the "// use counter" part.
I benched it. http://jsbench.github.io/#ad5a3588a6fd15b5e6030310bc899e95 Results on Chrome especially were surprising. The class static method was the fastest. By far. By more than an order of magnitude. Of the others, the original "unoptimized" version was fastest. FF and Edge behaved more like how we would naively expect. The original "unoptimized" version was slightly slowest, the others roughly on par with each other. The lesson here: Don't assume. **Measure**.
yes it does work but are there any ways to use `Tx` as a globe variable when in **onclick function**?
nice idea
Yeah, I did link to the code I have on JSFiddle, both the one that makes the text change (as it should, and how I want the image to change instead), as well as the code I've tried to warp to make the image change instead (which is just firing off the same image over and over again).
Do you know any of the answers already? 
Return the value from function then.
Then OP needs to build the FOSS change he wants to see in the world ¯\\\_(ツ)\_/¯ But that's a fair guess on OP's question! Thanks :)
Why can't we have nice things like peer review to prevent crap like this from being published? &amp;#x200B; &amp;#x200B;
From the benchmarks I saw WEBA isn't that faster then JS and it's main benefit is ability to share code base with browser
Thanks so much! [Here's the SO link](https://stackoverflow.com/questions/52724143/trying-to-make-a-variable-have-a-different-value-each-refresh-of-a-setinterval). I figured it must be something like the placement of some of my content. I'm trying to figure out the correct syntax for that function now that includes those elements, but I'll take a look at the SO in case you happen to write it out there. Thanks again!
Use TypeScript. JS will eventually need type hint to do a full pledged autocompletion. Even in IntelliJ, you need to provide JSDOC or Flow to do a correct autocompletion. Else it just shows every possible options. It is not matter of IDE but language
Not really sure if units were ever optional. My guess is that whatever browser you were using before wasn't up to specs, and now browsers are which revealed the error.
To make it clearer: &amp;#x200B; &lt;html&gt; &lt;head&gt; &lt;title&gt;test&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;input id="Tension" type="text"&gt; &lt;button onclick="myFunction()"&gt;press&lt;/button&gt; &lt;/div&gt; &lt;script&gt; function myFunction() { var d, check, Tx, T; T = 552000; Tx = document.getElementById("Tension").value; check = false; if (Tx &gt;= 15 &amp;&amp; Tx &lt;= 30) { check = true; d = Math.cbrt(T / (0.2 * Tx)); var good_Number = (Math.floor((d * 10000))) / 10000; console.log("shaft diameter is: " + good_Number + " mm"); } else { console.log("Nothing: " + Tx); } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; If I want add other variables to `myFunction`? So I have to put everything in **function ? it doesn't make any sense!**
You don't have to put everything in functions, but if you have variables you use in functions, then yeah, put those variables in those functions. That makes sense to me, at least.
Exactly thats what I really hate about it.
Performance issues aside, when would one be inclined to write a function like this "unoptimized" one? An array literal inside a function that checks if the array contains an item is beyond contrived. Hence, I'm having trouble generalizing this pattern to something not contrived. 
This. So much this.
It might be helpful in terms of terms of parse time, so could potentially improve time to interactive. On the other hand, being forced to use AOT compilation probably negates this. It probably needs a JIT, garbage collection, and DOM bindings to be a useful compile target for typical web applications.
Yeah will definitely be interesting once webasm gets lower level access to rendering. Webgl is cool, but not practical for UIs without reimplementing a ton of solved problems like layout and text rendering. I hadn't heard of Project Houdini, sounds interesting. Seems a little bit analogous to when GPUs moved from fixed to programmable shaders, will be cool to see what comes of it.
You do need the console.log inside the function assuming you want the log to happen when the button is clicked, the variable can be outside in the global scope as you have it. What’s the issue?
If you read the other comments, looks like the peer review is happening right here.
Asking the real questions.
You're doing that now using the `value` property. That's the correct way.
I use PHPStorm and it's nice it includes all the Webstorm stuff. 
I don't mean to sound insulting, but did you literally add these two lines? //var newURL = camurl + randomNumber(); //var newerURL = '&lt;img id="cam1" src="' + newURL + '"/&gt;&lt;br&gt;'; ? If so, you need to remove the "//" in front of them.
&gt; It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account. https://www.reddit.com/wiki/selfpromotion
Ok he touts this as faster or better optimized, but doesn't give any benchmarks or anything to back up those claims?
Don't get me wrong, because when a user types a value to a variable then click, I need it to be used as a globe variable. But now, the value will be used as a local variable when inside **onclick** function (by default), I have no idea to make it transfer to globe type. If without having onclick such as: `var x;` `function myFunction() {x = document.getElementById("something").value;}` *x will be used as globe variable* (But onclick function doesn't work on the same way) If you have any ways to make that happen. I'd love to hear from you!
Having two similar candidates for the role, one with experience with your turbo framework and the other one without, who would you choose?
Yeah but this got out and impressionable engineers are putting it into practice and screwing up production code. I guarantee it. 
JavaScript is fast. Don't optimize your code until you have a confirmed performance issue. If a function works best for your architectural approach, then use a function.
Agreed. Specially on no framework experience is a red flag.
I don't like it. It just doesn't flow well with idiomatic JavaScript.
Actually, Angular is used a lot by a lot of big companies, and it's not just legacy code. Angular 7 is about to become stable and many new projects are being created and maintained with these newer versions of Angular. Talking legacy, there are indeed many projects with AngularJS &lt; 1.6 . &amp;#x200B; React is very hot right now and has been for a while, but it's mostly startups and newer companies.
I love it. Feel very productive with it. It just makes sense to me.
Is there a way to set it more abstractly, something like `let stuff[] = {}`? (which i know won't work, but it's the potential effect I'm asking about)
Dude. This is COOL! How long have you been working on this?
No, I removed the comments from them. They were in that same spot, though, and the resulting page output nothing instead with them there. So I commented them out.
Vue has a very practical and easy to learn API. Yes, it's easier.
Been working on it about a month. Still lots of bugs to work out but I'm really happy with out it turned out. [JS Interpreter](https://github.com/NeilFraser/JS-Interpreter) does a lot of the heavy lifting (which leverages Acorn for the AST stuff). From there I hook into JS-Interpreter's step function and do all the parsing. 😊
Personally, I love Angular. It does have a learning curve, because there is always an "Angular way" of doing things. But I find that after learning the "Angular ways", most of the reasons behind their best practices and design patterns in the framework are sorta like rails - they help you keep a clean, easy to maintain project. Of course, you have to learn their ways and practice them to benefit from it. I think this can be said for just about any framework that is worth anything, though. 
I wouldn't even say it's just newer companies and startups. The company I work for has been around for 8 years, and the company we split from (we still work with them heavily as a sister company, but we also have our own clients) has been going for at least 12 years. Certainly not really old companies, but very clearly well established. Most of our main projects are developed in node and react. We have 1 AngularJS (v1.5) project, but that's soon likely to be rewritten in React as well. Me and the other person who've worked on it have just been doing maintenance releases with minor fixes and additions, but we know how much more performance we'd be able to get if we rewrite it in a framework we're both fluent in. We have a project that's primarily server-side rendered and uses limited jquery on the front-end, and more of us would be able to jump into that and make changes without too much hassle (but then again it's not as powerful as Angular). The sheer number of sites that use react, and the companies they belong to, is a solid indicator that it's not even a case of being mostly startups and newer companies.
This is awesome! Great job. Do you plan to add support for ES6 syntax too? 
Thanks, I'm kind of out the loop sadly
Yeah, I definitely gotta admit I was wrong on that statement. What I meant was React is very popular among newer companies and startups because of the cutting-edge feeling of using it with all its tools and libraries (babel, redux ...). And that's why we see so many react jobs. Those people are hiring like crazy nowadays.
Now THAT is a great example of leveraging existing tools. Nice!
Can we take a step back here? You seem *extremely* new to Javascript, and as myself and others pointed out, your entire goal is futile (ie. you're not really hiding anything from any attacker). It feels a bit like you're in over your head, trying to do something pointless and not knowing how to even do the most basic debugging to make it happen. Why?
Currently I'm reading Vue's docs and I find it more easy than Angular and I think most of things done by angular can be done easily using Vue
dude give the post at least a day before reposting!
even what you are proposing as the potential effect you are looking for would not work. const stuff = []; stuff.push({}); stuff[0].my.value = 'data'; would still throw the same error, because `my` is not a property on the top level object in the array of `stuff` you can always do stuff[0].my = { value: 'data', } which would solve that issue, but i don't know if you are intending on using this in some kind of loop or something where `my` may or may not be defined. if that is the case you can even do something like stuff[0].my = { ...stuff[0].my, value: 'data', } 
Funny, I'm just now finishing up the Scopes &amp; Closures book from You Don't Know JS. This is awesome, thanks for sharing
Here is an asynchronous function: const alertAsync = message =&gt; { if (typeof message !== 'string') { throw new Error('Message must be a string.'); } setTimeout( () =&gt; { alert(message); }, 5000 ); }; Here is an asynchronous function with a callback: const alertAsync = (message, cb) =&gt; { if (typeof message !== 'string') { cb(new Error('Message must be a string.'); } else { setTimeout( () =&gt; { alert(message); }, 5000 ); } }; In my example, the callback does not have a data parameter, just an error one, because alerting doesn't return anything, but I digress. Error and contents get set _when they are available_. The point of a callback is that the data is not available synchronously. It is available _asynchronously_. That is, it's available _at some point in the future_. What will be the value of `Math.random()` in 5000 milliseconds? Let's find out. const futureValue = (cb) =&gt; { setTimeout( () =&gt; { cb(null, Math.random()); }, 5000 ); }; futureValue((err, value) =&gt; { alert('The value of Math.random was ' + value); }); value didn't exist until five seconds later. I can't have said `value = futureValue()`, because there was no data that existed at the time. I had to wait for futureValue to finish doing whatever it was doing before it could tell me. These delays aren't always as pointless as an arbitrary `setTimeout` They are usually physical delays, such as how fast a hard disk can be read or _how fast a network connection can upload and download data_. If I ask to download a huge file, I can have the application completely freeze and be unusable until all 300MB are downloaded, _or_ I can let it download in the background and let me know when it's done. download('some huge file', (err, fileContents) =&gt; { now_I_have_all_300_megabytes(); }); stuffHappeningUntilAll300MegabytesFinishDownloading(); `fileContents` does not exist for a while. Typically, the parameters get set as soon as the function is called. If an error occurred, why continue downloading the huge file? It will just call your callback with the error and save itself the clock cycles. If the file has downloaded, why would they make you wait an arbitrary amount of time before telling you? It will just call your callback with the file contents. The callback exists because neither error nor response exist at the time you evoke the asynchronous function. Again, this is typically due to the physical impossibility of that data being immediately accessible. The benefit of a callback is that you can do other stuff while it processes in the background. And it lets you know when it's done by executing your callback function. An async function executes, at earliest, at the end of the call stack. asyncFunction(callbackFunction); synchronousCode(); // callbackFunction executes here If the call stack takes longer than the async function, _the call stack has priority_.
I'm not quite sure that's going to happen, if only for the fact that React is maintained by a multi-billion dollar company, while Vue is not. The other side of the coin, however, is that there are still far more jobs for React than there are for Vue and Angular combined. [Hacker News has a monthly report on this](https://www.hntrends.com/2018/aug-summer-hiring-heats-up-react-fire.html?compare=react&amp;compare=vue&amp;compare=angular+2&amp;compare=). And, for better or worse, this sort of trend is hard to shake, or at least it takes months and months and months to shake 
[Object.asign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
Not for _function calls_, no.
spread operator? Your 2nd block is what I figured I'd need to do, but I was wondering if there was a more abstract way than doing that individually thru every loop iteration. Last block may answer [another question I just asked](https://www.reddit.com/r/javascript/comments/9mseni/can_the_below_code_snip_be_simplified_by_using/). Would that take the existing values of `stuff[x]`, and add them to the declaration? so that the end result is data added to the original object? That sounds convenient but dangerous.
I saw your prev reply and asked just that. Thanks.
I saw your prev reply and asked just that. Thanks. I'll bet there's some wizardry that could get it done, but at the expense of the brevity I was looking for.
[Broke it](https://tylermcginnis.com/javascript-visualizer/?code=var%20deepnis%20%3D%205%3B%0Avar%20doIt%20%3D%20function%28%29%20%7B%0A%20%20if%20%28deepnis--%20%3E%200%29%20doIt%28%29%3B%0A%7D%3B%0AdoIt%28%29%3B).
[Yup](https://github.com/tylermcginnis/javascriptvisualizer/issues/13)
Eventually. :) 
Well, I have taken some, several times over even, but alright. You're right; not really a point in continuing this. Thanks for your initial efforts nonetheless. 
You should pick the framework you like, its good you know now. I would say that framework popularity isn’t as great a reason to choose as you think, since the amount of competition applying to jobs that use the trending framework trends right along with it. Also, trend followers are turds.
The callback isn't added to the queue (job queue) until after readFile has completed. Queues in the event loop are where completed actions are stored until they can be executed. If something is in the queue, it can potentially be run right now. readFile can't add its callback to the queue until after a file has been read. The actual process of reading the file is handled outside of JavaScript, most likely in some separate thread, happening some time after the original call to readFile itself, though it is that call that starts this process. The fact that readFile can take some time is why it behaves this way - being asynchronous - allowing other code to execute while it works on reading. This is also why a callback is needed because the results of that call will not be able to be returned to the current call stack. That callback isn't called until after the readFile operation is complete and all data such as `err` and `contents` are available. Only then will the callback will be added to the queue - and not so much the callback itself directly, but more like the task of calling the callback with the arguments for `err` and `contents`.
I hope it was at least a learning experience, and I really think if you bone up on your Javascript fundamentals future tasks like this will be *much* easier. Good luck!
That's pretty much what I figured. Thanks.
Vue and Angular solve different problems. It's not apples to apples. It's like comparing an engine to an entire car. Vue basically keeps a DOM up to date. Angular does that and gives you service architecture, http client, navigation/routing/pushstate management, code splitting, command line tools for project mgmt, etc etc etc. Angular is a framework, Vue is a tool you use in your own cobbled together framework of various tools that solve the gamut of problems that Angular solves cohesively.
I don't think the issue is "What is easier" but what works better for you? &amp;#x200B; I would say that Vue is by far the easier application to develop as a solo developer, or a small application. But when you get into a larger application - something like an enterprise app or a frontend for, I don't know, a flight scheduler, then you have multiple people working on the project, making changes to the code. &amp;#x200B; Vue's strength is its flexibility. But that's also its weakness -- because there are 5 different ways to accomplish the same goal in Vue, it can be tempting for each developer to find their favorite and go with that version alone. That can make organizing a multi-developer project a nightmare if you don't have someone doing quality control. &amp;#x200B; On the other hand, the very opinionated nature of Angular means that each individual developer might have a harder time getting up to speed, but that the project as a whole will be easier to manage. So you see a lot of companies going with Angular even if the individual developers prefer Vue. &amp;#x200B; And that's alright, actually. And it's more important to learn \*a\* framework rather than to learn a specific framework. But there's a catch. &amp;#x200B; See, Vue uses observables quite extensively, and that's great. It's what makes it easy for you to develop reactive programs for. Reassignment of a variable allows you to trigger a re-render or, through "watch", other methods. &amp;#x200B; But what it does is add a layer of obscurity to the programmer reading the code. It's impossible to tell if something simple like "[this.foo](https://this.foo) = 5" is a simple assignment of a property with no side effects, \*or\* that it will trigger a re-render or possibly other functions. The functions it triggers might not even be in the component itself, and might be another component. So that makes it harder to debug. It violates the "principle of least surprise" - code should do what it looks like it does. &amp;#x200B; In practice, there is very little between Vue's [this.foo](https://this.foo) = 5 and React's this.setState({foo: 5}), but with the latter, you know that the setState method is being explicitly called, and that triggers a re-render and could have side-effects. &amp;#x200B; This is not to steer you away from Vue. Vue is brilliant. But even though it's the easiest framework to learn, it's \*not\* the one I recommend a beginner start with. 
Kinda: &amp;#x200B; \`\`\` const stuff = Array.from({ length: initialLength }, () =&gt; ({}) ) \`\`\`
Think of how synchronous apps use throw new Error. It stops execution when that occurs, because why continue executing? The same goes for a callback - it will go until an error occurs, but instead of throwing it (because you can't catch an asynchronous throw), it passes it as the first parameter.
Yep. I think it's unreasonable to call Vue a framework. Its a tool, a library, or what have you, for keeping DOM up to date with state. It does a tiny fraction of the things Angular does, as Angular is a complete framework.
This is an inherit problem with open platforms, internet / web dev community / reddit gives people a way to share their opinion without gatekeeping and censorship. The obvious downside is quality control and potentially biased content. The developer needs to learn to have diligence and do their own research, can't really stop them from doing bad things really. And the community needs to call out bad articles as they come along.
Hi /u/CleverOscarDev, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/lil_falco, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Solutionfactoryin, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/PrvRyan, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/manishNandha, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I really hope it will pass angular but not react as react is much more flexible due to only being concerned with the view part of an app. Also using templates is really unnecessary and only adds extra indirection so in my mind jsx does a better job at allowing js devs to leverage their existing knowledge. Everybody knows map as it's in the language now how do you loop in vue? Just extra stuff to learn.
Well not quite. Glimmer is working on a rust port of its VM so it can ship binary templates and build dom from webasm. This would provide benefits in smaller payloads and quicker dom creation before handing back to js to actually put it into the document.
You could spend the same time learning general good practices and become a better overall developer. Your knowledge in angular is in many ways tied to that environment. React is great in that sense because "it's just JavaScript" so if tomorrow you want to do something else you'll still benefit from your experience.
Super stuff! Thanks for the feedback :)
I wouldn't call Glimmer a UI toolkit though, I was picturing more like Bootstrap, Foundation, or Material UI. React could probably see some benefit to moving its core to webasm, but the libraries that use it maybe not so much. Since DOM manipulation would involve calling out to JS its my understanding that it just fundamentally will not help with DOM interactions right now.
That’s a bit of a stretch to me. While I learned angular, I still wrote a lot of typescript and used rxjs, bootstrap, material and whatever else. Angular provides rails and really is a small piece of the overall development of an angular project. I don’t think the time learning angular deprived me of any opportunity to improve as a developer.
Ah yeah, you're probably right on the ui kit thing. Yeah the actual dom part wouldn't be sped up but there are some, if small, optimisations that can be gleaned from porting the VM to webassembly. I did see a qt web assembly port the other day that renders to webgl. The next few years are going to be crazy lol. 
VSCode. 
Aah good one. and it doesn't really seem that esoteric or tricky or magicky. This is the hardest part for me about JS. I'm familiar with Array.from, and I see completely what you're doing here. I didn't even have to reread it a bunch of times. But I can never see on my own how I might put known pieces together in such a way.
I personally prefer ReactJS over AngularJS mostly because I like functional programming. Although, I moved into React \~3 years ago when Angular was less than stable, I'd only consider the latter if I am forced to, or if it favours functional programming similar to ReactJS.
Vue has a “for” directive... yeah I mean Vue in that way is reminiscent of Knockout or Razor... I really jive with Razor though, so Vue speaks to me in ways React never will. 
Regardless of whether the described methods have any merit, can anyone answer why it was written this way: const isStooge = (function() { const STOOGES = ['Larry', 'Curly', 'Moe']; return (name) =&gt; STOOGES.includes(name); })(); isStooge('Moe'); isStooge('Joe'); And not this way: const isStooge = (() =&gt; { const STOOGES = ['Larry', 'Curly', 'Moe']; return (name) =&gt; STOOGES.includes(name); })(); isStooge('Moe'); isStooge('Joe'); Why the mix in function syntax?
 Type, compile, and run the below program. Answer the following question and attached your code: What happens if you invoke baffle(); at the end of the ping method?
I need to understand what is happening here. I missed class and have a quiz due and I don't get how this works. When I write out the code, i need to be able to describe what each line does.
I meant the time spent learning the "angular way" imo is not worth it. I too worked with angular in my previous job and now I'm doing Vue and React and of course a lot of it will be useful but angular has a lot of angular specific code that is just not needed when you use something else. Rxjs is cool and all but I haven't used it since cause it's just not necessary. Typescript isn't worth it most of the time either. Maybe for writing code for other developers but otherwise a lot of overhead.
I know but that's the point. Why was that abstracted away if it's js underneath anyway. My point is you have to learn its specific syntax and when you get into edge cases in js it's a lot easier to get around.
Can you put an event listener for the spacebar keycode? I think you can put it on the document.body and listen for event.keycode == 32
Hi /u/Dehonian, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Nice
Does anyone like recursion
Next is specifically for React
I like types, typescript is garbage. If I'm going to use types, I want a ML like language that gives me static guarantees, on the frontend that's Elm or PureScript. Adding types to JS makes about as much sense as adding types to a Lisp.
Not really. ORMs encapsulate the fact that relational databases are not an exact model to language objects. MVC does not hide the complexity of javascript. I do not even know what you mean by that. Can you give some more examples? Do you mean the DOM model? Which frameworks are you talking about?
A --picture--
This article is 12 years old and contains some bad advice. Why did you share it here?
Afaik map is optimized compared to a regular object.
[removed]
What he said.
What MVC framework sends loads of REST requests to the server? Have you used any JS framework like Angular before?
Does anyone like recursion()
[removed]
What he said.
I get where you're coming from. I think you're point (at least how I am hearing you) is that orm hides *too much* of the underlying relational database. And you're also thinking that web frameworks (you call them mvc but I don't think the exact pattern is as relevant) hides too much of the various moving parts such as: the browser's dom, events, css, http, etc. There are alternatives such as using just a relational database query executor, with raw sql queries returning raw json results, where you write the sql and you interpret the results. And there are alternatives to the big web frameworks. I'm thinking of jquery and just rolling your own minimal structure for a spa. Anyway, assuming I have your train of thought right, I share the sentiment. You have to ask yourself: "do I need all of this stuff?" You might, or might not. I personally have never used an orm, or a client side web framework, but have always used a server side web framework (asp classic, asp.net webforms, asp.net mvc). If I really cared to, I could do server side work with just a web library (asp class was arguably just a web library compared to modern server side web frameworks). Anyway, point is, yeah, these things can get big and overly complex and if what you're trying to do isn't super complicated you may be paying more for the framework than what it's doing for you. As to your point about orm's special place in computer science... I think tackling the modern web client side story isn't nearly as special a place in computer science's heart as approaching the object to relational database issue. The web, dom, http, are all minor topics compared to the epic issues of relational data and object oriented programming. It'd be like comparing your own web client code to something like gmail. Or maybe leading a small team of programmers, to being the CIO of a large corporation. The parallels are there, maybe it's the same idea vaguely, but the scope and scale is so different that it's not super meaningful to compare them directly. There's too much of a difference between them, despite the vague similarity, to really compare. Put it this way: of all the courses I took at university, one of the handful that really stand out in my memory is my relational data course. And I maintain a subreddit cataloging arguments that OOP is bad. I'd be surprised if today's sophomore c.s. graduate would still consider having their mind blown by javascript's event model as a singular event in their education. And I doubt there'd be much content to fill a subreddit for arguments about updating the DOM directly versus letting Vue or Angular or whatever do it for you. Those are interesting topics, sure, but they aren't generational, even axiomatic computer science bedrocks.
Sorry just get here I have found to do that But I appreciated your help Thx a lot Buddy Keep helping people :)
[pg](https://www.npmjs.com/package/pg) is the one I've used. If you'd like further assistance, leave a comment and I'll look into it further.
Does anyone like recursion?
Stack overflow
cool. just installed it. any docs/videos out there for it?
Yeah the optimizer is insane nowadays. I was building a game and memoized a part that had a lot of repeated heavy calculations (mostly out of curiosity), and I got absolutely no performance gains. The V8 optimizer was essentially memoizing for me already
Be more specific -- what do you want to do with it?
[removed]
The timer is most likely server-controlled. This seems to only be an element to display the data.
Great, prapare very much GB hard disk (^^) 
I'm curious, what didn't you like about Sequelize? I just started a personal project with it which is my first project with Node, so I'm trying to get some context on what it does well and what it does not. Perhaps I'll try Knex for a future project. 
My understanding was that this was a proposal and hadn't been implemented yet. Maybe I messed something up, but I just tried the example on that page with the utils.mjs module and it failed. Also even if if did work, there's all that async/await stuff you have to navigate around just to use it, which seems like a lot of effort relative to require. Even then it won't work on node, so there's still the problem of code being incompatible. However, with my example you can wrap it in a function called "require" that includes the file loading part and make it globally accessible, solving the incompatibility issue.
im curious about Objection.js. I've recently gotten into backend for the first time and i am loving knex as well. In a practical example, What extra does Objection.js bring to the table in contrast to knex?
I was thinking the exact same. The inconsistency was triggering my OCD. 
Someone will show you how to lambda that. Not me cuz i can't remember the syntax. It's late and I'm tired. 
Thx for the reply. could i ask you at which point will each one trigger? if i store the function in a variable i expect the value to be nothing, since when the last iteration happens, the \*first if\* triggers and it returns nothing, so why is the value the last return and not the first,since it's the last iteration.
Thx for the reply. could i ask you at which point will each one trigger? if i store the function in a variable i expect the value to be nothing, since when the last iteration happens, the \*first if\* triggers and it returns nothing, so why is the value the last return and not the first,since it's the last iteration.
 arr1.filter(item1 =&gt; !arr2.find(item2 =&gt; item1.id === item2.id &amp;&amp; item1.value === item2.value)) &amp;#x200B;
I tend to write lots of functions that reference a constant object in two situations currently. One is to check an argument against a list of types that have one response vs. a more common one. This avoids long IF clause with lots of ORs: function getUserDisplayName (userObject) { const userTypesWithTitles = [1, 2, 3, 5] if (userTypesWithTitles.includes(userObject.type)) { return `${userObject.title} ${userObject.name}` } else { return `${userObject.name}` } } The second use is also avoiding lots if IF...ELSE IF.. clauses using a "map": function getUserLongTitle (userObject) { const userLongTitleMap = { 'ceo': 'Chief Executive Officer', 'cfo': 'Chief Financial Officer', 'coo': 'Chief Operations Officer } return userLongTitleMap[userObject.shortTitle] }
Yep, Angular is opinionated. I came to webdev from the backend and had no opinions of my own, so Angular is fine for me. If I were learning Vue I would need to learn a lot more diverse things. From my perspective, Vue would be harder.
Nice this works great, thanks. exactly what I was lookin' for
There are a number of additional problems to solve. Even if you don't care about circular dependencies, you _should_ definitely care about _duplicated dependencies_. That is, where both module A and module B require module D. Simply re-loading/re-running D each time it is required is a pretty bad idea. Not only from a performance point of view, but also for the subtle conflicts and bugs it can -and most probably _will_- introduce.
There are several paths. If you want to learn javascript and be able to do other stuff than a bot then I would suggest [freecodecamp.org](https://freecodecamp.org). However, if you are looking to just make the bot then I'm sure you could find a tutorial
You bring up a good point, but the problem could easily be solved by wrapping my solution in a function connected that has access to a list of modules that have already be loaded. So every time you pass the wrapper function a module path, it will check to see if that module has already been loaded. If if has, it will return the pre-loaded module and if not, it will load it, add it to the list, and then return it. I once implemented something similar to this for loading textures in a game engine I made in college, since textures take a long time to load. 
Ay there's the rub. It's true that cases where dynamic imports are necessary aren't common, but I was in a situation that absolutely required (pun intended) them. And since I do need them, and since I just can't seem to find any solution but this one, I have no choice but to use it.
This is awesome. However, I tested it by writing a recursive fibonacci function, so we get an execution context inception here. The window overflows after a few runs. :D
You're right, good catch!
I use this one called pg-promise: https://github.com/vitaly-t/pg-promise Among other things, it has a very powerful and flexible query builder, you can use with Promises and async/await, has nice error messages, already returns arrays of objects whose keys are the columns, or an object if you were expecting only one result, or throws comprehensible and helpful exceptions, among other things with many examples at that repository. Also is fully and clearly documented. Extensive intro here: https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example
I wonder. I know the logic of standard up updates would be not much different. But what about massive amounts of text manipulation? The strings would have to be converted to numerical representations first, presumably. But if you are primarily working with text, could wasm provide a major speed boost? I haven’t tried wasm and I am currently working on a project that involves large string manipulations on large strings.
Wow!! Nice library
Honestly it's a hard topic. Do you have an existing chat application and what is your threat model?
I just need a idea and a working example on how the application will work on signal protocol.
There's not a single bank I'm aware that does E2E encryption, so "personal information" sets an interesting threat model. To answer your above question, honestly if you're here asking like this you may find implementing Signal from scratch an overreaching goal. I'd start by reading the paper here: https://signal.org/docs/specifications/doubleratchet/
Ok... So you need a method to select from the data returning JSON, use this code to accomplish it: results = {'results': []} const client = new pg.Client(connectionString); client.connect(); const query = client.query('*select name,address,phone from tbl*'); query.on('row', (row) =&gt; { results.results.push(row); }).on('end',() =&gt; { done(); return res.json(results); }); is the list of clients going to be static or will you add to it? How about removal? Let me know if you run into further difficulty.
Might be a little late in the game but was the spelling intentional? "rythm" should be spelled "rhythm", no?
What? You have a clear way of telling you or other devs what you expect. Oh it takes a date? Well as a Date or as a number? Let's use the wrong thing and ship to production.
Hi i didn't deleite ir, and thanks for the explanation again. However in difference with your code, the first if doesn't return anything and you still get the array with the correct numbers, that's why i don't undestand function mcm(num, div=2, result=[]){ if(div &gt; num){ return; } else if(num % div == 0){ result.push(div) return mcm(num/div, div, result) } else{ mcm(num, div+1, result) } return result; }
codewars has 800+ array kata https://www.codewars.com/kata/search/javascript?q=sort&amp;tags=Arrays
[https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch9.md#reduce](https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch9.md#reduce)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/Functional-Light-JS/.../**ch9.md#reduce** (master → 5e708b1)](https://github.com/getify/Functional-Light-JS/blob/5e708b1bd3afca7550fdae3b3adab5afde86104a/manuscript/ch9.md#reduce) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e7i56tg.)
&gt; [{ 'id': 1, 'matches': 2, 'tries': 3 }, { 'id': 2, 'matches': 5, 'tries': 2 } ].reduce((memo, el) =&gt; { return { matches: memo.matches + el.matches, tries: memo.tries + el.tries } }, { matches: 0, tries: 0 }) There is plenty of documentation to get you started. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce I would recommend starting with summing a list like [1,2,3] to get a good understanding.
Hello, I would have done something like that : const example = [{ "id": 112814, "matches": "123", "tries": "11" },{ "id": 112814, "matches": "5", "tries": "5" }] const reduceTotal = (accumulator, current) =&gt; { const currentItem = formatItem(current) accumulator.totalMatches += currentItem.matches accumulator.totalTries += currentItem.tries return accumulator } const formatItem = item =&gt; { return { matches: Number.parseInt(item.matches), tries: Number.parseInt(item.tries) } } // Then you can call reduce on the example, passing the reduceTotal function // with your output object as the accumulator example.reduce(reduceTotal, { totalMatches:0, totalTries:0 })
You just read my mind, i thought I was wrong about my thoughts. Thank you😃. 
This is why I modified it - the version you've pasted here is confusing. In terms of where, I've spent a lot of time running through it and all I've got is that there's some incredible bullcrap involving Javascript hoisting or something. 
Thanks, this is really useful. Didn't knew you could find challenges grouped in "themes" in codewars.
I don't use them all of the time, but recently whilst building an application that uses oAuth authentication, I get back an access token and an expiry date in seconds, which I then use to set a cookie in the browser. The beautiful thing about a cookie with an expiry is it cleans itself up. So when the cookie disappears, I know the auth session is finished and the user isn't logged in, then I can request a new token and create a cookie.
While a proposal it's been implemented by two browsers (unflagged) already so I don't see any major blockers that would stop it reaching Stage-4 at this point. It's also not terribly difficult to transpile into something that works the same way if you have `&lt;script type="module"` available, and if you don't you could just one of the many build tools like rollup, webpack, etc. And creating a `global` require is non-trivial and will definitely cause perceivable lag if you're `require`-ing any non-trivial modules, as using synchronous `XMLHttpRequest` is really your only option which will block all interaction until the entire tree of `require`-ed modules are requested, fetched and executed.
!! can also be used to convert to a Boolean.
I’ve not updated the benchmark section yet, but here is my experiment in C++: https://github.com/mbasso/asm-dom I think that I can do that in the next few days, we’ll see the results!
Madness. Code should be as clear and direct as possible. Leave the clever stuff to the minifier. 
Yup, was intentional. However, you can take it anyways. :D
Why not just `string.indexOf(substring) &gt;= 0;` ?
I would suggest watchandcode.com. The First course is for free and you learn how to programm a to do List. It is a great start. Have fun :)
Great!
Is there any reason why you chose to spell rhythm wrong? Is it a play on words i'm not getting?
Never use it in such case.
The Typescript [handbook's quick start](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html) is excellent. The handbook is brilliant generally. 
This is a standard operator in any language.
Personally I’d change fulldeck[i] into its own variable for readability. My guess is it would be card? card.scale() looks better imo
This just sounds like lack of shortcut key knowledge and extensions for pretty much and text editor these days. 
Ok got you, thanks! I just want some sort of an alertbox showing some data every certain amount of time while the user is not browsing. I'll just do it in .NET I guess
I used to have that feeling. Who cares how big the project is though. If you’re even reading this post it shows you want to start contributing. Just go for it. Hell even updating docs is a huge help. 
The dev is french and rhythm is spelled rythme (with a silent e) so maybe it's a mistake or it's on purpose, idk.
Good library for an esater egg
It is interesting, however you can use `String.prototype.includes()` now: ``` 'Reddit'.includes('foo') ```
There was a pull request about 40 minutes ago approving “spelling fixes”. I didn’t check it out, but that might address the issue.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
If the website is just in the background you can do anything. You can even display system notifications, if that is what you want. Depending on what you are trying to do, these are a less annoying alternative to real popups. Also, running JavaScript if the page isn't even open is also possible. It's called Service Workers.
&gt; the user is on the site but the browser is minimized Generally no. This isn't so much a browser/javascript thing as a general "windows" (including mac &amp; *nix) UX thing. There are few things more annoying than being in the middle of doing something (for example typing this reply) and having an unwanted window suddenly pop up and take focus. Almost every time, one of the keys I hit causes *some* button on that popup to get pushed, closing the window, without me ever knowing what the window said or what button I "pressed." For this reason, most applications including browsers prevent windows from popping up and taking focus when they are minimized. That said, opening a new window/tab in a browser will *usually* cause the browser title in the task bar to flash on windows at least, and bounce on OSX (I think). &gt; in case you didn't understand me, I didn't. You should edit your main post and reword it to say exactly what you said here -- that the browser is open and on your site, but minimized. When you say they are "not browsing" that can mean anything from them being out of the room with the window open to the browser being completely closed and not running.
Thank you for the heads up, bot friend! The license is now included in [its own file](https://github.com/cykelero/tasklemon/blob/master/LICENSE), in addition to being mentioned in `package.json`.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [cykelero/tasklemon/.../**LICENSE** (master → 651056e)](https://github.com/cykelero/tasklemon/blob/651056e683245d45e7131b9075433d20f99b7eba/LICENSE) ---- 
It was a mistake at first. But as a french developper i found it funny to use a mix between french and english : Rhythm in english stand as Rythme in french. 
It was a mistake at first. But as a french developper i found it funny to use a mix between french and english : Rhythm in english stand as Rythme in french. No need to apologize, you're totally right here :) ! I just think that if you ever want to use it legitimatly on a website, this is the first issue ;) ! The point is to make everything dance, i don't really worry about breaking the layout. Anyway, if you have some valid reasons to use my lib (making something really using sound) you will have to think about wrapping the dancing elements to prevent layout break. I see it more like a constraint than an issue. Thanks for the feekback :)
If you want to check out some projects using the lib, i curated examples into this issue : https://github.com/Okazari/Rythm.js/issues/51
I think you've misinterpreted what the word "hack" represents in this context, there is a large movement in general to shed the negative connotations and embrace the phrase to represent a more positive aspect of building and creating.
Noooh, not safari again :'( 
Require and browserify are ancient. Use Webpack (or Parcel) and that's that, you can import dynamically in these. A statement like const LoadImage = name =&gt; import(`/resources/${name}.jpg`)`) won't bundle these resources but make them available in the /dist folder regardless. When the import function is called it will dynamically fetch it. This is independent of any proposals and the current state of said proposals is questionable at best - it is likely they'll either never matter in the real world, or will play a diminished role with build-tools anyway. A bundler is and will be your gate to modern javascript - you won't come far messing around iife's and functions evals.
Because it’s just a themed Safari...
How do you test these mafakkas?
Cool! I look forward to playing around with this. I'm going to have a hard time calling this "task lemon", though. It reads as "tas-cul-mon" to me.
indexOf() !== -1 is a boolean already. The result of indexOf could be 0, 1, higher, or -1. Only whether the value is -1 or not matters here, so it makes sense to check it directly, and clearly. And it's shorter than the trick in the OP's code.
Yeah, it's very much about valid contributions with good intent!
I used to use CapuletJS for everything, but I discovered Montague, and I have not looked back.
Objection allows a model class to support the table, providing a json schema to use to validate input as well as declaring relations. The latter allows things like: Course.query.blahblahblah.eager('students');
So I can't change it?
Chrome on iOS *is* Safari
Using the new Set class instead of an anonymous Object is probably slower as JS engines are extremely optimized at this point. However, that might change in the future when Set has become more mainstream. The JS engine can probably make bigger and more specific assumptions about a Set compared to an Object, and thus allow for new kinds of optimizations.
One could, should, use Python if you want an alternative to a shell script. I am positive that, when this falls off reddit in a few hours, we will never hear of this again.
Simple idiom to count down up to and including 0. for (let x=10; ~x; x--) { console.log(x); } Works in many programming languages.
Haha, thanks for the vote of confidence. The other human comment so far is of someone being interested, so hopefully my little pet project will end up making some people's life a bit easier before it falls of in oblivion :)
Ah i see! Well that's fine then, just thought it was a typo :D Yeah fair enough - Maybe consider adding something to the plugin to be able to define whether it sits in place or is absolutely positioned. It's still cool!
I read the link someone else replied with and yep - you're 100% right. I've been looking for something to contribute to! Then again I should probably get back to work on my job as a dev, too. :P
&gt; take-downs, shake-downs, or litigation Should say: &gt; take-downs, shake-downs, or litigate-downs 
Amazing!
Interesting that JavaScript omits the sign when converting -0 to a string. It even happens in JSON serialization, where you would hope any number round-trips.
I'm no expert in Sets, but I do believe there are some optimizations you can do when you are only checking if a key exists without needing to fish out the key:value pair, like bloom filters.
Imagine having this on your Myspace page!
I use it to store game state in my roguelike-game-in-progress. [https://github.com/stephanh42/sublunar](https://github.com/stephanh42/sublunar) So no need for any server-side infrastructure, all game state is stored on the client. Data will persist in storage until the browser decides too much disk space is in use and starts throwing out databases on an LRU basis. Or until an advanced user uses the development tools to clear a database...
I think every page on the internet needs this installed.
You're probably trying to get Arrayname[0] before it exists. That little blue "i" icon in your picture warns you that the values in the array are shown from the point in time when you expanded the array in the console and not from when the array was first logged there. Given the simple data it now contains, when it was logged, it would have appeared as `(2) ["z2", "z1"]` and not `[]` which means it was empty when it was logged, and probably empty when you tried Arrayname[0]. So what you'll need to do is wait until the array is populated then use your Arrayname[0] to get the value you're expecting.
Les gens nomment souvent des choses dans différentes langues pour les rendre cool xd. c'est cool, sans aucun doute.
It's assuming a timezone you might be expecting. With no args, it will use system time (or as you see, with a time it will just force that time). Without any time but in a general date, it goes back to utc which is -4 hence 20:00 which is 4 hours back from 00:00 on the next day. If you want the current date / time for the running browser user, new Date() works fine in their respective timezones but otherwise you'll have to manually account for the tz if you only specify a raw date with no time or tz
Date-only strings are treated as UTC, not local. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) More advice from there: "parsing of date strings with the Date constructor (and Date.parse, they are equivalent) is strongly discouraged due to browser differences and inconsistencies. " &amp;#x200B; Try: new Date(2018, 10, 10) This will produce a date in local time.
A Date represents a moment in time, not a calendar day. Depending on how you construct a Date, you might actually be constructing “midnight Greenwich Mean Time at the start of October 10,” which is actually on the 9th in the local time zone. You should never construct a Date from a string unless you are sure to use a standard string format that you know all browsers will parse in the same way. See https://stackoverflow.com/questions/31572257/javascript-date-string-passed-to-date-constructor-gives-strange-results and documentation for Date.parse, which is what new Date with a string is equivalent to. In practice, you would probably be better off using a date library like Moment if you need parsing, or parsing the string yourself and passing the numeric components into the Date constructor. Just remember that Dates include a time zone, and the calendar date of a Date depends on the time zone you are talking about, which may depend on the current computer’s time zone! The ISO date format (ending with “Z,” as in date.toISOString) always has a zero time zone, which may help if you want to work with abstract date-times, but you have to be really careful since they now represent a meaningless moment in time compared to a Date that comes from a real time stamp.
Well, it's not out of order, it's just asynchronous. Having a good understanding of the difference between sync/async code is pretty critical if you're going to write JS. Recommended reading: https://eloquentjavascript.net/11_async.html
Cool idea, but personally it won't be useful for me. The problem with the approach you've taken (for me) is that I have to learn an entirely new API just to do something I can already do today. For it to be worth the trouble of learning a whole new API, it has to offer more benefit than just "it's in Javascript!" In other words, I know what `echo` and `mkdir` are, and how to use them in Bash. I don't know what `cli.accept`, `cli.args.buildFolder`, or `cli.tell` are, and even if I did take some time to learn them, it would take a lot more time to learn them to the point where I have them memorized and don't need to look them up (which is how I am with the Bash commands). I think this project might be really helpful for people who don't know Bash and don't want to learn, but I don't see it converting many existing shell users.
I think you're right! If you're already comfortable with Bash, you'll probably not want to expend the effort on learning Tasklemon. (although I'm working on more unique features that could very well tip the balance :3 ) In any case, my target is people who feel uneasy doing sensitive operations (like, say, _file operations_) in a language that can be very unpredictable if you don't know its ins and outs; for people who want to write these things in a language they're already proficient in and confident with.
Looks promising op ! Good work !
&lt;3 thank you!
oh cool thank you
Gooyob!
they have tutorials for it which at base value after trail and error i was able to figure it out and was able to understand how it works which was this code here const Discord = require('discord.js'); const client = new Discord.Client(); client.on('ready', () =&gt; { console.log(`Logged in as ${client.user.tag}!`); }); client.on('message', msg =&gt; { if (msg.content === 'ping') { msg.reply('Pong!'); } }); client.login('token'); after that i wasnt able to continue as i needed to learn that classes and discord api
Even if it is better it would never replace bash. 
 Hey everyone we are getting started with Vue, and there is not a lot out there other than using Webpack and Vue-CLI etc... Took me a while to figure out how to integrate Vue into a legacy application, but I found Vue to be the most flexible framework for this use case. This is my first article as well so feel free to leave some feedback if you see anything that needs to be corrected. Thanks!
It could! But you'd increase your memory footprint if you have a bloom filter of every object in your JS engine just for the in operator. 99% of the time the bloomfilter would problaby be unused. But for Sets, the programmer is in a way specifically telling the JS Engine that a bloomfilter is gonna be a great optimization for this particular thing.
And I have 7500 karma overall, as if that meant anything to anybody in the universe. Suffice to say, I gave reasons for my "opinion" while all you could do was make a personal statement about me so I think my opinion is far better than anything you can add.
Hi /u/ceejay40, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
A small size difference, but otherwise even Vue doesn't really have things to say they do better [https://vuejs.org/v2/guide/comparison.html](https://vuejs.org/v2/guide/comparison.html) &amp;#x200B; IMO, "flexibility" = high potential for poorly structured code gone wild. 
Been working on a amqplib abstraction because I got tired of maintaining multiple configs. Provided a simple set of apis for sending events over rabbitmq. Currently working on dropoff support e.g. if rabbit broker dies maintain a persisted state of the queue and empty it asap. &amp;#x200B; [https://www.npmjs.com/package/rabbitode](https://www.npmjs.com/package/rabbitode)
Thanks. Yah i will be adding to it, it is a live list-and definitely should be able to edit it. Right now just a small list but I expect it to grow (setting up a simple UI that feeds this data -client list, edits it, adds or removes).
I just pushed 2.0 of [fetch-action-creator](https://github.com/CharlesStover/fetch-action-creator) -- a function that returns an asynchronous redux action that handles each of the four states of a fetch API request. Is this intuitive enough to use? (It presumes familiarity with redux.)
It is Apple's requirements for browsers released via the App Store. The iOS version of Chrome use the iOS WebKit, Apple's own mobile rendering engine / components. Chrome and even Firefox behave essentially identically as Safari on iOS. This is also why [caniuse.com](https://caniuse.com) shows just one support table for iOS - Safari.
The new version looks great but I've lost all trust in Meteor. It works great until your app reaches a certain size then everything falls apart.
You need Babel. List of features of ES 2015 implemented in the JS runtime they use: https://wiki.duktape.org/PostEs5Features.html
No matter which method you use at the end, it's going to be checking all items in list A against list B. You could do a for loop, forEach, filter... It's still checking 1 against the other, 1 item at a time. The good news is that you don't need to iterate over list B because you can just do indexOf on it. But it's still a lot of checking.
Have both Clients A and B generate a private key. A sends public key to B, B sends public key to A. A encrypts a session key using B's public key and sends it to B. B encrypts a session key using A's public key and sends it to A. They can both agree on an encryption scheme or use a dedicated encryption scheme. Probably AES. When A is talking to B, it needs to encrypt the data using B's session key. When B is talking to A, it needs to encrypt the data using A's session key. Each client has their own private key and their own session key. And the Server has neither of their keys. &amp;#x200B; &amp;#x200B;
Are there any libraries available with implementation?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#Implementing_basic_set_operations
&gt; save your objects to that without converting them to strings Yeah, I also know arrays containing strings in particular are a performance degrader (based on [this talk](https://www.youtube.com/watch?v=m9cTaYI95Zc)). I've also found using `Set`s instead of arrays can give a pretty big performance boost depending on the implementation (e.g. using one Set instance throughout all iterations will probably help; repeatedly creating new ones probably won't)
It works alot better now, especially if you utilize Apollo + GraphQL + a few community built packages
Tusklemon, it’s a Pokemon with a big tooth 
Depends on your definition of browsing. If it's only on your site then it's possible to make a EventListener on the document level to reset an idle timer that will fire a notification or something else to get the attention of the user. Scripts afaik will pause when the entire tab lose focus so keep that in mind too. If it's tho on different sites outside yours then no and I would highly discourage any attempt to try this.
If applicable, consider just splitting your A into a grammer split list and putting those into a map. E.g. you want "In conclusion,..." To register as ['in', 'conclusion', ...] So all either upper or lower for capitalization comparison, no comma so grammar stripped (; , etc.). Then, these can be placed into a map with the word as the key and the value is irrelevant but could just be true Boolean or even a count. Then you get constant time checking for each word in B. The count can also be used to weight how "hot" that word is as well if that's useful. 
HI [rickdg](https://www.reddit.com/user/rickdg), thanks for your interest! Have you ever tried to such such tools to spot bugs and/or vulnerabilities? If not, is it because you do not trust static analysis regarding code defects or because you think testing it is enough for spotting bugs/vulnerabilities?
Well there was once `with` but not anymore and it's only keyworded now 
Have you heard of [hygen](https://github.com/jondot/hygen)? It's a more general-purpose code generator that allows you to configure templates. IMO, a code generator wouldn't be very useful unless it allows for the templates to be configured (since any given team will have their own code style standards)
You could change what it displays, but it's not going to change the real value and timer.
Yeah, I was just trying to add to the options and I was way too sick for brainpower. This was probably even supposed to be a reply to OP =\\ Lol.
What's the advantage of your solution over commander?
Argument parsing is just a small portion of what Tasklemon does :) A big thing it offers, for instance, is [a very nice file manipulation API](https://cykelero.github.io/tasklemon/api/File.html). The argument parsing part is way, way less sophisticated than Commander's, but should be pretty flexible already. Eventually, I'll add the ability to use whatever npm package you want, so you'll be able to slap on Commander if you feel like it!
Wait this is still in active development? 
Atm I use shelljs for scripting. Main reason is to have scripts that work on any platform - maybe thats one advantage for your Tasklemon project too (compared to bash)
😃 when you do, please tell me if you have any feedback!
Oh dang, you're right, I forgot to mention compatibility! Tasklemon runs (and is tested) on macOS, Linux and Windows, with only a few things missing from the Windows and Linux versions (no permission stuff on Windows, and neither can change the creation date of files—nothing major).
Thanks man
&gt; Chances are excellent bash is on a Linux computer. Almost as good that it has Python. Almost no chance any computer will have this thing. 
Library library library? Library library? Library Library library library? Library library? Library.
Champions du monde
I personally like using iterators: const intersection = (setA, setB) =&gt; { const iter = setA.values(); return { [Symbol.iterator]() { return this; }, next() { while (true) { const next = iter.next(); if (next.done || setB.has(next.value)) { return next; } } } }; }; which are very versatile // Create a new set const c = new Set(intersection(a, b)); // Use the iterator in a loop for (const v of intersection(a, b)) {}
Your site just calculated I should've died 7 years ago and so it thought it would be _nice_ to tell me I still have one year left. 
Yea it’s a troll mechanism I have set to 100+ years and I research people’s % to make it to predicted age so depending on your age increases or decrease the chances of you making it to that age
The rational for why doing it is in this github ticket. Why they decided this was an important thing to introduce breaking changes for is anyone's guess. LOL.
I love love love this and is a really cool idea to combine music and js together. :) Looking forward to use this in the future. 
I do that all the time. It's so much more efficient -- and semantic -- than writing out `!== -1` at the end. Interestingly, you can also use `~~` to strip the fraction from a floating point. Eg: `~~7.34 === 7`
Yep, same. TSLint works quite well on plain JS files.
That's very cool! It looks really neat how windows pop out for editing
[removed]
Jquery is fine. There is jquery mobile. React or vue might give you a more responsive app and being a framework give you more capability with less code. You can communicate with your server in many ways - rest, graphql, sockets, soap etc. You also might consider making a PWA instead .
Properties should contain data if it's just data. If you need to so something with it and then return it, then it's a method, which in JS just means a property that contains a function, which may, in turn, return something.
First, you should probably read up on ["this"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this). It doesn't always refer to the global object. In general, best practice is to avoid "side effects" in your functions (i.e. do not modify global state). Otherwise, if another developer calls your function a second time way later in the code, it could reset your state or overwrite values you're still working with. It's best to write functions that are standalone so they can be used in multiple contexts without worrying about having to share one "result" variable. If, however, you decided that you'd rather modify an object instead of return a new object, you should accept that object as one of the parameters to the function, that way you can pass in multiple different objects. For example: function addTotal(person) { person.total = person.num1 + person.num2 } addTotal(my_person1); addTotal(my_person2); The one semi-exception to this rule is in class methods (function on a class' prototype) whose whole purpose is to operate on an instance of that class (this is covered a bit in the "this" article I linked to)
Gotta script em all!
Things have come full-circle...
You could also look at PouchDB - https://pouchdb.com for storing/accessing data (it is a replicated database that runs in javascript.)
So... basically a browser window... I rather not use this at all.
I know! It looks native!
&gt;DAE hate electron XD &amp;#x200B;
I don't really hate Electron, kind of love it in a way, but this app doesn't seem to be necessary IMO, is just a wrapper of the Google Drive site....
I like this a lot! Thank you :) I'll see if there is anything I can help out with. 
Why?
Thank you, I'll add it to my todo list!
Oh good I should really check it out! Neat idea!!! Please correct me if I’m wrong, but I think the intention was to replace the redundancy of using the web version with Sync to cloud running in the background? 
Your bundled JS shouldn’t be included in repo. You probably should gitignore the entire /dist folder. 
If you run Windows or Linux and Chrome/ium, when you're on the Google Drive site you can do More Tools -&gt; Create Shortcut, then you can launch Drive in a standalone window that looks the same. Main difference is that when you open docs they open in regular browser windows.
Honest question: What does this solve that staying logged in and creating a shortcut to the Google Drive website doesn't solve?
Does this works offline on files synced to /Volumes/GoogleDrive/ ?
thanks i will make that change
I downloaded this and this works. I tried creating one of these my self but it didn't work and it was way worse. **Thank you so much** I have been looking for something like this.
With this app, I try to hide all the overhead of a browser with Google Drive opened. I don't handle any syncing to the cloud, and just let Google deal with that.
I'm glad you like it! Feel free to make suggestions to make it better!
You don't have to guess though, its in the article
Wow. Much awaited
That would be really cool but so far it does not support offline documents. That would be interesting to implement using the Google Drive API
Upvoted for the Vulfpeck references. Nice project!
I'm curious to try this out. It would be useful on our work computers. Lots of account switching and preferably forgetting. I'd like to convince IT to drop LibreOffice one day as we primarily use Google Apps through a browser.
Is this like https://www.google.com/drive/download/ ?
did you know that electron *is* the browser?
it's lighter weight than the typical browser, but yes I'm with ya. there are some even lighter weight alternatives to electron for similar browser bundling use. I am forgetting the name if another more recent project, which I think might have been another v8 frontend with maybe Google backing of some sort, iirc. sorry, memory evading me.
I'm new to Node. Thank you for introducing Pug to me :)
“Version names inspired by Vulfpeck songs” I like this already. 
This is exactly what i was looking for (came from google) I was so tyred of every tutorial trying to teach me how to program, started checking the book and its really nice, i can skip through and check out syntax differences to other c-based languages. 
Try to cache elements as variables or properties of an object ,instead of calling getElementById every update.
Thanks for your support!
Nope, it just wraps the website in an Electron shell. That linked app syncs drive to the local file system.
You could do a .split() and filter the array with .includes() to get an array with all the results
Usually this subreddit is more supportive of our projects..
lol I totally understand.
Out of curiosity, this works ? &amp;#x200B; Anyway I don't known about the official rules but I would say don't use it, it make the code less readable. Prefer a good ol' fashion `if else if` statement (more readable since there will be curly brackets to separate things).
&gt;I've thought about detecting the background color of the image, then try and figure it out myself. The problem with this solution is that the background color could be different at the top and bottom. I don't know of a library, but could [edge detection](https://en.wikipedia.org/wiki/Edge_detection) help here? A basic version is pretty simple - compare the brightness of a pixel with the pixel above and note changes above a threshold.
Your question lacks context, but based on what I understood, it's better to return an object: function foo() { return { winner: '', war: false }; } let myResult = foo(); console.log(myResult.winner);
Your solution is more complicaties and harder to read. In this situation I would prefer a ternary expression.
It works in chrome. Check the _ in your actual code. There are 2 different types. Perhaps you are not using the same.
Not sure if I remember it well but I think split removes whatever you indicate as delimiter (in your case _ ). To include it in the result, you'd have to either create a series of substrings or manually add the delimiter back to the resulting array.
Thanks, got it, my initial string was also a output of split, I was missing index. This like this makes you pull your hair sometimes .:)
OpenCV has a JavaScript version. That might be what you need
You could use match "apple_oranage".match(/[^_]+|_/g) //-&gt; ["apple", "_", "oranage"]
Visual Studio Code is on of the best editors (IMO THE best) and it's written in Electron. The overhead on electron is significant, but an extra 20MB of memory usage on top of an app that uses 300MB of memory isn't too big of a concern, and the ease of development/design is a huge plus.
No need for a lambda. That's unnecessary indirection. Without the lambda, it's still more "functional", since there's no reassignment. ``` const something = conditional ? 'value' : 'some other value'; doSomethingWith(something); ``` &gt; is it objectively better or worse? In your favor (vs your teammates) I think reassignment often makes things harder to follow. If you present something like this to your team mate do they agree? If it were me, since this is fairly minor, I wouldn't take an adamant position. But it can be good to share perspectives, and socialize a little bit over code, without a goal of necessarily convincing anybody. 
I wonder if it's possible to use this idea and instead use Typescript as the language and a flag of some sort to tell it to export WebAssembly instead of ES5 or 6, maybe a file extension like *.tswa. TS has the static typing, and the types can be converted to c++ types pretty easily (number = i32 or i64). Doing this could accelerate WA development by allowing Javascript engineers to use the same language they use everyday.
I guess my example was oversimplified. Usually the code in question is more complex than what you could actually solve with a simple ternary. 
Yes my example was way too simple to show how the code ends up looking. 
Well, in that case, there is [AssemblyScript](https://github.com/AssemblyScript/assemblyscript) – "strictly typed TypeScript"
Take a look at [my comment](https://www.reddit.com/r/javascript/comments/9n8d3q/slug/e7kki4h)
yeah I use it and I think it's pretty good stuff. the extension API is pretty thorough. almost makes emacs replaceable... *almost* ;)
http://asmjs.org/spec/latest/
[removed]
wait, i though WASM was supposed to remove the need for JS. We have gone full circle
The question sounds like bike shedding. Too much noise for a wax too unimportant problem. Larger architecture is far more important. And the correct number of spaces for indentation :-)
The problem is this makes Typescript use the same types as WA. What I'm advocating is for the developer to use the same programming and types as Javascript-based Typescript and have the compiler create the WA code. This way the developer doesn't have to context switch between types and languages.
That was quick. It usually takes years of tunnel vision for the hype train to arrive right back where it departed.
Lmao
Even if you don't want to use a ternary here, I fail to see how either representation would be better than something like if(condition) { doSomethingWith('value'); } else { doSomethingWith('some other value'); } with whatever flavors of stylistic difference you want thrown in (consts declared above instead of passing raw strings to doSomethingWith, etc). I do agree that ternary is the way to go though. 
Yes, good point. Porting JS-based TS to this WASM-based TS will definitely cause some friction as the latter is merely a subset or even a new dialect. For the sake of migrating, you could define type aliases from e.g. `number` to `f64`. But as the wiki lists, there are even more differences/limitations. I myself don't know much about this project other than that it exists.
In that case someVariable could be the return value of a function that returns a boolean. This function deals with the complexity and you end up with a simple if statement.
``` "apple_orange".replace(/_/g,' _ ').split(' '); // returns ["apple", "_", "orange"] ```
WASM is supposed to make the web a compile target. It doesn't care about the syntax of the language. Since there's a huge talent pool of JS developers out there, why not make JS compilable and target it? You get to keep writing your same modules but with moderate to high performance boost. Win win
I have read tweets with more information on the subject.
OK, this is really cool. 
Well I used lots of the fuctions removed, so not too happy. :(
Yes! Totally agree. I'll try to refactor to use something else instead of a switch when I get a chance.
Hi /u/Gmaster_64, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/vipularora6212, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/nikulasoskarsson, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/kdssss, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/genibi7, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ashish1729, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
You can't compile JS, you can JIT it but it mostly has to be interpreted due to its dynamic nature. And ASM.js already exist so that project is kind of worthless.
You clearly have no idea what you're talking about. You can't (I mean technically you could, but you won't) "program in WASM", it's just machine level code. You can try it in WAST, which is the text format (assembly), but that's not going to get you far because it's very low level. You need a higher level language to compile to WASM in order to get anything serious done. You can use C and a couple other languages, but you probably don't fancy those if you're a web developer. Obviously your best choice would be a language which you already know, so there's need for a Javascript-like language to compile to WASM. Also, WASM, at least in its current form can't really "remove" the need for JS, as it lacks some stuff that currently only JS can do, for instance DOM access.
Yes, and it’s pretty awesome.
Since the introduction of wasm, I saw only two possible outcomes: 1. Some kind of standards-level support for AOT-compiled JavaScript. 2. Some other language or variant language supplants JavaScript because it can be AOT-compiled. In either case, most of the best-practice code on the Web will one day be delivered as bytecode.
Are you trying to make a bot? I can't help you with text captcha. It shouldn't be auto completed. About the Date, you can run a script like this `document.querySelector('input[type="date"]').value=YYYY-MM-DD` with single digit months and days padded with 0.
&gt;ASM.js already exist so that project is kind of worthless. WASM is not the same thing as ASM.js. WASM is a binary. ASM.js is CPU optimized JavaScript and is much slower than WASM by multiple metrics.
No ASM.js **is** JavaScript. Walt is binary.
&gt; No ASM.js is JavaScript. Walt is binary. Walt uses javascript syntax. Walt isn't binary WASM is.
Walt compiles to binary, not JavaScript. I don't think you know what ASM.js is. Here is an ASM.js compiled application. https://gist.githubusercontent.com/jeresig/5293608/raw/80cb2a00edf3a4947425d98bc6cc460d9e0f5f63/bananabread-asm.js
&gt; Walt compiles to binary, not JavaScript. &gt; &gt; Walt uses javascript syntax. I don't think you understand what the syntax of a language is.
Everything? WASM and ASM.js are compile targets. Do you think ASM.js compiles back to binary or something?
Okay thanks for your rapid response May I know how to distinguish within script, I have two date fields in the form, I have DOB(Date of Birth) and I have DOJ(date of Joining) both in displaying format of dd.mm.yyyy Could you please let me know where should I put the field name within provided script Sorry for being lame I am totally new to Javascript 
Needs more HTTPS. Also, is it some kind of reference for a manual of language X? I understand it's new and that they only have Typescript (for now), but I'm guessing other languages will eventually be added.
So the script should like this for each field respectively document.queryselectorAll('input[type="birth"]').value=1999.1.01 document.queryselectorAll('input[type="joining"]').value=2018.10.11 Please correct me If I am wrong Appreciate your help 
No. Something like ``` document querySelectorAll('input [type="Date"]')[0]. value="1999-01-01" document querySelectorAll('input [type="Date"]')[1]. value="2018-10-11" ```
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Emulating Require in the Browser with the Function Constructor](https://www.reddit.com/r/programming/comments/9nbl8h/emulating_require_in_the_browser_with_the/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
But currently, what do you, or anybody else here, think is the best language to start making a webassembly project?
This article form some random guy agrees with you :) https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html
Vue in a Vue app
autism
Haha, nice. Our conversation is a mirror to one in the hacker news comments for this as well :)
I just tooka quick glance at this and it looks extremely helpful. Thank you.
&gt;runs like a STD in Javascript community LOL I loved this bit... :)
React should bind to any node you tell it to. So that wouldn't be too hard. but, I think you're asking the wrong question. Instead think about what your plugin developers want to use. Build for that.
If it's locally, you can use the [Local Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage).
Just gotta run slack to keep that CPU going ;)
!xkcd 927
[https://xkcd.com/927/](https://xkcd.com/927/)
From context it was clear I meant JS syntax. You can absolutely compile JS syntax to binary. There may be some tweaks needed like typing (though that could be done before compiling a-la swift). Please inform yourself before embarrassing yourself with things you don't understand.
Related: https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1
Between yours and mine, which do you feel is better and why?
&gt;Instead think about what your plugin developers want to use. Build for that. Yeah that's what I'm doing. Some people like React and some people like Vue. 
Some people think cucumbers taste better than pickles. You might get people who want to use angular.
its nice
That's a great idea! thaw-carrots should support different folding at home style computations and let you run your favorite 🤔 &amp;#x200B; And yes please don't use this for a long time. Carrots thaw fast.
Real assembly, which you disassemble to C and then use emscripten to compile it to JavaScript. Then you can use a JS to WASM transpiler and generate the wasm binaries.
We’re in the same situation with a lib that runs plugins in React, Angular and Vue, possibly others in the future. We kept the lib independent by driving it with Redux, which has bindings for all frameworks and writing your own is trivial. Customers take this and wrap their own components around it, or we do it for them. If that’s not an option then it’s obviously React simply b/c it’s the most used. Using React components in other frameworks is trivial.
Rust. 
It's other way around tho.
The error should be on this line: `'col-sm-12 col-md-9.item hero-container.item-content.tag-links'` Notice that when you write `col-sm-12 col-md-9.item` you're asking for the item with the classes `col-md-9` and `item` inside an element with the class `col-sm-12`. Check out the HTML structure and you'll see that there isn't an element with that characteristics.
That would be very interesting. Might try if I can learn Rust then. I always read good stuff about it. 
I use Chart.js ([https://www.chartjs.org](https://www.chartjs.org/)) for my projects, as far as I know its completely free to use unlike some other chart options which require licensing.
haha. This actually takes me back to when i had my first computer with multiple cores. Was a dell laptop i bought in 2006 for college. Learned some stuff around drawing graphics with java, and putting it instead a thread, i had it draw rectangles randomly as fast as possible. I could turn on my cpu monitor, and see it using both cores. The drawing was really crazy to look at, as i randomzied the colours as well.
Why not? If you don’t have a lot going on it’s pretty valid to have a single prototype. They include all of those scripts in the index.html, and then in the main script they initialise everything when the creation function gets called, which they do from an onload at the bottom of that script.
Doesn't really work on mobile though. 
VSCode feels more like an IDE to me than WebStorm does. It's really great.
Sorry! Wanted to supply all the needed data to debug this issue. What do you mean rendered first? How do I get the value out of it then?
https://xkcd.com/1172/
I wasn't really paying much attention to your stream though. I just randomly ran into it - yesterday I was watching some random videos about React and came upon your channel randomly. So this morning I was telling my coworker about your channel, so naturaly I search for it on YouTube and there you are! Livestreaming! And now I see this post! You're popping up everywhere lately! 
Good question honestly. I haven't tried getting the height from an element created in JavaScript for example. Before it's attached to the DOM. I'd also like to know if offset height and clientHeight doesn't work for you. I believe the reason being is that you can't really tell the size of an element since it can be changed with css. So it needs to be rendered first in the DOM before you can get the height.
Works 👌 on an xs max 
You might have better luck in r/java ;)
&gt;Thanks for the suggestion. I'll give it a go.
I see you've given a lot of thought to the engineering on this project, but have you considered integrating a [PID controller](https://en.wikipedia.org/wiki/PID_controller) to more precisely hit your thermal target?
Plotly.js.
How does this compare to something like o say a 6 pool? Asking for a friend.
Interesting
Sorry I'm not sure what you mean
Are you parsing the JSON before you display it? What does the function are you using to get the JSON look like?
&gt; Also with the querySelector, each html element in the hierarchy must have a class/id selector right? My hierarchy is like this right now and the last one hierarchy are &lt; a&gt; that don't have a class/id selector, so I thought I couldn't use querySelector. No, not necessarily. Remember that querySelector behaves similarly to CSS selectors, so to access an specific element that doesn't have an ID or class you could simply use the [element](https://www.w3schools.com/cssref/sel_element.asp) selector or the [nth-of-type()](https://www.w3schools.com/cssref/sel_nth-of-type.asp) selector if you have more than one of the same element. &gt; Right now, I'm trying getElementsByClassName like this, but it still gives me an error that says "In 'document.getElementByClass('col-sm-12 col-md-9')', 'document.getElementByClass' is undefined" Check the name of the method you're using carefully, the error says: In 'document.getElementByClass('col-sm-12 col-md-9')', 'document.getElementByClass' is undefined I don't think `getElementByClass` exists but `getElementsByClassName` [does](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName). Let me know if you were able to solve the problem!! 
you might like p5.js
What about a mug warmer for your carrots 🥕? https://www.amazon.com/Mr-Coffee-Warmer-Office-MWBLKPDQ-RB/dp/B000CO89T8
It's part of the bixby sdk I think, I googled the function and it doesn't look like it's used anywhere else. It looks like i might be asking this question in the wrong place.
looks promising. all be it quite alien. by the looks of it this may allow me to Creating HTML images effectively on the canvas level? 
What’s wrong with d3.js? 
I think it would be easier to understand the problem you're having by sharing a code example. It's hard for me to give any answer more specific than "You could write a function that returns the labels."
[Images can be used in canvas very easily](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
Works on my Pixel XL
damn im a sucker for these. bought it because i been meaning to build a sticker side project with these toolsets just to get my foot in the door with this hyped stack for quite some time now. thanks!
And my Axe.
Not sure about pricing but I found a bug. When entering a height greater than x feet 9 inches the metric conversion is wrong.
Passed 9 feet 
didn't watch your stream. What sound issue?
Not sure how to make this a11y. Maybe role="button" and use a different flow to a confirmation modal if activated with keyboard?
Hi /u/LukeTenU, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
use seperate repos. it ensures a clear break between your backend and frontend.
5'9" converts to 179.83cm 5'10" converts to 155.45cm 5'11" converts to 155.75cm
Hi /u/mv900, please keep it respectful.
I put them in the same repo. This way if someone is going help you with the project it’ll be easier for them to set it up on their machine. 
Personally I would group them into a single repository.
I'm using a directory called "client" inside my server directory. See: https://github.com/ndabAP/vue-sails-example
And it won't remove because it's not really faster then js. It's suitable only for heavy computations but the other things we write every day will run with the same speed or even slower then js. That's why there is no crazy hype about WASM
Seems oddly familiar to the video on angular angular fire base that came out
That’s hilariously relevant
Looks like a bit more than just an idle bot. Does the node-steam API not support idling invisibly? This can be nicer for some users as they can then idle while asleep/etc without appearing online. For an idle bot that's not trying to be more though everything from messages to trade offers should be ignored so the user can instead handle them using the desktop client, mobile app, etc. Or are you working on making it more?
Good thinking, but I wtf everytime I have to scroll further to understand how to use your library. So much to do for so little. This library is like a steak that's burnt to a crisp. I'm not gonna get sick eating it, but I'm also not gonna enjoy it. A thunk plus the fetch API well require a couple more words of typing, but be standard and obvious how it works. If your project gets big enough to support many ppl, you can make a custom tailored library for your redux needs. Till then, either manually write everything or cheat with Apollo. Although, just to ramble a little more, I would like to see a library like Apollo, but for REST instead of graphql.
Or alternatively, just open 57 tabs of Youtube in Chrome.
I think so, this video describes using images well. Around the 10 minute mark I see images (of cats) moving on the canvas https://www.youtube.com/watch?v=i2C1hrJMwz0
You don't need to eat your laptop. You only need to eat the carrots.
Whatever, try Xcode with multiple simulators, a node server with watchman, and android studio with an emulator on top of your favorite IDE and then give me a call. React Native dev environments can melt steel beams.
Pretty cool. Seems like using a `button` element would make more sense?
For simple projects it’s fine to have them in the same repo. Think about it like this: is it more work to keep them together or to split them apart?
Ok fair enough! Is there any benefit to using the class vs object, such as 'this' or whatever ( I really don't know)? Also, they don't seem to actually call the function or any of its methods....does that have something to do with how the class works?
I’ve been wanting to get into these sort of projects but I’m really only comfortable with JS. I’ve looked at Jonny5 but I was wondering if you could possibly point me to some other resources. Everything I seem to find is mostly python. 
What do you mean by a "clear break" and why is that important to you?
thanks man! subscribed!
'''npm run carrots --warm'''
if you mix the backend with the front end you can get overlap.
there have many great resources on C++
If you're into Javascript you'll probably be interested in Espruino: [http://www.espruino.com/](http://www.espruino.com/) It's an open source Javascript interpreter that's been optimized to run on microcontrollers. And it's a really thorough implementation of JS too (it even supports most of the ES6 standard). They sell devices pre-loaded with it, which is the easiest way to get started, but you can also flash the interpreter to other microcontrollers. Programming them is literally as easy as writing JS for a webpage. Some of the devices (like in this video) even have WiFi or Bluetooth capabilities which you can control with Javascript as well to talk to other devices on a network. It's pretty neat stuff.
My company is now doing on iPhone Xs
You tryin to start a war? 
Probably better for Slack. /s
OBS doesn't ask for sound and webcam permissions on MacOS Mojave so it isn't able to use those. No sound on stream.
But unless you need all those options, Highcharts is quite expensive and they have a license model that you have to pay per developer. 
oh my I've been playing with Windows 10 IoT but this sounds amazing@!
1) Writing web apps in their native language 2) Nope. C# and Java were my first 2 languages. I love C#. 3) I don't see Java or C# being very well suited for front-end development at all. Maybe for back-end. I haven't found PHP to be relevant for some time. 4) I transitioned from C# to JS. I really didn't care for ASP .Net. Initially, I found JS to be very awkward and clunky. This was 6 years ago. It has since matured very well. I personally feel like I have much more freedom and much less guidance in JS than in C#. It's hard to know if you are writing good, idiomatic code when you are learning. At first, the differences in how variable scope, and hoisting, and type coercion worked was quite off-putting. Though now that I have a strong grasp and JS has better features, I find it to be a very enjoyable and productive language. 
Shit like this is why ppl make fun of us
404
Because compiling TypeScript to WASM would be a bear. Even if you got it working it would not be a “close to the metal” implementation, which is the goal of this project. 
Yeah, Rust is probably your best bet, at least until some of these other efforts mature. 
 "low.js, the port of Node.js for embedded devices" http://www.lowjs.org/ You can also buy ESP32 devices with lowjs pre-loaded: https://www.neonious.com/Store Disclaimer: I haven't used this myself yet, because I've been developing on the ESP32 with C and the ESP-IDF framework, which is pretty nice. I haven't programmed C before, only Javascript but the transition wasn't too hard (but I also have many years of assembly language experience). lowjs is extremely interesting because I've been using javascript for 20 years, as well as working with embedded devices in assembly for far longer. For Javascript on embedded, there is also https://mongoose-os.com/ - code in C or Javascript. This seems pretty nice, too. ESP32 is a fairly new IoT platform, it's a 32-bit dual-core CPU with WiFi and Bluetooth radios on the same chip as the CPU - for ~$3.80 in single quantity. Dev boards with USB software uploading are about $10. Really worth checking out. 
jup
So if my neighbor chooses to run his device on network 13 as well, will his device be able to communicate with my devices on network 13 or are there any other security measures in place to prevent this?
So are you running atom or slack to keep it warm?
Yes, other languages will be added soon. We are looking for contributors to help with that.
They’re just jealous coz they boring
thank you
thanks. this will work i think. i forgot about this. i had used it on game embeds before. thanks
Or just fire up the election Slack app.
What's wrong with that? Assuming both are written in JS, why would having some shared code (e.g. utils) be bad?
The problem with this -as with many things thrown on CodePen to show- is that, while nice, it's hardly reusable or configurable. The effect is made ad-hoc, the delay is hard-coded into the animation, there's no separation whatsoever between what is _generic_ and what is _particular to the example_, the code is not properly encapsulated and some names are bound to cause conflict with existing code. It also uses `eval`. I don't mean to put you down with this, but instead encourage you to consider these aspects and keep working on it to make it _much_ better. Ideally, you'd want to offer just a single function that _could_ be something like... holdClick(element, delay, successHandler, progressHandler, cancelHandler) ...so that the things that will change from project to project or from instance to instance can be configured. Note that you may, _in addition to this_ not instead of, also provide the option to "mark elements" and let them be set up automatically in some way. But, I insist, as an _addition_ to the other much more reusable function. Note that the above suggested function signature is just a suggestion. You might go for an event based approach, or some other reasonable way.
I don't really know how to do that. Sorry. I only want the first occurrences of 1080,720 and 480.
Alright, thanks for letting me know. I'll make sure this doesn't happen again.
This was for an online casino, I imagine they do this kind of a thing and all the well paying companies in my country of origin tend to ask these types of questions. 
Just leave chrome running overnight 🤣
try running gentoo if the carrots are still frozen, the last resort is mining crypto
At university I learned that when you work on IOT projects you mostly want to control almost each instruction that's run. I've coded a lot of asssembly and C code to get this done. Morever, I've learned about failed NASA projects and militar services that failed because of a really small issue with the assembly code. We got into a point where people uses Javascript to code IoT devices... I am sorry but I can't really find a reason to. Why does JS want to take over the entire world? Frontend, backend, desktop, mobile, iot and none of these work as a reasonable alternative to the current tech yet people want to use it...
What's up with everyone not using C ? Why you people using JS and other things ? No offense to anyone I am curious 
"Embedded" is a *huge* space. It's everything from tiny 8 bit controllers (yes they still exist) where you can greet every single RAM cell by first name to full 64 bit OS (usually Linux) running embedded PCs. It comes with the space that the needs of those doing "embedded" stuff vary hugely. Often the context is &gt;90% and the actual device and what language you use is an insignificant part. For example, while I myself definitely prefer C the company I work for has a product that has to run on browser, iOS/Android (via React Native), node.js - and now there is interest from somewhere to have the software run on some embedded devices. The only language we can choose that works for all is Javascript. I would gladly choose something else, but unless we start writing different code for different platforms it's Javascript, period. So I'm experimenting with low.js now for the embedded version.
No problem. Good luck. 
I will be messaging you on [**2018-10-12 15:38:43 UTC**](http://www.wolframalpha.com/input/?i=2018-10-12 15:38:43 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/9njhow/question_about_ides/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/9njhow/question_about_ides/]%0A%0ARemindMe! 4 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
They are both awesome. I haven't used webstorm for a few years(other than just as a database client), but even in the days, the git integration was better than vscode. The database client is nice also. I use vscode, it is more lightweight and responsive, and with the right plugins, I can do everything I need, they have several vue plugins, I use vetur. The best would be to try them both and see what best suites your needs.
Webstorm with full license it’s pretty cool used to work with it at my previous job, not there anymore so the free VSCode it’s pretty cool, would go back to webstorm tho 
Why would anyone use javascript to program these? Jeez. 
Because thinking is too hard and money is to be made selling to dumb people. Look at the success of robo calling.
Uh. C is cross platform. JavaScript is last to the game. Before this, no one used JavaScript.
u/groundbreaking_lion, u/consoleTVs That devices exist because JS is easy to learn and allow non-technical persons made cool things based on tutorial etc. For commercial work C is still the best. 
What I understand here is: New people learn a bad tech to do X thing because it's easy. New people becoeme older and what they know is what it's used in the industry now because they have no idea of anything else. People start using JS everywhere. How many REAL enterprise apps are based on electron / react native? It's a shame to waste the native platform tech just because hey, JS is trendy right? It's just slow as fuck compared to native tech but who cares. JS ecosystem will someday re-write assembly or C in Javascript because lol who would want to learn it when you can learn JS.
Both have their pros and cons but overall not huge differences. I’ve had issues with both, usually with intellisense stuff stopping working or a project making the software crawl for inexplicable reasons.
It's a matter of preference really. Try them both for a couple of small projects and pick the one you like better. Vscode needs some getting used to first. Webstorm does less so. I switched from webstorm to vscode. feels lighter and snappier, i only missed webstorm's conflict merge tool but there are pretty cool git plugins for vscode which i mostly like better than the webstorms git support.
Webstorm is great, but you do get out what you put in with it, and as such when starting a new project, you'll have to click around and mess with the config in order to get things running. When stuff is set up though, the features it gives you are great. I find that I don't need to swap windows to run tests, use terminal or git etc. Its all in one place which makes it fast for me to code. I can always tell when colleagues use basic text editors as WS inline linter is always flagging up things that they have missed. 
And you call this "an engine"?
I believe future is has both ways. JS become mature programming language and compilers are going to produce good quality and performance code. Enterprise apps from client side are MOSTLY JS at this moment. Every angular / react / vue app served from browser or electron. This is cool and we should look at JS and other languages like for good mariage :) Because JS allow you react fast and backend technology allow you unleash hardware performance.
I assume you've done something more impressive you'd like to show us?
It sounds like your are overthinking things and/or planning for non-existent problems.
Instead of shitting on this guy’s work, how about you offer constructive criticism?
I mean he isn't wrong though. This is not a game engine lol.
Wow this looks incredibly cool. I always like projects that make something hard, easy to understand. Great work :)
Just try them and see. Don't let tooling indecisiveness keep you from the coding! Also, just stick with vs code it has all that stuff and if you ever use typescript you'll get all the nice typescript integrations. 
You should probably fix paint ordering. If you try to instead fill the triangles, the back face shows up at the front for every 2pi rotation. Example: ctx.beginPath(); ctx.fillStyle = "rgba("+(255-Math.min(x0,255))+",0,0,1)"; ctx.moveTo(x0,y0); ctx.lineTo(x1,y1); ctx.lineTo(x2,y2); ctx.lineTo(x0,y0); ctx.fill(); 
Javascript was created in 10 days back on it's day. C is 46 years old and kicking asses today. Why? Everything is based on it, even nodejs is based on C and C++. Do you think something written in C can beat C? It's not possible fella. Node can't beat 46 years of compilation optimization. It simply can't. Do you have more than 10 electron apps in your PC? Yes? So you have 10 copies of chromeium on your pc, yey! Electron is slow as fuck, editor liks VSCode or Atom struggle to load large files and are unable to handle lots of folders (it even crashes sometimes if node_modules is not ignored lol). I'm more with that guy's opinion: http://tonsky.me/blog/disenchantment/
That’s why OP called it a 3D engine
I don’t see why people are bashing JavaScript. How is the language of the internet not suitable for an IoT device? Not to mention that the V8 engine is incredibly fast so that’s not really an argument either. 
Thanks for sharing, it helps me to understand how 3D engines works ! 
Use (decodeAudioData)[https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData]. You may want to look up some WebAudio tutorials.
How about instead of giving this asshole the attention he is desperately craving, you just ignore him.
Maybe I'm a curmudgeon, but I don't understand the utility of all these blog posts that reiterate a small portion of a project's official docs.
I would advice to stick with vscode. Been using webstorm for over 2 years but recently switched to vscode and I am enjoying it. Much lighter, free, portable, and most of the things in webstorm can be done in vscode with the right extensions and settings. Even if u have license for webstorm now maybe later u won't have it and no one likes switching between IDEs/Editors. 
Its not an engine its a function.
Link, maybe ? :/
He said it was to help beginers learn how opengl and directx work. Opengl and directx don't work that way.
And this is how "Simple Engine^^^tm" began
Please read again and then think. Your second sentence is completely random - did you know that trees are made of wood? Tip: Write C programs for iOS, Android node.js environments and for browsers. Then come back here and report. Why does it feel like you didn't read much of my comment, or had a talk on the phone while reading it?
&gt; your response is off topic to what is being discussed. Do you have a mirror? Please use it. YOU made the mistake. Moron.
&gt; your response is off topic to what is being discussed. Do you have a mirror? Please use it. YOU made the mistake. Moron. Downvote yourself first when it is YOU who is the problem.
I used Javascript because writing asynchronous network code like this in C is a pain and it offers no benefits when your bottleneck is IO-bound rather than CPU speed. This is the same reason that anyone would use NodeJS instead of C for writing a web server. LoRa is really low bandwidth and the modules themselves have fixed baud rates over UART. No matter how fast your C code is the device will spend most of its time waiting for IO. Additionally, to deal with concurrent events like bridging networks and handling interaction at the same time on a single-core device like that (which doesn't have an OS to thread things) you would have to write some kind of event loop in C. And then you need to debug/test it, etc. JS has one of those builtin. And then if you want the scheduling capabilities of JS, you need to implement/debug/test those, etc. And then the text processing, because a lot of modules like these communicate over UART with text-based protocols. &amp;#x200B; So those are some of the reasons I used Javascript instead of C for this. For what it's worth, I love C. And assembly. In fact, if you check out my channel you'll find that some of my most popular videos are assembly programming tutorials. But don't overlook the tools that a solid JS interpreter give you. If those tools are right for the job, use JS.
[http://github.com/salaros/is-biz-mail-js](http://github.com/salaros/is-biz-mail-js)
There are other security measures. The devices also have to share an AES key. In the demo I used a default one but the module I wrote has this setPassword method: [https://github.com/wybiral/espruino-modules/blob/master/RYLR.js#L203](https://github.com/wybiral/espruino-modules/blob/master/RYLR.js#L203) Both devices need to share the same password in order for the messages to be successfully received.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [wybiral/espruino-modules/.../**RYLR.js#L203** (master → ef0b025)](https://github.com/wybiral/espruino-modules/blob/ef0b025e3714c1333597b66644d8f4cd84e61692/RYLR.js#L203) ---- 
Javascript is really good at handling asynchronous network code. So, for the same reason that people use NodeJS instead of C for writing servers these days.
I ve actually tried this same technique with filling and it works but is very limited What you actually want to do (dont take my word for it, i didnt look into this at all, its only my theory) is loop transform the triangle into a 2d plane and loop through every point contained within this triangle and add a color (could be a pixel from a texture that you mapped onto the triangle) to a array of pixels with its z coordinate (you do this for every triangle) so then later you draw the color closest to the camera for every pixel on screen
I'm not really a 3d guy, but a decent place to start reading is probably https://en.wikipedia.org/wiki/Z-buffering
Thanks ill check it out but first I'll try to code my method as an addon for my [game engine](https://github.com/anxpydev/minty).
Then the commenter should have said that instead of responding like a dismissive asshole.
Nice! I really like the code :)
I apologize to everyone for my dumb mistake , please remain calm. I feel I am biased towards C and I believe that every problem set has a different tools. Please forgive me 
How come there isn’t more of an effort to compile one of the more enjoyable languages like python or something.
That's a lie. They use node because it's trendy, that's all. Don't say JS is faster than Go or better at async stuff than go or elixir or nim. JS is trendy, it's trying to beat everybody but failing at it tremendously yet people think it does. It does not. Want async stuff?? Go Elixir or go. Want speed? use Go or Rust, More? C was never intented for server side apps. It's a generic language. Have you ever considered why PHP was born for? JS solves nothing...
I used vs code for a long time before my work decided to switch us all over to Webstorm and IntelliJ. I wasn't a huge fan in the beginning, but I struggle to code without it these days. Obviously that's hyperbole, but I do find that when I code in Codepen or stackblitz, the lack of auto-closing tags trips me up, but also the lack of auto-quotes after an `=` sign in an html attribute. In Webstorm, If I type `class=`, it automatically adds the double quotes and puts my cursor in between them. Auto-formatting with ts-lint/es-lint is damn nice too, no spending hours looking for a missing semi-colon, just `ctr+shift+l` and off you go. Everyone else has mentioned git integration, but there's cli integration too for the angular-cli and create-react-app and a bunch of others. Way more themeing options (Imo) when you use Material-theme too. 
In JavaScript, classes are pretty new. They were added recently but they're really just "syntactic sugar", which means they look nice, but under the hood they're literally just objects with prototypes.
Probably a little off-the-wall, but have you considered (Neo)vim with tmux? I use this daily, and I really enjoy the workflow of being able to work entirely from the terminal without ever touching my mouse. Obviously, your mileage may vary, but it’s worth considering :)
Frontend code is not generally a source of security issues. If you have a web service that your frontend code uses which could be abused, any rookie hacker could abuse it easily, jQuery widgets or no.
Reordering triangles (drawing the furthest one from the camera first, ... the closest to the camera as the last one) is a very limited technique. E.g. when triangles intersect each other. It is better to use Z-buffer for it (for each pixel, we remember the closest distance, that was rendered into it. We replace the pixel, only if the new pixel is closer).
I’d never blindly use the “latest” of a js CDN in case of breaking changes. I know you said you don’t care about the site breaking but just want security updates but you’re just robbing Peter to pay Paul in that respect. Keep an eye on security changes and test when new versions come out
Oh, I'm not saying it's not _limited_, but sorting the polygons/triangles would work for limited cases without turning the code into a 500-line beast
Calm down. I actually use Go professionally (backend web dev) and it's one of my favorite languages. That doesn't mean that JS isn't also good for asynchronous network programming though (it is). None of that is relevant here because there are no microcontrollers that run Go at this point. And this thread is about \*running JS on microcontrollers\* to make it easy to bridge networks and handle asynchronous IO.
The original comment asking why someone would use JS for something like this got deleted so I'll post my response here: &gt;I used Javascript because writing asynchronous network code like this in C is a pain and it offers no benefits when your bottleneck is IO-bound rather than CPU speed. This is the same reason that anyone would use NodeJS instead of C for writing a web server. &gt; &gt;LoRa is really low bandwidth and the modules themselves have fixed baud rates over UART. No matter how fast your C code is the device will spend most of its time waiting for IO. &gt; &gt;Additionally, to deal with concurrent events like bridging networks and handling interaction at the same time on a single-core device like that (which doesn't have an OS to thread things) you would have to write some kind of event loop in C. And then you need to debug/test it, etc. JS has one of those builtin. &gt; &gt;And then if you want the scheduling capabilities of JS, you need to implement/debug/test those, etc. &gt; &gt;And then the text processing, because a lot of modules like these communicate over UART with text-based protocols. &gt; &gt; &gt; &gt;So those are some of the reasons I used Javascript instead of C for this. For what it's worth, I love C. And assembly. In fact, if you check out my channel you'll find that some of my most popular videos are assembly programming tutorials. But don't overlook the tools that a solid JS interpreter give you. If those tools are right for the job, use JS.
Seems a little strange to optimize a CPU for a specific programming language considering CPU architectures have a far longer lifespan. Will this be wasted silicon in 10 years if everyone is on WebAsm?
Sure. Made it a function that accepts an element, fill color, text color, a time to hold value, and a callback for you. Also prefixed styles with an 'hf_' to lessen the chance of colliding style names. Thanks for taking the time to look and comment. Still not perfect but hey.. just fun to mess around and learn right?
I've gotten from working with WebStorm in the past to VSCode and I personally like how VSCode is much more lightweight. I barely miss any of the WebStorm features as well so personally I recommend VSCode.
Don't know why this guy is getting downvotes, he's right - it isn't an engine, it uses JS Canvas for some simple draws, so calling it an engine is misleading. It's just a neat sample. Another misleading thing is the "fragmentShader" function, which draws the outline of the triangle, where in a real fragment shaders this geometry would have already been created, and the function would run independently per-fragment.
JavaScript will be with us for a *long* time. Even in the unlikely case that we all start using wasm exclusively (remember, wasm isn't meant to replace JS, but augment it), then there will still be the massive amounts of JS code that we will need to run far into the future. And in any case, this is just one extra instruction so worst case scenario there will be an unused instruction.
I have used both. If you have free license of WebStorm, then go for it. It's slightly better in terms of IntelliSense functionalities and faster. 
Amazing dedication to build an entire business on the back of strawmanning everyone else's interview process in an angsty rant with completely unsubstantiated claims of having a better results if we give you money 
I have done something similiar [here](renderer.surge.sh) a while ago
If you can get your hands on webstorm use it. If you can't then go for VS code. If your working only with pet projects features you'll miss will be a bit smarter intelli sense, local history (most important probably) and better global search.
got the problem fixed man had my math wrong lol got it now thanks again. let ft = height[0].value, inc = height[1].value, conv = parseFloat(ft * 12 * 2.54 + inc * 2.54).toFixed(2); conversion.textContent = conv.toLocaleString('en');
Keeping them in the same repo makes it easy to load unnecessary modules, and obfuscates what is needed where. I have frontend and backend as two separate repos in the same Project parent folder. 
There's always the right tool for the job. Did they ever told you that? If there isn't, build it! This JS on IOT is like: There's already the right tool for the job. Let's add some js interpreter and pretend it works better, yey! Same with server side, mobile development, desktop development etc. The JS ecosystem is evolving into a huge pile of bolated code that leads to lower results just for the shake of fun with an easy to learn language that pretents to be the google of programming languages in 2018. You don't belive me? 4 years ago everybody was really happy with Jquery. Then suddently, everybody is using Angular because wow, Jquery? old shit. Then heeey React comes in, Angular sucks guys lol and now literally hundreds of JS frameworks are there, everyday a new one is born. Tell me another programming language where each year (or even less lol) it uses different tech or frameworks to achive the same result. Common sense tell me that they 99% of the times are focusing onthe improvement of the working tool rather than, hey let's make a clone of X because hell ye, I wanna use virtualDOM now, DOM is so 2010. How many C compilers are there? 100? Competition is good. gcc, clang, etc. Great to have a few choices, but what happens when there's something to improve? They do create a new alternative? THis is what JS is doing, creating alternatives to everything they can instead of fixing the stuff it owns. Going back to this IoT stuff, Why would you want a microcontroller with a huge language loded in just to execute console.log('hello'), makes no sense. Embeeded devices have always cared much about the available space and the execution speed (as you know since you pointed it out). From my prespective, JS community did it again, they made a clone of an existing working tech to solve what? Beeing unable to code JS on a uC? Jesus in 2 years we will code JS to program my toaster. Let me quote: "As a general trend, we’re not getting faster software with more features. We’re getting faster hardware that runs slower software with the same features. Everything works way below the possible speed." From http://tonsky.me/blog/disenchantment/ let me ask you, what does JS on the uC solve for you? (If you just use it to prototype, why not use the existing Lua projects - That basically are there to prototype most ESP32 / ESP8266.
&gt;Going back to this IoT stuff, Why would you want a microcontroller with a huge language loded in just to execute console.log('hello'), makes no sense. Embeeded devices have always cared much about the available space and the execution speed (as you know since you pointed it out). From my prespective, JS community did it again, they made a clone of an existing working tech to solve what? Beeing unable to code JS on a uC? Espruino is a version of Javascript optimized for microcontrollers. Not all embedded applications hinge on execution speed. In fact, most of the IoT applications I've work on rely more on connectivity and IO. Sensor logging, switching, basic rule-based systems, etc. And here's the thing... Using Espruino JS is using C. The interpreter was written in C. The code to handle lower level protocols are written in C. Those are the situations where you need the precision, not at the level of your application where you're coordinating the different components. A scripting language works fine for that part. If you look at the application here, the demo at the end is bridging BLE -&gt; LoRa -&gt; IP (WiFi) networks, so it's a bit more complex than "Hello world". The code to do the low level network interaction ***IS*** compiled C code. I'm using JS to coordinate the flow of data. It's no different than if I had used prewritten C libraries and glued it together in C except that my approach requires ***much*** less code and the promise-style asynchronous API is easier to work with everything concurrently (otherwise you basically have to write your own event loop in C). I'm sure there are IoT applications that demand heavy processing, in which case this approach won't be appropriate, but in my use case here (the reason for this thread and why you're commenting) it's almost entirely IO-bound and using JS makes perfect sense. You're worried about shaving a few method lookups off of the interpreter loop and not thinking about the fact that LoRa is SLOW. Most of this application is spend waiting on IO. And the concurrent promise/callback design of Javascript is a logical fit for those kinds of IO-bound problems.
just inline the simple things doSomethingWith(conditional ? 'value' : 'some other value')
&gt;Don't know why this guy is getting downvotes Because his response serves no other purpose than to shit on OP. If he wanted to be constructive, he could have explained why it's not an engine or recommended some useful modifications or extended reading for the OP to continue on his path. Instead he offered a pointless remark for the sole purpose of being a dick. So he gets downvoted like a dick. 
[Rainbow text generator](https://charlesstover.github.io/rainbow-text), built with React, using an open source npm package that rainbowifies strings using an open source npm package that returns an array of each color in a rainbow gradient, given a length, saturation, and lightness. Glad I'm not the only one obsessed with automated color generation.
One thing to try is using a `button`, and its `:before` or `:after` instead of `.inner`
Just remove all `&lt;audio&gt;` elements also? Worth a shot.
This is really cool, but this isn't really how fragment shader works though. Fragment shader doesn't draw lines but interpolates pixel values between vertex positions. There are a lot of cool JS side projects like this one, but I hope no one sees this and attempts to extend to have z-buffer in pure JS. It really doesn't take much of an effort to draw something in 3D. http://jsfiddle.net/e30r2oyq/ I put together the above example, and other than the perspective matrix and rotation matrix, drawing a static 3D is simple.
Update: I got it to work. Code in initial question.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Notepad++ 
Socket.io has the ability to use rooms. You can make the server generate a random ID for everyone who wants one, then allow people to share that ID with someone. Then allow them to enter the ID, make the server assign them the same room, and you can go on from there.
how to add terminal velocity to a free falling body?
Amen
this is an option I was thinking about, but wondering if I can utilize another method? mainly for learning purposes.
mistyped -- thanks.
&gt; A JavaScript library for detecting non-business ***email*** addresses FTFY
webstorm is great, but once the honeymoon is over (when you have to start paying for it) you start to realize that you can get *almost* the same stuff out of VSCode, which is free. I made the migration from Webstorm to VSCode because I didn't feel like paying for webstorm.
This is *very* cool, but an engine it is not by any stretch.
yeah, youre going to have that problem regardless of the solution. If you want to maintain a room for every 1:1 connection, then theres n*(n-1)/2 possible rooms. The query to find all the rooms that a user belongs to would take 'long'. But if, say, when the user logs in, you run this query once for the user, find all the rooms he belongs to and from there on keep track of new ones added, you'd only have to run it once per login per user 
Hi /u/Flerkje, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/kennythepenny2005, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Move your `xhr.onload` above `xhr.open()`. 
Hi /u/idesi, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `frontendmayhem.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [frontendmayhem.com](/search?q=%28and+site%3Afrontendmayhem.com+author%3Aidesi+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|44|75%
GraphQL, specifically with subscription queries 
Add an air drag coefficient
Thanks for elaborating!
Now, we just need breakpoint, expressions and custom watcher.
Going from VS Code to Notepad++ would be a massive downgrade.
I should probably have made my point more clear (or rather explicit): OP's post completely glosses over or even completely misses certain details about 3D rendering (another central point is the actual projection of 3D space onto a 2D space including the field of view calculations)
That looks like more than 47 lines of JS
So, explain why /u/spaghettu is being downvoted. While the original comment was short and dismissive, it was right. spaghettu offered direct examples into why "engine" is misleading, but still got downvoted. Even outside the realm of "3d" the use of "engine" would've been misleading, as there isn't much in the way of something that abstracts or makes the task easier; it's merely an example of how to draw single-color unfilled 3d vectors on to a canvas, while glossing over things like FOV. Had the code been adequately commented, and the maths behind the aspects, I think it would've served some good. As it stands now, it's hardly useful, and it's certainly not impressive. I mean, [this](https://www.youtube.com/watch?v=w0K5qwnVa8c) was programmed by a couple of 15-year-olds on a machine running on a machine with all of 512kB ram and 7.14Mhz clock frequency, with no FPU.
I'd rather not, as I *really* don't care about upvotes/downvotes enough to continue this little spat. It's an internet web site. The votes mean nothing. Explain why you care so much about it?
&gt; Explain why you care so much about it? I don't, but I think the downvotes are undeserved, and just wanted to spend all of 30 seconds speaking up.
Old schools devs. I partly understand them, but Js allow you to prototype and make fancy apps and also corporate apps. Without JS we would be still in flash era.
I don't want to dive into your code too much but I did spend about 15 mins on it. Here's an abstract solution I think would work for most carousel libraries: Whenever you click next, or previous, the carousel items get re-ordered and then you scroll. You have 4 sildes - 0,1,2,3 Say you're on 0, and click next. 0 1 2 3 ^ The carousel scrolls to 1 0 1 2 3 ^ now use pop() and unshift() to reorder the slides so the item you're on is the first item, and everything else is after. 1 2 3 0 ^ 
Running your CPU at 90°C is perfectly fine. 
I wish I could understand all those math. :/
gib monies plz thnks
Definitely bikeshedding, but I feel your pain. Ternaires want to be the way to go, but they don’t scale well. And then you’re left with either the “initialize a let with some default and then reassign inside an of block” approach or the “write a function to abstract this” approach. Neither are always nice. 
[This](https://facebook.github.io/immutable-js/) is where I go to read up on Immutable. I don’t think you will find a better resource.
A lot of carousels that allow you to infinitely loop through the slides usually clone the first 1 or 2 slides on the start and end. This is usually done if the user is close (within about 2 slides) to 0 or the value of the index. This makes it seamless when you move from index 4 to 0, or vice versa. 3 4 0 1 2 3 ^ &amp;#x200B; 4 0 1 2 3 4 ^ &amp;#x200B;
I am not familiar with the link you're sharing, but I've used Coderpad in the past and It's worked well. I think Code Sandbox would work well too if you're in the same location.
I think spaghettu is being downvoted because they say they don't know why the comment OP is being downvoted. 
Hit the Tidy button and there are 61 lines of code. 
Anything that auto-plays anywhere annoys me 😅 kudos to you for finding a solution.
The babe with the power!
you can use the modulo operator for that
Nice! A long time ago I used to play around with stuff like this. Brings back some good memories. I messed around with your code and added back-face culling, and a duck model. Sadly the duck model was made with Y-axis pointing up, and I forget how to fix the math, so it's rotated wrong :( https://jsfiddle.net/y23jwr6k/ 
What *does* run? What's the output? From a cursory glance it seems reasonable.
I was in love with them while I was leaning js. Now I am mainly using, find, filter, reduce and map of course. I haven't had a requirement "to multiply third and last item in array in second object etc.." in my tasks on a dev job. Anyway, all those things are useful to practice js skills after theory
What is your definition of realtime? Are you talking about OT?
All of the functions in the promise run as expected and the console.log in downloadFramework() does run. 
A few questions: * Why doesn't the `downloadFramework()` function use the `frameworkChoice` parameter? * Where does the `frameworkName` and `frameworkDisplayName` variables come from? * Can the five Promises inside the the `Promise.all()` truly run in parallel, or are some/all supposed to run in series?
I see it now. The Promise in `downloadFramework()` never resolves. Make sure to call `resolve()` at the end of your `exec()` callback. Also call `reject(error)` in the callback's error branch.
That was it! Thanks! 