Was so close to getting 1024. This is really great. Awesome job :).
2048 is the largest allowed block. Parent is referring to score instead
neat game, however a weird thing about it is you can play for an incredibly long period of time making random moves
Yeah I was referring to score, the largest block I got was 512
Wow, I made it to tile 256, score 3724 by just pressing -&gt;, v, &lt;-, v. Only had to do ^ once at score 2600. Edit: Reddit ate my comment.
Seriously
I've found that a good strategy is to try to keep all the boxes in one corner, and try to keep the largest values in the corner space. This way you can manage the incoming 2s and 4s a bit easier. EDIT: [just got my highest score yet](http://i.imgur.com/Jw8CKVO.png), but still a ways from the elusive 2048
Is there a way to have more than one word show at a time?
At first I thought it was going to be a variation of [this addicting game.](http://farm3.static.flickr.com/2681/4452952191_25f59c9905_m.jpg)
You could probably compile PUAE (via emscripten) to JavaScript and run an Amiga in an emulator. There's already a PNaCl version: http://pnacl-amiga-emulator.appspot.com/ My favourite game was Exile. I'd love to spend time making that feeling of flight.
What an elegant game. Perfect presentation. Perfect execution. 10/10
I had hoped it was, but chrome isnt even installed on the computer. It only has safari, and no extensions had been installed there. Even so, I disabled the option for extensions in safari, and it didnt fix it. 
First time playing: http://imgur.com/X7txjch This is ridiculously fun.
What does pressing slash and backslash do?
You could implement this yourself as a JavaScript library. &lt;script data-src="http://toto/toto.js" data-hash="sha1:1737038..."&gt;&lt;/script&gt; And then (untested): $('script[data-hash]').each(function() { var hash = $(this).data('hash'); $.get($(this).data('src'), function(source) { if (sha1(source) === hash) { $('body').append($('&lt;script/&gt;').html(source)); } }); }); 
Does it always redirect to the malicious site, or is it random?
I'm not doing your homework for you.
What you offer would not help with cross-site caching, but would address security concern about CDN serving unwanted content.
Math.random can be used to generate the number https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random You can the use a form with an input box to take the input, or since this is an assignment maybe you can use prompt: https://developer.mozilla.org/en-US/docs/Web/API/Window.prompt After that you just take the input and check it against the value you created with Math.random. In either case the input will come in as text so you can check it using == rather than strict equality (===) or use parseInt to convert the input to an integer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt Once you've dteremined if they match you can create a popup using alert: https://developer.mozilla.org/en-US/docs/Web/API/Window.alert Hope that helps to get you started!
Was this article translated from another language automatically? The grammar and spelling are pretty bad. To the author: if you're a non-native English speaker, you should find somebody to help review your content before posting it. I'm sure there would be plenty of people right here on Reddit that would help.
If it is hosted from *.facebook.com then it would get all the cookies written to *.facebook.com when requested. It's possible (indeed, probably) that in the case of facebook its assets are hosted on a cdn that does *not* get the cookies, but I was just giving an example.
Fun! If you want to play something similar on iOS, I can recommend [Threes](http://asherv.com/threes/). It's one of those games I've spent hours on without really knowing why.
Probably not the answer you are looking for but I find it odd that a complete reinstall wouldn't fix the problem and am not that fluent with mac os. That being said, it is still based on unix so, have you looked at the etc/hosts file? Make sure there is nothing awry there and then edit it to redirect the requests you are seeing to localhost. Eventually this post: https://discussions.apple.com/thread/1569076?tstart=0 seemed to get to the basic instructions on how to do this (I was extremely amused by how leary the other mac users were at coughing up the answer when it was clear the op knew exactly what he was trying to do but wasn't sure of how on a mac. On a linux forum he may have gotten the answer and possibly a slught ribbing in the first comment. Guess you're not even supoosed to touch the flowers in the walled garden :p ). That should at least be more acceptable than disabling js. Finally with windows its usually pretty easy to do some googling based on the urls and find someone that has located the root of the problem.
That's true. I guess I was thinking that someone who wasn't using a CDN already due to security concerns would be able to start using one, making the cache issue moot. 
"/\" is supposed too represent the up arrow key. One of the single / characters is due to reddit using \\ as an escape character.
` &lt; ^ v &gt; `
I don't think the server in which JS is hosted matters for cookie's same-origin policy. I think it really is your web page's host (and protocol and port but the latter is enforced by the browser) that matters. Anyone confirm?
You asked what the back and forward slash characters did. I was just telling you that reddit ate part of lpetrazickis' comment and he meant them as representations for the up and down keys.
Check hacker news where it was top story yesterday ... Someone made an ai for it today.
This plays a lot like Threes for iOS. Super fun.
Definitely addictive, but having played Threes I have to say this is far easier. This is based on twos instead of threes, and that has a big effect, I think, mainly due to the lack of ones and twos that must be combined with each other before combining with a matching number. Anything above three can be doubled as in this game, but ones and twos will not double before adding them together to get three. Edit: But I hate to be completely negative in my perspective – I certainly have never built a game like this, and the fact that it's open source on GitHub makes it kick Threes' ass in the long run. 
People hated me for making this, but I've found it very useful and great for dealing with edge case bugs that seem to only rear their heads in production environments. https://github.com/chadillac/smarter_js_console Would be awesome to integrate some of these things into it as well...
thanks guys //Set randNumA = Random number 0-12 var randNumA = Math.random(); randNumA = Math.floor(randNumA * 13) + 1; //Set randNumB = Random number 0-12 var randNumB = Math.random(); randNumB = Math.floor(randNumB * 13) + 1; //Display randNumA multiplied by randNum BuserInput = Get User Answer to Question var userImput = prompt("What is " + randNumA + " multiplied by " + randNumB,"Answer Here"); //answer = randNumA multiplied by randNumB var answer = (randNumA * randNumB); //Is userInput equal to answer? if (userImput == answer) { //Display message “Correct!” alert('Correct'); } else { // Display message “Incorrect” alert('Incorrect the correct answer was: ' + answer); }
I know very little about hogan but I don't believe so. First let's see if I understand: you want to include one template inside another or have a 'layout' template that you render your other templates in as you would with jade when you use 'extend' (I always thought that wasn't the right keyword in jade :p) correct? I don't think this is the case with hogan since afaik (could definitely be wrong here) it was designed to be used for client side templates where this idea makes much less sense. You could do some concatenation by reading in the files as part of your build step where you put the body of the child template into your layout template but I really can't even say if that would be considered blasphemy since I've never used hogan with express. I've precompiled underscore templates as part of the build step before though so its definitely possible. This, however is why jade is a really good for server side templates. It was deigned to fit those use cases more naturally (I was originally very averse to it too if that is why you are trying to replace it. I like my simple html with little snippets inserted. However, once you get used to it, it actually even helps to enforce some best practices and is really quick turn around imo).
The language comparison is irrelevant here imo. The reason you have seen that practice take off in the node community is that you frequently have to edit config files with long object declarations where the leading comma can help to keep you from omitting a comma. These files have very little semantic value one can ascertain by reading through them so the leading comma stands out like a sore thumb when it is missing. The usefulness of the leading comma in that case can be clearly seen based on the high adoption rate in that environment. People have just also brought it to the client side.
So does chrome. Still no answer on which debugger this didn't work with :(
Me too! I had 2x128, 2x256 and a 512, but didn't manage to merge them :(
should be called Twos
That's the point. It doesn't provide one way to do anything and that is actually the crux of the problem. Its just that the outcome is always the same because objects are just simple hashes (I always think maybe object wasn't the right term to use and yet its use in similar languages predates OOP so it depends on your perspective). I think people are more likely to cry foul when they don't know the "right" answer but that is why js is so powerful: there is no right answer. I read a qoute one time that was something like "the best part of javascript is that you can do anything, the worst part is you will" and that's always stuck with me. The simple fact is that there are so many things that you can't do in other modern popular languages and even when they add things like the functional paradigm it stills feels grafted on and less natural (e.g. .Net not that I don't think its great as well). Yet this flexibility and openness (which seems natural to me since it is so woven into the nature of the web) also sometimes leads people into bad practices because there are so many paths you could take. As far as the issue at hand: don't forget that statement can be made anywhere including *inside* a constructor function. Lately with posts on here i wonder if people have completely forgotten about different variants of the module pattern, mixin pattern, etc. As far as the extend in the constructor, I've seen this pattern quite a lot in some more modern libraries recently where it worked out brilliantly. It just comes down to fully embracing the functional/prototypal nature of the language and playing to it rather than attempting to recreate class based OOP. These are all just tools in our toolbelt and our biggest asset is knowing which tool to apply.
So close made one mistake that moved the 128 down if I had have been able to keep it on the top row I might have made it. http://imgur.com/mkGESUq
3088 1st
Cool Stuff! I was thinking of doing this same exact thing after I saw the Spritz articles come out last week. You need to make this into a browser extension!
I'm enjoying it too. 
[Time to one up the javascript :)](http://ov3y.github.io/2048-AI/)
Currently running Jekyll on a few sites, think i might migrate over to this one tho, API looks clean and segment.io usually produce solid stuff.
I lost about 2 hours of potential midterm study today cause of this
2048 actually works beautifully on iOS (and I personally prefer it to Threes).
I know that using closures is pretty much a habit for JS developers. I just wanted to make clear that in some cases, there are alternatives.
Fair point, this analogy is quite clear to me in my head but perhaps the explanation is too convoluted. Mostly, it provides an intuitive way of seeing how changing the value vs changing the reference is different rather than just memorizing it as a quirk of javascript.
I feel like using Backbone is the same as saying "We're going to use THESE design patterns in our javascript." People say how it's not opinionated but it's basically an opinion on how your OOP should work. (which design patterns you use) I've seen projects become complete crap because people tried to ram Backbone and Require into it just for the sake of having them. I for think you should never use a new tool unless you feel a need for it because you'll end up using it incorrectly and just causing more problems. When I was in school, I used to think Git was awesome and SVN was some old outdated heavy technology, then when I started working I realized that Git was MORE complicated than SVN and I had barely used some of its best features, I was actually just using it the same way most people use SVN. We tend to think that newer technologies and frameworks will make our lives easier, but often times the improvement is minimal until you understand the frustrations they were trying to solve.
I had a 1024 using a similar strategy. I got too excited when I realized I had two 512s and forced them together at the cost of mucking up the rest of the board.
Yep, that's the way. I got around 12K playing like that.
You know, I never thought of doing that. Good point, it does work. I'll edit the post to make this clear, thanks. Nevertheless, it's still kinda weird because it means stepping in and out of all functions before it until you get there. If just wanted doOtherStuff() but not doStuff() I'd need to step into doStuff() first, as far as I can tell.
Wait, this will always take 1024 moves to beat, since a new 2 tile comes out every move, right?
really should just have the exponent. the game could just be 1-11 instead of 2^1 - 2^11
There isn't that many. A lot of them have dependencies (jQuery) or are very basic, this one has no dependencies and supports opacity and various colour formats.
How about creating a really big random string and uploading it? I don't know if that would cause any problems, never tried anything like this.
The download speed can be measured by async loading a JS with a rather big comment (250kB, 1MB, 2MB and bigger) and a single function call at the end. Add a random parameter so the JS call doesn't get cached. To measure the upload speed, you could try to use big chunks of random POST Data in an AJAX call.
Thank you. This all seems like a great help.
That auto play is hypnotic, great job.
Some guy used that to created a really odd way to create html in javascript. Check [BuildSugar](http://jsfiddle.net/SubtleGradient/4W3RR/) Basically you can generate html using this syntax: (BS ('H1' ,"Battlestar Galactica DVDs") ('P' ,"Best. Show. Evar. ") ('A href=#' ,BS ('IMG src="http://bit.ly/WinAylott"') ('BR') ('' ,"View larger image") ) ('FORM method=GET' ,BS ('LABEL for=quantity' ,"Quantity") ('INPUT name=quantity value=1') ('INPUT type=submit value="Add to Cart"') ) ) Not that I would use that in production, but it is really interesting, and shows how flexible javascript can be 
nice, that script just got 2048 first go!
great work. you should consider publishing package to bower and component
&gt;Seems to me like a cute, unconventional, potentially useless form of syntactic sugar. Bingo. And it's a pretty confusing way of doing things. I like my code to be easily read and understood. [It's also _really_ slow](http://jsperf.com/currying-vs-tuple)
there is a bookmarklet that overlays the speed reader on top of the article. It doesn't work with firefox but it works with chrome and safari. Just drag and drop it to the bookmarks bar, then when you are on a news site click the link.
Nice. Quick and intuitive. I feel it should be helpful to reveal the hex value of selected color. 
does the app have javascript based routing. If both those routes are defined in the client as well then it could be an approach to pre-rendering. thus hit url site.com/a and then you click to go to site.com/b then it could switch in page instead of rerequesting the html from the server. 
fixed bookmarklet for firefox
For text links, its the same number of words into the body of html, and always the same number of links. As for ads, I cant remember, but it would replace a few of the ads already present.
&gt; Every essay should include a counter example I got a chuckle out of this apparent play on words; always enjoy your articles, both the writing style and the content.
Where ads would normally appear. But always the same few sites that the intext ads would direct to.
It's really not too complicated but if you run into issues feel free to pm me. If I have some time on lunch I'll try to find some info on the url's that are being routed to by the nastiness. If you can tie that back to the name of the executable that is the issue you'll find someone else who has removed online somewhere I would bet. 
Yes, that is the one issue (and I am not really for or against the practice anyway) you will have to step into the first function before you can get to the second just like if you pass an executing function into another to inline the statement. 
I wouldn't call it a 'habit' as much as a 'powerful, core, idiomatic feature'
it is based on 1024 on iTunes. 
&gt;Object with prototypes are not simple hashes, you still have a prototype chain to manage. Prototypes are objects also and thus object hashes....they can be nested. &gt;The right answer is not obvious. If it is the point,then it's a bad one. So you enjoy languages where there is one set way to do anything? What level of complexity/specificity to a given enterprise sector are the apps you work on? That is about the worst possible thing that could happen in my job. This is exactly why this: http://www.nearform.com/nodecrunch/node-js-becoming-go-technology-enterprise....oh those sweet sweet facts and statistics :p &gt;ES6 is getting classes, and there is a good reason for that : prototypal inheritance is verbose , and functional programming is not the right answer to every problem. ES6 is not getting 'Classes' as in Class based languages. It will literally do exactly what all of these other methods do. It is just syntatic sugar to perform the simple 2/3 step process that people currently do (basically exactly what I just posted, stick these two object together in a constructor function) through writing Class Something extends OtherThing. This is why I have always questioned that keyword coming in. People are going to think there is some core language change and there is absolutely not. You will still be doing prototypal inheritance when you use those keywords. You will still only be using Javascript objects because that is all there is and again, that is all that is needed. It is literally just sugar. Finally, what's hilarious to me is that people are constantly trying to find ways to recreate OOP inheritance in js while everyone in those OOP languages evnagelizes avoiding inheritance as much as absolutely possible because it is the tightest form of coupling. Prototypal inheritance can give you similar benefits, with much less rigid coupling. 
Demo: http://codepen.io/suffick/details/DpnmA
Do you mean in the demo or in the actual colour picker window?
You are trying to execute the array as a function (with var randomArray(0)). My first advice would be to instead use array literals instead of the constructor. It's a best practice and is much less verbose. So it should look something like: var randomArray = []; randomArray[0] = ["Q1", "A1", "A2", "A3", "2", "Correct", "Incorrect"]; randomArray[1] = ["Q2", "A1", "A2", "A3", "3", "Correct", "Incorrect"]; ... getFirstQuestion();
The thing I don't like about Angular is how abstract it makes the code. People used to say "keep Javascript out of HTML" and would reference onclick="someJSFunction()" as a bad way of doing things. They preferred everything being built in Javascript for easy reference, let the DOM take care of things. Now we're going backwards with that by saying it's OK to use the HTML to call functions -- ng-click="someJSFunction", ng-show="someJSProperty". Now instead of knowing which file to look in, or analyzing the console for what function caused the error you have to look at the HTML and find the function or variable in the files (if you don't know where to look already). The console might throw errors at anonymous functions because of how developers choose to implement Angular sites. There are ways around this, such as using named functions, but you'll rarely see a developer actually code this way.
 var randomArray = []; //declares a new array object - the brackets indicates an new empty object randomArray[0] = ["Q1", "A1", "A2", "A3", "2", "Correct", "Incorrect"]; // the number between brackets indicates the index of the array element randomArray[1] = ["Q2", "A1", "A2", "A3", "3", "Correct", "Incorrect"]; randomArray[2] = ["Q3", "A1", "A2", "A3", "4", "Correct", "Incorrect"]; and so on... You get errors because the interpreter sees randomArray() as a function; use randomArray[item index] to access elements of an array. console.log(randomArray[0]) // returns an Array object console.log(randomArray[0][0]) // returns "Q1" - the first element of the first array
Very cool. Can you add #color/RGB/CMYK input boxes also?
great start! when opacity is below 100, the output should probably be RGBA and not HEX
Yeah just referring to the demo, adjusting the opacity value has no effect on the output value so it's a bit confusing
Hadn't heard about [monkey testing](http://en.wikipedia.org/wiki/Monkey_test) before. Reminds me of, and seems similar to, [fuzz testing](http://en.wikipedia.org/wiki/Fuzz_testing).
It seems to function for me (though you should change `Math.round` to `Math.floor` to get the proper distribution of numbers). Are you actually calling the function anywhere? The function call for what you've defined here would look like this: getFirstQuestion(); The other problem could be the use of the global variable `randomArray`, but I'd need to see more of your code before I could be sure.
I spent about 6 hours playing it last night and finally beat it. I'd start out each one by pressing ↓ and ← furiously to get the formalities out of the way. My strategy was to try my darndest to keep my largest block in the bottom left corner (think A4), and then have them decrease sequentially to the right from there. I would then funnel all my increase through D3 down to D4, then left to A4. The key was to not let smaller numbers get left of the larger ones on row 4 and not let them get right of the larger numbers on row 3. I must confess, this was most frustrating.
You must not use the var statement in this line. You defined the array in the first line, now you are just filling it with content.
My guess is, that the function has no access to the randomArray. Two possibilities: Make the randomArray a global variable (not recommended) - or provide it as a parameter. Code for the second solution: function getFirstQuestion(randomArray){ var question1Index = Math.round(Math.random()*(randomArray.length-1)); return question1Index; } The call would look like this: getFirstQuestion(randomArray); Even though I don't quite get why you would return a random index in a function which is named getFirstQuestion :)
You shouldn't use `var` when accessing an array index. If the array has already been created, just go for the index: var someArray = []; someArray[0] = "This is now the first element in the array";
The scope of my project: A simple quiz that asked 3 out of 6 questions at random There must be 3 answers provided with each question with one of them being the correct answer And then feedback elements that i can output to the screen if it's right or not
Try this: qform.innerHTML += randomArray[getFirstQuestion()][i] + "&lt;br&gt;"; Or replace `i` with `0` if you're trying to print out all the questions. Not sure what you really want here... 
It bugs the shit out of me how Safari seems to want to refresh the page every time I pull up the game after a while of inactivity, forcing me to start a new game. Now, if only there were some kind of framework for coding around stock iOS behaviors! ;)
I really like the true;true;true;true;true; it starts with :D
FYI, OP is the [author of several books on JS](https://leanpub.com/u/raganwald?utm_campaign=writing_oop_using_oop&amp;utm_medium=embed&amp;utm_source=reddit.com) himself. Also, _The Good Parts_ is filled with as much dogma as it is useful advice IMO.
&gt;People used to say "keep Javascript out of HTML" There's actually a really interesting talk I just saw about this [given by one of the React core members](http://www.youtube.com/watch?v=DgVS-zXgMTk) Basically, he argues that separating JavaScript &amp; HTML isn't necessarily a separation of concerns as much as it is a separation of technologies. Though the way React approaches HTML &amp; JavaScript intermingling is a *lot* different than Angular's method.
Hahaha, the top looked too uneven and it evaluates fine ;)
I don't have an addictive nature, but this game had me playing it for two days straight. I finally beat it! http://i.imgur.com/UwsYG6e.png
aint got nothing on [donut.c](http://www.a1k0n.net/2006/09/15/obfuscated-c-donut.html)
I'm not convinced. I guess that if I compare the generated code of the GWT compiler versus the original Java code, it will lead to the same conclusion. Actually, I think nobody would write its JS code like the one generated by CoffeeScript compiler. Here are how examples could be written by a human: function times_two(x) { return x * 2; }; You don't need to use a variable to declare a function. for (var num = 1; num &lt;= 10; num++) if (num % 2 == 0) console.log(num + " is even"); else console.log(num + " is odd"); You don't need "the unnecessary braces", the extra '`_i`' variable and '`"" +`' to cast number to string. function Person(name) { this.name = name; } Person.prototype.hello = function() { return console.log("Hello " + this.name); }; You don't need to wrap the code in a closure. Removing it makes the code quite straightforward to understand.
Depth first search, with alpha-beta pruning and a static evaluation function based on grid smoothness, and monotonicity. Nice.
Reminds me of this: http://www.ioccc.org/years.html#2012 Just browse around some of the c files, it's pretty amazing.
Heh. thanks. ;) In reality, I think it's mostly a matter of preference unless you actually work with people who may use some really terrible practices where hoisting becomes a legitimate issue (which seems unlikely in a professional setting (I hope)). That being said, as far as "leading comma" which tends to come up alongside SVP, I have been personally saved by that practice when editing very large json config files in node. So, I can definitely see the value there in that specific context.
Yes! That's what inspired it haha. I was sitting bored today and I briefly remembered that (but not what it was called.) Awesome stuff
Wow that's pretty cool
Go to http://speedtest.net and open your dev tools and look at what requests it's doing. Should give you some ideas :)
Every 4 or 5 years javascript developers come up with a new name to describe what they do. A long time ago it was dhtml, then we had Ajax, Web 2.0, HTML5 and now everything we make is a Single Page Application. But very few scenarios actually fit with the SPA model. SPA says that you have a single page with the entire application. But your website will always have several pages, each one having some javascript to make it interactive. Only incredibly trivial websites can resort to having a single page with the entire app. You could create a new SPA for each page, but there is a lot of overhead in creating an SPA, so sharing bootstrapping code and modules across pages is a better strategy. I like to call those pages for Long Living Pages. They have just enough javascript for the user to stick around for a few minutes, but eventually they will navigate away. This means that the page should load quickly, since they are likely to load the page multiple times per session. Your website will probably grow, so you should be able to add new pages quickly, without having to create a new SPA every time. Therefore you should also make it possible to reuse modules and components across pages. The scenario you described sounds quite familiar. It sounds like you have a small website where you should focus on the functionality and not the implementation. Like you said, SPA is completely overkill in such a scenario. A better architecture would be to have a quick way to integrate the JavaScript into the page and have it work with the JSP instead of trying to replace it. Make it easy for the person inheriting your legacy code to add new functionality or new pages without having to start from scratch. TL;DR do you really need a single page application? 
Yeah, maybe comparing CoffeeScript input to its output is not a fair comparison. And it is totally my opinion, but I would say that taking anyone from any other language and explaining ``` Person.prototype.hello = function() { return console.log("Hello " + this.name); }; ``` to them is not straightforward to understand. Like why would you define a classes function outside of the class definition? I sometimes tutor people who are coming from Python or Java, telling them to define a function like your first example then telling them to change tack and define it like your second gives me way more things to teach and explain the hardest being what a `prototype` is.
Totally, and it is my opinion. I put all over the post "I think" because I understand there are people like you (that disagree with my opinion) around :)
Ok then I'd say adding objects to an array would definitely be easier to go IMO. You could even nest an array with in the object. Var Question1 = { question:"q1...", answers:["a1","a2", "a3"], correct:1} Var array = [question1] Personally I'd use [underscore](http://underscorejs.org/#shuffle) to shuffle and pluck from the array. Although if your just playing you may build your own. Hope that helps
This one is pretty cool as well: https://www.youtube.com/watch?v=ktq-22iq-Po Not JS though.
Sounds like a mess. As an aside I think there was a recent-ish shift in namespacing convention. Require.js in its current form really discourages building a global namespace for your instantiated objects. It's not needed unless you want components outside of your web app to have access to its internals. I'm paid to work on a legacy Backbone project with global namespacing, and its a huge pain. For my subsequent personal projects everything's local and it's much easier. 
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Monkey testing library for web apps and Node.js \[/r/javascript\] - I&amp;#x27;m definitely going to be using this.](http://np.reddit.com/r/webdevnews/comments/209d43/monkey_testing_library_for_web_apps_and_nodejs/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
Good lord do ever I prefer HTML! That's pretty cute though. JavaScript's liberating flexibility is it's greatest strength :)
for validation, i suspect you php code is the bottleneck. if you have a complicated validation rules, i think it is best to keep it on the server-side. How are you running it? 6.5 is really slow. For the database call, how big is the data? do you make complicated queries to grab all those data? you should be timing all those calls at the service level so that you'll know if you are dealing with a slow server, proc/sql calls or prob with the application itself.
Thanks.. I knew about that but I wasn't sure how noticeable it would be. Obviously its pretty noticeable! Back to the code editor.. Edit: Bug fixed!
&gt;How are you running it? 6.5 is really slow. Jquery AJAX call (POST). &gt;For the database call, how big is the data? It's just alphanumeric data, no more than 8 characters long. 150 rows, 7 fields each row. &gt;do you make complicated queries to grab all those data? It's just a single Select * from.... &gt;you should be timing all those calls at the service level so that you'll know if you are dealing with a slow server, proc/sql calls or prob with the application itself. Can you explain this more? I'm not familiar with that. 
I'm probably going to get shouted down for saying this, but actually quite like CoffeeScript. yes I do understand it is quite a marmite thing in the js community and can course issues on what it is out putted like most pre-processors. But it also does give you a few niceties too like classes syntax, plus IMO it helps me put out solid code quickly and time is money as they say. I think this would have been a better article if he had looked a bit more on the pluses and minuses to give a bit more balance to the rather bold statement. I will say that it looks like es6 quite a few bits that is currently in CoffeeScript (like classes) and =&gt; for functions, which I wonder may have had a influence? That said when es6 comes though it might also remove the need for CoffeeScript. 
Thank you for this. Back when I had to learn this it was very poorly documented and this explains it much better than any of the sources I found back then.
You should name your event "ondone", "onclose" or "onselect" instead of "on_done".
Shouted down for liking CoffeeScript in a JavaScript community, Never! (from the person who currently has 7 downvotes) :)
This is why you use directives to split things up. If you have code in your attributes, it should be referring to the controller of the controlling scope only.
I'll have to check promises out. Are they any different from Async's `series()` or `waterfall()` functions?
If you want to make sure that you don't get repeat questions, you'll have to decide how you want to go about it. Here's two options: * Shuffle the array and pop the result * Store the used indicies and recursively call getFirstQuestion until an unused index is returned
Authoritative server and client side prediction is the way to go; There's a lot of literature on the subject, but really briefly it works like this. Both the client and server have the same simulation code, the client receives local input and starts simulating accordingly immediately, but that client has no say in what is wrong or right so when the server comes back to the client with the true state you have to correct or interpolate accordingly.
Looks awesome! I'm just getting into js and am curious what it took to build this. I see that the pages are .php, but I assume your using mostly js?
Yeah, I like it. Glancing at the source code, looks like this is done by animating gradient positions. Perhaps you could add a short description to the README about the technique.
You are correct! The original source can be found at https://github.com/mozilla/BrowserQuest It should give you all the information you want :) I have been working on this off and on since Mozilla and littleworkshop released BrowserQuest. It's mostly js but uses websockets and canvas as-well.
Basically, you have a ton of stuff going on, and its likely that only a single action is responsible for 90% of the time taken. It's a bad idea to prematurely optimize based on what you _think_ is the bottleneck; instead, you should [profile your code](http://stackoverflow.com/questions/21133/simplest-way-to-profile-a-php-script) -- or at a minimum, insert some simple timing hooks -- to figure out exactly where the slowdown is. JS also [has profiling tools](https://developers.google.com/chrome-developer-tools/docs/cpu-profiling) that I highly recommend you become familiar with. This is delving into /r/php a little, but oh well. I'd highly suggest you acquaint yourself with one of the more robust profiling methods (mentioned in the SO link), such as using Xdebug or similar, but in a pinch you should be able to profile a simple script with some timing hooks. So for example, your app probably does the following: 1. [JS] client makes an AJAX request 2. [PHP] server receives request 3. [PHP] server makes a DB call 4. [PHP] server might do some data massaging/validation 5. [PHP] server sends response back to JS 6. [JS] client receives the response 7. [JS] client processes the response (displays it, etc.) Let's talk about JS first; right before you make your AJAX call (step 1), do this: window.tAjaxStart = Date.now(); As soon as the AJAX is received (step 6), do this: window.tAjaxEnd = Date.now(); And then right **after** you display the data, do this: window.tRender = Date.now(); And then anywhere, after the line above should be fine: console.log( 'Total: %s (s), AJAX: %s (s), Render: %s (s)', (window.tRender - window.tAjaxStart) / 1000, (window.tAjaxEnd - window.tAjaxStart) / 1000, (window.tRender - window.tAjaxEnd) / 1000 ); This will tell you how many seconds each operation took. Most likely it is the AJAX call, but this is more an example of how to time it in JS. For PHP it's pretty much the same... // receive request $tStart = microtime(true); // make DB call (step 3)... $tDb = microtime(true); // massage/validation (step 4) $tProcess = microtime(true); // send repsonse (step 5) $tEnd = microtime(true); And then to tally it up: error_log(sprintf( 'Total: %s (s), DB: %s (s), Post Process: %s (s)', ($tEnd - $tStart) / 1000, ($tProcess - $tDb) / 1000, ($tEnd - $tProcess) / 1000 )); p.s. Using `SELECT *` is usually really bad for performance, you should only select the fields you need.
I've done something similar as the timing hooks you've described but nothing that extensive. This is tremendously helpful. I will report back after some xdebug! 
Sheer power perhaps? It could be that on a duo system Firefox doesn't split JavaScript into a separate thread, that's just a guess though as I don't have an older system to test on.
I don't about you guys, but I find this pretty slick!! Many times I'll be debugging a method and find the error, but I'll have to wait for the error to happen before I can reload the page with my new changes! This is really cool
Congrats on your game, it looks really neat and I wish you well. However, please post content that can be a topic of discussion relevant to /r/javascript -- like, a blog post discussing your experiences with BrowserQuest -- because a link to your game alone doesn't really leave much room for javascript discussion. If you just want to share your game, there are subs better suited for that, e.g. /r/WebGames, etc.
I added some more information in the README. It made sense in my head when I wrote it, hope that works?
Wait, there are bathroom scales that record stuff to the cloud? That kind of sounds useful. Are there bathroom scales that can just store data on a wifi accessible server so I manage it locally without having to pull things form the cloud?
I'm kind of a noob... does this mean "router" as in a script that picks up the #hash portion of a URL and displays that content?
Really good article. Added to my Delicious bookmark stack :)
Basically, Google took WebKit and added process isolation. Then Safari and Opera got process isolation as a result. Then Google decided they didn't like what Apple was doing with Webkit, so they forked it into Blink, or whatever. 
Very nice work, I just may use this on a project in the near future.
But what about Firefox?
Needs some anti aliasing, but looks good so far.
That way it's easier for developpers to remember your API.
Are the graphics lagging on the autorun for anyone else?
Mine sends information to my internal shaming voice.
Got left out from the above.
I get really poor canvas performance on my game if "Use hardware acceleration when available" is turned off. http://i.imgur.com/3V9MNcl.png
It means a module that allows for behaviour to be defined based on the URL of a request. They're used in servers to determine what content to serve for a given request, but they're also used in the client of single-page applications to be able to show different content when the URL changes. These usually deal with the hash so that the URL can be changed without reloading the page. (And then the router will handle changing the displayed content.) A definition of the behaviour for a given URL or set of URLs is called a route.
No, it will most probably take more than 1024, since unless you're very very skilled when you get the 2048 it won't be the only tile on the board.
For those considering this for web use, here's a jsfiddle of the same effect [using pure CSS3](http://jsfiddle.net/redouglas/TCL74/).
cool, thank you. That was an excellent description.
That's how I've seen games work, the client plays out the scenario while the network lags and then the server updates with its own judgment of what happened when it restores. It sounds pretty hard to develop. I wasn't planing on using the same code for the client, just using a node.js backend. But if the client and server absolutely must be able to produce the same exact result given some inputs (incl. collisions, timing, etc), that means that they must share code, otherwise it's a development nightmare.
i'm in the same boat. i've been learning JS on and off for the last year. I'm very much still a beginner but I think things are starting to click inside my head. Please someone advise if you disagree! Here's resources I'm using or just general topics I'm learning: Eloquent Javascript Head First Javascript Head First Jquery Mozilla Developer Network AJAX JSON Angular Ember
very useful, thanks
Wow, I did not think this was possible. I am humbled.
No prob! seems like you're pretty determined. Just keep working hard. i'm having a hard time, but mainly because I work full-time right now and i'm trying to balance a lot of things. even with that, i feel that my overall tech knowledge has improved a lot over the last year though i'm just dabbling with JS. My coworkers are impressed already and i'm barely scratching the surface!
they are planning to, or already are working on their own implementation though. 
I'll check to see if that's checked. But I think the significant difference is Firefox.
Seems to work alright on Firefox Nightly Android… except when you tap in a room that has no visible path. The pathfinding algorithm just locked up one of my tabs. I mean, it's a tad slow, but I was able to navigate a few screens away from spawn before I started testing the path finding. ;-) 
Whoa there... OP wasn't even using basic arrays correctly and you decide to pull some ECMAScript 6 and bitwise operators to explain rounding? Geez.
The pathfinding algorithm is the one built into ROT.js, not mine. 
I do pay per click marketing. I manage the paid marketing campaigns at my company which includes Google, Bing, and shopping engines like Nextag. I used to want to be a programmer (still a possibility), but i really love search engine marketing. combining my marketing/business knowledge with programming will just give me more career opportunities. I'm actually also teaching myself statistics which i enjoy a lot, almost as much as programming :) the biggest thing i've learned is that you need to embrace online and self-learning; take everything as a learning opportunity. I know you're in school, but you will learn MUCH more once you begin working in the "real world". i take online courses at Coursera and edX. granted, i usually don't finish them but i watch a ton of videos and read a lot. Another important thing, don't neglect your social life. Learn how to be social and talk to people. everything you do in life revolves around people, relationships and networks. 
[How to learn JavaScript properly?](http://javascriptissexy.com/how-to-learn-javascript-properly/) [Eloquent JavaScript](http://eloquentjavascript.net/contents.html) [Another roadmap on how to learn JS](http://sivers.org/learn-js).
3.4!? But there's already a 1! And 6.5! And ... The JavaScript community makes me feel more and more disillusioned with many of the current trends in webdev. If I cared so much about the size of my router, I would just do this. switch (true) { case !!window.location.match(/pattern/): patternHandler(); break; } What does this library offer over anything else that's already out there? Why in god's name must JavaScript developers reinvent the wheel, and the spoke, and the frame, and the idea of peddling, and the kitchen sink? Improve what's already out there. Bah.
Breakpoints just got cooler.
Also, use setTimeout instead of setInterval, so that the processor doesn't trip up: var updateTimer = -1 var step = 1000.0 / 60.0; var nextUpdate = function() { updateTimer = setTimeout(function() { clearTimeout(updateTimer); // do stuff here nextUpdate(); }, step); }; nextUpdate(); *You can also do that by replacing setTimeout to setInterval and clearTimeout to clearInterval with no change to code behaviour.* The reason not to set a persistant interval, is simply that the interval may not be reached. If the target speed is 60 frames a second and the code takes longer to execute than 1/60th of a second, you're going to run into all kinds of execution problems. Set the timer each tick/update to avoid this.
Checkout xhprof to generate good profiling data from your PHP code, then go from there. Use EXPLAIN on your SQL queries and fix 'em up if profiling indicates most of your time is spent on database calls.
Write a Backbone.js application and use JSHint. You'll learn a lot.
Crockford, Resig, Addy Osmani and Paul Irish are good people to follow. Read, devour (and question) the things that they say.
It's a mistake to try to reason intuitively about performance like that. Whether or not redefining the function has a significant impact on performance is going to be very implementation-specific. More importantly, you're talking about an extremely micro optimization. Wait until you actually have something that actually needs to be optimized, and then benchmark different approaches to see what makes it faster.
Perfect! That's just what I needed. I was looking through their code earlier but couldn't seem to find how they did it. And I'm not really sure what I want to do with this project. I'm in the process of learning JavaScript and have already made a few Chrome extensions, but I'd also like to see a Chrome extension that closely resembles Firefox's Pentadactyl extension (or as close as the Chrome developers will let their extensions get).
It's silly to write code in a certain way because you like the syntax when it has negative effects, no matter which one is faster they all perform poorly and are unnecessary.
Woah, how did you get that downward caret?
I think this has been possible for years. Anything new here?
Got the same issue while developping for canvas chrome was running at 60fps while firefox was slacking at 5-10. I found out it's just that firefox js engine is way slower than chrome's.
This is true. I'm actually growing very fond of react the more I use it. Even though it mixes HTML/JS, it's like your coding the entire DOM in JavaScript. I tried angular and didn't like it (ng-?). I prefer unopinionated, minimalist frameworks that don't try to do everything like Ruby on Rails (I hate rails). I like flexibility, I like to learn from my mistakes instead of being forced into best practices. Plus, best practices are different for every project! Is it okay to mix js/HTML? Depends. We all have different styles so I think it's important to recognize what area you thrive in and use the appropriate tools based on that. I'm heavy on the V and light on the C so react+backbone is all I need.
I'd suggest you to start with Javascript: The Definitive Guide by David Flanagan
Ctrl + S was not so obvious at first. Great to know that now
http://javascriptissexy.com/how-to-learn-javascript-properly/ http://javascriptissexy.com/learn-node-js-completely-and-with-confidence/ http://javascriptissexy.com/learn-backbone-js-completely/ These guides will take you a long way.
Google javascript interview questions and do them as an exercise. 
Test your services separately using SoapUI if they're restful or write an html client or wget query and see how long that takes to run your services. Get that time down to sub-second (or whatever you see fit) then focus on your app.
Fat arrow functions look the same everywhere. If I had used `var` instead of `let`, I would have to do all of my declarations at the top. I just couldn't be arsed to do that. Also, it's about truncation. In other languages which differentiate between int and floating point, it's done with an int cast. `floor()` just happens to have the same effect if the input is positive. With rounding: input | output :-|-: 0.0 - 0.499...|0 0.5 - 1.499...|1 1.5 - 1.999...|2 That's why you end up with 0.5:1:0.5 or 1:2:1. With truncation: input | output :-|-: 0.0 - 0.999...|0 1.0 - 1.999...|1 2.0 - 2.999...|2 The input range for each possible output is the same size.
like *v* in *vagina*
In a previous episode of r/javascript, myself and some others determined that currying was too slow to be worthwhile. I suspect this performance optimization may change that.
I've decided to test the performance of this technique. Simple tests. Simple results. Smaller number is better performance. ***Results:*** 1. No Curry (baseline) - 2415 2. Regular Curry - 2747 *(13% slower than baseline)* 3. My Fancy Curry - 2445 *(1% slower than baseline)* ------------- **Test 1:** ***No Curry*** - **`2415`** /**==== TEST 1 -- NO CURRY ====**/ function curry(a,b){ return a+b }; var start = performance.now(); for (var i=0; i&lt;1000000; i+=1) { curry(i,i); curry(i,i); curry(i,i); } var end = performance.now(); console.log("Test 1 - No Curry: ", end - start); // 2415 ------------- **Test 3:** ***Regular Curry*** - **`2747`** *(13% slower than no curry)* /**==== TEST 2 -- REGULAR CURRY ====**/ function curry(a,b){ function curry2(b){ return a+b } curry2.and = curry2; if (b!==undefined) return curry2(b); else return curry2; } var start = performance.now(); for (var i=0; i&lt;1000000; i+=1) { curry(i, i); curry(i).and(i); curry (i) (i); } var end = performance.now(); console.log("Test 2 - Regular Curry: ", end - start); // 2747 ------------- **Test 3:** ***My Fancy Curry*** - **`2445`** *(1% slower than no curry)* /**==== TEST 3 -- FANCY CURRY ====**/ function curry2(b){ // predefining the second step in our curry operation return curry2.pass.a + b; // curry2.pass contains information from the first curry step } curry2.pass = {}; // this is where curry() passes data to curry2() curry2.and = curry2; // self-reference called 'and' allows for syntax like curry(a)(b) or curry(a).and(b) optionally function curry(a,b){ // the first step of the curry operation curry2.pass.a = a; // pass 'a' to the curry2 function if (b!==undefined) return curry2(b); // if 'b' is defined, return the results of the full curry operation; makes curry(a,b) syntax optional else return curry2; // otherwise, return the second curry function as the next step } var start = performance.now(); for (var i=0; i&lt;1000000; i+=1) { curry(i, i); curry(i).and(i); curry (i) (i); } var end = performance.now(); console.log("Test 3 - Fancy Curry: ", end - start); // 2445 ------------- I'm pretty satiated. This looks a lot better than I expected. [Beautiful syntax without the performance hit.](http://www.sheriffpeanut.com/wordpress/wp-content/uploads/2013/02/dr__steve_brule__deal_with_it_by_mannymo777-d33jsoi.jpg)
You say that like it's fact. Like currying would kill any website. Unless you're currying tens of thousands of functions it won't make a difference at all.
Your "fancy" version is a mess and shouldn't be used. You keep replacing the exact same variable. And your "regular" curry is a weird one-off. If you want to do something like this, read some articles on what currying actually is. 
Well the contrast between "sleek-and-sexy" and "standard-and-rigid" isn't going to be huge, because it's mostly going to be about things like bracket placement, it's more like standard vs. slightly more aesthetically pleasing. If the negative effect is negligible then it's not a big deal, but in this case it certainly isn't negligible, currying is really slow.
Might be besides the point, but for the given problem, crossfilter.js is the solution I'd go with.
Promises are closer to waterfall than series only in the way it handles error. Promises generally never guarantee the order they run in, they simply execute the function that represents their state as soon as possible.
You'll only need a couple of days to learn JavaScript if you are a developer in another language, 2 weeks tops. Then you need to learn a dozen or so libraries and frameworks which is another week or two. Then the rest of that time should be spent building a wide variety of apps, which will then help you practice those skills. Get to it!
[Like this article?](https://medium.com/the-javascript-collection/ce6da2d324fe) I mean, these are some *extremely basic* tests. It's just an addition function.. I wanted to use something as simple as possible, to keep things terse and focused. There are syntactically sugary reasons for why people making a library might be interested in offering many optional solutions so long as they're all fairly optimal. Look man, all I'm sayin', is that I think it's a neato idea to pass variables to a predefined function by attaching it directly to the function itself, instead of redefining a new function each call or resorting to high-scope extraneous variables. My technique is quite an optimization over the one from the article. Enough so, that now I feel good about keeping in the optional syntaxes for my library's function. Small details can mean a lot in the right context.
&gt; *currying is really slow.* Right, usually -- but, what I've presented isn't so slow at all, is it?
If by "optimization" you mean "broken", then sure. The whole point of currying is to _defer_ extra arguments: var add1 = add.curry(1); var add2 = add.curry(2); add1(10); // 11 add2(10); // 12 Your "technique" breaks this and you'd get 12 twice. Look, you're learning, great. But you need to read up on this if you want to use it because it's obvious that you don't properly understand it.
Well then you have other issues with your code :)
Day 1 - 7: Vanilla Javascript. Read Crockford and Stefanov. Day 8: jQuery. Day 9, breakfast: Grunt Day 9 after lunch - 100: Build either a node.js web app or a node-webkit desktop app. If you want some inspiration on that last part, check out GitHub's new Atom editor, written entirely in node-webkit. If you're really into Windows, you could substitute writing a node-webkit app for writing a WinJS app. WinJS is a bit easier, because Microsoft did an incredibly good job getting the documentation and tools out there for writing single page apps to run on Windows 8.
Maybe I'm building something that does lots of stuff? Not everything is a website.
thats freaking amazing!
Quite nice, save the outputted .swatch classes to window.localStorage for reloading on page refresh.
Yeah, that sounds good. I'm doing it on the regular swatchtool site, might as well do it on this :D [edit] aaaand done.
Regardless of what you're building, you should be creating tens of thousands of closures.
You can always use a proper module system like commonJS with a browserify build step; or requirejs to avoid the long ugly namespaces
Code: http://tny.cz/b235875b I'm trying to isolate problem #1 first, to make sure I'm "profiling" correctly. [The post above](http://www.reddit.com/r/javascript/comments/2097v1/trying_to_understand_improving_performance_of/cg1iooq) shows what I did to try and profile the PHP myself (can't install things like xdebug on my web hosting account). According to microtime() measurements, my PHP isn't taking long to execute, but I perceive it to be 6-7 seconds between when I hit submit, and when I see the result. 
Site seems blocked by my work proxy. I suspect it's being stupid and picking up "sex" in the URL. Don't suppose the author can change that?
this helps me a lot. very cool!
Does anyone have any insight as to whether these could work in a business environment or not? I see all the "develop in the cloud" stuff, but does that mean that the whole company would have to be on board with it or as a single dev, could I use these tools myself regardless of the company's setup? 
They key difference is that promises are functionally composable. This enables you to write your async code in a far more ellegant and readable fashion. An example using jQuery promises (not the best promises) async: async.parallel([ resolver =&gt; { $.get(‘url’, (data) =&gt; { resolver(null, data); }); }, resolver =&gt; { $.get(‘other-url’, (otherData) =&gt; { resolver(null, otherData); }); }, resolver =&gt; { $.get(‘another-url’, (anotherData) =&gt; { resolver(null, anotherData); }); } ], (errors, results) =&gt; /*do things*/); promises: $.when( $.get(‘url’), $.get(‘other-url’), $.get(‘another-url’) ).then(allData =&gt; { var data = allData[0], otherData = allData[1], anotherData = allData[2]; //Wow! }); Here are the slides from a talk I've given on this subject: http://eborden.github.io/Keep-Your-Promises 
&gt;A simple example might be &gt; var f = new Fraction("9.4'31'"); &gt; f.mul([-4, 3]).mod("4.'8'"); &gt;The result is &gt; f.s * f.n / f.d = -1 * 4154 / 1485 = -2.797306... &gt;If you would try to calculate it yourself, you would come up with something like: &gt; (9.4313131 * (-4 / 3)) % 4.888888 = -2.797308133... In my console: &gt;(9337/990)*(-4/3)%(44/9) -2.7973063973063947 Why would you manually express these numbers in repeating (or truncated) decimal format? In reality, you're almost always going to get a fraction because you divided something by something else, not because the value "nine point four and (three one) repeating" has any meaning to your application. A more compelling example of the usefulness of this library would be comparing the result of *many* multiplications of floats (where errors propagate and get larger every step) to the same process using this library.
&gt;It's silly to write code in a certain way because you like the syntax when it has negative effects That's the exact opposite of true. Code in a way that is easy to understand first. When you run into performance issues, that's when you optimize.
Those benchmarks aren't likely to tell you anything meaningful. There are too many things that can be optimized out by the compiler.
That doesn't make sense when talking about changing syntax, you'd have to undo all of the aesthetic nonsense to optimise it in the last stage anyway, what you're suggesting is extremely inefficient and doesn't apply to this. We're not talking about readability here, you should make your code readable from the beginning, this is changing the syntax just for personal and very subjective cosmetic reasons. Two totally different things. Anyway, `(i)(i)` and returning functions is much more confusing than `(i, i)`, it's not even for readability reasons, it's just because OP likes the look of `(i)(i)`. Currying makes readability _worse_.
Yeah, looking at your code there is nothing sticking out as being a performance hog. Are you using a shared host? Given that it does perform a lot better with your local install, a shared host may be play a large part in the problem. Regardless, I'd still get rid of that 'SELECT *', especially if all you need is a count; you might change it to select only a specific field (one that's indexed), or do something using the `COUNT()` SQL function. That's probably not your issue but could certainly stand improvement.
&gt; `return (upA &lt; upB) ? -1 : (upA &gt; upB) ? 1 : 0;` Same effect: return upA - upB; &gt;`events.sort(monthSortFunc(a, b));` Just: events.sort(monthSortFunc); `Array.prototype.sort()` will then call the supplied function with 2 arguments. In languages with first-class functions, you can pass functions around like every other object.
I'll definitely check it out, but I'm curious if it's possible to re-write that Async Parallel task with this: async.parallel([ async.apply($.get, ‘url’), async.apply($.get, ‘other-url’), async.apply($.get, ‘another-url’) ], (errors, results) =&gt; var data = results[0], otherData = results[1], anotherData = results[2]; ); 
But my point is only in regards to _this_, so you agree with my point then. Yes, you should always make your code understandable and readable from the beginning, but this isn't about that, it's just making the code "pretty". It doesn't make sense to put code "prettiness" first when you know it's affecting the performance and just making things more confusing, you can make your code perfectly (and in this case a lot more) understandable using proper, traditional syntax that performs well. That will save you a lot of time. This is utterly pointless and just because OP likes the appearance of `(i)(i)` more than `(i, i)`. This is totally different from writing understandable and readable code. I completely agree with your point and always do it myself, but "pretty" is different from "readability" and it does't apply here, and especially not in situations like this that involve completely changing code and processes just for some minor eye candy (in this case subjective eye candy that makes the behind the scenes code more confusing, defeating the object, so actually your point could apply here but it goes against doing this).
&gt;Curried, is the term I perhaps wrongly have associated with syntactic business like bring().it().around(town) if you know what I mean. I have heard this called "fluent" or a "fluent interface" (but I dislike that phrase because the word "interface" is overloaded). **Edit**: While we're at it, you mean "partial application," not just "partial." Partial application means taking a function with N arguments, providing values for M of them, and returning a new function that takes the other N-M values. In Javascript you can do this with ``bind``: function distance3d(x, y, z) { return Math.sqrt(x*x + y*y + z*z); } console.log(distance3d(5,7,4)); // 9.486832980505138 var distanceFromFiveSeven = distance3d.bind(null, 5, 7); console.log(distanceFromFiveSeven(4)); // 9.486832980505138 Currying is related to partial application but not exactly the same. Currying means turning a multiple-argument function into a sequence of single-argument functions, each of which partially applies one argument, until returning the result when all arguments are supplied. The word "partial" alone usually refers to partial views in an MVC application.
Seeing as you seem pretty eager to learn, you might think about posting that code sample to /r/php for a code review. There are several coaching points that I can see right off, and I'm sure they could offer even more help. Of course, you might want to figure out what your performance problem is first.
&gt;In a previous episode of r/javascript, myself and some others determined that currying was too slow to be worthwhile. You can pretty much never say this as an absolute. You can only say that something is too slow for a given performance goal in a given execution environment. Even if currying added a second of overhead to every function call, if you're writing a simple one-off command-line script that's going to be run by one person twice a week, it might be OK to curry 5 functions if it makes your code more readable, or more maintainable, or quicker to write. The general pattern is to write first, optimize second. If you write the code first, you can use it and figure out where the pain points are, examine how it's being executed, find where your bottlenecks actually are, and focus your optimization efforts there. Or you might figure out that the performance is already acceptable and optimization is not required. And you should always, *always* avoid optimization if you can help it. Optimization by its nature is a trade-off, where you're getting rid of things like readability, maintainability, and portability, not to mention the opportunity cost of developer effort, in exchange for improving performance. It is an evil, if sometimes a necessary one.
Thanks! I still don't exactly understand WHY it works like that, but that's definitely good to know!
I don't know if you gathered it by my post, but I'm pretty much a beginner here. That kind of vague statement doesn't really help me. Why get rid of PHP? Replace it with what? Pure JS? I understand that form validation should be done on both the client side and the server side, right?
 foo(5); vs var x = 5; foo(x); Functions are the same. You can stick them into a variable and pass them to other functions. function fiverize (x) { return x * 5; } function callWith4 (func) { return func(4); } console.log(callWith4(fiverize)); // 20 var f = fiverize, c = callWith4; console.log(c(f)); // 20
Pretty nice, but seems to fail on a couple of our test spreadsheets. If you'd like I can supply you with them.
This is where the author's comments come in about conforming to error first style. With $.get you could not because the first item returned is not an error object, but the data returned by $.get. With promises this is not a problem since error handling is seperated from success handling.
Yeah you're right, that's why they also allow for no conflict mode where you "give back" the dollar sign. The prototype native meaning of the $ variable, is that it's a shortcut for document.getElementById(). So for example, if you did this at the beginning of your code : var jQ = jQuery.noConflict(); You can use jQ as a variable name to access the library. From now on if you did : var mainDiv = $( "main" ); You would have the DOM element and not the jQuery object. **TL/DR** jQuery didn't create the global $, it is part of native JS. They just overrid it. 
Being able to parse repeating decimal numbers is just a feature. It's not said, that you should break a fraction you already have down to a string and let it parse again. The library is meant to express even more complicated calculations as a simple fraction. Do you have a more compelling example in mind? I'll add it to the documentation.
hamagad, the modulo is non-integer :(
Well, how about something like... Finding the balance of Philip J. Fry's savings account in the year 3000, starting from 93 cents on December 31, 1999. Assuming you don't use the closed-form solution for compound interest, it's going to involve a lot of multiplications and each multiplication is going to introduce some error which will be compounded every round. I dunno, just something that demonstrates what you mean by "improving precision" by showing where the JS ``Number`` class fails.
&gt;Don't even try this in safari. Seriously, go away. What's that about? I tried it in Chrome and Safari and it works exactly the same in both.
Shuffling is tricky. Check out this Fisher-Yates shuffle implementation. http://stackoverflow.com/a/2450976
No problem with being non-integer. 2&amp;pi; for example is a very common non-integer modulus when dealing with radians.
Read your sentence again. Then go and read about the dollar sign in javascript. Then come back and we can have a discussion.
Let's sidestep the undefined `a` and `b` issue, because that's not really the problem. So lets suppose that `a` and `b` are both defined, and that they're equal (similar reasoning goes if they're unequal) In that case, the expression `monthSortFunc(a,b)` evaluates to `0`. So if you call `events.sort(monthSortFunc(a, b))`, you're passing the *result* of `monthSortFunc(a,b)` to `events.sort`. In other words, it is equivalent to calling `events.sort(0)` But `events.sort` does not take a *number* as a parameter. It takes a function of two arguments. By leaving off the `(a, b)`, you're telling JS to pass the *function itself*, not the result of the function. But if you put the `(a, b)` at the end, you're telling JS to call the function and pass the result to `events.sort`.
Ahh, yeah, that makes sense. Completely overlooked that little aspect. Thanks for clearing that up!
sorry, I come from number theory perspective, the modulo must be integer. :(
[posted somewhere around here not too long ago](http://gabrielgambetta.com/fast_paced_multiplayer.html) i thought the live demo was the most interesting part
while you guys are at it, the best/recommended way to properly learn Javascript for an experienced programmer in C and Python? Thanks in advance.
If you think Excel is a Database, you're doing it wrong.
gee thats constructive. 
Ok, i'll be even more constructive. Would you use a chainsaw to spread butter? Don't use excel for database. Use it for spreadsheet.
from a number theory perspective you're right, that modulo should operate on integers. what i did here is extending the space from the integer numbers to the rational numbers. in the end, it's the same as fmod() does. i formulated the whole thing as two numbers out of Q, with it's parts a1 / b1 and a2 / b2 from the divisibility rule you now can state that a1 / b1 = a2 / b2 * q + r * =&gt; b2 * a1 = a2 * b1 * q + b1 * b2 * r * =&gt; (b2 * a1 % a2 * b1) / (b1 * b2) 
I agree with you but would like to add one thing. Learning is very important but I think you should always try to create something while learning. You will understand the subject better, your knowledge will be practical and you will have something to show when you're done. Doing while learning raises a lot of questions that you would not otherwise think about. So to learn Javascript I recommend that you either write a small open source project, contribute to one or just develop a webapp. Another idea is to start a blog and write about what you learned each day. Besides that make sure you learn about promises, I think async development is the biggest issue when switching from a language like c, php or java.
If you are a beginner I encourage you to drop PHP. It's a garbage / toyish language that will make you, in general, oblivious to coding best practices, security and so on. You do not want to start your career like that. http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/ 
Ooo! I remember doing this for a CSV file once - in VBScript using one of MS's standard ODBC ActiveX objects to connect to the CSV file as a database, and run queries from it! So this demo uses actual XLSX files without any 3rd party interfaces? Very cool!
you are missing the 1 in label1.innerHTML
Corrected, thanks for pointing out. :)
no problem, also missing a quote in &lt;form id="LogInForm&gt; :) When you say it reverts back to it's original state, what do you mean? Like the text gets cleared? How are you calling DisplayUsername?
I'd say either label1.innerHTML is getting set somewhere else in the code or you're somehow running your array or function through a for loop which iterates through the usernames eventually landing on the last one which is empty. Tough to say with out seeing more of the code.
Hm. Safari shouldn't be showing the gradients. If it's working the same in both for you, then that's weird actually.
I'm a beginner. I'm not programming for my career... just some fun side projects. So, out of curiosity, what language would you use for an AJAX (or any) DB call from an HTML/JS page? Pretty much every example I've ever seen was point to a PHP file. I originally learned PHP because it seemed less daunting. But, I've moved into some JS, and I've glanced at some Python before. 
I've come to know **chaining** as the term used for when a method returns `this` -- like in jQuery. That's distinct from what I'm trying to do -- which is to return subsequent 'steps', in a situation for which a singleton is less appropriate. My use for this "currying" is to gain the syntax, not the deferred nature of partial applications -- to create a function which can be used flexibly, not to modify the way existing functions are used. I'll only however do it, if I can find a way to leave performance generally unscathed.
You are thinking about RDBMS.
Just wanted to comment on the .catch() portion of the article. It is more accurate to say that the "outer" promise should resolve or reject based on what the catch handler returns, as per the spec. If the catch() returns a plain value (or undefined) the "outer" promise is resolved with that value (or undefined). If the catch() throws again, the "outer" promise is rejected. If the catch() returns a promise, the "outer" promise eventually matches it.
At first, you had me worried -- the results of your tests are scary, and very different from my results. Haha, Dude, your tests are wrong. You've included the setups in the actual clocked tests. [Here's the properly set up benchmark on jsPerf.](http://jsperf.com/currying2414/2) **Basic syntax usage results** - noCurry(a,b) - *Fastest* - regularCurry(a,b) - *26% slower* - fancyCurry(a,b) - *1% slower* **Curry-like syntax usage results** - noCurry(a,b) - *Fastest* - regularCurry(a)(b) - *19% slower* - fancyCurry(a)(b) - *2% slower* Bang on the money, eh?
&gt; Code in a way that is easy to understand first. When you run into performance issues, that's when you optimize. Thanks osuushi :) I feel like that's all I've done. I'm building something that operates in an intuitive, unconventional way. Unconventionality is its greatest strength. With these basic benchmarks, I'm only trying to ensure that it's not also a great weakness. I was fully prepared to ditch the optional curry-like syntax if the performance hit proved to be more than 1%.
&gt; Currying makes readability worse. That's your opinion, mate. Other people feel differently about different syntaxes, tab-widths, highlight colors, etc -- when I'm writing code for other people, it's my job to keep things as flexible as possible -- so long as it's not at the cost of performance. There *are some* edge-case situations where I think a lot of developers would appreciate the optional curry syntax.
Thanks for the clarification! I wonder if I could implement the partial application styled deferring, while still defining the second step outside the first...
1000 years is too much for the 53bit "integers" of JavaScript. Taking 500 years gives an amount of 328261071255772200000 / 5200895098715789 with var k = new Fraction("0.93"); for (var i = 0; i &lt; 500; i++) { k.mul("1.0225"); // if (k.n / k.d &gt; 4300000000) // break; } I used the numbers from http://en.wikipedia.org/wiki/A_Fishful_of_Dollars A useful addition for the whole thing to be done would be replacing every basic calculation (+, -, *, /, %) with it's equivalent of BigInteger.js.
Because scraping a web page is so much easier than calling the Twitter API....
my use case? I just started and installed yeoman and nodejs the other night. But this break things down easier for me. 
Ah, good to know
&gt; You can pretty much never say this as an absolute. You can only say that something is too slow for a given performance goal in a given execution environment. Did I say "always"? I agree with what you've said :)
If you fancy a bit of a break from 'proper' stuff, you could try ScriptCraft which allows you to create Minecraft mods in JavaScript. I'm currently teaching my 10 year old cousin JavaScript using this and I'm actually having a lot of fun myself creating mini-games, procedurally generating terrain/cities, creating exploding cows, raining chickens, etc.
Meteor action isn't that random, it appears to be a set of asteroids that are all running at speeds factor of one another. All the meteors start from the top and when the slowest meteor hits the bottom, so do all the others.
I think I should've framed my question better. I wanted to know if I should pick up a side project and try to figure out how to do it in JS or follow a book for lesson by lesson approach.
&gt; Uncaught SecurityError: Failed to read the 'localStorage' property from 'Window': Access is denied for this document. wheel.js:11 The whole thing is not working in Chrome... Don't rely on local storage.
Might help to provide a more complete example ie how are you triggering the function and you might have some conflicting code.
Personally I have found Javascript: The Good Parts really helpful. Also writing code and running it through tools like http://jslint.com/ can help you identify ways to improve the quality of your code by ensuring the code adheres to best practices. Finally, sites like http://html5rocks.com showcase some of the cutting edge features which I personally find interesting and can help you stay up to date with the latest features (although many of the posts are chrome specific).
I... don't even know how you could have localStorage turned off in chrome, but it's perfectly fine to expect it. But try it again. I've built in a check for its existence.
&gt; Uncaught SecurityError: Failed to read the 'localStorage' property from 'Window': Access is denied for this document. wheel.js:22 Disable and delete previous cookies and you'll see the errors.
um... you're browsing in broke mode. I'm going to... not cater to you, if that's ok.
Is Javascript: The Good Parts suitable for a newbie like me?
How about an OO approach? http://jsfiddle.net/tdg5/YPrGs/
Thanks for the replies and comments.
No way I can think of. You're basically desiring to have two or more singleton functions called in sequence which pass state between each other, without the caller having to manage that state, in a way that the calls don't stomp on global state so multiple execution paths can simultaneously use them. Somewhere, somehow, when you call that first function, it needs to store the unique state of that call for the next function in sequence. Either the caller needs to manage that state (for example, by passing a "context" object in the first method call that's passed along to each function), or the function itself needs to manage that state by creating an instance.
That's fine by me, though for future projects it would be wise to not expect everyone to be using the same environment as the developer. If your project requires specific features to function, just let the users know why it may not be working for them. You can create catches that will prevent user confusion and instead display informative error messages. This is inline with providing a friendly user experience. "This site requires cookies to function correctly" "Your browser does not support HTML5" "You must install flash player to view this page as was intended" "You must use a JavaScript enabled browser to use these features" etc... 
Enjoy :)
I'm just trying to run it at 8 fps, though higher framerates would be good for effects.
All good notes. Definitely not done with this. Thanks!
Nice title.
thanks. i'm sticking to the theme I started with the first post: http://daemon.co.za/2014/03/wrong-to-be-afraid-of-angular I actually really didn't know I had this much to say about angular, but it's given me some interesting perspective at least.
That's very true. I also wrote a very similar "tool" using HTML5 and for chrome. It was for personal use, and it was for coding practice. I never intended it to work in all browsers and for any other users but myself.
I make a lot of toys. My favorite one that no one uses but me is over at http://www.imagegimp.com it's a full fusker chrome extension with lots of the behind the scenes capabilities but I really made it just for me.
Look at the function called by currying vs normal. Seriously, you think returning functions and all that nonsense makes readability _better_? You're in the minority, someone who's reading the code for the first time first has to figure out what the hell is going on, and _then_ gets to the actual process if they can figure that out. It's probably going to be more complicated than this simple addition example, which already gets a lot more complicated behind the scenes with currying. It's almost certainly going to cause confusion at first, especially if they're not familiar with this technique as many people aren't. By no stretch of the imagination does this make readability better. You're just focusing on the front end pointless syntax you desire.
Except it does hurt performance _drastically_, just not quite as much as regular currying. It's not a good job, it's just very slightly less terrible. But still terrible. You're looking at it by performance gains vs normal currying, you should be looking at it as performance loss vs standard, straightforward syntax, because that's what matters, how slow a terrible technique that you're not employing is is irrelevant. The performance loss is massive. All this for `(i)(i)`. You never _need_ to use it.
If you prefixed it with -webkit- it should be fine.
If I prefixed it with -webkit- I would be serving the current broken system of prefixes. That may sound stupid, but I don't use a prefix except when it fixes something broken in a specific browser like safari's and IOS' handling of inputs.
Well you should, don't forget people aren't just using it in the latest version of each browser. Why would you want to restrict compatibility? I guess safari doesn't require a prefix any more then. I actually thought Chrome needed the -webkit- prefix for gradients too.
I'm afraid you haven't set up the performance testing correctly. [Here is the correct setup on jsPerf.](http://jsperf.com/currying2414/2) I've revised the terminology in this updated version of the benchmark: Test Name | Ops/sec | Comparison :-------------------------------|:----------|:------------------------ Baseline (no curry) | 2 734 821 | **Fastest** *(~5% margin)* Partial (deferrable curry) | 2 153 370 | 21% slower *(~5% margin)* Candied (non-deferrable syntax) | 2 698 176 | **Fastest** *(~5% margin)* Interestingly enough, this particular performance test turned out so close, that jsPerf marked both *baseline* and *candied* as "fastest". Great to see it's still performing well, especially since this latest revision throws an exception when the user tries to defer the candied function :)
gradients are way too old for prefixes. If your version of safari doesn't need them, I might need to update.
It is set up correctly, in fact it's exactly the same aside from the exception, for some reason your time variables mess it up. [Look](http://jsperf.com/currying2414/5) (or with [random input](http://jsperf.com/currying2414/7)), exactly the same as yours but without the Date variables (by the way, you can just use `Date.now()` to avoid creating new objects). 1,262,508,596 ops vs. 167,248,082 ops. Incredibly slow. That's even worse than the last one, see how each unnecessary check (you added one this time) makes it slower?
&gt; If you could offer a more flexible solution without hindering performance.. why wouldn't you? Well there's where you're going wrong, it does hinder performance, drastically. Lets say for arguments sake that it didn't hinder performance, I still wouldn't use it because it complicates the code behind the scenes for a subjective aesthetic improvement when calling the function. It's not more flexible either, you could just make a function that takes any number of arguments and achieve the same effect, but faster. This is about exploring, it's been explored many times, the conclusion is it's slow and pointless. All this is doing to prolonging the process of `a + b`, putting checks and returns in-between calling the function and getting a result instead of just returning the result immediately, of course it's going to be slow. &gt;If you disagree, the whole point is that you can choose to use the standard methodology instead. You're also going wrong here, code readability is largely for the benefit of _other_ people reading your code, or if you have to go back to it and can't remember what's going on, so if for some strange reason you think performing checks and returning functions is more understandable than `return a + b` that doesn't make it the right choice in terms of readability, because I guarantee the vast majority of people disagree. You need to bear in mind you already know what's going on in the code, so it's easy for you to understand. Anyone else has to first follow and figure out the prolonged process before getting to `a + b`, whereas they could just look at the normal process and see it returns `a + b` straight away. It's bad for readability, it just adds pointless front end eye candy while complicating the process, thus hurting performance.
I was pretty skeptical of it too when a coworker wanted to use it, but so far we've built one page with it and I like it enough that we're going to try rewriting a major component on one of our core pages with it and see how it handles a really complicated issue. 
Cool. This is directly related to something I'm working on. Dumb question: what's the colon mean in the route string before user_id?
[W3Schools.](http://www.w3schools.com/js/default.asp) Run through all their tutorials. If you know C++, JS will be no problem. Just remember to floor your numbers. Also, learn about prototype functions. That's equivalent of a class file for OOP and it's kind of weird compared to C++.
This looks really clean.
[Tweaked](http://jsfiddle.net/TCL74/23/) some of the parameters...
Looks good. The only thing I take issue with is some of your header-style comments. This: /*----- Variable: The task element that is being moved -----*/ element: '', should really look like this: element: '', // the task element that is being moved For functions, it's good to have a larger header, where you can specify what it does, what its parameters are, and what its return value is, but you really don't need that for variables. It takes up space that's better used with actual code. EDIT: Meh, tabs vs. spaces in the formatting. I think it looks cool this way, though, so I'll leave it.
Just that AngularJS is a lot more than just KnockoutJS. It also has features for routing and accessing remote resources, and it's better testbar.
You use mixed DOM events. I would suggest using addEventListener for all events (attachEvent fallback optional). Also, it should not be neccessary to create the whole DOM list anew every time you create or delete a task. I also feel that the extra utility to get the task by data-id shouldn't really be neccessary; it might be cleaner and faster to traverse the tasks if you stored their DOM nodes inside each item instead of just the text.
Aye simplest is to split your code into 3 'packages', game, server and client where game has all the common code, in ages past i did write a client in AS3 and server in ANSI C, oh god that was impossible to maintain and quickly entered the wastebin. Separating your rendering code from your game logic is just good practice regardless, I do that for single player games all the time now, one of the good lessons learned from fiddling with client-server architecture, only my 'client' knows how to render a discrete object.
It's a balance between getting something working ("Just ship it") and planning everything in advance. Generally, more abstraction is better than less, so yes, creating all the functions first and just filling them with temporary returns until you write them proper works well.
Angular's hype right now is because it has a lot of potential, not because it's used a lot publicly. The current angular's biggest use case is also really with applications, not public sites. I'm actually pretty impartial to it, because it's almost never the right tool for me to use... but I think the 'sweet spot' for where it is appropriate can only grow. If they manage to stick to their guns and move towards what web components are trying to do, you will have a big upswing in public usage once the custom elements/encapsulation becomes possible in browsers. This is inherently not on the timescale that something like backbone managed to ascend, because it really relies on browser makers.
What?
I'M ONLY TALKING ABOUT THE GLOBAL $, NOT THE $ IN GENERAL, WHICH CAN EITHER BE GLOBAL OR LOCAL. I ONLY WONDER WHY JQUERY USE GLOBAL $ (WHICH IS SAID TO POLLUTE THE GLOBAL CONTEXT), INSTEAD OF LOCAL $.
Awesome thanks! 
Oh, I absolutely agree. I use things like `~indexOf` and `x === +x` all the time, but these are just idioms to deal with certain specific situations, comma-first and semicolon-free are far more elaborate (i.e. they affect more lines of code per project).
Oops.. my app is legally impossible.
Since it's code from Blizzard, you may want to check out the licensing and confirm that they allow derivations. If not, you could potentially be violating the license. You may also want to look into twitter bootstrap. It'll allow you to do all kinds of fancy display stuff without reworking third party code.
there is a bug on dragging. click and drag an item close to the x, then when still dragging move cursor over x. release mouse - still dragging.
I get that for rejects. It makes total sense that if an image fails to async load one might want to try to recover from that though another source or a replacement image. Async recovery is elegant. To me, it just doesn't make sense that vanilla **errors**, as in, something has gone terribly terribly irrevocably wrong. It madness that errors gets captured and silently forgotten unless you specifically append a catch clause at the end. As it is now, even your syntax errors inside promises gets silenced and forgotten unless you specifically cause them to be visible. What's the point of making the catch() chain optional when this is the case? In practice it's not optional at all. Especially for a language like JavaScript without typechecking :s
This is nicely done, however for an added challenge seperate all logic from dom interaction. This way your app will be more easily testable.
This gets into a lot of debates about code style. Here's my take: 1. Missing curly brackets around if/else blocks. 2. Line 22, empty line, get rid of it. 3. Space need before and after '=' on your prototype declarations. 4. Lot of inconsistent code styling.
I've not looked at this beyond a quick scroll up and down. The thing that stood out to me is that your methods are way too big. It would really make your code more easy to maintain, test and increase reuse if you were to break up your large methods. No single method should hold implementation details for multiple operations.
Can you expand a little on the inconsistency? It would help me, thanks.
You can do this really, really easily. All you need is a little bit of jquery, and a decent tooltip plugin, like [qTip](http://craigsworks.com/projects/qtip/). Just use jQuery selectors to loop through each link looking for one with a url that matches the pattern you're looking for - in this case, that the url starts with "www.mywebsite.com/database/item/"itnamehere". Then, attach a qtip instance to each of those, and have it Ajax in the content from your site. Here's an example of how we use this to provide a popup dictionary on legal text on one of our sites: https://github.com/statedecoded/statedecoded/blob/master/htdocs/themes/StateDecoded2013/static/js/vendor/functions.js#L234-L271
The DoubleClick management app by Google is often named as one of the largest and oldest ng apps out there.
- don't repeat the same jQuery selector as it just slows things down: $( star ).attr( ... ).on( ... ).click( ... ) or: var $star = $( star ); $star.attr( ... ); $star.on( ... ); $star.click( ... ); - _always_ use braces around if/then statements - `{` on its own line is almost never done by anyone in JS - don't drop the `break` in your last case statement -- just leads to errors later - mixed tabs &amp; spaces indentation - hoist listeners to parent nodes instead of attaching them to each child - `!something` instead of `something === false` - soooo many `var`'s spread around your functions... - single line ternaries are usually discouraged: `condition ? a=1 : a=2;`
Unlikely. And even if it were possible it would likely violate the terms of service.
An example is how you style your if/else/else if statements. Lines 88 through 102 versus 184 through 268 (257-268 even go different). On 88 - 102, you don't drop down your else / else if, on 184 - 268 you do. Also sometimes you drop down your brackets, some times you don't.
Here's some of what I would do. /** ************* Rating Widget ************* */ /** * Will take a div that has child star elements and hooks up * rating functionality to it */ /** *@param ratingList - a span that has star spans *@param toggle - if the widget already exists, it's current rating */ var ratingWidget = function (ratingList, toggle) { var that = this; if(arguments.length == 2) { this.starCount = toggle; } else { this.starCount = 0; } this.ratingList = ratingList; this.listId = this.ratingList.attr('id'); $.each(this.ratingList.find('.tara'), function (i, star) { $(star).attr('id', that.listId+'_'+i).css('cursor', 'pointer'); $(star).on('mouseover', function () { return that.rateOver(i); }); $(star).click(function () { return that.rateClick(i); }); }); this.ratingList.on('mouseout', $.proxy(this.rateOut, this)); }; ratingWidget.prototype.rateOver = function (i) { for(var j = 0; j &lt; 5; j++) { if(j &lt;= i) { $('#'+this.listId+'_'+j).removeClass('fa-star-o').addClass('fa-star'); } else { $('#'+this.listId+'_'+j).addClass('fa-star-o'); } } }; ratingWidget.prototype.rateClick = function(i) { var current = i; for(var j = 0; j &lt; 5; j++) { if(j &lt;= i) { $('#'+this.listId+'_'+j).removeClass('fa-star-o').addClass('fa-star'); $('#'+this.listId+'_'+j).off(); } $('#'+this.listId+'_'+j).off(); } this.ratingList.off('mouseout'); this.ratingList.attr('data-rating', i+1); }; 
Having a quick look over the code you could provide an alternative link like data-gotourl="" then prevent the click request and instead do a (Pseudo Code not tested) $('a.bliz-link').on('click', function (evt) { evt.preventDefault(); location.href= $(this).attr('data-gotourl'); }); /*(Used Jquery for simplicity)*/ If the user has js disabled they click the link and go directly to the bliz page with the stats on giving them a graceful fallback. This saves you editing 3rd party code. 
Now that's just tearable
Thanks, I'll keep that in mind while working on future projects!
Thanks! I'll look into improving my comment quality. Honestly I didn't put a ton of effort into them.
Thanks!
Thanks, I'll look into it!
Did you see the post made here within less than 1/2 day earlier than yours? It seems directly related to your question: [Handle them errors when your promises are broken](http://www.reddit.com/r/javascript/comments/20cf0d/handle_them_errors_when_your_promises_are_broken/)
I would not do a for loop like this for(var i = 0; i &lt; App.data.length; i++) I would do one like this... for(var i=0,len=App.data.length; i&lt; len; i++) This is more of a best programing practice, because every time the loop condition is checked the javascript engine does not have to reassess the length of the array. Although I doubt it will make much of a real life performance increase with this todo app of yours, it would be a good idea to break the habit regardless. Another thing i might do is wrap document.getElementById like so var get = function(id){return document.getElementById(id);}; that helps turn all instances of var el = document.getElementById('theElement'); // 47 bytes into var el = get('theElement'); // 27 bytes (20 bytes savings) 20 bytes * 3 calls = 60 bytes of file size reduced Size of function = 60 bytes 60 - 60 = 0; (Dam!) So this is more nit picking really, the only possible improvement is that it will help reduce file size if you call document.getElementById allot. In this case it does not seem to matter at all, unless we take into count minification, then it might just be a very small improvement, as get will be reduced to a single letter, and document.getElementById will not be reduced at all. When thinking in terms of google, shaving just a few bytes helps. Like that of pennies over time, it adds up.
If you use IE 9 or older, the selection of multiple nodes by any DOM method will return something that is more like a snippet from document.all than what you'd expect as a DOM selection. But what I meant: you already create those list items. Why don't you store the DOM references inside your data model?
Assume for a second that you get your wish, and instead of uncaught errors being silently ignored, they violently murder your process. Don't you *still* need to attach a ``catch`` to all your promise chains? Isn't it, in fact, more important to do that in the world you're suggesting, to avoid such violence? If you're worried about errors, you need to attach a ``catch``. If you're not worried about errors, what's wrong with your promise chains just treating them like a ``reject``?
Angular is a natural fit for complex content-management apps, so there are tons of "production" examples behind closed walls. I use it at work for certain parts of our CMS (large news company), and through local meetups, I know many other large companies also use it for these purposes. The reason you don't see a lot of user-facing sites from big companies has more to do with existing architecture, and the SEO problem inherent in client-side routing, that is very difficult to solve elegantly. Personally, I have several small angular apps in production, averaging around 20k users a month (small, but steady). As more and more people become familiar with angular, I think you'll see a lot more large companies using it outside of their internal apps.
agree with all except ternaries. I have no problem with ternaries for simple statements.
I also posted this to /r/webdevnews :). Check out the subreddit if you're interested in general web development news, including JavaScript stuff! http://reddit.com/r/webdevnews/comments/20bscj/angularjs_rest_made_simple_connecting_angularjs/
The idea would be that you use try blocks inside your promises where you need them. There is a reason why you don't wrap a huge try block over your entire app.
I strongly recommend this path: http://javascriptissexy.com/how-to-learn-javascript-properly/ 
Do Javascript from codecademy 
There's nothing stopping you from doing that. This is about the behavior of unhandled exceptions. If they're potentially app crashing, you need the ugly ``catch`` block more, not less.
Oh here we go with the rip-off puns
https://github.com/appcelerator/alloy Appcelerator has their own MVC framework for Titanium, why not use that?
&gt; I WAS RIGHT TO BE SCARED OF INFERRED DEPENDENCIES Inferred dependencies? You mean Dependency Injection? This exists in other languages (like Guice in Java) and are a huge boon. If you're worried about the "Function.toString magic" you don't have to use that. You can define your injection strings and not use toString, which you can use with minification - or if you use Closure Compiler you can just use the @ngInject notation.
But when there is an ugly app crashing error, I want to be informed, I don't want it to be secretly hidden. Obviously the case can be made that when a user uses my app, the app should do it's best to keep running even when something goes wrong. That's fair and fine, but that is not what promises do. Promises only cover a small part of your app, the async parts. If any error happens outside of a promise it will crash the app with a big fat error like before. So if you wanna protect your users from errors that stops the app, promises don't do that for you, they only cover a tiny part, so you would need to wrap your entire app in a huge try block anyways, or use a global error handler.
no, i like dependency injection. i don't like the magic toString format that has no reason for existing because it's optional. It is functionally identical to a much more straight forward way to do it, that doesn't break under normal operation. *edit*: the only reason i can see the string magic version exists is because it's clever. i don't think that's a good reason.
I don't have a problem with ternary assignments, I have a problem with ternary statements, which the example is. In other words, I'm fine with: var a = condition ? 1 : 2; but when the ternary ops become statements themselves, it often leads to a jumbled mess. The line in question being: ((typeof bookmark.group_id)=='number')? bmId = bookmark.group_id.toString(): bmId = bookmark.group_id; That would be so much clearer as an if statement...
I don't like the fact that this kind of thing is being used in normal execution flow when it can just as easily be avoided: [video](http://www.youtube.com/watch?v=Jyhz2e4grHo&amp;t=9m10s)
I get why " $( star ).attr( ... ).on( ... ).click( ... ) " is not desirable since jQuery would execute the selector to perform each function, but how is best to set this out so that it doesn't?
A really good read on the subject of good coding practices is the book Clean Code by Robert C Martin! It's long, but it's a good book to keep handy. Flipping through a few chapters of it now and then is a good way to learn some best practices :) 
Oh and why would you *always* use braces around if statements? What's so wrong with something like this: &gt;if (value) $('#CreateFormGroup').slideDown(); &gt;else $('#CreateFormGroup').slideUp(); 
 if(arguments.length==2) this.starCount = toggle; else this.starCount=0; This can be summed up in one line: this.starCount = toggle || 0; `&amp;&amp;` and `||` are used as Guards and Defaults. See this reference: http://seanmonstar.com/post/707078771/guard-and-default-operators
Thanks, didn't know that sub existed. 
Assign it to a local var, essentially caching the object.
 $(star).on('mouseover', ...); $(star).click(...); Keep your events consistent: $(star).on('mouseover', ...) .on('click', ...); If you decide in the future you want to move to backbone or something, it'll be a real nice switch.
I see, I misinterpreted the comment then. I thought both ways would execute the selector multiple times. Thanks
Out of curiosity, wouldn't; t[Math.random()]=o End up being about as useful as; t[x++]=0 Because, in the end, jscrush is going to look like this; x=Math.random t[x()]=0 Right? So the alternative (that doesn't need jscrush) would be; x=1 t[x++]=0 Which would be a savings of 10 bytes. What am I missing here? *edit* Count bytes better.
 for(var j=0; j&lt;5; j++) { if(j&lt;=i) $("#"+this.listId+"_"+j).removeClass('fa-star-o').addClass('fa-star'); else $('#'+this.listId+"_"+j).addClass('fa-star-o'); } This is a bit complex. I have two solutions to offer you. 1\. Unroll the loop and recombine into separate parts: for(var j=0; j&lt;i; j++) { $("#"+this.listId+"_"+j).removeClass('fa-star-o').addClass('fa-star'); } for(var j=i; j&lt;5; j++) { $('#'+this.listId+"_"+j).addClass('fa-star-o'); } 2\. Use classes and jquery's selectors: $(".className").slice(0,i).removeClass('fa-star-o').addClass('fa-star'); $(".className").slice(i).addClass('fa-star-o'); This will require you to add classes to all of those elements with id `#listId_123`, but will save some work in the long run.
TIL You can use JavaScript without 3 dozen libraries. This is actually super slick. My only complaint about your code is I don't like your doc blocks and I think JS is best with 2 space indents. In other words, literally nothing important. From a usability perspective of the app itself, making list reordering more dynamic would be cool. I was dragging tasks around and my first thought was "Huh, it doesn't work". It wasn't until I actually read the tasks that I noticed it does, it just didn't provide visual feedback during the drag operation. 
 var row = this.currentRow; this.beingEdited=true; var editBtn = row.children('.edit'); row.children('.delete').on('click', function(){ return that.bmDelete(); }); editBtn.on('click', function(){ return that.bmEdit(); }); Read up about event delegation. the `on` method has a few more parameters you should use. The code above can be rewritten as: this.currentRow.on('click', '.delete', this.bmDelete.bind(this)) this.currentRow.on('click', '.edit', this.bmEdit.bind(this))
In my opinion? Nothing. I do that all the time, sometimes even with multi-line function calls, e.g.: if (foo) bar.forEach(function(x) { // do stuff }); (though jshint complains if you do that) Previously I would have written this as foo &amp;&amp; bar.forEach(function(x) { // do stuff }); which IMO is less readable. The argument for using curly braces is more about this: if (value) foo(); else bar(); Because the indentation is not syntactically important (i.e. JS ignores it) this can lead to mistakes by humans for whom the indentation looks important. E.g. the following will not behave the way it *looks to humans*: if (value) foo(); bar(); A simple mistake like this (although some argue it may have been intentional sabotage) was at the core of the recent outrage about Apple's broken SSL validation, for example. Theoretically you could argue that single-line `if`s can lead to mistakes like this: if (value) foo(); bar(); But I would argue that having multiple semicolon-separated statements on one line is a code smell to begin with, so I don't think this is as valid as the indentation issue above. That said, after having worked with Python a lot, the single-line `if`s did look ugly to me (and the indented braceless version was too obviously dangerous), so I initially used braced blocks everywhere. My taste only changed after having worked with JS straight for over two years.
**this** and **that** Rather than keeping a copy of *this* as *that* and juggling it around your inner scopes, instead you can create a *bound function* which will always use the context you provide. var that = this; editBtn.on('click', function(){ return that.bmEdit(); }); You can totally remove *that* by binding the bmEdit method to *this*. var bmEditThis = this.bmEdit.bind(this); editBtn.on('click', bmEditThis); Or to be more concise: editBtn.on('click', this.bmEdit.bind(this));
In addition to the JS issues pointed out here, I'd also like to point out that it is bad practice to litter your HTML with so many IDs. Generally, if you have to append `'_' + i` to your IDs, you're probably doing it wrong. For the stars it would be enough to have a reference to the parent element (which would be `$(ratingList)` if I understand your code correctly) and then iterate through the stars via `.find` and `.each` (or manipulate them directly by separating them via `.slice`) instead of using a for-loop to generate IDs.
 var groupMg = new GroupManager(); Ah, you were so good about your variable names up to this point! Your variable names were readable words, then I saw `groupMg`. What the heck is a `groupMg`. Be consistent in your variable naming.
 for(var k=0; k&lt;that.groupArray.length; k++) { if(k%2!==0) { Since this is the only `if` statement in the loop with no `else`, you can shorten it and get rid of the `if`: for(var k=1; k&lt;that.groupArray.length; k+=2) {
ajax `url:'action/delete'` Use full paths when you can. This is going to be fragile and can bite you in the future.
I would think that it would only make sense if you needed to use Math.random elsewhere
 var number = $(val).attr('id').split("_")[1]; When you catch yourself using an `id` to pass `data`, then you need to re-think. In a previous comment I mentioned: &gt; Use classes and jquery's selectors: &gt; &gt; $(".className").slice(0,i).removeClass('fa-star-o').addClass('fa-star'); &gt; $(".className").slice(i).addClass('fa-star-o'); &gt; This will require you to add classes to all of those elements with id #listId_123, but will save some work in the long run. Here's where it comes in handy. You can get rid of all of these `id`s entirely. The numeric "id" is not the html element's `id`. The numeric "id" you created is **data**, not an **id**. Elsewhere you use the `.data()` method to store data, you should use it here too.
Thank you for a well thought out and well set out response. I would also argue that multiple semicolon-separated statements on one line is dodgy to begin with, and I would also argue that the 3rd and 4th example you set out immediately looks odd, and I'd like to think that I'd pick it up if I was scanning over some code. It just seems like unnecessary extra lines and when over looking a piece of code, it hinders rather than helps since it's too spaced out. Then again I have come from a background of C# where the { brace would be on a new line, so 2 lines of code would be spread out to 8. But I now see the argument. Thanks again
 searchField.on('keyup', function(){ var input = $(this).val(); return suggestBookmarks(input); }); Uh, `suggestBookmarks` doesn't return anything...
 var rowBody = $('#bookmarks-body'); rowBody.empty(); for(var i = 0; i&lt;data.length; i++) { var row = buildRowFromObject(data[i]); rowBody.append(row); } This can be more concise: $('#bookmarks-body') .empty() .append(data.map(buildRowFromObject));
Radical. The only thing I would add is focusing back on the text box once you click "Add New Task." It does that when I press Enter but not when I click the button. Great work!
 var bmId = 0; ((typeof bookmark.group_id)=='number')? bmId = bookmark.group_id.toString(): bmId = bookmark.group_id; This is odd. If it's a number, then change it to a string. Otherwise, what else is it? A string? Then it can't hurt to toString that too. `toString` is **idempotent**. Rewrite as var bmId = bookmark.group_id.toString();
I love that site's header.
I've noticed that few AngularJS videos get commented on, but are usually well-received. I wonder why.
AngularJS is popular AF but that video is 100 minutes long. That being said, this video will likely help me tremendously and I am a very happy camper. 
Where did fallbacks go?
Well *no way* Google staff is upvoting this or something. Right... anyhow, it's fishy
Really does nothing to answer the question or respond to the comment. I love Angular, use it along with REST built with Node and Express almost exclusively on my projects but I still wonder about the popularity of these submissions.
I'm pretty sure that for(var value of func(left)) { yield value; } Can be replaced with yield* func(left) Not sure if that was accepted for harmony, or if it's been implemented yet, but there certainly was a "yield from" form at some point.
From other trenches: Unless you are Amazon or Google, Amazon or Google are better than you at hosting files. Their CDN is going to have better uptime than your CDN. And your files absolutely should be coming from a CDN, whether it's another box on your own network or an external one. Serving static assets from the same box serving your dynamic website is a far worse idea than using a public CDN, because if you do it wrong, you can open up any number of security vulnerabilities that you otherwise wouldn't have. Are you absolutely, positively, 100% sure that ``../secrets/key.pem`` isn't one of the static files I can request and be served?
Just piggy backing on that, if your function is called getAllTasks, and your documentation just says something like "Gets all tasks", that's worthless. Also, you've got duplicate (incorrect) documentation (for getAllTasks and createTask).
fallbacks only kick in when the network connection has already timed out. or it could just have worked the first time, you know.
It's in, and yep, this is the right time to use it!
If your server is down, your app is down. Who cares that your js library is still accessible from some CDN? Chances are that your home page is timing out or throwing a 500 error. The security vulnerabilities thing is also just ridiculous. Your custom app server code is much more likely to have security vulnerabilities than nginx, apache or whatever you use to serve up a folder full of static files. And if you can stop yourself from putting key.pem on your CDN, then you can stop yourself from sticking it in /public
This is not spam. It's a video released by the AngularJS team and submitted by a very active user with zero personal or professional connection to it.
Oh, no no no. I'm not talking about comment quality. I'm talking about making your code readable. When you put up a huge banner for a single variable, it makes the reader have to scroll farther and be able to keep less code on the screen, and you want to see as much as possible at one time in order to wrap your mind around it. And you should care about how easy is it for the reader to read your code, because that reader's going to be *you*. A few months from now, you're going to be scrolling through mostly empty pages trying to figure out just what you were doing on that project, and if you don't pay attention to the presentation, you're going to have a hard time with that. (And if you work in this professionally, you're going to be debugging *other* people's code, and you'll really, earnestly wish that they followed sane practices! And perhaps didn't redefine methods in the prototype so that the unit tests didn't actually test anything, then leave the company so that you can't ask them what the fuck they were thinking. Oh, no, I'm not bitter about last week or anything. GRRR.) In any case, properly commenting your code is extremely important, because code isn't always easy to read, and your intentions aren't always clear from the code. Here's a bad comment: var a = 42; // declares a with a value of 42 Unless you've literally never seen Javascript in your life, this is a completely useless comment. On the other hand: var a = 42; // organization coefficient; 42 seems like a reasonable value This tells you what a does -- it's an organization coefficient, whatever that means (I just made it up) -- and *why* it has this seemingly random number assigned to it. If I'm debugging this, I might want to test other values for a, since the person who wrote this appeared to simply guess a value. Of course, the ideal would probably be: var organizationCoefficient = 42; // seems like a reasonable value given the db size we expect Now you don't need to look up what a means when you come across it later in the code, and now you know why 42 seems like a reasonable value to the coder who wrote that. If you're going to use the organization coefficient often, then that name is kind of unwieldy and you might as well call it `orgC`, though by that point you can get away with a non-descriptive name like a, since you'll probably be using it in complicated formulas. But if not, your declaration will probably be in a pile with others: var dbSize = getDBSize(db); var organizationCoefficient = 42; // seems like a reasonable value given the db size we expect var username = 'admin'; var password = '12345'; // that's the kind of code an idiot would put on his luggage // TODO: beef up security because it's currently less beefy than celery and has more holes than the plot of Eye of Argon The first line is completely self-explanatory. The second is not, so there's a comment. The third is also self-explanatory. So is the fourth, but there's a golden opportunity for Spaceball references and snark. The fifth acknowledges problems with the code; years later, when you're looking at that line, you'll make yet another mental note to fix it and promptly forget to do so, banking on the fact that no hackers care enough about your database to "hack" into it as if it were a Facebook account. But notice that those four declarations are right there next to each other, without big banners in between that are literally only there to take up space. Ah, yes. The reason you write big space-taking-up banners of comments full of ASCII art on the borders is that you *want* it to stand out. In a long file, being able to quickly find where functions begin is really useful. Not so for a routine variable declaration -- those are usually just at the top of the function anyway. Anyway, that's probably enough unsolicited advice. Oh, one more thing. I wouldn't write my methods the way you did, with object notation. I'd do it as follows: var obj = { someVariable: "value 1", someOtherVariable: "value 2" }; obj.someFunction = function (arg) { // do stuff }; It's just easier to read this way, much more than nesting everything.
You can set up your build to add the argument annotations for you, which will make sure your code won't break when minified. I love just adding an argument to my functions, the array-of-string-names before the function declaration feels really awkward to me.
I assumed you meant the same process serving your dynamic page should also serve the static content. If you're suggesting I serve my static files via an instance of nginx or Apache hosted inside my network, rather than using the same process that's serving my site, what does that buy me? That instance of nginx or Apache can still go down independently of my Node or Rails or whatever process. In fact, it's a lot more likely for that self-hosted instance to be inaccessible than for Google's CDN to be. **Edit**: Basically, the failure state you're optimizing for is that your users have connectivity to your network but they do not have connectivity to Google because of some transient or engineered flaw in the Internet's routing infrastructure. While that's certainly possible, a more *common* failure state is going to be that your dynamic server is running but your static fileserver is inaccessible, because of disk failures, power failures, human error, whatever, and using a public CDN solves this one.
it's a pretty straightforward case of a good video actually... you, on the other hand, created your account solely to promote your work on the same domain name... tread lightly :-)
I'd somehow completely missed that map existed in javascript, thank you for other suggestions as well, incorporated a lot of them. I'm using that a lot because I've got some variables/attributes that are being shared across functions and if I'm using that.&lt;variableName&gt; already why not just go with that.function too for consistency. 
JSCrush doesn't exactly do aliasing on **Math.random**, and in the generated crushed that you can found [here](https://gist.github.com/gre/9504494#file-crushed-js) : strokeN@random()P*P+V and not **Math.random()** basically because at another place I use **Math.max()** so it has factorised Math somewhere else!! It is quite hard to predict if an optimisation actually work unless by actually trying it, so I will definitely give a try to your idea and I'll keep you informed :) Thanks
Well, perhaps. I do at least take the time to pop open any link before I up or down vote and skim through the content. It isn't the title so much as the general idea I get from that skimming.
Very interesting points here, and I can't tell you how much I appreciate your input. I don't have a lot of professional experience with this stuff so it's excellent to read additional perspectives. Thanks again!
Thanks, you're absolutely right. I'll go back through to improve what I have put together. Appreciate it!
Fair enough.
&gt; I'd also like to think that I've been submitting things of actual interest :) they do seem to be of actual interest, just be aware that "of interest" doesn't erase [reddit's guidelines on self promotion](http://www.reddit.com/wiki/selfpromotion)
We use local files for development, and use CDNs in production.
Part of being a developer is learning to understand things without being spoonfed.
I'm sorry but AngularJS is not the way forward. It demos well, and allows unsophisticated developers to slap together simple toy apps, but the learning curve to actually getting to a place where you can build large apps is prohibitively steep. By the time you learn the framework, you've effectively isolated yourself from the rest of the javascript world, and interop between it and other frameworks and plugins is ridiculously complex and makes you question the value of basing everything on it in the first place.
great job, looks very nice. I'd also add the next() and prev() functions to the docs, it could be useful to control the slider.
Easier way to convert any value to an actual boolean, based on its truthiness: ``!!value`` There's a *very* important distinction to make between the double-equals operator and the concept of "truthy" values in JS. There are exactly six values that are "falsy": ``false``, ``null``, ``undefined``, ``NaN``, the number ``0``, and the empty string ``""``. Every other value is "truthy." This determines the behavior of ``if`` statements. The double-equals operator is much more complex and follows the algorithm described at [ECMA 11.9.3 The Abstract Equality Comparison Algorithm](http://ecma-international.org/ecma-262/5.1/#sec-11.9.3). In a nutshell, when both values are the same type, it operates just like ``===``, and when the values are of different types, both sides of the expression are coerced (eventually) to ``String``s or ``Number``s and the comparison is made that way. (**Edit2**: except for ``null`` and ``undefined`` which are both ``==`` to themselves and each other but nothing else. See how complicated this gets?) When coerced to ``Number``, the values ``"0"``, ``""``, and ``false`` all become ``0``. This is why ``"0" == 0``, ``"" == 0``, and ``false == 0``. However, because ``"0"`` and ``""`` are both strings, the operator uses a standard string comparison and ``"0" != ""``. **Edit**: I recommend strongly against using ``==`` pretty much ever, because it's so mind-boggling to fully comprehend, it's non-transitive, and when comparing two values of different data types you really should be doing the type conversion explicitly instead of just relying on default behavior. But you should still understand it. The ``convertToBoolean`` function here is going to cause a lot of headache and heartbreak because of the non-standard handling of ``"yes"``, ``"no"``, ``"true"``, and ``"false"``.
Thanks :) I'll add a small section for each of the methods on the README file
This was already posted a few hours ago.
No, including another library when a lot of similar methods angular already has on itself will not help you that much. If you really care about performance you should just have good build process. Because that is the best startup performance boost you can have with typical Angular application. And after startup? Keep you controllers slim, write your code DRY and you should be golden. Also don't use ng-repeat for arrays longer than thousands of items.
Oh and if you want to skip to npm visualization here is a link to that part: [link](http://www.youtube.com/watch?v=Kp377p-NSFc#t=789)
Here's a typical setup: Suppose your dynamic server is written in node.js, ruby, python, java, whatever. It is probably not binding to port 80 directly. You probably have it behind something like nginx acting as a reverse proxy. There's the webserver you're already running. Whatever is listening on port 80 is one thing. You need that thing to be running. If it dies, your service goes down. There's a chance that your server(s) can go down, that your datacenter goes down, that some other networking elsewhere goes down, that google's cdn goes down... all these things are small little possibilities that (when taken together) are multiplied. But I think we're getting further and further away from Adrian's original point. I believe he was arguing against using something like cdnjs.com where you would end up serving up your own css and js, but "vendor" js (things like like jquery) comes from a cdn. In that case, as you are already serving up some static assets, it is a pretty good idea to just serve the remaining js libs yourself too. Serve all your stuff from the same place if you can. Less moving parts. Maybe I've just been burned by google fonts breaking multiple times per day and making page loads hang until they eventually time out. While the static files I served up myself loaded just fine.
I think this is the way to go. My personal pet peeve is when people host their own code themselves and then load common libraries form a CDN. Or people put their own code on their CDN in production, but then load jQuery from a different CDN. I think you're only getting the benefit from using a CDN when everything that could be served by a CDN is served by that same CDN. Otherwise the fact that you gain an additional point of failure completely outweighs any benefits.
This is a fork. The original is here: http://codepen.io/suffick/pen/KrAwx
&gt; The problem is that hasOwnProperty is almost always relevant. As in 99% of the cases. I would say the opposite. You only need to use it 1% of the time. This guy's use case is the 1% and he's overblown the importance of it. A better solution for his particular problem: var adminCache = Object.create(null);
The main problem I could see having from the article was making a true false check that registered false when the variable was, in fact, undefined. That could make for some very tricky logic errors if it wasn't caught in time. Would === be the way to go for that kind of check?
Depends how much time you have, really. Ideally, you should look into [Professional Javascript For Web Developers](ftp://91.193.236.10/pub/docs/linux-support/programming/JavaScript/Wrox.Professional.JavaScript.for.Web.Developers.3rd.Edition.Jan.2012.pdf) as your first port of call. It's a grett introduction to JS that doesn't shy away from the nitty gritty - with your background as a CS grad pretty sure that would be perfect for you. That should keep you busy for at least a week or two, depending on how much time you can put into it. Afterwards you can worry about Angular.
That's awesome. Is there anyway to have the battle.net URL not show on mouse over though?
I can see that. I'm already shying away from pure jQuery/Backbone.
That's not the point of lodash... it's to allow a more functional style in javascript... the goal of these two libraries is really orthogonal. 
 (function () { var a = $.map($("a.farm_icon_a"), function (a) { return [a] }); setInterval(function () { $(a.shift())[0].click() }, 201) })(); from compiler.jar
I love the look of the slider and it's simplicity. However I am really new to js/jquery. Where can I download your .js file. I only saw a little bit of code and I'm not sure where to plug it in. Thanks.
My general rule is to use lodash in my web apps (angular or not), but not to use it in JS libraries due to not wanting an unnecessary extra dependancy.
Why I Was Wrong About Angular.js (pt2) WHY I WAS WRONG TO BE AFRAID OF ANGULAR.JS (PT2) O_o
So, your script is a bookmarklet. Why not ~~Zoidberg~~ Greasemonkey?
The final 'd' in 'getElementById' should be lowercase.
Fucking. A. Completely overlooked that. Thanks, man!
Because it's consistent and prevents errors down the road because you assume that something indented has braces around it. If you don't use braces here, it's a question of _when_ you will screw up, not if. Hell, Apple has been all over tech news recently for this ___exact___ thing
&gt; The problem isn't the lack of hasOwnProperty I think the problem is trying to roll your own authentication/authorization system. It's a solved problem. Don't re-invent the wheel. Use a well tested / well written library / framework.
The problem is the author is trusting the query string 100%. This is hacking 101, test all query string parameters for weaknesses. While hasOwnProperty is useful, a developer should know when it's necessary to use and understand that if a user-based string is used to access variables then it should not be trusted without safety measures.
Why not $('#price').html(pages_total); and also, please put radix 10 when using `parseInt( $('#price').text(), 10)`. In fact, it is better if you use `parseFloat( $('#price').text() )`
The difference is between mutable and immutable data types. Objects and arrays are mutable, which means you can change them, whereas other data types are all immutable, which means if you perform some action on them, like adding numbers or concatenating strings, you create a new string or number, rather than modifying the old one. when you do this: var x = 3; x = 5; you aren't actually changing the number, you are just making the variable x hold a different number. When you do this though var y = [1, 2, 3]; y[0] = 4; you are modifying the underlying object which the variable y is pointing to, but y is still pointing to the same object. Any other variable, anywhere in your code which is pointing to the same object will also now see the modified value. I hope that makes sense. It's late and it's been a long week of staring at Prolog.
this is my blog
javascript:var arr=$("a.farm_icon_a"),i=0,t=setInterval(function(){$(arr[i++]).click();if(i&gt;arr.length)clearInterval(t);},201); The interval wasn't being cleared, so it was just endlessly clicking undefined links after it had clicked them all. var arr = $("a.farm_icon_a"), i = 0, t = setInterval(function () { $(arr[i++]).click(); if(i &gt; arr.length) clearInterval(t); }, 201);
Three small comments: 1. I like your use of tabs. :) 2. Read up on [JSDoc](http://usejsdoc.org/). It's fairly widely used, and it's picked up by some of the better IDEs like Webstorm. 3. Since you already have an IIFE wrapping your code, try putting it in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode).
[Here's a handy chart](http://zero.milosz.ca/) although you could skip == for === and not have to worry about it.
node.js. The hacker doesn't have access to alter the source code, and if they did, you couldn't do any of this securely. He's not trying to prevent someone from altering the code maliciously, but just to validate the input.
&gt; if(j &lt;=i) &gt; $("#"+this.listId+"_"+j) This jumped out at me immediately. A pretty standard convention is to space out your operators for readability, e.g. $("#"+this.listId+"_"+j) is much easier to read as $("#" + this.listId + "_" + j) although an exception is usually made for increment and decrement operators, e.g. x++; y--; You don't necessarily have to adhere to this convention, but whatever you decide on, be consistent. In the case of if(j &lt;=i), if you're going to space the comparison operator on one side, do it on both sides.
At some point, you've got to read the value to check it. Just the way of checking it was wrong, and it wasn't just executed with `eval()` or something as ridiculous as that.
Bugs from failure to use hasOwnProperty are bound to be subtle. I wouldn't call it paranoia.
No need for a function, what's wrong with `value == 'true'`? Seems to handle it perfectly.
The innovation of unifying the object property and hash set namespaces was an unmitigated failure. Why not introduce a new hashtable object to Javascript and minimize the future damage.
Solid article
 while (Math.random() !== 0.5); alert('Done!'); Run that and tell me when it finishes.
I find it infuriating that the web development community is rallying around server side javascript after complaining about the same damn issues with PHP for years.
They're also using d3.js 
I use opera so I think opera does not make use of Greasmonkey. And I guess its bookmarklet just beacuse this is how the game works...I know in fact that you can use Firefox and play with greasmonkey scripts but I rather stick to my old friend Opera. 
try adding &lt;h1&gt;Break Something&lt;/h1&gt; as a task :D
Thanks for the answer, I tried the script but it looks like it does not work, I think it needs to be designed to this game and this script just does not click the 'icon' and loads new page, which is interesting, but well thanks for help. Oh wait, stupid me...:)) It actually does work, i forgot to add javascript:. Sorry, thanks a lot for that!
wow. Genius, this works! Thanks.
yep, canvas + d3
Oh yeah! Delegating yield is indeed fun! But again iteration needs a for-of loop. 
I understand your position, but !obj["foo"] is [50-70 times faster](http://jsperf.com/hasownproperty-vs-in-vs-undefined/46) than obj.hasOwnProperty("foo"). Yes, those are opposite checks, but for whatever reason, the check to see that a key exists is slower than the check to see if it doesn't exist. [This doesn't apply to !obj.hasOwnProperty("foo") though.](http://jsperf.com/hasownproperty-vs-in-vs-undefined/49)
Sorry, I searched for the URL and didn't find anything. Although I did clear up the URL 'cause it had some tracking showing the link was from Twitter.
This is just security through obscurity, and i bet its gonna hurt performance.
Angular is not a library, it is a framework. wow, you guys are such dicks. I mean OP is obviously a noob, who doesn't know first thing about JS web apps. His question does not make much sense, I try to tell him a bit more than other answers and you downvote me. Seriously, FU, and fuck OP. I like lodash, I use it myself in many projects(serverside), but I never had a need for it in browser.
Functions and DOM elements are mutable too. Technically they are all objects in js but that may not be obvious for the beginner.
Go to http://kptl.co/z.js/website.php and view source. You'll get it.
The problem with these obscuring tools is that it tricks Javascript newbies into thinking their code is safer than it really is. When programming with client-side Javascript, your code is never safe.
ES6 brings proper Maps and Sets.
I can assure you, bad type coercion is not the reason people are leaving PHP. If you completely ignore PHP's awful syntax and standard library, Node.js is gaining momentum because of its event-driven, non-blocking nature. It's possible in PHP, but not easy. Does Javascript have quirks like PHP? Absolutely. They're both dynamic languages. But there's a lot more to a language than it's syntax.
&gt; Easier way to convert any value to an actual boolean, based on its truthiness: `!!value` Even better: `Boolean(value)`. However, both cases still have a sticky spot (potentially fixed by `valueOf()`): !!(new Boolean(false)) // =&gt; true Boolean(new Boolean(false)) // =&gt; true Using the built-in constructors without `new` will result in a primitive return value if it has one (String, Number, Boolean). As for `isNullOrEmpty`, [null is completely different than empty](http://thecodelesscode.com/case/6) and, IMO, needing this function is a sign of a broken API. A more legitimate check is looking for either null or undefined -- generally these do mean the same thing to the program -- in which case it's one of the rare instances where `==` is appropriate. value == null That returns false if and only if `value` is null or undefined. It also means you avoid that silly `void 0` crap you see in old code. 
JavaScript has some old warts, but they're entirely manageable. Otherwise, the language has good foundation. It's just a matter of not using a few of the older, misdesigned features (automatic coercion, `with`). PHP on the other hand is [an unholy mess of bad design](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/) whose *only* redeeming feature is that it makes it easy for newbs to quickly stand up a server. 
Click fork me on github banner to get to the source page.
Huh. I am truly stumped. It still doesn't work. I copied everything from jsfiddle into new files just to be certain, still no dice. I mean, it *works* in jsfiddle, but outside of that, in the browser, it's still throwing up the error. Uncaught TypeError: Cannot read property 'value' of null (anonymous function) 
I am so sorry your feelings were hurt by those down votes. I didn't know they will affect your life in such manner that you felt the need to lash out like this... It was just a simple question from a noob. I just gave you an up vote so you will be able to sleep tonight. 
That final Unreal demo was very impressive (its a new one).
Also, should I be saying "request.open" and "request.responseText"?
Your js won't even parse; I'd worry about fixing that before anything else
Would be nice to have some examples?
Yoyoyo it's ya boi jscrambler
I don't recommend using jsperf until you learn the [basics](https://www.youtube.com/watch?v=65-RbBwZQdU) Hint: Ask yourself, if you had a static object with 2 properties and it never got any new properties added, deleted or changed (this is the situation in the benchmark), would you in realistic code ever call hasOwnProperty on such object?
My eyes hurt
I've looked at those documents but found them difficult to understand - I interpreted them to the best of my abilities!
How come it won't parse?
I don't know what you're trying to say here. If I had an object where I already knew which keys were present, why would I check if the keys exist? Also, if you have a specific complaint about the code in the jsperf, you should be explicit about it. (By the way, the first link isn't mine, I just found it on Google a while ago. The second link was me creating a new version to test another case.) Dismissing someone with "go learn the basics" comes off as very condescending, whether or not that was your intention.
Just a scam to get money from people who really think that they can protect their precious javascript code. You can never hide javascript from clients, you can obfuscate it as much as you want, but de-obfuscation is always possible.
Their readme is pretty good, shows you all the options. There is also examples on the guthub page as well.
Why?
Oh right, it's not a popular one, so it's better.
It's a lovely site. The background is a canvas with a particle system: http://thecodeplayer.com/walkthrough/make-a-particle-system-in-html5-canvas The bones of the app are angular.js, which is a great tool. Anytime you see ng-something in markup, you know you're looking at an angular app. Looks like angular and d3 are handling the page transitions, search for `landingManager` in scripts.js. I suspect these guys are quite good with d3, which is not easy (based on my experience). That's my 3 minute dissection. 
please paste your full HTML + JavaScript code here
In ES6 environments (easily enabled in Node with the `--harmony` flag), you can avoid this pitfall completely by using a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) if you need key/value store, or a [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) if you only need to store values. 
You should work more on the basics. However I know that's a very frustrating response to get, so I'll give you direct pointers... `XMLHttpRequest.open(...` will not work. When you do `request = new XMLHttpRequest();` you set the variable `request` to a working instance of `XMLHttpRequest`. You should use methods *on the instance*, not on `XMLHttpRequest`, which basically is the template you're using. Next, when documentation says things like this... void open( DOMString method, DOMString url, optional boolean async, optional DOMString? user, optional DOMString? password ); ...it does not reflect the actual code you should use when calling the function. For each parameter the `DOMSring` and `boolean` prefixes denotes the data type it uses for the parameter value. If you aren't so sure about what this means you should look up data types and how they work in JavaScript. `method`, `url`, `async` and so on is simply the name of the parameter. You should not use this name, it's simply there in the documentation to explain what the parameter does. When you call a function you want to pass values. `DOMString` means you should just pass a string, while `boolean` means you should pass something that can be evaluated as true or false. So you want to do: request.open("GET", "https://fs08n1...", false); That way you pass three values to the function. Note that you need to use commas to separate them. If you try to pass `async = true` as a parameters this actually means "set the variable `async` to the value true, then return the value of the variable". This `async` would not be the same as the `async` variable used internally in the function. The next point is specific to usage `XMLHttpRequest`. When you perform `open` it doesn't actually fetch anything for you. You need to also perform `request.send()` afterwards to make it actually send the request. Again, you want to do `request.responseText` to get the data from the working instance, not `XMLHttpRequest.responseText` because the template doesn't have anything for you. Finally, when you get the reponse text it doesn't know anything about the format of the data it gets, so it returns it as a text string. If you use `indexOf` on a string value it will just tell you how many characters comes before text you are searching for. If your text file contains a list of numbers and you want to know the position of an ID in the list you will have to split the text string containing the list into an actual list object first. You can split a string by using the `split` function on it. Note that SendSpace doesn't allow you to get files directly like this, so you will have to upload your text file somewhere else. In general, if you want to test your JavaScript code the simplest way is to make a .html file and include the code inside a script tag. For instance try saving this as test.html and drop it inside your browser: &lt;script&gt; window.onload = function() { /* This code is run when the browser is ready */ alert("Hello!"); } &lt;/script&gt; However, when you want to fetch remote files with JavaScript it becomes more complicated because of security measures. If you are serious about development you should set up a web server on your computer.
&lt;!DOCTYPE HTML&gt; &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;Title&lt;/TITLE&gt; &lt;meta charset="utf-8"&gt; &lt;script&gt; var x = 1; var rawInput = document.getElementById("input1").value; rawInput = parseFloat(rawInput); alert(x + rawInput); &lt;/script&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;input type="number" id="input1" value="8" /&gt; &lt;/BODY&gt; &lt;/HTML&gt; 
This tool generates your gruntfile based on settings, among a few other things.
Yes, how is something like this done? And by "this" I'm referring to the fact that a core of my i7 CPU that is maxed out by each and every page of a **content** site. Also, perhaps "How?" isn't the correct question, and I should instead ask "Why the fuck?"
Additionally, like most low-quality Angular sites, clicking the back button on my mouse directs me to the very top of the previous page I was on, rather than the location on the page where I left off. I love it when a web browser feature that I've relied on for 20 fucking years is broken by people who are nearly the same age as said feature. JavaScript-rendered content sites have apparently replaced Flash content sites. It's like when the leader of a criminal organization is arrested and immediately afterward, an identical scumbag takes their place.
I'll update the readme, but I'm not sure how to provide more examples when all you have to do is type: ya Also, the benefit of the tool is that you don't have to write any configuration. YA manages Grunt for you but still lets you take over for more advanced needs. Basically, if you just want to build something quickly without worrying about a build process, YA shines.
Sorry mate, but that is the worst headline I have ever seen in this subreddit
If you're like me and tired of jokes and crap unrelated to this subreddit, check out /r/webdevnews.
Always use what you make! With such a tool it would be good marketing to say, "Oh and by the way, this whole site has been made using our system!" I started writing a CSS and JS minifier before, just to play with, and it seems to me that wouldn't be too hard to build something that does what they're selling. A more competent/experienced JavaScript programmer could probably build something like it in a week or two so their business plan doesn't seem sensible/viable, especially when an in house developed form of security through obscurity is probably less vulnerable than a marketed one.
Oh sure it's off topic, but it was chuckle worthy. 
I've updated the README to add some more detail about a typical workflow with YA: https://github.com/mrjoelkemp/ya. I'd be happy to answer any questions that you might have.
The README has been updated with a bit more detail. Please let me know if you have any questions. Thanks!
Ok thanks I will take a look at that after work. Lastly do you think it would be possible to run a lightbox in tandem with your simple slider. So the images are clickable into a image viewer?
Yeoman is more full featured but I see no reason to use this over [Yeoman](http://yeoman.io/). Webapp or one of the cummunity generators with basic setup is all I could ever ask for as far as laying the ground work so I can just start working right away without worying about the setup.
Use library that implements `done`, and use it instead, no errors will be silenced. Implementations based on official spec are not ready for real world projects. See also https://github.com/domenic/promises-unwrapping/issues/19
After this talk it should be obvious to anyone who understands computer programming that Javascript is the way to go. Excellent talk, mind blowing demos at the end.
Cool, but really slow. You should probably put a warning or size limit since it crashed my browser. Briefly skimming your code: - Why are you creating so many canvas elements? - Why are you using `toDataURL`? - Why are you creating so many Image objects? You should just use a single Image and a single Canvas element. You can draw a region of an image with `drawImage` and different source bounds. This might even make it fast enough to perform in real-time. 
I have to disagree with you on that. There are tons of good resources out there. Here's a link to one of my favorites: http://eloquentjavascript.net/ It's an online book with interactive examples and an editor, as well as a toolkit that you develop as you work through the book.
I've had experience with just about every significant programming language. My "go to" language (and I don't mean goto, but I'll admit my shame) has historically been C++ with GPU interfaces of various kinds. I'm amazed at what is becoming of JS; To think just a few years ago it was the best programming language for displaying pop-ups. Near-native CPU performance and still closing the gap, FINALLY GPU access (although still a while to go to full effect). Complete device universality; Gone are the days of ports. At this point it seems like a grand conspiracy theory that it takes 100 lines of C++ code to display a window with input handling and text. Don't ask me how many more to draw a triangle, it hurts to think about. The most profound developments have emerged in the last few years, very exciting to imagine "browser as os" in 2020. Native programming seems to be stuck in 1999 compared to this rate of progress. Recently I ran into someone who wants to get into programming and decided to go with C++. I tried to reason him out of it but to no effect; Convinced this is the only "real" way to program. Oh well, at least it will be a learning experience to say the least.
Were you trying to discuss your thoughts on this or just posting a link to a 6 year old question?
that conversation you had sounds like the conversation me and the guy who got me into programming went. he tried getting me into js, i went with c++ because i'm interested in malware. i ended up going back to js because of a project he wanted me to do to cut my teeth programming something real. i've stuck with javascript for the past 8 months and i'm pretty excited at how versatile it seems this language is becoming, and what i'm gonna be able to do with it.
I can't be cruel to C++. I have occasional needs to read/write memory within native processes and perform drawing operations in their windows. It still seems like the best tool for the job. This might not be the case for long however. At the very least I know C#(probably all CLR langs), even AutoIt is capable of such a thing, however awful the latter as a language. Ideally I would like to be able to do the same with NodeJS. Actually I can't say that it can't do this, I'm yet to explore it. I'm not sure about malware programming and JS however... this does seem like the domain of native languages.
Thanks for the upvote OP. Moments like these are why I love reddit.
You can't execute on click because this would mean you can do stuff like session hijacking. So a user should copy and paste it into the url bar. You can also create a bookmarklet so they have easy access.
Hi, thanks for feedback! I put up a warning that it takes several minutes. I successfully unscrambled an image using 142x142 matrix, but it took one hour. - I have one permanent canvas to draw all the tiles on, and I'm creating a new canvas for each tile when I'm slicing up the image. Is that unnecessary? - I used 'toDataURL' to save image from canvas to image object. Is there another way? - Same reason as why in creating so many canvas elements. The problem is, I need to rotate each tile at a different angle before drawing it, hence using one image will mess up rotations, no? And I do realize that this kind of solution is best implemented on server so not to clog up the browser threads, but I'm too poor for a server and I happened to write pseudo code in JS while queuing. So this is not meant to be a full blown service, but possibly a lightweight solution to be a part of some service.
i use single quotes.
i've heard csrf tokens are obsolete w/ cors headers whitelisting now.
Most community colleges will offer classes online and credits that transfer, for cheap. You might want to look around your area and see if any colleges are offering courses like that. 
You'd be better off taking a more general programming class than something specifically geared toward JS. Community college JavaScript/web development courses are notoriously bad, and there are plenty of free resources to learn the language online. Plus if you understand more CS theory, it makes it trivial to learn a language 
I took a closer look. Seems like a second canvas is needed, but from there you can ping-pong between two contexts to avoid creating new canvases for each iteration. Also note that you can just call `drawImage` with another canvas for render-texture effects. You don't need to convert it to an Image object. I wrote a quick demo which shows how you can do it in real-time: http://cdpn.io/AKuFa Unfortunately, browsers might render it a little differently. A "lossless" solution would probably need to be written in software (i.e. a web worker).
I've been coding SPAs with the intent to maintain features like this (and I keep my own distaste for Angular). First, are there any other behaviors you're seeing fall away? Personally I hate pages that disable ctrl-click or similar. Second, you may be amused/horrified to know that it's not so easy as you might think to capture that location on the page[*], and for now you're on the losing side of the tug-of-war between javascript and javascript's lack of control over its environment. But javascript-rendered content isn't going away. I can abstractly contemplate javascript's loss in that tug-of-war, but that would essentially mean the death of web applications in favor of downloaded applications (C++ or other), which just isn't going to happen. --- [*] You might think it's a simple matter of saving a pixel value in an array, but there are problems with even _getting_ that pixel value, let alone ensuring its consistency and accuracy. I expect you're more upset that what you think of as a stable feature is being broken, but as one of those 20-somethings, we're not going to go back to serving static HTML because that content was _never_ static--it was merely changing too slowly to be worth updating faster than the time between pageloads. 
&gt; Don't ask me how many more [lines of code] to draw a triangle [with C++], it hurts to think about. Have you tried doing something with WebGL? You need quite a lot of code to display a textured triangle. You need pretty much the same amount you would need with C++ or Java. The API is just fairly low-level. You have to go through all those steps yourself. With a high-level API, you'll need less code. For example, with Slick2D or LibGDX (two OpenGL accelerated Java game libraries), the amount of code you need for a simple game is about the same you'd need with JS/Canvas. So, while JS is certainly more terse than C++, most of the bloat from your example actually comes from using lower-level APIs. &gt;Recently I ran into someone who wants to get into programming and decided to go with C++. I tried to reason him out of it but to no effect; Convinced this is the only "real" way to program. Oh well, at least it will be a learning experience to say the least. Not every programmer writes applications in a high-level language. There are embedded systems, operating systems, drivers, virtual machines like V8, game engines and other game-related middleware (physics, audio, UI, etc.), and there are of course also browsers (which use tons of other native components). *Someone* has to write those things and they won't use JavaScript for that. Secondly, the first language doesn't really matter much. I also don't think that JavaScript is an exceptionally good choice for that purpose. ES6 is a very large and complicated language. The tooling also isn't very good.
&gt; experience programming in Python Edit: why is this being downvoted? OP said he had experience programming. I quoted OP. What's the problem? 
There a rarely college level courses on the topic of javascript. There are plenty of courses on web development in general. If you know python and understand programming in general, you can learn the basics of javascript in a couple of days.
See, I'm still not getting it. Not because I don't understand the steps you've written to _perform_ that workflow, but because I don't understand the basic assumptions behind that workflow, and I want those stated so that I don't have to download and fiddle with something I've just heard about. Generating a dynamic Gruntfile is a really cool idea. I don't think it's necessarily _practical_ long-term, but for the stated intent of the project (rapid instantiation) it's an interesting innovation. But what does it _build_? Does it build an index.js, an index.css, and an index.html that links them? Those are _my_ basic assumptions/requirements for a Grunt build, but that doesn't assume any node involvement. Does your watch process include any LiveReload or similar? How are images/sprites handled? 
Programming != CS
Not really, I think this was just a misunderstanding. I didn't mean to imply they should take CS101, I meant maybe they should take something that's more applicable in a general sense, e.g. algorithms &amp; data structures, OOP/FP classes, HCI, etc.. Colleges have horrible JavaScript classes. The field is moving way too rapidly, and as a whole, web development is typically left untouched. So I suggested that they instead take advantage of classes more to colleges' strengths: theory &amp; general ideas rather than specific, fast moving targets like js &amp; web dev.
Javascript has really nice support, may run on multiple devices, makes development of simple things really quick and gets support for sensible building of bigger things, but let's not polarize the topic that much - Javascript is not the only way to go and many people wouldn't agree that's the best of them. &gt; Near-native CPU performance and still closing the gap, FINALLY GPU access (although still a while to go to full effect). Complete device universality; Gone are the days of ports. It looks really nice, yet it's still not so good. It's near-native cpu perf for compiled-to-javascript code, which is not the javascript I'd be able to write. You'd need to use asm.js-like functions to get around high-level basic library, which does not expose innards you could connect for efficient extension. &gt; At this point it seems like a grand conspiracy theory that it takes 100 lines of C++ code to display a window with input handling and text. Don't ask me how many more to draw a triangle, it hurts to think about. Depends on the tools. I've written 20 lines of code and my shooter game already has sprites, textures, moving and minimal AI - I doubt this point is relevant. &gt; The most profound developments have emerged in the last few years, very exciting to imagine "browser as os" in 2020. Native programming seems to be stuck in 1999 compared to this rate of progress. I'd say it depends on the language, framework and toolset you're using. Many great technologies for native development are quite fresh (including LLVM and Emscripten ;)). The problem is that it's not that those new things are revolutionary. People like to rearrange old things in new ways. Like - a few years ago there was a big hype for nosql and a few of those not relational databases were very similar to databases from before SQL (key-object storage, anyone?), just in new form and use. I wouldn't call it "revolution", but "evolution". The thing is - native development had to have those things before they'd been added to browsers ;) &gt; Recently I ran into someone who wants to get into programming and decided to go with C++. I tried to reason him out of it Well, what's so bad about C++? It's much more universal language (you can even write parts of web apps in it), you can write lower-level software with it (including micro stuff like Arduino), you can write system-level software and is not so bad specimen of strongly-typed language. most (probably not **every** one) useful software libraries in this world are compatible with c++. And it's not that big of a problem to jump to Javascript, when needed. I hope that the future would be nice with javascript... though I'd really prefer better support of other languages to work with (thanks Gods for llvm and Emscripten).
I don't know, but I wouldn't mind taking a crack at it (if the program is at all interesting, but why would you ask if it wasn't?). Is the program name secret? Can you PM it?
&gt; Colleges have horrible JavaScript classes. That's quite a generalization. What are you basing that on? I would assume that if MIT offered a js course it'd be pretty damn good. 
I don't think it matters. I use single quotes as much as possible in my JS.
&gt; it should be obvious to anyone who understands computer programming that Javascript is the way to go. Yes, at this very moment, all of my colleagues working in bioinformatics are rushing to switch from Python and Julia to JavaScript. The wisdom of such a decision is **obvious to anyone who understands computer programming**.
I took a JS course at one college, and sat in for a couple at another. Both were laughably bad in terms of teaching current best practice; but honestly that wasn't really the point. At the college level a lot of the code you write is gonna be pretty disconnected from the real word, but its the general theory, processes, and problem-solving techniques that they are really trying to impart.
I'd be surprised if you can find any Javascript classes. period.
&gt; online courses with transferable credits don't come from established universities and &gt; Colleges have horrible JavaScript classes Your knowledge of online offerings from universities is either encyclopedic and vast or complete bullshit. 
The fact that there are a lot of shitty javascript programmers out there is good.
&gt; back it up with a google search if you want to [Or I could just quote Mr. Hitchens.](http://ih3.redbubble.net/image.12253697.6224/sticker,375x360.png) 
http://www.pdx.edu/cepe/javascript found one in my area pretty quickly. The funny thing is that nearly all web pages on the internet have "javascript" (the word) on them, so you'll get a lot of false positives. 
You want to see what's coming w/ javascript? https://www.youtube.com/watch?v=aZqhRICne_M&amp;feature=youtu.be&amp;t=22m18s
i've been using `===` for almost all tests now a days.
you id is wrong if the element object is null. el.value
that would be a huge security vulnerability if you could run arbitrary javascript on reddit.com
https://www.youtube.com/watch?v=aZqhRICne_M&amp;feature=youtu.be&amp;t=22m18s
On mobile so this isn't as great of a reply as I'd like to give. First, your second jquery selector can be changed to be like this $(e.currentTarget).find... To limit the scope of the query to just elements within the clicked item. Secondly (and this is just advice) don't use string as a variable name, even if it's just used for something simple like that. I'd also change the for loop to use the length of the variable instead of saving the length and then using it once. These little things can turn into habits and be painful for other developers that work with the code. 
First, you probably want to use the element data-attributes like this: &lt;a href="#" data-width="1280" data-height="720"&gt;... Then just access them inside of the click handler: $('.menu-container li a').click(function(e) { // Inside this function 'this' points to the clicked a-element e.preventDefault(); var w_width = $(this).data('width'); var w_height = $(this).data('height'); openWin(w_width, w_height); // Or you could simply get the data object and use it directly // var data = $(this).data(); // openWin(data.width, data.height); }); edit: http://jsfiddle.net/4ep9s/ 
Just took one through ASU online - GIT 417, but honestly, I think you're better off spending time on codeacademy.com and buying a subscription to lynda.com. I agree with others that unless you need the college credit, most courses you'll get are going to be a waste of money. 
Please put the `&lt;script&gt;` element at the end before the `&lt;/body&gt;`. In your original HTML code, by the time the browser reads the line `var rawInput = document.getElementById("input1").value;`, the input form `input1` does not exists yet in the DOM. The input form `input1` must appears in the DOM first, before you can reference it: &lt;!DOCTYPE HTML&gt; &lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;Title&lt;/TITLE&gt; &lt;meta charset="utf-8"&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;input type="number" id="input1" value="8" /&gt; &lt;script&gt; var x = 1; var rawInput = document.getElementById("input1").value; rawInput = parseFloat(rawInput); alert(x + rawInput); &lt;/script&gt; &lt;/BODY&gt; &lt;/HTML&gt; 
Wow, thank you so much for the advice and example! I will try to implement your method tonight. This is the first time I've heard of web workers, so sounds interesting. Will study that.
I agree that if your conventions are to use `Object.create` it's the right solution here. But, for example, if I use underscore.js that's problematic since it creates plain objects everywhere. Instead of having to always mentally remember which object was created how, I'm for `hasOwnProperty`
yes! I think that should be pretty easy to do, I'll try to put an example together, using some small lightbox lib and publish on the example folder, that might be useful to other people, thanks!
You are having problems with jQuery and DOM, not JavaScript. If you are actually trying to learn this language I recommend not using jQuery. If you put up the HTML somewhere people would be more than ready to help you. I suspect this is why this thread is so heavily down-voted.
To redirect a user to a new page location you only really need: * **location.href** - You can assign to this property and the page will load the new location. This will also add a step to the history, which means the browser's back button, from the new location, will point to the current location. * **location.replace** - This is a method that takes an address as an argument. This method will replace the current step in history, which means the browser's back button will never find the current page. examples: location.href = "http://bing.com/"; location.replace("http://bing.com/"); You can test these in your browser console. If you are a Windows user it is F12 in any browser. If you are a Mac user it is control+option+i in most browsers, but can vary.
Interesting that the way jsfiddle works (or that seems to be why) caused such confusion on such a simple problem. 
I actually got it working.. It seems that if I declare the icon var and don't use it then it breaks the code? so when I remove the icon var and harcode the icon in it works just fine. Thanks for looking!
Show me the code where you include the google maps library (script tags)
Nice stuff. What I'd really love to see is a tool that allows designers to stack and modify filters, and then export the stack to JSON for developers to use. 
Couple tips: you can store the vowels in an array and iterate over them. The String object has a split function to split up a given string into an array of smaller strings based on where the character you pass in is found in the original string: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split It can also except a regex if you'd like to follow the links and learn more about those. Using a regex would mean you could perform on one split operation to come to your answer (using 'or' in your regex) 
This is probably getting extremely pedantic but your original point was pretty specific too: why would you avoid caching length? With newer people especially, I don't feel that is good advice. The further up the prototype chain things are the more time the browser takes to look them up. Particularly in loops it's good practice to cache all the things. In this case it's not such a big deal but in the case of iterating over an HtmlElement collection you actually force the browser to re-run the Dom lookup at each iteration if you don't cache the length because the length may have changed. 
&gt; ... if more people understood that the internet is basically held together by duct tape, they would have a lot more reverence to the miracle that it works even remotely as reliably as it does. Words of wisdom.
That tiltshift filter is lovely
...it would be a huge security hole if browser JS could run arbitrary shell commands 0__0'' **edit** and as far as the practical aspect of the question on stackoverflow, keeping a mongo instance running should be done on the server using some kind of process control, a node package like "forever", etc... and as far as a local copy running for dev, you should either have it running on startup, or write a script that sets up and runs everything you need for your dev, along with your localhost server, etc...
What if I needed a tool to generate *this* tool's config file based on settings?
this is good! :) did something like this a year ago ([take a look here](http://daintycode.de/projects/cheese/)), so what really interests me is if yours perform well with big images?
Very fair points. Thanks for your input; it's helpful. &gt; I don't understand the basic assumptions behind that workflow The assumptions should definitely have been stated clearer. I've added a section that will hopefully help: https://github.com/mrjoelkemp/ya#assumptions &gt; Does it build an index.js, an index.css, and an index.html that links them? Calling it a "build" tool was probably incorrect, though, I believe it could be extended beyond preprocessor compilation and include other common build tool steps. &gt; Does your watch process include any LiveReload or similar? How are images/sprites handled? Great ideas. Live reload should possibly get added by default in the watch configuration. An image optimization configuration could be added and a compile task called every time a new image is added. &gt; it's an interesting innovation Thanks. I am excited about possibly inferring the Browserify and RequireJS entry point by identify the root node of the dependency tree. The addition of a new JavaScript file would have to recompute the root node. Many thanks for your thoughts.
no.
This is really fantastic. It feels faster than Photoshop for many of the filters (of course, it's a small sample image, so that's part of it). While it's not something you should apply directly to a website, it could be really great for allowing modification of user-provided photos.
&gt; Have you tried doing something with WebGL? I have. It very much has the expected verbosity however the real take away is the WebGL libraries. Nothing like Three.JS exists over C++ for example. The closest thing to it is perhaps GLUT/freeGLUT and that is being very generous, it is a hideous monster of a WebGL wrapper, yet prior to WebGL libs it seemed amazing. &gt;two OpenGL accelerated Java game libraries I have not done visual programming in Java. It wouldn't surprise me that good libraries exist. However I would never again install a Java VM on my machine. I wouldn't be able to sleep at night next to such a termite mound eating away incalculably many holes to machine level; As if the word "virtual" in JVM is intended to be sarcastic. I have ditched Java a long time ago; The idea of a programming language controlled by a shady corporate entity is not appealing. And no one in their right mind would run Java software in the browser today, much of the intended original benefit is long gone. And of course it is no longer faster than JS, the variability of visual libraries is more limited and a large quantity of useful libraries of all kinds are very corporate in nature and increasingly less justifiable given the open source emergence of JS software to suit equivalent tasks. It is a very uninspired club. &gt;Secondly, the first language doesn't really matter much. It certainly matters if you're not intending to write drivers and VMs (game engines no longer apply, neither does embedded systems, physics audio, UI). These are handled well and more comfortably in JS as well. &gt;I also don't think that JavaScript is an exceptionally good choice for that purpose. ES6 is a very large and complicated language It is a superb choice. Many interesting things can be accomplished with a wide abundance of immediate effects with short quantities of procedural code, memory and system oblivious. &gt;The tooling also isn't very good. I can't begin to imagine how.
&gt; It looks really nice, yet it's still not so good. My basis is the intent of running critical sections as GPU kernels. Of course even trans-compiled CPU kernels of this nature are possible. This is a minority of code however; The vast nuances in general program flow, inputs, UI, network, etc are very conveniently handled with JS with negligible performance regards. It is the best conceivable rationale in any applications to use high level code in the general case, rather than handling all nuances of the application in a very obtuse manner. &gt;native development had to have those things before they'd been added to browsers ;) And I can't quite yet entirely escape the necessity of C++ for some of the problems I deal with. However I can very easily imagine this to change in the next few years. &gt;Well, what's so bad about C++? C++ &gt;It's much more universal language It isn't. Universal implies being able to run the same code on any native machine, any hardware, any OS, and in the best case any browser. &gt;you can even write parts of web apps in it; You can write lower-level software with it; Including micro stuff like Arduin JS, NodeJS, JS :D 1.5 years ago I was the biggest fan of C++. The best language of any I ever use for anything I wished to accomplish. That sure changed in a hurry. I realized that a paradigm that forces one to think about data flow and allocation for the most trivial of tasks is nothing short of moronic; Not historically but certainly now that there are better options.
It works faster in browsers and computers that support WebGL. Too many still don't for it to be a practical application.
Personally I'm a bit sceptical about the GPU kernels... if it worked as expected it'd be used in much more popular manner already anywhere else. Plus there are still incompatibilities between platforms on GPU drivers quality and support. We'll need to wait for nice results. | And I can't quite yet entirely escape the necessity of C++ for some of the problems I deal with. I've got fed with C++ complexities by switching to another platform, which is much nicer to use for 95% of work I do. And it's not javascript ;) I doubt I'd be able currently to write whole project I'm working on in js without going insane (and failing the deadlines...). | It isn't. Universal implies being able to run the same code on any native machine, any hardware, any OS, and in the best case any browser. It's disputable - sometimes we use platform-specific code because it's just better to do so. That does not mean that you always have to write platform-specific code and that C++ is not universal. If you'd use proper multi-platform libraries for whatever you're doing, it's like js, but with much more control on whatever you're doing. And you're not limited to built-in stuff in browsers / js engine. Even more - it's not a problem to use DOM/Html frontend with C/C++ (or java, c#, closure, rust...). | JS, NodeJS, JS :D Javascript has quite limited ways of doing things - primarily async support in web servers and apps - just suck when what you're really doing is synced and needs order (of course you can do it with promises, etc., but it's just bad in comparison to writing clearly sync stuff). Of course it works on uC, but it's an energy hog. My four weeks on battery would gone in a few days at max ;)
As I wrote "literal" the word I was searching for was "primitive". Definitely phrased it confusingly.
&gt;Personally I'm a bit sceptical about the GPU kernels... if it worked as expected it'd be used in much more popular manner already anywhere else. http://www.nowykurier.com/toys/WebGL%20Mandelbrot%20GLSL/ This is my "proof of concept" for computing vector operations on the GPU. This particular approach is constraining because there is no practical way of data sharing; That is, threads cannot be dependent. This is very limiting for a broader range of tasks. There are already ways to solve this problem; although not quite stellar. WebCL is still in draft but once it emerges it will really push the idea into the mainstream. &gt;primarily async support https://www.kickstarter.com/projects/869786663/async-javascript-book?ref=live https://github.com/caolan/async These are just getting started. WebGL 2.0 will support async rendering and WebCL will support async kernels. Of course Web Workers are inherently async.
Could you write an app in node webkit and use child_process.exec?
I have very powerful grid controls I use on a lot of my projects. They aren't meant to replace Excel, though they could in theory. But in practice that's just silly. Much like trying to open a 500mb photo in this. Furthermore - the fuck did you find a 500mb *photo*?? 
I hope for the day webGL runs on all browsers and devices. 
Oh I have to access them INSIDE the click handler.. got it .. that makes a lot of sense. I didn't want to have to use a data attr for maintainability reasons but if you think it's better than getting the values from the span I will do it that way. Thanks for the reply. 
Well ya sorry about not including the html .. Will fiddle this up next time. 
Yes console.log(this) has been super helpful ... was definitely having issues wrapping my head around the difference between $(this) and this before I started logging both of them to the console. 
Yes i was looking for something like $(e.currentTarget).find to limit the scope of my query. I knew returning everything all of the li's inside of .menu-container was a mistake. Thanks!
Remember that $ is a alias to jQuery. 
But luckily, JS isn't Brainfuck. Although you can still fuck yourself up if your language of choice is Brainfuck... http://www.jsfuck.com/
I mean Javascript as a generalized global computing language - there is always room for specialization. But even then, it can probably will be able to be compiled to JS.
Just implemented this: var data = $(this).data(); openWin(data.width, data.height); Wow, ya that was a lot simpler than what I originally had.. gotta stop overthinking this.. Thanks again for your help! 
Well, mostly IE, and support is coming in IE11. So basically depends on your target audience.
Tries to build a REST API without OAuth. Winds up recreating OAuth. (Granted, it's a bit entertaining to read, and points out that a WIDE majority of server side programming generally presumes that you naturally understand Things and forget that you don't. I'll note that client, OS and pretty much every other specialized area of programming does the same thing. But, yeah, it's still OAuth.) 
bingo also, when it doubt console it out, console.debug("$(this) : %O, jQuery(this) : %O", $(this), jQuery(this));
I think this is good advice. I was merely trying to make the OP try and think about readability and optimization of code. I wasn't saying don't cache things. The example you gave is a perfect example of when to cache. But in my opinion, seeing for (i=0; i &lt; length; i++) isn't as helpful to other developers as seeing for (i=0; i &lt; split.length; i++). This is an array length, it isn't having to go very far up the the prototype chain. So I'd argue that saving memory here is better than shaving a few milliseconds off looking up it's length while making it better to read. If I wasn't on my phone at the time I would have gone into more details about. So I tried to simply point the OP into this line of thinking. 
&gt; JS would also do way worse on the pidigits and mandelbrot benchmarks. I'm familiar with this site. I visit it occasionally but take the results with a bucket of salt. The implementations are often not written by the same person and with a widely different approach in mind. You can see how much the logic varies between Java and JS implementations. The second problem is that only one of the benchmarks uses typed arrays for JS, which is ridiculous. And this one happens to be faster, and this isn't a coincidence. The third problem is that a V8 version from November is used. Object oriented manipulations have increased ~50% since then and floating point operations on Float32/64 arrays ~80%. &gt;No one would write something like the Unreal engine in JS. I would. And be happy to do it and with beautiful results. There are demos of Unreal Engine 4 running in the browser. I realize you will object to the transcompiled nature of the result, but there are no constraints achieving the same in JS directly. &gt;Embedded systems = some 8bit CPU and 1kB of RAM. That kind of thing. This isn't 1989. &gt;For physics, you want SIMD. For audio, you need extremely low latency. And the problem is? Canary supports SIMD without so much as a single intrinsic. Dart supports explicit SIMD and both will support GPU massive-width SIMT in the near future. Already do in fact in CSS; The technology is moving so fast that I can't even say what else. &gt;No, it's not. It's a mess. Just look at, say, OOP. There are dozens of ways to do it... I hope you're not suggesting C++ conforms to universal paradigms. &gt;Wouldn't it be better if you'd be told that you're doing something silly instead of producing a NaN value or something like that? I think the NaN part will quickly give away the silly part. And there is JSLint and other emerging static and even dynamic analysis tools that will catch almost all things silly. &gt;It also starts to get sluggish with a few thousand lines of code. It is not the fault of the language if you don't know what you're doing. It is worth mentioning that the V8 interpreter from the latest update now uses a separate thread from user code. This means no compilation, optimization, and GC stalls. And of course higher single threaded performance of user code.
No, Javascript does not have operator overloading, so this is not possible. There is a form of [fake operator overloading](http://www.2ality.com/2011/12/fake-operator-overloading.html) which relies on the fact that when adding/multiplying/etc two objects, JS calls `.valueOf()` on both arguments, so you can add your logic there. But it's really limited and it's not a proper solution. It would require writing your example as e.g. var temperature = make_constrained_type(-10, 55); var foo = temperature(0); foo += temperature(515); foo -= temperature(15); // ... and so on It's really clunky. 
Really cool - does seem this has been built with AngularJS firmly in mind.
Because the data might not be "true". It could be "TRUE", or "True". And of course "FALSE" and "False". If you are dependent upon your remote data source and they for whatever reason aren't handling their data in a format that is convenient for you, it is better to wrap the check in a function and just call that. This also prevents me from having to have many if/else if clauses everywhere in my code. 
For Function 1, it seems that JSFiddle wraps the javascript with window.onload. So your window.onload function is being wrapped inside JSFiddle's window.onload. Hopefully, this will lead you to the corrections needed to get the code working.
Yeah. I'm also looking forward to it, but it's such a long wait. I [recently evaluated angular](http://daemon.co.za/2014/03/why-wrong-to-be-afraid-angular), and the fact that these are coming into the mainline is one of the main reasons I am 'ok' with it's observables.
So should I get rid of the whole window.onload = function () { $("add").onclick = addElement; $("name").focus(); $("list_array").onclick = listArray; $("show_best").onclick = showBest; }; or just window.onload = function () {} ?
Never mind, got it working! Edit: Please try [now](http://jsfiddle.net/J45xQ/3/) 
Mobile safari?
&gt; The second problem is that only one of the benchmarks uses typed arrays for JS, which is ridiculous. And this one happens to be faster, and this isn't a coincidence. Go ahead and fix it then. Everyone can submit a program. I submitted about a dozen so far. If your program is faster, it will replace the slower one. Also, a programmer's intuition is generally wrong. You have to write and profile it. That's the only way. This stuff is really quirky. For example, making one particular piece a little bit faster (when tested in isolation) can make the whole thing a bit slower. &gt;There are demos of Unreal Engine 4 running in the browser. That's C++. &gt;[...] but there are no constraints achieving the same in JS directly. Haha. Very funny. Asm.js = one large typed array + functions doing arithmetic That's all it is. There aren't any objects, strings, or anything, really. It's just a pile of bytes. There also is no garbage collection. That's why it's fast. It doesn't do any of the slow stuff like accessing fields of some object. Y'know, `foo.bar`... that kind of thing. Try to write some Asm.js compliant JavaScript by hand. You won't like it and you certainly won't write anything anything remotely bigger that way. &gt;This isn't 1989. Okay, here is a simple example. Say, you want to produce a million microwaves. Would you rather put a $10 "PC" into it or a $0.25 one? The user won't see a difference. The second issue is power consumption. Something like a SoC used by a smartphone can easily consume 1000 times as much energy. That's quite the problem if it's running off a battery. &gt;SIMD ES7 *might* support SIMD. And yes, Dart already supports it. &gt;I think the NaN part will quickly give away the silly part. It's a lot nicer if you just get a type error. Even better if the IDE tells you about this problem right away. Type coercion doesn't improve anything whatsoever. &gt;It is not the fault of the language if you don't know what you're doing. I was talking about Tern. &gt;the V8 interpreter There is no interpreter in V8. It generates quick and dirty native code right off the bat. Later, the "hot" parts are replaced by more optimized native code.
&gt; It doesn't do any of the slow stuff like accessing fields of some object. Y'know, foo.bar... that kind of thing. This isn't any better in C++. All fast applications are data oriented. Even in my C++ days I made sure to avoid Array of Object structures. &gt;Try to write some Asm.js compliant JavaScript by hand Why on earth would I do that? I can write TypedArray compliant JavaScript by hand. &gt;Okay, here is a simple example... Too simple. I'm not inclined to program microwave interfaces; Few people are these days. &gt; Something like a SoC used by a smartphone can easily consume 1000 times as much energy. That's quite the problem if it's running off a battery. Smartphone SoCs consume far less power per calculation than shoddy 25 cent CPUs. &gt;ES7 might support SIMD. As might ES6 and as might *gasp* ES5... or wait, it does already. &gt;There is no interpreter in V8. Well, no bytecode so technically a compiler (dual compiler). All the better, not an argument against it. 
Right. I definitely agree it's less readable this way as well. I am just always concerned about the amount of differing info people that are new to the Javascript ecosystem get thrown at them. Like I said though, that was probably "premature optimization" on my end :p I actually really wish that wasn't the case at all with the element collection thing since it's not something a newcomer would ever even think twice about doing. We can dream... 
So when does this become fully available?
That's the 2nd half of the semester so I don't think so. This assignment is still just JS.
That was my poor attempt at a joke
Yes, in so much as both are aiming at the same goal...
I am glad we are moving away from the tightly coupled M &amp; V. But I'd still like to see a good bubbling system for these events. For instance, if you have this object: var user = { "id": 123, "name": { "first": "Joe", "last": "Blow" } } If you put an observer on user and change user.name.first, you won't get a notice. That sort of bubbling in events seen in the DOM is one of the best things ever to happen to JavaScript. 
I think you'll need to observe `user.name` to be notified, since the `name` property references an entirely different object. I'm curious if automatic bubbling would create performance issues.
It's [part of ECMA7]( http://kangax.github.io/es5-compat-table/es6/#Object.observe_\(part_of_b_ES7_/b_\) ) and since [ECMA6 isn't out yet](http://en.wikipedia.org/wiki/ECMAScript#Versions), ECMA7 won't be here for a while.
I think in your case using the element data-attribute makes more sense than parsing the values from a string. It's much cleaner and simpler solution.
Right, it's not officially ES6 but it's part of the Harmony proposals which is the codename for what came to be known as ES6. There are no clear boundaries and they're not versions in the traditional sense, browsers seems to be shipping as they go, and what usually ends up happening is when one implements a feature others follow suit shortly after. Moreover, this should be usable in node shortly after it lands in V8
I also think it would be useful to have but should be doable in user land. Check out [observe-js](https://github.com/Polymer/observe-js) which let's you watch a path expressions, I.e. 'obj.foo.bar'
That's a good point. I actually forgot Google was the developer of Angular. 
What you're doing is called a [Value Object](http://c2.com/cgi/wiki?PrimitiveObsession) and it can be a really useful technique. As J.B. Rainsberger says at that link, value objects tend to attract additional behavior over time. They act as a collector for all the little tiny bits of duplicated code that tend pile up around your codebase. For such simple pieces of code, value objects are amazing for helping keep your code clean. As Rhomboid mentioned, there's no way in JavaScript to make a value object use regular operators like + and *. It's up to you whether the less-intuitive syntax is worth it in your case. Personally, I find that value objects work best when you name them after the concept you're modelling. Then you *only* implement methods related to that concept. For example, you might create a Temperature class with `hotter()` and `colder()` methods, but nothing that implements multiplication. (Because what does it mean to multiply two temperatures together?) One last thing: I prefer to make value objects immutable. Rather than having `hotter()` modify the current temperature object, have it create and return a new object. This will prevent all kinds of obscure bugs and it makes the code easier to reason about. (And don't worry about performance unless you have a proven performance issue. With modern generational garbage collectors, it's actually quite efficient to create short-lived objects.)
Oooh, anything that works! I had a look around, and no one had written it as far as I can tell.
Cool!
These webgl things are all starting to remind me of java applets back in the day. 
Let's hope so. One of the browsers tends to be somewhat slow on the uptake, meaning we still have to fiddle with polyfills and wrappers.
I said "aside from", so I didn't answer my own question. That had occurred to me, I was just wondering if it had any other benefits.
Very much so. http://tc39wiki.calculist.org/about/people/
Ideally you'd want something along the lines of: for (var i = 0, l = split.length; i &lt; l; i++) { //blah blah blah } That way you're caching the length variable *and* making it clear what you're doing at the same time. Also, it's a good habit to include the var declaration before your counter variables in loops, otherwise you may end up polluting the global namespace which is just bad.
Working on the AI and physics would be the difficult bit. The graphics side of it wouldn't be too complicated i think. PM me if you want to sort something out. 
I did at some point do something like that, attempting to send an email from node. Needless to say that I instead opted to use an Email package for node instead haha.
No, you'd just have to call the appropriate function at the appropriate point (if there's a problem call onerrer() before returning). Or you could just return true or false and deal with that accordingly when you call the function.
This obviously conflicts with the global event handlers.
You can also try to implement promises - however it's best suited to asynchronous tasks.
Ya, I have a function that calls a function in a number of times. The called function has an onsuccess callback so I'll add in an overall 'result' var and have my onsucess update that, thennnn finish off my overall function with a if (result === true), and use that like a 'onsuccess'! It's almost too easy...
TIL about promises. Something to add to my 'readup on' list. I'm sure I should make a funny comment about keeping my promises to myself for my todo lists etc
Back of the list it is then! Cheers for the help
Question: How do the client and the server both know the private key without transferring anything? Couldn't a third party pick up the private key the moment the server gives it to the client? Perhaps I'm over my head here. :P
Like the article states, you can't catch setting new properties, or doing stuff like array[5] = "this was previously not set";
Promises can be a userland feature, so you can use it everywhere. Of course, if the library itself uses callbacks instead of promises, you mostly can only use promises on your own code, unless you want to wrap callbacks into promises (there's a wrapper library for Node.js, for example). Note that promises are also a part of the ES6 standard draft.
I really don't see how this could work. They are entirely different data structures - objects vs DOM. The DOM is a hierarchical data structure, where only one node can be the parent of another. Js objects have no such defined structure and can have any number of references to any object. DOM nodes also hold their reference to their parent, which is why we can have event bubbling. You could observe `user.name` and forward that event to `user`, but that will have to be manually wired up. 
It's really only useful for async stuff. For example, a method which loads a an Image object will return immediately. But usually you will want to do something when the image is finished loading, or when there was a problem loading the image. Another common example is tweening. Often you want to start a tween only after another one has dispatched it's "complete" callback. 
Note that it can also already work on a non-jailbroken device as part of a native application.
There are a number of promise implementations, including jquery which has one of the worst :-D
Shameless plug, but I actually implemented something like this for C/C /other languages compiled down to x86-64 assembly. There's a workshop paper on it called "Behave or Be Watched: Debugging with Behavioral Watchpoints".
Anyone else remember the rippling water one? God, that was glorious.
This is rather... global not sure how I feel about this
You'd be surprised what art directors hand over. 200MB files are the norm for me. 
You are correct. There are performance issues, but no worse then the DOM. If done on the user agent side there are several tricks to make this performant. 
That was my initial thought too. But the browser already does this in JSON.stringify(), so it seems like a solved problem. 
I'm sure you are being hyperbolic (on the internet? Gasp!!). If its not a DAG you could run into performance problems, but nothing that the browser hasn't already solved in other contexts (JSON.stringify() for instance). Yes, the DOM enforces a tree structure, but that's not a requirement, just an optimization. The other major issue is that children don't know about their parents, so you don't know what node to fire on. But from the VM, that's not the case. Children have to know about parents so they can be garbage collected properly. The data structure is already there in the VM. This would just be another use for it. 
We (Chrome) implemented it behind a flag a while back and it's now being enabled as a default in Chrome Canary. Object.observe() should be available to the masses in M35.
Chrome have already implemented it and Firefox have an open ticket for implementing Object.observe(). Until it's available everywhere, you can use https://github.com/Polymer/observe-js which offers a relatively good polyfill for the feature which defaults to O.o if it's available.
As this is one of the few things from Java I miss and I too am fairly new to the world of library-writing, I'd be happy to give you some feedback. This is very cool. I don't know if you're the first to do it in JavaScript. Probably not, but that should never be the sole reason not to do something. If you did it for learning, then go you! I'll say now that I think it's great you've done this! So, naming convention. The convention in JavaScript naming tends to be to name classes with UpperCamelCase and functions with lowerCamelCase. I'm unsure as to whether in this case you are following convention because in *effect*, you're creating the equivalent of a Java static method on a static class, right? Yet, I see many, many JavaScript libraries use lowerCamelCase for these situations. It's essentially a "set of functions" as opposed to a class which is ever instantiated (using `new`). I'd love to hear some others' opinions on this. Personally, for these situations I'd go with lowerCamelCase, and only reserve UpperCamelCase for instantiable classes. Your documentation is clear and concise, and covers all the bases of a nice, simple library quite well. You have examples of how to use it, and examples of how to include it in your code: a big plus for cross-platform JS libraries. Your tests are quite comprehensive and nicely structured, so good job on that. However, they could be a little *more* comprehensive. I'm sure you'd come across it later on but I'd be curious to see how your library handles sorting of numbers, dates, or situations where the properties you're sorting by have numbers and letter-characters in the string. Also, small but important thing: how are you versioning your library? Have you done much research about versioning conventions and/or best practices? Despite any negative criticism I gave there, I am nitpicking. It's pretty cool, and I would and probably will use it in the future - but there's always room for improvement. Later today I'll be posting about a library which I recently updated and I hope I receive plenty of good suggestions for how to improve it. Good job! EDIT: Whoever downvoted this person's submission, shame on you!
I don't think so, you have to be in the scope of the object to observe it. From there if you want to pass the observation to a global event handler then that's your choice but I don't see this as a poor implementation.
Thanks! :D With respect to naming: you're right, lowerCamelCase is probably best here. I went with UpperCamelCase exactly for the reason you mentioned: I'm replicating a static method from a Java interface, which doesn't need to dictate the naming in Javascript. With respect to special-case comparisons: I'm not sure how best to handle that. I don't know that I want to be *too* opinionated, as that would introduce high complexity for potentially-low value. For now, I'm relying on the "fn" (key-extractor-function) form of comparator-building to fill some of those needs, though I recognize that's shifting complexity to the lib consumer/user. :\ With respect to versioning: I've read up on semantic versioning, and that's my planned route. I had a quick jump to 1.0.0 from 0.1.0, since I don't foresee too many major changes, and with the simple task this performs it should be production-ready now.
It depends on what platform your javascript is running on. You need to be more specific with your question. If running in a web browser, you would need a plugin to do it, either ActiveX or NPAPI or some such - not that I know of one that's available, but I've seen stuff done with firebreath that could run shell commands. Node.js seems like it would be able to run shell scripts. JScript.NET would allow you to run shell commands. I'm sure there are many more that exist that aren't strictly tied to a web browser.
I think he's saying he's OK with Angulars observables.
Ah, that's useful, thanks! 
In the DOM you cannot accidentally generate an infinite cycle or more generally an unexpected bubbling path. The bubbling path is visible right in the DOM inspector. That same object might have hundreds of references to it and someone making another reference may or may not wish to catch the bubbling events. 
Dude. You have no idea how garbage collection works. You do not follow pointers from children to their parents. 
Right. Not to mention, your var declaration is getting moved to the top of the function whether you tell it to or not anyway ;) 
You're welcome! On comparisons: I didn't actually see the project page before, and what you're saying in your reply suddenly makes a lot more sense :P There are lots of great resources for actually coming up with a comparison function out there, so shifting complexity to the consumer of the library is, imo, the right thing to do. Glad to hear you're using SemVar, just wanted to see what your reasoning for 1.0.0 was! Personally I find version bumps and decisions for how to version things hugely exciting at any level, it's disappointing when people just go, "I arbitrarily chose x.x.x".
Personally I'd suggest using a tool like browserify to create a UMD file. Reasons: - You aren't bloating your NPM-specific code with RequireJS/global wrappers. It would kinda suck if every library did this - The UMD wrapper may change in the future, e.g. with new environments or ES6 module features. If/when it does, updating all of your libraries to use the newest wrapper will be trivial - Less room for error since the wrapper is automated, instead of manually written
Currently attending [MtnWest Javascript](http://mtnwestjs.org/2014/) in Salt Lake City. It's a two day event of pure JS greatness; Part of a full week conference: [Mtn West Hackweek](http://mtnwesthackweek.org/2014/) See the full [javascript schedule](http://mtnwestjs.org/2014/schedule) 
 if (value === "problem i am having") { return false; }
Not sure what your end goal is here, but serializing an entire function sounds like the 'wrong' thing to do. I think you'd be better off storing the variables and perhaps a function name. However, if you must, you might be able to store the function as an object with indexedDB https://developer.mozilla.org/en-US/docs/IndexedDB
You can always do this: var f = foo(); Object.defineProperty(f, 'bar', { enumerable: true, configurable: true, set: f.setBar, get: f.getBar }) JSON.stringify on `f` will now correctly produce `{"bar":X}`. However, if you're trying to serialize the functions too... well, you shouldn't do that. It's a big security vulnerability.
Thanks, I'm not trying to store the functions, because you're right, that is a huge vulnerability. I'm more concerned about being able to dehydrate/rehydrate the closed around data. This looks like a step in the right direction.
No. You can't serialize code blocks, so there's really no way of "serializing" a function. You could serialize the function's body as a string value, but that's a horrible idea and still wouldn't allow you to serialize closures.
I'm not actually trying to store off the functions, I just want to store the local value of bar. I'll look into indexedDB, thanks.
You can, but you can't directly intercept it. AngularJS does it by polling the object's state (i.e. looking at its properties and seeing if they changed), Backbone models, Knockout and other "observable" implementations (e.g. [mine](https://github.com/pluma/obs)) do it by providing getters and setters instead. Of course the former is considerably slower (though still good enough in practice) and the latter still fails if the observables themselves are overwritten or properties are not added as observables.
I don't want to serialize the functions, I want to serialize the value of bar. I'm trying to use it to dehydrate/rehydrate an object.
Wow, this looks really fantastic. It deserves more upvotes.
I meant that you can't catch it using getter and setters, that's why some data-binding frameworks require one to use "push(x)" instead of "array[array.length] = x".
What kind of security vulnerability?
Sure. You can hack something together using proxies with getters and setters, but there's no way to do this in vanilla ES5 (let alone ES3).
oh ok, it's the instance of the object. Equivalent to Backbone's Backbone.Events then. nevermind
Let's say the user (Or virus!) modifies the function (It's stored in the device) to function () { globalData.Coins = 1337^99; //incase of a game of sorts globalData.importatntFinancialData = null; //incase of a finance app //(Never used phonegap before but I am sure it has some os level calls) executeSomePayloadOfSorts(); // If the one modifying is a virus return bar; //not to break app }
If you know c then you'll need to learn javascript context, scoping, native functions/objects, syntax nomenclature and life cycle. Those aren't too difficult to pick up for someone with a programming background, javascript is fairly predictable. What may get difficult is understanding the DOM and learning many a libraries conventions. 
I didn't know Browserify could do that. I'll check it out, thanks!
I was getting tried of adding stuff to the route itself - limit, sort etc. Sometimes I would create routes and want to pass random data for one off use cases. Anyway, this is why I made this. I don't think it's special or amazing but it may help people with the same issues I had. cheers
How many times does this need to be rehashed, and in /r/javascript, no less? We get it, [JavaScript does some wacky waving](https://www.destroyallsoftware.com/talks/wat) [inflatable arm flailingly weird things](https://www.google.com/search?q=javascript+%3D%3D%3D+versus+%3D%3D), just like [every](http://www.php.net/manual/en/language.types.type-juggling.php) [other](http://msdn.microsoft.com/en-us/library/ms173105.aspx) [language](http://docs.python.org/release/2.5.2/ref/coercion-rules.html) [out](http://www.mutuallyhuman.com/blog/2011/01/25/class-coercion-in-ruby/) [there](http://home.pacifier.com/~mmead/cs161/lesson03_06.html). Edit: I don't intend to discourage writing about software, but why not write about something that hasn't been written about so many times already?
Sadly the video stream doesn't work for me. Oh well... it's right down the street, maybe I can head over after work.
Glad I could help!
Yes, but doing so requires the use of private APIs, so you can't use it on apps submitted to or downloaded from the app store. Only for iAds.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators https://www.google.com/search?q=%3D%3D%3D+site%3Areddit.com https://www.google.com/search?q=%3D%3D%3D+site%3Areddit.com http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/ http://www.reddit.com/r/javascript/comments/1yh7vy/javascript_implicit_coercion_how_come_null_false/ It's *everywhere*. The very popular "Wat" video I linked above should have driven the point home for most developers. I am not turning my nose up at free content. I am turning my nose up at the repetition. Not all free content is good content or useful content. Invariably there are some nitpicky details in every post about JavaScript type coercion, and every time folks need to respond with what's not right, what is, what's better, what's worse, etc. It's a waste of time, and eventually newcomers won't know who's wrong or right, or where the information is coming from. As an exercise in you learning more through writing, that's fantastic! That's really all I have to say.
OP here. Any feedback is welcome so please say if you can see room for improvement, or raise an issue on GitHub.
Cool! I like the lightweight, standalone and simple nature of it. Sometimes when writing apps I really prefer to piece together different libraries since Backbone/Angular/Ember/whatever can be too broad, so it's nice to have little bits and bobs like this that solve a single, simple goal. Good job including arrays too.
There's probably been over 100 articles submitted to this subreddit alone about this, and probably over 1000 questions about it on StackOverflow. I think it's simply a rite-of-passage for new JS devs, and next you can expect something about scope, then something about closures once they realize they didn't quite learn everything about scope (function scope?!?), and then you'll get something about `this`, etc. You can't really prevent or stop it, but the best is to probably just let it run its course. It's actually good I think that people want to share knowledge, though it can get to be redundant after a while. There could be worse problems for the sub...
Though I agree with you that this topic has been reposted to death, I don't think C# does much wacky inflatable arm weird stuff, but maybe I'm just used to it's quirks. The only thing I can think of remotely similar to this article might be object a = 1; object b = 1; Assert.That(a == b) // fails
I mostly linked C# so as not to step on anyone's toes about their favorite language. I wanted to address the point that all languages have "weird" things to convey the idea that we better know how to use the language we're using.
What if you are already using a module loader like require or browserify? I don't see how this will play nicely.
Trust yourself then, don't write responses like that! It helps nobody, it just discourages others from exploring, sharing knowledge, and participating in the community. It's not like I posted a question that is answerable via a simple google search. If you don't find the article useful, just hide it, or even downvote it. Try to remember that there are other people on the other side of the internet. I spent time writing this article, you don't have to like it, but you don't have to be snarky about it either. Also consider that you may be wrong. The fact that this got more upvotes than downvotes says to me that people, overall, appreciate it, but aren't writing comments.
Here is the example integrating a super-small lightbox library: https://github.com/ruyadorno/SimpleSlider/blob/develop/examples/lightbox-integrated-example.html You can copy/paste that into the example folder you had before or download the script again on GitHub making sure that you are using the 'develop' branch. Best!
Hopefully it would tend to push writers into collaborating or consolidating work rather than having many disparate sources. Better yet, perhaps the time spent writing articles like this could be added to a book and published as an authoritative source. Not that this will happen with JavaScript type coercion, but look at the state of `mysql_*` methods in PHP. They are written about all over the place and *still written* by newcomers when the methods have been deprecated for a couple years! What do we do when something similar happens with JavaScript? I am aware there are other people on the other side of the Internet. It is not my intent to offend. I want to see people collaborate and produce quality work. Having the same topic repeated ad infinitum is not collaboration. Edit: removed irrelevant stuff.
Haha, yea, i will definitely take that into future posts...
Borderline OT, but does anyone know of a good router that can both be plugged into express or used on the clientside without too much hassle (so it obviously has to be smart enough to know which environment it's operating in and delegate to pushState, hash change events, or http requests appropriately.
Hi, and welcome to the exciting world of programming! I will explain some terms as I go along, sorry if you're already familiar with them. Your best bet is to store the numbers as a string (plain text which can be numbers, letters or whatever) of concatenated (joined together) strings before the while loop starts, and then print the result. var i = 0; var output = ''; while (i &lt; 5) { // Concatenate i to the end of output output = output + i; i++; } print(output); **Slightly off-topic:** Are you sure this is JavaScript you're writing? JS doesn't have a `print()` function built-in, so maybe it was provided to you by someone? Normally in JavaScript we'd print this out using console.log() or document.write(); I hope that helps, and I hope you enjoy programming! Take it one step at a time, and don't get daunted :) every little improvement you make in your skill is one step on a journey towards making amazing things!
would anyone really expect this? &gt; '0' == [0]
haha, this order of development is pretty much spot on for describing my JS evolution.
Sorry I forgot to say my teacher made the PE that the class uses and he changed the syntax for some reason. I guess that is in place of console.log() or document.write(). And thanks for the reply. This is a hypothetical situation that I thought would help me write my class project (I don't want to just ask reddit to do my homework :P) so now I'll see if this can be applied to my project :D
No offense, but you could take things less personally. IMO Cixis wasn't rude in his initial response, and critiquing subject matter is a valid thing to do. If you feel you've added value with your post then don't let such things get you down :)
Happens to us all :)
Interesting question. Without a bit more information and also knowing which "side" of this you're on it'll be tough to give a complete answer. That said, triggering the click event with jQuery http://jsfiddle.net/Vj2Ya/1/ it looks like its pretty easy to spot when the link's click event was triggered programatically. Looking at just a straight "onclick" handler, http://jsfiddle.net/Vj2Ya/2/ it looks like you'd be able to tell because the event would be missing client mouse information. All that said, could you "beat the system"? Maybe but I doubt you'd be able to do it with a regular browser since you wouldn't be able to change the programmatic events to supply fake mouse coordinates. If you used something like PhantomJS to load the page you might be able to modify how the events are presented to the listeners themselves. 
I doubt anyone would ever do that in the real world, but examples like that are often given as reasons that "JavaScript is weird/dumb". Hopefully the article made it clear why that comparison results in true.
Perhaps, I'm not all that hurt though, it won't stop me from writing or learning JS (which I've been doing for a few years now). But I just wish this community would be more supportive of people that are learning. That's right, I've been using JS for a few years, and I'm still learning.
My guess is that your clicking the button costs the company something, so if they're smart, they're going to put limits on how quickly you can do it. You can certainly rewrite their page by adding your own javascript -- they won't know because it's all in the browser -- but if they're smart, they'll want the event information, so you'll need to generate the event of the click and maybe even mouse move. Still, if it's too efficient, they *will* find out.
For the most part, you can steer clear of all that. Why would you compare a string to false anyway? Or a string directly to a number? Convert properly and get the proper results.
Agreed!
Why does the community need to be supportive? Is it not enough to be well-paid and have good benefits at your job? &gt; That's right, I've been using JS for a few years, and I'm still learning. That's your job. If you're not doing that, you're not a good developer. That's the baseline.
Yes, the speed at which the buttons are clicked would be what I'd measure too. I guess they could also use [document.elementFromPoint(x,y)](https://developer.mozilla.org/en-US/docs/Web/API/document.elementFromPoint) to ensure that a mouse pointer was within a button when that button was clicked, but that would exclude keyboard-only users.
This won't work with shared CDN resources (like bootstrapcdn.com, [cdnjs.com](http://cdnjs.com/), etc. ), will it? I don't see how, since every domain get's its own instance of `localStorage`.
&gt; Well aren't mobile phones caching less for a reason? You think you know why regular caching sucks? Why don't you share? I'd love to know if there's a real reason
Why would I use this over a simple express.js server script?
First, because internal storage is much more limited on phones than desktops/laptops. The phone will invalidate cache more frequently and some browsers use heuristics to help this. Second, ram sizes in mobile devices is often limited, meaning reading the cache often goes straight to the "disk" (which is often slower than desktop for various reasons). This can also lead to increased wear on the internal storage (more due to flushing ram contents to disk once it's decided that its going to be cached) Third, mobile users act very differently than desktop. The return rate is often a fraction of what it is on desktop (most web apps have a native app, and its rare for a site to have consistent repeat mobile views). This means caching is often wasted on sites the user will never visit again (or in a reasonable time frame) Finally, because the real killer with mobile networks is connection time, validating the cache can often take 80% of the total request time for small resources, so aggressive caching doesn't really solve that much (unless the Dev implements it correctly) All of this is relevant to chrome only (as its all I really have experience with) Edit: fixed bad wording.
I figured it would be in some future standard somewhere, Google don't (usually) take the historical Microsoft approach of creating their own API's/methods for doing everything around the web.
I think its just people trying to look smart or learned in the ways of JavaScript, so they can nail their next job interview, or talk about how 'involved' in the community they are. Its really easy for beginners to jump in and write about some JavaScripts concepts. If you are seeking more advanced JavaScript read Resig: http://www.manning.com/resig/
I hope it's not so self-serving. /u/johnny_eh clearly did a lot of research. I try to give writers the benefit of the doubt. Developers are often told that a good way to get involved is to start writing, give your opinion, and ask others' opinions. It just so happens that comparison operators are an easy subject to write about, so perhaps it's a common target for these kinds of articles. Or something.
Yeah, there were internet connection issues today... hopefully tomorrow it's resolved. Streaming All week - devops wednesday, ruby thursday/friday.
I managed to catch the JavaScript as a gateway language for kids talk. The other sessions looked great. Hopefully they'll be available soon. 
If you're on IRC, #mwrc is great too. They said that Confreaks normally has them done in 2-4 weeks.
&gt;This can also lead to increased wear on the internal storage. Reading does not cause wear on flash storage. Writing does, although people tend to overemphasize this; SSDs tend to last longer than HDDs, regardless of the write cycle limit. As far as I can tell, the limitation on caching on mobile is not that things aren't getting cached. It's that the cache is small. If a resource is pushed out of the cache, it will get rewritten when the page is loaded again. So a smaller cache size actually means *more* wear on the storage, because it leads to more writes.
&gt;Why would you compare a string to false anyway? An unfortunately common pattern is to do function foo(bar) { bar = bar || "default"; } instead of function foo(bar) { bar = bar == null ? "default" : bar; } Knowing what ends up being falsey is important to understanding why you shouldn't generally do the former.
You are correct. I was misunderstanding the direction of the references thinking they could be backtracked easily. I spent about an hour relearning the topic. That said, I still think bubbling events would be extremely useful. 
 if ('{system_visitorDeviceClass}' == 'TABLET') { window.location = 'tabletindex.html'; } if ('{system_visitorDeviceClass}' == 'PHONE') { window.location = 'tabletindex.html'; } will the string `'{system_visitorDeviceClass}'` be equal to the string `'TABLET'`?
moreover, PHONE, TABLET, DESKTOP are now variable, not string. if (hasTouch) { if (isSmall) { device = PHONE; } else { device = TABLET; } } else { device = DESKTOP; }
You're creating two functions every time the outer function is called, it's definitely slower. Furthermore, your jsperf is simply testing how long it takes to declare each function. You should declare the functions in the prep code and use them in the test.
I'm just changing jobs so I'll be stuck for now. =/
This was done previously with basket.js http://addyosmani.github.io/basket.js/ and taken even further with DynoSRC which runs off of a diff for handling updates http://dinosrc.it/ The major downside to this approach is localStorage is synchronous so any of those cached assets will be loaded into memory before the page can start rendering.
The actual truth: http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3
&gt;Looking at just a straight "onclick" handler, http://jsfiddle.net/Vj2Ya/2/ it looks like you'd be able to tell because the event would be missing client mouse information. Technically, you could create a MouseEvent and spoof a mouseclick more stealthily :)
This isn't about performance (the gains or losses are likely to be insignificant to end user), this is about code readability. You're right to have abstracted "min" into a function, seeing as it consists of several distinct operations and is repeated twice. However, the naming of the function is very confusing. What does `min` mean in this context? Try givinig it a more descriptive name, so that one could understand what it does just by looking at it. Same goes for `abs`. Imagine stumbling upon this line of code without prior knowledge about what it does: return ( 60 * (Math.abs(val) - abs(val)) ).toFixed(3) What's the difference between `Math.abs` and `abs`? What did the programmer want to say to us? It's impossible to decipher without looking at the `abs` source code. And looking at it doesn't really explain why you need to parse the input as integer. So, all in all, **use more descriptive names that convey the *purpose* of the function.** Also, it's almost always wrong to name your functions so similarly to the language's core functions.
Oh damn 2.0 already? Time to take a second look at Angular, there were so many lectures at this year's Fluent conference on it.
Note: This isn't a release announcement. It's more of an outline or roadmap with a short Q&amp;A at the end. Some of this stuff was mentioned in the ngconf keynote. https://www.youtube.com/user/ngconfvideos/videos
That isn't a release announcement. I guess I should have editorialized the title a bit to make this more clear.
Edit: I notice now that you're relying on `parseInt` as a way to convert from a float to an int, so the specific code below doesn't help. Nonetheless, the advice still stands: instead of doing implicit conversion all over the place (passing a string to `Math.abs()` and comparing numbers to strings), convert and check values once. Just use `parseFloat()` instead of `parseInt()` to retain decimal places, and `Math.floor()`, `.ceil()` or `.round()` (or even `parseInt()` or `| 0`) to get whatever int value you want. /u/lazyduke is absolutely right about creating functions over and over, but I have something else to offer. If you're running the `.lat` and `.lng` properties through `parseInt`, I'd assume that they're raw input values from somewhere? You should probably try parse them immediately and check the values. function latLngToGPS(latlng) { var lat = parseInt(latlng.lat, 10); // Don't forget to var lng = parseInt(latlng.lng, 10); // specify a radix! if (isNaN(lat) || isNaN(lng)) { // Throw an exception or something } ... If bad values are a possibility, then immediate checking will let you catch the error right away. Even if you *know* the input is good, parsing them first means that they don't get converted twice as they do right now (happening implicitly with the `&lt; 0` for `ns` and `ew` and explicitly with `parseInt`).
Delete and repost please.
This should be crossposted to /r/angularjs
Yeah, that's the reason why I read and why I didn't use libraries until I really understood the basics. ;-)
The posibility of using the same code for serverside redering would be awesome. no need to bootstrap angular, load the data and construct the dom, a completed dom could be delivered from the server directly.
Never really tried webgl with JavaScript, but I have had some serious problems with cloning as well. Any good way to do it consistently and efficiently?
The lack of type safety can be remediated by typesafe comparators and typeof/instanceof checks. You can also do fake operator overloading. The actual problem of performance is adressed through asm.js. If cloning is a problem, your objects have probably too much complexity anyway. So yes, JavaScript and 3D mix in a different way than other languages do. However, that should only be a problem if you insist of handling it the same way.
I don't like the comment approach. It's complicated and probably considered bad practice. There's no need to check if the map has a particular property, because you're looping through the properties it does have. One last thing I noticed is that you don't always use `var` when declaring temporary variables, which means the variable is considered global, which could cause problems. You could do it like [this](http://jsfiddle.net/QgLtj/5/).
 templates.prototype.myHTML = '&lt;div&gt;'; templates.prototype.myHTML += ' &lt;h1&gt;hi&lt;/h1&gt;'; templates.prototype.myHTML += '&lt;/div&gt;'; templates.prototype.myHTML = '&lt;div&gt;' + ' &lt;h1&gt;hi&lt;/h1&gt;' + '&lt;/div&gt;'; Or even worse... templates.prototype.myHTML = [ '&lt;div&gt;', ' &lt;h1&gt;hi&lt;/h1&gt;', '&lt;/div&gt;' ].join('\n'); are your other options, I much prefer backslashes though, a lot easier. [In ES6 you can use backticks to create template strings.](https://github.com/lukehoban/es6features#template-strings)
Hey thanks!
Yes, there are limits 5 clicks per 1 second, which is 1 click per 200ms.
I absolutely _love_ working with Angular. I'm using it right now on a project and it's so fast and flexible. Combining Angular with websockets (I'm using [socket.io](http://socket.io/) for that) has so far produced an unbelievably fast and responsive web application. I'm eager to see how Angular 2.0 turns out. The list of improvements looks great!
What section of the article are you referring to?
Thanks for the detailed response, much appreciated!
Missing the most performant and best of them all, psh... GSAP
Thank you for the example. BTW, it looks like your response may have been cut off at the end.
I think I want them to be equal. Is this even close to the right way to go about this? 
Performance is usually not such a big a problem. A lot of games will hit GPU bottlenecks (fill rate, number of draw calls, FBO binds, etc) before they run into CPU bottlenecks. I agree, this article seems like somebody is frustrated that Language A isn't the same as Language B
HTML is a serialization of the DOM. HTML is parsed by the browser to instantiate the DOM nodes that have been serialized by HTML. You should basically think of HTML as *being* the DOM. HTML does require a tree, it is the same structure as the DOM, and therefore follows exactly the same rules.
Indeed. Most minifiers don't remove "important" comments though: `/*! The exclamation mark means I'm important enough to preserve */` It's easy enough to adapt this system to use the important syntax instead: http://jsfiddle.net/QgLtj/6/
Even more concise? http://jsfiddle.net/XSLzu/
You're welcome :) That's quite possible. Either that, or it was 8:30am and I was still waking up and forgot to finish my reply ;)
I have done a lot of changes in the API, to make it much cleaner and more like LESS, yet inside JS. You may give it another shot. :)
I analyzed the issues you pointed, and redone the API to make it more efficient. Its more like LESS in javascript. You may want to give it another shot. :)
If they are using LESS, you may ask them to give it a shot. API is completely redone.
so I trying to go for a &gt; never* do these things &gt; \* before you point out the obscure exception here it is. edit: updated the declaration vs statement section to be more clear.
This'll fit nicely with my node-neo4j project.
Incorrect. This is not a tree, but is valid HTML5: &lt;div&gt;this &lt;i&gt;is&lt;/div&gt;&lt;div&gt;on&lt;/i&gt; two lines&lt;/div&gt; Two things make this not a tree. First, it has two root nodes (divs). Second, the i tag is not encapsulated by the parent nodes. The DOM will turn that into a single root (HTML and body tags) and will separate the i tags between the divs. That's all I was saying.
I love Angular and everything about this announcement sounds awesome. I can't wait to see 2.0!
You can reference the function from inside itself when setting it as a variable. The hoisting bit is true, but rarely relevant, I think relying on hoisting is bad practice anyway. There's really nothing wrong with it, and it's not a mistake. var Test = function() { alert(typeof Test); }; var test = new Test();
This is invalid HTML syntax. If this was the only thing you sent to the browser, it would likely be interpreted as: &lt;html&gt; &lt;head /&gt; &lt;body&gt; &lt;div&gt; this &lt;i&gt;is&lt;/i&gt; &lt;/div&gt; &lt;div&gt; on two lines &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; That doesn't mean HTML doesn't require a tree -- the browser will do everything it can to make it into a tree, including ignoring the `&lt;/i&gt;` tag that has no opener. Valid HTML syntax does require a tree. 
&gt; GSAP [Link for the lazy](http://www.greensock.com/gsap-js/)
Back channel discussion is #mwrc on freenode.
Definitely slower? No. Possibly slower? Sure. But I would bet that it's not slower. Modern JS engines are good at inlining functions like that, so I'd expect that the resulting code being executed is very similar in both instances.
my mistake on the referencing thing, was thinking of function.name (will correct), as for the hoisting, module.exports = Name; function Name() { /... } we nicely avoid burying the exports at the end of the file where it is easy to loose, and that's just based on code i'm working on right now. 
You sound like an old pro at Javascript, but new to the experience of being good at something.
No, that's not entirely correct. Functions can reference variables within their scope, which is why your example works, but it's unreliable as you could `delete window.Test` and that constructor would break. However, if you name a function, it will always be able to reference itself by its name, regardless of whether it's assigned or declared. This works: var factorial = function fn(v) { if (v &gt; 1) { return v * fn(--v); } else { return v; } } var func = factorial; delete window.factorial console.log(func(4)); And this also works: function factorial(v) { if (v &gt; 1) { return v * factorial(--v); } else { return v; } } var func = factorial; delete window.factorial console.log(func(4)); See http://ejohn.org/apps/learn/#10 for more info.
Did you get inspiration from https://github.com/sindresorhus/multiline by any chance?
Your question is a little confusing? From what I can gather, it looks like the inner loop "while (NUM_MONTH &lt;= 24)" will loop once, but it wont loop anymore. This is because you never reinitialize NUM_MONTH outside of the inner loop. This line "NUM_MONTH = NUM_MONTH + 1;" right before the inner loop should be "NUM_MONTH = 1;" assuming I understand the problem. 
Hah, yes that was the seed of inspiration, and the catalyst which got me coding was this video: https://www.youtube.com/watch?v=Jyhz2e4grHo
I guess it depends to what degree you want to make something 'angular like'. Angular has a lot of modules, do you want to replicate them all?
IMHO it's cleaner to have all the exports just defined as the last couple of lines. So a lot of these "style issues" come down to personal preference. 
Seriously, what the hell is this? http://i.imgur.com/bcNb9Q6.png Why is there a menu OVER a main part of the scrollbar? Whoever made this failed at basic UIX and need to be spanked (in a bad way) 
Really looking forward to this. Especially excited about the Modular section.
The scrollbar is supposed to be next to it instead of under. I think that is a rendering error from the browser.
ok so if you run the script it prints an amortization chart with the name and account. the way it is now it will print the name and account for the second person but not the amortization chart. I don't know why. im totally lost.
There's a guy writing a book on exactly this topic, might be worth taking a look at: http://teropa.info/build-your-own-angular/
I build apps for real clients using older browsers. Fuck me, right?
For the sake of completeness I should mention that outside the node.js world there are various other patterns like passing two callbacks instead of one. However most of these pre-date node.js and promises and are only used for compatibility or traditional reasons.
I looked for the same thing a while back and ended up writing one we use internally. I also wanted to add better support for removing routes while the system was in heavy use and caching of static routes for slashdot affects. Here is where we're currently working with it if you are curious. http://jsfiddle.net/sashman/QFw9K/
Building DOM trees in JavaScript wasn't a good idea for templating the last 100 times it was done and it isn't now.
I'll take that bet. http://jsperf.com/infunctest/2 Why? Two functions are created every time the function is executed, then they're garbage collected (eventually) when the function returns. I'm not sure why the VM chooses not to optimize this away, but you could use IRHydra to dig further into it. But you're not wrong; if the `min`/`abs` functions were declared outside of the `latLngToGPS_Modified` method, the VM would (probably?) inline it and the performance difference would be negligible. Further reading: http://mrale.ph/blog/2014/02/23/the-black-cat-of-microbenchmarks.html http://mrale.ph/blog/2012/12/15/microbenchmarks-fairy-tale.html
Hmm, sounds like maybe a bug in the VM if it's not optimizing those out. They're clearly pure functions, so inlining them should be easy. The difference is way smaller on Firefox, making me wonder if it's handling this better.
If you dig deeper, I'd be interested to know what you find. I'm pretty sure it has to do with declaration of a function in a newly created closure. I don't think that it's safe to inline as the functions reference environment is now the closure created when `latLngToGPS_Modified`.
&gt;real clients as opposed to imaginary ones?
node.js is a server side platform built on top of Chrome's V8. Sails.js is an MVC server side framework built on top of node.js amongst other things. jQuery is a library of useful things, it essentially simplifies client side development. Browsers are notoriously inconsistent (though it's getting better), and jQuery was initially designed to smooth over those inconsistencies. Backbone is a client side structural framework built on top of/using jQuery, somewhat analogous to Sails being built on top of node. It's very minimalistic, and exists to simply provide structure to javascript heavy web applications. For everything else, check out [this article](http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/) by Addy Osmani on the proliferation of client side tools/frameworks. [TodoMVC is a great resource to look at all the different competitors](http://todomvc.com/). The three big contenders on the client side these days are old man Backbone. Google's Angular, and Ember.js built by one of the core contributors to Rails. For a discussion on angular, ember, the difference between libraries and frameworks etc... check out this talk from the creators of Ember given a couple of days ago [here](http://www.youtube.com/watch?v=jScLjUlLTLI). be forewarned there are an absolute shit ton of different tools out there, it will take some time to get a good understanding of all of them and their uses.
Because if you don't, [demons will fly out of your nose](http://www.catb.org/jargon/html/N/nasal-demons.html) and your coworkers will yell at you. Not necessarily in that order.
seems to work for me. http://js.do/code/35289
[Image](http://imgs.xkcd.com/comics/goto.png) **Title:** goto **Title-text:** Neal Stephenson thinks it's cute to name his labels 'dengo' [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=292#Explanation) **Stats:** This comic has been referenced 16 time(s), representing 0.1197% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
There's quite a difference in the licensing between the libraries listed and GSAP. Most of the libraries listed in this article are MIT licensed. GSAP is $150 a year for a commercial license. That may not be a factor if you're building a commercial game. But, if the goal is to animate elements around on a web page, it bears taking into consideration.
This is how it works. New tools come out built for evergreen software. As they become increasingly popular and more things rely upon them, pressure builds for older systems to upgrade. Without that pressure, many never would. 
Try PhantomJS
Yeah; it ultimately depends on the type of game.
Thanks! I will hold u to that if I come across any more obstacles in my journey :D
What is? Using it or not using it?
The redirect still isn't working for me, is there something I am missing here?
To be honost, i've never had a problem just using == It's a rare once in a blue moon thing it matters. 
Just use the current version, it is fully functional. 
cool, thank you for sharing.
I feel the same way you do. I worked strictly in Actionscript for almost 10 years and felt like there wasn't a project I could walk into where I wouldn't be 100% confident in myself. Now that Flash is dead I'm learning Javascript and feeling like I will never feel confident again and will just have to learn on the fly for every project.
&gt;hosting (though you might passionately disagree) should that be hoisting?
1. Make a page with a virtual keyboard attached to a textarea 2. Wait 3. Publish the collected works of Shakespeare
Twitch Tests Your Page
The "View" section at the bottom of the [Getting Started page](http://lhorie.github.io/mithril/getting-started.html) has a list of reasons why this choice was made. I'd be curious to see what your opinion is after reading it. I've personally been enjoying this style of DOM building in React. (in LiveScript, in plain JS I'd probably prefer JSX) What makes you think it's a bad idea?
ok I see thanks for the help action!
Not a rendering error, the element is positioned fixed with a higher z-index.
I agree with the Javascript: The Good Parts recommendation. Crockford (the author of the book) also made some videos with similar content and some more background. Here is a list of videos: http://stackoverflow.com/a/1531738.
The replaces are not global, so if you have many instances of the same variable, only the first gets replaced. Guess you need to convert your first argument to regexp though, as the flags (3rd parameter, optional) is non standard as per [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)
Great summary. Other notable libraries right now: Underscore.js is a utility library that fills in some gaps in the language, and is also a backbone.js dependency. Knockout.js is a lightweight and extensible data binding library.
I'm still curious why anyone would use Underscore over Lo-Dash.
Yeah, that's what we're doing. Just a bit shocking to see that it won't support what I believe will still be a large portion of the browser market.
Awesome! That's exactly what I was looking for thanks :)
Mainly the binding / templating. That's what I'm trying to replicate in order to learn more than anything
Tested on my stock trading app this morning. Checked back an hour later, my account was up 200%. Use this.
Yea, Blogger sucks big dinosaur balls.
You cannot walk the DOM with a query selector. As a result a query selector is less precise than the methods provided by the standard DOM API. That is pretty substantial in the case where you are able to write JavaScript but do not have access to modify the underlying markup.
&gt; The reason libraries like jQuery are so widely used on the client-side is that historically browsers behave very differently from each other and these libraries abstract away the differences Maybe... I largely think it is because the web is a diverse and sloppy place that takes some amount of practice and experience to learn regardless of differences/commonality in the browsers. Experienced developers cost more and inexperienced developers are more common. In an age where there is high demand for developers and experienced developers are exceedingly rare businesses settle on low performers. I believe its economics that drove the success of jQuery, and its ilk, for more than any technical justifications. Even if there are no differences between the browsers jQuery would have been just as successful, because many developers cannot be bothered to learn to access the DOM.
Don't ever create arrays and objects like that unless you want to die. JavaScript does not have associate arrays. There are arrays and object literals. Object literals can be accessed in a manner that looks like access to an array index using square braces. This is called array notation. It is handy in the cases where object properties are not syntactically valid references. myObject["1234"] = "asdf"; //array notation and perfectly valid even though *1234* is not a valid identifier.
I don't think a webpage is meant to be able to render over the scrollbar.
Yes, in the future they won't support browsers which are currently still significant. That's how it should be, really. jQuery 2.0 is similar, for example. It doesn't support IE8 and below.
Cute, using the comments toString() idea that we saw in "multiline" last week.
**EDIT: Public DropBox link to play game.** (I'm not getting any sound, I think because of download times or issues, but there should be some!) https://dl.dropboxusercontent.com/u/10309411/Projects/HTML5/Rainy%20Day/Main.html This is a game I wrote quickly in order to learn: * HTML 5 Canvas / Sound capabilities * Event/Message-based architectures * JavaScript for game development * ActionScript 3 (which the game has also been ported to and is available on Newgrounds) Unfortunately, I only had a month to work on the initial version, and a month to port it to ActionScript 3. There is much to be desired in the code. I would appreciate anyone who wants to dig through the source, steal the (poorly written) utilities for their own use, and suggest ways I could have made the game better! (Ex: I hear I should have used the HTML 5 Audio API instead of playing sound how I did. I honestly know nothing about that, currently!)
Sweet Jesus. I guess anybody can write a blog. 
The data binding and injection really are the coolest parts. If you want to look into those, might I recommend you look into it in a different way. There should be some data binding frameworks out there where you can look at them and have a small cross section of the problem. Same goes for injection, something like RequireJS is fun to look under the hood of.
The scrollbar comes from a div with overflow scroll.
Here it sometimes shows one in the div and sometimes in the browser, strange.
Github has hosting. Look into http://pages.github.com/
My bad, missed an important part. You need to do the full URL, or only update the part you want. If you want to send people to "http://www.yoursite.com/tabletindex.html" then you can just do window.location.pathName = "/tabletindex.html". I would suggest doing a google search of window.location to see all of the different parameters that it has for doing different operations on the browser URL. Hope that helps :). Edit: on phone so formatting and properly replying is hard :(
There is also the less promoted but equally powerfull [CanJS](http://canjs.com/).
[Relevant documentation on == behavior: Zeros in javascript](http://zero.milosz.ca/)
Here's my final version for now http://jsfiddle.net/QgLtj/9/ . I may add support for external .html files at a later date. 
Yes it does seem odd.
"future" ... "currently" In the past, IE5 was relevant. Do you currently support it?
node is definitely the most used platform. I know there are other options like Mozilla's Rhino, but I honestly haven't ever heard of it being used. Add in things like NPM, and node ends up as the most viable contender around. It's pretty easy to keep track of everything after a while, typically when you hear of a new framework it's meant for the client side as everything is still in flux on that end. Server side is pretty much dominated by express.js and its offspring. Good luck and welcome to the community!
If you're dealing with banana related stocks, that might just be insider trading.
Building on the comment above, code like this is definitely a bad practice: &gt; (Math.abs(lat) - Math.abs(parseInt(lat)) Is lat a string or a float here? You're relying on implicit type conversion to be able to use it as either one, but the contradiction on the same line of code is almost painful to look at. It looks like you want the fractional part of a number here. Math doesn't have that, but it's easy enough to write, here's one version that seems to match your needs: function frac(x) { x = Math.abs(x); return x - Math.floor(x)} This will be much more efficient that relying on type conversion to convert the float to a string when you pass it to parseInt.
My point was, if this comes out within a year, ie10 will likely still have a significant market share, yet won't be supported by angular. And I am surprised by that. You are the only one talking in two different tenses. I was always referring to the future.
&gt; if this comes out within a year, ie10 will likely still have a significant market share, yet won't be supported by angular. The 1.x branch will stay around for a while. Just like jQuery's 1.x branch. You can continue to use it til the end of time if you want.
Yes I understand that. 
Being quite new myself at javascript frameworks all I can say is take a look at jQuery. It's very easy to get started with and you'll have so much fun working with the front end. It's also an easy way to get started with Ajax. It has great documentation as well. Good luck.
I would argue that `eval` would be a better comparison.
This seems to be the attitude at google. I've encountered many googlers that don't understand that people outside mountain view don't upgrade their tech every year or two.
Now you have two problems.
**2014 Javascript Developer Job Requirements From Hell**
For people who are interested in this sort of thing, I wrote a similar library: https://github.com/ianb/walkabout.js
Oops! Because I forgot my doc type, you are correct; this is invalid html. Ad that in there and then those tags become optional. http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#optional-tags Also, I was confusing the new parsing rules with validation rules. Two different things. I'm just messing up all my edge cases lately! 
...Is this the outline of a future article?
I think it's more of a list of things that a web developer should at least some somewhat of an understanding of.
Wish I could down vote this half baked blog spam even more. 
Omg how did i miss that?! Thanks for pointing it out. On another point I tried doing it all on a single return statement but it seems to run much slower on jsperf: http://jsperf.com/htmltemplatething1/2 Also I think it takes away some of the code readability too. 
How about this? http://jsperf.com/htmltemplatething1/3
I think there's an issue around this bit: .match(/\/\*(.+)\*\//)||[,''])[1] The function returns blank.
haha alrighty. i'm surprised how much slower using match() is though. I assume its something to do with the data going in then out of an array. If match() returned a bare string I think it would be faster in this case. 
Caching of CDN resources is available as long as the Access-Control-Allow-Origin is set on their end. So the first time a user visits a page using jsCache, they are gonna request the resource from the CDN and this resource is then saved in localStorage for some time (default 5 days) When the cache runs out, a new request have to be made and this request could just return the HTTP cache of the file.
Yes. These guys have been doing javascript MVC since 2007 and it shows.
Fair enough, but compared to other APIs, the DOM can be a bit unwieldy. I mean "querySelectorAll", really? That said, with old-IE becoming less important I find myself more frequently using the native DOM API directly. But my client-side projects have also shifted from "web sites" to "web apps", which may be a factor. When the primary use case for JS is "AJAX" (the buzzword, not XHR) or visual effects, the trade-offs of using abstraction layers like jQuery-as-she-is-spoken (i.e. less direct control, bad practices like not cleaning up stray event listeners or performing dozens of redundant queries) are simply not significant enough to outweigh the benefit of just being able to say "$('.button').addClass('active').blink()" instead of "var element = document.querySelectorAll('.button'); element.classList.add('active'); blink(element)".
Sure, the benefits are neat, but the same could be said for inlining styles instead of using stylesheets -- it's entirely possible to reduce the HTML of a web app to a single `&lt;script&gt;` tag. I guess Mithril is slightly better than most attempts because it isolates the DOM construction into views and allows mixing them as components. Call me old-fashioned, but I prefer to keep the DOM in HTML -- I don't even find modern HTML ugly enough to warrant using an alternative syntax (although I did play with SHPAML for a while); nor do I enjoy JS transpilers (though TypeScript is kinda neat and CoffeeScript is great for pretending you're not writing JavaScript).
There are no Map or Set literals though, are there?
I wished submissions could have a negative score because this article deserves it. Arrays are just objects with a `length` getter, an iterator and a different prototype. Array indices are just regular properties with names that happen to be numeric. As /u/achen2345 said, the property access notation using square brackets is not unique to arrays, it's just a way of accessing properties with names you don't know in advance (i.e. variables) or that would throw a syntax error (e.g. numbers). Also, using `new Array` or `new Object` is a tell-tale sign you don't know what you're doing and think JavaScript is like Java. Here's the number of situations in which using `new Array` is a legitimate option: 1. You need to create an array of a given size where every value is `undefined`. 2. [You want to make a Batman joke](https://www.destroyallsoftware.com/talks/wat). Here's the number of situations in which using `new Object` is a legitimate option: (this space intentionally left blank)
If I understand you correctly, you want to be able to: 1. Open the web page. 2. Throw a CSV file at it. 3. Have the web page render the CSV file in some manner. 4. Have other people view the result and edit it. If you just want steps 1-3 you could do it with the File API (supported in modern browsers, not sure where the cut-off point for IE is, but I can guarantee you IE 8 and older doesn't support it). If you wanted the data to persist between page loads (i.e. user closes the page, opens it again and the data is still there) you could use LocalStorage, which is supported all the way back to IE 8 (but not 7 or older). However data size is a real issue in that case. You can only store a limited amount of data in LocalStorage (you could use the Filesystem API, but that's also pretty new) and if you render the entire dataset at a time the page could get unwieldy. Also, as I said, this doesn't address #4: because everything stays in the user's browser, the only way to share the result is to share the browser itself (either via physical access to the same machine under the same user account or via remote screen sharing). The safest bet is to write a server-side app with some kind of data storage. You can do so pretty easily in node.js, but that assumes you have shell access to the server and are comfortable writing an actual application. If you only have a shared hosting webspace you'll probably have an easier time hacking something together in PHP. Either way, you'll need some kind of server-side something to upload the file to and persist the changes in a way that allows other people to view them.
Last thing is the only one I agree with. First two in many cases are made on valid purpose
The second one is the only non subjective one... 
throw result; This made me giggle
_reposting comment here. is this really meant for r/javascript?_ Do tropo and phono count? Tropo is a project/subsidiary of voxeo, and phono is a client side library they released that bundles all the necessary things together. While I personally didn't need to use video, it does have that feature. For the node knockout hackathon last year, we built a 6-17 player WebRTC version of the party game Werewolves. It dials all the players into a central voice conference hosted by tropo, initiated over sip, but carried over WebRTC. We then script and manipulate the calls and play the game narration in the same way you would play hold music on a phone. The players are muted/unmuted based on changes in the shared game state. Tropo is free for development, so we were able to build the bulk of this in the 48 hours needed for the contest, without needing to pay a cent. They don't have any of that annoying voice over when you connect, and their prices for commercial apps seem pretty reasonable, and in-line with what twilio charge. * [werewolves.io](http://werewolves.io) * [blog post announcing alpha](http://daemon.co.za/2014/03/werewolves-io-alpha/) * [tropo.com blog post](https://www.tropo.com/2014/03/werewolves-io-multiplayer-webrtc-game-built-tropo-phonosdk/)
ANARCHY
Or React.js
&gt; The three big contenders on the client side these days are old man Backbone. Google's Angular, and Ember.js built by one of the core contributors to Rails. Knockout.js is also popular client MVVM library, especially in Microsoft world and enterprise app. Combine it with the Hasher and Crossroad.js, I found that Knockout.js app is very maintainable than other JavaScript client framework. It is also the easiest to teach when you train a new programmer. 
Cool, know any X-Tag or Polymer libs using ES6 Modules please?
I almost typed lodash instead of underscore but I still feel like it's cannon, mostly because the backbone documentation still lists it as a dependency (it mentions lodash and zepto with a kind of 'swim at your own risk' tone). I have switched and haven't run into any issues at all though.
There are many data binding frameworks out there; React from Facebook, Reactive.JS, Ember.JS &amp; Meteor are similar.
Most of them are huge and hard to learn from IMO. They are well documented but you need to know where to start
Sorry, what is the objective of this game? Not sure if turning in to a little man is a good or bad thing.
Oh right, I thought Reactive.js was the framework facebook released. My mistake, I'll take a look now!
Maybe I should call it "Reactive.js not from FB"? ;)
Thanks, looking at studying Backbone soon.
I think because of "Integration with authentication and authorization". I don't think ui-router does that at all right? Also Ui-router basically has the $stateProvider.state(/*.....*/) From what I understand and have done is use a namespace key for the states. So I think the google angular team is trying to have this whole implementation tied to the set of controllers? Since states lineage and controllers are kind of inherently tied.
This article is interesting but sincerely I don't see any use case in which I should change my print.css stylesheet. Kudos to the author but this is awful.
I was just going from the angular blog post. It mentions IE11 as being evergreen so I assumed IE10 was not. After a google search it appears that [it will actually depend on your OS](http://stackoverflow.com/questions/14555389/is-interent-explorer-9-an-evergreen-browser-what-about-ie-10).
Consider this use case. You and me are writing a web page, and I tell "The title should be printed in red" and I set "color: red" in the css. You say "NO! I want it green!" and then you change the css. Then I change the css via javascript, and I win :P
These libraries are all a pain to use. We really need reactivity and templating to be baked into the language.
I'm going to submit a pull request adding a function call that automatically schedules the attack as a cron job at 12:01am. I'm calling it .feed();
Change takes time, this would be too soon and too bold to push it now (it's still a ~haskeller game mostly).
Quite catch I think ;)
I still didn't get my beta invite /cry
I'm writing one right now to use in authoring the 4th version of our very large single page web app. Reactive dependencies are a must for maintainability and incremental updates are a requirement for responsivenes of an html app. The language is similar to coffeescript (but with sensible scoping and explicit array comprehensions) and adheres closely to ES6 constructs wherever possible. Reactive templates are authored with a subset of the normal imperative function syntax. It's primary purpose is to write incremental, reactive html templates, but it also works for model to model dependencies and any other place where one structure is dependent upon another structure. We even use a reactive template as our incremental build/test system (You just treat the file system as just another input/output structure). Reactive programming is the future.
My post on Google+: But mobile browsers &lt; 'evergreen' 20% are still stuck on Android 2.3, many might not update above Android 4.2, 14% are still on iOS6, &amp; I suspect the large iPad2 userbase will be left behind in iOS8. http://androidandme.com/2014/01/news/google-posts-fresh-android-distribution-stats-jelly-bean-and-kitkat-usage-on-the-rise/ https://developer.apple.com/support/appstore/ 
Brad Green's reply: &gt; we're trying to build a framework for the browsers of 2015 and beyond. If the market is still stuck where it is today, I'll have to eat my words.:) 
Are these concepts and terminologies the same as observables and computed's in data binding frameworks such as knockout and angular? 
There is nothing about Angularjs there, just MVC. Nice thumbnail about MVC though.
Lots of people seem to search for how to make one of these, but I didn't find the examples on the Web very satisfying, so I made my own. However, I'm mostly a backend developer and would love for some Javascript gurus to tell me what I could have done to improve it (and my CSS, for that matter).
Cool, looking for something like this. Missed the slider lib I made for VSTs. &amp; LOL @ the name :)
I love reactive programming too, but the article mention some caveats (similar to haskell lazy evaluation in my eyes, worthy but still, problems), so it's good to find middle grounds where unecessary boilerplate (a lot of today's javascript) goes away, but not too much so you retain control to avoid traps. ps : is it public work you've been doing ? [1] and have been frustrated by my inability to explain it or implement it for years.
So good news for those on windows 7 or higher if I'm reading correctly?
i hope this can be installed locally unlike webmatrix/cloud9 which throw a ton of errors.
Thank you, I'll watch that in a bit :)
Maybe monkeys look like gremlins, to him 
Yes, but you lose the entire value-proposition of libraries on a CDN. The main purpose of those CDN's is that if both site A and site B use the same resource, a user only has to download that resource once. I don't believe `Access-Control-Allow-Origin` has anything to do with it. For example, if I have this in my page: &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"&gt;&lt;/script&gt; And then you put the same exact thing on _your_ page, then only 1 copy of jQuery is downloaded, because the browser has saved the resources under the `ajax.googleapis.com` domain. Further, if 1000 sites all reference that resource, it will still only be downloaded once. However, using your system, it would be downloaded 1000 times, there is no browser cache to deal with. Your setup cannot read or write across domains -- all the data is stored under the domain that made the request, as opposed to the domain the resource is located on.
I tried to only cover 'frameworks' as that's what OP was looking for. Knockout.js is super cool, but doesn't really compare to the others. 
That is not accessing the DOM. What you linked to are methods for manipulating access to a returned node list. jQuery is a framework with a handy API. The easy way with the pretty names is still precise than the native methods (that jQuery also uses under the hood).
Thank you very much for the feedback. It definitely makes sense. I also wondered if it could be smoother, but wasn't sure how to do that.
It's allowing you to walk through the DOM just as the DOM APIs would allow, only in a way that makes far more sense and is much easier to use. What can you do with the DOM API that you can't do with jQuery?
Isn't the [cdnjs](http://cdnjs.com/) similar thing?
Are you able to detect loops?
I'd be very interested in a similar sort of analysis for DataChannel only. I'm interested in WebRTC as a multiplayer game platform.
The problem is that you're trying to fit a class hierarchy in a language that doesn't really support class hierarchies. Stop fighting against prototypal inheritance.
I think that's what they mean by converging. If it converges to the same value, since the system doesn't trigger update if both old and 'new' value are the same, thus no cycle.
Apparently, jsDelivr is generally faster: http://www.cdnperf.com/#jsdelivr,google,cdnjs/http/90
Looks like it. Both work very similar too, both have npm updates and a github repo. Both have searchable metadata api. I hope somebody can point out some key differences. 
Same here. I've seen lots of posts about audio/video specifically, but just p2p data communication should be quite different.
Ah. thanks for the head's up. I'll be sure to always use .equals() then.
Thanks for the help... this still isn't working for me. This goes in the &lt;head&gt; right? &lt;script type="text/javascript"&gt; if (hasTouch) { window.location.pathName ='/tabletindex.html'; } &lt;/script&gt;
No, I got it. I don't agree that using == is problematic in any way shape or form. I was being sarcastic in response with something that I think made as much sense as equating == with goto.
When a p2p connection for the RTCDataChannel is not possible, the peers fallback to a TURN server. The only decent open source TURN server i know is https://code.google.com/p/rfc5766-turn-server/. So if you successfully deploy and scale your own STUN / TURN servers you are good to go. More about RTCDataChannel: http://www.html5rocks.com/en/tutorials/webrtc/datachannels/
You might be interested in [Bacon.js](https://github.com/baconjs/bacon.js). It's a library based of RxJS, but I found it to have simpler js examples.
Fantastic work. 
Cool stuff, as being new to js, I am so intrigued on how you did this. 
Waiting for the day we have hundreds or thousands of public CDN services, thus defeating the purpose of having public CDN services. Edit: specified "CDN services" rather than "CDNs."
It's sort of neat for using prototypes without mentioning them once. Missing from the final solution is a mean of "sub-classing" objects. (Also, no static methods. not touching that one.) Trying to respect the underlying design feel, the best I can get is http://jsfiddle.net/7h7Te/1/ That's far from good though. For one, `__proto__` is not supported on IE, and mozilla.org [discourages its use in no uncertain terms](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto). Also, our constructor super() call is pretty gross. If we wander a bit further, we can end up with http://jsfiddle.net/7h7Te/2/ We've avoided the dreaded `__proto__`. The constructor super() syntax is still fugly, and we have no concept of static methods. We're still somewhat minimalist, but we've already wrapped our object declaration in a function, mimicking a great many frameworks out there. So we can continue in that direction, and make $extends more complicated: http://jsfiddle.net/7h7Te/3/ Yay. pretty constructor super calls, and overloaded functions can be accessed and run in the proper context. Also, the $new bits are added automatically, because why not. So we've gained some kind of subclassing mechanism, and pretty much totally corrupted the original design. At that point, one could just have $extends return a constructor function and keep using `new` without losing much. Can you come up with a way to enable subclassing that doesn't totally trash this approach? 
umm what
The CDN should be distributing content around the globe. If my data center is in LA and someone in Sydney wants to use my service, having the majority of the content in Australia will be a large performance boost. Having a asset already in browser cache from another site is just a bonus with a public CDN.
Within the closure, create an object containing your variable and methods. JSON.stringify the object and put it on local storage When you pull it from local storage, jQuery.extend(dehydratedObject, localStorageObject) within a closure 
ajax.googleapis.com though I wish people would stop using it. `ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js` has been outdated for a year; that serves v1.9.1, while newest jQuery 1x branch is v1.11.0 However, `cdn.jsdelivr.net/jquery/1/mainfile` works great! Also, the few repos it hosts sometimes take 3 days to update. jsDeliver usually less than 12 hours, cndjs less than a day last I checked.
Maybe I should have said CDN services. If Google, Moz, Microsoft, Dreamhost, Bluehost, Digital Ocean, etc. all create their own CDN services, the files available on them will be on each of these services across the globe as separate entities. If one website uses Google's CDN for jQuery, and another one uses cdnjs, the content, replication, and bandwidth are all duplicated.
The biggest one for me is when I search for jQuery, jQuery is the first result
&amp; almost for MicroSoft, but pfft
cdnjs = powered by [CloudFlare CDN](https://www.cloudflare.com/features-cdn) jsDelivr = CloudFlare + [MaxCDN](http://www.maxcdn.com/products/edgecaching/#network) + a few [other POPs](http://www.jsdelivr.com/network.php) rlp is right that jsDelivr is fast; the only CDNs that are faster are the specialized CDNs for jQuery (`//code.jquery.com` I assume) &amp; `//netdna.bootstrapcdn.com`. jsDelivr tends to have better uptime also. 
These already exist; they're called [proxy caches](http://www.mnot.net/cache_docs/#DEFINITION). That's why you're supposed to [turn on `Cache-Control` &amp; long max-age](http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Avoiding_caching) for your HTTP &amp; [other cache tips](https://developers.google.com/speed/docs/best-practices/caching#LeverageProxyCaching)
I don't get it. 
I'm glad there is some more jsDelivr promotion; I was starting to get lonely on the GitHub/issues forums, esp the API.
&gt; ajax.googleapis.com Bah, finding the url of a library on there is a pain. Isn't it a bit dangerous to use a url that resolves to a variable version of a library? Or am I reading that wrong? 
Where were you a year ago when I tried this? :) THis is what I ended up with. http://adastragames.com/3Dmap/ I ended up using threejs. Great work OP!
&gt; ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js has been outdated for a year; We (Google) worked together with jQuery on that. Neither of us want people to use /1/ in production and so it was deprecated and thus isn't updated anymore. jquery-latest on the jQuery CDN is the best way to get that build. Edit: jQuery team is going to freeze jquery-latest, actually. :) In that case, use Bower to make sure you're always pulling latest.
Curious!, I downloaded it to take a loot at the code, I am interested in the code :DDD, tried to play the game and did not understand it much. Looks like some artsy gameing, may try later again :D
This looks interesting, but the part of procedural html building... Separation of template and code is usefull, since different people may be writting one or the other. Separation of beavior and looks is interesting, because you may want to change look withouth breaking beavior!. So it gets 100 points for coolness and -1 points for DOM trees.
Being similar is not always good. I had stumbled by elementary error with for in pattern in javascript, 3,4 times. In python, i of "for i in a" returns elements itself, but javascript returns index of a when "for (var i in a)". 
Not sure if I consider dividing a large block of code into modules a "trick"... I think people just call that refactoring 
Refactoring is a trick. You can also call it a technique ;)
To find shelter. It's in the title of the game. The themes of the game are shelter and rebirth. If you want any additional hints, let me know.
To find shelter. It's in the title of the game. The themes of the game are shelter and rebirth. If you want any additional hints, let me know. It's definitely an artsy game. I was trying to be deep. It's been two years, and I still don't think I would have done anything differently. I will say that I don't think I explored the themes very deeply, or picked a somewhat shallow means of expressing it.
Method chaining in particular makes those two feel similar to me, but when describing the languages I find Ruby's object model much further from JavaScript's - Ruby has real methods, unlike Python and JavaScript's functions that act kind of like methods sometimes.
You're welcome. Glad it helped :)
if you need one, pm me an email address for you and I can send you one.
I think you mean `Array.prototype.slice.call(..)`, or with generics, `Array.slice(..)`
One obvious pitfall with these inheritance patterns is that they don't play nicely with other people's code (eg a class that doesn't have $super). They also clutter the object (bad for V8) and give way to potential collisions. I agree that JS boilerplate for "classes" is nasty, especially if you need getter/setter properties. I've got my own util since most others haven't met my needs: https://github.com/mattdesl/klasse The important thing is to get away from notions of large class hierarchies, the need for a "super class", strict interfaces, etc. Of course, ES6 should improve things. :)
I must have not explained my point very well. My point was that the valuable part of using a CDN service is having geographically distributed content. Having multiple sites using the same public CDN is just a bonus, not the main reason. Let's say I write a JavaScript library that doesn't use any libraries, having geographically distributed content is still valuable even if only one site uses it. The point of the CDN is not defeated. Another example, let's say I'm writing a single page app using marionette. At the minimum, I'll be including jQuery, underscore, Backbone, Marionette and the application itself. Let's say I'm using a big public CDN. If a user happens to have the right versions of those files cached, cool, I just need to make 1 http request. There is still a chance that the end user will have to make a few http requests. I suspect you would see a larger performance gain by combining and minifying those into 1 file and throwing that up on a CDN. Just make sure that one file is versioned with a long cache time.
I can use a proxy cache, like [varnish](https://www.varnish-cache.org/), with a long expire time but still not have the geographic distribution. My point was that geographic distribution is the valuable part.
I agree, the similarities make getting them mixed up easier. For this specific case, it helps me to imagine I'm iterating over a dictionary, since iteration over a dictionary in Python uses the keys. It's easy to remember because JavaScript objects look like Python dictionaries.
I was skimming the examples for threeJS and ran across a molecule simulator, here: http://threejs.org/examples/#css3d_molecules I realized that there is not much difference between that and a bunch of hyper-link connected stars. I also took this as inspiration: http://workshop.chromeexperiments.com/stars/ 
I understand your point, I just don't agree with it. :) I think we value different things from a CDN. To me, the geographic distribution is the most valuable part. If I understand your point correctly, it's the cache hit across sites that you find valuable. If a user goes to a page linking to the Google CDN version of jQuery, and they go another page that points to the same version of jQuery on the Google CDN, they do not need to download jQuery again. I suspect that doesn't happen as often as you think. Now I'm curious how I can prove it, I'm tempted to write a browser plugin to track how often it really happens.
Both are valuable, but I believe these public CDNs started for the cross-site caching value they provide. http://encosia.com/3-reasons-why-you-should-let-google-host-jquery-for-you/#caching As for how often it happens, think about all the millions of sites out there using common JavaScript and CSS libraries that are accessed millions of times a day. First, if it's the same file from the same host, the browser will have it cached. If the browser doesn't have it cached, some ISPs have started caching those files. If the ISPs don't have it cached, then the CDN local servers will. If they don't, then they'll grab them from the root CDN servers.
No, JavaScript and Lua are pretty darn similar.
The other correct way is: var object = Object.create(somePrototype);
&gt; I'd love to *trade notes* with you sometime. I see what you did there.
can you make them work on a nicer interface for the list of avail libs? thanks ;)
It seems to me that if you really wanted something like this, you'd be better off using getters and setters, so the code would be a bit less ugly. Using `Object.defineProperty`, define a getter/setter for `value`, so you can do this: var num = Reactive(20); num.value = 21; num.value++; for(num.value = 0; num.value &lt; 10; num.value++) { // whatever } // etc This has the benefit of not losing *all* syntax functionality. With the original methods listed, you can't increment directly, you have to do stuff like this just to increment: num.set(num.get() + 1); Which is *horrible* for readability.
You should take a look at highlandjs or baconjs. Both of them are superior APIs and HighlandJS is useable in so many different contexts with a beautiful api.