https://www.npmjs.com/package/bootstrap
Disclosure: self-submission
FFS, just use Angular.
Waterbear (http://waterbearlang.com/) is essentially scratch but for javascript. So blocks are dropped to form code, code is run in an iframe, rinse and repeat.
You could use a proxy like Fiddler, or maybe Charles, to replace specific files loaded via http with local files. In fiddler it is called the "autoresponder". https://www.youtube.com/watch?v=h3DWqYXKarA 
This is great, they have already been using scratch and want to move on. thx.
Maybe not entirely related, but one thing I miss in Sublime's JS highlighter is giving a special color to declared variables. Compare for example: x = 1; With: var x; x = 1; In the second example, the parser should be able to detect *x* is a declared variable and highlight it accordingly. It's a feature available in Qt Creator's JS editor and one I appreciate greatly because it makes it very easy to spot typos and other mistakes as a wrongly spelled or scoped variable would be undeclared and thus not have the proper highlighting. Does anyone know whether this behavior can be replicated in Sublime somehow?
Why are there always people trying to advocate or argue for a certain framework? If it's so amazing people will simply use it. If it suits the need of the team building something then they will use it. If it speeds up development time and makes for easier and more efficient production then great, use it! Otherwise, stick to what is best for yourself and shut up. Let other people fall behind if they can't produce the same work as you /r team. 
[This post](http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome) explains why Web Components fall short when compared to React. 
Haha touche...one question though - why does this exist??
Before any of that, do you have a link to your github? I just want to see what level your at and if it's worth my time.
I really dig the Monokai-based theme it comes with
Ok, point taken, but do you really trust Tor that much? What if we had a solution that didn't require the user to install anything at all for their particular os? I'd love it if we could remove the trust part of it altogether, I mean we do know who the progenitor of Tor was. Ok, belay my last, I did have to install the dotbitme .bit chrome extension to surf the .bit websites but then again maybe that could have just been javascripted into the client page instead. I dunno, there's gotta be a way to do this all in the client now, with no downloads at all. That's why I mentioned zeronet earlier too, they're really on to something with that. 
I just started using github not too long ago, getting familiar with it now. They didn't even have Github when I first started coding, we just passed an emailed todo list back and forth. I was kind of hoping that gitchain product would have made it. He even got it funded on kickstarter too, but I guess he moved on to some other projects or somethin, i dunno. There's just so many decentralized apps that need to be built. The only way we can end the wars now is to defund them. To defund them we need bitcoin. To get control of our data again we need to decentralize. To get rid of isp's we need global access to the meshnet. I'll start getting stuff on github as soon as each phase is completed. I break the projects up into separately funded phases too so not much money is asked for, but that money goes directly to the team that develops it. Verified by the blockchain of course. Then I get the next phase funded and so on, till the project is done. 
Quite a piece there, the title had me hooked in at QED. Good work. 
Removed, it doesn't really have anything to do with JS at all.
Removed, it doesn't really have anything to do with JS at all.
p.s. Eric Elliott, please stop spamming.
I hope it at least came close to living up to the bombastic title!
IIRC this already happens in Sublime. Perhaps try different theme/syntax combinations?
Mmmmmmmmmmm facetaco ;) I see whatcha mean. I don't spend enough time on here I guess. My day usually consists of reading (right now i'm on "secrets of the javascript ninja"), skyping, replying to emails, perusing the alt news, avoiding the mainstream news (all we see is war anymore) and trying to catch some time with the family. I hear ya tho. I'm sure we've all got tons of ideas. I just want to see them come to fruition before tshtf and none of us can code anything anymore. They actually want to make encryption illegal now too. Second amendment, forget it. Free speech, yeah right. 
&gt; Javascript is only popular because we're forced to use it in order to use the web. For what its worth - I like javascript. A lot. I like JSON. Its cleaner than XML, and not as white-spacy as yml. To quote goldilocks, its 'just right'. I like functions as first class citizens. I think it, by its nature makes folks separate data from data transformation. It introduces, naturally, good design patterns and a tendency to implement 'fluent' behavior in libraries (like jQuery, lodash, chai and others). I like the fact that Javascript isn't as "strongly typed" as C# and Java. I prefer Prototypes, mixins and similar constructs to traditional inheritance models. I think it encourages composition. I like this. I like that I can implement a basic strategy pattern by simply swapping out a string in an object graph. I actually *like* the fact that functions create closures, and not just brackets. It feels logically consistent, with functions as first class citizens. Yes, its different - but I dig it. The more I think about it, I like lots of stuff about javascript!! I know many developers feel like they were held at gunpoint, metaphorically speaking, but not everyone feels that way. If I had a choice, given any language - I would *still* pick javascript! 
I only took a quick glance at the product hunt API so take this with a grain of salt. It looks like they have client level auth too, so you don't need to handle the redirect. Here's the relevant doc. Basically in this case you would register an app with them and they would give you a client token. You would include the token in the body of your request. [client doc](https://api.producthunt.com/v1/docs/oauth_client_only_authentication/oauth_token_ask_for_client_level_token) The doc also has an example of the body. I'm not sure if all the end points you're looking to access will be available to you via this method. Some may be user specific and you will have to go through the redirect. They're using oauth so essentially what happens is you tell your users to log in. When they click that button, you redirect them to the product hunt login screen along with the url you want product hunt to redirect them back to once they've logged in. Once they've logged in they'll be sent back to the address you specified along with a token in the request that you'll attach to ever request to the api to tell product hunt which users you're accessing the api on behalf of.
Lanyrd has a pretty good and continually updated list: http://lanyrd.com/topics/javascript/ Note: Calls for talk submissions usually end months before a conference, so you have to plan ahead.
&gt; a general lack of already existing best practices in the community. I wish that fragment appeared near the top of your post, because it is the most relevant part, and a lot of folks won't make it to the end. I still hear folks (usually Java and C# developers) lament about how 'deeply flawed' Js is. Of course if you ask them what they mean they have no real followup. Its just a meme in their community they are parroting with no real understanding what they meant by it. Of course certainly not every "non JS developer" says this, but it happens frequently enough to that it is noticeable. I'm just simply not sure how much more effective proof is necessary to prove that Js is a wholly competent and practical language. Its literally running everywhere, no sweat. Folks have worked out best practices, frameworks and design patterns, and have built amazing things in it. Most first world humans don't go a day without interacting with something using JS. Simply put a lot of folks shit on something they didn't take the time to properly learn. 
&gt; it just has serious flaws that make its ubiquity undeserved like ? please. deep underlying flaws. list them (besides typeof null is 'object')
Take a look at [SublimeLinter](http://sublimelinter.readthedocs.org/en/latest/) and [JSHint](https://github.com/SublimeLinter/SublimeLinter-jshint), and put *"use strict";* in all your modules. Any big errors like an unclosed parentheses or using an undeclared variable will be highlighted.
&gt; kind of
https://github.com/wuub/SublimeREPL will allow to have a local javascript testing environment in your sublime. Better than running the console, but not ideal for heavy apps
Hey there. Great article. I would like to say that Spessore and Allonge are my two favourite JS books. Your blog, in general, is always informative and if it's not something new (to me) you always explain it better than I would. I always suggest both books and your blog to friends in the industry. Thanks for making the javascript community better than it would be without you. Cheers. P.S. Do you ever do any speaking in Toronto? I'm pretty active in the meetup scene here and I'm always looking for more events worth checking out!
Yeah, upvoted for pointing that out. I’ve resisted writing about this for *years*. I only went ahead with it because it occurred to me that there is a connection between the pattern of using functions as selectors/choices and the inversion of control/ask-don't-tell patterns. It’s possible that this is not a sufficiently interesting similarity to justify reading about `K` and `K(I)` once again.
With npm you can dedupe and consolidate.
Yeah, I did fix it. I didn't write the original code. There's a lot of old code around and I wonder how often something like this happens. Remember this was written over a decade ago.
This is what Media Source Extensions is for.
I've met him in person and he came off as quite an asshole. Maybe that was just my experience, but I definitely dislike him. His answer to everything was literally "buy my book" and nothing more, which is why I pirated his book. I respect his knowledge, but not him. Fuck Doug.
&gt; sufficiently interesting Again, it was a very entertaining read. :D
"But we just finished getting used to 59K subscribers. Wah!"
I'm on my phone, so forgive me as I'm not actually able to run your code at all right now. But my first thought from the sample is that you're not loading a .jpg file. You seem to be returning a number and using that in the `src` attribute, resulting in something like: ``` &lt;img src="4"alt=.... /&gt; ``` I'd suggest appending ".jpg" to that. Unless there's something I'm missing here...
The LiveReload plugin is pretty bare-bones and needs some glue like [tiny-lr](https://github.com/mklabs/tiny-lr) (or a gulp/grunt task) to integrate it into a typical frontend workflow. The LiveReload App (different from the plugin) is not free. The goal for wtch is zero config, so instead of a gulpfile [like this](https://gist.github.com/mattdesl/8c61bb7c1e392ef4cd54) you can just use npm scripts, and save the build tools as a devDependency: watchify index.js -o bundle.js | wtch bundle.js | garnish
Hi, im a bit of a novice but i wouldnt recommend using document.write if anything use something similar to this for the image; * var x = document.createElement('img'); * x.setAttribute('src', rNumber + '.jpg'); * x.setAttribute('alt', rAd); * then take this and append to an anchor or div well thats my take on it I hope it helps you a bit Edit: added + '.jpg' to setAttribute
Thanks very much! That's kind of where the confusion comes in with the syntax. Trying ad(rNumber).jpg, rNumber.jpg, or ad + rNumber displays no image at all so I'm not sure how this would need to formatted to work correctly.
sounds like the story of slack
with not a single good post
I m agreed there will be one version of angular soon which don't use Atscript
We haven't actually covered createElement yet but I can definitely give it a try. Thanks for the suggestion and I'm looking into this now. 
Here's just what immediately springs to mind. This will of course be colored by my preference for statically typed languages. 1. everything about "this". 2. nonsensical implicit coercions. Any sensible machine would self destruct rather than do [this](http://utf-8.jp/public/jjencode.html?src=%22This%20is%20ridiculous.%22&amp;var=%24). 3. All references are mutable and nullable by default. All keys are public by default. 4. two bottom types (null and undefined) that are distinct from one another 5. syntax errors are exceptions! 6. What most people would like to think of as "types" are built up imperatively with statements rather than declared statically. This, and the prototypal inheritance model (whether or not it is properly understood and used) are actively hostile to optimizations and static analysis. 7. Just as in lua, everyone wants to think in terms of modules and classes, but the lack of facilities for this in the language means that they had to reinvent those wheels as a community. 8. Keys have to be strings. This isn't crippling but it's unnecessarily limiting in a way that e.g. lua doesn't suffer from. If keys could be anything, then it's extremely simple to represent sets (without duplicate entries), and I loves me some sets. 9. Lack of Mike Pall :)
This ended up working, btw: document.write("&lt;img src=ad" + rNumber + ".jpg alt=" + rAd +"/&gt;") Thanks again for the all help everyone.
I've looked here but nothing is really jumping out at me. http://w3c.github.io/media-source/
Thanks. I found this for swapping the src on the fly. http://3strandsmarketing.com/video-quality.php Attempting to trigger it by fullscreen on state.
&gt; but if it is feasible and nobody could possibly commit the time that it would take to produce it then I will get it funded. Mhmm. http://www.reddit.com/r/Bitcoin/comments/2vqhsr/dont_give_ukencode_any_of_your_money/
http://www.reddit.com/r/Bitcoin/comments/2vqhsr/dont_give_ukencode_any_of_your_money/
Hi, Thanks for the heads up. I will. Anca
bower is more for client side. 
What's stopping you from just using a portable distribution of any language? If the restriction is that you can only create/modify files, you could also use something like sqlite.
jQuery offers a `$.parseXML()` function that allows you to take XML and traverse it using normal jQuery selectors. You can get the XML using a simple `$.get()` function. 
Is Javascript a good language to learn programming? I'm a noob, should I start here?
Have you explored testing Flux apps the same way? I've run into the same issues you did with React and I figure it would be even worse with Flux since you need access to the single Store you are trying to test.
[Sure](https://www.youtube.com/watch?v=WPvGqX-TXP0), [even](https://www.youtube.com/watch?v=Hl-zzrqQoSE) [millions](https://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;index=1&amp;list=PLFE2CE09D83EE3E28) [of views](https://www.youtube.com/watch?v=3u1fu6f8Hto). [It](https://www.youtube.com/watch?v=KkMDCCdjyW8) [doesn't mean](https://www.youtube.com/watch?v=3bMsY5a7cBo) [much](https://www.youtube.com/watch?v=zmYqShvVDh4) [in terms](https://www.youtube.com/watch?v=k6U-i4gXkLM) [of quality](https://www.youtube.com/watch?v=fS7w-TXinPE). [Some](https://www.youtube.com/watch?v=_cLvpJY2deo) [are even](https://www.youtube.com/watch?v=6wEqQvvcwyc) [about JS](https://www.youtube.com/watch?v=PMfcsYzj-9M). [What's](https://www.youtube.com/watch?v=yQaAGmHNn9s&amp;list=PL46F0A159EC02DF82) [your](https://www.youtube.com/watch?v=tvC1WCdV1XU&amp;list=PLAE85DE8440AA6B83) [point?](https://www.youtube.com/watch?v=S3t-5UtvDN0)
npm@3 is going to prefer flat dependency trees as long as possible (avoiding conflicts): http://blog.npmjs.org/post/110924823920/npm-weekly-5
Interesting, personally I know his talks really motivated me but maybe is it because I already had some programming experience? Or maybe I'm just weird. I don't think you should begin learning to program with JS anyway.
If you're serious about wanting to learn to program and are ready to invest several years of your life in it (ie. you want to learn more than just putting together a little website) then I think as DaemonXI said you should learn Python (or C# or Ruby, it's just a matter of preference really, C# has the advantage that you can code games in Unity3D with it) because it's a cleaner and simple language that will teach you more about programming methodology.
I don't see why that wouldn't work. The database file, a DLL, and a language that supports it would be all you need.
(Disclaimer: I'm an Angular outsider. I read a lot about this stuff but I haven't actually written any Angular apps.) &gt; Use Component-Based Architecture (a.k.a. use directives, not ng-controllers) I've seen some horrible things done in the name of MVC over the years. SpringMVC from the Java world being an example, and PureMVC's nutty [jellyfish diagram](http://puremvc.org/component/option,com_wrapper/Itemid,34/) being another. It is interesting to see this move towards a more Component based approach especially considering that this has been the norm for desktop GUI toolkits since the 90s. (In these toolkits the term used is typically 'widget' and not components.) It also validates the Dojo toolkit and its Dijit system. No one likes to talk Dojo as it is simply not 'hip' at all, but they did get the component strategy right. The Web Components specs are also most evidence of people waking up to things which were thrashed out on the desktop years ago. 
http://lmgtfy.com/?q=populate+a+html+combobox+from+xml+file+using+javascript and yes, use js.
/u/Cixis pretty much explained for you. My two cents: I think it mostly depends on what you want from them in the short term. If you need them to build modules from the ground up I would say that you follow Cixis's post completely. If you need some code monkey to stomp some bugs I would just take a small convertible coding example from their strongest OO language and just walk them through the conversion. Walking through the conversion should pretty much shows them the things they need to know to get the bug count down. An example with coercions should get some questions get some hands raised allowing you dig a little bit deeper into the language. (I have never used reddit outside of "Pulse: Best of Reddit" so this is probably garbage)
There is never more training time in the future. Don't feel bad though. Everyone fucks up the on-board process.
[Image](http://imgs.xkcd.com/comics/free_speech.png) **Title:** Free Speech **Title-text:** I can't remember where I heard this, but someone once said that defending a position by citing free speech is sort of the ultimate concession; you're saying that the most compelling thing you can say for your position is that it's not literally illegal to express. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1357#Explanation) **Stats:** This comic has been referenced 1124 times, representing 2.1716% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_col86oe)
see if everyone is up for an after hours training session.
Yeah I saw that. There's a link at the bottom - [this page alleging that he's been involved in several other scams targeting the 'survivalist' market](http://gun-school-bonita-ken-silver-scam.com/) - which you should also check out. Absolutely brilliant read and really puts this all in context. Also feel free to Google kencode github. I thought that was cute. 
&gt; if you ask them what they have no real followup. Its just a meme in their community they are parroting with no real understanding what they meant by it. BS. [This kind of thing](https://archive.org/details/wat_destroyallsoftware) is well known and easy to find. Also, many "C# or java developers" have worked on the web and therefore likely written some JS. Labelling them all "non-JS developers" who must be speaking "with no real understanding" is lazy. it's a good idea to code in multiple languages and learn their strengths and flaws.
&gt; functional scope ... its not a problem to be fixed, but a feature to be understood. if scope is not a problem to be fixed, what are the changes/additions to it in ES6, i.e. "let", "const" and "=&gt;" about then?
By "talks about programing", I mean in front of a live audience like Crockford's.
So how would you manipulate the DOM if not with document.getXXX methods? 
I realize people have already said this, but one hour a month sucks big time. I would petition (stomp my feet and scream) to the boss about getting more time, but I would also start organizing lunch-n-learn sessions in the interim. You could do those daily, and nobody is losing any company time so it's hard for the boss to pitch a fit. Just find a conference room with a projector, or crowd around a monitor and brown bag it. Now back to the single hour. It's really not enough time to do anything but introduce them to a few key topics and then give them some homework. I would break it down into basically three 15 minute blocks. **1.) Closures** Show them a couple examples of closures and why they are important and super powerful. A simple function that returns another function, that uses the input from the first is a great place to start. Super clear and easy to reason about for beginners. //This is a great beginner example function addTwo(a){ return function(b){ return a + b; } } addTwo(5)(5); // 10; Then direct them to MDN for further reading on [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) **2.) The 'this' pointer** Almost every new JS programmer gets tripped up on **'this'** but the rules aren't terribly complicated, just confusing. Show them how `this` is based on how the function is called with this simple example: function sayHi(){ console.log('Hi my name is ' + this.name); } var p1 = { name:'Bob', sayHi: sayHi }; var p2 = { name:'Larry' }; p2.sayHi = p1.sayHi; p1.sayHi(); p2.sayHi(); sayHi(); This is a quick example that you can use to have a conversation about how 'this' is bound, and some of the pitfalls. It also dovetails quite nicely into using **call**, **apply** and **bind** in order to manipulate that binding. You could show them the same example and how you could use **bind** to force what you want. function sayHi(){ console.log('Hi my name is ' + this.name); } var p1 = { name:'Bob', sayHi: sayHi }; var p2 = { name:'Larry', sayHi: sayHi }; p2.sayHiBob = p1.sayHi.bind(p1); p1.sayHi(); p2.sayHi(); p2.sayHiBob(); sayHi.bind(p2)(); Then give them more homework. Have them go read the MDN articles for all four of these concepts. * [This](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) * [.call()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) * [.apply()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) * [.bind()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) Which leads us directly into... **2.) Prototypal Inheritance** Ok, so you will not be able to dig into this very much in fifteen minutes, but you need to at least introduce them to the concept, or they will be spinning their wheels a lot. This is the nastiest and most difficult concept to grasp in JavaScript mainly because of the horrendous implementation of the **new** operator. Skip that, and explain how JS is really about delegation... that there are no classes per se, only objects. The five minute example: var person = { name:'unknown', sayHi: function(){ console.log("Hi, I'm " + this.name); } }; var josh = Object.create(person); josh.name = 'Josh'; josh.age = 33; josh.introduction = function(){ this.sayHi(); console.log("And I am " + this.age + " years old"); }; var sally = Object.create(josh); sally.name = 'Sally'; sally.age = 25; josh.introduction(); sally.introduction(); This gives you a great way to show how objects inherit directly from other objects via a prototype. However, it avoids all the ugly mess involved with the **.prototype** property and functions and the **new** operator. It's simply going to take them a lot more time to grasp that, and a lot more fiddling on their own, so it's best to just avoid it given your limited amount of time. Finally, go tell them to read the MDN article on [prototypal inheritance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) And then have them go watch James Shores video over at [Object Playground](http://www.objectplayground.com/) And for final homework tell them to go read: * [Eloquent JavaScript](http://eloquentjavascript.net/) * [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS) And finally, buy a single copy of **JavaScript: The Good Parts**, and give it to one of them with the instructions that once they finish reading, they have to give it to the next guy. This will put at least a little pressure on them to actually read the book. Well... anyway that's how I would approach it.
I wouldn't talk about Javascript at all. I would teach them how to think. I would teach them how to learn and how that process can be both extremely painful and extremely rewarding. I would talk about my learning process. I would tell them that great programmers know most of programming is failing. Failing a lot. It's about small, incremental, connections that utimately make up a quality programmer. In three months, with daily guidance, if they haven't taught themselves nothing you say about Javascript in that meeting will matter. 
&gt; OLOO Do you have any resources to explain what this means exactly?
Thanks! Well 6to5 currently inserts only the needed polyfills inline at the top of my transpiled js files at the moment, so I don't need a separate runtime file. Of course, this leads to a lot of duplication when I have each module in a separate file, but I figure that if I concat all my files, perhaps they will all be included only once at the top of the bundle file. Or I could concat the 6to5 polyfill file with my own Js files and turn off the inlining altogether. Yeah I see that the SFX will do the same with the Traceur runtime, but isn't that a pretty huge chunk of code? I was under the impression that 6to5 can be leaner. I just saw there is an option in 6to5 to specify the module system as `--modules ignore` which just strips out all module-related code. Maybe that can be combined with concatenation in order to get what I want. I'll do some more experimenting and see what I can come up with. Failing that I'll try traceur as systemjs seems better geared towards that project. I am also really enjoying working with ES6 - I'm gonna miss a lot of the new stuff when I'm working on my regular ES5 work stuff. 
Also... A number of industries have spent decades perfecting the idea of hiring green people and training them up. Lots of great sales organizations do that. Insurance companies do that. Investment banks do that, read “Liar’s Poker” for an account of how an Art History major became a Bond Salesman at Solomon Brothers. Apple trains salespeople. What do they all have in common? A professional training program, with full-time professional trainers. There is a curriculum. The recruits spend weeks or even months as trainees. There is an entire *culture* around “training people up.” There are also ruthless gates to pass, with those who don’t measure up being fired. The idea that you hire three green people, train them up in an ad hoc manner with no plan or experience as a trainer, and then expect *all three* to become full-time professionals, does not match up with industry experience.
Get them to do codecademy for JS first, that will scrape off all of the fundamentals and you can focus on teaching them the important higher-level stuff that your company focuses on.
It's going down!
"[Linus Torvalds on git](http://youtu.be/4XpnKHJAok8)" was a smashing success with over 1 million views.
&gt; A professional training program, with full-time professional trainers. There is a curriculum. The recruits spend weeks or even months as trainees. There is an entire culture around “training people up.” There are also ruthless gates to pass, with those who don’t measure up being fired. How common is this in the software industry?
It’s extremely uncommon in the software industry. Pop quiz: Do most software companies produce quality software on time and budget? Hmm, let’s ask an easier question: Do most software companies make money? I am almost at the point where I think that anything common in the software industry should be considered an anti-pattern until proven otherwise ;-)
I'd start with the DOM and introduce them to why people use JQuery and JQuery selectors for the first hour (show them the getElementById() first and then show them JQuery selectors. It is a very visible way to show them how you can select various elements on the page AND (while I know it isn't purely javascript) how to load in a library from a local path and from a CDN. You also get to introduce them to what a function is. I'd stop there, when I teach computer skills 1 hour is usually tops for three new concepts and an actual application. Don't try to do some complicated real application yet, just show them how the DOM, CSS, and Javascript (along with JQuery) can highlight divs and set values. I would even supply the HTML so everyone gets the same document. Worry about scope and the more OO like aspects later. Chances are 80% of what they need to do as front end developers will extend from this kind of thing. The second class, I'd show them how to create their own libraries, do calculations, a little on scope, and have the results show up on the page. The third class, I'd have them actually hit a RESTful service and display the items on the page. The important thing is to start with something that gives immediate feedback and gives them a foundation in what is happening. I'd also have them pair program with someone who is more experienced to teach an actual framework (like AngularJS and/or Bootstrap).
I teach intro to JavaScript at a local university to continuing education students. They are mostly "artists" and have some sort of entry level background with HTML and CSS. I can't speak for the entire range of students, because your new hires may not fit into the same category that I teach, but one hour of month would be a waste of time and most of the comments below completely over-estimate how quickly people can learn. These people talking about inheritance, closures, object-oriented concepts and such are way off base. I could probably give you some additional pointers if you provide a little more info about their background. The answer really is different if we're talking about humanities majors who know HTML and CSS and fancy themselves programmers, and math majors with a background in CompSci of some sort.
I lost respect for him over the years as his talks became more and more off-topic and he apparently took on a Steve Jobs calibre ego. He seems to think there's always someone who will want to come hear him speak, so he takes advantage of it and thinks he's telling people revolutionary things in his talks, when he's really just soapboxing. When we were both working at Yahoo, I'd sometimes head over to catch one of his talks in the cafeteria, usually for Bayjax, a local JS meetup. One time he devoted a large chunk of time talking about toilets (in an analogous way), then one time he really abused his status and showed an uninterrupted 25 minute video about the planning of Disneyworld to the audience. I forgot what the point of it was supposed to be. Some time after leaving Yahoo, I attended an HTML5 developer conference in San Francisco where Doug was the keynote speaker. He had recently just left Yahoo to join PayPal, and he used his entire keynote as a personal soapbox to blast the then-CEO Carol Bartz and Yahoo as a whole. Everyone at the conference was confused and disappointed.
This is a fantastic point. Companies like Apple and Solomon Brothers have mastered this over time and money. While this is ideal, what suggestions would you give to a smaller company aspiring to create a culture around "training people up"?
Lets do the math: **Two experienced developers** +2 * 1 // volumes of code produced per experienced dev -2 * 0.2 // bugs per experienced dev + 2 * 0.2 // bugs fixed per experienced dev = 2 volumes of code produced **3 Inexperienced Developers and 1 Experienced Developer** +1 * 1 // volumes of code produced per per experienced dev +3 * 0.5 // volumes of code produced per per inexperienced dev -1 * 0.2 // bugs per per experienced dev -3 * 0.6 // bugs per per inexperienced dev + 1 * 0.2 // bugs fixed per per experienced dev + 1 * 0.1 // bugs fixed per per inexperienced dev = 1 volume of code produced Even if that math is off, as long as the experienced developer is significantly outnumbered, you're in trouble.
That falls under 'build runners' in my description.
[Sorry](https://www.youtube.com/watch?v=csyL9EC0S0c), [I didn't](https://www.youtube.com/watch?v=T0qAjgQFR4c) [know](https://www.youtube.com/watch?v=U4Bk5rmIpic) [the rules](https://www.youtube.com/watch?v=7-62tRHLcHk). [Still](https://www.youtube.com/watch?v=0zVizaCOhME), [I don't get](https://www.youtube.com/watch?v=aAb7hSCtvGw) [what](https://www.youtube.com/watch?v=4F72VULWFvc) [you try](https://www.youtube.com/watch?v=rKnDgT73v8s) [to imply](https://www.youtube.com/watch?v=f7AU2Ozu8eo).
This is a draft writeup after some things perhaps became clearer to me.
Oh come on. I agree with one of the comments there: since no court is going to enforce a definition of "good" or "evil", that joke has no legal effect. The only reason a few people got pissed is because he's joking about something they put a lot of effort into - which, despite being understandable, is just an emotional response and not a real concern.
OMG! That's awesome. :)
I think you should consider reviewing the Advertising, Self-Promotion, and Spam section of this subs [guidelines.](http://www.reddit.com/r/javascript/wiki/index)
&gt; everything about "this". Before I respond, I think this is probably your strongest point. A lot of new devs get hung up on this. It is however, internally consistent with the language, and a direct byproduct of a deeper understanding of scope in general. However, this is actually quite simple. Depending on who you ask there's literally only **[4](https://speakerdeck.com/getify/new-rules-for-javascript)** or **[5](http://derickbailey.com/email-courses/masteringthis/)** rules to remember. Its a pretty small barrier to competence that most folks simply wish to skip. They shouldn't. once you 'get' it, its almost transparently there and not a problem at all. Rather than complaining, I wish folk would just simply learn it first. Its really not crazy at all. &gt; nonsensical implicit coercions. Again, you see a flaw, I see a feature. I feel like the coercion rules are pretty sensible. **[Your example](http://en.wikipedia.org/wiki/Reductio_ad_absurdum)** Is willfully trying to exploit a misunderstanding of the rules of coersion to make a NON point. Really its easy. - null - underfined - false - +0, -0, NaN - "" Those are false. Everything else is true. Easy. Can you memorize 7 (obvious) things? Most people can. Feel free to link to this post if you get confused in the future. Or make a flash card. Or whatver. Its not hard. You'll get it in a day. You'll get it a lot faster than it takes to memorize the .net framework. &gt; two bottom types (null and undefined) that are distinct from one another Um, this is a **good** thing. One is initialized, one isn't. One is willfully null, one hasn't been assigned. Its more expressive. A *simple* google search clears this up! &gt; syntax errors are exceptions! So what? Don't write syntax errors. They'd break any other type of code also. Use a **[linter](http://jshint.com/)**. I see this as a preference not a 'deep underlying flaw. Actually I"m more annoyed that try/catch creates a lexical scope and isn't a function for reasons of internal consistency. Either you're all in or all out. &gt;What most people would like to think of as "types" are built up imperatively with statements rather than declared statically. This, and the prototypal inheritance model (whether or not it is properly understood and used) are actively hostile to optimizations and static analysis. Soo.. optimization? The fact that a lot of things aren't declared statically? Maybe there is something to this point, but you do realize that **[Java script does have Static types for optimization, right?](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)**. Have you heard of **[ASM js](http://asmjs.org/)?** &gt; Just as in lua, everyone wants to think in terms of modules and classes, but the lack of facilities for this in the language means that they had to reinvent those wheels as a community. reinvent ? I think you meant 'easily implement an already fully understood technique'. I'm still not seeing a point here. If you want classes in Js, that work is done for you. Repeatedly. **[Its also coming formally in ES6](http://javascriptplayground.com/blog/2014/07/introduction-to-es6-classes-tutorial/)**. So what's your point? TBH **[I actually prefer protypes](http://aaditmshah.github.io/why-prototypal-inheritance-matters/)** and modules. They're more powerful. But if you want classes, you can have that to! this is again, a non-point. &gt;Keys have to be strings. This isn't crippling but it's unnecessarily limiting in a way that e.g. lua doesn't suffer from. If keys could be anything, then it's extremely simple to represent sets (without duplicate entries), and I loves me some sets. I think you just added this to make the list seem longer. **[Nontheless](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)**. Its still a non-point. &gt;Lack of Mike Pall :) HOLY SHIT YOU BLEW ME AWAY!!! You know? I thought you were way off base until this point. I mean, all those non points..and then..this?!?! Never mind. You're right. If only this had been your first point! I just wish JavaScript *also* had a smattering of Very Smart People™ working towards solving problems in its respective stack. I guess its just a bunch of slackjawed hipsters, right?..riiight? Sarcasm aside, I respectfully disagree with your points. They are all either categorically *i dont know how this works and i don't like it* (and there are usually very simply mechanisms to learn to surmount that) or.. you simply didn't know that Java-script could already do what you typed, or a matter of *personal preference*. Honestly, you didn't even mention some of the parts of javascript that I, as a Javascript developer do, in fact, consider to be language problems. Like any language it really does have problems. There is some legitimate criticism to be levied. The problem is that many of the folks who constantly complain about Js don't even know those parts of Js that are, indeed honestly nebulous or problematic. For them Js is different than &lt;insert their favorite language here&gt;, ergo.. *automatically wrong*. They're arguing about parts of the language that are actually well understood by developers who work in it daily, and many times even prefer. Classes vs prototypes and modules, for instance. That's a worldview/comfort zone debate, nothing more. I appreciate you listing some points, but..well you didn't list any really solid ones. null being type of object is a deep fundamental problem. Sure. It is literally a bug in Js, for instance. That is a deep flaw. That stuff you typed? Coersion? Prototypes? Lack of &lt;some dev I like&gt; ...No, I think not. But hey, you did at least answer in a way you considered serious. So upvote anyways. You certainly contributed to the discussion. Its okay for us to disagree. You strike me as a learned programmer, so please take my counter points into consideration. 
Here I made this into a bookmarklet for you. javascript:(function(){(function(){var minutes=prompt("How many minutes until your alert goes off?");var message=prompt("What would you like your alert to say?","Alert!");if(minutes!=null){setTimeout(function(){alert(message?message:'Alert!');},1000*60*parseFloat(minutes));}})();})(); Here is the code so its more readable: (function(){ var minutes = prompt("How many minutes until your alert goes off?"); var message = prompt("What would you like your alert to say?", "Alert!"); if (minutes != null) { setTimeout(function() { alert(message ? message : 'Alert!'); }, 1000 * 60 * parseFloat(minutes)); } })(); Just copy and paste bookmarklet code into a bookmark's url on your toolbar and click it to use it whenever.
LOL. 
Thanks still new to reddit.
We are using Flux! I wouldn't say it makes testing harder--the store itself tends to be well encapsulated and more straightforward to test than UI components.
Oh shit, had no idea you could do that. Thank you!
This post was reported, and the following link provided: http://www.reddit.com/r/Bitcoin/comments/2vqhsr/dont_give_ukencode_any_of_your_money/ 
A pretty cool idea. Impossible to watch with this guy talking about random stuff constantly. I'd like to watch this with just voice commentary and much more focussed on the code.
We spent many months trying to hire one experienced developer that was willing to work for what we could offer, and got nothing. We just don't have the money to compete with tech companies. So this is what we have.
I'm not gonna disagree with you. Everything I've learned and applied I've either taught myself, or via the many textbooks i've gone through, or the meetups i've attended. There is something to be said in finding someone with self motivation. In reality though, we spend many many months interviewing people. We're not a tech company, and we're not in a industry that pays very much (we as devs make more than most, but it's nothing compared to what tech companies here offer). I interviewed candidates with masters degrees in computer science who couldn't explain scope. In reality, programming is hard. The process of hiring them was so painful and slow, I don't think any of us want to relive that. And they are improving, but not everyone is gonna go home after work and crunch through a textbook (or want to, nor should they feel they have to).
I empathize with everything* you said. The real world is full of constraints, and we have to solve for the best possible solution, not the best solution possible. Good luck! * For sufficiently imprecise values of “everything.” If a company makes a job offer with duties X, Y, and Z, and a candidate accepts that job offer, and they both know that the candidate is not competent at executing X, Y, and Z, I feel that there is an obligation on *both* sides to get the candidate up to speed. So yes, I think the company should provide training, paid time to study, and/or mentoring. *And* I feel the candidate should go home and study on top of whatever the company is providing.
My problem isn't that they don't know jQuery, it's that jQuery is all they know.
I was just thinking that Crockford's speech is one of the most famous programming lectures I've seen... and I was wondering what are its "peers", if you will.
These people are already working and contributing code with us, and have actually improved quite a bit since we first hired them, but they still require a lot of hand holding. They're at the level where they use jQuery for everything because they don't know any better, basically. 
Fair enough :)
Kenman said it was permissible to post DevWars on this subreddit on a special event, and today was a very special one :)
The contrived todo list application might be a good place to start with getting the hang of application state and asynchronous AJAX calls. You could hook it up to a PHP backend. Once you achieve this with vanilla JS &amp; jQuery you may want to look into an MV* framework like Backbone, Angular, Knockout or React to get a better idea of how an application works using JavaScript. There are examples of the todo list for all these major frameworks at http://todomvc.com/ I think the main things you need to clinch are the concepts of prototypical inheritance, how to handle asynchronous AJAX calls using callbacks and promises, and the power of functions and closures. There was an article I read recently with a timeline of how beginners learn JavaScript, and it's always a steady progression from just using it with jQuery and event handling all the way up to full single page applications, so just keep working at it and learning the basics and you will get there. 
[jspm](https://github.com/jspm/jspm-cli/wiki/Getting-Started) bundle command. jspm currently uses traceur by default, but has an option to use 6to5. 
Thanks. I've not yet got my head around Browserify - it's on my list.
I meant 6to5 does the inline polyfills, not systemjs. I currently need to include systemjs separately in my dev build. I agree there is not much out there for the newcomer. The docs make assumptions of a level of knowledge or familiarity that is slightly above my current position. So many new concepts to wrap my head around! If I come up with anything blog-worthy I'll make a note of it to help others who are wrestling with this stuff.
As an ex-flash developer who's still a little bitter, I can assure you it was Steve Jobs that won, and he did it four years ago.
Poor Lerdorf gets only 830 views: https://www.youtube.com/watch?v=B_IFw9COH5Q
Shumway doesn't support flex. 
Be bitter towards the developers at Adobe who couldn't see the writing on the wall, not the person who showed them the writing was there.
ex-flash dev as well...eh I was bitter for a year and now I don't miss the language. Looking back Steve was right.
Flash is terrible.
&gt; Your example is a minor refinement of the same idea which eliminates the need to write toStr.call(obj) and instead allows writing toStr(obj) as a convenience. This is the part I don't understand. I have used both .bind and .call but I just don't see how they are put together here. It's not like Function.prototype is a function that .call can operate on. 
It is a nice shortcut that it is applicable to many things: var toArray = Function.prototype.call.bind(Array.prototype.slice) // or simply var toArray = Array.call.bind([].slice) // or more general var fn = Function.bind.bind(Function.call) var toArray = fn([].slice) console.log(toArray({0:1,1:2,2:3,length:3})) // [1,2,3] // Now it is easy to compose functions var toUpper = fn(''.toUpperCase) var join = ncurry(2, flip(fn([].join))) var reverseArray = fn([].reverse) var reverseString = compose(join(''), reverseArray, toArray) console.log(compose(toUpper, reverseString)('hello')) // OLLEH That's a pretty contrived example as you could simply do: var reverseString = function(x){return x.split('').reverse().join('')} var toUpper = function(x){return x.toUpperCase()} console.log(toUpper(reverseString('hello')) // OLLEH But it demonstrates how it can be useful for composition and re-usability in functional programming.
&gt; It's not like Function.prototype is a function that .call can operate on. `Function.prototype.call` is a function. It is what is called when you write `someFunction.call(arg)`. That expression means "call `Function.prototype.call` with "this" set to `someFunction` and a single argument `arg`." This is not specific to this scenario, it's how all prototypes work. In the case of `toStr.call(obj)` we want to create a bound function that has its "this" permanently set to `toStr` so that we don't have to keep using `.call()`. And so we use `foo.bind(toStr)`, where `foo` is the function being called, which is `Function.prototype.call`. The result is callable as a free-function with just the argument, because "this" has been fixed.
Yes, that is what `Function.prototype.call` does eventually, but that's a secondary effect. You call it, and then it makes another call on your behalf. Ignore that second call, that's irrelevant to the statement that I made. `call` is still a normal function like any other. It would have been non-controversial if I had written: &gt; The expression `someFunction.floozle(arg)` means "call `Function.prototype.floozle` with "this" set to `someFunction` and a single argument `arg` `call` is not special or privileged in any way. If the above is true for `floozle` it's also true for `call`, or any other identifier. `Function.prototype.call` a function that makes another function call, but it itself is a function too. 
The goal is to have a function that when called with a single argument `arg`, calls `Object.prototype.toString` with "this" set to `arg` and returns the result. Like so: function toStr(arg) { return Object.prototype.toString.call(arg); } That works fine, and you could stop there. However, it wasn't necessary to write this function — it already exists, and its name is `Function.prototype.call`. The expression `Object.prototype.toString.call(arg)` means "call `Function.prototype.call` with "this" set to `Object.prototype.toString`, and pass the argument `arg`." If we want to fix the "this" of some function, we can use `.bind()` on that function. "That function" is `Function.prototype.call`. Therefore `Function.prototype.call.bind(Object.prototype.toString)` returns a new function that when called, acts as if `Function.prototype.call` was called with "this" set to `Object.prototype.toString`, and any arguments present are passed through. That's exactly what the first version did. (Well, technically the first version only passed through the first argument, but that's not relevant if we only ever expect to call this with a single argument.) Edit: in response to your edit: &gt; I have no idea where you're getting this, "toStr.call(obj) ". That's from the example on MDN that I linked to above. In that example `toStr` was simply equal to `Object.prototype.toString`, so it was necessary to call it as `toStr.call(arg)` instead of like `toStr(arg)` as in the subject of your post, which uses `.bind()` to get rid of the need to use `.call()`.
Micro$oft amirite guyz? /s
One can use something like [sinopia](https://github.com/rlidwka/sinopia), and namespace your modules. Then you don't have to publish to public npm, and get to use semver all the same. You can also, if you insist on not doing that, target specific branches or tags on github. Sure, that's not as good as straight up semver - but it works.
npm can do client side also.
2006's AS3 still has better tooling than today's JavaScript. Even 3rd party IDEs like Flash Develop worked so much better than *anything* we have for JavaScript today.
Those 3 inexperienced developers will become experienced over time. Investing in them is a smart idea. Not everyone is born an experienced engineer.
&gt;I think understanding scoping, functions and context is essential to a dedicated JavaScript developer. Not sure if you can fit it into 1 hour and what will be left in their heads afterwards. I think this is spot on. I wasn't productive at writing JavaScript until I really understood these concepts.
&gt; what the first version did What are you talking about here? What is the first version?
Hi /u/_ayasin, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `medium.com/@ayasin`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [medium.com](/search?q=%28and+site%3A%27medium.com%27+author%3A%27_ayasin%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|12|86%
I dont think this specifically mentions the term OLOO but this article is pretty much the basis of it. Just make objects and utilize object.create(). No need for classes and avoid the 'new' keyword whenever you can. http://davidwalsh.name/javascript-objects-deconstruction
That's not the point. The developer is just one person who has to interact with Flash. The 99.9% of people who interact with Flash are users, and Flash sucks for users.
I really don't think it was. Flex was open sourced / abandoned at AdobeMAX 2010, the same time as hardware 3d access was added to Flash. Unreal engine was ported over. There was direct access to the 3d shaders. Flash suddenly had the potential of being a cross platform game engine. And not just for web, but desktop, and the same AIR apps could be exported to Android, iOS, and more. AS3 had a plethora of robust, mature MVC libraries, dependency injection libraries, etc. and thanks to AS3 offering real classes, modules, etc. it was even 4-5 years ago far beyond what JS has (natively) even today. It was killed with the open source Flex announcement just because of public opinion, coming so soon after Flash Mobile being dropped. I had long term clients that didn't understand anything other than that Adobe had announced they were abandoning something I did, and that flash was dead on mobile. It wasn't, only in-browser flash - what I did was Air deployment which was still fine, but that didn't matter to my clients. They just sheeple-like switched over to JS, in unison, and expected the same level of product I was making in Flash/Flex, to IE 6. I love Angular, I love Sass, I love JS. But we're still a LONG way out from the kind of mature libraries, tooling, hardware level access, total cross browser compatibility, mobile and desktop export, 3d engine access, and more that we enjoyed in Flash/Flex years and years ago.
Might want to add node_modules/ and dist/ to your .gitignore, checking in dependencies to a boilerplate is a bad look
Flash still powers far more powerful animation for games than JS does many years later. Its not that I am a Flash lover (I'm not) but the plethora of Flash games and the near complete absence of JS games speaks for itself.
Experienced programmers new to JavaScript frequently fail to realize that you don't need prototypes or classes to achieve inheritance in this language. Secondly, classes don't exist in JavaScript. In ES6 the class keyword will be available for the first time, but it still does not produce real classes. JavaScript has two scope schemes. The primary is called lexical scope. Before ES6 lexical scope is only available when functions are nested, which produces a scope chain. The secondary scope scheme are prototypes which use a OOP friendly prototype chain. Prototypes are not resolved until the primary scope chain is first exhausted. That is everything there is to know about how scope works. Don't make the mistake many other newbs make try to unnecessarily fuck this up with discussions of constructors, *this*, and poly-instantiation.
Video. HTML5 Video implementations on the desktop have been shitty for a long time.
I started working on something similar that lets you test your app on node and on phantom with just an `npm test` https://github.com/kolodny/react-mocha-starter
Like WebStorm if you use it for writing TypeScript or Dart.
... why ?
Might want to change the "th" to an array ['st', 'nd', 'rd', 'th'] - and why use 2 loops? var areas = [], i = 0, curNum = 0, numLen = myArray.length, output = '', postfixes = ['st', 'nd', 'rd', 'th'], postFix = '', filter = /(\{[\d]\})/, template = "Area of the {0} number in your array is: {0}"; for( i = 0; i &lt; numLen; i++) { curNum = myArray[i]; areas[i] = Math.PI * curNum * curNum; postFix = postfixes.length ? postfixes.shift() : postFix; output +=template.replace(filter, ( i + 1 ) + postFix).replace(filter, areas[i]); } document.aForm.area.value = output; 
Mobile interface, I would assume (big assumption, without knowing the product or the user base).
What does Silverlight do that JS/HTML5 cannot?
sounds like you're in an "interesting" position, best of luck !
Ugh, JS is a friggin mess
Huh?
The browser is like the only way these companies that distrust one another can work together. Adobe could say that they hate Apple because Apple didn't allow the plugin in mobile devices. Microsoft could say that they hate Google because Google used Linux for Android and gave it almost for free for other companies to build on it. Apple could say that they hate Google for forking WebKit by creating Blink. :-) And yet in the browser they all trust. :-) How does mobile affect your job as a sys admin? Does it matter that mobile phones could get hacked and so on?
Yo, if you know flash, move into final cut pro
npm is for anything.
I remember the early Android phones, for a few manufacturers the killer feature to top the iPhone was the ability to run Flash. 
Sadly, there's not a single video format that all browsers support. Apple wats to push h.264 and kill everything open, Mozilla wants to push open formats and kill everything proprietary, Google basically supports everything, and IE is being IE.
Not as far as I can find, it still requires a flash/silverlight shim.
What's the error? Do you have jqeury on list.php?
Perhaps paste the full generated pages of list.php and index.php somewhere (tiny paste e.g.) for us to look at? I don't directly see anything off about the snippets you've posted.
Strangely in my experience CSS3 performs better than flash player 
New games are still coming out pretty regularly. * http://friv.com/ * http://armorgames.com/
wtf?
They will hopefully grow into being fully experienced developers over time, but that doesn't always work out. My real concern is with the ratio. Three new developers is a lot to handle, especially if they're so green that they don't know heads from tails in Javascript. If they're all not progressing well, it could bog down the entire process. And as [homoiconic addressed](http://www.reddit.com/r/javascript/comments/2vuz0z/so_you_have_an_hour_to_cover_javascript/colrjq2), having these developers become experienced means having to pay them as much as an experienced developer anyways, making an investment in them only mildly gainful.
Hilarious to see the shortlist, * Silver Bullet (pretty sure this a popular sex toy) * Magic Bullet (pretty sure this is a blender) * XtoY (also sounds like a sex toy if you if forget the caps) * Obamacare.js (missed opportunity) Babel seems like an OK name then but does feel arbitrary. I'm definitely going to mix it up with Babylon.js in conversation some time. 
You are right and the article is wrong. 
Babel isn't arbitrary. The Tower of Babel is where the Bible claims languages came from. The movie Babel plays on this as well considering it's a movie about language gaps. 
Nope, that's supported in neither Chromium nor IE &lt;=8.
For a long time, the only thing that ever crashed on my MacBook was...Flash. The only thing that ever made the fan kick in was...Flash. The stupidest upgrade process for any software on the thing was...oh, I will let you guess. Maybe it was just awesome on a PC, but I suspect not. 
Surprised to see the words "develop" and "Silverlight" still used together.
The crappy thing about BigCommerce platform is that these attribute rule sets are set on the admin backend and are not at all available to developers, not even through API via ruby or python when making apps for BC. Total crap. So, with those restrictions/limitations, plus my own, I had started to do this via a really hacky method -- basically since the only way I could figure to change the URL of the image to some color is by clicking the box [even changing classes as they would have upon clicking them didn't work, so I had to use click() ] and then I would have JS record the URL before clicking the next box -- (needless to say, it was crap and did not work): var colorSpan = $(".name:contains('Color')"); console.log(colorSpan); var colorSwatchWrapper = colorSpan.closest('.productAttributeList'); console.log(colorSwatchWrapper); var colorBoxesList = colorSpan.parents().eq(2).find('.productAttributeValue'); console.log(colorBoxesList); var colorBoxes = colorBoxesList.find('li'); console.log(colorBoxes); var prodColor = colorBoxes.find('.name').text(); console.log(prodColor); var colorProdPgBtn = colorBoxes.find('label') console.log(colorProdPgBtn); var imgContainer = $('.ProductThumbImage a'); console.log(imgContainer); var selectedColorImgUrl = imgContainer.attr('href'); console.log(selectedColorImgUrl); colorProdPgBtn.eq(0).click(); var selectedColorImgUrl = imgContainer.attr('href'); console.log(selectedColorImgUrl); colorProdPgBtn.eq(1).click(); var selectedColorImgUrl = imgContainer.attr('href'); console.log(selectedColorImgUrl); colorProdPgBtn.eq(2).click(); var selectedColorImgUrl = imgContainer.attr('href'); console.log(selectedColorImgUrl); colorProdPgBtn.eq(3).click(); var selectedColorImgUrl = imgContainer.attr('href'); console.log(selectedColorImgUrl); var $productPageProcessing = $(productPage).find("span:contains('Color')").parents().eq(2).find('.productAttributeValue li'); var colorBtnSrc = {}; var clickTheSwatch = $productPageProcessing.each(function() { var r = $.Deferred(); var listings = $(this); prodColor = $(this).find('.name').text(); console.log(prodColor); $(this).find('label').click(); return r; }); var storeImgSrc = function() { colorBtnSrc[prodColor] = $(this).parents().find('.ProductThumbImage a').attr('href'); console.log(colorBtnSrc[prodColor]); }; console.log(colorBtnSrc[prodColor]); clickTheSwatch().done(storeImgSrc); 
Agreed! Arbitrary name changes wooo. Not like that causes confusion or anything...
Yeah, having the name 6to5 made me feel really uncomfortable about the projects future and it was already completely wrong since 6to5 already supported ES7 and JSX. I'd constantly get people surprised that 6to5 supported JSX out of the box and people would tell me what was and wasn't in the project scope because the name 6to5 implied only ES6.
good descriptive post title you have there.
Just because a thread was opened and discussed doesn't make it any less arbitrary.
Blog post over here: http://www.reddit.com/r/javascript/comments/2vziq9/6to5_was_not_born_to_die_lets_make_a_better/
also this: https://github.com/kriasoft/react-starter-kit 
okay, so babel fixes that, I understand, thx for the clarification
I propose AsstoMouth. 
this is also possible with npm, of course...
Still not working. This is my console output: http://i.imgur.com/5oLODhg.png
&gt; - Silver Bullet (pretty sure this a popular sex toy) &gt; - Magic Bullet (pretty sure this is a blender) I was the one that suggested these. I knew what the Magic Bullet is known for when I suggested it. But I've never known a sex toy called "Silver Bullet"; and Google doesn't bring up any results for me O_o 
In the Emacs community talking about babel will probably make people think of org-mode.
Obama Care. 
Already a language transpiler called babelfish. Also yanked the name from the movie/book.
I know what "Obama Care" is, but I don't see how that remotely sounds like a reasonable suggestion for 6to5's new name, so I assume there's some kind of joke in there.
1: I just opened the Developer tools in my browser. Ran a profile to find out where the action took place, then used the "Network" tab to pull out the XHR request which I gave you :) I have a been working on web and JS for over 10 years, so that is probably why it took only a few secs. 2: I saw that you can send an argument to return the correct color of image. attribute[96]:10 // Blue attribute[96]:11 // Green so something like: var args = {action:"add", w: "getProductAttributeDetails", product_id:166, attribute: []}; args.attribute[96] = 10; // Blue in this case (URL you gave) You'd have to figure out what how to get these somehow $.post("/remote.php", args, function(response) { console.log(response.details.image); });
Yeah you need to run a webserver to serve your page rather than just opening it up in the browser. The short of it, browser security model says no no to opening files directly on your hard drive. Solution: set up a local webserver which runs on your laptop/pc, there are a butt load of ways to do it. Still baffled why there isn't a true blue non-complicated go-to solution for beginners - I want to say "python -m SimpleHTTPServer" but then I'd have to explain it in detail. Google is your friend!
Logo reminds me of [this](http://logodatabases.com/street-fighter-logo.html/street-fighter-logo)
&gt; having these developers become experienced means having to pay them as much as an experienced developer anyways, making an investment in them only mildly gainful. That is not how it works. They'd now be experienced developers with the ***domain expertise*** that other experienced developers don't have. At most companies you can't just hire an experienced dev and have them be outputting at 100% every day. Inexperienced developers aren't coming to your company with the baggage of all the other companies they worked at, this enables you to teach them *"the right way"* your way. Young developers are inexperienced but malleable, you can work with them to get exactly the developer you want.
The blog post was not yet posted when I submitted this, and the new site was still redirecting to the old one.
**Update:** Thanks for all the feedback! Browserify, jspm, Webpack - all things I have heard of or looked into to some degree - but not yet used - and based on what you say here I need to check them out further. Anyway, I tried out an idea I came up with, which is to concatenate all my modules into a single file, and then run that file through 6to5 with the [module system set to `ignore`](https://babeljs.io/docs/usage/modules/#ignore) - which effectively strips out all references to "export", "import" and so on. To my great surprise this worked right away! At least in the case of my simple setup, this might be all I was looking for. For those interested, here is a rough outline of what I've got: * A series of ES6 classes, each in its own js file, each as its own module * A main js file that consumes the modules (nothing complex going on in terms of circular dependencies etc.) * A gulp task that looks like this: // gulpfile.js gulp.task('dist', function() { return gulp.src([ './src/scripts/pathQueue.js', './src/scripts/pathFinder.js', './src/scripts/pathRenderer.js', './src/scripts/app.js' ]) .pipe(concat('app.js')) .pipe(to5({ modules: 'ignore' })) .pipe(gulp.dest('./dist')); }); This gives me my single, stand-alone js file, which does not rely on systemjs (since the module system is stripped out and everything is in one file), and any needed polyfill functions have been placed by 6to5 (ahem, Babel), *once only* at the top of the file. From there I can minify of course, so it seems to be just what I needed. Dunno how this will scale to "serious" projects - perhaps I will run into limitations that would indicate the use of some of the tools suggested here. One problem I can see is that I probably have to manually curate the file order in the gulp task based on the dependency graph. Not a problem right now, but could potentially become unmanageable. For now I'm gonna go with this and see how I get on.
Don't forget that Babelfish was also the most popular online translator for (human) languages before Google translate was a thing.
This was awesome. Thanks for posting. Very interesting to see what he uses and doesn't use any more. May try to apply some to my code. I gotta agree with the for loops. I hate doing for loops in JS for some reason. Feels dirty.
Appears as though the mistake was rectified. Mistakes happen, nobody is perfect. The local reference to the element not being set to null was the problem, removing the local reference unties any reference to the element and it is removed from the Weakmap.
Good point. However, I wish they came with a better name. Babel sounds so cliche. 
x86 CPUs have only operation "is 0" , so every compare with other number results in 2 operations instead of 1. Anyway, hitting branch predictor is much more important than this neglible cost. 
Unrolling loops can prevent function from being inlined (V8 exposes hard limit of 600 characters function). Caching properties can result in unnecessary memory allocations (and allocating memory isn't cheap, one malloc results in thousands of CPU operations). 
Also, you could do it with the other approach you mentioned. Like making a script that clicks buttons for you... but I'm not sure that will be very pretty (since you basically have to hack with timeouts etc to make triggering occur properly)
Personally, when I encounter Flash on a site, I go "pphhhhh, what is this, 2003?"
6kb is a lot of JS to style a checkbox/radio 
It's a way to "demethodize" a function. Take what used to be a function attached to an object that works with "this", and convert it to a function that takes "this" as its first argument. Useful when passing functions to higher order functions. var strings = someArray.map(toStr) Hard mode: var demethodize = Function.prototype.bind.bind(Function.prototype.call);
I was curious, so I wrote [this](https://gist.github.com/aholmes/dc706726810d4671bb78) "benchmark." On my computer, over multiple runs, it doesn't appear to make *any* difference regardless of how the check is performed. Granted, I don't have control over exactly the instructions executed with C. I also tried to avoid register caching with the use of `volatile`, but I can't be sure values aren't still cached in the CPU or otherwise. Anyway, with technologies like pipelining and superscalar CPU architectures, is there actually a cost to comparing two numbers rather than checking if a single number is 0? Regardless, there's no chance that any possible performance gain from this will "bubble up" to JavaScript.
I can't find the original article I read, so I'll attempt to summarize from memory using the x86 instructions set. http://en.wikipedia.org/wiki/X86_instruction_listings The specific instructions are JCXZ, JECXZ or JRCXZ, all of which perform a jump based on if their respective registers contain 0. To use this, the program must copy the iterator value into that register. Each instruction is extremely fast because it only checks a specific register and only has to confirm that all the bits in the register are off. x86 does provide instructions for performing a jump based on if one register is larger than another (JA, JAE, JB, JBE, JL, etc). To make use of these, you must copy both values into registers before performing the jump condition (3 operations vs 2). The instructions themselves aren't as speedy, since they can be used on any register, have to compare each bit, and behave differently based on the signing of the values. Again, we're talking very very very tiny performance differences that only show up over millions of iterations. The other factor is that v8 is able to identify and optimise a reverse loop really easily.
No, I'm not going to cite and reference everything that I say from personal knowledge and experience. Do your own research if you don't believe me.
&gt; That means that static properties are inherited: &gt; class Foo { static classMethod() { return 'hello'; } } class Bar extends Foo { } Bar.classMethod(); // 'hello' Probably the only part of the article I found a bit strange... Is `Bar` able to provide it's own static version of `classMethod`? Can that statically call `super`?
&gt; This is Obamacare for javascript transpilers.
FWIW, I can't stand the new name. But, I'm a huge fan of the project and believer in their philosophy and mission... So, at the end of the day, I don't care what it's called. Took me 3-minutes to migrate/upgrade from 6to5 to babel. 
This kid is getting a little full of himself
&gt; var fn = Function.bind.bind(Function.call) I'd honestly never though of doing that and it looks awesome. However I just did some benchmarking and it turns out to me MUCH MUCH slower to avoid using #call directly. http://jsperf.com/binding-function-call
Oh good, I was worried that the name would impose some sort of scope on the project.
A neat concept, but - unless I'm missing something - it doesn't seem to offer any significant advantage over the "traditional" minify+gzip. 
Unrolling loops, caching array length, etc is something that the JIT can sometimes do better than you. More low level info [here](http://mrale.ph/blog/2014/12/24/array-length-caching.html).
Based on the title I was thinking this allowed you to hide scripts in arbitrary images via steganography. Which got me thinking that something like the ol' cat command trick that you can run on a jpg/gif/png and a zip or RAR archive would be actually useful in the web world. For the uninitiated, you can create a zip or RAR archive containing any old files, grab any image, and run cat img.png archive.rar output.png The resulting output.png will look and behave like an ordinary image, unless you right click and hit 'Open archive' to reveal the hidden rar. Something similar with a JS file and PNG sprite would be fairly useful. Theoretically you could embed all of your JS and CSS scripts into a single PNG sprite image, giving you only one single asset the client would have to download. You would need to embed the read script in your main HTML page, but if it is small enough.. This is all a decidedly inelegant solution when compared to HTTP/2. But, it's still an interesting novelty. Edit: Code Formatting.
Yeah, simple and still kind of hints at it's purpose. What about something like *stairs.js* 
Style guides are also considered harmful in some aspects.
Thanks alot! That actually did it. Thanks for your time man!
Very true, and if your server + client supports gzip the extreme overhead of that method is severely reduced. It's also probably going to be a lot more performant than some hackneyed solution like the above. But that is only good if you want one file. If you want a single shared asset for all of your pages, you'd need to do something like the above.
the point, you missed it
I seriously thought this was one of those joke repos. It is not.
Inline: &lt;img src="country.jpg" onmouseover="this.src='leader.jpg'" onmouseout="this.src='country.jpg'" /&gt; Or as an embedded function: &lt;script&gt; function img01(){ document.getElementById('targetImg').src='country.jpg' } function img02(){ document.getElementById('targetImg').src='leader.jpg' } &lt;/script&gt; &lt;img id="targetImg" src="country.jpg" onmouseover="img02()" onmouseout="img01()" /&gt;
You *could* use this as a CORS mechanism - like JSONP.
Removed since the link isn't loading, feel free to resubmit when it's back online.
&gt; and why use 2 loops? 2 reasons: 1. compatibility with the intended functionality of the question 2. showing you can separate the calculation and the generation of the output thanks to the use of the array (because actually, with one loop, you can even skip the use of the array) 
That can be done with pure CSS. Do you have to use javascript? 
Can someone explain what wasn't enough with prototypal inheritence?
The inheritance system has not changed, the `class` sugar just makes it less of a pain to write it (and adds a few features, static methods were not inheritable in the constructor/prototype dichotomy). It still generates functions and prototypes under the hood.
FullStack London - Call for Papers June 25th - 27th 2015 &gt;FullStack is Europe's premier developer conference for those interested in JavaScript, NodeJS, IoT, and other full stack technologies. With over 300 developers expected, we're looking for talks and sessions that will educate and inspire London's growing tech community. Following the tremendous response to our 'Call For Thoughts', and with the help from Cian O'Maidin (NearForm), Rob Moran (ARM), Robert Rees (Guardian), Sarah Clark (Google) and members of our JavaScript, Node and Angular community, we have been able to identify some key themes for this year's conference. Themes - ES6 and io.js - App Architectures for Performance, Maintainability, etc. - Software rendering - Virtual DOM (e.g. React) - NodeJS and associated tech - Implementation stories and soft skills. - Dev Ops / NoOps - Microservices - AngularJS 2.0 and related topics - Hardware - Internet of Things
funniest, yet truthiest comment i've seen today. you're right. modularity nazis fighting over bloat vs non-bloat... while here we are, releasing software, earning revenue... module bundlers really are just supposed to work out of the box.. now, this analogy should not scale up to big frameworks that do everything vs small libraries because yeah, to those that might argue, it's not related.. ok?
And it is, in fact, a popular i18n library in Python: http://babel.pocoo.org/ 
That regex in the example, isn't that missing anchors? Because "+A9*".match(/[a-zA-Z0-9]{2,30}/) will match. So will a string of longer than 30 characters. 
I dunno, "McFly" is pretty appropriate.
Well, I really like it!
thanks for the perspective Cixis. So it sounds like you have found instanceof useful in your stuff - I am curious what the use cases were. good point about the Function's prototype - in this case, "typeof a" could also be used independent of any prototype stuff to see if it's a function, I believe. 
&gt;That's all what you need ...if you wanna target all nodes by tag name only.
I was initially going to display the waves in 3D using three.js, but decided to go with SVG to start with, to get something running quicker. After I work on making the integrator more stable, I might try representing it in 3D - that shouldn't be too difficult, as three.js is nice to work with! It might even be possible to change to a 3D grid, but the simulation is quite CPU intensive as it is.
Keeping the same hidden class does not decrease garbage collector pressure.
It uses querySelectorAll, so you have the full power of CSS3 selectors... at least in all browsers that support them (screw IE8).
i copied your source over to jsfiddle to play with it - http://jsfiddle.net/vdnwLmxg/5/
i hate that IE8. i hope it will gonna end in this year like ie6 :( http://www.w3schools.com/browsers/browsers_explorer.asp Edit: the examples are working for me
OK. You should put that as an example. 
A nice article, but it needs more examples. Also, most of us are not in a position to decide which features to ditch in order to have cleaner code.
[Doesn't work](http://trevorsg.com/stuff/vds/index.html). `Uncaught ReferenceError: $ is not defined`
up! i noticed now. my bad sorry i couldnt understand what you mean second example. sorry again i edited my repository
&gt;Edit: btw querySelectorAll already support partial IE8 like Array.forEach. So i think there no mistake i think I know, but `Array.forEach` does not have IE8 support. In other words, you should choose to either support IE8 (in which case you need an alternative for your `each` method, or not support IE8 (in which case you should remove the fallback to using `window.attachEvent`.
that is a very good article.
so should i remove the c.attachEvent?
This violates the very simple license specified in the COPYING file.
Can you make your question more specific? Then it’s possible to answer it.
Usually browser JavaScript doesn't connect directly to a database software like MySQL or MongoDB. This is because of security, validating the data and hiding private information. Communication is in most cases done through a special API by sending requests with `XMLHttpRequest`. The API is running on a server with the database and it can be written in any server-side language. Popular options are JavaScript (NodeJS), PHP, Ruby and Python. Recently a popular way of defining the API is called REST. Beside GET, it uses other HTTP methods like PUT, POST and DELETE to modify resources in the database. You'll find plenty of information elsewhere.
Intuitively, this makes a lot of sense to me. There are others in my organization that feel differently and always push for huge configurable tables. Do you have any sources to support this claim? It would go miles to help support my case for some redesign ideas I have. Thanks in advance!
&gt; Treat your code like poetry Yeah. Because IT projects always have so much time from beginning to end.
to play with it! ;) http://jsfiddle.net/vdnwLmxg/9/
1. Hmm, I'm pretty sure const is part of the ES6 specs and not the ES5 spec. So even if runtimes that aren't fully ES6 compliant implement const, I think it's still fair to call it ES6. 2. I realize that this styleguide is just for Mozilla's project, but nevertheless I think it's an interesting guideline that could be applied to any ES6 project: is it better just to use const everywhere in our ES6 code? For a long time when I read about ES6, I thought I would just end up switching to let when its day arrived. But now that I've started thinking about, maybe const is better. 
Mozilla has had partial support for const for a while now... Anyway, I just wanted to point out the correct context so everybody was aware, not to mean some parts couldn't be applied elsewhere.
WebGL is coming soon, after I polish up the maths behind it all. I'm currently working on letting you add your own oscillators: stay tuned!
Cost, quality, time. Pick two.
Have you submitted a patch to twitter's github?
While I know 'jquery' is a bad word amongst a lot of people, there are jquery alternatives that you should consider before reinventing that wheel. [Zepto.js](http://zeptojs.com/) comes to mind.
The problem with a roll-your-own solution is that everyone does roll their own solution. As a result, tools have no clue what's going on. Your IDE/editor doesn't know that this this is supposed to be a class-like thing and neither does a doc generator. It also means that everything is incompatible by default. Additionally, having a dozen ways to do classes/inheritance is a big waste of time. You have to do research and evaluate your options. Having a standard way to do this is a big step forward.
I tried the jqeury method and it works great. Most browsers I think stagnate hidden pages which can result in undesired effects, so having some control over this yourself could come in handy.
If that's your criteria, then [Document.querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/Document.querySelectorAll) is everything you've ever wanted. var $ = document.querySelectorAll.bind(document); 
I know. But *the whole document* is about Jetpack. It is not *necessarily* ES6 related in whole. Also, `let` is available in Mozilla's runtime since JS1.7.
&gt; Avoid use of error prone `undefined` (which can be redefined) and prefer `void(0)` instead. `NaN`, `Infinity`, and `undefined` are read-only since ES5. That rule is complete nonsense if you target ES5+ VMs.
or "Clean Code" by Robert Martin
That's a very helpful explanation, thank you! As you said, since I'm not dealing with querying selectors in the millions, the most elegant solution might be this: var $ = document.querySelectorAll.bind(document); var $$ = document.querySelector.bind(document); That solves my problem of never being able to remember the vanilla method names, and allows me to easily scope the selector to one element without having to explicitly specify an index within the node array (if needed).
Yes! I'd say it's nonsense in any case. Making code convoluted due to theoretical fringe cases is silly.
I am interested to know what skills you were hiring for with the intent to train up on JS. I would love to have an employment opportunity like that. I haven't built anything too significant (mostly landing pages and email templates for my old job), but I understand HTML and CSS pretty well. I am trying to break into an entry level web dev/design job and this sounds like gold to me. I read **HTML and CSS** by Jon Duckett (http://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189/) and bought his JS/JQuery book and I am going through that on my own. I wish I had done CS instead of music performance in college... sigh. Who knew you'd need money in real life. :)
&gt; Do not include a single line of code (especially from libraries) that you are not 100% sure you will use and that it is the simplest, most straightforward solution available. _Especially_ from libraries? So it's bad if a waste my own time writing unneeded lines of code but even worse if I waste negligible amount of KBs with libraries? Oh and by the way, I don't think any real project can throw 80% of their features away. At least all the software I've worked on has been with time as a limiting factor so the features that actually do get developed are those that customers really demand. Pretty ridiculous article in my humble opinion.
And why would you do that? It's meant to guard against external maliciousness. You don't need a bulletproof vest if you're the only one with a gun.
Luckily, you don't have to download the GitHub repository. I uploaded it to a GitHub Page [which is here](http://usn.pw/wavulator/wavulator.html), so you can try it in your browser. It's written entirely in HTML5 and JavaScript, so it will run in any modern browser - I'm using Firefox 37.0a2, but any should do. If you just want to look around the code used to write the simulator, you'll see the list of files in the GitHub repository I linked to in the post. The HTML files contain both HTML and some JavaScript code, and the folder called `js` contains just the JavaScript behind the logic of the simulator. Hope this helps, feel free to ask any questions.
If i wanted to use the code to open in a web browser... how is that done?
I'm not quite sure what you're asking. Do you want to edit the code while it's running? If you're in Chrome or Firefox, press F12 and go to the Debugger tab, and you can usually step around the code and place breakpoints, so long as it's paused.
I want to run something i wrote but i dont know how.
Im doing it on khan academy, so i see what is happening as i change code. I want to know how to view it without using khan academy
doesn't work in IE11
No surprise there; I think that's the SVG support (or lack thereof) rather than the JS itself, I'll do some testing later on.
But how would i open it without jsfiddle?
That might be a plausible answer: http://stackoverflow.com/questions/3520688/javascript-loop-performance-why-is-to-decrement-the-iterator-toward-0-faster-t
I've made the recommendation to a few developers in Node-land to use `const` when importing modules to avoid accidentally paving over them in the future. This stemmed from my constant ;-) desire to use a variable named `path` overwriting the actual `path` object. So basically: const path = require('path'); instead of: var path = require('path');
The first bit you wrote, its supposed to show a number, right? I can get the button but not the number
That's pretty great, I was wondering whether it would work in a similar way for an options object. And the required keyword would be great, I wonder if they have that kind of functionality in TypeScript or AtScript?
Colin Wheildon is an oft referenced author in data presentation studies and books. Most of the publications focus on organizing copy for greatest retention, but can be translated well to general data.
While learning Swift I started to appreciate using immutable types as often as possible because it was always easier to catch when I clobbered something. I've now been in the habit of using const instead of var whenever possible. 
And 6to5 is now called Babel
Does your browser do a “reader view?” I use Safari’s, and this is what I get: [Reader View of raganwald.com](http://i.imgur.com/PbvPYW2.png) But if you like, please fiddle with the css and submit a pull request. You can edit it right on the web, here: https://github.com/raganwald/raganwald.github.com/edit/master/assets/css/stylesheet.css
A couple concrete examples would be really nice. 
I don't think that was the point of the article. The author assumes you know what isomorphic javascript is, agree that everyone hates the name, and proposes a new name: progressive javascript. If you want an example then google "isomorphic javascript". 
This is /r/javascript, /r/java is over there
Vanilla javascript is really what you need to master. At our company we're even trying not to use any frameworks on mobile to cut on the amount of crap users have to download, and it works very well for us and for our target audience, just using vanilla javascript with knowledge of the DOM.
Sorry, Brand new to reddit. Will delete
This isn't just a case of developers, though the problem's encountered in other areas. I work in Ops / systems admin, now increasingly [the cult of DevOps](http://www.appstechnews.com/news/2015/feb/11/the-devops-path-to-digital-transformation-nirvana/). And it's been getting to be a lot less fun -- this from someone who first really encountered UNIX in the 1980s. [CarTalk](http://cartalk.com), a show that's been in re-runs for over a year now, featured a bit a month or several back where Tom and Ray were commiserating over how _auto repair_ was getting increasingly technical, and much more about the specific technology used (and training required of it) than old-school mechanical intuition and know-how (though those still paid off). Friends in the medical profession, or building trades, or aviation, and elsewhere, tell me similar stories. I'm seeing all of this as part of a larger trend to ever greater complexity, with growing integration costs, but often smaller payoffs (and shorter currency periods). It's all well and good if you happen onto the stage with a particular technology under your belt just as it's coming into widespread use. The world's your oyster. Then the tech changes. And you've got to ask yourself: what do I pick up next? You discover that a huge part of your professional skill becomes _trendspotting_ and identifying what new tools (or languages, or platforms, or techniques, or vendors, or ...) are going to be hot. Not now, but in 18 - 36 months, time enough for you to develop competence in a specific area. This while there's a tendency toward _both_ greater specialization _and_ of wearing more hats. Are you a front-end dev? Or a webmaster? Do you just need to know how to tune Apache and throw a few packages on a Linux distro, or is it setting the ergodynamics of your JVM, tuning memcached, tweaking your nginx proxy, sorting out load-balancer SSL/TLS termination and identifying the bad cipher that crashes the box, filling out a customer's PCI/SOX survey, choosing the right cloud hosting provider, _and_ configuration management system, _and_ keeping your docs up to date, creating a cross-AZ replication system, testing it, _and_ sharing pager rotation -- with two others on your crew so you're never actually really off watch. Yeah. It can get old.
Thank you so much man, this was super helpful and I'm honestly not sure if I would have figured it out without you. Like the "w" parameter.... what?! At least they documented it tho. This was the hardest part of my task. I am now on the final stages of transferring this data over to the categories page (like [this](http://andredevelopment.mybigcommerce.com/smoking-accessories/)), and then binding the URLs to clicks on the appropriate color on the swatches. // This whole function will be performed for each &lt;li&gt; // item with some element of class ".withColorSwatch", // as if there are color choice options, this class will be present $(".withColorSwatch").each(function () { var productDiv = $(this).parent().parent(); var productColorSwatch = productDiv.find('.catColorSwatch'); var productName = productDiv.find('.pname').text(); var images = []; var productId = productDiv.find('div.ProductImage').attr('data-product'); // We can pull the color values from the DOM! :) var allColorNumbers = []; // **** Variable-ized color names var allColorNames = []; productColorSwatch.find("input.validation").each(function() { allColorNumbers.push($(this).val()); allColorNames.push($(this).parent().find('.name').text()); }); var queue = Array.prototype.concat.call(allColorNumbers); // Make a copy of the array var currentColor = Array.prototype.concat.call(allColorNames); function poll(cb) { // Is queue finished ? if ( !queue.length ) { cb(); return; } // Next color in queue var colorNumber = queue.pop(); var colorName = currentColor.pop(); // **** Also made "attribute[xx]" into a variable number var attributeValue = productColorSwatch.find('.validation').attr('name').replace(/\D/g,''); var args = {action:"add", w: "getProductAttributeDetails", product_id:productId, attribute: []}; args.attribute[attributeValue] = colorNumber; console.log("Getting color #" + colorNumber, "-", colorName + ", for ***" + productName + "***"); $.post("/remote.php", args, function(response) { if ( response &amp;&amp; response.details &amp;&amp; response.details.image ) { console.log("Got", colorName, "image #" + colorNumber, "at URL", response.details.image, "for ***" + productName + "***"); images.push(response.details.image); } poll(cb); // Next in queue }); } poll(function() { console.log("For", productName + ", these are all the images I found:", images); }); }); 
Ha! I learned so much about JS from doing this. I only started on JS about 2 months ago and it's been... real. I just started to understand that javascript workflow is completely out of sync with HTML/DOM. So yeah, this method failed miserably because it would scrape the same URL for me 10 times, then finally the click() would complete and change the image in the DOM. Also, it now is starting to occur to me that unless otherwise told, JavaScript will perform multiple functions in parallel, not in sequence. Which is pretty awesome, but also difficult to break my mind out of the habit of thinking about code the way HTML is generated in the DOM, from left to right, top to bottom. Is my understating here correct, or did I confuse myself further?
Yeah, I'm struggling to grasp my head around this task right now. I wouldn't have put my problem so succinctly as I am still somewhat new to arrays and objects (just barely a rookie :) ) but yeah, I have to attach these URLs to click event handlers.... So, I need to attach it in a way that says On click, substitute image with URL of =&gt; [color obj. of this prod.(of this attr.{of this color})] But I am pretty sure I can't make an object with a parameter that has its own parameters. or can I? Logcially this seems simple, but in JS there might be a simpler way. So, I think it would be easiest both logic and JS wise to create multiple objects, 1 for each product. Each object would be a key:value pair of ColorName:ColorNumber... Am I thinking correctly here?
SVG works fine in IE9+ http://caniuse.com/#feat=svg edit: The issue is caused by using .selectedOptions() . I'd suggest switching to something with broader support. Also I'd suggest moving your script tags inside the body tag - most browsers won't care, but it's always good to follow the spec when tracking down issues. Looks great though. If you'd like any other refactoring tips then just ask.
I have like a dozen questions but I'm sure the world does too, so I'll try to keep them to ones I can't find the answers to in documentation. When I ran your original code above, the output was like so: Getting "color" White Undefined .....{good, desired results}..... And now, with my updated code below, when I run it I get something somewhat similar... Getting "color" White ...{An array of the &lt;a&gt; tags that have class .withColorSwatch}... .....{good, desired results}..... My question is, what was making the undefined output, and now, what is making the &lt;a&gt; tags output?
What advantage does that website have over r/javascript?
The site is using currently a stock version of Telescope which is a social platform built on Meteor. The global variables appear to be how the application currently works and not due to anything that we added to it. We're in the process of working on new features on our own private fork, but obviously it is early days and things don't happen over night. Are the global variables causing any problems for you? If so, we'd love to hear details so we can put them down in our bug/error tracking list and get to them when we can.
[Decent comparison of 6 Flux implementation libraries](https://reactjsnews.com/the-state-of-flux/). I haven't tucked into any of them, but Reflux looks like the one I'd use.
Inspired by : https://www.flickr.com/photos/nicksieger/sets/72157594499591461 Reference : http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf Lower definition : https://raw.githubusercontent.com/nobe4/graphs/master/ECMAScript%205/ECMAScript%205.jpg
This. There is incredible volatility around JS right now. Staying closer to vanilla is key to avoiding painful rewrites. Fluxxable, from what I've seen, is really close to vanilla, but you might as well just use a seed project or generator for plain Flux at that point.
webpack has many options (see http://webpack.github.io/docs/shimming-modules.html) but it depends on what the script does. There isn't a one-size fits all magic option.
What do you think of the new iPhone BBC news app?
Why does there need to an advantage? The front-end development/Javascript ecosystem is large enough to sustain more than one resource for front-end development and Javascript links &amp; topics. If you are happy using /r/javascript, then that's cool if you don't want to use anything else, we're not trying to compete with any existing sites or this subreddit. I myself check; /r/javascript, echojs, dailyjs and Hacker News on a daily basis. I don't have an allegiance to one particular site, but I realise some people might and that's fine. We even initially toyed with the idea of aggregating existing resources from all of the sites out there and making jsdev.io a site that aggregated existing resources from /r/javascript, Hacker News, Designer News, Echojs, etc. But we decided we would prefer to create another that co-existed within the ecosystem and put our own spin on it with a few features not usually seen on traditional link sharing sites like Reddit or Hacker News. Initially you'll probably see a bit of overlap between Jsdev.io and /r/javascript in particular, but we have a lot of features on the roadmap to take it beyond just another link submission site. It is still early days though. I am particularly excited about one feature we have coming, but I don't want to ruin the surprise just yet until it is almost done. The people behind jsdev.io (including myself) are just passionate about Javascript and front-end development in general and we wanted to create our own little site to help share links and foster creative discussion on various topics. There is no underlying desire to compete or try and replace any existing sites. Sorry if this doesn't answer your question. I probably went off track a little bit there.
You haven't properly linked your Javascript file. You need to replace the line: &lt;script type="text/javascript" href="temps.js"&gt;&lt;/script&gt; with: &lt;script src="temps.js"&gt;&lt;/script&gt; There are a few syntax errors in your Javascript, and you should see them in the console now. In order to stop your form from refreshing the page when you click on the "Add the Temperatures!" button, add the following attributes to your form: &lt;form id="output" method="get" action="" onsubmit="return false"&gt;
I have used Reflux and was very pleased with it. It certainly gives you more direction than vanilla flux and doesn't strangle you with convention. I thought it was fantastic
I started with Fluxxor, but once I moved to reflux, I never looked back. Maybe there's something to be gained from regular flux, but I haven't seen it and it adds a ton of boilerplate to write and maintain. EDIT: One big plus for reflux is naming. In flux, every name must be universally unique. No two stores can have an action with the same name. It seems to me that this becomes a liability as the size of the project increases. With reflux, each action set is associated with a store and the same action may do different things depending on the store. 
Reflux looks simpler to me to use straight away.
I do have a basic understanding of how it works. Or maybe not enough, because I can't figure out how to implement it into my own code anywhere. Or at least I don't yet see why I should. From co's description : &gt;Generator based control flow goodness for nodejs and the browser, using promises, **letting you write non-blocking code in a** ***nice-ish*** **way**. Is that all there is to it? I'm not asking that in a dismissive tone, I'm genuinely asking if all there is to it is being a yet another sugar for Asyncs. If it is then I'll maybe change the way I look at it. But right now it seems to me like a hyped feature that's irritating me because I just can't figure out a good use for it..
I've [played with isomorphic Reflux](https://github.com/appsforartists/isomorphic-reflux) and found that the easiest way to think about it is that each store represents the state of a single session-wide variable, which can be `require`d by any component that needs to read it. A pattern often crops up where you'll get a list of things in an API call and want to be able to display the list in one UI element, then display details about whichever one someone selected in another; for instance: one component `require`s a list of all [`Bikes`](https://github.com/appsforartists/ambidex-example--bike-index/blob/master/application/bike-index/reflux/Bikes.js) and another `require`s the details for the [`CurrentBike`](https://github.com/appsforartists/ambidex-example--bike-index/blob/master/application/bike-index/reflux/CurrentBike.js). To implement this, you end up with one store (`CurrentBike`) that is merely a transformation of another (all `Bikes`), which in turn makes me think a truely FRP architecture like [Bacon](http://baconjs.github.io) or [RxJS](https://github.com/Reactive-Extensions/RxJS) would be a more robust solution because it would let you express this relationship more clearly. I haven't replaced Reflux yet because I want to learn more about [Netflix's Falkor](http://techblog.netflix.com/2013/01/reactive-programming-at-netflix.html) and [Facebook's GraphQL](https://www.youtube.com/watch?v=9sc8Pyc51uU) and I expect to have more details about those this spring. It's entirely possible that the data loading story for React will be solved much more substantially in the coming months, so I wouldn't recommend making any bets in the space until those battle-tested solutions are shared publicly.
&gt; I wish I had done CS instead of music performance in college... sigh. Who knew you'd need money in real life. :) Hah, well I have a BFA in Graphic Design. A CS degree will just teach you theory, which is useful, but if you're just looking to be a web developer you don't really need a CS degree. Keep working through textbooks. I'd recommend reading The Good Parts, Eloquent JS, and Programming Javascript Applications. But there are tons of great books out there. 
In theory it can be used to create infinite sequences in a nice way as-well and i'm sure we will slowly see it being introduced into some utility libraries. Honestly though the only current practical use that I have needed is for the async sugar - which I highly recommend you check out. It's a big deal to be able to use native javascript control flow for async functions.
Om/ClojureScript + some libraries from the LightTable Github + React (way to go FB peeps and floydophone, and also Rich Hickey and David Nolen and more... really impressive) should be a good basis or else try with Elm which is super clean from what I've seen.
 &gt; EDIT: One big plus for reflux is naming. In flux, every name must be universally unique. No two stores can have an action with the same name. It seems to me that this becomes a liability as the size of the project increases. With reflux, each action set is associated with a store and the same action may do different things depending on the store. I'm not really sure I understand, what do unique action types have to do with different things happening inside each store? Each store's callback into the dispatcher is unique, and by using the same action types they can execute in parallel/ wait for other stores to finish doing their thing. 
&gt; I just want to see how many signups I can generate to see if I want to actually invest money into developing a site and going down more paid marketing avenues. lol
You need to save the Javascript in a file and then link to it using the `&lt;script&gt;` tag in your HTML, similarly to how you have done with linking the jQuery (`&lt;script src="//code.jquery.com/jquery-1.9.1.min.js"&gt;&lt;/script&gt;`)
&gt; Although I think we'll have to wait until ES7 to have async generators that can yield results from non-synchronous XHRs What? You can do this today. Have an external variable to a generator, yield to the request and have the response call `.next()` on the generator. A bit convoluted, but things like `co` take care of most of it for you.
&gt; COMPANY NAME. 2014 wtf is this shit. seriously.
you should also try Go
It takes 200-400 ms on my machine, anything more than a few seconds seems wrong 
JavaScript is a prototypal language and prototypes are how you are _supposed_ to extend objects. They are, BY FAR, the best performing way to extend objects in JS. As for why -- Adding objects in the constructor, say: function myClass(){ this.someMethod = function(){ ... } } means you will have a _seperate_ function for every instance of the class. Doing it via a prototype: myClass.prototype.someMethod = function(){ ... } means there will only ever be one copy of that function. Much more memory efficient, and allows for hot-editing of the language. Let's say you want to edit String.prototype, for instance: String.prototype.trim = function(){ ... } If you just added that to the constructor somehow, existing strings would not have the `.trim()` method, so the code: `navigator.userAgent.trim()` would not work since `navigator.userAgent` was defined before you added your `trim()` method.
They are not causing problems for me as an end user, but they may cause problems for you. Using globals for things that aren't global is an anti-pattern. I just had a look at the Telescope demo and it looks like they do the same thing, bad style.
Even vanilla JS is changing quick, I had a fun time today trying to wrap my head around ES6 classes.
Exactly. Yes, it would be sensible if Mongo shipped with safer defaults, but if your production database doesn't even require a password to connect, it's your own damn fault.
Given your second example, a JavaScript implementation is probably smart enough to see that the function doesn't depend on any closure variables and store only one version of it shared by all instances. But it's very easy to not make that possible. If by chance you had written it as `"Hi my name is " + name` then it would be storing a reference to a closure variable, making the function different for every instance and causing some considerable overhead. By adding it to the prototype chain you ensure that there's only one version of the function. Also, prototypes allow adding methods to types for which you don't have access to the constructor function, or for which it's not desirable to edit the constructor function (e.g. because it's in a library and you don't want to maintain a private fork of that library for eternity.) They also allow adding methods that will become instantly available on all instances, even preexisting instances; editing a constructor function only has an effect on instances created from that point on. It's a much more flexible system, in other words.
Seems like a very specific attack, using activex will only work on internet explorer and i would assume that only on older versions of it
Your waves do not look circular, so patterns are formed quickly, which you confuse with standing waves. &gt; Each mass is also connected to each neighbouring mass by another spring. That's the root of the problem. 
having flashbacks to java right now, thanks a lot!
I'm not the biggest fan of Angular overall, but... is this argument literally just "I hate Angular because it's popular"? Maybe it's the Hacker News filter bubble, but I hear plenty about other frameworks, *especially* the New Hotness that is React. It seems pretty premature to believe there is an undisputed winner - in the Javascript space of all places, where yesterday's sexy library is today's shitty cruft. 
I'm not a fan of plain flux, it's just too much typing and boilerplate for me. Reflux is awesome, it takes a lot of the annoying parts of flux out.
yeah, those two things seemed bad to me too. Most of the inheritance stuff is over my head, but I think the "when to use arrow functions" stuff was pretty useful. Also use const whenever possible and don't mix const/let and var in a file. Especially the long-but-still-single-line return thing. Way prettier (and would be even more pretty if they wouldn't put the dots at the end of the lines).
I really don't understand why people say this. I've worked with React, Angular, and Backbone each for large projects. Managing a legacy Backbone app, building one in Angular for work, and using React in personal projects. Everything in Angular is just as transferable. Slightly less magic is available in how things are updated but you're still doing a lot of the same things. The only thing Angular doesn't force you to do is manually update values the vast majority of the time. It's a little faster to build with and it fits the vast majority of use cases perfectly fine. 
As a dev I found this article to be golden. Rule #1 opened my eyes.
This could be a start. http://24ways.org/2012/how-to-make-your-site-look-half-decent/
There is no content in this blog post, so if you're coming to the comments first don't bother clicking.
O ok
Ah, so that's the issue! I see. I assumed it was a standing wave due to the appearance of it, but I could see why that would be a problem. Thanks for the input!
Do you have experience beating AngularJS into submission with either webpack or browserify? It's important for me to figure out which libraries can be kept entirely out of the global scope.
For best effect, squint when you look at it! :D
It's not *large*, but here's what I built over the weekend: [http://musictocodeto.com](http://musictocodeto.com/) MTCT is a CLI-like interface for SoundCloud. So, all the trimmings that go with: faux-phosphorus glow, jittery scan lines, API abstraction, HTML5 audio, etc... and a few surprises. [I wrote most of my CSS as JS objects](https://speakerdeck.com/vjeux/react-css-in-js), which - while it was slightly awkward to get used to - I didn't hate nearly as much as I thought I would. The animations in particular were incredibly easy to build around React states. I wrote this up in SocketStream a few years ago. Moving it over completely to React went relatively smoothly, and it was a lot of fun to rebuild. edit: [source on github](http://github.com/ltackett/musictocodeto)... or you can just type `fork` in the app :)
Khan Academy has a load of open source React components: https://github.com/Khan/react-components
That happens me too every time
I felt that way.. until I discovered postcss. I think it's important for all react components to allow the css / styles to be configurable. I believe the future of css is modular- moving away from the big frameworks. Style objects , reverse engineering css to js and vice versa. It's not ready yet , unless you roll your own. It's possible , and publishable, but too chaotic. So really what's needed is like a framework of frameworks to build frameworks. Semantic UI comes closest, but it's not react compatible and their gulp file is nice, but it's not exactly what I'm talking about 
What about those of us that use Ember or Angular? They'd have to support them all? 
In case you didn't know, the Angular UI team has taken it upon themselfs to port all Bootstrap jQuery plugins to Angular directives: http://angular-ui.github.io/bootstrap/. jQuery is not required in order for it to work. There's also [AngularStrap](http://mgcrea.github.io/angular-strap/). It used to be jQuery plugins wrapped in Angular directives but it has been rewritten and it's now "native" Angular directives.
Dependencies are in a separate file. The 2MB file is just our sources, no externals. But at least the babel transformers only took 1-1.5 seconds on them. That bodes well for the future! I'm not using any ES6 features yet, but as I port a lot of code from C, having block-scoping would be awesome!
Here's a good writeup posted in this sub yesterday about classes: http://www.2ality.com/2015/02/es6-classes-final.html
No. The ONLY way that is acceptable is for react/angular/ember/whatever to be orthogonal to bootstrap/foundation/pure/semanticui/whatever i.e. for all of them to be designed so that they are fully mixable. If you want a single stack delivering everything you need licence one from Sencha.
Care to explain?
Considering he wants to cut 80% of the features...
I still don't get why middle clicking overrides the default browser behaviour on their site...
Really ? If you where to ease a thousands sprites around the screen using flash or using css3. Did it with js animation tooling and you can get 3-4x more sprites with flash. to this day. using Chrome... Maybe i should try with ccs3. But i think it will be worse. 
A good runtime would optimize the function part, but the closures _have_ to be different, since the references could be compared and must return falsey for the === check.
One downside with doing this in the console is that you have to paste the code every time a new page loads. To get around this however, you can use Tampermonkey (chrome) or Greasemonkey (Firefox). It'll allow you to create a script in your browser that loads on spesific URLs (you can match with wildchars)... I use this **all the time** to create my own hacks and fixes to web pages.
A lot of people are recommending that generators be used for async. This is a mistake, given that the generators aren't cooperative or "green" threads. If a generator is refactored in smaller functions, for instance, each function would also need to be a generator, and the first function would need to yield the outputs of the child invocations, and have some scheme for signalling to break the parent's yield loop. 
Great! Do you have experience in one of these? Which one do you recommend?
No special reason I used `let` really. Yes almost all variables are scoped to the function so using `let` doesn't matter (except of the `let` declaration inside the `for-of`). Random or middle has an effect on the time complexity of the partition operation in the in-situ version. In the version above, it doesn't really matter since on every call to partition we traverse the whole array to form the left and right subarrays. To understand the implications in the in-situ version, trace the partition algorithm with 1st element as pivot, middle as pivot and random as pivot. The pseudo code is available [here](http://en.wikipedia.org/wiki/Quicksort). A small write up is also available on the [choice of pivot](http://en.wikipedia.org/wiki/Quicksort#Choice_of_pivot). 
Have a look at the `yield*` semantics.
This is the stuff nightmares are made of. 
/u/metaphorm isn't being sarcastic, that's the right sub for this question
really cool! nice work.
for-in iterates over the keys in an object/array while for-of iterates over the values. And yes, in-situ means in place. 
wow, this is really nice!
The context scaling might look like this within your render loop: ctx.save() ctx.scale(dpr, dpr) //now draw your scene and images in //"regular" screen space pixels ctx.restore()
Yes, we're aware. 
An es6 option was added a while ago: https://github.com/jscs-dev/node-jscs/pull/680 You can use --esnext in cli or add to your json http://jscs.info/overview.html#esnext
That really through me. Isomorphic JavaScript to me means the client and server are one app. Progressive JavaScript sounds like Progressive enhancement, something like using an es6 transpiler. In the article he made both comparisons, leaving me unsure of the intent. Is his concept of Progressive JavaScript to use runtime normalization tools along with isomorphism? An example would have helped me.
OMG I love how that looks, I'm just zoning out staring at it. Very moody! &lt;3 ed: It does, however, totally max out my CPU. :) Would that be because of the soundcloud stuff, or React?
The fact that code is executed client side doesn't make it open source, and I'm sure both Facebook and Instagrams JavaScript is minified to hell and back.
It's not so much "Open source" as in the free software definition, just that the source code is there in some kind of form. You can't really read it very well and you can't legally modify it or reuse it. While I'm not keen to agree with FSF on everything, I think they do raise a good point about the javascript being served to your computer not being open source. https://www.fsf.org/blogs/community/gmail-jstrap That said I'm not about to stop using gmail just because of a code license. They have an entirely different complaint about facebook, but the "javascript trap post" gets the point of nonfree javascript across. 
This was actually kinda cool. I've been sitting here for 5 minutes making my own (crappy) song now :P
Thanks! :) I'm going to give this a try. Only thing I need now is for it to ignore the XML in JSX...
And you can actually do that too! There is a custom esprima option. You'll either need to npm install esprima-fb to the project somewhere "esprima": "./node_modules/esprima-fb", and then changing the fileExtensions "fileExtensions": [".js", ".jsx"], { "esnext": true, "esprima": "./node_modules/esprima-fb", "fileExtensions": [".js", ".jsx"] }
I would say react/flux, just because it's the new hotness. Flux is a totally new architecture, completely different from MVC. If anything, you'll learn something cool to add to your resume.
Try to avoid using context scaling. You're much better off using CSS to do this. It will still look stretched and lose quality, but scaling up the canvas, especially on drawImage() calls can really eat up precious milliseconds.
Neither, actually. It's the scanlines animations. They are recursive functions that animate with JS... and they were set to go wayyyy too fast. Definitely not the best solution for good performance. edit: turned them into proper CSS animations.
[Atom's editor component](http://blog.atom.io/2014/07/02/moving-atom-to-react.html) is React-based.
Try posting in r/reactjs
If you are going to use a flux like arch, checkout refluxjs, it's really easy to get started. 
&gt; document.myForm.factIndividual.value = ("The area of the third number you input is: " + thirdFact); Did you mean to be setting the value of factIndividual to an area fact?
That is awesome. I love how it exists to enhance text content instead of generating an image overlay or some other non-accessible approach. I would recommend using something more like a span element instead of *a* tags, though. Anchor tags imply hyperlinks and hyperlinks imply that you should go somewhere (even if on the same page).
hipchat 
Meteor is incredibly easy to learn and pump out cool apps with, but React/Flux is definitely the better "career" option. Meteor is as full stack as it gets; all the technology is chosen for you, and it works wonderfully, but it's really only appropriate for certain types of applications. It can be used for almost anything though, appropriate or not, as long as you're just making it for little fun apps. React/flux is also excellent for small apps, but (as evidenced by its usage by FB) is designed to managed really big and complex apps as well. It'll require more code to do the same things Meteor does OOTB, but with way more flexibility and choice in technology. Honestly, I'd learn them both. Meteor is so fun and can be picked up so quickly there's sort of not a reason not to, and React/flux seem to already be destined to become the next hot thing to replace Angular.
Yes it does. Most APIs will recommend you hide it on your server. Basically you make a request to your own server with information from your app. Then you write your server to decide if it's a valid request from your app or not and if so, it packages a reply to the API. Basically it acts like a middle man to hide your client token. Here are facebook and instagram docs that recommend this way. [Facebook docs](https://developers.facebook.com/docs/facebook-login/security#appsecret) | [Insta docs](http://instagram.com/developer/restrict-api-requests/)
Thank you for the recommendations. I watched all of the Douglas Crockford videos that were posted a couple days ago. It was awesome hearing about all of the programming history and trends. Also learning that the cycles for hardware and software are so different.
Let me see: you are trying to support a 2009 browser, released with Windows 7 (a OS that supports up to Internet Explorer 11), which doesn't support neither `&lt;canvas&gt;`, `&lt;svg&gt;`, `box-shadow` or many other features and want a animation... ... do you tried Flash? ^^^^^^^^Seriously, ^^^^^^^^don't ^^^^^^^^do ^^^^^^^^that. ^^^^^^^^You ^^^^^^^^can ^^^^^^^^do ^^^^^^^^this ^^^^^^^^with ^^^^^^^^static ^^^^^^^^images: ^^^^^^^^[link](http://jsfiddle.net/cn3kaxkv/).
Well, I wrote this mainly because we had to make a technical decision in my team. And I think expressing my ideas in text is clearer than verbally and it also allows people to read it later, like new members of the team. I also thought it could help other people, so I made it public. Are these good reasons enough?
Mixing HTML and JS is certainly not fundamental to components. But it helps understanding the inherent coupling of them. One nice approach it the React templates created by the guys at Wix. https://github.com/wix/react-templates
Please don't hijack my scroll.
You're right! I just edited my response.
The trouble is that reflow is expensive. The whole idea of React is to write into a virtual DOM, which is much faster than the real DOM, and only write to the DOM what actually changed. edit: about it, see [this](https://stackoverflow.com/questions/21109361/why-is-reacts-concept-of-virtual-dom-said-to-be-more-performant-than-dirty-mode). The virtual DOM is essentially a hack - new engines [like Servo](http://www.phoronix.com/scan.php?page=news_item&amp;px=MTgzNDA) could make it obsolete. Another thing is that React is written so that rendering in the server is as natural as rendering in the client (for example, to render the first page in the server, and the updates in the client -- which improves performance)
Ideally you should be enhancing &lt;u&gt; tags..
very cool, although when moving over multiple lines it only picks up one or two strings 
Meteor is cool, but React is a "this changes everything" technology. If you have to choose one to learn, choose React.
Nice detective work. How did you discover this? Did you eval the code in some sort of sandbox?
I freelanced for quite a number of years before moving for a full-time JS job a couple of years ago, starting on elance doing various jobs in Flash &amp; JS for a year. Having zero portfolio or previous jobs it was pretty much slavery when I started. Sell yourself short and work overly hard to get in amongst the masses. I was probably about 4 jobs in when I got lucky and found someone with repeating work. They were acting as a designer/middleman for clients. A few months into working with each other she happily put me in touch with other companies/people needing work, and I slowly raised my prices as the jobs came in from her/them. This continued for about four years, and I still use her as a reference and so on. I never really went back to elance after the first year. But I presume had I carried on I would have found a couple of people like this that would build my network and work flow easily. I have a friend who followed this method too, prostitute your JavaScript as a cheap as you can till you get a few jobs under your belt. Keep clients happy that bring repeating work to you (I think it was his 6th-ish job that it kicked off for him). Raise your prices as your portfolio builds up. My friend is now a full-time contractor for a company in Canada, I'm now in the US. Both of us were from Scotland. Sites like elance are great for freelancers if you can find the right people to work for. It can be a bit depressing at first if you lack a history of work, but yeah, building a relationship with job posters that are middlemen can really pay off and provide a ton load of networking/job flow.
This article won't tell you more than the official site.
Alternatives? I hear about delegation and composition. But I would appreciate a nice comparison of the two in JS with example code. As I don't really know what I am supposed to do to replace my current inheritance shenanigans.
noticed that too
Does Servo implement a new API that lets you throw a description of a sub-tree of the DOM and it will merge it into the current DOM, without unnecessarily modifying anything that does not differ too much (so retaining focus, or caret/selection position in text input, textarea or contentEditable=true)? Without such an API, I don't think Servo (or any other faster implementation of standard DOM) makes virtual DOM obsolete. This is what makes it easy to write components - they are pure functions that take props and state and produce a completely new description of the DOM tree. There needs to be an API that can take such a description and act on it. If such an API were built into all browsers, the currently-used JS libraries for virtual DOM would be obsolete, but the concept itself would not be (quite the opposite).
This guy has some great articles about his experience finding work through oDesk: [http://dennmart.me/getting-software-development-work-on-odesk-while-still-being-able-to-pay-rent/](http://dennmart.me/getting-software-development-work-on-odesk-while-still-being-able-to-pay-rent/)
The key is that react is faster than the other front-end frameworks, not faster than super simple widgets that are implemented well. If you look at a lot of the "show off React speed vs other framework" examples, you will see two things. 1. React is much faster. 2. The more complex, real-time examples are very hard to do quickly and efficiently without a framework of some kind. It's all about use cases, nothing is ever a silver bullet. I feel like to me: Angular - Great for quickly building MVP or internal Dashboards where page load speed isn't essential. - Small projects with lots of complicated multi-part forms React - Great for working into existing websites that need a real-time element - Great for complex websites that require lots of re-rendering, very interactive websites - Also liked for ability to render from server and fast initial page load (relative to other frameworks) Anything Server-Side Rendered - Static content (the majority of websites) - Remember it's possible to pull in React if needed for one specialized component.
^^
Well said, I've played with setInterval and setState in the same ways to achieve things like lerping numbers.
Great design. It would be nice to add keyboard navigation. I tried to hit the down arrow to select, but it didn't work.
The [Aligned Left]( http://alignedleft.com/tutorials/d3) introduction is one of the best tutorials and what got me started, there's also a[ Lynda course](http://www.lynda.com/D3js-tutorials/Data-Visualization-D3js/162449-2.html) which is reasonably good (not free, but there's a free trial if you're not a member). Normally I'd say just go read over the docs, but when starting with D3 I found them verbose and hard to decipher. Regardless, to build something like the Crypotowatch example you're probably going to have this tab permanently open https://github.com/mbostock/d3/wiki/API-Reference
Yeah agree about foundations. I mean the Crypowatch example has been built on top of React and is insanely complex. You wouldn't be able to build something that slick without an intimate knowledge of JS* ^(**also a team of developers and several months, but I believe in you op*)
I found these youtube tutorials by a Swede to be super helpful. He does a good job of explaining the concepts that drive d3 and providing practical examples that you can use to get started: https://www.youtube.com/user/d3Vienno/videos
Haha, thanks. It's more of a point to work towards than an absolute goal :) My plan is to start with basic static charts with similar data representation (candles, multiple lines), and then upgrade them with some mouse-over functionality, and then make the chart interactive/zoomable/scalable.... I think that will be a good start. I've been heavily involved with Javascript (client and server) for a few years now and consider myself intermediate&gt;advanced, so I don't think JS knowledge will be as much of a hurdle as figuring out how to draw and manipulate data with D3.
Most of the cloud providers have a free tier that you might be able to use (they won't handle much traffic but they will get you started): http://azure.microsoft.com/en-us/pricing/details/websites/ https://aws.amazon.com/free/ https://www.heroku.com/
If it's for testing purpose, consider using https://koding.com 
I'd be interested in learning about how to handle animations as well; it's something I've come up against just recently. The thread you posted was very informative btw.
Amazon AWS and MS Azure both have a free tier that could be sufficient (not sure if they allow UK but I bet they do). You'd have to set it up yourself but it's a good learning experience if you haven't done it before. You really just need any cheap VPS. 256MB RAM (or even 128) should be plenty for Node assuming you're not running a database or anything. I like [RamNode](http://ramnode.com/) (US) but there's probably a similar UK outfit out there. Shared hosting like you're getting for PHP/MySQL is a lot cheaper because it uses zero extra resources on the server unless it's actively serving a request.
There is a high and low level api for animating components in react when they are mounted and unmounted. http://facebook.github.io/react/docs/animations.html Also you can simply use css animations and classes. This is one of the factors that makes me wonder about inliine styles and there viability in this context. It seems like doing it inline would be very difficult to maintain if you want to set the animation to run once, use animation delay, etc. That being said, I asked because I am curios as to why people are (seemingly) finding this a valuable approach. 
You'll want to check out some of the examples here, and fall back on the documentation there if anything from the code is unclear: https://github.com/mbostock/d3/wiki/Zoom-Behavior Specifically, the zoomable area example. Check out how it sets a 'zoom' variable to d3.behavior.zoom(), and attaches .on('zoom', draw). The 'draw' function is what you want to have happen when a zoom event (mousewheel scroll for example) is triggered. Edit: Can't remember if mouse drag for pan is included in the built in zoom behavior, but I'll review a test project I built tomorrow and update you then. Edit 2: In regards to /u/chidoelrey commenting about the D3.js cookbook, it will get you through a lot of the chart stuff you're looking to do (at least statically), at the end I sort of felt like I was left hanging. That's where these examples will come in handy, once you're able to parse the code and understand what's going on under the hood. Definitely give that a run through.
That's interesting about the style js file as I'd never considered it. Ultimately, my biggest concern for this approach is that directly setting the style attribute inherently can cause layout reflow. React does a lot to batch updates and render them efficiently, but if ultimately the dom diff shows a style attribute changed, you've just caused reflow. Would be interesting to see how gracefully react handles it vs direct manipulating style attribute in the live dom with a concocted app to stress test it. 
Agree with what's been said. What I've done is take examples from [Mike Bostock](http://bl.ocks.org/mbostock) and others and change them to fit my needs. Also check out http://tributary.io for constructing visualizations. It makes the code-result feedback loop a lot tighter when you're trying something new.
EDIT: I just noticed the option to download Gist. I can't believe I didn't realize it before. The same thing as below is still happening, though. I upload via FTP to it's own folder and the code breaks. I've added the &lt;style&gt;&lt;/style&gt; of the entire CSS page after the JS and added the &lt;script&gt;&lt;/script&gt;. On the local page, I have everything looking the right way, but the 1200x500 boxes don't change when hovering over the circles. Once I upload the page via FTP, it's broken again. I also have the .css and .js files along with it, I don't know what they're doing considering the information is still in the html file. Feeling like this is all a huge joke. I've been trying to get this one page working for 2 weeks now, and it's completely impossible. I've uploaded sites in html/css/js combo before like through Zurb Foundation, but no idea what is wrong with this stupid page.
There's also D3.js in Action, from Manning: http://manning.com/meeks/
I think it's because you haven't linked to the jQuery file properly. Replace the line: &lt;script src="//code.jquery.com/jquery-1.9.1.min.js"&gt;&lt;/script&gt; with: &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt; And make sure that that is before your `&lt;script&gt;&lt;/script&gt;` tag with the rest of the JavaScript.
I thought presentational tags were now considered bad form and we were to use span (ed: and strong and em) tags styled with CSS?
It's working perfectly, thank you! http://tribaldroid.com/TDSsite/brookeseggleston/index.html The only issue now is that the hover will only change the 1200x500 temporarily, while it stays solid until you aren't hovering back on the JSBin.
It keeps blinking back and forth when I hover over the buttons. What exactly is the effect that you're trying to achieve? Maybe I can come up with a simpler solution for you.
My favorite thing to see in a project like this is a listing of other projects that do the same thing (or similar) with a comparison to help explain why you should use this one. JSON Schema validators exist, so what's different/better about this one? That's a great thing to help draw potential users in. IMHO a great example is from /u/sebmck with the comparison page for Babel. https://babeljs.io/docs/compare/
Which version of JSON-Schema does this support?
There is simply too much wrong with your example to be able to help, read up on http://jstherightway.org/ and other resources, just as a headsup you shouldnt be putting script tags inside dom elements for a start
You can deploy to [Openshift](https://www.openshift.com/) and [Heroku](https://www.heroku.com/) for free. Under the paid options, I usually stick with [DigitalOcean](https://digitalocean.com) for personal projects.
It's backed by the awesome tv4 library for a lot of validation which supports JSON-Schema v4. But not all the features the spec are supported with vlad.
That's a good idea! Off the top of my head the features that make this project unique is the ability to easily add custom asynchronous constraints. It's actually uses the tv4 library for a lot of the validation, just hidden behind a different approach.
I don't know if it does to be honest. I use pocket for that and I'm fairly pleased with it. It was more of a heads-up to you. I have to fork your repo to edit it. I won't bother (Just remove this line, and the one below: https://github.com/raganwald/raganwald.github.com/blob/master/assets/css/stylesheet.css#L56 would be my lazy advice) :-) And here's some proper feedback: As for the article, I enjoyed it very much! I have to go back and re-read it I think. I really like that you point out that this isn't strictly applicable to how we normally write JS, but that it's more of a question about extending the mind. Love the historic bits too. I feel all too often, writing JS at work (I didn't study CS), that I don't understand what it's all about. I mean, I get JS and have developed a fairly solid understanding of programming in general, but for instance reading about currying and composing and Haskell's type system some years ago totally blew my mind and even though it didn't fundamentally change the way I write JS today (I'm part of a bigger team, I can't just go all Haskell on them without warning), it still made me a much better programmer. In fact, at this very moment, I'm refactoring some code to use pure functions and proper recursiveness (it's traversing the dom) where possible. I had the same sort of "revelation" when reading your article, although on a much much smaller scale. It showed me what the consequence is of thinking about things differently. Things (in this case functions) that I already know how works and what you can do with. The best part was your summary about the backwardness. That's what made me realise that I need to go back and reread it. Another thing I really dig, is your style of showing a LOT of small code bits. It's guiding me, and I don't feel I need to open a console and test things out. You're doing it for me.
Thanks for your comment. I've created an issue for that here https://github.com/B1naryStudio/md-chips/issues/2, will be implemented soon
Look at the offers at http://lowendbox.com/ 
I've used C3js for some basic charts but that's probably not what you're looking for. Anyway Cryptowatch looks pretty sick.
Great UI, man! Feels like Fallout)
&gt; ore intri That's true, was just trying to use words well known to the "general public". Of course, the console objet is not and will never be spec'd and each browser / engine is free to implement its own way...
Excellent ! Thanks for the link
Is the graph task svg only or independent? As in let's say I just wanted to animate {a:0} to {a:100} @ 30fps, is that possible?
Seems odd to compare to React, wouldn't a performance comparison against something like HTMLBars make more sense?
Yes, if you're interested in front-end development you need to learn JS, and there is nothing wrong with learning two languages at once. You may occasionally confuse the two in your head while you're first learning, but you generally get past that pretty quickly. For reference, I took 14 1-credit "Intro to .... language" courses in one semester in university. I didn't have too many problems other than with my final exams: My courses on Tuesdays were back-to-back python, perl in the same room. When I went to take my exams, I took the exam for language python, then had the next exam which I naturally started writing in perl. Except that wasn't the exam for perl. 40 minutes into the 2 hour exam my TA looks over my shoulder at my code and quietly points that fact out to me...
Heroku is dead simple and free for basic/small databases.
Not anymore! http://html5doctor.com/u-element/ **Edit:** Alright, not _always_ anymore. Most of the time, you're still looking for strong and em though.
&gt; Math.round(5.123123456 * 10) / 10 5.123123456.toFixed(1) 
Thanks, pal! I'm using CreateJS, it's really good... I've implemented some songs in my game with it. But, I think I'll use other library to do the isometric part.
I considered using `toFixed` in my comment as it looks slightly nicer. But it returns a string and I wanted to keep it a number so it retains the benefit of formatting it depending of its type in the log. 
Sometimes the "popular" technology is not always the answer. 
 &gt; Math.round(5.12 * 10) / 10 5.1 &gt; Math.round(5 * 10) / 10 5 &gt; 5.12.toFixed(1) "5.1" &gt; 5..toFixed(1) "5.0"
 +5.123123456.toFixed(1)
Oh I think you'll be fine then. D3 should be cake for you!
There are some times when I'll be "in the zone" writing Javascript for a few minutes and realize after I've written a bit that I'm in a PHP file. But other than that kind of mix-up it's not too bad. If these are your first proper programming languages (as opposed to HTML or CSS) then you may be surprised to find that once you can read and write one language, picking up another isn't very difficult since the core concepts translate nicely between many languages. 
Yeah, the multichannel audio doesn't seem to be working properly.
The content seem to have been swallowed up by the closure's scope.
hmm... lemme fix that.
Yeah, that's the odd thing. It should stay solid while hovered, and only turn off when off hover. It does that fine on JS Bin but not on the final page.
yeah, I'm a big fan of koding, but I mostly only use it for trying out new languages to decide whether to take it further and install them locally. Thanks, though!
This looks to be bang on the money- thank you very much!
yeah, looks like that's the way to to go...
Looks nice, I'll give it a try on my next project.
Great minds think alike!
I'm looking forward to Relay and GraphQL, if I understood correctly, they do all data handling server-side so it becomes truly the "one source of truth". However I wouldn't dismiss Reflux completely for client-side only applications (which I'm personally using for an in-house browser extension I'm working on) or in situations where the REST services you use is out of your control.
I like Reflux in theory; however, in practice, it feels like a half measure. The list:detail paradigm that's so common in web apps would be much better expressed with FRP.
I don't know, but googling led me to this, which I'm about to mess with in a project i'm currently building...Already built a blog post builder that allows you to reorder text blocks, image blocks and video blocks. Was looking for a nice wysiwyg for the text blocks. https://github.com/daviferreira/medium-editor
&gt; There's no such thing as a _Javascript's console_. In the beginning, there was the firebug developer console, **then there was the WebKit/Safari DevTools console and after that Chrome forked WebKit and made a bunch of improvements to its DevTools.** FTFY
That's a fair question and this question came up in a separate thread: http://www.reddit.com/r/webdev/comments/2w8q8c/marko_vs_react_performance_benchmark/cooucw2 I'll quote my earlier response here: &gt; Marko + Marko Widgets offers a complete UI component model (rendering and behavior). &gt; Marko, itself, is an HTML-based templating language that supports custom tags and custom attributes. Marko Widgets provides a custom taglib for the Marko templating language to allow binding of behavior to rendered HTML elements. For the purpose of the title I just used "Marko" to encompass both Marko and Marko Widgets which may be somewhat confusing. &gt; As for Marko, it was developed at eBay as an open source project and most teams working on the Node.js stack for front-end development are using Marko and Marko Widgets to build their webapps. Marko was designed to be high performance with support for streaming and asynchronous. Here's a great screencast created by somewhat outside eBay that I highly recommend: http://knowthen.com/episode-8-serving-content-in-koajs-with-marko/ I hope that clarifies.
This benchmark is comparing _both_ server-side rendering and client-side rendering: https://github.com/patrick-steele-idem/marko-vs-react#test-setup-overview We measured the time it took to render the initial search results on the server, and to test client-side rendering performance we measured the time it took to cycle through 100 pages of search results in the browser (doing all of the rendering in the browser). Both React and Marko provide a way to build UI component-centric applications that support both HTML/DOM rendering and behavior (updating the DOM, attaching DOM event listeners, etc.).
https://www.youtube.com/watch?v=z5e7kWSHWTg Thanks to /u/FuckTheReddits for getting the title of the talk
Great effect. I wonder how many users would appreciate it.
Dont forget $0 Select an element using the magnifying glass icon. Put $0 in the console. See last selected element selected, in the console. This is useful for screwing around with stuff. Example : http://i.imgur.com/tmk7gWn.jpg
Yes. I imagine you have already seen some reasons why you may find ramda more preferable than lodash but for others this http://fr.umio.us/why-ramda/ has great information on why it's more composable and this http://bahmutov.calepin.co/put-callback-first-for-elegance.html is possibly more useful as it describes why the ordering of arguments in ramda vs lodash has such a profound impact. I think for developers whose first exposure to functional programming was not in js, the lodash way is quite backwards. That being said, it's been an amazing tool for the community and introduced these concepts to tons of people in a way that was easy to pick up. When you break it down, lodash needing a chain method is probably the biggest indicator of the problem and libs like ramda and wu resolve this issue. If micro benchmarking is important to you (don't get me wrong there are some projects that need to reduce over a million values consistently out there) I am fairly confident you will see that lodash will beat ramda in terms of performance for shared operations. I don't think this is a valid argument for the statistical majority, however. I develop reasonably complex apps for enterprise that are very data driven and the benefits have definitely outweighed the (unnoticeable for my apps) difference in performance. I've built a very useful set of common data transforms/filters that are domain specific to what I do with ramda that get shared all over between apps as well. 
Thanks! :) What? I am? I don't think so. I like the idea though.
Thanks! Looking at the module, it might not be a good direct fit to my project because it doesn't return helpful error messages, just true or false. It would be pretty easy to write a function to act as middleware though. function middleware(fn, message) { return function(val) { if (fn(val)) return val; throw new vlad.FieldValidationError(message); } } var base64Validator = vlad(middleware(validator.isBase64, "String is not base64");
Please consider this thread: https://www.reddit.com/r/javascript/comments/2voln7/what_can_bower_do_that_npm_cant/ I definitely support the decision.
The name is probably a reference to the [Babel fish](http://hitchhikers.wikia.com/wiki/Babel_Fish) from Hitchhiker's Guide to the Galaxy.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Babel Fish**](https://hitchhikers.wikia.com/wiki/Babel%20Fish): [](#sfw) --- &gt; &gt;Anatomy of a babel fish as explained in the BBC TV series &gt;&gt;"*Probably the oddest thing in the Universe.*" &gt;&gt;—The Guide [src] ^Interesting: [^God](https://hitchhikers.wikia.com/wiki/god) ^| [^Silver ^Tongued ^Devils](https://hitchhikers.wikia.com/wiki/silver tongued devils) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikiabot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+copi2ql) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikiabot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+copi2ql)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikiabot/wiki/index) ^| [^Source](https://github.com/Timidger/autowikiabot-py) ^(Please note this bot is in testing. Any help would be greatly appreciated, even if it is just a bug report! Please checkout the) [^source ^code](https://github.com/Timidger/autowikiabot-py) ^(to submit bugs)
Oh, I think you're talking about the examples where I use Bootstrap(?) It is Bootstrap doing that, not me. I'm just standing on their shoulders ;)
veeeeeeeeeeeeeeeeeeeeeeeeeeeerrry interesting.. I mostly just stuck to the concept of Ecosystem, Bower for Frontend deps and NPM for back end. I wasn't made aware of Browserify until this thread however..
We are, but Ramda has recently been introducing a lot of method name changes that break backwards compatibility. There's been a lot of debate about how closely they're following semver due to it not yet being 1.0.0, especially with respect to how people specify it as a dependency. Our team has actually added another layer on top of it to maintain aliases for deprecated/renamed methods until they reach that first major release and we can more faithfully rely on semver. It's a great utility and is - in my opinion - way more useful than lodash and its counterparts because of the auto-currying and argument ordering. It may not be as optimized or big in scale, but it fits what we need perfectly.
one way can be using array.sort() function. but i am not sure about its complexity, but you can give it a try and find out which one is faster. 
I am currently working with D3.js fairly extensively. In addition to the docs, I found the O'Reilly book "Interactive Data Visualization" a very great primer to D3. Additionally, it appears to be free to read online right now: http://chimera.labs.oreilly.com/books/1230000000345 After reading the above book, I also found tearing through the code of quite a few of the examples found on http://bl.ocks.org very helpful: http://bl.ocks.org/mbostock
lodash recently came out with a "lodash-fp" distribution. Autocurried, callback-first methods: https://www.npmjs.com/package/lodash-fp
reminds me of c/objective-c tokens.
just sort the array once, if in descending order: then first element will be the biggest number and the last number will be the smallest one... sort order descending : max = arr[0]; min = arr[arr.length-1];
I am using it in an enterprise application for a while now. The application will go live at the end of next month. One thing I didn't like was that I wanted to use `assocPath` but the version of ramda I was using didn't have that implemented yet. So I upgraded to the latest version but noticed a lot of my unit tests were failing. Turns out they removed the `.reduce` alias for `foldl`. I understand their reasoning for removing the alias and pre 1.0 you can expect things to break but removing something as fundamental as `.reduce` wasn't something I was expecting. I downgraded to a version that had both `.reduce` and `.assocPath` for now and there seem to be plans to put the `.reduce` alias back in version 0.9.2. The library itself is wonderful, I love using compose. [This](https://www.youtube.com/watch?v=m3svKOdZijA) is the talk that got me into ramda. 
If you want to do web design, JavaScript is definitely something you should learn. When you need to have something on the page update with php; you have to post back the entire page. Meaning, the browser requests the code for the entire page and returns this updated code, refreshing what you see in the browser. With JavaScript, you can update a small portion of the page (AJAX), for instance a table or select element. This means there is a lot less information being sent back and forth from client to server and you don't have to try and manage the state of the rest of your page each time it posts back. I'd also recommend checking out a library like jQuery. It wraps a bunch of common repetitive tasks that you do with JavaScript into small functions. Edit: and yes, I think you could learn both at once. They are fairly similar in terms of context.
Sort is much much slower than just iterating. All you need to do is track the lowest low, and the highest high. http://jsfiddle.net/tfh51c2s/
Ah that makes much more sense It'd be an interesting benchmark for sure.. I will try this out, thank you
once you go chrom you never go.....dome? Ok Firebox is better than the terrible concoction that Explorer Uses but it could still use a few things that chrome does better. (auto-completion of css for one) 
This is good news and I hope it will force Google's hand to support it in Chrome too.
If the array might have thousands of records then you should definitely use [web workers](http://www.html5rocks.com/en/tutorials/workers/basics/) (assuming you're using modern browsers). Also You may remove some "ifs" by: biggest = -Infinity smallest = Infinity and inside loop just do: biggest = Math.max(biggest, volume) smallest = Math.min(smallest, volume) *EDIT: i don't use coffeescript so my syntax might be off.
http://asmjs.org/faq.html
Another way is to not use loop at all (vanilla js): var volumesOnly = data.map(function(element) { return element.data.email.volume; }); var biggest = Math.max.apply(null, volumesOnly); var smallest = Math.min.apply(null, volumesOnly);
I hope bower dies and NPM becomes the de facto package manager. (Before anyone asks, I am not a fan of JSPM) 
Dude, you have 5.4mb of json data in each file. Makes it impossible to just look at your test code. Separate that out into a separate file.
its a good point, but I wanted the data to be as natively available as possible. I'll test this out and see if it affects anything, gimme a sec
For benchmarks like those You may use 'console.time' and 'console.timeEnd': console.time('test1'); ... console.timeEnd('test1'); 
Can someone ELI5 asm.js?
I agree that only one action being dispatched at a time is probably not something that needs to be enforced. It's just something to be aware of when choosing frameworks.
With more and more JS frameworks and libraries hopping on the "transpiling" bandwagon, this is a good thing.
Is your page hosted at the same domain (www.bitstamp.net) and protocol (https) ? If not, I think you ran into a CORS exception (http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) I get a Access Denied error ; is this url providing JSON, JSONP ? We need more informations.
 Easiest thing to forget. Need to use camelCase for background-color :) $0.style.backgroundColor = 'green' Unless you do it like this: $0.style['background-color'] = 'green'
Ah, in Chrome (on desktop, with mobile emulation) I was getting invalid constructor errors. I'll try again on Safari on the device and see what happens. Thanks! 
yep, was a demo of me brainfarting. :) All 3 versions do the trick in Chrome though (cant test in IE here).
&gt; Interestingly enough, v8 TurboFan can sometimes run JS faster than an equivalent "native" (meaning compiled C) program can. Would love to hear more about this?
input validation library with 5k+ stars http://parsleyjs.org/
Indeed. The idea here is that you search the doc for a specific method/info, you browse your feeds/blogs/whatever to discover new things. And I would say a focus of a specific part of the docs, even if I must admit that I found the word "regurgitation" funny. Cheers :)
One I had to look up recently is Console.dir() which logs the object consistantly, rather than using toString(). This is useful for example if you add a property to an array (i.e. [1,2,3].foo = "bar") and want to see the properties value. Console.log() (at least in chrome) just displays the array's enumerable values, but not it's other properties.
Maybe I'm missing something, but I'm fundamentally not excited about asm.js. Is the main problem with client-side web apps really that people aren't writing them in C and C++? Do we really want *more* people writing manually memory managed code?
I would just implement a BikeStore in your example that contains state for a list of bikes and a current bike. I prefer this over a granular separation and it's been working well. Downside might be some extra rendering happening but I haven't seen that affect performance and you can always check if the props you're interested have actually changed in componentWillReceiveProps
Word of mouth. If you're good, people will recommend you. If you're starting out fresh, build side projects to put on your portfolio. Go to networking events, meetups, and start talking to people and small businesses.
[ASM.js](http://asmjs.org/spec/latest/) is a way of using a subset of JavaScript that allows for more aggressive optimizations than are possible using the full width and breath of JS. Lets step back. Alon Zakai created a tool called [emscripten](http://kripken.github.io/emscripten-site/) which allows [LLVM](http://en.wikipedia.org/wiki/LLVM) to compile C/C++ code into JavaScript. It is not important how this is done...it is important to know that this is machine generated code. So as long as the converter (emscripten) is error free the resulting JavaScript will be error free. Normally JavaScript is a [dynamically typed](http://en.wikipedia.org/wiki/Type_system#Dynamic_type-checking_and_runtime_type_information) language. Since emscripen produces machine generated code additional constraints can be placed. One of the major constraints of ASM.js is that types are consistently used. An object will not be a number one moment and a string the next. The other main optimization is changing how garbage collection is handled in JavaScript. Traditionally JavaScript manages memory via garbage collection (GC). In ASM.js memory is managed in large [typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays). 
In some (admittedly contrived) scenarios the optimized code from V8 can be faster than compiled C. Generally these are in highly "dynamic" functions in which a very large percentage of the calls can be narrowed down to a more specific subset of the function. A JIT can take chances (assume this function will only ever take int8's because that's all we have seen so far, so remove all that shit it doesn't need) because if it gets it wrong its only a small penalty (having to fallback to another JIT layer, or even just an interpreter). A compiler cannot take those chances, if an AOT compiler gets it wrong, the program crashes. Furthermore a compiler (outside of relatively recent events) does not have access to runtime information, so it doesn't know what should be prioritized and what shouldn't. This means that an optimizing JIT (like TurboFan) can take a LOT of chances, plus it has the added benefit of being able to see the code being executed, so it can "study" that code and make assumptions based on it. This isn't specific to V8, or even javascript, all JITs run like this. It's just that the "multi level" JITs in many javascript engines do this to the extreme.
I think the fact that you can make a post about "STOP this crazy that = this thing" and nobody asks about "What is this 'that = this' thing?" pretty much proves that it's a convention.
No problem! Let me know if you have any problems with it.
That's certainly an option. In order to be able to cleanly serialize/deserialize a store when moving from server-side rendering to client-side, the data needs to be in a known location (e.g. `BikeStore.state`). If you use Reflux's `connect` mixin to bind the store to your local state, then you're left accessing `this.state.bikeStore.list` and `this.state.bikeStore.current` wherever you need either of those separate-but-related variables. Separating them also gives you more/easier control of what data loads before the render on the server, because you aren't conflating two APIs into one Store.
Yup. This, selective argument binding, and lazy evaluation are huge steps forward for lodash. I am glad to see they are starting to really keep up with the competition and incorporate new ideas as they gain popularity. I think maybe this was the easiest way to transition the whole js community en masse toward these concepts and lodash will continue to be the dominant player (I don't think underscore is keeping up). I was just attracted to wu and ramda because afaik no one else was using this approach in the past. 
declaring a "that"/"self" variable is akin to creating a bad polyfill, IMO. you're creating a reference that is "permanently" stored in memory, scoped away from garbage collection, potentially doubling, tripling, quadruplicating your memory for that resource depending on how/where you used it, and the "everyone knows what it is" argument ends in obfuscation when "nobody knows what it is" anymore. Moreover, it's not really that elegant.
Interesting. If you'd be interested in chatting about possibly combining efforts, I'm always interested. :)
Yeah, definitely. I'm about to go to bed, but I'll definitely scan through it more thoroughly tomorrow to see if I can find good stuff to add to nod.js. As for contributing I think I'll pass on this one. It is too big for my taste. :) Looks like some really solid work though.
They will be your best bet. Also, you can partner with freelance designers since most designers suck at coding, and developers usually suck at designing. I just started working freelance in my spare time and I partnered with a great designer. I write the proposals, he designs them. I do the development, client interaction and copy and he stylizes the photography and handles all of the site's design and user experience. Of course, I get a larger piece of the pie since I'm putting in more work, but he bids his services at full cost and he's doing well, too. On the job we're starting shortly we'll both be pulling in about $100 per hour. Although I've just started this partnership, I foresee it as being something great for both of us.
Great documentation! One fix on http://bvaughn.github.io/task-runner/#/getting-started/what-is-a-task page the "chaining task" link is broken. A couple of points of feedback on the API itself: * chaining: YES! * different types of chaining (parallel, etc): YES! * or function is weird, it's not obvious from the construction that it runs only if the previous tasks failed * passing in the success/fail callbacks in the chain function is weird. I would have expected them in the run() * why did you opt to use inheritance vs being able to pass in an object?
&gt; The problem is, due to its interpreted nature, traditional JS will never be anywhere near as fast or efficient as a desktop app properly written in a compiled language. Are you aware that JS engines have been compiling to native code for about a decade at this point? asm.js isn't faster because it's *compiled*. It's faster because it's *statically typed*. That's fine for many programs, but what asm.js forces you to sacrifice for that is garbage collection. The vast majority of web developers want to use a GC language, even if it's not JS. Using asm.js doesn't help them out at all.
Truly the most promising no-framework solution to all of our woes about Js.
Yes, I think the only way for now would be to embed the GC code in the asm.js "executable". I do think there is a case to be made for compiling to human-readable and at least somewhat idiomatic JS, which is possible if the source language syntax evolved alongside its JS transpiler. But I haven't seen anything approaching this for established languages with utterly incompatible primitives and abstractions. If the compiled JS is going to look like shit, why not make it look like a standard form of shit that can be optimized more effectively?
That's a nasty solution to something very trivial. If `var that = this` bothers you from a semantic standpoint, you can use something like `var _this = this` or `var self = this`. Also, with the soon-to-be ES6 arrow functions you'll have much more control over lexical scoping.
Browsers don't seem to be totally consistent on how they support touch. I've gotten Touch and TouchList to work on iOS's Mobile Safari, but I've seen weird behavior from desktop browsers, even when Touch and TouchList are present.
 RSVP.all(promises).then(function(res){ console.log('All done'); }).catch(function(res){ console.log('At least one failed'); }); Produces the same result(nothing gets printed).
&gt; Before anyone asks, I am not a fan of JSPM Mind expounding?
People putting "use asm" into code that isn't truly asm.js (hand-coded JS, most likely) aren't really an interesting case, though, and so aren't a fair comparison in the "some scenarios asm.js is much slower" remark. What is the source of Google's resistance to pursuing full support for the standard?
Other answers to this question are interesting, but note that a functional/portable asm.js also means that developers can build one version of their code in whatever language best intersects their environments (often C/C++, especially for game developers), and still have a potentially great experience for their audience on the web. In other words, with some consideration of my architecture, I can write one game in C/C++ (or other LLVM language), and ship it on mobile platforms and the web simultaneously, without doing backflips.
This was a fantastic reply. Have an upvote.
Pretty neat, also thought the RIP IE 6 tombstone was pretty funny.
IE 11's console is quite usable.
To be fair though Turbofan is still a long way from ready from these stats http://arewefastyet.com/
The y-axis should be labelled. Units are important. Don't make me skim the text just to figure out that it's requests per second. The graph should tell me that.
Aurelia looks interesting. It's how I imagine Angular if Angular weren't so awkward. I really wish their docs weren't JSPM first though. I'm sure all ten or so JSPM users appreciate it but for the rest of us it's just an annoyance that we have to work around. They also make some bold claims: &gt; As a result, we can easily out-perform a dirty checked system or a virtual DOM system. Source: http://blog.durandal.io/2015/02/03/aurelia-qa/ I would love to see some actual numbers. How fast do your circles spin?! ;)
Great, I haven't found this blog post before. It's a nice read, explains how is the aurelia currently standing.
I love this guy.
I might just use Aurelia on my next project. I don't care about ES6 support lacking in IE.
While I agree with your general reasoning, I think there is one important aspect that you're ignoring, and which I believe the V8 developers have ignored thus far. It is true indeed that invoking the asm.js compiler will have a non-zero cost. But, it is a cost that the developer intended and expects to have. What he gains from accepting that up-front cost is predictable performance at run-time. There are plenty of situations - I'm thinking specifically of games targeting asm.js through the Unreal or Unity engines - where it is desirable to have a slightly longer loading time as long as it results in stable performance (framerate) at run-time. Having a JIT trying to work its magic at the same moment when a game is trying to reach its framerate targets is a rather undesirable scenario.
So Microsoft will *only* support an old standard if I agree to purchase their latest Operating System?
&gt; Is the main problem with client-side web apps really that people aren't writing them in C and C++ I assume you mean more like "in a style similar to languages like C and C++ or similar languages" since while emscripten is a big part of the asm.js hype, it's not the only use case and other languages (including dynamic ones) can target it (as you note elsewhere, by shipping the runtime/gc/etc basically). I'm inclined to agree overall, but we might have a "if you build it, they will come" sort of scenario going on. I know I've had times I wished I could squeeze some more performance out of fairly straightforward "static" code, but that's mostly in little games and experiments of my own and not at my day job. I'm not falling over myself, but I'm curious to see what people do with it at least.
I don't want to use transpilers either. Its browser wars all over again. I'm not willing to bend over backwards while I wait 10 years for IE to catch up. ps. conditional comments were removed in IE9
I have no experience with Flux sadly. I just started looking into it. Probably the best thing you can do is to watch the presentation about Flux from the Facebook devs and make up your own mind: https://www.youtube.com/watch?v=nYkdrAPrdcw&amp;list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v#t=621
But IE12 / Spartan only seems to come to Windows 10 :-/
If you know 0 for smallest volume is going to come up alot then you might save a bit if you bail on the for loop in that case and switch to a simpler one.... var i, len, biggest= 0.0, smallest=9999999999.0, volume; for (i = 0, len = data.length; i &lt; len; i+=1) { // d = data[i]; volume = data[i].data.email.volume; if (volume &gt;= biggest) { biggest = volume; } if (volume &lt;= smallest) { smallest = volume; if(smallest==0)break; } } for (; i &lt; len; i+=1) { volume = data[i].data.email.volume; if (volume &gt;= biggest) { biggest = volume; } } In this case the 0 appeared at index 3841 so thats heaps it didnt have to do the extra check on. Also in micro optimizing += is considered to be faster than ++ 
Basically it means that the effort to write the same run-time optimization in C would make the code very unreadable.
that's because turbofan is mean to be an optimizing compiler run only on code which will benefit from it. Take a look [here](http://arewefastyet.com/#machine=28&amp;view=breakdown&amp;suite=asmjs-ubench) for some asm specific benchmarks which let turbofan really shine (and in a few cases beat native C++ code!) The hope is to one day have it replace crankshaft (the current jit) but for the foreseeable future it will only be another level.
You should also make sure z(id) actually gets called. And like u/g3bj45hg34857 said, check to make sure the requests are being made.
Hey guys, I want to thank you all for your responses, I asked exactly the same question on the PHP reddit and the responses where nearly the same. I'm still not sure wich ebook I'm going to buy, so if you maybe have a book to recommend me that would be nice! @akuts Since my PHP skills aren't really great, I prefer a book about JS that doesn't involve PHP to much.
Nice :)
The performance overhead doesn't come from binding, it comes from much longer garbage collection cycles when those binds have to be cleaned up.
I have some concerns about this, e.g. no composition of functions and indent hell in exit point calls when calling multiple machines. Time will tell. 
you cheeky fucker. I wish I would of had this three months ago. Truly breahtaking.
Cool widget. Are you talking to yourself though?
Is anyone actually doing that in real-world usage? I understand it's a *possibility*—though I'm not sure how bad the interop boundary between the two is—but the real feasability of this doesn't seem to be anywhere near the scale of the excitement that asm.js generates.
French people did that. There is an easter egg if you click the blason while, while you display tags.
The truth is, if you want to deal with big enterprise clients, there is no way you drop IE support. You can be lucky to support IE9+, but in most cases it is still IE8+ support to be mandatory, as half their userbase can simply be on IE8.
Wow. What a useless microbenchmark. It may not even stress JS performance.
The title is hard to understand, it makes it sound like this is a datepicker. In fact it's an Excel-like datatable, and in this release they've removed the jQuery dependency.
Im not really a book person when it comes to learning frameworks, if you're serious about investing time into learning node and mongo I would recommend this course [M101JS](https://university.mongodb.com/courses/M101JS/about). Its a **free** class given by MongoDB, Inc itself that teaches you how to make a blog with mongo and express. I don't think you have to know express or node even, but you should definitely know JavaScript (though they say its not technically required). For Angular, Code School has an [introductory Angular Course](https://www.codeschool.com/courses/shaping-up-with-angular-js) that's pretty good at explaining the most important parts of Angular. You can choose to pay to access the rest of the courses, which I think is very worth it. And of course no matter where you learn, **actually build something** using MEAN and ask questions while doing so. *Also you can me bug me on twitter @mythrilco I will not mind :D*
A more than fair point- the principle is that we center on a spec and then let the runtime modules deal w/ flow control (i.e. like A+ for promises- you can have q, bluebird, etc.) Also, you can still use async, promises, generators, etc- just need to do the standard thing you'd do when wrapping a node fn w/ a (options,callback) fn signature. I'm in this for the long haul, so please feel free to send feedback/ideas (i've been posting updates to the google group) Also, in the mean time, they way we're using machines in practice right now is to have a nice reusable boilerplate implementation encrypting passwords, doing facebook oauth, etc.
nice introduction, but you forgot tagged template literals, which are very cool: sql`SELECT * FROM SomeTable WHERE name = ${name}` In this case, a function called `sql` will receive the string pieces and parameters as separate arguments. This means it can safely do parameter escaping or binding etc, something that is really painful normally
This is a GREAT video full stack tutorial: https://www.youtube.com/watch?v=AEE7DY2AYvI Also check out https://leanpub.com/mean-machine by the Scotch.io guys... it's one of the best tutorials in ebook format I've ever read. Seriously, these 2 will get you up and running, if you want to go straight into building apps, rather then learning computer science.
Thanks for wasting our time.
You're not allowed (by specification : http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader-method) to change the following headers : Accept-Charset Accept-Encoding Access-Control-Request-Headers Access-Control-Request-Method Connection Content-Length Cookie Cookie2 Date DNT Expect Host Keep-Alive Origin Referer TE Trailer Transfer-Encoding Upgrade User-Agent Via
Yeah, I love tagged templates, but the talk was already stretching the time limits. Each section really deserves it's own talk! 
I am [Atom](http://atom.io) now. However, I generally install plugins for git, svn, Emmet/ZenCoding, JSHint/JSlint, Gulp/Grunt and a built-in server like Brackets has. I also use a Markdown renderer for previews.
I was talking about the title, STOP + "crazy" did seem like more than a personal opinion :P I'm glad you took my comment constructively. When many people use something that seems bad (like that / self) over something more idiomatic (like bind), there usually are good reasons to do so, sometimes you just haven't encountered those valid use-cases yourself!
I used "Write Modern Web Apps with the MEAN Stack: Mongo, Express, AngularJS, and Node.js." It takes you through the lifecycle of creating a twitter like app. It also covers user authentication, build automation using Gulp, websockets, testing, and deploying your app to heroku. Since this isn't a book on one specific tech, it'll broadly cover the topics previously mentioned, but it'll give you enough to go deeper if you choose too. 
That's exactly the point. I'm not saavy enough on GC internals to understand why, but I've had practical cases where rendering a couple hundred elements having a few (bound) function associated with each would cause visible lag from time to time. Switching to "that" solved the issue. In hindsight, it was probably because I was binding every function every time, creating hundreds of new functions, where I should have replaced the function once then passed it around (eg: in the constructor, this.someCallback = this.someCallback.bind(this))
I wonder, what year is this from? I was just watching part IV, and all of a sudden he says "Does anybody here know about this site.. YouTube" BTW: thanks for the link /u/bjpelcdev, I watched the entire series in the last 5 days. Great stuff.
sublime linter with JSHint seems to be missing some functionality I used to have in ST2... like pointing out unused variables. What are your settings for jshint, would you mind sharing? Appreciate the response!
In the first example, it could be way simpler: // return a boolean value indicating whether or not the word is in the sentence. return Boolean(~sentence.indexOf(word)); That uses the bitwise NOT operator first which turns -1 (not found) to 0, 0 to -1, 1 to -2, and so on, then the Boolean native function casts the number to a boolean, so that it returns true if the word is found in sentence, and false if it is not.
Sublime Text does just fine for my basic text editing and amateurish programming skills. Currently using it exclusively after trying out many text editors on windows, like notepad, TextPadm PSPad, Notepad++. Also Tried VIM and EMACS, but those two are too hardcore developer text editors. Sublime Text is just right. **preferred packages** * [Package Control](https://packagecontrol.io/) * [Readme​Please](https://packagecontrol.io/packages/ReadmePlease) * [Emmet](https://packagecontrol.io/packages/Emmet) * [Function Name Display] (https://packagecontrol.io/packages/Function%20Name%20Display) * [Theme - Soda](https://packagecontrol.io/packages/Theme%20-%20Soda) **settings change / update** * "color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme", * "always_show_minimap_viewport": true, * "draw_minimap_border": true, * "ensure_newline_at_eof_on_save": true, * "trim_trailing_white_space_on_save": true * "font_face": "Meslo LG L", * "font_options": ["directwrite"], * "highlight_line": true, * "indent_guide_options": ["draw_normal","draw_active"], * "show_encoding": true, * "translate_tabs_to_spaces": true,
There is nothing wrong with the 'else' statement. 
I think you may be confusing the functionality of the plugin with that of JSHint itself. The setting for pointing out unused variables is `unused`. There is also `undef`, and personally I use `node` and `esnext` for authoring node packages with ES6. 
I haven't gotten deep into customizing Sublime, so most of this is just small visual type improvements, here's the relevant part of my settings: "bold_folder_labels": true, "color_scheme": "Packages/User/Monokai (SL).tmTheme", "highlight_line": true, "highlight_modified_tabs": true, "scroll_past_end": true, "theme": "Soda Dark 3.sublime-theme" Then for the packages, I use GitGutter, Markdown Editing, SCSS, Sidebar Improvements, Sublime Linter (with jshint and scss-lint), and the Soda theme. Provides a minimal interface with scss support, file management on the sidebar, marks for git changes, and linting. I have a separate .jshintrc in the root of each project which is picked up by sublime, so I haven't had to touch the default settings for it.
I'm a little confused about where to put those in Sublime 3... it was in some JSON in the package settings in Sublime 2, but the format is totally different in 3... I'll figure it out eventually :-\
Yes, I switched from 2 to 3. The difference is pretty much invisible to me, I only did it to stay current because one of the extensions I was using didn't support 2 anymore. (This is meant as praise, I love Sublime.)
I'm in the middle of the mean machine book and so far it is fantastic. I can't fully recommend it until I get through it but I have to say it seems like a great way to get up to speed.
https://leanpub.com/mean-machine Very good book i'd recommend. Gave me a very good insight to MEAN
Put default jshint settings in a .jshintrc in your home directory, then custom settings per project in the root of those directories. Jshint will work up from where the file is located and use the first one it finds.
I don't know if you have more than 8 sliders, but if all the divs you are looking to use the transition function on id's all begin with "slider_", you could use the "starts with" "\^=" selector option to select all divs. $("div[id^='slider_']").transition({x: '100%'}); *will be my first reply ever, and don't know if I can put the code here like this, so my bad if it doesn't work 
I switched to 3 a couple of years ago. Pretty much the same thing (a little more stable/quick in my experience) and just about any plugin you would want is on both. My main plugin stuff I'm running is: * Less2css * Emmet * JSLint 
Problem with that solution is that then all the divs will transition at the same time. We need to utilize the callback somehow so that they transition in order, as in when the transition of div N stops, the transition of div N+1 begins.
Sometimes it's good to not forget about readability. I do myself tend to avoid unnecessary if/elses, but it may make it explicit for somebody who's reading your code for the first time, aka your coworker.
It's doing exactly that in `js/main.js` around lines 18-21.
Ah, ok. Just pulling things out of my arse right now; so don't know if this would work or not. And it appears I can use the pre tag. $.each($("div[id^='slider_']"), function(i,v) { v.transition({x: '100%'}); }); *edit: ok, no pre tag usage, but can use 4 spaces to trigger pre, thank you google.
 function slide(n) { $('#slider_'+n).transition({ x: '100%' }, function() { if(n&lt;8) slide(n+1); }); } slide(1); http://jsfiddle.net/Lt1rq036/1/
Get back [here](http://www.reddit.com/r/trees)
No problem!
Probably. I didn't see any.
Nice and compact solution without the need for variables outside of the slide-function scope. This is a good one!
hey I wrote that book! :)
How?...i thought it was well written.
"It seems there is an error in the console. Rewriting from last save." Nuclear holocaust in 100 years, minimum. 
I basically had the same opinion at first. After some time, I tried it again and currently I am quite happy with it. But there is still not *the* reason for Atom, except for the fact, that it is OSS. 
Just like /u/test6554 said with the sarcasm, with his comment actually being sarcastic by itself. The author tried way too hard with the jokes, and it came out unbelievably cringeworthy.
I was on 2 for a long time like you and recently got bored and switch to 3. It's a lot, lot faster. Sublime Linter for ST3 is very easy: you install SublimeLinter, then you manually install the linter you want to use, so install SublimeLinter-jshint, and have jshint npm package installed in your computer, and you are set to go.
I came straight to the comments to confirm my instinct: do not click to this blog post.
Looks like the service is not supporting JSONP. Put a script on your own server that is loads and cache the data ;) Why caching? &gt; Do not make more than 600 request per 10 minutes or we will ban your IP address. [HTTP API - Bitstamp](https://www.bitstamp.net/api/)
Guys, this is completely tongue in cheek. Where is everyone's sarcasm detectors?
I have been using ST3 for a couple of months now. Emmet is probably my preferred package. Unrelated to Sublime Text, but I would check out Grunt. Grunt is a Javascript task runner that introduces a lot of automation into your code work flow. I use JSHint and Uglify and Grunt allows me to run JSHint and then compress the code with Uglify, all on the save of a Javascript file within a specified directory. It is pretty neat and useful. Could be a starting place for getting to know the command line if you do not already.
Good guide, but performance is missing. A good rule of thumb is while/for is fastest, forEach cost double and for ... of is ten times slower. And it makes sense to write your own forEach using while/for, if the arrays have no holes.
Would you be so kind as to add this comment to the codingsight.com blog? Thank you!
Hi /u/jaywon, this post was removed because /r/javascript is not a job board.
&gt;Please.make_color({ base_color: "gold" }) I love polite code.
Agreed. When see that I have the urge to just refactor into this: return sentence.indexOf(word) &gt; -1
Thanks for your input, I agree, but I specifically omitted solutions like this one, because if you have this lying around a codebase where Juniors, Mids, Srs work, then you have a problem because some people won't understand it, and as far as teamwork goes, it's always best not to sacrifice clarity over brevity. If by any means you do have a good reason to do it -- 2x faster, IDK -- then do it and document it thoroughly.
My experience with transpilation mostly comes from using CoffeeScript, some JavaScript-to-JavaScript transpilation, LESS, and minifiers. I haven't used AtScript so maybe the experience is different for some reason. I do notice compilation delays with these tools. It sounds like you haven't. This is something I've always seen when I've worked with transpilers of any kind, and it gets bigger as the codebase gets bigger. Things I have in mind are the performance of `coffee --watch` vs `nodemon`, running LESS on a large stylesheet, or instrumenting jquery.js. Maybe I'm spoiled but I just don't like waiting two to five seconds when normally I can see my changes instantly. I've also been disappointed in the past with debugging these kinds of codebases. Source maps promise to make this all transparent, but that's not something I've experienced. When errors are thrown, I see transpiled stack traces; when I set a breakpoint and try to run the REPL, symbols are lost to minification. I end up having to keep two versions of the code in my head. And I can't type source-language code at a breakpoint and have it compile and hot swap into the VM. With plain JavaScript and DevTools I can do that. Maybe the tooling will get better in the future (or maybe it's already better and I'm not aware). Maybe the type system provides enough advantages to make up for this stuff. Personally though, I really enjoy the kind of feedback loop I get with plain JavaScript, and I always feel like I'm missing out when I wander away and dip my toes in transpilation. 
My intent was to save humanity.
&gt; There's nothing to discuss. What's the point of it? To laugh at a joke? I mean, sure, funny things are funny, but the article literally boils down to (sarcasm aside): ES6 is cool. Here's 3 new features. You’re absolutely right, it’s a bit of froth. Harmless fun if we see one thing like this every month, but a pestilence if it becomes a fad and everyone tries to game /r/javascript with click-baity jokes. Of course, some satire uses humour as a kind of social engineering to convey uncomfortable truths past our complacency filters, and that is always welcome. I recall the famous “Bastard Operator from Hell” stories, they were funny, but also carried with them a little bit of truth about how company IT politics work. Likewise, the parody “Fake Steve Jobs” (later outed as Dan Lyons) skewered Steve, Apple, and its customers while inserting some good social observations. Any ways, I ramble. Yes, I agree this is not exactly Mark Twain. I get why some people may not care for it. And I’m not criticizing criticism. Just pointing out that I personally find it interesting when the votes and the comments are not in sync.
I feel like it's Sublime, but better. Package installation is easier and cleaner, it's easier to change settings, the interface looks better, etc. I'm only using Atom now
How do we know you're not one of the robots? [](/squintyjack)
While I liked his post, I like [your reference](http://youtu.be/5hfYJsQAhl0) too! Conflicted upvotes for both of you! [](/raritywhy)
You have a possibility to do it with no javascript, just using three pages, but it's a kludge, so it depends if you find the result acceptable. On the first page, you put the question, and each answer is a link (if you produce your document with Word or OpenOffice it's trivial to make "in-document" links). On the second page, you put your "Wrong" message. On the third, you put your "Right" message, and the reader can go on reading if there is additional material. The wrong answers should of course link to the "wrong" page, and the right answer to the "right". The advantage of using links over javascript is that they're trivial to implement, and more or less standard so they're very well supported by readers. Even PDF previewers in web browsers generally support linking. That is not true of javascript AFAIK.
If you call it with callback=?, jQuery is expecting JSONP, so it will only handle it as JSONP, meaning you can't directly touch the data, but it is executed. If you call without callback=? you are expecting JSON in return, which means you can work with the data. However, since you are crossing to a different site, you must abide by the Access-Control-Allow-Origin, which in this case is not defined by bitstamp.net and meaning they are not allowing cross site access.
Ditched Sublime for Brackets, never looking back.
[**@jdalton**](https://twitter.com/jdalton/) &gt; [2015-02-20 00:59:54 UTC](https://twitter.com/jdalton/status/568575738086993920) &gt; Underscore 1.8.0 was bumped without testing (again). Massive test fails https://github.com/jashkenas/underscore/issues/2062 http://pbs.twimg.com/media/B-P8nviCIAAEmDq.png ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Well, I helped convert the Csound audio programming language to javascript using Emscripten. All the DSP stuff is in asm.js and the other stuff for controls, actually connecting to the Web Audio Api is in handwritten javascript. It works great, interfacing between the two isn't that much hassle either. More details: https://github.com/csound/csound/tree/develop/emscripten http://wac.ircam.fr/pdf/wac15_submission_14.pdf
Not to be a debbie-downer, but [XKCD927](http://xkcd.com/927/). Standardizing on a module system is good. Tons of other languages also standardized on their setup.py and MakeFile.PL, so if foo-machine.js is what the community wants, that's what it will get. The thing that's concerning is that javascript already has some big functional-programming features that it feels like this thing is side stepping, and I hope it's not out of unfortunate ignorance on the part of the developers of this spec.
Ridiculous, also some truly childish behaviour from /u/jashkenas here https://twitter.com/jdalton/status/568568521602412546
[**@jdalton**](https://twitter.com/jdalton/) &gt; [2015-02-20 00:31:13 UTC](https://twitter.com/jdalton/status/568568521602412546) &gt; Ah nice Underscore 1.8.0 has shipped! Unfortunately w/ the renewed competitive spirit Jeremy is back to his old ways. http://pbs.twimg.com/media/B-P2DsWCcAAZMDk.png ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
This is all in a Node.js server, so I don't know how to view a network tab. To compensate I added console logs to the callAPI function, which now looks like this: var callAPI = function(url, query){ var promise = new RSVP.Promise(function(resolve, reject){ su.get(url) .query(query) .on('error', function(){ console.log('Error on: ' + url); reject(this); }) .end(function(res){ console.log('Request: ' + url + ' Finished'); resolve(res); }); }); return promise; } If I do that, I can see x() call finishes successfully, then calls y() which each of its results (there are 20), and then all 20 of those calls return successfully. I'm kind of unsure what to do now.
I'm not entirely sure what you're asking... if you want to find JS devs to hire, then you might try posting somewhere like /r/ForHire.
You can download the playlist using youtube-dl and add it to the Automatically added to itunes directory to synch to your iPhone.
Is there a way to handle multiple exits with one block of code (without explicitly stating each exit name) or handle inverse exits? Eg: Http.fetchWebpageHtml({ url: 'http://www.example.com', }).exec({ '!success': function(exitName, result){ ... }, success: function(result){ ... } }); or Http.fetchWebpageHtml({ url: 'http://www.example.com', }).exec({ '!success,!error': function(exitName, result){ ... }, 'error,badRequest': function(exitName, result) { ... }, success: function(result){ ... } }); I suppose this would be prone to double callbacks if one isn't careful, however, this seems painful: Http.fetchWebpageHtml({ url: 'http://www.example.com', }).exec({ error: err, notFound: err, badRequest: err, forbidden: err, unauthorized: err, serverError: err, requestFailed: err, success: hurray }); function err(result) { ... }
Yikes. [Removing test cases](https://github.com/jashkenas/underscore/commits/master/test) after a huge breaking release probably isn't the smartest idea. I've been using Underscore instead of Lodash in a few projects, but I really need to reinvestigate this after today's events.
One of the Ramda founders here. The other founder and I are co-workers at a large, conservative company. We use pieces of Ramda all the time, but not yet the library as a whole. However we just submitted it into the obnoxious approval process and expect to be able to use it on projects soon.
The upgrade from 0.9-&gt;0.10 was just a matter of a few shell commands to search/replace. They are trying to stabilize the naming conventions before 1.0 - just part of the risk of adopting a framework before it hits 1.0 I guess. I'm using it heavily in a project right now, and the amount of effort it took to migrate from 0.8-&gt;0.9, then 0.9-&gt;0.10 was pretty minimal. 
i don't think that page does what you think it does.
`str.replace(/\s?foo\s?/, " ").replace(/^\s+|\s+\$/, "")` The last `replace()` is the equivalent of `trim()` for older browsers.
observable expressions are interesting! I wish they could also support that in all bindings
Be warned that (in a Major release, not a minor like underscore) lodash 3.0+ no longer has an underscore compatible build.
Why have you been using underscore? It seems it's only redeeming quality is backwards compatibility.
You might be surprised by the benchmarks. In many cases, Ramda outperforms lodash, and both far outperform some of the native implementations on key functions. I think the reason Ramda can do so well even though it has to take the cost of currying is that most of its functions have simpler signatures than the closest lodash equivalents. Ramda favors simplicity over flexibility. 
When I adopted underscore for those projects, lodash wasn't out yet. It's been one of those "well, it isn't broken, don't touch it" sections. But now I need to reinvestigate ;) Edit: I should add that I was under the assumption that Underscore followed semver. [That assumption was definitely in error](https://github.com/jashkenas/underscore/issues/1805). 
Nothing from jashkenas in there; got a screenshot for posterity? EDIT: I'm dumb and missed the big ol' image from the tweet where @jdalton was blocked from the repository.
This is a very bare bones example: http://codepen.io/nicktho/pen/dPmQoN There isn't just an api to get started on with this. I suggest having a list in the client like in my example and just iterating through each one. You could have a server with an endpoint like /fact and give it an id and get a returned fact, but its a bit overkill for something like this. 
Actually that looks like what the site you have linked is doing, except they are choosing a random item form the list, I've updated my codepen to reflect that: http://codepen.io/nicktho/pen/dPmQoN
Angular sucks
Go fuck yourself
Um...huh?
Preferring smaller modules (in theory) prevents these types of fuck ups from affecting too much of your codebase
To be clear, those are my thoughts as well. I think if this sees traction it will be in the languages you mentioned or new one's designed to leverage it. Usage of things like python would be fairly restricted to situations like playgrounds and whatnot imo, there but a small minority. Note also I mentioned caching for a reason, also it may be possible to trim down the size of those runtimes or write alternate implementations.
I know that, I still don't know who are the clients, I think we'll have to go with at least IE9+, which is still not that horrible. But it's better if you don't have to do it at all :)
We have used Ramda in production since one of its first releases and are very happy with it. As far as problems with its API and renaming functions - definitely be careful. We use my tool next-update https://github.com/bahmutov/next-update to check if the upgrade is possible (requires unit tests). We also use lodash in parallel, so getting the best of both worlds I guess.
Yes it seems promising. I've tried browserify + coffee (coffeeify) with gulp and it was a pain in the ass, I've spend the whole day just to set up the thing. It was due to lack of knowledge in gulp or browserify, but still, it was too much pain just to make it work. I got to a point where I started thinking to just drop the coffee and do the project in js.
I get where you're going, I believe so myself. The less dependancies, the better. But for a project with partial SPA, where I work alone on whole front end - js, html, css (we have designer, but I'll have to turn design into css) and it has to be done by the end of the year, I'll have to rely on few dependancies.
I know, I saw the post on /r/ProgrammerHumor and thought it expresses web dev dreams nicely :) If I were to do this for real, I would develop a webpage that will have a link. It's not confusing and helps the analytics.
I recommend you to try gulp, it uses piping of the sources, so only io it does is reading source files and writing it after all processing is done. You can chain transpilers and perform all sorts of actions over files (coffeelint, compile, sourcemap, turn es6 to es5, merge files etc.). It's why I think gulp is better than other tools, if you do it correctly it's much faster. I agree that with large projects, the delay can still be seen sometimes, but it's going to make your workflow at least somewhat easier.
Maybe we should just start using small modules that use semver instead. http://amp.ampersandjs.com/
You might like Webpack better. &gt; Yes it seems promising. JSPM looks interesting but it's been around for a couple of years and it hasn't really taken off: http://www.google.com/trends/explore#q=jspm%2C%20browserify&amp;geo=US&amp;cmpt=q&amp;tz= Browserify's **daily** downloads are nearly three times JSPM's **monthly** downloads and Browserify is still gaining traction.
Hop off your snowboard this slope is closed, that's a ridiculous comparison 
Right. I was thinking browser, but those `console.log`s do just fine. So... I've just tried your code, exactly as is just pointing to some local urls, and it works for me without problems.
Sublime linter - jsx hint - babel syntax / code highlighting - hackable - left folder thing plugin - snippets - flow lint - customazae lint warning and config - changed everything.
Upgrading from 2.4.1 to 3.1 broke lodash for me. It made a data mangling procedure that used to take 10 seconds take upwards of half an hour, with cpu pegged at 99%. I downgraded back to 2.4.1, which fixed it, and wrote an ugly for loop to do what I was wanting to use flattenDeep as a part of. Can't say I'm overly thrilled with the latest version of lodash.
That is a major version change. I would expect things to break. 
Also: Don't upgrade for no reason. Upgrade purposely. Do your own testing also. Don't treat a package manger as an instant zero effort "keep it all upgraded" system.
Not good enough, underscore: http://jsperf.com/array-slice-underscore-lodash-native/6
Wow. Don't get me wrong that's the right decision, but the way they went about this is *shady as fuck*. OP and lodash dude are trying to go all house of cards on us
Nothing shady about it. It's all open. I don't even have a stake in the Backbone thread. Just there to clear things up.
Why are you on such a crusade all the time? 
If an arrow function has only one parameter, you can omit the parentheses: &gt; [1,2,3].map(x =&gt; x*x) [1, 4, 9] 
&gt; you sometimes have to resort to this practice because architectural constraints I really think you don't have to. Either you keep all invocations of asynchronous processes in one location and orchestrate the relaying of the results to other processes etc, which would be the ideal I was describing. Of course you can create a promise local to "processData" (bad name.. but I guess you just use it analog to a [metasyntactic variable](http://en.wikipedia.org/wiki/Metasyntactic_variable) here) , which would make processData its own asynchronous subprocess, which can be better than having to have aforementioned one location grow into gigantic proportions. I really think you don't ever have to feed in promises. You might have to aggregate multiple independent processes into one overlying promise, but I think that's it. Can you give an example for a situation where this is necessary, better than these alternatives?
Could you elaborate a bit ? What is an underscore drama ? I mean, where's the split, what's wrong with it ? 
Its not entitlement or arrogance, it's simply calling out repeatedly bad behavior of a project maintainer. Do you want to depend on a project that could potential break your revenue driving application simply because it was first to market? Hell no. Use something like Lo-Dash that has a maintainer that cares (potentially too much) and doesn't publish breaking changes on a minor release. What stress exactly are you talking about? Backbone hasn't seen a release in almost a year... And you're spelling his handle wrong which makes you seem like a troll. Edit: Really sad how r/javascript upvotes those who defend terrible project leadership and downvotes those who are sick of it.
At the same time, any "non-rookie" dev would catch this problem in their *own* unit tests before a production deployment, right? So it doesn't have the potential to disrupt a non-rookie website anyway. 
Not blindly no, but if you have an install step and didn't shrinkwrap, it's entirely possible it could affect an arbitrary nested dependency.
/u/jdalton during all this: http://i.giphy.com/Htrxz6kRzRlQI.gif
On the contrary I really enjoyed this post, thank you for sharing. This post have just convinced me to at least try it out and make something. I was having so many fights with angular and the fact that v2.0 is backwards breaking makes my dev blood boil because I can never leverage from new framework features when it gets released without rewriting :( This seems to be technology agnostic so I can really use it anywhere. td;dr - I am definitely trying it out
Well that's troublesome.
Remember kids underscore doesn't use semantic versioning it uses [sentimental versioning]( http://sentimentalversioning.org) 
jashkenas "doesn't believe" in semver. This happened with CoffeeScript not a month ago with 1.9.
That is great to know, thanks. Makes me love them even more.
Wow guys... this is way more than I expected. Thanks :) Though I kinda was going to try to teach myself how to do all this. You'll definitely shorten my project time though. :)
I think you both started from a slightly defensive place which is unfortunate because I think you're both right. Butthurt aside jashkenas is a powerful javascript force to be reckoned with. He has inspired fantastic paradigms to make day to day javascript better and should be commended. Having said that, I have used all three projects you're most likely talking about (Underscore, Backbone, Coffeescript) in full-time projects and I've grown to hate them all. Lodash is well maintained, faster most of the time and generally managed better. Coffeescript is a travesty and I think most people have stopped using it for the same realization. Backbone just doesn't do anything and he's quite adamant about it staying that way.
Or just don't upgrade immediately upon a version release.
I wrote a longer reply below, but it was fairly negative so I'll add some constructive criticism here - Forcing callbacks everywhere is a bad idea. Synchronous code does not need them at all, and async code has promises to encapsulate them all neat and tidily. - If you want to have multiple possible return values/states, and you don't want to use exceptions, then simply return a value representing this. (i.e. have a wrapper type Success(x) / Failure(x). Using callbacks to handle multiple return values is horrible. If you want to get fancy you can turn this into a monad and hide the flow control behind generator syntax so the errors then just flow through like exceptions would. - There are much simpler, cleaner, more advanced, more powerful, more useful, and standardised forms of type annotation that exist today. You'd be better off leveraging existing projects. You could spend a lifetime trying to compete in this space and fall short - type theory is *hard* to get right. - You should decouple your metadata from your code. More specifically - don't fuck with the function itself. Throw as much proprietary metadata into the module as you want, but allow me to just call your function and use the result directly. tl;dr Just use plain old Javascript functions. Do not corrupt them in any way shape or form. Provide additional decoupled metadata that can optionally be used as part of your module if desired. Molesting my nice clean functions is worse than forcing me to use an AbstractFactoryFactorySingletonBuilderImpl in J2EE.
You can get help for basic unix and linux commands at http://www.unix.com Here is the man page for the unix/linux "ln" command which will help you: http://www.unix.com/man-page/linux/1/ln/ 
I don't know what more to tell you. Sorry. I've tried to prepare an online demo just in case you want to see it... but http://www.tutorialspoint.com/execute_nodejs_online.php won't let me generate a "share url", so... Well, you may go there, do an `npm install rsvp superagent` in the console, paste the following code in main.js and run it... compare with your code, compare with running locally... var RSVP = require('rsvp'); var su = require('superagent'); var callAPI = function(url, query){ var promise = new RSVP.Promise(function(resolve, reject){ su.get(url) .query(query) .on('error', function(){ console.log('Error on: ' + url); reject(this); }) .end(function(res){ console.log('Resolving: ' + url + ' id:' + query); resolve(res); }); }); return promise; }; var x = function(id){ return callAPI('http://www.json-generator.com/api/json/get/csziIPMAya?indent=2', id); }; var y = function(id){ return callAPI('http://www.json-generator.com/api/json/get/csziIPMAya?indent=2', id); }; var z = function(id){ x(id).then(function(data){ var promises = data.body.ids.map(function(newID){ return y(newID); }); RSVP.all(promises).then(function(result){ console.log('All promises fulfilled'); }); }); }; z('1'); (The json file used is just `{ ids: [1,2,3,4...] }`)
That's beside the point. Version numbers have been pretty standardized as far as meaning for decades. You don't change the api in a point release, it makes people very angry when they hit unexpected bugs caused by dependent library changes during smoke tests and it pushes their dates back. 
Check out textillate: http://jschr.github.io/textillate/ I've had pretty good luck with it. I can't see offhand if they have the exact filter you want, but you may have better luck building the filter within their framework anyhow.
One of the "libraries" had three rows of actual code
&gt; You don't change the api in a point release, it makes people very angry when they hit unexpected bugs caused by dependent library changes during smoke tests and it pushes their dates back. Even if the vendor follows a policy to only makes breaking changes in major releases, they might still inadvertently introduce a breaking bug in a point release. You can only catch these bugs by having tests in your own code for what your software needs to do. This way it doesn't matter whether or not the vendor follows semver, if your tests pass then you have confidence that your software works.
Of course. Still beside the point. There is no reason to add any additional confusion or risk. Remember that most software projects are not perfect with 100% unit test coverage and continuous integration. 
Lodash is a small module in this example. Angular, Ember, etc would be examples of "larger modules."
Didn't they say that node and io were gonna join again, once Joyent gives up total control over node and establishes an open governing body? I thought that was the whole point.
This was reverted in 1.9.1. Try it out. 
Hi figurine89, take a look to [this tutorial](https://www.youtube.com/watch?v=n5NcCoa9dDU&amp;list=PL6il2r9i3BqH9PmbOf5wA5E1wOG3FT22p), it seems a very nice one to start learning d3.js
he also broke the coffee-script 1.9.1 for us by renaming __extends to extends etc. funny that it is the same person :) 
IE8 and below deserves to be broken
Thanks - I've read through the documentation that's there and looked at the examples but there's a "step" of inherent javascript knowledge that I lack. What I really need is some kind of lightweight guide/tutorial like the ones on the github wiki. I went through the ones that are there and they were very helpful, but it looks like the tutorial for parallax hasn't been written yet. Edit: I haven't seen this parallax sections example though - this might do it! I'll keep you posted. Thanks for the help so far! 
I never been called a concern troll before. Is that a good thing?
Ah yes. I love yolo versioning. 
It's concerning.
Thanks. 
still need to consider whether or not that will happen. If it doesn't, and it might not, then they need a roadmap in place.
lol
If only npm would remove wildcards from version numbers :(
After breaking constructor methods shadowing parameters in 1.9.
&gt; every minor version bump I thought 1.7 got bumped to 2.0? How is this on 1.8?
I had a look and it seems to cover what I need! Sadly though, the tests and examples don't seem to be working on Firefox or Chrome. There don't seem to be any errors in the Javascript, except a missing file (I used a substitute file to cover that up). Would you know what I could do to fix this? 
So it is not not a number?
You should always run concrete versions of 3rd party libraries to your code doesn't break if they break, and only bump versions when you need to.
The fact that you never upgraded or took the time to do so has nothing to do with my, correct, recommendation that external libraries should not set the schedule of your project. Your project still needs to be managed properly so that when upgrades of those libraries are needed the time is taken to do them properly. Don't conflate the two concerns.
How do you deal with collisions with a hash implementation? 
I agree with OWaz's comment. You can find the summary of Murray's tutorial at http://alignedleft.com/tutorials/d3
/u/jdalton's been very thorough about addressing every issue opened on the repo. it's wonderful to go through the discussions there to see how a well maintained repo is managed.
That's funny to me. I first started using underscore so I could use map, filter, reduce, etc in IE6/7. Not sure if IE8 was even out yet.
e.g. http://stackoverflow.com/questions/17007997/how-to-access-the-get-parameters-in-express-js-or-node-js http://stackoverflow.com/questions/6912584/how-to-get-get-query-string-variables-in-node-js is that what you want to know? its using express
A typical implementation would use a linked list or an array to store unique values.
using node: &gt; require( 'url' ).parse( '/calculator?method=add&amp;x=2&amp;y=3', true ) { protocol: null, slashes: null, auth: null, host: null, port: null, hostname: null, hash: null, search: '?method=add&amp;x=2&amp;y=3', query: { method: 'add', x: '2', y: '3' }, pathname: '/calculator', path: '/calculator?method=add&amp;x=2&amp;y=3', href: '/calculator?method=add&amp;x=2&amp;y=3' }
I think there's two general schools of thought in open source. One is mostly concerned with the health of the project. The project does not belong to anyone, and if the original creator is not able, or willing to do a good job of maintaining the project, then it would be preferable for him to step down and leave the project to someone else, and if he doesn't want to, then, like any robust ecosystem, the community can and will route around the problem. Fork the project, rewrite, reimplement. The other school seems to be more focussed on respect for the initial creators. The creator is brilliant, and we should all learn to live with his eccentricities and be thankful for the brilliance he has bestowed upon us. I think I've made it pretty clear that I belong in the first group. This is a common problem. There's been many such conflicts over the years, see also Joyent vs. io.js or John Gruber vs. the Markdown community. So here, as well in the other cases, I'm with the open source community, rather than the creators. P.S.: You might want to rein in your assumptions about my age a bit. You seem to be rather badly off the mark.
I think you know exactly what it means. I appreciate your talent and work on lo-dash, but the way you interact with people online and in person can be unnecessarily rude and really off-putting.
Agreed. In my mind, arrow functions should be used with about the same frequency ternary operators are. If you can write something cleanly in one line, use arrow syntax. If you're writing large method definitions, fall back to function() {}.
That actually looks like exactly what I need, thank you!
I was thinking it was a type of bread.
Coffeescript proves again that it is a clusterfuck of bad ideas. 
You don't really seem to know how to behave as the author and sponsor of a competing library. You think because you're being polite and nice you're not being rude. Maybe you've spent so much time as the underdog you don't know what to do now that you're close to the top. "Barely disguised glee" is how you've been acting during this. Your pride at having driven a library through supplanting an extremely popular competitor is getting the better of you. ...I mean, don't think I'm holier-than-thou, I was dancing, hooting, and hollering when Angular 2.0 was announced and Angular devs were upset. The difference is, I'm not really affiliated with a competitor. It would be far more prudent to remain silent when your project benefits because another stumbles. Maybe go out for some drinks, quietly, with some of your teammates. Instead you're just... _there_, in every thread about Underscore's business, innocently whistling and "just there to clear things up." You know what's more petty than blocking someone on Github? Bragging to the world that apparently you've driven someone to block you. 
Maybe I posted this out of anger, but I believe that anger was justified. I maintain a number of projects that depend on Underscore (simply because they depend on Backbone). The majority of Jeremy's changes before releasing 1.8 were actually on [contributions I personally made](https://github.com/jashkenas/underscore/pulls?q=is%3Apr+author%3Athejameskyle+) in order to improve Underscore. I know all too well how tough it is to be a maintainer on projects. Between Marionette, Babel, and many of the other projects I either created or help maintain, I know what it's like dealing with users of OS projects. The difference is that yesterday, before these changes, Underscore 1.8 could've been released to fanfare. The changes had been discussed thoroughly and were great additions to the library. Instead a lot of last minute (breaking) changes were made (which I won't repeat here) which lead to the current (IMO justified) outrage. This isn't entitlement, this is people's livelihood and it's a big problem when maintainers don't give a shit about it.
"a sort and remove the dupes" is n\*log(n) as long as the sort is n\*log(n) and why wouldn't it be. And, just like /u/spinlock said, if using a hash table is worth the log(n) and sort is not needed, then it can be cut down further.
Ah sorry I didn't check to see if it worked and it looks like it may be abandoned. It's probably using an old version of the spec.
After using Pry in Ruby, the lack of a good REPL in Node is physically painful. One of the things that I like about Meteor is that you can basically use the Chrome console as a REPL during development.
Hi /u/dluecke, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `medium.com/@daffl`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [medium.com](/search?q=%28and+site%3A%27medium.com%27+author%3A%27dluecke%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|4|67%
No one said you can't use the function keyword anymore. The arrow operator is just for lexical scoping of nested "this".
Except that your example is superfluous, not concise. I am not trying to be clever, just succinct. Using `~` in conjunction with indexOf seems to be implied by the return value, think about it. Why would it return `-1` instead of `null` or `undefined`? 
For what it's worth, it'd be preferred if you had linked directly to the blog post to begin with. The link you submitted is just a link to the front page of their blog, and so a few weeks from now whenever they make a new blog post, your link will be confusing and invalid.
fadeIn and shuffle seems to do what OP wants.
Yeah part 2 is what i ended up doing. Need to try out the es7 features though too, as i agree it's much cleaner. Thanks a lot for the response :)
Here are the three tutorials (from Bostock himself) that helped me hit the ground running. D3's underlying selection framework is really the magic, so it's best to understand that. [How Selections Work](http://bost.ocks.org/mike/selection/) [Nested Selections](http://bost.ocks.org/mike/nest/) [Let's Make a Bar Chart](http://bost.ocks.org/mike/bar/)
Mostly a branding thing I guess.
It is not a number.
Great book! I learned from it too. But also a super important factor in learning D3 is to actually do some cool stuff with it. Got a CSV of your sleep habits? Graph dat shit!
And now there's a server-side equivalent - `meteor shell`!
it'll do what it wants to
You can also use a promise library that supports spread(), I believe. 
You can also do this: let Hulk = { name(){ return "Mr.H" } }
Exactly, so why not take advantage of the fact that the bitwise NOT of `-1` is falsy? Once you learn it, it's very straightforward and more elegant than checking `&gt; -1` IMO. btw, `Array.prototype.includes` is part of the ES7 proposal, not ES6. That has no relevance to the example though.
If you're using promises, make sure you are catching them. promise.then( doThings ); can silently fail. You (sadly) need to: promise.then( doThings ).catch( error =&gt; console.error(error.stack) ); 
You tell me
&gt; 1.8.1 — Feb. 19, 2015 — Diff — Docs &gt; Fixes/changes some old-Internet-Explorer and related edge case behavior. Test your app with Underscore 1.8.1 in an old IE and let us know how its doing...
Yeah me too...my bad. I realized it a little late and I didn't want to delete then repost to fix it. 
If only the darn thing wouldn't constantly crash on my system. 
Use spread or return objects with the data you need.
Indeed, at the beginning there's just too much information to take in at first
It just might not be very well supported on 32 bit systems. :/ Definitely try their issue tracker or #flowtype on freenode, though, they're very helpful (if a bit busy at times).
And it seems this is due to you (though you modestly didn't mention this)
well your examples or non-existent but this looks interesting. Let me know when you have a Getting Started guide.
why do you need beginners? don't you want to learn from the masters? checkout meetup.com
Well, I honestly wouldn't dare take credit for any of the hard work put into this by the Flow team, but granted, I was involved. :) I'm just very excited by what this means for the JavaScript ecosystem at large, as now Flow makes it possible to add typing gradually to any library without affecting its users. Similar to how your project won't break if lodash decides to start using ESLint for static analysis: the source is still 100% valid &amp; standard JavaScript, there's just a few pragmas here and there that help their tooling, but won't break yours. Same here. Though with Flow-comments, there's the added bonus when you pull in a library that happens to already be Flow-annotated: your own Flow-enabled project will immediately be smarter for it, as the types will propagate through your require()'s. Sure, you would have been able to achieve most of this through combinations of build steps (e.g. compiling from TypeScript to JavaScript for distribution, generating a d.ts definition file for type-aware consumers, etc). With Flow-comments, it's *just a JavaScript module*, no build-steps or support files required upstream or downstream. And best of all, you can completely ignore it if typed JS isn't your cup of tea. Finally, this also happens to play really well with existing conventions such as separate dev/prod builds: during development you'll see all the annotations along with your source, and for production, most sensible build systems strip comments away anyway. Again, no changes required to existing tooling. All in all, a great day for JS the community. :)
I can also see a scenario where TypeScript transpiles down to Flow-comment-annotated JavaScript.
&gt; The robots aren't coming today, they are still reading the ES6 spec Indeed, I am sure that Kyle is a robot. They’re a writing *machine*.
Correction: CoffeeScript 1.9.x changes something that was an undocumented implementation detail. And this developer wrote code relying on this undocumented implementation detail. Obviously, the author is entitled to use CoffeeScript however they want, and, *in the absence of a formal spec*, to interpret for themselves which features are canon, and which are unreliable accidents. But the behaviour discussed here is not given in any documentation as CoffeeScript behaviour. It directly *conflicts* with what is documented. If you wrote a blog post suggesting that people use this one weird trick, you’d attract more than a few comments suggesting you’d be crazy to use it in production. In the end, this is not about semantic versioning, because this behaviour is not part of the semantics of CoffeeScript. I won’t say the author was ridiculous to depend upon it, they have their reasons. But it is ridiculous to lecture the author of the language about which behaviour is and isn’t part of the semantics of the language.
Ternary operators are a little different, we have had them for decades, and the consensus is that they are hard to parse visually. They’re a clear case of brevity hindering readability. Whereas, we have had arrow-like notation for functions in other languages for decades, and the consensus is that they are easy to read. They’re new to JavaScript, so they seem difficult, but that will pass. I am very comfortable that programmers just getting into JavaScript will have no idea why anybody wouldn't like them. My personal suggestion is to use arrows when you don’t care about the things that `function` give you. So use arrows, except: 0. If you need to write a recursive function, use `function name (...)`. 0. If you want to have a readable stack trace (which is often!), use a named function expression or function declaration. 0. If you want to put helper functions at the bottom of the code so that the main thing is at the top, use function declarations. 0. If you care about `this`, use the function keyword, for example if you’re writing a true method or a method decorator. 0. If you care about `arguments`, and don’t want to use parameter destructuring, use `function`. 
Double plus good
why
Reminds me of being warned not to bypass the kernal jump table. 
Or the famous SimCity case of freeing memory... AND THEN USING IT, because the Windows of the day did not move it or wipe it or mark it as prohibited memory. Microsoft boasted of having a special SimCity flag to maintain the old behaviour for SimCity, and to be fair, the change in behaviour did come with a new major revision number. But then again, there were a LOT of other changes, it’s not like they bumped a major revision when they changed the way accessing freed memory worked.
I haven't really been following Flow, but this seems pretty much exactly like what Google's Closure Compiler already offered. I'm curious what might make one prefer Flow instead? (Honest question.)
Also if you go for a book, try something updated after 2013-2014 and if you're learning right now try es6, it will be easier for you in the future.
Comes from: https://github.com/aemkei/katakana.js
Its a much less verbose syntax (think jsig, not jsdoc), and is completely optional (annotate only what you want).
Yeah, I don't really like that it's not Brainfuck, but calls itself that. Seems a little disingenuous.
&lt;3
Well I don't want to come here and say "I want someone to teach me Javascript for free" But if a group of beginners got together we'd be learning from one another and we wouldn't be imposing upon one another.
Is there a reason they didn't use JsDoc? I already have my code annotated with that ...
Part 1 of this blog post: http://www.hammerlab.org/2015/02/14/testing-react-web-apps-with-mocha/
Yes, it's possible. In your javascript event you can stop the form from being submitted, preform a ajax request instead, and on success you can update any part of them dom. There's lot's of tutorial for ajaxing a form submit out there if you want to learn more about it. 
I was actually wondering if it supported a syntax similar to that, but I suppose not.
Thanks, I will :)
curlmyip.cfapps.io
Hmm, Closure's basic type checking (what I see in these examples) is no more verbose and is equally optional. (Things without type info are not checked.)
Sorry op, this one was faster for me. 
event.preventDefault() look into that
I'm not quite sure what is blocking the Flow type checker from working on 32 bit boxes. I have a hazy memory of someone telling me the reason. The Flow type checker is built using a bunch of infrastructure from the [Hack](http://hacklang.org/) type checker, and probably some piece of that (maybe the shared memory?) assumes 64 bit. This was probably not a big deal for Hack, since to run Hack you need HHVM and HHVM only runs on 64 bit. In any case, I've opened [a github issue](https://github.com/facebook/flow/issues/270) to track this. Thanks for reporting!
Try [JSFuck](http://www.jsfuck.com/) too!
$250k *per year*
https://github.com/malachaifrazier/JavaScript-Interview-Questions https://github.com/anatolyg/javascript-interview-questions I hardly interview, but I used to have to give them from time to time. I would focus on knowing what the questions are that are going to be asked before you go in... the information isn't that hard to get. find people that work there and hit them up on twitter, or find work that the company is doing and look through it. Literally you could call in and just ask one of the engineers. Its a very common occurrence to do "Informational Interviews" just pretend (or actually be) interested in finding out more about the company from someone that is in a similar role as you would be in. Bribe them with beer. You'll learn a ton... you might find out what working at the company would be like too.
&gt; buzz words Some of the things you mentioned might be, but I definitely don't consider hoisting, or knowing what this does, or method chaining, or async, or closures, or angular directives (depending on the job you're applying for) to be 'buzz words'. They're huge parts of what you do as a javascript developer. You might have experience, sure, but time spent doing something doesn't necessarily mean much if you can't talk about it competently. All the things listed are pretty standard things to ask about, and know about, to do your job. Maybe you know these things instinctively through experience, but how am I supposed to know that if I ask you point blank and I don't get an answer? Someone with years and years of experience who doesn't know what async means, or closures? I'd think you're either a permanent beginner or someone who's somehow gotten by for years with copy/paste. Sorry dude. And maybe that's messed up, but there tons and tons of blogs and resources out there explaining these concepts, and i'd think it's weird that someone with so much experience wouldn't know these things. I'd take my chances with someone else, preferably someone who doesn't dismiss core concepts as buzz words. Anyway, I recommend The Good Parts, Javascript Design Patterns, Functional Javascript and Programming Javascript Applications. Those are my favorites for fundamental javascript concepts. But there are tons of great books out there. I also like jster.net for news on the latest js stuff, few tutorials but lots of analysis of the latest frameworks, know when updates are coming out, etc.
Ah, ok. Thanks for elaborating. :)
How well does the new comment syntax play with 6to5/babel? I've never been able to use Flow since I've opted for the more advanced 6to5/babel language features. JSDoc annotations will survive a babel transformation. I'm hopeful something like this will survive the transformation? let foofar = (foo/*: number*/, bar/*: string*/) =&gt; { return foo.toString() + bar; } Have you had trouble with any particular babel ES6+ syntax/feature/implementation with your annotations?
Bear in mind I might change this api sometime, so check for version somehow. Or use github commit RSS or somethin? I will try to keep consistency between versions
Wasn't aware of this one, it's not positioned well in google. I used http://l2.io/ip.js for quite a while now, and their responses are slow usually. Mine should handle ~110reqs/s
I'd imagine the version of Acorn Babel/6to5 depends on should also receive support for flow comment annotations. It's kept up with facebook's esprima fork admirably so far.
I wrote it, I posted it. Had some issues with the original reddit post, so figured I'd repost correctly.
Woah.
Very neat trick!
This is quite easy to do with vanilla javascript so I'll show you a quick example. Although you can easily do this with vanilla JavaScript I'll save some time and show you how to do it with jQuery. (function() { 'use strict'; $('#my_form').on('submit', function(e) { e.preventDefault(); $.post('/path/to/server_side_component', $('#my_form').serialize(), function(result) { $('#my_dom_node').append(result); }); }); }());
google: mdn function apply
No, you've got it confused. A nested function already has access to all of its enclosing functions arguments. That's called a closure and is powerful concept by itself. apply is used when you need to call a function and tell it explicitly what ` this` should be set to.
I liked reading this but completely missed the point can somebody explain the knockback?
Thanks. I may be way off base here but I'm trying to keep this as simple as possible. I want it to be one page with out any real backend at all. I'm not even sure what '/path/to/server_side_component' or '#my_dom_node' Are in this case. I had this project before as a flask app. Maybe I'm going about this in a more complicated way? Here's the project: https://github.com/DGrutt/simplecomparison/blob/master/index.html
It seems the issue is that the interviewer had firm notions of how the problem should be solved. When the carpenter took it out of left field and made a completely different solution, the interviewer likely took it as an affront to their methodology and responded accordingly. Whether or not this is correct is irrelevant to the matter of getting the job. You're just as much programming against the person as the problem. You have to account for their biases and views of how things should be done, or they'll be less than flattering on your scorecard. That being said, a *good* interviewer won't hold these types of biases, and you likely don't want to work under someone who acts like that. A good interviewer will step back, examine your solution of its own merit, and discuss things with you to see if you know what you're on about. Think a kid in the candy shop. You show me something new in an interview and I'll likely be very interested in how it works, or ask questions to see how it holds muster.
Yeah I did that but was trying to get some more clarification
Look into the lodash functions invoke or memorize for good real world examples
Now that I look into it a bit more, I agree that they are very similar. They both: - Are able to infer some types (https://developers.google.com/closure/compiler/docs/js-for-compiler) - Support one line annotations (https://github.com/google/closure-compiler/wiki/Using-JSDoc-Annotations-with-Closure-compiler) - Support declaring object structures (aka. structs) - Are annotation-optional Can anyone else chime in with differences? The obvious one is jsig-style vs. jsdoc-style, though Google does support a jsdoc style that's really similar to jsig (eg. Closure's `@type {function(string):boolean}` would be `(String): Boolean` in Flow's syntax).
Touche, I guess I missed that second part.
How common are these questions in interviews. The programming interviews I've been too they just wanted to know about my past experiences and about which development paradigm I like to follow, etc. I've yet to be asked to white board a code segment. 
Shim is a software development concept that can be found across the field. Polyfill is a web-exclusive concept. 
Ah ok now that I see a bit more code I understand. I've created a pastebin with some minor tweaks which should hopefully set you on the right path. http://pastebin.com/Px2tchhD 
An event object is basically just a built in type, and you pass the e argument to your function because all event handlers first argument is the event object itself. This gives you access to the event in your handler. https://developer.mozilla.org/en-US/docs/Web/API/Event
You're likely to get asked these kinds of interview questions at hot startups or the big 4 companies.
&gt;Was the only one frontend dev in shop with couple other backend fellas providing API, and then a graphic designer. That's it. This situation lends itself to [cowboy coding](https://en.wikipedia.org/wiki/Cowboy_coding). When you are only concerned about doing your own thing with no code review or feedback loops, it's very easy to be sloppy about architecture, testing, documentation, if you are the only person who will ever read it. Regarding "buzz words": if you had asked me what a closure was when I started working, I wouldn't be able to answer you because at the time my vocabulary was limited, even though I was keenly aware of how function scope worked. The best way to familiarize yourself with vocabulary is to read docs and blogs, they will refer to concepts that you probably already knew from actually coding. 
paddles move too fast.
I am not sure what you're trying to do but it sounds like want a default object and merge in a custom object ontop of it. Its much easier to use `lodash`: `var opts = _.extend(defaults, custom);`
cool!
That's generally a good indication that you don't want to work there. If you can't ask questions about what you are supposed to deliver, how will you ever deliver what they want?
In general... only at companies dealing with serious data analysis (re: google), or companies where the interviewer wants to make themselves feel smarter than you (re: shitty silicon valley startups). IMO, if I got asked a question like this, I'd end the interview right there, as it has absolutely nothing to do with my expertise. Either the job description and initial screening were way wrong, or it's a hostile work environment.
I could name a few startups that have asked me these kinds of questions, meanwhile they've got some garbage code on the frontend. All ego, no substance.
When an event is triggered (on mouseclick for example). You get passed an event object, this object simply contains some information on the event. So say you listen for an event function thisGetsCalledOnMouseClick(event) { // event contains a lot of information about the mouse click // such as, what HTML element was clicked? at event.target // what are the mouse coordinates when the mouse was clicked? var x = event.clientX var y = event.clientY // if you want to know anything else the event object contains, check out mozilla's documentation // https://developer.mozilla.org/en-US/docs/Web/API/Event } window.addEventListener("click", thisGetsCalledOnMouseClick); So now that you now what an event object *contains*, I'll show you where it comes from, and why you need to "put the e" in the listener. Consider the following, you are writing a digital book. You want to play a sound every time the page gets turned, the sound should be a voice that speaks out loud the current page number. One way to program this would be to make use of custom events. var onPageListener = null; // this function gets called every time the book's page gets turned Book.turnThePage = function () { // check if the listener exists if (typeof onPageListener === "function") { onPageListener(Book.page); } }; Book.addPageturnListener = function (listener) { // the passed parameter "listener" is a function, yes, you can pass functions to functions in JavaScript! if (typeof listener === "function") { onPageListener = listener; } }; // here, the programmer can "listen" for page turn "events" // Note how I type page here, not event, you can call the parameter anything you want, I could have called it "bobby" if I wanted to. Book.addPageturnListener(function (page) { voice.speak(page); }); So, what's going on here? Every time the book's page gets turned, it checks if there is a function called **onPageListener**, if there is, it will **call** that function and gives it a parameter **page**. The **onPageListener** function then gets executed, and it speaks out your current page. Now compare this with a mouse event Every time the mouse gets clicked, it checks if there are any **mouseClickEventListeners**, if there are, it will **call** those functions, and give them a parameters **event**. The **mouseClickEventListener** function then gets executed, and it does whatever you told it to do. So to recap, the **event** parameter contains some information about the event that occurred. And the parameter itself comes from what gets passed to the event listeners when the event happens. I hope this clears it up.
Sorry, i'm in "studying for interview mode" right now and probably a little more pedantic than usual :)
I'm curious about you hating MVC, what's your methodology instead?
Thank you, sir. Though I'm not quite sure is there like similary clear and concise solution with use of promises?
Hi /u/ryokimball, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
So much this. It's pointless to differentiate the two terms. You can use them interchangeably and no meaning is lost.
I would love to be on that list one fine day, but till then you can watch my talk on [ES6-generators](https://www.youtube.com/watch?v=ZrgEZykBHVo&amp;list=PLuoyIZT5fPlG44bPq50Wgh0INxykdrYX7&amp;index=1)
angel.co
its an object that contains the event. the `event` has properties, like who triggered it, whether or not you want to prevent the default behavior (like submitting a form or following a link). and a ton of other properties. Every event is passed an event object.
didn't work for me.
they both effectively do the same exact thing (letting you define what `this` is inside the function. The only difference is one will pass an array of arguments and the other will past arguments as seperate parameters.
If you're testing a database abstraction layer itself, it may be better to use an real in-memory database as part of an integration test. If you're testing something else that uses this abstraction layer, and that layer exposes an easy to mock interface, then mock it. By the sounds of it you're doing the former? Attempting to mock an actual database can be counter-productive since the behaviour you're testing for potentially depends heavily on specific and subtle behaviour of a complex external system. If you're just testing against a mock, you're only testing that it works in a fake scenario. That said, it can be useful to use a mock database to capture and verify generated SQL is correct and return fixture results - in which case you'd absolutely want to mock the mysql connector. If you go for constructor injection, you won't need to do any voodoo with rewire. &gt; I adhere to only testing the public interface of an objects, so that the private interface can be optimized independently of the outer API's spec. I fall into the camp of preferring to test private methods as well, ideally with property based testing (i.e. Quickcheck). Being able to test the internals can make it much easer to build up a 'proof' such that you can be much more confident in the public APIs that use them. Obviously this is a debated topic, but do consider whether it may be worthwhile testing internals on a case by case basis as well.
I was interviewing for a position a few years ago for a startup that had Andressen's VC money behind it. Only time I've had to play these stupid games. Everywhere else just asks you to solve problems similar to what they're working on. 
Oh no that's not what I meant. Do both! You can find work but keep working on the other stuff too
Thank you very much for your reply. I see your point that there are some objects you may want to strictly dictate the inner workings of (like in my case for a database abstraction layer and performance reasons). I think in this case it would be smart to have direct and deliberate control over the queries sent. Thank you again.
Maybe, if you ask an open ended question like that. If you ask the question with what you think they might be looking for as answers you should be fine. It's helpful to dump your thought process and over communicate (by everyday standards) while you're in front of a whiteboard in an interview.
The single best thing about designing for the web is the, not by choice, open source community. Embrace it. Take and contribute. It's brought us further than any other.
It sounds like you don't know what you're doing to be honest.
Quoting myself, &gt;"Then again, I am new to js.." Wow what an ass.. please downvote this troll. I DONT know what I'm doing, which is why I'm even here to learn. As for others, thanks for clearing it up :P I am just trying to find out what the standard is.
woah, i didn't know jsonip pulled that much traffic. sometimes, its the simple things!
He's also used Hebrew characters and does lots of other crazy things with not much code: [https://www.youtube.com/watch?v=G11vj2XiAtg](https://www.youtube.com/watch?v=G11vj2XiAtg)
.NET doesn't do anything you can't do yourself. Javascript needs to be unencoded to run in the browser so there are no special tricks there. 
I'm honestly not a big fan of that solution, I more prefer the run-sequence plugin, it keeps your code a bit cleaner.
The MVC paradigm is extremely OOP. I don't like writing OOP code in this language, because it is a massive amount of boiler plate without any benefit. I don't need prototypes or classes to achieve inheritance or conserve memory in this language. The benefit of MVC is to modularize functionality between code logic and interfaces. JavaScript is sorely lacking of a standard approach to I/O or modules, which creates a gap for things like MVC to fill, but this solution is not any better than the problem it attempts to solve. The Facebook React approach is better because it is a more functional approach (opposed to OOP) which is a better fit to JS.
¡Ay, caramba!
The author seems to have chosen [John Carpenter](http://www.imdb.com/name/nm0000118/) references to add anonymity. The article is full of them: 'The Carpenter' as the protagonist, Bob 'Plissken,' 'Thing' software, 'Christine.'
same
Just an FYI but since 4.4.0 the code generator now deoptimises it's output when passing in large files. You'll get a warning in the console but it should compile **signifcantly** faster.
I'm working with this lib. It's great for simple tasks: split words by parts of speech, get numbers, transform words, etc. I'm use it in my education angular app.
I don't understands why everybody's reacting to this like you peed on their Wheaties. It's a perfectly reasonable question. Yes, your concerns about the plain text state of client side code are dead on and the best answer to the web-based intellectual property issue is certainly server side code, since it never comes across the wire to begin with. It is awfully rare though, that anything written for the client side is interesting enough to steal. 
Very cool!
The punchline is "writes unreadable code" when in reality, the code is very readable and well reasoned. The idea behind the punchline is that the interviewee is so experienced, that he is beyond that of the interviewer and company The Thing as a whole.
I see; thanks. I haven't uploaded to GIT yet but I'll redo the post proper once I do. 
Is it really than high? I work for a top 500 Alexander ranked site and ie8 counts for less than 1% of our revenue at this point 
Thanks man!
Thank you for the snarky response. I am assuming you also gave me the downvote because I got the notice, then five minutes later, your response popped up. My comment did not violate any rules of this subreddit, nor reddit at large. Secondly, you are wrong. Saving an entire scope is not 'virtually free'. Like, my initial comment said, it's like a bad polyfill. It allows programmers to write sloppy code instead of actually forcing them identify what their application is trying to accomplish. You can put all sorts of things in a scope including, for instance, several other functions, references to outside variables or libraries and even HTMLCollections. Attaching "var that = this" is a lazy way out. I also was not advocating bind. Having said that attaching a scope to a function by wrapping it inside of a new function is not ideal; it extends the look-up chain and can only be used for only one specific task. Having said that, one or two bind calls in a script file that is hundreds of lines long is not necessarily bad.
I built this in my spare time to solve a problem I was having with pre-loading content behind tappable tiles on a web-app. It's easy to know when a user is hovering over a tile with a mouse, less so when they're on their phone. I'd very much appreciate any tips for improvement or other feedback. :-)
Hi, i can help what was the error message ?
The difference is that it is JavaScript OOP rather than trying to be Java OOP. Functions + dynamic objects + a few primitive constructors is the JS way, but doesn't map as well to MVC (I agree with you about that). React is OOP, but doesn't look like regular OOP because it works more like JS should (as contrasted to things like YUI).
1.8.1 ripped out a bunch of unit tests to make things pass, not really fixing much. 1.8.2 attempted to further fix issues but hasn't fully worked them out.
&gt; I am assuming you also gave me the downvote because I got the notice, then five minutes later, your response popped up. You guessed wrong and I also wrote that reply 3 days ago. http://i.imgur.com/SHHiedB.png The comment karma is hidden via user CSS, in case you are wondering. I don't know how much karma your comment got and I also don't care. I also don't care how much karma my own comment got. &gt; Saving an entire scope is not 'virtually free'. Is that what VMs are doing? They can do whatever they want as long as the language semantics are preserved. They most likely waste a lot of more space with the native code they are generating. JS' runtime-semantics are pretty weird. Compared to the Dart VM, V8 has to generate a lot more native code. E.g. a simple function with a loop requires about 3 times the amount of native code in JS land. A few references here and there are nothing. But feel free to create a test case where this=that *somehow* makes a measurable difference when it comes to memory consumption. I don't think there is a semi realistic scenario where you could actually pull that off.
If you're being asked a "time-wasting" question like this checkerboard/drunken-walk one, it's fair game to respond like this. The problem is that the interviewer didn't say what she wanted from the exercise and the candidate didn't ask.
There are no classes in JavaScript. There are certain ways to mimic classes though. Your exercise encourage bad practice in MY opinion. You should find some other source to find exercises. 
I'd start with learning what a "class" is in js: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
tried that link and about 50 others, it is difficult to put things together so far. As I was saying, i got stuck. This is what I have done so far: function Person(name, surname, id){ this.name = name this.surname = surname this.id = id alert("Buna. Numele meu este" + this.name + this.surname + "si am id-ul" + this.id) } function Student (id_card, average){ this.id_card = id_card this.average = average } Student.prototype = new.Person() Student.prototype.constructor = Student;
The presenter in the first video is really hard to follow, and I've been following ES6 for a couple of months now. 10 minutes on why its called ES6 and then 10 seconds on a particular new feature of ES6.
you're on the right track. You also need to call the Person constructor from the Student constructor. So instead of `Student()`, do `Person.call(this, name, surname, id)`, and `Student` will also have to accept name, surname and id parameters.
bad practice or not, "classes" are extremely common in JS, so knowing about them is good.
Is it an allowable option to use ES6 classes? :)
Many of those are core concepts, not "buzz words". I'm surprised you're able to make it past initial phone screens without that.
The problem here is much of that list really is unfair to expect every frontend dev to know. - "callback hell": The concept matters more than the term. A good interviewer would write a pyramid of doom on the whiteboard and ask how to refactor it. Should we really care if he has heard the term before? - "closures": It's a bit more unusual to not know the term here, but again, the concept is what matters, not the jargon. - "constant vs literal": another example where asking "what's the difference between this code snippet and that code snippet" is the better interview question. - Angular directives: this one is just ridiculous on its face. Not every frontend dev should know Angular and there are good arguments [that nobody should](http://larseidnes.com/2014/11/05/angularjs-the-bad-parts/). Moreover, if Angular use is a requirement for the job, it's probably better to select for someone who learns quickly than someone who has mastered trendy-framework-of-the-year. - "hoisting": this one's pretty important to know, but the definition is *really* fussy. I generally award points if people can get it close to correct. Even experienced developers often have to look up the particulars every now and then. - "var vs this": this does seem pretty basic. Any good JS developer should be able to explain the difference here. - "polymorphism": Another example of a jargon-first question rather than testing for knowledge of the concept directly. I'm generally skeptical of asking people to explain CS concepty things, especially people without CS degrees. Ask a question that reveals an understanding of the concept instead rather than just asking for the definition of the term. - "asynchronous functions": This is a fair one. - "method chaining": Also fair. - "strict vs identical operators": Too jargony. Better to ask what the difference between == and === is. TL;DR: this profession needs less jargon and more straight talk.
Stopped this very specific program in js, rather, never said quit developing altogether.. ok and according to your logic, if I got hired on a closed app and I took your advice, I'd be fired very fast. I enjoy open source, but it doesn't get me a job.
I basically had a similar idea, but got stuck in caching mechanisms. I wanted to have a proxy that also does the ad filtering, so that Android (or mobile devices in general) see less spam and content that will crash the mobile eventually. So the vision of the project was to have a more efficient internet for mobiles, like the GSM compression proxies that inject JS and stuff. I'm using it also to connect to Hype. So my proxy has some parsers in place for the AdBlock filter lists: https://github.com/LazerUnicorns/node-adblock-proxy Maybe it makes sense to combine the efforts of both projects? I saw on a quick look that you use an SQL driven database, is this the storage for the cache? I'm a fan of filesystem based website caches, I think it would be great for having mirrored websites that you can browse locally in some kind of local webarchive. I eventually want to build a Chrome/Opera extension later, where I can say "scrape this website's content and archive it properly" of instead allocating Bookmark Nr. 9001.
Thanks a lot for your help. I actually changed and went to angularjs. Hopefully I'll be able to get the same functionality using this. Here is what it looks like now: &lt;!doctype html&gt; &lt;html ng-app&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;AngularJS Email App&lt;/title&gt; &lt;link href="css/style.css" rel="stylesheet"&gt; &lt;/head&gt; &lt;body&gt; &lt;div ng-controller="TestCtrl"&gt; &lt;textarea name="A" cols="100" rows="20" ng-model="title" placeholder="Write a title here"&gt;&lt;/textarea&gt; &lt;textarea name="B" cols="100" rows="20" ng-model="title2" placeholder="Write a title here"&gt;&lt;/textarea&gt; &lt;pre&gt; Results: Words in Both: Words in First Box Only: &lt;h1&gt;{{title}}&lt;/h1&gt; Words in Second Box Only: &lt;h1&gt;{{title2}}&lt;/h1&gt; &lt;/pre&gt; &lt;/div&gt; &lt;script src="lib/jquery-v1.11.1.js"&gt;&lt;/script&gt; &lt;script src="lib/angular-v1.2.22.js"&gt;&lt;/script&gt; &lt;script&gt; function TestCtrl($scope) { $scope.title = "BOX A"; $scope.title2 = "BOX B"; } &lt;/script&gt; &lt;script&gt; var str= document.getElementById("A").value; var res = str.split(", "); document.write(res); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
This is the answer I"m looking for , cheers.
Yeah, I agree with all your assessments here. I think i was a little harsh, but mostly I just took issue with the blanket statement he made in his initial post, that all these terms were 'buzz words'. Cause, clearly, a lot them aren't. Anyway, you're right in that a better interview would focus more on live coding or 'how would you do x' type questions, as opposed to throwing a bunch of jargon at someone. 
Run it through uglify.js or Google's closure compiler. Then it will take more effort for someone to figure it out. But they can use that same tool to re-beautify your code (somewhat.) Uglified or not, it will still be possible for someone to scrape your site and upload it elsewhere. To make that more difficult, you'd need to hard-code your domain into the URLs of the files you load, check the navigator URL, check for parent frames, etc. Then if you want to make it difficult for someone to simply change those URLs and checks, you'd need to obfuscate the code that does that, like encrypting/decrypting URLs on the fly or breaking up your function names into string parts and reassembling them, hiding domain checks around different places in your code, etc. An app that requires server-side functionality would of course be far more difficult to steal as they'd have to re-engineer the backend. But if it takes you more than a few hours work, it's probably just wasted time. A determined person could always figure it out (just as they can with compiled C# or even C.) And as others have said, it's unlikely anyone will want to steal your code anyway.
&gt; Any competent person can reason about the code and reverse engineer. I really mentioned at least twice that 90% wouldn't bother with it or don't know how. Just troublesome enough to where it's not worth doing. You have fun reading the first 3 words and commenting? &gt; If you need to protect your idea then build your brand in the marketplace, associate the brand to the idea, and protect your brand. My point: I prefer not to do that (too much money, time, and 100% outside both my profession and interest), so I'd rather grab a code snippet to make the code troublesome for people to view. Just troublesome enough that most people will leave it alone. I'm also thinking about employers -- my current job, each release they obs. their .net code. There's cracked versions out there, but not as many as there'd be if it was open to the world. Then I wouldn't have a job.
That doesn't answer the question. What benefit to your product are you adding?
well said.
&lt;3
Apply with a resume / portfolio of your work. If you can't get a position without experience, try looking on for-hire sites like freelancer.com to get some clout.
Everything is a jungle at the beginning. Try to have a project template. And improve it over time and over projects. When you have improved it to a point where most of your workflow becomes "systematic", then doing anything becomes 10-20x faster. Know your core libraries in and out and know why you use them and when to use them. As an example: I use [Backbonejs](http://backbonejs.org) as a library in my project templates. I write my models and then comes my views. I use [L10ns](http://l10ns.org) to localize all my text labels. Then I write my templates. And everything becomes like a circular flow. In my objects—I have dedicated method names that I use and I document them so my team mates also know when to use them. And I don't import a lib unless it is necessary. I never use view component libraries either since customization is a hell. 
I'm a frontend developer for a quite large company. If you want a job, writing readable code is obviously mandatory - how else would any employers be able to judge your work? If my employer would ask me for obfuscation, that's the same thing I would tell him.
I deliberately wrote it to be obvious that the path the Carpenter took was not a good one, but I also wrote it to be that Christine’s response wasn’t good either. Sitting in silence while a candidate digs themselves into a hole is ridiculous. Sure, we can make up a little story that this person must have trouble understanding requirements, but that is post-facto rationalization. If the candidate seems to misunderstand what you want, guide them before they’ve taken up an hour explaining a good solution to the wrong problem. Christine could have and should have said, “No, don’t make it an iterable, just fill in the blanks, there’ll be plenty of time to discuss iterables when my colleague Laurie Strode asks you to solve our other pet problem, finding cycles in a graph.” :-)
Yes, in fact for all we know, Christine could've just left the room and come back later, or simply fallen asleep, and Carpenter would've been just talking to himself. Which, of course, is also not a good way to do an interview on her part. Ah, well...
Awesome project! As an aside, I really don't like the underscore naming convention for javascript. It's just fine for languages where that is the standard, but the Javascript de-facto standard is camelCasing.
When I first read your post I assumed you were just inexperienced and naive. Turns out you're actually willfully ignorant. Nobody will care enough to steal your code, and if they do, there's nothing you can do to stop them, aside from filing suit for copyright infringement. Just accept this fact and move on.
Yup, I've added a link on the page, [here you go](http://mcarter.me/movver/demo/). It'll only activate on touch enabled devices.
is that really the de-facto standard? I've seen quite a lot of JS libraries with underscores, especially on the node side of things.
I haven't really seen anything written with underscores on the node side. Can you point me to anything "big"? Thinking about it, the only time I see underscores, are when it's something that have been translated, or transpiled from a language that uses the underscore style. Either way, if you look at any of the larger libraries, or frameworks, you will find camelCasing. And, if you look at any style guides from any of the larger companies out there, that make big frameworks, or big sites, or apps, you will also see camelCasing. I'm not sure if I have actually seen a style guide from anybody with a say, or from any company that releases one, that does not use camelCasing.
Hi /u/Davesjoshin, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `bitpi.co`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [bitpi.co](/search?q=%28and+site%3A%27bitpi.co%27+author%3A%27Davesjoshin%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|16|73%
Fat arrow is good, but (like .bind()) can easily cause serious bugs. Because of this, it's not even close to a replacement for 'function'. Consider the following code (contrived to make the idea somewhat simple): var __slice = Array.prototype.slice; var extendWithFunc = function (fn, obj) { return fn.apply(obj, __slice.call(arguments, 2)); }; var myExtend = () =&gt; { this.newData = __slice.call(arguments, 0); return this; }; var newObj = extendWithFunc(myExtend, {some: "object"}, "a", "b", "c"); When you run this code in the browser console (not Chrome as it's fat-arrow function does not comply with the ES6 spec), you will now have a brand new 'window.newData' object because the 'this' of myExtend is irrevocable (and forever) bound to the global object (the same issue exists no matter what scope though). Most importantly, this fails silently and is very hard to debug if you haven't read the spec (all you see is that the 'this' of your function is messed up for some mysterious reason). Let's go over why this happens. In JS, there are **two** different 'this' types. The first is the usual 'this' (called *ThisArg*) and the second (called [[BoundThis]]). If [[BoundThis]] exists, then *ThisArg* is ignored. var add = (a, b) =&gt; a + b; //is very close to var add = function (a, b) { return a + b; }.bind(this); Because .bind() sets [[BoundThis]], if you use .call() or .apply(), or even .bind() at any time on the bound function, they will be ignored (including things like .map() that may also change 'this'). It's worth re-iterating that all re-bindings of 'this' silently fail. For this reason, you shouldn't use .bind() or fat arrow to return functions (your function consumers shouldn't have to read your function to use it).
Thank god.
\*sniffs\* why don't you take a shower first, and then come back. Didn't you have some sort of running water in the cave? :) So yeah, javascript is everywhere, on the server (node.js, npm), in embedded and micro-boards (https://tessel.io/ - just found this now, don't even know if it's the most popular).
&gt; Did I miss a memo or something? At least a decade's worth.
About 20 years ago with the introduction of server-side JScript in classical ASP. Then .Net, Rhino, etc. (I might have the orders of those wrong, but it's been around since at least ~'96) It only really became popular with Node, but I've been writing server-side JS since ~2000 (I was working at an ASP shop and like JS _significantly_ more than VBScript)
Finally! This has been one of the major annoyances I've had with debugging JavaScript in Chrome. 
Hi /u/WallStArb_throwaway, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
&gt;Finally! This has been one of the major annoyances I've had with debugging JavaScript ~~in Chrome~~. FTFY. That message is a bane of my existence.
Well, Firefox has gotten it right for as long as I can remember ("TypeError: foo.bar is not a function"). I think even newer IE versions have a good error message for this.
Emphasis on newer. Old IE (where I tend to have to lurk) always was the problem. If you could even debug the damn thing.
Debugging on old IE is easy, there's a helpful function called `alert` that provides all the debugging power you need. alert('here 1'); doStuff(); alert('here 2'); doMoreStuff(); alert('WHY IS IT NOT WORKING?!'); Or you could try DebugBar or the Microsoft Script Debugger that only work half the time :P I had to support IE6 at my previous job. So glad I don't need to worry about old IE any more, I feel my quality of life has improved as a result. How old is the old IE you need to support? 7?
What I really loved about Script Debugger was its tendency to kill (or otherwise fuck up) the IE process when you closed it. Maybe that was just my dev machine. Debug Bar was useful if you wanted to run the process at 50% of an already slow speed by not closing it before hitting refresh... It's the different worlds of hurt that I particularly disliked. Debugging IE7 is an alternative hell to debugging IE6. Running into the wall of not-quite-fully-implemented APIs in IE8 is also fun. It's like asking which torture you prefer, having your toenails ripped out, your fingers crushed or your balls tazed?
Feel free to tell me in person at the next conference.
JavaScript: we name everything differently, just because.
At least, I am not as sick as with the time were everything was about Angular.js. Compare to those times, the React propaganda is a little bit more tamed. And in oppose of Angular.js, React bring some practical concepts and worth to the table. But this days I would prefer that [Elm](http://elm-lang.org/) became be more popular :(
Recently I began using the fabricJS library for work and about a month into it I bet I've rewritten more than half of my project with new stuff I keep picking up about the library. Learn by doing and keep refactoring. 
Not long ago, I had written about the use of apply and call ([link]). They do the same thing with a single difference. They both allow you to call a function by changing the context of the keyword this. The second parameter is where they differ, apply allows you to pass an array of arguments, while call allows you to pass an infinite number of comma separated list of arguments. See link for example [link]: http://idiallo.com/javascript/how-to-use-call-and-apply-in-js
Awesome! That's a significant improvement - down to 4.827 seconds from several minutes! Thanks! I'm still probably going to go with the AST-in, AST-out route, but your responsiveness on gitter and here really makes me feel confident in the project :)
really? clicking the link and seeing that the error was `if ( foo.bar )` was really that difficult?
I have to support ie8 and it's such a pain, you would think that ms could have figured out ie6's mistakes 2 versions later, sadly not. 
I wish Chrome Canary worked on Linux! I'd love to have this for my upcoming work week.
Will certainly make life easier
Why did you bother commenting on a submission about React then? You might not like it, but those who have used it or familiar with how React works all agree that React.js is the best thing to happen to front-end development in a very long time. Don't knock it until you have actually tried it. React.js is brilliant and I have exclusively moved away from AngularJS and front-end frameworks in general in favour of React.js + Flux architecture for building performant web applications. Coupled with React Router and you have a powerful set of libraries to build great applications.
Gotcha. Thanks!
Super cool! Here's another project in the same space general natural language facilities for node https://github.com/NaturalNode/natural
I'm a front-end developer as well, though I try to avoid jQuery and just use vanilla DOM. It is actually a pretty common practice but with ES6 there is less use for calling functions directly using `call` or `apply`.
The thing is though, that's only for those with giant reputation -- can't afford/time to build up that high. If I was rich and prosperous, sure
The open source contributes are rich and have a lot of time on their hands. I've already contributed to my free products when I had the spare time in collegle, but now I need some money making ones on the side, as do you guys too
"Because I told you to" is probably what they would tell you. Of course if you have the source code it's readable.
It is not *impossible* to implement it using `forEach` (you can do it, but terribly inefficiently). The problem is "breaking" from a `forEach`. Because `forEach` is not designed to `break`, it is designed to run on all the elements of the array. Read [the yellow note here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description). You *could* use `every` as suggested, but of course, since you are trying to implement `every` that does not seem like a good solution.
O no he dinnt'
At least at some point, the code must be machine-readable. With interpreted languages like JS, machine-readable means mostly also human-readable. All that someone who wants to "steal" your code has to do is intercept the program at the point of deobfuscation. There's no way anyone can "fix" that. Sure, I can easily implement code obfuscation, but it'll be a waste of time that can be used better by improving the product. That is what I would tell my superiors if they were ever inclined to ask for code obfuscation. In addition, there are rather good disassemblers for .net and compiled java files. Code security is not about stopping others from stealing your code, but about stopping them from stealing your user's data.
Thank you for the article. It is simple and understandable.
http://jsfiddle.net/u8L8pu4e/ Just remove .toLocaleString() so it is jldsalary.value = rounding(xm); Hope this helps :D
Thanks for trying. removing reformat and toLocaleString will work. The input result must be in comma format. But Google Chart wont show if there is comma in value. i need input result to Google chart without comma.
FRP is not a new paradigm. Newly popular, yes, but the ideas have been around for quite some time. 
There was an error in previous post which cause it not to work. It has been updated.
Its parseInt I updated
 var xxx = reformat(jjldslry); // i need jjage and xxx in data.addRows. data.addRows([ [0, 0], [tage,tslry],// jjage and xxx here instead of tslry [100, 0] ]);
http://snag.gy/y3xdr.jpg This was just taken. I think it is that? Perhaps type a few times change the data? It it just not working onload?
Use http://jsfiddle.net/6qotzjk2/2/ Your version is fucked.. Also this is has a way better reformat function.
Your reformat function in version 7 is nonsense. Just use the jsfiddle i provided below
Didnt realize we moved. http://jsfiddle.net/6qotzjk2/2/
lol. i am newbie in javascript.
NOOB ON!
I think the "™" is a jab at Joyent's handling of their Node.js trademark. The "legacy" is pretty funny, though. It'll only be legacy if the Node Foundation doesn't manage to find common ground with the io,js TC.
Reddit gave the hide button to you / Gave the hide button to you / Gave the hide button to everyone
Nice observation, but can't we just avoid using `this` in arrow function and still achieve the needed?
&gt; Just troublesome enough that most people will leave it alone. This is an archaic line of thinking that has historically been shone to be completely ineffective and not based upon any kind of evidence. 
Can't this be a plugin? It could only make sense marketing-wise to include this as a part of the core. There's already the Starter Kit (https://visualstudiogallery.msdn.microsoft.com/d65d6b29-6dd7-4100-81b1-609e5afce356), why not extend it for JSX support?
Cool! I feel as we progress we might end up using`this` very less frequently, as we did with `new` ? recursive functions are very much possible with arrow functions right? Strongly agree upon "readable stack trace" :) 
I always thought everyone was too rough on IE6. It's the browser that gave us Ajax. It had a lifespan of ten plus years and it was only toward the second half of that that you started running into stuff that it COULDN'T do. Usually it would do what you needed if you tried hard enough. Of course, the day I stopped having to support it felt pretty good too. 
Now if only they could make VS2013/15 easy to uninstall. As much as I love it, sometimes the best fix is a clean install. As it is, it's easier to reinstall Windows and all of your stuff than to remove VS. Kinda silly.
Same, I'm a big fan of Typescript but the two things holding me back is the lack of JSX support for React and the limited ES6 support in comparsion to 6to5(babel) and tracuer - mainly generators and destructing amongst others. There are hacks such as https://github.com/jbrantly/ts-jsx-loader for JSX in TS, but they're far from ideal.
Right now I am dealing with an IE-only (latest version) SVG bug not present in Chrome/Firefox/etc. Remember, IE is the never-ending suck.
My guess would be that Typescript support for all the ES6 features would come shortly after the browsers decide to implement them. &lt;sarcasm&gt;I've waited long enough for full ES6 support, what's another few months&lt;/sarcasm&gt; Yeah I saw the same hack in [this](https://www.youtube.com/watch?v=9PTa9-PPVAc) talk. I wouldn't be comfortable using that in production code.
To be fair the IE sucks drama was not made up for the lulz. Microsoft continually put out a terrible product that ignored or outright flipped the middle finger to web standards for years. How many thousands of hours have been dumped into working around IE bugs, quirks, and intentional non-standard implementation. 
Historically by what means? If any software that's ever made money by selling their software thinks the way you do, they would all be broke and still working out of their garage. Your comment is 100% wrong for those that wish to make money. For a hobby? Sure, open source all the way. For a job? No.
You apparently did not read anything I said. &gt; At least at some point, the code must be machine-readable. With interpreted languages like JS, machine-readable means mostly also human-readable Yep, and that's good enough, like I keep saying in my previous posts. Between machine and human readable sounds great to me. &gt; In addition, there are rather good disassemblers for .net and compiled java files. Like I keep saying like a broken record to a hopeless child, I'm not aiming THIS high where my shit's so good people will want to decompile it and such. Sigh.. &gt; Code security is not about stopping others from stealing your code, but about stopping them from stealing your user's data. 100% irrelevant .. I'm not even talking about user data. I may not even have user data in my app, so yea it's pretty much just about what I said and not what you said.
cool! thanks! I remember listening to a [JSJabber podcast where they interviewed](http://devchat.tv/js-jabber/101-jsj-js-git-with-tim-caswell) the creator of [JS-Git](https://github.com/creationix/js-git). Didn't realize other people were working on the same thing. Gitlet definitely seems a lot more easier to look through to see how it works. I'm amazed that something like Git could be expressed in just 1000 lines of code (even if it's a paired down version which I'm only assuming it is) 
Also should be noted that this is Git for Node, not for the browser.
You are welcome! :)
I agree. Its way faster to install the actual OS than VS in my experience
The other browsers have their own unique bugs as well, it just depends on what you're working on which browser will bite you. Browser specific bugs, even in IE, are pretty rare nowadays. It's not even close to the horror we used to have.
https://github.com/creationix/js-git
Nice project, i'm using it for our application in a basic natural search.
&gt; I'd warn everyone to not turn this into something like the never-ending "IE sucks" drama. There's no comparison between the two. IE's abysmal track record in following web standards made life HELL for developers the world over, for years. Some of us still have to support legacy IE6 applications. 
I thought io.js wasn't considered production ready? I'm alway weary of switching to a library before the people making it say it is production ready. 
Holy crap. Hopefully that's only used in an intranet setup?
FYI: Paragraph 4: "fucntions" 7: "oppossed" 15: "comming" 16: "sowhere"
I know what you mean, but it's worth keeping in perspective that Joyent pulled some real asshole moves as well. I'm not defending this, it seems too aggressive to me, but it's super easy to paint the people who got tired of being jerked around by Joyent as themselves assholes. Just saying it's a bit more complicated than that.
Still, it tells you that the maintainers of the project do not intend to support node, meaning that if it works with node, that is more by coincidence than design. I think this is Bad, But Understandable.