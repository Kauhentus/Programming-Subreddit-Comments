You could do that for years with XULRunner. Of course, you had to replace HTML with XUL, but still, its nothing new.
Windows, Mac, Linux, iPhone, Android, [etc], web - one code base. But to be honest, nothing is new. Every invention (even seemingly big ones) is merely the result of tiny incremental improvements (and accidents), which were build on top of existing things.
Wow. That title is just awful. Why not "article" or "title" instead? Would be even more meaningless.
Well, shit the bed.
i don't get why it has to be so complicated. why not just use the arguments pseudo-array in the constructor?
holy shit... a virus embedding that code onto a hacked site could make shitloads of money. currently there are lots of viruses hacking sites automatically and injecting malware. it could embed this js.
I can't decide if this is ethical or not...thoughts
I'd say it's only ethical if it's opt-in, or clearly the intent of the website. Otherwise it's using the client's resources, whether it has any impact or not. At very least it draws power which could have an impact on battery life.
Yep, that's really interesting; do it the same way as any other language. I wouldn't have guessed. 
What the hell, I was just suggesting to a friend on Monday that I make this! Well, I guess I can always generalize it for protein folding and start embedding it in banner ads.
umm... noted, thanks
Most people view this as a bad thing. Assuming bitcoins become a viable from of currency, this could be a replacement for ads.
Sites leaching your CPU for their gain... Yeah, that could become annoying actually. Better upgrade adblock/no-script/ghostery!
Adding `*bitp.it/*$script` to your adblock list should block any sites using this service. Won't help when people start developing self hosted versions of it though.
It's also a lot more likely to go unnoticed too.
I've often wondered why Google et al never made a tiny embedded object, low priority that used empty clock cycles to do distributed processing... As for the bitcoin thing, sounds sort of dumb :S another "virtual currency"... I don't trust it until I have some of it and someone actually offers to turn it into something "real"...
My browser computes approximately 4000 hashes (4 kilo hashes) per second. From what I understand, one presently needs to compute approximately 2 *peta* hashes (by this I mean 2×10^15 hashes) in order to secure a block (worth 50 bitcoins in generation fees). That's about *seventeen thousand visitor·years* based on a speed of 4000 hashes/second. Or, even if the site has seventeen thousand visitors connected simultaneously, it will still take a year before a block is generated and 50 bitcoins are earned. Yeah, great.
I'm over 30 and have been using Python professionally since 1998. Huh, what, fad? 
And super leeching at that. This site maxes out my CPU while it's running.
Nice job! I browsed through the code quickly and it looks well put together. I'll try it out later and see how it is to actually use. One suggestion I have: can you let the user optionally pass in some of the more commonly used parameters into .Sprite(src), such as size and location? It seems that you almost always call move, and often setW() or size(). Sprite('src.png', { size: [56,5], move: [12,3] }) (a null value would use the default. move[12,] might just change your x by 12, size: [,5] would use the default width, etc.)
Well, assume reddit has a million visitors keeping the browser window open most of the time. They would make 50 bitcoins every 30 days or so. At the current rate that's almost $350 per month. Not as good as ads I guess... however, this makes money when there is no traffic from server to client, while ads make money when there is traffic, so it's hard to say. Ie. having 10,000,000 clients reloading the page costs money to reddit, while having 10,000,000 clients just looking at the page costs them nothing while making $3,000 per month... I don't know, it's silly but not completely absurd.
similar argument could be made for ads...
&gt; having 10,000,000 clients just looking at the page costs them nothing while making $3,000 per month... Actually it does have a cost: stupidly wasting maybe as much as 1 gigawatt of electrical power. Which is worth *much* more than 3000USD/month.
I can see what you mean, and why you (and many other people) are so confused :) Fact is that javascript always suffered from lack of good documentation in the past, and the quickest and most widespread way of learning it was to peek at other people's (spaghetti) code. So, nice solution and hacks got diffused through copypasta, as well as bad practices,conceptual errors and misconceptions! It's just as recent as these past 5 years, that we're living a "javascript renaissance" where many talented developers explored and wrote about this long misunderstood language and exposed all its power and features. However a lot of "dark areas" remain, especially about prototypes, prototypical inheritance and function binding and applications, but thanks to the community it's getting better and better. Nowadays there's plenty of learning material online and I warmly recommend Mozilla MDC reintroduction to javascript, just to clear out basic concepts: https://developer.mozilla.org/en/A_re-introduction_to_JavaScript as well as js garden: http://bonsaiden.github.com/JavaScript-Garden/ In addition to online material I recommend reading good books about js, such as "object-oriented javascript" by Stoyan Stefanov and "eloquent javascript" (has an online version too: http://eloquentjavascript.net/)
I recently picked through the latest rhino book, and as i was reading the book I noticed I really had 'jquery' blinders on. "eh, screw this section, jquery does it. Screw this section about the IE engine, jquery gets around it" etc etc etc. Probably not the best thing for the language, but it makes life easier for me :( I would like to become 'good' at javascript, instead of blindly hacking my way through it, so thanks for the resources!
Wow, looks cool.
yeah, starting with jquery (most popular) or other frameworks hides the implementation details; it's good to learn how to make an 2.0 webapp quickly or more easily, but it does'n teach you the core basics. On the other side, as you get more and more acquainted with the language features and the common coding patterns (good site here btw ;) http://www.jspatterns.com/), you'll realize the power,the beauty and the EFFORT behind things like jquery and other modern libs. You're welcome, happy javascript studying! ;)
The power is used client side which reddit doesn't pay for. That's one of the points of bitcoin, offloading power usage for monetary gain. 
How about using requestAnimationFrame where available? http://paulirish.com/2011/requestanimationframe-for-smart-animating/
For what it's worth, on Windows, you have to press Ctrl + *Shift* + J to get the console.
Line 257 is commented out, but line 454 references line 257 (this.layerIndex) Line 519 if(this.xscale != 1 || this.xscale != 1) Line 219 variable sp is declared and assigned "this" but it is not used. Line 1049 variable canvas is declared but not used. Closure compiler complains about goto (a reserved JS keyword) as a property. You can keep it as Cycle.prototype["goto"] or change the name, or do nothing and let people who fiddle with your code in closure compiler unsnag that bit. Just letting you know about these particular hiccups.
Yup, Ruby's had that forever, too.
To make this somewhat useful... It's a good idea to come up with the final title *after* you've written the article. Once you've written it, you'll usually have a much better idea what it's actually about. Also, do not use "clever" titles, use descriptive ones. They are less confusing and your visitors will be a lot happier, because they did indeed got what you've promised them.
It's not reddit that would be paying that money. Also, not all computers' consumption changes that much with the CPU being used (laptops, sure, gaming desktops... I don't think so). But... running bitcoin was never meant to be an economically positive activity - if it was, bitcoins would lose their value very quickly. So, a button that says "send 0.001 bitcoins to the website" is always going to be better than things like this... which, I guess, was done mostly for fun.
Nice copy/pasted blog. This bug affects MSIE6 only. It was fixed in MSIE7. There are still potential leaks with closures and event handling but they are mostly not worth worrying about any more.
If you are coding JS and don't know this, I hate you. edit: the practice the blogger suggests is known as [Currying](http://en.wikipedia.org/wiki/Currying), and is not a new concept.
I suppose you're right. I guess this method could be thought of as a less-intrusive but possibly more cpu intensive revenue raiser...
&gt;there doesn't seem to be anything here
It all depends on what you mean by avg and max number of rolls. This pseudocode applies to the Roll'em! action def throwDices return trunc(rand*6)+1,trunc(rand*6)+1 end timeToRoll1 = timesToRoll while (timesToRoll1--&lt;0) do d1,d2 = throwDices() if d1==d2 doubles++; end avg = doubles/timesToRoll 
Can you really call it a library when it lacks any sense of namespacing?
Any good resources to stop your hate?
Best resources: Read and understand the code of the "big guys". I recommend the Prototype and jQuery source as great reads. Also keep up on everything said by: http://paulirish.com/ http://brendaneich.com/ http://www.quirksmode.org/ 
I really like how JavaScript has the language mechanims to do this kind of thing.
Benchmark.js, with 20 test links, 10 of them with 'title', 10 without.
I'm the author and maintainer of this library - if anyone has any feature requests, feel free to PM me here, email me (contact info on [my site](http://www.mtrpcic.net)), or on Github. If you have any questions, feel free to ask any time.
sorry here's the link http://joehewitt.github.com/scrollability/
yes
Wait. The garbage collection algorithm in JavaScript engines can't handle cyclic references? That seems... unlikely.
How can my desktop browser consume the contents when this is used? This will sound whiny, but please, do not forget to make this usable also with a "normal" desktop browser; also, test it with the Opera mobile emulator http://www.opera.com/developer/tools/ . This will help shape a more cohesive web.
This works great on my iPhone!
What are bitconins, what's this site? What's it do? What's unethical about it?!
Proxomitron or Greasemonky and amend the JavaScript so it doesn't run?
Very cool! Thanks for the API.
Did you read through it for all of them, or use a debugger? If you read through it - awesome debugging skills!
Namespacing is all faggy and retarded.
I can see this being used for bitcoin mining much line on http://bitp.it/ Really friggin' cool
All the possible ways of creating an object!
Unfortunately ios is the only platform it works well on. Really hope to see it working on Android and other platforms in the future.
A little help from [Closure Compiler](http://closure-compiler.appspot.com) and Jslint
When Opera decides to stop "doing their own thing", I'll decide to test them too. 
I've been doing some jQuery Mobile &amp; PhoneGap work lately and the same is true for everything HTML5. I really hope Android and BlackBerry add hardware acceleration for their CSS engines like iOS and generally get their polish level up to par with Apple. HTML5 feels like an actual platform in iOS but still feels like a hack in Android/BB. 
Maybe this is a different leak, but [here's what Crockford says](http://javascript.crockford.com/memory/leak.html): &gt; Ok, IE7 didn't fix it. Maybe IE8 will fix it.
Technically everything in JS is an object, so even simply assigning a string is "creating an object", but I'd guess this is more what you're looking for: ##Method #1 - Re-Instanceable: function Obj(f) { this.foo = f; } Obj.prototype = new Blah(); //extends Blah Obj.prototype.bar = function () {return this.foo;} var obj = new Obj(f); ##Method #2 - Single Instance: var f = 1; var obj = { foo:f, bar:function(){ return this.foo; } } ##Method #3 - Single Instance Assignment var f = 1; var obj = new Object(); obj.foo = f; obj.bar = function () { return this.foo; } ##Prototype.js Class Obj = Class.create(Blah, { //extends Blah foo:0, initialize : function (f) { this.foo = f; }, bar : function () { return this.foo; } }); var obj = new Obj(f); ## ExtJS/Sencha Class Ext.define('Obj', { extend: 'Blah', //I think this is how inheritance is done, the docs are a little spotty. foo: 0, constructor: function(f) { this.foo = f; return this; }, bar: function() { return this.foo; } }); var obj = Ext.create('Obj'); ## jQuery Class jQuery is not a framework, it does not have a class system. Use the first three.
Again, not once, has anyone suggested significant whitespace in JavaScript. Not Brendan, not me, not Jeremy. No one. It's like you can't read words.
it is true, thanks... I will keep it in mind next time
No, not everything in JS is an object. There are objects and there are primitives.
Why should we care about your survey?
&gt; Why does it take big teams, big budgets, and long timelines to deliver web apps that have functionality and UI that approaches that of an iPhone app put together by one or two people? The answer to that is simple, the Cocoa framework and XCode do a LOT for the developer. The data structures, the event model, the code structure, all the UI elements... they're all there at the dev's fingertips. Building UIs with AppKit is like working with LEGO compared to how much code has to be written for a web app's interface. An experienced Cocoa dev can write an entire app in a day, but an experienced Web Dev may only get their foundation in place.
For all intents and purposes they behave like objects though. If you extend the string object and then call the method on a string primitive it still works
strings are objects. Numbers, boolean values, etc are primitives (that also have object wrapping counterparts)
The site links to another site, which has a super crappy mobile site in it. :-/ Another worthwhile bookmarklet is wtframework. http://nouincolor.com/wtframework/2.0/
first off $(function(){}); get run at the same time as $(document).ready(function(){}) so you are actually running this code twice. Also if you want to learn javascript you need to start using firebug asap. Especially now that you have it at your fingure tips when others didn't have access to this feature. d/l and install firebug for firefox, it's an extention which exposes everything from your DOM
Nothing is running twice. There is just an unnecessary event listener since it can all be wrapped in the first. $(function() {});
`coffee -cw -o &lt;dest&gt; &lt;src&gt;`
excellent, thanks!
Assuming all of the libraries are not packed in a single file and are named as expected.
Every time I see something by Rebecca Murphey, I get excited, because I know that I'm in for some kind of treat. Whether it be a completely obvious post, a tutorial with no explanation for *why* you should do what she tells you, or a whine about why it's so unfair to be a woman, she delivers.
I am not sure what you mean by namespacing? The library only expose the "sjs" object in the global namespace...
Good idea, I gonna try to impelement this.
Thank you, that's good to know. Will fix all of those
I have done a few tests with mixed results. But I will certainly make use of it in the futur.
4 people are intimidated by women smarter than them.
Especially with Javascript, practice alone won't help that much. Javascript has lots of gotchas you have to know about, even more browser inconsistencies you have to deal with and also totally bad ways things can be developed in. Reading up on language gotchas, browser bugs and methodological stuff like progressive enhancement is essential. 
or just use one of the the vim plugins? http://www.vim.org/scripts/script.php?script_id=2729 https://github.com/wookiehangover/jshint.vim 
wat?
YouTube's that-a-way, friend.
Javascript is not the DOM
Even with stuff like node.js it's still what most people use JavaScript for.
Javascript rocks, the DOM sucks.
&gt; * Security error code: 1000 on Firefox4 when generating frames, hopefully I can find a way to fix this in the future, That's a [part of the spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#security-with-canvas-elements) as I understand it. There's been some talk about [adding a method to get frames from a video](https://bugzilla.mozilla.org/show_bug.cgi?id=508063), there's an unfinished patch. &gt; working out how to file bug report. If you want to argue that 'uploaded' videos should not constitute an cross origin violation you can do so on [Mozilla's Bugzilla](https://bugzilla.mozilla.org/enter_bug.cgi) or perhaps a [mailing list](http://www.mozilla.org/about/forums/). Just make sure that there really are no such bug filed already.
What specifically does this site rely on for it to sniff Opera and block me? I've got webm &amp; ogv support. Genuinely curious. Just had a peek at /js/global.js, and all I see is FileReader--which Opera 11.50+/Opera Next has support for. 
What kind of blog spam site is this?
I'm confused -- I thought jsonp wasn't subject to the same origin policy in the first place since it uses dynamic script insertions. Can someone explain what this could be used for?
The website makes anything into a jsonp request :) Even if it originally was not. It even works for binary data (via &amp;binary=1 url param)
It isn't subject to those restructions, but it does require the remote end to stick a JS function call at the end of the file. Sadly, you can't JSONP any URL.
This functionality is in Reddit Enhancement Suite. You could install that and get this feature and lots more.
I hate to see code like this: Array.prototype.indexOf = Array.prototype.indexOf || function(value){ for (var i = this.length; i-- &amp;&amp; this[i]!== value;) {} return i; } That implementation misses a parameter (startIndex). If you are going to provide native support then please do it properly.
Still getting the blocked message. :/ But I wasn't asking about what tech you're using to do the sniffing, but what web platform features you need for the service to function. ;)
I dont. I don't need it anywhere. It is just fallback for shity IE and it works in 100% of cases in this framework.
&gt; it works in 100% of cases in this framework. It's for when you add other frameworks. They might use the second parameter of indexOf(). https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf EDIT: Considering this is a game framework, my criticism is a little harsh.
The functionality in RES is this script. If you want the newest version now then you can install the RUDE script or wait until it gets merged into RES.
Ah. Basically what it does is fetches the URL server-side then JSONPs it to the client.
And, of course, it still follows the intent of the same-origin policy, in that, by using a proxy server, I can't act on my user's behalf. Neat. 
And can he?
Yeah, HTML5 D&amp;D isn't implemented yet. That's kind of a deal breaker. ;)
Nope, and that's the point :) The reason this loophole exists is because it doesn't matter: I don't send my user's cookies to the third-party site when I go through a proxy server like AnyOrigin.com, so there's no security issue, and everyone's happy.
You also can't "post", you can only "get". This has security implications since you can't hide values sent in the URL.
Yeah, a free and open proxy server. That'll work out great.
Ah, got it. Thanks for the clarification.
I wasn't thinking of API's/frameworks. Cool! I counted 5 just in the normal language.
Cool! =)
They are more like magicians tricks security implications though. 
Incomplete... function getDoubles() { var die1 = RandomInt(1, 6); var die2 = RandomInt(1, 6); // If you roll two dies, when are they doubles? return; } function setValue(element, value) { element.value = value; } function getValue(element) { // The assignment in setValue is probably giving you a good enough hint. return; } function rollIt() { var rolls = document.getElementById("rollsBox"); var avg = document.getElementById("avgBox"); var high = document.getElementById("maxBox"); var totalDoubles = getValue(rolls); var highValue = 0; var trySet = []; var tries; var avgValue; // This outer loop needs to run until the length of the sets of attempts // is not less than the total number of doubles you want. while () { tries = 0; // This inner loop needs to run until you get doubles once. while () { tries++; } trySet.push(tries); // This condition needs to set the highValue if the current value of // tries is larger than the current highValue. if () { highValue = tries; } } avgValue = trySet.reduce(function (pVal, cVal) { // Reduce passes the previously returned value and the current value // of an array to the function. // The average is the sum of the items divided by the number of items. return; }) / trySet.length; setValue(avg, avgValue); setValue(high, highValue); } 
n00b, he left comments saying what you need to fill in. Just read the ... damnit, you know what --- this is faster... function doTheCalculation() { var rolls = document.getElementById("rollsBox").value || "0", avg = document.getElementById("avgBox"), high = document.getElementById("maxBox"), i, results = [], max = 0, sum = 0, t; rolls = parseInt(rolls).toString() === "NaN" ? 0 : parseInt(rolls); if ( rolls == 0 ) return; for ( i=0; i&lt;rolls; i++ ) { t = getDoubles(); results.push(t); sum += t; if ( t &gt; max ) max = t; } avg.value = (sum / results.length); high.value = max; function getDoubles() { var count=0; while (true) { count += 1; if ( RandomInt(1, 6) === RandomInt(1, 6) ) return count; } } } onclick="doTheCalculation();" n0000000000000000000000000000000b
"Another brilliant idea I had" Well, I'll be downvoting all posts from this domain
So, why don't you define a private function instead of extending Array.prototype ? 
i will - it will minimize better than extending the prototype, unfortunately I have no time now. EDIT: If you want feel free to fix it on your own and send me a pull request.
Using a proxy for your JSON really isn't a sustainable option, even if you're running the proxy on your same server. If you really need top play with foreign origin (huh that's fun to say, foreign origin foreign origin foreign origin) consider using YQL (just for fun) you can pull data from anywhere, there's even a jQuery ~~hack~~ plugin to allow this with the standard .get methods https://github.com/jamespadolsey/jQuery-Plugins/tree/master/cross-domain-ajax
A few quick basic questions: * Are you breaking your JS up into mulitple files to make your life easier and if so are you using something like RequireJS to bring it all back together? * Are you using immediately invoked functions ie (function(){}()); to encapsulate specific functionality? Do you have a code sample on github or something we can look at?
here are a couple of great articles about MVC in javascript, which really enlightened me: http://www.alistapart.com/articles/javascript-mvc/ http://peter.michaux.ca/articles/mvc-architecture-for-javascript-applications (nice additional infos in the comments here) I can understand you or your client doesn't let you use js libs, but there's no need to reinvent the wheel as there are already great js MVC frameworks out there (such as JMVC or Backbone). Anyway, if you're rolling your own MVC solution, Peter Michaux article discusses just that issue. Hope this helps you, cheers!
I currently keep everything in one js file. And on my last project that i am currently working on i used the "(function(){}());" around my modal..having only recently discovered such method, giving it a try. And i wish i had some code to share, (would make explaining my problems a lot easier :)) but its all run through closure compiler before allowed into the wild. (and i think my boss would disprove of sharing in its pure form) 
Thanks! i will have a read :)
haha yes, that sounds a little arrogant, but I can assure you Stefanov is a really talented programmer. Blindly downvoting all its articles seems too harsh for me, come on... :)
Code would be a big help, but let me list out some things. * Separate your JS into multiple files, the contents of each file surrounded by (function (){}()). Then only expose what you need to into your global namespace. Like Namespace.widgets.clock, Namespaces.views.controls, etc. * You can use something like RequireJS to manage the dependencies between files. So instead of wrapping each file in a (function () {}()), you would do something like // clockcontrols.js define('util/i/need.js', function (myUtil) { var ClockControls = { ...code that uses myUtil here }; // export your object return ClockControls; }); Now you can lazy load your clock controls in a separate file with require ('js/clockcontrols.js', function (controls) { Namespace.widget.clockControls = controls; //into your namespace }); * If you are comfortable with MVC, you might want to look at BackboneJS. It doesn't use controllers as you probably know them, but you can use the backbone model and views to structure you application better. Backbone at first is a little more advanced, but I find it removed a lot of code that is previously used to wire the view to a model. * You can use Mustache templates combined with RequireJS to easily load structured HTML into your JS app. // clockcontrols.js define('util/i/need.js', 'html!html/control.html', function (myUtil, myHtml) { var html = Mustache.to_html(myHtml); var ClockControls = { ...code that uses myUtil and html references here }; // export your object return ClockControls; }); Writing all of this fast, but hope it helps. Let me know if you have any questions. These libraries might be overkill for what you are trying to do, but I find that they help me structure large javascript apps. EDIT: formatting
lol. I'm trying to see what people are most interested in learning, because I'm making some Javascript documentation to go with my Jay library, first draft is available here www.binpress.com/app/the-jay-project/136
nope, strings are primitives too, if declared with a literal: var s = 'foo', // primitive values t = "bar"; // " typeof s // "string" If you declare them with the String constructor, they are objects: var ss = new String('Foo'); // string object typeof ss // "object" and thus get all of String.prototype methods and properties. The reason why all String methods work seamlessly either on values or objects is because of javascript auto-wrapping of primitive values (also known as "Autoboxing" in other languages) [http://docstore.mik.ua/orelly/webprog/jscript/ch03_12.htm]. In practice, this conversion happens at runtime, whenever you use one of String's methods on a primitive value. The same happens with the other js primitives and their corresponding wrappers: Number and Boolean. ('null' and 'undefined' don't have equivalent constructors)
That is not annoying at all. [This](http://thekickback.com/rickroll/rickroll.php) is annoying.
frameworks are just abstractions and provide commodities and syntactic sugar; everything is plain js under the hood ;)
haha Wow we are some old school crew checking in! I can't imagine how painful that must of been with IE 6/5 I remember how easy it is to crash those sorry excuses of a browser! Its a shame as I absolutely love being restricted in XSLT, and not modifying variables.. Writing things was a joy to fit it in that style, even if it was so wordy... We wrote a file explorer tree in a super stylesheet manual recursion was awesome fun passing variables around.. Also made mistake converting from two alien XML formats, and that ended up a huge stylesheet,.,, still one of the most fun things I had to do.. ( although I discovered some awful bugs with MSXML3 and node-set :( XSLT2 is one of those things that is awesome, but really doesnt seem too worthwhile to complete learning really :( I wonder what the XML design commitees and authors are thinking! " but we formalised this huge spec! and design! stop using brackets!!! " Or maybe big companies, old style institutions think JSON is a lighweight version... The difference reminds me of DAP and LDAP... ( even LDAP is wayyyyy too big ).... I just cant see why youd want to make life so tricky for yourself... 
well played, sir. Have an [upvote](http://www.youtube.com/watch?v=UrgpZ0fUixs)
Yeah I was thinking these things arent actually too annoying.. 
A lot of sites managed that without even intending too. Ones that still resize, designed to be anchored to the left, dont use variable font sizes, or let the browser decide by keyword..... Or my absolute number 1 pet hate, adverts behind the entire page - on the sides - and in the story! Fuck you flash! ( i just disable flash now for this reason )
You could look into the MVVM approach to UI design. http://knockoutjs.com/ You'll also want to make sure you separate your templates out from your Javascript. So have some sort of templating language (like mustache) to do the html rendering.
this is a similar lib and works on desktop browsers too: http://cubiq.org/iscroll
&gt; JavaScript Is Evil! Javascript is a tool, it is amoral.
This is absolutely great! The missing library!! Just warped me back to the '90s...I miss those cheesy sites a lot. Some other annoying things the lib left out: * stressing the fact that "You can't download images, they're copyrighted!!1!" with an alert on contextual click * making every &lt;h&gt; element blink or marquee * appending a gif to the mouse cursor * loading annoying, endless-looping, full-volume, midi music which can't be stopped unless you close the page
Really neat and expressive syntax for defining routes. Definitely love it!
Oh my God ! I'm sure the only reason you aren't more upvoted is because other redditors just killed their browsers or are calling their lawyers !
Wonderful. Please let's have a though for all web developers that are asked by their customers to remove the ability of the browser to save the content of the pages.
*[x] Prevent this page from creating additional dialogs*
I admit my first website (on Fortunecities, no less) was just like that. And full of animated GIFs, of course. Relevant: http://mir.aculo.us/2010/07/21/bringing-back-the-blink-tag-to-html5/ http://dhtml5.com/
Chrome FTW. "Prevent this page from creating additional dialogs"
Actually, there's lots of webapps that I have to block selecting. If there's lots of dragging and dropping, sometimes you'll drag across some text and the whole page will highlight.
This is a laundry list of features that modern browsers should fail to support, like popups and modal dialog loops. If your site absolutely requires it, your product should not be a website.
Oh god, scrolling page titles! Kill it! Kill it with fire!
This is the first time I've ever gotten to use that feature. Amazing. 
The dialogs weren't the biggest joy. You should really test this page in Firefox for maximum pleasure...
I have to disagree that all of these things are annoying. In fact they may be essential if the web is going to develop how Google and other companies are expecting it to. If you are developing a javascript game, you won't want your users to have a context menu on right click or text selection (Can cause bugs if the game uses mouse events). Right now I'm working on a web application and I need to do some of these "annoying" things to make things work correctly. Now if the site is a simple content website, then yes these are all annoying and pointless. If you are working on an interesting web application I can easily see where some of these may be useful.
[something's missing](http://yankov.us/clippy/)
&gt; The number of rolls input is the amount of times a user has rolled a double This means you loop until doubles == timesToRoll doubles=0 roll=0 while (timesToRoll&lt;doubles) do d1,d2 = throwDices() rolls++ if d1==d2 doubles++; end But &gt; The average number of rolls should calculate how many times it took to get that number of rolls and the maximum number of rolls means the maximum number of rolls it took to get the doubles. This means that you run the experiment many times MAX_REPETITIONS=100 run=0 total=0 max=0 while (run++&lt;MAX_REPETITIONS) run experiment if rolls&gt;max then max=rolls total += rolls; avg = doubles/total end 
YQL is a proxy, and it doesn't work with many things as it actually returns its results in wrapped html format. AnyOrigin is a REAL proxy and actually works reliably.
if you stick &amp;format=json in the query string it will return JSON
It doesn't work reliably. Thats why I made AnyOrigin - cause YQL has problems with some files. Its not the jquery plugin's fault - its because YQL is not a real proxy. 
When a product is a web site, I don't have to install it, I don't have to trust it, I don't have to be using the popular platform (windows/iphone). Please, stop making apps that aren't web sites. I hate them.
Some day, programming languages will be abstract enough, or browsers will be smart enough, that I will be able to say "browser, please fix this webapp so It'll stop doing X and let me do Y" and it will work and then I'll be happy.
I love the web as a platform. I hate websites that try to pretend they aren't websites. Maybe we need a sort of apps-only not-quite-a-browser where all that anti-usability crap is appropriate, because so far I'm concerned it should never have been part of the spec to begin with. 
"jQuery is not a framework, it does not have a class system. Use the first three." It's true that jQuery does not implement the class or inheritance pattern for you. Instead, it is a fantastic demonstration of the power of Javascript without these patterns. 
Yes yes yes! Countless Javascript tutorials just teach whatever overlaps with Java or Python or some other less interesting language and even worse some do that and then show the class pattern without any explanation of closures or prototypes. The world needs to know that the class, which is a great thing, is only one of countless patterns. 
Thanks for the update. Does it really need to pull in all of jQuery 1.6, though?
Snopes.js
I was just on a website that triggered an alert when I clicked submit to log in to the site. Brilliant, morons! The request pauses until I click ok and it isn't like there are other options! But besides the alert() and prompt() functions, what in this annoying.js library should be disabled by browsers. Most of those are actually crucial features. Being able to catch and handle right click gives you the ability to add your own right click dialogs, and being able to prompt on window close prevents accidental page close which could trash a bunch of data. These are all good features. And even without this laundry list, it is still trivial to make a crappy annoying site. All you need is bad grammar.
He speaks the truth, hivemind! Unless you think the web should be plain text/html and we pretend it is 1995 again, these features are necessary.
Thank you. That "dontleave" function has use, too. I've done that a few times for forms that manage content. I check if something has been changed, and if they're leaving the form without saving, I make sure they didn't accidentally click x, or at least let them know that their changes haven't been saved.... you know... like pretty much every single non-web based application does.
We can't make every page on the internet worthwhile and trustworthy, but we can certainly make our browsers better tools for handling them. I don't want people to catch and fiddle with my right clicks. The things I do by right-clicking are actions the page shouldn't even be aware of. The right-click menu is a browser function, not a page function, and I don't want it in the hands of random scripts any more than I want my forward / backward buttons and address bar captured and repurposed by whatever site I'm on. Accidental tab closing is why we have tab *un*closing. If current tab recovery isn't good enough then let's fix that shortcoming instead of maintaining JS's ability to fight a fairly major user interaction. Selection and copy disabling is a ridiculous annoyance that serves no purpose. The text and images are right there on my screen, in the source, in cache, and if nowhere else, in RAM. It's the web. Access is possession. Window resizing... no. Just no. Most of these features are excused as necessary for web apps, but the whole concept of an application inside the browser is a massive kludge that's treated as a good idea for the sake of convenience. (It's a network document renderer, for Fnord's sake!) Frankly I think the best path here is to sweep away the anti-usability crud from the modern internet and push everyone with a bright idea about anti-standard UIs and custom chrome into full-frame Canvas palettes where they can do whatever the hell they want. 
Nice. I can sell this to my customers... ;-)
What about dragging shapes around? Or scaling/rotating them? Seems limiting without that functionality. On a related note, I've done something similar with fabric.js — http://kangax.github.com/fabric.js/test/demo/ Check it out. **Edit**: Ah... found how to select objects and move/scale them :) Don't see rotation though. Also noticed that new position of edges (after scaling) doesn't stay where mouseup occurred (Chrome 13)
You are just wrong on so many counts... &gt; I don't want people to catch and fiddle with my right clicks. The things I do by right-clicking are actions the page shouldn't even be aware of. Well, what makes right clicks different from left clicks or key presses? One button on the mouse is for the browser and the other is your precious little secret that the website can't know about? That makes no sense and I'm glad browser makers disagree with you. &gt; Accidental tab closing is why we have tab unclosing. If current tab recovery isn't good enough then let's fix that shortcoming instead of maintaining JS's ability to fight a fairly major user interaction. Right, swell idea. We should have all the browsers try to implement every possible user interaction. Then we can deal with standardizing it across all browsers, and fixing holes in the implementation with... Javascript. Or we could just have javascript do it from the start. &gt; Selection and copy disabling is a ridiculous annoyance that serves no purpose. False. There are legitimate uses for disabling text selection. If something is drag and droppable, how is the browser supposed to know if the user is selecting text or dragging something? Answer: it doesn't, can't, and that is what Javascript is for. You are going to have to accept that programmers who are not you are the ones controlling your computer, not you. You don't get to decide everything it does, that is the **point** of computers. 
Thanks for trying it out. Rotation is there (for rectangles and text) but slightly manual. Try selecting an object twice and you get a dialog that lets you change the colours as well as enter an angle of rotation.
The most annoying website I have used was UPS's job website. They disabled the backspace key, arrow keys and even the delete key. If you messed up while doing the job application you had to refresh the page and start over. 
Your objectives are spot on, but this is not the way to achieve those objectives. W3Schools is successful, because they are good at online marketing, which has resulted in fantastic SEO. The only way to beat them at their own game is to beat them at their business, which requires an extremely aggressive approach to marketing investment and the discipline to see that investment through until you have exhausted your full life-force. By the time you have achieved this objective will have nothing to show for content quality because all of your efforts will be focused on market domination, which is likely the same trap they fell into.
Make everything bold what you mouse over. 
Ha, yeah you are probably right.
&gt; One button on the mouse is for the browser and the other is your precious little secret that the website can't know about? Basically. You need at least one key the browser can't screw with or else any website that has your focus is liable to never let it go. Flash uses Esc, which is a good start, but that offers no meta-interaction with specific parts of the document. &gt; We should have all the browsers try to implement every possible user interaction. What? We're talking about one specific interaction which is absolutely non-optional. I'm talking about an undo feature for that interaction that's already implemented in every modern browser. I'm talking about improving that feature to the point where "Are you sure you want to close this window?" becomes an unnecessary relic. I want tabs to close when asked and I want un-closed tabs to return in their previous state. What part of this sounds unreasonable or excessive? &gt; You are going to have to accept that programmers who are not you are the ones controlling your computer, not you. You don't get to decide everything it does, that is the point of computers. Fuck no. *Extremely* no. I find the very notion offensive. That's an archaic attitude I cannot support or abide. *I* control my computer. Any device where users can't manipulate software into performing as they wish is a toy or a glorified appliance. I *permit* other people to do things with it, and wherever possible, I will prevent them from doing things I don't appreciate. This is why I have Adblock, Greasemonkey, and antivirus software - as do you, I'm sure, contrary to your stated beliefs. The **point** of computers is to manipulate data. This computer is mine. It manipulates data as I see fit. It uses an OS of my choice running a browser of my choice to visit websites of my choice where - because I approve - it will send well-formed data when I hit the save button below this text field. It doesn't have to. It could send this reply to every comment you've ever made, repeat malformed packets in search of interesting vulnerabilities, or just fuzz the site at random. When I render this page again, I don't have to see your comments. I could replace everything you write with humorous nonsense or remove your presence entirely. When I open this open-source browser tomorrow, I don't have to do a single thing within JS spec - if I even enable the language at all. I don't even have to boot a real computer! I could emulate the whole shebang from the firmware on up, pause programs below an OS level, fork machines, reverse time into a previous state, and copy or meddle with anything someone felt they were cleverly protecting. *That* is the point of computers, you fucking *serf.* Also, I feel that dragging and dropping should be relegated to Canvas surfaces as previously mentioned. It's one of those things inappropriate to HTML as an interactive document format.
r/coffeescript
Doesn't seem to work for me with FF 4.0.1 on Vista. I click "No thanks" then left click and the game starts up but never zooms in and I can't see any player or anything. No keys seem to have any effect. Works with Chrome 11 though.
&gt; I control my computer. Lol. Just wow. Really? Do you flip all those bits manually? Your control ends when you fucking hit a button. The rest is up to the programmer that made the software you're using, and then its up to the programmer of the libraries that programmer is using, etc, etc. You **do not control** your computer, no matter how good that sounds. &gt;Also, I feel that dragging and dropping should be relegated to Canvas surfaces as previously mentioned. It's one of those things inappropriate to HTML as an interactive document format. Yeah, in your world the browser is made up of 1995 plain HTML and canvas. I think that is pretty plainly a bad idea. What you're talking about isn't how you control your computer, what you are talking about is controlling how other people write software, and that is none of your business. Next are you going to try and suggest indentation style should be a W3C standard? 
This is a small test to play with WebGL and [three.js](https://github.com/mrdoob/three.js). I've tested it with Firefox 4, Chrome Canary and Opera 11.50 (all Windows). I think that Chrome stable chokes when trying to download all the tiles at the same time. What do you think?
I had a chance to pull it up in FF 4.01 on Win7. Mine has no problems working but it does seem a bit slower then Chrome, still playable just need completely smooth. This definately shows the subtle differences between browser HTML5 abilities.
Even better: allow copy, but attach some stupid blurb to it. 
&gt; Do you flip all those bits manually? No, I tell the computer how to flip them. That's what the computer is *for.* At the moment I'm telling my computer to flip my bits to the tune of Windows 7 for the sake of convenience. If I get tired of 7's bullshit then it's back to Linux, where I will have control of every little detail in the OS either by choosing from thousands of intercompatible widgets or writing some of my own. To say that this does not constitute control of my computer is to say that a car is controlled by whatever robot machined the parts. &gt; Yeah, in your world the browser is made up of 1995 plain HTML and canvas. Again, no - modified 2011 HTML5 for everything remotely like a webpage and Canvas for everything trying desperately not to be. I'm not calling for the end of interactivity, I'm just not a fan of scripts acting outside their sandbox.
I used almost the same set of features in [my web game](http://runestonewisp.appspot.com/), and I still think you're wrong. Those annoyances are nothing but a disservice to your user. The underlying functionality is useful and important to have, but those specific implementations are useless, obnoxious and detrimental.
I think your misunderstanding begins with the idea that a "website" is the only thing that runs in a browser. That idea is at least 10 years out of date. [Here is proof](http://runestonewisp.appspot.com/) Web games that break out of Flash are a VERY good thing, and they can't exist without the same features that support those abominations. The ability to prevent selecting and dragging allows your web app to handle drag-like events in a more content-friendly way. Overriding right-click allows the application running in the browser to have a real advantage over Flash applications. Overriding CTRL-C allows you to provide context-aware copy and paste for structured data. Now, HTML5 games are not marketable yet, because of distribution issues vs Flash, but without those features, they could never exist. 
Then why on [this](http://runestonewisp.appspot.com/runestone.html#lvl=AB) page is all right click functionality off? Except on a few buttons.
Right-clicks are used for a relevant context menu inside the main workspace. Outside of the main workspace right-click should work as usual, with one exception: the tutorial. For technical reasons, (Been so long now, I don't remember what they were,) the tutorial has a div covering the full screen and it needs to capture some right-click events. If I worked at it, I might be able to return the others to the default behavior, but it was easier, and accidental, to disable them.
For WebKit: -webkit-user-select: none; (Google uses it)
I am in Opera and what is this?
Well that's kind of my point. It all depends on the application. The one I'm currently working on uses up the entire document space. So there will be very little, if not no space for the default browser context menu.
Thank god for https://addons.mozilla.org/en-US/firefox/addon/noscript/
not everyone uses a webkit browser, though.
IMO it's only a disservice if you're depriving them of some sort of functionality; such was the case for the Web 1.0-era sites who had otherwise normal pages but then applied these inane behaviors. OTOH, looking at the current context menu options for Chrome, I can safely say that I don't think I'd ever _need_ any of them if I was playing some sort of game, or [any number of the other highly-specialized uses](http://www.chromeexperiments.com/) that are emerging.
Completely quantitative statement there.
if you'd bother to read the article, I argue the exact same thing ;)
Good point, thanks. So far, I've been using it in very controlled conditions as all the other JS I use is written by me as well but, if it was to be a separate library then namespaces would be essential.
Thanks! wish i could give more upvotes for putting the effort into your reply
Fair point. the current version only supports circles, not ellipses, but you are right that it would be clearer to constrain the enclosing region to be a square.
The Peter Michaux one was pretty good read, i have a question thou for anyone that can answer: In Peter's examples he creates elements in js, for example in his todo list example he does: var rootEl = document.createElement('form'); rootEl.action = "#create-todo"; rootEl.className = 'addTodoToList' var descriptionInput = document.createElement('input'); descriptionInput.type = 'text'; rootEl.appendChild(descriptionInput); etc Isnt this generally bad practice? shouldn't I be trying to keep HTML in the .html, what would be best there? at the moment i have some "templates" where i would do something like: elem = document.getElementById("template-box1").cloneNode(true); elem.innerHTML = elem.timer.innerHTML.replace(/template-/g,id+'-'); feel thats kinda risky code, but seems to work fine. 
For me, in Dev Chrome (13/Windows) the drag animation's smoother than the stock Flash version. Nice work, although it does take a little longer to load (not massively longer though).
Nice and smooth, like it over the original
if the circle kept to the top left, i think it would feel a lot better, and the smallest from the width/height sets the size of the circle.
yes, and possibly with a bigger font size! Also normal -&gt; bold+italic is pretty annoying ;)
Hehe...the "good" old days of geocities and similar spaces...it really was a far west, a land where EVERYONE'S ehr...creativity could be shown to the wolrd. I include myself in the former club of striking multi-colored backgrounds and fonts ;) Yeah, plenty of animated gif...and don't forget the horribly textured tiled backgrounds (fractals!) and lots of &lt;HR&gt;, plain and gif ones of course;) Great links,btw! Let's not forget the golden rules: http://users.nac.net/falken/annoying/ (hmm...we should make some js lib which executes those rules...haha!)
Very nice! I fired up IE9 just to check how it would handle and it was pretty smooth as well. Can't get the 128 tiles to work on any browser though.
I would!
But there's a downvote button to express your butthurt over comments you disagree with, so I thought I was *already on* YouTube
If you want to prove asinine ideas that run completely counter to the obvious, go do the scientific study yourself. Until then, shut up.
The wiki grew out of [list of JS game engines](http://www.reddit.com/r/javascript/comments/f094j/list_of_js_game_engines_community_effort/) I posted earlier. It's open for you guys to expand. :) I know it's not an ideal solution. I'm currently planning a proper package index along PyPI and CPAN. Ideally we would have some kind of web UI and nice tool support (dep. management!). I am aware of node and npm. They do solve this to some extent. It would be cool to have something more generic and casual around, though.
Yes, your recall to the separation of concerns is correct, but if you look closer you won't see any **raw** html here, only DOM manipulation, which is perfectly fine (if not central) when doing web programming in js. It's nor risky neither bad practice, it just depends on how you intend to create your widgets. We have two different approaches here: * attaching behavior to existent markup * creating widget markup In the first case you already have some html nodes with proper css classes and structure. Your widget's main init function seeks for the matching elements and then adds behavior(functionality),attaching event handlers and setting initial state. In the latter case you don't need to write any html,instead you only specify the root element for the widget (some div on the page or let it default to body), and then you build all the structure markup, either using the DOM or innerHtml, and then proceed as in the previous case. This approach is very extensible in my opinion, as it lets you use templates and have complete definition over structural markup, instead of leaving the task to the lib user. ExtJS for example does it this way. If you feel you need more separation between view and controller entities, you can leave the html generation,render,update and event firing to the widgetUI object, and delegate the actual actions to some other widgetController. The two objects will be implementing the observer pattern(pub/sub) and listen to each other's events: the UI waiting to update its view and the Controller waiting to execute actions.
The wiki grew out of [list of JS game engines](http://www.reddit.com/r/javascript/comments/f094j/list_of_js_game_engines_community_effort/) I posted earlier. It's open for you guys to expand. :) I know it's not an ideal solution. I'm currently planning a proper package index along PyPI and CPAN. Ideally we would have some kind of web UI and nice tool support (dep. management!). I am aware of node and npm. They do solve this to some extent. It would be cool to have something more generic and casual around, though.
Thats a good question and the answer depends on the needs of your site. Any element that I always need, I generally put in the html file. I don't like attaching elements to the DOM if they may never be seen by the user (hidden dialogs that may or may not appear, etc). For large, single page JavaScript apps, you will find your DOM gets crowded if you keep all of your HTML loaded all the time. Embedding the HTML in the JS and using something like Mustache to manage it makes the application easier to follow and understand as it grows (which I think is the crux of your initial question).
That's fine so long as you're providing some useful behavior for the right mouse button. The annoying.js examples take away valuable behavior with nothing in return.
let's not forget scrolling status bar messages too!
I thought the same, and it might be a matter of downloading all the tiles at the same time. There's a commented simple queue to manage the fetching of images, but one would think that the browser should take good care of it. It could also be done streaming higher quality tiles on top of the low quality ones.
Thanks! It kind of works with a canvas-based renderer, using IE9 hardware acceleration, but nowhere near WebGL quality. Google Chrome Canary, Firefox 4 and Opera 11.50 (Windows) all are able to load the biggest panorama. What's you configuration?
Thanks! I was thinking of using the bearing and directions information that the service also provides, but I suppose the google guys are already working on a fully-fledged webgl viewer. I don't know whether there's much of a point, really.
iScroll is superseded by Scroll4: http://cubiq.org/iscroll-4
Can you please keep it down while the grown-ups are talking?
oh cool, didn't see the upgrade! :) Works smooth in Chrome (and Safari, I suppose, but can't test it as I'm on linux). Doesn't work in Firefox. Oh well...it's designed for mobile webkit after all :P
(Well this isn't exactly new). Anyways, also check out: http://joehewitt.github.com/scrollability/
already discussed a few days ago :P http://www.reddit.com/r/javascript/comments/hg6lv/scrollability_native_scrolling_for_mobile_web/
yea you're right but, seeing as this lib is intended for iOS devices, you wouldn't want to disappoint i-stuff fans...would you? ;)
My comment was targeted to many of the comments in this thread. Not to your article. Should have stated that.
this article is simply amazing...fantastic! I'm totally in love using Promises to escape callback hell.
That one is a bit jumpy on my iPhone 4
I agree with that. But iNames never gave me the impression of trying to be funny. They're just annoying.
And mobile weblog is the default for iOS and Android, right? Makes sense to do that one first. 
It's not strictly accurate to say there's "no native support" for scrolling, although it is somewhat disingenuous. A two finger drag will scroll these divs; but you won't get a scroll bar. However, using the webkit scrollbar styling CSS you *can* force the bar to appear. Not ideal but ok if you don't like (or can't use) JavaScript.
You can play Super Mario on the author's blog!
Getting people used to pasting 140 bytes worth of javascript mindlessly, priceless.
Throw early. Sorry. That's all I have.
The function being a noop most of the time is a non-issue. That is a totally OK and correct thing to do. It's not a noop anyway, it's marking what and where logable information exists. It's my personal feeling that logging everything all the time is also perfectly OK and correct. The "debug level" will always be too verbose or not verbose enough. If you err on the side of verbosity, chances are better that the evidence you need is there. Users who don't care will never see the console; users who care will love it if you log everything all the time. Your code isn't a secret anyway. If there are a small number of infrequent events that are so important you might need a user to go scouting for them, you might want to send those in an ajax callback all the time. If these events are inconsistencies you can detect and you wish you heard more about them you could just throw an exception and let it bubble up to the top, or let it break the app with a big ol' error message. The browser will usually tell the user there's an error on the page and your cousin who wouldn't have said anything about your broken app before will now call you up thinking that they are the only one who has seen "Exception in particular_file.js at line 5823" and that this a great opportunity to help you with little effort on their part. If you go the error message route, don't put a ton of info on the page, you can probably send it via ajax. It has been my experience that being in debug mode all the time and failing quickly and loudly has made my work more solid than I deserve to take credit for in less time than I should have been able to. You probably need sympathetic bosses, testers, and users to make this work. I might just be lucky. Or you might be able to just insist that this is the correct policy and people will believe you. I don't have enough experience to justifiably say that I know. TL;DL: throw early
Seriously? Learn jQuery. http://jquery.com/
Check out this solution: [http://stackoverflow.com/questions/5590878/hover-on-text-link-to-change-image](http://stackoverflow.com/questions/5590878/hover-on-text-link-to-change-image)
Sorry, newb here. What is 'noop' and 'throw early'?
no op = no operation, as in a function that doesn't do anything, as in function noop() {}
You'll have better luck over here: http://www.reddit.com/r/java ;)
Thanks, but I can't seem to get it to work. [Here's what i got so far.](http://pastebin.com/vd6zr9cC)
noop == "no operation". It's a fuction which does nothing. By "throw early" I presume they're talking about "throw early, catch late" which is a principle for error managing on object oriented programming which postulates that you must throw an exception as near the error as possible and catch it as late as you can, when you have all the information to handle it properly.
This piece of code, does not need two loops: System.out.println(); //makes the 1st number line from 1 to 9 for(int a = 1; a &lt;= 9; a++) { for(int b = 1; b &lt;= 2; b++) { System.out.print(a); } } You can easily write it this way: System.out.println(); //makes the 1st number line from 1 to 9 for(int a = 1; a &lt;= 9; a++) { System.out.print(a+""+a);//I add the string so that the ints are converted to strings //or if you want to be clever: System.out.print(a*11); }
This code eliminates a bunch of loops (which may run counter to what the book is trying to accomplish), but it's a bit more efficient. Was this what you were looking for? public class string { public static void main(String[] args) { drawLine(); System.out.println(); //creats the smilyface pattern for(int y = 0; y &lt; 9; y++) {//you'll see this more often then 1 to 10 System.out.print("_-^-"); } String numbers=""; //makes the 1st number line from 1 to 9 for(int a = 1; a &lt;= 9; a++) { numbers += a*11;//get the double digit, add it to a string } numbers+="00";//add 00 System.out.println(numbers+numbers);// you can do this w/ a loop I guess, but only if the assignment is to use as many loops as possible drawLine(); } //makes a line public static void drawLine() { for(int x = 0; x &lt; 39; x++)//same System.out.print("-"); } } 
Thank you much.
I will try there too. Thanks.
Flash can interface with non-standard USB devices (not mouse/keyboard), and JavaScript can access Flash! Damn... that's rather cool. =D
Not trying to be exhaustive here, but here are a few things worth thinking about: - window.onerror can act as a global, if rough, catch handler for your application. that makes it a good last resort to collect and report errors to a central location. you usually won't catch network-failure related errors with it, but almost everything else will show up. you'll see the weirdest errors on some browsers, with line numbers that make absolutely no sense, so be ready for some noise. - if you're going to have this kind of server-collected error reporting mechanism, it'd make sense to track log events. Maybe not on the actual console for your production code, but in an array somewhere, so that you can serialize and send that array along when something goes wrong. That'll be a lot more useful to understand problems than the 3 meager arguments you get from an onerror event handler. - if you don't want to keep log statements in production code at all, you can use various things to get rid of them. [YUI Builder](http://yuilibrary.com/projects/builder) will filter out obvious YUI log statements for example. The [closure compiler](http://code.google.com/closure/compiler/) can be made to [do the same](http://log.bthomson.com/2011/04/closure-compiler-removing-console-log.html) pretty easily too. - What you show to users is up to you, but if you're collecting enough to figure out the problem, you're probably better off giving them a way to recover than throwing obscure error codes at them. "An internal error occurred. Sorry about that. Click here to reload." would probably do fine.
You can find some starting points [here](https://github.com/bebraw/jswiki/wiki/Beginner%27s-Resources). If you have any specific questions, feel free to post them here. No doubt you'll get some nice answers. :)
Check out http://www.tizag.com/javascriptT/
One thing I found when trying this approach is that it was annoying having my console messages always from the same line number (inside the "logger" function). I now do it like this which also prints useful line numbers with my console messages: var debug = true; .... if(debug &amp;&amp; typeof console == 'object') console.log('whatever'); I have a macro set up for this line so I only need to type "cons" + tab to log something. 
This one is great! I've been going through a bit of it and it's easy to understand. Thanks!
I recommend Mozilla Developer Network's JavaScript Reference - https://developer.mozilla.org/en/JavaScript (It's a HTML Version Tutorial). Also, These are must watch JavaScript Videos from Crockford - http://yuiblog.com/blog/2007/01/24/video-crockford-tjpl/ Hope this helps! :)
Please do not learn from w3schools. Mozilla's developer resources are much better as a reference, and there are better tutorials which unfortunately are not all in one place. Ask here if you can't find one with google and I bet many of us will help you find something appropriate, or just answer questions. http://promotejs.com/ http://www.reddit.com/r/javascript/comments/fpp7m/recommendations_for_mastering_javascript/c1hs3fq
I... gotta have more cowbell?
If I understood your problem correctly, here is what you can do: 1. Create a method to log: logger() which basically does a console.log() 2. Enable/Disable logger() based on a cookie: DEBUG = 1 (You can easily create a cookie in a browser, eg. use firecookie for firebug) 3. Whenever you need only some specific log messages but not all the crap through logger(), simply unset debug mode and use console.log() 
There are 6 billion people on the planet, I don't think this project will have that much impact.
Came to post this. I found this the easiest when first getting my head around the basics. It covers quite a few different languages/tech too. edit: Oops! That was supposed to be a response to the parent.
If the fade transition isn't mandatory, you just have to use CSS3 transitions. https://developer.mozilla.org/en/CSS/CSS_transitions
If you're wondering why so much hate here's a page outlining why W3Schools isn't a good place for learning JS. http://w3fools.com/
The MDC is a great resource for developers. When I'm looking for references I usually do something like "setTimeout mdc" in the search. Otherwise you end up getting shit sites like w3schools.
What's wrong with w3schools?
Why the hell was I downvoted for this? jQuery IS the best and easiest way to achieve what this guy wants. Learn your stuff before downvoting.
While cool, this sounds horribly inefficient. Why not just use something like google's native client? 
I found this video series at Nettuts helpful: http://net.tutsplus.com/tutorials/javascript-ajax/javascript-from-null-video-series/ They also have a series on jQuery: http://net.tutsplus.com/articles/web-roundups/jquery-for-absolute-beginners-video-series/
Obligatory: [w3fools](http://w3fools.com/)
I'm not sure what you mean by google's native client. Double whammy on me for late night posting. I meant to post this over in r/node with the title: "Converting other programming language code to LLVM to Javascript with emscripten" as I've just done now.
I ended up buying [Head First JavaScript](http://www.amazon.com/Head-First-JavaScript-Michael-Morrison/dp/product-description/0596527748). The examples are easy and it only takes you through beginner stuff. I see that others have recommended some great free resources and people are fairly ambivalent about Head First books, but I thought it was informational. One thing I like about having physical media is that I could highlight or add post-its to information or pages for easy access to the stuff I needed. Also, thanks to all those that have commented with other resources. My browser bookmarks are getting fat!
[Native client](http://code.google.com/p/nativeclient/) &gt;Native Client is an open-source technology that allows you to build web applications that seamlessly execute native compiled code inside the browser. So instead of compiling your C code to LLVM and then to javascript with emscripten, you can run your C code in the browser, at native speed.
There are many languages that compile to LLVM, not just c
C was an example. FWIW, there are many more languages that run natively than will compile to LLVM.
I'd like something that is compatible with older browsers too.
But are there more that run in NaCl than compile to LLVM? The Google docs for NaCl specifically mention C and C++, but that's it.
I usually have a global debugging on/off flag and a `debug()` function which either forwards arguments to `console.log` or does nothing, depending on the flag and/or existence of console.log. var debugging = true; var debug = (debugging &amp;&amp; window.console &amp;&amp; window.console.log) ? function() { window.console.log.apply(window.console, arguments); } : function() { }; Then: debug("Blah blah %s %d", val1, val2); 
Marginalizing a problem with an overblown statistic (6 billion people don't use computers or the Internet) doesn't mean there isn't a problem. A more accurate way of determining the impact of a potential code related threat would be to consider the second most trafficed website on the Internet ( http://www.alexa.com/topsites ) where sharing is the norm and users [have fallen for](http://i.imgur.com/1WMjQ.jpg) [javascript related attacks](http://www.gmanews.tv/story/220430/technology/nicole-santos-virus-hits-facebook-trends-on-twitter) before. This is a cool project, I'm not trying to hate. I already learned a few tricks from the wiki on how to shorten some javascript. However, I'm not going to pretend that writing short, obfuscated code doesn't play in favor of social engineering based attacks on popular sites such as favor. Also, your claim was unfounded.
Anyone know if any of these engines support hex based tiles and grids out of the box?
You're right. My bad. 
whole thing as one page: http://www.infoworld.com/print/161969
It will be compatible with old browsers : it will degrade gracefully.
There's no particular quirk here. In the first example, there is no closure at all. Three functions are are created where each is defined to get the global variable "i" and prints its value. In the second example, you define a function (used as a closure) that returns another function. You call this function and it returns this new anonymous function which has a reference to the closure. Hence you get the results that you expect. It could be rewritten as such: var i; var f = function(v) { return function() { console.log(v)); }; for (var i = 0; i &lt; 3; i++) { q.push(f(i)); } p.s. Happy Reddit Birthday!
Doesn't seem to work in Firefox 4, just get a gray background. Works in Chrome, but not sure what I'm supposed to do. Is this supposed to be used on a touch-based device with a real cat pawing the screen? If so, who the fuck approved this project.
It's a quirk if you don't already know that it's a quirk. EDIT: Just to be clear. I know it's not really a quirk because I know how scoping works in JavaScript. But this catches lots of people out because it is not immediately intuitive. Don't take for granted the things you already know!
There is a closure in the first example. A closure around the variable i. If q got passed to some other context then executed, those anonymous functions still need i, thus the closure is created.
"i" is in the global scope. No closure needed.
You are right, and technically that is true. However I don't believe that is what the author intended. In a more realistic situation, a for loop is much more likely to live inside a function, causing i to no longer be global.
Yup, not what the author intended. Not a quirk of closures but rather a lack of a closure which caused behavior that they didn't understand. Their second example (and third) introduce closures which make everything happy.
http://gamesforcats.com/
Sadly, the best document you could read - the ECMA 262 specification - is fairly painful. Sadder still, most of the documents you can get to replace it are terrible. Honestly, just read the spec. http://www.ecma-international.org/publications/standards/Ecma-262.htm
You have to be a programmer to program. Learn to program (language isn't highly significant), then lean the specific language you are interested in.
&gt; I'm not going to pretend that writing short, obfuscated code doesn't play in favor of social engineering based attacks on popular sites oh, so if the code was a bit longer and less obfuscated then people wouldn't fall victim to it so much? I would suggest that any danger presented by this project is minute in comparison to the danger presented by bookmarklets. Which is small in comparison to running JS in priviledged mode such as all the extensions in firefox. Which in turn is small in comparison to the dangers of other more direct exploits against the browser itself. There are larger threats to worry about, and I predict that this project will not impact the users of the web at large enough to 'get them used to pasting code'.
If you want something like C#, Java, Ruby, Python, PHP; there are good alternatives already that will allow you to run it in the browser (via something like Silverlight) or compile to JS, or both! Otherwise your probably interested in something like C or C++, so it'll go faster, in which it would be better to use native client. This pretty much squeezes out compiling LLVM to JavaScript. Nice idea tho.
The guys at the top of the blog post look very friendly; I don't quite get what their relationship has to do with JavaScript.
&gt; is there a better over-all approach to that type of logging/monitoring? The "professional" approach is to take care of it during the build/deploy process. It could be as simple as an awk script that removes all lines with "console.log", or better yet use something like Closure Compiler or the YUI build tool. You should check out [HTML5 Boilerplate](http://html5boilerplate.com/) This is a great skeleton of a modern web-page/app. It comes with a build system based on ANT which will remove debug code, do some minifying/optimization, etc. In addition to that, it will introduce you to a lot of best practices. For personal or small projects , there's nothing wrong with the technique you mention, though I'd say learning to use the debugger really effectively can help a lot (i.e. learning to set watches and breaks can eliminate a lot of the need to log everything).
If you refresh it over and over there are just more pictures of the guy with different people. I think it is a cool idea.
Oh, ok; that is pretty cool. But on it's own, when you don't know that, it just seems a bit out of place and distracting.
Haha, let it go man. It is just the dude's blog.
cool
I don't know what mystical organisation you work at, but until recently IE6 was all that was supported where I work, and installing anything else could possibly get you fired.
This depresses me. =\
To bad that doesn't work when your customers are the government, semi-government or large organizations. For some reason all the sys-admin there are grumpy old bearded unix people that haven't realized the people don't use telnet to browse the web. And yeah your reddit name says it all ;)
that's true unfortunately. Still I wonder what is the problem of migrating to IE7 if 90% of ie6 users are on windows xp ? It's just two clicks to better safety after all so why those damn admins in banks etc. won't do it ?
"An error occurred"
http://ie6update.com/ has a funky JavaScript update bar that looks just like the real thing.
That is truly one the most ludicrous things I have ever heard.. Perhaps they need some pretty graphs to get it in their stupid heads how much time that stinking pile of shit and sorry excuse of a browser wastes... There is truly no business/organisation reason why you would force everyone onto that.. Not to mention the securty issues..
Does anyone know how to make completely 'solid' objects which a sprite/player cannot pass through at all. Similar to the earth and stones in :http://batiste.dosimple.ch/games/steam9/ I've searched through the entire source code for references to the sprites and can't find anything :(
Our company dropped IE6 support, but if the client requires it, we ask for 10% more. :)
Only 10%? I bet making it work well on MSIE 6 is more than 10% of the job.
what is this? Can't find any related info...
The reasons I hear most often are: * The intranet applications don't support other browsers * IE# is part of our iso certification so if we upgrade we need to invest in a new certification as well * Management decided that we are not upgrading * It hasn't been tested enough and could contain security exploits(basically this means, we are lazy and don't want a hassle) All in all it is just really annoying and every dev working on web based b2b applications has to live with it. =/ I figured I'm one of the lucky ones because we don't support anything lower then IE8. 
&gt; #2 Programming in Perl -_-
Very straightforward use of the yield operator "-&gt;", and useful event notifier objects such as ResultNotifier and QueueNotifier. A good extension overall, if you don't mind writing code that compiles to javascript (coffeescript fans).
The size of internal applications is mind-boggling, and that's why it takes big companies and government so long to change. What's more disturbing is that most of those expensive apps could be replaced with open-source, free software, but "Not Developed Here" keeps them using buggy, slow, poorly-featured crap that slow the users down and hold them on IE6.
it's unmoderated list and anyone on goodreads can add any book to it, so some idiot consider it's fun to add that book.
It's a nice operator, although rarely used. I believe its most appropriate usage can be in place of undefined, which can be redefined while *void* can't: it's an operator. So instead of writing if(value === undefined) or if(typeof value == "undefined") we use if(value === void 0) same result and we save some bytes :)
very nice widget!
I will use telnet and lynx to browse the web from time to time, for some select sites.
If you are good perl programmer, you are automatically a good javascript programmer 
You hardly ever need to distinguish between null and undefined. if (value == null) Is usually good enough.
&gt; You hardly ever need to distinguish between null and undefined. Yeah, I wish someone could explain what went through the minds of however invented JavaScript when they decided that "null" and "undefined" would be two ever-so-subtly different things that behave essentially always the same except in strange corner cases. Is there any reason for this except purely to confuse people? Well, it could have been worse. They could have had "null", "undefined", "void", "nonexistent", "empty", "nothinghere" and "mu" being all subtly different. Instead of seven, they chose to have only two so it could have been worse.
Somewhat true, but most of the intranet apps are very highly specialized and problem domain-specific. In short, there are **no** publicly available alternatives, anywhere. In the slight chance there is something similar, it would likely have to be hacked to high hell to meet the organization's requirements, in which case the cost/benefit margin of switching starts dwindling in a hurry. For some reason, management likes to keep what's proven to _work_. As long as it isn't causing massive workflow issues, it's probably not going to be replaced. Only when the software becomes irrelevant or unpatchable does it get replaced.
Try health care where people's lives can literally be at stake.
What's the context? I don't think I've ever written JS that deals with frames; this seems like a tool for those creating animated applications, like games, no? I very highly doubt that they are measuring ethernet frames.
_3 years ago_
It sounds like you're looking for HeadJS http://headjs.com/
The difference is null is a value that intentionally represents the absence of any value, whereas undefined is a variable which has not been assigned anything.
Yeah, but in what way is the difference useful for anything? I can imagine contexts in which one would want to know whether a variable has been assigned at all, but this could be done with specific functions (something like defined(variable_name)) rather than having "null" and "undefined" act as *values*.
It's useful in determining whether a property of an object exists and it's just not set or has been unset somewhere in the code. var obj1 = { prop1: null }; obj1.prop1; // null obj1.prop2; // undefined Does it warrant there being a distinction, especially when you already have the `in` operator or `hasOwnProperty` method? Probably not.
Woot! Thank you, fine sir!
It looks pretty to have a short but clear operator to denote asynchronicity, but I'd prefer the syntax for functions was just shorter. Passing a continuation/callback/closure is clearer and easier to think about for me. It also makes it much easier to abstract in different ways. For instance, here's a function which takes a callback, f, and returns a function that will call f after it has been called n times, so you can do n ajax requests or animations or something in parallel and do something after the last thing finished: function call_after_n(n, f) { if(n === 0) f(); return function() { n--; if(n === 0) f(); } } jQuery has "futures" now to handle cases like this, but the calculus of combining asynchronous events is rich and well handled by embracing first class closures. 
JavaScript was literally conceived in a matter of weeks by one person.
From http://happyjs.com/: &gt; submitButton (string): If you pass jQuery selector to this the form will be validated when that item is clicked instead of on submit. Can't you just use that for your 'submit' button?
Yes, but then how do I get it to submit the form? Ie, user clicks "Submit", it validates the form, but its type=button not type=submit so what is going to make the form submit? (forgive my javascript retardation)
Yes! I'm looking to organisation charts, and some of this functionality would be very useful!
Snopes.com uses javascript to disable selecting text.
form.submit(); or, you could put an onSubmit="return validateMe( );" on your form tag to call a function that must return true before the submit happens
So I figured out the solution, I don't know why, but it's working now so yay. Adding the onSubmit on the form element was a nogo (I had tried that), but your comment make me think about doing it on the button itself. Sure enough doing an onClick on the button itself and it works. Weird how the onSubmit function would run (did an alert, worked fine) however the validation code inside that function didn't work.
i'm unfamiliar with the happy library that you're using, so i have no idea. glad to hear you got it working.
very 1990s. i recall using this exact method in 1998.
You mean like Visual Basic?
If you use hasOwnProperty in a loop then you are a snivelling coward. ;)
Let's look at this from the perspective of how the user will interact with the app. They log in. They are shown a list of employees. Here you'd have a controller with a method that sets up the state of the view. This method would get the list of employees, and a way to key them (most likely their database id) from the Employees model. It would pass these data to the view, which would render them. Let's say the view draws an HTML table with the employee name and their position. Both name and position would link to an employee view page for that employee. For now, let's assume that a user clicks a link for employee 49. They are taken to a page that lists more detailed employee information and the tasks for this employee. At this point, we'd have a controller (it can be the same controller as the one that displays the employees list, or a different one, it's up to you) render an employee view page. The method to render the view would expect an employee id (usually passed through GET or POST variables). Using this id, it would get all the detailed info about the employee from the Employee model (depending on how you set up your data base and what patterns you use to map objects to it - it might be the same model as Employees). Then, using the employee id, it would get the list of tasks from the Task model. So the Task model would probably have a method like getTasksByEmployeeId(employeeId). The controller rendering the employee view page would just ask that model for the data by calling that method and passing the data to the view. 
You can use JSON.stringify to store it, then JSON.parse to call the object back. myObject = { stuff: 'things', other: 'stuff' }; localStorage.setItem('myThingy', JSON.stringify(myObject)); var getObject = localStorage.getItem('myThingy'); console.log( JSON.parse(getObject) );
http://mylittlehacks.appspot.com/localstorage view source, steal, repeat
As others have noted, you can serialize the data to JSON before storing it. One thing I would note though, is there are a lot of libraries that will wrap this and handle it transparently for you. Some of them will also wrap other storage facilities like Google Gears, IE's user-data, Flash Cookies, etc etc ...and use the "best" one that is available. Most frameworks/libraries have plugins (or what-have you) for this, so do some digging around based on what you use. On a current jQuery project I'm using [amplify.js](http://amplifyjs.com/) which though not exhaustive, has pretty decent browser support for amplify.store.
This is the only way to do it but remember: myObject != getObject Even though outputting the values would get the same output, they do not point to the same object reference. Setting myObject.stuff = 'other things' does not set getObject.stuff to 'other things'.
Ruby on Rails is a great way to learn about MVC, since the entire thing is structured that way 
If a particular web browser is part of the "lives at stake" chain in your HCIS system, you've made some pretty sorry choices.
If you look at the W3 document (which is still in progress) the actual API is as follows: setItem (in DOMString key, in any value); See (http://www.w3.org/TR/webstorage/#the-storage-interface) So according to the spec, we should just be able to store like this: localStorage.setItem('hello', { world: 'no...' }); But in reality, to keep the trend consistent, browser vendors have completely ignore this change in draft and have cause a lot of confusion to webStorage users. Hopefully this will change soon. Until then, you will have to stringify (and parse) objects in order to store JSON objects;
You are missing a controller and view. Instead of adding a GetTasksForEmployee(employeeId) to the Tasks model, create a new controller, EmployeeTasksController, which combines employee and task models to feed to an EmployeeTasksView. 
It's worth noting that you might want to use a try/catch here, since JSON.parse will stop your entire script if what you send to it isn't valid JSON. Example: var safeJSON = { parse: function(data) { try { return JSON.parse(data); } catch (error) { console.log(error); } } } now you can call safeJSON.parse() instead of JSON.parse and it won't kill your script if you've stored some invalid JSON.
To me, MVC is more of an abstract architectural concept regarding how data should flow than it is an object-oriented thing, but to the extent that objects are involved, it makes more sense if you think of the view and the controller from the perspective of how they interact with the model and not how they interact with the user. The main point being that the model sends changes to the view and the model receives changes from the controller. I guess it's possible to wedge each individual UI component into this pattern, and there are concepts floating around out there about viewmodels and controllerviews, but that all varies between frameworks. If you really want to apply it here, I would tend to say that you have two UI elements. They are both views to entirely separate models, i.e. abstract lists. One of these views also acts as a controller to the other view's model. It accepts user input and changes the underlying model of the other view. As far as the actual Employees and Tasks tables go, though, they are part of one model (e.g. a database on your server), and this page is simply a view or a set of views for that model.
So do I ;) But lynx doesn't work for web based GIS applications or google docs. :P 
If it's bytes you're looking for: ""._ is shorter.
Well I'm not sure, I just know we charge more. Usually the project owners don't care for IE6. :)
Also, you can do this which makes the whole thing pointless: var foo = { prop1: null, prop2: undefined }; foo.prop1; // null foo.prop2; // undefined Object.keys(foo); // ["prop1", "prop2"]
I like this wrapper: https://github.com/whitmer/store.js
At some point you will hit the 5mb limit of localStorage (as I do, my wrapper library just removes half of the old cache). [Lawnchair](http://westcoastlogic.com/lawnchair/) is a good solution if at some point you'll need/want to move from localStorage to indexedDB
But it doesn't really work in GUIs, because the whole thing starts and ends in one request. IMO Sproutcore and Backbone/Spine show how MVC can (and should be implemented) when it comes to Javascript heavy applications.
Primarily because *getObject.stuff* doesn't exist. *getObject* is a JSON string representation of *myObject*.
I ended writing my own script based on the idea in that link, if anyone is interested PM me.
As M1573RMU74710N pointed out you can use AmplifyJS to abstract away the serialization for you. amplify.store can either pick the best storage for you (based on your browser) or you can specifically pick a storage mechanism like localStorage and it will still handle serialization for you. Examples: $( function() { // amplify.store will take care of serializing/deserializing // and choose the best persistance tech available on the client amplify.store( "example1", { name: "Elijah", children: [ "Abby", "Enoch", "Ezra" ] }); // amplify.localStorage will take care of serializing/deserializing amplify.store.localStorage( "example2", { name: "Elijah", children: [ "Abby", "Enoch", "Ezra" ] }); var example1 = amplify.store( "example1" ), example2 = amplify.store.localStorage( "example2" ), everything = amplify.store(); console.log( example1 ); console.log( example2 ); console.log( everything ); }); http://jsfiddle.net/elijahmanor/gvEBX/ You can view more details on their website http://amplifyjs.com/api/store/
[Javascript design patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) [Detailed explanation of Javascript](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/) [Eloquent Javascript](http://eloquentjavascript.net/contents.html) [Javascript garden (avoiding common mistakes, best practices)](http://bonsaiden.github.com/JavaScript-Garden/) [reddit comment](http://www.reddit.com/r/javascript/comments/fpp7m/recommendations_for_mastering_javascript/c1hs3fq) Perhaps you could even read the Ecmascript specification. [pdf](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)
You can read *JavaScript: The Good Parts* By Douglas Crockford in about a day, maybe two. It's a short and sweet book. It is heavily biased and very much gives you Crockford's perspective on JS, but there's no doubt good stuff to learn from it.
Also often just asking a question to google will give you a Stack Overflow result that explains everything you need to know.
Web Workers are a perfect example of the terrible kinds of APIs committees create. I predict that in a year or so, Google or Adobe will be forced to add *real concurrency* to Javascript. Over a year ago, I tried to make a reimplementation my JavaScript raytracer using Web Workers. Ray tracing is one of the most trivial algorithms to make concurrent because there is absolutely *no data synchronization* required within the main loop. It ended up running more slowly using 100% on all 4 cores than the original ray tracer was with only 1 thread! After digging a bit, I discovered that you simply *can't use Web Workers for processing any significant amounts of data.* First, there is the issue of having to serialize everything you send to a Web Worker. This is actually a bigger issue than it may seem at first because JSON.stringify() is often implemented recursively and large nested structures can potentially run out of stack. Since you can't share data between Web Workers, the serialization requirement means that at one point you would need to have at least one copy of the original data and one copy of that data in string form (in the main thread) and then one copy of the string for *each Web Worker* and also one copy of the data in each Web Worker (each WW calls JSON.parse() on the string independently). This all places a **huge** load on the garbage collector and means that the amount of data the browser can process is reduced by a factor equal to the number of Web Workers! Second, you have to serialize everything you send back. For a ray tracer, the data returned to the main thread would be pixels and that shouldn't be very data intensive. That is until you realize that you have to take the 3-bytes per pixel and turn it into a string (I used an array for rgb) this turns each pixel into roughly 18-bytes (up to 9 bytes for data, 8 bytes for quotes and commas and another byte or two for brackets). This meant that my 2.4kb per scanline were being converted into 14.4kb of string data, copied into the memory of the main thread, and then deserialized. In the end, this means that to render a single frame, about 2mb of pixel data had to be converted into 11.5mb and then once again decoded. Admittedly, this isn't the most efficient encoding scheme but even using a single packed-integer to represent the pixel data results in about 8mb of json per frame. All this encoding, copying, decoding, and garbage collection results in parallelism that is very often slower than the serial equivalent.
Yes, take a minute and read the answers in this thread.
Also search for Douglas Crockford's videos. He's recorded a ton of them and they are very informative.
This. If you need a deeper reference Essential JavaScript from O'Reilly is a text Crockford reccomends.
Those are some great links. I'd definitely put Javascript Design Patterns at the bottom though. It's great and full of great tools, but my personal bias tells me that loving Javascript requires that one stops thinking in Java, which listings of design patterns can't help. 
You will find a lot of good resources here: http://blog.reybango.com/2010/12/15/what-to-read-to-get-up-to-speed-in-javascript/
The resources [here](https://developer.mozilla.org/en/JavaScript) are pretty much the best I've found for Javascript
I've been reading this source for awhile. I like it, but felt I might need a bit more. Some informal blogs, reading existing libraries and a physical book always help (Staring at the computer screen 12+ hours a day gets old, sometimes laying in bed reading a book is nice).
damn that sucks. It should be 10% * the number of versions behind the current stable IE. So currently it should 30% and bump up to 40% when IE 10 is out..
If you follow along with this "let's make a framework" series from DailyJS you will probably be great at JS by the end of it. http://dailyjs.com/tags.html#lmaf
davisjs.com has been bookmarked! i'm really looking forward to using it on my next single-page app.
have an upvote, sir; this made me smile. :)
The only two JS resources I need are the ECMA 262 specification and the quirksmode.com compatability tables.
Oh, StoneCypher, you never change.
You were downvoted because if you answered every JavaScript question that someone had with "Learn jQuery" then you aren't helping anyone. Additionally, learning jQuery doesn't teach you JavaScript. If all you know is jQuery then you don't know JavaScript.
Javascript: The Good Parts Javascript: The Definitive Guide http://www.jquery.com In that order, pretty much.
would be nice for a note saying it's a pdf link
I hope you did that as a morbid experiment, and not as a serious attempt, because you should have seen those results coming a mile away. Web workers are far more well-suited for searchy-type algorithms (e.g. evo algs, traveling salesman heuristics) than rendering high-bandwidth data.
Definitely possible, check out CouchApps http://couchapp.org/page/index Its a pretty neat concept, I haven't looked at it in about a year but it appears to be going strong! 
mongodb, mongoose, backbonejs
supported by which browsers? exactly.
It's in the URL. Get over it.
It shows.
That looks hot.
That's very cool, I'll definitely look into it. My original intent was to serve all HTML/CSS/JS from nginx and have the javascript make requests to couchdb using cross-domain requests, but this would eliminate the need for XDR, I guess.
great explanation!
&gt; While cool, this sounds horribly inefficient. Why not just use something like google's native client? NaCl only works in Chrome. It's not clear whether it will run in other browsers, on the iPhone and iPad, etc. JavaScript is the only language guaranteed to be everywhere. JavaScript is also getting faster all the time - so the speed issue will go away. 
Link's broke for me. Anyone have a link to a cached copy? 
Why would you want to? Since you have basically no control over when things are drawn anyway? And I can't think of a browser that cares about refresh rates either. 
I prefer [this](http://selflanguage.org/_static/tutorial/Tutorial/index.html) (or should I say *self*). ;)
Can't be done. But if it's smooth animations that you want, checkout the requestAnimationFrame function. There is good info here: http://paulirish.com/2011/requestanimationframe-for-smart-animating/
werks4me, try again.
I had thought that if you continually call 'requestAnimationFrame' with a callback, and counted how many times it was called over a second, it _might_ tell you. But trying this myself I get 60fps in FF on a 75hz monitor. So an alternative way is to use a Java Applet, as Java can get the refresh rate! Some parts of the Java API are blocked from applets (so it might not work), but I don't see any reason why it would be blocked. You can build a method into the applet that works out and returns the refresh rate, and then embed it (hidden) in the page. From JS you then grab the applet and call the refresh rate method. [Here](http://www.exampledepot.com/egs/java.awt/screen_ScreenBits.html) is example code on working out the refresh rate, others can be found on Google. You can also find JS &lt;=&gt; Java interaction examples online too. Other alternatives you could look at include VBScript and ActiveX, which are IE only. I'd imagine they can do this trivially. But they are also (quite rightly) blocked by default and should be avoided like the plague unless your building something very powerful (for example ActiveX is how some (all?) of the online virus scanners work).
The only way I can think of is to use requestAnimationFrame and see how often you get called. Other factors can interfere with the result, but most of the time it should work. Why do you want know anyway? I mean, in what situation does it matter?
Okay guys, listen up: now that everyone's embracing the changes in HTML, CSS and JS please don't go crazy with effects. Having lived through the Flash years with spinning 3D menus and other absurd (yet...neat) stuff I don't want everyone to think that just because it's "open" you should make everything 3D and hyper-interactive. Also, I'm going to start posting old Flash sites as links for inspiration for the HTML5 blogs and sites. ;)
&gt;However Javascript only provides by default a specific case of prototypal inheritance with the new operator. Wait, what? I thought the new operator was how classical inheritance was shoe-horned into JavaScript?
Half of those just use javascript and canvas, which is sure html5 thingy, but, "power"? meh
Few days I discovered this awsome HTML5-based game: http://entanglement.gopherwoodstudios.com/ - Entanglment. :) Hope you enjoy it.
Stay within the golden mean.
does anyone reading r/javascript seriously care about adding a Lua backend for Coffeescript?? can't this get posted in r/coffeescript? what the fuck. posting an article about two languages that are not Javascript in r/javascript just seems stupid.
Dude... we don't have to use Flash for this stuff. That's a pretty big cause for celebration right there.
I agree with you. I have no interest in coffee script and don't think it belongs here.
ohh...now I see! Annoying, for sure, since it just takes a simple ctrl+a(or equivalent) to select a whole page.
true, but there will always be *some* cases when I want to distinguish between null and undefined. Anyway, the focus in my comment was on addressing problems caused by the redefinition of the 'undefind' global
nice trick ;) but I wasn't totally after byte savings
TL;DR: Make everything smaller.
Disinformation, spam, and it's not even javascript. The trifecta of bandwidth wasting.
Yea. Let's celebrate having to get around browser inconsistencies all over again due to different (or zero) browser implementations of the standards. Yay! // webkit hack for html5 blah // ie hack for ie9 // non html5 version for ie8,7,6 // moz hack for firefox I can't wait! 
nice. i like that a lot. i wish it would be more like the interactive jquery one. also a lot of 404 here but its a well done start.
It matters when you want to inject subliminal advertising for as long as possible and still have it be subliminal. 
What?
f a i l
Apparently he meant to link to here: http://www.everyjs.com/
I typed fs.writeSync and it didn't find anything, but it worked fine with fs.writesync -- probably a case bug somewhere. 
Thanks! I've fixed that (in my local dev version for now).
Thanks! :) Are you getting 404s when clicking on some specific links? Which ones? By interactive jquery one do you mean [this one](http://remysharp.com/jquery-api/)? It sure looks nice! 
There is also visualjquery.com I couldn't easily spot the search box - highlighting it would really help. A good initiative, thanks for the same :)
It's slightly less verbose than straight JavaScript, but it still has loads of mode switching/escaping, so it seems just as error-prone to write. I don't see the benefit. Projects like [Weld](https://github.com/hij1nx/weld) are much more interesting to me since you write straight html and then *apply* your data to it.
jquery templates. works very nice. its even hosted on msdn cdn.
 I had been using ejs for a while and just looked over weld after you mentioned it...gotta say I am impressed. I will have to give this lib a shot in one of my new side projects...
this is not unique to javascript. many programming languages will return similar results. it's a problem with floating point math, not with javascript.
Why is everyone so concerned about null == object? The majority of programming languages represent a not defined object as null. This is also the main reason, why I think having undefined *and* null in the same language isn't bad. Same with NaN being Number. It's like ... null with a type definition. I don't see any problems there.
&gt; Are you getting 404s when clicking on some specific links? Which ones? 1. Go to the main page 3. Hit browser back button 3. Observe "404" text after the hash in the window.location is cleared Happens in latest Opera and Chrome. 
Agreed on the search box, especially after you click it and the selection is cleared. OP, try `&lt;input placeholder="Search here!"&gt;`, or a `&lt;label&gt;`.
It's a secret to everyone
To be honest, this reads more like "10 things any JS developer worth hiring already knows"
&gt;The concept of the JavaScript micro-framework has always existed No it hasn't. Not unless you define "micro-framework" as any and all included .js, making the term fucking meaningless
HTMLCollections are *not* live in some cases! Specifically, the collections returned from Node.querySelectorAll are non-live.
But then why make undefined be a value? a = {x:1} b = Object.create(a) b.x = undefined // b.x === undefined delete b.x // b.x === 1 Something shouldn't be able to be defined as undefined. That's what null is for. If that's not what null is for then null isn't for anything. Having undefined as a value would be enough. Having both null and undefined values is excessive.
I'm worth hiring. Woo!
That is how they're defining "micro-framework", but if you don't have the term for it, then you can't write a blog post about it and get your article posted on reddit.
When the author admitted to not understanding the math behind floating point precision, I lost a lot of faith in him. It really is a simple thing to show.
Fuck smashing magazine and their lists of things.
Number 7 on the list has a poor example. var someVar = 'hello'; setTimeout((function() { alert(someVar); })(someVar), 1000); var someVar = 'goodbye'; The function executes immediately and the timeout isn't set (since there's no function to execute after the timeout). It should rather say something like this: var someVar = 'hello'; setTimeout((function(innerVar) { return function() { alert(innerVar); }; })(someVar), 1000); var someVar = 'goodbye'; EDIT: He fixed it now.
He didn't quite say that... (although you probably are!)
Where did he do that?
Where did he do that?
Its just like every other hughly popular templating language : erb, php, jsp, in its use of magic tags. Of course, it's much less error prone than ""+"" in the same way that these classic tempting language are. You see HTML, not JS. It's also going to be much better performing than Weld as EJS does straight array of strings concat. Furthermore, it's powerful, allowing any code to run between &lt;% %&gt;. Some people might feel that's too much power. 
.live()
So the moral is, regular non-jQuery JavaScript can be live, or non-live. And collections returned from jQuery can also be live, or non-live?
yep.
Article says the exact same thing too.
Another branch of the gaming industry young people can blow time and money on trying to make a buck. Simply put, unless you are well connected or get lucky, you can not make good money in the gaming industry. You can survive but with the same amount of energy put into another industry, you would make a great deal more money. "Oh, but I am here to make the games, man!", yeah, I was like that too, I still love to dev and entertain others. However, it simply is not worth it from a financial perspective. Okay, don't listen to me, please take a chance as you only live once and why the fuck not.
It's in Poland. That's really un-fun for me here in NZ.
Stopped reading at "Null is an object". It's not. Just because `typeof` is (admittedly) "busted", doesn't mean Null type (and its only Null value) is an object.
2022 here we come! (I know it has been moved up to 2014, just having a little fun.)
poland? really?
Are you saying stay as a programmer, but not for games? 
not really, it's Poland.
Who cares about the money? Video games are one of the most sophisticated pieces of technology, bringing together a wide array of knowledge from AI over procedural algorithms to complex and adaptive, data-driven code bases. Games per se are essential to every mammal's life. They teach us that we can make a difference in the world and provide a rich environment for learning without fear of failure. 
Does that mean that really we're waiting for IE 11 before we can really bitch at MS for standards? If IE is on a 2 year dev cycle. By "really bitch at" I mean, they have no excuses left.
&gt; Simply put, unless you are well connected or get lucky, you can not make good money in the gaming industry. Sure you can. People do it all the time. There are more than 30 Mochi millionaires now, and more than 200 iPhone millionaires in gaming. Why is it that you think that just because you haven't succeeded, that it's impossible?
&gt; Video games are one of the most sophisticated pieces of technology, bringing together a wide array of knowledge from AI over procedural algorithms to complex and adaptive, data-driven code bases. So what you're saying is you've never seen a real commercial game's code base. I've never understood where this myth came from. Other than rendering technology, real games tend to be technological dinosaurs.
&gt; More is going on here, but it’s beyond the scope of this article (not to mention the mathematical capabilities of this author).
I still can't get on with CoffeeScript, because I think it's reinventing too much. I prefer the approach taken by Google Traceur: http://code.google.com/p/traceur-compiler/wiki/LanguageFeatures to build on existing JS syntax. All they need now is a compiler you can use on your own machine, rather than referencing their JS every time.
I love the first comment on the W3C Blog. Here it is for your convenience. Makes me wonder if this genuinely someone who is new to HTML, or someone that is playing dumb "Hello, I am learning HTML coding, and am a little confused. The instructor keeps saying that different browsers don't support all the tags in the same way. This makes no sense to me. The whole reason that we had the desktop publishing revolution with standardized page layout and fonts (Postscript) was so that anything printed anywhere would look the same. Now, I'm learning that this is not the case with browsers. Isn't this like 2 steps forward and 1 back? I'm befuddled...this is like learning to typeset for 5 different machines! Does HTML 5 solve any of this??? "
This makes me either happy or unhappy.
Also it's needlessly redefining a variable.
When the formless void differentiated into the sea and the heavens, and the seas parted to reveal the land, and the land gave forth flora and fauna, the gods shaped the fruits of their efforts with backbone.js. I mean, how else could they deal with the complexity of a project that size?
I wish I had more experience with this issue to be able to offer a response I trust. Right now, all I have is a suspicion that the whole thing is wrong and pushState does not fix it as effectively as HashBang does. The browsers choose what to pull from cache based on the part before the hash. That means, if you have a root, template page, with multiple sets of content, it must always have the same URL up to the hash, or it will be pulled from the server more than once. For HashBangs, this is fine. The URL before the hash never changes, the cache contains a single copy of the template and the template loads the correct content. Changing the URL later, using pushState, doesn't insert the template page into caches as the new URL. In fact, it never loads the new URL at all. The next time the user tries to access that URL, they're going to get a completely fresh copy of the HTML page and store it again in the cache. Whether it's the same content or not, depends on the architecture, but it will always be a second copy of the template. That's inefficient, and HashBang avoids it. As far as Dan's argument goes, that the server is left unaware of redirects, that's an assumption. He's taking for granted that the initial page request is the only client/server communication, and that's just not true. The server will be contacted for the content to be plugged into the template and it's free to log a redirect or whatever else makes sense at that time.
I know I will get downvoted for saying this, but why don't people start dropping support for IE. I don't test against IE for my personal sites. There really is no excuse for someone still using IE. Let's start giving people those "browser not supported" warnings (that we all used to get when we started using open source browsers)
But, they used Javascript to create the page it's on...
I beg to differ. The notion of writing small frameworks wasn't invented this year, it's been happening since JS was introduced. Only now that it's the hip thing to do to steal ideas from someone else and roll them into a 50-line "framework" is it being considering something groundbreaking akin to a paradigm shift -- which it really isn't at all.
In javascript, as far as I understand, undefined isn't actually a keyword, so when you access it, you are just accessing a variable that hasn't been set, by the name of undefined. That's why you can do undefined = 10; //undefined === 10; To test if something is actually undefined, you have to do typeof(unset_variable) == 'undefined'; When if you do unset_variable == undefined; you are comparing an undefined variable with another undefined variable, which is why they are equal.
If I can't set something to undefined, then I can't pass undefined into a function, then I can't abstract anything having to do with undefined; undefined has to be a first class value. Having null in addition to undefined lets be say "I intentionally don't have a value," while leaving room to detect when a value is erroneously not provided. You could probably get rid of false, but then you'd get a lot of complaints from programmers who don't want to accept truthy and falsey values. I gotta say, I like having all those bottom values.
Any dynamic type system will have some esoterica at the bottom that programmers ought to know before they do anything too clever. Calling those facts "oddities" is misleading and harmful because it implies that they are arguments against the language. 
TL;DR: Javascript is a dynamic language which does not provide the same solutions to common problems that the author expects.
Awesome summary, I too believe that HTTP and unique URLs are very important building blocks of the web. When using client-side data fetching, so much needs to be taken into account - analytics, advertising. Yuck, it's just so not worth it and most 100% ajax sites look and feel worse (gawker sites, billboard.com - they just feel so weird), the page loads really fast but it's empty until the content is loaded - what's better about that? Bookmarking - the # marks data for the client, not the server, the server doesn't even see that information, that puts all the responsibility on something client-side, for bookmarks, search engines, archivers... Awesome set of arguments.
Noob or not that is a perfectly valid point. Clearly there is a failure either in the specifications, the standards process, the conforming software, intermediaries, or all of the above.
And that isnt true in es5... Object.create has a (nuanced) different meaning in the spec than what he describes, though he admits this.
&gt; There’s no such thing as a temporary fix when it comes to URLs. QFT. Also, shebang sites break half the time when I try to use them. Terrible.
Yes.
&gt;[caching] There is no difference when it comes to caching of static resources. It's exactly the same either way. The big difference is that you can use proper URLs with pushState. The site works without JavaScript and you can then dynamically enhance it with JS if possible. This means you also get faster loading times. Basically, it's like using hashbangs but without *any* downsides.
It is a more compact JavaScript. What is the problem with that? I love my languages to not be chatty in places where it matters. 
Well, it's actually pretty nice. You can use the same code for the web version, the Flash fallback, and the iOS &amp; Android ports. You probably won't get rich, but getting some passive income from something you happen to enjoy isn't that bad, is it?
If I pull down a static resource as /root_template and then fill it in with a bunch of data from a database, that resource is cached as /root_template. If I update the URL to /root_template#!database_id and they bookmark that, when they come back, it will use the CACHED copy of /root_template. If I update the URL using pushState to /data/database_id, and they bookmark that, when they come back, it's going to have to contact the server to get /data/database_id. And, again for every other database id they have as a bookmark. Hashbangs preserve caching behavior, while pushState does not.
Perhaps a differentiation needs to be taken into account when looking at the uses for dynamic loading: "sites", like reddit; vs application-format like gmail, grooveshark, etc. The latter simply wouldn't work (both in usability and technical implementation) without it.
You can use appcache. If you use xhr to get the client-sided templates, they can be cached, too.
gst, you just don't get it man. you are posting coffeescript in r/javascript and nobody here cares. take it to r/coffeescript, please.
I didn't mean applications, items within them are usually not meant to be searchable or bookmarkable - it's like the wild wild west. I mean pages from content sites, sites that you would want to see in google results or in your bookmarks.
There is good reason to have a javascript to coffeescript converter. I am in the process of porting some personal javascript libraries over to coffeescript. This helps speed the process. The only drawback is why the hell is it authored in python???? I would expect it to be authored in either javascript or coffeescript.
You can do server-side caching, yes. That saves you server resources, but not bandwidth, and more importantly, has no respect for your user's bandwidth. If that's ok with you, you're not a very good developer. The template itself can never be cached on the client side when it has multiple URLs. This might be a bug in HTTP. It might make a lot of sense for HTTP to allow a syntax for specifying multiple URLs that all refer to the same binary content, but display differently. HashBang is a poor substitute for that, and pushState is too.
Hashbangs can go die in a fire. There are _very_ few situations where they are actually useful. News sites and social networking pages are _not_ one of them.
I'm pretty sure its just meant to migrate existing JS to CS once and then from then on you just maintain the CS.
&gt;The template itself can never be cached on the client side when it has multiple URLs. You can cache as many client-sided templates as you want (localStorage). The domain is relevant, the path, however, isn't. If you want it to work without JavaScript, too - or if you want that the page loads very quickly, you have to send static markup over the air/wire which also contains some code to bootstrap your application. Since it's only done on entry, it really isn't a big deal. The overhead is also basically non-existent since most of that stuff should be data the client would have to pull either way. Those 1-3kb of markup fluff don't really change much. (Your definition of "template" is kinda odd, by the way.)
This is from 2005. That's right, almost 6 years ago. I guess the idea/probelm to solve is still relevant today.
That is amazing. Good old JS.
Runs like a giant pile of garbage
Looks like it's already there: http://code.google.com/p/traceur-compiler/source/browse/trunk/traceurc http://code.google.com/p/traceur-compiler/wiki/CompillingOffline Edit: ah, there's still a runtime JavaScript file you have to include... and it seems like Traceur depends on bits of ES5 being there, so there go a bunch of browsers.
My guess is that because the jsparser.py is doing the real work and it's a python module.
ever heard of the tower of babel?
I've been using coffeescript for about a week. It's full of win.
What browser are you using? It runs great even on my several-year-old laptop using Firefox 4 or Opera 11. It should work well in the latest Safari too.
It crashes Mobile Safari for me, which I suppose is not surprising.
"Template" is the main HTML page. It's the page that loads your javascript and CSS, the basic structure of the page that AJAX content fits into. The reason to structure a site this way to begin with, (As opposed to a medium-weight client, which is forced to have the same structure for completely different reasons.) is to save downloading all the presentation and layout again each time the user clicks something.
Doesnt run for me. Im using Google Chrome on Windows 7 with a decent spec PC. Would love to see a multiplayer version of this.
&gt;"Template" is the main HTML page. That's what I figured out by myself. However, that isn't a template. It's a complete document whose content you replace. This for example are 3 (of 8) brick-sized templates, which can be used to render any kind of straightforward form: &lt;div class="FormBox"&gt; &lt;div class="hd"&gt; &lt;h3 class="title"&gt;&lt;%= title %&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div class="bd"&gt; &lt;%= content %&gt; &lt;/div&gt; &lt;/div&gt; --- &lt;div class="FormLine FormLine-TextInput"&gt; &lt;label for="&lt;%= id %&gt;"&gt;&lt;%= label %&gt;&lt;/label&gt; &lt;input type="text" name="&lt;%= id %&gt;" id="&lt;%= id %&gt;" value="&lt;%= value %&gt;"/&gt; &lt;/div&gt; --- &lt;div class="FormLine FormLine-Radio"&gt; &lt;input type="radio" name="&lt;%= name %&gt;" id="&lt;%= id %&gt;" value="&lt;%= value %&gt;" &lt;% if (checked) {%&gt; checked="checked" &lt;% } %&gt;/&gt; &lt;label for="&lt;%= id %&gt;"&gt;&lt;%= label %&gt;&lt;/label&gt; &lt;/div&gt; And so forth. These templates can be stored inline or retrieved via xhr/mxhr and then cached and used *anywhere* on one domain. I then only need to throw some JSON at my tiny[1] render function and it creates the desired markup and populates it with data while it's at it. [1 The function which compiles the templates is 7 lines long, the one which renders everything is 12 lines long.]
There's a couple of bugs in it for me.. Sound is weird, and sometimes enemies don't appear until they start shooting. But hey, given how all this is probably the original code compiled to javascript, I'm impressed.
It crashed my Firefox.
Runs great on my POS laptop, other than the fact that it will probably overheat it in a few minutes...but youtube will to that as well.
Exactly the same bugs here on Firefox 4/Win 7.
It didn't seem to work on Chrome for me as well. It did work with Firefox.
Works fine in Firefox 4 in Linux except that the sound is highly distorted.
Same deal FF5 on Windows 7. 8-15fps. No mouse control. Doesn't run on Chrome or IE9 which is a great pity because IE9 has JS hardware acceleration so you could probably get 60+fps on it.
I've recently come to appreciate `with` when used *solely* for access to attributes of the given object, for defining simple templates in code. So to get this usage without `with`... with (DOMBuilder.template) { $template('post' , DIV({'class': 'post'} , $if('post.thumbnail' , IMG({src: '{{post.thumbnail}}'}) ) , A({href: '{{post.url}}'}, '{{post.title}}') , DIV({'class': 'date-line'} , 'submitted by ' , A({'href': 'http://www.reddit.com/user/{{post.author}}'} , '{{post.author}}' ) ) , DIV({'class': 'comment-line'} , A({'href': 'http://www.reddit.com/{{post.permalink}}'} , '{{post.num_comments}} comments' ) ) ) ); } ...I'd have to revert to stuffing things in the global namespace (temporarily or otherwise), which is even *more* horrible: DOMBuilder.apply(window, 'template'); DOMBuilder.withMode('template', function() { $template('post', // ... as above ... ); }); 
where?
The banner at the top. Here it is on [github](https://github.com/jonromero/jon.io) 
Oh, I was thinking about scroll bar;).
The way I've always seen it is that null is absolutely nothing as in "it's not there" and undefined as "This object is here, however there's nothing special about it." It sort of helps with the debugging process, however my brain always defaults to "GRAAAHHHH WHY THE FUCK ISN'T THIS WORKING".
DSLs and Templates really benefit from `with` as you showed above. I can imagine some solutions using eval perhaps, but I think that's probably even more hideout ;)
Pretty sure gst is just a bot that scrapes RSS feeds.
It crashes in lynx for me, which I suppose is not surprising.
I don't think you [tried it](http://i.imgur.com/qSesE.png).
The blogger's complaint is entirely justified from a technology perspective. His entire blog post can be summarized in this line: |This means that the part of the URL after the #, the identifies the specific content, is not even sent in the HTTP request. It’s completely invisible to your server. The benefits of hashbangs without their obvious harms are entirely possible, but the solution would mean applying web technologies to a protocol that performs two-way communication from the start and this means abandoning HTTP in favor of a protocol more elequent. That is itself arguably unfortunate, because the very nature of multi-dimensional communication would require a slight extension of how the DOM is defined. XHR, by the way, does not extend HTTP to two-way communication.
Uses 30-50% CPU on my Mac in Safari, FWIW. At least people looking to make CPU-intensive banners for their websites have an alternative to Flash.
It is kind of funny, I have never really wanted to use _with_ till I started playing with templates and thought 'Hey, I'll bet I could use that _with_ thing I never use' ...and now it is deprecated. Funny.
15 years I've been writing Javascript... this is the first I even heard that `with` existed.
&gt; In many cases, this means that these shims cause many ES5 methods to silently fail. Decide carefully whether this is what you want. No, that is in fact NOT what I want. 
Interesting but I'm convinced that filter method is "slow" mainly because of the function call.
Firefox 4 on Window 7 64 bit. I had sound trouble and my view just started spinning after a while. Keeps about 40 fps though
Could you explain a little? There is a version in the jsPerf tests that shows the performance of inlining the function, and avoiding the function call (which is MUCH faster as expected), but the key point is that this function: function filter(array, fn) { var results = []; var item; for (var i = 0, len = array.length; i &lt; len; i++) { item = array[i]; if (fn(item)) results.push(item); } return results; } Tends to be faster than `Array.prototype.filter`. As I wrote, the reason is behind what extra work, and which edge cases `Array.prototype.filter` takes into account.
Many of the micro-templating implementations I've seen use both `eval` (in the form of `new Function`) *and* `with` (to get the context object into scope). I [make use of `new Function` myself](https://github.com/insin/DOMBuilder/blob/master/lib/DOMBuilder.template.js#L690) as a lazy way of avoiding writing JavaScript in my JavaScript while I write JavaScript.
There seems to be an issue in Google Chrome that prevents it from running. http://code.google.com/p/v8/issues/detail?id=947 (same bug.)
Exactly... in fact, I think I might abuse this tonight for an experiment if I get a chance :)
I think native implementation is not slower because : &gt; * It ignores deleted values and gaps in the array &gt; * It optionally sets the execution context of the predicate function &gt; * It prevents the predicate function from mutating the data But because of the parameter function call cf http://jsperf.com/filter-method-cost You will see that customFilter1 is much faster that mozilla implementation, other ones are not very faster. EDIT : Of course, it's just a conviction, I should profile native filter method (i.e. not mozilla javascript implementation) to know why it's really slower. EDIT 2 : Actually, I'm maybe a bit wrong, it seems "if (i in t)" (customFilter7) *is* the true performance killer in javascript mozilla implementation (with chrome, ie, safari and opera latest versions but not with... firefox)
Sure, you can use with for that. But there is absolutely no reason why you can't just define local variables called DOM, A, etc. Or if you don't want that, just put DOMBuilder.template into a local variable called T or E, or B (template, element, or builder). They you just change your code to T.DIV(), T.A(), etc. Although, with works and in this case probably is fine. Actually, the article did a pretty poor job of explaining what the title says it explains (why is it deprecated?). 
Oh yeah, `customFilter1` is going to be a lot faster. These benchmarks: http://jsperf.com/function-loops/4 were probably a bit misleading. My real goal was to compare `Standard For Loop` with `Native Filter (If supported)`. The `Standard For Loop` case is generally faster than the `Native Filter` case. The `Manually Inlined` test case shows the effect that you illustrate in http://jsperf.com/filter-method-cost .
Sorry, I edited my post while you were posting your response. My conviction was maybe false as I wrote above. &gt; [...] it seems "if (i in t)" (customFilter7) is the true performance killer in javascript mozilla implementation (with chrome, ie, safari and opera latest versions but not with... firefox)
I'm thinking of doing a sort of port/recreation of Wolf3D/ROTT for the browser. If this had worked well it might have put me off. Thing is, I'm planning on doing it using CSS Transforms rather than Canvas.
Code golfing has been going on in the Perl community for a long time: http://en.wikipedia.org/wiki/Perl#Perl_pastimes It's a way of learning the in and outs of the language. I'd say it's really useful in Javascript, which has many ins and outs. Code is not production ready, though. Besides, it's fun.
Me too
Because Internet Explorer is still used by more than 50% of people surfing the web today. You can try and make the argument "but I don't care about those users" but that's just naive. Anything that can be done in Firefox, Chrome, Safari, Opera, et al can be done in an equivalent version of IE, you just have to not be lazy and program defensively. Think about it another way, say a programmer is writing a program for windows and says its only compatible with Windows 7 because he didn't feel like running a simple check to see where your system folder is located(say C:\Windows\System32 vs C:\Winnt\system32 for NT). Sounds like a pretty lazy programmer that didn't bother properly running qa on his code. I'm not saying I like that IE is so vastly different or that I even like it at all, but a good programmer never ignores over half of the market share because he/she doesn't want to take the time to finish the program. tl;dr Program defensively or use one of the dozens of compatibility frameworks, don't be lazy.
Typically, the culprit is the box-shadow. Try removing that and see if it speeds things up. [This](http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=box-shadow#hl=en&amp;sugexp=ldymls&amp;pq=box-shadow&amp;xhr=t&amp;q=box-shadow+performance&amp;cp=13&amp;qe=Ym94LXNoYWRvdyBwZQ&amp;qesig=1zsyWRILM6_oVhf_XWB92Q&amp;pkc=AFgZ2tk74_RFle_9e89Vwkib3X6nS5atqHImdnqD5hM6WtmCS7XIXvvqVIfXJNEtge_fZiKPstC89W-q9FjQ1PttmHa5acYkcA&amp;pf=p&amp;sclient=psy&amp;source=hp&amp;aq=0&amp;aqi=&amp;aql=&amp;oq=box-shadow+pe&amp;pbx=1&amp;fp=3e51b3ab34a5c139&amp;biw=1190&amp;bih=892) might provide some good links.
Would replacing that with images do the job better? 
Dude. The images you're using in Galleria are half of a mb in size each. If you have photoshop, do 'save for web and devices' and try to scale the size of these down. You can retain almost full quality images at that size in about 1/5th the filesize. That will be your biggest speed boost. I do really dig your design though! great work.
You could try [code review](http://codereview.stackexchange.com/) on the stackexchange network. 
Pretty much; there's absolutely no distinction between the two. The closest you can do is compare `inst` to another instance of `M`: var assert = require('assert'); var is_method = function (obj, methodName) { if (!obj.constructor) { return false; } var otherInstance = new obj.constructor(); return methodName in otherInstance; }; var M = function () { this.m = function () { return 42; }; }; var inst = new M(); inst.f = function () { return 42; }; assert.equal(true, is_method(inst, 'm')); assert.equal(false, is_method(inst, 'f')); ... or something insane like `toString`'ing the constructor function.
Not in any usable method anyway. You could always do some string parsing with inst.constructor.toString() but that would just be silly. 
WARNING: [JSLint](http://www.jslint.com/) will hurt your feelings. 
Why do you have a method called reveal that does nearly the same thing as .fadeIn()? Also the identifier + a bits in those functions make it confusing to use. Why not use a proper CSS selector instead of passing a string 'class' in and using that to build a selector? Seems very brittle and unclear what the method accepts as arguments.
that would make sense, and it's fucking irritating. who does this?
Hi, I just peek at your code, I noticed you're quite "organized", it doesn't look messy, but I do have some suggestions: 1) Use a namespace for your functions, like: apetickler = {}; apetickler.conceal = function (...) { ... } 2) This is horrible IMHO $('#'+a+'-information') You might want to change your id/class/naming convention. There should be a much better/cleaner way. 3) This can be done better: $(identifier+a).css('opacity',0); $(identifier+a).css('visibility','visible'); $(x).css({ opacity:0, visibility:'visible' }); OR even better, define the "styles object" apart and then just $(x).css(xStyles); 4) A small detail, you might be completely ok about how you do it, but: $(x).css('display','none') Might be $(x).hide() Well, thats just me. :) PD. Just peeked at the work.js $navigator.offset() Catch it.
If you have `inst`, you can get to the constructor, assuming JS "classy" OOP conventions are met. See my example.
It would be faster.
I can think of two scenarios. One is someone created it to prop up the community to keep it active.... The other is an SEO getting a contributor account in good standing to exploit later
Things I love about Javascript: * 30 lines of code is something worth blogging about and putting on github
Also, you could keep CSS definitions in the CSS file and only use addClass and removeClass. 
I based my logic on the comment: // How to tell that f is a function in a field and // m is a method in an *arbitrary* object? and not the pseudocode/JS. You are correct in that, from `inst.f`, you cannot get `inst` in normal ES3 or ES5. That, however, is not a constraint made [clear] by the OP.
Then don't use it? Having many functions such as `Object.keys` and `Array#forEach` are really helpful for me when writing JS for the browser, and the ES5 shim provides solid solutions (and more).
Totally true!! And in that way: First build HTML, then style with CSS, then add bells and whistles with JS. Its not about working for old browsers, its about code organization, semantics and a lots of good things.
Thanks so much. Your first suggestion, in particular, is something I never would have thought to do myself and makes perfect sense. I plan to do all of this. About the last bit, though: I've never catch-ed anything before; why is it particularly appropriate here, if you don’t mind elaborating?
.fadeIn() and .fadeOut() work with the display property, so when something is faded out, it’s removed from the flow of the layout. When this isn’t what I want, I have something set initially to “visibility: hidden,” then set the opacity to 0 and the visibility to visible, then animate the opacity. This strikes me as a bit inelegant, but I can’t really think of a better way to handle it, except that maybe “opacity: 0” makes the “visibility: hidden” state unnecessary, but the alternative is to declare all those vendor-specific CSS properties.... But I totally slapped my forehead when I read that second part about “identifier+a.” I’ll totally change that. Thanks!
Thanks. I did run my scripts through that a while ago. But I also wanted to get some real human feedback; after all, if JSLint could identify all your technique problems, then a machine could just write all our code for us, right? I’m not quite sure yet how I feel about it. Lots of the issues it points out make perfect sense, but a few of them seem like a fair bit of extra effort to avoid potential confusion that doesn’t really seem likely. Do you ever feel like it’s more of a pain than it’s worth? Do you always implement all of its suggestions? And do you have opinions about any of the JSLint forks?
Thanks a bunch. I didn’t know that was there.
Thanks. I’m not sure if I’m right in thinking about it this way, but I try to set CSS properties with scripts under only one circumstance, which is when I’m setting a transitional state that doesn’t have any semantic meaning and is only used within a function. For example, here, the visibility and opacity are set only to prepare the element for animating; it receives a class once it’s finished. Does that seem like a reasonable exception to you? I hesitate to add a CSS declaration for that because I would never change it and I would have to remember to remove it if I stopped using it. EDIT: Oh, also, the opacity property for #overlay is set only within a function, but I can’t think of a practical way to fadeTo() to a value set in a CSS declaration. Is there an established way to do that?
I'm so sorry, its not "catch it" its "cache it". Sorry, English is not my first language, sometimes I thing one language and write another. So about "cache it": Because, AFAIK, calculation of DOM element size/offset might be a one of the most resource consuming tasks. So, everytime you call .offset() these calculations take place. If you "save" the results in one variable, you will save some valuable microseconds :D
start with eliminating global functions. it's a terrible bad sloppy habit. Also, cache your jquery objects so you are not always constantly crawling the dom repetitively. Whats the point of passing in #access here? navSticker($('#access')); You already refer to #access explicitly in navSticker so you are not really saving any time or making your code any more flexible. Try and do some OO programming where instances of items are function objects with properties and methods which can manipulate their view (jquery object). The code in makeGallery is very verbose, try using templates instead of all of the wraping, appending, after. look into function callback binding, i am not a fan of anonymous inline callback functions, they aren't reusable and lead to unnecessary closures. Have to say your results are really nice though!
Why not use SVG, which is, you know, actually meant for drawing random shapes. [Raphaël](http://raphaeljs.com/) is pretty good for this.
Raphael also works with IE6+
Ah, excellent. I just did as you suggested, along with $('#footer').offset(). It might be my imagination, but I think it's scrolling ever-so-slightly more smoothly in Chrome now, which is something that was bothering me. Thanks!
Thanks a lot. Some of what you said is going a little bit more over my head than the other suggestions I’ve received, so I’ll have to do a little bit of research. So this is exactly what I was hoping for.
Too lazy to find the exact point but somewhere in [this talk](http://www.livestream.com/etsy/video?clipId=pla_1463e546-47ed-4a93-b59a-bd52b236e8b8&amp;utm_source=lslibrary&amp;utm_medium=ui-thumb) Douglas Crockford addresses this. The problem is, as wml653 says, there are still a TON of people using IE (including a lot of them on IE 6). This is not always by choice. Sometimes you're bound to a company policy. And the company's intranet ONLY works on IE 6 because it was written a zillion years ago and does all kinds of crazy things that just HAPPEN to work in IE 6, but shouldn't. Anyway, the point is, there are a zillion people on it, so if you don't support IE, your competitor's site will. Of course you and your competitor would both be happier if everyone dropped IE (especially IE 6) but neither of you wants to be the first to display the "browser not supported" error. At some point, everyone in the world just needs to do that, but it's very much a "who will blink first?" game.
That's exactly my point. It's time for more webdevs to grow a pair. 
Thanks man! I'll give that a shot.
It's pretty easy to strip out the few functions that cause this problem, just search for the comment "this is misleading and breaks feature-detection".
I find JSLint very useful. You can tweak its output by adding directives at the top of the file, for example to turn off various checks. I've found this handy for working around ... "special" company coding styles.
I think it can be optimized (a lot!). It runs smoothly even on my Android Mobile. 
The main reason this was written is because I think one of the biggest hurdles against CoffeeScript adoption is "omg, but I already wrote my app in js, I can't switch now". Also, it's so common to see questions such as "I can do ___ in JavaScript, how can I write that in CoffeeScript?"
Hey, I'm the author of JS2Coffee. I started off by googling "javascript lexer" and ended up getting PyNarcissus, so I figured I'd write it in Python. But then again, I found the actual Narcissus project (where PyNarcissus was based on) was actually written in JS... so heh, mea culpa :)
Awesome...I regularly am looking up stuff for jQuery and the interface on this thing really makes that navigation really fluid. I especially like the 'instant search' capability. Thank you! edit: after looking around a bit more, a couple criticisms: * the demos seem not to work or are rendered incorrectly. * after searching I feel like there should be a way to click 'up' in the navigation or to clear my search query without me having to manually remove the text myself
About JSLint forks: I like [JSHint](http://jshint.com/) a lot. I usually try to pass this one while I'm writing my code, then I go to JSLint.
Sure, that makes sense. Still, try to group these definitions somewhere else. What I do: I create "constants" or generic functions at the top of my script. So instead of doing a bunch of CSS change in the middle of a particular logic, I'd just call "prepForAnim(element)". Also, like ricardoe said, and since you're using jQuery: .hide() and .show() are your friends.
That organisation is a millions times better than JQuery's own API documentation. So easy to find stuff now.
Let's hope that it's kept completely separate from IE, so that the whole thing does not rely on IE "tapping into the native capabilities of Windows using standard JavaScript and HTML". Does anybody know of more information about how it's implemented?
That sounds like a perfect solution. Thanks a million for the advice.
You can bet it will be reliant on IE.
Raphael is a very good library and easy to use; I love how it's implemented. Being SVG, it also looks better and gives you more control over the look/feel of an object. AutoshapeJS is intended to avoid user Javascript use in creating shapes and allows them to be further styled/customized through CSS. That approach can often fit in better with a page's existing workflow.
Ooooh! An *Active Desktop*! That will be a success! Oh, and my bet is that 8 will be nicknamed "Windows ME II".
If you're interested in writing utilities in the future in javascript (or coffeescript) then I strongly recommend using Rhino. It's a Javascript engine built entirely in Java, so it runs on any platform that supports Java, which is pretty much every platform. It gives you the ability to use java objects for things like File access or sockets that javascript doesn't support. I now do all of my new authoring in javascript or coffeescript. Client side, server side and command line utility development is all written in javascript and runs and builds my projects on windows or mac/unix. http://www.mozilla.org/rhino/
I've been considering rewriting the whole thing to use a NodeJS stack. Should that push through, it should be fairly trivial to make it work for Rhino.
Very nice. Reminds me of the [ExtJS](http://docs.sencha.com/ext-js/4-0/) docs.
What could possibly go wrong?
I care, maybe not this article specifically but in general. The syntax for cs sucks but the ideas are good. If you think javascript is great then maybe you should try some other dynamic languages in 2011 and get back to me. Somthing like cs lets us working developers use high level concepts to do more work in a shorter amount of time. I like the idea of a superset of js better though, like the other link dropped in here.
I totally agree. There is no need for all the weird new syntax in cs. Sweet link, this project looks about right. Gonna read about it. 
THANK YOU. jquery.com's docs and search are atrocious.
I like that the offline version is available so that I can add a new feature (such as looking up the function definition) to the offline documentation myself.
You bet your ass it won't be. They've been holding back on Active Desktop 2.0 since the failure that was Windows ME.
Why do I get the feeling this is supposed to compete with ChromeOS et al, not be a successor to Windows 7 on the desktop? I'm not going to give up my keyboard for something that will give me a tennis arm trying to use switch between running processes. It's very telling they don't show using the Office applications with the touch interface. Going by the size of that guy's fingers and the cells and icons in Excel, actually trying to use that [probably wouldn't work out](http://www.youtube.com/watch?v=8DtbPOXFk00).
I would like to add that I'm glad that this can't be done. If it could, well intentioned but culturally biased programmers may start writing libraries for Javascript that effectively inflict static typing on the language in such a way that robs Javascript of some of its superior object oriented aspects. That being said, functions in Javascript carry their scope but not their context, you just have to pass the context along with the function. function is_method(context_object, method_fuction) { for(var i in context_object) if(context_object.hasOwnProperty(i) &amp;&amp; context_object[i] === method_function) return false; return true; } If you were a bad person, you could overload the prototype of Object to add this as a method and then be able to say context_object.is_method(context_object.f) but that is obviously not worth it to me. 
NodeJS is frustratingly difficult to setup on a windows machine. Chrome's V8 engine is cross platform right? So why the hell isn't NodeJS?
They would need something that can render HTML and execute JavaScript. Something that IE already does (somewhat) well, so why wouldn't they use it? Not to mention developing these apps will almost certainly involve Visual Studio launching IE to debug.
Yes, of course, but JavaScript access to the Win32 API from IE? That would be like ActiveX all over again. Hopefully, if they've taken that approach there's severe restrictions on what can be done, i.e. sandboxing. Still, that would cause me some concern. In any case, I'm worrying prematurely since we don't even know if that's how it's implemented yet. Even if they've used the core of IE, presumably the API won't be accessible from the browser implementation. 
Because Windows does I/O very differently from the other operating systems (IOCP). Windows compatibility is the main priority for development right now, and to accomplish that, they are writing a compatibility layer over IOCP and libev. 
why not use the AST from uglify?
Why not just use Java? Java has provided a "compatibility layer" for the past 15 years. Serious question. I don't mean Java for the entire project, since V8 is awesome, but just for the IO and other platform abstractions it provides. 
All good in my opinion, currently I'm deploying on JS app as Titanium Desktop and a Chrome App - this will add one more target to my Rakefile. As long as Microsoft doesn't force anyone to use some kind of Javascript MVC .NET 2013 I'm cool with that.
No. Please, Microsoft. No.
Takes me back to all the hours I spent using http://visualjquery.com/ 
| The syntax for cs sucks but the ideas are good. Is it good or not? The "ideas" aren't worth throwing out an entire language and starting over. If you think writing all your source in coffeescript is somehow going to save you time, you haven't considered all the time you'll waste in many other ways, not to mention all the time you'll spend asking questions in #coffeescript trying to figure out why your code is broken. Good luck with that. The only real reason to use CS is because you prefer an inferior syntax without clear delineation of blocks, stripped down to a significant whitespace mess that reads like a run-on sentence. You also must like wasting your time writing code in languages that don't matter to employers. Coffeescript isn't a best practice, in fact it is a worst practice - for anything but the smallest personal projects, avoid coffeescript like the plague. 
Oh hey, it's like iOS, refactored for the desktop.
Rhino is much slower.
It'd be pretty wicked if they implemented it through a replaceable library, though, so you could replace the rendering engine with Firefox/Chromium. And I can't imagine it will be a success otherwise.
I keep seeing people say this and to me it looks nothing like iOS, and everything like windows mobile 7 (or whatever the hell they call it) and even that looks nothing like iOS. How on earth does this resemble iOS at all? answer: It doesn't. also it looks retarded.
Ya you have those images as 24-bit png's. Go JPG, 72 DPI, around 60ish quality.
JSLint seems to have a few things to say about your global variables.
JSLint seems to not understand that I'm only declaring one global variable. &lt;script type="text/javascript"&gt; var key, original = [], updated = []; for (key in window) original.push(key); &lt;/script&gt; &lt;script type="text/javascript" src="janis.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; for (key in window) updated.push(key); console.log(updated.filter(function(key) { return !(original.indexOf(key) &gt; -1); })); &lt;/script&gt; Will return: ["Janis"] In console.
LOL. u mad? The desktop ain't going anywhere because even the best web apps are complete shite compared to their desktop counterparts. EDIT: awww, you deleted your comment... pussy.
Are you comparing JS to PHP? Ouch.
How does Janis compare to [Emile](https://github.com/madrobby/emile)?
You have a couple implicit global definitions. Not using var during the first declaration, or assignment, will attach the variable to the global namespace. 
I disagree. The syntax is different but they use the same frameworks and run in the same environments. CoffeeScript is pretty JavaScript and just because something is in CoffeeScript or related some how doesn't mean it should be banned from this reddit. 
I've just rewritten in to work in a browser. Will release that soon.
I've just rewritten it to use node-narcissus, and it even works on a browser now. Will release it soon.
The biggest hurdle to coffeescript adoption is that it is a bad idea to tie up your code in a 'made up language' that offers questionable benefits, at the cost of making debugging more difficult, and you source code more difficult to read.
nice
&gt;CoffeeScript isn't JavaScript ftfy 
Looks like you are off to a good start! There's always room for competition, especially with micro libraries. Couple quick notes: It's dangerous to use a for-in statement to loop through array elements. Instead, Use either a counter, or .forEach iterator (as you do in some places). But remember, .forEach isn't universally supported. Literals are your friend. Makes for shorter and faster code. Instead of new Array(), just use []. To speed up your loop method, use .concat in place of this.chainQueue.forEach w/this.loopQueue.push. this.loopQueue.concat(this.chainQueue) accomplishes the same this, but now loop or anonymous function required. Hope that helps! 
Excellent- kudos for the AIR app!
If it's about Coffeescript then post it in /r/coffeescript. If you're interested in coffeescript then follow /r/coffeescript. If you aren't interested in coffeescript then don't follow /r/coffeescript. Everyone wins. There's literally no downside here.
Son of bitch. Will fix ASAP.
&gt; Looks like you are off to a good start! There's always room for competition, especially with micro libraries. The concept is for it to be a microlibrary, but it's still a ways off to being that condensed. I'm thinking of dropping cross-browser support entirely and instead making it only support webkit browsers solely to cover mobile devices. &gt; It's dangerous to use a for-in statement to loop through array elements. Instead, Use either a counter, or .forEach iterator (as you do in some places). But remember, .forEach isn't universally supported. I try to only use for-in when dealing with iterating through an Object. This may be what you're seeing. &gt; Literals are your friend. Makes for shorter and faster code. Instead of new Array(), just use []. It's weird, but I have a habit of switching between the two that I need to get over. &gt; To speed up your loop method, use .concat in place of this.chainQueue.forEach w/this.loopQueue.push. this.loopQueue.concat(this.chainQueue) accomplishes the same this, but now loop or anonymous function required. That's awesome. Totally didn't think of that.
It may seem like coffeescript is 'the hot thing atm' but it really isn't. There have been quite a few coffeescript articles being posted in r/javascript lately and lots of blog posts written about coffeescript, but there are far more javascript blog posts and articles being posted here, and for good reason, *javascript is **the** standard* for front-end development. Coffeescript adds little in the way of new features, not enough features that are worth the trade-offs. Writing in coffeescript means to exclude your code from the quite large and growing javascript ecosystem. This ecosystem includes millions upon millions of lines of code, and millions of javascript programmers, and thousands of tools and hundreds of thousands of articles about javascript and answers to every question you may have about the language. It is well documented and explained. Coffeescript is none of that, and it likely won't ever be. It's a niche language for people who find clear delineation of code to be obtrusive/offensive/too much to type - why they prefer less structure in code is something i'll never understand, but it is the only reason I can understand for coffeescript to exist. Splats and anything else it throws in aren't worth the trade-offs involved in abandoning the javascript ecosystem. There is a small but vocal/smug/obnoxious group of coffeescripters who think the world must be told about their abandonment of javascript, and how beautiful and magical and wonderful they think coffeescript is. Same smug bullshit spewed by any noob who gets to a certain point when they realize computers are fun. It is in bad form to be posting coffeescript in r/javascript when there is r/coffeescript. The OP has a very good point that you wouldn't go posting about Ruby in a PHP forum. I've made this argument before too. If someone made a 'Perl-syntax bastardization of javascript' they really shouldn't go posting about it here, it belongs in r/perlscript (for example), or r/perl.
I've never seen Emile before, but after reviewing the code pretty quickly, they're different in the following ways: * Emile uses standard CSS w/ intervals to provide animation, whereas Janis purely leverages CSS transitions to provide animations. * Emile is not object-oriented. * Emile does not natively support the chaining of animation effects, though they can be achieved via callbacks and intervals. * Emile supports a wide range of browsers, whereas Janis is aimed solely at browsers that support CSS transitions. * Emile is very, very small, though the author's claim that it's written in &lt;50 lines of code is misleading. His non-minified source looks like it's already minified. Still, it's impressively small ~~and I'd love to get my minified code &lt; 3.5k. His stands at around 1.7k minified~~. Janis weighs in at almost exactly 3kb whereas Emile is 1.7k.
&gt; Please note, however, that the pause function does not stop the animation in place. The element will finish its current step before pausing. This is a current limitation in the CSS Transition specification, but I'm working out a clever way to address this. Good luck with this. If you want to stop a transition in the middle, you need to know what the "current" value of the animating property actually is, but `getComputedStyle` won't tell you. For dimension-related properties, you could use something like `getBoundingClientRect` (which _does_ give accurate results in the middle of a transition) and work backward from there to determine what styles should be applied. But that's not a generalized solution. If you've got something else in mind, I'm curious what it is.
omg. can everyone just shut up with coffeescript. esp. ruby coders have no say in this case.
The solution I have in mind is extrapolating what position the CSS properties should be in taking into account the time elapsed since the beginning of the transition in comparison to both the applied easing function and the duration of the transition. Afterwards, I'll smash my dick with a hammer just for the fun of it.
Let the upvotes or downvotes on links submitted to r/javascript decide this question. Also, if you are going to slam coffeescript, please post how much actual coding you've done in it. Otherwise you sound like a douche. (Talking about you leptons.)
Most of these should be cleaned up now. Do you have any further recommendations for getting JSLint to like me?
You should maybe listen to [transition events](http://www.w3.org/TR/css3-transitions/#transition-events-) and set [transition-delay property](http://www.w3.org/TR/css3-transitions/#the-transition-delay-property-) instead of using window.setTimeout function for more reliability when chaining transitions. EDIT: line 47: }, this); -&gt; }); line 136: setStyles(opts); -&gt; setStyles(); 
I've been looking for a good animation framework that uses CSS transitions where available, but falls back to JS intervals for older browsers (and IE). Any chance you'd add support for that? Edit: I know the [jquery.animate-enhanced](http://playground.benbarnett.net/jquery-animate-enhanced/) library does just that, but it's a bit buggy on Mobile Safari.
PHP is the Comic Sans of programming languages
Ruby and PHP are different languages. CoffeeScript is a nice DSL that emits Javascript. 
I love CoffeeScript, but who gives a shit about "a Rails developer" and what they think about it? Unless you have extensive experience writing JavaScript your opinion is entirely uninteresting at this point. EDIT: Also, why the fuck are people still writing introductions to CoffeeScript? None of them are better than [the exhaustive introduction on the official website](http://jashkenas.github.com/coffee-script/). Now, CoffeeScript patterns or advanced idioms, _that_ might be interesting. But the basics? Come the fuck on.
JS is a black art. :) But its an art none the less. It could be possible that the idea of doing everything client side spooks some people. But look at Google Maps! Its awesome. I know of applications where a Ruby on Rails service only acts as a data provider and all the templating and styling is done client side, mostly by JS. JS requires a lot of specialised knowledge as well since cases where it can break and be devious are lots, case in point '=', '==', and '===' do different things. But it has closures which some main stream languages do not (yes I am looking at you Java). and it has some very very nice features. Tell your dev friends to prove it is bad rather then tell!
From the [reddiquite](http://www.reddit.com/help/reddiquette) link below: **Please don't conduct polls using the title of your submission.** Instead of "Vote up if you're male, down if you're female", say, "Are you male or female? (Vote in the comments)" and then post two comments, "Vote for this if you're (male/female)" If people want to discuss this, but are in favour of coffeescript staying here, voting the topic down isn't going to help much.
Your friends probably can :)
I'm not sure why it would be bad news. Like any other language, one can write a lot of bad code. JavaScript has come a long way from the browser war days of IE and Netscape. It's becoming such a popular language across a wide range of platforms. Node.js has helped it take off on the serverside. jQuery has given us a lot more capabilities on the front end due to its ease of use. I think this is an excellent decision on microsofts end. Constantly pushing for proprietary plugins is not the way forward.
Agreed - it's like saying "Sass and Less and Stylist and all the other css precompilers can't be discussed in /r/css" Or, like suggesting you can't discuss JRuby in /r/ruby, or IronPython in /r/python. 
Agreed, and further I'd say this means there is a clear relationship between CoffeeScript and JavaScript.
I write a lot of pure JavaScript, and I personally love it. What I like the most is how flexible it is, and how easy it is to fake language constructs with it (modules, classes, inheritance, super, etc). I hope that when your hate JavaScript, they are actually hating the DOM and experience of coding directly against the DOM. This is horrible; but libraries like jQuery (and to a lesser extent Prototype) show how JS has the capability to create entire new APIs which work in very different ways for solving these problems. Again, that fact that you can do that so easily is why I love it so much.
The problem with javascript is/was that people could write bad code very easy. Much easier than in every other language. Nontheless, javascript is indeed a good language.
Thanks for expanding on basically what my thoughts are :)
I've been looking at using coffeescript in a new website I'm working on (it is for myself so it is a good place for experimentation). A lot of the problems you have with coffeescript don't make sense to me. &gt; Writing in coffeescript means to exclude your code from the quite large and growing javascript ecosystem. You can use any javascript library fine in coffeescript. You don't need to do anything to be able to use a javascript library either - it just writes like normal coffeescript code. The inverse (using coffeescript libraries with javascript) is also possible - just compile the coffeescript library to javascript before use. &gt; Coffeescript is none of that, and it likely won't ever be. It's a niche language for people who find clear delineation of code to be obtrusive/offensive/too much to type - why they prefer less structure in code is something i'll never understand I don't know what you are referring to here - nothing I've come across in coffeescript somehow reduces the "clear delineation of code". I also don't understand how coffeescript has "less structure" - is it the significant whitespace that you are referring to there? &gt; There is a small but vocal/smug/obnoxious group of coffeescripters who think the world must be told about their abandonment of javascript, and how beautiful and magical and wonderful they think coffeescript is I've seen people say how the like developing in coffeescript, and how they believe it allows them to code more efficiently. I haven't encountered any smugness about it though. I haven't seen any discussion like the "php is for noobs, use python/ruby/c#/..." ones you get with other languages. The main issue for me with coffeescript is editors for it aren't very mature, and debuggers don't work with it. Two very big downsides, but neither are insurmountable. 
Alright, a better analogy: it's like posting about VisualBasic in a MSIL forum. Both run in the same environment with the same libraries, VB is compiled into MSIL, but the syntax is so different that you just can't use the same discussion space for both of them.
Ruby and JRuby syntaxes are similar, IronPython and Python syntaxes are similar. CS and JS are radically different. To someone that has never seen CS, it would kind of look like Ruby. Finally, CS is touted as a language by its creator.
I think the problem is not the language, but its usual application: web interactivity. Browsers' various native APIs are horribly inconsistent, and it was far worse just a few years ago. Their frustration is likely with issues they hit when developing, rather than with the language's structure. 
&gt;tl;dr: get off my lawn! JS semi-colons give me closure :) You're thinking of functions.
AD was a feature of 98
Lips.
People hate change. They've been using compiled languages, and are comfortable with them. They've neglected using JavaScript simply because it was also a silly web-only language. I've never heard more curse words than when a co-worker who had years and years of C experience was forced to write JavaScript.
A bunch of things come to mind: the bitwise operators are tricky as hell to use (they silently cast to 32bit signed int by spec), it's difficult to manipulate contiguous chunks of memory that are not strings (e.g. there is no 'bytes' type, unless you count WebGL, which isn't really part of JS). Arrays of numbers are not the same thing: they're contiguous chunks of memory that refer to number objects elsewhere in the heap, etc. The above kinds of limitations make building things like e.g. ZIP readers and JPEG compressors ugly and nasty. The argument of 'well, you shouldn't do that in JS then', is itself an argument against JS as a primary language. Strings are UCS-2 by spec, and there is no API for normalizing (in the Unicode sense) them. The lack of threading in most implementations might be seen as a blessing or a curse. If JS was the only language available to me, or mandated by some superior to be my primary choice, then I'd say that's a curse. Probably a bunch more
Nice 'Scintillating Grid Illusion' going on on that page.
Unfortunately what coffeescript postings are doing to r/javascript is derailing the topic of conversation, so that we are now discussing why coffeescript articles don't belong here, instead of us all talking about javascript. It's not like we go posting how awesome and wonderful javascript is in r/coffeescript, but maybe we should. Anyway, Thanks for this post, I think it's about time people here discussed this so that maybe we can clear the air and get back to javascript. 
By using timeouts and intervals, I can still modify styles on browsers that do not support transitions. In addition, I've also noticed inconsistencies with transition timing--animations that should complete at the same time do not, causing chained animations to become out of sync quickly. By using time based functions in JS, I have a little more control over that. I cleaned up those lines.
I'm glad you asked this. Someone [pointed out](http://www.reddit.com/r/javascript/comments/hqhdi/hi_i_just_released_janisjs_a_lightweight/c1xiz1p) the [Emile](https://github.com/madrobby/emile) library to me elsewhere in the thread and it set me thinking down the path of creating a plug-in for Janis that enables browsers that do not support transitions to fallback to Emile. I might give it a shot this weekend.
So you are saying that coding in javascript is more difficult than the problems with coffeescript that require surmounting? I still don't see the net gain here, except for significant whitespace fetishists.
Your developer friends aren't the experts they make themselves out to be. They are probably thinking of JavaScript from a few years back, not JavaScript of 2011. The language has its flaws; all languages do. Some are more annoying than others. JavaScript is also mis-used/abused a lot. But it is here to stay. JavaScript *is* the web now, more and more. And all computers support it via a web browser. That support is becoming faster and better all the time. As far as being excited or apprehensive about Windows 8 -- I think jumping to either based on a single video is premature. But it's no question that JavaScript is here to stay. Anyone who calls themselves a developer in 2011 and doesn't know it should be doing everything they can to learn it. Unless they're going to retire this year.
ORLY? What "domain" is CoffeeScript specific to? Looks like it is supposed to be a general-purpose programming language.
Javascript isn't perfect, but it's very fun to code in, especially now that modern browsers have lightning-fast implementations of it. It's not the best for every case, but for a scripting language it's quite good. I still hate working with the DOM though... :P
I was looking for something like this. all the good looking implementations I found were commercial
I wouldn't doubt that bad text editors are a part of the problem. I've watched other programmers wade through code in shitty editors (anything that requires you to memorize keyboard shortcuts in order to navigate the code instead of pointing and clicking with a mouse), and it is no wonder that they don't produce as much code as someone using a modern editor.
more fun when you copy past this in the location bar. javascript:var%20s%20=%20document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='http://erkie.github.com/asteroids.min.js';void(0);
All fair and valid points. But I'd argue many of them are quite specific limitations rather then the language being flawed as a whole. Hopefully as JS matures further, and is used in more places, these issues (especially threading) will all get solved.
Almost every time I'm writing in another language I encounter a situation which could be solved with a feature of JavaScript.
Downvoted for detailed appropriate response. Please add some bombast and irrationality and re-submit. 
&gt;I've never heard more curse words than when a co-worker who had years and years of C experience was forced to write JavaScript. Try dinner time at my house. ;-) 
And, likely, visa versa. 
I didn't mean for people to vote on my comment, I mean for people to vote on r/JavaScript submissions to decide if they are relevant or not. 
I don't think it's JS itself, it's JS+HTML5. If you've made an app with (to take the MS example) C# and WPF, making an app with JS and a document markup language is extremely annoying.
@leptons- you are talking all kinds of 'smug, obnoxious' shit about coffeescript. Seems that's pretty much all you do is post about how horrible it is, and how anyone that is intrigued by it is a programming noob/retard. How much have you actually coded in it?
I suspect (and I have no evidence to back this up) that the HTML+JS implementation won't give access to the Win32 API, but will be used to show Twitter feeds, etc. They don't say that HTML+JS will be the *only* way to make apps- I'm sure you'll be able to use Win32 APIs when you use different languages.
The two are intertwined because CS has to be compiled into JS. However we are starting to see native implementation of CS now (for CouchDB, for example). What is the relation to JS then? I personally know C#, but I don't think I'd be able to write in VB, although they are both .NET languages that evolve at the same time. With more native implementations of CS, we are going to see more people knowing that language but not necessarily JS. I don't think it's a bad thing, I love seeing new languages, like Erlang, Go, D, ... About the analogy, I think I found a better one: VB vs MSIL. VB compiles in MSIL and both run in the same environment, with the same libraries. Yet, they are pretty different languages. &gt;If we want to exclude Coffeescript, we'd have to exclude jQuery, Javascript IDEs, discussions about web development in general, and all sorts of other things that are not "100% vanilla Javascript" This is not fair. jQuery is not a language, not even a different syntax, it is 100% vanilla JS, technically. It's just a bunch of objects and functions ready for you to use. I understand your point. We can talk about anything JS here, from libraries to IDEs, etc. That includes CS to some extent. But all the articles about CS syntax, native implementations and "how-to" in general have nothing to do with JS. It'd be like having articles about C++ just because someone made a C++ to JS "compiler". 
For me: definitely. CoffeeScript makes JavaScript bearable for me, because it does quite a bit of stuff that I don't care to do manually. And it feels really slick and mature.
 square = (x) -&gt; x * x If I write that in JS, I get a syntax error. If someone that has never CS look at that, they'd probably think it something kinda like Ruby. &gt; If you know the entirety of the Javascript language, you basically know CS I like to think I know a few things about JS, that doesn't make me capable to write in CS. The syntax looks clean and minimalist, that doesn't make it easy. &gt; it lets you use new Javascript features CS doesn't use new JS functions. It merely emulates them with shims. That can be done in JS as well with libraries. The main benefit here is we keep the JS syntax, no conversion needed. 
Sounds like you've never heard of ECMA. Javascript isn't just the javascript 1.5 that commonly runs in web browsers. Many people make the mistake that javascript is this monolithic thing that was invented in the 90's and never changed. It has, and it's still changing. Browser vendors are very slow to adopt any of the updates though, and that is what is really holding javascript back, not any of the things you suggest. Two quick searches with google produced links to libraries that do ZIP and JPEG encoding in javascript. [ZIP in javascript](http://jszip.stuartk.co.uk/) [JPEG encoding in javascript](http://www.bytestrom.eu/blog/2009/1120a_jpeg_encoder_for_javascript) I've done binary in javascript before, and while it seems messy, if you abstract that into functions that handle binary, it becomes a non-issue. It's not the fastest way to work with binary, but it is possible, and for the footprint that most javascript executes in (a browser), heavy lifting is rarely needed there. If I want to do a more robust application that requires more intensive processing (a desktop application) I usually use JScript with .NET and compile it to an exe or dll file which runs as fast as C# compiled code, and use .NET forms as the DOM. It's no surprise that trying to run more complex applications inside a web browser seems like a bad idea - the sandboxing and security required of a web browser in order to run code anywhere has it's cost, and javascript's reputation has suffered as a result of this, but it has also allowed javascript to run on any browser which is a huge win, that no other language can claim. Google and other browser makers have started a new javascript war. The war of performance, and this has been a very good thing for javascript. It will lead to more recent versions of the language making their way into the browser, which is long overdue. With newer versions of ECMA you can have strong typing, native binary support , better bitwise operators, and a ton of other features that have evolved over the last 15 years but have not made it into the browser in a widespread way. I personally like the caution used when updating something as ubiquitous as javascript, but I would also love to use the features of the newer versions. In the meantime JS 1.5 still has a lot left to offer the world, and it is getting real problems solved every day. If you understand the limitations and how to work around them, your software can run on practically any computer as quickly as you can type in a URL. No other language can claim that, and it makes javascript a very potent skill to have. 
I've never coded in it because I have too much work to do to waste my time with it, but I have investigated it quite a bit, even hanging out in #coffeescript for a week just to see what sort of nonsense goes on there (mostly questions like debugging for-next loops in coffeescript because the syntax isn't obvious sometimes). I see plenty of coffeescript thanks to the idiots posting it to r/javascript, and it is incomprehensible garbage in my eyes. It's like javascript without it's clothes on, stripped of clear structure, it reads like a run-on sentence and that is not a good thing when I have to do extra work to figure out what parts of a line of code do what because the clear delineation is gone. That is coding friction, and it wastes time when I have to read through 10s of thousands of lines of front-end code on a typical job. I don't need to code in coffeescript to see the negative things about it, and how it would slow me down. Suggesting that I won't know that i'll like it until i try it is just nonsense. 
mature? hahaha.. that's pretty funny.
I like to get feedback from multiple sources.
No one is forcing you to pay attention. Downvotes are easy too.
This sounds excellent. I wonder if there would be a practical application towards tying this together with JS profiling information.
Wait... you mean you take your hands off of homerow when coding? I can't imagine how inefficient that is. I use whichever editor gets out of my way and lets me write code. I find that Vim's motions provide the most responsive and natural way to keep my fingers ready to type. It's all about reducing the amount of time between code in the brain and code in the file. Whatever gets you there fastest is your best editor. But I can't imagine having to find homerow again after groping for the mouse is any better than a caveman grunting at his fellow to ask for food. Why not just say "get me some food"? That right there is the difference between "modern" editors and proper ones.
Not sure how to respond to this.. Don't know how you inferred I didn't know of ECMA, or why it's even relevant. You seem to be arguing that since the language can evolve, what I said doesn't count, or something. The functioning of e.g. the arithmetic/bitwise operators are pretty much set in stone for the time being, unless some kind of overloading is added to the language (vastly complicating expression type coercion rules and suchlike in the process) along with some binary-friendly type. Of course the language will evolve, but things like the above (and e.g. the semantics of the == operator) aren't likely to change any time soon, and as far as this discussion goes, I think that's all that matters. And if it did evolve to support all these after-market use cases, what will peoples' opinion be of it in 20 years time when its spec is as thick as C++'s? I've personally [done some binary manipulation in JS](https://bitbucket.org/dmw/translink-timetables-pure-js/src/83d785127ec1/js/cdb.js), and would never want to do it again any time soon, especially in a browser environment. It was hard enough just reading it, I have no idea how you'd go about writing an 8bit clean stream.
You wrote some good points in this post and the other one that I'm willing to concede. However, I cannot let this pass: &gt; That's a very weak and largely pointless test though. If I write some jQuery code, and don't include the jQuery library, it will throw a run-time error. Specifically, an undefined exception or something alike. Not a syntax error. You can't put both exceptions in the same basket. It's more than semantics. Syntax is the basis of a language. When I see square = (x) -&gt; x * x var square = function(x) { return x* x } I really see 2 different languages because I see 2 different syntaxes. Just the fact of not using var is an issue (strict mode) and "-&gt;" is not an operator in JS, white space shouldn't make any difference. It's not my goal to appear pedantic. I just really want to point out that it's a totally different animal than jQ. With jQ, as long as I have the library linked in, I can use it while writing in JS syntax (there's no such thing as jQ syntax, just an API). That's not the case with CS... I can't just put CS in between script tags. I mean... [CoffeeScript homepage](http://jashkenas.github.com/coffee-script/). First sentence. CS is a language. I get it, it's a *different* way to write JS... well, unless you're working in a native implementation. Then you write and run CS, no JS involved. Can we agree on that?
 I'm sorry, but you're looking at beginnings of JavaScript evolving from a language into a platform. I know it sounds crazy, but JavaScript is more than a language, it's the most widely deployed user platform. It's only natural and a matter of time that saying "JavaScript" will refer less to the JavaScript language and more to the JavaScript language/platform. This should have been very apparent to you when Brendan Eich decided to give the word [transpiler](http://brendaneich.com/tag/transpiler/) and CoffeeScript a great big thumbs up in his last presentation. Clearly, JavaScript is more than the language with curly brackets. Oh, and in case you didn't know, Brendan's original vision for the JavaScript syntax looked a lot more like Scheme than it did Java. From what I recall, the only reason it resembles C/Java is because his superiors thought a language that looked more like C++ (the big dog language at the time), would be more palatable to developers. If anything, you guys should be happy that CoffeeScript has made compiling into clean JavaScript code such a huge priority. There are plenty of other tools which do a terrible job of creating readable JavaScript, and I'm surprised to read so much griping about a language whose core directive seems to be: "Be semantically isomorphic to JavaScript."
It was just meant to be a bad pun, I could have said that about curly brackets too :)
 I'm sorry, but you're looking at beginnings of JavaScript evolving from a language into a platform. I know it sounds crazy, but JavaScript is more than a language, it's the most widely deployed user platform. It's only natural and a matter of time that saying "JavaScript" will refer less to the JavaScript language and more to the JavaScript language/platform. This should have been very apparent to you when Brendan Eich decided to give the word [transpiler](http://brendaneich.com/tag/transpiler/) and CoffeeScript a great big thumbs up in his last presentation. Clearly, JavaScript is more than the language with curly brackets. Oh, and in case you didn't know, Brendan's original vision for the JavaScript syntax looked a lot more like Scheme than it did Java. From what I recall, the only reason it resembles C/Java is because his superiors thought a language that looked more like C++ (the big dog language at the time), would be more palatable to developers. If anything, you guys should be happy that CoffeeScript has made compiling into clean JavaScript code such a huge priority. There are plenty of other tools which do a terrible job of creating readable JavaScript, and I'm surprised to read so much griping about a language whose core directive seems to be: "Be semantically isomorphic to JavaScript."
I have seen this. I agree with a lot of points. But the future of JS is not CS, it is ES.next, it has always been that way, it's not new. JS is not going to lose its brackets and semi-colons anytime soon. It really doesn't matter to me if JS today looks like C++ or if it would have looked like Scheme, I'd love it none the less. It's about the platform indeed, and I love it and what I can do with it. I have nothing against CS itself, I just don't want to hear that it's JS, because it's not. That's why it's called CoffeScript, and touted as a language in itself. And while I think native implementation of CS are great, CS for web front-end development is a waste of time. Why sweat trying to get a clean JS output when you can... well, write clean JS directly.
Cool deal. Runs great in FF4 but I'm having issues in Chrome 13.0.782.1 dev-m on Win7 for whatever reason... It either doesn't render the canvas leaving only text, or it flickers when it renders the easing. Edit: Also seems that chrome isn't anti-aliasing the curves...
It's just the first thing I thought of when I saw it. I actually have zero experience with WM 7, though, to be fair. Perhaps one can't make a touch-screen OS without it somehow resembling iOS. It didn't remind me of Android, though. Perhaps it's because I'm most familiar with iOS. If you can't see it, then I won't argue it with you, but if you keep seeing other people say the same thing, surely there's *something* to it? I do agree that it looks retarded! :) Edit: grammar
I use /r/javascript to keep me informed about all the latest happenings in JS. If everyone posted there CS stuff in /r/coffeescript I would never of heard about it. With your logic there is an appropriate sub-reddit for every non-native JS related topic. /r/javascript would become pretty useless to me at that point.
Why is each test doing `for` loop 100 times? It's already done internally by jsperf.com for each test snippet (including proper calibration).
This one is cool too. Katamari, but it doesn't quite work for this page(try with realistic pickup disabled): javascript:var i,s,ss=['http://kathack.com/js/kh.js','http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js'];for(i=0;i!=ss.length;i++){s=document.createElement('script');s.src=ss[i];document.body.appendChild(s);}void(0);
Indeed, the DOM is probably the worst part of browser-based JavaScript implementations.
Thank you for posting exactly what I was thinking. I have zero interest in coffeescript, I do not consider coffeescript to be javascript, and I'd really rather not have it showing up on my front page.
Ruby?
CoffeeScript's creators are trying very hard to get it recognized as its own language and to be added to web browsers. Brendan Eich appears to be in favor of it. [To quote Dean Edwards](http://www.reddit.com/r/javascript/comments/h629i/brendan_eich_my_jsconfus_presentation/c1svumx?context=2): &gt; They may be a vocal minority but they are influential. These are the guys that go to conferences and buy each others books. It's an echo chamber that they think is representative of all JavaScript programmers. I think it's only a matter of time before Mozilla adds it to FireFox, and then the pressure will be on the other browsers to do the same.
IIRC it was actually first introduced in Windows 95 Plus!. My memory may be playing tricks on me.
No you are correct.
I don't know about you guys, but my brain doesn't explode when I see some off topic stuff on any subreddit, in fact, it makes things more interesting. In other words, I can handle it. I think we can all handle it. Subreddits provide a certain perspective. If I goto /r/programming, I know I'm getting the perspective of programmers. As long as threads are not totally off topic, I don't see what's the big deal.
You seem so filled with anger that you cannot have a discussion. I understand the short comings of coffeescript but you seem to not understand the advantages. Let's agree that CoffeeScript shouldn't be used. I can agree with that. We can still learn from it though and outright hating it isn't going to stop JavaScript itself from changing. So it seems more productive to take ideas from CoffeeScript and push them with a more viable alternative. Creating a proxy language that "compiles" to JavaScript that adds higher level features isn't a bad idea. Especially if its a superset of JavaScript that adds features that are coming out in future versions of the language. CoffeeScript has some of these ideas already: splat, list comprehensions, clearer ternary, sane scoping, function argument defaults, etc. Using these helps speed up development(I understand the negatives). Although I'm sure tools can be created to alter errors to match your original line numbers. JavaScript is going to change whether you get mad or not so at least direct it and provide a better alternative.
Here's a novel idea. Why don't you ask your friends to enumerate why JavaScript as a primary language is a horrible idea.
&gt;You seem so filled with anger that you cannot have a discussion. You think what I posted is angry? You're a fucking idiot if you think coffeescript is a good idea. How's that for some anger. Fuck you for trying to change the subject, it just shows that you are trying to troll me. Fuck off troll. The better alternative is to abstract new features into libraries, not throw away the javascript ecosystem. If you think that abandoning the javascript ecosystem is a good idea (and that is exactly what devoting time to coding coffeescript means), then good luck with that. We don't want to hear about it in r/javascript, so take it elsewhere.
How long until Chrome or Firefox have a coffeescript interpreter built-in? My answer: Not long. 
Strange, I'm on chrome... err Chromium 11 I guess, technically. No issues at all. I guess there IS a big difference between the two. 
yep... coffeescript is nice. not everyones thing but the time to write about it is passed. esp because its so simple you really need to brain dead to not understand it. And yes, ruby coders, sftu. ;)
I'm not sure if there is a net gain, which is why I am trying it out on a personal project first. However I still don't understand most of the criticisms you have against it.
Yeah, sorry I thought v12 was already released otherwise I wouldn't of worried you with v13.. my bizzad
Your comment provides nothing to this discussion. I like to get feedback from multiple sources.
My biggest problem with it is that it leads to misdirection. You see a post with a cool title, something that you might want to use, and then you click on it, and discover its not what you were lead to believe. This is the same reason why I think it's important for Node related links to be identified as such. Several times I've clicked on a link that sounded cool, only to discover it's a Node project and not something I could even use.
How about an option to return the keys/values as an object. var obj = jaylist.object(); obj === { "this": "red", that: 2.7, other: ['arrays', 'as', 'values'] }
nice work. is there any particular reason there's not a hasValue method, to complement hasKey()?
Yep. You've coded in it about exactly as much as I guessed based upon your ignorant posts. You don't have to jump on every new technology bandwagon that comes along... but you needn't be so fearful of new things. Even if coffeescript accomplishes nothing else, it has some significant improvements that may be included in future versions of javascript. That will be useful regardless of coffeescripts success as an independent language.
I was just looking at this earlier after you forked me. What I thought would be nice is simple iterator/pointer functions such as next, prev, reset, end, index, etc. var jaylist = new List(), item; // ... while (item = jaylist.next()) { //... } 
Isn't it the different time complexity between linear search O(n) and hash search O(1)? 
I think this is fine: var obj = jaylist.table.concat(); 
Yes, exactly.
I was considering this but ended up going with the each(callback) style. I'll implement next() tomorrow and try it out. I also have been looking through Janis quite a bit. Thanks for the feedback. 
hasKey() was implemented because keys in the list are unique. Although I can't think of situation for checking if a value appears, I'll play around it with it.
Four words a javascript only programmer can only dream of: Compile time error checking. 
Aren't arrays just simplified objects? I mean you can do this. var a = []; a[0] = 5; a['bob'] = 26; a.bob; // 26
underscore is a nice toolkit that can do this kind of thing.
Arrays aren't "simplified" objects, the Array constructor inherits from the Object constructor, so by definition an Array has to be at least as complex as it's object equivalent.
I think jsperf.com would help to demonstrate your point.
&gt; Anyone who calls themselves a [web] developer FTFY. People that write say, analytics sofware that monitor the thrust of an avionics engine or someone who specializes in FPGA and PIC programming probably doesn't need to know the difference between Function.call and Function.apply.
Shouldn't any programmer know this stuff? Just saying ..
you just have to get used to it and learn some tricks. For instance, setting styles the traditional way can be done like this: element.setAttribute('style', [ 'color:blue', 'margin:2px', 'backgound:green' ].join(';')); which isn't horrible to use. Here's another one. appendChild returns the element appended, so you can do say document.body .appendChild(document.createElement('div')) .setAttribute('style', ['color:blue', 'margin:2px', 'backgound:green' ].join(';')) which is not incredibly awful. It's also easier to think about the DOM as a node traversal system. So instead of doing element.children[ix] do for(var elem = parent.firstChild; elem; elem = elem.nextSibling) { } And you get a rather compact and expressive way of traversal. Going the other direction is similarly elegant: for(var elem = parent.lastChild; elem; elem = elem.previousSibling) { } I don't think there's any truly good book on this stuff, the DOM is actually a rather beautiful thing; the reality is that people just haven't figured out how to use it.
One would hope so, but Iggyhopper's comment shows exactly why some of this stuff can be confusing.
Whither this trend in Linux?
&gt; TL;DR: Don't do it. Use an object instead. But if you need ordered values then you *must* use an array.
how is this better than using an object?
In Javascript, an `Array` is not designed or meant to be used as an associative array. It does "work", as you show, because an `Array` is technically an `Object`. However, instead of adding a value to the array, you're assigning a property to the array object, so the array will no longer perform as expected. For example, non-numeric keys will not be counted in `Array.length`, and you're now limited to using `for .. in` should you need to iterate through the array. var a = []; a['bob'] = 'bob'; a['5'] = 'five'; console.log(typeof a); // object console.log(a.length); // 6 console.log(a); // [undefined, undefined, undefined, undefined, undefined, 5]
Here are some remarks: * Does my list really have a "toString" key ? e.g.: var j = new List(); alert(j.hasKey("toString")); * you should use [Object.keys](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys) when available for keys method implementation * since keys are already unordered in an object, popItem shouldn't rely on Math.random * please replace this test: at line 257: if (typeof(obj[entry]) === 'string' || 'number') with: if (typeof(obj[entry]) === 'string' || typeof(obj[entry]) === 'number') * typeof is an operator, not a function so you don't need parenthesis e.g.: if (typeof(obj[entry]) [...]) should be written if (typeof obj[entry] [...]) * I don't understand this code: at line 260: copied[entry] = (typeof(obj[entry])) ? true : false; did you mean ? copied[entry] = obj[entry]; * Here's a simpler clear method: [...] clear: function () { this.table = {}; }
Hmm, that'll get you close; perhaps not close enough, considering you don't know exactly when the transition will start. Worth trying, though.
&gt; There is also the in method, which can make your code a little prettier, but is significantly slower. I'm not intimately familiar with how in handles the test, but very slow benchmarking would indicate iteration through all of the keys, similar to the Array example. I don't believe that's how `in` works; I've never known it to be slower than property access. (In some cases, like with host objects or when used on a getter, it's _faster_, because you're not doing the work required to retrieve the value of the property.) Mind posting your benchmark?
Please provide an example of it's immaturity then.
Only faster with IE and Opera http://jsperf.com/in-vs-property-access
Indeed, and I hope the post explains that. I'll change the TL;DR to be more helpful than comedic.
Technically you are correct. To do their job they don't need to know JavaScript. But IMHO being a professional developer today and being ignorant of JavaScript just because your day to day job doesn't demand it, is like calling yourself a sysadmin and being ignorant of say, SANs, just because your datacenter doesn't have and isn't planning to get one. A real developer should seek out new languages all the time, and obviously the bigger and more important the language, the higher priority it should be on that list. Ergo, why I say ANY developer who isn't planning to retire this year should know JavaScript.
Isn't it a stretch to call it a _framework_?
Just the other day I had to validate a form, which includes two dropdowns both containing integer values. The user must leave both at zero or select a value from both (choose a quantity, choose a style). My solution: if (!+qty ^ !+style) ...
what is the third parameter in the .push() method?
Please provide an example of it's maturity then.
"Full power of the PC" does not necessarily mean "all the capabilities of the PC". I don't think you'll be coding up any device drivers or console applications in HTML5 Javascript anytime soon. Most likely this just means more hardware acceleration and processing power for web apps. 
[Here's something I wrote to learn CoffeeScript](https://github.com/Leonidas-from-XIV/floatinghands/blob/master/src/jquery.floatinghands.coffee). I've got the handy `cake` tool, which automatically recompiles my CoffeeScript code on code changes, I've got proper highlighting in Vim, I've got a nice snippet compiler where I select code in vim and compile it to JS so I can always see how the generated code looks like (since yesterday also with syntax highlighting). I've got a tool to convert JS to CS if I had any need to. And I got the very friendly and helpful #coffeescript channel on IRC. Cheers to you, guys.
&gt; I really see 2 different languages because I see 2 different syntaxes. The point is, that CoffeeScript *is* JavaScript, just with different syntax. There are even some articles why for example Python-style subscripting like ``thing[-1]`` will not be part of CoffeeScript. Exactly because CoffeeScript is not a language on its own but designed to be a JavaScript with less boilerplate.
Just like the pressure to implement JavaScript 1.7? I can use JS 1.7 in every browser, as long as it is Firefox 2.0+.
Not sure about the typeof comparison either. It looks like it is checking to see of the copied[entity] is the same type as the obj[entity]. I don't think it should compare types. Probably wants to compare refs. In which case it should use the identity operator. ===
I didn't put too much thought into how I labeled it.
It provides useful functions for manipulating an object as a key-value list.
Thanks, these are some really great tips. I'll make these changes soon. I really appreciate the feedback everyone. You've made it easy for me to improve my code :)
Actually "typeof obj[entry]" will always return a non-empty string so it will always be truthy: copied[entry] = (typeof(obj[entry])) ? true : false; &lt;=&gt; copied[entry] = true; But by chance, the bug at line 257 prevents the interpreter to reach this line.
You're welcome :)
What is the best way to implement popItem without Math.random? 
underscore looks awesome. I'm definitely going to be digging through that code soon.
I would replace: pair = [keys[Math.floor(Math.random() * keys.length)]]; with: pair = [keys[0]]; BTW, don't forget to test keys.length ;)
ignorant? fuck you. i've investigated coffeescript enough to determine that it does not solve any problem I have writing javascript, and in fact would only slow me down and add problems to writing javascript that I just don't need. trying to say that because I haven't coded in it so I'm ignorant is just trolling, you fucking troll. I've been coding for 30 years, I don't need to waste my time when it is completely obvious how bad an idea it is to write any code in this non-standard "made up" language. Your argument is the same one coffeescripters always bring up when they can't counter the very good arguments against using coffeescript. It's a strawman really, dismissing my experience with programming in general (calling me ignorant) because I haven't tried your shiny new thing. 
Ahhhh. Thanks.
 if (obj.hasOwnProperty(entry)) { if (typeof obj[entry] === 'string' || typeof obj[entry] === 'number' || typeof obj[entry] === 'boolean') copied[entry] = obj[entry]; Is this wrong because copied[entry] will be true even if obj[entry] is false (a boolean)? I believe this was my rationale in: copied[entry] = (typeof(obj[entry])) ? true : false; Edit: my tests for this work fine...I guess the solution at the top does work.
can i debug coffeescript with firebug? no. can i debug coffeescript with webkit's inspector? no. can i debug coffeescript with IE's debugger? no. can i write coffeescript in the console of any of these tools and have it run without compiling it? no. sounds very mature to me.. do you want me to continue?
Your correction is OK, now it should work as expected. About the bug, test these lines in the console : (typeof(true)) ? true : false; // = true (typeof(false)) ? true : false; // = true (typeof(undefined)) ? true : false; // = true (typeof(0)) ? true : false; // = true (typeof("0")) ? true : false; // = true (typeof(null)) ? true : false; // = true
Ok, I see what my problem was now (you said it above, typeof returns a truthy value). Thanks.
I'm not too worried about being absolutely precise since it's addressing a known limitation of the transition spec. Like someone else mentioned, it would be nice to use the transition events to gauge precisely when the transition starts, but they have some pretty gnarly limitations. It's an interesting problem to try to fix.
Yep. PS : do not forget the first issue: var j = new List(); alert(j.hasKey("toString")); // should display false (edit) Bonus: var j = new List(); j.add("test", void 42); alert(j.hasKey("test")); // display false alert(j.keys()); // display [ "test" ]
I'm going to work on this next :) Edit: the "toString" bug (jaylist would returned inherited functions) is fixed.
Well, you can just write it as `!(a &amp;&amp; b) &amp;&amp; (a || b)`. &gt; a=true,b=true &gt; !(a &amp;&amp; b) &amp;&amp; (a || b) false &gt; a=true,b=false &gt; !(a &amp;&amp; b) &amp;&amp; (a || b) true &gt; a=false,b=true &gt; !(a &amp;&amp; b) &amp;&amp; (a || b) true &gt; a=false,b=false &gt; !(a &amp;&amp; b) &amp;&amp; (a || b) false Since JavaScript is kinda funny, it can be also written as `!!(a) + !!(b) === 1` or even `!!a ^ !!b`. **Edit:** Please add a comment if you add brainfarts like that to your code!
its common for developers as old as you to be resistant to change. at this point curly braces, dots and parentheses are probably hard wired into your brain. you would have trouble adapting to a new cleaner syntax. whats funny though is that you keep calling coffeescript a "made up" language. as if there was any other kind of language!?!
Member lookup tests: http://jsperf.com/array-vs-object-member-lookup IE shows a 300x improvement using: me in obj Chrome shows (sporadic but sometimes 3x) benefits using: !!obj[me] // casting to bool Firefox shows benefits using -- not much faster than bool-cast: obj[me] YMMV on the best to use, depending on the project, audience, and number of executions. Almost all of my cases, I might as well stick to using "me in obj" because IE needing all the help it can get. If these lookups are happening very often, I would consider using different lookups dependent on browser.
Yay! My iPhone passed... 1 test :/
&gt; can i debug coffeescript with firebug? Absolutely! I usually do ``console.log`` (as many do with Python), this works beautifully. That said, you can debug it because it compiles to pretty straightforward JavaScript that you can map back to your CS code. And I think you might be able to execute CoffeeScript inside the Firebug console by including the CoffeeScript compiler in your website. A Firebug extension could be made by including the compiler into Firefox via plugin, but I have no need for something like this and unless someone comes up with such a thing it won't exist. [Here's another discussion](http://news.ycombinator.com/item?id=1523887) on debugging CoffeeScript, so it is not only my opinion.
&gt;whats funny though is that you keep calling coffeescript a "made up" language. maybe you haven't been reading much about coffeescript, but jeremy ashkenas who creadted coffeescript said it was a "made up language" in an interview, and the context I took from it, it was something he "made up" as if it weren't something he put a lot of effort or thought into at first. Take from it what you will, but abandoning javascript on a whim doesn't seem reasonable to me.
What the fuck? Like any other algol-descended language: there's a bitwise xor; &amp;&amp; and || are useful because they shortcut; what else do you think there is to see?
I found that article. In no way did he ever say or mean to imply that he hasn't put thought into the design. We are just left with your supposition that "made up" == not well thought out. Every language ever created was "made up". Do you have any SPECIFIC criticisms of the language? Or just vague fearmongering about it's lack of curly braces?
Both of your solutions are good, though I would prefer the first as you can compare subelements however you want (and `.toString` isn't called for every element, which could be costly).
True, but not actually being a framework is, in my opinion, a point in its favour. 
Indeed, the first way would be the most sensible if you *have* to do the check after population. The only other ways that spring to mind are, depending upon what you're trying to achieve: * Check *during* population - this might let you 'short circuit' your population loop * Maintain a separate count, again during population ... count[0][var1]++ ;count[1][var2]++; Then, at the end, you can check that count[0][var1] == count[1][var2] == member.length, or whatever.
the poorly thought out syntax introduces ambiguities that javascript doesn't suffer from. there were examples of that on hackernews iirc, that highlight the problems that coffeescript adds to developing code. without clear delineation the code wanders towards ambiguity and that is one specific complaint i've been seeing from people trying to learn coffeescript. we could talk about best practice and scalability, hiring javascript programmers vs coffeescript programmers, code re-use, and many other aspects of the state of development pertaining to the adoption of software systems, but the bottom line is, keep the coffeescript out of r/javascript and we won't have to have these useless conversations any more. edit: here is one SPECIFIC example of coffeescripters trying to figure out how to init a variable https://github.com/jashkenas/coffee-script/issues/712
maybe you don't understand what 'specific' means. your first complaint was in no way specific. You second complaint about the difficulty in hiring people experienced with a new language is a legitimate concern, but it is a concern that every single new programming language in the history of the world has had when they were new. Coffeescript is intimately tied with javascript so there will inevitably be posts that deal with coffeescript which are appropriate to post in javascript. deal with it.
This question kind of irked me too. I don't mean to be rude, and I don't mean to offend anyone, but... What the bloody fuck OP?
&gt;edit: here is one SPECIFIC example of coffeescripters trying to figure out how to init a variable https://github.com/jashkenas/coffee-script/issues/712 And exactly how is this not specific? what the fuck dude, I think you are the one who doesn't know what specific means. The problems with coffeescript are broad though, we could be here all day if you want more than one specific example. 
What you just posted is specific. What you posted before was not specific. If you bothered to read the rest of the thread you would have seen Jashkenas response which demonstrates that his reasoning is quite well thought out. The primary complaint of others relates to 3rd party developers overwriting a previously scoped variable, but that is ridiculous unless those third party developers are appending their code to the end of your 1st party .coffeescript file!?? Otherwise your variables are privately closed over anyways. Jashkenas response which undermines your claim that he "didn't think much about his 'made up' language" is here: jashkenas commented September 26, 2010 Sorry, folks, but I'm afraid I disagree completely with this line of reasoning -- let me explain why: Making assignment and declaration two different "things" is a huge mistake. It leads to the unexpected global problem in JavaScript, makes your code more verbose, is a huge source of confusion for beginners who don't understand well what the difference is, and is completely unnecessary in a language. As an existence proof, Ruby gets along just fine without it. However, if you're not used to having a language without declarations, it seems scary, for the reasons outlined above: "what if someone uses my variable at the top of the file?". In reality, it's not a problem. Only the local variables in the current file can possibly be in scope, and well-factored code has very few variables in the top-level scope -- and they're all things like namespaces and class names, nothing that risks a clash. And if they do clash, shadowing the variable is the wrong answer. It completely prevents you from making use of the original value for the remainder of the current scope. Shadowing doesn't fit well in languages with closures-by-default ... if you've closed over that variable, then you should always be able to refer to it. The real solution to this is to keep your top-level scopes clean, and be aware of what's in your lexical scope. If you're creating a variable that's actually a different thing, you should give it a different name. Closing as a wontfix, but this conversation is good to have on the record.
Thanks for the idea. I'm going to see what I can do.
It should have said micro-framework but alas.
Besides a few, the rest of them are FU questions. Too bad sucker, you don't use javascript the way I do.
Allow me to at least give my very limited and not very knowledgeable viewpoint on this, so as I don't seem like some troll of Mac fan boy. I use Windows machines exclusively at this point, so I'm definitely not deriding Microsoft just for the sake of it. With the very limited preview that we have had with this video (while comprehensive to a certain extent, we still don't know everything yet) it leaves me with a lot of questions. Is Win8 going to be more of a rival to ChromeOS than the next version of Windows? So they are completely removing the taskbar, and the basic Windows UI elements that we've known for so long? If anyone knows the answer to those questions, that would be great. I would hope that they allow you to revert back to a traditional start menu, and task bar. They have such a good thing going with Windows 7, and in my opinion, why reinvent the wheel and just try to improve on what they have now? 
While these questions are great to know if someone prepared for the interview, asking them to write code will get you a much better feel for what they know, and how they work under pressure.
I don't see them as essential for everyday use - but I found the switch from simply learning about these kind of gotchas to having to structure how I would answer a questions about them helped solidify the concepts. 
I interview so many developers who put JavaScript on their resume but cannot tell me how to control variable scope, make an object, how inheritance works, or what a closure is. These are the questions that most all of our candidates don't know but should.
I'm sorry, but asking who wrote a spec or a tool is completely pointless, stupid, bullshit filler question.
The code questions were all pretty good. Each one covered a common pitfall in JS coding.
I didn't see those so much as pass/fail questions, but more of a measurement of the developer's passion for the field. If you really love JavaScript, you'll be involved in the community enough to know the names behind those tools.
These are not FU questions. These are problems you are likely to come across when you have many years of experience. If you find them unhelpful, don't use them. It entirely depends on the experience of the developer you need (note I don't say quality). 
I'm paranoid and use: obj.hasOwnProperty('foo') in case some numbskull is assigning things to Object.prototype :)
...and the demo's gone. 
Not always. If I was a mootools developer, I probably wouldn't give a shit who wrote jQuery (no offense resig). That question is more of a "do you know who wrote my library of choice?" Instead, it should be worded as: "Can you name a framework and the person who created it?" Who knows, they might mention a library you've never heard of that might be useful for the company.
How can they do this without including stuff like web workers, websockets and webgl in Internet Explorer? Web workers at least.
I'm using a zip library in my WebGL JavaScript application. I know it works in the new WebKit (Safari/Chrome) and Firefox on Windows and Linux. I think it may work in Opera also. Also the new versions of WebKit and Firefox definitely support JavaScript typed arrays, although neither the zip library nor my Minecraft binary format code use that. I spent about two full days dealing with the binary/type conversion issues. Next time I do something like that I will use the typed arrays so that won't be an issue. My program also uses Web Workers to scale on multicore machines effectively. http://minecraft-dungeons.com Internet Explorer is lagging but after their latest announcement about Win8 and HTML 5, within a year or two they will also have to announce the inclusion of most of those features in a new Internet Explorer also, or they will be lynched by all the Windows-plus-cross-platform developers who thought HTML 5 meant HTML 5.
If your array uses only primitives and no objects you can use the toString method and do a text comparison. That's one of the fastest short cut methods.
JSON.stringify([2, 0]) == JSON.stringify([2, 0])
&gt; can you provide a snippet of code using the "with" statement? No because any self respecting JS developer knows to never use the "with" statement.
Good point but bad form...
Looks good. I wrote a very similar thing for [140bytes](https://gist.github.com/996085). Check it out, you may get some ideas. There is no constructor, it is simply a function that returns a function - but the main 'trick' is that the 'table' is a member of that new function, rather than a new object in the closure. Of course there are much less features, but it fits in a tweet. :D
Yeah but I know alert(); also I can make DIVs disappear!
Thanks :)
It's a shame they were overshadowed by the horrible questions on top.
just proves that coffeescript doesnt scale. if you have to worry this much about something as simple as initializing variables, there is something very wrong. it was really funny to read all the responses there and how clueless they all are that they've needlessly complicated their development by using coffeescript. what it saves you in time by not having to type 'var', it will take back when you encounter ambiguities with the language such as this. seems like it is making coding front-end javascript more difficult, not less difficult.
That's really cool. 140 bytes is quite a collection of snippets.
Not to mention that a good candidate will be able to talk his way out of it anyhow. "I admit I don't know who John Resig is, but the name sounds familiar. I do try to keep up with the community and read [industry source A, B, C]." 
i don't worry about that at all. the only time i put variables in an outer scope is BECAUSE i intend to use the value from inner scoped functions. the names of the outer values are always very specific. This is simply not a problem UNLESS you author absolutely huge source code files where you don't remember what you have scoped. If you have huge source files then that's a separate problem right there. My files rarely exceed 10k. You are just grasping at straws.
I worded it wrong. By a mootools developer I meant someone who has chosen it as their main framework. I agree about picking the right one for the job, but unfortunately, I think we all tent to gravitate towards a favorite.
I've not once used jQuery in a project (tho I have ported a few jQuery plugins over to Prototype), yet I know who John Resig is. As I said, if you're very passionate about the language and you're involved in the community, you know who the big players are. John Resig, Douglas Crockford, Dean Edwards, Brandon Eich, Thomas Fuchs, Andrew Dupont, Dustin Dias, Paul Irish. These are all pretty big names in JS. Some of them are less popular than others, but they've all had significant impact on the web. Now, I don't really think the question itself was fair, as personally I'm horrible at recalling names. I think it would be better if it were reversed; Give a list of names and ask if the applicant can identify what they are known for.
I work on projects where the combined javascript source code is over 100,000 lines of code. megabytes of javascript, large, complex web applications. problems like this example mean coffeescript just isn't good for scaling. this confusing variable problem is one big one with coffeescript among many other problems, and the more code that gets written in it, the more a problem it becomes. I read that entire page including jashkenas responses (and you are an ass for assuming that I had not and tried attacking me based on your assumption). The fact that there was so much debate and push-back by the developers posting there shows that coffeescript isn't as mature as some people claim it is. It's fine if you keep it to your personal stuff, but picking up a large coffeescript codebase as a new deveoper on a project would be a nightmare if you had to worry about not causing variable name conflicts so easily. This seems a good enough reason to avoid coffeescript for anything larger than maybe 10k of soure.
A well rounded programmer has done FGPA + PIC programming AND JavaScript programming :-) 
I've added the next() function. I'm sure my implementation can improved a lot though.
I could give two shits if an applicant knows why a fragment of code doesn't work, or even worse is why it doesn't work in version x.x of browser xyz. As long you are not interviewing for the position of ECMAScript spec author all the matters is whether or not the fragment of code works or fails, and everything else is a performance factor. The 'why' of the issue is utterly irrelevant, because a competent coder knows not to waste time studying faulty methods. This is far better measured from asking the applicant to write a fragment of code in response to scenario.
Eh, is JSON normally hard to navigate?
&gt; ".author .drinkPref :first-child" JSON already has a "query language". what's wrong with obj.author.drinkPref[0] or some such? 
the JS syntax to access that in the example is actually easier JSON Select syntax: .author .drinkPref :first-child JS syntax: somevar.author.drinkPref[0] 
It's helpful for building lists of values bit I agree it's quite a bit of overhead when a for loop would suffice. 
a JSON query language for querying Freebase, a free and open online database of structured knowledge
suppose you have a really big json dataset, with deeply nested objects: then a query language comes in very handy, in place of writing your for/while/if/recursions each time. In the "try it" section there are some nice examples of Jsonselect power. It feels like when some time ago I was trying to explain CSS query selectors to a friend of mine: sure, you can traverse the DOM any way you like with your code, but how easy is to write for example: $('#footer .comment &gt; a.disabled') //... and then manipulate the resulting node collection, instead of for/while/loop? No one would disagree that css query selectors are useful nowadays, I think. Also, don't think only in terms of JS, just step aside from the language for a moment: JSON is intended as a language-agnostic data transport format; so you could be reading that huge dataset from python or ruby, say from a file, and then you wouldn't have any native js syntax to access or search the desired members. Think about it as if was XML or YAML... does it make sense now? :) This said, JSONSelect is just A json query language, not THE query language. Of course there are alternatives, such as equivalents of xpath.
I can see the utility of some of the advanced selectors, but why introduce css syntax for JSON?
You don't seem to actually understand the issue. The problem has nothing to do with the size of your project, only the size of your individual files. I also work on projects that exceed 1 megabyte of compressed javascript. (Haven't counted line numbers). We use a separate javascript file for every class definition. They all get merged with dependencies and compressed for release into a single file. The issue related to variable shadowing can ONLY HAPPEN within a single file. All coffeescript files are built by default into an anonymous function declaration/invocation. This means that any variables declared in that file will be impossible to shadow or even reference from any other coffeescript file. This is a non-issue, and the only other option is to require var declarations everywhere which will result in global variable creation if you ever forget one. This is even worse. That issue in no way limits scalability of a large application. You think that coffeescript is not mature? No shit. I'll give you that in a heartbeat. If you want to wait for a mature language then that's cool, go for it. That's a legitimate concern. All of your other complaints lack any basis in reality.
it's just a proposal... alternative to xpath, for example. Some people could find it comfortable :)
Hows the speed on this?
tl;dr but I kind of skimmed it. What does this do that ordinary JSON doesn't? Makes a distinction between doubles and ints, has official support for regular expressions, ... What else?
I thought that at first too, but the spaces between the "class names" mean the hierarchy could actually be deeper, e.g.: somevar.author.foo.bar.drinkPref and could also include .author.baz.drinkPref, etc.
While I haven't looked at the code so it could be inefficient, it should be possible to do this really fast. It's an unsorted tree search, but unless you're dealing with massive data sets or doing it in a tight loop, Javascript is fast enough to do this kind of thing.
On first glance, this seems silly because the examples don't do a great job of showing you how this is different than you would normally access a javascript object. Mainly, you don't have to navigate the whole tree. If there is an object nested somewhere deep in the structure named foo, your selector doesn't have to navigate to it, it just needs ".foo". Basically, to get the effect that this library gives you, you would pretty much end up implementing your own version of the same thing only without the clean syntax.
the value for the point (x,y)
I think it's more along the lines of a schema for JSON.
But knowing why not is the important thing. I know I'm not supposed to drive drunk, but knowing what the consequences of drinking are prevents me from getting behind the wheel. If you know how to handle a firearm you are less likely to shoot your friend in the face. 
I'm sorry you feel that way. I completely disagree. The only reason not to know at least some bit of this information is because you are programming in a box. I surely would not want to hire a developer who wasn't keeping their skill set up-to-date. Maybe the specific examples here don't work for your situation, but there is likely a similar question that addresses the same issue which is more relevant to your needs. Maybe asking who codified JSON is not important, but I bet asking to name a member of the ECMAScript committee is (there are so many that following just one member's blog might be enough to keep fresh).
yeah its a nice idea and i actually thought thats pretty cool until i realized json is just a js object.
I agree, a list of them would be better.
Fair enough. Thanks for expanding.
Must be slower than doing it if you knew the direct path you wanted, but probably pretty comparable in speed if you had to actually search through the json.
The query `.author .drinkPref :first-child`, assuming it follows the same rules as CSS (i.e. the lack of `&gt;` means the relationships are not parent-child) is not the same as `obj.author.drinkPref[0]` (where all the relationships *are* parent-child).
Here we present an ultimate useful round-up about Javascript Tutorials. All the tutorials are fully helping for beginners and professionals. Actually javascript is a language which makes your page attractive and your interaction becomes stronger with the client. JavaScript / JQuery is more helpful for web developing and web page designing. It is extremely helpful to bring in money to you. Script and JQuery also play a vital role in simplifies HTML documents and JQuery is the best technology which make available to you about the latest information. On the other hand javascript is such a language which makes your page more eye-catching. Javascript language provides you a foremost library to make your design creative and you get positive result with its help. We have many techniques for best user experience (UX). We also have large library like, jQuery, Prototype, mootools etc. Javascript is one of the most useful and language for your design as well as developing, it is the cause of its popularity in the world.
you're welcome ;)
read my long answer for more explanations: http://www.reddit.com/r/javascript/comments/hseaw/jsonselect/c1xz1xr Don't think in an hardwired way about JSON &lt;-&gt; JS Object ;)
any small enough object isn't hard to navigate, but guess what happens when your dataset is very large and has deep nested objects? :) http://www.reddit.com/r/javascript/comments/hseaw/jsonselect/c1xz1xr
that is exactly the point with selectors or query languages: search nodes when you don't know the exact document structure, or when it's complex
So this is basically XPath (or LINQ) for JSON? Saweet!
yes, but with a CSS flavour ;) also, an XPath implementation for JSON already exists: http://goessner.net/articles/JsonPath/
Very valid point. If I ask this question, the best answer would be to never use it and why not.
yes, it's a kind of JSON schema: &gt;In a web controller JSONR is usefull to validate network input against the application's model instead of an ad-hoc program. where regular expressions match patterns in dictionary keys, and value expressions can match numeric ranges, collection patterns and relations. Most important, don't think about JSON being rigidly tied to JS only; since it's designed to be an language-agnostic data transport format, JSONR can help map network input to other language specific data types. In fact it has implementations for Java and Python as well. Also it can act as an equivalent to XSLT: &gt;JSONR can be applied in a web browser to generate interactive HTML input forms from an object model instead of an an-hoc program. here is a very nice example: http://laurentszyster.be/jsonr/jsonr.html
here you have a great introduction on Mozilla developer center: https://developer.mozilla.org/en/A_re-introduction_to_JavaScript then you can move on to their guide, for more in depth explanations: https://developer.mozilla.org/en/JavaScript/Guide Also, Eloquent javascript is a really well written and fun book to learn from: http://eloquentjavascript.net/ the online version has an interactive console, so you can play and experiment with code snippets along your reading. Happy JS learning! ;)
Yeah, I've always used JSLINQ for this sort of thing in the past but have never liked it, I'd prefer to try the CSS style especially if it were consistent with jQuery's selectors. 
definitely not a (micro)framework whatsoever...it's just a library implementing a single data type :) But it's a very nice one! In the past years, people tried to subclass/coerce Array into doing this, but they were on the wrong track, as they weren't comfortable enough with Object. I wrote something similar last year, it was an access-priority cache but had similar methods. Never released it though... ah, my laziness! :P Nice work dude!
...concat()?! Isn't 'table' an Object? Maybe you meant var obj = jaylist.table;
I believe that testing for a value existence has no meaning for a Map type, since different keys could map to the same value (altough it being duplicated), and what is really important for data storing and retriving is only keys. The use case you describe would be more fit for a Set data type, where values matters and it doesn't allow duplicates.
I can't understand why the author choosed class name selector syntax to match JS property names. A HTML element can have multiple classes, so writing ".classA.classB" with CSS is OK (i.e. select all elements with classA and classB classes). With "JSONSelect", ".classA.classB" selector does not have any sense since a property can't have 2 different names. From my point of view, the author should have used element type selector syntax instead. For example: JSONSelect.match(".people .spouse .pets .name", data) Would be written JSONSelect.match("people spouse pets name", data) Edit: Actually, the author decided to use element type selector syntax to select property values given their type. For example: JSONSelect.match("array.pets string.name", data) I doubt there's really a need for this kind of feature (i.e. selecting by value types). Moreover, when you use Element.querySelectorAll method, it returns Element instances. So, I would expect from this library to not only return property values, but also their names (or indexes for array). For example : JSONSelect.match("array.pets string", data) shouldn't return ["foo", "bar"] but [{name: "foo"}, {name : "bar"}]
Another place this shines is when a property may not exist. Take this selector: .people .spouse .pets .name You could access that in Javascript as: var pet_names = []; for(var i = 0; i &lt; data.people.length; i++) { for(var j = 0; j &lt; data.people[i].spouse.pets.length; j++) { pet_names.push(data.people[i].spouse.pets[j].name); } } However a person could not be married or their spouse could not have any pets. If you attempt to use the code above, you're going to get an error somewhere through the loop. You'd have to rewrite it as this: var pet_names = []; for(var i = 0; i &lt; data.people.length; i++) { if(people[i].spouse) { for(var j = 0; j &lt; data.people[i].spouse.pets.length; j++) { pet_names.push(data.people[i].spouse.pets[j].name); } } } This is probably a more optimized way to access the names of every's pets but JSONSelect would be a lot simpler to use and will keep your code cleaner at the sacrifice of some optimization. pet_names = JSONSelect.match(".people .spouse .pets .name", data); 
relevant!
At first I read the title and thought it was some techno babble. The I remembered this was a trick that uses With. This blog post update the trick to use window instead of with. This man is just begging to be shot. 
Would you mind elaborating? i'm interested in hearing why you think so.
Why are numeric ranges either 0..N or -N..N? It seems like it would have just been more straightforward to define them explicitly. For instance: 0..18 - Numbers between 0 and 18 ..18 - Numbers below 18 18.. - Numbers above 18 18-24 - Numbers between 18 and 24 It's a little more verbose, but a bit more understandable. Anyways, it's a neat idea, have you used it in any applications?
&gt; But the future of JS is not CS, it is ES.next, it has always been that way, it's not new. JS is not going to lose its brackets and semi-colons anytime soon. I don't think the future of JS is CS or ES.next. I think the future is going to be transpilers, whether it's CS, ES.next, Traceur, WebSharper, or whatever else plays out. There's no reason to strip JS of its brackets and semi-colons, because that problem is already solved with CS. &gt; It's about the platform indeed, and I love it and what I can do with it. Exactly. JS has become more of a platform. Which syntax you use matters less these days. &gt; I just don't want to hear that it's JS, because it's not. CS is a different language, but it's now part of the same platform. Whether you like it or not, JS now includes the JS-runtime and the JS-language. &gt; Why sweat trying to get a clean JS output when you can... well, write clean JS directly. Because some people prefer the CS syntax to JS syntax, but they also care about not alienating developers who don't know CS.
I understand that it is a bad practice, i was just hoping to know why it is a bad practice. I've never really used "with". Why should you not store values in the window object? Just trying to learn what is actually going on behind the scenes. Is it just scope issue with using the window object? 
I realise English probably isn't this persons first language, but that's really difficult to read. I gave up after a couple incompressible sentences. It almost feels like a Google translate job.
I can't stand this douchebag's page. He has some ok articles, but all the autofellatio gets old.
&gt; Why should you not store values in the window object? Have you never heard of the notion of global variables and the problems with them? If not, Google it now.
Yep, i am aware of the dangers of globals. Just trying to learn and wanted to make sure i wasn't missing anything.
DOM specs don't even have to change to break it, simply another implementation also using `window.screenType` (regardless of source or intention). 
While I'm developing a web application, I don't care about HTTP request count. When I'm building the application, there are already tools that concatenate CSS and JS. So, from my point of view this is interesting but not very useful and it will not convince me to use Tomcat instead of a simple HTTP server.
I agree. I have to work in coldfusion for work (boo) and i always seem to end up on his site. I feel he over-complicates things a lot, but it might be geared towards a different audience.
Ha wth. I don't understand why people don't like this guy' site. Is there something I don't know?
On every single page of his site he has at least 3 different pictures of himself; it gives the impression of being very egotistical to me, which I hate. To make matters worse, the banner pics are him with assorted "celebrities", as if his paying money for access to these people (via conferences and events) somehow should raise his social status in the JS community. "Hey, I shook hands with Nerd Celebrity Ultimo, you should definitely believe that I have important things to blog about!" And then he posts a contrived article about using global variables...
To be fair I don't think he's extending window itself. He creates a scope object that has the window as the prototype so property lookups on scope fall back to window.
Does anyone else really wish there were a good way to do this? Coming from ruby where you can just import modules at will I really miss the ability to modify the scope chain on the fly.
Haha, I think you are projecting. Its just a dude with some pictures of HIMSELF with people on his own blog. I think they are randomly chosen from a global list. The content might not be great but it seems straight forward and honest. What more could we ask for ?
Correct, and that's global space he's putting them in. Globals, globals are bad, m'kay. Don't do globals. M'kay? Edit: Misunderstood what the author was trying to accomplish.
yeah, good point... I didn't notice that! I don't know... it's part of jsonr author's spec. Probably because adopting that convention he could cover the most used numeric ranges (not all,of course). Keep in mind that JSONR agents have to parse **valid** JSON strings, so sticking to integers only for simplicity we have that: * 0 (an int) * 5 ([0,5] int range) * -2 ([-2,2] int range) can be validated/matched by JSONR as they are all valid JSON numbers, while your proposal, although clear, can't be. Probably it could be written as "0..18" but then they will be validated as strings, and at that point you would end up using regular expressions to express ranges but...your data will be a *string* and not a number, thus losing one data type JSON gives you. Now think again there could be a Java or Python or whatever client crunching that JSON data: how is it supposed to know that the string is to be unserialized as an Integer or a Double? Yes, your JSONR agent could implement an extra Named Pattern, but then it looks like adding unnecessary complexity to the agent. And, no I haven't used it yet, just discovered it the other day :) I too think it's very cool... it should be investigated more.
What is the them you're referring to? If I make an object with window as the prototype I can add whatever I want to it and it's not creating globals. window.foo = "global"; var scope = Object.create(window); scope.foo = "local"; // where the author is piling his scope extensions foo; // "global" I understand you're trained to have a kneejerk reaction to the presence of globals but try to be sure you've got your targeting scanners set properly.
very cool! But let's not forget about John Resig's testswarm http://swarm.jquery.org/
Interesting fact: tutti means shit in most indian languages. A large percentage of IT professionals are of Indian descent.
if using Object.create() isn't extending through prototypal inheritance... then I really don't know what it is :)
Thanks for the psychological evaluation, but it's clearly not your forte. &gt; The content might not be great &gt; What more could we ask for ? No comment.
...maybe a little less personal showoff and little more technical content? :D
SON OF A BI
I'm not completely comfortable with this decision, but here's why I made it: in XML, every node has an element type. In JSON, every node has a data type. In XML, classes are optional, not every node has one or more classes. In JSON, a node may be a child of an object and have a "parent property", or may be attached to an array and *not* have one. Ultimately I felt that it was a better analogy to make CSS classes refer to property names (at first I actually chose id, #, but that analogy is broken too). The unfortunate side effect is that in JSONSelect, data type is not nearly as interesting as element type is in XML/HTML. So the simpler construct is used less frequently than the more complex one. 
The top answer on stackoverflow.com is hilarious, in case anyone here was just gonna comment and not actually look. Also, != works fine as a logical xor operator so long as you're applying it to boolean expressions and not just truthy or falsey things.
He's not setting the prototype of window, and thus modifying everything. He's making a local object with window as the prototype, which only affects his library. I don't see the problem.
&gt; In JSON, a node may be a child of an object and have a "parent property", or may be attached to an array and not have one. I disagree, an array item is also the child of the array. For example: If you set "parentNode" variable to: parentNode = [ { id: "childNode1" }, { id: "childNode2" } ]; or: parentNode = { 0: { id: "childNode1" }, 1: { id: "childNode2" } } This script output will be the same: for (var childNodeName in parentNode) { console.log("child node name:", childNodeName, ", child id = " ,parentNode[childNodeName].id); } Now, the problem appears when I try to do analogy with XML. Here's my XML representation of the array: &lt;parentNode class="array"&gt; &lt;0 class="object"&gt; &lt;id class="string"&gt;childNode1&lt;/id&gt; &lt;/0&gt; &lt;1 class="object"&gt; &lt;id class="string"&gt;childNode2&lt;/id&gt; &lt;/1&gt; &lt;/parentNode&gt; Here's your XML representation: &lt;array class="parentNode"&gt; &lt;object&gt; &lt;string class="id"&gt;childNode1&lt;/id&gt; &lt;/object&gt; &lt;object&gt; &lt;string class="id"&gt;childNode2&lt;/id&gt; &lt;/object&gt; &lt;/array&gt; Example of selection: "id of second child of parentNode" with my representation: "parentNode &gt; 1 &gt; id" or "parentNode &gt; :nth-child(2) &gt; id" with your representation: ".parentNode &gt; :nth-child(2) &gt; .id" The main issue I see with my point of view is that the XML representation is wrong (using numbers as element names) but I also think the selector is a bit simpler, more flexible with arrays and semantically better when transposed in XML view. edit: * I'm not sure I would use class attributes to store types in my XML view. * code reformatting
Firefox? Firefox does not allow you to poll computed colors and a few other things it will always return the unvisited style. This is for privacy reasons.
So, just so I have this subreddit straight..... ☐ Not Javascript: [Language that compiles to Javascript](http://www.reddit.com/r/javascript/comments/hqjak/please_let_rjavascript_be_only_about_js/) ☑ Javascript: "I hate spam in wikis" 
Don't make it worse by linking to it :( http://www.donotlink.com/
Well since http://www.reddit.com/user/jeresig is still moderating this sub reddit, I hoped there was a slight chance of getting heard :)
This kind of post is stupid, and annoying and obvious.
&gt; Ultimately I felt that it was a better analogy to make CSS classes refer to property names (at first I actually chose id, #, but that analogy is broken too) IMO, you adhered too stringently to css as a blueprint. I would have mapped keys -&gt; element tags. They seem to take primacy in both css and this use of json, and that frees up the dot notation for typing, tests, :pseudo, etc.
Nope. Chrome. It used to work but now just opens everything like they are all blue. Did they implement a similar privacy restriction?
So remind again why using globals is bad but $ global (jquery) is ok.
Yes it appears Chrome also does this: http://jsfiddle.net/maEsd/
"Tutti" means "all" in Italian. I assume that's what they were going for.
I don't understand what the "privacy reasons" is. It looks pretty legal to have javascript accessing styles in same domain.
Scummy seo were using it, among other techniques, to figure out what other sites you've been to. 
If you can access the font information for visited links then you can basically find out with a script if a certain link has been visited or not. This lets you trivially make a script generate links to a whole list of sites and then send to the server a list of the domains (within that list) that the current browser has visited. https://bugzilla.mozilla.org/show_bug.cgi?id=147777 Better info on the changes in FF4 relating to the bug: http://hacks.mozilla.org/2010/03/privacy-related-changes-coming-to-css-vistited/
Thanks for your info. According to http://hacks.mozilla.org/2010/03/privacy-related-changes-coming-to-css-vistited/, background-img for :visited will not work. Hm~, a little scary.
http://hakim.se/experiments/html5/sketch/#278078b3
I think they just mean you can write "apps" (ie gadgets) using HTML5 and Javascript. The underlying OS is still there and you can still write native code in c++ or use .NET. Really all this is , to me at least, is just a fancy app that replace a desktop background picture. You can add little widgets to it, but this in now way changes how you write real desktop apps.
It's really awesome to look at other people's drawing to see how they did them. Makes it took so easy.
Yes, he's **not** modifying window.prototype and I never said that. Maybe there's a little confusion with terms: sometimes "extending" in JS is used in place of "extending an object's **prototype**", as in: String.prototype.myFancyMethod = function () {...} but the common meaning is "extend [or "subclass",although it doesn't make sense in JS] an **object** or a constructor function" as in Java's: class Child extends Parent { ... In ES5 you have Object.create() to accomplish this, in previous versions you have to implement it: http://javascript.crockford.com/prototypal.html ps: sorry if I sound obnoxious, I just wanted to clarify this concept in case you didn't know it already :)
Whoever with a decent artistic sense would want to put LENS FLARE on their site?! * facepalm * It's not the '90s anymore.
HTTP/1.1 403 Access Denied.
I like the notation `&lt;-` instead of `.` Here's why: `&lt;-` looks like sending a message, whereas `.` looks like a scoping construct. To my brain, `.` implies *synchronicity*: Invoke this function and continue with the result, it's just that the language implementation will do some fiddly stuff to look up the function's implementation in an inheritance hierarchy at run time. Whereas `&lt;-` implies *asynchronicity*: Send this message to this independent entity that has its own memory, processor, whatever. If you need a reply, send a continuation along with it, a'la current Javascript style.
 Hi Stefan -- Sorry for the delay but I was on vacation. At 6:27 PM +0200 7/17/03, Stefan Ram wrote: &gt; Dear Dr. Kay, &gt; &gt; I would like to have some authoritative word on the term &gt; "object-oriented programming" for my tutorial page on the &gt; subject. The only two sources I consider to be "authoritative" &gt; are the International Standards Organization, which defines &gt; "object-oriented" in "ISO/IEC 2382-15", and you, because, &gt; as they say, you have coined that term. I'm pretty sure I did. &gt; &gt; Unfortunately, it is difficult to find a web page or source &gt; with your definition or description of that term. There are &gt; several reports about what you might have said in this regard &gt; (like "inheritance, polymorphism and encapsulation"), but &gt; these are not first-hand sources. I am also aware that later &gt; you put more emphasis on "messaging" - but I still would like &gt; to know about "object oriented". &gt; &gt; For the records, my tutorial page, and further distribution &gt; and publication could you please explain: &gt; &gt; When and where was the term "object-oriented" used first? At Utah sometime after Nov 66 when, influenced by Sketchpad, Simula, the design for the ARPAnet, the Burroughs B5000, and my background in Biology and Mathematics, I thought of an architecture for programming. It was probably in 1967 when someone asked me what I was doing, and I said: "It's object-oriented programming". The original conception of it had the following parts. - I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages (so messaging came at the very beginning -- it took a while to see how to do messaging in a programming language efficiently enough to be useful). - I wanted to get rid of data. The B5000 almost did this via its almost unbelievable HW architecture. I realized that the cell/whole-computer metaphor would get rid of data, and that "&lt;-" would be just another message token (it took me quite a while to think this out because I really thought of all these symbols as names for functions and procedures. - My math background made me realize that each object could have several algebras associated with it, and there could be families of these, and that these would be very very useful. The term "polymorphism" was imposed much later (I think by Peter Wegner) and it isn't quite valid, since it really comes from the nomenclature of functions, and I wanted quite a bit more than functions. I made up a term "genericity" for dealing with generic behaviors in a quasi-algebraic form. - I didn't like the way Simula I or Simula 67 did inheritance (though I thought Nygaard and Dahl were just tremendous thinkers and designers). So I decided to leave out inheritance as a built-in feature until I understood it better. My original experiments with this architecture were done using a model I adapted from van Wijngaarten's and Wirth's "Generalization of Algol" and Wirth's Euler. Both of these were rather LISP-like but with a more conventional readable syntax. I didn't understand the monster LISP idea of tangible metalanguage then, but got kind of close with ideas about extensible languages draw from various sources, including Irons' IMP. The second phase of this was to finally understand LISP and then using this understanding to make much nicer and smaller and more powerful and more late bound understructures. Dave Fisher's thesis was done in "McCarthy" style and his ideas about extensible control structures were very helpful. Another big influence at this time was Carl Hewitt's PLANNER (which has never gotten the recognition it deserves, given how well and how earlier it was able to anticipate Prolog). The original Smalltalk at Xerox PARC came out of the above. The subsequent Smalltalk's are complained about in the end of the History chapter: they backslid towards Simula and did not replace the extension mechanisms with safer ones that were anywhere near as useful. &gt; &gt; What does "object-oriented [programming]" mean to you? &gt; (No tutorial-like introduction is needed, just a short &gt; explanation [like "programming with inheritance, &gt; polymorphism and encapsulation"] in terms of other concepts &gt; for a reader familiar with them, if possible. Also, it is &gt; not neccessary to explain "object", because I already have &gt; sources with your explanation of "object" from &gt; "Early History of Smalltalk".) (I'm not against types, but I don't know of any type systems that aren't a complete pain, so I still like dynamic typing.) OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP. There are possibly other systems in which this is possible, but I'm not aware of them. Cheers, Alan &gt; &gt; Thank you, &gt; &gt; Stefan Ram
I had this idea humming in my head for some time now, repeating to myself I had to try and implement it. Until now, before writing down a single line, I decided to do some searching...so here it is. But There's always room for improvement or modifications.
so... it turns out that "pseudoclassical" inheritance, using a Constructor function, is significantly faster than the alternative methods, except for Firefox 4+ where native Object.create() beats all. **NB**: posted test(revision 17) is said to be wrong by Michaux himself. Use revision 16 for your benchmarks.
LOL
The description of OO as "computers on a network" is helpful. The implementation of the computer does not matter, and you can't reach across the network to mess around with its internals. You can only talk protocol to it.
I'm getting the strangest sense of [deja vu](http://news.ycombinator.com/item?id=2628991).
Thank you. It's interesting how the concept was first visualized as individual cells. It's great to get some historical background the everyday stuff we use.
One idea. Two completely different communities.
It's a bit funny to read this response after [Wadler's Law Of Language Design](http://www.informatik.uni-kiel.de/~curry,/listarchive/0017.html) was just posted to /r/programming. For what it's worth, I agree with a statement made by Simon Peyton Jones (can't remember exact quote, but he said it in [this video](http://blip.tv/oreilly-open-source-convention/oscon-2007-simon-peyton-jones-a-taste-of-haskell-part-i-329701)) that a language's most important operation should be the syntactically simplest. And both Haskell and Smalltalk follow this convention - a single space character represents function application and message passing, respectively. I greatly prefer this convention to any ascii-art metaphor.
Definitely a confusion of terms. &gt; but the common meaning is "extend [or "subclass",although it doesn't make sense in JS] an object or a constructor function" as in Java's: I don't think this is true in Javascript. Extend has a very specific meaning, namely objects that are not extensible cannot have new properties added to them. Object.preventExtensions prevents new properties from being added to the object, but doesn't prevent any prototype chain modifications, for example.
I did some work on the original plugins site - it's Drupal that powers it, but I suspect it's not been updated in a while and looks like it could so with some serious loving
fail :(
n/m fixed it! Should have been == instead of =
Step 1. 
The use of the word scope is misleading here. He's just lugging around an object that has window as it's prototype. There is probably no value in this. It superficially appears as something to do with scope, probably because Javascript's lexical scope works in such a way that you can call the scope an object with the containing scope as it's prototype, the "with" construct making this painfully obvious. This can be confusing because though scope and "context" work similarly they are distinct in Javascript. Coming from a class and inheritance heavy language that does not distinguish between these concepts, it's easy to think that the best way to solve some problems is to mess with the scope, but in cases where classes and inheritance are appropriate, it's the context chain you want to change. It would sure be nice though to be able to say something like (function() { $.extend(ScopeObject, BigBagOfFunctionsJoeWishesCameWithTheLanguage); ... })(); That is, be able to make all the properties of an object, part of the scope. That's what "with" does huh? Someone remind me why "with" is bad?
I'm assuming you meant to link to this [article](http://arturadib.github.com/hello-backbonejs/) that was on [YC earlier today.](http://news.ycombinator.com/item?id=2629014) *edit* - and now I made a [Reddit post.](http://www.reddit.com/r/javascript/comments/hu3v9/hello_backbonejs_tutorial/)
Stolen for karma from this [YC entry.](http://news.ycombinator.com/item?id=2629014)
Do a var that = this; Before your setIntervall. That way you'll save the this reference in the scope. Also read up on scopes :)
Would love to go into more details but im on my iPad and autocorrect is killing me. 
Thanks man. I'll try it tomorrow when I'm back at work. Javascript is super tricky with scope (to me at least). I'm trying to wrap my head around it.
"this" mean the object that the word "this" exists in. So in your case, you have functions that says things like this.interval, so this means that function, not the outer scope Javascript has call and apply methods on objects that are used to change what "this" references An example usage of apply would be document.getElementById('play').addEventListener('click',function(e){ e.preventDefault(); imageSequence1.play.call(imageSequence1, comma, sep, args); imageSequence2.play.apply(imageSequence2, [comma, sep, args]); }, true); In both of those calls to the play method of your imageSequence instances, it is changing "this" from meaning the named function this.play to the actual imageSequece instance (imageSequece1 or imageSequece2). It is tricky at first, but not really once you use it a few times. A lot of times you would see something like Function.prototype.bind = function(obj, args){ //if args were an array var self = this; return function(){ return self.apply(obj, args); //there is a better way to do this, but this is just a clean example } }; so in your code you would have done this.play = function(){ //do stuff }.bind(this); and when you call it you would just do instance.play(args);
X is A, Z is B, Shift is Select, Enter is Start, D-Pad is the Joypad Wait for the white background to appear, since it needs to download the resources before it can start.
**Obligatory keymap post:** X is A, Z is B, Shift is Select, Enter is Start, D-Pad is the JoyPad. Wait a few seconds for the background to turn white and for it to start. Edit: Don't forget the game does stereo audio too, you just have to enable it inside the game inside the options menu. ;)
[Is this what you mean?](http://www.programmableweb.com/apis/directory/1?sort=date)