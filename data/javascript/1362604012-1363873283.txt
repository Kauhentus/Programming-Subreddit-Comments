Thanks for pointing out. @mattrobenolt one of the developers also mentioned "I just wanted to point out that internally, we do everything we can to avoid window.onerror. Just to clarify, if the exception reaches window.onerror, we lose the stack entirely, so you're left with no info." Have to update this in my post.
The problem with new hosts is that there is no guarantee that it will be around in 6 months. I feel more comfortable with Heroku or even Nodejitsu.
You like your dependencies like I like my expectations. Check out their [tutorial](http://learn.knockoutjs.com). I found it very helpful in picking up the framework, even with little knowledge or understanding of the MVVM pattern.
As an aside, communist is the best name for a js library yet.
Interesting. I'm afraid his plugin will mostly detect highly-caffeinated users rather than the frustrated ones. That would need further verification... maybe A/B testing with one of the option being frustrating by design? I really like the "log when the user finishes the article" idea. Is that already something common?
SGS i-9000 CyanogenMod 10.1 OC 1.2GHz, Generate: 164ms Render: 1984ms Crap graphics support before you ask.
That's a pretty restrictive license compared to some of the alternatives for whipping up black visualization magic with D3.
Nexus 4 Chrome: Generate: 82ms, render 1003ms Firefox: Generate: 42ms, render 900ms Dolphin: Generate: 88 ms, render 1127ms iPad 1st gen: Generate: 200 ms, render: 4592ms. Also crashed the browser a couple of times, most likely because the 1st gen doesn't have a whole lot of ram.
&gt;I love that it is ubiquitous. So important! I remember the primordial days of the web when there were far more unhip people than hip. We really dodged the VBScript bullet - which would have been disastrous. The legal case that showed Microsoft was using monopoly distribution power by packaging Internet Explorer with Windows saved the Internet from a ton of headaches. It was a monumental educational program put together by people who cared about the future of the Internet to get people to understand what was at stake. And sure, I hated the holy hell out of JavaScript when I had to write more than one version of it (for IE and for NN 4.0). But Firefox had such a great success, then MS's own pool of developers got tired of the B.S. which drove Ballmer to shout "Developers! Developers! Developers! Developers!" And then holy fucking shit AJAX why didn't anyone see that earlier? And then thankyouJAYSUS JavaScript libraries. Uh, got a little sidetracked. I'm excited about JavaScript libraries.
&gt;So important! I remember the primordial days of the web when there were far more unhip people than hip. We really dodged the VBScript bullet - which would have been disastrous. The legal case that showed Microsoft was using monopoly distribution power by packaging Internet Explorer with Windows saved the Internet from a ton of headaches. It was a monumental educational program put together by people who cared about the future of the Internet to get people to understand what was at stake. Glad someone remembers this. There are a lot of parallels to the VBScript clusterfuck in the present day with coffeescript. Unfortunately none of the noobs can remember that, and so we end up with divergence from javascript. 
There are enough similar projects out there with better licenses that I don't think it's feasible to demand a $300 license for one developer.
Galaxy Nexus, Android 4.1 Firefox Nightly: 45ms, 541ms Stock browser: 113ms, 1339ms
[d3](http://d3js.org/) learn it well and it will treat you well
Thank you!
These are great resources, thank you. I've spent many years either emulating MVC in ExtJS 2/3, and fighting with it in v4. Backbone and Angular didn't quite fit the bill, but this is what I've been looking for.
It says 4ms to render but actually takes almost 2 seconds to show up for me (using 100 data points) Anyone else have this issue?
This is exactly what I was going to say. Start converting some of your reused components into modules and it'll start paying dividends almost immediately. The Addy Osmani ebook mentioned above is my go to for design patterns.
What's the big deal? WebGL can handle millions of datapoints at 60Hz on most hardware. 
Thirded. Also check out [TodoMVC](http://addyosmani.github.com/todomvc/)
So good for them, but if you actually need that many data points in a graph at once aren't you doing something horribly wrong? 
Just a heads up that you should include the iOS and browser info. I've been running JS-based tests for a few years, and often times the software version has as much to do with performance as the hardware. To give you an idea, here's numbers for Safari and Chrome running on the same machine: Retina MBP (2.6GHz, Safari 6.0.3) 8 116 8 95 8 95 8 96 8 96 Retina MBP (2.6GHz, Chrome 25.0.1364.152) 28 156 23 119 52 109 45 113 51 104 Here's some tests I ran with the devices I have around me (far too many): Notes: -full page refreshes -other apps closed -other browser tabs closed -5 tests per device iPhone 4S (iOS 6.1.2) 116 1216 119 1197 123 1266 124 1319 127 1235 iPad 2 (iOS 6.1.2) 129 1011 110 984 108 997 118 1012 125 1018 Kindle Paperwhite (Kindle 5.3.3) 573 5292 571 5471 590 5007 580 4813 592 4984 Kindle Fire (6.3.1) 142 1353 133 1373 220 1774 142 1591 140 2686 
Sorry not open source gets zero love from me.
I like that 2 second delay for you to consider wrecking someone's social network life.
Why? JSON is too easy?
&gt;&gt; you've clearly been attacked in the night by a coffeescripter and still can't get over it. &gt; You're making up nonsense to try to make me look foolish, and that is fucked up. Your sarcasm detector is severely miscalibrated. &gt; Fuck you. thank you kindly.
&gt; Why are there so many posts concerning coffeescript in /r/javascript There aren't. Currently, at 100 posts per page, there are 3 posts with an instance of the word "coffee" on my first page. Go out to page 2, for 200 posts -- zero more. That's 1.5% of the last 200 posts. Go back to page 3 - 1 more post. 4/300 = 1.3%, even lower. There are not that many posts concerning coffeescript here.
&gt;This has has been built with my communist library, I’m debating changing the name but feedback would be appreciated. Change the name. var comrade = communist(function);//returns object var manifesto = comrade.data(data);//returns promise comrade.close();//closes the worker My boss would raise an eyebrow if he came across this code sample. The wordplay is appreciated but would be lost on most employers outside of China, Cuba and North Korea. How about a compromise on `proletariat`? Most westerners don't have the first clue what it means in political sphere and those who do don't usually run or manage tech companies.
An image can be cached by the browser. Off-line storage hack.
Complete, unabridged changelog: &gt; 2013.03.07, Version 0.8.22 (Stable) &gt; &gt; * npm: Update to 1.2.14 &gt; &gt; * cluster: propagate bind errors (Ben Noordhuis) &gt; &gt; * crypto: don't assert when calling Cipher#final() twice (Ben Noordhuis) &gt; &gt; * build, windows: disable SEH (Ben Noordhuis) I like node.js a whole lot, but this seems like such a trivial release to highlight. 
So can JSON with future expires headers or using local storage. It's a neat idea, the image storage, but I can't imagine using it over the former.
Most of the variable names are from an earlier version where I took it much farther (it had a non worker part called socialist). So i can change those. I think for the name I can just give it a short cut (which, as much as I want to, shouldn't be cccp). 
**Try out online [*over here!*](http://plnkr.co/edit/WYRqk7T928iuCp3RYWvw?p=preview)** I just released it as a working prototype and I'd love to have some discussion on what direction you'd like to see it go next. General feedback and/or answer to some of the [open questions](https://github.com/Wizek/loadr#open-questions) is equally appreciated! :) However, the **one question** for which I'd like your answer to **above all** is the first one on the [list](https://github.com/Wizek/loadr#open-questions): - **Which source-registry would you like to see supported next?** Possilbe choices: - bower - npm - component - local *(currently implemented)* - local, relative path - url (HTTP, HTTPS) - git:// - github - *A fancier HTTP(S) version where "github://Wizek/loadr" conveniently translates to https://raw.github.com/Wizek/loadr/master/index.js* - something else? *Edit: updated multiple times while writing.*
JSON is a format. The actual data is text. There is nothing preventing you from storing JSON formated text in the key's value text chunk. There is also nothing preventing anyone else from storing XML or HTML or comma separated string in the value. It's irrelevant what you want to store. Local storage is limited in size allowance per origin url (varying from browser to browser but at most 10-15MB). With this hack you could in theory store amounts of data in the PNG limited only by the available disk space. I see your point on setting future expire headers.
Haha my first reaction was that people who care about communists still probably also still use IE.
&gt; Some people have a hard-on for mandatory semicolons, but my coding style never causes a problem if I leave out the semicolons. What is your coding style? Is there anything in it to prevent you from doing something like: var foo = "foo" (function () { // some stuff to be executed immediately }()) because that leads to an error if you miss the semi-colon.
I don't think the size issue is very relevant as support for typed arrays and indexedDB overlap, but you should be able to use this to make cross origin requests to a static file server. Edit: I take that back need cors.
It's a point release. Most of the point releases are like that.
I much prefer reading code with semicolons, it flows alot better when you're trying to understand what's going on. Not going to bring up the minifying argument :p
This is pretty awesome. I hope the funding campaign reaches it's goal. Already past 37%, and if they reach the stretch goal of like 120%, he'll build in Node.js support. Are there any other projects like this out there, for comparison? 
Loading files as one big clump means that only way they will be pulled from the cache is they have to be loaded in that same order with the querystring values. I am not a fan of grouping files that can be used in different patterns. 
Caching is still an [open question](https://github.com/Wizek/loadr#open-questions). Do you think it would help if we imposed some strict rules on the url for those who want it to be cached? (in prod you want caching vs in dev you do not for the files you work on)
Though newer, [Effective Javascript](http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182) has such invaluable information in it, I think every javascript dev should have it on their shelf next to the "The Good Parts."
Cool little feature, but it is not supported in IE8 for those curious.
Hmmm... base64 encoding it is. http://www.webtoolkit.info/javascript-base64.html For my purposes I would need a wrapper to store text, base64 encode it and break it apart over a bunch of key/value pairs if the length is too long for one value. PS Good job by the way. Very cool hack.
It would be great if you allowed for custom regex validation rules to be entered.
Something, something, WebSockets.
Alright, I reported the link as I don't believe this sub should be a marketing point of for-profit projects (such as when a project member submits the link).
I think that's a bit unfortunate. I don't get what's going on with reddit recently but it's there's a lot of aggression toward people who admit involvement in projects that have monetization strategies. There's a free license for academics, is this sub not for learning? If anything it's an impressive product that boasts good performance and I don't think your reaction is appropriate. How else do creators get their stuff out to relevant individuals? Post it in one place on their website and wait for some stranger to market it for them? That's silly. 
yes, of course that is an error and is not something I would code. It's an example of course, but I'd never construct a javascript file that way. If I ever did do something like that I know that ( at the start of a line can cause problems. It's also a really simple thing to catch and just because this use-case exists doesn't mean I need to be obsessive about using semicolons everywhere. There are very few types of code that produce this problem and to worry about semicolons on every statement due to an edge case like this is somewhat absurd, and a waste of my time.
&gt; On Reddit people do show off their work to others. Showing off your work is one thing, attempting to profit is another. &gt; I belive we have done some good work here and I don't understand why I cannot share. Perhaps you have. But, from the [FAQ: What constitutes spam?](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F): &gt; * It's not strictly forbidden to submit a link to a site that you own or otherwise benefit from in some way, but you should sort of consider yourself on thin ice. So please pay careful attention to the rest of these bullet points. This applies directly to you. On to the next bullet in the FAQ: &gt; * If you spend more time submitting to reddit than reading it, you're almost certainly a spammer. Before my question above, your user profile shows the following: * 6 submissions (3 of which are for your project) * 3 comments (2 of which are for your project) So, this point also applies to you. &gt; * If your contribution to reddit consists mostly of submitting links to a site(s) that you own or otherwise benefit from in some way, and additionally if you do not participate in discussion, or reply to peoples questions, regardless of how many upvotes your submissions get, you are a spammer. If over 10% of your submissions are your own site/content, you're almost certainly a spammer. Since 50% of your submissions are for your project, then this point also applies to you. Lastly: &gt; If it is interesting enough, people upvote or else the post dies down. Conversely, if your material is interesting enough, you wouldn't have to submit it yourself. &gt; How else do you expect us to spread the word? Helping you make money is not a concern of mine, nor should it be a concern of reddit IMO.
In your first two examples, *this* is the window object. Your examples set a method on the window object, then return the window, and assign it to a variable. If you were to add *new* before the anonymous function calls, this would behave more like what I think you're expecting. var testA = new function (){ this.binds = function(){document.write('testA&lt;/br&gt;');} return this; }(); One more thing, though it's not really stated anywhere, I generally see javascript questions asked in this subreddit get downvoted pretty aggressively. Stackoverflow is a better forum for this kind of thing.
But your cache is limited by size for either item be it image or text file, where is the advantage?
Because reddit is not Craigslist. This place is for news and the discussion of news, it is _not_ a marketplace. Reddit's worked very hard to keep the marketing aspects at bay, e.g. the spam filter, banning users/domains who spam, etc. As soon as you allow commercial advertising to masquerade as news, then the system is fucked because redditors expect the articles to be based in fact and discussion, and not based on helping someone make a buck. Further, reddit has an [advertising program](http://www.reddit.com/ad_inq/), which is how advertising _should_ be disseminated.
no, I already knocked down the point you were trying to make, which is also explained [here](http://www.reddit.com/r/javascript/comments/19nlu0/coffeescript_160_released_with_support_for_source/c8ra8za)... coffeescript posts are: 1) not frequent enough to be considered even a blip on the radar here 2) only so insanely annoying to you and one other guy, it seems.
Sails.JS is hosting a Hackathon in Downtown Austin. It's open to the world wide web though. CHECK IT OUT!!!!
I mean yeah, but this guy isn't selling shitty watches or some bullshit. He came to a niche subreddit with a benchmark for a product he's been working on. You wan't articles based in "fact and discussion" right? Look at the comments for this post! People have been posting factual benchmarks from a variety of devices, inciting discussion over viable alternatives and overall I see very little evidence that this is a ploy to 'help someone make a buck'.. even so, it's a fellow developer! God damn. 
&gt; He came to a niche subreddit with a benchmark for a product he's been working on. The entire point of his post was to promote his commercial project. &gt; and overall I see very little evidence that this is a ploy to 'help someone make a buck' Other than the fact that the project is non-free for a majority of users? &gt; even so, it's a fellow developer! God damn. By that criteria, then any software could be advertised here, since practically all software is written by a "fellow developer"? Additionally, he's _not_ a redditor. Member for 4 years....3/6 posts and 2/3 comments are directly related to his project....it's very clear that he only graces us with his presence when it stands to benefit him in some way. 
What's the problem? Would you explain?
Ken, you are a snob and a jerk and I pose that people like yourself are more detrimental to building an enlightening, discussion based community. Whatever, guy. 
Submitted just 10 hours ago: http://www.reddit.com/r/javascript/comments/19u69k/tern_a_javascript_type_inference_engine_from_the/
OK but Websocket is much more than server-to-client streaming. Mimicking Server Side DOM events with it is like using an iPad as a paperweight.
No.2 hit the nail on the head. Every recruiter I've talked to touts the company with keywords such as "amazing culture", "fast growth", etc. After a while I start to ignore that and rely on my own research.
This is actually really cool and I love the extensive collection of music. Can you tell me more about what the Synesthesia setting does? Are those the actual colors those people saw for those notes?
If you're on anything but IE, you can also consider Server-sent-events. - http://caniuse.com/eventsource http://cjihrig.com/blog/the-server-side-of-server-sent-events/
I can't tell if the demo is just broken or if it doesn't work at all. Cause I couldn't get it to work in any browser. XD
&gt; I already knocked down the point you were trying to make, which is also explained here... So, tell me how many percent more coffeescript posts there are in r/javascript than there are posts that focus on PHP or Pascal content. The answer is infinity. There is r/coffeescript. Announcements about the latest version of coffeescript belong there. I'm kind of curious why this post still has a score of 0, kinda proves my point about it not belonging here. &gt; You're the only person I've seen vehemently complaining about people mentioning it here. &gt; 2) only so insanely annoying to you and one other guy, it seems. So, first it was ONLY me, and now it's me and some other guy. uh huh. Maybe you need to rethink that. There are many more in r/javascript that don't care for the coffeescript content. People do speak up about it. 
It's called COMET and it doesn't get much attention in r/javascript. I always thought it was fun to run javascript in the browser directly from the back end, especially when the back end was also written in javascript. 
This is pretty awesome. It would be neat to see https://www.leapmotion.com/ support. May buy one now... :-x
The colors seen by synesthetes differ and is dependent on their own individual brain makeup.
About time someone figured out a way not to rub your fingers over something you intend to look at.
web sockets is not the solution for streaming. it requires a complete web server to run that can speak the web socket protocol.
it would work on latest versions for chrome, firefox and also ie10
Providing proof to validate your criticisms is cool and all but all you did was quote a vague document worded such that it applies to a vast number of different subreddits. I believe the context in which you displayed said quotations was asinine and rude. To claim that my belief is such that "any software could be advertised here, since practically all software is written by a fellow developer'" demonstrates subpar comprehension and a clear disregard for context. This is a small subreddit dedicated to JavaScript. If you were to question every post that comes here and were to remove every one posted by someone related to its development then you'd have hardly any new or up to date content. Your paradigm that he is trying to make money is also unfortunate.. considering the paid license fits a very small market and doesn't even target education! But forget that, since you want to be angry that they sell software and post about it on the internet. Further, I believe that the authority you seem to think you have for declaring who is and who is not a redditor comes off pompous and kind of chauvinistic. You failed to address many of these points and were generally just abrasive and rude. I do not believe your in any position to comment on being unproductive or snide. I do believe that when someones being a dick (kind of like you) one should say something.. cause 'it takes a village' or what ever. 
There's a player piano at my work that seems to play /dev/random. I love that this little example is far superior in music selection and playability than an actual player piano (well, an automated piano, not a traditional player).
Where the "complete server" can be really small. If you take a look at the Hello World example on the webbit github, it basically fits on one screen including HTML and js. A Node.js server is also very short code. 
Probably runs faster as well.
This is a really neat library, thanks for sharing it!
[Practical Applications of Partial Application](http://raganwald.com/2013/01/05/practical-applications-of-partial-application.html)
Brilliant
Can you make a single post without insults? I've clearly touched a nerve here, to invoke such an emotional response. With that said... I'll support any redditor (and/or their project) -- but first and foremost -- they must be a redditor. That's key. Please realize that OP is not a redditor, and I hope you can see that this is obvious from his userpage. Digression: what makes reddit _reddit_, are **redditors**. That is all this place is. Without that, you might as well go to news.google.com, as it will be updated much quicker and you'll have a much better news:fluff ratio. The aggression you have pointed out is due to the fact that reddit has been invaded more and more by commercial interests, and the more they manipulate reddit (or attempt to) the more we have a need to draw a line in the sand, so to speak. Shill accounts, astroturfing, planted virals, etc. these are all the work of those only interested in making a buck. What you don't see are the 1000's of posts the spam catcher catches on a daily basis. Now, I'm not accusing the OP of any of that, but he's still abusing reddit to line his own pockets (while not even pretending to be a part of the community). The avenue these types of people _should_ take is the paid advertising route here on reddit, which I fully support. I don't hide any of the ads, I click them a few times a week. I'll even remind those commenting on those posts, since sometimes they can be really rude to the advertiser, that the advertisers are the ones keeping reddit afloat. That's the time when, if you don't have anything good to say, you keep quiet, because advertising is a large part of what keeps the lights on at reddit. So the more we allow random, non-redditors to come and freely advertise, thus killing reddit's business model, the more it hurts reddit. This is also why that "vague" document exists: it's in the interest of self-preservation. And I don't feel that I owed the OP any niceties since he's not a redditor; notice, though, that I didn't take that as license to lob the sort of verbal nukes like you have been lobbing here at me. 
The question you should be asking is: (Backbone + Underscore + JQuery) - OR - (Knockout + JQuery) To which I would have to say Backbone/Underscore/JQuery for most purposes, but Knockout + JQuery for ASP.net apps (as it's the MS suggested framework).
I ninja-edited, and I did :) This is why: http://www.asp.net/single-page-application, also misc materials from here: http://www.buildwindows.com/
Excellent! Thank you!
I'm currently building what will end up being a pretty large client-side app using Knockout and I've been quite happy with it so far. I think the key thing to understand is that knockout is more of a library than a framework. You'll want to combine it with some other tools and try to decide quckly on what type of objects/entities make up your application and what their roles are. Depending on the complexity of what you're building, you might be able to just get away with some view models that make ajax calls directly to populate themselves, and maybe something to handle URL/hash routing. For us that's not sufficient, so we ripped off the services concept from Angular, and use those as proxies into server-side data. I'd acutally suggest looking at Angular for ideas - It's not as extensible as knockout, but it's directives have similarities with knockout's data bindings, and it's an opinionated framework, so deciding to agree or disagree with it might help you solidify your approach.
It's hardly surprising. I've worked with Pete London and he is an *excellent* JS developer. ;-) BTW, it should "fictitious", not "factious". 
The point is, you change one small thing and then all your users need to pull down all the code/libraries again. And also, your webserver needs to somehow monitor multiple files to know when it's changed or it's not implementing caching properly (it's possible, but a pain). If you have a small site and traffic doesn't matter, this library doesn't help anything. If you have a large site and need to seriously worry about traffic, then you can't afford to be sending the same code down the wire over and over again. If you don't care about repeat traffic, then it could make sense to pile everything into one request in theory, but you're better off simplifying your site if you're dealing with that kind of traffic. In general, if you do need to combine files, or if you simply find it easier to develop that way, it's better to combine the files in a build process and push out that artifact.
Neat, but what do I do with it?
You can store significant amount of file and data on browser. It works on chrome, ff, ie10, ios and bb10.
That's the technical what of it, yes. I mean, however, what would I use it for? What would you build with this? It just seems...counter intuitive to build a web application that doesn't, well, interact with the web. I am sure there are some really compelling scenarios -- web delivered applications (like a password manager, or a inbrowser office-like system) but those seem to be rather edgecase examples.
I'm genuinely curious; in what way do you find Knockout to be more extensible than Angular? I've only worked with Angular but I'm interested in Knockout.
My major issue with Knockout is having to add all that extra markup to the html. In theory, I think it's great, having the presentation layer so tightly coupled with the model, but I would like it to be moved out into the javascript, not right there with all my semantic html. What I like about Backbone (though there are things I don't like), is the declarative way events are assigned. I think having this in a javascript file events: { "click button" : "do_something" } makes a lot more sense than adding this to an html file: &lt;button data-bind="click do_something"&gt;Button Text&lt;/button&gt;
Hmm... an excellent point. I thought there might be value in tricking the browser into re-caching the image data after it was modified but that was just wishfully thinking. 
&gt;In theory, I think it's great, having the presentation layer so tightly coupled with the model Is that the prescribed line of thinking? 'cos that doesn't sound right to me - I've always been taught that tight coupling was a bad thing.
&gt; The point is, you change one small thing and then all your users need to pull down all the code/libraries again. This is true for any kind of concatenation scheme. And it can be the exact same with loadr. Consider these: 1. Use two (or however-many) script tags: One for external libraries that you don't change (update) every so often and one (or more) for your application code. This is possible now, and will be even better once "negative-loading" is implemented. 2. The way loadr is put together currently (0.1.1) is to ease development immensly above all. I don't yet think you should use it in production, especially if you have reservations like these. Or until we figure out those open questions. &gt; If you have a small site and traffic doesn't matter, this library doesn't help anything. I'd say it helps. - **It will help with jumping into development quickly**: just write one script tag and list your top-level dependencies (and they will take care of their deps). You don't have to (unnecessarily) context-switch into a CLI, or even worse to go to sites to grab your copy of libs. - **It will help with continuing with development**: Want add/change/remove one dep? It's easy. - **It will help with modularizing JS code** for both you (because you can have your scripts tell their deps) and the library developers, because they no longer have to face the question: *should I concatenate my hard deps?* (like jquery-sizzle) or *should I have my users deal with it?* (like backbone-underscore) The answer to both of these questions is: No, you need a way to have proper dependency management. &gt; it's better to combine the files in a build process I have two problems with build processes: (1) They can take too long, unnecessarily slowing down development. (2) You have to start them again and again every time you resume work (`cd loong/path/from/home/to/project; watch make`) Because if you don't you'l be wondering why your change didn't show up in the browser upon refresh. &gt; [loadr need to implement caching properly] Yep, that's the goal. :) *** Does all this make sense to you?
lmao at an "architect" that wants to write everything in house.
I've started using [Backbone.Marionette](http://marionettejs.com/) which is basically an application library/framework on top of Backbone.
Oh wow. This has the potential to revolutionize how people learn JavaScript. 
yay, written for advanced optimisations!
If you are building an application go with Backbone if you are building a page with UI components go with Knockout. Backbone is nice but if you are going to Backbone it is best to do everything in JS and not worry about progressive enhancement. Not saying it can't be done it's just easier not to. Knockout is best when you have a website with interactive components - it works off the DOM and degrades nicely (if you make it).
We, at [Blue Mind](http://www.blue-mind.net), also use YDN-DB for the application we develop. It allows us to store a big amount of data in IndexedDB or WebSQL, which are used for making our application work offline.
Now I have a way to make people fix their own JavaScript :)
There seems to be an error using String.prototype.replace: ('Hallo, Welt').replace(/\w/g, function(x){ console.log(x); });
&gt; truth was our architect wanted to write all our JS from scratch and not leverage any frameworks. Fine, dude is brilliant. No, he isn't. Writing everything from scratch is pointless, and downright idiotic, when we have so many good frameworks and libraries available. By reinventing the wheel your "architect" is just wasting hours he should be spending on the application itself. It infuriates me that there are so many incompetent people in key positions in the industry.
I'm a big fan of [PouchDB](http://pouchdb.com/) for this kind of use case, seems a bit more mature, I.E. it can sync, it will be interesting to see how this matures. 
I personally find Knockout more extensible because it does just one thing - databinding. It does that quite well and it just isn't trying to do ANYTHING ELSE. Angular on the other hand is the whole package. It covers databinding, routing, assembling your app together(DI), module system, ajax wrappers, mocking, testing, you name it. So in other words- if you want to use some other entity with angular, you have to extend angular with it. But if you want to use other entity with Knockout, you rather just push Knockout inside whatever you may have.
Yes, even Angular had included [q project](https://github.com/kriskowal/q) inside angular, it is just too awesome. I just wish Joeyent would add it to Node.js by default so that everyone would get used to using it regularly.
For me the benefit would be if you could edit the image data then force the browser to re-cache it from the image data in memory without having to re-request it from the server. That way you'd only ever need to load data in and out of the device storage and only "synch" with the server on separate "threads" if and when the connection is available. But that is not possible so there is no benefit.
So far, the problems you're trying to solve aren't actually problems. Dependency management, a la OSGi, would be cool. It could load and unload scripts in the correct order with all compatible versions while also being aware of what's already been loaded. Especially nice if you could make your script call back to the server to dynamically load different library/versions. Very nice for testing library compatibility, actually.
And ember.js... they're literally popping up all over the place. Check out http://addyosmani.github.com/todomvc/ for a great listing and demos
Agreed. I just finished integrating AngularJS into a rails app of mine, and it's a joy to work with. Angular's dependency injections is extremely powerful.
Title sounds promising! I am getting 404 though :(
To be fair, Backbone requires underscore and jquery/zepto. I don't think we will get rid of jQuery, but let it stand alone was an option (least favorite). I see that Knockout is the MS suggested framework and that is because it follows the silverlight binding pattern, but if I am building an app with lots of Json result routes why not something like Backbone that will handle my model syncing for me. Wiring up the data to a form isn't terribly difficult, but knockout certainly makes that FAR easier.
I wouldn't use Backbone without Marionette. A friend of mine brought it to his new team who is using Backbone and they were very happy.
Sorry, I was playing with blog categories and didn't realize that this changed their permalinks by default! Fixed. I may write another, shorter post as well :-)
He's talking pragmatically, binding the view to the model's data [almost] directly. When the data changes then, the view will too. No need to go jquerying all over the place to make it do so.
Well now you're just making up words.
&gt; why not something like Backbone Because developers are human beings. The best tool for the job in any one situation may not be the best tool for the job in the broader context of your work environment. If Microsofties are standardising on Knockout because it fits their way of thinking and they can understand it, and if you want to provide *maintainable* code for those Microsofties, then you should standardise on Knockout - even if it isn't always the absolute best tool for your specific circumstance. This is coming from an SP developer who loves backbone but uses Knockout for work.
Slides looked really good, are there any videos?
If your developers aren't writing clear js with knockout then I know changing frameworks is not going to fix anything. Knockout was the first framework I used, besides jquery, and I was blown away at how easy it was to use. You need to help your developers organize their code more then anything. Make sure they are using a separation of concerns between the html, css, and js. And that there is proper javascript encapsulation.
Oh awesome. Introducing bind and showing how its a partial application did the trick for me! Also, the more js I write the more I realize that I really like functional programming. I need a tshirt that says something about minimizing side effects.
Yep, even broken up like var s = 'Hallo, Welt'; s.replace(/\w/g, function(x){ console.log(x); }); Still broken, mmm...
I have already tried that, too. I guess the prototypical functions are not called in the right context - the one of the string: String.prototype.replace.call(string, callback), but just executed String.prototype.replace(callback).
Sure, but the devs are really struggling with Knockout, and most of them have mixed backgrounds (Java). And I was only suggesting Backbone as an alternative, because of its nice handling of Models/Collections that Knockout requires you to sort of brute force/do by hand/pickup a plugin.
This is what I was thinking -- it needs to be absorbed into some of the online learning programs. I've always liked using the debugger to explain language concepts, because it is _the_ source-of-truth. 'Why did the code do that?' is best answered with debugging, and being able to visually demonstrate that to a student without requiring them to actually grok debugging is huge.
Awesome stuff, thanks for this!
Currently moving a large Backbone app over to angular. Tried out Chaplin first, but angular beats both by a long stretch. Trickier to get started with, IMHO, than the other frameworks, but once you grok it it does a lot more for you. In my experience, I end up focusing a lot more on writing domain code, and a lot less on boilerplate. For reference, and with two caveats: One, that LOC is a crap measurement of course, and two that the new project only has about 50% feature parity with the old one, but I've started with the bigger, trickier features. What is missing in the new project is the easier features to implement. The old backbone project was ~9000 lines of coffe script, the new project is 469.
I would also love to have this feature built in to the Chrome Dev Tools. 
can someone provide a mirror?
&gt;That feel when no embedded vim.
Has anyone had a chance to play with this or can give it a review?
Hmm, ok so you haven't looked at the source code. Then I guess you have done lots of benchmarks comparing different browsers, right? Could you share them?
full name isn't a display concern, it is a valid piece of data that mey be requested from a model, that it's actually composed of two different pieces of data that the model doesn't make it a display concern - especially if that piece of data is being used elsewhere in the app. what really should happen is that you put the 'fullName' as a data attribute on the model and then you can get it just like everything else. Sure that means you need to somehow keep the fullName attribute up to date but I'm sure there is some plugin that will do it for you, I know other frameworks allow you to have meta attributes like that.
Agreed. It's a fine line and easy to go the wrong way with it. Full name is a "display concern", yes. However, putting first and last name together is a function (it's not always firstname+lastname) and not appropriate in a template. I have tendency to deputize models and controllers, even, as "view layer". So shoot me. :-)
&gt;full name isn't a display concern, it is a valid piece of data that mey be requested from a model So is "{{Lastname}}, {{Firstname}}" or "{{FirstThreeLettersOfLastName}}". Basically, I disagree rather sharply. The model represents the data object on the server. Giving it extra attributes that won't persist is a mess, as you go on to prove: &gt;Sure that means you need to somehow keep the fullName attribute up to date but I'm sure there is some plugin that will do it for you ..._Or_ your View moves the Model into the View's preferred display form when it renders. The only time it matters that you have an accurate Full Name is when you're displaying it! Thus, it's a view concern, _not_ a data concern. 
Shits whack. =(
&gt;Ok, and what about Chrome? The relevant code is produced upstream by Chromium or WebKit. Chrome is not responsible for upstream code. &gt;Yes, and another way of assessing the quality of implementations it to see how they work. If you want to see how they work, you should look at the source. &gt; For example, if a bitmap background does not imply a performance issue, but a linear-gradient does, then you must not be converting that gradient into a bitmap, right? for(;;); has terrible impacts on performance. I guess that's the fault of gcc? &gt;That's old. Chrome has been scoring below 98% for the last many months. I just made this screenshot and I'm using 25.0.1364.152 (185281). &gt;And why is that, I'd like to know. Because it would be a rant without any reproducible evidence to back your claims up. Edit: http://i.imgur.com/arAOFlo.png
&gt; Gone in 60 frames per second. Like the website. *rimshot*
davidphan = Redditor for 10hrs
okisan = Redditor for 13hrs
&gt;I'm not sure I get what you mean there. Are you saying that everything is derived from Chromium or Webkit? Are you saying that the relevant parts I was talking about (css properties implementation) are the ones derived from Chromium? Does Chrome use Webkit without any modification? Chrome adds some proprietary things, most notably the integrated pdf viewer. The features we are discussing here should come 100% from Chromium which in turn might take them from WebKit. &gt;Ok, if I want to be 100% sure they didn't implement any kind of performance optimization on a CSS property, yes. But not if I just want to say that it's not true that there is no way any of making those properties perform fast. You don't need to look at any code for that. You just need to think of the possibilities of making them perform smoothly. So now you are a graphics expert? Rendering is a highly complicated problem of computer science that isn't solved by "just thinking of the possibilities." &gt;I'm using the same and it scores 97%. So? I guess you have some bad extensions installed then. I deactivated some of mine and got the optimal result: http://i.imgur.com/arAOFlo.png &gt;I don't need any hard proof that Chrome sucks, after months of suffering it. And there's a lot of people that don't need it either. So you want to make a circlejerk page for people that don't like chrome. &gt;It's like saying that you can't blame the government for not fighting poverty, because you haven't seen the money effectively not getting to social causes. But you can see poverty is still there. Surely you jest.
&gt; I really thought Google developers had a lot more to do with Chrome severe rendering problems. Chromium is a project sponsored by Google and many of the developers are probably Google employees. &gt;By the way, Chrome extensions implementation sucks ass. Yes, yes, Chrome sucks ass, I get it.
I'm no longer entertained.
Why is this on dropbox?
downvoted for compliment?
I can confirm acid3 finished w/ 100/100 but did not render at all correctly.
&gt; var _len = 10000; &gt; var a = new Array(_len); &gt; while (_len--) { &gt; a[_len] = _len; &gt;} Filling the array backwards is a bad idea. It can lead to the use of much slower "sparse" arrays in some JS engines. The use of "new Array()" with an explicit size helps to prevent this, but it is still good practice. You are never faster when filling it backwards, and filling it forwards is more clear imho. 
&gt;a vim mode Surely you jest.
Can't get the "/page". Is that working for you? 
Filling the array backwards like that is the fastest method when i was running the testing as it avoided the compare Edit: looks like if the array is made forward iterating it forward is faster, but either way the array is constructed backwards is about the same speed.
What's your point? New redditors can't contribute good content?
Yeah, seen this some time ago - awesome job. Could you elaborate on how this handwriting system works :)?
No, of course not. I'm suspicious that they created the account solely to promote this project. Just pointing that out.
i agree with you. the model is storage space, not display space.
I was surprised to see that IE 10 on Win8 64-bit was faster than Chrome 25 on the same machine on every test except "while push" and "underscore map", the latter of which resulted in an error "ReferenceError: '_' is undefined." Can you add IE 10 to your graphs? (oops: I assumed this was your project but I have no idea)
I got 100/100 but it rendered correctly. Used incognito mode.
&gt; "Some CSS properties are just slow" &lt;-- WTF! None of those effects imply low performance. They perform like shit because they are IMPLEMENTED like shit in their browser. But, apparently, their browser sucks and it's our fault. I wasn't aware of the fact that Google built WebKit.
yeah it's a whole site, so IE10 should go in Automatically, I believe IE has the problem with underscore because I just linked to the raw.github which gives the wrong MIME type which only IE seems to care about. 
&gt; But are you sure they don't implement a modified version of it? Yes I am. &gt; And are you sure they don't contribute the development of Webkit? There are Google engineers who contribute to Webkit. That doesn't mean they have complete control over what changes are implemented in Webkit. &gt; And even if they didn't does that mean they have to tell their users "Some CSS properties are just slow" instead of go contribute Webkit and make them fast? Changes to Webkit are implemented *very* slowly and are *very* deliberate. Stability is several orders of magnitude more important than optimizing bleeding edge approaches to using CSS. &gt; Or at least tell web devs "Some CSS properties are still not very well optimized", instead of giving us that bullcrap? I'm sorry that you had your feelings hurt, but as a web dev, I really don't give a shit how they word it as long as it's true.
How is it not true? Are you trying to make the claim that the `color` property is the same speed as `box-shadow`?
Many times it's faster to write it from scratch than to learn the nuances and pitfalls of a framework. If you want to build exactly (or a slight variation on) the demo app then that's not a problem, but if you have something new and unique to build, many frameworks aren't flexible enough to get the job done without extensive modding. 
That was fun - hope you win ... 
Wow very impressed!
PouchDB is very interesting project. When I think about persisting IndexedDB data back to the server, CouchDB come first to my mind. And then I find PouchDB project. It looks very good. So I focus on syncing with blob store services (S3, GCS4dev, Azuer blob). The most important things in synchronisation is automatic conflict resolution and reducing server load through preconditional HTTP request. My understanding is CouchDB have problems with authentication/authorization, scalability and exposing cross domain request. These problems are solved in blob services. The future is very interesting indeed. 
Yep love that. I have to say the coolest thing are directives. I've just instituted a directive that uses different templates based on the day of the week. I've also used it to build a tree view that I can place anywhere with just one HTML element and know it will work each time. 
not working here on chrome
Yeah it does have a steep learning curve, but when you start to understand how it works you realize how good it is at modularizing your code and extending HTML with directives feels sooo good.
Sure correct but the underscore cdn doesn't support https so i often use //raw.github.com which serves https
http://cdnjs.com/ -&gt; https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/underscore-min.js
True should probably use cdnjs more tend to just get lazy and use raw for bl.ocks I make or developing on c9.io
Dam that's fresh. Can you elaborate on how you did it?
I don't know man, maybe look at how people use underscore, a lot of their functions seem designed this way. I think it's cool regardless.
Should've used github.
Why not [Knockback](http://kmalakoff.github.com/knockback/)? :) As /r/heseov alluded to, it's not a matter of which framework is better if your developers are not grokking the base concepts. And quite frankly, Knockout has much better documentation compared to some of the other frameworks, so if people are having trouble with it I don't think Backbone or Angular or Ember will be any better. The biggest thing that people have to get over IMO is to stop comparing Knockout to other frameworks. It doesn't do the same things as them. It does one thing and one thing only (two-way data binding). It doesn't manage your URLs or your routes or do data access or any of the various things handled by other frameworks. Once you understand that and let go of the whole MVC thing, Knockout makes much more sense. 
awesome!!! great job!!
Thank you - been saying this forever it sems. IE5/5.5 also did vector graphics, linear and radial gradients, and SMIL (scriptless animation of html attributes, like CSS3 animations today). There are _still_ some effects that I could do in June 1999 (release of IE 5.5) with gradients and SMIL that cannot be done without using JS. One that I liked a lot was changing the colors of a gradient on a menu element on the mouseover / mouseout events with SMIL2 (HTML+TIME). As near as I know, you cannot animate gradients with any browser implementation of the CSS3 animation/transition module. That's now (almost) 14 years since it was possible in IE 5.5 That said, my primary browser in 2013 is Chrome (canary version, 'course)
opa is quite common slang for retard, is the name supposed to be a joke i dont get?
Everyone doesnt know how es6-modules look like, As several statements compare this to es6 you should really have an example of the syntax es6 proposes so we can compare them! But for me import "foo/stuff" as Stuff; is more clear and easier then Stuff = import "foo/stuff" which really is the only difference i can find here, The same syntax as is proposed in es6 is already used in several other languages and similar packages, for example in * Python - from foo.stuff import WonkyStuff as Stuff * QML - import "foo/bar.js" as Stuff 
I was going to write a quick thing on how you could improve your code, but it got a bit out of hand and a write a [detailed step by step guide](https://gist.github.com/calvinmetcalf/5124049) because god damn it I wish somebody had to me this when I wrote code like that. 
&gt;Many times it's faster to write it from scratch than to learn the nuances and pitfalls of a framework. *citation needed* 
I'm curious, How are they implementing security?
http://ace.ajax.org/#nav=about ctrl+f for "vim"
That site is a horrible mobile experience. Did they even test it?
The ad couldn't be more intrusive..
Source: I write many things from scratch faster than it takes to learn the nuances and pitfalls of a framework.
Might it be easier for the syntax to be something like: require("pipping")("path/to/sever.js");
so instead of using jQuery you would just re-write it...? your assertion fails simply because writing anything significantly complex would always take more time than ~~learning~~ reading about the nuances of a library/API.
&gt; would always take more time than learning reading about the nuances of a library/API. *Citation Needed, ass* In-fact, I'd go as far as to say that to write anything *actually* complex you need to know the intimate details of the framework. You need to know what's happening when. You can't rely on the "magic" that happens in the black box, lest you use something in a way it wasn't intended. I like Jquery because it takes care of cross browser issues. I don't really consider it a framework. To be honest, if browsers actually worked reliably and consistently I could get by with $ = document.querySelector; 
Let's give it the benefit of the doubt. What could we use it for? Please give some examples, otherwise it's just another framework that someone, somewhere, needs to understand, integrate with, and produce something with. Then the world needs to see it and other developers need to get interested in. Without these examples I don't know what the possibilities and limitations would be, so I'm not drawn to use opa. Here's a good comparison of [opa vs node.js](http://www.developer.com/open/node.js-opa-javascript-framework.html). One more question I have is when did making an HTML website and using Javascript to manipulate the rendered DOM go out of style? Everything's going to Javascript so that you have to write all of your HTML in the Javascript code or use an extension that does that for you.
It's grandpa in dutch.
I think you make some valid points. I'm considering Opa at the moment, but some of your remarks seem a bit off. &gt;One more question I have is when did making an HTML website and using Javascript to manipulate the rendered DOM go out of style? - When we finally learned that browser differences do exist, and will remain to exist. - When we started using our mobile networks to browse the internet and get horrible latency per request. (bringing the number of requests down, is crucial for a decent mobile experience) - When we had to maintain and/or update style settings that apply to both pre-rendered content, and dynamically created nodes. If you have dynamically created nodes, also working with server-side generated html content just doubles the maintenance burden. - When we started dealing with use-cases on the web, we traditionally solved on the desktop, we ended up with similar requirements as we did on the desktop. Widget toolkits, MVC, concurrency, etc. You don't need any of this to create a hyperlinked document. But that's not what many of us are making these days. Sure, many websites are still just that, but we've prefabbed that market. Installing another wordpress does not employ a webdeveloper. The actual webdevelopers are making applications these days, and they need infrastructure that properly deals with that use-case. &gt;Everything's going to Javascript so that you have to write all of your HTML in the Javascript code or use an extension that does that for you. Well, sort of. Opa isn't javascript it seems. And HTML is a native. So you don't type "&lt;div id='test'&gt;Hello, world&lt;/div&gt;" .. you just type &lt;div id='test'&gt;Hello, world&lt;/div&gt; and it actually applies static type-checking.0. So, at the very least. It will be less cumbersome. (because manually creating nodes in Javascript, and dealing with html encodings in strings, is a nightmare, as it currently is.) I will need to evaluate Opa some more, before I can make a decent judgement. But it's too easy to ask why _we need another framework_. Do you know of a framework that already solves our modern requirements? Because i don't. So i'll keep looking. And Opa's promises are very interesting to me. One language to rule them all. Static typing. HTML fragments are a native datatype. Easily share a code-base between client-side and server-side. Natively built-in persistent data-structures (using CouchDB, or _yuck IMHO_ MongoDB). In short, it seems to promise to be a conceptually and cognitively simpler solution to the kind of jungle of technologies we are using right now. But if sounds too good to be true .. we'll just have to see.
I cannot fathom how that site got *such* terrible screenshots. It takes quite an effort to produce an article that shitty. (no offence to Buckwheat469)
I'm referring specifically to adding the data-bind="click do_something" on the button element itself. I would rather have my html look like &lt;button&gt;Click Me!&lt;/button&gt; and then handle any click events in the javascript. If you look at the knockout website (http://knockoutjs.com/) the markup of the first example just looks overly complicated to me.
Oh, another one.
I am, I separated out all the jquery functions I use ( mostly out of ease ) and plan to remove the jquery dep. I'll fix the readme.
Went ahead and added this, as well as allowing relative paths for the main (should of been like that in the first place)
I downloaded the windows application and created the hello.js file (I triple checked) and when I tried to run it nothing happenned. It's sad because I would have considered such a thing. edit : i'm on seven x64
I don't like the non-standard html attributes. Prefix them with 'data-' so it's valid html.
Its also like saying "Cheers!" or "Hooray!" in Greek. Typically accompanied by smashing plates. 
As an alternative, I've been using this for a year or so now: http://responsive-slides.viljamis.com/
nice name :)
It doesn't appear to support mouse drag to swipe.
Why do people insist on giving their projects such retarded names? Is there some internet law requiring web apps to have a maximum of one vowel in its name that I am not aware of?
Having too many choices is a better class of problem to have than having too few.
now what's real world use of it?
No, it doesn't support drag to swipe for desktop browsers. Personally I don't see the need for it, but it's an easy enough implementation to make, so if this is a requested feature it will be added in future releases.
ResponsiveSlides doesn't support drag to swipe in mobile browsers, but shows a pager in the bottom.
Good to know! This is definitely an improvement then.
With a thorough enough binding support, this could be used for forms based applications that want to use a MVVM pattern. This is pretty popular in the Microsoft world with their WPF technology. Think business apps or saving time with hookups with forms.
Just add another prefix and then you won't conflict. -data-shibari-KeyName Also, IIRC using -data attributes has a performance benefit as well--they're only stored in the javascript representation of the element.
Upvote for kinky name.
You aren't going to find a data-binding library that doesn't require, strongly suggest, or assume non-standard html attributes. 
There does seem to at least be one that requires you to have it only one word long.
Very pretty, especially since it's such a tiny 160 LoC. I'm pretty strongly opposed to data-binding, but I might try to manage some form handling using this in a Backbone env. Oh, and I wouldn't worry about prefixing 'data-.' Everyone's doing it and "valid" HTML is a bit of a shiny meaningless sticker anyway. (Besides, looks like it's basically a setting in the source, so people can do what they want in any case.)
I have to wonder if all these professors really don't know about reddit... Because this code made me laugh, I'll give you some hints. Try running it through a code analysis tool before posting. http://www.jslint.com/ Also, if you run this in chrome, it'll tell you warnings and errors in the developer console. If you put in a break point, you can step through your code to see if it's doing what you expect. While it's stopped, you can jump over to the console again and type out commands. It retains the scope of where it's stopped, which is nice because you can inspect variables that would otherwise disappear when a function exits.
I've never used it personally, but you may want to look into the knockout-classBindingProvider plugin: https://github.com/rniemeyer/knockout-classBindingProvider A TODO MVC Example of using this plugin can be found here: https://github.com/addyosmani/todomvc/tree/gh-pages/labs/architecture-examples/knockoutjs_classBindingProvider
Haven't heard about [KnockoutJS](http://knockoutjs.com/)? It is much bigger projects than yours, but it also just sticks to data-binding and nothing else. I think that the sack with these types of libraries will explode in the future, when we have observable objects in native JS.
and the winner is: "Replace all your pictures with of goatse" :) Excellent answer BTW
The job interview question, calendar, and events part of this remind me of a fairly recent (last 2 months?) post either here, in /r/webdev, or /r/web_design. A quick search didn't find anything. Anyone know what I'm thinking of?
I was wondering if I had seen the question before. I don't think I thought about it much the other time it was posted (or read any of the comments).
Not to mention knockouts creator works for Microsoft and it ships with visual studio (it is 100% an open source project though)
I've read this interview question on HN, too. I think it might be a Facebook question.
Since the title of one of the links is "Facebook Puzzle", that would be a safe assumption.
Well yes is a Facebook puzzle I didn't want to mention it but whatever now, I did this without any help but I think my algorithm logic didn't give me enough to pass it .. So I'm looking for ideas of which approach may solve this in the correct way 
Ah, that's right! I'd forgotten about that little detail. Kind of important. Thanks :)
OK, well may as well suggest it then. :) I have to say, my personal preference is backbone over knockoutjs, and I'm a primarly MS developer.
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
FlexSlider doesn't support Mobile IE10 and is 4 times as heavy - but have more functionality out of the box.
[SWIPR NO SWIPNG!](http://www.popmatters.com/pm/feature/swiper-no-swiping-the-demonology-of-dora-the-explorer/)
thank you VERY VERY MUCH!!!!! learnjavascript will be of great help to me! 
Regarding 'with' statements - I found this enlightening: http://www.youtube.com/watch?feature=player_detailpage&amp;v=MFtijdklZDo#t=519s I recommend the entire video, but I've linked to the interesting example of 'with' scope manipulation in practice.
While it is a creative solution, I would say your drawbacks are: * The templating code. * Your markup isnt extensible. * The js is lengthy and excessively indented (they probably care more about readability than functionality) * Source file was embedded, should be separate, ill bet you a dollar thats the first thing they look for. (html, dependencies, js, css, **source**) oh and you dont have to shout: * RUNS HERE * RUNS HERE * RUNS HERE * RUNS HERE * Probably better than i would have done though.
Ok, if im going to be a bit pedantic and only include the bad things! * HTML - divs in divs in divs, there are other element more suited to do a header with, for examle &lt;hN&gt;. in time_grid_tmpl you have a DIV as a single element in an LI, you can just as well style the LI. in events_grid_tmpl only divs. Many unwanted elements make the code harder to read. use less markup and proper elements. Dont use HTML comments for developer information, they are sent to the client. Make sure comments are consistent - dont do &lt;!-- Template start:EVENTS GRID --&gt; then a few rows later &lt;!-- Template EVENTS GRID --&gt;. I guess you mean that it ends on the second one, but it doesnt tell me that. * CSS - Doesn't use the smallest unique selectors, nor does it use the smallest possible rule change. also try to avoid using #ids in CSS * JS - way to much code for this, should be much shorter and readable as the others already said. the indentation is WAY fucked up, if you sent it in like that i would actually guess they didn't even bother reading it. Also don't try to be too clever, for example the return on row 30 is totally impossible to trace what it does or where it returns from. returns belong on the last row even it if costs you a variable label. * Design Choices - What is FWK and why is it used over more popular DOM-libraries? dont use custom code if you dont have a reason, its a burden for colleges and whoever inherits the code after you leave. * Tabs - youre using tabs instead of spaces to indent, this is what messes your code up and might be a reason for rejection, programmers are quite touchy on this subject. -edit: if the source that was applied did have correct indentation and it's github thats messing it up you can of course ignore those comments.
They wanted to see **if** and **how** you can code. I think they found your style too verbose and confusing. If they say you can use jQuery, I think it would be unwise not to. As they say, don't reinvent the wheel. As an example, *$(document).ready()* takes care of the 40 line ready function you home rolled. No coworker wants to debug that function months down the line. 
document.getElementById("targetElement").className = "newClass"; Edit: if you show your code in a fiddle or something, we can give more specific solutions.
 // Capture all divs var theDivs = document.getElementsByTagName('div'); // Loop through all the divs and add the class 'something' for ( var i = 0, len = theDivs.length; i &lt; len; i += 1 ) { theDivs[i].className += ' something'; }
I have, I've met them who claim tabs, 2 spaces, and 4 spaces are THE ONE TRUE WAY to do things, I don't think using tabs instead of spaces is the issue. I think the issue is that OP failed to notice the default settings in gist are 8 space tabs when his text editor was most likely set to 4 space tabs. 
[According to github](https://github.com/languages/JavaScript/most_watched): bootstrap, node, and jquery i would even suggest backbone, however the best thing you can do is go to town buffet-style on these projects until you feel like youve learned something.
Be certain to understand, jQuery is a library of super useful functions. It is not a framework to build an application off of. Angular, Backbone, etc are frameworks to build web applications off of. 
I know this isn't quite what you asked, but Google Web Toolkit is great for Java guys who want to develop rich web apps. 
Before writing anything using jQuery, read this: https://developer.mozilla.org/en-US/docs/JavaScript/A_re-introduction_to_JavaScript. If you aren't planning on applying for a junior level job, you will be expected to know the difference between javascript and jQuery, and why libraries like jQuery, Prototype, etc. exist. I'd suggest getting a good grasp of JavaScript itself preferably before, but at least alongside, developing things with jQuery.
jQuery isn't a framework.
Why must you assume that you need to become familiar with a framework in order to learn to use the technologies. If you are learning you should learn in the technologies directly. Otherwise your skills will be substantially limited.
Pretty impressive. My favorite look was with the Sky type set to "Dream". 
I'll chime in and say that the code produces warnings in jshint and jslint. Mostly "trailing white space"s, but still doesn't look great. I think there is a lot right here, lots of good comments and some good patterns. Like others have said though, it's very long and hard to get through w/o significant time. Did you ask them what you could improve on? I totally would drop them a line and see what they think. Can't hurt. 
Yes, learn Javascript first. I suggest [http://eloquentjavascript.net/](http://eloquentjavascript.net/) 
Simply wonderful, and great techniques pretty well explained
[Here](http://www.reddit.com/r/javascript/comments/18q8t7/facebook_interview_question/) you go
[Recent thread](http://www.reddit.com/r/javascript/comments/18q8t7/facebook_interview_question/) on this very question
Thank you! My favorite sky state is the very imaginatively named 'Sunset 1'. :)
Thanks! I've had a lot of fun, both when making it and when doing the writeup. :)
And now I feel entirely inadequate. 
Well, do something about it!
Very nicely done! There are a lot of different aspects to this demo that would be helpful to those of use still learning WebGL. Do you have any plans on sharing the source?
There's no need to! :) I'm an old fart and I've done this stuff many times in the past for the desktop :) Learning JavaScript was the only thing I had to do and the Mozilla and Google guys and girls have done a great job in making complete, friendly development environments. As iends said, go build something better!
Heh yeah I made one [similar](http://thefreecities.appspot.com/) a few years back (if you click the bar buttons first), though far less capable or smooth, for the same reason (had never done webdev, decided to just treat the canvas as a desktop).
Nice! Why didn't you go ahead and finish your game?
I used this as a refresher a while back and it is great - it even has an javascript console built into the material. Highly recommended. I even downloaded it and ran it offline
I decided to :P, and quit my job to work on it fulltime. That was in early 2010... I've since reinvented what I'm making several times, upped the goals dramatically, and am currently stressing over far too many details as I move to finally finish it before my money runs out...
This is great. Can you summarize the lgl3 license? I'd like to know what the implications are if I use it in a photo app.
Fair enough, but I was answering the question that was asked. jQuery is a good place to start and a terrible place to stop learning about javascript. 
I know exactly what you mean. Our circumstances are not that much different. Things are pretty bad in my country (as I'm sure you must have heard by now :)) and I'm hoping I might get the chance to do some remote work and earn a (much needed) additional income. Don't keep adding things, just go for the release (I can't count the times I've heard that from my friends as well)!
What he said ^
If I'd finished mine, and it had been successful, I'd have contacted you with a job offer in an instant upon seeing that. What you've done is very cool, and shows a great range of abilities. I suspect that more and more work will open up for you with a portfolio like that. Scope creep was a major problem in mine, though it does some very cool and novel things now :D. Unfortunately it's basically turned into a spectacle of AI, and I'm struggling to think of things for the player to do now that I've automated so much...
Will do, found a cool library the other day that can make arrays observable, going to experiment with that.
Thank you. You certainly give me hope. Do release your game. Even if there's not substantial gameplay, I'm sure it will still be technically impressive! I'd certainly be interested to check it out :) The whole online development thing is still at its infancy, don't wait up.
Right, well when they contacted they said they were you looking for somebody who doesn't depend of a library .. but yes the problem description says you can use jQuery or any library, and I shouldn't ignore it.
Oh, do shut up, I'm in love with the GUI. 
Thanks, I am hoping to make a small game from it. Get my feet wet with this whole game development stuff. 
I'm using Firefox 19.0.2 and I get a message saying my browser does not support WebGL. Can anyone tell me what is going on here?
How long did it take you to make? 20,000 lines seems like a lot.
Thanks :) I think it turned out OK, all things considered :) As I've written in the GUI section of the writeup, its main problems are the lack of a visual designer and the fact that you need a relatively high FPS count to get a smooth user experience.
guess it's already been said, but wow - cool stuff
That's it. Thanks!
Being a web developer for over a decade and a Java guy for most of that, I can tell you the post I'm replying to you is the best advice. Yes, yes, learn real JS (o'reilly's "definitive guide 6th edition" and "the good parts", http://jslint.com), but it's rare to use it anymore. jQuery is by far the most common (just google fight it against any other!). Any other framework worth its salt is compatible if not dependent upon it (unless it's meant for intensive graphics or something else weird). Though it's more a utility than an app framework, as such. Do-dash is another good utility to keep on hand (replacement for underscore, whose development has stalled). As for the other frameworks, I'm sorry to say I don't like any of them. I learn the underlying technologies, start by using the best tool for the job, and I prefer programmatically-accessible metadata over code of any sort. So I stick to actual CSS, stored procedures over ORM, liberal use of backend via REST, mustache.js for templating (and the one with the least "features"), and lots of caching. From there, I still write my own frameworks and find them to be both smaller and much easier to work with. FWIW. But don't just listen to me, check out a good comparison of the most popular frameworks written only by framework enthusiasts in the style the believe to be its best usage. It's highly active, so they update them as each community mature's its best practices. And maybe you'll like one. http://todomvc.com Being a Spring and OSGi fan myself, I'm glad to see movements like CommonJS slowly gaining in popularity (just look at jQuery source for an example) as well as modularization being built into ES6. The springsource guys have finally realized they can't just focus on big data for their future and have finally started paying attention to front-end, so I hope to see them bring some maturity to the javascript world. They have some good video out now. Learn it while you can because JS is an awesome language. I fear it'll be gone soon, replaced by languages that compile down to it. There's already quite a lot (coffee, GWT, etc), but there's a project called ASM that's a subset for JS for presenting a standard way to compile down to JS. I'm sure something new will come along that I'll be forced into... BTW, node.js is awesome. I literally use it for everything. OS scripts, web server for clients, interacting with my personal google docs and calendar.
From the LGPL perspective there shouldn't be any problems with using it in your photo app. However, if you're going to distribute your app via some market place (such as App Store, Google Play, etc) there may be some incompatibilities.
Thanks so much for the kind words :) As I've said elsewhere, I've done this stuff before. The only new variable (hah!) was the online platform. Things have progressed very much on this front in the last few years. The real kudos go to the Chrome &amp; Firefox guys :)
Thanks, I will fix that for sure :)
Superb.
&gt; When I tried to think of a project suitable for learning JavaScript... Gosh, I thought that building pong is a project suitable for learning javascript :)
Heh, you're right :) However, I've already used Pong and similar games to learn BASIC on an Amstrad CPC 6128, back when the grass was greener and a floppy drive was the epitome of storage speed :). Ah, nostalgia!
Crunchbang Linux.
That's an excellent definition. Data-binding _leads_ to poor implementations. No matter what you do, you're still going to have to program the "propagation of modifications of data". In some sense that's what programming _is_. So data-binding is on the very edge of "I'll handle the programming for you," and it works and does neat things and feels very safe and fast. And you're building reusable components and testing heavily (this sentence, I admit, is aimed more directly at Angular) and wow, web development is such a solved problem! Nope. It's still hard. You have to tell change how to propagate. Data-binding is just a lasso around a common pattern of change propagation. You can tell it doesn't work because all it does is create a new language for telling change how to propagate. 
Cool! I look forward to checking it out and thanks for sharing!
Very impressive! Would love to hear your thoughts on writing with Javascript and canvas API in general. Anything you found lacking or that could be done better? What about state of tools?
Thank you. I think that modern JavaScript implementations have nothing really in common with past ones. Both Chrome and Firefox have excellent development tools. When I started coding for the web, about a year and a half ago, Chrome was certainly ahead (although much behind today's implementation). Firefox has recently caught up, both in development tool state and with the inclusion of IonMonkey in JavaScript engine speed. In my opinion, they're both very good as they stand right now. It is very easy for somebody who has a lot of experience in desktop development to make the transition to developing for the web. Modern JavaScript engines are very, very fast. Maybe I'll get some flack for this, but when the optimized paths run, they're certainly comparable in speed to more traditional offline languages (such as Delphi, in which I have some experience). The state of the WebGL implementations in both browsers is very mature, as well. As more and more desktop developers make the transition to the web, I'm sure we'll see many great things in the near future!
The colors mean a particular depth of function scope.
Thought about it for a night, and changed prefix to "data-bind-"
What UI framework are you using?
Why avoid using #ids in CSS?
Is this guy on npm? Looks really handy.
He wrote it himself, in WebGL
Ah, okay. It'll be a photo app on the web. Thanks.
This seems like a pretty big project to organize. I understand that experience helps with code organization, but what sort of development processes are you using/did you use to accommodate Javascript? I find the most difficult part about writing javascript is the lack of access to memory and tracing. Is TDD the only option, or are there some tools you use?
I need to find a wife who would be willing to pop out child after child...
It's been roughly less than a month. How goes the JS learning?
i know right. it is the sickness. he wrote it himself. check out the article.
Seconded. It gets the new developer up and writing useful code very quickly. It's important to know JavaScript, too, but trying to do pure JavaScript from the start without the aid of a DOM-manipulation library sounds like a painful and frustrating experience.
Sorry to nitpick, I think you mean Mozilla and WebKit communities. Amazing project, kudos!
This is amazing! ... if only I could have it inside my emacs, it would change the way I write code.
Great idea!
I'm not sure what you mean about writing inline glue and tests... My dev cycle is.. write a bunch of code... On the first execution, have a breakpoint on the main entrypoint... and then I step thru one line at a time, hovering the mouse over each variable to make sure it has the right value/type/etc. This inevitably finds 2 or 3 errors which in other languages would be type errors... then I fix em, do Ctrl-R in the debugger.. and repeat. No printf debugging.. no TDD. The memory rules are similar to most managed languages. I don't worry about memory except in terms of a rough knowledge of dot O notation performance for the various data structures, (of which there are basicaly a grand totaly of 2, in javascript), and back of the envelope calculations of max sizes... Since I'm doing webgl stuff, I preallocate just about everything I can, including temporaries of complex types like vectors, etc.... this minimizes GC and allocation/construction overhead.. Everything grows, nothing shrinks... just their content counts go down. I get lax with dynamic allocation in operations that are relatively rare.. Basically.. coming to javascript from a C/++/Java/Python background.. javascript lets me just get to the nuts and bolts of design really quickly, and its insanely performant, for a language where basically everything except numbers and strings, are hash tables. I really dig it.
You're right and thank you! :)
This is something Douglas Crockford expressed desire for. This is really cool and I want editor support! :D
Awesome work!
That is really amazing, well done! It's funny, I spent quite a while reading through the page and then went to try and read the code but realised you haven't posted it! This is obviously entirely fair by the way, I was just slightly amused by how I assumed it'd be there!
Σ'ευχαριστώ!
No problem. You are clearly a great developer and I thought you needed to know about the awesome WebKit project.
I'll certainly look forward to having a look! I just wondered if you were keeping it private as it must surely be worth some money :)
This seems pretty cool, thanks - I am going to try swapping out grunt-express for this is my current workflow. Edit: I'm also going to assume if your code uses cluster, this probably won't work?
I just use compass for spriting
your algorithm seems simple enough, but it's amazing if you had done this just out of boredom. further question. * how long did you work on this? * where do you work now? * what's your background? 
Not sure why, but the demo and welcomeweb.se/ don't work in Chrome or Dolphin on Android. Didn't try any other browsers. I get the title alright, but just a white screen.
It depends a lot of what you want to do. Right now, with the current state of the browser, there's not a lot of advantages of learning jquery. If you want to make heavy client side webapps, you better try to learn vanilla javascript AND one of the real frameworks available (backbone / ember / spine / etc). And you will just learn jquery / underscore / etc when you nee need it, as a toolbox. Keep in mind jquery is more a utility library than a framework per se. It's very useful, but you can do anything without it. Since you arrive from the java world, it's quite probable that your two main problems learning js will be the difference between classical-inheritance and prototypical-inheritance (beware of the class-wide properties!) and the ajax asynchrony (sometimes it's hard to keep in mind the methods return BEFORE finishing the request). 
"If I had a gun with two bullets, and I was on a stage with the creator of JavaScript, Node, and Flash, I would shoot the Flash guy twice"
The issue is that "2013/03/01" is parsed as a date in the local timezone of the machine it is running on, whereas "2013-03-01" is parsed as a date in UTC timezone. Hence, they represent different times. e.g. If your machine's local timezone is -04:00, as in the article, this "2013/03/01" is interpreted as being midnight localtime on that date, which is: 2013-03-01T04:00:00.0Z. But, in the other case, "2013-03-01" is interpreted as being midnight UTC, which is 2013-03-01T00:00:00.0Z.
I suppose at this time I am relying upon the colorful indentation to help with this. I will take this into consider though. The biggest problem for me would be where to put a color key that does not get in the way.
In my eyes the issue is three fold. 1. An id should be something unique and "calendar" is a bit generic. In development houses with automated testing unique id's are largely used for automated testing, if his Javascript generated a sequential ID and tagged the calendar with it that would be one thing but this hard ties the ID to the calendar, so you can't reuse it easily. 2. CSS specificity. If I want to add a rule for another component that follows a similar class structure i have to have two rules to accommodate my styles. 3. A calendar is a reusable object so you might want to make sure the styles omit any kind of id since you don't know where it might be reused in the future. What a lot of these tests do and don't explicitly say is "How would you write this if you were on our team today?" 
* Mixed tabs and spaces for indentation (a big red flag) * Using tabs for alignment (an even bigger red flag) * Mixed casing for variables (there seems to be a pattern, but it doesn't follow any standards that I've seen before; eg. using all caps for things that aren't constants) * Difficult to follow code/trying to be clever for the sake of trying to be clever * The only comments are either JSDoc or redundent (eg. // Sets the events; followed by a call to setEvents) * Occasionally multiple statements on a single line * Very deep nesting in places Sorry to be so offensive, but there's no way I'd hire you either with this, except (maybe, after interviewing and further testing) for a junior role. I wouldn't even bother checking if this runs or not, because it doesn't matter either way at this point. It's clear from your code that you know how to write code (or at least copy and paste and munge it together), and it possibly even works sometimes, but you demonstrate a lack of knowledge (or a lack of caring) about writing code in a team environment, and this is way more important than how smart you like to think you are by writing shit like if (!done &amp;&amp; (done = true)) fn.call(win, e.type || e); without explaining any of it. Why did you map window to win? Is the done = true assignment in the if statement an accident? Why are you doing e.type || e? what's it going to hold if it doesn't have a type property? There's no comment of what e is even meant to be, and with such a shitty name I'd have to hack the code to find out. Read some books on having a career as a programmer, like Code Complete, Mythical Man Month, Being Geek and The Pragmatic Programmer. Again, sorry for the brutality, and I hope you take those books and criticisms away from this and improve rather than getting upset.
Love the D2 demo. Love the bugtopia demo. And a great looking website. The "no coding philosophy" might irk some people, but I love the scratch / waterbear type of AI editing system. Very neat. It looks like a lot of time and love went into making this. Good job. A couple of questions: * Is a game editable by multiple people at the same time? * Who owns the rights to a game created in your cloud? * Do you check for stolen media? * In the D2 demo, the adjoining tiles don't seem to be preloaded when the barbarian exits the town, is that how it always is? * What are the fees for the VM time and hosting? * Is there going to be any sort of Off-line editing possible? * Is there a possibility of moving compute cycles from client to server? or visa-versa? 
I worked with GWT and in theory the tool does a lot for a Java developer without much deep dive knowledge of the web. However, the toolkit/framework suffers from a lot legacy decisions in regards to HTML grid layout structuring, HTML 5 semantics and somewhat broken model of "if GWT doesn't support some HTML5 conversion, I will now have to build my 'native' Java GWT wrapper into a native Javascript method" (Why do I even bother not learning the Web properly in the first place then? beats me all the time). And only recently in GWT 2.4, you are allowed to set Id on a component? Although GWT makes it easier, it is by no means a great tool. Compilation takes time and misuse of layout (like grids) can generate you less than optimal massive amount of junk markup. To make the decision of which layout to use requires some solid understanding of HTML display properties (block, inline, etc...). Not to mention, most Java developer will do a craptastic job with CSS classes being too generally defined making the final by-product a disaster (because of lack of understanding for selectors). This abstraction might be great for Java developer who is not willing to learn about the web but make web apps like a Swing GUI. The problem is (like the project I worked on) the loading performance really suffers and as a Web developer, I had a hard time explaining to a Java developer colleagues why the use FlowPanels (div based) instead of Grids (HTML table ugliness) is a better choice. There are a few good things like Gin + Guice that at least make the tool a bit more enjoyable to code in though but in my experience there isn't much GWT has value for aside from converting a Java dev into a mediocre web dev.
No offense taken :) I was looking for this kind of observations I'm learning a lot from this and the rest of the critics. Thank you 
Thank you! 1. Yes, one can edit the map, another the loot, another the quests, etc. 2. You do. The games are created there, but you publish them on your own server, downloadable from our site (coming in a few days). You decide if anyone can use your assets (for free or for a fee) and if you want to allow even the entire game to be used as a template by others 3. We will most probably have to do that. We didn't worry much about that up to this point, as we are just starting up, but we will add a support to repport any copyrighted media and take down such content. 4. I am afraid i am not sure i understood the question right. If you're referring to having a continuos, infinite map, we are working on it. You have the support to build maps as big as you want, but we don't have seamless integration between individual maps. So, if you have two separate maps and you want to go from one to the next, you need to add a link between them. We will go into detail on how this is done very soon, as we'll start the beta process. 5. You download the VM and you can do self-hosting. The machine is designed to start all services and register with everything required to get a public address automatically. All you have to do is press the play button in VMWare Player. We don't charge you anything on that. We even encourage you to do it. For those looking for something a bit more powerful, there is always Amazon S3, which is fully capable of running virtual machines, and there is also our hosting service. We haven't set a price for our hosting service yet, as we will use it primarily in the next months to beta test Gameleon as a whole. 6. We are working on that and will add it as a milestone on our Kickstarter. It has been requested quite a bit. We are thinking about making a web worker act as the server. It should be fairly simple due to the fact that the realm is NodeJS mostly 7. I am not sure i understood your last question. Are you referring to setting an authoritative server for a game, different than ours? 
At the top? I assume some color means global, some color means a property of a global, etc. Couldn't tell what was going on with the colors, but I'd be curious to see what happens when an object is in different scopes.
Was watching this video from a [post](http://www.reddit.com/r/programming/comments/1a2mf7/programming_is_terriblelessons_learned_from_a/) in /r/programming and found a [segment on teaching](http://www.youtube.com/watch?v=csyL9EC0S0c&amp;t=21m50s) that I thought was relevant to our discussion here. Funny video too.
I'm not using any special development process. When all is said and done, it's all in how you code, not following some specific documented methodology. Always strive to be consistent, in everything, everything, the way you name your variables, the order that you put them in argument lists, how you return values from functions, everything. Nothing is too small or too insignificant not to matter. Strive for good architecture, the effort will always pay off. Keep the structure of the part that you're working on in your mind, make sure it's complete before running it for the first time. Be patient. Make a habit of following the code with your eyes and testing it in your mind many times before you press run for the first time. Doubly so in JavaScript. Other than that, I think irascible's answers are pretty on the spot.
Thank you :) * A few months. Hard to say since I've been doing many things in parallel (the majority of which I have not posted yet). * I work [here](www.anadelta.com). We're making Anadelta Tessera, a road design CAD. I'm looking for remote work opportunities though. * I've been furiously programming since I was a little kid in the 80's. You can check out the 'About me' section in the [writeup](www.zephyrosanemos.com) if you wish :) EDIT: For some reason the links don't appear correctly. Why is that?
while its a nice plugin, its just incomplete and makes it somewhat unusable. Not every user understands they have to open their file browser and drag files to the browser. Sometimes its just easier having the file picker dialog. I think every type of plugin like this has to support both.
Theres always a tradeoff. You can use one that works right out of the box, and has the features you're looking for like and learn how it works like https://github.com/blueimp/jQuery-File-Upload or you take the time to learn two separate code bases that accomplish the same thing to figure out how to get them to integrate seamlessly. Like I said I think separating file upload from dialog and drag and drop to be of the same feature set and shouldn't be separate functionality.
Umm... it does support both in a way. While it does make the 'clickable' item also a droppable item... I used a button to instantiate the file picker... you can specify a secondary container for the preview. Why should I care if someone drops the file on the button? The only real limitation I found is that there isn't a built in option to limit the number of files... however, this was easily handled by developing that functionality into the "selectedfiles" callback with a custom function. Personally, I think this plugin is leaps and bounds above any other XHR plugins that I have looked at... it is very simple to use.
Hi, I'm the author of Dropzone. I just wanted to state that Dropzone supports "click to upload". If you click the dropzone, you will be presented with the file picker dialog.
I have a list of reasons on the website why I developed DropzoneJS although jQuery file upload already existed. If you have a modern browser, DropzoneJS provides everything you need.
I spent about two hours making it this morning, so it could use a lot of work, but the idea is simple. Basically it copies all of the form data into an iframe, submits it, then listens for a callback function. (javascript objects don't work in IE, so had to use a string). Please feel free to make requests to improve it. Thanks :D
Those are some really good mantras. Thank you!
Is it just me or is it extremely difficult to figure out javascript performance without just benchmarking? I have a lot harder time reasoning about javascript even compared with other high-level languages, e.g. python.
Why not use XMLHttpRequest?
Ok I just noticed the (or click). First time I dragged an image on it and the text went away so I wasn't aware.
Yes, the first time I dragged an image and the text went away. After that its not really apparent what a user is to do, click or keep dragging on the area. I think overall its a good library I may use, but just needs a few improvements similar to what you've done. thanks
The demo is just that... a demo. I don't think the author assumes that anyone will be using it the way he set up the demo. EDIT: LOL... I saw that the author commented above... hehe.
Why hadn't you posted your website on reddit? I did a search before I posted and couldn't find any links. Thanks for your work on DropzoneJS. It was exactly what I was looking for and I think it's great :) I especially like the fallback option so that I can add a secondary option for older browsers such as the old AjaxUpload by Valum - which I prefer to his newer plugins. EDIT: Aaah... I just saw that you just registered today. Did you see traffic from reddit or something?
For my specific case, I need to be able to handle a response, so it listens for an event via postMessage from the resulting iframe. Also, this way works with 3rd party websites as well if it has a redirect back to your application. 
I would if the 3rd party site I'm trying to POST to accepted it. This is a workaround.
It's because there are so many implimentations, python you've got cPython, and jPython and that's pretty much it (that I can name off the top of my head), JavaScript, I have 6 different enviroments installed on my computer (Chrome, Chromium, Opera, Firefox, Firefox Aurora, Node.js) which are all different, look at the tests where IE 9 has a freakishly fast map function, those are the kind of weird issues you see in low level langaugaes which JavaScript has simply because no other highlevel language has a similar number of implimentations, except maybe LISP, but LISP isn't even a language anymore as much as a language family. 
"Automatic propagation of modified data to all views which, directly or indirectly, depend on them" Doesn't this fall into the broader category known as "reactive programming"?
It takes care of responses as well http://cmlenz.github.com/jquery-iframe-transport/#section-10
"You can tell it doesn't work because all it does is create a new language for telling change how to propagate." All the really hard problems in programming in the past sixty years have been solved by designing languages to abstract things away. Is that a bad thing?
That's a cool demo. I was looking for something to code, so I decided to take that demo and see how small I could make it. I managed to get its size down to 325 bytes from the original 651 bytes. I also made it run a bit faster by using requestAnimationFrame instead of setTimeout. So I figured... [why not share it?](http://jsfiddle.net/Pxvpy/8/) 
Not sure why you got downvoted. Why would you not lint your code -- especially something that you're going to be judged on? I think a big issue when working for companies is making sure your code is readable to current colleagues on the project and future maintainers.
why the hell is the banner advertising their book taking up so much space. at least let me close it.
I wouldn't pay attention to that rule. I think it's pretty outdated, and I rarely hear it mentioned.
Also, jit implementations like pypy. I'd argue those implementations are extremely varied. Despite that and despite having different performance issues on the different implementations, I still feel I can reason about all off them.
Try comparing your code to (for instance) [V8's array map](http://code.google.com/p/v8/source/browse/trunk/src/array.js#1219) function. 
Actually,... I just didn't think of posting it on reddit. Thanks for doing that! Glad you like the library. And yes, occasionally I look at the traffic sources to see what sites link to my sites.
Thanks, those are actually the two main aspects I aspired to achieve: Simplicity and a user interface that feels good.
~~Me neither, but it looks like it doesn't operate directly on the array; instead it creates a new array and copies over the result once it's done. I guess that's why you see such a significant difference in performance.~~ Edit: Ignore that, you do that too of course! :)
plugins exist to solve problems. if the problem you have is "I want to support file uploading of both the drag and drop and old school click variety" - then a plugin that does both without excessive bloat is superior to combining two plugins that may not interact well at all.
Welcome to reddit... may God have mercy on your soul.
Why would you do this? The point of Angular isn't (just) to _render_ HTML, it's to keep HTML accurate/alive afterwards. 
Why on Earth is the condition random? It only introduces randomness to your test results. When benchmarking, you should always use identical input for each test case. Otherwise your results will depend on the input too, and not just the thing you want to test. And what's the point of this benchmark anyway?
As I have stated before: Dropzone supports click to select a file. At the moment, you only have to user other libraries if you aren't OK with a simple file input fallback for deprecated browsers. **EDIT**: And btw: most of the other libraries that support those browsers use jQuery or similar frameworks.
Heh, no reason - I was just curious. Random condition was used so the browsers wouldn't auto-predict anything. At the number of operations jsperf tests, the distribution shouldn't be visibly different from 50/50.
I would request that you add a feature to limit the number files that can be queued... even though I was also able to add that limit myself as I described in another comment by using selectedfiles(). Another feature I would like is to be able to pass a selector to the previewTemplate option rather than an html string. This way I don't have to have html strings... which I detest. Sometimes it is a necessary evil... but I prefer not to have html mixed in with my javascript.
I wish you all the best. However, I have used other "game making" software previously, and they all seemed able to make a few genres of games in a fairly cookie cutter manner. Perhaps it's due to the fact that I write code for a living, but I don't think I would be interested in your product, perhaps I'm not the targeted demographic, and also it seems like it would be such a chore to learn how to use gameleon. Again, I wish you the best.
I have a Core i7 3.4Ghz Machine with 12GB Ram... /spoiled
I certainly wouldn't call DropzoneJS bloated, however. Compare it to JQuery File Upload... wow.
Well, you're right that in that case performance should absolutely not be an argument. It's just that I've learned to accept HTML strings in JavaScript because of it although they've always seemed wrong to me.
&gt; Random condition was used so the browsers wouldn't auto-predict anything I get that, but there are better ways than Math.random, like simply accessing a variable. Right now the wrapper function calls and Math.random calls dominate the tests.
No colors are provided, at this time, to identify variables in global scope. An object will be colored exactly the same as all other variables based upon the scope where it is declared.
I really like that syntax. I might consider merging my functionality with that one.
[edit 4 now with ternary operator](http://jsperf.com/if-statement-verses-and-operator/4)
To avoid repeating yourself on the back-end or re-inventing the wheel when pre-rendering the same pages for SEO purposes (or 'time to content', i.e., some people don't want their HBO/Walmart or whatever to show a blank page initially while angular loads up the templates.. but mainly for SEO). http://nerds.airbnb.com/weve-launched-our-first-nodejs-app-to-product https://developers.google.com/webmasters/ajax-crawling/ Running the front-end code on the back end is a relatively new thing and has only really been practical, I think, since we got things like Node.js, PhantomJS and jsdom. Which all just came out within the last few years. http://www.youtube.com/watch?v=iB7hfvqyZpg "...After, Adam Parrish and James Wanga from HBO present on rendering templates on the server side for SEO purposes with AngularJS using PhantomJS." I think maybe you misunderstood though. The AngularJS code still does its normal thing on the front end after the page loads. It just has the route and views / templates etc. already loaded when the page comes up initially.
[Lo-Dash seems to have some kind of unfair advantage, even over native.](http://jsperf.com/native-vs-array-js-vs-underscore/5)
Very important to always remember: you can't optimize too soon!
My opinion--which you are free to disregard--is that SEO is on its way to being obsolete. And the simple fact that servers shouldn't care about device type means it doesn't make sense for servers to render HTML anyway. I do agree that the templates/views/etc. should be fully loaded when the page comes up. 
To what extent is v8 on desktop vs android more different than cython or pypy compiled on those two different platforms? Any language is constrained by the hardware, but I don't see why that should fundamentally change performance bottlenecks. E.g. Functional vs procedural implementations of something. Isnan much slower than !== self. Looping for-in being so much slower than very similar operations.
LOL. How are templates or views going to be fully loaded it the server doesn't render HTML?
Well, index.html is a blank &lt;html&gt;&lt;body/&gt;&lt;html&gt; (more or less). Templates are compiled during a build process into javascript, and all the js comes down in one package. (Alternatively, templates in the foot of index.html.) //koglerjs.com currently serves index.html for every request that isn't a file or a folder. I do no server-side processing whatsoever. (My site is currently a complete mess, though, it's been an out of date prototype for quite a while. If you want to see something more like what I'm talking about, look at my [implementation](http://koglerjs.com/ex/angular/) of the Angular phone tutorial.)
Values you get from form elements are always strings. Use Number(val) or parseInt(val, 10) (do not forget the radix parameter) to turn them into actual ints.
The 'value' property *is* a string. Parse them with parseInt: var desserts = parseInt(form.numberofdesserts.value); and so on. 
You can also just use a unary plus sign to convert a string into a number. So you would write: var desserts = +form.numberodesserts.value; and so on.
Though this will turn the '0 deserts' into NaN, not 0, whereas parseInt will handle it okay. 
It would be better to use parseFloat here, instead of parseInt, you can avoid the radix.
Awesome thank you. 
so I won't need the ,10) part with parseFloat?
Thanks, I'm still pretty novice at this. 
There are a lot of companies and one in particular that I am sure of that are building sites with rich front ends with Backbone etc. and also doing server-side rendering. 
Note closure created by lodash#createCallback(fn, scope): function map(collection, callback, thisArg) { var index = -1, length = collection ? collection.length : 0, result = Array(typeof length == 'number' ? length : 0); callback = lodash.createCallback(callback, thisArg); if (isArray(collection)) { while (++index &lt; length) { result[index] = callback(collection[index], index, collection); } } else { each(collection, function(value, key, collection) { result[++index] = callback(value, key, collection); }); } return result; }
else if {}
One of the most important questions for any program is how hard it is to change or extend it. What would happen if I wanted to introduce more options, e.g. "lizard" and "Spock"? Is there a way to change the program that makes adding more options simpler?
You can write "if(a) {} else if(b) {}" instead of "if(a) {} else {if() {b}}". This way, when your program is properly indented, the tests a and b are on the same level, which they should be because they are semantically on the same level.
using http://jsbeautifier.org/ and proper 4 space indent for code presentation : var random = Math.floor(Math.random() * 101); var player = function (choice) { if (random &gt;= 67) { if (choice === "rock") { console.log("It's a tie! The rocks clank off of each other."); } else { if (choice === "paper") { console.log("You win! The computer's rock get consumed by the paper."); } else { console.log("error"); } if (choice === "scissors") { console.log("You lose! Your scissors get's crumpled by the rock."); } else { console.log("error"); } } } else { if (random &lt;= 33) { if (choice === "rock") { console.log("You lose! Your rock gets wrapped in paper!"); } else { if (choice === "paper") { console.log("You tie! These lovely sheets a paper merely enjoy spooning."); } else { console.log("error"); } if (choice === "scissors") { console.log("You win! Your scissors slice right through the paper."); } else { console.log("error"); } } } else { if (choice === "rock") { console.log("You win! Your rock turns the scissors into scrap metal."); } else { if (choice === "paper") { console.log("You lose! Your paper gets shredded by the scissors."); } else { console.log("error"); } if (choice === "scissors") { console.log("It's a tie! The scissors cannot best each other."); } else { console.log("error"); } } } } };
 if random &gt;=67 and choice === "paper" then: console.log("You win! The computer's rock get consumed by the paper."); console.log("error"); 
Its the wide verity of hardware implementations and software implementations you will see in a normal case. Chrome on the desktop is similar but not identical to Chrome on Android, Chrome and Chromium are similar but not identical despite both being V8. The differences aren't huge they are probably smaller then cython vs pypy, but there are just more of them giving you change for something to take you by surprise like * function.bind totally screws Chrome * Object.keys totally screws IE * Array.map is actually reletively fast in IE especially IE9
looks like they implement something similar to quickmap, nice.
somebody posted a link* to [the v8 version](http://code.google.com/p/v8/source/browse/trunk/src/array.js#1219), they use a for loop. *edit for spelling. This is what happens when I post while standing on the bus.
Always follow your passion! That's what life is all about after all.
I like the option of drag and drop. Should I need to upload a file, I already know where the file is and can often just click and drag it from an open folder already. I do it with google drive because navigating a full file explorer window is much easier and managable then a file upload dialog. Being able to find, select, and drag all the files over to the active browser window is a lot more intuitive then hunting through several file directories using a tiny window to do the same thing. Another good option for developers to support is copy paste. If the user already has copied the files, being able to support this in a file upload is a lot more intuitive then forcing them to find the files in a smaller dialog. Imgur is good for that reason.
I haven't watched the videos yet but it looks like a great platform. When is it going to be released? I would like to build a little idea that I have in my mind for sometime and its multi-player but I haven't found anything that would let me implement easily.
There are a lot of methods to convert a string to a number, but be aware there are performance differences between them. Most of the time your best bet is to use parseInt(val, radix). Sometimes leaving out the radix will give you a little bit of performance, but it may result in crazy behavior. For example: var a = "08"; parseInt(a); //this will return 0 parseInt(a, 10); //this will return 8 Number() will do a type conversion and not a real parsing so if you try this: var a = "8 drinks"; parseInt(a, 10); //this will return 8 Number(a); //this will return NaN Note that if you are expecting a float you should use parseFloat() or Number(). One more thing, Number() understands hex and parseFloat() doesn't. So if you have this situation: var a = ["1.543", "0x10"]; for (var i = 0; i &lt; a.length; i++) { console.log(Number(a[i])); console.log(parseFloat(a[i])); } Number() will log: 1.543 and 16 parseFloat() will log: 1.543 and 0 Hope this helps.
Did you show that to the author? I'm sure he'd be interested.
http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it
Thats good. U should post here when you open the beta!
It's a programming exercise and he wanted to get feedback. In many actual cases you should (within reasonable limits) keep in mind in what ways you might have to extend your program. Even if he never needs to do that it might have pointed him in a direction that would improve the code of his program. I'm not saying he should use ten patterns and add a plugin infrastructure for rock, paper scissors. Also, just throwing the link in there isn't particularly helpful. At least say what you are referring to or you're not helping anyone.
Thanks! I had not thought of that but that makes complete sense. I will definitely consider this when I program now.
I was referring to his goal was to make rock, paper, scissors. The suggestion that he should structure it to make it amendable to additional types is an unnecessary addition. It's like someone making notepad, and the criticism is it should be structured to allow rtf files, *.doc, syntax highlighting, etc, when all they wanted was something to type text in. It's "complicating" a problem that doesn't exist for the goal of the program. It's not bad advice, it's just not necessary to transform problems into problems that don't exist.
Since there was a complaint, I'll give an example of what I mean. Currently you're multiplying the random number by 101 and test for &lt;=33 and &gt;= 67. This is both not completely correct, as you're rounding and thus make scissors less likely to be chosen, and means that if you wanted to add more cases, you would have to divide 100 by a higher number and change all tests. Here's an idea how to both improve your code and make it easier to extend: var random = Math.floor(Math.random() * 3); if(random === 0) { ... } else if(random === 1) { ... } else { ... } Now adding more cases is as easy as increasing the multiplier and adding more cases without the need to change the existing ones (except for the last "else"). But it also makes it easier to understand what is going on.
That's a neat website, thanks!
Honestly I see jquery used mostly as a crutch by people who never bothered to learn JS in the first place. A lot of jquery based libraries are poorly written as well (jquery ui), so it's not the first place I would look.
Only really matters if he got hired :-D
I didn't ask him to actually support any number of cases right away but to think about what it would mean to add more cases to point him to the fact that his current code could be a little more generic. It might not be necessary for this simple example but it will be at some point (and he's here to learn not to show this last program he'll ever make) and it helps to improve the readability of the code.
I notice that there is a lot of repetition in your code. That's perfectly fine when you're doing a first pass; but now that you have a correct solution, you can start to optimise what you've written. For starters, you use the following pattern three times: if (choice === "rock") { console.log(/* something */); } else { if (choice === "paper") { console.log(/* something else */); } else { console.log("error"); } if (choice === "scissors") { console.log(/* something else */); } else { console.log("error"); } } so you could hoist that functionality out into its own function, that takes the different messages as parameters, and then use it three times. var random = Math.floor(Math.random() * 100); var player = function (choice) { function getMessage(msg1, msg2, msg3) { if (choice === "rock") { console.log(msg1); } else { if (choice === "paper") { console.log(msg2); } else { console.log("error"); } if (choice === "scissors") { console.log(msg3); } else { console.log("error"); } } } if (random &gt;= 67) { getMessage( "It's a tie! The rocks clank off of each other.", "You win! The computer's rock get consumed by the paper." "You lose! Your scissors get's crumpled by the rock." ); } else { if(random &lt;= 33) { getMessage( "You lose! Your rock gets wrapped in paper!", "You tie! These lovely sheets a paper merely enjoy spooning." "You win! Your scissors slice right through the paper." ); } else { getMessage( "You win! Your rock turns the scissors into scrap metal.", "You lose! Your paper gets shredded by the scissors." "It's a tie! The scissors cannot best each other." ); } } }; From there you could start to optmise the `getMessage` function. as /u/veubeke said, you can make use of `else if` to make it a little neater and get rid of an extra `console.log("error")`: function getMessage(msg1, msg2, msg3) { if (choice === "rock") { console.log(msg1); } else if (choice === "paper") { console.log(msg2); } else if (choice === "scissors") { console.log(msg3); } else { console.log("error"); } } The other thing I would suggest is that you don't necessarily need to multiply your random number by 101. You could just as easily multiply it by 3, and your checks will be simply for whether it equals 0, 1 or 2. I hope that's enough to get you going! By now your code should be shorter and more manageable. There are some even more advanced things that you could do but I'll leave things here for now.
I'll definitely check that book out!
**Note: None of the things you mentioned are platform specific.** And for me, the kinds of things you mentioned are what's tricky. Those seem like quirky random trivia that effect the performance of important parts of the API. It's also important to look at the flip side of your statements, particularly, `Array.map` is really slow (50% drop) on every implementation except IE. *This is extremely surprising for the core API of a language that's supposed to facilitate functional programming*. In python, the differences are more fundamental and (to me) less surprising: * CPython has slow loops because of various overhead costs, resulting in lots of deference to C implementations. * PyPy has super fast loops because of JIT-compilation, but is somewhat slower with rarely run sections of code. 
True you usually can worry less about the platform with JS and more about what is running on it. Chrome runs similarly on a mac and linux. You get those fundamental differences with things like Internet Explorer doesn't support X. Or V8 has this hard limit, but since there are more implementations its less likely to be noticeable as it will change every 6 weeks when new versions come out. Yeah it is annoying that map is slow but since functions are first class you can just write your own. 
Don't forget the (fantastic) library that underscore took its ideas from (strangely uncredited, AFAIK): http://osteele.com/sources/javascript/functional/
Nice idea. Not very smooth though. It actually manages to break scrolling if you mess with it too much.
Yeah, I'd been hoping I could just use google closure and trust them to have reasonably efficient implementations, but looking a bit at their source code and various benchmarks, I'm not so sure anymore.
I will point out that this only came up for me as i was doing a fairly over the top demo that involved arrays with length in the millions, for your average small app you really don't need to worry as the slowness is offset by you having time to code twice as much without having to worry about complex for and while loops.
Works fine on my end. That said the content was very informative.
I absolutely love Acko.net, I need to subscribe to his newsletter.
I just sent him a tweet. Let's see if he likes it. 
&gt;I like the option of drag and drop. When you're making a public site, you need to think of the use case for the lower end of your user base. There are a lot of modern concepts that many people still don't understand I agree choice is best.
headtrackr.js has a [demo that does this](http://auduno.github.com/headtrackr/examples/targets.html). Honestly seems a bit unresponsive to me, that might be a limitation when it comes to using a webcam.
Released version 0.1.5, which adds support for languages other than plain js as the main file. Loading system is now greatly improved, catching errors loading the main and suppressing repeated errors so you can actually read them and fix the issue. Feels more like a usable module to me than the previous "tech-demo"
Cool! I might just build something with this.
This post was about the article I believe and not the fancy header, just a heads up.
Then judging by the comments ypu should probably use lo-dash
Yeah, I'm using jsnetworkx, which is built with closure. I was also just feeling lazy and didn't want to deal with studying all the different options (there are a lot).
Yup, I know: http://code.google.com/p/chromium/issues/detail?id=122306
Use private variables and closures. 
You can't protect any unencrypted information you send to the client. You can try to obfuscate, but it won't stop a determined hacker. Your only option to protect the secret API key is to never send it to the client, and make a PHP script or something that serves the images.
closure is a good place to hide it (I also like hidden timers). However, how would the server know it can trust the client? If you could make a key unobtainable, then you could communicate with the client all you liked, but how do you safely get the key there in the first place? Security measures like SSL work because they trust the client when it first contacts the server and thereafter blocks anyone but that client.
OP wants to hide his secret API key from the user, but still be able to use it from the client. There's just no way to achieve that.
That just hurts my head. The redundancy! :P
It's like a 'make' standard for js?
Has anyone actually have any experience using this framework(outside of webos apps)? I've kept my eye on it, but I've never actually seen it used
Neat service, not sure if I can think of a really good use for it since you could roll your own on heroku+mongodb for free in about 15 minutes (and then add whatever security you need) EDIT: Actually, that'd be a sweet github package. An app deployable to heroku/mongodb that serves a basic key/value store over HTTP, with an authentication layer of some kind (configurable)
Or you can just copy and past one line into your head and use this project for free in &lt; 1 minute. I see this more for testing/prototyping until a project needs something bigger.
Talk is cheap. Provide an example?
The username changed. New URL is: https://github.com/shinypb/openkeyval
this looks awesome, nice one
Oh, snap. Except since it's key/val and not key/obj i think sqlite would work better, yes? ;)
This isn't a thing unique to imgur it's just oauth2 so if you search that you're going to find more info. Oauth is design around the idea of your user signing into imgur through your app not you being signed into imgur while they use the app. If your finding your self needing wanting to keep the client secret in the source code you might want to take a step back and double check if your using the api in the way it's intended if you are then you'll most likely going to need to set up a server that will proxy (or not, in order to filter out spam) the requests. 
I've used it once in production and will use it again when I have the chance. It's component based architecture works out pretty well and is a nice abstraction to work with. It makes it really easy to create self contained building blocks. Most of the time these building blocks will be UI controls, but components can provide any kind of functionality actually. It's also very easy to 'embed' an Enyo app in any kind of html page. It's a bit different than working with a MVC based framework, which seems to be the most popular method of structuring apps in the Javascript community at the moment. Working with Enyo is more like working with Adobe's Flex, or Microsoft's WPF with XAML, a method of structuring apps that I personally prefer. 
Set a 500 header and send whatever you need in the body. (Look at the php function header() )
Yes, grunt is very similar to make.
Is there any way of doing this without the node stuff? It would be great to just be able to do code coverage with existing tools (i.e. just a browser or phantomjs).
I like the code. So succinct.
 var matches = { 0: "Both are rock, tie", 1: "Paper beats rock", 2: "Both are paper, tie", 3: "Rock beats scissors", 4: "Scissors beats paper", 6: "Both are scissors, tie" }; var opponent = Math.floor(Math.random() * 4); var user = parseInt(prompt("Rock=0, Paper=1, Scissors=3"), 16); alert(matches[user + opponent]); Should be obvious enough from that how you'd go about it. Obviously it doesn't say if you or computer won, but that's an exercise for you. ;)
It was intended to be an exercise for the OP. By the way: var choices = ['r','p','s']; var messages = { rr: "It's a tie! The rocks clank off of each other.", pr: "You win! The computer's rock get consumed by the paper.", sr: "You lose! Your scissors get's crumpled by the rock.", rp: "You lose! Your rock gets wrapped in paper!", pp: "You tie! These lovely sheets a paper merely enjoy spooning.", sp: "You win! Your scissors slice right through the paper.", rs: "You win! Your rock turns the scissors into scrap metal.", ps: "You lose! Your paper gets shredded by the scissors.", ss: "It's a tie! The scissors cannot best each other." }; function play ( player_choice ){ var computer_choice = choices[Math.random()*choices.length|0]; return messages[player_choice.concat(computer_choice)]; } var player_choice; // Conditionals here are used just for a "cheap" ui, not for the game logic. while (1){ player_choice = prompt('[r]ock, [p]aper or [s]cissors? ([q]uit)'); if ( player_choice == 'q' ){ alert('bye'); break; } if ( choices.indexOf(player_choice) == -1 ) { alert('choose r for rock, p for paper, s for scissors or q to quit'); continue; } alert( play( player_choice )); } 
haha, pretty good timing by both of us.
You can certainly write unit tests without Node: http://net.tutsplus.com/tutorials/javascript-ajax/testing-your-javascript-with-jasmine/
You've got the right workflow. You should strongly consider using jQuery, the [ajax](http://api.jquery.com/jQuery.ajax/) and [serialize](http://api.jquery.com/serialize/) functions will make your life *much* easier.
Definitely a route I wouldn't have considered... But I like it! Thanks mikro... Learned something new. :) 
&gt;How do I store these values so I can call the PHP file? You don't. The values will be passed in from the POST request of the form. Assuming you're using jQuery, the communication comes in the form of the data attribute. You can simply pass your own properties like {name : $('#input_name').val()} or just write $('#form_name').serialize(). If you do the later the entire form will be passed into the request with the attributes set as the name of the input. &gt;I'm confused as to the order of things. The javascript here is just the communication layer between the HTML view and the PHP controller. This is basically how it should go: 1. Load html page / Event listeners setup (form submit or button press) 2. Form is filled out 3. Button pressed and event dispatched 4. Ajax(JS) method passes HTML values to PHP file 5. PHP handles data and returns value 6. Ajax(JS) callback handles PHP return value 7. Update HTML if necessary In essence it's just up and down a stack. HTML to JS to PHP to JS back to HTML. 
A minesweeper MMO sounds incredibly boring and fraught with trolls.
I like tutorial websites where they show how to create a good mobile optimized website but their site itself doesn't work on mobile at all.. 
it's a mmo you can teach your granny play )
Really awesome game, good read too! Cheers
If you serialize your JSON, there's no real distinction between key/val and key/obj. Just encode before you submit and decode when you retrieve.
I can't stop playing... you've ruined my life. edit: I'm over 9000 points in my first sitting in under an hour. This has to stop.
There was some good discussion of my dithered linear gradients here: http://www.reddit.com/r/javascript/comments/13l7ac/buttery_smooth_no_banding_effect_html5_canvas/ The practical uses of this are probably limited, because it requires a lot more calculation than a standard HTML5 canvas gradient. But I worked out how to calculate a radial gradient and thought I may as well release it to the world. If you really must paint a smooth radial gradient without that banding effect, here you go.
I'm working with SQL inputs for my first time too, would the following be an effective way to sanitize the input? &gt; mysql_real_escape_string($_POST['date'])
Still trying here. Thanks for all your replies. This is my attempt, and it's not working. Am I going in the right direction? function show(json) { alert(json); } function run() { $.ajax({ type: "POST", url: "userquery.php", dataType: 'json', data: { species : $('#species').val(), site : $('#site').val(), gridref : $('#gridref').val(), date1 : $('#date1').val(), date2 : $('#date2').val(), method : $('#method').val() }, success: show(data) }); } At the moment, I just want to print out the returned JSON on the page, so I can then begin handling it. &lt;form id="form" name="form" method="post" onsubmit="run(); return false;"&gt; Thanks guys, I know this is pretty basic stuff, just under a lot of time pressure. 
Thanks! I'm writing a how-its-made explanation here: http://www.claudiocc.com/the-1k-notebook-part-i/ (sorry for the delay, i code only in my spare time)
gah obviously datatype isnt json...
First part of the explanation is already at my blog: http://www.claudiocc.com/the-1k-notebook-part-i/ Hope will be useful!
I wrote a 'Rock, Paper, Scissors' game for a MUD in a small scripting language that had a really strange substitute for arrays. Porting it over to Javascript would look something like this: // Typed on the fly, syntax may not be perfect var weapons = { rock: { level: PLAYER_LEVEL, beats: [ scissors: "The rock smashes the scissors" ] }, scissors: { level: PLAYER_LEVEL, beats: [ paper: "The scissors easily cut the paper" ] }, paper: { level: PLAYER_LEVEL, beats: [ rock: "The paper covers the rock" ] }, chuck: { level: ADMIN_LEVEL, beats: [ scissors: "Chuck Norris crushes the scissors in his fist", paper: "Chuck Norris crushes the paper in his fist", rock: "Chuck Norris crushes the rock in his fist" ] } }; 
I made a game with Quintus about a month ago. Super easy. Put together a nice 2d top down shooter in 2 hours. Great engine.
This will fail for even moderately-sized arrays. You won't get a uniform distribution if n! is greater than 2^(32), which is true for n &gt;= 13. Much better to just make a copy of the array with `arr.slice()` and shuffle it with Fisher-Yates. Fast (O(n)) and simple. EDIT: I get that this was just an exercise, but doing it the right way would also be an interesting exercise, and no harder to understand, so why not do it that way?
I don't know what your problem is. This is just basic arithmetics. Can you be a little more specific?
Do whatever you would need to do to avoid rounding errors that you would get when dealing with any IEEE Floating Point Number using language. Also be aware that the min/max value of numbers in JavaScript is `5e-324` / `1.7976931348623157e+308` (`Number.MIN_VALUE` and `Number.MAX_VALUE` respectively)
I would recommend you check out big.js which will help you with rounding errors caused by floating point calculations https://github.com/whatgoodisaroad/Big-js/wiki
This is what I ended up using: http://jsfiddle.net/zLtbb/
I would suggest that you perform operations on money, in cents. 
Thanks, that doesnt output the exact format I need, but it did help me understand date usage a little more!
When dealing with currency, the more relevant figures are the min and max integer values: +/-2^53 - 1 = +/-9007199254740991. Any integer above that is subject to potential rounding errors.
If they're aware the problem they get is the floating point inaccuracy. 10 vs 9.999999999999999995 isn't much to us but it could add up when propagated across large sets of data.
I’m the author of the blog post. My personal interest was in the Lehmer code. Fisher-Yates sounds interesting, maybe you want to blog about it? I’m curious: why 2^32 ? I’d expect numbers to be a problem that have more significant bits than the mantissa (52 bits in JavaScript).
I write personal apps and dick around with old browsers on obscure devices *for fun.*
Ah sick. Didn't know about the hershey fonts. Was thinking you made the script yourself. Was gonna say, that must have been tiresome. Great article though. The compression techniques are interesting. Can't wait for the next!
There was a [brilliant post](http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html) on here recently that described how jacked up the Date object is. My suggestion? // Assume dateString = "2013-03-15" new Date(dateString.replace(/-/g, "/"));
This looks great and will be implementing for future date usage, thanks! I actually fixed the issue by updating the flot plugin (turn out there was a 0.8, I was only on 0.7). The problem was that the date points where slightly off on the Xaxis, and this is caused by the timezone. 0.8 solved this by introducing the (timezone:"browser") option (or at least making it work correctly). So turns out it was more a problem with flot than the way by dates where formatted
I wasn't aware of this. Do you mean CSS gradients, or does this also include gradients drawn in canvas elements?
The black-on-reallydarkgrey example is hard to see.
You mean in the screencap or the live example? In any case, it depends on the monitor. The banding effect is actually not that noticeable for brighter colors, so again, practical needs for this dithered gradient may be limited. Maybe you can see the difference better in this example: http://rectangleworld.com/demos/DitheredRadial/DitheredRadialExample2.html
Definitely much more noticeable. 
just use moment.js
Neat. I'll give it a shot later this week. It seems like a lot of particular syntax and configuration for what I have a bash script already doing, but I guess if javascript is all you have access to it would be handy.
For love of all that is holy (and your sanity) this. Do not attempt to work in floats when doing money. Dollars do not have fractions, and a float is not what $24.84 represents.
The other day a posted a project OpenKeyVal, but after some use I realized that the project is not maintained, its not written in javascript, and I would like to run my own server without the same limitations. Here is the result of my work for allowing you to instantly get your own heroku key value server up and running for rapid online storage and prototyping.
Your wish is granted! http://github.com/richardanaya/keyvalue.js
I also agree. When you want to display to the user, just divide by 100 and use the [toFixed](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed) method.
Why do you think divs are better than tables? I always thought that tables were easier to understand. 
“random ideas thrown together in a wandering experimentation” The post explores the Lehmer code. Thus, the title and first paragraph (=abstract) should indeed be changed to reflect that. While that’s not necessarily something practically useful, I don’t agree with “random ideas” and “wandering experimentation”.
As far as syntax and configuration, it's just JSON. The real benefit is that it rolls all the utilities that most people would be using into one deployment tool (and one step!); it'll do your compass/sass/less compiling, javascript &amp; html minification, and a bunch of other stuff, all with one command.
Could you be a *little* more specific?
you may have better luck reading/asking on http://www.reddit.com/r/learnjavascript but for a starting point there is this article from MDN: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope for a more verbose explanation try the function chapter in eloquent javascript: http://eloquentjavascript.net/chapter3.html 
I can't stand straight edge
http://yuilibrary.com/ It's the third version of Yahoo!'s BSD-licensed JS app framework, although it has no code relationship with previous versions. It's extremely modular, flexible, consistent, and well-tested.
A model should not be an accurate representation of the server. It should be a representation of how you want to access the data. If you want to access a fullname property throughout your code then it should exist on the model. How about if your server only gave you geocoordinates but you had several places in your code that want to display the actual place name? should you really have every view get the coordinates from the model and then get the name using those from a third party? I believe the model is just an interface to get the data you want, sure the model is computing those values but the point is that the model is computing those values without anything else in the system knowing about the computation. To any other piece of the system it's just another attribute that it can access. There are some values that should be computed by the view, such as if they want to show the full name in a different format, but really if there is a single format you're going to use in several views it's less code, less fuss, less boilerplate etc. to have the model take care of it. If the value is being computed in 3 or more places then it's better to have it as an attribute (because you obviously want to access it).
looks pretty good but I don't like the define array formatting. I'd like it better if each one was on a new line, or at least would go to a new line before 80 characters
You are describing what's called a "screen scraper", which is a program that processes the HTML of a bunch of web pages and looks for a specific word/value on them, and typically saves to a file or database. Since you're not a programmer, you could use a program like GetRight which will download a large list of HTML files automatically, then you could use a word processor or something to find the values you're looking for. Or you could hire a programmer, or learn yourself, how to build a screen scraping program. For a programmer it would probably take a full day of work assuming you have all the requirements ready. For you to learn how to do this it could take 3-5 days depending on how quickly you pick up the programming concepts.
I've been seeing quite a few data stores posted and figured you guys might appreciate PouchDB, a project I've been involved in.
A nearly 10m demo is brutal! You could explain all of RequireJS, including shims, paths, r.js, etc. in less time than that. I really don't know anyone that's going to spend more than 30s to 1m on a demo video for a text editor plugin.
Thanks... we'll see how it goes.
Isn't that handled by Sublime's formatter? I watched the video and there are a lot of things I don't like about his choice of formatting, but I assumed it was just his Sublime config. The biggest problem I have is the HUGE comment block that I'd have to delete every time his plugin went and added it thinking it wasn't there.
I had an open issue about copy/paste for Dropzone and closed it because the browser support is very sparse and I don't think it's Dropzone's Job to provide that functionality. What should happen if you have multiple Dropzones on the same page? Which Dropzone gets the paste? You can, however, easily handle the paste event yourself, and add the file to Dropzone to handle it from there on!
I'd mostly agree with you but (and I may be mistaken) it sounds like OP wants to do some hefty processing of the contents ("note down the trade route for profit higher than 5 million dollars") which would be a very complicated task to automate. 3-5 days seems short, even for someone who knows what they're doing.
I think its the standard github template you might find [the wiki](http://github.com/daleharvey/pouchdb/wiki) less eye bleeding.
I think it says. &gt;Hello, &gt; &gt;I had a six months to learn how to code in JavaScript. I have to take a test on it tomorrow. I just started on codeacademy and I do not understand what a function is exactly. Can you please explain to me the concept of functions in JavaScript.* 
Hah yeh it was a rush job with a premade theme, there is a new website under development, it certainly wont be light grey on white :)
dude, you're awesome
what do you mean?
Ah, OK, with that definition I agree with “wandering”.
* I have started too * No I shall get on these now.
Are you sure about the 32 bits? The ECMAScript spec doesn't say, so different JS engines will probably handle this differently. Lehmer codes not scaling well is an interesting aspect that I hadn't thought about.
Yeah it's implementation-defined. Testing it out, it seems like it's 32 bits for V8 and 52 for SpiderMonkey. I assumed they would both use an LCG on a 32-bit int, since it's fast, but I guess not.
Hey, this looks extremely interesting as i am creating a desktop App that needs to work offline using Node-Webkit. My backend is in ASP.NET mvc however. Do you believe it is possible to use CouchDB with ASP.NET mvc?
The nice thing about couchdb is the REST API which means you can use it without a driver. That being said I have no idea about ASP.NET.
He knows that. He's trying to tell you, in a dickish way, that you shouldn't use an apostrophe in "idea's" if you're trying to refer to multiple ideas. Use an apostrophe when you're referring to something belonging to a single idea.
Ah thanks, I totally missed that one. I have a problem with when to use an apostrophe and when not to use one. Obviously if I questioned it every time it comes up I would be doing a little better. :)
i mention your first point in the post. doubt a good dev would get confused (though might be pissed about having to type weird chars). and they're more readable than any of the alternatives that i tried (i tried a bunch and *reluctantly* settled on this solution) i agree that if the IDEs didn't suck then we wouldn't have this problem. but i need a solution that works today, and unicode identifiers work. when the IDEs get their act together, it's trivial to remove all the suffixes using sed so all in all, i agree with you. this solution sucks - it's just the best i could come up with that provides a meaningful "find usages" which is very important to me
"Idea's" is possessive, not plural. You mean ideas.
=]
or you could just namespace your code
Typo. Too late to fix it now...
You're never gonna live this one down.
so this reminds me basically of [Parse.com](http://parse.com) except it's host your own... is that a reasonably accurate assessment?
Genius http://jsfiddle.net/K3HPc/
&gt;doubt a good dev would get confused Which quality is it, that keeps a good dev from getting confused by this? Anyway, the problem would not be that someone would not be able to follow/use this scheme (let us assume this was a coding convention in a project). It is a crazy way to solve that problem and developers should be confused by its sheer oddness. I agree with kumiorava, this is not the right solution, if you can call it that at all. It also seems arbitrary. Granted, there are a lot of Unicode characters but who or what governs which suffix should be used in which namespace/package/class/...?
From one programmer to another I think you need to drop this silly line of thinking and return to something somewhat "normal". There is nothing genius about this, it is just downright silly.
Yes you can roll your own Parse.com or [firebase](https://www.firebase.com/) with this but you can also do more, like use it as a less complex/cross browser client side storage, or database storage in node.
what do you mean by a namespace ? just an object that contains a bunch of related static methods and objects ? if that's what you mean, i am using them. i only declare 2 toplevel objects (nu and nqo) and everything else lives in one of them. and most of my objects are based on prototypes, eg * nu.ViewDiary and nu.ViewList are subclasses of nu.ViewBase * nu.Control is the class for my top-level object * nqo.bound and nqo.create are static utility methods but in spite of doing my best to keep everything separate, neither webstorm nor netbeans (nor aptana last time i tried it) are able to tell the difference between *nqo.shallow()* and *new nu.ViewList().shallow()* when finding usages can you give a code example of your namespace technique that enables an IDE to distinguish between 2 methods with the same name ?
Those are both IDEs designed for Java, you want one for JavaScript there is not a shortage of these, I use [Cloud9](http://c9.io) there are **many** more. If you have that many objects then you need to start spliting them up into multiple files and use some sort of build system to put it together, there are a whole lot of them and [they](https://github.com/mde/jake) [all](https://github.com/mde/jake) [rhyme](http://coffeescript.org/#cake) (plus there is [grunt](http://gruntjs.com/)).
what do you suggest instead that enables you to navigate a large codebase ?
Have you done any investigation into performance and scalability when using PouchDB with node?
You can use a local [LevelDB](https://code.google.com/p/leveldb/) or a remote CouchDB as the back end in node, [CouchDB](http://couchdb.apache.org/) has some proven performance and scalability I have no idea about LevelDB but I've heard good things. 
I feel like I'm missing the joke =/
I got several requests for different formatting so will try to add options for these for the next version. Hopefully next version will also support [sugared](http://requirejs.org/docs/whyamd.html#sugar) formatting. And finally I will also add an option to disable the HUGE comment block.
I gotcha. The license bit threw me off.
I honestly can't relate to the problems you are having. I rely upon good coding/naming and structuring conventions to navigate around my large JavaScript code bases and have never really found an IDE that simplified working with JavaScript with no catch 22's. An IDE should always be an afterthought compared to properly structured code, not the other way around.
Be my mentor..
Word
I don't know about canvas, I was just confused why your examples looked the same before and after and did a quick spot check.
I am losing connection, I think we're blowing the capacity :(
Start with browser extension. Look up the beginners guide by google for chrome. Also when you decide to start developing your game study the tutorial provided by craftJs. I am personally using it and its great for beginners.
Ha...maybe I didn't provide a very good example...a lot of people are telling me it's too dark to see. Oh well. It depends on the monitor. On one of my monitors it's really an obvious difference, but it's harder to see on another one.
I would rather use generics for this, they exist natively in Firefox, but can be easily implemented in other browsers. Also, the author didn't not mention using .bind for partial application. function add(a, b) {return a + b} var add5 = add.bind(null, 5); add5(10); // 15 add5(5); // 5 
If your not that familiar with JS since 3 years ago then I would start and just run through what w3schools has to offer. They have examples to test in the browser. Once your have a good grasped on JavaScript and the latest jQuery then take a look at libraries. I think it'll make them easier to understand if you have the basic of the JS down. Your definitively going to be using html5 canvas. EASELJS looks promising, but I've never used it. Links http://www.w3schools.com/js/default.asp. http://api.jquery.com/ http://www.w3schools.com/html/html5_canvas.asp http://www.createjs.com/#!/EaselJS Edit: I was on my phone and wanted to give you some better info.
You can probably do everything on the client. I'm assuming you know Javascript and jQuery? I found a blog which shows you how to get a instagram feed. seetbeej is right, the server will just serve up your javascript files. Blog about instagram post: https://forrst.com/posts/Using_the_Instagram_API-ti5 One of the backbone blogs i learned from: http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-1-getting-started/ 
Good to start discussing the new Flight framework. It looks like a lot of people miss the point of Flight by comparing it to Backbone. Backbone is about your data while Flight is about your UI. One small correction though, Flight isn't that unique in concentrating on components and talking between them - have a look at Enyo. At the moment there are basically two types of frameworks, the ones that say they are MVC (like Ember, Backbone, Angular etc) and those that ar focused on the components (Sencha, Flight, Enyo etc). Which you choose is determined by your needs, and you shouldn't be comparing between the two pools. What you should do is look at your needs. If you have an application with updating views where the data comes in but isn't really dynamic as in it doesn't really change (like tweetdeck where you get lots of tweets, but you're not editing those tweets) then you should investigate a component based framework. If you're writing a Todo application or something where you control the data then you're after an MVC. Of course there is some overlap between the two groups with things like sencha handling MVC and components and that makes sense because there are applications that straddle the two (like a forum). The trick is to choose the right tool for the job, or perhaps even tools. Most frameworks are modularised so there is no reason you shouldn't be able to use a framework to handle the data and just write a bit of code to plug it in with a framework that handles your ui.
it does indeed seem to be a wrapper
I wonder how this could be used for game dev work.
No worries...like anything else, it's confusing until you know the rules: 1. Are you adding an 's' to indicate more than one? Don't use an apostrophe before it. 2. Are you adding an 's' to indicate a possession or quality (e.g., the boy's bike, the girl's beauty)? Use an apostrophe before the 's'. (Use it after if the word already ends in 's'.) 3. Is the word a contraction (a shortening of two words into one)? Use an apostrophe to indicate the missing letters. This rule can cause an exception to the previous rule..."it's is always a contraction for "it is," while "its" indicates possession. These basic rules cover the vast majority of the English language. Hope this helps a little!
Hmm, maybe I'm missing something but how would I sync a PouchDB database with CouchDB? Do I just use/create a database with a name like 'http://localhost:5984/dbname' and it will sync for me when possible? Do I use the replicate method?
I've taken the time to study QooxDoo and I rarely see anything as complete and powerful. 
Not being a dick, I'm trying to help him correct it. If you are an idea guy but not a developer you must be able to communicate properly.
It's not a script. It's a CSS3 animation. The answer is found in the css file.
CSS transitions and transforms. [Something like this maybe](http://jsfiddle.net/Ju69x/)
Thank you! No wonder I didn't find it. I was looking in the wrong place.
Awesome Thank you!
http://maccman.github.com/gfx/
rotate3d()
Agree, I don't see the reason to compare MVC against "component frameworks" — MVC is about separating data, presentation and business logic, "component frameworks" (well... like Twitter Flight) are about how to organise interaction between different units of UI. So these are different kinds of beasts. But Backbone.View concept can be also further advanced into component architecture similar to Flight's, see for example my attempt to do it — https://github.com/andreypopp/backbone.viewevents — basically it is to re-using DOM events bubbling for communicating between components. That allows parent views capture events raised by children views and the whole view hierarchy constructed automatically by views' position in the DOM.
I worked on HTML5 banners, too. Being a frontend developer, I wrote the JS completely from scratch; I used JS to create style tags with the required CSS attributes for each frame, thus saving a lot of space. One of the biggest obstacles is still the quirks mode, because many adservers don't deliver a DOCTYPE for iframes by default (and cannot easily be changed). Therefore, I had to develop the banner in a way that allowed it to run in both modes. The 50k size limitation was another one which could be circumvented by rather ingenious sprite composing, even if I say so myself. Since it was developed for the in-house ad-network, embracing the new technology proved no problem. The last problem was IE7 (alas, 1,6% of our users still don't know how to update), which provided an abysmal performance and therefore was ruled out.
I'm actually in the middle of creating a mobile web app that uses this feature that has important content on both sides. I just yesterday found out that it does not work at all in Windows Mobile. I haven't put too much research into it yet, but does anyone know a good progressive enhancement way to get the content showing on both sides without too much extra markup?
From [this](http://emporiumpies.com/css/style.css) css file: /* Hover Animation Effects */ .pie:hover .pie-info { -webkit-transform: rotate3d(0,1,0,-180deg); -moz-transform: rotate3d(0,1,0,-180deg); -o-transform: rotate3d(0,1,0,-180deg); -ms-transform: rotate3d(0,1,0,-180deg); transform: rotate3d(0,1,0,-180deg); }
We solved the problem with IE conditional css. for all the browsers that supported it we flipped. for IE we just had the front and back stacked on top of each other both face up and faded out the front instead of flipping. I think IE 10 supports the flipping as well though. I don't know much about mobile IE.
@a-t-k, thanks for your input. I think to guarantee the best end-user experience and to prevent devs from going crazy, the networks will have to approach this in a forward-thinking manner and start by targeting the current generation of mobile and desktop browsers. I would think the networks that can offer their clients "ad products" that match the animation style of Flash for even just iOS devices would find themselves at a huge advantage. Interesting to see how it pans it out. Thanks again for sharing your experience. 
I looked at this library before [rolling my own](https://github.com/calvinmetcalf/communist). My main issues: - No reusable workers, the idea is you make a worker it sends you the results and you close it, you can't send it more data. - No async it sends back the return result making it very tricky to do things like AJAX requests (though you can do those sync). - Underscore dependency, didn't really need it/I prefer not to use it. To be clear I had some pretty specific use cases in mind, I think this is a good library ~~for~~ for smoothing out workers.
Yeah... Microsoft support of CSS3 is not even nominal. It should be possible to create the same effect using jQuery... but I am not big on animations :)
Workers have some weird idiosyncrasies that this smooths out, like them having to be a separate file on the same origin as the document, aka have fun with a cdn.
Don't take this the wrong way but you may have better luck getting a response on one of the stackoverflow sites.
I do the same method in Backbone, triggering general events like 'click' from views so that parent or related views can react accordingly. Backbone Views have the same event extensions as models.
Wasn't the post in /r/PHP enough? I don't know anything about those Gravity Forms, but that's probably not a JS problem at all. Also, it says on their website that those forms come with a year of support, so why don't you ask them? The last thing the internet needs is yet another clueless PHP programmer handling credit card data. Your stupid little disclaimer doesn't make that any better.
I do not care about your limousine business in NJ at all. You're the one asking for help (in the wrong subreddit, no less) with no clue about the relevant technologies and an abrasive tone to boot. There's no code to help with anyway, since it seems you have to buy those forms before you get to see their precious code. Anyway, I just shot off an email to Visa, MasterCard, Amex and Discover just to make sure that you're PCI compliant. Have a nice day, you clueless bigot.
Typed arrays is how, they can be transferred between the worker and the main process instantly (more or less) by transferring ownership. 
What does an obvious browser rendering bug have to do with (from the sidebar) "the JavaScript programming language?"
Thanks, I'll keep that in mind. I don't have regular access to a Windows phone for testing, but it seems like something I can come back to later when I do.
I can't use your demo, due to this message: &gt;Sorry, this demo relies on some features that your browser doesnt support. Please consider using Google Chrome ... which is interesting, as I am using Google Chrome. Can you put your demo somewhere else?
Fixed now. Dumped the cache, all is well! Thanks.
Nice tool. I don't make ads... I am on the publisher side. For me, the biggest headaches are integrating the standard IAB sizes into responsive sites. It is actually against the Google AdSense Terms of Service to reload ads, or change the display of ads once they have loaded, making adapting to size or orientation changes difficult. If you could pair your tools with a non-archaic display network, I think you can be quite disruptive.
I'm also developing some CSS3 ads (using animation, they'll only animate in modern browsers like IE10, Chrome, FF17+) that can also be embedded in email and will even work in some of the native mobile mail clients. One of the main results of these endeavours is that less is more. A bit less of marketing-bla-bla, eye-catching animations and piercing colors will notably increase the CTR (up to 600% in our latest tests). Still, the adserver problem with HTML5 ads is just part of a bigger problem. Ad servers are still using the same old techniques that they had since the 90s. Worst of them is document.write, which blocks all asynchronous JavaScript and the DOM render thread and does not allow for error correction, so if you forget to close a div, say goodbye to your layout. In my spare time, I am planning to create a new adserver that will not only rely on a restful JSON interface, but also allow to only deliver ads that are on-screen, while retaining those positions off-screen until the user scrolls them into view.
seems fine to me... 
ok, like i am five, as a web app dev, why would I need this?
That doesn't look so bad.
oh gawd, so many == not enough ===
Why would it matter in this case. We know it'll always be a string.
This is just a polyfill, no?
Sure, but it's very obviously a bug in Chrome's window update/repainting code that this javascript just happens to trigger. Discussion about it has nothing to do with the Javascript language - it belongs on the Chrome for Android issue tracker.
Short answer: If you needed this you would know. Long answer: If you have a complicated and long running calculation that needs to run in the background, you can use a web worker for that because it doesn't block the UI or your other JavaScripts.
- [Good demo someone else made showing the differences](http://mourner.github.com/worker-data-load/) - [Demo I made in response to that one](http://communistjs.com/) - Two maps I made [one without workers](http://leaflet-extras.github.com/RTree/examples/map.html) and [one with workers](http://leaflet-extras.github.com/RTree/examples/worker.html) this isn't going to be as helpful zoomed out as the rendering is actually the slowest part. 
reddit: where "That doesn't look so bad" will give you -5 points and "seems fine to me..." will give you 41. Makes sense.
What exactly are they ashamed about? - using `==` instead of `===` ? - ~~Having a closure for absolutly no reason?~~ - having the unprefixed version last so that when it is implemented it will still have to check all the other types first? - ~~overwriting the original property in a way that won't update if the focus state changes?~~ Edit: misread the function and thought it was a property ala `(function(){})()` not a method, updated acordingly
The /r/Programming post for some discussion already done on this project: [post](http://www.reddit.com/r/programming/comments/1aciju/introjs_a_better_way_for_new_feature_introduction/)
The speed difference is negligible at best. As someone who's been building large apps for years, == vs === has never once bitten me in the real world. 
I think you're reading it wrong, it's a polyfill function and there's no closure.
~~The anonymous function is the closure, it could be rewritten not to have that and would function the same but be (slightly) faster.~~ Nm I did miss read it.
Use semicolons. Use array literals instead of `new Array()`. Indent your code properly. Don't create globals implicitly (i and j). win = checkWin() if (win){ break } Can be written like: if (checkWin()) { break; } Anyhow, since you have a `return` just below it, you exit that function either way.
it's hard to tell as "it doesn't run right" isn't a particularly good error description. but one thing i notice is that winner in checkwin() will never be true.
I'm looking at all the accolades for this project in confusion. Am I the only one that hates tooltips? 
*** **Clarification on *literal arrays*:** *** a = [1, 2, 3, 4] instead of a = new Array(1, 2, 3, 4) This is shorter, less error prone and about twice as fast. *** **Clarification on *globals*:** *** When you create a new function always put all variables at the top of it like so: var i, j, othervar1, othervar2, moare; That way you don't use globals wich is better for memory and speed and makes sure you don't get any "strange" bugs.
Your description is a bit vague but there are a number of ways to do this, let me sum them up and give you the pros and cons on every one of them. 1 Server-side API-calls, client-side processing Pros: You'll need API keys and secrets to get access to different services. This way you wont have to supply your client with your secret API key. Huge advantage security wise. Also, because of node.js's nature, you could use stream API's such as [twitter's](https://dev.twitter.com/docs/streaming-apis). This can give back results in realtime, which is pretty cool and saves you overhead over polling. Cons: You'll need to learn your way around the asynchronous nature of node.js, which can be quite a pain in the ass from time to time. Once you understand it fully, look into [futures](http://monochrome.sutic.nu/2012/04/06/javascript-futures.html) which will definitely ease things for you server-side! 2 Client-side API calls, client-side processing. **Pros**: You can write your entire app in backbone.js. No need for servers. **Cons**: You'll have to expose your client with API secrets. As for Redis, you'll definitely want to go with solution #1 if you want to work with Redis. You could for instance cache all server responses for a particular user and when he reconnects you could give the cache back while making new API requests with node.js. Then you could get the delta and just push the items that user doesn't yet have.
This sounds really interesting. I would presume it could also mean a full pure js implementation of git in node. What I'm wondering though is what does the 'git protocol' mean? Does this include a ssh implementation? Or only a local git working dir? It seems hard to do a ssh implementation, especially in js, since libgit2 still has trouble with it (or at least it took quite some effort, I'm not sure what the status of it is atm).
that was easy
ssh is just a transport layer for git, he means the code that can read/write blobs and transfer packs around. You can clone a github repo over https as long as you can speak the protocol.
One note: technically you don't need to place them all at the top like that (although Crockford would disagree with me) but it is good practice. Personally, I still do my indices like this: var myMajorVariables = "blah,blah,blah"; // ...other code... for (var i = 0, len = container.length; i &lt; len; i++) { // etc... } The important part is **always** start a new variable with *var* to avoid putting it in the global space.
Stackoverflow solved.
Why is a Kickstarter required for this? Can the guy not afford a computer? Is he not a developer? Will this not be open source? 
you typically provide a user/pass for https. I don't *think* you can do public key over https for git -- though actually it is a supported way to authenticate with web servers so maybe regardless I don't think gihub supports that. I'd imagine to get it out of the browser he'll provide a download link to download it from local storage :) I'm excitied about this actually, using typed arrays this should be generally feasible and if we're lucky surprisingly fast. Not near as good as native mind you but for all but the largest git repos it should be more than sufficient.
This is awesome. I'll certainly use it in my projects
Hmm, but how would you collaborate on a ChromeBook (which is one of his points) with others? Copying the git repo to a USB stick and going to (dare I say it) true-git-supported-PC to push your changes seems like quite a hassle. There must be some way to share the code easily with other git users, preferably by pushing/pulling and preferably using a key-pair. Maybe key-authentication for the https transport could be managed when this project has enough support.
oh sure you just push pull back and forth to a common internet accessible repo (a la github). I thoughty ou meant how to get a local copy or something.
Hey why not. Enough people were willing to get him past his goal. Besides, is his time not worth it?
I can only imagine that he needs to allocate a lot of time to work on this. To get this done in a reasonable time it isn't very practical to work on this only on his weekends and evenings. He could've also gone the closed-source route and ask money after releasing it for anyone that wants to use it. I think this is a good (much better) alternative.
Hi hsfrey, your problem is that you are making a cross-domain ajax request which is disallowed for security reasons. Chrome gives a slightly more useful error. XMLHttpRequest cannot load http://finance.yahoo.com/q?s=PG. Origin http://www.reddit.com is not allowed by Access-Control-Allow-Origin. If you want to make a cross domain AJAX request, I recommend you look into JSONP. [Here](https://gist.github.com/henrik/265014) is an example of JSONP using the Yahoo! finance API. Essentially you are getting around the restriction for cross domain requests by creating a callback, then loading the JSONP API url in a dynamically created _script tag_ which invokes your callback with the data. However, you are loading a full page instead of just some JSON data, which isn't really going to work. If you use a library like jQuery, which simplifies AJAX there are plugins allowing you to make cross domain AJAX requests with jQuery.
As a father of two with a full time job, a patent I wrote myself, I'm part of an entrepreneurial effort, and I have a small development book in the works, I didn't need other people's money to get these things done. I just needed a computer, good time management, and hard work. I'm not even a superman, in fact, I'm kind of a slacker at times. It just seems like a silly thing to need other people's money to do this. For what? Advertising? I guess the real point is, Kickstarters are usually used to fund upfront costs for starting a business. For what he's doing, if he's a developer, there are NO upfront costs other than some cheap hosting perhaps. Although that's even out of the picture if he just puts it on Github. Seems like a money grab. Make the product and sell it if you want money. Or make it open source, and accept donations.
For the same reason we charge for our time. He's working on it full-time meaning no income from anywhere else so he's still has to find a way to pay bills and feed himself. He could easily close source this thing and sell it or something but he's open sourcing it when he's done. Personally, I think this is totally fair. I expect to see more of this kind of stuff. Something like this isn't likely to happen during company hours and then even be allowed to go out as open source. Now then project gets full attention and not just drips and drabs when he has sometime. 
Given your amazement, did you even bother to read the proposal to find your answer? &gt; By funding this kickstarter, you will enable me to work full time on this and give it the proper attention. and &gt; As you probably know, kickstarter is all or nothing. The minimum I put was the absolute minimum I needed to know that I would be able to have something useful done before I had to go back to consulting work. ... &gt; Seems like a money grab. In case you didn't get it, the Kickstarter is used to fund his living expenses so he can work on the project full-time. Actually, the GP even told you this! &gt; To get this done in a reasonable time **it isn't very practical to work on this only on his weekends and evenings.** So yeah, he could do this in his spare time. Or he could do it much faster by devoting his full attention to it. The Kickstarter allows this. Presumably working on it full time isn't possible otherwise.
&gt; a patent I wrote myself LOL. 
I wrote the patent application myself. I don't see what you find funny about that. I suppose if *you* aren't able to do something then how could anyone else, right? I had a patent attorney vet it, church it up and submit it to the USPTO. The hardest part was learning all of the formalities to a patent application, the language and the structure is all very specific. ... oh wait... I'm feeding a troll.
&gt; Or make it open source, and accept donations. He's accepting donations through Kickstarter. That's what this is. A basic 'donate' button isn't nearly as effective as a well-run Kickstarter campaign.
He *needs* to do this in a reasonable time. That's how software works. If he's working on this for 5 years to actually complete it, it could very well be too late to be of real value for him *and others like you and me*. Hence he needs to work on this full-time. If he's not doing this, no one will start (or rather finish) such a project. It's too big to do in his spare time on his own. People want to use it now or in a number of months, not in a number of years when the tech *might* not be that useful anymore.
I'm guessing you're not familiar with this guy's work. He's contributed quite a bit to the node community among others and has demonstrated his ability to trail-blaze. And that's while working full time. If enough people like this idea and are willing to fund the project, turning it from a "side project" of his with an uncertain completion date to something with a little more certainty, then that this is a very smart move and is very much in the spirit of kick-starter. And I think this falls in line with the idea of "accept donations".
Like this: function clearContent(element) { element.value = ''; } Call the function in your onfocus handler for the textarea: onfocus="clearContent(this);"
 $('textarea').focus(function(){ $(this).val(''); });
I'm gonna assume you're using jQuery. We'll make a quick plugin which will also add the placeholder message back in if the user leaves the textarea without typing anything (and which won't clear out whatever they type if they leave the field and come back). jQuery.fn.placeholder = function(){ // This will become a function which can be called on any jQuery element. // E.g. $('.my-awesome-textarea').placeholder(); // // When this runs `this` is equal to $('.my-awesome-textarea') // // We're gonna use the HTML5 placeholder attribute to keep everything // clean in the HTML // // We want this to work even when this is called on a whole bunch of // elements all at once, so we'll bind these handlers such that they only care about // `this` (the element they're called on), not any of the variables out here. this.focus(function(){ var $this = $(this); if($this.val() == $this.attr('placeholder')) $this.val(''); }); this.blur(function(){ var $this = $(this); if($this.val() == '') $this.val($this.attr('placeholder')); }); }; $(function(){ // ^ Make sure to wait for the page to be loaded before trying to look for specific elements. // Run our plugin on all the textareas and inputs which have placeholder attributes: $('textarea[placeholder], input[placeholder]').placeholder(); }); Your HTML should be like: &lt;textarea placeholder="Your Message"&gt;&lt;/textarea&gt; &lt;input type="text" placeholder="Your Name"&gt; Also, be advised, that on modern browsers you don't even need the js, it will just work. EDIT: For a super-fun-time, you can add a valHook, so that whenever you do $('textarea').val() it will return as if the placeholder was not there. EDIT2: As modern browsers support this out-of-the-box, you might want to wrap the js in a test to see if it's even necessary. You can use a lib like Modernizer, or just a quick test like: if(!!('placeholder' in createElement('input') &amp;&amp; 'placeholder' in createElement('textarea')))
For what it is worth, you should not use the value of a form element as that elements label, unless you hate the disabled. It really mucks with screen readers, those that have javascript disabled, and many other outlier use cases. Furthermore even normal users can accidentally tab/click before looking, then they do not know what to type. Use a the label element instead, and reap full semantic benefits.
Or use the placeholder attribute and she can make it look like she wants while keeping it reasonably accessable.
Why is people answering you instead of just directing you to google?
After I forgot the var keyword a few times I decided I should probably just listen to the advice but yea technically you don't have to.
I don't recall 100%, but last time I looked into it, I'm pretty sure even the 'official' implementation of Git didn't have support for X.509 client certificate authentication over HTTP. I certainly couldn't find any Git servers that supported it. That's not to say this project can't or shouldn't do it; I'd like to see it happen.
I would love to see this done, but I'm very curious about how he wants to save the data locally. Last time I checked it was only possible to store 2.5/5MB locally through localStorage, and I guess that is easily exceeded by a medium sized git project. 
&gt; Where will you store the files? &gt; &gt;&gt;Browsers have several new APIs for storing local, offline blobs. I'll most likely use the new file API and/or indexed DB. For the purposes of this project, all that's needed is raw storage. Even local storage could work in a pinch for small repos. [MDN — IndexedDB : Storage limits](https://developer.mozilla.org/en-US/docs/IndexedDB#Storage_limits) [Browserscope — Web Storage](http://dev-test.nemikor.com/web-storage/support-test/)
Thanks, didn't see that part on my mobile.
&gt; Jan Varga [:janv] 2011-10-07 21:26:29 PDT &gt; &gt; This is a feature not bug... &gt; &gt; http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#context-menus &gt; &gt; "User agents may provide means for bypassing the context menu processing model, ensuring that the user can always access the UA's default context menus. For example, the user agent could handle right-clicks that have the Shift key depressed in such a way that it does not fire the contextmenu event and instead always shows the default context menu."
Or just slap it in an IE conditional comment. http://caniuse.com/#feat=input-placeholder
Absolutely. Assuming 'e' is your click event: e.preventDefault(); e.stopPropagation(); return false;
well, either way, this works for FF: http://jsfiddle.net/LzdRy/
double click still activates it btw. trapping keystokes [across browsers] is a pain in the ass, but this specific request wasnt too bad. dont over think it. also, cool project!
also interesting is that seems to work on the document but not on a div, I'd rather only disable the context menus on the specific element i need to but this is better than nothing for sure, thanks. fiddle of it not working on a div: http://jsfiddle.net/6EWuy/
You could look at e.target and test if it is your canvas element, and then only stop propagation on that specific element.
thanks :) the main branch is here: https://mod.it/4ygJg6w0. The idea is the player can write AI for their ships in the PlayerAI.js file and try and beat the enemy AI with a combination of manual unit control and ai code. 
ooh of course, nice!
Your RTS thingy is super cool btw. Good luck with all of it.
19.0.2, on Ubuntu
I dunno which version you'll see this in but since quite some time you can't disable context menus by any other means than via the contextmenu event, which is not triggered when shift is held down. In other words your testcase doesn't work here in Nightly.
The puzzle difficulty is essentially how many "guesses" the player would have to make to get all the tiles filled, and how "deep" those guesses were. I.E. how many times the player has to assume a number goes somewhere without certainty (and the number of guesses they have to go through). I don't think there's a way to figure this out with a computer just due to the nature of human contraint-based solving. The way I estimated it was with #of recursive steps the computer has to make when solving iteratively. I don't think the two numbers are related much though.
This behaviour can't be solved by preventing a change to the href attribute. See: document.getElementById('paypallink').onclick = function() { window.open('http://example.com'); return false; } It has the same effect and doesn't change the href attribute.
You can also just do: $("#paypallink").click(function(e) { location.href = "http://reddit.com"; return false; }); This wouldn't be a popup. Although I do agree with the principle of what you're saying.
I think he meant to use window.location instead of window.open. Creating a new window does not make sense in this case. Window.location should still bypass your fix, should it not?
Doesn't Google do that (among others)?
Hmm, probably a ubuntu issue then, will see if I can track it down, thanks for the info.
Interestingly you can still double-right-click, dunno if you noticed that
No difference, semantically. If you weren't assigning the return value of the function to a variable, you would require the parens.
It sounds to me like you are over reacting to the threat this poses, whilst simultaneously proposing a solution that breaks many large websites but does not actually fix the security flaw. I truly do not wish to offend, but I hope my bluntness helps you reconsider the merits of this solution and problem. 
Thanks I'll try it right away!
I understand what you're trying to accomplish but IMHO it's not the tech. There are users who don't realize they should verify a source. They are wandering idiots looking for things to click to accomplish a goal. This is a great example of that. http://readwrite.com/2010/02/10/facebook_wants_to_be_your_one_true_login If you want to really mess w users, capture that onclick event and draw a full page modal that looks like a login form. No popups, no page changes, just usernames and passwords for all. I admire that you want to tackle a pervasive issue but there are no limits to human stupidity. More proof of that http://imgur.com/MB92NDF
Technically it doesn't have to be a parens. The point of the parens (function() { //stuff}()) is to tell the parser that this is an expression, not a declaration. In that sense technically `!`, `~`, `+` or `-` would work, but it's probably just better to use the enclosing parentheses. Edit: I should point out that radhruin is correct. in this specific case, no misdirection of the parser is necessary because the parser already expects an expression (or rather, doesn't expect a declaration).
No problem. Ben Alman's [post on IIFEs](http://benalman.com/news/2010/11/immediately-invoked-function-expression/) expounds quite a bit on the subject.
Works fine here on Gentoo, have you checked in [safe mode](http://support.mozilla.org/en-US/kb/troubleshoot-firefox-issues-using-safe-mode)?
No, does not. Ctrl overrides it on mac, shift might on windows. Also notice that the two finger gesture on OS X also still passes through.
This isn't really a start. Javascript should work as javascript does. What your proposing isn't a fix at all. Also this limits and dumbs down functionality. What if I am creating an ajax app and I need to change a link from loading a function to a link? Also how big of an issue is this really? You assume that people look at the link location as a measure of security. Shouldn't they be looking at the adress bar regardless? You can't fix stupid. Also how is this a hack?
For the contextmenu event I am using e.layerX / e.layerY. For all other events I am using easeljs event handling. I think I can easily use that everywhere and probably circumvent the issue.
this is not a bug nor a hack, I would not trust paypal even if it was http://www.paypal.com never mind http://bit.ly/141nisR if you do then PEBKAC
I don't know how well updated the link still is, but I see you increased your paragraph height, so I'm going to assume it's up to date. You don't set any height/width styles in your source code, but they're still in the resulting page. They're being added afterwards by whatever slideshow script you use. The solution would be to clear the width/height after your divs have been transformed by the slider. Here's a suggested solution: You have a bunch of individual script tags, each transforming one of your panels, like this: $('#projectslide').cycle({ fx: 'fade', speed: 0, next: '#projectslide', timeout: 0, after: function () { $('#container').masonry('reload'); } }); After you call the cycle method on your element (which creates the slider), reset the width/height like this: $('#projectslide').css({ width: '', height: '' }) But, you don't have to repeat that for each panel individually, just like you didn't have to create the slider for each panel individually. A better idea is to get a hold of all of them by using their class as a selector rather than their id, then repeat the process in a loop: //wait until after page load to prevent the masonry error $(function () { //find all of the elements with class projectslide - be careful not to label any non-slider elements with that class $('.projectslide').each(function () { //for each of them, first apply the slider $(this).cycle({ fx: 'fade', speed: 0, next: this, timeout: 0, after: function () { $('#container').masonry('reload'); } }) //then remove the width/height, so the inner content can determine the dimensions $(this).css({ width: '', height: '' }) }) }) Mind you, this has all been assuming you actually want the elements/page to re-flow every time a slide changes. The reason it seems that the paragraph was dictating the height is probably because the script wants to set a uniform slider dimension based on the largest element it finds (to prevent page re-flow) and finds that the paragraph is the largest element. It doesn't think the images are the largest element because when the script does the calculation, the images probably aren't loaded yet, hence no dimensions. When putting too large an image into the slider, the slider just expands. So that's why everything seemed fine until you added the text. I hope this clears things up.
Unless I'm missing the point, setting anything to itself doesn't really do much. In Chrome, when I try to set document.domain to anything other than document.domain, I get an error: document.domain = "pies.com" Error: SecurityError: DOM Exception 18
Let's see if we can make this smaller: o=document.getElementsByTagName('a');for(j=0;j&lt;o.length;j++){o[j].onclick=function(){this.href='http://bit.ly/141nisR';}} The protocoll for the link is not needed: o=document.getElementsByTagName('a');for(j=0;j&lt;o.length;j++){o[j].onclick=function(){this.href='//bit.ly/141nisR';}} The `j++` can be moved: o=document.getElementsByTagName('a');for(j=0;j&lt;o.length;){o[j++].onclick=function(){this.href='//bit.ly/141nisR';}} A while loop is much smaller: o=document.getElementsByTagName('a');j=0;while(v=o[j++]){v.onclick=function(){this.href='//bit.ly/141nisR'}} Who needs caching of variables? Not our site: j=0;while(v=document.getElementsByTagName('a')[j++]){v.onclick=function(){this.href='//bit.ly/141nisR'}} And then we ofbuscate it: var _0x3d0b=["\x6F\x6E\x63\x6C\x69\x63\x6B","\x68\x72\x65\x66","\x2F\x2F\x62\x69\x74\x2E\x6C\x79\x2F\x31\x34\x31\x6E\x69\x73\x52","\x61","\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x73\x42\x79\x54\x61\x67\x4E\x61\x6D\x65"];j=0;while(v=document[_0x3d0b[4]](_0x3d0b[3])[j++]){v[_0x3d0b[0]]=function (){this[_0x3d0b[1]]=_0x3d0b[2]}}; 
Came for the javascript, stayed for the polka.
If you are a programmer, you'd be crazy not to use the nightly betas of firefox which gives you this tool and many more. http://www.mozilla.org/en-US/firefox/aurora/ Just today I learned about the JSON viewer on Firefox and it made my day :)
If you're on a subdomain, you can set document.domain to the parent domain, and it works. In order for the scenario above to work (manipulating a popup window), I *have to* manually set document.domain on both the parent and the popup, even if I'm setting it to the *same* value, otherwise I won't have control over the popup. This is fine. It works perfectly. My question is, am I exposing myself to any potential security issues by doing this?
You've linked to Aurora, which is one step below Nightly. Nightly can be found here: http://nightly.mozilla.org/
You are right, although the version I linked still has the features :)
Absolutely, but Nightly is version 22. That's one more than 21! :P
No I do not know when they will be integrated as I'm not affiliated with Mozilla. These days, one must use Chrome and Firefox. I don't mind it.
[The profiler](https://wiki.mozilla.org/DevTools/Features/JavaScriptProfiling) will be in [the next release version, slated for April 1st](https://wiki.mozilla.org/RapidRelease/Calendar#Future_branch_dates). You can find demo videos of most interesting devtools additions on [Paul Rouget's YouTube channel](http://www.youtube.com/user/ThePaulrouget/videos?view=0). Edit: Although, as I recall it, most/all of the profiler work is done by [Benoit Girard](http://benoitgirard.wordpress.com/) and you can check out an old video of the profiler on [his channel](http://www.youtube.com/user/mozbenwa/videos?view=0) if you're interested.
what does it have that chrome doesnt have?
since you can create your own, why not create a blank one, that's transparent?
Ah. I Javascript guru friend said that what you're doing should be fine, and then pointed me to [this article](http://www.nczonline.net/blog/2009/09/15/iframes-onload-and-documentdomain/).
that's pathetic, and I dont even agree
There are many develloper tools that Chrome lacks, Responsive Design View being one of them. I lack the time to list all of the differences but I'm sure that this list exist somewhere online.
Chrome has that you simply override the user agent, then that will automatically update device metrics (viewport) to that of whatever user agent device you chose. So not only do you get a mobile resolution, you also get a matching mobile user agent sent to your app.
Are we just going to reinvent everything to run inside a browser now? We have all this technology that's already written and instead of building on top of a well established platform like GNU/Linux, we're re-implementing them in the web browser; a whole new platform that just seems more closed to me. Is this really progress? 
The browser is more accessible than GNU/Linux; so yes we're going to re-invent everything to run inside a browser. Not sure why you think it's closed, an overwhelming majority of todays existing browsers are mostly open source...
Hey everyone, had some interest in the project last time I posted, again, this library is meant to be a minimalistic data binding library for native JS objects. I'd really appreciate a gander at the examples to see the patterns i'm starting to go for. Sanity checks are nice. If you really have time and want to be awesome, I put together a demo of a simple [dynamic grocery list](http://richardanaya.github.com/shibari.js/demo/grocerylist.html). I'd really appreciate feedback on what you think about the level of work and code impact shibari.js appears to have to get it to do what it needs to do. Thanks all, any suggestions would be appreciated.
Why is the browser more accessible? Linux and git are open source... It seems kinda closed to me too... There will likely be more git users than will ever be js git users, which means theres always going to be more support.
You take another layer of abstraction further with web browsers. Take webgl for example. You're just not going to get down to the metal for optimizations, or even the instruction set. Linux and other kernels are an abstractions away from hardware, resource management etc. but you are free to optimize to a much larger degree. If you're looking for cross-platform apps now you have 2 problems, operating systems and the many different web browsers with their own standards. Is it really worth it to reinvent programs for a platform that's constantly churning out app breaking revisions? In terms of "closedness," you just can't create as many things in a web browser that you can do on a desktop operating system. You're limited by the VMs and other abstractions and sandboxes set up in web browsers. I think apps on browsers and apps with low-level programming are inherently different, and each have their own place. 
That is an impressive skill and totally useless skill. Unless you are a Black Hat, then I suppose it would be quite useful.
Thank you. I'm not sure if my excitement over compact, yet useless code, identify my objective as a programmer. I simply love to take code and make it smaller. For this exact reason [SVG is my favorite format](http://commons.wikimedia.org/wiki/Category:Manually_coded_Valid_SVG) to work with. The obfuscation was only to prove, in some way, that it's harder than people believe to spot these things. I could have base64 encoded the sctipt and put it in a `&lt;script src=""&gt;&lt;/script&gt;`, but I felt that was unnecessary.
Create an empty image element with no src link, and then onunload change it's SRC to said image URL, or, onunload send a POST request.
Calling or applying the parent's constructor in the child's constructor. var Construct2 = function (x, y, z) { Construct.call(this, x, y); // or Construct.apply(this, [x, y]); this.third = z; }
You can run the different versions of Firefox (stable, beta and aurora) at the same time. They install as separate programs.
Google Analytics will give you this data and an endless more data to pore through.
It is a good reminder. If somebody hacked your site and threw that inside of any minified JS file, you would have a fun time trying to find the culprit.
But beware, they share the same profile. If you uninstalled the beta version and select to remove your profile data it'll wipe the other versions data!
thanks. and for methods: whole object: Construct2.prototype = Construct.prototype; or specific method: Construct2.prototype.print = Construct.prototype.print; 
I'd consider an understanding of prototypal inheritance, closure and some variation of a module pattern important. Also understanding that it's truly object orientated (as opposed to 'classical'), and is a functional language with functional scope (as opposed to block scope). Other than those language-specific things, understanding of common API (Like the DOM, XHR, Webstorage, Web messaging and so on) would be helpful.
Which is why you'd usually [set up multiple profiles](https://developer.mozilla.org/en-US/docs/Mozilla/Multiple_Firefox_Profiles).
Implement some localStorage for browsers that support it, that way you can have (semi) persistent data ^_^
In your second example, a careless reader who's skimming your code might think that `something` is a function (which it isn't). Wrapping it in parens is a way to tell humans that you're using an IIFE.
&gt; a functional language with functional scope Lexical function scope. There's no such thing as "functional" scope.
You could use a functional inheritance pattern, like so: function c(x,y) { // Private properties var private = 'somedata'; // Public properties return { first: x, second: y }; } function c2(x,y,z) { // Get instance of parent and pass params var parent = c(x,y); // Private properties var private = 'somedata'; // Augment parent with new public properties parent.third = z; return parent; } var constructed = c2(1,2,3); console.log("First: " + constructed.first + ", Second: " + constructed.second + ", Third: " + constructed.third);
Normally if its in Beta it will make it to the next Stable release. But if it has a serious security or memory issue then it will be held in its current version for another 6 weeks until it meets a set standard. Ive normally just stuck here with Aurora and provided bug reports.
D'oh, thank you :)
You could put a handler on the **onbeforeunload** event. Using jQuery, this is quite consistent between browsers.
I wrote a tool to identify scope and variables in bright colors. When you see it visually with an automated tool everything becomes painfully simple to understand. http://www.reddit.com/r/javascript/comments/1a0yhj/visualizing_scope_and_inheritance_in_javascript/
Didn't know it's possible, thanks.
How would you alternate css classes when unrollling an array of data? e.g. to make "zebra tables"
[Unfortunately, but it's solvable](http://www.reddit.com/r/javascript/comments/1ahkwm/firefox_beta_users_go_to_aboutconfig_and_toggle/c8xq50r).
I've seen it, and it is a goodie. Thanks!
I once saw a comment. //This open source library has bugs in it, I am going to use it anyway.
Back in the day, you forwarded people to an "exiting" page, which logged it (and sometimes warned them that they were leaving your site). Whatever your solution, don't forget to test users changing the URL or closing the browser, if those are things you want to know about.
Trollolol
Depends--I'd take your ass to the interview, bring your A game. If its a product meant for you to work on and you really get along we'll with the interviewer, you're good. 9/10 -- if they really like you as a person, they'll be willing to support you learning new skills to make sure you can do the job.
Here's the code that's being executed onload, a bit more readable. Pretty neat! for (s = window.screen, w = q.width = s.width, h = q.height = s.height, m = Math.random, p = [], i = 0; i &lt; 256; p[i++] = 1); setInterval(function () { q.getContext('2d').fillStyle = 'rgba(0,0,0,.05)'; q.getContext('2d').fillRect(0, 0, w, h); q.getContext('2d').fillStyle = '#0F0'; p.map(function (v, i) { q.getContext('2d').fillText(String.fromCharCode(3e4 + m() * 33), i * 10, v); p[i] = v &gt; 758 + m() * 1e4 ? 0 : v + 10 }); }, 33);
It is a race condition. Not guaranteed to make it. All the modern browsers cut it off. 
You need to read the jQuery documentation. http://docs.jquery.com/ This will answer all of your questions about `$()`, `.get()`, and events. &gt;Shouldnt the creation and appending of items to the grocery list be encapsulated within a Grocery object? Doesnt this function mix view actions with model actions instead of properly decoupling them? This may be true in the Python world, but javascript frameworks like Shibari rarely act in the traditional Model-View-Controller sort of way. TLDR: that just doesn't make sense in most cases. Stick to the examples and you'll be fine, try not to overthink it.
From [MDN](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create#Classical_inheritance_with_Object.create): Construct2.prototype = Object.create(Construct.prototype);
What if I wanted to fiddle with this and make it show english or binary or hex? How do I do that?
 function inherit(p) { if (p == null) throw TypeError(); if (Object.create) return Object.create(p); var t = typeof p; if (t !== "object" &amp;&amp; t !== "function") throw TypeError(); function f() {}; f.prototype = p; return new f(); } i would use inherit func, but that replaces whole prototype object
Have you tried building your own jQuery UI download? You could then only include the draggable/sortable components along with a few core components which would be smaller than the whole library. Or you could try referencing the library while its on a CDN. Not sure it would be worth giving up code that works, is cross browser compatible and has a healthy amount of documentation/working examples at your disposal.
Thank you
Here its in JS Fiddle as you requested. Its also incorporates fisksatra suggestion: http://jsfiddle.net/UpEXP/9/
Here's the same thing, roughly 3% shorter. Can anyone improve on it? &lt;canvas id=q style=margin:-8px&gt;&lt;script&gt;for(s=screen,w=q.width=s.width,h=q.height=s.height,m=Math.random,p=[],i=0;i&lt;256;p[i++]=1);setInterval("9Style='rgba(0,0,0,.05)'9Rect(0,0,w,h)9Style='#0F0';p.map(function(v,i){9Text(String.fromCharCode(3e4+m()*33),i*10,v);p[i]=v&gt;758+m()*1e4?0:v+10})".replace(/9/g,";q.getContext('2d').fill"),33)&lt;/script&gt;
No, they really don't.
In case anyone is looking for one, here's an [online JSON editor/debugger](http://www.jsoneditoronline.org/) that I like to use.
and its still a lot worse that chromes profiler...
Yeah, 4 out of 10 letters.
Anyone see an option to set so that the line graph isnt "curvy" but more sharp (Like for a stock) just wondering if its worth trying for an upcoming project
If you go to the chart.js docs and to [Line Chart](http://www.chartjs.org/docs/#lineChart-chartOptions) there is an option called: `bezierCurve` which states is a *Boolean - Whether the line is curved between points*. Is that what you're looking for?
Anything from http://bonsaiden.github.com/JavaScript-Garden/
using the full library, minified, from one of the major CDNs (such as google or jquery.com) is ~60kb, and that is only if the user hasn't hit any site that uses the CDN and has the scripts cached. Its mostly a non issue. also, since it is loading off a separate server, it opens another http pipe, and gets the benefits of the massive infrastructure and speed of the CDN, and is typically much much much faster than your server.
Cool!
You are not attaching the pinchin/pinchout events to a specific html element. I am not familiar enough with your linked libraries to give more assistance. Please see the examples here: http://www.quirksmode.org/js/events_advanced.html
I can always count on a few pedantic people to chime in with nothing interesting to contribute. In this case we're three for three. Go read about all of the projects where folks who would have traditionally used Java for web apps are just using rich internet apps in html5/javascript to call backend java services. What Javascript has "to do" with Java is that the two are competing more than ever for roles in web application architecture. Not to mention Java and Javascript are often integrated. GWT is interesting. I wonder if the guys behind GWT think that Java and Javascript have nothing to do with each other. 
Definitely this. I'll stick to nvd3 until this gets a bit more mature.
$() is jQuery 99.99999% of the time
GRaphael has this: http://g.raphaeljs.com/
I would love to learn more. Could you elaborate on your reasons?
Will it work with IE? (older IEs) 
I'll parrot my comment from Hacker News here: &gt; We actually have our own in-house charting library at Chartbeat that uses Canvas that does exactly that (roll over the main chart): http://chartbeat.com/publishing/demo/ Ours is also called chart.js :(
wouldit be hard to do that with subtle patterns style bgs?
Any finite limit will be exceeded by some project. I suspect "shallow cloning" (where you don't store the entire history of the project locally) will be pretty important.
I think this can be done in pure CSS alone, but, the deeper question you might be asking is how do you do things based off the index of the item of the array. Given that i'm trying to keep this as strictly binding as possible, I need to expose the index to the element somehow ( perhaps with expression support ). You could then use that exposed value in a css attribute selector to do something specific. &lt;div id="component" data-bind-template="developers"&gt; &lt;div class="developer" data-bind-zebra="{index}%2"&gt; &lt;span data-bind-content="lastname"&gt;&lt;/span&gt;, &lt;span data-bind-content="firstname"&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; 
[http://en.wikipedia.org/wiki/Separation_of_concerns](http://en.wikipedia.org/wiki/Separation_of_concerns)
You can have 1 browser version per OS with 1000 applications on 3 OS's or you can have 1 cross OS browser and 1000 applications running in the browser.
They achieve a similar end result, albeit in a different manner. Philosophically, they are similar. I see it as a lopsided MV* . Instead of models dictating events, Views do it, using events instead of function bindings, which is much more flexible imo. I wrote the original post; the feedback is really awesome :)
As everything else has been answered, I'll address the event object. Using whichever dev. tools you prefer (Chrome dev. tools is my weapon of choice), you can type something like this in to the console and inspect the event object yourself; document.addEventListener('click', function(e) { console.log(e); }); Click anywhere on the page to activate it. Or, you can check out the excellent MDN (Mozilla Developer Network) for some reading; https://developer.mozilla.org/en-US/docs/DOM/MouseEvent
Not particularly. I just slapped something together for the demo and it came out pretty ugly because i wanted the code to be dead simple and also to fit in the box. The existing background also uses this, for example. Or you could put a bloody vidya game back there.
It seems very worng to me too. This is not only extra effort, you loose compatibility with older browsers and you are not SEO friendly this way. Maybe she has a reason I can't think of, but defenetly is not the most popular practice
My thought is that they don't know how to use an a tag. There is no reason to do it this way for regular webpages.
One thing that I've done is use JavaScript to embed my email address on my site. Most of the simple malicious bots don't render JavaScript so they won't be able to collect my address and add me to spam lists. Other than that, I don't see a reason to use JavaScript in creating links.
Your freelancer probably doesn't know html, that snippit has other code smell. - div + p instead of button element or input type= button a styled a element - 'click here to continue' instead of just 'continue' that's like things not to do 101 now that people understand how hyperlinks work. - inline Javascript, that's usually my first tipoff that someone thinks an out of date copy of dreamweaver is an acceptable substitute for learning html.
WTF is [this](http://tinlizzie.org/ometa-js/#Sample_Project)?? That is *not* the best way to introduce a new library to unsuspecting newcomers. But it is an excellent way to piss them off.
&gt; Maybe she has a reason I can't think of Why change the stated gender of the freelancer?
https://github.com/danielsamuels/chart-js
I made a backup: https://github.com/danielsamuels/chart-js
You should ask the freelancer. There is no real good reason to do this, except laziness / ignorance / esoteric workflow for prototyping.
No one knows better than him, ask why he doesn't just use an anchor tag and you'll get an actual answer, not speculation.
That snipped gave me cancer. It's just regular bad code, I'm afraid.
Don't know why you were down voted. You bring up a good point. 
You, sir, are a scholar. Thanks
This seems like a very dogmatic response, and your dreamweaver quip smacks of someone just trying to cop a superior attitude. Divs/classes are often targets for jQuery functions, and not for formatting. Inline JS is going to exist on an onClick event, even if it it just a function call. If your function really is just a one-time one-liner, moving it off into a function is premature optimization. You move it when you add another line or two. Nevertheless, my guess is also that, yes, this is a newbie coder. He probably tried using href="#", and got frustrated with the browser jumping back to the top of the window because he did not add 'return false' to his onClick. So he changed his anchor tag to a paragraph. 
It is called bad developers that do no know any better. They didn't want the text blue like a link, so instead of doing it right with css they made it a clickable span. My old place used to do that with form buttons. They didn't want to make it look like a button, so instead of restyling they made it a href that when clicked submitted the form, with javascript. God damn I hated that place...
How is that a "good point"? It has nothing whatsoever to do with the discussion.
My guess? [Cargo Cult Programming](http://en.wikipedia.org/wiki/Cargo_cult_programming)
haha, this actually happened to me just 5 mins before reading your comment. I needed an &lt;a&gt; that toggled the visibility of some subgroup and should somehow show that it can be clicked. The href="#" had exactly the effect as you describe. I had tried to use href="#&gt;" which worked, but looked a bit dumb. Thanks, I have done right now.
It's got plenty to do with the comment above though. Just like your comment did.
Neither does assuming the incompetent web dev is female. I think the point is that they're calling lupo7 out for a little bit of perhaps unintentional sexism.
Or for not reading the OP's post :).
How can you make such a sweeping statement without knowing how he is using JavaScript to embed his email? Maybe he's escaping the @? Or hex encoding it.
Of course. But not reading OP's post for the gendered pronouns and then assuming the dev was female sounds like possible sexism to me. In any case, you shouldn't have been downvoted.
You should never have to use `&lt;a href="#"&gt;` on a page: the purpose of an `&lt;a&gt;` tag is to take the user to a new page, or to a different area of the current page. If the only purpose of an element is to toggle a state or fun a function when clicked, the proper element to use is `&lt;button&gt;`. A lot of sites still use `&lt;a href="#"&gt;` for styling reasons. The downside to that approach is that unless you work around it, clicking the element will jump you to the top of the page.
You singled out a single word which has absolutely no bearing on the meaning of the comment.
Yes, good point. But this wasn't the front page but just some internal admin interface to export some xml from the database and should show a few filter options (categories and sub categories, car manufacturers and models...). With all the subs the lists became too long, so I needed a simple solution to toggle visibility of sub groups. I was just lazy... (and obviously do more server side than browser coding)
My first thought at well. display: inline-block
I singled it out because it was the part of the comment which puzzled me. Gribble bobble.
Or perhaps lupo7 just neglected to take note of the stated gender and failed to consider that the English language's default gender is *always* male(talk about sexist). And how do you know lupo7 isn't a woman and wasn't just using "she" as the more familiar gender? And isn't assuming that a stranger on the Internet is a misogynistic male on the basis of a simple mistake pretty sexist and misandristic? 
The dreamweaver quip is from out of date version that used to be on my computer at work. Yes using an inline function is ok once or twice in a document but has a smell because you are going to have a bad time if you try inline js in anything bigger. None of these things are that horrible by themselves, but you put them together...
Ask the freelancer. But... ...no, there isn't any reason to do this, and there are a ton of reasons not to. Even if you think there *is* a reason in your particular case, it probably just indicates larger problems. This is a bad idea.
I meant that click here tends to be drilled into people as Something You Should Not Type. A lot of the time are due to lazy phrasing. E.g. 'Documents from the meeting have been posted. Click here to view them.' JUST HYPERLINK THE WORD DOCUMENTS!
There is no reason for doing this. It breaks links if JS is disabled. Google parses JS, so if he tried to cloak links, it is useless (there is rel=nofollow for that). 
&gt; Or perhaps lupo7 just neglected to take note of the stated gender and failed to consider that the English language's default gender is always male(talk about sexist). I'm not sure what you mean by "default" gender here but if you mean gender of pronoun used to represent an generic rather than specific noun then there are both feminine and an overwhelming number of neuter counter examples.
Using # looks less ugly if JS if turned off. 
Laziness and/or ignorance, as others have said. It significantly degrades the user experience, and is simply bad practice.
Neither does your post. Jesus fucking christ I am so tired of redditors feeling threatened at the very idea of sexism being called out.
Fly away back to /r/mensrights, please.
I'm 100% confident that if OP had stated the gender as female and lupo7 had referred to her as "he", we wouldn't be having this discussion, because you either wouldn't have noticed or wouldn't have cared, since that is what is considered "gender neutral" by our culture.
I've learned from experience that people still need to be told explicitly what to click on. You might think that the Web has been around long enough for everyone to know how things work, but I've got a system with tens of thousands of business users (and the help desk tickets to go with them) who have repeatedly proven otherwise.
If the bot isn't parsing the html, it's not going to fetch external js files, which is presumably where the email address is stored.
I guess this is one way to avoid target="_blank"
&gt; Neither does your post. Jesus fucking christ I am so tired of redditors feeling threatened at the very idea of sexism being called out. Lol what a fucking hypocrite you are.
I like it! It keeps the original article uncluttered. Though it makes me think it would work better as a plug-in. That way, it's customizable in a way that would work across different websites. Wouldn't it be nice if it were both? It would only show the html if it didn't detect the plugin. (A small link to the plug-in site would help adoption.)
My thought too... Everyone has his own style, so why bother... 
Your right the thing is that having the anchor text for every link be 'click here' tends to be a bad solution.
Interesting thought. I'm planning to make it so that you can have different objects in different files, so maybe the designer first creates the basic HTML and CSS and then hand it over to the JavaScript developer. Also, I discovered a bug when posting it here, (it's in v 0.8 now) for you guys who clicked the link before 2pm GMT, you noticed that the back button didn't work. I'm sorry for that and I have now created a quick fix that has fixed this problem. Will create a better solution tonight.
How is this?
&gt; Gribble bobble Why change the stated gender of the Gribble?
He might not be a bad person but he is not good at html or javascript, that's for sure. I would not put that code into production...
I pointed out blatant sexism, and you obviously felt threatened by it.
good documentation and a well set out project file structure. A "find all" is all I've ever used to get to the right method when I needed it (just lookup yournamespace.prototype.function = if you're really desparate)
Very cool. I've been considering doing something like this, only the meta-language which produces all three would be either: - Written in something as close as possible to what a graphic designer with no experience in any of the three languages would understand (maybe check out how .storyboard files work in the iOS App framework), or - Auto-generated by some sort of WYSIWYG editor. Obviously this isn't a terribly original idea, and I'm sure it's been done many times in the past, but I don't really see a prominent example of one out there right now. It might be an interesting direction to go.
Seems OK to me. Curious: Why are you breaking up iframe into two different strings? How do values get into #SearchTerms? because if it's only by user input then there isn't a problem anyway. Any user could open a javascript console and set adSrc directly. 
Sexism against... *whom?* (Here comes the punchline, everybody)
You singled out a single word which has absolutely no bearing on the meaning of the comment. :)
And writing text to help doesnt help those too stupid to read it. And they're not few.
You can reread my earlier comment that you misconstrued as an argument in favor of men's rights if you wish, but I'm not going to restate it for you.
could use selenium to render js…
Sexism against men, folks. He (probably a straight white male redditor) think he's being oppressed. Let us all take a moment of silence to remember the incredibly distant ancient era of male domination. Now that we have a female president and penises are outlawed it seems like such a bizarre and quaint time period! Oh wait, this is 2013 and you're actually an idiot?
There should be almost no reason to ever have an onClick attribute on an element. That is massively mixing up display + behaviour. These days, especially with things like jQuery, it is perfectly simple to do the right thing and set up an event handler in the js.
It seems like maybe you only read the last word of my comment and made some rash assumptions about what I was driving at, rather than reading the whole comment and recognizing that I was just pointing out the irony of this entire discussion. Then again, you've already demonstrated that recognizing irony is not your strong point.
My apologizes, I saw this comment: &gt; I pointed out blatant sexism, and you obviously felt threatened by it. and thought you were talking about the original use of 'she'. I should have followed the posts up the chain. 
And then in addition to the link not working, it scrolls you to the top of the page too. Which IMO is like adding insult to injury.
I'm not a web developer so I'm a little confused. I thought it was generally considered bad practice to mix contexts. I was under the impression that html is content, javascript is logic and presentation is css. This seems to mix them all together. Am I misunderstanding the intent of this?
Breaking the iframe into different strings isn't needed. I think it's a remnant of modifying the ad networks generated code ,which I've gone back and checked and actually uses document.write() for a bunch of the different output methods. I don't know if it's still redundant for iframe elements or has the same problem with script tags where if not broken up will prematurely close the parent iframe/script tag http://stackoverflow.com/questions/236073/ .
Well, as someone who doesn't really understand html, this thread was informative.
Someone below pointed out the capitalized "O" in window.Open. He correctly states this would indeed through a JavaScript error. However, if this is cut and paste code here is my guess for what he has done. He has extended the window object with the Open method which does something in addition to just changing the location of the page. Possible some sort of usage statistics, page state, etc...? If this is the case, it would be more proper to use hrefs for links and utilize the onbeforeunload callback function / the event listener beforeunload.
You should know thаt SubrеddіtDrama has wrіtten about you. «[Involuntary gender reassignment in /r/javascript](http://www.reddit.com/r/SubredditDrama/comments/1aleqg)», submitted 1.6 hours ago. As of now, your cоmment has a scоre of 8 (13|5). The parent submission has a scоre of 33 (37|4). SRD has no enforced rules against invading or voting in linked threads, and threads linked by them hаve а tеndency tо suddenly acquire large amounts of vоtes and dеrailing comments. ^(SRD delenda est)
http://youtu.be/s0F3LKaGN2A
Hmm, when i launch my "Nightly" icon, it opens normal FireFox if i already have FireFox open, is this due to only having a single profile?
This is very nice. What do you think about generating the html programatically as opposed to with strings... e.g. html: function(content): { return html.div(content, { param: this.object } ) } Forgive me, I'm a python etl programer by trade ;) 
Please report back if there is a reason he is doing this... analytics?
We're talking about JavaScript, not HTML. ;)
How do you handle authentication and authorization for certain links?
This is a great interview question, again bringing out the average redditor programmers bias. Criticism is easy, that's lazy thought. Get over it. 3 reasons to do it I can think of, off the bat. In IE it would prevent the clicking a link sound. If you had a dependent validator that couldn't parse (or wouldn't parse) anchors for some reason, you would simply avoid using them. This code may be older to deal with old bugs in IE or some other browser where control of link styling may have been an issue. dr_qwertz had a great idea as well.
Thank you, and of course, this can be done! I was thinking about creating objects for all commonly used elements such as links and headings, you would then use html: function(content) { return o.a('http://www.google.com', 'Click for Google'); } Your approach with html.div is also possible :)
please leave the subredditdrama in /r/subredditdrama. and fuck off.
Will your HTML be cross-browser and cross-device compatible when you explicitly form it all this way? Perhaps leverage the core of qooxdoo for html generation to save yourself those headaches?
You mean `event.preventDefault()` not `return false` right? If we're going to be self righteous we might as well also be correct.
Yes it will be cross-browser compatible. Unfortunately, it does not work 100% in IE7 and IE8 right now, because it is just in v0.8. (v1.0 will have support down to IE7). About the cross-device compatibility: if you're using chrome or safari on your phone/tablet, it should work the same as on the desktop. It will not be a native app right now though, but I'm planning on testing it in PhoneGap within the near future. Haven't seen qooxdoo, will check it out :) 
very cool stuff man. might use that down the road. Thanks
Even if he wanted to roll his own, he should just be making proper links and then overriding them with an $('a').click(), so they still work for people without javascript.
Could you give me an example?
Yep, that and you'll also have to use either the `-new-instance` or the `-no-remote` argument. This is, somewhat, detailed in [this mozillaZine article](http://kb.mozillazine.org/Opening_a_new_instance_of_your_Mozilla_application_with_another_profile). 
I agree Ometa needs some better documentation, but it really is a good library. Try reading the thesis paper. Very cool stuff. 
Thanks!
You're not too smart. You're a cunt, that's probably why you don't have any friends. Stop trying to make excuses.[**[1]**](http://www.reddit.com/r/AdviceAnimals/comments/1aizq4/the_story_of_my_social_life/c8xx2i6)
How exactly do you *open* the profiler? lol **edit**: Got it :), Menu &gt; Web Developer &gt; Profiler
it is not premature optimization. it's sloppy. premature optimization doesn't mean "do everything wrong until you need to do it right" premature optimization is concerning yourself over which sql calls need to be cached prior to the site going live. it's bringing on load balancing machines for your portfolio website. it's breaking out that big o notation and trying to optimize a function that gets called once in a while. you don't use onclick because it's just the wrong thing to do. it isnt semantic, it's terrible, you should feel guilty, and question your professionalism every time you do it.
lol
Assuming this is web dev, is it client or server side? I'd say the strengths for the two differ in some small ways, but what you'd need to know for either: - How AJAX works (with some understanding of how to process an AJAX request sans jQuery) - Scoping and closures seem to be the biggest issues people have with JavaScript (while this shouldn't be in the realm of "deep understanding" it's a prerequisite to using the language effectively) - Prototypal inheritance (specifically the flexibility it offers when planning your data-structures) - Hoisting (in the simplest terms, JavaScript searches the document prior to processing to see what variables are "available" and substantiates these as undefined so it doesn't cause parse errors on values that will become available later). EDIT: Link to explanation of hoisting because I have trouble putting it into words: http://net.tutsplus.com/tutorials/javascript-ajax/quick-tip-javascript-hoisting-explained/ - The DOM is clearly a very important aspect of client-side JavaScript. Understanding how to navigate the DOM without using a library whether it's jQuery, MooTools, or some other library would be a prerequisite for a "deep" understanding. - EDIT: Can't believe I forgot: JSON! JSON is an incredibly lightweight way to store small amounts of data client or server-side. Great for setting config, etc. Knowing how to parse/use/stringify JSON is an important part of the JavaScript developer's toolkit, at least in my humble opinion. As someone else said, good luck &amp; if you're a good fit I'm sure they'll be more than happy to teach you any skills you may need. 
I apologize that this doesn't exactly answer your question, but as others have said, you should really either download a core version of jQuery UI with your specific components or just skip all of that and use jQuery's CDN. I assume you're already using jQuery, and if so, I honestly doubt you'll notice the different in load time. It's also nice to have the reliability of an engine like jQuery UI for these kinds of complex UI behaviors.
From this thread: &gt;Your freelancer probably doesn't know html, that snippit has other code smell. div + p instead of button element or input type= button a styled a element 'click here to continue' instead of just 'continue' that's like things not to do 101 now that people understand how hyperlinks work. inline Javascript, that's usually my first tipoff that someone thinks an out of date copy of dreamweaver is an acceptable substitute for learning html. . &gt;It is called bad developers that do no know any better. They didn't want the text blue like a link, so instead of doing it right with css they made it a clickable span. My old place used to do that with form buttons. They didn't want to make it look like a button, so instead of restyling they made it a href that when clicked submitted the form, with javascript. God damn I hated that place... . &gt;Nevertheless, my guess is also that, yes, this is a newbie coder. He probably tried using href="#", and got frustrated with the browser jumping back to the top of the window because he did not add 'return false' to his onClick. So he changed his anchor tag to a paragraph. This was all about html, and it was interesting.
I once had to do this because of the same reasoning. A SEO agency told my client that it would be bad for SEO to have multiple links to the same target on the same page. So I had to change all links (except for the one, which had the "proper" linktext) to javascript. I see the reasoning behind it, but I believe it's wrong. We're making sites for people, not for search engines...
&gt; the subtle nuances of my shitty posting lol yeah man ok. Your exquisitely delicate and refined posting pallet is simply too subtle for the unwashed lowbrow masses of reddit, myself shamefully included. Now that we have reach the inevitable, mutually satisfactory agreement on this painfully obvious clarification (indeed, it must nearly be vexing -- nay, *insulting* -- to even entertain assertions to the contrary, you brave soul), I have another inquiry to humbly offer: Please, pray tell reddit user GIBLETOR, what was the precise nature of the "irony of this entire discussion"? What was so ironic (is that how you say it? Such a strange word!) about it? Pretend that for if just a moment, the disgustingly filthy and uneducated eyes gazing upon the majesty of your reply do understand what irony is in the first place.
try changing your CSS to: body{ background: #ff0000; top: 0; bottom: 0; position: absolute; width: 100%; } The body element has zero height, body is one of those weird tags, even though the whole background is red the dom element has a zero height.
The # character has special significance in URLs. You would need to URL-encode it.
That's fucking awesome! Until Google shut it down.
html is different from semantic web. I am not arguing that we shouldn't follow a standard, but I don't think that most of the developers ever care as long as their sites worked. I am actually doing research on semantic web and nlp, and I should have more incentive to be against these practices, but the reality is... hell... I am in the US... Everyone has an opinion, and no one follows the standard to some level...
I think Adblock crowd made their opinion noted. :/
What do you think it will do if you put "javascript:void(0)" in there? 404. Best is probably to avoid the href attribute alltogther.
You don't have to explicitly extend the window object, any globals are actually properties on the window object. So as long as there's a global function called Open, this would work. 
Perhaps they made a global function called Open. Global functions are actually properties of the window object. 
The irony was that you accused someone of being sexist, and then when /u/gibletor tried reasoning with you, you told him to "Fly away back to /r/mensrights, please," as if anyone who disagrees with you on anything is therefore a bigoted sexist. You are being sexist.
http://www.chartjs.org/docs/#generalIssues-browserSupport
I had the same thought a little while ago, well done getting er done.
If you're working in html5, there is the ["srcdoc" attribute for the iframe element](http://www.w3.org/TR/html5/embedded-content-0.html#attr-iframe-srcdoc).
He was actually referring to this post: http://www.reddit.com/r/javascript/comments/1al4g5/what_using_javascript_to_make_links_any_reason/c8yftul Also, nice PERHAPS IT IS YOU WHO IS THE BIGOT argument, I hadn't seen that in a while on the Internet. Like seeing an old friend!
Very helpful, thanks.
Very helpful, thanks.
I believe "return false" is correct... [return false vs evt.preventDefault](http://css-tricks.com/return-false-and-prevent-default/)
&gt;Sexism against... whom? &gt;(Here comes the punchline, everybody) &gt;Sexism against men, folks. &gt;Fly away back to /r/mensrights, please. This is all sexist crap. At least have the decency to pretend you think the sexes are equal and deserve equal treatment if you are going to go around calling people misogynists and not expect to be called out on it.
The question is if you want a job or not. I don't think google for be doing any good indexing sites doing this kind of (stupid) stuff. And with semantic web I don't necessary need RDFa and similar, just that it follows a pattern that humans and indexing bots can read. The "heck, as long as it works" argument is just not valid.
And finally, the coup de gras of a Bad Internet Debater: "u mad?" Yes, I'm so furious that I didn't "get" your "wit"!! lmao.
Where is my sexism, exactly? Because I deny the horrible plight of men (I am one and it fucking owns btw)? Am I sexist against my own gender? Can you even be truly sexist against men in a patriarchy? The answer is "no" but I'll happily entertain a spirited rebuttal of how your life as a straight white male is difficult in any way.
+1 avoid anything from google unless youre just fucking around with it.
LPT: Don't accuse others of exercising poor debating skills when you are clearly losing the argument. You will just end up embarrassing yourself.
&lt;a rel="nofollow"&gt;
In the spirit of this /r/ why not just... &lt;div class="link-item"&gt;&lt;p data-location="next.html"&gt;Click to continue&lt;/p&gt;&lt;/div&gt; $( '.link-item' ).each( function(){ $( this ).children( 'p' ).on( 'click', function(){ window.Open( $( this ).attr( 'data-location' ) ); } }); 
For jQuery maybe, but he's not using jQuery in this.
Are you broken?
Ah, the old "ah, the old X argument" argument. Again.
I think they're malfunctioning dude. They're pretty impenetrable.
Unfortunately that won't have the same effect, nofollow will instruct the robot to not follow that link, but the anchor will still count and affect the page rank. http://www.mattcutts.com/blog/pagerank-sculpting/ 
If it was hand-coded, yes. However, I've noticed some frameworks getting sloppy about this. And your argument about"click here" completely ignores A/B testing showing the benefits of a clear call to action.
I saw something similar on Directory website once. The idea, I guess, is that it will avoid draining of link juice, be easier to style link items and avoid using _blank. Also, if Google penalises you for websites that you link to this can help avoid penalty. That explains the gambling affiliation websites and referral code. 
It's genuinely sad because it does really looks awesome, but I would never integrate it in a customer application because of all the implications of relying on Google.
Is that the actual text he's using? It almost looks like the type of thing that you would use when you want to redirect the user if they click anything anywhere.
I can't up vote enough.
The ability to rely on people having Javascript enabled has significantly strengthened in the last 5 or so years. Gmail (hell, most of Google) is probably responsible for this to a large degree. That said, there are still other good reasons to have a proper "href" in the code. * Your visitors get a chance to see where the link points before they click it * Visitors can open the link in a new tab or copy it to their clipboard (*not bluej10013's idea!*). * It's the standard - there's no point inventing a different way of doing something that could just as well be done the standard way * SEO * Resilience against a bug in your Javascript breaking everything. * Semantics - it can appear and behave as a link in all current and future user agents.
that's the joke.
As was my reply. (Look at the context.)
Its an automated bot you fuckweed.
I'm gonna steal that idea and claim it as my own!
You're going to bitch about that, and then not capitalize your sentences? 
&gt;Can you even be truly sexist against men in a patriarchy? Thanks, you made it really easy to point out the malfunctioning logic you have going on there. "Misandry don't real" and "men can't be oppressed" is a bullshit stance. How about you start looking at issues as if they affected humans instead of a gender? Also note that not only did you not "deny the horrible plight of men," but no one mentioned it. I called you out on using sexist language to state that people disagreeing with you can't actually have opinions because of their penises and that's all. 
&gt; Most of the **simple** malicious bots
It's pretty indicative of a shitty case, I agree.
Care to give a single example that might vindicate your position? When historically have men been the victim of sexism to their detriment?
If "misandry" (lol) is real, you should have no problem giving me examples. Go!!!
I think you're mistaking the lack of an institutionalized system of misandry to mean that it doesn't exist. You should get that checked out.
So, none then? You couldn't come up with a single example? Not even a bad one? Seriously man take your time. I'll give you as long as you need. Hours, days, weeks... months. Maybe you can solve the mystery of Bigfoot while you're at it.
damn right.
Just stop.
Are you gonna cry? I forgot how sensitive you must feel, having your men's rights constantly in jeopardy.
Don't feel your statements are worth a defense? Gotcha. I don't think they are either, we can certainly agree on that.
Dude, I'm just glad that you were able to get that comment out before the Feminazi Gestapo confiscated your computer.
How is this different from socket.io, which claims to even be IE 5.5 compatible?
12 hours. That's how long you've been harping on about this position that you have imagined that I hold.
that's funny, but it would be 10000000x better if it gave you some sort of reference to what others have done. 0.671 sec first try
I typed "-&gt;" but nothing happened :(
Lol. Programming subreddits are about the only place you won't get downvoted *threw* the floor for being a grammar nazi.
This is just a side note; holy shit your site is fast! Gotta love that pjax/turbolinks...
And you with your endorsement. You have my karma.
Most people use http://redditenhancementsuite.com/
Wow. That is really observant and it makes perfect sense. TIL 
You could also just use Hover Zoom for Chrome. Extension. For images at least.
That would be a great idea especially for total beginners like me who want to be involved in a OSS. It would be best if this integrated with github/bitbucket and have the core maintenairs/contributors helping people around (they will also find this very useful to them since they will be having new contributors and also improving their documentations).
Oh, I'm sure it would be useful, but only if the interest would be big enough to get the great developers to actually contribute sources that are documented this way. And knowing how much work it was to comment jKit like that and how little interest this thread got till now, I'm currently not so sure about it.
I'm very interested to contribute if you're looking for some help. :-)
Mesmerizing. Great work.
Thumbnail Zoom Plus for the Firefox Community. works with most sites.
That's... interesting. I just wish it didn't just open links when my mouses accidently moves over a link. Often I have no idea what link it opened... I prefer that it would wait for a click (in which case you could probably just set the target property of the link; "zoom"? I don't see any zooming...) or wait a while before loading a link, just like a tooltip waits a while. 
I think that you would love Opera browser which can similar feature built in with clicking instead of hovering. There are two ways to do it: 1. Open Opera to reddit.com, and align it to the left half of your screen. 2. Right-click on tab and select "Create Follower Tab" in context menu. 3. Move this new tab in new window by dragging it on taskbar or using Windows panel on sidebar. 4. Align it to the right half of your screen Or better and simpler: 1. Open Opera to reddit.com. 2. Right-click on tab and select "Create Follower Tab" in context menu. 3. Right-click on tab and select "Arrange"-"Tile vertically" in context menu. 
Dell used to make the [SP2309W](http://accessories.dell.com/sna/products/displays/productdetail.aspx?c=us&amp;l=en&amp;s=gen&amp;sku=320-7641) with a 2048x1152 panel. Its really useful as a web developer but I wish I'd bought 2 at the time so my second monitor matched.
AngularJS...?
This. Is. Awesome. This library has really kicked my JavaScript development in the pants. I'm glad to see it reach 1.0.
He must have trained himself to notice every little typographical anomaly.
Like missing semicolons. :)
Wow, cool. I started working for a company last summer and I re-wrote their software as a backbone application. Worked out very well. Happy to see this reach 1.0!
Just a grey square on chrome
well any serious website has a collection of resources/urls and each link is typically accessible only to people with a certain degree of authentication/authorization. Authentication is who you are. Authentication is what groups (typically) you are in and hence what resources you can access. Imagine a voting application. Results require no authentication. Voting requires user level authorization and creating new polls requires admin authorizaiton.
I just implemented backbone for the first time this week and needless to say I love it. I can't say I'm in far enough to appreciate the new features, but I love seeing that 1.0.
No offense but yes, yes you are. Certainly there are times when it's appropriate to disregard them, take YouTube for example, but for something simple like this there should be no reason you can't easily do a no JavaScript version.
Sorry for being pedantic, but Docco isn't a source view so much as a tool to generate documentation from JS projects written in [literate CoffeScript](http://coffeescript.org/#literate). I'd love to see more literate programming resources out there. A site that collects and presents them for easy reference would be fantastic. Using that same tool to document and discuss best practices sounds like an all around win to me.
0.39sec You should probably restrict the use of Ctrl+V ;)
The only thing I'd add is to look into event delegation as well so that every a element doesn't need its own handler (depending on what you're trying to do of course). Like if all the links are in particular container: $('#container').on('click', 'a', function(event){ /* do stuff */ }; It puts one handler on the container that catches any click events that bubble up and only runs the handler if it is from an a element.
No closures for you then, hmm?
From the link: var o = { object: { html: function( content ){ return '&lt;div'+this.obj+'&gt;'+content+'&lt;/div&gt;' }, css: function(){ return this.obj+'{bg:#c0c0c0;f-s:14.;f-f:Arial;p:5.;f-w:bold;cur:pointer;}' }, js: function(){ $(this.obj).offOn('click',function(){ alert('Hello World!'); }); } } }; o.object('FooBar') Can someone explain to me the advantage of taking the CSS, the HTML and the JS and putting it all into one JavaScript object? Seems like it would be harder to maintain, and that you could end up tightly coupling your HTML, CSS and JS. Not to mention it's less readable. I mean, it's cool that anyone wants to try to solve this problem in new and interesting ways. I'm just not sure this is a great solution, yet. Sell me on it. 
Thx for correcting me. Never really used CoffeeScript myself. I actually know Docco mostly from using Underscore.js and Backbone.js where it's mainly a source code viewer. Anyway, back to the topic. Maybe it would be a good idea to first launch a website that has a directory of scripts with Markdown formated comments and than wait a few weeks to see how much interest it generates.
I prefer angular, but congratulations anyway.
I can type 'function' faster than your comp can paste it. That's funny.
I like that angular handles updating of the views automatically, but i'm not terribly crazy about how "opinionated" the structure is. Backbone provides just enough structure without requiring you to drastically alter the way toy work. I haven't built a full angular app though, so i'm mostly talking out of my ass.
Possibly. I think that the number is being incorrectly represented. I think it should be 0.039 but I'm not sure.
`getElementsByTagName` returns a *list* elements. You'll want to iterate thought that list and bind a function to each element.
Stoked. Had a great experience implementing it for the PhoneGap Build web client. And I'm a designer by trade, so the fact the docs and concepts make sense to me says something. Over the next week at my new job we'll be parallel prototyping a small feature with Backbone and Angular to see which is better for our team and product. Glad to see we'll be doing that with a v1.0. Congrats on reaching the milestone!
First of all, it's not Java. JavaScript and Java are not related. Second, try sharing your code via something like Codepen or JSfiddle. We can't help you with no code! That said, instead of printing the user's input directly to the screen, you should be appending it to an array, which you can then sort.
~~It's generally preferred to use innerHTML to insert html/text. Is that available to you?~~ I'll show myself the door now.
Shameless plug: I made something like this that doesn't require a separate binary, only a require and an if in your code, https://github.com/mdlawson/piping. Yours is nice for keeping things simple though!
what's not working? infinite scroll? It doesn't look like you've called it... 
when you write "cells.onclick", jquery will bind it to only those elements that currently exist on the page. If an element (&lt;td&gt;) is created afterwards it will not have a the same onclick event handler that you created before. One way to fix this problem is to use jquery "on" method. See http://api.jquery.com/on/ And the selector is specified like this: $('table td'). This way the onclick event listener is not attached to each td. Instead everytime you click on any td inside "table", the event will trigger.
found this in masonry's docs: var $container = $('#container'); $container.infinitescroll({ // infinite scroll options... }, // trigger Masonry as a callback function( newElements ) { var $newElems = $( newElements ); $container.masonry( 'appended', $newElems ); } );
you can do this in css: .banner{ position: relative; /* or absolute depending on your needs */ left: 50%; margin-left: -foo; /* foo = your banner's width divided by 2 */ }
Whoa, that's amazing. When you have enough done that you're ready to talk about, please email me a description to get posted up to the gallery of example apps.
What's the history of this? Based on its features, it looks like a jQuery replacement. Also, I'm not sure what lightweight or lightning-fast is if it's not compared with something else that's slower.
I dunno either. I'll contact the creator. edit. there. https://twitter.com/reporteric/status/314729153301708802
Is it based on prototypejs? Also extending Elements is a bit risky, one of the lessons learnt in prototypejs was you don't want to do this because it will come with a hefty performance penalty in IE. Personally I would prefer ES5 (shimmed possibly) and just implement the methods I would miss. For example Array#flatten( ... ) and not go through the trouble of implementing the common methods as well.
Craft2 is what I would have expected from a PrototypeJS 2. It's only 10.5K once minified and compressed, which is pretty much the size of Zepto. Also, I don't really see it as a jQuery replacement, as jQuery is mainly a DOM utility; Craft is more of a small development stack (with functional methods, classes etc.). edit : about the performance, http://jsperf.com/craft2-vs-underscorejs/2