Have you checked wether the blob is send with the correct Content-Encoding:gzip header?
It probably irritates me more than it should, but Gulp wasn't covered as much as it should have been. I feel like the author either never used it or didn't understand it. Anything Grunt can do, Gulp has done better with fewer lines of code for me. Make files have always felt cryptic and unforgiving. I love Linux and what it does for me, it sometimes the conventions of succinct symbology just gets irritating. For instance, `$@` being used for the current file is not as readable as a JS variable with a real name like `currentFile`. For me it's 100% about readability and cryptic bash lines and shell scripts just don't cut it. Besides, watchers are just epic and if I don't have to manually `make` every time I make a change, I'm sticking with Gulp.
Emacs with [web-mode.el](http://web-mode.org/) gets the job done for me.
There is no Content-Encoding header when loading a blob. Only Content-Length and Content-Type. I'm using 'text/javascript;gzip' as the content type for my tests, but it fails silently. I also tried Base64 encoded data with 'text/javascript;base64', it's the same problem, you have to call atob manually.
Impressive, all the functions i need. Super performance and the most important part i can code with a $ in front of everything, just like JS is supposed to be. Good work! And thanks for testing that extensively, i feel safe using this just today!
To be fair, $@, $^, and $? are the only auto variables I've ever really seen being used. It's super simple to memorize after using them a couple times! I've had really good success with facebook's Watchman as well. Trigger a build on change and it's the same as gulp! 
Right now, many of the web frameworks for Node JS are very bare-bone frameworks, and need a lot of extra work on top to make them 'production ready'. Stuff like Express is great - it does 'just enough, and in an unopinionated enough way' - that it can become a foundation for other frameworks to build on top of that. This is where things like Sails, Sleek, Kraken, etc come in - they start filling in those gaps so you don't need to solve the same problems over and over. I've only recently made the move into the Node world and really enjoying it - but there does seem to be a lacking of 'mature, off the shelf-battery included web frameworks' - or at least enough that I'm confident will be there for the long haul. There are lots of them - but it's hard to get a sense for which ones will stick around, make an impact and get good community support behind them. 
Once you get into bash scripts, $1, $2... become prevelant to denote arguments, but I understand what you are saying. I just think those in combination with the other conventions (tick marks, bars, gt/lt piping, etc.) make scripting in the command line more cryptic than it needs to be just to save some typing.
I'm not Mary Rose Cook, I was referring to this meme http://weknowmemes.com/2013/11/i-made-this-meme/
&gt; I'm not Mary Rose Cook, I was referring to this meme &gt; http://weknowmemes.com/2013/11/i-made-this-meme/ 
I think for simple projects "npm scripts" is mostly all you need. browserify plugins like lessify, hbsfy, etc can be useful if you keep them out of your module code (ie top level only). If you work on teams, I would not recommend make for two very important reasons: - sooner or later, there is a very good chance the project will need to be built on a windows machine. Either by you, a contributor, or yourself a few months down the line in an unforeseen situation. And when this happens, you are fucked. This is 2014 and we are using Node for tooling, it's ridiculous that your tasks would not be cross platform when they are all using cross platform tools. - Make is cryptic. It's confusing to anyone who hasn't used it, including contributors, junior programmers, and others who have to touch your code. You should favour clear and familiar code over what basically feels like an ancient domain specific language. 
Hey! I understood with your explanation! thank you! I used this.self = this; to circumvent that problem without knowing why it was caused.
What else should I add besides the name? I got the program off of the video, so I don't know what else to add.
If you want to look at some rather extreme examples of JavaScript, I invite you to http://140byt.es - where tweet-sized JS snippets do crazy stuff.
Blame aside, have you considered removing uglify from your dev setup? Since you can trust uglify, you could only do it on stage or prod builds.
This. My main os is windows and I've run into 4 projects in the last 6 months where I've needed to either setup vagrant or just not take on the project and it's extremely frustrating. Vagrant can solve most of those problems thankfully but it can have its drawbacks too. And using vagrant only for getting build scripts to work feels so weird.
Yes. And if Javascript was designed more politely, it would have used a different name for this different concept.
&gt;Do you see that a bad thing? Angular 1.3 will be around and be maintained, it's feature complete. You wont be forced to upgrade. A rewrite breaking compatibility, even a minor one, is a confession that something is fundamentally flawed and needs to change. If I want to start a new project in Angular right now my only choice is a framework that the creator themselves think is obsolete. So yeah I think it's a bad thing.
Well that all changes with this (no pun intended) myObj.fn.apply(notThis, []);
I havn't used Dart yet, but slowly I'm starting to see what all the hubbub is about. Thanks for this :)
ITT: http://i.imgur.com/qPDBp8D.gif 
What I'm trying to do is reduce the differences between dev and prod to catch problems sooner and also make it easier to debug in prod for the occasional issue that's hard to reproduce anywhere else. Sourcemaps seem to offer a way to do that while still reaping all the benefits of combining and minifying my script files. I'm just puzzled by the lack of information around whether any browser is capable of mapping a mangled variable name to its original name. If I'd seen anywhere that someone got that working, then I'd have tried to replicate their setup. But for now, I don't know if the limitation comes from browsers, the sourcemap format or Uglify. And so I'm looking at alternatives.
You probably want to declare it as "var self = this". Your way pollutes the object with an unneeded property which could be problematic for memory-usage.
Literally line two of every constructor class I write.
Operator overloading example: class Point { int x, y; Point(this.x, this.y); bool operator == (Point other) { return x == other.x &amp;&amp; y == other.y; } int get hashCode =&gt; ((x &amp; 0xffff) &lt;&lt; 16) | (y &amp; 0xffff); } main(){ var p1 = new Point(2, 3); var p2 = new Point(2, 3); print(p1 == p2); // true var set = new Set.from([p1, p2]); print(set.length); // 1 } Looks pretty reasonable, I'd say.
Not necessarily. The way it works in Java and Python, there is a default hashCode function for the top level Object that returns a mutually exclusive value for each object reference, so you don't always have to overload it. Somewhat along the lines of ES5's valueOf() and Object dictionaries (although not implementing valueOf I think always returns '[Object object]'). The more I think about it, if I roll my own and an object doesn't have hashCode on it's prototype, I would just resort to the standard Set functionality which uses the modified '==='.
Thanks you mean that this: function MyObject(){ this.self = this; } Will "work" equal to this?: function MyObject(){ var self = this; } But the second code will use less memory? Is that the case? Would the second self variable be available inside a method called from another method? In other words: function MyObject(){ var self = this; this.method1 = function(){ self.method2(); // will this return self? } this.method2 = function(){ return self; } } I'm a noob, sorry... 
To answer your question in short, method1 won't return anything because you aren't returning, you are just calling method2. I assume that is just a bug, but really your question would be better answered by just fiddling with the code yourself on codepen, jsfiddle, etc. More importantly, you should think about how many instances of the object that will be alive at once. If it is a lot, then you definitely do not want to declare self in the place you are. I would rewrite your example: function MyObject(){ var self = this; this.method1 = function(){ self.method2(); // will this return self? } this.method2 = function(){ return self; } } like this: function myObject() { // private data can be put here // it will remain in memory for the life of myObject // so you could put "var self = this;" here, // but it won't reduce the memory footprint return { method1 : function() { var self = this; return self.method2(); }, method2 : function() { return this; } }; } By moving the declaration into the method call, you allow self to be garbage-collected when no longer in use. It means duplicating the declaration in each method that you need to use it, the duplication may be worth the reduced memory cost (depending on your use-case). I'm more of a polyglot than a javascript expert, so someone with more experience might be able to explain things better. My main point was that you really want to be careful about adding unneeded properties to objects. edit: typos
Thank you, I'll keep learning!
Unfortunately doing the latter example there, you lose the actual Date object inside the Set. Although I guess the work around there is to just use a Map. var x = new Date(), y = new Date(x), z = new Map([[x.toString(), x], [y.toString(), y]]); z.size // 1 z.values() // MapIterator of Date Kind of annoying that you have to do: z.has(x.toString()); // true
Do you even use prototypes? `var that = this;` is useful only in very few cases. 
https://www.modern.ie/en-us/ie6countdown
&gt; sooner or later, there is a very good chance the project will need to be built on a windows machine There is cygwin. It should work fine for the kinds of things that a Makefile does. It may be a culture shock though. What surprises me is that there isn't a port of Make to JS, or something which uses the same kind of artifact (not task) dependency tree. 
It just feels like a crappy way to do it. Makefiles are gross to me, the .PHONY thing alone is just like... cmon yo. But to each their own.
Yes, agreed
&gt; There is cygwin. :( :( :( :( :( :( :( :(
In my opinion, almost always No. In the opinion of the repeatedly informed billpayer. Sometimes yes. Mostly a graceful degradation is good enough, but some people lurve to waste money.
Since javascript has lexical &amp; function-based scoping, there is very few instances where you really need to use this or var self= this; This is how I would write your object function MyObject(){ var self = this; // If you really need to return it in method2.. as that is the only use usually var method1 = function(){ method2(); // this will work } var method2 = function(){ return self; } } The contents of method1 has access to all declared variables in MyObject. Even though method2 is seemingly declared after method1, it still finds it. This is because of variable hoisting, basically JS will declare all variables before doing anything else, so before the function that method1 references is declared, the variable method2 is declared. Honestly I never use this or self in JS, I can only think of one application, and that is chaining commands, other than that I can't think of any uses for it.. Any examples? Generally I use [The Revealing Module Pattern](http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript) Edit: Also it makes no sense to put var self = this in the method declaration as that defeats the whole purpose of the usage of self. However you should still use var self = this, but at the top of your method. It won't be garbage collected, but that is the intention with the use of this/self. Edit: Correction by tyroneslothtrop 
yeah, you have to then convert it back into a Date object, which I suppose is annoying, but not terrible depending on what you're trying to do. You _could_ pretty easily wrap it up into a `DateSet` object, e.g. function DateSet(dates) { this.set = new Set(dates.map(function(d) { return d.toString(); }); } Object.defineProperty(DateSet.prototype, 'size', { get: function() { return this.set.size; } } DateSet.prototype.has = function(date) { return this.set.has(date.toString()); } // etc 
Tetris is a classic game programming exercise.
But once you get it into Vagrant it becomes so much easier to ramp up someone new...
Since you haven't said which browser, there is an [IE11 bug](http://connect.microsoft.com/IE/feedbackdetail/view/950689/bug-with-the-latest-security-updated-compressed-script-files-dont-work) introduced by a recent security update where it neglects to inflate files if the url contains .gz.
Thanks, but no. I wish it was an IE problem, because I simply ignore IE(-only) problems :)
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ a single site, we'll be forced to take action. Thanks for your understanding.
Not unless you can somehow host a little server running in your js engine listening on a port, connect to yourself via loopback, and trick it so the connections from your app to servlet are compressed app-side, then you store the compressed data servlet-side. I'm having a hell of a time describing this without being able to draw it, but I won't bother since I'm sure this would violate way too many security rules to ever be practical. I wonder if there might be a creative hack around WebSocket to somehow do this? There seems to be some debate is websocket will perform the deflate ( http://stackoverflow.com/questions/19298651/how-does-websocket-compress-messages ), but if it's doing that then that might be one way to hook into Chrome's compression.
Be very carefull with var x = y || 10; This will give x the value 10 for every falsey value of y. So if y is 0, x will be set to 10.
Conemu
Uh, that's creative. I'd rather leave the data uncompressed :)
Never heard of it, but if the build step is the problem? Use beefy or something https://www.npmjs.org/package/beefy (also "works like magic" should be a bad thing)
Wow, talk about abusing the back button. The URL is rewritten every time you scroll through another section. I read halfway through the page and then had to click back 15 times to return to Reddit. Ugh.
Good call.
Been writing javascript professionally for 10 years. I think I've never used switch. And maybe ran into it in another developer's code once, if that.
I know beefy. It does help-but you still are loading one big bundle file. Yeah we have sourcemaps to combat this, but for example current Chrome has bug which doesn't take sourcemaps into account when producing new Error.stack. So you are left with cryptic error messages(in angular for example). Browserify build step is fast, but being able to work with raw files while having modules at the same time, that is awesome. "Works like magic" are words I chose because I couldn't describe it better in few lines. There is not so much magic behind it-just two thousand lines of nonminified, heavily commented javascript. That is very little considering how many features it has.
Vagrant is a beautiful thing that has helped to reduce ramp up time by at least 80% on all projects I've worked on that have had at least 4 devs. It's awesome.. but that's one of the few legitimate excuses for writing code that only works in a tiny subset of environments.
I don't disagree with you. However, not being very familiar with Browserify, what is the process for writing an isomorphic package that has slightly different code for server than client? I guess you could just check for the existence of `window`?
JavaScript uses its style of context because of its particular flavor of prototypal inheritance where every function can be a constructor or method and inheritance is handled through *delegation*, rather than *cloning* as in a "true" prototypal language. This system works because you can assign the context at call time. By separating `this` from the referencing environment, the same method closure can be shared across thousands of instances. To lexically bind `this` you would need to create a new referencing environment for every method for every object instance. And in fact you can do that. Just add `var self = this;` in your constructor and also add all your methods to the instance directly from within the constructor, referencing `self` instead of `this`. You probably won't have any issues with memory consumption unless you make tons and tons of objects. Honestly though, you're conflating "unintuitive" and "different". Call a method with a dot operator, and `this` is the instance. Call a function with `call` or `apply`, and `this` is the first argument. Call a function directly, and `this` is the global object or `undefined` in strict mode. It's not that complicated.
Not entirely true. switch (true) { case myAge &gt;= 0 &amp;&amp; myAge &lt;= 10 : // do stuff break; case !(myAge &gt;= 0 &amp;&amp; myAge &lt;= 10): // other stuff break; etc. Although at that point you might as well use if-else statements. 
&gt; Declaring new functions in your 'constructor' function will duplicate those methods in memory for each invocation. With the prototype method, they are created once in memory and each new object you create will pick up the same memory location for each instance. Aaah! great to know! Thanks!
I have been a big fan of gulp in the past, but I also realized the logic of going with Makefiles or npm run whenever possible. It never really seemed practical until I switched to using webpack instead of browserify. now i need to find excuses to use gulp at all, and makefiles are almost always enough.
Thanks for the correction! It has been too long since I learned this. The distinction I was looking for was function-based scope rather than block-based scope.
If you like SystemJS there is the [Steal](http://stealjs.com/) project that builds on top of it and supports ES6 modules, AMD, LESS compilation, etc. Disclaimer: I work for Bitovi, company behind the Steal
RequireJS doesn't need a build step either, but can benefit from it. I know it, and it is supported by a number of tools. Me, and probably most developers, won't even look at an alternative to what they already know, unless it's a lot better, is in a lot more demand, or happens to be used in brown-field project. Module loaders (and JS libraries in general) are many, and life is short.
&gt; I found how to do a calculation to get a week number out of the year (0-51) Unfortunately, week numbers [range from 1 to 53](http://en.wikipedia.org/wiki/ISO_week_date#Weeks_per_year).
This site is unusable on mobile
I see, I hadn't thought about games. Generally it is all about which style you prefer. The "issue" with properties is that they are all publicly modifiable, if you use the revealing module pattern you can practically choose which properties are modifiable. Having public properties can result in behavior you don't want, ex. lets say your main character should never have less than 0 health. If the health is set by player.health, then there is never a restriction on what other parts of your program can do to it. However, if you make it only accessible through a player.setHealth() method, then you can make sure that the restrictions are kept. This is the main difference (also in JS you wont have to deal with 'this'). Ex. var Player = function(name){ var _name = name; var _health = 100; var _isAlive = true; var decreaseHealth = function(health){ _health -= health; if(_health&lt;=0){ _health = 0; _isAlive = false; } } // Here a new object is returned with only the publicly accessible properties and methods. return{ isAlive:function(){return _isAlive;}, getName:function(){return _name;}, decreaseHealth:decreaseHealth } } This also makes it easy to see the accessible properties of the object and makes it impossible for other parts to randomly ruin your code by directly accessing properties that should not be tampered with. Now in games, especially with the x and y example, it is more convenient to have them as properties rather than using public methods, so that could be a reason to use it.
Why does almost every webpage think its a good idea to change hash / pushState while im scrolling? It makes it so annoying to actually go back in your history....
If you drop the build step doesn't this end up with your page making a ton of HTTP requests to load all the JS files?
Yes but the moment and timespan that they consume thememory changes. self is able to be garbage collected if instantiated in method scope instead of object scope. My main point was that he should not be declaring self as a property of this. You didn't seem to make it that far into my post. It was at the very bottom, so you could have at least skimmed and found it.
I responded to spankalee as well. You didn't seem to read my whole post. I explained that my main point was to not declare it as a property of itself. However, there is still a difference in when self is able to be garbage collected. If you have thousands of the object (like in a game), it can make a difference.
Zillow/Trulia
The main driver of the rewrite is AFIK based on the [design docs](http://angularjs.blogspot.be/2014/03/angular-20.html) is to remove support for non-evergreen browsers in order to have a lighter codebase, like jQuery did with jQuery 2. The second main driver is to rewrite in ES6, in order to make Angular application code more declarative using ES6(+) features annotations, type assertions, etc. ,see here the [design](https://docs.google.com/document/d/1uhs-a41dp2z0NLs-QiXYY-rqLGhgjmTf4iwBad2myzY/edit#heading=h.qbaubqkoiqds). I don't see why any of these reasons are a proof that the first version is fundamentally flawed, why do you say that? A bunch of frameworks are rewritten in major versions, see GWT, Play 2. They couldn't be all fundamentally broken. Also several of the goals of the initial design have been moved to 1.3: instrumentation, performance, the new router, refactoring the dependency injection framework out of the code base (see [di.js](https://github.com/cmtt/dijs)). And what about all the other points? 
So what's "a jquery"?
yes it does, but if your browser and server both support SPDY, all the files are requested at once. Guy Bedford shows it here: http://youtu.be/MXzQP38mdnE?t=30m4s
It sure is nice that Browserify is trying to "shim" node.js apis, but I think this can't ever really work. I personally as a web app developer don't need node.js apis in the browser. Even though I must say that http://youtu.be/8gM3xMObEz4?t=20m59s is freaking cool. In my day to day job, I have no need for node.js API's in the browser.
Hmm...doesn't explain: var a = { b: function() { var c = function() { return this; }; return c(); } }; a.b(); //window
&gt; var s = new Set(['a', 'b', 'c']); &gt; [...s].forEach(function(n) { &gt; console.log(n); &gt; }); Uncaught SyntaxError: Unexpected token . (in Chrome 38) Firefox works though.
After testing (first 1000 of each, then 10000 of each), it makes an 8% memory difference. That is not nothing....
I just did some testing, and the memory difference is 8%. I don't consider that negligible.
I think I'd prefer a real build process, with concatenation and minification. You're always going to have a deployment process, so why not do it then?
they only work in an input field and i cant do that
Here is the code in a fiddle. http://jsfiddle.net/86sp0qLc/2/ I just used it in a local file though for heap snapshotting in Chrome. At 1000 iterations, the difference in heap size was 1.7 down to 1.6, however, going to 10000, it went from 2.4 to 2.2 which is where I got the 8% number.
protip: reddit preferences-&gt;options-&gt;clicking options-&gt;open links in a new window now just close that tab to return to reddit
http://i.imgur.com/gcO9Jzi.png :( Is there a way to forbid text selection?
You are ignoring cases where lots of small objects are needed, just to justify your stubbornness. (games?, text-nodes for Atom?) And again, you are missing the forest for the trees, regarding the example and context.
&gt; Neither of these methods works, and they don't work for the same reason. You ignored the part where I argued and you agreed that calling the method directly as a callback was a bad idea. So the method invocation "works" when you don't do that and call it from inside an "anonymous/named on-off function as a callback". (Another instance of you cherry-picking). The topic as you understand it is wrong then, because the topic is my response to the guy talking about this.self = this. You seem to just want to argue now, so please just stop trolling.
yes
It definitely shims most (reasonable) parts of node.js, well beyond "the module load apis like the require method and module.exports". https://github.com/substack/node-browserify#compatibility
They said an extra layer of security, not the only layer, and I agree. Security through obscurity isn't *real* security, but it certainly doesn't hurt *in addition to* taking the proper security measures. Certainly minification will not stop dedicated and/or smart hackers, but I think you overestimate the patience of the average script kiddie. It also provides security against people ripping off your code (if you care). Again, the dedicated will take the time to understand what it does, but it's much harder to reverse-engineer something without variable names.
Pretty much everything except http(s) server and fs. So streams, events, utils, crypto, process. And there is a nice transform somebody wrote that will in line fs calls
I think we need some more details. If you're saying its based on an oracle db I suspect the course is for Java rather than JavaScript. those are actually two entirely different programming languages with very little in common, despite the names. 
Love your work nullobject
Very nice!
-0 also evaluates to false
What if y = null?
RequireJS is still my favorite. I find the compiler especially useful. In dev, I just load the modules separately. No need to compile, build, etc. super simple. Once I'm ready to deploy, I simply include the compiler in my deploy process and everything get automatically combined.
[`_.isUndefined`](https://lodash.com/docs#isUndefined) to the rescue! [It does the same thing](https://github.com/lodash/lodash/blob/master/lodash.js#L7495-L7497).
&gt; 1. Thats the data-react-checksum, I was referring to data-reactId. &gt; 2. Gotcha. I was doing research into this, and this was very helpful. Thanks! 
Good point, but the code it was replacing : if (y) { var x=y; } else { var x=10; } also does this. I'm a big fan of ternary operator for short-handing that if -- this is so you get more control over the if statement (i.e. check `typeof === 'undefined'`)
You don't really need gulp... The build step could just be summed up in one or two shell scripts and distributed in "npm scripts". See here http://mattdesl.svbtle.com/faster-and-cleaner-modules
 _.mixin({ 'isDefined': function (thing) { return !(_.isUndefined(thing) || _.isNull(thing)) } }); _.isDefined(false) // true _.isDefined(undefined) // false _.isDefined(null) // false
Hey, thanks for the link! I do know I don't need gulp and that I can do it with a couple of shell scripts. But then again, gulp is just NodeJS with a little sugar on top of the streams. I prefer writting my scripts (for testing, minifying and browserifying) with Gulp rather than Makefiles or bash. It's just a matter of taste I think. If anybody likes it, awesome. I use it for my own libs. Thanks again for the comment!
Site performs pet peeve: (light|shadow)boxing before I can read their content. Webmaster or Site Admin must experience my frustration, therefore I sign them up for their own junk with their own fucking piece of crap.
you might be right but you sure are obnoxious about it
I checked and the course is for Java.
Removed. You might try /r/ProgrammerHumor or something instead.
I wouldn't really call it syntax sugar when it adds 60+ lines and a whole bunch of dependencies to something that can be achieved in four lines: `npm run build-dev: browserify index &gt; dist/lib.js` `npm run build: browserify index | uglifyjs -cm &gt; dist/lib.min.js` `npm run test-dev: beefy test --live` `npm run test: browserify test | testling` The above could be baked into a module-generator so you always have the commands at the ready, and you don't even need to think about bash. Sorry to critique.. just annoys me when a small module uses a bunch of unnecessary dev dependencies and takes forever to install.
Removed, /r/javascript is not a job board.
The watching section of this article feels incomplete since it only includes how to set up watching with browserify using grunt. In make, similar to using npm run scripts, you can just shell out of the `watchify` command, which takes the same arguments as `browserify`.
It's amazing that two engineers could produce almost exactly the same thing halfway around the world. Here is a link to my github repo and npm module called prodash which does exactly the same thing this library does but builds all the abstractions on top of transducers (an idea fresh from the Clojure community). It's still in progress though I already use it daily. Feel free to check it out. Maybe there's some kind of collaboration possible here. http://www.github.com/stevekane/prodash
Do u even prototype bro?
Am I the only person that thinks currying functions makes them totally impossible to read and understand exactly whats going on? 
Oh cool thanks, I'll check it out.
Interesting point. For FKit I took my inspiration from Haskell, which also curries everything by default. I find that in most instances you get rid of the boilerplate involved in massaging your functions/params into the right form. For me curried-by-default is a win.
Over 300,000 function calls in 4 seconds, and I'm not even halfway done with this page.
meh.
It's a good video, especially for experienced javascript devs. I would have rather spent 3 minutes reviewing the code, instead of watching for 30 minutes.
Good starting guide for JS /u/askmense
I don't think you should publicize the company being based out of Uruguay. I would not rely on a non us based backend as a service company.
no i've never used anything like that.
I would not imagine there would be two of these! You developed it concurrently? Maybe you should join forces...
You seem to have not read any of my comments all the way through, because I keep having to reiterate the same things. **Need for Context** The need for a context is a given. Substituting the above code for an async callback(like calling the method inside a setTimeout) does nothing to change the comparative memory footprint, so why bother? You seem pedantically obsessed with this weird little detail. **Not my examples** You still have failed to acknowledge that I did not create the above examples... the fact that you can't see past that leads me to believe you have mental issues or you are simply trolling, like I hinted several times before. **Memory Effects(meaning of the word could)** I showed you a case where the memory footprint was 8%. Many cases could involve such small objects. You seem intent to ignore such a case. You also seem intent to change my argument. I used the word could, when I said it might impact memory. That does not imply always.... Please read the words I have actually written, instead of the ones you want me to have written.
jQuery replaces the *DOM API*, not ice cream. The DOM API is terrible due to the past (browser wars), leading to all the cross browser API bullshit we have to deal with today. The ECMA 'standard' coerced companies to stop the competitive that was fucking with the web. The API's are there to talk with the C C++ exposed functions, which are VERY different in each browser, which also uses it's own javascript run-time engine. VanillaJS does not 'suck ass'. Comparing jQuery to a compiler and vanillajs to assembly is so just ridiculous. This comment was so fucking outrageous that I had to say something. 
I'm not sure I understand. Steal is building on top of SystemJS, but it extends it with bunch of convenience methods and pluigns.
I was going to mention this too (about computability issues). But thinking back to when I first started web dev.. hjc made a good point. I used to ONLY program in jquery, afraid to touch 'real' javascript. Lots of word-press-esc 'devs' will literally experience jquery as their first, last, and only foray into programming. If your concern is cross-browser compatibility, there are other ways to shim this without a massive library of helper functions.
I just quickly clicked the link and just read the site. From that I got the impression that this is concurrent project which just happens to have similar features...my bad.
Nice, I just seen this problem. Might implement your fix, also need to limit number of characters on #screen.
Sweet job Josh! Really readable source.
What was the problem? I made a joke in the headline but that is a real screenshot, showing the dangers of not sanitizing strings in JavaScript during concatenation.
Fair enough. Personally I like underscore/lodash, but they are quite low-level and don't provide enough of what I would consider a "standard library" in terms of functional programming. That's what I'm trying to do with FKit.
[It's been 9 days](http://www.reddit.com/r/javascript/comments/2hvw2b/sweetalert_a_beautiful_replacement_for/)
Lol, yeah I've been getting that comment a bit actually.
Ok!
That's pretty cool. Pretty rare use case though. In the few situations where you are forced by design to truncate text, even fewer will involve html. Neat implementation though, and an interesting programming problem.
True, but I still thought it was worth mentioning as I myself have fallen into this truthy/falsey trap of javascript quite some times :)
Am I crazy or is _.isUndefined not doing anything like that at all? It uses typeof and checks for undefined as a string instead of checking using the undefined keyword.
You don't *have* to remove all newlines to minify Javascript. Instead, you could choose to remove trailing semicolons instead. The result would be just as short, in character count. And it would be, *oh horror!*, more readable.
Haha I assumed that was the joke. 
The top level IIFE module pattern she used would interfere since it leaves no way to access the program once the page has loaded. But without the IIFE, individual functions could be re-evaluated and the requestAnimationLoop loop would use the new versions next time around. For example, (if you're not using a top-level "use strict"), function update() { updatePlayer(); requestAnimationFrame(update); } function updatePlayer() { // ... } The `updatePlayer()` function could be redefined while the game is running and `update()` would automatically use the new definition. 
I avoid the webkit debugger like the plague. The chrome &amp; firefox debuggers are so much more intuitive and powerful.
Newlines are optional. Semicolons are not. There are cases where they can be omitted, which isn't quite the same as being optional. Without semicolons: var foo = function () { console.log('sacrebleu!') } (function () { console.log('hello') }()) Prints: hello sacrebleu! With semicolons: var foo = function () { console.log('sacrebleu!'); }; // &lt;- the important one (function () { console.log('hello'); }()); Prints: hello
How does this differ from Ramda? Are you using it in production or purely for academic purposes?
Yes and no. I've read that a big problem with lodash is the parameter oredering is Data, Callback which is the reverse of what you'd want for functional composition. That said, I do find lodash highly useful.
I think the point is: Instead of a minifier that compresses to a single line, write a minifier that aims to take advantage of ASI where possible. There are very few edge cases where semicolons are actually required.
Or... you could just press the pretty print button ("{}") in Chrome or Firebug. Firefox's dev tools have a "Auto prettify minified sources" option. Well, debugging minified stuff really isn't something you should be doing regularly.
I really love the evaluator so much, and would really prefere it to the chrome debugger (probably only because im not experienced with it yet). I feel i learn a lot about javascript by dicking around with the evaluator. Like what collection do i get from this etc etc, exploring the dom model. It works on my laptop so must be something localised on my desktop. 
Thank you I'll take a look.
Am I understanding this correctly... this is a javascript interpreter written in javascript? Wait, what happens if you post the source code for the javascript interpreter into the javascript interpreter?
That's just JavaScript in general lol
Perhaps that is the case, but I don't think it should dissuade people from creating their own solutions. Diversity in software is what spurs progress. A good example of this is the headway that has been made in the front-end framework space recently. OP: this library looks pretty awesome and I'll definitely give it a shot on my next project. I'm super impressed at its size compared to Underscore and Lo-Dash.
I tend to do this instead: `foo = (typeof foo === 'number') ? foo : 10` This way somebody can pass `null` or `undefined` and it behaves the same. And you don't end up with string or other types where you were expecting a number. You also avoid all those edge cases with redefinition of `undefined`, not that I've ever heard of that in practice.
Thanks for the tips. I'll use that then. Didn't know about that. Thanks!
That looks good. The only problem IMHO with that one is that it has a big $watch function which could eventually take a long time
Never seen this myself, but I only use WebStorm to debug nodejs code. I use the browser to debug any client side code.
Maybe related to this? https://twitter.com/WebStormIDE/status/520595841510563840
Yes but it lends itself that way to follow similar signatures from practices (like say, node) that prefer `(error, [..data], callback)`.
Sounds like that site isn't following best practices.
So to clarify, since you aren't required to have a build step, you require things from a production, and quite large JS app, directly from things like npm and github?
/u/alfredwaltz that's amazing effort~! I will include this in the blog article
How I imagine op: http://vimeo.com/m/85298007
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ a single site, we'll be forced to take action. Thanks for your understanding.
Nice plagiarism. http://conceptf1.blogspot.com/2013/11/javascript-prototype-property-and-Inheritance.html edit: replaced wrong link
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
In order to use a method invocation syntax, the method has to be a property of the object. When c is called, it's not using method invocation syntax. If you make c a method of the object, *and* call it using the method invocation syntax, then it will work. Try something like: var a = { b: function() { var c = function() { return this; }; this.c = c; return this.c(); } } Now, when c is called, the this that's passed in his object a, so that's what c ends up returning. 
I'm not like that in general, but I find the style causes more people to listen and respond.
I'm not like that in general, but I find the style causes more people to listen and respond.
The only time I've used the debugger in WebStorm is in unit testing. Haven't had this issue. With that being said, for normal debugging, I use Chrome developer tools
&gt;© 2016 Askmense.com. All rights reserved. LOL
1) Gradient if(!window.i1) { window.i1 = 0; } if(!window.i2) { window.i2 = .4; } if(!window.i3) { window.i3 = .7; } var inc1 = function(){ if(window.i1&gt;1){ window.i1 =0;} window.i1 += .1; return window.i1;} var inc2 = function(){ if(window.i2&lt;0){ window.i2 =0;} window.i2 -= .1; return window.i2;} var inc3 = function(){ if(window.i3&gt;1){ window.i3 =0;} window.i3 += .2; return i3;} color = { r: inc1(), g: inc2(), b: inc3() }; var distance = Math.sqrt(((x - 50) * (x - 50)) + ((y - 50) * (y - 50))); z = (3.5 * Math.sin(((TimeSeconds * 0.5) - (distance * 0.09)) * Math.PI)); 2) Random color = { r: Math.random()*.75, g: Math.random()*.75, b: Math.random()*.75 }; var distance = Math.sqrt(((x - 50) * (x - 50)) + ((y - 50) * (y - 50))); z = (3.5 * Math.sin(((TimeSeconds * 0.5) - (distance * 0.09)) * Math.PI)); 3) B&amp;W random var rand = Math.random(); var bw = rand &gt; 0.5 ? 1 : 0; color = { r: bw, g: bw, b: bw }; var distance = Math.sqrt(((x - 50) * (x - 50)) + ((y - 50) * (y - 50))); z = (3.5 * Math.sin(((TimeSeconds * 0.5) - (distance * 0.09)) * Math.PI)); 4) Trippy cool thing if(!window.i1) { window.i1 = .6; } if(!window.i2) { window.i2 = .2; } if(!window.i3) { window.i3 = .7; } var inc1 = function(){ if(window.i1&gt;1){ window.i1 =0;} window.i1 += .05; return window.i1;} var inc2 = function(){ if(window.i2&lt;0 &amp;&amp; window.i1&lt;.9){ window.i2 =1; } window.i2 -= .1; if(window.i2 &lt;0){window.i2=0;} return window.i2;} var inc3 = function(){ if(window.i3&gt;1){ window.i3 =0;} window.i3 += .3; return i3;} color = { r: inc1(), g: inc2(), b: inc3() }; var distance = Math.sqrt(((x - 50) * (x - 50)) + ((y - 50) * (y - 50))); z = (21.5 * Math.sin(((TimeSeconds * 0.5) - (distance * .1)) * Math.PI)); 
If it's an npm package that isn't browser-compatible, you can swap it out during bundling via the `package.json`. If you need to use a DOM on the server, you can use a node-compatible implementation and just swap out the module for something that simply exports the native browser equivalent. If you need to mess with window globals, though, you're simply doing it wrong. Basically: extract the differences into api-equivalent modules and then load one or the other via browserify.
Sure, but you still end up creating two functions. This isn't horrible, it's just something people sometimes forget (with hilarious consequences).
No, you run jspm install which downloads it and only after you have a local copy, you are able to require it.
Thank you. :)
Going to assume this is Javascript and not Java (you mentioned both). You haven't really explained how the groups work so I can't comment on that. I'll also assume you need some sort of object to store results by name and/or group, like results.a.Becky and that this is a student exercise and you don't have to worry too much about the input file not having consistent formatting. You have each line as a string. Split the string into an array using a space as the separator and read the various elements. The "Type" would be array[2], the number array[3], etc.
I think this might have been what Geoff was getting at. Meteor's packages are not supposed to be platform-agnostic like that. There's no need to write separate packages for separate environments, just check the current environment and use the appropriate API: Meteor.isServer ? doServerStuff() : doSimulationStuff(); This style complements Meteor's focus on creating client simulations for server code to eliminate the network delay between an RPC call and the eventual DOM changes. I feel like that's what this blog post is trying and failing to say. In Meteor you can create one file, tell Meteor that both environments should run that file, and then within the file you can specify environment-dependent code if needed. Or make two completely different files and tell the package to run one on the server and one on the client. Or make two different packages and "use" (use its exports in the package but don't export any of its exports to the app) or "imply" (use its exports and make them available to the application) them from a base package. It's just a stylistic thing - when I use the command "`meteor add tmeasday:iron-router`" I get both the client and server APIs from the Iron Router package automatically. These are partially isomorphic APIs, but not identical. But the functionality is similar enough that it makes sense to create a single, environment-aware package. It's also easy to create a package which uses both the client and server API's from another isomorphic package, and then exports its own isomorphic API. The application doesn't have to do anything to enable isomorphism - I can write a single application file that will run in both environments which uses an isomorphic package's API. My own code can then be made more environment-agnostic, because the package authors have done the work for me.
this is lovely
No, I didn't get any repost notification and I didn't see that article before.
regarding 2) It's really easy to package things in UMD, and you can support almost everything. I use webpack, which also can package dependencies for me (makes sense in some cases). https://github.com/jeffling/ng-tether/blob/master/webpack.config.js Browserify can probably also do this. 3) For front-end stuff, I recommend at least supporting bower as well. It's pretty easy, you don't have to worry about keeping it up to date with tags either 4) With testing, testling-ci is a really good choice and gives you a nice badge to use as well. It's super easy to set up. 
The introduction of the video implies that you need XHTML in order to use javascript. 
The above code defines a function module which only parses the record text. To complete the task, you just need to run through the parsed records and perform the tally. var records = parseRecords(text); var tally = 0; records.forEach(function(record){ if (record.action=='add') tally += record.value; else if (record.action=='subtract') tally -= record.value; else throw new Error("Unknown record action ("+record.action+")"); });
You still did not read what I wrote... I did not come up with the example. You seem to have some type of handicap that won't let you understand that....
Tyrone is intentionally misleading you. The timeout works fine if called like this(he will not admit it): setTimeout(function() { bar.method(); //Good, this will work },200); Calling the method directly as a callback is not a good practice. Calling it inside a callback is better and gives expected results. If debugging is an issue, you can still name the one-off function. I have pointed out several things to him and he just seems to want to troll.
Lokhura has an excellent answer with built in ES5 array methods. If you need further browser support, here's what I came up with: http://jsfiddle.net/m8pky9jq/1/ I keep record of all the data throughout the process. Check the console for the output
Co-author here. Nostalgic for a web component of years past? Submit a feature request! Also pull requests are definitely welcome.
I'm curious why you went with attribute directives and not element based. It only seems halfway retro, the full monty would have been an honest to goodness blink tag. 
Should be colon not equals I guess. Although in ES6 you can end up with equals on the left-hand side of an assignment, so the following is actually valid var { Casey = {rate: 70, active: true}, Camile = {rate: 50, active: true}, Gordon = {rate: 20, active: false} } = {Casey: {rate: 10, active: true}}; Here Casey is {rate: 10, active: true}, Camile and Gordon are default (rate 50 and 20 respectively).
Blink and Marquee can be used either as elements or as attributes. So depending on how comfortable you are going full monty you can take it there :)
The blink tag is a disease and it should be a crime to propagate it. Good work!
Obviously, you didn't read it... My last comment asked you a question.
I read that book, and it was a good book overall, but there were quite a few errors. The proofreading must have been nonexistent.
The original doesn't solve any problems either... You are a really good troll. I have to hand you that.
Thanks for the explanation, after consideration I agree with you. Keep up the good work!
I edited it a couple mins after making it, you made your comment a good 7 minutes after the edit. Or did you take that long trying to come up with something snarky?
This is truly inspiring. However, I would recommend, for the true geocities experience, that you make the page white on black.
See, you aren't reading what I have typed at all. That is the disconnect. The example I adapted was from this post: http://www.reddit.com/r/javascript/comments/2iqaun/if_you_are_surprised_by_how_this_works_in/cl4qwnj What problems does that example solve? none. I simply adapted the example he used. You need to work on your reading comprehension or stop drinking. Maybe the disconnect is that you don't understand how threaded commenting works.
That doesn't solve any problems because it doesn't have any problems with context. (that is the same issue you take with my example...) As for memory and where to declare self, look at this: http://pastebin.com/CWna170A In that, you have to switch the object number and comment the correct timeout. After doing so and profiling there is a 25% memory savings. This example would be common for particles that have an event that doesn't fire for all of them. This is a common case. If 50% are not fired then a 25% savings is seen. You will probably ignore this too though...
 var func = function (param) { … }.bind(this); thing.addEventListener('event', func); /* later */ thing.removeEventListener('event', func);
You aren't even going to touch on the memory savings I pointed out... Why trolling so hard? Onto the topic: method3 is really bad practice in good and bad object. method2 is fixed by calling the method inside of a callback, like I have continually pointed out. You keep forgetting this and you keep bringing it back up. My link in the previous comment also shows you that the overhead of the anonymous function is nowhere near an issue and still gives a memory savings. You didn't even look at my code link in the last comment though. 
A transducer is a way of composing functions that allow you to differentiate the operations that happen on a given input. For example, a map/reduce composition will handle mapping and reducing an input set. A transducer would allow you to compose a map/anything function. So you could have a map/reduce, map/filter, map/whatever composition and reuse it. This was my understanding of it in action, at least.
Great, thanks man, another one solved :p
Got it!
That's correct. Checking the typeof string is safer than checking on `undefined` because `undefined` can be redefined.... _.isUndefined is just a wrapper to it, for convenience. I'd never do anything like check the return of void 0 or the IIFE that /u/tyroneslothtrop did above just because of code smell.
Sweet. That's how you bring it. 
This is the dopest shit I've seen all day
I agree with you. But how do you go about determining the size of an object in JavaScript?
I have literally no idea what this headline means.
Thanks for understanding :)
Sure, or put a big sticker on the language that says "drop your expectations or it's gonna be a bumpy ride" :) `new` is also quite a bit different from virtually every other language's `new` keyword, and that gives a lot of beginners issues. The real issue is that JavaScript is a language that was designed to work like prototypal languages but look like classical languages. That's bound to confuse people who just jump into the language, which is why I cringe when JavaScript books/classes cover constructors before covering all the basics of objects and functions, including context, delegation, the dot operator, and call/apply. I suppose the blame can be laid with the people teaching JavaScript, but like your OP suggests its mainly confusing if you have an incomplete comprehension of the language and are trying to fill in the gaps with patterns from other languages.
&gt; and performs the same number of operations as myObject2 in a shorter timespan, Can you show me a jsperf? I made one and they had the exact same number of ops per second. * the deviation was too small to be significant. Maybe their testing is flawed. Maybe my tests were flawed. Please create one showing me a higher ops per second. &gt; I'm not sure how often people will be instantiating 100,000 tiny objects like this, You also aren't looking at this the right way. Many apps could have 100,000 objects. At 100,000 objects the difference is 25 megs of memory(just for those extra references) regardless of object size (each individual reference should be the same size since it is just a reference).
Chrome has a profiler in the dev tools. You can use the snapshots of the heap and you can also use allocations over time, depending on what you are trying to look at.
Could be more useful with an accompanying csp js library.
news.ycombinator.com released an API via Firebase, a backend provider. This is just a front end built with React.js using it
How many people are participating? If it's less than a hundred or so you could break the data out into an array of people then just shuffle the array. Every person then gets assigned the following person in the array which ensures no two people are giving gifts to each other. Only people compatible with giving a gift to one another (same country or whatever other metric) are in the same array.
Thanks. I'll have to check it out. Nothing like empirical evidence. 
Yeah, good example. If "new" was called something else, it would have been clearer. 
instead of: document.getElementById('myPercent').style = 'width: 44%'; use: document.getElementById('myPercent').style.width = '44%'; 
I will start off by saying, I don't have much experience with the Chrome cpu profiler. I did the same tests and yes, myObject1 is faster and it looks like the anonymous function at the setTimeout is the cause. 30% cpu for 27 megs of ram [27% ram in this case but not all cases]) So, I concede that the cpu hit might not be worth it in most cases. I never said it was worth doing in all situations. However, sometimes a 27 meg memory savings is the difference between iOS killing your app or not. *fixed phrasing
wtf?
Hello, this is a divulgative article, but I think type combinators can be very useful also in practice: I'm thinking of using them as a JavaScript internal DSL to describe, with a compact notation, the structure of a JSON. Say you have this JSON (excerpt from the GitHub JSON API `https://api.github.com/repos/facebook/react`): { "login": "facebook", "id": 69631, "avatar_url": "https://avatars.githubusercontent.com/u/69631?v=2", "gravatar_id": "", "url": "https://api.github.com/users/facebook", "html_url": "https://github.com/facebook", "followers_url": "https://api.github.com/users/facebook/followers", "following_url": "https://api.github.com/users/facebook/following{/other_user}", "gists_url": "https://api.github.com/users/facebook/gists{/gist_id}", "starred_url": "https://api.github.com/users/facebook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facebook/subscriptions", "organizations_url": "https://api.github.com/users/facebook/orgs", "repos_url": "https://api.github.com/users/facebook/repos", "events_url": "https://api.github.com/users/facebook/events{/privacy}", "received_events_url": "https://api.github.com/users/facebook/received_events", "type": "Organization", "site_admin": false } You can describe succinctly the structure of the API payload with a struct combinator var Payload = struct({ avatar_url: Str events_url: Str followers_url: Str following_url: Str gists_url: Str gravatar_id: Str html_url: Str id: Num login: Str organizations_url: Str received_events_url: Str repos_url: Str site_admin: Bool starred_url: Str subscriptions_url: Str type: Str url: Str }); Now this is a simple example (no nested structures) but when the payload is more complex, the notation become even more useful
When I see concepts like transducers I'm always torn in two: **my theoretical side** is excited: reducing (pun intended) a bunch of different operations to a minimal set of basic, composable operations is an awesome intellectual challenge. I imagine how succinct, reusable and multipurpose could become my code. **my pragmatic side** is skeptic: in functional programming it's a little step to end up with incomprehensible code, for me and my coworkers: var inc = function(n) { return n + 1; }; var isEven = function(n) { return n % 2 == 0; }; var xf = comp(map(inc), filter(isEven)); console.log(into([], xf, [0,1,2,3,4])); // [2,4] vs var inc = function(n) { return n + 1; }; var isEven = function(n) { return n % 2 == 0; }; [0,1,2,3,4].map(inc).filter(isEven); // [2,4] The latter is comprehensible by everyone (and no additional library). Ok you iterate twice but if you really (REALLY) have performance problems, maybe you'd end up with something like this: var input = [0,1,2,3,4]; var output = []; var x; for (var i = 0, len = input.length ; i &lt; len ; i++ ) { x = input[i] + 1; // map if (x % 2 == 0) ouput.push(x); // filter } 
Clever, but there's still an ~0.024% chance of failure. http://jsfiddle.net/4a4mbskt/1/
I may be misinterpreting the function's purpose, but couldn't this be accomplished with some CSS? eg, `white-space: no-wrap; overflow: hidden;`.
 var { Casey = {rate: 70, active: true}, Camile = {rate: 50, active: true}, Gordon = {rate: 20, active: false} } = {Casey: {rate: 10, active: true}}; Is using es6 destructuring and defaults and is equivalent to var obj = {Casey: {rate: 10, active: true}}, Casey = obj.Casey || {rate: 70, active: true}, Camille = obj.Camille || {rate: 50, active: true}, Gordon = obj.Gordon || {rate: 20, active: false};
webpack seems quite similar to what jspm is trying to do. They even have wreq for loading commonjs modules in the browser, which is awesome, but I think they should have more basic examples for the browser on their page. Also they don't offer ES6 transpilation, do they? You can use ES6 module syntax, but no other ES6 features. That is a shame.
webpack is more like browserify then jspm. it bundles stuff for web, liek npm modules. but also amd, es6, coffeescript, css, html, less, whatever if you add some loaders (which are also npm modules). webpack has a shitload of plugins for advanced bundling I've not found anywhere else, stuff you need for big projects. short intro: https://github.com/petehunt/webpack-howto
Everyone can request a discount. You don't need an .edu domain and you can specify what you are. I don't know they will accept non-students but if they have options for non-students then I think they might accept people under the motto get them hooked.
[Context](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction) and a [hint](http://www.elated.com/articles/changing-page-elements-with-the-dom/)
FKit and Ramda are different shaped hammers, trying to hit the same nail. One major difference is that all FKit list functions/combinators work on both arrays and strings. FKit is also slightly leaner. It's definitely not for purely academic purposes, I built it to solve real problems, although I can't say that I have an app in production using it (yet).
Yes, and? You're still creating two functions: * an anonymous function (`function (param) { … }`) * the result of calling `Function.prototype.bind` on that function. My point is that `bind` always returns a new function, so a beginner might try this and wonder why it doesn't work: thing.addEventListener('even', this.onEvent.bind(this)); thing.removeEventListener('event', this.onEvent); // doesn't work thing.removeEventListener('event', this.onEvent.bind(this)); // doesn't work either
https://news.ycombinator.com/item?id=8416693
Button shake and Modal popup shake. Tested in latest browsers working well. http://i.imgur.com/rBs56pB.jpg
Yes, but no. There's nothing stopping you from releasing your npm packages in a way that allows them to be executed in both node and the browser. The module author can specify a `browserify` field in the module's `package.json` just like you can in your application using that module. The only difference is that instead of deferring the decision whether the code is being executed on the server or not to a hard dependency like `Meteor.isServer`, that decision is deferred to the build process for the client-side code instead. You still have some parts that will only be used on the server and some parts that will only be used on the client, in fact you may indeed have very different entry points to your application (e.g. in React calling `renderComponentToString` on the server vs `renderComponent` on the client). This is a good thing -- the most common complaint levelled at simplified Meteor tutorials that don't distinguish between client and server at all is the utterly horrible security implications this creates (even if "you'd of course never do this in the real world", ~15 years of bad PHP tutorials and the resulting SQL injections prove this teaches bad security practices). IOW, when you use browserify to create isomorphic packages you write your browser and node code in the same package but use `package.json` to replace imports of server-specific modules with imports of client-specific modules wherever necessary. If you use isomorphic modules, the module authors have already taken care of doing that for their dependencies.
Sure, as I said, this isn't Meteor not having good security, but simplified tutorials leaving security as an exercise to the reader. Actually the article you linked states that `autopublish` and `insecure` are the default. Sure, this helps with rapid prototyping, but the reason people complain about the unsafe defaults is that defaults matter: you may argue that it's the developer who's to blame if they don't change the unsafe defaults, but that doesn't help the users or customers who will be harmed if the developer screws up.
See [this answer](https://www.reddit.com/r/javascript/comments/2it5eu/fkit_everyday_functional_programming_in_javascript/cl6fzxt).
What does your code actually accomplish that three browser bookmarks to those search sites could not do?
I've used [rumble](http://jackrugile.com/jrumble/) in the past.
Cool man, I like the straight-to-the-point explanation.
how? a little explanation would be nice.
You can configure the browser to up front request all the JS it requires but as individual easy to cache files, when using SPDY/HTTP2 which supports multiplexing you will get assets almost as quick as in a bundle.
Neat idea. Would be cool if we could save and share snippets, and have a few examples to choose from, kind of like how ShaderToy works. Here's a quick one: http://pastebin.com/R8bZJ9wf Screen: http://i.imgur.com/BYMq3Rq.png
I think SystemJS is really targeting the ES6 world, I'd rather build on a platform standard then AMD or CJS. Imagine in 5 years when all modern browsers/node.js have ES6 modules and loaders, why would you use legacy technologies?
I never thought I would laugh this hard in the js subreddit lol
Sorry for the late reply! Actually, it should work well if you put `title` attribute on the image or maybe use some other plugin for hover functionality. baguetteBox uses only a click event. I shouldn't interfere with it.
Thanks, I didn't really understand how you could communicate between two different sites before doing this, so I wanted to give a simple explanation that would help people who are in the same boat. As I continue working on it I'll make videos talking about the different pieces in more depth. 
Thanks Capaj for posting about jspm here! The primary advantages over browserify I would say are: 1. All dependencies are peer dependencies in jspm. 2. The full version solution is contained in a single configuration file, which can be version-controlled and easily shared (like npm shrinkwrap and the exact node_modules folder state combined into a single manifest). 3. Because it is based on a dynamic spec-compliant browser loader first, dynamic loading of modules in the browser can be done very easily and naturally. Then of course yes there are lots of features as well, but I would say those are the unique points. Note that jspm and SystemJS does in fact build full bundles of all module formats (including ES6 -&gt; ES5) using SystemJS Builder (https://github.com/systemjs/builder).
That's still not faster than with the original request though, and one request has no extra requirements.
Great idea, does it only work in London? I tried Javascript in San Francisco and it returned nothing. Same for San Francisco, CA? For C++ in San Francisco it returned a guy named Francisco somewhere else. I think maybe it doesn't like a space in the name of the city. I tried Oakland and it returned a bunch.
jspm does actually support bundling, but we allow the optimization potential of separate files in future. With HTTP/2 separate files are useful as it allows the browser to handle fine-grained caching of shared resources, instead of having to always custom optimize bundles. To build all modules into a single script file, you can use `jspm bundle moduleName --inject` that runs SystemJS builder which is just like browserify.
Ah, I was assuming you meant using `addEventListener` when you said `onkeypress`. Yeah, use `addEventListener` or a library to do that for you.
Hey, no offense taken. I think it makes sense maybe in this case just creating those 4 scripts and that's it. I didn't think of that. Thanks :)
Hey, this video is a serious academic study of game theory and automation! Don't muddle the discussion with silly jokes (〜￣▽￣)〜
Yes I deleted it for a reason. I made a mistake. You should have understood that. The fact that you didn't indicates you still want to dogpile on me. The word "some" can't include me? As you pointed out, the workaround isn't particularly hard or extra overhead.
How does the scraper work?
Pretty cool. Would you add filters on top of the search box to filter for hireable, primary language, etc? I'm just looking through the GitHub API at what it returns for location search and user search.
I agree with this. Create grouping fields (country for now but it could be more) and iterate through each unique combination of those fields filtering the matching people into arrays. Randomize each array then match inside of them using a basic shift by 1. Taking a look at the script would help too.
There's a `==` operator? edit: it was a joke, because people tell you to "never" use it. Ha.
And as your example shows, support for some initialization phase would also be nice.
lol ! your edit made it clear now.
Naming things is, at least for me, much harder than all the guides make it seem. It's clear that you want to be as short as reasonably possible while also being unambiguous and otherwise reducing the mental burden of parsing. The tricky part is understanding the true purpose of a variable or function, which often gets revealed by future changes. To use the example, there's no way to know if `isLegalAge` is the right name without seeing how it's used. If it's checking whether a person is of legal age, then yes. If it's checking whether a transaction is legal, then no, because other checks will be added later. If it's checking whether a transaction is allowed, then no again, for the same reason. Yet it's entirely possible that `isLegalAge`, `isPurchaseLegal`, and `isPurchaseAllowed` would all contain the exact same code.
thanks @kenman! yes I just join the reddit, sure I will follow the instruction given in provided page.
You're all down-voting sarcasm? Isn't this reddit?
Thanks! And welcome to reddit :)
It will be. Soon. For now, it's thunderdome.
It's an HTML5 game, and nothing has been done to obfuscate the HTML, so there are elements that look like this &lt;span class="player-card 5-h"&gt; that represent different cards. It updates using polling, every 5 seconds it checks to see if there is an active card ( which means its our turn ), and if so it grabs the model and fires it off to the node server. so: setInterval(function () { mainLoop(); }, 5000); I'm going to change it so it watches the element where a new card spawns, instead of checking at set intervals.
You could use mutation observer. Cool project btw. 
I ran the performance comparison in Firefox. The == with different data types was by far the slowest, but the others all ran at approximately equal speeds, and == with the same data types was actually slightly faster. At any rate, I use == almost exclusively in my own code. It's shorter, easier to type, and matches up better with what other C-style languages use. My impression is that well-written Javascript code will almost never be comparing different data types anyway. I mean, if you know that little about what you're comparing in the first place, then how is the result of the comparison going to be useful? I'd rather just make the conversions between data types explicit when they're needed. The one case I'm particularly interested in, though, is comparison with null, since I use this as a standard check for uninitialized variables (which might otherwise be of whatever type). Does X==null suffer from the performance penalty shown in those tests? And if so, for which types of X?
Thanks so much. I heart your work.
== in JavaScript, albeit the same operator, is not the same as C/C++/Java ==. In Java, it would more closely be related to: ((Integer)5).toString().equals("5"); Even then, it's still not the same for objects such as Dates... Java: Date x = new Date(); Date y = new Date(x); x.toString().equals(y.toString()); // true JavaScript (not the same): var x = new Date(); var y = new Date(x); x == y; // false This works though: var x = new Date(); var y = new Date(x); x &lt;= y &amp;&amp; x &gt;= y; // true And so does this: var x = 5; var y = '5'; x &lt;= y &amp;&amp; x &gt;= y; // true &lt;, &lt;=, &gt;= and &gt; coerce to a primitive via Object.prototype.valueOf; == is partial coercive (primitives only) and === is not at all.
Did you try Ans[1] ?
Your post was caught by the spam filter because you used a URL shortener; please repost with it and it should go through. Also, since I see you were trying to link a reddit post, reddit already has shortened URL's: just look in the top right of the post where it says "shortlink". For instance on this post, it's `http://redd.it/2iz9eu`.
Sidenote: Whenever you want to reference another redditor in a comment, prefix their username with "/u/" instead of "@" (/u/electric_creamsicle for example). Reddit will link to that users page and also will notify them if they have Reddit Gold.
They are already doing your job for you....
That's cool, looks like it needs to be documented though I double checked the readme before mentioning that.
You need to learn a bit about variable scope and references to understand. Short answer, if you want to make a reference to the array available everywhere, then you should make a global reference. If your code is running in a browser, then 'window' is a reference to the globals, so in your src.js you can write 'window.myarray = [...]' and then from any other script you can use 'window.myarray' to get the array.
I purchased JavaScript Allonge even though you made it free. Love your work Redge, keep em coming!
&gt; shortlink thnaks
I made a simple proof of concept for an idea I had, check it out if you have time. Controls: On desktop, WASD to move, move mouse or arrow keys to look around, space to place block. On mobile, move device to look around, one finger touch on the bottom of the screen to go forward, two to go back, tap on the top to place a block. Get a few other people to go on with you. You should be able to see them and their actions real time. I haven't done significant load testing, so it may get slow.
Wow, nice! And thanks for the tips &amp; advice, good ideas.
Thanks so much for this!
With mongodb you can use a neat function called [`aggregate`](http://docs.mongodb.org/manual/reference/method/db.collection.aggregate/) -- it is comparable to groupby/having in sql, but it allows for quite a bit more in terms of bringing down information nested deep within a document. For authentication, you could use [passport](http://passportjs.org/) which allows for different authentication providers. Authorization is a bit trickier -- if you are already using express, you can have some middleware that throws a 403 if certain conditions aren't met.... here's a really simple example that I haven't tested at all : var express = require('express') var route = new express.Router(); route.get('/', checkAccess, doTheThing)) function checkAccess(req, res, next) { if (user_has_access()) return next(); else res.status(403).send('no access'); } function doTheThing(req, res) { res.status(200).send('you made it!'); } &gt; ...or gives short answers and ask you to read a gigantic docs just to understand a simple thing Reading the docs is the name of the game. But as with any technology you can usually use google to find tutorials, https://www.google.ca/?gws_rd=ssl#q=nodejs+authorization+tutorial https://www.google.ca/?gws_rd=ssl#q=mongodb+aggregate+tutorial
[I made you some round yellow balls.](http://i.imgur.com/l3dJ2fM.png) Edit: My color changed from yellow to green!
I saw that. 
The more blocks I can see, the slower it gets. If I see less blocks it performs significantly better. That said, it never slowed down enough to get annoying.
file1.js var my_array = []; file1.html &lt;script src="file1.js"&gt;&lt;/script&gt; &lt;script&gt; console.log(my_array); &lt;/script&gt; That should work. Look closely, does the script tag referencing the external script have a closing tag? 
That's exactly how it's being for me, but your balls have definitely been causing lag. I've wiped things once or twice since posting to help with this. (that's why your color changed).
Now turn it into CS 1.5 :) 
Nice! Bookmarking this for when I'm not out drinking 
If your code ever has the chance of going open source, then you should always write it as *if* you are working on a team. ;)
I'm logging some basic traffic stuff. Sorry, not sure what TTP is?
Time to penis. :D
If you're using `$cookies` as a fallback, note that it is currently only capable of writing session cookies. Once the browser is closed, the cookie will be deleted, along with your stored data. `localStorage`, however, will keep the data stored until cleared by the user or the browser is uninstalled. It may be useful to update this library to fallback to long-living cookies with a max age of a year or more.
This looks great, will definitely be checking this out.
The guys say "i will add a bar for search in our site", this script seem easy, of course i can suggest to implement google (some other people already suggest), i think with this script they can start to learn how a search engine works, at least the array is like a little DB no? Anyway, it was on a group of learning HTML-JS-CSS, i see other people suggest to use php and mysql but the guy don't know these language, other people say that is not possible only with JS so i suggest this.
It's definitely possible. Depends on how much data you are searching across. If you can search on the server, use ElasticSearch.
Take a look at `angular.copy()`. It helps to think of your model as the source of truth. So when you want to allow users to make edits, but not have it be applied to the model (source of truth) until the user clicks "save", then use `angular.copy()`. This allows users to make edits on a copy of the model. Once they click save, you can use `angular.extend()` to merge the copy into the original model.
Is this only good for Nodejs or also works in browsers? How much of the browser market is covered so far? because even if it becomes a standard, until people ditch their old browsers the standard will not be applicable.
1. Javascript is a language, similar in syntax to C and is used to make a HTML/CSS page more interactive. 2. jQuery is a library written using Javascript. It offers a very easy way to manipulate the DOM 3. Javascript has incompatibilities in different browsers, so we use jQuery to do things a standard way that should work in all browsers. 4. We load the jQuery library in the &lt;head&gt; section. 5. We put our Javascript inside &lt;script&gt; tags at the bottom of the &lt;body&gt; section. 6. jQuery looks for the jQuery ready function and will execute the code in there AFTER all the html and css is loaded. 7. Typical stuff we code in jQuery might be: - display the current date in the &lt;div&gt; called "todays_date" - trap the click event on the &lt;div&gt; called "main_menu" and when it occurs, run the following code. - trap the click event on the submit button for the form called "contact", validate the input fields and send the data to the server to be processed. 8. jQuery has a cool library called jQueryUI which can be used to do cool screen effects such as popup boxes, tabs, menus, animations etc. so you should google this and try to use it. The jQuery UI page has lots of examples including full source code for each example. 9. Go to jsfiddle.com and practice your javascript in here. 10. Some people on Reddit dont like but I still like and recomend the w3schools Javascript page where they shows you code and allow you to click a button to try it yourself: http://www.w3schools.com/js/ 11. People in here and in /r/webdev are really helpful if you get stuck and so is the stackoverflow site: http://stackoverflow.com/tags/javascript/info 12. Good coding info: - all javascript variables are global unless you put the word "var" in front of them so use var liberally in your functions. - use literal objects to keep your code clean e.g.: ui_login_screen = { logged_in_flag: 0, // used to track users status init: function() { // some code }, set_events: function() { // some code }, process_help: function() { // some code } } ui_login_screen.init(); - avoid Javascript frameworks until you have a good grasp of plain Javascript and jQuery functionality, then look at frameworks such as Angular, Ember, Knockout etc. - consider using and learning JSUnit to test your code as you develop it. Hope that helps a bit. 
I definitely agree that every tutorial dealing with data transfer and storage needs to focus on security, regardless of the framework. I remember there was a PHP tutorial on w3schools that had a blatant SQL injection vulnerability for years before they fixed it. Luckily, every link on the first page of google results for "meteor tutorial" mentions autopublish/insecure, except for one very old article from before Meteor 0.5.0 that at least expresses concern about data security. I guess I'm a little ambivalent about safe defaults when it comes to those packages. They mention them pretty prominently in the docs near the top under Data and Security, as well as several more times throughout. You also get a CLI warning if you try to set up a publication with autopublish on. There is a possibility that some security-oblivious developer, having missed or ignored all warnings, creates a production app that not only fails to properly validate data as they probably would have in any framework, but also gives read/write access to all collections except `users`. That possibility isn't something I lose sleep over, though. I think the other side of the coin is packages like `browser-policy`, `force-ssl`, `audit-argument-checks`, and `oauth-encryption`, which are not yet default packages for various reasons, but simplify implementing various security features even if you don't have a clue about security. And the drop-in `accounts` packages give devs a dead-simple, fully-featured SRP+OAuth accounts system, which helps prevent inexperienced developers from trying to roll their own terribly insecure auth schemes. I would say that as long as they RTFM, Meteor makes it much easier for novices to secure web applications than many frameworks, and easy security for developers is a good thing for users.
fyi, typo &gt; private state, delegation, rotected methods 
Grunt traceur for those who want to include it in their build process: https://www.npmjs.org/package/grunt-traceur
I've found [this site](http://html5gameengine.com/) to be quite helpful. If you sort by rating, you'll find [pixi.js](http://www.pixijs.com/) and the [CreateJs Suite](http://www.createjs.com) at the top of the free frameworks My understanding is that both of those frameworks are fairly low level in that they handle the rendering but not so much the gameplay stuff. You should definitely consider using them, but if you want a framework with more of the work done for you, maybe consider [Phaser](http://phaser.io/). It's build on top of pixi.js (which is the highest rated rendering engine on the list), but it also provides you with things like collision detection, various physics engines, preloading, entity classes etc. Phaser's documentation is quite bad - they don't include inherited fields and methods in their documentation so you have to step through each level of inheritance to find the details on the scale property for example, but the actual code is quite solid.
The selection of available options for testing seem really weird and not helpful for anything. Popularity contents such as this promote the continued dominance of horrible technology.
Ya, if you define a variable outside of a function, it'll be global even if you use "var".
outside is global, inside is local ONLY is preceded by var when or before it is first used in the function.ie. func() { var x; x = 2; // local } func() { // some code var x=2; // the var declaration does not have to be at top of function x=5; // local } func() { x=2; // x is global } y=2; func() { y=5; // y is global } As much as possible, try not to use global variables. Try to pass variables in as function arguments or use the javascript literal object notation 
Those `{% ... %}` blocks would really annoy me. Have you seen [Jade](http://jade-lang.com/)?
[thanks!](https://github.com/raganwald/javascript-spessore/commit/9a519f4b22b5ee7ef7d466f69aac6f7111d0c31e?short_path=36c4ef0#diff-36c4ef0ec8401560eccda7ef25226a35)
To remind again why not only some, but majority of people don't recommend w3schools is because their examples/info are wrong. The first and most important JS thing to know - variable hoisting, is deadly wrong in w3schools - [click](http://www.w3schools.com/js/js_hoisting.asp). Look at the examples, they can't even explain var hoisting. They declare a global variable and then try to convince people that this is how var hoisting behaves? Total bs! Instead people should use [MDN for JS reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript) And most importantly, OP should read [JS the Good Parts](http://shop.oreilly.com/product/9780596517748.do)
Ok, so basically you want two things: 1. A form of [modal box](http://webdesign.tutsplus.com/articles/modal-and-modeless-boxes-in-web-design--webdesign-2282) to overlay your site. 2. You want a link that opens a search query in google maps. 3. You want a field and a script that combines the search query of your users with the google maps url and then opens the page. *Concerning 1*: There are tons of ready made modal box solutions out there. And if you use [bootstrap](http://getbootstrap.com/) for your page layout, then you can simply use [the modal they provide](http://getbootstrap.com/javascript/#modals). *Concerning 2:* What you want is to send people to a new url: http://maps.google.com/maps?z=12&amp;t=m&amp;q= Behind "q=" you have to add their search query. http://maps.google.com/maps?z=12&amp;t=m&amp;q=Boston will open google maps to look for Boston. This link explains the details: http://stackoverflow.com/questions/2660201/what-parameters-should-i-use-in-a-google-maps-url-to-go-to-a-lat-lon *Concerning 3:* The task you want to perform doesn't require any JavaScript. Just use a form with a field and a submit button. Usually, submit would lead to your page again, but with the action attribute in the form element you can change that to the google URL. So your form would containt two hidden input fields (one for the zoom and one for the type of map) and then the text field for the query. &lt;form action="http://maps.google.com/maps"&gt; &lt;input type="hidden" name="z" value="12"&gt; &lt;input type="hidden" name="t" value="m"&gt; &lt;input type="text" name="q" value=""&gt; &lt;input type="submit"&gt; &lt;/form&gt; http://www.w3schools.com/tags/att_form_action.asp Just change the value of the input field with the name "z" to change the zoom and the value of the "t" field to change the type (as the link under 2. explains)
[Four spaces at the start of the line.](http://daringfireball.net/projects/markdown/syntax#precode) Take formatting serious if you want to be taken serious.
Take a look at the structure of the statement. * `entry` is an argument of the `hasEvent` function. * `events` is a property name of a variable in the `JOURNAL` array. (ie. `"events": ["Example1", "Example2", etc.`) * `indexOf` is a standard function on arrays, which is the data type of `events` * `hasEvent` returns a `Boolean` value based on the function definition. It is called later from an `if` statement while parsing through the `JOURNAL` array. * The `for` loop iterates through each event in the `JOURNAL` array, and `entry` is defined as `journal[i]`. This is passed into the `hasEvent` function each iteration. If `indexOf` it returns -1 (i.e. it can't find an entry named whatever the string value of `event` happens to be), it returns `false` and does not increment the `index` variable. So, in the function `hasEvents` it looks inside the `journal` array item by item (i.e. `journal[i]`) so that `entry.events.indexOf(event)` is roughly: 1. Look at `journal[i]` --&gt; (`entry`) 1. Look at `"events"` within `journal[i]` --&gt; (`entry.events`) 1. Call `indexOf` on the array located at `journal[i].events --&gt; (``entry.events.indexOf`) 1. Pass `event` as the argument of `indexOf` --&gt; (`entry.events.indexOf(event)`) Something to remember is that the JSON object must use quotations around its property names, but we can refer to them using dot notation in Javascript (i.e. `entry.events`) EDIT: Had to fix some confusing statements, sorry... on my first cup of coffee. 
It helps to format the code: function hasEvent(event, entry) { return entry.events.indexOf(event) != -1; } function tableFor(event, journal) { var table = [0, 0, 0, 0]; for (var i = 0; i &lt; journal.length; i++) { var entry = journal[i], index = 0; if (hasEvent(event, entry)) index += 1; if (entry.squirrel) index += 2; table[index] += 1; } return table; } console.log(tableFor("pizza", JOURNAL)); // → [76, 9, 4, 1] This code really starts executing with the console.log method (before that is just function definitions), so let's start there. console.log executes the tableFor function and passes two arguments to it: the string "pizza" is passed to the `event` parameter and whatever the JOURNAL variable represents is passed to the `journal` parameter. From the book, it looks like [JOURNAL](http://eloquentjavascript.net/code/jacques_journal.js) is an array of objects. These objects all have an "events" property, and the "events" property each contains an array of different events such as pizza (weird event!). The tableFor function is calling the hasEvent function and passing it the "pizza" string and just one of the objects in the JOURNAL array at a time. So "entry" is one of these objects from the JOURNAL array. Then it looks at the "events" property of this object, which happens to be an array. The indexOf method checks to see if it can find "pizza" in this array of events for this particular entry. If it can find it, it will return the correct index number. If it can't find it, it will return -1.
Or inline use \` \` 
3) Speak for yourself. My company doesn't use jQuery cause we know how stuff works.
As a python developer who loves jinja I really like them. 
That's not a fair comparison, as WordPress development is a mix of PHP, HTML, CSS, their templates structure / syntax, open source plug-ins, etc. Meanwhile, every line you write in jQuery is JavaScript.
While it's true one should have an understanding of how xhr works on various browsers, nobody cares or has the time to figure out how to make the code they'd *like* to write also work on old versions of IE and such. That's where jQuery comes in handy. Not to shield you from learning, but in saving you from having to write the same awful code to support the same awful browsers every time you want to make anything happen on a page. jQuery is so common that it's easy to treat it almost like a standard library. It's fine to use it as such, and tremendously convenient. It's important to remember, however, that once your JS gets longer than, say, 100 lines (yes this is a low threshold!), you need to consider some deliberate design for your code. Piling more JS spaghetti on top of your spaghetti to fix the spaghetti only creates more spaghetti. 
I think his point still stands though. Just because you know WordPress doesn't mean you know PHP, and just because you know jQuery doesn't mean you know JavaScript.
Thanks a lot! I really appreciate the time you spent to help me out. This is a lot of information for me to mull over. I'll try to work through it tomorrow (it's midnight here in Australia).
Yep and there is impact++ which adds a lot of functionality to the framework. I guess some people have done fist person and isometric on this as well but its not built for that. Also there's a yeoman generator I have not tried yet. 
As a symfony dev that uses twig, I see no issue with them whatsoever
I do not recommend this book for new developers learning JavaScript. Learn the language first. Then read this book if you want to.
oh so sweet. As someone who's been learning js for about a year and ready to take my next big step, I cannot thank you enough for the hours of learning you've just given to me. I seriously can't thank you enough.
When you have the experience of working on the web since IE4/6, you developed those fixes years ago and often develop fixes for IE before jQuery does. Don't presume professional programmers can't write more than 100 lines of code without turning it into spaghetti. That would be insulting at best.
When you login You can search by location and programming language (and JavaScript is set up as default) - so I think it's relevant.
Will do David! Thanks!
I'm not sure you understand what hoisting is. It has no regard to window scope or local scope. Hoisting is as simple as they state it... A variable is declared at the beginning of the scope it is used within, whether or not you actually define or declare it there. The examples they provide do show that properly. 
&gt; We put our Javascript inside &lt;script&gt; tags at the bottom of the &lt;body&gt; section. I always find this ugly and put my JavaScript in the head using a simple document load event wrapper. Edit: Yay, un-commented downvote. Obviously, I don't put JavaScript in my HTML at all, but a well formed .js file with a simple listener will not impede the loading of a page by enough to notice.
The way the language works.
As a gamedeveloper I don't even...
Why are you sometimes pushing `person.courses` onto `student`, and sometimes pushing `person`? Also, why in your last case do you assign to `person.course` instead of `person.courses`? Anyway, what kind of object is `student` and what kind of object is `person`?
Angular seems like the Vim of js frameworks. Complex, impenetrable, steep learning curve, loved by it's borderline cultish fans, a confusing behemoth to outsiders. I keep hearing good things about it and maybe I just haven't used it enough but I've yet to see its beauty.
Same goes for Drupal and Joomla. I once saw a Drupal dev that didnt know how to use classes. He only knew procedural php using drupal hooks.
now just add the possibility for each user to attach code to their blocks that defines movement and appearance behaviour
If you don't count testing with my roommates, 2 or 3 hours.
I am surprised no one has mentioned developing a good understanding of functions and what it means for them to be a first class citizen. It's important even at the 'mostly jquery' stage as one will need to be able to grok it to use callbacks and making good use of it is really one of the coolest things about js in general.
This book *is* learning the language. If you don't understand the concepts in this book you don't understand Javascript. If you understand the basic concepts of functional and object based programming, this will teach you Javascript. Don't confuse learning programming and learning one specific language.
WHY STOP THERE!?!?!
This might be a valuable resource: [youmightnotneedjquery](http://youmightnotneedjquery.com/)
&gt; We load the jQuery library in the &lt;head&gt; section. Not necessarily correct IMHO. While the JS in the head section is loading, it is keeping the rest of the page from rendering while doing so. This might slow your page down. For details see [this stackoverflow question](http://stackoverflow.com/questions/2105327/should-jquery-code-go-in-header-or-footer).
I think the day you become a Javascript developer is the day the phrase "jQuery developer" makes you cringe in pain.
Mr Papa's take on 2 way databinding shows me he probably hasn't built a significant enough sized application with multiple developers to see why it's a bad idea at scale. I think React got it right by not building it into the framework, opting for explicitly showing the data flow, but making it easy to drop a mixin into a component if you need it. 
React feels so more advanced then Angular. I feel Angular is the behemoth ultimate version of the previous generarion of solutions. React is a whole new approach that makes the oldet approaches look old and naive.
u can write web based games for clients, [sell a license](http://fgl.com), sell as a [native mobile app](https://www.ludei.com/cocoonjs/), [conquer desktops](https://github.com/rogerwang/node-webkit), earn from ads on Kongregate, sell in-app stuff - and more...
This is a valuable resource thanks, I can never get my head around how to create vanilla JavaScript AJAX requests. Thanks will use this a lot ;)
I'm not sure, I don't have a lot of experience with monetizing them personally. My work involves teaching kids programming so I've been tasked with creating a simple game for that and it will stay in house, so no monetization required. (the specifics of which I can't go into detail about, sorry!)
I think rails is a much more apt comparison than vim.
I sort of agree with you. We all love to hate on jQuery these days, and I'm definitely one of those people. I no longer develop for anything &lt; IE9, and there are a multitude of other templating frameworks that simplify DOM handling (even if some are based on jQuery or jQLite)... But, at the moment, I find jQuery useful for it's tricks. One case specifically is width/height calculation of elements. 'display:none' on an element really throws a stick into standard width/height, as they'll give you 0. jQuery's trick is to temp set the 'display' to 'block', retrieve the width/height and then set it back to 'display:none'. This all happens before the page redraw, so the user doesn't even notice. It's things like that, you would spend a day on, but with jQuery it's 5 minutes.
It's a large, very opinionated framework that dictates the "proper" way to do things. Vim is about providing modular, composable commands which you can use in your workflow as you see fit. Different vim developers may have different approaches to dealing with a given challenge. Multiple rails / angular developers are more likely to use the same approach for a given problem.
This is overly complicated. Break this up first so you can think clearly about it. You appear to have 2 arrays - a courses array with code property on each course, and a tmpArray ( very bad name - name things so you can understand them ). Using a switch in this context is too verbose and makes it more difficult to reason about what you are doing. As it stands, your code is not really very clear to begin with. var foundCourse = false; for( var i=0; i &lt; tmparray.length; i++){ var courseCode = tmparray[i]; for ( var j = 0; j &lt;Courses.length; j++ ){ if ( Courses[ j ].code === courseCode ) { person.courses = courseCode; student.push(courseCode); foundCourse = true; break; } } if ( foundCourse ){ break; } } if ( !foundCourse ) { alert('course not found'); }
This used to be called Duetto.
I'm using phaser to make a game at work and am really liking it. It's free, well documented and very straightforward.
The data binding perepsective may come from experience with .NET (which he also uses), so I'd imagine the familiar paradigm would be attractive. Can't praise React enough, though, as it's a long-awaited departure from the conventional webdev mindset of using fancy binding, templates and whatnot. Angular (and now Polymer) claim to be be such revolutionary projects, but the reality is that they're more iterative developments on the concepts webdevs currenly espouse than a breath of fresh air.
Oh, don't get me wrong. jQuery is the only library I include in all my development projects (unless I'm developing my own library I expect others might use - in that case I try to have zero dependencies). I think of jQuery as a useful tool. So to me, saying a phrase like "jQuery developer" is like saying "hammer craftsman."
Eloquent JS is better for learning programming in general through the language of Javascript. The Good Parts is better for learning just the Javascript language. It does not attempt to teach you how to program.
The is a very bad use case for switch statements. There are valid cases - usually in contexts where you have a lot of enumerated definitions and you are going to compare a value against each of those definitions until a match is found. This example is very bad and points in a very wrong direction. This also is very fragile - because the ordering of the switch cases will impact the evaluated code. Please tell your teacher he is a pompous git if he asserts this is anywhere near a good idea. Good use of a switch: var fruits { APPLE : 'apple', PEAR : 'pear', BANANA : 'banana' }, fruitChoice = myinput.currentfruit; // contrived input of your fruit choice switch( fruitChoice ){ case fruits.APPLE: makeCider(); break; case fruits.PEAR: makePearJuice(); break; case fruits.BANANA: makeBananasFoster(); break; default: starve(); } However -- as noted elsewhere on this thread - there is almost always a better and less fragile way to do this in javascript. Switch statements are fragile and in many ways an anti-pattern in javascript. 
Node and jquery don't even com close to serving the same purpose, so I don't really understand your comment
I nerver understod why the built everything in nested arraya
If getting into Jasmine - it is a good idea to look through the source and especially learn to use the runs/waitsfor blocks. They are incredibly handy when testing asynchronous code.
yes, since it is the most widely used language, and only widely used languag lacking types or class based inheritance, obviously it is the most misunderstood language.
understand what "this" is in every context. Understand what call and apply are and why they are important. Understand closures and the notion of partial execution. Functions as first class citizens means you can pass functions to functions and return functions that return functions. variable hoisting. scope. and use requirejs or some other module library -- it will save you a mountain of headaches
I'm going to disagree, /r/javascript is not a job board. There is nothing relating to learning or implementing JS on your site, it's just a search for recruiters.
Why are you checking reddit while out drinking.
C++ is fantastic. Yeah it does have some boilerplate, but you get full control over pretty much everything. This on the other hand, albeit cool, I don't see much practicality.
Just to a give a different reference point based on some data, I work on an Angular application that is about ~250,000 lines of code across 3 or 4 teams with a total of about 50 active contributors. There have some challenges (with too many directives or watchers for a given page) that needed some optimization work, but nothing like the type of "hell" described by Daniel Steigerwald in the original article. (Full disclosure: I work with Angular.dart, which is closer to the specification for Angular 2, and inherently scales better to large applications)
Removed, please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). While technology demos are cool, zero source was provided. Please provide either a link to a project page, or some sort of technical discussion about the development of the project. Thanks for your understanding.
Thanks! If you want to add something to bring it up to par for this one, I can reinstate it. Just message me if/when you do so.
just trying something on the side. Its not like other implementations don't exist. I am just trying to create and learn.
1. "this" 2. Closures 3. Prototypal inheritance 4. How to create an app/site without jQuery
From memory, the first versions of Drupal were written back in the PHP4 days when class-based OOP code was poorly supported or poorly understood. Since then, it's been sort of grandfathered in. Their full explanation is here, under the header 'Motivations for Current Design': [Drupal OOP](https://api.drupal.org/api/drupal/developer!topics!oop.html/4.7) 
Bathroom time is downtime 
Look into module loader systems like Browserify and RequireJS. Learn prototypal inheritance.
Not sure that I like Crockford's ideology. I saw a lecture of his recently, and I didn't like the way he argues with caricatured or non-existent points of view. He seems to believe he's surrounded in this world by idiots who frustratingly *just aren't listening* to his perfect insights.
The difference is where he is in his learning. He said "new javascript developer" which I originally took as "learning javascript". Still, learn the basics of javascript first. Then read this book. Too many people ask what book to read to learn Javascript from the beginning and this book is not it.
Props for that.
My point is, jQuery, to far too many people, has become an automatic when they start using javascript instead of being something you use only because you need to. When you know javascript well enough, you can write your own simpleworkarounds to IE's problems, and others, which are all too often a few lines of code. Those workarounds become arrows in your quiver and you won't need to call in a tank to kill a problem. This comes from, and is called, "experience". I was in a client's warehouse a few years back and saw a couple of guys building a wood cage around a large product to protect it for shipping. I noticed one of the guys using an auto nail gun to hold together a corner with three pieces of wood. I remarked to the executive I was with that he must have put 20 nails into that corner where four screws would have done the job. He kept hitting it and hitting it over and over again. The exec told me that, if you gave them a hammer and a nail, they wouldn't know what to do with it. 
[“Crockford’s views on ECMAScript are dogma, you idiots!”](https://github.com/twbs/bootstrap/issues/3057#issuecomment-5135512) - Douglas Crockford
Uh...OK... So... The reason why were so far in terms of technology is by standing on the shoulders of giants. This is why I don't have to reinvent the wheel when I want backwards compatibility. Some library out there already does. Our generation writes better web apps because of the libraries out there. Jquery is just a library after all. Jquery is not the end all be all of JavaScript - absolutely. Anyway.... Experience is important and someday I'll have that. But at this point I just love writing code in JS. Designing a web app is fun. Contributing to an open source JS framework is even funner. Funnest of all is writing something functional in JS. At the end of the day, if you love the language, you love writing JavaScript... Not writing hacks for browser compatibility.
It's a fair point that bringing in a whole library to make finding elements in the DOM slightly easier is overkill. In the case of jQuery I don't worry about it though. jQuery is so common that including it via the CDN is practically free. You've already got it cached. I've already got it cached. In regards to crafting one's own workarounds, I'd rather not. Instead of remembering that the code I'm about to write only works on most browsers, not almost-all browsers, and then writing my own code to test for the right features and accommodate incompatible browsers, and then support that code, I'd rather let somebody else assemble the relevant workarounds, test them, and keep them up to date. *Especially* when doing client work.
Why? 
To be truthful, I don't use the CDN. I usually concatenate it with the rest of my JS using Browserify or Broccoli. I'm a hypocrite. To be even more truthful, it's less the DOM stuff that I use jQuery for, and more the XHR stuff (although very occasionally the DOM stuff). Usually if I find myself reaching for one of jQuery's weird selector/traversal tricks, I think twice about it and approach the code from a different point in the DOM and it ends up being much cleaner.
Finally a way to bring sadomasochism into my software
&gt;jQuery is so common that including it via the CDN is practically free. You've already got it cached. I've already got it cached. Partially, but significantly, not true. You would be banking on several things: 1) The browser did not clear the cache 2) The cached version is the same one you are using 3) The user is not behind a proxy 4) Your version was not replaced by a different sites version And a couple more I can't think of right now. Somewhere (Steve Souders?) showed the possibility your version of being in browser cache was as little as 20% though I really don't recall the exact number. The thing about using jQuery to do your workarounds for you, you are also carrying the load of **everything** you do is checked against **every** workaround on almost **every** call. jQuery is significantly slower than anything you can do on your own and, if my client were ever to call me about his site working slow on his phone, well, that's a call we never get.
Crockford is also very correct in my experience when he says that people pride themselves in not learning the language (after all, it looks just like Java). JS tries to act like it's class based, but it doesn't have classes. It wants to be functional, but doesn't have functional requirements like proper tail calls. It wants to look like C, but act like scheme. There is not a feature in JS for which there are not several important edge cases that will bite you very soon if you do not know of them (second only to PHP in this area). Even most seasoned JS programmers cannot actually explain how JS prototype inheritance really works (for example: ask one why MyConst.prototype = {...} is bad -- hint: it subtly messes up what the object inherits from because it create a new object). I love Javascript in many ways, but we need a version that breaks the syntax completely and fixes everything. From a company standpoint, I think JS is a bad choice because most JS programmers suck (and sucking in JS seems to cause bigger issues than most languages) Since ES6 breaks part of the syntax, why not finish the job -- tear that bandage off quickly. Alternately, we could just use LLVM bytecode and use whatever language we want (it's far better than asm.js which tries to do the same thing with bad, hackish, and impossible to decode JS). In any case, JS is hard to learn, easy to misunderstand, an amazing language, and it needs fixing because it's spreading these flaws everywhere.
JavaScript Enlightenment by Cody Lindley. An excellent book on understanding how JavaScript works. One of the best books I have ever read.
Use an array, not a dictionary. Then you get https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf apples.indexOf('HDYS') == 2 // found because index &gt;= 0 apples.indexOf("made up") == -1 // -1 = not found
So when I use the indexOf and it finds that the 4 digit code it is found, then how do I access the number and the UPC code that the 4 digit code is under?
so kind of like javascript?
Honestly, as a daily user of Node and Mongo I lean more and more towards going back to a relational database. If you're comfortable with SQL stick with it. Mongo for the sake of mongo is not really a compelling reason to use it. There is a pretty decent mysql driver/package for node. Likewise, Express is a pretty minimal framework, and if you're used to large PHP frameworks then it's really not going to give you all that much help. I recommend the Hapi framework, http://hapijs.com/ 
Or maybe his take on 2 way databinding is the result of actually working on reasonably large Angular apps and discovering what most of us in that situation discover: after a few initial frustrations, you learn a few simple strategies and optimizations that improve performance significantly. 
In particular, what do you mean? By full control, I meant you get functional, object oriented, low level memory management, and about 30+ years of features. When it comes to close-to-hardware applications that require performance, you'll usually see some C/C++. C++ is often the fourth solution for server-side programming, next to Java/Python/.Net and the first solution for video games (atleast AAA). So if you mean, C++ is to hardware/server as JavaScript is to web, then yeah sure. But I'll also clarify, everything you can do in JavaScript, you can do in C++ (not that you would). Not vice versa.
Ok, I agree.
This list sucks. React? Ractify? Backbone? Meteor? Famo.us?
How does this compare to something like https://github.com/getify/You-Dont-Know-JS?
If you're going to break javascript, you might as well just use a different language like Ruby.
OOoooo, this is FUN, thanks!!! 
Well, you can learn that you should define all variables in one place, for example. Don't you miss those days when you programmed in C89?
As opposed to JavaScript frameworks for non-developers? Also, this is clearly blogspam. Some of the frameworks in the list are antiquated or no longer actively maintained, it calls *ionic* "iconic" and mixes frameworks that aren't really comparable to each other (ExtJS, ionic and AngularJS, for example).
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ a single site, we'll be forced to take action. Thanks for your understanding.
I see we are stealing haskell resources: http://learnyouahaskell.com/starting-out This: https://s3.amazonaws.com/lyah/listmonster.png I guess OP is a little fond of haskell hemself?
noted. Thanks. 
Just figured that since folks were chatting about ReactJS in the John Papa article about Angular that I would post this too. We found it super helpful in understanding ReactJS
I should properly have read the intro: &gt;... &gt;A good example is the `prelude` library in Haskell: it provides developers with an amazing toolbox to write their Haskell applications with. Why should JavaScript developers have to bother solving these common problems over and over again? 
Here's something I've been working on for a little while as another excuse to play with acorn. I wanted to create a tool for finding similarities and boilerplate in code, but didn't want to take the usual string or token approach - I wanted to analyze the larger context in which code was written. So instead, this tool matches nodes based on the node types of their children when walked using BFS. It's come in handy already, and hopefully someone else will feel the same. :)
More than likely they're typos man.
The blocks are there for template inheritance. For example you might make a page with a header, footer, and page wrapper. You want the header and footer to remain the same across all pages, but the page wrapper will have varying content. In this case, you define a {% block content %} inside the wrapper div, and each child template only has to write new content, they don't have to repeat the header or footer. You might find [reading the documentation](http://mozilla.github.io/nunjucks/templating.html#template-inheritance) is simpler.
Curried functions are pretty beautiful (and very readable) in the ES6 fat arrow syntax. I suggest everyone to try a ES6-to-ES5 compiler and you won't be looking back :). It really makes currying feel "native". var add = a =&gt; b =&gt; a + b; It also makes it very easy to add a new curried argument to an existing function: just add "(argument) =&gt;" to the beginning of the function.
It is more introductory. I am reading YDKJS now and I think the JS Enlightenment book would be better if you are still beginner.
Nice. I think every developer interested in functional programming should reimplement these same old functions (curry, reduce, flip, reverse, compose, etc..) to become acquainted with the subject. The Haskell `prelude` is a great resource for this. Coming to this implementation, is there something new or different from [Ramda](http://ramda.github.io/ramdocs/docs/)? The philosophy behind your library and Ramda seems the same: swapping the arguments order of some strategic functions to promote currying and point-free style, whereas Underscode and LoDash are very pragmatic and try to accomodate the most common use cases promoting readability.
https://github.com/dtao/lazy.js https://github.com/fitzgen/wu.js https://github.com/lodash/lodash https://github.com/jashkenas/underscore These are all open-source projects. If they're missing features (like lazy evaluation, not enough abstraction, not enough standard transformation and recombination functions), why not add those features into one or all of those projects instead of writing your own library from scratch?
Is this supposed to be pronounced as "fuck it?" Because I can't help but read it that way!
Almost certainly yes, but pointing this out in the form of questions lets people figure this out for themselves. I think it's better in the long run to figure out what's wrong yourself, with help, than get a prepackaged explanation, and it's also easier to swallow than "hey, you screwed up here, here, and also a little over there".
&gt;if phrase1 is an infinite sequence in wu.js doing a repeat on it will lead to an infinite loop and filling the memory up See [wu.chain](http://fitzgen.github.io/wu.js/#chain): wu.chain(phrase1, phrase1, phrase2) .takeWhile(note =&gt; note.time &lt; 10) .play(sequencer) Seems like it would do what you're talking about in a lazy-eval way without an infinite loop... You would probably also use [wu.cycle](http://fitzgen.github.io/wu.js/#cycle) heavily. Doing this as a learning experience definitely makes sense, but I would implore you once you're done learning to take that experience and improve existing libraries rather than creating your own. The JS library ecosystem is already so fractured. :(
Always with the currying, always.
"I admit, this bewilders me a bit." LMAO. Give me a fuckin break with this thing. If you like Angular then use it, but please don't act like everyone who doesn't is being an elitist cool kid or whatever.
Nails over glass usually do not work :P
😐
BECAUSE CURRYING WILL TAKE UR CODES TO THE NEXT LEVEL!!!!!!!!!!! Curry your functions ok it's very important
Yeah, that guy should read this, it's so much better than his thing. His thing is just a bunch of "Well I never saw that so it's not really a problem with Angular, you just made up that problem because you hate my precious sweet baby Angular." This is a bunch of "here's a dozen reasons React sucks, and probably you should still use it." Much more my speed, personally.
Oh, it's yet another library. Horray.
That's certainly how I'm pronouncing it.
Yeah, that's false. &gt; $ cat lib.min.js | gzip -9f | wc -c React 34541 React with addons 37100 Angular 39226 Ember 97672
To make your implementation easier, you should know that [C's preprocessor](http://en.wikipedia.org/wiki/C_preprocessor) is actually a separate system from the rest of the language. You can already invoke it on any text file you want - Javascript files included. &gt;The C preprocessor or cpp is the macro preprocessor for the C and C++ computer programming languages. The preprocessor provides the ability for the inclusion of header files, macro expansions, conditional compilation, and line control. &gt;... &gt;Since the C preprocessor can be invoked independently to process files other than those containing to-be-compiled source code, it can also be used as a "general purpose preprocessor" (GPP) for other types of text processing.
You can just run the c preprocessor on your js files without writing any extra code. I think Mozilla does this in their sources. With gcc, use `gcc -E` or `gcc -E -P` to do only preprocessing. In other words, it's a neat idea, but you'd have to offer some significant advantage to using your tool over gcc or clang.
lazy.js is where it is at, extremely performant on big datasets.
hmm... I'm out of my depth. You might have to look into the API Documentation provided by google. https://developers.google.com/maps/documentation/javascript/reference You can place a search box to the map, it seems: https://developers.google.com/maps/documentation/javascript/examples/places-searchbox And I've found how to change the center of the map, if you have longitude and latitude. var chicago = new google.maps.LatLng(41.850033, -87.6500523); map.setCenter(chicago) What I haven't found yet is how to get longitude and latitude to feed into the setCenter function. You would have to get these informations with the places library and then feed it into the setCenter method. 
I've got it working now thank you. 
I'm of the opinion you should name our functions for better readability anyway. function(arr){ var total = 0; for(var i = 0; i &lt; arr.length; i++){ total += arr[i]; } return total; } vs function sumElementsOfArray(arr){ var total = 0; for(var i = 0; i &lt; arr.length; i++){ total += arr[i]; } return total; } Can you tell the first function does the same as the second? Sure, But the second one tells you what it's going to do, and so as I'm reading code I'd think "Oh, it's going to sum up all the elements, ok, what next?" If I used the first one, however, I'd have to read through and say "Oh, that sums it up. Okay, where was I that was calling this function?"
Thats a good point man.
&gt; This is a bunch of "here's a dozen reasons React sucks, and probably you should still use it." Much more my speed, personally. Mine too. I like when an author shows the good parts but also highlights the drawbacks (although there are some inaccuracies I think). 2 other reasons for which React is lacking: - I can't access the VDOM nor inject a state nor access the function defined in `createClass` (for testing purposes) - It's not modularized (VDOM + diff algorithm stuff) but I will use it even so
I have thought a lot about this problem. Can you speak more about what similarities your algorithm will find and which it won't? Isn't it an effectively an O(n^4) problem where n is the number of AST nodes? A naïve algorithm would be something like for each AST Node in script 1 for each AST Node in script 2 if(number of identical nodes in script 1 and 2 at current location &gt; threshold) match()? This seems untenable for large programs...
Charting libraries don't usually target frameworks, as that minimizes their use-case. It's not too hard to find a generic JS charting library and wrap it with React in a reusable way. Maybe even commit your code back to the community :) That being said, there are plenty of JS charting libraries: https://github.com/showcases/data-visualization If you are looking for something open-source for a commercial product, might I recommend [nvd3](http://nvd3.org/) or [dc.js](http://dc-js.github.io/dc.js/) Otherwise, there's always [highcharts](http://www.highcharts.com/).
♫ and what the world needs now / is another snarky comment / like I need a hole in my head ♫ 
sweet-js is the right way to do macros IMO.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ a single site, we'll be forced to take action. Thanks for your understanding.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ a single site, we'll be forced to take action. Thanks for your understanding.
Here's the way I'm looking at it. # Each value in the hash is an array of nodes hash = {}; # Walk step foreach node in AST [1] children = get node's children (using BFS) up to the specified threshold if children.length == treshold [2] id = generate an id for that array by mapping over the node types # Example: "VariableDeclaration:MemberExpression:Literal" [3] hash[id].push(node) # Simplified analyze step [4] foreach key in hash [5] if hash[key].length &gt;= 2 # we have a match # Complexities [1] O(threshold) [2] O(threshold) [3] O(1) [4] O(n) [5] O(1) # Walk Step, let t = threshold O(n * (2 * t + 1)) = O(2tn + n) # Analyze Step O(n) Additional complexity and overhead is introduced by matching against identifiers, and some work is removed by a pruning step after each match. Running against one project, I see: $ find src/ -name '*.js' | xargs wc -l ... 44810 total $ time jsinspect -D -t 30 src/ 41 matches found across 800 files real 0m0.818s user 0m0.746s sys 0m0.072s What slows things down is generating and outputting diffs, so I disabled it with the -D option in the above example. Without the -D option, I see: real 0m1.718s user 0m1.626s sys 0m0.097s 
&gt; Working with our developers we must produce a code base that is easy to update, is maintainable and most importantly can be picked up by their own developers once the business starts to achieve growth. And rolling your own CSS framework during a period of intense technical debt accrual is a good approach for that?
I like nodejs module style better than es6...
Nice to know. Sorry about that.
So, according to that blog, this: &lt;header&gt; &lt;div class="name"&gt;&lt;/div&gt; &lt;/header&gt; ... $.post('/login', credentials, function( user ) { // Modify the DOM here $('header .name').show().text( user.name ); }); is worse than GOTO, but this: render: function() { return &lt;header&gt; { this.state.name ? &lt;div&gt;this.state.name&lt;/div&gt; : null } &lt;/header&gt;; } Is righteous and godly. Have I slipped into opposite-land? I mean, there are lots of issues with the former, I can understand that, but that horrible mix of HTML and javascript in the latter makes me want to scream. 
Note that Haskell can actually compile to JS. I think you should probably go more meta with the currying. Doing ()()() all the time is no fun. You could use the arguments keyword, I guess. Aside from making some functionalish functions, what else do you plan to do? Haskell's other big thing is the type system, so there's that (lot of work). There's lazy evaluation, but it hasn't much to do with functional programming I'd say. I doubt many would like monads in JS. Isolation is basically the beginning and end for FP, any plans in that respect? So, aside from some useful functions, what will be aimed for?
I've been using Knockout on a recent project for the very first time; I must say I'm extremely impressed. It's lightweight, flexible, but has enough power to let me write code which actually concentrates on the domain logic rather than marshaling the view. I'd really recommend it.
Great, all the fiddliness of C++, and all the performance and safety of JavaScript. Sounds like a winner.
Hey thanks. FKit is indeed similar in philosophy to Ramda. One big differentiator is that all FKit list operations work on both arrays **and** strings.
No problem, I'll post some other links too.
Actually, i found that if JS is placed after the HTML it runs just fine. Not sure if it's specced behavior, but it's never failed me. It is really consistent. I suspect it's now so commonly assumed no browsermaker would allow it to be different. Maybe someone could shed more light on the subject?
All of my JavaScript is loaded asynchronously through use of RequireJS, http://requirejs.org/, so there's no guarantee that the window will be ready/loaded as the JavaScript runs. It's better for performance, but introduces its own set of issues.
I'm trying this tonight, but I'm still pronouncing fuck-it, sorry :P
I suppose loading RequireJS later is no realistic option due to delay? You could mod RequireJS to insert the script tags only after documentready, but it might make everything a tick slower as optimization is done later. I still consider RequireJS's task to be a serverside issue, and caching advantages by co-hosted libraries to not outweigh the overwhelmingly serious consequences for security. Maybe if RequireJS could check security certificates.....
Well, requireJS provides a plugin, domReady: http://requirejs.org/docs/api.html#pageload but it's essentially the same as just using $(document).ready() if your architecture supports it. My software is a browser extension. All the source is stored on each client's machine / my server isn't serving scripts. :)
Wonderful :)! My apologies, carry on!
actually my main point is not performance. i didn't put my original point very well. the main thing is abstraction, i.e. being able to use fkit on potentially infiinite sequences and dynamically generated sequences. lazy evaluation not only offers potential performance benefits but allows for greater abstraction. it does significantly impact on how general purpose library like this works internally so i'm not sure how easy it would be to implement. from wikipedia: * The benefits of lazy evaluation include: * Performance increases by avoiding needless calculations, and error conditions in evaluating compound expressions * The ability to construct potentially infinite data structures * The ability to define control flow (structures) as abstractions instead of primitives
Is this necessary to check if all js-scripts are placed under the html? I'm pretty sure the browser parses everything line-by-line, even with async loading. It's also parses HTML VERY fast. Most of my problems are related to html after I've changed it with some library.
I've been reading up on clojure the past week, and I love it how this library is parallel to clojure, especially when I saw the immutable data types c:
How much is there to implement, though? Generic grid systems are ten a penny, and once you use a basic reset / boilerplate I can't imagine getting the basic UI toolkit for a small web application taken more than a week's worth of work. The only thing that's going to be massive pain is forms, but then again, you could always handle that by opting for a design-agnostic framework over an opinionated UI toolkit like Twitter Bootstrap. Of course you must always choose your technologies on a case by case basis, but Bootstrap makes a lot of assumptions about your UI. It also makes a lot of assumptions about the way widgets look, unless you want to spend a lot of time unpicking it, which kind of defeats the purpose. All that comes at the cost of constraining the design and making the product look identikit. Is that a good constraint to accept when releasing an early product? Maybe, maybe not. That's not up to us as developers to decide. That being said, I do take umbrage with the author's arguments about OOCSS not being 'semantic markup'. This is a discussion that I'd (apparently incorrectly) thought had been done and dusted - namely, that HTML classes don't have semantics to anyone except developers, are never parsed by search engines or assistive technology, and that separation of concerns and abstraction of implementation were far more important than the ideals of the Zeldman-esque web zealots of seven years ago. It upsets me to see that irrational FUD about 'non semantic classes' is still doing the rounds; I thought we'd matured from that. 
I am but a lowly programmer, I don't understand how to do this thing.
During a recent-ish brief hackathon where I and a couple of other developers implemented a 2D game with basic physics over about three days, I got quite far with Phaser. Take that as you will.
(╯°□°）╯ ︵ ┻━┻ Just FKIT!
I don't think I've fixed anything - I really didn't understand the problem as presented. If courses on the student object is supposed to be an array of course codes - then the nature of the whole thing changes. 
We're building an enterprise product, so we use Dojo since it has an extensive library of widgets and is robust enough for enterprise level software. Edit: duh, you're talking CSS not javascript. 
Separation of concerns seems to be no longer a concern on the front-end. Fusing mark-up and logic is now ok, and atomic css is all the rage which is more or less inline styles. It's like Web 1.0 again. This is what happens when websites become apps and there is no longer a division between front-end/back-end roles. Full-stack development has a new list of priorities that are changing how we build things. Not complaining, but it's tough to keep up with this fragmented landscape of tools.
Angular js and Knockout js do a great job of separating concerns properly. It's still possible to put too much code in your template with both, but they both make it much easier to accomplish elegantly. 
Thanks for answerig. I guess you were scheming your grand plan and though "FKit", hehe. I'll keep an eye on it. Reg. PureScript, absolutely very very cool. Read the doc and it makes me so very homesick for Haskell. One chapter was curious though. It seems an underestimation of the amount of optimization possible and performed by Haskell compilers. Scripts would have to be pretty computationally simple (interesting: how simple?) To take advantage of PureScript's smaller "binary" size, instead of just losing due to optimization. The chapter: "Projects such as Haste, Fay and GHCJS aim to use some combination of the GHC compiler itself and/or its intermediate representation, Core, to perform some of the tasks involved in compilation such as parsing and type checking. This usually gives the advantage that tools and libraries can be shared with Haskell, but often at the cost of the size of the generated Javascript. This is the main practical difference between PureScript and these projects."
I don't know why, but I absolutely hate coffee script. Anytime I see it used in something I'm interested in, I get instantly annoyed. Is plain JavaScript really that verbose?
I think it depends who you ask and what technology stack they are using. I am not a fan of markup in JavaScript. I would rather create/manipulate DOM elements with pure JS; at least this way the code can be tested in node, potentially rendered on the server, and needs no funky "magic" to get working. It is also easier to make modular and re-use it again for future projects. 
Since this post was written back in January, knockout introduced components which is for exactly this purpose. http://knockoutjs.com/documentation/component-overview.html
This technique is not only useful in Intellisense. It allows easy analysis of the stack in the Chrome debugger.
I felt exactly the same way when I first started my current job, but after a while I learned to love it. At first, I needed to keep translating things back to javascript, but eventually I just got used to doing it mentally and coffeescript started actually saving me time. I definitely get what you mean though :)
Thanks for sharing, I enjoy seeing how people actually structure big applications. 
It seems so utterly pointless to me. Hate it
I realized a lot of the data used in my projects only requires one-time data binding, this looks good.
&gt; but that horrible mix of HTML and javascript in the latter makes me want to scream. There is no mix. You are not writing HTML, you are writing [JSX](http://facebook.github.io/react/docs/jsx-in-depth.html) wich looks like HTML but transforms into JavaScript, not into a string. This is a step forward from templates, because now you have code that composes naturally, as in "function composition". That's probably the number one misunderstanding about React. What React does is encourage *you* the developer to build your own higher abstractions, by means of natural composition. This feels natural in React, but not in Angular, or Ember.
Sure! If you're trying to squeeze max performance out of a piece of code then optimise it accordingly. For the rest of your application you can use FKit and enjoy writing clean, expressive code, and save some brain cycles for the big problems.
I Browserify my builds. Each script tag sends a server request, so bundling them in one file tends be faster than the amd pattern. The article you linked was actually a concern that the javascript will load too fast, and the async / non blocking pattern (which I do like) prevents the JS from starting immediately. All of the DOM id's / classes should be available. I render react components server side, load react async near the body tag, and it's able to parse the html without any DOM renders because it already knows that the DOM is correct via data-id tags. End user has no idea anything happened. 
&gt;I hate having excess classes, and non-semantic classes littering my markup. I want my site to be clean, easy to read, and have as little interference as possible when I am creating markup. Use a precompiler like SASS or LESS to use semantic classes in your markup and then deal with all the non-sematic stuff using @extend within your sematic class
The options here are terrible... Your drag and drop section misses out testing frameworks such as Jasmine, Mocha, Browser automation testing with CasperJS or PhantomJS. Not having alot of the top testing frameworks will definitely skew you're results and render the research pretty unreliable. 
I could not possibly disagree more. Obviously, opinions differ on all things, but in my opinion that code does not compose naturally, it is disjointed and incongruous. 
Yeah I agree, the one time binding will definitely come in handy. Another welcome change is the replacement of the entire element content on ngInclude and ngView on changes, which will make CSS transitions not be so janky
During deployment I run all of my require modules through a grunt plugin which condenses them into just a couple of modules https://github.com/MeoMix/StreamusChromeExtension/blob/master/Gruntfile.js#L84. I think I could get it down to just 2 (1 per page) with a bit of better coding, but still working on sorting that out. My concern was mentioned in the second response, or at least that's how I read it, "This does not affect document.ready, as that is called when the browser has finished preparing the DOM for a page." I know that IDs and class selectors are available. My concern was about performing measurements, like getting height/width, which aren't available when HTML is still in a template / not part of the actual DOM. Either way, it's an interesting thought exercise and I'm sure I could be completely wrong. I just don't feel comfortable relying on it, I suppose. :) 
It is not utopia, but it is much better than templating from my experience with Angular, and my experience with React so far. I should have said -- "This feels more natural in React than in Angular or Ember".
The React devs argue that templates contain both logic *and* content, and the two are extremely intertwined, so separating the two on the basis of language is unproductive. Instead of separating your *languages*, separate your *concerns*: keeping your views separate from your business logic works well, but it's not clear how further subdividing the view layer would contribute to maintainability.
Expected result. But I was not thinking that difference is so vast.
You can read more about the motivations for this tool and the process of building it here: https://danvk.github.io/2014/10/13/filtering-json-with-pyjsonselect-and-jss.html
Thanks for sharing, I'd also been curious about this. This particular benchmark may be slightly misleading, though. I'd expect most functions that get a single Object argument to do much more work relative to the overhead of Object construction than this toy example.
Makes sense, I guess reading so many mentions of react-art skewed my expectations. :-) I started wrapping a couple of [Chart.js](http://www.chartjs.org) charts with React components, but the wrapping is a bit ugly (using random id-s on rendered elements and such), so I was hoping for a ready-made solution which would hide the ugliness. :-) I guess I'll continue down that road then. Since it's fashionable among companies nowadays to do things open source, I guess we'll do that too. ;-) If you're interested you'll probably find a new repo [on our github page](http://github.com/mondora) by the end of the morning. :-) Thanks!
Thanks! I started looking into react-art, which is a wrapper around [art](https://github.com/sebmarkbage/art/), a low-level graphics library similar to Raphaël and D3, but it is in fact too much work, since our needs are really plain. So I guess we'll stick to the off-the-shelves solutions, and try to make them work with React. We'll pick an open-source one first though, and keep the good commercial ones only as last resource. :-)
Yep. Also I made another small test: http://jsperf.com/hash-vs-flat-function-arguments-2 It this case functions is not very simple. They have more calculations. So argument pattern is not important in such case.
Solution: var compare = function(choice1, choice2) { if (choice1 === choice2) { // Czech if they are equal return "The result is a tie"; } else if (choice1 === "rock") { // If not, compare the choices if (choice2 === "scissors") { // Rock beats scissors return "rock wins" } else { // paper beats rock return "paper wins" } } else if (choice1 === "paper") { // If the first choice was paper (choice1 wasnt rock) if (choice2 === "rock") { // Paper beats rock return "paper wins"; } else { // Scissors beat paper return "scissors win"; } } } it seems as though you have repeated the if (choice1 === choice2) statement where it wanted you to do it with one initial if statement. Codecademy lessons expect you to input a certain syntax set by the author.
Migration guide - https://docs.angularjs.org/guide/migration
Yes, ng-repeat is nice but with big data tables it became problematic. Going to test that right away.
I love Coffee, isn't about verbosity, is about pitfalls. Javascript have a lot of ways to do the same thing, and normally a lot of then are considered "the bad way". Coffeescript take the "good way" for me. To be a really good Javascript programmer you have to know a lot of pitfalls problems and browsers interpretation diferences.
This answer doesn't cover all cases, specifically cases where choice1 == "scissors" and the choices are not equal. Your approach is ok, first we check if the choices are equal. if not only we consider other cases. Other cases being the first choice can be 3 options, and the second choice can be the remaining 2. so altogether there are 3 * 2 = 6 combinations we have to check. : var compare = function(choice1, choice2) { if (choice1 === choice2) { // Czech if they are equal return "The result is a tie"; } else if (choice1 === "rock") { // If not, compare the choices if (choice2 === "scissors") { // Rock beats scissors return "rock wins" } else { // paper beats rock return "paper wins" } } else if (choice1 === "paper") { if (choice2 === "rock") { // Paper beats rock return "paper wins"; } else { // Scissors beat paper return "scissors win"; } } else { //Choice1 is "scissors" if (choice2 === "rock") { //Rock beats scissors return "rock wins"; } else { // Scissors beat paper return "scissors win"; } } }
I hate it too, but it's ok, CoffeeScript will be obsolete when ES6 implements it's most useful features natively. I've even turned down applicants who show me CoffeeScript, there is definitely some __bad__ CS out there. You're better off jumping on traceur and future-proofing you're skillset.
What do you mean by "simple fighting game"?
Can we please stop call these things "replacements". It's not a replacement since it doesn't provide the same functionality as native functions. The native functions halt code execution which is not possible with custom code.
Yeah thanks I know. He is up to section 7 which is asking what I wrote. Scissors are done in section 8 :)
If it's the final assessment of your class, it's probably doable. 
-
Yikes - tacky as hell.
I've never participated in one, so I have no real objective idea. My guess is that you keep things simple and you automate as much as possible. For example in the real world I'd never use something like passport.js, but when time is crunched I'd totally do it and have users in a few minutes rather than an hour. Also most hackathons ask that you not use use pre-existing code outside of a framework, especially if it's a contest. In terms of Layout, I'd be willing to guess that Bootstrap is king.
I change the test by adding a call to a void function, which do nothing. As expected, the results are similar, so it's creating an object inside the loop takes time. And, IMHO, there is no difference, what arguments passed to the function call.
When done by unaffiliated groups without corporate sponsorship, you can come up with interesting ideas. But with sponsors and a copyright assignment, its a good way to get ripped off and not paid for 3 workdays.
i contracted at a company (unnamed, to protect the innocent) that had one of these. the deal was, you worked your regular 8+ hours and then had the "opportunity" to stay up to an extra 16 hours and cook up "unique solutions to our business challenges or new applications supporting our core business competencies" everyone gets a t-shirt. winner gets bragging rights. the company gets to potentially make money off your idea. so now wait a second. you want your employees to spend MORE unpaid time away from their families in order to provide free labor and innovation? i'm astounded the company had the balls to suggest that. i'm astounded people were HAPPY to participate. when you think about it, it speaks volumes about how easy it is to manipulate people. 
Google. If you had more time (ultimately it isn't too difficult) you could try to create some unique code.
Here's the starting point for a pong game from my book: http://aharrisbooks.net/h5g/h5g_13/pong/pong.html A few notes: - This code is unfinished. It's designed to be improved - It illustrates a few key elements of pong (artificial stupidity, ball-paddle collisions) - DO NOT turn this in as your work. Your professor will certainly know. - You can use it as a starting place if your professor allows that sort of thing - You should cite your source (not because I care, but because it's the right thing to do.) - This uses a basic game engine (simpleGame.) You gave no indication what (if any) game engine you're using, and it's hard to believe you'd be asked to do this without an engine for a beginning class. - let me know if you need more help. 
If you don't want to use an ID, because that ID doesn't meaning outside of your React application, you could use the [ref attribute](http://facebook.github.io/react/docs/more-about-refs.html)
I took part in one of these at my previous company, group came in second place and was very well received by the very high up's(CEO/CTO/SR VP's) and was offered to work in the labs to build out the initial POC. The group I personally worked for denied this request. The idea was patented against my will, and within 3 months a consulting agency built out this idea. While the consulting agency may or may not have been contracting by the company, they directly worked with them for many years. Since then, I am completely against taking part in any hackathon. It's great to see my work and idea alive in the real world and to know I don't have crackpot ideas, but it's a slap in the balls to know that the company will be profiting for years to come at the expense of me. 
Upvote because wtf?
ding ding ding ding ding damn, dude. i'm sorry you got THAT screwed. however, if you can leave on good terms AND get management to admit this was your concept then you've got one hell of a resume addition. you can conceivably use it as a springboard to stuff where you won't get screwed like that
Oh I left in great terms, and it's a nice part of my resume. The company is a very old company and is just antiquated fighting to stay relevant in the tech sector, but they're never going ti die. I was caught in a very unfortunate political fight between two organizations, so after 1.5 years I left. Keep in mind thay was my first job out of college, and I took it as am excellent learning opportunity of what I really am to an organization. I've been at my current employee for 9 months and am much happier with my day to day responsibility. The monitary value of what I lost is something I likely never would've hAve seen, I'm just glad that at the age of 23 I was able to grt the recognition I got at the time. Shits difficult in highly political organizations! 
&gt; Shits difficult in highly political organizations! now there's something that should be burned into the brains of every comp sci graduate when they embark on their career sounds like, all's well that ends well. good. glad for you.
I think all jquery plugin developers should start making their stuff zepto compatible or vanilla. 
You don`t need them, but they will make things easier for you, once you set them up :) I will try to explain. Lets say you finish your Angular application, you go n-number of files needed to run your app. If you want you can zip them and ship them of to your customer, instruct them to place the files on a static file server, and your good to go. But, what if: * You would like to concat all the JS/CSS files into one single file? (Gained performance since the browser only need to do one request) * You would like to uglify/minimize your code? ( Making it smaller in size and unreadable) * Move/delete files when you prepare for distribution? All this task you can do manually/semi-manually or you can use a build tool to do it. All this tasks, in addition to every other task you need, you can make automate using a build tool. Bower on another end is a package manager. You use this for downloading external libraries etc. So instead of downloading manually you can use bower for this. This also handles updates so you don`t have to find updates yourself. I personally would recommend you to read up on [Gulp](http://gulpjs.com). In my organisation we just finished moving some old Grunt-tasks over to Gulp, so I have worked with both of them and would say Gulp is the easiest one to go with.
Can you check in a sample tab separated text file?
So, just some poison antidotes Paracetamol N acetyl cysteine Nitrites Amyl, sodium nitrite, sodium thiosulfate Cyanide Amyl, sodium nitrite, sodium thiosulfate OP Atropine, oxime Digoxin Digibind, Fab Ethylene glycol Fomepizole Methanol Fomepizole Ethanol Fomepizole Heroin Naloxone BZD Flumazenil Dhatura Physostigmine Antihistaminic Physostigmine Iron Deferoxamine Arsenic Dimercaprol Oxalic acid Calcium gluconate Strychnine Short acting barbiturates Phosphorous Copper sulphate
&gt; now there's something that should be burned into the brains of every comp sci graduate when they embark on their career Honestly, it's one piece of advise I would give to anyone leaving the academic world for the first time. I had a very unique perspective of the business world because I interned as a financial analyst for 2 years while doing my undergrad. The last 6 months was spent with a new VP and I got to see first hand just how politics will impact an organization, even if you're the lowest level. 
One I find myself rewriting (or copying) pretty often is randomBetween(min, max). Here's one that I've used lots -&gt; http://stackoverflow.com/a/7228322/3244244
Hi thetallestmanonmoon (What a name) I'm a bit confused - Do you want me to send you a link to a tutorial so you can learn. - OR Do you want me to email you the code? I can do either? Josh
Good One! Maybe set it up so you could add the library in your &lt;head&gt; tag. Then later in your document you could do: var int = random(1,4) //Gives random int between 1 and 4.
Thanks for the Jasmine link. I'll check it out.
Thanks! What I think would be awesome to build would be a Javascript library for all javascript developers with functions they, and other developers, use every day. What are your thoughts?
I hate all that shit personally. Sucker shit in my opinion
Your `getJSON` should probably have a failure callback, too. You could look into Promises, and build a more fluent interface. getJSON('json-feed.json') .done(function(){ console.log("success!") }) .fail(function(){ console.log("failure!") }); 
Yeah, i have got an error handler but decided to make it optional, if you look in the GitHub repo https://github.com/JoshuaPage/-Api-JS/blob/master/api.js. The js executes a error handler if the readystate is an error code. Thanks for the suggestion though
what's amazing, to me at least, is there were employees who DID do this after hours. 
Yep, I use it enough that I've put it on npm to save me keystrokes: https://www.npmjs.org/package/randf An integer version: https://www.npmjs.org/package/rnd
Fantastic Idea! - I'll probably download that later! I've got my first version of the everyday javascript library on github. https://github.com/JoshuaPage/everyday.js/blob/master/everyday.js You can do: var int = everyday.random(1, 5) everyday.makeCookie(name, value, days) everyday.readCookie(name) everyday.killCookie(name) everyday.getJSON(url, successhandler) var id = everyday.createRandomId 
Every time I think I'm a good programmer, I stumble on things like this and I feel like a retard. I can't think of a single thing function currying, partially applied functions or function composition could solve a problem that I could have. Can someone provide a non-trivial example?
I haven't made anything significant with Angular so this is a question, not an assertion, but isn't one-time data binding just a performance optimization at the cost of potential confusion down the road? If your app is built on the assumption that `$scope` magically propagates everywhere, isn't making an exception to that rule pretty dangerous from a maintainability standpoint? eg, what if you think something is static now but change it later?
Hi. Thanks for the link. I will use some time with this. The game is suppose to run in a browser window, not in a game enginge(as far as i understand)
Do you want the player to control both bars (using qwery and arrow keys) OR 1 bar player controlled, the other bar moves itself (computer controlled)?
the game engine is in a browser window. It's not a separate window. A game engine is nothing more than a series of objects which encapsulate the problems of game programming that aren't directly solved in JS / HTML, like sprites, collision detection, sound effects, and frame rate. 
You should provide a runnable example (e.g. with Plunker). You should enable JSHint or JSLint and fix the errors (for example, "for (var i in cards)" is not safe). You shouldn't use the "==" for comparions, instead use "===". (Just an example as another problem that JSLint could detect). Global variables should be avoided too. You can create a single global variable like "myApp", and then add properties to it.
Mr TallMan I have finished your game, whats your email?
it doesnt say in the the assingnment so i guess both be user controlled or mouse controlled. There is though a criteria that there is a start button, so that the game doesnt start by itself.
There was some discussion on the point of testing private methods in the comments to that post. Consider functional testing that starts from UI events, for example. Testing all possible combinations of things at the functional level is very difficult, which is why unit tests are helpful. You can test that each unit does what it should with a given set of inputs and outputs. The idea of testing private functions is much the same. If you are able to easily test the code paths completely from the public interface, then fine. Otherwise, I look at unit tests as white box tests and think it's perfectly legit to write unit tests for the private bits if that's the best way to ensure that all of the paths are tested adequately.
Ok i've added the start button. You use arrow keys to control the one paddle and WASD to control the other. Shall I email you the script? or PM you the code?
Thanks for the suggestions. Here's working example: http://plnkr.co/edit/RITMnjsA35c0pMaCChBW?p=preview Here's file to test it: https://www.dropbox.com/s/2xkqhks2p5rrc5f/testfile?dl=1
You don't need them, but they do simplify some things. I always find that if you aren't sure why you'd need a tool, it's best to work without it until you DO learn how it would be useful.
All Done, shall I email it to you?
That sounds really useful. Minification, concatenation, etc are all things I'd love to automate. Alright then, I'll just go with gulp and try to figure it out. I don't want to spend hours trying to figure out what's the best, that's what it was like when I was trying to figure out which framework to pick.
One bug to be aware of is that if you press the start game button multiple times the game loop goes funny
Hi Andrew, I just wanted to say I'm a big fan of all your books, especially PHP5 for the absolute beginner. I've used your books to learn PHP, HTML and Javascript. (infact my Javascript and Ajax for dummies should arrive tommorow!) Keep up the great work! Josh 
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ a single site, we'll be forced to take action. Thanks for your understanding.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ a single site, we'll be forced to take action. Thanks for your understanding.
point taken.
you can send it to me on an email. thanks alot mate. Let me know if u want anything in return. My email is adapton@gmail.com
You don't know anything.
Well.. that's slightly disappointing It doesn't have any getJSON functions or cookie management though
I'm not saying you should give up on your project since underscore is a replacement of some sort, I'm just saying it has a lot of helpful functions you may want to look at and put in your library. Underscore is not meant as the kind of library that would have something like getJSON (though you can get exactly that with jQuery so most seasoned JS vets would probably do jQuery + Underscore together). Edit: now that I think about it, underscore is open source so you can probably make a nice newbie-friendly fork of it maybe? would probably be a lot easier than doing everything from scratch
I wasn't going to give up, A fork is a good idea though. I'm just trying to build a JS library of useful functions to save myself time when building web applications, for example had I used the functions I have in my everyday.js library when i built my reddit image viewer (http://ramirez-tornado.codio.io/) It would have saved about 50 lines of code and 2 hours. I thought it might be cool to add some functions other developers could use too.
To get you started, here is what you need to do: * Download [NodeJS](http://nodejs.org/), this is where we will run all our build utilities. This is done from the command-line. * Node comes with a package-manger for installing modules/packages, this is called NPM and is also runned from the command-line. Run the following commands: * npm install -g gulp //This installs gulp globally. This means that after install you can run it directly from the command-line with the command 'gulp'. This differs from non-global installs which only exits in the project your working on. Now go to the folder your project is located in and run the following commands: * npm install gulp // installs gulp locally * npm install gulp-concat // plugin for concating files * npm install gulp-ng-annotate // plugin for annotating angular * npm install gulp-uglify // plugin for uglyfing files After this is installed, create a file called 'gulpfile.js' and add the following: var gulp = require('gulp'); var concat = require('gulp-concat'); var ngAnnotate = require('gulp-ng-annotate'); var uglify = require('gulp-uglify'); gulp.task('my-task', function() { gulp.src('./&lt;your_source_folder&gt;/**/*.js') .pipe(ngAnnotate()) .pipe(uglify()) .pipe(concat('output.js')) .pipe(gulp.dest('./dist/')) }); Change &lt;your_source_folder&gt; to your source folder ;) Save this and run the command 'gulp my-task', and you will have a folder named 'dist' with a file 'output.js' which is all your source code, annotated, uglified and concated. Good luck :) 
There's a pretty big difference between all private/privileged members (i.e. defined in the constructor) and using the prototype chain too.
So it's kind of like Meteor? Their website needs a better description up front. Looks very interesting though. Also...why u style my scrollbar? Plz no. EDIT: To be more constructive, I think the picture in the section "What is the Big Picture" should be at the top of the article :)
Seems like everyone's reaming V8 this year.
Holy fuck. A hairline that changes color! Innovation!!
Or: I just learned SVG, watch me go batshit.
Nor should it! I think you should read a bit about Unix philosophy and separation of concerns. it's better to build a "library that does X" than one that "does X, Y, Z, and a hundred other things"
form.serialize is find if the json sent matches the end point, but if you change either, it'll break, so depends on how dependent you want one on the other. as for on, vs. submit, this purely depends on whether the form is being generated through javascript, or if the page is rendered, then javascript is bound to it. What I mean is this, if you're doing something like: var form = generateForm(); $(formContainer).append(form); You NEED to use $(...).on('click', '#myForm ....', function() { ... } This is the new way jquery watches for binding to dynamic HTML (look up the deprecated .live(...) method in jQuery). Otherwise, .submit is fine, also, I think you can do $(...).on('submit', 'form.selector', function () { ... } instead of the button click.
Why just use window.open instead of InAppBrowser? I have used this in cordova and works fine. 
Can this only do `&lt;img&gt;`s? Presumably they can't block CSS backgrounds.
That's actually amazing.
We thought this was a really great JS tool for when you need to make some terrific graphs out of your data.
Slightly off topic: If you don't need all the bells and whistles of a complete IDE, I would suggest using Sublime Text with complementary packages for linting and formatting and whatnot.
The performance problem that can be improved by one time binding is not so much slow DOM mutation but the inherit cost of dirty checking everything you want to display. If you have several those watches the digest cycle is going to be slow no matter what, one time binding allows you to reduce the number of watches.
It looks like this is only supported in FireFox currently? https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API#Browser_compatibility
The problem is that to intercept a request made in CSS it would have to be parsed first and then somehow prevent the construction of the CSSOM from making a request for any background image. I suppose that if you loaded the stylesheet(s) dynamically (like in the 'load only the styles you need to render above the fold content" method) you could examine them and alter as appropriate before applying them to the document. But that would mean tailoring the stylesheets so no images were in the one declared in the &lt;link&gt; tag (or inlined). Doable, but is it worth the effort?
I have a sort of community-sandpit for the same reason, still not occupied :D But i had the same idea to gather useful functions, but not into a library, but into a github repo. Maybe you should take a look at it :) https://github.com/jim-y/smarty-js
In the company I work we tried this a while back, it was two days around 12 hours each (paid and during work day hours). Two teams both given the same brief something similar to the type of applications we build for customers. I ended up spending half of the first day teach team members how to use git and battling with hacky code. End the end up my team won mainly for the fact that we had a working application it was simple and only pushed some boundaries but at least it worked. The other team tried out loads of new tech and had some great idea's however they battled the company proxy most of the time getting different services working. Ending up without a working prototype. I think hackathons are best for the weekend, maybe sponsored by the company as in supplying free pizza and beer but allowing the people to choose the applications etc. However that can result in little to no return for their investment. 
yeah, I got pretty confused because of all these HiDi displays so I gave up trying to figure them out. Is it their scaled resolution? :P 
Good question. Beyond the usual caveat of "it depends on the project/how dysfunctional the requirements gathering process is", my answer would be: "No it's not a big deal." For the 3 data-driven apps I've made, if the client suddenly wanted a scope-bound DOM element to be dynamic after the first use, I would have way more stuff to do than add "::" in the html partial. If the scope property in the html now needs to display different values at different times, you will need to do general programming tasks to accomplish that like modifying a data scruture to be more complex (primitive to array or nested arrays/objects), creating new logic, retrieving and comparing values, and so on. Compared to that, "::" is like a cherry on top. But sure, it depends. There could be some situation where this gets out of hand, mixing up a bunch of binding types.I can't imagine one, based off of my projects, though. I think it would indicate bad architecture, or not understanding what the role of the data is. My apps required a clear structure with distinct responsibilities in each part. Angular provides good code organization with directives getting specific bits of data, controllers handling their own scopes, services sharing data between scopes, all of this is handled in the architecture before I got down to the DOM level. So, it would not be premature optimization in an apps like that
No demo? I'm outta here.
modifying an existing (extremely complex) application is probably not a good starting point IMO.
I'm not exactly sure what you mean, but I'd say that best practice is to make a site that scales smoothly no matter the size of the display. You can make multiple break points with media queries to achieve that. I'd suggest this source to read up on it: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries
I work for Meteor (but my opinions are my own). I'm excited to see all the different work on data sync. I think it would be great if collaborative GUI apps had a git-like experience for resolving conflicts, though I haven't really seen it done. Using CRDT to "automatically" resolve conflicts that occur across long time spans (like hours when you work on a plane) sounds questionable to me from an app UX point of view. The Meteor model is based on the idea that applications typically define their own high-level "operations" which they then proceed to validate and apply permissions models to. It's harder to reason about your app if its interface with the outside world is a data layer that exposes low-level data editing operations.
https://www.coinbolt.com/catshop/#bought?W3siaSI6NCwibiI6OCwicSI6MTgsInAiOjAuMDAwMjJ9LHsiaSI6NiwibiI6MywicSI6NywicCI6MC4wMDAyMX0seyJpIjowLCJuIjo0LCJxIjoxNywicCI6MC4wMDA2fSx7ImkiOjUsIm4iOjEsInEiOjE2LCJwIjowLjAwMDEzfSx7ImkiOjEsIm4iOjcsInEiOjgsInAiOjAuMDAwNTJ9LHsiaSI6NywibiI6MCwicSI6MywicCI6MC4wMDAyM31d
**Head First JavaScript Programming** by Eric Freeman and Elisabeth Robson is the best book for new JavaScript programmers that I have read. It is excellent, as the Amazon reviews confirm.
Haha, so did you buy all six cats or is that a bug?
lol, ya. It's for an easy integrated experience with the Coinbolt bitcoin wallet. When I add a server component, it'll be a bit better.
Yeah, here's what you have to type into your console on that page to get to the "bought" screen. window.open((function(){ var loc = window.location var base = "#bought?" var catConfigs = cats.map(function(cat) { return cat.config }) var catConfigB64 = new Buffer(JSON.stringify(catConfigs)).toString('base64') return loc.origin + loc.pathname + base + catConfigB64 })())
"Powered by asm.js" is a rather elaborate way to say "*totally* not written in JS". This has even less to do with JS than Dart. Asm.js is C, C++, and soon also Rust. It's very very far away from JavaScript and all of the fancy stuff provided by the engines.
That was very interesting! Thanks for a detailed description.
But you can still avoid semicolons there: var foo = function() { console.log('scrableu') } !function() { console.log('hello') }() You can use any unary operator in there, like `void`, or `+`, or `-`... I find semicolons quite noisy so I avoid them whenever I can.
Not sure if this is the issue but it looks like you are missing a } in $(document).on("pagecontainerload",function(){ var currWidth = $(document).width(); if(parseInt(currWidth) &lt; 760) { document.getElementById('body').style.backgroundColor = "black"; }) should be: $(document).on("pagecontainerload",function(){ var currWidth = $(document).width(); if(parseInt(currWidth) &lt; 760) { document.getElementById('body').style.backgroundColor = "black"; } }) 
Basically, I want no matter how big the content gets and no matter what direction it goes in, I want there to always be an extra 250px more than the content so that theres a nice gap between the edge of the content and the furthest possible scroll position.
You are both wrong and right. Asm.js is still Javascript but it is typically code that has been converted from traditional typed languages.
asm.js is the testament to some people going to great lengths to avoid having to use JavaScript.
It also runs FAR faster than any native js you would write on your own, so there's that too.
Eloquent Javascript is good Edit: it's also Free www.eloquentjavascript.net
var?
Also off-topic: why are you using Eclipse for Javascript? There are better IDEs out there ([WebStorm](https://www.jetbrains.com/webstorm/), [Visual Studio](http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx), etc.)
It stands for parse integer. It's basically parses a string for a integer value. The second parameter is the radix, which is optional. It's number system to use. As long as the x or y wouldn't start with 0, you wouldn't need it really. 
If they haven't programmed too much yet, this is a good book. If they got quite a bit under their belts, I'd go with Eloquent JS. But I always recommend Tree House or codeschool. But I guess that voids the need for a class?
Yeah you should def be using media queries and remove the Responsive code out of js. Retina screens aren't going to change how your media queries work. Only thing there is you might want to server up better images but that isn't css
Yeah, this is definitely the way I would do it. It's similar to how Facebook's Flux pattern works https://facebook.github.io/flux/. Basically having a Dispatcher or Mediator take in events and pass them to whom ever needs them
var val = document.getElementById('#NonExistingId').value; or var i= j=0; var res = j/i; or try: throw new Error('error details here');
 throw new Error('message here');
&amp; you scared me :p
for shortness: 0();
Output to where?
What are the specs of your computer? maybe the problem is there. I played Super Hexagon and FTL (on Chrome) and it's worked just fine
Wow great PC and I don't know what about Firefox but in chrome you have a limit of 1GB ram per tab so that can be a big problem especially when even games like Minecraft need 2GB or more
Is that the case right now? I remember doing some PoC a few months ago and the compiled-to-js code wasn't faster than carefully made code in js. In fact it was much slower.
http://noflojs.org/
&gt; Asm.js is still Javascript It's a compile target. The point was that you don't write JavaScript. You write C/C++ or something like that.
It is written in python? What does this do in /r/javascript?
Cheers.
I'd love to see where you go with this, as I also have a form library ([newforms](https://github.com/insin/newforms)) which has a hard dependency on React and laid the groundwork for [something similar to (1)](https://github.com/insin/newforms/commit/7a0e426cd064dfd192ce5dab990aca580df9f87b) in a branch but never went any further with it. Before React came out, I used to render using my own DOM library which generated a VDOM to stringify to HTML or created DOM elements directly, but I moved to React because I previously had to blow forms away on each render. Another thing you'll have to deal with is how you handle onChange events outside of React, as [React's onChange is a shim for the input event](http://benalpert.com/2013/06/18/a-near-perfect-oninput-shim-for-ie-8-and-9.html).
There's a few Chrome extensions that have this behaviour. Go on to the chrome web store, find one, install it and check out its code. I had a look once and they dont refresh the page, theres another way to get the details. 
Languages which are very similar to JavaScript like TypeScript and CoffeeScript run at about the same speed. Thanks to its optimizing compiler, compiled Dart code is [comparable to handwritten JavaScript](https://www.dartlang.org/performance/) even thought the semantics of the language are quite different. Depending on the language features you used, the code produced by Traceur can be extremely slow. Well, they recently addressed [one of the biggest issues](https://github.com/google/traceur-compiler/issues/6). Things should be quite a bit better now. The code generated by Emscripten is drastically faster than handwritten JavaScript, because, with a language like C or C++, you simply can't do any of those things which make JavaScript expensive. Those high level abstractions come at a price. Innocent looking lines like "foo.bar = 5" are actually extremely heavy stuff in JavaScript. Other scripting languages (Ruby, Python, etc) which compile to JavaScript are rather slow, because their compilers aren't nearly as advanced as Dart's and because those languages weren't created with this use case in mind. GWT's performance is pretty decent, as far as I know.
You can still do unidiomatic code without object references by hand, can't you.
Yes, there are ways to make ASI "put" a semicolon there. You could as well just put the semicolon there yourself. ;function() { console.log('hello') }() But for some reason this isn't acceptable to JS hipsters who must avoid semicolons at all costs. Personally, I really don't see the point. It's a lot easier to just add the semicolons and not think about it.
Awesome comment raynos, thanks! Now I have to read a ton of things :) For now just an observation: &gt; I don't think either project would be interested in breaking its APIs to conform with the other either, and personally I don't care for API standardization bureaucracy a la Promises/A+. I think we, as js community, should put aside every personalism and "try to walk with our legs" (it's an italian proverb I don't know if it's meaningful for you). Basically it means that since this problem belongs completely to the user land, we can do something together without waiting the W3C or other similar bureaucracy.
I wish it did, but sadly the width of the container doesnt respond to the width of the dynamic paused animations. only their origin not their new location
Thanks for the response, putting the problem in context is helpful.
I would suggest trying the pub-sub pattern (http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern) for cross-component communication. I have successfully used that even for large-scale JS apps. The main benefit of pub-sub is that the publisher is sending the message out "in the wild", NOT targetting any particular receiver. Some messages are thus not received at all, some are received by multiple subscribers and so on. It is consequently up to your consideration whether you want to pass additional (variable) data with your messages, whether you want/need to make the publisher known (i.e. a message property) and so on.
 A http://jsfiddle.net/ working code demo would go a long way in illustrating the problem.
I'd recommend to watch [The Birth and Death of Javascript by Gary Bernhardt](https://www.youtube.com/watch?v=tMEH9OMYmsQ), if you're interested in asm.js
jsdom?
A cheap hack (if you use jquery) is to wrap a plain object `$({})` so that you have the on/off methods available to use as your pubsub router. You make that wrapped object available to everyone that needs it and register callbacks with event strings. $pubsub.on("namespaced.event", function() { });
JavaScript Object Notation... but really, I have no clue.
For super shortness: `#`
&gt; JSONML...It kind of works but is a pain to write. Yeah, a struct is more verbose but maybe clearer: // my component VDOM ['div', {className: 'form-group'}, ['label', {'for': 'name'}, ['input', {type: 'text', id: 'name'}] ] ] vs { tagName: 'div', properties: {className: 'form-group'}, children: { tagName: 'label', properties: {'for': 'name'}, children: { tag: 'input', properties: {type: 'text', id: 'name'} } } } and a fancy test: var actual = mycomponent(); assert.equal(actual[2][2][1].type, 'text'); vs assert.equal(actual.children.children.properties.type, 'text'); I noticed you have a `namespace` property. Is it for SVG support? &gt; Note that patch is not enough, you also need a way to "create" an element from a tree for initial rendering You are right, I forgot that! I'll add to the "manifesto". However I think it's connected to how you want to handle the event handlers. For example, IF we assume that VDOM and Events are handled in two separate phases, you could even use `toHTML(vdom)` and `innerHTML` for the very first rendering. &gt; doing a diff with an empty vnode and a complex tree and applying lots of patches is a bad work around. Interesting. You say that for perf reasons or something else? Anyway is a good thing having a `create(vtree) -&gt; DOM` function. Then the implementations can choose how handle this case. &gt; re-usable views is as functions that return VDOMs only works for stateless views. Most views are not stateless. This is a pain point for me when I look at React. I don't like the difference between `props` and `state`. I think the system would be simpler if we had only props and all views were stateless. Let's discuss it! Now I must think about the elefant: &gt; Unless you define what Events means this won't compose well. p.s. You and Matt-Esch have done an amazing job! 
I've implemented https://github.com/fiduswriter/diffDOM to create a Backbone virtual DOM that updates only changes based on DOM diffs. A sample of how I used it can be viewed at: https://gist.github.com/zulfajuniadi/bd95fe5e047cb9aa01c7#file-app-js
Right - I think mediator and pubsub are two names for the same idea? What you described is exactly what I am thinking of doing.
Well I like to keep all my development in 1 place. I'm a java web developer and it's nice to keep all the code in 1 editor. Of course I'd use Visual Studio for C#, maybe sublime if using Node, etc... 
 try { throw 'foo'; } catch (e) { console.log(typeof e, e.constructor, e.message, e.name); } try { throw new Error('foo'); } catch (e) { console.log(typeof e, e.constructor, e.message, e.name); } With Firefox 34: string String() undefined undefined object Error() foo Error You can throw anything: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw
K, that makes sense. Sorry, I don't know of any good linters for Eclipse.
&gt;var val = document.getElementById('#NonExistingId').value; You can just write "null.x". &gt; var i= j=0; Implicit global 'j'. &gt; j/i Division by zero is alright. 1/0 is `Infinity`.
 Just a quick note on your 'more verbose' example. `children` wouldn't be an object. It would be an array of objects.
This doesn't seem to be a good use case to me. If `someArg = "foo"` var myVar = someArg || {}; // myVar == "foo" whereas var myVar = !!someArg || {}; // myVar == true 
We recently (literally just this week) switched from browserify to webpack going off a post I read from someone at Instagram. Long story short: **make the switch**. It was a drop in change that required about 3 hours to get fully working. Our build time is dramatically shorter and we get incremental builds (sub-second). Also, don't use 'gulp-webpack' package. Just use the 'webpack' package so you don't limit yourself on functionality. 
I agree, though, it might make foo = bar !== undefined ? bar : baz shorter, though: foo = !!bar ? bar : baz
That's the problem with doing those articles late at night! I totally missed that. I've updated the article to reflect what @gkatsev said above. What I had previously would have introduced a bug. Thanks for the heads up hixsonj
You tell'm!
The thing about the !!bar over the !== undefined though is this...the !!bar would also take care of nulls as well, and potentially a number of other cases. While it's not perfect, it's definitely a nice shortcut if you know the ins and outs of using it.
What language are you used to working in? what's the toolchain there? If you want to remove grunt from your toolchain take a look at [npm scripts](http://substack.net/task_automation_with_npm_run). You'll still need to use Karma to run the tests but setup becomes simpler as you no longer have to install things like karma or grunt globally. 
Oh thanks. My example is totally wrong, sorry. They are both quite ugly if children is an array. What about this? If there is only a child, children is not an array. I think React do the same thing for perf reasons EDIT: more formally: a Virtual Node is a struct with the following props: - `tagName`: enum of 'div', 'a', 'input', etc... - `properties`: null | object - `children`: Child | list of Child where Child: null | string | Node extras: - the `className` property might be: string | object where object is an hash string -&gt; boolean (like React cx) - the `style` property might be an object where the keys are expressed in JavaScript syntax. Example style: { textAlign: 'center', verticalAlign: 'center' } 
upvote for using jsperf, which the original post does not do. edit: my results: Firefox 32, implicit is 55% slower than explicit
This article is comparing apples and oranges. `!!` is used in type conversion. It's really fast and good at that. The problem with the test is that it's performing an equality `==` operation, which has type coercion in one, but no type coercion in the other. That means it's testing the performance of `==`, _not_ the performance of `!!`. In real use cases (identity, ternary, and conditionals), there is no performance gain. See this test: [http://codepen.io/traviswatson/pen/qHksp?editors=001](http://codepen.io/traviswatson/pen/qHksp?editors=001)
&gt; I was shocked myself to find out that the !! is WAYYYYYY faster than the non-!! version. In Chrome, it was about 2x as fast. Here's the problem with relative time comparisons (e.g., 2x). Imagine some task takes 2 clock cycles, and some alternative takes 1 clock cycle. OMG THAT'S 2X FASTER! Relative time comparisons aren't enough. We need to be aware of the absolute time scale. In this bang-bang case, it's nanoseconds. Don't sweat the small stuff.
Interesting - I'll take a look at this closer. Thanks for putting together the codpen. As the author of the article, I really appreciate the feedback. It'll probably be later today when I can look through exactly what you have, but thank you for taking the time to respond back.
Ah gotcha, that's what it seemed but it seems so simple I didn't think that was the case. Is there any way to do so without access to the other domain? Maybe by modifying the inline styling of the iframe to equal the scroll height?
Thanks for the reply - flux looks very interesting.
Grunt is a task runner, it helps you configure various tasks that need to be run (e.g. build, concat, test, etc.) It is not necessary if your project is simple or you don't need to do that much stuff. Karma is a test runner, it has features such as a watch server (watches the file system and runs your tests when certain files are changed), it's able to run multiple browsers at the same time. If you are only running phantom and don't want the advanced features you can run your tests using jasmine directly Node is the runtime for all of these tools so it's necessary in the chain. Everything else is optional. In fact you can swap jasmine out for mocha. This is the great part about developing in node, there are lots of options for your tool chain.
It seems like the JIT would handle both of these situations almost identically. Unless I'm misunderstanding the JIT
TL;DR of the test: The performance difference between: if(someTruthyFalsey) { and if(!!someTruthyFalsey) { is negligible. The reason your conclusion is invalid is because you're using the `==` which should never be used. Stop using it, and try to come to the same conclusion.
So why use it?
[ractivejs](http://www.ractivejs.org) is another. [Here's](http://blog.ractivejs.org/posts/whats-the-difference-between-react-and-ractive/) a comparison between it and react. [Another](http://blog.ractivejs.org/posts/whats-the-difference-between-angular-and-ractive/) comparing it to Angular.
With tape + beefy/testling it's only a couple lines for setup, and it works in the browser. See prova for another easy test runner built on tape. 
Except isn't this still running into the problem of one using the equality operator and the other one not? This was the perf I ran and got almost identical times. http://jsperf.com/truthy-testing/2
Was going to link this. very funny, entertaining, and it's a great demonstration of the power of asm.js
why not: foo = !bar ? baz : bar save a character
you can use `Boolean(someTruthyFalsey)` if you want something less hacky looking. Minor perf drop from bang bang. http://jsperf.com/bangbang-vs-implicit/3
I respect this, but on an extremely large scale, I feel like it'd make a difference. For pretty much anything you're doing client-side, this isn't going to matter. Where it might matter is in extremely large-scale server-side code. That being said, *any* optimization is significant with reference to extremely large-scale server-side code...
Threadpool.js https://github.com/andywer/threadpool-js
Links (&lt;a&gt; tags which have an "href" attribute) cause the browser to issue a GET request when the link is clicked. GET requests specify a URL. Some part of that URL, either in the query string or the path, should have an ID or some way of specifying which entry to show.
Query string? Do you mean entering the GET request directly in the href attribute somehow? Sorry, I don't quite understand what you mean, I am quite new to web development beyond HTML/CSS :P
The problem here is that we could share data structures. But you need two implementations to agree out of { mithril, virtual-dom, react }. Getting agreement on the interface is going to be really hard with the breaking changes. I'm also not sure whether we can make virtual-dom work with these foreign data structures and the perf hit might be too big.
Ok I'm not really sure why you would want to use JS over a server side language - a single php page can dynamically display any data passed to it: &lt;?php $foo = $_GET['foo']; $bar = $_GET['bar']; echo "Hello $foo my name is $bar"; ?&gt; But I've created enough Frankenstein sites to just not question your reasoning. The following JS code should work in returning the value of a requested HTTP GET parameter. function HTTPGetJS(name) { name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); var regex = new RegExp("[\\?&amp;]" + name + "=([^&amp;#]*)"), results = regex.exec(location.search); return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " ")); } var first_get_parameter = HTTPGetJS('GET_PARAMETER_1'); var second_get_parameter = HTTPGetJS('GET_PARAMETER_2'); -------- So if your URL looks like: http://www.example.com?foo=first&amp;bar=second You can use the code above by setting var GETfoo = HTTPGetJS('foo'); var GETbar = HTTPGetJS('bar'); and var GETfoo will return "first" and var GETbar will return "second". 
That's because you're boxing the variable as distinct from casting it.
There's a simple XML to JSON lib: https://github.com/stsvilik/Xml-to-JSON From there you can do whatever you want with the json.
Sorry if i seemed really determined to do it in JS - I just got stuck on how to actually "set" a GET variable, the only way I've seen people passing stuff through POST/GET with php is in forms. But if there is any other way I'd love to hear about it!
Again, I completely respect and appreciate the time you put into the answer. It won't be a TLDR. I'll give it the time it deserves. I'll also adjust the article accordingly as soon as I have a chance to consume it all. Thanks again.
When you want to open external links within a phonegap/cordova application it's better to use inAppBrowser. If you don't use it and open it directly from cordova's webkit browser probably your ios device won't associate the itunes links properly. You can see projects like http://adodson.com/hello.js/ that uses also inAppBrowser to open external links 
also, when you open an external link within a cordova application you will open it into your application view. It you do that your will have problems with your application state.
Setting a GET variable is as easy as passing the variable in a URL. So in my example URL above (http://www.example.com?foo=first&amp;bar=second) you have two GET variables: foo with the value of "first" and bar with the value of "second". I don't know how you have your site set up, but if you want to have &lt;a&gt; tags that link to a page which displays particular data, you could do the following: **List Page:** &lt;HTML&gt; &lt;a href="datapage.php?id=First"&gt;First&lt;/a&gt; &lt;a href="datapage.php?id=Second"&gt;Second&lt;/a&gt; &lt;a href="datapage.php?id=Third"&gt;Third&lt;/a&gt; &lt;/HTML&gt; **Data Page (datapage.php):** &lt;?php $id = $_GET['id']; // $id will return whatever was passed to it from the a href. // ex: clicking "First" on the list page will set $id to "First" on this page. // Once you set $id you can make a call to your MySQL database and select the result with $id and display that info accordingly. ?&gt;
No. No, no, no, no. No. Stop that. Yes, there is a performance difference, but that isn't why you see people do this. It's not about performance. It's about types. Unlike in some other languages, boolean `&amp;&amp;` and `||` don't simply return `true` or `false`, they behave more like the ternary (`a ? b : c`) operator. Given a variable `truthy` with a value that is evaluated as `true` and a variable `falsey` with a value that is evaluated as `false`: * `truthy &amp;&amp; falsey` evaluates to `falsey` * `truthy || falsey` evaluates to `truthy` * `falsey &amp;&amp; truthy` evaluates to `falsey` * `falsey || truthy` evaluates to `truthy` This is awesome in some cases (like providing default/fallback values) but can leak implementation details in other. For example, consider a function like this for checking whether a string is empty: function isEmpty(str) { return str; } Because an empty string evaluates to `false` when treated as a boolean, we can use this (admittedly redundant) function to check whether a string is empty, e.g. `if (isEmpty(someString))`. But if we actually look at the return value, we see the function returns its input string, rather than a simple `true` or `false`. This is probably not expected and can result in confusion when the user tries to do something like `if (isEmpty(someString) === true)`. We could say `return str ? true : false`, but having a ternary just to get `true` and `false` seems silly. Instead we can use the function `Boolean` (which is the constructor for boolean types but acts as a conversion function without the `new` keyword): function isEmpty(str) { return Boolean(str); } The double bang is a [common idiom (see listing 3.B.2.2)](https://github.com/robertbrockie/idiomatic.js) that does mostly the same thing but with less characters: function isEmpty(str) { return !!str; } The styleguide I linked, called idiomatic.js, also describes some other, similar, shorthands: * `x + ''` is equivalent to `String(x)` * `+x` is equivalent to `Number(x)` Note that I say "equivalent". There are subtle differences (e.g. if `x` isn't a string, `String(x)` calls `x.toString()` whereas `x + ''` calls `x.valueOf()` (and if `x.valueOf()` doesn't return a string, then actually calls `x.valueOf().toString()`), but for most intents and purposes they don't matter much in the situations in which you would use either expression. If you think this is primarily a performance trick, you're doing JavaScript wrong. Unless you're manually writing highly-optimized low-level JS code (asm.js), but then you should probably be using a compiler anyway.
[Meanwhile at most companies](http://i.imgur.com/lqIAj.jpg).
Actually you can use CSS to serve @2 and @3 images ;) but yeah I'll probably rewrite the entire thing
POST variables are submitted via a form (or via ajax post requests). In your case: &lt;form name="myForm" method="POST" action="datapage.php"&gt; &lt;input type="text" name="foo" /&gt; &lt;input type="text" name="bar" /&gt; &lt;input type="submit" value="Submit!" /&gt; &lt;/form&gt; Note the method="POST" and the action="datapage.php" in the form start tag. Then, foo and bar will be accessible in datapage.php like so: &lt;?php $foo = $_POST['foo']; $bar = $_POST['bar']; ?&gt; 
So theres no way to do them in pure PHP without using forms?
I can understand: if (truthy) { console.log('yep'); } else { console.log('nope'); } a lot faster than: console.log(!!truthy ? 'yep' : 'nope'); ... just saying
Yes, I have to say, in that case it doesn't make such a big difference, because it is one single character... Past a 100 lines is when I start to see noise reduction. After all, if we have ASI, why not leverage it? But this is a pointless discussion anyway. Minifiers handle semicolonless code, and so does JSHint with `asi:true`, so it will warn you if you really need one. It's all about choice, and it doesn't affect the code in any meaningful nor disastrous way.
thanks, added to the list.
In this instance, an example of URL query strings would be: http://www.google.com?key1=value&amp;key2=value Then your code would have access to those key/value pairs.
Sounds reasonable :)
Just as a heads up, being the author of the article, I'll be revamping the article this evening to include this type of feedback. I appreciate the long and detailed response. My performance measure (which was negligible after fixing my == vs === in my test) is definitely not what the !! should be used for. Thanks again for the feedback.
Not sure about the newer versions, but 3.4 is like client-side ASP.NET Webforms. Lots of unnecessary abstraction that seems to want to make javascript development feel like Winforms development.
 var SECOND = 1000, MINUTE = 60 * SECOND, HOUR = 60 * MINUTE, DAY = 24 * HOUR; Then you can do var oneAndAHalfHours = (1.5)*HOUR; var thirtyMinutes = 30*MINUTE; Et cetera.
There is not an XML DOM or an HTML DOM. There is only one DOM. You access that element exactly the same as you would if it were HTML. document.getElementsByTagName("bookid"); The only trick here is grabbing the specific bookid element in the case where there are more than one of them in the document. I cannot tell you how to do this, because there is not enough provided code context. If the element is unique then simply grab it: document.getElementsByTagName("bookit")[0].innerHTML = "my new value"; Once you have the element just assign text to its innerHTML property, like the above example. Keep in mind the innerHTML property will not sanitize your input, so content with forbidden characters can break your XML.
Why would you convert anything to JSON if you just need to access the DOM?
Please be very careful when accepting PHP code people give you. It has an unfortunately high probability of being very broken in some way, and this is no exception. When outputting data, you should take care to encode it appropriately for the context it is being used in. Here, this hasn't been done, meaning that anybody can construct a link to your site that includes code that will run JavaScript in the security context of your website. This means that they can change content for anybody following their link to your website, steal cookies, and all sorts of other things that you don't want to happen. More mundanely, it means that random things break unexpectedly, such as content that includes less than signs disappearing. 
Right now, the website I'm making is mostly for hobby purposes, to learn. There will be no sensitive information in the MySQL database. For that reason I'm not too concerned about security at the moment and I'm a bit too new to web development to understand security fixes and concerns right away (and also I like to see progress happening, easier to do that if i can just finish some functionality, move on and deal with security later). I do realize though that securing ones website is extremely important - I reeeaally need and want to learn how to do this. If you could share some easy-to-understand tutorials on webdev security, it would be hugely appreciated. I tried googling the subject earlier but couldn't really understand anything :( 
If you are not opposed to using Node then I have already solved this problem for you. http://prettydiff.com/api/node-local.js It can walk entire directory structures fully asynchronously. I can parse and diff thousands of files in seconds. You will want to steal from the "directory" directory and remove all references to "dfiles" and "dfilesdump" and such.
&gt; for code that has a bad big O there is a definite advantage to using it Um. You mean the exact opposite of what you said. If the time complexity is "bad", then optimizations on the tiny stuff don't matter at all. 
It's really wonderful to see you responding and taking the criticism as constructive. Sigwhite has a great write-up and many good points. This is one of the most radically awesome aspects of utilizing reddit for self-promotion. Thank you for sharing and for listening!
Thanks for your reply. I have to admit that I'm too much of a noob to understand how this is supposed to be used. I hope it doesn't sound lazy to ask for an example.
nice article
D3
I use a variable or constant whose name contains the unit ("seconds", "days", or something like that) and then I multiply it where it's used. If you see something like "fooSeconds \* 1000", you can tell what's going on there. If there is a "Duration" class, I use that. The one from Dart is pretty nice, for example: https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/dart-core.Duration
Absolutely, but then that was what the benchmark was trying to test ... No point in using the ternary operator in your !! test. I tried your test with `(!!truthy[t] == true)` and it was a about 4% slower than the others, and with just `!!truthy[y]` which was predictably the fastest. jsperf decided I was spamming and wouldn't save it. Really this all just an exploration of how fast the various js engines do things. I would never use any method other than !! to convert something to its boolean truthy value, and as has been pointed out you if you use `(something == true)` then the expression will evaluate to a boolean rather than the `something` value (which is what you want in the default parameter use case).
I have done this before and it works reasonably well. The only caveat I'd mention is to pass an event enum rather than raw strings to the on / trigger functions.
indeed, or `foo = bar || baz` save another character. or even more if you include white space. and happens to be exactly what hixonj was pointing out and we've come a full circle. 
It comes in handy for object existence checks. !!null and !!undefined is false. !!thingy is (roughly but not really) equivalent to !(thingy === null || thingy === undefined)... But there are gotchas. Since it is coercing into truthyness, falsey things will be false. So !!false and !!0 are both going to return false. Understanding that, if the parameter to your method should never be an int or boolean and should always be an object, then !! makes an ok shorthand to check if the thing is non-null and undefined.
To be honest, the article and also this thread here should be taken down ASAP before more idiots skim-read it and come to false conclusions.
That title is incredibly misleading. For a second, I thought I was reading about JavaScript a 100-200 years from now, which seems impractical. I didn't expect a bunch of "StarTrek"-ish dialogue and code (not that I'm complaining...).
The only time I've seen it used usefully is when returning boolean values based on the state of a variable. Let's say I have a variable called text whose value is filled by an asynchronous function. If I want to check if that value is ready to use, I could do something like: isReadyForUse: function() { return !!this.text; } (I pulled this out of the codebase I work on). This will only return true if the value of this.text is set. Basically it's a shortcut to writing: return this.text !== null (we nulled out the value on initialization of the object). I argued with the guy who put it in because it's so uncommon to see, but ultimately I relented cause who cares. He enjoys using it and once I understood the intent (which I'll admit took a little longer than I'd like) I could see it as identical to this.text !== null.
Honestly, strings, numbers, and booleans are pretty common as arguments... If you want to do an argument check, `foo != null` is much better, because it *really is* equivalent to `!(foo === null || foo === undefined)` (assuming some idiot hasn't redefined `undefined`). 
Very nice article. It takes some of the best concepts of javascript programming and condenses it to one entertaining and easy to follow post. 
I like flot, but if you overload javascript with tons of data any option will be slow. Also, shy away from svg based options (but I still love D3). They create elements on the page, canvas will be better. But test that out.
To be honest, nothing really. Just one less character. 
Scripts trying to access a frame's content are subject to the same-origin policy, and cannot access most of the properties in the other window object if it was loaded from a different domain. This also applies to a script inside a frame trying to access its parent window. Cross-domain communication can still be achieved with window.postMessage.
The overhead really shouldn't be that onerous. Also, there's always the possibility the JIT can optimize such "casts". With that said, the !! is a common enough pattern in JS that it shouldn't cause much conceptual overhead.
In this sense, there is no such thing as pure PHP. As ds111 says, PHP is running on your server, and returns/responds with (usually, for a website), a HTML page. Once this page has been returned, there is no such thing as PHP on the client browser. The same thing goes for your A elements too. They are not PHP, but simply tell the browser to, when clicked, redirect to the address specified by the href attribute. There's no PHP there. Same thing with a HTML form. It is what it is, no PHP once you're on the client. The action attribute tells which URL to submit the form to. And the form method attribute (can be GET or POST), tells it how to submit. If you have a GET form, the browser will end up making a request to the action URL, with a querystring as a way of passing the form variables along. (eg. actionurl.php?foo=bar) If you have a POST form, there will no querystring, and the browser will instead do a POST to actionurl.php, with the POST data inside the request body. Think of it as, I'm sending a request to this URL, and this is the data I'm sending with it. With GET, you're not sending *any* data with it, your just making a URL which has some extra information on it. Kinda like send an letter to someone, but you wrote some extra stuff in the address on the envelope, which they receiver will understand, but the post office will just ignore and otherwise send to that location. OR, you can actually send a letter inside the envelope. ie. POST data. --- Bit more of an explanation of HTML forms here, but, main thing to clear up is that, once the response is sent from the server, it is done. PHP isn't settings POST variables, it's just sending back HTML, with a form, which has some form fields (~variables, kinda), and those fields already have some default values set.
Oh. Yeah I do the 1000 * 60 * 60 * 24 and so on thing too. But if you make variables like in another comment that would be nicer IMO. 
I hate this. They're only using Backbone to wrap a Kinetic.Rect instance. You could do the same thing by just extending Kinetic.Rect with vanilla JS in like 2 lines of code. Bro, do you event object-orient?
I suggest you have a recursive function that AJAXes the files, then when its dont, the call back function calls itself to load the next file. 
I see! Thanks!
But boxing is not casting! Boxing creates an object. Boxing a boolean is *really* asking for trouble, because objects are always truthy, and === does identity comparison on objects. new Boolean(true) === new Boolean(true); // is false if (new Boolean(false)) {console.log('true')} // prints
What if the string exists but is empty,or your checking for a number and 0 is valid?
One thing that didn't get a mention is plugins. Being able to modify or extend a module's behavior at runtime *in a way that affects all other depending modules*, destroys your ability to reason about the dependency graph, resulting in sadness.
Thank you, I thought security was more about parsing strings to rid of malicious content, like SQL injections (although I dont fully understand how that works yet). Ill check out the link later! My main issue with learning how to make a website securely is that the secure way seems to be more complicated than the simple way. If I'm trying to add specific functionality concerning a subject I don't fully understand, there are rarely explanations without technical lingo attached to it, which prevents me from understanding the big picture. For example this thread! I had not fully understood how GET worked/is used, and was baffled when I looked at jQuery/Ajax/JSON solutions - I wasnt even sure if that was a solution to my problem (it might not really have anything to do security but you get the idea :P). All i needed was the explanation that you pass in GET variables to a page just appendicies to the url.
This is very interesting. And this [React (Virtual) DOM Terminology](https://gist.github.com/sebmarkbage/fcb1b6ab493b0c77d589) is a great resource on React VDOM.
It's not a subtle bug, but a subtle difference. Boxing a primitive creates an object. Do it twice and you won't have equivalence between the two as they are distinct instances. The reason boxing without `new` *is* equivalent is because you create the same thing each time, hence it not being "new".
I had never heard of this before, in a bit of research I've found that it was originally a commercial endeavour however the author decided to open source it and publish it to github. I'm guessing that means either other projects got in the way, such as a new job, or he just didn't want to work on it anymore. You'll notice on this fork there are a little bit more recent commits/contributions: https://github.com/alessioalex/tracegl
&gt; typeof or instanceof should suffice. Not always... http://bonsaiden.github.io/JavaScript-Garden/#types
the browser needs to optimize for it
Thanks, I had missed that feature! Makes it much better. Thanks!
Then you wouldn't use it. 
The files are stored on the client computer. I wont need to use Ajax, right?
Awesome :)
[Announcement](http://corner.squareup.com/2014/10/intro-to-d3.html)
Worth noting that on smaller screens (with scrollbar) pressing the spacebar causes the page to page down.
Ah yes! Good call, perhaps not the best choice of key. I'd think making the game scale to the size of the user's screen with some room left over for a pause/play button and inputs (perhaps to the side or below?) would be ideal. That's a little beyond the scope of my initial experiments though. Feel free to change the keydown to a more suitable key :)
Manipulating URL's easier. Adding/removing/updating params should be much less cumbersome than it is now.
How does meteor handle discrepancies in different nodes then?
Add some juice... https://www.youtube.com/watch?v=Fy0aCDmgnxg
The formatting of the page is all over the place
Very good video, really enjoying it. Thanks for sharing :)
I've created this aswell some years before, have you thought about adding other algos? I really enjoy watching the copy mechanism for example. And langtons ant is interesting aswell. [Take a look here](https://gist.github.com/b1nary/3067450)
You could go full screen and then position thr button overtop of the canvas
Correct - if you do something like: var test = new Boolean(true), test2 = Boolean(true); console.log(test); console.log(test2); You'll see that they are indeed two very different values. test is a boxed (read, an object wrapping a boolean), whereas test2 is actually a boolean value. That's why they don't === each other.
I'm finding clicking on the squares on your implementation only works occasionally. Either it's being a bit laggy or I'm misunderstanding how to turn on/off cells...
http://hello.onejs.io - That is a pretty trippy set of slides. I'm struggling to understand what is actually going on.
Oh its buggy as fuck, i had a very wrong understanding on how to map clicks to a canvas. Also if i remember right i created this while sick on the flu.
I've updated the article based off the initial flaws I had - both for the performance test as well as the closing section which was incorrect based off my flawed testing.
Yeah, I absolutely messed up on the performance part anyways - I was using == rather than ===. Your response on the isEmpty function is about the only place where I can see !! making any sense (after having updated my original code which was flawed). If you're looking to make a call to return a boolean value that you can assign to some variable, then it makes sense. Otherwise, from what I've gathered after getting some great feedback here, is that in most cases, something like this would suffice: var something = myString ? myString : "Some other string"; Being that we don't need the boolean of myString to be used further down stream somewhere... Thanks a million for taking the time to form a great response. Your feedback and others have helped me to fix my original, flawed conclusion.
It was showing performance gains simply because the == rather than ===. I had a flaw in the initial tests.
You can access the code by reading the Node.js section at the top of https://github.com/austincheney/Pretty-Diff/blob/master/README.md Keep these functions: * directory * readLocalFile * fileComplete You will have to slightly reverse engineer these so that they are not reliant upon my *options* object and then configure your own means of supplying input.
I've done one too many years ago, I don't even know if it still works... http://jsfiddle.net/Saturnix/rJD3r/ And wrote about it here: http://ijosephblog.wordpress.com/2012/05/09/implementing-conways-game-of-life-in-html5-canvas-with-javascript/ Some of of the ugliest JS programming you'll see in your life but hey... I was still a junior with no work experience.
If your private functions are complicated enough to be worth testing maybe they should be pulled into their own objects and called by composition anyway. We certainly shouldn't break good encapsulation practices just for testing. That's definitely an anti-pattern.
IMO plugins falls under global state. I haven't seen a plugin implementation that doesn't lead to versioning problems down the road. Eg most "gulp plugins" should not actually be written as gulp-specific modules.. Instead they should just be modules (like a through stream) that compose well with gulp, grunt, Unix shell, etc. :)
allowing "drawing" instead of clicking each node
I love that, I too am now fascinated by these symmetrical patterns. If you don't mind when I get my implementation more refined I might steal your idea of sending 4 gliders from the corners at the push of a button.
Check out this (javascript) game where you control bacteria's brain using Game of Life - http://bacteria.p1x.in/
It's difficult to diagnose the problem without seeing your code, but you could be reaching a limit (number of web workers, stack size, etc.): http://stackoverflow.com/questions/9339892/does-a-firefox-workers-limit-exist
Please do. There is also a [github repository](https://github.com/amarkosian/gameoflife) in case you want to check out the code (although you can probably find much cleaner/better implementations.)
Thanks man :) Appreciate the help.
Could you elaborate on this a little please, I'm not sure I follow.
That sounds interesting. I'll be sure to check it out when I'm not at work ;)
Allow users to hold down the mouse click to draw the dots or remove them. Currently it takes ages to draw anything
Yeah that's one of things I wan't to implement. I guess it's just a different even to look for rather than onMouseClick... is it onMouseDown or something like that? (This is the first thing I've cobbled together in Javascript... I'm more familiar with python, c++ etc
Not positive. Haven't had enough experience with it yet. Why do you want to though (just curious)? The incremental bundles are under a second generally. 
My bad, "bug" is not at all the proper terminology. "less well known quirk" would be more accurate. As for boxing with or without new, it appears that String, Number, etc. follow the same pattern. ES6's Symbol, I believe, prohibits usage of new.
Very nice!
You are too kind, that's great thankyou! :)
A fine read! Thanks for sharing :)
This is what I have got now. http://pastebin.com/YtciiVk2 I feel bad, I just fail to understand how to get started. I read the readme but still, I'm confused. I dont get the part where I pass my file paths or directory path to get to the content. Thanks for your effort.
For details and history — http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ :)
Nice! Really simple code too, want to jam a bit?
The worst one I encountered was a Windows GUI application with MSHTML.dll embedded. It was a companion to our phone system software and used for our call center agents. It's intended purpose is that "engineers" can write simple HTML and Javascript that gets loaded in this embedded version of IE and allows "easy" integration with the phone system. Read: specially named functions are called during certain actions from the phone system. The phone system integration was bad enough; the worst part was that the environment itself was nearly non-debuggable. It got to a point where I had to develop in IE7 (even on Windows 7, forcing MSHTML.dll to IE9 mode would break the phone system integration) and wrote my own API wrapper around the phone system APIs that I could stub out during development work. Firebug lite was the only thing close to debugging that I could do, and the act of pulling in FBL would cause (sometimes!) other parts of the system to stop working; there's no embedded developer tools and changing IE properties to enable opening Visual Studio on exceptions gave me a near useless environment as well.
Anytime :)
Thanks! :D
Earlier this year I made one that runs entirely within the system's GPU using WebGL: [WebGL Game of Life](http://nullprogram.com/webgl-game-of-life/) ([how it works](http://nullprogram.com/blog/2014/06/10/)). The game state is stored in a texture buffer and is updated using a shader.
&gt; // I have to include this because javascript is a prissy little bitch that thinks it's okay to redefine mathematics. Lol
Javascript takes the absolute value when you use the built in mod function. So I couldn't use it to "wraparound" the edges of the arrays. Javascript: -1 mod 10 = -1 The rest of the world: -1 mod 10 = 9
At work, we use [Highcharts](http://www.highcharts.com/) and it's been just fine for our needs.
I'm also working on a game of life, in order to teach myself javascript. So thanks, I guess, for soliciting all these helpful ideas. But I can't help but feel a little rivalry. &gt;:[ Maybe I'm too competitive. :( edit: also, nice work!
I wondered that too. This is some information I managed to find: https://twitter.com/AhmadNassri/status/434924723248439297 which points to this project https://github.com/traceglMPL/tracegl
Windows Phone has basically no JS debugging tools, as far as I know. Which is a pain, because mobile IE is also where most of my JS goes wrong...
I haven't been focusing on my front-end skills recently, so I haven't been following a great many (or, none at all...) links from /r/javascript, but I decided to see what React was all about. Your primer example was enough and commented enough for me to know what React is and what it can do. Then I found out React is a Facebook creation - not a ding against it, just interesting. Now if only I can find a plugin for PHPStorm that can work with React.. got ideas brewing here.. thanks!!
FB open source is quality for what it's worth, definitely check it out
Thanks for the explanation!
I did the helloworld thing you can find on google. But new there had to be more to it. Like partial views, routing and so on. I learned it on PluralSite and was developing in it at work within that week. [Learn AngularJS](http://learn-angularjs.com) as good practical explanation of it if you need more than many of the theoretical explanations of angular. They have a link to 10 day trial of pluralsite and it can actually be cancelled ,by you, after the 10 days so you are not stuck with calling your bank. I don't know if they even collect a card for the 10 day trial because we have it at work. I would download all their zipped lessons you have interest in during the trial.
This is a must-watch for new developers, thanks! 
Hmmmm.... Looks like IE didn't die in a fire like i was hoping.... :( ^^^must...hope...harder......
IMO, with a quick glance, it seems a bit simple...
This may not help much with your actual problem, but I can answer this bit: &gt; Why is the addEventListener all of a sudden UNDEFINED? Because you are calling it and logging the return value. It just means that function doesn't return anything. So that part is normal, as for the rest, I have no idea without more context. Except that I am pretty sure that this document.createElement("question") can't be right, there is no such HTML element :)
Yeah, it is definitely slated more toward the "infographic" type of charts.
It's creating custom HTML tags. This is from the document. Is that bad? I thought that was all HTML5-y. &lt;editor&gt; &lt;question&gt; &lt;input type="TEXT" size="60" placeholder="Enter next question."&gt; &lt;answer&gt;Answer. 0.9913947384338826&lt;/answer&gt; &lt;answer&gt;Answer. 0.9623031916562468&lt;/answer&gt; &lt;answer&gt;Answer. 0.30267783952876925&lt;/answer&gt; ---- 0.5577260984573513 &lt;/question&gt; &lt;/editor&gt;
I found it interesting, having no experience whatsoever with React. It's not like as a beginner I can just open this up and understand React though. You're teaching me some stuff about it, which is nice. :-)
Awesome, glad I could help! :)
Here's the thing. I work with the healthcare industry and I would like to provide you an example of why I could give two shits that they are catching up to the rest of the browser community. Every workstation in my office had to run at maximum IE7 up until the reluctantly mandatory Win7 conversion earlier this year. Now that maximum is IE8. I work with a radiology office who's entire complex is furnished by GE. The only way I can access their backwards ass website is by either running IE9+ in compatibility mode(which screws up all of the physicians because they couldnt work a computer if their life depended on it, or shutting off user control in windows and installing certain ActiveX packages for IE8. In order to access the local hospitals medical records system I have to be running at most IE9, and that comes with a host of problems, so downgrading to 8 is the only solution where half the things arent broken. As long as the enterprise community still clings to old IE, Microsoft will forever be garbabe to me. I literally loathe Microsoft every single day because they have been in bed with Enterprise for so many years that they are so reliant on it. Why cant I just go to a website and have it fucking work. Why do I need to get a call every 15 minutes because some doctor needs to look at a CT Scan but cant access the website because they need me to manipulate shit that shouldnt be touched. It should just work.
Figured it out. It was an error somewhere else. On the parent node, I was concatenating some debug string to the innerHTML. Apparently, if you concat innerHTML, it breaks the event handlers. Good to know.
Some ideas I used when making my own version of cgol years ago: * feature to add whole patterns (glider, puffer etc) with one click * feature define own patterns to add like I said above * setting game rules (rule for birth and for death) * coloring points according to eg. age
:)
I specialize in Smart TV applications and Philips devices are the worst. Some models just restart after encountering even the smallest bug in javascript.
incremental builds sound nice. Though I have one issue-I work mostly with Angular and angular logs all errors utilizing new Error.stack() Unfortunately this is bugged in latest Chrome: https://code.google.com/p/chromium/issues/detail?id=357958 So it is really nice to have individual files loaded, because then angular errors make much more sense.
Without the `shouldComponentUpdate` hook it's quite slow, but the online version has this enabled (which was the point of the demo). What behavior specifically are you seeing that's slow, and what platform are you on? [Edit] I see it's quite slow on my phone; it could just be the very large number of DOM nodes I'm creating, or it could be something related to the iteration React has to do. I'll look into this, but I'm still curious if you're on a mobile device or not.
First things first: it's "jQuery", not "JQuery". As for github, you should start by referencing other projects on github; there's a lot of them already on the frontpage of /r/javascript. I chose [one at random](http://www.reddit.com/r/javascript/comments/2jfgpo/react_on_rails_an_isomorphic_react_framework/), and indeed it does fit the bill as a "good" github project IMO. Well then, what might they be looking for? Most likely whether your project is setup 'properly': * The proper use of `readme.md`, `package.json`, `.gitignore`, etc. * That you use a build system (grunt, gulp, etc.) and that it's properly configured. * You have documentation and it's accurate and helpful. * Proper use and handling of external dependencies (this ties in with `.gitignore` and `package.json`) * You have dedicated `src` and `dist` folders (these names are fairly standard), where your code lives in `src`, and the result of building that code is placed in `dist`. * You have good unit test coverage. * The utility and accuracy of your commit messages. * I'd also check the history, to see if your commits were proper or not; i.e. if I see a hundred small commits where you're changing one line at a time then that's a smell, you should only commit a set of meaningful changes. That's all just a start, and totally unrelated to the quality of your code. As for your code, I'd also check: * Make sure it follows generally accepted industry best-practices ([idiomatic.js](https://github.com/rwaldron/idiomatic.js/) is a collection of these practices). * Code should have absolutely consistent formatting, especially if a single-person project. * Code should be smartly organized with well-named identifiers. * You shouldn't re-create anything non-trivial if there's an NPM module for it. * Is your API well thought-out and easy-to-use? You could of course just throw some code up there, and that might suffice to check that off their list, but if I were the interviewer, I'd see it as low-effort and not really what I was looking for. When I think "github project", I'd expect that most (if not all) of the points above were met.
Wow... That's a lot to take in. A lot of it went right over my head 
I will soon, I'm happy some people are showing interest. I actually still have to set up the dev environment for android.. luckily it should be *very* easy as it's just a javascript app :D 
Yup. And maybe change some of your ionic code to target android if its specific to ios. But the interest is definitely there.
In case I wasn't clear, I am completely new to github, as well as relatively new to JavaScript and jQuery.
internet. explorer. :D
Nice work, I've been looking at this same combination. How did you find the experience overall? 
They already gave you the solution - the replacer. All you have to do is this: var circularReplacer = function(key, val) { if (val === this) { return '∞'; } else { return val; } }; var a = {}; a.a = a; console.log(JSON.stringify(a, circularReplacer , 4)); { "a": "∞" } This is for the simplest case. I haven't tried what it looks like doing a deep reference to a shallower node. But I imagine you can do something like that with a hash of values. If a value ever shows up twice, replace it with the infinity thingy. EDIT: Well apparently javascript doesn't give you internal reference identifers and objects are cast to strings if you attempt to use them as object keys. At least, I think, the replacer is the key to this. Do something crazy like make a counter variable and put a "\_\_id" property with the next value on every object you see without a "\_\_id" property. When you come accross an object that already has an "\_\_id" property, just return some proprietary self-referential thingy, like: {"\_\_id":234}. Getters are apparently omitted from JSON.stringify, so you can use them to return the object's unique identifer without having them show up in the JSON output.
Ok you win the Internet today for that one
Any reason for not allowing it to be installed on iOS 7.0+?
Like many, many things in programming your answer is simply: Because this is how it was initially done. You break way too much by "fixing" it, even if an appropriate fix can be agreed upon.
Did you cd to .vim/bundle/tern_for_vim and do npm install? Edit: you might also need vim compiled with python, do vim --version and look for +python. P. S. I'm pulling this outta my ass but that might be it. 
It was terrific! Another great contender is famo.us, a little harder to pick up. Ionic is great for CRUD apps though!
Nope, Just targeted it for 8.0 because I was developing in 10.10 Yosemite and had some weird XCode issues early on.
Yep, did the npm install. Here is the version info; VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Sep 1 2014 19:39:13) Included patches: 1-430 Modified by pkg-vim-maintainers@lists.alioth.debian.org Compiled by buildd@ Huge version without GUI. Features included (+) or not (-): +acl +farsi +mouse_netterm +syntax +arabic +file_in_path +mouse_sgr +tag_binary +autocmd +find_in_path -mouse_sysmouse +tag_old_static -balloon_eval +float +mouse_urxvt -tag_any_white -browse +folding +mouse_xterm -tcl ++builtin_terms -footer +multi_byte +terminfo +byte_offset +fork() +multi_lang +termresponse +cindent +gettext -mzscheme +textobjects -clientserver -hangul_input +netbeans_intg +title -clipboard +iconv +path_extra -toolbar +cmdline_compl +insert_expand -perl +user_commands +cmdline_hist +jumplist +persistent_undo +vertsplit +cmdline_info +keymap +postscript +virtualedit +comments +langmap +printer +visual +conceal +libcall +profile +visualextra +cryptv +linebreak -python +viminfo +cscope +lispindent -python3 +vreplace +cursorbind +listcmds +quickfix +wildignore +cursorshape +localmap +reltime +wildmenu +dialog_con -lua +rightleft +windows +diff +menu -ruby +writebackup +digraphs +mksession +scrollbind -X11 -dnd +modify_fname +signs -xfontset -ebcdic +mouse +smartindent -xim +emacs_tags -mouseshape -sniff -xsmp +eval +mouse_dec +startuptime -xterm_clipboard +ex_extra +mouse_gpm +statusline -xterm_save +extra_search -mouse_jsbterm -sun_workshop -xpm system vimrc file: "$VIM/vimrc" user vimrc file: "$HOME/.vimrc" 2nd user vimrc file: "~/.vim/vimrc" user exrc file: "$HOME/.exrc" fall-back for $VIM: "/usr/share/vim" Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 Linking: gcc -Wl,-z,relro -Wl,--as-needed -o vim -lm -ltinfo -lnsl -lselinux -lacl -lattr -lgpm -ldl Edit: I installed the debian package vim-nox which looks better; VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Sep 1 2014 19:38:45) Included patches: 1-430 Modified by pkg-vim-maintainers@lists.alioth.debian.org Compiled by buildd@ Huge version without GUI. Features included (+) or not (-): +acl +farsi +mouse_netterm +syntax +arabic +file_in_path +mouse_sgr +tag_binary +autocmd +find_in_path -mouse_sysmouse +tag_old_static -balloon_eval +float +mouse_urxvt -tag_any_white -browse +folding +mouse_xterm +tcl ++builtin_terms -footer +multi_byte +terminfo +byte_offset +fork() +multi_lang +termresponse +cindent +gettext -mzscheme +textobjects -clientserver -hangul_input +netbeans_intg +title -clipboard +iconv +path_extra -toolbar +cmdline_compl +insert_expand +perl +user_commands +cmdline_hist +jumplist +persistent_undo +vertsplit +cmdline_info +keymap +postscript +virtualedit +comments +langmap +printer +visual +conceal +libcall +profile +visualextra +cryptv +linebreak +python +viminfo +cscope +lispindent -python3 +vreplace +cursorbind +listcmds +quickfix +wildignore +cursorshape +localmap +reltime +wildmenu +dialog_con +lua +rightleft +windows +diff +menu +ruby +writebackup +digraphs +mksession +scrollbind -X11 -dnd +modify_fname +signs -xfontset -ebcdic +mouse +smartindent -xim +emacs_tags -mouseshape -sniff -xsmp +eval +mouse_dec +startuptime -xterm_clipboard +ex_extra +mouse_gpm +statusline -xterm_save +extra_search -mouse_jsbterm -sun_workshop -xpm system vimrc file: "$VIM/vimrc" user vimrc file: "$HOME/.vimrc" 2nd user vimrc file: "~/.vim/vimrc" user exrc file: "$HOME/.exrc" fall-back for $VIM: "/usr/share/vim" Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -I/usr/include/tcl8.6 -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_LARGEFILE64_SOURCE=1 Linking: gcc -L. -Wl,-z,relro -L/build/ruby2.1-KZsmDY/ruby2.1-2.1.2/debian/lib -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,-E -Wl,-z,relro -Wl,--as-needed -o vim -lm -ltinfo -lnsl -lselinux -lacl -lattr -lgpm -ldl -L/usr/lib -llua5.2 -Wl,-E -fstack-protector -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu/perl/5.20/CORE -lperl -ldl -lm -lpthread -lcrypt -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions -L/usr/lib/x86_64-linux-gnu -ltcl8.6 -ldl -lz -lpthread -lieee -lm -lruby-2.1 -lpthread -lgmp -ldl -lcrypt -lm Looks like it works now. Thanks for the direction kourckpro. :)
Thanks, I'll check that out. Downloaded the app, I'll play with it a little bit tomorrow. So far it looks nice.
I work on TV set top boxes, total nightmare to debug... for ages we were using serial logs and console.log's... then we found weinre... used that for ages even though it couldn't deal with breakpoints... now we have a remote debugger which is better but still flakey! It'll fall over on certain breakpoints... restart! restart! restart! 
Oh shoot, I forgot about my jailbreak friends! I'll rebuild for 7.0 now!
Woo!
fucking CORS has cost me many hours of my life.
do you use gulp or grunt? I've found to get a significant boost using gulp with watchify to create an incremental build system. the first build takes awhile but as it detects file changes, it only builds whatever is necessary so the incemental development is much faster. here's an example gulpfile from one of my projects https://gist.github.com/cultofmetatron/e36c8c9773c7575f3669 hope it helps!
Try this: http://prettydiff.com/ignore/dirread.js You execute it like this from a command line node dirread.js "c:\temp" The node command, path to the file, and a directory to read. Look at the code in line 59. You need to tell it to do something with the files you have just read, or as you are reading the files.
C3.js is a D3 abstraction library which makes it super easy to build graphs. Well worth checking out. 
I just want to get answers on how you use it properly. I don't know if it's supposed to be as simple as including it in a &lt;script src&gt; tag and then including your code in &lt;script&gt;&lt;/script&gt;. If it is that easy, I must be missing something because I didn't get any results when I tried that. When I saw PhantomJS code and Nightmare code compared side by side, I figured it would be very useful. 
Your employer should try Enterprise Mode in IE11. It's designed exactly for this scenario so that legacy pages can run in a high fidelity IE8 emulation while the rest of the web runs in IE's "edge" mode (latest supported standards). http://msdn.microsoft.com/en-us/library/dn640687.aspx This was introduced as an update to IE11 last spring and has been really successful for most major enterprises that give it a shot. (I'm an engineer on the IE team) 
Wait, doesn't github already have something like this? This is neat, but I don't know how often I would actually code from my phone.
They don't have an iOS app. Not really for coding, more for looking at code / checking out profiles or repos / following people :P 
Are you serious? Nightmare.js is a Nodejs library, there are no `&lt;script&gt;` tags or webpages to embed it into. The idea is to use this library to get data from websites that do not have an official API (or web scraping or whatever). Your app code grabs some information from `somewebsite.com` using Nightmare, then your program does something with that info (maybe put it in a database, maybe dump the contents into a file). Basic steps to do something with the library: 1. Install Nodejs. 2. Copy one of the examples in the README into a standalone .js file. 3. `npm install nightmare` 4. `node your-file.js` [Actual installation instructions.](https://github.com/segmentio/nightmare#usage)
As I was talking to the developer on there, he made it sound like you could maybe do that so I thought I'd check on here since he hasn't responded in a few days. 
&gt; no matter what you choose, there's always the possibility that you'd want to actually send that value. Huh? ∞ isn't a JSON data type. http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example
Just curious, how many years has Chrome had two-tiered compilation?
Why would you need to store that information? Seems unnecessary. You shouldn't be serializing the entirety of your objects and then storing them. You should only be serializing the data which makes that object unique (not self referential variables or whatever). And even if you wanted to do that you can serialize and parse the data however you'd like (ex: if some var is self referential, you could store 'i_am_self_referential' for that var when you serialize it, and then when you parse the data if you see 'i_am_self_referential' then you make it self referential). Still seems rather pointless, unless I'm missing something.
 var a = {foo:"∞"}; a.a = a; // ... replace circular references with "∞" ... JSON.stringify(a); // {"foo":"∞","a":"∞"} How would you deserialize that so that only "a" is turned into a circular reference? If you're saying replace it with ∞ as a literal instead of as a string, that won't produce valid JSON, and JSON.parse will throw an exception.
∞ obviously isn't a data type, but when it's being stored as JSON it would be stored as the string "∞". Imagine where you're storing usernames and you allow weird symbols like "∞" in username strings. Some person might have their username as "∞". When you are parsing the JSON data for that user, the parser would see that as being self referential. itsananderson is saying you would need to have types as well for this to work, so you would store it as {"type":"string", "value": "∞"} for the username, and {"type":"object", "value": "∞"} for a self referential object. All in all this is rather pointless though, as I don't see a reason you would need to even have a self referential anything stored in JSON.
It seems quite easy right now (React v0.11.2) with an extra runtime transpilation step: here a [proof of concept gist](https://gist.github.com/gcanti/52d6240ee8e51b857985) and here a [live demo](http://gcanti.github.io/resources/universal-vdom/demo.html)
Javascript isn't OOP, as the article mentions you can however emulate certain structures of OOP with javascripts prototypes etc. Saying that JS supports all features of OOP is pushing it though. I understand the point of the article but constantly saying "Javascript is OOP" isn't a good way to push it to more developers.
Yeah I see what you mean. There are a lot of similar tools in the market but I'm planning to add a page to show advantages compared to some of them, specially the verbosity. I added the github banner. Thanks.
Prototype-based programming is a style of OOP but I wouldn't just label JS as OOP because of that. What I associate OOP with (and what I think many others do as well) is class-based programming. Emulating class-based programming with a prototype-based language and then straight up saying it's "OOP" will lead to confusion. Offcourse both are OOP in a sense but I'd say the class-based approach is implied when you're speaking of "OOP".
You may be interested in /r/cellular_automata
Even if it becomes a decent browser, so what? It's still tied to one OS anyway unlike the competition. We gain nothing from its existence - it's just a PITA.
Then why don't you code in assembly language?
Actually it's great: it's not verbose, has a Jade/YAML like declarative syntax, sane. True, if it came out 3 years ago it would sweep the world, but there is no reason for it not to succeed still (look at Sails.js, it's one of Rails/ActiveRecord rehashes on node yet due to sane decisions and minimal verbosity it kinda exploded). It might be counterinituitive to novices but coders hate writing code, since if you have any kind of experience you know that verbose code doesent' just mean hours of writing value-less boilerplate, but it also implies hours of painful maintainance and bug fixing later when things go south (and they always do).
getters are only omitted from the output of JSON.stringify() if the property is not enumerable: var foo = {}; Object.defineProperties(foo, { hidden: { get: function () { return 123; } }, visible: { enumerable: true, get: function () { return 456; } } }); console.log(JSON.stringify(foo));
Thanks! &gt; coders hate writing code That's why I came up with something like this. It's current state fulfills my needs but I'd like to see some usecases so I can make this tool a good fit for general purpose.
Just take it at your own pace, personally I tend to go fairly slowly through books about coding and development because I like to understand concepts by writing my own bits of code and/or fiddling with the code samples in the book. If you want to make the most out of the book then think up some small projects to create and apply the concepts and practices you learnt to them.
I'm a little concerned that a lot of the changes in 'future' seem to be, "Typescript does this, we should too" but I'm holding my breath for now. JavaScript to me is not a Class based language but every change seems to embrace Classes as a construct method more and more. For instance: https://github.com/reactjs/react-future/blob/master/01%20-%20Core/01%20-%20Classes.js The comment at the top is: "New and clearer descriptors proposal" But, if you read on you see: &gt; Notice the subtle syntax difference between the colon &gt; and the equal sign. &gt; props : { &gt; width: number How is 'subtle' synonymous with 'clear'? 
I don't follow much of the react development, but it feels weird to have a release candidate on a 0.12 software. Do they do it for every minor increment ?
&gt; First, you have to name your component with name property. Why? I haven't read on, but this stuck out to me. The 'name' is defined by the Dev when they var it. Why does the 'object' need a name internally? Are you doing some magic behind the scenes with this name? Edit: now I see... Why doesn't yama.register return an object that the Dev can use to reference the component later? &gt; var myComponent = yama.register... Edit2: the only way I see this working is if you are polluting the global namespace with the component names... &gt; setInterval(function(){ myComponent3.elapsedDiv.innerHTML = (elapsed++); }, 1000); Which is pretty dangerous. React is struggling with the same concept right now of passing an object or a function. On one hand you want to refer to the component via yama.components.myComponent() or via the global namespace via direct calls to myComponent.property. &gt; myComponent.title = "";
From this statement, it's obvious you're an amateur.
&gt; Ok it's getting hard to answer by editing again :) Sorry about that. I didn't want to spam the replies. Didn't figure you'd be watching your inbox so close.
Nope, this is the first as far as I'm aware. But to be fair, this breaks things and some people are using this on projects already so... 
You started crying like a baby, js developer. By the way your company use js nay be because you don't want to learn jquery . hmm. By the way assembly language is not for you. 
WTF? Haven't a clue what you're talking about but, this is reddit after all. btw, I've been programming in asm since before you were born, kid.
Sorry if I hurt you. I was just kidding around. In reddit you don't understand whom you are taking to.
I'm on mobile right now, so can't comment too in-depth, but it seems something is fishy here. But most importantly, it seems you are comparing the performance with/without Require.js in a project that is unoptimized to begin with. More interesting would be to see the impact of using/not using Require.js in a project optimized with minification and concatenation. Also, in my experience vanilla Require.js tends to not play nice with CSS because synchronous script execution has to wait until CSSOM is ready.
Same as __mak, I generally find that playing around with a technique is important when trying to figure out how it would be useful. A great way to do this could be with a "project", or even a quick script to automate something you do on the web. Browser extensions like grease monkey allow you to run custom JavaScript on sites and are always a fun way to play around with a new concept/design pattern.
nice looking app, thanks for making this. Tiny typo in the app: "take full advantage of **there** API"
Isn't the whole point of AMD to make it easy to minify/combine a bunch of JS modules? While still maintaining them as modules... Hand-optimizing the same site and running some other combiner/minifier should produce similar load times, at least that's what I'd expect, but you'd have to do the work yourself to combine and minify instead of letting require.js do it for you.
Having a second look at this, placing the template in a comment is probably going to be a bad idea. You can't run the code through a minifier. I examined the examples a little more and you might want to rewrite some of the samples. For instance, "Basic interaction with your component" has the code that threw me off previously making it look like you are exposing your components globally when the actual code on the page running the example is: yama.register({ name : 'myComponent4', draw : function(){ /*! root div text:title !*/ }, title : "Not clicked yet.", }); yama.addLoadEvent(function(){ var cont = document.getElementById("example4"); var example4Btn = document.getElementById("example4Btn"); var myComponent4 = new yama.components.myComponent4(cont); example4Btn.onclick = function(){ myComponent4.title = "Clicked !"; }; }); Where `addLoadEvent` is exposing `myComponent4` so that it can be used in the onClick event. I initially read this and assumed that `myComponent4` was exposed and capable of being called from anywhere using the previous sample: yama.register({ name : 'myComponent4', draw : function(){ /*! root div text:title !*/ }, title : "Not clicked yet.", }); example4Btn.onclick = function(){ &lt;b&gt;myComponent4.title = "Clicked !";&lt;/b&gt; }; Personally, I can't see myself using this because I don't go for the meaningful whitespace in the templating and the fact that it can't be minified, but good luck with is and I hope you enjoy what it gives you.
Thanks for the info! According to ReactPerf, I'm seeing about 100ms per update with 4000 items in the DOM (2.6GHz i7). While investigating, I found that one of my chrome extensions was making the "Add One" button very slow as well. I think this example is not very good overall at any rate; with that many pieces of data, one would do a better job of optimizing the update, but I wanted to keep it simple. I'll think about a better way to demonstrate.
Thank you! This seems much more manageable route for my experience level! 
Some more info: After investigating some CPU flame charts, I discovered I was using what amounts to a dev build of React, and pushed [this commit](https://github.com/BinaryMuse/react-primer/commit/1183941229ddc5fb7907fb753ceb46269754b044) to change it. I'm seeing better performance, but it was never really bad on my machine; could I ask you to check it out and see if you notice any difference? Thanks!
They've done it for [9](http://facebook.github.io/react/blog/2014/02/16/react-v0.9-rc1.html), [10](http://facebook.github.io/react/blog/2014/03/19/react-v0.10-rc1.html), and [12](http://facebook.github.io/react/blog/2014/10/16/react-v0.12-rc1.html).
Is the name targeted to 13 old developers?
Big fucking deal. Fuck you Microsoft, you have truly made the last decade of my life an absolute hell. I've wasted years in getting shit to work with your slow half assed browsers only to have you keep churning out more shitty browsers that lag years behind the competition but still gets used by clueless people who demand support for them. 
I did something similar with my object.observe wrapper: http://jsfiddle.net/BBs7Q/38/ but mine only works with single variables/functions/objects and it isn't two way, doesn't do any templating, etc. I really like your approach. I'd love to see a 100% native version with two-way binding, templating, etc. edit: your live example app: http://minibind.mdnbar.com/ is wonderfully fast. 
Oh thanks! :D
I think that React would benefit really strongly from a more class based approach for creating components. I can imagine that a lot of the more "static" design patterns popping up in React are a result of the large userbase at Facebook and their development of Flow (https://twitter.com/fbOpenSource/status/511643210482208768) Let's not forget for a second that React is a very opinionated framework ;)
Not really, you don't need to be 13 to love naruto :)
Why would it be wrapped in quotes?
I'm going to fork this and call it byakugan
This kind of reminds me when the Windows 8 hate was in full swing and Microsoft touted Internet Explorer 10 was available but only on Windows 8. This made me laugh. Reminded me of a used car salesmen selling a shitty car by advertising that only it could have the shitty sound system in it. It's not helping any. But I suppose if IE never goes multi-platform it will always be a joke especially as the Linux market share encroaches into Windows territory for consumer level PCs. I'd like to see another "contender" at the table for competition with Microsoft taking best practices from the current browser leaders but at this point there's so much hate it would be hard to get anywhere. In any case. If windows starts shipping with a built in Javascript engine that's not crap then some windows scripting options may improve. Even now if you write some JScript, the engine is pre-JavaScript 1.6 so you need some polyfills for some advanced array functions and JSON parsing. Fortunately I don't need to use this too often in my work but it still be nice to see it brought into the modern era.
&gt; For instance: https://github.com/reactjs/react-future/blob/master/01%20-%20Core/01%20-%20Classes.js &gt; &gt; The comment at the top is: "New and clearer descriptors proposal" But, &gt; if you read on you see: Does anyone know if that's valid ES6? A quick Google turned up nothing and [the current draft](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#october_14_2014_draft_rev_28) is a little dense.
I agree that javascript isn't a class based language but facebook internally seems to be using the class structure already (look at [flux](https://github.com/facebook/flux) source), and React API is already structured as a classes (sort of). And I *think* the typescript system they use internally run's more similar to a jsx preprocessor, but I totally agree with you. 
Relevant [email from Alan Kay](http://www.purl.org/stefan_ram/pub/doc_kay_oop_en).
That's not really true. V8, for example, uses 31-bit signed integers for integral values.
&gt; What I associate OOP with (and what I think many others do as well) is class-based programming. Then - with respect - your association is naïve and incorrect. Your essential argument here seems to be that you don't understand the meaning of OOP, and therefore because JavaScript doesn't confirm to your mistaken assumptions about the term, people shouldn't correctly use the term to refer to JavaScript. This is not actually an argument against people describing JavaScript as supporting OOP, however - it is an argument for you to learn what OOP actually means, and to start using the term appropriately.
It does feel a bit better.
I get where you guys are coming from, seems like I was mistaken in my assumptions. I'd think I have a decent understanding of OOP but for some reason the fact that javascript was OOP never "clicked" for me. In my mind I had separarated "prototype-based programming" and "oop" without reading too much into it. Some may argue that I should've seen that JS was OOP rightaway (or that prototype-based programming was OOP) but I didn't, I had made up my mind that "prototype-based programming" was something entirely else, just with a lot of similarities to OOP. Without even knowing prototype-based programming was just a "flavor" of OOP. Not making any excuses, think what you will. Guess I'll have to read up some on the subject since I was mistaken.
I did a codepen a while back on this http://codepen.io/Garrett-/pen/pfEHF 
Why are you looking at 15 year old code?
Well that's just awesome.
He said he's working on it.
Bizarre, I believe Ionic uses fastclick by default.. nevertheless I will get on it!
Im not exactly sure what it does, some sort of browser compatibility thing thats triggered on mouseclick. You can probably dump it. Looks like its checking to see whether the broswer is IE4+ or NetScape (I assume thats what NS is).
It's testing for mouse clicks and differentiating between IE and Netscape (the browser) because their behavior was different. Ignore this code. It's unusable today. Remove it and you won't notice any difference.
Yeah, this thing belongs in a museum.
Node can be installed anywhere. I mostly use it on my personal computer so that I can use JS on the command line.
Does this mean every user has to have node installed to use the website?
That doesn't address sigwhite's concern, in fact it shows exactly why you should be concerned. V8 uses 31-bit integers. That's Chrome. What about Firefox? What about IE? What about Opera? Safari? Konquerer? Each of those uses a different javascript engine, and they all have different ways of dealing with big numbers.
It could use a lot of work. It was just a conceptual snippet I put together. Most of my pens are.
I was playing around with the data-* custom attributes like you have in there, really neat stuff. And apparently querySelectorAll works perfectly with them. example: http://jsfiddle.net/yr0cqhc9/4/ I have a bad habit of trying to figure out how to remove jquery.
Well damn, the page with one script tag loads faster than the page with five. What a friggin surprise. 👎
I am using this app and it's pretty awesome. It really does look like a native app. I might start using Cordova. Awesome Work!
I think I'll stick with React. I don't like the look of your templates I think when it gets complicated it will be hard to grok. Also what about component life cycle methods (another part I love with react)?
I recently started using zepto more. It utilizes querySelectorAll. I like the ability to chain methods together for quick and easy DOM manipulations. So I've not moved to native methods yet.
Thank you! :D
How about building with browserify? You can compile everything to one file, and use node modules. Very elegant! 
Yep, I've seen this snippet before, back in the day, agree that it's not needed anymore.
Yeah, it's pretty awful
I must have completely misunderstood your requirements. I know you are trying to parse logs, but I guess I don't really understand what you are trying to accomplish in greater detail.
Only floating point numbers are inaccurate, large whole numbers stay perfectly accurate, its why they say keep currency in whole number cents, not float points when using JavaScript.
I think I didnt make it clear in the first place. This is my website: http://parser.boimel.net/ If you want to try it out you can use the summonername "boimel" and load this log file: http://upload.boimel.net/2014-10-17_23-12-54_1413580374.txt One file works on all browser, but as soon as I try to load all of my 3000 files every browser except firefox stops processing the files.
Thanks! Let me know what you think :)
Would use it if intead was named KATON: GOKAKKYO NO JUSTSU!.
Because it doesn't conform to any other data type. It's not a number, boolean, null, object, array (object in this sense is a JS object, like {"foo":"bar"}, aka an associative array / hash map). The only way to store it is as a string.
That's a classic code to try to prevent right mouse clicking and selecting and copying text. As others have said, just delete it.
Shouldn't unless those libraries are doing something weird. React team keeps every release backward compatible with the one previous. So code which worked with 0.11 should work with 0.12. It would warn about deprecations though.
ECMA 262 *requires* that Number objects be ["double-precision 64-bit binary format IEEE 754"](http://www.ecma-international.org/ecma-262/5.1/) §4.3.19. V8's use of 31 bit integers is entirely an [internal optimisation](http://www.html5rocks.com/en/tutorials/speed/v8/); it has no effect on consistency or correctness.
&gt;The 18437736874454810622 (that is, 264−253−2) finite nonzero values are of two kinds: &gt;18428729675200069632 (that is, 264−254) of them are normalised, having the form &gt;s × m × 2^e &gt;where s is +1 or −1, m is a positive integer less than 2^53 but not less than 2^52, and e is an integer ranging from −1074 to 971, inclusive. So if I'm reading this correctly, I can be certain that integers up to 2^53-1 are represented with no loss of precision, right? **edit:** Yes, I'm still dumb: &gt;Note that all the positive and negative integers whose magnitude is no greater than 2^53 are representable in the Number type (indeed, the integer 0 has two representations, +0 and -0).
&gt;Note that all the positive and negative integers whose magnitude is no greater than 2^53 are representable in the Number type (indeed, the integer 0 has two representations, +0 and -0). Large whole numbers stay perfectly accurate up to 2,^^53 sure. Any idea why /u/fuckingdoitshit is getting negative numbers around 2^24 ?
I love using browserify and including the line/file info so that Chrome dev tools still see it all as different files. Sharing modules with Node is also very nice.
shoryuken! Abugit! Abugit!
Maybe not the most elegant solution, but works for now. (function(){ var tags=document.getElementsByTagName('et'), i=0, len=tags.length, str; while(i&lt;len){ str = tags[i].innerHTML; tags[i].innerHTML = str.substr(0, str.indexOf('rpg')); i++; } }());
The correct value, if I understand correctly, is just `(x &lt;&lt; 8) &gt;&gt; 8`. The left shift puts the sign bit (23) in position 31, and then the right shift sign extends this bit back into the eight vacated positions. If you want to know if it is negative, you can now just use `&lt; 0`.
I think there's some confusion as to exactly what OP is suggesting. It sounds to me like we want to add a tombstone data type to JSON that refers to the top of the object hierarchy (or N levels up, or whatever).
Same idea, more concise: [].forEach.call( document.getElementsByTagName( 'et' ), function( node ){ node.innerHTML = node.innerHTML.replace( /rpg/gi, '' ); } );
Show some code and we'll help you fix it. This isn't really a place to ask people to do your homework for you :)
&gt; is it possible to prevent user from messing this process up ? No.
please explain and maybe explain a method to prevent it
Your answer is no, period. You can't prevent the client from doing anything or force it to do anything. What you're doing will work _most of the time_ and that has to be good enough because there _is no possible way to guarantee your code will ever run_.
Well, you can prompt the user for something, var response1 = prompt("enter price 1") This gets a variable you can work with, problem is it will be a string - you can turn it into a number by passing it through `parseInt` With that done -- assuming you have a few variables you can use the plus operator on them to add them together Also, to maximize the chances people can/will help ask about a specific problem you are having, what you have, what you expect and what you see
thank you. I ask this because youtube registers a view only if the video was watched for more than 10 or more seconds. I'm taking inspiration from them but how they have fixed this issue is a mistery to me. I'm thinking that a client can fake a longer time spent on the page to workaround this
 setTimeout( recordView, 10000 ); Yes, you can fake it. But who cares enough to?
If you have to support ie8 keep in mind that forEach doesn't exist there
thanks. any pointer to a brief explanation or link where it's shown what techniques are used to do it server side? I'm trying to prevent user faking time spent making it longer than 30 seconds when in reality they leave 5 seconds later
You're right :-) maybe I'm "overthinking" it. I know youtube has to be safe because they and the clients get revenue based on video views
Been using it in production for about a year on the v0.11 branch, no issues.
Awesome to hear. The company I work for wont use unstable versions of node for production, but hopefully we can make the switch when 0.12 comes out.
It's hard to say without knowing the specific scenario. If you wanted to see how much time the user is taking before submitting a form, I would do something like this. Store the time that the page is sent to the user, and embed a CSRF token that expires after a single use. When the user submits the form, simply take the difference between the current time and the stored time.
It looks great! However, after authenticating with Github I had to close and re-open the app for the 'continue as derp' button to show up on the 'Welcome!' page.
I personally love koa's methods since they just make _so much sense_ for middleware: // write code above content // yield // write code below content An elapsed time header is a perfect example: var start = new Date(); yield next; this.set( 'X-Response-Time', new Date() - start ); The code is so simple and clear.
&gt; I have one script in javascript calculating time spent on page and on before unload sends this value to the server for processing. Why do this client-side? Server-side, you can record the time when the page was first requested. Then record the time the second unload request was sent. The difference between these two is the elapsed time on-page. 
It's because functions are treated "as data", which means you can do fun stuff like this: function createGreeting(greeting){ return function(){alert(greeting);} } createGreeting('hello, world!')(); Edit: oh god, formatting... 
var quant1 = prompt("item 1 question"); var quant2 = prompt("item2 question"); var quant3 = prompt("item3 question"); var item1 = 4.50; var item2 = 2.00; var item3 = 5.00; var total = (quant1*item1) + (quant2*item2) + (quant3*item3); This is very basic solution but it would store the answer from the prompts in the quant (quantity) variable. The price is in the item vars and the total multiplies the quantity * price, then adds all totals together. Not sure if that's exactly what you were asking. I'm assuming this is a beginners class so they're probably expecting a simple answer like this and not something more object oriented. 
 document.getElementsByTagName('et').forEach(function(el) { el.innerText = el.innerTex.replace('rpg', ''); });
Youtube can match the client with the server actually streaming that much video but there's no way they can guarantee someone actually looked at it. That's true of most advertising and the like so they probably don't worry about it beyond that.
Have you seen http://vuejs.org or http://ractivejs.org ?
Thanks, is there any other way without using DOM to get the string? I am using [Fiddler](http://www.telerik.com/fiddler) which runs on JScript.NET
Yeah, it really looks awesome and reads easily. Just hoping to avoid problems.
You are right about the project being unoptimized but it would really make a difference if I optimize both versions of the project? I mean the point here is not to see that minification a gzip of js's files optimize the whole project (which really does, but then again is not the point here). And about CSS I have used requireJS with a plugin called require-css, and I could say it does play nice with CSS (Either way this project has none css on it).
I really like this comment, I seriously do.
Try getting all your little 3rd party js files to build and then tell me how you like require.js! The amount of time I've spent getting these damn jQuery plugins to compile w/r.js has been nerve wracking. You can't just shim them like the docs say when you want to build. I've done big projects in require.js, and I will definitely use browserify for anything new.
Clicking `Run` on each of the textboxes shows an alert: &gt; TypeError: verifier is not a function Clicking "Show answer" raises the following exception: &gt; TypeError: string is undefined This is in FireFox.
To begin, I'd suggest that you learn some lambda calculus; do some excersises, and apply concepts to JS (ie, higher-order functions). Before you understand monads, you have to master functors. Once you understand what a functor is and how it applies to programming, watch Brian Beckman's "Don't fear the monad" video [1] to understand monads in theory. Next, learn some Haskell, it is I think the only way you will truly understand how monads apply to programming; Erik Meijer's "Introduction to Haskell" [3] is a great course. Once you have a good grasp, learn how to implement these abstract algebras in other languages; move onto reading the Typeclassopedia [3] and apply those concepts to JavaScript by following the Fantasy Land spec [4]. [1] https://www.youtube.com/watch?v=ZhuHCtR3xq8 [2] http://channel9.msdn.com/Series/C9-Lectures-Erik-Meijer-Functional-Programming-Fundamentals [3] http://www.haskell.org/haskellwiki/Typeclassopedia [4] https://github.com/fantasyland/fantasy-land 
Hey, thanks for the reply! I do have a pretty firm grasp of higher-order functions. I've done some practice re-implementing underscore methods for example. I have also seen "Don't Fear the Monad", and I thought it did do an excellent job of explaining things from a conceptual standpoint. I have been seriously considering diving into Haskell, so I think I will likely take your recommendation. Thanks a lot for the resources! Edit: is the reason that you say Haskell is critical to learning monads due to things like lack of variables (in the traditional sense) and I/O that work differently in non purely functional languages?