Such as this complex arrangement of functions and objects when a simple primal case statement can do it better? That entire article promotes misuse, predicated on the idea that you have to leave out braces and breaks, things your linter will capture, if you don’t. A switch is “when this then that”. It’s not a stack of in-memory functions. If you don’t want to use switches, fine. But don’t sit here and say they’re bad just because you think you’re clever enough to do it in some other way. Instantiating functions all over the place is developer and CPU intensive. The example in that article is both longer in SLOC and longer in readability, and I wager longer in execution time. Simplicity wins. Obfuscation looses. In the real world. 
What’s the average salary?
I _really_ wish this worked for all monads, not just promises :/
Thanks!! Please share your feedback!
Is it still possible to get work visas in Switzerland as an EU citizen? I'm German, and for obvious reasons I've always wanted to move there.
6k is certainly not Zürich. In Zürich a senior Engineer can get 120k+ if you're looking for big companies. If you're looking at startups it might be less.
110K according to [glassdoor](https://fr.glassdoor.ch/Salaires/software-engineer-salaire-SRCH_KO0,17.htm), but it depends greatly on the field and seniorship. I would say from 80K to 120K+ 
&gt;citizen yes
If I remember correctly, Alan Turing did far more than just make a real-world application of the Bombe; the polish Bombe was a brilliant proof of Concept of engima’s flaws, breaking a cryptosystem that was held as unbreakable at that time, and whom without the enigma would never have been broken. However, it was only able to exploit a broken key exchange protocol that the Germans used near the begging of WW2. This protocol consisted of typing out a new rotor key twice encrypted by the shared key before a message encrypted by the handshake key. Intended to make it harder to break, it did the complete opposite; as the ingenious polish mathematicians realised, they knew that for all messages, the 1st &amp; 4th letters must be the same, as were the 2nd &amp; 5th and the 3rd &amp; 6th. Using just this, they were able to construct a massive dictionary of encryption patterns across all intercepted handshakes by ‘chaining’ the handshake encryptions; the polish Bombe was made to speed up the cracking process by working as (and here I might really be wrong) one of if not the first electromechanical search machine. They gave all their research and knowledge via Turing to Bletchley park, where they faced an even greater challenge; not only did the Germans remove the faulty key protocol, but they also increased the number of plug-board switches and some navel enigma machines used more rotors and had higher selections. Here was where Turing became famous, as he designed a whole new system based of electromechanical known plaintext attacks (which he called cribs), exploiting other weaknesses he found in enigma such as the reflector problem, where no letter can be encrypted to itself. His concepts were then later refined by Gordon Welchman to make it more efficient, but at that point Britain was breaking enigma messages without issues. Source: the code book by Simon Singh; however, I’m going by memory so be free to correct any mistakes
Thanks for the feedback! I listed them in the README.md so they eventually they'll come out. One thing though, the game speed increases every 10 broken blocks
Thanks! Another feature for the next version
Well, I code since 2013, but javascript specifically it's since 2014 or 2015.
If I was you I would leverage my professional network to get remote contacting work. This way you can move and work remotely and once you are in the new country you can see if you can find anything better. I know several people who have done this and I did this myself moving around Europe. 
Don't know where they got that number from but you can make a lot more. 
No
I'm not sure what you mean by JS not having it? I think it's used in JS. But it might not be obvious being that JS doesn't have the abstract class, being a prototype based language. [https://www.dofactory.com/javascript/factory-method-design-pattern](https://www.dofactory.com/javascript/factory-method-design-pattern)
Facebook? hard pass
You don't use React or Jest either then?
The "interop" looks terrible, but otherwise just looks like javascript. The most important question is why? What problem is this language trying to solve?
As an American watching this thread, it's what I'd do in the USA. Remote pays less, but allows you to travel as you please. Here it's worth it to get a recruiter or two. The money they take is more than made up for by the money they give. 
This is just silly. By your reasoning I should never put an `if` statement in a function because then I have to change the function itself to change the behavior of the function. The open-close principal is about modules that *are used by other programs*. Here's the guy who first popularized the idea of open-closed: "In the case of a design or specification module, closing a module simply means having it approved by management, adding it to the project's official repository of accepted software items (often called the project \_baseline\_), and publishing its interface for the benefit of other module designers" [https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html](https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html) He goes on to say that definition is obviously dated.... but I think people are hugely exaggerating where the open-closed principal should be applied. At the end of the day, the code where behavior is decided *has to live somewhere*. And wherever it lives, that code will have to be changed if you want to change behavior. Think you can get around that with "plug-ins" as the article suggests? Not really. All that does is put behavior in config files. And trying to understand the logic of a system that relies almost entirely on config files for behavior is a pain in the ass. Yes, it is worth it sometimes if you need a highly configurable system. For example, your software is used by a huge variety of customers all with different needs. But the ease of configuration comes at a cost. Like with most software decisions, there is no silver bullet. Only pros and cons. And senior software engineers will understand that sometimes the pro of code without multiple layers of abstraction and that's easy to understand at a glance without heading to multiple other files, is the best choice sometimes. 
If you'd go that far it would be better to just use two if statements.
Haven't heard of jest, just react, express, angular, and vue. I don't use frameworks though. I do plan to eventually get into it, but I find they mangle regular javascript in an attempt to 'help' but they don't really help because then you have to learn the new syntax which takes a butt load of time.
Yes?
Too meh to get people to become that interested IMO.
This man is a wilderness man. A mountain man. Unsophisticated but hardy. You wouldn't introduce him to your friends, but you would introduce him to your momma. 
Ironic since I actually live beside the ocean with mountains all around me and a massive forest of trees lol. Whenever I go driving there's about a 2/3 chance of seeing an eagle up above shadowing the car. There's also a pretty good chance of hitting a deer once every 2 years, but thems the breaks eh?
So you wouldn't recommend a framework which is still used and a junior will more than likely come across in many older sites but you'll recommend a framework which they most likely wont see in their day job for a long while if ever, its used by like &lt;1% of production sites isn't it? That makes no sense lol
A Dwight Shrute
Fuck Facebook.
Yeah I agree with you on FB being dodgy. Just to note on what you say about frameworks, since I thought the same way up until recently. Sure it's annoying to learn new syntax and a new 'way' of writing applications when you start to use a framework. But when you understand the framework you're using, you begin to understand how it works underneath and why it does what it does. And for someone who wants to learn as much about programming as they can, that perspective of what a particular JS framework actually *is* can feel very fulfilling to acquire. Applications that could take weeks to write may only take days with a tried-and-tested framework. Sorry for the lecture, I just felt the need to say something on that since I didn't like frameworks up until recently and figured I could just write everything in vanilla and be ultra pure with my code lol. I think it was more the hipster image some frameworks use to market themselves, using words like 'artisan' etc that turned me off. But once I looked past the marketing I found a particular framework (Vue) and many tools to be extremely helpful. Jest itself is for unit testing. You write a script that is full of 'expect' statements, as in "expect this function to return 4" and it passes / fails if it returns 4 or doesn't respectively. Unit testing is vital when you write big applications, it saves on a huge amount of time as the test runner (such as Jest) literally runs every test you specify with all the statements of things it expects to happen and tells you if those expectations are met or aren't met.
I'd say the reason why is because it makes the tooling surrounding React a lot more streamlined. If you use ReasonML and React together, that gives you the combined power of: * React itself * TypeScript (though I would certainly argue that ReasonML's type system is better) * Redux (Reason's React bindings have actions and reducers built-in, though I should add those do rely on local component state) * ImmutableJS / Immer (ReasonML's types are immutable by default, so you won't need solutions such as these anymore) * Prettier (ReasonML's `refmt` got you covered) * ESLint (With the combination of static types and standardized formatting, a separate linter doesn't really add much anymore)
Didn't we already do this with Dart?
The meaning? It's found in layers. 
Oh my. Have I committed an F-bomb fallacy by using a four-letter word for emphasis, or did you commit an ad hominem one by suggesting the argument is invalid because I'm a meany? Who gives a shit? I mentioned PHP and MySQL because they, like JavaScript, have the overwhelming first-mover advantage. A pretender has to be at least an order of magnitude better/faster/"eleganter" than the incumbent to become widely adopted (e.g. NginX). Go is irrelevant, but if you think it's an order of magnitude better than PHP, you're making a poor case for us to adopt it. 
Have you ever used OCaml? ML languages are just really pleasant to use, so it's natural that a JavaScript-flavored ML would show up. There really isn't a reason to use it other than "I like JS and I like ML", but that's enough for a lot of people
this is like a dream for me, how much experience i need to be able to work remotely ? i just started as a junior developer, and i would appreciate if you have advices for someone like me 
That's true as it's a unique type of object but still an object 
I’ve heard of it. Let me take a look at it and see if it has all of my requirements for a JavaScript language replacement, starting from most important to least important. 1. Does it work natively in the browser? No. Well, it was a nice try. On to the next JS alternative.
I don't think you can get around that. Google's documentation [has a great example](https://developer.chrome.com/apps/xhr#xhr-vs-content-scripts) of why that permission exists: A malicious website can impersonate your content script and ask your background script to fetch any web page. The extension doesn't know that you're only exposing the published date of the article, as far as it knows you could be giving the content script the entire webpage. This is obviously bad: A malicious website can request your facebook page with your extension. Moving this processing to the backend would make the most sense.
I see your problem with the deer. You've a misspelled var name. It's **brakes**. ;p Sounds idyllic. PNW? Peru? (don't think there are deer down there) 
I've been moving more and more towards hybrids. It really is the best of both worlds. 
Could not agree more, as much as I loved working on an angular side project, SPA solves a narrow range of problems and is way too often used.
Objects created with curly braces (e.g. `{foo: 'bar'}`) have the Object prototype, which means that `({foo: 'bar'}).__proto__` and `({foo: 'bar'}).constructor` can be accessed, among other things. Combine that with dynamic input and function invocations, and you're just steps away from an XSS attack. In the isolated examples from the article, I don't think there are any immediate holes. But, don't forget how easy it is to eval() something: ({foo: 'bar'}).constructor.constructor('alert("foo")')() All it would take is a second level lookup (e.g. a "nested switch"). 
I've also got 10+ years experience. I dunno where they are. Gave up awhile ago, started setting up my own online busineses
Isn't react and angular the big flavors of the moment?
Check out [Barba.js](http://barbajs.org) - for me, this library fits in every website. 
Google is terrible at verifying extensions and Android apps 😭 as long time Android user, only time I get jealous on people with iPhones, is when I have to download something from play store and apps are asking me to enable all kind of permissions without any verification from Google. Just check out Twitter feed of Lukas Stefanko and you will understand what I mean https://twitter.com/LukasStefanko?s=09
So it seems but it only means there is HUGE supply of programners
I wouldn't say that "web applications behind a login" or "intranet web apps" are exactly "arrow range of problems"... But agreed otherwise. Btw, have you seen for example Gatsby.js? (static site generator for React)
i started 2017. its very impressive to write all that in 24 hours. i hope i am as good as you are in a few years
Possibly, but everywhere I look I see job postings asking for it. Am I missing something then?
Basically, it's not recommended to check in your `node_modules` folder as it is usually massive (can be 1GB+ depending on your dependencies). I'd recommend creating a `.gitignore` file and adding `node_modules` to it (along with other files that you don't want to appear in your version control) so that when you (or others) come to clone the repository, it's not a massive download. [This](https://www.gitignore.io/) is a good resource for generating `.gitignore` files nice and quickly.
So you think React is the way to go to get a job in a month of training?
Very interesting! I might just build this into my product. Been looking for a way to keep users moving between pieces of content quickly and like the idea of a simple “next” button loading the rest of the content for me. Do you have any recommendations or best practices with this?
If you are willing to wade through a swamp of recruiter spam and speak to dingbats, you should be able to get a contract job just with endurance. Little secret; recruiter don't know how to evaluate talent, or what the role they are filling even is. Contract jobs can suck, but you can randomly get them, and build up experience. Post your resume on job sites and apply to everything that seems remotely close to acceptable.
So I should apply without having deep experience with these technologies? I can learn very rapidly if I have a very specific problem to solve. So I feel confident I could do this. I just dont know how deep a portfolio/knowledge is required to even apply
If you are doing it just for the money, you are gonna have a hard time.
This belongs more in r/node.
Where do you get this? I do enjoy it
Remote is usually only available to Seniors, sometimes mid level. Junior is rare, but possible. I’d suggest getting enough experience to be a mid and then trying for remote. 
When was the last time you built something?
Yeah, although my extension doesn't ever display any content from pages it downloads to the user I definitely understand the security concerns requesting this broad of permissions. Not knocking Google for that all.
This morning. Im building a script to suck out the job listings on craigslist and then if keywords match have them read aloud through a speaker hooked up to a raspi. 
I've heard about Gatsby but what's the fuss about?
Realized this a little bit ago. Recently redid my personal website in a simple single index.html file with a few images. 
I actually do all fetch requests and processing from a background script. From what I read they used to be more lenient with using the client script for cross-origin requests, but in recent versions of Chrome they've got stricter and stricter (which I think overall is a good thing from an end user's perspective).
Ok, that is something practical. Just curious, why bring a raspi into it? Does your computer not have speakers? Also what is the script written in?
3 week old account. All posts are "course on sale!"
To be honest their documentation is a bit confusing on the issue. We just listed our extension a month ago and didn't have to specify any origins in the manifest using the background script route. Anyways, just wanted to point this out as I don't think the origin issue is what triggers this error.
I've seen that there can a stigma against learning "server stuff". For devs that have done a lot of front end and minimal back/middle, it can seem overwhelming when concepts are mentioned like ports, sockets, routing, apache or nginx configuration, etc. If you can abstract that away by doing everything in the front-end "safe zone" it can make it *seem* more manageable. But if you try to do everything client-side, you get into a lot of other complexities that often don't need to exist. Authorization/authentication becomes more advanced, same with SEO, state management, even just code organization and maintainability. Sometimes it's the right call, but for e.g. a small business website, blog, etc these frameworks are overkill and not the best tool for the job Good places to start with a simple backend imo are to run a flask/Sinatra/express server. They're bare bones, you can see the inner workings, and see that it's not so complex.
Its using node. I like to have the raspi running 24/7 so it can continually do things like this script. I have the speaker set up to it so its a poor mans (and private) home agent. 
My stack is usually: Barba.js (Page transitions/SPA like), Velocity.js (Animations) and Lozad.js (Lazy loading with intersection observer). With Barba I define default page transitions and some „unique transitions“ for specific scenarios (like loading the page the first time). And the transitions are made with Velocity. Its pretty simple to start with this stack, but you have endless possibilities with it.
Seems very similar to something I worked on last year for a small work project. I like that it simulates a file system though! I'll take a look to see how things are done internally. ^(if you are interested in looking at what I had done ()[^(https://github.com/JayPuff/browser-file-storage)](https://github.com/JayPuff/browser-file-storage)^())
Exactly what i was thinking.
I know it is not. And no I have not. The point that it might make using react more interesting.
Good start. Can I offer a suggestion? Instead of a raspi, set up an old cheap laptop for your server/monitor. And use browser for talking to node. And or cheap android w/webbrowser to talk to node. There are no guarantees, but if you steer your hobbies towards the type of gig you are looking for, you will be able to talk the talk a lot better. I assume you are wanting "full stack" here? 
Except yes you can
It a static site generator, which allows you easily create static html pages (for SEO). But after the first page, it behaves like a SPA (or PWA). Which means, if you have sufficiently static content (for example you post once per day to your blog), it has best features from static webs and from applications. (i have even read study about eshops being implemented by it)
Yeah I understand what you are saying. It hard for me to know what exactly is in demand AND also not oversaturated by the supply. At this point I will do anything that pays my bills ($30+/hr) so i can have a stable point with which to be picky. If its full stack so be it. If its just mobile so be it. I just want to know where the demand is most and its not oversaturated with programmers
From the article: &amp;#x200B; \&gt; Around the same time, I also learned Gulp, CoffeeScript, BackboneJS, and SASS, all of which have been superseded by newer tools. &amp;#x200B; I'm curious what has superseded SASS?
There was a recent survey, well beyond javascript, and for whatever surveys are worth, but it indicated what employers were looking for vs applicants, I'll see if I can find it.
&gt; These products absolutely have to use a single-page architecture to work properly. Oh how I love such bullshit claims, especially when they couldn't be farther from the truth. You can easily provide real-time features or rich UI interactions on server-rendered sites as well. That's what people have been doing since early 2000's. Part of the reason React and others are cool is because you bundle all your front-end code together. So your client-side code is all javascript and in one place, instead of part twig part js coupled by php in some implicit way, and then with css added to the mix. Oh yeah, and then there's business logic, 100% it's coupled to view or controller in one way or another. It's messy if not done right, and unfortunately your average product is not done right. SPA's on the other hand consist of a client and an API, you couldn't fit the SRP better than that. A server, which provides business functionality in a very flexible and agnostic way, and a user interface to that functionalities. Want to add another user interface, a mobile app maybe, or integrate with an external service? Your backend is pretty much ready. That's the real benefit.
An inverse to your question is that there are a lot of jobs, but a lot of companies are having troubles finding viable candidates. - Salary/rate expectations do not match the skill set - Skill set of the candidates is not at the level of the teams expectations. This one in particular is a touchy subject because a lot of candidates feel very confident in their skills, but fail to perform. - Flaky candidates, bailing the last minute for no given reason - Candidates who get hired end up being a burden to the team(s) they join - Hiring is expensive for companies. It is a balance of not putting candidates through a jerk experience, while understanding if they have what the company is looking for. - Team fit. Personality plays a big role and a lot of the time there are rocket scientists with no personality. Sorry I am on the other end of the question and just wanted to share the other sides pain.
You should add it to your existing projects, be prepared for 20000 errors on first run though.
Good stuff thanks!
css-in-js 😂
Also you should be able to glean some info from scraping other job boards, but you probably already knew that :)
If you work with react, style-components is the current standard for styling for example.
Me every time I post in a tech subreddit and immediately downvoted. https://www.youtube.com/watch?v=29M_VElHoFI
Yeah its overwhelming Resume driven development
Okay...care to explain how?
That's the rub, where do you draw that line? I have had reasonable success pushing it, getting jobs I was barely qualified for, and learning on the fly. You have to want to learn the stuff, though. 
In my org it's considered a sin to not build a single page app, and the web dev time is really slow ... I am constantly having this conversation with my junior devs, there are trade offs, and in the world of UIs new and shiny is the order of the day, and it's too easy to get caught up in thinking just because something is new it is better. I've built both single page and server side rendered apps and honestly I prefer server side rendered or hybrid apps, I find I can move much quicker and get an end result which I better optimize, but it's the old way of doing things, so I get lambasted for pushing it.
Lol, ITT the problem with JS frameworks. You should use Gastby, no Agular, no React, no Node, no Barba, no Backbone, no wait now all of those are too old and everyone is using YugeDick.
This is in response to that ["An Alternate Approach"](https://www.reddit.com/r/javascript/comments/arkefh/an_alternative_approach_to_switch_statements_in/) from the other day. As I suspected, the Switch statement is much faster, so that article didn't really convince me, and I still don't know why people think it's [for babies](https://www.reddit.com/r/javascript/comments/arkefh/an_alternative_approach_to_switch_statements_in/egol0hh)
Yes, I've too experienced alot of extra complexity building public SPAs, especially when SEO is involved and custom analytics. &amp;#x200B; The way I rationalize this extra effort is that I'm providing the fastest website experience possible, and its true, the fact that the CSS and JS don't re-evaluate on each page request, make SPAs the fastest most enjoyable websites to use.
there is a "reason" JavaScript will never be replaced 
https://www.reddit.com/r/javascript/comments/arz2vy/switch_statement_vs_an_alternate_approach/ the switch statement is 30 times faster. THIRTY TIMES faster. 
I feel with the meteoric rise of GraphQL, having a spa with state management is necessary. GraphQL has its perks over REST and the cons, didn't really find one. Gatsby is doing great with the entire static site generations. And if you are the type of guy who need raw performance then Rust with Webassembly is the way to go. It's significant faster than Js, go, ruby and sometimes c++. I send some time learning Yew a component driven Webassembly framework written in Rust. If you are a react developer then the syntax is sort of similar. ( Emphasizing on sort of )
Switch/Case is seriously the vaccuum cleaner for shitty if statement clusters &lt;3
I think it’s a pretty big stretch to call CSS-in-JS the current “standard” for styling in React. It’s more like the current *fad*. Personally, I strongly prefer Sass + CSS Modules over any permutation of CSS-in-JS.
Hi /u/avanibedi, this post was removed. Low-effort content such as listicles, memes, clickbait, etc. is prohibited. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Re-posting comment that got lost because the comment it was replying to got deleted (but it was really a larger reply to the OP, and it got 16 upvotes and a silver so I feel like it's worth saving): Or you could ... you know .. use tools. React Router (just as one example of many) takes care of all that "traditional architecture" and "emulation of trivial browser features". If the article author is "spending many hours making sure that browser history is managed just right" they are absolutely doing it wrong and trying to reinvent the wheel ... poorly. TLDR; Don't go writing your own library and complaining about how hard it is when there are libraries that do everything you want for you. It'd be like bitching about how hard visualizations in JS are because you refuse to use D3 or another visualization library. P.S. Even scroll restoration, which I think the vast majority of sites won't care about, has libraries. Heck, the React Router documentation even covers how to do it: https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/scroll-restoration.md
I think that there is one point this article is missing is that sometimes reason behind decision about making application "SPA" is willing to have only one stack. Nowadays, frontend applications are involving a lot of functionalities which earlier belongs to backend frameworks mentioned by author: validation, data representation, sorting and filtering. If not using AJAX calls for that, it was usually involving redundant code on both sides, ie. when client requested to have frontend validation, which needs to be performed on backend anyway, same with dynamically added items - should we return whole page once again or add item only on frontend? If second option, we have then 2 places with templates. &amp;#x200B; I am not declining that it's possible to have non SPA application without issues mentioned above but usually result of development of such was "stack-spaghetti", at least from my experience.
PostCSS
GraphQL is such amazing specifications when understood correctly. When trying to build as simple endpoints as possible you'll end up writing code that is more simpler, smaller and performanter than otherwise was the norm in REST api's. As a developer doing things all over the place it's a blast to work with a well designed GrapQL api.
People are just resistant to change. I know how to do things both ways and SPA is popular for a reason.
That page uses a browser detection screen that blocks the content for a full 5 seconds (at least on my iPhone) and wants to teach me about efficient web pages, wtf.
Any idea if this is supposed to work on mobile? I'm not getting an effect on my iPhone
I guess I'll have to check back later from my computer
Is this Windows only? I notice the Cygwin and lots of backslashes in the bins.
True, you normally work up to it once you gain the trust of your managers and after spending some years in an organization you start doing one day per week from home, then two and so on. They soon realize it's in their interest to let you work from home because more often than not you get more work done and in some cases you are more inclined to do overtime because you don't actually have to go to the office. At that point remote work becomes part of your skill set and you have remote experience so you can try to go for entirely remote jobs. A word of caution though, remote work is not for everybody and it takes a lot of self-discipline. I've seen people who thought it would be great self-destruct in a matter of months and then vow never to do remote work again. Others are entirely happy and have fully adapted to it. Key is to try it in small doses and work your way up from there and see how you fare. 
Here is a small cute GIF from there: &amp;#x200B;
&gt; I've seen that there can a stigma against learning "server stuff". No company I've ever worked at would keep a frontend dev around who expressed such a stupid sentiment. Is that really a thing?
SCSS-in-JS. GET ON MY LEVEL. (I actually hate styled-components but I use it anyway because it makes my designer happy...)
Have you tried this one? [https://github.com/tediousjs/node-mssql](https://github.com/tediousjs/node-mssql) All of my SQL Server projects use C# &amp; .NET libraries, so I can't be of too much help in Node.
Being a big fan of ML, I spent some time experimenting with Reason end of last year (2018). Unfortuately it's not ready for primetime for two reasons, - documentation is fragmented between Reason and Bucklescript - debug toolchain is non-existent
I have but the documentation isn't great so before I went down a rabbit hole I figured I'd start a convo here. I was considering going the .net route instead, any suggestions there?
Is the problem really about time measurement or is the problem that your data goes out of sync? Is storing the full state to re-sync every once in a while an option? This is what's done on many video compression algorithms.
&gt; I actually hate styled-components And what do you prefer?
Interesting. The difference on iOS latest release using the Reddit mobile built in browser is only 5% difference in performance.
Sass with modules.
I only made SPA sites since 2014 (except a few landing pages). I don't understand this article. The author mentioned 4 problems with SPA sites, but all four are problems which can be solved once and you never run into these problems again. So what exactly is the problem with SPA sites if I already solved these problems? What would be the reason for me to chose another architecture? 
You might want to try using `requestAnimationFrame()`.
Fad is a bit negative tho, implying that its only a short-lived trend that provides no real advantage over other solutions. It's more like a *choice*.
Who wants simple readable code? That shit is for babies. Once the training wheels are off your code needs tp be as complicated as possible so people realise what a 10x rockstar ninja you are
I'm taking about the JS community at large and not necessarily professionals. My view might be skewed, I've made a few things in JS myself, but the people I've mentored who are coming up in JS vs people coming from other contexts tend to have this gap when they're starting out. (That said, they're typically stronger in understanding user experience and asynchronicity)
We have not tried saving different states, but have encountered that idea for larger replays, especially for when people go back and forth. We didn't need that kind of utility in this scenario so we never tried it. Our datasets are relatively small, but we will give it a shot. As we understand the problem, the deltas which are being recorded are slightly different from the actual inputs. We are talking about maybe 15ms off, or less. But occasionally that difference lines up to cause the replay to desynch. In our example, it's a simple snake game. Moves will get off by a tile, which breaks the validation. We have considered a cludge to check the path and put it back on target, but that is not a real solution and would not work for implementation in other timing sensitive javascript games. We also tried implementing a delay in the user input, but could not get that to consistently work. We may have been off in our timing of that.
If you know it at a simple layer, you probably know it enough. Conceptually it is quite simply, which makes it all the more frustrating that people don't learn it.
We will try this. Thanks.
&gt;Like with most software decisions, there is no silver bullet. Only pros and cons. Golden! This is the right answer to "Should I or should I not use something?" and is also the answer to the question of whether or not this object pattern must be used.
Oh, definitely. Boot camp grads, especially, tend to understand the language inside and out (because that's what gets them the jobs, and those outcomes keep the boot camps in business) but for some of them, that's *all* they know. I'm not knocking boot camp grads, of course - I am one myself. But I'm also a lifelong Linux hobbyist and I now do devops as well as frontend. 
What about non-eu citizens?
YAML is more concise. ... and... trailing coma - sucks)))
I'm trying to get the axios get request working, so ignore the github login 
From the great Donald Knuth: &gt;The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming. Performance should be literally the last thing you think of. The only time you should ever consider performance is: A) when you have a performance problem, and B) when you are doing something obviously costly (eg. a number of non-trivial operations in a loop), and there's a clear and obvious way to do things more efficiently. The entire rest of your programming career you should not be thinking about performance! Really! You should instead be focused on *maintainability*, *usability*, and other things that will actually impact whether your business succeeds or fails. No web-based business ever failed for taking an extra 50 or even 500 milliseconds.
I mean if you just switch his own approach with a switch statement it's essentially the identical. For some reason he leave in the unnecessary breaks after returns. const getEditorType = type =&gt; { const itsCodeEditor = () =&gt; 'It is a code editor'; const itsIDE = () =&gt; 'It is an IDE'; switch (type) { case 'atom': case 'sublime': case 'vscode': return itsCodeEditor(); case 'webstorm': case 'pycharm': return itsIDE(); default: return 'unknown'; } }; const vscodeType = getEditorType('vscode'); I don't know if js engines will make a switch a jump table or just do a hashlookup like the object. If it's like the object there really no safety benefit in one over the other. Most of the performance difference is probably in the function creations and calls. Obviously his pattern allows for a sort of runtime switch which allows modification, but it seems a normal switch would be preferable otherwise.
Works on Android/Chrome. It's nothing special though. People have been doing things like this for nearly a decade. 
Of course!
worked on chrome on my MacBook. Yeah, it's definitely nothing new but I might implement this somewhere just for the hell of it 
Thank you! :D
Try https://github.com/sequelize/sequelize. If you want to use raw queries, you can simply use sequelize's queryInterface.
That's remarkable. On this PC and chrome/win10, the difference is huge. 377M vs 7M. 98% slower! On the mac in Chrome, it's 90% slower. But, on the mac and in Safari, it's 5% slower. And on iOS in chrome, as you said, the object method is closer to 5% slower. But Chrome on iOS uses webkit, so webkit is optimized for this sort of thing i guess. Still slower, though. 
We have several mini-SPAs for our app and it's much easier to manage than our first try of having one massive SPA.
Ah I see, that's a difficult problem. Is the framerate on your games being artificially limited somehow? Snapping user interaction to next frame that runs in a somewhat consistent timeframe would alleviate this type of inconsistencies (if you limit to 60fps anything under 16ms will not be even registered).It might take some substantial modification to the games themselves though. Maybe adding some more information to the deltas you're storing could be useful? Like storing the effect on the game state instead of the inputs (maybe store both at different frequencies). You could take deltas on game state over a few frames to lower the memory footprint of deltas over time and store inputs every frame. The idea is that a player is likely to modify the same state a few times in a row, so storing only the end state after that would save on intermediate state, which can be reconstructed from stored input. Now you can go off from user input and reconstruct the correct state every a few frames. pseudocode: let oldState = ...; let currentState = ...; // made up gameloop statement, replace with function and callback or something gameloop ( let update of updates ) { if( update.isSync() ){ currentState = oldState.synced(update.getSyncData()); oldState = currentState.copy(); }else{ currentState.update(update.getUserInput(); } }
Yay this looks promising, thank you!
It's nice that switch statements are more performant but I prefer the alternative most of the time because I can re-use the object for other things and I'm often getting objects from Json retrieved from either config or api, so the object is there already. A switch statements default field is the only think that gives it value for me personally.
There is not much documentation needed either. 95% of the time the only methods you will use are connect() and query(). Personally, my apps support MySQL, SQLite and MSSQL. All 3 have different syntax for some queries. So basically what I did was create wrappers for each database type, all with the same methods name. Then, depending on which database is used, the appropriate wrapper is loaded and queries are processed the same way in all 3 database types. Perhaps it would be a good idea to not change your queries but use an additional layer to format them to MSSQL syntax before processing them. What happens if someday you are told to use a different database technology, like let's say Oracle, have you thought about this?
Works perfectly on Android Chrome. I had to open the code pen in full screen to get the best effect.
&gt; Performance should be literally the last thing you think of. Graphics programmer here, I absolutely disagree. It always depends on what you're working on. Often you can tell that a piece of code is going to be performance critical so I won't use features that I know from past experience are slow. However, the majority of code usually isn't critical so most of the time I do whatever is easier to understand and maintain. 
This☝️
It's not more maintainable either. If you get a new case, you need to create new properties. There is a good chance that you now have to update the code in a bunch of places instead of just inside of the switch statement. 
Just finished reading the code. Some comments: - If you do not care about browser support, or only targeting [these browsers](https://caniuse.com/#feat=es6-module), use es modules. Otherwise, use a module loader/bundler. Makes it more maintainable and testable. - I'd work mostly in numbers and convert to/from letter only for input/output. It is easier to do arithmetic in numbers than in letters. - Rotors and reflectors should be fully configurable instead of taking a name for predefined rotors/reflector. Either make those static constants/factories or pull them up (into `Enigma`) - Split up the forward and backward direction through the rotors into two functions. Look at `Rotor#lWire`. Any time you have a function of the form `function() { if(condition) { /* Do something */ } else { /* Do something else */ } }` ask yourself "Why isn't this two functions?" - The double-step algorithm can be implemented more simply and more generalized: At each step, the set of rotors that rotate is all rotors that is in the notch position, plus the rotors after each of those, plus the first rotor. - The plugboard is essentially a configurable reflector. I'd use the same implementation.
&gt; Performance should be literally the last thing you think of. This is one of the sillier things about making anything in general that I've ever heard. If performance is the last thing you think of, it's going to be the last thing you get - if ever. Because literally by its nature the downsides of ignoring it show up when it's often too late to do more than pile on hacks to avoid upsetting the balance of the system. An ounce of prevention is worth a pound of cure, and all that. &gt; But the prime consideration should always be "which choice will make my code understandable to myself and my co-workers months or years from now", not which saves 10ms or whatever. It's fascinating to me when devs treat software as though _they_ are the primary user (and not, you know, the actual users). Not to say that developer experience is not important, but it's interesting to see people automatically put it first. It's the nature of the field, I suppose.
Thanks. This looks like a good take on the problem. We will test.
Yup, it's neat for sure. Didn't mean to sound like I was shitting on it. Just pointing out it's not 2019. In fact, parallax has probably already peaked. 
and even if not graphics, being sloppy has costs of its own, worse user experience, increased hosting costs, longer run times. I mean it is odd coming from the "redux" camp since that is typically an asynchronous event loop environment, which is a heck of a lot less "maintainable" than procedural. All the same it is always best to profile before going to great lengths optimizing. But we should never completely ignore the resource impact. And yes, often times things are "good enough". But "maintainability" and "usability" are very subjective terms, the stuff of "soft sciences", and probably a source of MORE damage to the industry and business as a whole with endless arguments and re-writes and framework de-jours, whereas performance is a hard and quantifiable thing, and trivial to measure by comparison, so really no excuse to ignore it.
Build steps are something to be embraced.
I work as a full stack JavaScript developer in Berne and I can tell you it is fairly easy to get a job and also the salaries are really really respectable
You should check out JSON5: https://json5.org/
small business site/blog can be done in gatsby quite easily. Then you have the best from the two worlds together 
Oh definitely peaked 
Fair enough. I personally don’t infer any negativity from “fad,” but I see your point. I meant it more as “the new hotness which hasn’t had time for the dust to settle yet.” 
Kind of a mute case, but I write Ionic Angular mobile apps ("web apps"). SPA makes sense, since I would need to write "browser tools" anyway ie. the back button. 
it should work on chrome and safari without problem
Really good points. I’ll take them all into consideration!
I don't see why anyone would want to do this. It's like the splash screens of yore, it's just an unnecessary distraction from your content.
What about removing the Arrow, sorry i'm not expert in JS, just trying stuff out: `const getEditorType = type =&gt; {` `const itsCodeEditor = 'It is a code editor';` `const itsIDE = 'It is an IDE';` `const editors = {` `atom: itsCodeEditor,` `sublime: itsCodeEditor,` `vscode: itsCodeEditor,` `webstorm: itsIDE,` `pycharm: itsIDE,` `default: () =&gt; 'unknown'` `};` `return editors[type] || editors.default;` `};` `const vscodeType = getEditorType('vscode');` `console.log(vscodeType);`
Ah another user of [logical fallacies](https://en.wikipedia.org/wiki/List_of_fallacies#Informal_fallacies). Great ! So let me help you find the ones you used in that comment. The first one is the [Straw man fallacy](https://en.wikipedia.org/wiki/Straw_man). You overly simplified what I said and put it in a ridiculous situation where it is easy enough to break it. Did I say that "I should never put an if statement in a function" ? No because it is ridiculous. Thanks for bringing that to everybody that already knew that ! The second one is [Red herring](https://en.wikipedia.org/wiki/Red_herring). You tried to (mis)use some [Argument from authority](https://en.wikipedia.org/wiki/Argument_from_authority) to lead the conversation to something that you know for fact is easy to defend. Yeah code is better than configuration in almost every case (fun fact, even [springboot](https://github.com/spring-projects/spring-fu) tries to move away from that). But that was not the point of the article, it was not my point and no one here talked about plugins and configuration aside you.
How do you paste code like this? with gray background and correct indentations? 
look at /15 it's the only fair assessment of both, all those function calls and object recreation each time are biased to switch. Bad tests. 
Hi /u/thewwfguy, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You can also build your back-end as an API, and the front-end could be a server-rendered website still (but it gets data from the API). eg. instead of React hosted on S3, you use NodeJS to render dynamic and/or static pages. Benefits of this: * easier to scale in the future (since you can boot up more of whatever server you need), * API doesn't need to care about how data is rendered, * easy to build native Android/Apple apps, because they can consume the API directly.
I thought Google can index JavaScript rendered content seamlessly these days.
I couldn't agree more. It seems to me that the steep increase in performance of our machines only enables developers to be more lazy.
Yes, but do we really have a choice any more but to build?
&gt;well, sometimes you need to add methods to an object on-the-fly. for example, when you use an object coming from a library you dont want to touch. or, That's not what typed means at all. Try again. &gt;sometimes you want to send anything to a function.. Yes, you could do that in other languages, but with sometimes far more code, and planning in advance Everything you are describing is bad. I want you to know this. God forbid a programmer plans in advance. In truth, what you're actually describing is Overloading Methods. This keeps with the Single Responsibility Principle which can help keep things simple. &gt;as for the de-centralization of NPM, i think its a good thing. i've many times had issues with those central python repos, that had to spent time to solve. disk space is cheap. our time... far more expensive :) Python / pip is a different beast than say Java and its structure. I'll give you that. I think Java's maven-style structure is better for programming and dealing with versioning. Are you saying you'd rather deal with 25 "local" copies of React instead of something structured like: \`/usr/local/node\_modules/react/16.7/react.js\` \`/usr/local/node\_modules/react/16.5/react.js\` versus \`myproject/node\_modules/react/16.7/react.js\` \`myproject2/node\_modules/react/16.7/react.js\` \`myproject3/node\_modules/react/16.5/react.js\` \`myproject4/node\_modules/react/16.5/react.js\` Yes, disk space is cheap, but my time installing dependencies is worth more. React is a simple example. Imagine it's a library with 50 of its own dependencies. &amp;#x200B;
Does that really require SPAs to achieve though? Couldn’t you have the same separation via API but render the UI on the server?
&gt;This is one of the sillier things about making anything in general that I've ever heard. &gt;If performance is the last thing you think of, it's going to be the last thing you get - if ever. Because literally by its nature the downsides of ignoring it show up when it's often too late to do more than pile on hacks to avoid upsetting the balance of the system. An ounce of prevention is worth a pound of cure, and all that. *This* is one of the sillier things I've ever heard. I've been a professional programmer for over a decade. I've written a book, taught classes, lead multiple teams, etc. I have never, not once in that entire history of coding, thought about performance first, second, or even third. Not even tenth. I have followed Knuth's advice (only one of the greatest thinkers in all of programming) my entire career and never had a problem. 99% of potential performance optimizations ARE premature. You don't make them, and no one will ever know, because human beings can't notice 2ms differences. If a human can notice a difference, then you have a recognizable performance problem, and *that*'s the time to fix it. But if you fixed the other 99% of cases all your efforts would be wasted. That's not smart. &gt; Not to say that developer experience is not important, but it's interesting to see people automatically put it first. It's the nature of the field, I suppose. It's a practical business reality. People love to hate on businesses for being businesses, but at the end of the day your favorite website won't exist unless the company behind it can make money. That means adding features and fixing bugs that keep people coming to the site. Reducing the load time from 3628 to 3623ms WILL NOT HELP YOUR BUSINESS SUCCEED. Adding minor frills that make the software slightly easier for the user WILL NOT HELP THEIR BUSINESS SUCCEED. But adding features and fixing bugs which actually matter to users WILL help their business succeed. And the only way you, as a business, are able to keep delivering those features and bug fixes in a timely fashion is if you keep your code maintainable. If you put all your efforts in to shaving off ms that no one cares about, instead of delivering those features/fixes AND instead of keeping your codebase maintainable, you either screw over current or future users, and in exchange you get ... nothing except millisecond faster load times.
This is the big challenge in web dev, to create something engaging and delightful without distracting from the content. You are competing with paper, whatever you make should make digesting the information better than digesting it on paper. For me, parallax can be good for product images, especially when you are presenting something new, where the consumer isn't just looking for details. 
Is that an existential crisis?
Hi /u/shealancos, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; You are competing with paper, whatever you make should make digesting the information better, both in terms of information delivery and pleasure, than digesting it on paper. To be fair, aren't we past that point with the web being the winner? &gt; For me, parallax can be good for product images, especially when you are presenting something new, where the consumer isn't just looking for details. fair, I should be more cognisant of my absolutism and try to avoid making sweeping statements like my comment above. Lots of gimmicks such as this, can be engaging in certain circumstances, but again, like splash screens (and many other things in life), tend to be used well beyond the specific areas where they can be useful. A general rule of thumb for me is not to add gimmicks of any kind, keeping a clean (but not necessarily boring) presentation that doesn't distract from the reason why the user is there in the first place.
CSS?
You've misunderstood the open-closed principal and tried to apply it where it doesn't belong. The article suggests taking this: ``` const getEditorType = type =&gt; { switch (type) { case 'atom': case 'sublime': case 'vscode': return 'It is a code editor'; break; case 'webstorm': case 'pycharm': return 'It is an IDE'; break; default: return 'unknown'; } }; ``` And replacing it with this: ``` const getEditorType = type =&gt; { const itsCodeEditor = () =&gt; 'It is a code editor'; const itsIDE = () =&gt; 'It is an IDE'; const editors = { atom: itsCodeEditor, sublime: itsCodeEditor, vscode: itsCodeEditor, webstorm: itsIDE, pycharm: itsIDE, default: () =&gt; 'unknown' }; return (editors[type] || editors.default)(); }; ``` Please explain how in the 2nd example you could do what you claimed: "add behavior without modifying the code of the function". Or how the 2nd version is improved and better adheres to the open-closed principal. Or really, improved in any way at all. I see zero benefit to the 2nd version, and it's just ever so slightly harder to understand with a total of four functions you need to mentally parse, along with the more complex return statement. 
Yeah! You put your CSS and HTML in your JS now, and then you squirt that JS over a bun between two hotdogs. And then you eat it backwards. &amp;#x200B;
You say you want to learn back end dev, but it looks like you're interested in learning design patterns. Design patterns are more useful for bigger projects. Of course you can learn both at the same time, but learning or prototype projects won't get much benefit from design patterns, because you won't be maintaining them and will be throwing away the code anyway. There are other topics in back end that might have more priority: security, databases, and web API design.
Hi Eli. I forked your repo and got it to run up until an app error “OAuth2Strategy requires a clientID option”. I’m sending you back a pull request with the few changes that I made. Pretty close though. Nice work! My system was Ubuntu 18, npm 6.7, node 1.8. - Frank 
100% agree . I wrote [something](https://guifroes.com/clever-code-is-bad/) regarding this issue.
Thank you for your answer. I guess in that case I kinda of already know some simple back-end stuff - routes, controllers, etc. My first job was as a full stack using .NET and my second job has been 100% frontend in react. I want to get back to the back end but somehow feel like there are things I don't know. The job that I'm interviewing for has requested the use of microservices with expressjs so I'm trying to know as much as I can about back end development. 
Many people like myself utilize SSR for ready because there is a lot of benefits so of course you can render the UI on the server and probably should for the first render pass.
But then the backend is not just an API, it has to also concern itself with UI views and flow. The whole point is to get rid of UI on the backend.
It pregenerates some of the views on server. And that's about it.
Yeah sorry, this was in r/javascript so I had a web focus in mind when I wrote that.
Modular css
[removed]
It seems like the author glossed over a major bonus to a SPA. If you use a SPA you minimize loading screens and can use really fast lazy loading just about everywhere. The SPA dynamically rerenders the page on URL change without having to hit your server for the page and wait for a server response. This is a huge plus in the world of impatient modern internet users. It has a real dollar value to every site with more than one page. But hey you tell me, have you ever left a site because you didn't want to wait for the next page to load? 
That was an observation about your rather peculiar hostile reaction. To this point I not sure what tipped you off. It's mildly entertaining to be frank. Yep. And I'm adding that that first mover advantage is now in the hands of other languages which offer tools to handle multi core processing and use cloud computing more efficiently. As result we are witnessing a shift in paradigm and tech stack. Not sure what allows you to proclaim that Go is supposedly irrelevant, however neither I have an intention to make any people here to adopt it. That was yet another observation of fact, you for some amazing reason mistook for a threat I suppose. God knows why.
took a look at the script, if it was maliciously trying to steal something it would "phone home" to send the data, i see no evidence of that. most likely it is a local DoS attack more than anything else but I have not looked over the css in detail.
Tbh nothing. Sass variables are a lot cleaner default CSS, and there's just so many neat features I take for granted.
Coming soon, js in scss in js!
I mean yeah but it's still a goto somewhere down the line
How about if the name of the module being imported is dynamic as well?
If you need native app like ux you absolutely need an SPA. 
The OP glossed over managing styles and i18n between embedded JS apps and the host app. I'm not sure if there is a way to create strictly isolated CSS in pure server rendered applications without managing naming your own selectors manually. If you build tiny JS apps into your server rendered apps, you'll have to keep the styling for the JS app either in the main app, or bundle it into the embededded JS. If you bundle it into the embedded JS, you'll end up with two styling pipelines, which could make it more difficult to share variables and constants between the two, if you put the CSS rules for the embedded app in the host app, then you have to change the host app CSS for changes in the child app, which means the two might need to be in the same repo. This gets especially more difficult with advances in UI and interaction design which lean more heavily on state based animation. In those cases, we HAVE to have CSS related to animatable elements that are based on application state within the embedded JS application, then you'll really have an issue with having two pipelines. There are similar issues for i18n, asset bundling, accessibility auditing, and testing. Given all the complexity of managing multiple pipelines for simple and complex pages, it seems to make sense to avoid that complexity by adopting a single pipeline that ensures browser compatibility, testing, i18n, accessibility and performance optimizations are consistently applied and centrally maintained. Which might imply , if _any_ of your app requires complex presentation/interaction, it might be better to just build the entire app using the same framework. Unfortunately, even if your app doesn't currently have complex functionality or interactions, doesn't mean you can guarantee it won't ever. Investors are known for pushing products to innovate, pivot, and adapt. Which implies that avoiding SPAs is a privilege for app developers and teams who have absolutely control over their product and won't ever be forced to build more complex products. The Op also doesn't address how having frontend dedicated ecosystems might affect hiring, or influence performance. I remember the days of having 20 instance variables set within a rails action and each of them being deeply coupled into the Erb template. Having a clear client server separation at least forces one to use an API, which can make caching easier by separating the caching of presentational and data elements. Also, the semantics of each server side templating language are quite different. E.g , slim vs liquid vs haml vs ejs. Using server side templates requires frontend developers to be much more versed in both templating languages and understanding the tiny bits of embedded server side code. I don't imagine too many front end folks jumping to learn scala, clojure or Haskell. However, if the client and server are separate than that means a scala shop can focus on the API and hire a frontend dev with no experience in the server side stack. 
Pacemakers aren't necessary. I code business reports delivered through a web site. The back end is Java, so we're going through an ORM to get to the database. If I code a report in the obvious way (which I do, at first) then it's * get me all the possibly relevant sales * for each sale - get it from the database - look to see if it really is relevant - calculate some values from it - add a row to the report and that's fine for a toy example or a small customer. Then a big customer wants the same report, and it has to look at 100000 sales and the web site times out while they're waiting for it. So then I rewrite the code to bypass the ORM and load all of the relevant data in as few queries as possible, and I have to recalculate the relationships between the sales and the child objects; and the report runs blindingly fast and everyone is happy except for the next developer who thinks I can't work the ORM. This is not an uncommon scenario, and reducing a report's load time from 95 seconds to 3.2 seconds absolutely does help my business succeed. So although I think there are some merits to your comment, you're underestimating the effect that optimisation can have.
&gt;In 100 comments, no one seems to have made that link Because nothing in that article even comes close to something resembling decoupling or the open-closed principal. 
I had the same opinion a few months ago, but after using styled-components in a project at work I can't imagine ever going back. Would love to hear your opinion of why you prefer SASS and CSS modules. Going to explain why I like CSS-in-JS. One problem I feel like it solves is class names. I haven't used any class names using CSS-in-JS. Using purely global CSS/SASS/LESS always ends up a pain to maintain. Proper naming convention like BEM helps, but just not using class names to begin with has benefited me and my team. Not to mention any CSS files. CSS modules definitely helps isolate styling to the component. Class names naming convention is still a thing though and is definitely not "type-safe". Before React, we used templating engines and templates, like Jade, Handlebars and Mustache, that always felt like monkey patching a problem that shouldn't be a problem, separating HTML and JS. I feel like React brought HTML into JS, but still we were monkey patching CSS and HTML with class names, CSS-In-JS solves that. Besides the class names, CSS-in-JS also brings with it changing the style at runtime rather elegantly and not to mention just using JS in the styling for some logic. You can use the props of the component to determine it's styling. 
But in your opinion what's the benefit of a server side rendered interface over SPA, even with both consuming the backend separately? I mean other than the benefits of SSRing React/Vue.
I mean sure but why not just scope it? Lol. Lots of extra steps to achieve the same thing
It's just yet another article written by someone who doesn't understand everything they're trying to write about. To answer your question, nothing has superseded Sass. DartSass is the latest compiler, but the language is the same. Native CSS still doesn't have support for maps/lists or iterating. CSS-Modules and CSS-in-JS are not equivalent to Sass. Similar thing goes for Gulp, I am guessing here that OP believes Webpack has superseded Gulp, but they're different tools. Gulp is a task runner, Webpack is a JavaScript Bundler like Browserify, but with many hacks added to it allowing it to do things like compile Sass. Musicians are told to write what they know, Programmers should be told the same.
Thank you very much! I'm so happy to hear that! &amp;#x200B; With around 3 years of programming I started these "Almost From Scratch" games, the first one was PONG, that is simpler than Tetris, but requires collision detection. [https://luxedo.github.io/pong-almost-from-scratch/](https://luxedo.github.io/pong-almost-from-scratch/) &amp;#x200B; Perhaps you already can do these things. What I found out making these games is that defining concrete goals is better than being a good coder. Finished projects are about planning, good code comes with experience and lots of frustrations in the way.
Someone recommended this at work Instead of angular universal. I didn’t really understand the difference
Switch statements are also great for avoiding callback hell. ```function doSomething (step) { switch (step) { case 0: { doSomethingElse(doSomething(1)); break; } case 2: { doSomethingElse(doSomething(2)); break; } case 3: { doSomethingElse(doSomething(3)); break; } } } doSomething(0);```
Yeah, but you can modify vanilla css vars on runtime with js 🏄🏻‍♂️
Step #1: npm install -g create-react-app
Thanks, I hate it.
^^^^truth. does the old stereotype of the computer programmer with poor social skills, bad posture, and terrible fashion sense still apply these days? the elitism in code culture is something i never understood. I remember when there were strict xhtml policy enforcement overseers. freakin markup, and there was still these same issues. there is no 1 size is correct in computer programming. we are making it up as we develop according to each specification.
I have an alternate approach to alternate articles : I don't waste my time with them
This would obviously fall into the case where optimization isn't premature. If you know you have a possibility of a large customer, and one common operation takes really long for big datasets, then of course you're going to optimise it. But notice that you didn't have any problems with the slower version until the big client showed up, at which point you could just refactor that one piece of code.
random tip: if you're working on a project that uses scss vars and you need to change some at runtime, you can just map the scss vars to css vars &amp;#x200B; [https://medium.com/atom-platform/angular-6-dynamic-themes-without-a-library-c21dfb2cb580](https://medium.com/atom-platform/angular-6-dynamic-themes-without-a-library-c21dfb2cb580)
Interesting but what are some practical uses for this?
Looks great buddy!
Even that is a bad test, for several reasons. 1. the object version does not support the fallback to `default`. 2. Both tests are static, and so can be optimized down to a non-branching execution. When you see JSperf results in billions of operations per second, you're almost always experiencing the JIT optimizing the code into a no-op. I've put together [/21](https://jsperf.com/switch-vs-object-function/21) which creates common constants for both methods, and maps across all possible values of each function. In 2014 I spent months on JSperf, testing micro-optimizations to the code I was writing and encouraging my team to do the same. We gradually recognized that it is *really hard* to write a reasonable, valid test case. And even when you are sure you have a good test, the performance difference between 1.5 million and 2 million ops on a function running perhaps ten times, you've wasted more time testing something than will likely ever be recouped in all the execution cycles of your code.
I like your optimism about boot camps, but speaking as a former teacher at one - That's simply not the case. Most boot camp graduates have a decent grasp on the basics of software development, but most by no means at all know a language inside/out when they graduate. Part of the reason I left the industry is because many boot camps exist to suck thousands of dollars out of people and give them the bare minimum amount of information they need to get into a job, where they then *actually* start learning how to be a developer. I realize that it's better than nothing for a lot of people, but boot camps do not give anyone a good grasp on the languages they're learning or on how to be a good developer. At least that's my experience with the "traditional" boot camps where you go for a few months and then are pushed out on your own.
I don't even know what I just read, but it was a load of crap. The only benefit plain Javascript has over a SPA or library is performance. You are always going to incur overhead using a SPA or library, but the benefits of using a tried and tested solution are too big to ignore. I have been around long enough to remember what web development was like before React, Angular and Aurelia existed. People would create their own spaghetti patterns, not document anything, improperly use jQuery (not caching selectors, inefficient selector queries) and use a mixture of tools, libraries and script tags. The old days were not good. When you choose a SPA, you're getting an entire ecosystem of plugins, repos, documentation and help that plain old JS doesn't have. The ecosystem is the huge benefit, because it means you don't have to reinvent the wheel every time you start a new project. Coupled with the helpful CLI's these projects provide, it's a win-win.
Thank you!
He's not wrong though, you just have a different threshold for when it's appropriate to think of performance than web developers do. Either way performance optimization should happen when its shown to provide real value. When it doesn't no one needs to consider it.
&gt; using text/plain isn't clean enough &gt; proceeds to write a bunch of hacky wrappers OK then
I think you misunderstand the meaning of premature. If it provides value now, it's not premature. Its only when you hope that it will provide value later that it's premature. Your case doesn't fit the definition.
You have followed your interpretation of Knuth's advice, which is not necessarily the same thing. It's an argument from authority in any case. Many performance optimizations are premature. Many "flexibility optimizations" are unnecessary. If I can choose between callback functions in an object or a simple switch statement, the latter is probably worth doing even if it *doesn't* run 30x faster. Callbacks in an object are very flexible and powerful. Returning values in a switch statement is dead simple. If we're taking advice from old legends, "Do the simplest thing that could possibly work". 
That's a great thing. Why do 100% of the work with 100% percent of the effort when you can get 80% of the value from 20% of the effort 
I can’t think of any TDD related JS books, but books have been in a weird state for awhile. All of the “best” ones are pretty out dated, since the language has changed so much. I’d probably just check out the you don’t know JS series: https://github.com/getify/You-Dont-Know-JS
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
&gt; Musicians are told to write what they know, Programmers should be told the same. Exactly. I've been learning programming for the last nine months or so, even a bit of C# recently, and the biggest take away so far is that there's about a thousand different ways to do the exact same thing. Some may be more succinct (Array.map() vs for loop), but as long as your boat floats...
r/assholedesign
"this site is considered malicious"
Perfect URL
Not 100% sure, but I would think that this is because when you make the first function call to .then, you pass self.canMakeRequest = true, which is immediately processed by the browser and the value passed to the function. In the second example you pass a function, so its contents wont be run until the function itself is called when the request is complete.
Haha thanks! I got the idea when i learned the domain extension existed.
Nice. Perfectly explained
I was responding to the previous comment's argument against optimisation ever, for example: &gt; I have never, not once in that entire history of coding, thought about performance first, second, or even third. Not even tenth. Comments such as &gt; Reducing your site's load time from 3628ms to 3623ms WILL NOT HELP YOUR BUSINESS SUCCEED are straw men.
Tbh, I used `react-emotion` for a while, and I really didn't hate it. If I _had_ to use it, I would get by, but as of right now, if I'm choosing, it's going to be SCSS Modules. Honestly, I think this is just an "agree to disagree" issue, because most of the points you mention are, in my opinion, not an improvement over SCSS Modules--just a _different_ way of doing the same thing. So yeah, like you said, S/CSS Modules inherently solves the problem of naming and scoping, so one of the _biggest_ issues with "big project CSS" is already checked off there. I have found that, aside from common sense, you don't really _need_ a naming convention with SCSS Modules, because there is no possibility of a naming collision anymore. e.g. I have used a `.title` class in quite a few different components without thinking twice about collisions. As far as conditional styling by props, the `classnames` lib handles that rather thoroughly and simply, but you can also just write your own 10-line helper function to do this. I also think it's cleaner this way than the ugly syntax of styling by props in css-in-js, but that's a subjective opinion, of course. Regarding your point about changing the styles at runtime, I may be missing your point. I can already do that in the dev tools, and quite well. Your arguments against using CSS class names is also lost on me. I have seen this point before, but I genuinely don't understand what the problem is with applying CSS by using classes. To me, it seems like good separation of logic vs. styling. I'm jsut not clear on why it's a benefit to not have to apply CSS classes. Now, what I actively _dislike_ about css-in-js: - I don't like the way I have to effectively rename all of my components to get styling on them. Instead of just `div className="title"` or whatever, it becomes `&lt;Title ...`, and I have to look up at the definition for that style to figure what type of element it is - I just don't like the syntax. I find it harder to mentally parse my styles when reading it than it is when using SCSS. Especially when you get into trying to replicate Sass's features like mixins and extending/nesting and importing/sharing styles, I just think it's easier &amp; cleaner to use SCSS. In the end, I don't have any major negative feelings towards it. I just don't see it as a major improvement over using SCSS Modules, and for my taste, it's a step back in a few direction.
Depends on the bootcamp. For the really good ones, I'd say the language fundamentals are spot on. I don't know what the really good ones are now, though; the two most reputable ones when I did it have gone out of business (Dev Bootcamp) and been acquired (Hack Reactor) and I'm off in a little bubble at a tiny nonprofit where I don't have much contact with juniors just starting out.
At a quick glance it just looks like some standard dom manipulation. 
&gt; It's just yet another article written by someone who doesn't understand everything they're trying to write about. Yep. Pretty much. Truth is that you should look at *your* project requirements. You should talk to *your* team mates. Look at *your* various skillset(s), talk about what you'd like to learn, and decide on what works best. Whatever you do. Don't just blindly jump on the bandwagon after reading a few articles telling you that something's superseded. It's how you end up in over your head, copping heat. All because you've gone down the rabbit hole.
You're missing the point entirely. Programmers, as humans, have a fixed number of concerns they can think about. #1 is always going to be fixing the bug/implementing the feature, so that leaves even less things a human programmer can actually be thinking about while they code. The point is, you *can* waste those precious brain cycles constantly thinking "will this approach be more performant, or will this other approach be?" OR you can use them instead to think "will this approach lead to code that myself and my co-workers will more easily understand in six months, or will this other approach?" You can't do both, or at least not while coding at the same speed. So option #1: you focus on performance. Great, now your code runs slightly faster. Most likely no one will ever know, because again choosing a `switch` over an `object` with a `key` will not save you more than a couple milliseconds. Meanwhile, when you have to add new features or fix new bugs six months from now, you'll be dealing with spaghetti code (which performs great!) In contrast, you can focus on maintainability. You lose NOTHING, because again no one notices the performance improvements you don't make. *Maybe* once in six months you discover a performance issue that actually is noticeable, and you fix it quickly, no big deal. And in six months, you're much better positioned to add new features and fix new bugs. Oh, and you can't just use the rules of logic to ignore things you don't like. In other words, you can't just say "argument from authority" and completely ignore Knuth's good advice; that fallacy is only a fallacy if I say "you have to accept it because the authority told you to", not if I say it's good advice and use the fact that a programming god endorses it as just one of many points supporting that view. And it in no way precludes you as an intelligent person considering and potentially agreeing with his ideas, and maybe, just maybe, being more receptive to them because they come from a "programming god".
You just argued for my point. You did not do "premature optimization", you did logical and sensible optimization that fit with your business needs. Knuth's point was NOT never optimize. If you think that is what he and I are saying, you've completely missed the point. The point is, don't waste time and mental energy on *premature* optimizations, like choosing a `switch` over an `object` with a `key` because the former performs better. Yes it performs better, but who cares? Whether it's 5ms or 50ms, as long as it performs fast enough it doesn't matter at all. But when your co-worker Bob has to figure out your code so he can fix a bug in it or add a feature to it, it absolutely will matter whether your code is maintainable. Not only will it take him longer if it's not, but he might accidentally introduce a bug as a result of not understanding things. That's like a trillion times worse scenario than some user having an operation take 50ms longer. NONE OF THAT is to say you shouldn't optimize though. It just means you should optimize when it matters, as you did ... not every 2 minutes of coding in order to save 2ms of operation time at the expense of clearly understandable code.
The previous comment did NOT argue against optimization, ever; you misunderstood by cherry-picking stuff out of context. For instance, you completely ignored: &gt; If a human can notice a difference, then you have a recognizable performance problem, and that's the time to fix it.
It’s intentionally sent that way and not masked. So no you can’t do it through console. How do you not know qu...@yahoo.com unless you are trying to get someone’s info.
Most likely you're not leveraging compositor layers. Yes the frames render at 60fps, however because JS is single threaded any action on the page (including something simple like scrolling, or loading other resources) will interrupt the animation. By contrast compositor layers are all GPU accelerated.
&gt;Your arguments against using CSS class names is also lost on me. I have seen this point before, but I genuinely don't understand what the problem is with applying CSS by using classes. To me, it seems like good separation of logic vs. styling. I'm jsut not clear on why it's a benefit to not have to apply CSS classes. This one does seem to get lost on a lot of people, but I wanna touch on it because it is a really nice benefit. In short: it's easier to rename and maintain a variable than a class name. With class names, search and replace will work *usually* if the class name is long unique enough, but you might need to get clever if not, with regex or otherwise. Even with modules, the refactoring might not be straight-forward, since `some-class` would map to `someClass` in JS, requiring *two* error-prone rounds of search-replacing, or more. It's also harder to find unused bits of styling without additional tooling. If you messed up *anywhere*, it fails silently. You might not even discover a bug until it hits your client. And so on. A good editor or IDE (vscode!) will let you rename any variable or component project-wide with one button. With JS variables, a linter or type checker would point out a typo or unused class right away. Moving everything into the land of static analysis gives us a ton of understated DX benefits. &gt;I don't like the way I have to effectively rename all of my components to get styling on them. Instead of just `&lt;div className="title"` or whatever, it becomes `&lt;Title ...`, and I have to look up at the definition for that style to figure what type of element it is You might already know this, but styled-components _and_ emotion allow you to define bits of styling separate from the elements, and compose them: const red = css`color: red` const border: css`border: 1px solid black` &lt;main css={[red, border]}&gt;red with a border!&lt;/main&gt; This is the way I usually roll. It might not look as pretty, but again, static analysis benefits make it more than worth it. &gt; Especially when you get into trying to replicate Sass's features like mixins and extending/nesting and importing/sharing styles, From my experience, JS modules, variables, and template string interpolation can replicate most of Sass rather elegantly. It's quite natural. And, usual disclaimer: all still subjective. Work however you wanna work, no need to listen to some random CIJ fanboy over the internet, lol
This. Wrap the contents of the “then” in that first example in a function and it’ll work how you expect.
Maybe with some slight changes it will become obvious. ``` // This can be imported from another file where it is unit tested const itsCodeEditor = () =&gt; 'It is a code editor'; const itsIDE = () =&gt; 'It is an IDE'; // This can also be imported from another file const editors = { atom: itsCodeEditor, sublime: itsCodeEditor, vscode: itsCodeEditor, webstorm: itsIDE, pycharm: itsIDE, default: () =&gt; 'unknown' }; const getEditorType = type =&gt; (editors[type] || editors.default)() ``` The Open-Closed comes from the fact that in order to add new editors, you don't need to change `getEditorType` function. So this function is now closed to modification : you don't need any change in that function, but stays open to extension. I also state that you can do all that, you are not forced to do that if it is not necessary. [For example](https://github.com/udebella/Github-dashboard/blob/master/src/store/store.js), actions in my store are not that decoupled, because for now, I don't need that. As you state, if you overkill decoupling in your code it is harder to understand. But if you have dozens of actions in your app, grouping action by feature makes it more understandable than having a file hundreds of line long.
As opposed to JSX you mean?
To be fair, his code is garbage because it looks like he just learned how anonymous functions work. [Maybe this is what he was trying to do?](https://jsperf.com/switch-vs-object-function/23) I didn’t actually read his article though.
E D G Y
The other benefit is the ability to scale through a RESTful backend. Pretty hard to be RESTful with server side rendering.
I made a 3D music visualiser which runs on the browser. I'm trying to build out a design pattern for fully client side applications. Check out the audio too. [Lotus Audio](https://lotusaudio.herokuapp.com)
You are more of an expert than the article author. Just take out that useless one associated with the default key and you have what I came up with to fix it.
Not only is parallax is a terrible idea from a design point of view, it’s also terrible for performance. Most programmers don’t know what debouncing means, so they continuously fire the scroll event of the window. You can use IntersectionObserver, but the polyfills rely on scroll events or constantly polling the DOM. Future web standards should simply deprecate any scroll events at all; browsing rendering engines are designed for simple, unaltered scrolling, and users expect webpages to simply scroll as desired. 
That looks fun. I don't really have any suggestions to make any changes. How are you extending it?
All of these suck
Looks like sender is hitting a few other addresses. I have put domain to auto quarantine, so I get alerts when other attempts are made. Very obscure targets compared to typical attacks. I am usually never in these escapades which is why I immediately became nervous. 
This is r/javascript. In OUR world it makes perfect sense
brilliant. maybe post it here.
I don't mean to be rude, but you seem to understand little about javascript performance and your test is biased both because the tests are very different and because your input for the test is always the same (in your first test it doesn't even come from a variable!). I prefer switch statements and I know they are faster but your test fails to give a good comparison between the two options. [Here's a better test I came up with](https://jsperf.com/switch-vs-object-01), still with the same results, but note how both are very similar except on the subject at test. I'm also testing the function a few times because that made sense for that kind of function as opposed to re-declaring it on each call, but that has very little difference on the results.
Let me get you caught up. This post is in response to [this post](https://www.reddit.com/r/javascript/comments/arkefh/an_alternative_approach_to_switch_statements_in/) wherein was linked [this article](https://enmascript.com/articles/2018/10/22/why-I-prefer-objects-over-switch-statements) about why the author thinks switch statements are somehow bad. Some banter happened in that thread, so I took the author's two final examples, and JSPerfed them. In Chrome, the author's "better way" was over 30 times slower than a switch statement. I didn't write the code. I abhor obfuscation. it's taken directly from that guy's blog post. 30 times slower! 
The definition for `then()` is `(resolveFn, rejectFn)`. Note both params are references / definitions to a function. In the first example: - 1st Param: You're calling a function, `update()`. This hopefully returns a function, as in ``` function update () { // this is what gets executed on promise resolution return () =&gt; { } } - 2nd Param: It's not even a function. It's going to execute immediately. Your second example: - I'm unsure if you can chain `catch` before the then. I always put the catch at the every end. - The `then()` works here because you're feeding it a function reference for the resolver
You are not going to solve any performance problems in your app by converting a lookup table to a switch statement. This is the very definition of a micro-optimization: missing the forest of I/O and DOM inefficiencies for smaller preference things.
I think your attitude might change as you mature in your programming career (mine did). There are limitless ways to get write code that is functionally the same. But writing code that is succinct, elegant, readable and maintainable is the true art of programming in my mind. I would be careful if I were you of having a "as long as it works" attitude, as it might not come off well in a team setting. Whenever I come across a Dev with that viewpoint, it makes me feel like they don't really care, and it's a bit off-putting
In chrome, the switch statement was 30 times faster.
You've accomplished nothing. I can do the same decoupling with a switch statement: ``` // This can be imported from another file where it is unit tested const itsCodeEditor = () =&gt; 'It is a code editor'; const itsIDE = () =&gt; 'It is an IDE'; // This can also be imported from another file const editors = type =&gt; { switch (type) { case 'atom': case 'sublime': case 'vscode': return itsCodeEditor; break; case 'webstorm': case 'pycharm': return itsIDE; break; default: return () =&gt; 'unknown'; } }; const getEditorType = type =&gt; editors(type)(); ``` In order to add new editors, you don't need to change `getEditorType` function. So this function is now closed to modification : you don't need any change in that function, but stays open to extension..... etc. And hopefully the simplicity of my `getEditorType` makes it very obvious how useless the function is in the first place. The only reason you even need it in your implementation is due to the added complexity of using an object hash when a `switch` statement would do the same in a simpler way. Not to mention that nothing close to your example was ever mentioned in the article. The article isn't about the open-closed principal. It's about using an object hash to replace a `switch` statement. That's it.
Hi /u/ehetzner, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yes, I looked at the link, I saw them both performing millions of operations a second. Something that performs that fast is not likely to be a performance bottle neck. You do not write code to be as fast as possible everywhere, or we would all just write assembly. You worry about performance when there's an observable problem, then you measure and fix it. Otherwise, you are writing code to be maintained, to last for years maybe, and that will often involve abstractions like a lookup table that are just inherently slower.
Oh duh, this makes sense. Thanks guys. 
I believe ES6 module specifier should be a string from dynamic import as like regular import. However, if you are using a Webpack, then you can prepend an empty or parent directory with a variable that imported from the different module. &amp;#x200B; Example: `/* modulePath */` `export const pathVariable = 'some/path';` &amp;#x200B; `/* app */` `import { pathVariable } from 'modulePath';` `const Component = Loadable({` `loader: () =&gt; import('../' + pathVariable)` `});` &amp;#x200B; &amp;#x200B;
Hey, I took a quick look. Since this deals with security, here is some feedback if you'd like: 1. Try reducing library dependencies. For example the dependency 'file-to-array-buffer' gets 60 downloads a week, and has 0 stars on GitHub. (Not that popularity means security.) You could vet it yourself since it's a micro library, but it's prefixed with a caret (see below). Side note: Some of your packages are development related, you can put them in devDependencies. 2. Prefixing package versions with a caret installs latest minor and patch versions. 3. Use a CSP header. 4. Use a HSTS header. I like the design! Very pretty.
Not sure what "not leveraging compositor layers" means exactly, but: 1. I can see in the profiler that the main thread is busy perhaps 2 ms per frame. 2. Resizing the window to a half solves the problem, so it must be GPU-related in some way.
JS doesn't have that specific deficiency that other languages had to require design pattern named factory-method. What's there hard to understand? In JS a function (also, method) can return other function, in Java, for example, it can't. In JS you can make any function a constructor just by prepending a new keyword using the this inside AND you can use regular objects with the bracket notarion to dynamically execute methods. TL;DR: you don't need a design pattern for what's already provided by the language.
The crap code from the link provided is meant for a language that doesn't support duck typing or for people stuck in some other language mindset.
This is really misleading. It's just a UI that looks like win95 that lets you play minesweeper. It doesn't do any actual OS functionality. If you want an actual win95 exp in your browser: https://win95.ajf.me/ 
The article is bad, not the idea behind it. I've already replied to OP they've written a post too early without "primal case" yes, but simple - not. While every other construct like if, for example, execute blocks and skip blocks, the "primal" case of a switch is counterintuitive to it as it works just like an assembly code - it falls through. On the rest of your comments, few rhetoric questions for you: How often do you write CPU intensive code? Are you sure you should use JS for it? How about premature optimization as the root of evil? Have you heard of that?
The article's case was that we should use the object method over a switch. My replies have all been that switches are fine, and already fast. What do you mean by counterintuitive? So, it's not premature optimization, it's simply avoiding intentional de-optimization. And in the examples he provides, it's not even more readable.
We are hiring near Ft. Worth, Tx [https://crmwebsolutions.bamboohr.com/jobs/](https://crmwebsolutions.bamboohr.com/jobs/) 
switches aren't fine, your argument isn't going to be more valid the more repeat it. switch will not become more fine if one blogger doesn't know how to provide good alternative. just look at Python, that language doesn't have a switch and it is fine. So, you now label something as "intentional de-optimization"? You said nothing, look: It's called robust code, you do intentional optimization of the maintainability of the code, and you do "intentional de-optimization" of the maintainability of the code when you use switch. You can just switch the labels and it still is the same :P
tbh in 2019 you should be promisifying your callback-based functions and using async/await instead.
Sure if you're targeting Evergreen browsers, but for those who deal with Legacy browsers and don't have Babel to transpile, this is the way to go. Completely on your side with how it should be done these days, but some of us have our hands tied 
I have this in my eslint configuration: 'no-restricted-syntax': [ ERR, 'WithStatement', 'FunctionDeclaration', 'SwitchStatement', ], Never had any trouble not using switch statement (or with or function statements in that reguard).
It's a rebuttal to the author's specific case. He replaces a switch with something more complex, slower and harder to read. Again, in his specific case. I'm not trying to say "always use switches", but I am saying that one shouldn't eliminate switches entirely. No one in these comments have properly explained why switches are bad.
https://www.reddit.com/r/javascript/comments/arkefh/an_alternative_approach_to_switch_statements_in/ego7e1s/ downvoted of course, only praises might sometimes get upvotes.
also https://www.reddit.com/r/javascript/comments/arkefh/an_alternative_approach_to_switch_statements_in/egrwhoc/?context=3
finally, you can't do rebuttal of some ones's argument by using invalid argument. and your "switch is fine" isn't valid, sorry.
Regardless of your code style preference, don't change your JavaScript code for the sole purpose of performance optimization (unless a performance issue actually exists). You'll do more harm than good in most cases. JavaScript runtimes optimize themselves as they're running. For more info, see [this talk](https://www.youtube.com/watch?v=uMuYaES4W3o) or [this (slightly older) talk](https://www.youtube.com/watch?v=g0ek4vV7nEA)
To be honest, I don't know why you people bring up irrelevant reasoning for what ghostfacedcoder said. He didn't say we never need performance, he said u need it only when u have a performance problem or u are doing **NON TRIVIAL** tasks which I assume covers things like programming a pace Maker, VR, Graphic engines, nuclear reactor etc. At the end of the day he is right. What the business needs is what the business needs. If the 10ms delay could costs a game development company to get bad reviews on steam for their new VR game and run out of business, THEN that performance optimization to shave off that 10ms is what is priority. If a 1ms delay could make the nuclear fission in a reactor go out of control and cause an accident, then that 1ms delay is what u should try to get rid of. With all that said and done, In web development business, performance is THE last thing we should see. There are tonnes of things to worry about. Consider a SaaS product, UX is key. Users judge ur software in 5 sec and move on to your competitor. So you gotta have great UX to make them take ur deal. Then there is scalability, security, making maintainable, readable code will take you places as people in ur team come in and go out of your company. You only need performance optimization if your site is crawling and it takes 3 sec for a click to respond. Other than that I'd say what he said is how business, atleast web business goes. 
I’ve always had a distaste for parallax sites. This article doesn’t change that, but it was informative and interesting nonetheless.
No, Chrome was optimizing away the `switch` test because the test has a static condition and no return value. Basically you are comparing object creation and function invocation against doing nothing. It's a bad test. When you see JSPerf results in billions of operations per second, you're almost always experiencing the JIT optimizing the code into a no-op. I've put together [/21](https://jsperf.com/switch-vs-object-function/21) which creates common constants for both methods, and maps across all possible values of each function. Switch is faster, but not devastatingly so. I'm sure there are additional optimizations that could be tested. In some scenarios you could eliminate the default cases, which will likely work in `object`'s favor. I commented this elsewhere, but the parent comment was deleted, and you may not have seen it: &gt;In 2014 I spent months on JSPerf, testing micro-optimizations to the code I was writing and encouraging my team to do the same. We gradually recognized that it is *really hard* to write a reasonable, valid test case. And even when you are sure you have a good test, the performance difference between 1.5 million and 2 million ops on a function running perhaps ten times, you've wasted more time testing something than will likely ever be recouped in all the execution cycles of your code. It's useful to know that switch is faster than object, but it's not something you should focus on first. I use the object lookup style instead of switch in some places, particularly if it's a one-to-one association. You're much better off pulling up the Performance tab in Dev Tools and looking for the longest yellow (JavaScript) bar, then digging into the flame graph. The performance bottlenecks are often not what you expect. On one project, we loaded a 7 MB(!!) SPA. The longest execution delay was a third-party library using unoptimized logic for browser fingerprinting, which spent 800ms doing expensive layout updates for font checks. We refactored it down to 60ms. Without looking at the actual performance in the browser, we would never have considered the library, and would have needed to remove &gt; 1MB of code to achieve a similar benefit.
You're mongo connect example has bad news written all over. Saving data from inside an async callback to an external variable is fine for playing around but will be nothing but problems for anything complex. My knowledge of OOP is fairly limited, but if you plan on working with Node/express. I'd get a feel for [continuation passing style](http://2ality.com/2012/06/continuation-passing-style.html) first, and then move onto promises and async/await. I'd imagine something like the observer or pub/sub patterns would work for what you're describing, but you need to understand node's async behavior.
You're right, that code is crap and it's not even an example of the Factory Method pattern. Sorry about that - I was running on the door and did not look closely enough at the code.
This doesn’t seem like a fair comparison. You create a function that returns a set of callbacks. It has to create three lambdas each time you call it whereas there’s no functions in the first. If you did it without callbacks I bet it would be faster. 
I know right now, I'm first getting my stuff together so I can start sending out resumes again, and then I'm going to take a course I found on YouTube to learn react. I can't guarantee that I'm going to suddenly be landing in same numbers of jobs or getting into the higher up areas, but I figure it can't hurt for me to learn it, and put up the things I build in react on GitHub so potential employers can see my capabilities. I probably won't be hired to be a senior developer on anything, but I still see plenty of job ads calling for it, so you never know what the need is and what will happen. In your case, it can't hurt. I know that anyone who doesn't want to continue learning new things shouldn't be in this line of work. 
The test is bad. [Switch is 10-40% faster](https://jsperf.com/switch-vs-object-function/21).
I think my biggest fear is the first bullet point. I feel like I'm going to get pulled into interviews and whiteboard tests, and then find out the company wants to offer me a subpar salary. I know I've already had a handful of companies in my past look at what I was making and simply wish I can find somebody with my skill-set who would come at a cheaper price. 
I think I understand what you're saying, but could you show me how in JavaScript you would implement the Java example from the Wikipedia article on the [Factory method pattern](https://en.wikipedia.org/wiki/Factory_method_pattern#Java)? I have an idea myself how I would do it, but I don't want to influence you. &amp;#x200B;
I've not used babel from within Gulp. Our applications define an entry point for both our Webpack and Rollup configs. If you're processing every file separately, I think each file would need to include a unique `require("@babel/polyfill");`? I could be way off, though.
I'm mostly self taught, but from what I've seen, even my colleagues who started their careers with 4 year computer science degrees (or masters etc) also didn't really get taught "how to be a good developer." Colleges/universities get you up to a bar where you have a lot of tools and skills, but the majority of the day-to-day things you need to learn on the job. From the hiring perspective, junior positions are understood to be an investment much more than a senior position. You can still get a certain level of productive work at a much lower cost, but it comes at the cost of some team drain (coaching/mentoring), slower delivery, and some technical debt. But most of the time the investment pay off as you grow the person
Don't get me wrong, I do enjoy refactoring and making code cleaner, but making it do what it's supposed to comes first. I also understand that there are people who have deeply seated (often, but not always legitimate) reasons for doing things a certain way, and I can work with that.
&gt; ... which is annoying if you want to migrate an existing project. Otherwise, just stick to pure ReasonML and you won't any need any interop Good luck convincing anyone to adopt the language for anything but hobbyist projects if that's the case. 
Thanks, Frank. Appreciate the help.
Ironically, the ads industry has been using the iframe solution for about 20 years now, although for a slightly different purpose. But the point is, it's trivial to get around these browser restrictions. So I think the question is, do they really help end user security?
Just out of curiosity, why don't you use Babel?
&gt; My advice would be to remember to keep talking your way through a problem and show them your thinking. Absolutely this. When we interview, we explicitly tell people to talk through any exercises... give us insight into your thoughts or planning or *anything*. If you can describe the concept/plan but get hung up on an implementation detail, you are much better off than keeping it all in your head.
Majority of the time I have Babel and write the latest ES I can, however having worked in Government and Advertising, clients sometimes force you to hand over code that isn't transpiled. The argument is usually because transpiling is adding "too much bloat". Ultimately I'd advise using Babel if you can, but sometimes you can't reason with a client.
Can you show us?
&gt; The whole point is to get rid of UI on the backend. Whose point exactly? :) It's certainly not a bad idea, but that doesn't mean it's the *only good way* to write an app. I'm always cautious of touting one methodology as better than all others in all cases.
&gt;Graphics programmer here, I absolutely disagree Shocked Pikachu
Is this your Key Derivation Function? \`const getKey = async (key) =&gt; { return await getSHA256("cryption-" + key + "-cryption")} \` &amp;#x200B; [If yes, you might want to implement something more secure.](https://crypto.stackexchange.com/questions/50135/is-sha-2-suitable-for-key-derivation) &amp;#x200B; Also, does your app reject passwords that are too short?
Hi /u/mahsin, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; Check out Barba.js - for me, this library fits in every website. No library fits every web site. My clients would hate me slowing down usage of their web application with transitions and animations. For may, productivity is more important than pretty.
That sounds very frustrating. I think without Babel, you'd still end up with bloat, just you'd have to write it yourself.
Ohh of course. Most things can get transpiled down. I honestly believe it's just that the developers on the other end don't know how to transpile and don't understand the latest ES. It's frustrating, but when they clear your cheques...
I was told by many members of my software team that this method of a reducer with an object rather then a switch is really unreadable 
!ThesaurizeThis
&gt; These commodities utterly have to use a single-page subject field to figure out right. I like much affect necessitates, particularly when they couldn't be further from the libber. You can easy support time period sports or well-to-do UI fundamental interactions on server-rendered piece of grounds as source. That's what mortals have been doing since aboriginal 2000's. Part of the present Respond and earlies are fashionable is because you accumulation all your front-end encode collectively. So your client-side coding system is all javascript and in one depute, as an alternative of part sprig part alphabetic characters united by php in some unuttered way, and then with css extra to the compounding. Buckeye State yea, and then there's commerce principle, 100% it's united to sight or mortal in one way or other. It's untidy if not through with powerful, and unluckily your mediocre outcome is not cooked position. SPA's on the other than handwriting match of a node and an API, you couldn't healthy the SRP goodness than that. A participant, which readies business enterprise practicality in a actual supple and undogmatical way, and a exploiter computer programme to that practicalities. Impoverishment to work out added drug user overlap, a changeable app perhaps, or figure with an outer author? Your backend is jolly more than create from raw material. That's the proper payment. *** ^(This is a bot. I try my best, but my best is 80% mediocrity 20% hilarity. Created by OrionSuperman. Check out my best work at /r/ThesaurizeThis)
The real solution is to not be time-dependent. There are so many factors to account for that you're better off saving game state + user action. The data transmitted will be larger, but will be 100% reproducible. One other thing, since you mentioned you're dealing with a snake game, is that randomness (e.g. where to spawn the fruit) isn't reproducible without a seeded rng; so if you haven't implemented this already, you'll want to implement something like [seedrandom](https://github.com/davidbau/seedrandom) for reproducible random values
I mean... you could have written all this in your description of this post.
Thx 
&gt; On one project, we loaded a 7 MB(!!) SPA. The longest execution delay was a third-party library using unoptimized logic for browser fingerprinting, which spent 800ms doing expensive layout updates for font checks. We refactored it down to 60ms. Without looking at the actual performance in the browser, we would never have considered the library, and would have needed to remove &gt; 1MB of code to achieve a similar benefit. Yep, this is why the adage is observe the performance problem first, then figure out where it's coming from and solve it. It's all too easy to make assumptions about performance, but without measuring and analyzing, you don't really know where the actual problems in your app are.
Sure thing. I wrote a post on Medium about it rather than try to put it in a response. https://medium.com/@jeremy_7548/making-the-case-for-redux-without-switch-statements-92635f1813b9
Except parallax effects (and I assume many features dependent on scroll event listeners, at least ones that I can think of) aren't critical, and thus don't really need polyfills/browser support. These features are excellent candidates for progressive enhancement; present when supported, and not present when not supported.
I would rather get rid of medium than switch statements.
For our working model we record the position data, since going off the deltas was inconsistent with our best attempt. It worked 70% of the time before we switched strategies. And the seed and other reproducibility works without issue. We are just having trouble with the playback of the user inputs. Going forward, we can keep to positional data, but it just screams inefficiency. We certainly would like to be able to use those deltas in other game models.
When calling `CryptoJS.AES.encrypt`, the default KDF is OpenSSLKdf. &gt; https://github.com/brix/crypto-js/blob/3.1.9/cipher-core.js#L827 &gt; https://github.com/brix/crypto-js/blob/3.1.9/cipher-core.js#L802 
I'm starting to get so fucking tired of people who think that architecture is how you organize your folders...
&gt; screams inefficiency Screams reliability imo. I wouldn't trust any other way. Without more info about the games, I can't really understand how you could have two games which are sufficiently different to be considered different games, but still would have identical user actions at identical times. Can you not convert the recorded state of game 1 to the format of game 2's state?
Much, much harder. Switzerland may not be in the EU, but we are essentially still part of the common market due to bilateral treaties, and also part of Schengen, meaning no borders, no Visas, etc. for EU citizens. I can't imagine it being as effortless for non-EU citizens.
Yes but bing has troubles with it and many clients use bing because it's the default in IE.
I still don't know what graphql is. I figured something like mongodb.
Each request to facebook.com will send your cookie along. None of these solutions allow you to hijack this cookie from your site or send authenticated requests to Facebook on the user's behalf. 
The function has no side effect and is referentially transparent, so it is pure. It definitely meets #2; it's just that you have no guarantee that something else will not break this assumption. I'd say that JavaScript is the wrong language if you want that kind of safety (but, as others said, \`Object.freeze\` would do it).
Because you instantiate a new object every time you call the function. It is super wasteful.
Yeah that's what I was thinking
Oh yeah certainly use the right tool for the job. I see what you mean now as well.
Sorry for being confusing. The user data is not the same between games. It's just recording inaccurately, causing the validation of the playback to fail. We are developing the techniques to use across genres for recording and validating different input generated by the player. I'll explain what we we're doing. We are capturing the user data that is a solution to a given win-condition (not just random noise), then validating that information to produce a hash, or proof (to ensure it is a solution). That goes to secure a ledger for online money. It is based off the intex proof-of-work model, which moves away from traditional mining methods to make use of all the intelligent (or semi-intelligent, in my case) work produced by gamers. The idea is to incorporate as many games into the system as possible. Some genres require different information to be recorded for different win-conditions. Turn based games are quite easy to work with. FPS games are slightly more technical, especially with recording position data in multiplayer. But javascript is giving us the most problem, which we think is kind of funny. 
No bro. GraphQL is a query language. GraphQL stands for Graphical query language ( I think I got it right, Google it). It replaces Rest API. In GraphQL you have on endpoint that does it all. You submit your queries ( GET REQUEST ) and mutations (POST/PUT) to the same endpoint. You can also use Subscriptions for real time communication. It's nothing like mongoDB. U can have a GraphQL server on a mongoDB. GraphQL solves the problem of underfetching and overfetching.
how is this different than jquery mobile which essentially does the same thing
Spa != PWA.
Our new Redux Starter Kit package includes a createReducer utility similar to this, but it also uses Immer internally to let you simplify your reducers by "mutating" the state: https://redux-starter-kit.js.org 
Oh look, somebody who's been sleeping during the last 5 years. I wish it weren't as common as it is.
PostCSS is worth checking out, as is exploring you can do just via NPM and package.json alone rather that a build tool like gulp. Me, I like SASS and gulp. (Yeah "use webpack instead of gulp" wouldn't make any more sense than "use olive oil instead of pepper")
Coming this Summer. Js in Scss in Js in jsx utilising MDX. 
Correct me if I'm wrong. jQuery mobile lets you built SPAs. It isn't very SEO friendly. This tool converts a normal website (which is seo friendly) and gives a feel of an spa
scss.asm
If all the switch is doing is converting one value to another, that works fine. But consider an example like: switch (op) { case '+': value = left + right; break; case '-': value = left - right; break; ... } Now you need the lookup table to return functions. 
Thank you for your feedback! This is my first security-related webapp, so this is quite new to me. I am going to implement all of those changes, but I have one question: Are the headers necessary? Currently, I do not have control over it ,it is hosted in GitHub Pages.
React was originally designed around ocaml, then they switched to js for easier and wider community adoption. ReasonMl is a try to put it back to ocaml for more streamlined dev experience. I think they use it internally so it wont go away soon
This seems very incomplete.... good start but like you said nothing game changing.
Haha, nice analogy. Yeah I'm well versed in PostCSS, and tooling in general. I too like it, but for me I like importing the tools I need and wiring them up with Gulp. Code &gt; Configuration in my eyes.
Thank you for your feedback! As far as I have understood it, the key-generation process is safe. Nonetheless, I could change it to KDF. But I am absolutely going to implement a password strength check!
Yes, only the bare basics have been implemented, since I got caught in other projects, but it's enough to get something going and (on the bright side), the code base is small enough not to be intimidating if someone wants to tinker with. 
Hi /u/foxdye96, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/simkessy, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/small_talk_dev, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LeggattJP, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sushrut141, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I've always felt that if someone is able to inject JS into your page and modify the prototypes, you've already lost.
The object is not any more maintainable than the switch statement. In fact, it's less direct, so probably *less* readable. The person who writes code has a handicap in that they already know what they are trying to do, and how. This means they cannot really tell if their code is readable. It is a concern, yes, but one best solved by sticking with - and occasionally evaluating - conventions and best-practices, having someone else review your code, and spending time to improve it later. You can't read a piece of code while writing it. My position is not that everything should be benchmarked (you should test and profile your application to determine what needs work), nor that unmaintainable code can be excused because it is performant (that only works if it *has to* be performant, see previous). But being wilfully ignorant, sacrificing performance *and getting nothing in return*, is going too far. You don't really need to spend any additional time or thought on individual tasks, just put the object-based solution below the switch-based solution in your toolbox. "Knuth said so" 
I’ve been looking for something like this for a while and happen to be your target audience, thanks so much man!
you are wrong i have numerous jqm based sites and they load links via ajax into a wrapper just like this tool seems to do this is literally jquery mobile but maybe without the framework 
Yeah. Probably
As programmers we can do better than respond to other people in this kind of toxic fashion. It's this sort of nasty, completely off the point response that prevents people from wanting to contribute their thoughts to their teams and the community at large. Who cares what site I posted it on? Does that have anything to do with whether it's a good idea or I make a valid point? I expect that you'll read my response with a pleased smile that you got to me or add some sort of additional sophomoric comeback because I've seen that sort of behavior all too often. Grow up.
Haha, boy oh boy didn't I wise up. There's something to be said for "make it work" programming if you're doing a proof of concept to get something approved. After that of course you should do a re-write and make everything as good as you possibly can. But I've noticed as I've gotten older I try and do it right the first time.
&gt; Who cares what site I posted it on? The discussion is over here, as noted in the article. As programmers we can do better than using crappy sites like medium. It is just you attention whoring and not actually discussing your point. In fact if you are such a rambo web programmer, why the hell WOULD you use medium?!? Indeed, you only come to reddit to yell at us. So, go screw your hat. You are projecting your toxicity, and your self imagined superiority is showing. The discussion was on reddit, the author you are refuting is on reddit, and even I made points on the discussion on reddit, and you just ignore all that and try to move the discussion elsewhere, then post it here like it is real important or something (on a site no self respecting programmer should be using anyway). Grow up? Really? Try just a mote of self reflection. Nobody should have to jump through hoops to chase a discussion.
I just read the entire chain and decided to respond here. CSS in JS has come about due to a lack of understanding with "New Devs" when it comes to CSS. I hate to say "new devs", but it seems like the majority speaking up about how great CSS in JS is are relatively new to it. New Devs praise it due to name spacing and not having conflicts with class names, heck some even forgo classes in general, but it's not solving a problem. It's in-lining a bunch of styles, or creating nonreadable class names to "fight" the cascade. Instead of learning the amazing benefits of a cascade, and learning how to "work around" it, people jumped on the latest fad. Writing clean and semantic HTML along with CSS has unfortunately become a downward trend thanks to Accelerator courses teaching people about frameworks and the fastest way to get things up and running (Looking at you Create React App). The truth of the matter is, if you want to be a great developer you need to understand the foundational components of the web. Because ultimately all of your tools and frameworks have to "compile" down to HTML, CSS and JavaScript. CSS in JS has one and only one actual use case, that is when your component needs to run on another website but their styles are fucking with you. This of course can also be bypassed by understanding CSS specificity. I'm not against frameworks, I use React and Vue daily, but when you have a team of programmers who know what they're doing, you'll quickly find that "features" like CSS in JS are not only unneeded but also increase your bundle size.
&gt; It's just yet another article written by someone who doesn't understand everything they're trying to write about. &gt; &gt; It seems it's getting harder and harder to sort out through all these crappy articles as a junior dev.
This is about the level of response I expected from you. Boy, you want to talk about projection... I never called myself a rambo programmer, claimed superiority to anyone, or anything of the sort. I simply asked that you not reply with a nasty comment denigrating the site that I wrote the article on because it completely distracts from any discussion that might take place. And now here we are with you telling me to go screw my hat and saying I'm somehow only coming to reddit to yell at people. Let me know if you're in the DC area sometime and I'll buy you a beer and we can chat about Redux. There's nothing more to be gained here.
Fad doesn't inherently imply a negative connotation, however CSS in JS doesn't provide an advantage. CSS in JS is a choice similar to that of how you eat a Cornetto. Eating from the top down can get messy if you don't know how to eat it cleanly, but ultimately it's the better way forward once you get the first part sorted. (CSS) Or from the bottom up. (CSS in JS)
It's perfectly legitimate to think that Promise is a shit interface. I was one of the people who opposed making it a part of standard JS, and the Promise people were so hell-bent on winning that they shoved it in sideways and now we have this mess instead of either their original proposal or nothing.
woosh.
I'd hate for this to come across as harsh, but READ THE FUCKING MANUAL (RTFM) is absolutely the best way to learn as a new developer. When I say RTFM I mean read the Specs for HTML and CSS, read MDN's JavaScript documentation. Avoid all of the tools and frameworks for a while. Sure you might not progress as fast, but having a solid understanding of how these frameworks and tools are built upon these standards will make you infinitely more valuable. If you want to get into Vue JS, Vue Mastery.com is without a doubt the best resource for a new developer. Read books like Eloquent JavaScript, checkout A Book Apart, follow people like Paul Irish, Addy Osmani, Chris Coyier, Sarah Drasner and Evan You. Avoid blog posts on Medium like the plague until you have the skills to gauge how accurate or valuable these posts are. Spend your time learning from people who are well and truly certified to teach and have been around for longer than React/Webpack have been around. Also feel free to hit me up if you'd like some guidance, I had an incredible developer show me how things should be done back in the day and it's only fair to pay that forward
I recommend to add installation guides and example Hello World in README. When people don't see anything useful in README they just skip the repo.
Mate you clearly didn't read these comments.
There is currently an Example "hello word" style file, as well as an outline of the object design and hierarchy, along with a basic toDO list; all inside the repo, but now that you mentioned it, I also added links to them in the ReadMe file. Thanks for that suggestion.
Huh. Not my native language so you'll have to forgive my poor vocabulary.
Yes, that's a thing, and I don't think there's anything wrong with it. People have specialist roles, and some companies don't need/want generalists. Frontend devs do not \*have\* to work with backends, that's not their role. 
1. No. My last project used neither jsx, nor any frameworks. It was a library that has nothing to do with the dom. 2. There are several frameworks ( such as [hyperhtml](https://viperhtml.js.org/) ) that provide jsx like syntax through tagged template literals, and are therefore supported with no transpilation required on modern browsers. If you need older browser support, then a transpilation step is appropriate. 3. Not a good idea, but jsx itself is supportable in-browser using the now discontinued JSXTransformer, without any transpilation by the developer or build tools.
I agree, and I do. However, I do not include any dependencies, including other transpired languages, that do not provide a huge benefit at minimal cost. Right now, with two dependencies, I gain a framework and full dom manipulation system (managing html with React), full support for dynamic stylesheet generation and sharing (managing css with ReactJSS), and... that’s about it. Immutability is handled with native JS systems like Object.assign or spread. Using the immutable style means my state management is just a series of simple functions. I use native map, forEach, etc for functional style instead of lodash now. Other than bundling those two libraries and transpiring jsx, my dev build environment just moves files and starts the local server. I am getting most of the benefits of Reason without a new language.
There are but they're hyper-local to developer hubs e.g. SV or NYC. Remote jobs aren't that plentiful outside of freelance crap you will want to avoid and much of elsewhere is a desert. There are a lot of "influencers" who have an ulterior motive in selling their blog/course/book on the back of "JS jobs get you $$$$$" and so want to boost this myth, but it is - outside of a few exceptions - a myth.
Thanks!
Agreed...
&gt; and doesn't mind reinventing the "wheel" just for the practice of how and why "wheels" work My kind of wheelsmith! Thank you for sharing. I'm sure I'll learn a lot from this.
Why your project would be better than PIXI?
That looks very cool!
Why do you hate styled components (out of curiosity)?
another lowquality medium article with lackluster details about project setup, and where 99% is probably copy pasted from other sources. using an outdated jquery version, and not even a slim version would be the first of many reasons not to take the author seriously. the view file is also referencing a socket.io js file, which is not documented nor is it explained where it comes from.
Without breaks every case until found is executed.... You dont know js to call them unnecessary.
Sure, it covers the basics, and that's probably what you were going for, but it doesn't go into modern practices like using classes/instances, and even has routing logic mixed in with socket handler logic. Also, node.js is well established, people know what it is and what it's good at, so introducing it as your opening point seems... unnecessary? You've also asked the ejs file to connect to the socket.io server running at localhost. Technically, because that localhost isn't available to other users, the connection will fail, so it's not really group chat in that regard. Last thing - when you're asking users to install packages after running `npm init`, you should ask them to `npm install --save &lt;package name&gt;`. Otherwise if they try to recreate the project later, they're going to have to find which packages are used manually and install them again (rather than just running `npm install` and getting everything).
Hi /u/mohsinulhaq001, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/mohsinulhaq001, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
And why not? Them argument that this non-switch approach is better is a false claim, as the jsperf shows. Just using things that are not switches because someone told you switches were old fashioned isn't valid either. 
This isn't my code. 
Not when you post a link. 
If you return at the first case you hit you only execute one... Eslint or tslint will let you know the break statement is unreachable code.
Yeah, good effort. The original article still failed to convince me to move from switch in all cases, and a lot of people in these talks are saying switch is now bad code. I don't use switch for performance reasons, just habits. Also, they are superior in some situations, particularly when fallthrough is needed. The other method is superior in other, typically more complex, situations. But, yes, your test is the truer test. Mine was just a cut&amp;paste as you can see. Thanks I likely got fixated in the drastic performance difference in V8 that I thought it was interesting enough to post, and then wandered away. 
The point isn't that an attacker can already inject JS. The point is that this technique is a lot more vulnerable to attacks if not written very carefully. Take this example from the article: getParsedInputValue('email')('myemail@gmail.com'); `'myemail@gmail.com'` is clearly user input. We're treading on dangerous territory here - without seeing the surrounding code, this particular example _seems_ fine at the moment. But what if we could get `getParsedInputValue('email')` to return a `Function` somehow? For example, what if `'email'` is taken dynamically from the `type` attribute of the `&lt;input&gt;`? We'd still be safe, I think, but we'd be _really_ close to an attack.
Can't upvote enough. I'm interviewing right now so I'm revising technical topics and reading articles with titles like "20 React interview questions you have to know!!!!" THEY ARE ALL WRONG, ALWAYS! I read the questions and come up with my own answers for practice. If I was a junior I'd be learning the answers and sounding like an idiot in interviews.
Good point, forgot about that. So given that, bypassing the cors like this person is doing is not a great idea. Instead it would be better to distribute your optics requests globally so they are faster. 
Thanks mate. Yeah I'm still not sure how these poorly written articles are out ranking articles written by people who know what they're doing... I guess all we can do is educate and hope the Blogvelopers up their game.
This project is nice, but it's already the third time i see it reposted here
Hi /u/ups-question, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If object values works why don't you just apply filter over it? Object.values(obj1).filter(n =&gt; typeof n === 'function')
Hi /u/holnet1026, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
So to clarify, you want to make a forEach fn that takes an object as an argument and returns an array of just the object's values? How do you want the values sorted? The key/value pairs in an object don't have a particular index so you'll have to create the order yourself, which you probably know. I'm guessing you want to do something with the keys afterwards? 
Your story of what?
Are you creating a new quadtree each time you render an animation frame? did I read that correctly? That doesn’t sound very efficient...also if you’re looking for fast animations use typed arrays
Hi /u/ggcaponetto, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I was going to post about this. The whole article is redundant because this library already exists. I won't use redux in my own side projects without this anymore. createReducer plus the pattern of having separate, independent functions for handling each action creates super clean reducer code.
Objects in javascript don't have a set order when you create them. In fact, they are automatically sorted alphabetically (which is probably why it "mixes up the data"). If you want to get access to the keys, you can use `Object.entries(...)`. This will produce an array of "tuple" arrays of the form `[key, value]`. 
Oups.
Hey thanks man that’s great! I’m very new to this stuff. I’ll try it and report the results. 
Thanks for sharing.
Hi /u/JustinWendell, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I think npm &gt;5 does `--save` by default now though
You can still write the headers in whatever page you're serving to the public. GitHub doesn't (afaik) touch any of the headers
hmm, didn't know about Pixi, thanks for pointing it out. This project was not created for the explicit purpose of being better than other things though, it's just something of its own made from ground up. 
What was the point of this comment really? Seems unnecessary, since OP already said this. 
1. Udemy stephen grider's courses are good, They are like 10$ each course. 2. Also this book is must for JS developer: [https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)
Hi /u/ECTXGK, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If you're sure, please report them. However, I just checked, and this is the first posting for this particular project. I do see they posted the sister project to it, but this looks to be different.
There are always a few speed talebans, but you are far from being the mainstream. For most intent and purposes modern frameworks work well enough and the benefits far outweigh the drawbacks
very cool. im doing something similiar in go :) github.com/thegtproject/gravity just reinventing the wheel to learn. ugly as all hell but im excited for my next commit coming soon. got terrain textured finally and skybox
Interesting idea. I may play around with that later. &amp;#x200B; Basically I have a medium-large sized SPA that I am trying to only load sub-pages as needed within. Each of those pages are a complex-ish react components, which ideally would be loaded into a parent container and displayed as needed. What I'm getting hung-up on is each of those sub-pages are separate webpack bundles - when calling the dynamic import on that bundle file it produces a Module in the response that has no properties (seemingly because the generated webpack bundle file is not exporting as a valid module). &amp;#x200B; That is where I am stuck - is the issue I have here even resolved by getting webpack to recognize that import correctly, or would I have an issue regardless because I'm trying to import a bundled file? &amp;#x200B; My temporary workaround is to allow the dynamic import, but allow the imported file to call a global function to insert it's page class into the root react component, which allows it to preserve the react dom structure. Obviously a correct import would absolve me of this blasphemy.
I think we all know he/she means the ability to read code and understand it, let's try to be more encouraging
Impressive. You've put quite a bit of work on that project.
You don't need Babel to use promises in older browsers, there are plenty implementations that run just fine on old browsers, starting with jQuery's.
Not that your point is completely invalid, but what is important to note, most of the performance cost in your "alternate approach" benchmark comes from initializing objects and functions which happens every time benchmark is run, in reality one would write such lookups in an enclosing scope, reducing performance hit significantly.
Hi /u/mahsin, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
ok
Yeah but you made the perf comparison 
Chrome works poorly on MacBooks since forever, although depending on which fanboy you ask you will get differnt answer on who's fault it is. If you want performance don't use the two together, especilly on an old device.
If it would only be the `text/plain` content-type header we'd live with this. Discarding DELETE, PATCH, PUT methods is not an option.
Thats sick !
I don’t know what a taleban is, but I do use frameworks. What I don’t use is an alternative to JS that compiles to JS. If I was going to do that, I would use WASM.
Your values are strings so i starts as '100' and when you do += 25 it becomes '10025'
Type coercion. num1 and num2 here are strings, not numbers. After the first iteration of the loop runs, i is now '10025' not 125. In the middle check of your for loop, javascript converts the string '10025' to a number which then fails the loop and the program exits. &amp;#x200B; Fun stuff in javascript.
This is because `num1` and `num2` are strings, not numbers. So when you set `i` to `num1`, you're in fact setting it to `"100"` (the string). Then, after `i += 25`, `i` is equals to `"10025"`.
oooh, thnx!
aah haha, thanks!
This is one of those problems were TypeScript shines. &amp;#x200B; You are assuming that num1 and num2 are number when in fact they are strings. Your first comparison will be: for (let i = '100'; '100' &lt; ('700' - '100'); '100' += 25 ) { console.log('100'); } You need to convert to establish the type of objects you are comparing. JavaScript like to do something implicit conversions for you but I never trust them. So when declaring a variable just keep track of the type you intend that variable to hold.
Thanks, didn't know this.
I mean if you’re worried about the overhead to instantiate a small object whenever the function is called you have bigger problems Closures and encapsulation are fundamental design patterns for a reason. I’d rather have my global scope remain uncluttered than save the &lt; 0.5ms it takes to instantiate the new object Premature optimization is the devil. You strike me as the type to use one or two letter function and variable names to save bytes 
You need to map and parseInt the values.
Yeah, it would, but then you’ve still got a globally-scoped object that just hangs around waiting to be called once in a while. I prefer encapsulation and closure to immutable global variables. Coming from a functional programming background, encapsulation is pretty much a requirement considering all variables are immutable. IMHO it’s bad design architecture for anything to be floating around in the global scope unless encapsulated in a function or class etc
&gt; You're going to fail a lot of interviews before you pass one. Not always, some people interview great but don't be discouraged when there are people who have gotten an offer from every place they ever interviewed.
Hey thanks man! I'm a hobbyist coder and don't get very many compliments, cause well it's pretty clear i've got some things to work on (project structure, patterns, architecture), but i absolutely love learning to do these things. I did make it more challenging than I should have though: I went into it with 0 experience of how 3d engines work (never used one in my life). Just wanted to see what I could reason with myself. So it's certainly odd looking. Thought after 6 months I finally allowed myself to start looking at other 3d engines and its clearing up alot of things slowly :) ECS was a really neat thing to learn about in the context of a game engine and im really excited to start implementing it
javascript?
Looks like a perfect use case for AutoIt. https://www.autoitscript.com/site/
Not ringing any bells?
It's a bot command. I guess he doesn't work in this subreddit. It's the first time I've tried him.
Yeah I figured. 
HI there, you can simply use map() to iterate through the list :) `const navItems = [` `{` `id: 1,` `itemName: "name1",` `active: false` `},` `{` `id: 2,` `itemName: "name2",` `active: false` `},` `{` `id: 3,` `itemName: "name3",` `active: false` `},` `{` `id: 4,` `itemName: "name4",` `active: false` `},` `]` `navItems.map(item =&gt; item['active'] = true)` &amp;#x200B;
 navItems.forEach( item =&gt; { item.active = true }) &amp;#x200B;
 for (const navItem of navItems) //basically forEach but faster and usable for any iterables { navItem.active = true; //when looping through an Array of Objects you are passing an //reference to original object so it will be written in the Array } &amp;#x200B;
It's more idiomatic for `.map` to return a new array; if you want to mutate array itself it's better to use `.forEach`: navItems.forEach(item =&gt; item.active = true) `.map` would ideally construct a new array with modified elements and leave original untouched: const newNavItems = navItems.map(item =&gt; ({ ...item, active: true }))
Aye, you are right. Edited the comment to include your line
Use TamperMonkey to create the automation script.
The top version will do nothing.
Yes, I just realised. I am such a donkey to be redditing at 2am in the morning xD 
This is a javascript subreddit and this post has nothing to do with javascript...
for of and for in are discuraged by many style guides. Namely the Airbnb style guide disallows it [http://airbnb.io/javascript/#iterators--nope](http://airbnb.io/javascript/#iterators--nope)
2am coding is the best :D
I feel like you’re just responding in some sort of preprogrammed way. 
beep boop bop
Is it preprogrammed in javascript though?
Look's like a mod agreed... Post is gone from javascript :)
/u/OddCoincidence is a top commenter with one comment ... legend
Funny thing is that the author of this article is an exceptionally talented JS dev with a GitHub account to prove it, so you might actually learn something by reading his article and then checking out the project he discusses in it. I did and it was well worth my time. &amp;#x200B; While I agree with the spirit of d\_oceansumfish's reply to your comment, I don't think OP needs any encouragement with all those stars :D! But yea, we should all try to be a little bit nicer to each other, here. 
I viewed the link but I still don't understand why
forEach should be as fast as a for-of-loop in the newest JS engines. A simple for-loop is the fastest version in older engines.
Airbnb wants javascript to be functional, so there should never happen mutation of objects or values. That is why you should go with map.
With `.map` and friends you get a weak, but still some guarantee that the value behind a variable won't change. Imagine reading this line of code: const items = [1, 2, 3]; and then several (dozen) lines below: console.log(items[0] + 1); What do you expect will be logged out? `2`, right? Well, if there's a `for` loop or `forEach` (or any sort of assignment, really) in there somewhere, it probably mutates the array, so you need to keep in mind how it changed throughout this code. If instead you force (via code review or with some sort of tooling) that only methods that don't mutate arrays and objects are used, you are free to ignore all those lines and can be sure that `2` will always be logged into console.
I see that they want to be functional but I don't understand why is it actually better for my code in this case, I don't want to follow everything Airbnb says without understanding why
Create a todo-list with Vanilla JavaScript. Repeat and recreate it with React, Vue, and Angular. It will be an interesting experience :) 
TL;DR free packages are not a right, but an opportunity. Don't be a jerk, if you get good use from it, contribute.
For your immediate concerns: maybe just start with the questions you feel like you messed up on. From there, figure out similar problems/questions and try to understand and solve those. For the big picture: One thing to note is that a lot of companies' hiring process is very different from their day-to-day. I'll leave the discussion about whether this is a good or bad thing aside, and just try to assure you that you are probably way more capable than you think. The fact that you haven't been fired after all this time is a very good indicator that you're not bad :) My personal opinion: don't go back to school; not worth. You can very easily learn to play the interview game on your own, it's just a different area of learning. I think you have a good idea of what you "need" to work on, and I think you should trust yourself a little more. Good luck!
The linked test example shows a simple iframe example which was scaled down by 50%. Whether you scale the iFrame element directly or scale its wrapper div (currently commented), it does not matter. Of course, the "W3Schools.com" link HTMLAnchorElement below can be moved upwards artificially with the use of *transform: translate* or other clutches/tricks like that, but there should be a better way to deal with that. Thanks in advance.
I will 
That's not how `transform: scale;` works. The `translate/transform/rotate` properties leave the bounding box of the element in-place. You'd have to wrap the transformed element in a container, and set the container's size to the desired size.
Alright, will try! Thanks! 
Will look this up, thanks! 
wouldn't forEach mutate the array? This does work and it's my fault for not clarifying, but I'm trying to use this function to alter state in a react application. So I don't want to change the original state, but rather update it. Would map work just as well as for each?
I'm afraid I think this test isn't an actual representation of the result. The performance difference is nowhere near as massive as its made out to be in your test case. [Here](https://gist.github.com/Arve/f06e6b4ddace653493f1fce655d27863) is a test case comparing four different ways: 1. An inline switch statement inside a loop 2. A switch statement offloaded to a function 3. The object lookup function from the OP 4. An inline object lookup. 5. An object lookup function that eliminates the extraneous function calls. Results from my machine (loops/second: Switch (inline): 1908398 Switch (function): 1853655 Object (function): 1088773 Object (inline): 1859333 Object (funcopt*): 1786045 To try to ensure that the JS runtime (node) doesn't optimize away or automatically inline the function calls, and to try to ensure fair execution, a few extras have been done: 1. Garbage collection is forced between each test, this means you should run with `node --expose-gc` 2. To try to ensure fair cache state between each test run, it's running a loop that allocates a bunch of memory, there are a few calls to (and storing of) calls to Math.random() that are stored and displayed at the end. This would make each test case more representative of what would be experienced in real-world usage, and once you do that, the differences are, as you can see, completely miniscule. (The test case can be expanded to also try to fill the stack before each run through recursion, but if you do, the amount of time it takes to prove a point in a Reddit comment becomes too massive). TL;DR? Just write the code that signals your intent, and don't worry about performance.
This is welcomed news as it narrows down the decisions for new comers. Also most people who adopted TS did not want to convert their ESLint rules to TSLint
Yes it would mutate.
If you work with React, Vue.js or Angular you have to be functional. In general it is a good idea to not mutate stuff and use constants. Side effects make the code less understandable for someone who didn't write it.
Thank you so much for your detailed response! You're absolutely right about promises being out of scope for me at the moment, but that's how far I got in the course before it really went off the rails. I think some of my confusion is just semantic, like when you talk about a promise being a function that takes a function as an argument. Keeping those terms from getting conflated in my head is part of the challenge.
do you have some benchmarks to prove it?
as a Vue developer that's actually a valid point, now I have for-loops and functions mixed and it is kinda messy, thanks for the advice
It's nice that a few companies are giving back to this tool that has collectively saved them $millions in regression testing.
Yeah I figured something was missing haha. Anyway, yes map would work. You could also use navItems.slice() and then iterate through the resulting array with forEach but idk which is better so don't @ me on that. &amp;#x200B;
&gt;Using purely global CSS/SASS/LESS always ends up a pain to maintain. Proper naming convention like BEM helps [...] You do realize that the entire point of CSS Modules is to create scoped CSS so that you *don't* have to use BEM or really think about what you name your classes? You can literally just name your local button "`.button`" and be done with it. &gt;[...] but just not using class names to begin with has benefited me and my team. Not to mention any CSS files. Stuffing all your code into one document *helps* you? You must really like scrolling. Different strokes for different blokes, I suppose, but I don't see why you wouldn't just create a local "stylesheet" document even if you do write CIJ. I don't really understand why you feel like a locally named component somehow is different than a class name, though. Literally the only difference I see is that you've now created an uncertainty of exactly which component is in use, a problem that doesn't occur with CSS Modules. &gt;Besides the class names, CSS-in-JS also brings with it changing the style at runtime rather elegantly and not to mention just using JS in the styling for some logic. You can use the props of the component to determine it's styling. How is that any different from conditionally applying class names when the exact same props are provided? It's really weird to me how you pass that as a perk of CIJ. I sincerely hope you can create cacheable stylesheets from your CIJ, or else you're just creating a technically worse application for no good reason.
Nicely said. 
I'm glad I helped! I know understanding that functions are just variables that can get passed around took awhile for me to get my head around when I started javascript as well. At some point when you are getting more the hang of things you will come across a problem which will make you think 'you know, this is probably a good use case for promises' and thats when its a good point to learn promises. I know I avoided it until I needed them, then I spent the two hours or so to practice them and I hit that "Ah ha!" moment. Until then, don't sweat it to much! Just have fun!
I kinda know what you mean. Especially about composition. I think this project has hit that limit of how much compositing I'd be comfortable with before it becomes a rabbit hole. Architecture is a big thing too. Both concepts can become stifling though, if you let them. Sometimes I miss the old days of carefree procedural programming. OOP feels natural at first and then it can get hairy in its own way.
Great news.
Hi /u/isetnt, this post was removed. Low-effort content such as listicles, memes, clickbait, etc. is prohibited. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/RRDDSS, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wentjun, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/01123581321AhFuckIt, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Rajjy, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DutchSparks, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/imatt711, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; One of the barriers for JavaScript developers to move to TypeScript is the non-trivial migration from ESLint to TSLint. yep. that's a big reason why I'm not using Typescript. we have specific eslint settings and I'd hate to abandon or recreate them with tslint. great move!
Thanks; the issue was that real document is complicated with countless overlaying styles, kind of hidden elements etc, so it took a while to actually make it work. I had to use "all: unset" style on some places. The way this scale thing works is very unfortunate for anything other than the simplest examples. 
Can you post the console error and your code?
Awesome news!
Hi /u/Planeteers, welcome to reddit! Sadly, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand! You'll be able to post in a few days. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, /r/javascript is not a support channel. For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 module.exports = async function (context, req) { let accessToken = auth(); context.log('Request = ' + JSON.stringify(req)); const url = 'https://myurl.com/'; const fetchData = { method: 'POST', headers: { 'cache-control': 'no-cache', 'content-type': 'application/json', Authorization: `Bearer ${accessToken}` }, body: JSON.stringify( { loanGuids: [ req.body.meta.resourceId ] }) } context.log('Pre-fetch') //------Retrieve Data-------// return await fetch(url, fetchData) .then(response =&gt; response.json()) .then(returnedData =&gt; addToSharepoint(returnedData, context)) //Pass retrieved data into SharePoint function .catch(error =&gt; context.log(error)) }
The response is the console within Azure said 'Cannot read property 'resourceId' of undefined'
What is the error in the console?
Hey Kenman. Sorry! Didnt know, kinda new to actually using reddit! 
Typescript community is make all the right choices, this really makes me happy.
req.body.meta doesn't exist. You probably need the bodyparser middleware, otherwise body will be empty. 
 This means in `req.body.meta.resourceId `, the `meta` is `undefined`.
my eyes
Oh yeh, I left that in there when I was trying some different things. Cannot read property 'resourceId' of undefined This error shows up but then the data is passed into a list. If I use a random static access token rather than having a function that creates one, I don't get this error. 
I never heard someone asked those tricky questions for interview? I tried few, got right few, got some wrong. Who knew \[\] + 1 =&gt; '1' :D. 
All good!
Then it is what u/theogravity said.
The entire programming realm rejoices for you, JavaScript! The recycle bin or trashcan for every developer gets a new addition to its contents whenever the JavaScript tooling clusterfook simplifies itself instead of expands itself.
haha also what /u/BehindTheMath said, a ~minute before I posted looks like we posted at close tot he same time
This sounds like homework. 
Was there a specific complaint? Too small? To bright? To wordy?
Nah, it was a good article, I just found the dark background with the white font hard on the eyes.
I'd also recommend Document This, Paste JSON as Code, LiveServer, Javascript ES6 Snippets, Debugger for Chrome and ESLint. There's so much more to be honest.
Do you mean something like this? [https://codepen.io/brunomassa/pen/zLqebe](https://codepen.io/brunomassa/pen/zLqebe) :-)
Well guys found the Rust dev.
These are the kinds of questions you shouldn't worry too much about. Should you know specifically that [] + 1 = '1'? Not really. But you should know that when doing something like this JavaScript will try to coerce mismatching data types causing something often unexpected to happen. If something like this comes up in an interview and you say something to that effect rather than "It's the string '1'!", then you should be fine. You can be a good developer without knowing _all_ the weirdnesses, but there are some that you definitely should be aware of (coercion being one).
Why am I downvoted? I was implying this was a good thing. Sheesh Reddit is confusing.
We all here in r/javascript likes to re-invent the wheel, that's for sure! :D
Yes thanks. &amp;#x200B;
Good article. Lots of stuff people will know already but still, a nice refresher. 
Gotcha. I did tweak the font size up a bit to make it a little easier, but I'll take a look at the font color to see if softening helps a bit.
&gt;you inevitably spend most of your time as a manager listening to why you should switch to framework x. Fuuuuu... So true. 
Perfect! Good luck mate! :)
Likely because it translated as: &gt; Congrats! Your trash fire of a language is now only slightly better. Use a real language next time!
True that. I think the one aspect of this is in the paradox that most humans find it hard to follow other people's code. So we end up re-creating things in order to understand them and in doing so we contribute to the clutter problem.
I was talking about the tooling clusterfook not the language itself. I'm primarily a PHP programmer followed by JavaScript &amp; Node.js. As a PHP developer (and JS developer) I've seen my share of mockery. My original post obviously didn't clearly communicate my point. Sorry guys! Cheers!
Unrelated: Don't list yourself as both a JavaScript and Node.js programmer. Node.js is just a JavaScript engine. It's like someone saying they're a Java &amp; JVM dev - one's just a runtime environment and has little bearing on the development you're doing.
Meant to imply frontend and backend JS. I'm obviously batting zero today. 😞
For sure. This is just what I use for my workflow. :)
&gt; In fact, they are automatically sorted alphabetically Even though it's a prohibited help question, I feel the need to correct you. For ES6+ it's: &gt; * First, the keys that are integer indices (what these are is explained later), in ascending numeric order. &gt; * Then, all other string keys, in the order in which they were added to the object. &gt; * Lastly, all symbol keys, in the order in which they were added to the object. [Courtesy](http://2ality.com/2015/10/property-traversal-order-es6.html#traversing-the-own-keys-of-an-object) of /u/rauschma. Prior to ES6, the order was _undefined behavior_: &gt; An object is a member of the type Object. It is **an unordered collection of properties** each of which contains a primitive value, object, or function. [Courtesy](https://stackoverflow.com/a/5525820/84473) of StackOverflow.
No worries! I think it's one of those times where the words on the page didn't really reflect what you meant.
It's not the global scope, it's the module scope.
Global variables are a mistake you should wrap them in a function. About the error you get might be that the input is unset or so. 
&gt;You strike me as the type to use one or two letter function and variable names to save bytes Absolutely not. My problem is not that I'd like to juice out as much performance as possible. It's that instantiating the object everytime has no benefit; hence there's no reason to bare the cost. \&gt; Closures and encapsulation are fundamental design patterns for a reason. I’d rather have my global scope remain uncluttered than save the &lt; 0.5ms it takes to instantiate the new object 1) 0.5ms is a lot (although it's not my point) 2) There's no closure is this case 3) You don't have to encapsulate at the function level. I don't know about you but I don't have much in my global scope. Yes, the function would access an object that is defined outside of it but that object is scoped to the module, so the only other functions that my mutate it will be in the same file anyway. It is theoretically safer to put the object in the function, but in practice it's a solution looking for a problem. \&gt; not to mention if you’re really so worried about overhead shouldn’t you be more concerned with a bunch of sporadically used objects floating around your global scope and never being garbage collected than an object that gets GC’d after the function has finished executing and frees up memory? Sporadically used? I don't know why you would make that assumption. It's \*one\* object, used for \*one\* function. And I don't see why I would garbage collect it if it can still be used by the function. When you define an object in JavaScript you also instantiate an object; I don't hear you about having those functions "floating around your global scope". You strike me as a purist that can't see the forest for the trees.
- https://benediktmeurer.de/ - https://mrale.ph/blog/ - https://v8.dev/ 
Yep. I can't fault people for downvoting me because it's obviously my failure to communicate, \*\*not\*\* their failure to comprehend . The biggest gripe I've ever had with JavaScript is the crazy amount of tooling and re-tooling (the issues with the language itself are things that have considerably improved over time, and will continue to improve, just like with PHP). Seeing something like this is a breath of fresh air because it's simplifying the toolset rather than making it more complicated, which will ultimately benefit JavaScript in the long run (just like how jQuery impacted it for the better).
I don't know why I didn't even think of V8's website. Thanks!
Added a few words about coding conventions as well as a full methods index for each class object --&gt; [Outline](https://github.com/ThomasAn73/Javascript-Graphics-Framework/blob/master/CONCEPTUAL%20OUTLINE%20of%20this%20Framework.pdf)
`for` is usually faster than forEach since you're not invoking a function on each iteration - though depends on if you need that scope. - avoid allocating memory where possible. - avoid strings where possible. - avoid mutating objects' properties after creation, keep property name/order consistent. - make sure function arguments always a consistent type. - use bit operations where possible. - avoid huge functions. - make sure functions return one type of object - do loop unrolling (in some cases). https://mrale.ph/ https://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html &gt; ways to write jQuery in faster vanilla code that's a big bucket list. if you *need* the jQuery API, i recommend swapping out for the tiny https://umbrellajs.com/. besides that, just general dom perf advice. - keep the DOM small - keep JS small (tree shake, compress, dead-code-elim) - keep CSS small (use purgeCSS to remove unneeded bloat) - dont touch the dom often - debounce/throttle expensive listeners (mousemove, touchmove, resize, scroll). - https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38 - use event delegation - use requestAnimationFrame - use webworkers, where necessary - https://developers.google.com/web/updates/2015/08/using-requestidlecallback - use {passive: true} listeners - use CSS transitions/animations/transforms instead of js calls @60fps
You are my new best friend! Thanks for all of these good nuggets.
You have the same issues on NTFS and FAT. Reasons I switched to Linux. But why does macOS have case insensitive file names? 
Thank god for this news. I just made a pull request today to migrate to ESLint and needed more ammo.
Honestly, don't bother with implying both. JS is JS. Yeah, frontend deals with DOM manipulation (sometimes) or stateful updates. Yeah, backend deals with db access and networking. But the JavaScript stuff is still the same (people very rarely say they're tKinter+Python devs or Java+Swing devs).
I dunno about live coding challenges, but have never taken a coding test that felt like an accurate gauge of the skills you need to be a webdev. There is a big difference between what you need to know to be an effective webdev and what you might learn getting a CS degree. I could make an argument, based on how engineering is the pursuit of complexity distilled to simplicity, that pure CS and webdev are somewhat antithetical.
&gt; Can it compete with C++ in term of native performance and build advanced 3d engine for games ? [Yes.](http://arewegameyet.com/) &gt; compete with more modern language like C#, Javascript , Java etc to build business program ? Depends. Rust is a *systems language*, like C. It's primarily aimed at working at that level. However, you can build some good business applications on top of it, like [event loops](https://tokio.rs/) and [web frameworks](https://hyper.rs/). [deno](https://deno.land/) uses rust under the hood for its API implementations. &gt; Do you think C++ is a mess now or bloated ? No. There's just a thousand different ways to do things, and competing philosophies. The language itself isn't a mess though. &gt; is it time to deprecate things and create a incompatible split with old code and old standard a bit like Python did ? TBH, I don't really care. If the C++ community at large can agree on things, then sure. C++ is so ubiquitous that it'd be a hard sell to decrease its feature set. People who want a more restrictive language will choose Rust or Go or Python, etc. &gt; How big is the performance gap between managed language and C++ today ? Depends on the language, and the version of each language in question. You can google "C++ vs &lt;LANGUAGE&gt;" and get a bunch of results. &gt; is it possible to build advanced 3d graphics or a engine like Unreal, Crysis in a managed language like C#, Java or even Javascript with things like WegGl or others frameworks ? Unity3D uses C# as it's API interface - so yes. Minecraft was first implemented in Java. [Here's a list of 3D games made with pure JS](https://itch.io/games/made-with-threejs). But back to Rust...it's a systems language with a very opinionated interface and compiler that prevents you from performing bad actions typical in other languages like C. These features may or may not be attractive depending on the developer or application in question. All Rust is really lacking compared to other languages like C++ is ubiquity in the marketplace and maturity regarding application uses and tooling. That can all come in time. It's a new toy. There's nothing stopping you from making Crysis in Rust, other than the fact that Unreal and its engine make that incredibly easier in C++ due to existing tooling, community, and support. 
According to most of the answers I can find it's for usability reasons. I guess case-sensitive filenames confuse some people.
Alright! Sorry about the trouble. I will use that option next time round!
Sorry for double posting, as I had to remove my previous post since I didn't submit it as a link. &amp;#x200B; Also, I am working on writing a follow up article to cover more content on D3.js. Looking forward to hearing some feedback regarding my writing!
It is amazing. Especially with its web assembly support.
Thank you, glad you like it!
Thanks for sharing! I also enjoy coding challenges like this. Another strategy, which avoids sorting, is to use reduce to count the number of elements in the array less than the element to be added — which is its index in the sorted array. This reduces the algorithm complexity from O(n log n) to O(n).
FWIW I thought your first post was funny. Maybe because english is not my first language? Anyway, have a good one, mate
Hi /u/nolpeters1, this post was removed. Low-effort content such as listicles, memes, clickbait, etc. is prohibited. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Foelsgaard, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Cloud_Strifeeee, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tmpphx, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mubeenkhan246, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FlorinPop17, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/newusernameisbetter, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Could you please format your code? It is really hard to read.
Sorry just did. &amp;#x200B;
Is this a stereotype...?
Your reformatted code likely doesn't match your error output anymore. Have you tried running this version?
Hi /u/Beercules19, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bodymindsoul, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sorry I updated my error message to match the code. I'm still getting an error message. 
Not even trolling you dude but do you honestly think PHP will "continue to improve". I feel like PHP is dying fast while JS is growing. Eventually WebAssembly will likely dethrone JS somewhat but I see that being way down the road still, although things like Blazor make it feel not so distant.
else statements have no condition. If you want a condition, it will need to be an if-else. No-condition elses are when everything else fails and it is the last remaining option, so no condition is needed. Once you add a condition, making it an if-else, then you have the possibility of all conditions failing to find a match and you being left with your default weapon of "" and solved of false - which is probably ok since you're checking for solved after the fact meaning that you assume that sometimes solved won't be true which means no ifs or elses matched.
Very well pointed! Thanks for the adition! 👍🏻
[For the uninitiated](https://www.rust-lang.org/learn) (like me).
Extremely welcome news! I’ve missed ESLint’s broader rule support since switching to TS. Combining these tools makes sense. 
I would encourage everyone to think critically about what it means when palantir, a company that builds software that fuels the ICE deportation engine and sells software for racist "predictive policing" is involved in our open source communities. The article mentions that the typescript team met with palantir in advance of this announcement, which means they appear to not have a problem working with palantir. There are serious ethical problems with letting a company like palantir worm its way into our software stacks.
PHP is not going anywhere. It's basically the ubiquitous language of the web. It's not trendy nor sexy in any way, but it doesn't look like it's really losing steam. There are still *a lot* of PHP jobs out there. As for WASM, it's all speculation at this point but I really don't think it's gonna replace JS but complement it, mostly in performance bound parts of libraries. Hell, there are still a lot of places (more than hip bloggers would like you to believe) that still use ES5, jQuery and don't bundle their JS code. Do you *really* think these places will suddenly decide to switch to a lower level language and change their whole workflow just to bind some AJAX call on a drop-down change?
I didn’t realize we had carried this thought experiment to the point of modules Even in a module I prefer to have encapsulation but that’s a personal design choice. With a language like Elm, for instance, it’s quite normal to have several hundred lines of code in a file before even thinking of creating a separate module. In a more object-oriented approach so long as the object is immutable it’s a totally valid design pattern, I just choose to do things differently to suit my coding style 
Eslint *already* supports TypeScript, right? The stuff they're adding is simply new rules that take advantage of the language service.
I see what you mean about having a condition after an else statement. I'm still not really understanding how it worked the first time with the dining room and Mr. Parkes, but when I changed those two variables it returned gallery and ms. van cleve, yet with poison. Why did it even go past that statement when it was verified as true? Does it still continue through the statements? If so, why didn't it the first time?
I think you can rephrase the question and ask, "How many numbers in this array are less than or equal to the number?" That way, you can skip sorting altogether and do: function getIndexToIns(arr, num) { return arr.reduce((acc, curr) =&gt; { return curr &lt;= num ? acc + 1 : acc; }, 0) } console.log(getIndexToIns([1, 2, 3, 4], 1.5)); // 1 console.log(getIndexToIns([20, 3, 5], 19)); // 2 
The text was provided on the FreeCodeCamp curriculum so I wanted to stick to it, but you have a very good point!
O(n) solution: function getIndexToIns(arr, num) { pos = 0 arr.forEach(a =&gt; { if (a &lt; num) ++pos; }); return pos; };
O(n) solution: function getIndexToIns(arr, num) { let pos = 0 arr.forEach(a =&gt; { if (a &lt; num) ++pos; }); return pos; };
Nice improvement! Now you made me think how to do a “one-liner” with reduce using this approach! 😁
For sure, just wanted to point out that sometimes it's worth rephrasing the question. I've gotten a lot of tickets that suggest a solution, but there's a less obvious but perhaps more performant alternative. That said, your solution is definitely 👍. In this case, the extra iteration is totally negligible.
Do you think the same of Facebook's spying leading you to keep React out of your software stack? Or Microsoft's past behavior against open source keeping you away from Typescript?
Facebook's whole business model is worrying, but palantir is a several orders of magnitude more alarming. palantir writes the software that directly contributes to mass incarceration, racial profiling, and extrajudicial killings.
isn't this r/javascript?
Hi /u/Hunt_fish_climb, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
PHP has an 80% market share my friend, and I see no statistics anywhere that even show the slightest indication of that changing anytime soon. It's easy to install, easy to configure, easy to learn, easy to deploy, and easy to distribute. Cheers!
I can't see the code because the post got removed, but with what I remember you had, I believe that poison should always have been the weapon. This is because your last else block wasn't a block but just a line, amounting to what I showed in my previous post. It wouldn't have mattered what happened with the if statements because those sets were replaced with the last non-if-else block that always set weapon = "poison". It was like that because of the bad formation of the syntax of the else and how you really wanted it to be an if-else. Generally, when everything is right, you can have any combination of if, if-else, and else and have 0 to 1 of those blocks execute code. The reset would do nothing. If there's an else, it will always be 1 block of code that runs. If there's no else, it could be 1, or it could be 0 if there are no matches in the other conditions (other if or if-else blocks).
Finally! Looks like I may switch.
or without reduce (a,n)=&gt;a.filter(e=&gt;e&lt;n).length;
After reading through your solutions, I created a third solution which involves only looping through the array once. Thanks for the idea u/moocat ! I updated the blog post with this third solution! ☺️
Best 1v1 quickscoping map in COD history 
You’re missing Shades of Purple theme.
1) Great language, and probably only systems level language which is really useful to learn if you do javascript and web development. You may also be interested that Deno, successor to Node written for TypeScript by Node's creator is uses Rust as it's behind the scenes API, not C++ like node. 2) From language performance point of view - yes. Rust is slightly faster than C++ in execution in operation per seconds in most benchmarks. Although the ecosystem is not mature yet and some API's haven't stabilized. There are engines like Amethyst though and some big game companies are already investing in Rust. Many indies too. 3) Somewhat. It's very old language which has to maintain BC promise and it collected a lot of garbage in itself. Although, I do think that JavaScript with all recent proposals and it's old API's is slowly becoming a frankenstein so it depends who you ask. 4) Not really. It should be technically possible, but given that you gonna compete with more performative engines this makes totally unviable from business perspective for triple A titles. Also languages like javascript generally do not lend themselves for Data Oriented programming as much. However, you seem to be missing the main point of Rust. And that's safety. Recently miscrosoft reported that 70% of all security bugs are due to memory mismanagement. So much of "good C++ developers" argument like good drivers who do not need seatbelts. And the number remained no matter how much C++ improved through the years. That's exactly the bugs Rust catches at compile time. That's usually the selling point. It's actually a bit more difficult to build something functional in Rust than it is in C++. Difference is that when it compiles it runs without segfaults, data races, memory issues etc.
This is interesting, but isn't a bug. The `fs` module (which presumably `require` uses internally) will call `open(2)` on MacOS, which will happily hand back a file descriptor for either `foo.js` or `Foo.js` on a case-insensitive filesystem. In order to determine that they are the same file, Node would either have to (a). query the filesystem to determine case sensitivity or (b). check the inode of each file it reads every time. This isn't possible for obvious performance reasons. But the real reason this isn't a bug is because `require('./Foo.js')` is always a bug because it is non-portable -- it won't evaluate to `false` on Linux, it'll throw an exception that it cannot load the module `./Foo`.
Really? What is in that eslint settings-file? 
And which software exactly would that be?
Not everyone is native or professional in English. They still may be better developers then you or me. Does that mean that they can't write? No. Positive &amp; Constructive feedback &gt; Negativity &amp; Cynicism
The software they developed for ICE is called [Investigative Case Management (ICM)](https://theintercept.com/2017/03/02/palantir-provides-the-engine-for-donald-trumps-deportation-machine/). The system they created for the LAPD is called [Operation LASER](https://www.nationalpublicsafetypartnership.org/clearinghouse/Content/ResourceDocuments/Reducing%20Gun-Related%20Violence%20through%20Operation%20LASER.pdf). It's a system for "predictive policing" which creates racially biased outcomes as [this article in The Appeal goes into detail](https://theappeal.org/the-lapd-has-a-new-surveillance-formula-powered-by-palantir-1e277a95762a/). You can browse their [solutions page](https://www.palantir.com/solutions/) to see that some of their major lines of business are with military and intelligence agencies. One of their early sources of funding came from in-Q-Tel, the venture financing arm of the CIA. They sell data mining software to the CIA, FBI, NSA, Air Force, and Marines. (https://www.theguardian.com/world/2017/jul/30/palantir-peter-thiel-cia-data-crime-police)
I’d also recommend Turbo Console Log and Visual Studio Intellicode Both of these improved my productivity by 2x
Hi Tilo, thanks for sharing! Do you have experience using WebStorm for example? I often face problems in react or Angular with auto-imports or refactoring/renaming tasks in vscode. Some plugins overwrite code style settings of other plugins. Some Angular Plugins ship with babel settings, that overwrite JSX settings. That is often a bit annoying :( I'm quite lost, how to configure vscode correctly. Some things should work out of the box, I think. 
I prefer [vscodium](https://github.com/VSCodium/vscodium) 'cause M$ telemetry sucks.
I know this is old, but I just wanted to rant. I'm fiddling with some script injection and: Documentation is non-existent. Almost. The web is filled with script-kiddie level of information that to find something slightly more technical is insanely annoying. Objects are dictionaries. Took me 30 minutes to realize the keyword i was looking for was Object, which... in every other language, means something completely different. Lack of power tools: Seriously, features that I'd expect from a scripting language is non-existent. Removing an array element by... looking it up. Lots of similar stuff. Mixture of both lax and strict: for me it's like a weird hybrid of java and python. It "tries" to provide the freedom of py, but still have type restriction from java. What you ended up with is still no freedom but the clusterfuck of type conflict.
Okay I get it man, everything's racist. Nice talking to you
I haven't used PHP as a main language since 5 I had no idea HHVM was going to be dropped! I tried it for fun but it was too limited and poorly documented to risk using last I checked. Although it was a very cool concept and definitely fast in the operations it supported.
I think the problem here is that you are still using a case-insensitive FS on macOS (HFS+ and APFS can both be case-sensitive). 
Vue.js only used in the admin ui? What a pity... I was hoping you could write modules and the page itself in Vue. Still no alternative to nuxt. 
Apparently some Mac apps have problems with a case sensitive fs, adobe apps being an example. I recently wiped my Mac and had to look in to this. I’m disappointed that I can’t have case sensitivity because I’m used to that from Linux, but I don’t want to risk incompatibility with badly written apps. 
&gt; Not even trolling you dude but do you honestly think PHP will "continue to improve". PHP has already _rapidly_ improved as a language over the past several years, and it's showing no signs of stopping. It's more performant and pleasant to write than it's ever been, and it's only going to get better once we get features like [typed properties](https://wiki.php.net/rfc/typed_properties_v2) and (fingers crossed) [language-level support for annotations](https://wiki.php.net/rfc/annotations_v2). Sure, it's obvious that PHP isn't the new hotness anymore, but that hardly means it's dying. I think PHP has reached a point where it's in sort of a similar situation as languages like Java and Ruby in this regard - quietly productive and with a healthy community, just not talked-about as much as some other languages. 
Medium insists that I sign in just to see a blog post. Fuck Medium. 
I’d get refurbed T500 Thinkpad on Amazon 
There is 2 issues here, The first is you need to use innerText when you assign the a+b value to c as currently you're just re-assigning the value. [https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText) For Example `c.innerText = a+b;` The second is you need move the capture of a and b into the soma function as currently the page loads collects the values from your inputs and stores them, that will usually be null hence your nan issue. Finally r/learnjavascript Might be a better place for this kind of question.
All these extensions and you miss [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)? It's in your initial screenshot dude! :p
r/learnjavascript 
ESLint and Babel must be protected...
Who is touting this one methodology as better than all others?
Sure buddy got my help already. 
&gt; Visual Studio Intellicode How do you use that in VSC?
All of them VC money must be converted to numbers bub, DAU, MAU, retention and other bullshit.
It's an official extension from Microsoft, you can find it in the marketplace. 
Here's a link for the [extension](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode). It's an AI-assisted productivity feature which gives you suggestions based on the code context
I personally find the code with jquery less readable and avoid using it but I am junior dev and never really needed to learn jquery well.
\#0 It's a function expression (and not a function declaration as stated), in this case you don't even need the outer parenthesis ```js var result = function(a) { return a*a; }(5.5); ``` works just as fine. \#1 You can write the answer is `"1"` (with the quotes, to indicate a string). "duplicate declaration of b as variable and parameter, it gets resolved as parameter". Scope. The closest scope where b is found is the one taken. \#2 "The key is to understand that in case of variable and parameter names war – parameter wins" Scope. Again. Please don't say arguments is an array. [It's explicitly stated in the docs...](&lt;https://devdocs.io/javascript/functions/arguments&gt;) \#4 "JavaScript always moves variable declarations (not initializations) to the top of the scope" and here I thought this was written in 2019. You should really take a look at `const` and `let` \#5 Ah yes, non-strict mode, a thing people still use, sadly. \#7 No mention of `Number.ESPLISON`? \#9 Or you know, pass parameters ([first line of the syntax](&lt;https://devdocs.io/dom/windoworworkerglobalscope/settimeout&gt;)) like you're supposed to do. "Variables declared using var are ~~global~~ **function-scoped** by default – meaning i would be equal to 5 after the end of a cycle" Sorry, I needed to rant a bit :)
We are using vuejs. Dom manipulation is built in with reactivity and direct binding of classes and styles. So we consider jquery a technology that served its purpose and it is replaced with more modern alternatives!
Vue is very easy to include into a more classic style site with a `&lt;script&gt;` tag &amp; doesn't require any build system or anything to get going. You can do DOM manipulation (ie. disabling an input when a checkbox is checked, by your example) this way &amp; continue using PHP and all that the same way you have been previously. Check it out, Vue is really nice, and has [great docs](https://vuejs.org/v2/guide/). No reason to use jQuery anymore.
Well, I have an MSI GE70 Apache Pro... It's not about specs, it's about the operated sistem as a developer
I believe that this is because the author is part of the [partner program](https://medium.com/creators) that allows them to make money off of impressions, reads and claps. I recently published a post of my own and immediately received an email asking me to sign up. I decided against it because I did not want to limit its availability.
Bucklescript and reason are 2 separate projects. That's why the documentation is "fragmented". If you're building a react-redux project you don't complain that the react and redux docs are separate. Bucklescript compiles ocaml semantics to js. Reason is just a language that looks like js but had ocaml semantics. They clearly work together but aren't the same thing. I haven't had any problems with debugging but even if I did, the advantages reason provides would more than make up for it. 
jQuery is still very relevant and vastly used around the web. New projects, however, tend to use newer frameworks, specially React. Depending on your browser requirements, you may use modern JavaScript and CSS transitions, or if it's not possible, honestly I see **no problem** in using jQuery. Use the right tool for the right job, don't make your decision hype-religious.
You say you see no problem on using it now, but what benefit does it have over ES6? 
I personally only use the CSS grid from bootstrap for my projects. Be interesting to see what others make of this. 
Don't use jQuery. If you're not using a framework, just use vanilla js. You can replace 90% of jQuery with just `const $ = ele =&gt; document.querySelectorAll(ele)`.
Why do you want to continue doing Layout inflating? It’s terrible practice. With React you create a principled deterministic UI that will be a fraction of the code you have right now, and it will be easier to understand. React is smaller than jquery, it is so small that you can learn it in minutes and the gates are open the biggest eco system you will find. There’s a reason people choose it.
By using a more fair comparison, I end up with ~20% slower using object pattern. Can't publish my script right now cause I'm on mobile. If people are interested, I'll gladly update the jsperf script with my version.
More like 5%. jQuery is much more than a means for picking an element out of the DOM.
I use Turbo Console Log a lot. I just wish it could be customized better. I've been meaning to contribute with some settings but the time I just don't have it. :-/
HHVM is not being dropped, they just dropped PHP language support and today only support the Hack language used internally by Facebook.
&gt; 1) What you guys think of Rust ? I think it's great, I hope it grows more and more. &gt; 2) Can it compete with C++ in term of native performance and build advanced 3d engine for games ? Absolutely yes. It was designed with this in mind. &gt; or compete with more modern language like C#, Javascript , Java etc to build business program ? It's not really the goal. Managed languages tend to be easier to use, and in business world most developers tend to be extremely lazy, writing horrible code. Languages that protect the developer from writing crappy code are preferred. (Although they'll always write crappy code.) &gt; 3) Do you think C++ is a mess now or bloated ? is it time to deprecate things and create a incompatible split with old code and old standard a bit like Python did ? Yes, I think it's a mess and bloated. C++11 significantly improved the language, but it's still incredibly vast and complicated and full of traps. I write C++ for about 15 years and I find new things every day. If a hypothetical C++ 2.0 could get rid of headers and bring modules, it would be warmly welcomed... but probably nobody would use it, just like people migrated to C# when VB.Net came to modernize the old Visual Basic. &gt; 4) How big is the performance gap between managed language and C++ today ? is it possible to build advanced 3d graphics or a engine like Unreal, Crysis in a managed language like C#, Java or even Javascript with things like WegGl or others frameworks ? It's huge. No matter how many benchmarks you see saying otherwise, just open up Eclipse or Visual Studio and see how long it takes to start, and how laggy it becomes after hours of usage. Regarding high-performance 3D engines, it would be possible to write such engines in managed languages yes, but the machine requirements would be pretty high.
1. It's a compatibility layer for older browsers; 2. Syntax is less verbose than plain ES6.
If you mean the one which says you've reached your limit, you can just wipe your Medium cookies.
Ok
Hey, u/DBNeJXoGtnro thanks for dropping in. I really appreciate your feedback. \#0 Yep, thanks. \#1 Yep. \#2 Yep, my bad. \#3 I am using only `const` and `let`, but a lot of people still use `var` and you might be asked about hoisting. \#7 Yeah. Good thing to mention. 
[removed]
Hi /u/daninovac, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
Hi /u/daninovac, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 While I was learning ReactJS I made this app. You can create tasks for short daily tasks and use it as a timer when you try to prepare something. You can check it anytime [https://dnovac.github.io/simple-tasks/](https://dnovac.github.io/simple-tasks/)
Seriously, fuck medium. I’ve never understood why it even exists, let alone why serious developers actually use it. It is incredibly user hostile.
I think putting something on your portfolio would be the things your proud about. So I guess only put things that you really wanted to show off. Then the other projects that you have done, you could just break them into skills on what programming languages and frameworks you've used and rate them one by one on how proficient you are on the ff skills.
Unless such a mechanism was in another function, used within a higher level loop. Likely some mysterious npm package perhaps.
Imagine you're helping someone write a document with complex layout. Now imagine that you have to do it over a telephone line. At some point, the instructions will add up, but your mental image of the document might be a bit different from actual document on that computer which you don't have access. The risk that "delete the third line of chapter two" might do something you didn't actually intend. To avoid it, you'll have to either be super specific "Delete the line that contains this and this sentence" or do additional tracking "Remember that line that we agreed to tag as xyzzy? Remove it." This is pretty close to what direct DOM manipulation ends up as. jQuery does have a bit easier accessibility for it, but the basic issue remains the same. As the places where you modify to your DOM increases, it becomes tougher and tougher to reason about it and ensure that the state is consistent. You can take some hints from frameworks and have all the DOM-manipulation for a "component" be driven by a single function for which you provide a state javascript object as "truth". That function will both validates and update the current DOM of the component and it definitely will do the job, but the amount of logic you'll have to write for it will be overwhelming. This is especially true when you have to track complex state and keep the site performant by updating and replacing DOM elements when changes have happened. For me and languages like PHP, there came a point where I had to write a lot of the same functionality in both PHP (initial delivered page) and JS (dynamically loaded content). After a while, I only wrote an PHP-rendered page without content and had JS for dynamic loading and either requested the JSON data on page load or piggybacked the JSON to the PHP-rendered page. As I wrote more JS code, the need for JS framework grew and these with Node.JS server ended up replacing the server-side PHP. I have no idea what Symfony does, but it's users most likely have to learn JS at some point for debugging at least.
1. With a transpiler, that's a moot argument 2. It's mildly less verbose, and the things that are used often should be moved into helper functions anyway. So, I guess, yes. If you want to save yourself a few keystrokes, by all means, pull in a 200kb library.
You should also send with the quote a random photo of Kanye from the same era the quote is from, e.g 2012 quote 2012 photo of Kanye 
I also only Bootstrap for not-so-major projects, so this isn't that big of an issue for me, but a lot of people just don't want to use jQuery now as it's not "cool" anymore. jQuery does have lesser performance (not too noticeable in small to medium size apps, anyway) so a lot of people tend to avoid it for that reason as well. 
JQuery *offers* much not than a means for picking elements out of the DOM. However 90% of all jQuery code that I have seen is just selecting elements. There are typically chained methods, but that's a part of the other 10%.
Plus 1 for backwards compatibility.
Just so we’re clear, you’re saying 90% of the jQuery code you’ve seen is just DOM selections, with no actions taking place against those selections? That seems pretty unlikely.
Anyone knows what's the theme on the first screenshot?
man you got skills. have some self confidence and just go for it. Its not only about the resume its about your attitude towards the job. Until unless you haven't signed a NDA ( Non Disclosure Agreement ) you can put anything on the resume, but when asked about it you should be able to justify why it is there. &amp;#x200B; and remember its your confidence about your work which matters the most. Best of luck.
I partitioned our work computers to have a boot/apps drive that's the default for the system and a case-sensitive drive for all the source code. This is important since our source code gets deployed on Linux and at one point we had the same filename with different cases in our repo. I got rid of that, but we still stay case-sensitive to better match the target environment.
Just so we're clear, I said "There are typically chained methods..."
I imagine it's just because there's more readership for medium articles than for an individual blog despite the terrible UI.
The only reason I can see a use for jQuery these days is for legacy maintenance, basically meanings anything less than IE11. Other than that, there's no reason to use jQuery over a modern framework. It's alarming how many devs out there are stuck in their ways that continue to support jQuery in their new projects when there are so many better alternatives out there.
If there are *typically* chained methods in jQuery code, then 90% of jQuery code can’t be replaced with a simple alias to querySelectorAll(). It’s OK to just admit that you were being hyperbolic, you know.
jQuery needs to me remade, there are a lot of useful things in it but it needs to be modernized 
I think you should stick to what you think can make an impression or shows off knowledge in a particular area or framework (like Vue). I'm not sure the maximize example will help much, and given that no one is probably going to run any of your code, a sample that just echos things probably won't do much for you either - that is unless the code is clean, well written, and is something you're proud of. As an interviewer (in US) I will look at code when it's available, but will never run it. I look for coding style, organization, commenting, and use of technologies and frameworks that indicate experience. Having a forum that shows off your use of laravel and your own CSS, even if it doesn't look good (no one expects programmers to be good designers), sounds like a good example.
A lot of jQuery doesn't really work the same way with shadow dom and web components, which are becoming more and more frequent.
See Substack's post and comment history.... It seems like he hates not only Palantir but police and law in general.
Yeah. It'd be like 10x more powerful and in use if it supported new concepts &amp; wasn't too bloated.
When you love the jQuery syntax as I do, go with [Cash](https://github.com/kenwheeler/cash). Cash is an absurdly small jQuery alternative for modern browsers (IE10+) that provides jQuery-style syntax for manipulating the DOM.
Hi /u/khazha88, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I've found quokka.js to be super useful for quick fidgeting
Hi /u/SmoothMarx, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TiagoDCPP, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BernardoPiedade, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BernardoPiedade, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/struggling_kid, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'm excited to test some of these out later today. Big thanks. 😁
IE10 is a modern browser? Lol
If you're creating a brand new project don't use JQuery. I don't think you really understand react and other modern JS frameworks. They provide a far better developer experience for building and maintianng your code which is why the industry has shifted to them and away from JQuery.
&gt; but a lot of people just don't want to use jQuery now as it's not "cool" anymore Or the more likely explanation, they realized they didn't really need it for what they used it for
This is pretty awesome. The only thing that I would suggest from very briefly checking out the demo is to do some sort of prevent vertical scroll during the swiping. It feels unnatural to be swiping something horizontally and having the page move vertically. Otherwise, great work! I might use this someday!
Open incognito. Works everytime
You never had to write IE6 code, did you?
http://youmightnotneedjquery.com/
Heavy plus 1 to Quokka, it’s such an incredibly useful tool. 
[removed]
We could reply, "You never write a code for moderne browser only, did you?" Because IE11 is closer to IE6 than Firefox/Chrome/Edge. 
Activitus Bar saves valuable screen space by moving the activity bar icons onto the status bar. [https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.activitusbar](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.activitusbar)
No matter what you think IE6 is closer to, chronologically or technologically, IE6 is not a browser, it's a **purgatory**. Anything beyond IE6 is modern to me. Current browsers are just more modern.
What is the new cool thing?
Hi /u/rob_mat, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah I know but there are a lot of devs who use libraries &amp; frameworks according to the coolness factor
No, because I would assume that people need to keep DOM selections in memory to manipulate them later, so there are plenty of `var mainDiv = $('.main');` parts of code. 
I don't care about jQuery being "cool" or "not cool". I don't want jQuery because it's imperative, not declarative. 9 times out of 10, a page will start off with "oh we need to dynamically update this one field without server rendering" so you just sprinkle on a little jQuery or vanilla JS and you're done. Before you know it, you've added 10 or more dynamic update scripts. Then they start competing with one another, duplicating values stored in memory (state), and generally not playing nice. The code itself quickly starts looking like spaghetti because jQuery imposes no architecture, no structure whatsoever, and *most* teams don't have the self discipline to separate DOM concerns from data concerns. You wake up one day and you're now staring down the barrel of a 2000 line JS file nobody wants to touch. All of this is because you refused to learn something new because it's seen as "cool" by the community.
I care
Bootstrap 5, apparently.
If coolness is defined as practicality and the features those libraries and frameworks gives, then yeah, there are. 
or download Atom
there's a version of bs 4 that doesn't need $. there's a 4.x branch in the repo. old news.
That is a cool idea. Right now i am focusing on adding a ton of quotes and then i will maybe implement this. Thanks
millenials make up the vast majority of developers now, so everything revolves around trends. i've always said that javascript developers are entirely too concerned with the opinions of other javascript developers.
Once you start panning horizontally, it will `preventDefault` touch events, which prevents scrolling. iOS scrolling has a very low threshold though, and sometimes scroll events seem to leak through. I'm not sure why. If you don't have scrollable content, it shouldn't be a problem. My use case for this has mostly been for kiosk/Electron apps where it hasn't been an issue either.
Yep, I was trying it on an IOS device.
I don't think it has anything to do with being "cool". People don't use jQuery anymore because any serious project is built in Vue, React or Angular, and jQuery just doesn't really help in those cases. In fact, it's more likely going to just lead to uglier code or conflicts. It's absolutely fine for some blog site built in wordpress or something that has very little functionality. But those sites usually aren't a topic of discussion for obvious reasons.
The title should be Toxic interview questions. There are no reasons why they should be asked. 
I have a guide for what JS framework I use between React, Vue and jQuery. Large projects with a long period of maintenance: I use Vue Medium projects with a tight timeline: I start a pros/cons list between Vue and React for that specific project requirements and then use Vue Small projects that don't require a ton of front-end code: I use Vue
And people like you will still be blaming everything on "millennials" when they're all retired and/or dead. 
all the worlds 20-30 year olds have all retired and died? sounds legit.
&gt; practicality jquery is by no means necessary but there is absolutely nothing impractical about it. jquery solves the same problem that babel solves (not getting into transpiling from other pseudo languages/syntaxes) and babel has the same disadvanges and more -- makes the code base heavy, installs polyfills that significantly reduce performance, and on top of all that it adds an extra step to debugging... but babel is more popular than ever while jquery is getting used less and less. that is irrefutable proof that trendiness is factor. more proof: ever come across people that have stopped using `var` entirely? when `let` and `const` came out this trend started. const and let are both heavier and slower than var and offer advantages only when used in a very specific way. the practice of eliminating `var` is purely trend and serves no "practical" purpose. 
[https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) is all you need
It's an extension for Visual Studio though. I'm not finding anything similar for VSC
But where do i put the URL that is going to be monitored in?
???? .. the most recent version of jquery was just released **last year**. the last update made to the library was made literally yesterday.
In that case you need greasemonkey script. [https://medium.freecodecamp.org/applying-javascript-user-scripts-2e505643644d](https://medium.freecodecamp.org/applying-javascript-user-scripts-2e505643644d)
Is English your second language? 
pig latin is my second language. i rock at pig latin.
I can confirm I’m not part of any Partner program. If Medium is giving issues please check out the article on my site directly: http://tilomitra.com/vs-code-settings-and-extensions-for-faster-javascript-development/
Ah I used to use that but then it was making it hard to scan my imports quickly with my eye so I disabled it for now. 😀
Will check out Turbo Console Log thanks! 
Hey, unfortunately haven’t used Webstorm much. Can you explain what auto-import problems you face? I do use one setting that I mentioned that changes import names for me if I rename a component or module. 
Is it still being developed? Or in maintenance only?
Then you won’t be able to open large files 😂
Just check it out directly on my site then: http://tilomitra.com/vs-code-settings-and-extensions-for-faster-javascript-development/ Posted the medium link because I figured people prefer that. ✌️
But do you drink?!
Your first proof isn't really a proof of anything because you're now going on about something that's neither a library nor a framework. And even if it was I can actually disprove you my dude. You say it &gt; makes the code base heavy, installs polyfills that significantly reduce performance However, [this file](https://github.com/inabahare/lewd2/blob/master/Public/JS/index.js), when build _and not minified_, is [125.7 KiB](https://i.imgur.com/ypVopAB.png) which is quite heavy for something that's only [1.6 KiB](https://i.imgur.com/jxs4PEP.png). But wait, what is that on the very first line? And import? Well how much is that then? Oh it's [118.5 KiB](https://i.imgur.com/I4R5hs3.png). So if we do ```125.7 - 1.6 - 118.5``` we find that the heavy codebase which reduces performance and add polyfills is Fucking 5.6KiB. How big is the unminified jquery again? [Oh shit](https://i.imgur.com/Sp3yTCR.png), looks like jquery is much heavier than babel, which I need to remind you again isn't really the best thing to compare it with. Your second proof of people eliminating var because it's _trendy_ is even dumber given that what let and const gives you is a practicality and feature. Not only do you get variables that are actually local, but you also get immutable variables. Like, you know, _in all other languages_. It's literally people dropping something for something that's more practical. Like, get in the game my dude.
I was able to see it fine without signing into anything.
lol.. you've just told me everything I need to know about you as a developer. you've also made it painfully clear that arguing with you would be an excersize in futility. I wont even bother trying to correct some of the stupid shit you just said...
An update pushed to legacy software doesn't mean it makes use of modern technology, it's just maintained legacy software. Web dev has flown forward but jQuery has stagnated in comparison, but it is being *maintained*, which is what you're referring to.
All the activity bar panels have convenient keyboard shortcuts: * `ctrl+shift+e` - file explorer * `ctrl+shift+d` - debug * `ctrl+shift+g` - source control Etc.
&gt; const and let are both heavier and slower than var and offer advantages only when used in a very specific way. Link?
I use the margin/padding helper classes, they're pretty useful for our devs when they don't want to use designer time.
require(“avocado-toast”)
jQuery got popular because, at the time, browsers were implementing the JS spec a bit differently so you would have to write slightly diff JS for each browser. jQuery, allowed you to write JS that worked on all browsers the same way. Browsers are much better when it comes to implementing the JS spec correctly these days, so jQuery is not really necessary at all anymore. 
true, except there is nothing legacy about it. it's just out of style. they dont active release new versions to legacy software. I love how anyone who's ever written a hello world in javascript thinks they know everything though.
&gt;"millenials make up the vast majority of developers now, so everything revolves around trends" &gt; &gt;"there are a lot of devs who use libraries &amp; frameworks according to the coolness factor" &amp;#x200B; Agreed. I am tired of people thinking jQuery just became "uncool" or rehashing the trope of JS devs chasing the newest, shiniest thing, even going so far as to accuse developers of only seeking to enhance their CVs at the product's expense. There are a number of strong reasons jQuery fell out of favour. If you can't see them or don't wish to read, discuss and dissect them, maybe we could trot out some tired cliches about developers who don't want to move with the times.
How I built Hello World using React, hooks, GraphQL, Redux, and Big Data. Almost everything on medium seems like that to me.
Honest question: is it possible to setup Atom to be superior to VS Code for JavaScript? I've been blown away by how good JS support is in VS Code, I just couldn't imagine that going back to Atom could result in a better setup for JS work.
Out of style as in hasn't kept up with modern web dev? &gt; I love how anyone who's ever written a hello world in javascript thinks they know everything though. You have this attitude across a lot of your posts that everyone is a fucking idiot and needs a *real* engineer to weigh in, which is the worst attitude to have. jQuery was amazing for its time, but it's outdated. It'll never die, because so much *legacy* code depends on it (I should know, I lead the software team rebuilding the front end and stripping jQuery out from 9 years of JS), but it isn't *necessary* anymore. 
You might want to give this a try https://jsbench.me. I'm unsure if it runs on IE though
jsperf.com would be a good link to try. or google since there have definitely been benchmarks written already.
It depends on what you’re doing and what you mean by two loops.
ignoring your pointless personal comments about me, I fully agree.
They aren't pointless because you actively engage in a lot of discussions with other people, and having that attitude is counter-productive. I'm not trying to be a dick about it mate.
What stupid shit? That comparing jquery and babel is like comparing apples and oranges? The part where I said even if you did the babel only makes a 5.6KiB difference to your project (and here I might agree with you because there was another import that I didn't mention, so it would probably be more like a 5KiB difference)? Or was it when you gave an example of a feature that was actually practical that people used _out of practicality_? I do agree with you though. It would be an excersize in futility seeing as you haven't really gotten anything useful to say on the topic. Better just call what I said stupid instead, that'll show me!!
The payload will be huge, for starters. 
you're right, I should have said *irrelevant* instead. this is all tangential at this point. anywho, if I offended you somehow I'm sorry. attitudes are hard to decipher over text.
C-ya jQuery. Dont let the door hit you in the ass on the way out.
You haven't offended me at all, but you're making sweeping statements like "I love how everyone whose written hello world..." etc in your posts which makes you sound like an arsehole.
If my hands are on the keyboard than I use those, but if they are off the keyboard (eg. I browsing through some code) than it is nice to have easy access to the activity bar shortcuts without using any screen space or going into the menus.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Have you met my friend Safari? What jQuery does is still relevant, it stills fix things that are not working properly in some browser. Browser didn't got better, some died, some sold out to Chrome, some became so irrelevant that devs do not care, and what's broken between the remains is just not what's commonly used. But it still there. Last experience I got was NodeList as an iterable, it should be per specs and it is in Chrome, Safari and Firefox, but not Edge. And don't get me started with safari and iOS, it's a mess. 
1.) call it: "Let AI calculate how sexy you are!" 2.) get easy money
why do you need two loops but only one indexOf? what is it you're trying to do?
You should check out [flexboxgrid.com](http://flexboxgrid.com/). Same syntax but you don't have to weed through Bootstrap and rip out all the components they want you to take.
good bot
I prefer personal dev blogs over medium
Yes! We just need a fast code editor now! /s
Bootstrap 6 expected to completely replace Bootstrap
Hi /u/capsload, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt;const and let are both heavier and slower than var Really? I would suspect only if you are using a transpiler to target true legacy browsers (IE pre 11, which didn't support them at all) or those with bugs (IE11 has an issue with let used for loop counters that may require extra work when transpiling). In those cases workarounds for losing block scope locality might cause slowness, but on those engines things are not exactly fast anyway. const/let shouldn't be any slower than var with a good JS engine. &gt;and offer advantages only when used in a very specific way Wanting values that are intended to be immutable to actually be immutable might seem specific but it can protect you from a wide range of bugs caused by coder error later. Block-level scoping might be less useful overall, but it can still make code intentions clearer (making complex code easier to maintain) and protect against significant hoisting bugs.
Hi /u/jyourman24, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/connorcz, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Trying out new stuff is part of being a developer. If nobody tried new libraries, we wouldn't see as much progress.
Even in framework-less projects, jQuery leads to longer parse and compile times, and generally bad practices. 
Hi /u/Detallado, this post was removed. Low-effort content such as listicles, memes, clickbait, etc. is prohibited. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Importing only the functions you need from utility libraries that solve specific problems. i.e. `import { reduce } from 'lodash';`
var is faster in any [unbiased benchmark](https://jsperf.com/const-vs-let-vs-var/2) *without transpilation*. but you're right, the difference is obviously negligible. that said, you took part of a sentence out of context and decided to analyze it. the point i was making was apt. const in javascript is not hardle immutable -- it only seems like it is if you assign a string or a number to it -- but that's an entirely different conversation.
All my project have moved away from both jquery and bootstrap. We stick with es6 (trans-pilling down, is that the right verbiage?) and SASS (flexbox &amp; css grid)
&gt;you've just told me everything I need to know about you as a developer And your posts in this thread, and I suspect others but I have neither time nor inclinations to check, are quite instructive with regard to you as both a developer and a person in general. I recommend cutting the superior attitude, getting incensed when people disagree or say something about which you disagree, and chanting "just google it" when asked to back up claims you have made that people are not sure are correct (or indeed give evidence without needing to be asked).
[Relevant xkcd](https://xkcd.com/927/)
Here goes - https://github.com/christocarr/get-quizzed Please be kind I'm a junior.
Not sure how that is relevant, this is an evolution of an existing standard, in fact SemVer itself is on 2.0.0, so this would be 3.0.0? https://semver.org/
Flexbox and Grid to replace Bootstrap. Boom - no dependencies. 
I also don't use jQuery as much as I used to when I actually started making websites. (Also, transpiling is correct afaik)
there are two types of developers. 1) devs who get their feelings hurt when someone corrects them and 2) devs who are happy to learn when they are corrected. the first type tends to take things personally and feels attacked, even when the other person is an complete stranger who knows nothing about him or her. *"great minds discuss ideas; average minds discuss events; small minds discuss people."*
For learning purposes I started making a chrome extension which will be counting the amount of spending time on web pages. I will share link in future
That won't work because then it's much more difficult to reason about the effects this will have on the dependent system. Your solution requires me to read what tweaks were made, which means that the version isn't semantic enough to convey it, and therefore it fails to be semantic versioning at that point. Semantic versioning means I can reasonably understand the effect an upgrade will have before I do it.
https://github.com/audrium/game-of-life
&gt;quokka.js \+1! Quokka is one of the most useful plugins out there.
[https://ll2nz.github.io/securities-app/](https://ll2nz.github.io/securities-app/)
If you use Auto Close Tag, you'll also want Auto Rename Tag (by the same author).
The extra number is pretty ugly I agree, 4 numbers is harder to reason about than 3. But I don't see how this applies: \&gt;Your solution requires me to read what tweaks were made You have to read the release notes for breaking changes too. The tweak is a breaking change, just a SINGLE minor one. Package managers won't upgrade you to tweaks by default, just like with major versions.
Oh I thought English was your second language, that would at least excuse your apparent inability to understand what the words "will", "still" and "when" mean when used together in a sentence. Here's a free hint: the sentence is talking about the future, not a current state of affairs. But basic grammar is for those darned millennials I suppose. While we're on the topic, the oldest millennials are (at 38/39) nearing *forty*, not thirty.
I agree absolutely. I am actually very glad about how far JS ecosystem has come compared to even a few years ago because of newer frameworks and libraries. Also, I guess a lot of devs are angry at what I said about the coolness factor thing... But, I'm not defending jQuery at all. What I'm saying is a lot of (mostly new) devs just use "trendy" libraries without checking out alternatives or even thinking if they need the libraries in the first place.
&gt; The solution: Stop using semver for marketing, don't invent worse more confusing standards
Having some trouble understanding how it's trained: Human training? (as in, humans have to train it for the first epochs and then it tries to teach itself?)
“I would ‘not safe for work’... but that actually is your work... for a year... at least...”
[https://gyazo.com/18fe852445e274d870f2805c1ee08dbd](https://gyazo.com/18fe852445e274d870f2805c1ee08dbd) Well must be porn .. (it not NSFW)
Bad programers write bad code, it's clearly the code's fault
I don't see the advantage of doing either scenario described in the blog post client-side...
Yeah, I think that would be the better title. I would thinks twice before working for company who asks such questions during interview process.
Jquery takes like 20 milliseconds to parse on a subpar machine, this is a silly statement
I'm sorry, jQuery can't hear you over a nightmare of webpack dependencies and flux state managment
I feel old... Each time I learn something new (to me), it's seems to be old hat for everyone else. Was working with BS 3.3.7 today on some old script for a client. Wasn't that long ago that I got used to jQ, JS and PHP, and every time I open YT there is a new script, library or language to learn. I have been learning and using more modern css grid and layout techniques though that may one day replace Bootstrap altogether. &amp;#x200B;
Funny. In that benchmark both var are slowest and the second let. 
https://github.com/WeAreDevs/material-clicker
Not hotdog, not hotdog, not hotdog, HOT DOG!!!!!!
about time for sure. TSLint was made redundant long ago when the eslint typescript parser was introduced. Great news that they're going to try contribute to the more standard of the two.
I don't know what set this off. Maybe the bad tan and open mouth? All joking aside, I'll add this image to the training set.
[https://github.com/laurenclark/gulp-workflow](https://github.com/laurenclark/gulp-workflow)
&gt; var is faster in any unbiased benchmark without transpilation Are you trolling or something? Like it's okay if you have some sort of reading inability because looking at the [link you provided](https://jsperf.com/const-vs-let-vs-var/2), it's either not true, or you're overstating just how slow it actually is. Like take ```Chrome 71``` to ```Chrome 67```. In those 4 browsers you have _=&gt;var_ and _=&gt;const_ being equally as fast. And it's not just that. Just about all of the comparisons are between half a billion and a billion operations pr second. Like even with the [results I got](https://i.imgur.com/eIcjTsb.png), of those three _let_ is the slowest. But that doesn't really matter that much since because I'm not about to run an IIFE that calls "use strict" and declares + defines 6 variables more than a billion times. Like even the slowest one, Chrome 56 (1), runs at over a million executions pr second :/
So it was trained using lots of images from Reddit depending on the sub. With about 300k images certain patterns emerged and those are what the model detects.
```js const ONEMINUTE = 60 * 1; ``` Why’d you do 60 * 1? Couldn’t you just do 60? Maybe the variable name could be `ONE_MINUTE`. But I guess that’s personal preference.
ESLint has supported typescript for a long time, TSLint stopped having a use quite a while ago. You can instead use [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint). All that is being announced here is that they've finally realised this is the better route and are going to contribute to the existing ESLint solution rather than their own.
the way you're saying that sort of gives me the impression you might not understand how benchmarks work. there is no absolute result. there is no ***the*** slowest. it runs on your computer and depends heavily on which browser you use. for the latest chrome and firefox on mac var with the old style functions was fastest.
[https://github.com/laurenclark/gulp-workflow](https://github.com/laurenclark/gulp-workflow)
If you're only targeting desktop browsers in 2019 you're making a strategic mistake.
Saved server performances I guess, client performances are free real estate. Now in a legal aspect of censoring content for underage public, this is not really a good idea since it could be easily avoided. And scenario 1 would not work for the same reason. 
Maybe extend the analogy. Imagine this was built into phone messaging. You get a picture from a random number, and it triggers an NSFW detection. You could choose to not view it.
you still dont get it? really? lmao here's a free hint. I'm a millenial.
Poor John Resig, our old-time-used-to-be.
I'm sorry, I didn't know that came with a side helping of being unable to read. 
Please don't, I don't want to see it.
So you honestly think there are *nine* DOM references for every non-reference? I bet you reddit gold that you can't provide a single example of this being the case in a non-trivial code base. In fact, I'd be floored if you managed to find an example where there is 50/50 split.
interesting. well, last time I looked into it indeed was about 1.5 years ago, so.. :) Guess I'll take another look soon then!
Are you telling me that even on my 3 year old phone that can run fortnite and xcom is going to have a significant struggle at loading 30 kb of gzipped js code?
Bootstrap 7 replaces CSS
Hi /u/Extech22, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Sounds like you're looking to complain about people dropping old frameworks for "coolness" reasons and trying to shoehorn that into this discussion.
import toast from 'avocado-toast';
/r/dontstickyourdickinit 
Yeah I know it sounds like that but I'm actually not complaining. I should've probably framed it better :/
Hi /u/Hamed02, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
But if it's a mobile app, why use JS? Maybe for React Native compatibility? How does it perform on the average device? I guess I just feel the disadvantages outweigh the advantages in the scenarios you describe. A cool use of it might be as a browser extension to install. Lots of people try to reduce their pornography use so this can be used to accomplish that.
'free' as in transferring 20 MB of trained model data and using it in heavy processing tasks? Mobile users will hate you.
Cool idea but a big heavy on the clients bandwidth and battery.
You may want to have a look at Bulma. No JS dependencies whatsoever.
`import reduce from "lodash/reduce";` https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark
It gets cached. I agree, though. Models need to get smaller.
uh oh, were not saying something negative about millennials are we? tisk tisk..
It's Hydra. [https://marketplace.visualstudio.com/items?itemName=juanmnl.vscode-theme-hydra](https://marketplace.visualstudio.com/items?itemName=juanmnl.vscode-theme-hydra)
Agreed. For me JS lets things go everywhere. Like you said, it could now be a browser extension. I like that idea. &amp;#x200B; &amp;#x200B;
how did you run the test exactly? some kind of VM with a bunch of different browsers installed? if so you did that pretty fast.
I think TensorflowJS is actively working on that.
I'm actually thinking of adding this subreddit to the data collection process....
Isn’t this a perfect candidate for Webassembly?
Currently trying to build a react component out of a 3000 line es5 file because the genius .net dev couldn’t be bothered with picking up the company framework. The pain is real. 
I tried it with photos of my puppy sleeping on the ground. This is the result of one of the pictures. But porn is at a high percentage on 3/5: Porn - 68.28% Neutral - 28.34% Sexy - 2.10% Hentai - 1.08% Drawing - 0.20% It might need some more training and nsfw.js could be really handy. I laughed at the outcome tho 😜
Ask JS subreddit to port Python extension for PHP - definitely mad idea :) I'd recommend https://www.bountysource.com 
Not js related but just from a quick glance at your main.css, you should look into Sass.
don't put the blame on your fellow dev. for every nasty thing in the code there was a MANAGER saying it was ok to do like that because deadlines
1) &gt; In ES5 arrow functions were hands down the most popular new feature. Arrow functions were introduced in ES6 (ES2015) not ES5. 2) Not sure where this list is coming from. Many of these are still in [stage 3](https://github.com/tc39/proposals#stage-3). Those that are [finished](https://github.com/tc39/proposals/blob/master/finished-proposals.md) were moved to stage 4 in January or earlier, where January has historically been the cutoff for features making it into that year's standard. So those still in stage 3 right now will likely be a part of ES2020.
any other libraries that tackle this aside from mentioned [flexboxgrid](http://flexboxgrid.com/)?
Hi /u/mubeenkhan246, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
TensorflowJS on Node is GPU accelerated and runs just as fast or faster than on Python, amazing stuff.
As I stated, this has been my observation. The majority of jQuery code I have seen has been non-trivial cases. The only significant code bases I've worked with that used jQuery had something similar to that, because not every DOM manipulation requires jQuery. Or the jQuery is wrapped inside a function, so the jQuery itself is only typed once, but the non-jQuery function is typed several times. Now, I may be off with 90%, but I will bet you reddit gold I'm closer to the actual number than 5% is. 
Better yet, add a new content category for identifying pictures of Donald Trump for ease of removal.
I can ... &gt;!Automatic semi-colon insertion (or the lack of a semi-colon in this case)!&lt;
20ms &gt; 0ms Milliseconds count. Once you start tacking on jQuery Plugins, and manipulating the DOM, that adds even more. 
Yea. Maybe not _your_ 3-year-old phone, but somebody's 3-year-old phone will (or even their brand new phone).
Might it be the case that an imperfect solution is actually worse than no solution at all? I.e. imagine you implement this, and it works well enough that your users come to understand and rely on it. Then one day some shitting dick nipples slip through while a user's on break and they get fired. Also potential liability issues... Imagine some parent suing you because your filter missed something and their kid saw it.
Awesome article. Looks like I should install the lodash webpack plugin. Thanks! It doesn't mention tree-shaking. I'm curious if the `{ reduce }` syntax works the same as the lodash webpack plugin if tree-shacking is turned on. I always thought that was the point of tree-shaking.
This is definitely a feature not a bug. 
I think it's because the mindset of a lot of "full-stack" or backend engineers who write bad JS code because "jQuery always worked for me" and refuse to learn new techniques, then the project is stuck in jQuery land forever. Frontend dev has improved so much recently that it is better to be on the progressive side with your tool choices (to a degree). 
I tried some pics and a lot of them is marked as porn while there are just normal people. But the EU is definitely ready for upload filter ... 
&gt;Models need to get smaller. I dont think having smaller porn models will have any effect. My midget porn uses just as much bandwidth as the other stuff.
 &gt;const and let are both heavier and slower than var and offer advantages only when used in a very specific way. Usually const/let are transpiled out anyway so shouldn't be any performance change. They are fundamentally different though as they don't hoist to function scope - when developing I'd always recommend using const -&gt; let -&gt; var so that you're always starting from somewhere more restrictive and signalling the intention of how the variable will be used as you work your way down.
Best yet, add a new category identifying helicopters for commie removal.
https://github.com/tmelliottjr/Not-Quite-Trello
It's definitely more sensitive to false positives than true negatives.
;
WHAT KIND OF PUPPIES DO YOU OWN!? 🤣
When I started out in web dev, I actually used jQuery way more than I should've as well. But fortunately I realised that I was overusing it.
For faster JS Development: switch from JS to Typescript. It has tremendously great support in Visual Studio Code. The integration was always miles better than in Atom.
what about in a case where you're doing something synchronous in a loop. it's obviously more performant to declare a var once outside of a loop body and then reassign it on each iteration than to redeclare a let on every iteration. sure the performance boost would be negligible but if you're doing a substantial number of loops it can really add up. in that case var would objectively be a better choice than let.
[Oh, well](https://i.imgur.com/cy49eHa.png)
 This is the mentioned plugin in action: [https://imgur.com/a/7mpem7a](https://imgur.com/a/7mpem7a)
It's not jQuery's fault. jQuery was created in a time where the business wasn't demanding the level of complexity and interactivity that they do today. But, it IS the programmer's fault when you keep choosing the wrong tool for the wrong job.
Just do it yourself, you'll learn in the process. 
Definitely is my *to-do* list. I know even if I won't make it, i'll still learn a ton of new things :)
The right tool for the job is the tool that gets the job done
[It's a little bit overzealous..](https://i.imgur.com/L8ijg5p.png)
#JIAN-YAAAAANG!
Found another one https://imgur.com/a/X9xOZEp
;( to be exact
Not always. Where I work the manager wouldn’t know the difference between JavaScript, jQuery or a framework. I’m not even sure if he knows what code runs on the front end vs the back end.
This is the boat I’m stuck in right now. I use Vue for most of my new projects, but the other person on my team doesn’t see the benefit. We just started a new project with a ton of UI elements that need updating based on user actions and it’s all jQuery. The project is also going to be one of our main pieces of business for at least 5 years.
I think the reason for this is so that it is easier to work with other frameworks. Bootstrap for React is one.
ooof. Someone needs to get in there and teach! Are you at least able to use ES Modules in your project? For the record, Vue, and other frameworks are great when you need to manage state. If there isn't a lot of state management happening, then you might not need Vue. Of course, you can use jQuery within Vue, but vanilla JS will do just fine. There are 0 reason to choose jQuery in a fresh project.
That person on the left... What is that....
Haha, I was waiting for that. It's a (mis)generated image from [here](https://thispersondoesnotexist.com/).
Yeah there’s a good bit of state management happening in it. I’d say this project would be the poster child for any of the modern frameworks. I’d love to suggest it, but with the deadline we have there’s no way he’d want to learn it. At this point I think I’m just going to look for another job. 
If this could be applied to 3d modeling... That would be amazing for gaming or cgi applications...
Doesn't work on iPhones. I do a lot of CSS at my job and I found this out the hard way :/
Good plan. You don't want to get stuck working at a company using 5 year old tech. You'll wind up out of touch with modern workflows and tools, and end up needing to play catch-up when you want to change jobs in the future.
Yeah. The only hard part is I live in an area without a ton of jobs unless I want to commute. I’m working on a couple of portfolio pieces hoping I can get something remote.
hey-oh!
Yeah, the model data seems to be 20-something MB for anybody wondering.
That's tough. Portfolio and case studies I've found to be very helpful. Keeping a few public Github projects, even personal projects is great. 
Then it can be optimised if there's a bottleneck, in all likelihood the assignment isn't likely to be causing the slowdown there. But until that's diagnosed as a cause, the potential bugs due to `var`'s scoping is a bigger concern imo. It's also pretty likely that a modern engine will optimise the reassignment out anyway.
Uncaught SyntaxError: Unexpected token )
Those hairy ones: http://imgur.com/aGqeRkH Looks like 68% porn doesn't he? 😂
Please do, I don't want one group to classify an engineers work as partisan just because it's funny.
[Maybe don't rely on it too much \[NSFW\]](https://i.imgur.com/YK2oJY4.png)
My name is test6554 and I don't know what a joke is.
Probably a nice job, I can't tell, the source files are too big for my editor to open :(
Doesn't work very well unfortunately. (nsfw) [https://i.imgur.com/nMEtaZ2.jpg](https://i.imgur.com/nMEtaZ2.jpg)
Hi /u/Rumblemike, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah and his site's design is really nice, I hate the serif font on Medium + the sticky header/footer tbh
THIS IS MIKE HUNT. AND IM RICH 
The last ESX was ES5. Before that, you should name it with its year. Ex: ES2020 insted of ES10
Hi /u/MadeYaLookOP, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Respect your elders
There are plenty of phones still in common use that take more than 20ms to parse jQuery.
&gt; want to use jQuery now as it's not "cool" anymore. jQuery does have lesser performance [...] Well, it's not because it is not cool anymore. It affects perfomance, that's why, but also you, in most cases, doesn't need it due to the fact that javascript has evolved.. 
Yes they support what you say if you ignore any and all context. That is if you only look at the coloured bars (which even then are so close that it doesn't really matter.) But as I said, look at how many times those things actually run pr second. In my case it's over a billion times pr second, and that is with those two useless things (the IIFE and the "use strict")
/r/PareidoliaGoneWild will be a treasure trove of great training data.
Here's a sneak peek of /r/PareidoliaGoneWild **[NSFW]** using the [top posts](https://np.reddit.com/r/PareidoliaGoneWild/top/?sort=top&amp;t=year) of the year! \#1: [slutty mattress waiting for it](https://i.imgur.com/whJa8oz.jpg) | [9 comments](https://np.reddit.com/r/PareidoliaGoneWild/comments/8hevkd/slutty_mattress_waiting_for_it/) \#2: [I might just be dirty minded but I see it](https://i.redd.it/tg2r4zzngme21.jpg) | [3 comments](https://np.reddit.com/r/PareidoliaGoneWild/comments/aneg23/i_might_just_be_dirty_minded_but_i_see_it/) \#3: [Catching ur mate sleeping in the car](https://i.redd.it/6hlzqhbgtna21.jpg) | [1 comment](https://np.reddit.com/r/PareidoliaGoneWild/comments/agmvhu/catching_ur_mate_sleeping_in_the_car/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
It seems to get lots of false positives. My finger was rated as 78% sexy. Dont get me wrong, I have a very sexy finger, I'm just not sure it needs to be blurred
\&gt; remove jQuery from its framework in favor of JavaScript TIL: jQuery's apparently not javascript.
Just wait until react is no longer popular and someone complains about this ridiculous react component that tied non dependent es5 to a deprecated framework. First guy is right don't blame another dev for not doing what you would do. For reference I am currently trying to make react components from thousands of es5 and below lines of code which I wrote years ago. I am in both of the places you speak of!
r/nofap
Project Page (?): https://github.com/alexnisnevich/untrusted *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What have you tried that didn’t work?
I found this game last night, and played it through in one session. It is *by far* the best programming game I have played. While most programming games focus on teaching you a language, you need at least a decent basic knowledge of JS, that's why I posted it here instead of /r/learnjavascript.
&gt; Sexy: 1.82% ...whatever works for that bot
Hi /u/CsunTW, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
So basically "offensive" in their view is people who are nude (oh no, human bodies!!!). A picture of a guy getting his head cut off is okay though? Thank you, America.
[pOoR dOgGo ClAsSiFiEd aS pOrN](https://imgur.com/a/hDF3ic5)
I've seen questions along this line in at least 3 interviews over the past year. Definitely something to remember.
The "upload filter" are about copyrighted content, not about some naked boob.
Ok, what in the name of all that is unholy is this kind of hentai????
I would have preferred it without the iife but since all the tests have them it's still an accurate and unbiased test.
fair enough. you're mostly talking about opinion and preference and I wont tell you that your opinion is wrong. all I'm saying is that objectively, given the aforementioned scenario, var would be a more performant option and therefore the construct still has value.
One big company is starting to smell like another big company. Redundant sentence is redundant.
One of the big challenges I'm giving myself is trying to learn JavaScript by replacing every jQuery function with vanilla whenever I need it for something. It's tough because jquery is just so simple but it is the only way I'm able to currently learn it.
Depends what subreddit you're asking...
They were written in Notepad++
That’s fair, it’s not his fault at all. If they wanted this to be React they should have started that way and not made it an afterthought. But it’s a graphing tool and building that whole thing in plain old JavaScript instead of like d3 or something seems wrong to me. But I suppose that’s the bright side of rebuilding it. I can work with the team that will end up maintaining it and decide which tools we should use.
That's a hallway?
Thing is, jQuery isn't being replaced by a new language. JavaScript itself has just progressed to the point where jQuery is nearly pointless.
Why do you say that? Since JS has both undefined and null, IMO it makes total sense that null would be a sort of placeholder for an unknown / unset object value, similar to many other languages like Java (which JS was originally based on). So then naturally it would have the "object" type, to differentiate it from undefined. Mind you, I'm not a huge fan of the null value, but I think it being an object type at least makes sense from the perspective of "make it look like Java", so I don't see how it could have been unintentional.
BTW&lt; those of you who are getting false positives consistently, add a subreddit with those kinds of photos here: [https://github.com/alexkimxyz/nsfw\_data\_scraper/blob/master/scripts/source\_urls/neutral.txt](https://github.com/alexkimxyz/nsfw_data_scraper/blob/master/scripts/source_urls/neutral.txt) &amp;#x200B; This will help improve the model in these issues for the future. The model will keep getting improved 👍
But Filter cant even get a naked Boob. How will they get some Copyright Stuff they dont have access to everything in the Internet and make a binary compare or something like this. 
I make custom wordpress blog and website themes for small businesses. Often I want to do things like hide navbar after certain number of pixel scroll. I use jQuery for this and it is very short and simple, and I'm pretty sure it's easier to do than in plain JS. And I'm not about to dive into lrari framework
I’m older than jQuery.
The question is, were you a programmer when it was new?
If you are developing for YOUR phone, you are doing this very very wrong.
This is true. BS-Vue has completely eliminated the jQuery dependency. Thankfully.
Yes. It's computationally intensive and SHOULD be done in WASM.
It’s a JS library. Working with it you are not writing JS, you are using the jQuery syntax. Behind the scenes is JS.
IMO JS is much easier to write and interpret . No magic going on behind the scenes. You know exactly what your JS is doing.
No, they don’t. 
Hi /u/barrote, this post was removed. For help with your javascript, please post to /r/LearnJavascript instead of here. Likewise, for beginner content, please post to /r/LearnJavascript instead of here. ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I am 47. Started developing in the early 90s. It is no longer relevant unless you like hacking jQuery plugins together and calling it coding. The things that jQuery used to provide are no longer relevant. DOM manipulation is provided by pretty much every FE framework. Browser discrepancies with JS handling has been eliminated for quite some time now. 
I don't understand why one would make this assertion. My phone is 3 years old, I would assume most any user would either have a newer phone or be used to a generally slower experience. Regardless I really, really don't think jquery being added to the bundle makes a difference. People throw youtube embeds, analytics, a/b testing, popups, preloaders, and all kinds of other garbage on their sites, and jquery out of cdn I would expect makes such a small difference, its like saying at a fast food place "if you're stopping to say 'have a good day' after every person places an order, the productivity losses will be huge and youre doing it all wrong'. Get real. 30k on a slow network is non existent and 20 ms even extrapolated to archaically old phones is like 1/20th of a second of load time. I'm not defending jquery here (although I'd like to) but if the justification for making otherwise the same readable code into the unreadable trash that is pure JS code because it takes an extra micro-moment to load, you're the one that is doing this very, very wrong.
Because YOU are not your users. Have you ever done a user analysis for any site you built? I’m not going to debate this with you other than to point out that you seem to lack the knowledge and experience necessary to make your case.
Maybe you should post a picture of it and let Reddit decide
Var self = this; Why. 
https://i.imgur.com/x6DhgWW.jpg (SFW, screenshot of result values) I didn’t think it’d work on a drawn image. Now to delete these photos from my phone.
I used this for a while and it’s process was killing my cpu for a while after I added a package. 
The type was stored as three bits in the object, and the “object” type was 000. This became a problem when null is represented by all zeroes.
So essentially, Medium is paywalling content that creators are posting for free. That seems really unethical of them.
2.1) Blockchain hosted *cough
yes, they absolutely do.
Neat. I've been using something similar at work, but we're using CSS `background-position` to animate our sprites.
No they are not. You cited Silicon Valley, not the industry as a whole lol. Average age in industry is 36. That’s not millennial. https://datausa.io/profile/soc/151134/
Nice rebuttal, very analytical, much technical.
Nope. I will do you one better though. Read up about target audience research and why it’s important to make your sites run properly and effectively on the lowest common denominator- not your personal devices. You are not your target audience. With this knowledge, you can see where you are wrong for yourself. We learn better by doing our own research. Cheers.
There were several frameworks that did that, some better made than jQuery. jQuery became popular because of low barrier of entry. Just like MySQL or PHP or Mongo and so on. You slap 'em on and copy a few lines of code and you get some stuff done. It's not ideal and if you keep doing it you end up with a pile of spaghetti... but it got stuff done cheap and fast. Cheap and fast is a very persuasive proposition.
Well, if a 12 year old library designed for the age of universal comparability in the age of IE 6 isn't your definition of something that is designed for the lowest common denominator of devices, I'm not sure what alternative could match that target use case any better.
Also, that's some fugly ass code, author needs to start using a linter with a styleguide
Based on the page source I would say that js script is doing everything, hardly any html in the source. I would go with lazy, uncaring people who built the site or it is in transition.
I don’t care about jQuery. I was not debating jQuery in my statement. My statement has to do with targeting your requirements to your users vs. building for your own devices. 
Oh yeah for sure. That's how I learn. I've become 1000 times better as a developer by *doing it myself* instead of just pulling down a fancy lib and be done with it :D &amp;#x200B; Also, having 1000 other developers before me doing the same shit helps out a lot :D
My reply still stands. If jQuery is the tool you need and the only deciding factor on using it as pure js is if it's going to take an extra moment to download or parse the code, that's a non consideration.
No idea, I don't even know where I got this image from I just keep it on my phone for the shock value Lmao.
What are the big improvements in the DOM API that makes jQuery pointless?
Glad I wasn’t the only one who thought so. 
So, in other words they're going to write their own version of jQuery... Nobody in their right mind would type out document.getElementsByClass(...) over and over when $('...') will give you the exact same results that are immediately iterable. It's like a wood worker who doesn't know how/when to use a ban saw saying ban saws suck. jQuery is still highly useful and appropriate to use for many front-end web development cases.
Research purposes
Not hot dog
Pointless was the wrong word. Unnecessary, maybe? I can't think of any DOM manipulation I have done recently that required jQuery. Of course specifics will depend on your necessary level of browser support.
&gt; #4 ”JavaScript always moves variable declarations (not initializations) to the top of the scope” and here I thought this was written in 2019. You should really take a look at _const_ and _let_ Technically, block-level bindings (const and let) are also hoisted to the top of their block-level scope, in the same way that var bindings are hoisted to their function-level scope. However, while accessing the value of an uninitialized var binding will result in undefined, accessing a let or const before its declaration will result in a ReferenceError.
No functionality whatsoever either(since there is no JS at all). 
Either that or it's using your browser to mine bitcoin xD