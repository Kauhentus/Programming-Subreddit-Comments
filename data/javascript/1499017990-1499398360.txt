As a global under `window`, yes, not available until IE7 (and was a long time coming) --- but as I said, &gt; by way of the MSXML2.XMLHTTP COM control You could instantiate an XHR via `var xhr = new ActiveXObject("MSXML2.XMLHTTP.3.0"); ` and it functioned exactly the same was as if you were to say `var xhr = new XMLHttpRequest()` in gecko-based browsers (or, later, chrome) This is one of the things that made jQuery so desired at the time - cause no one got time to wrap all ajax calls with some stupid thing that returns object created through ActiveX or standards XMLHttpRequest..... same thing with event handlers, but those were even worse. 
How many operating systems do you run on your custom pc? If you want to support one browser, it's an ok comparison. But, you want ie 9 support. Frameworks offload cross browser support as one if not the most important feature. Also, you should keep working on Redux until you understand it. Two way data bindings are out of style for a very good reason. They complect your app in ways that are very hard to understand. Shared state is a godsend in comparison and the boilerplate is pretty trivial to manage with a generator. 
Right but there won't be a resize event if the user switches between console and debugger, which is what the user wants to distinguish.
You guys are all right. This is actually an example of the pre jQuery days I suppose. I do remember adding some if/else XHR instantiation until jQuery abstracted it.
Ah damn, misread OP. You are right
&gt; so I guess it was a combination of "not much", server-side scripting, and DHTML. Exactly, yes. *Everything* was done server-side - most pages were completely static, and every state-change to a page was done with a form-submission back to the server that was handled by a CGI script, and a new server-side-generated page. JS was either not used at all, or was used to do trivial, cosmetic things like make drop-down menus appear (even before that could be done in pure CSS) or have expandable menus with items that you could open and close. For some context, in 1997 while I was at university I wrote a pong game that used multiple scrollable &lt;frame&gt; tags in a frameset to get independent positioning of HTML elements - it moved the ball by having a hugely oversized image with a tiny ball in the centre and using JS to programmatically scroll a frame in the middle of the page to make the ball "bounce" between bats and off the top/bottom of the play area. The paddles were in their own &lt;frame&gt;s, and the page used JS to scroll those frames up and down to move the paddles (one using key events, the other using mouseover on "up" and "down" controls). Collision-detection (with paddles, edge of the play area, etc) was done by inspecting the relative scroll positions of the ball-frame and the paddle-frame on each tick, and waiting for the centre frame scroll position to reach one of the magic numbers that meant the ball appeared to be touching one side of the play area. It was utterly baroque and rube-goldberg, but it was the most advanced javascript game I'd ever seen, and I didn't see anything even close until years later when Flash had fully arrived (and even then Flash was more a compiled binary that was *transported* over the web and ran in a plugin, not a game that used web technologies natively in the browser). That should give you some idea of the state of JS development in the late 90s - CSS either didn't exist or was barely supported, plenty of pages didn't use JS at all, there was no absolute/relative positioning so JS couldn't even even move elements around on the page very easily, and even writing something like a hacky pong game was quite an ingenuous achievement that required creatively abusing half a dozen different primitive browser features. We've come a *long* way since those days, believe me.
Honestly speed has not been a concern for my builds. Having quality plugins is my main issue. I love gulp but there are so many crappy plugins. 
I think JSON.parse() is what you're looking for! Check this link out: https://www.w3schools.com/js/js_json_parse.asp
[removed]
Measuring performance is usually done by simply running a sample app with your code and recording how long it takes to execute multiple times and then averaging the time. You then take your same sample app code but built with another framework and do the same recordings and then compare. Ideally all tests should be run on the same platform/environment/etc. This concept can be. Token down to smaller pieces of your framework as well.
Awesome stuff, I'll have to give this a try. You might want to consider calling it "universal" instead of "isomorphic", since haskellers do actually talk about isomorphisms.
Rust would also be an excellent choice for that usecase.
It's very similar to gulp &amp; taskr in terms of setup - I wanted to ensure that the API feels natural. But I've tried to optimize it as much as possible to speed up the building process - especially for repeat builds.
Unfortunately ensuring plugin quality is difficult task - but we're trying to provide our own set of quality plugins. The project is still in its infancy so it will take time for the ecosystem to mature. Speed was a huge issue for us. Especially when we had a complex stack (i.e. angular, webpack, cordova, bootstrap, and plugins for each of those). gulp was rebuilding ridiculously large chunks of the project which was wasting a lot of time. So we built hopp to handle those repeat builds in a more efficient manner from the ground up.
https://bogdan-lyashenko.github.io/Under-the-hood-ReactJS/
&gt; It has no components that run on the server React supports SSR...
Check out Next.js: https://github.com/zeit/next.js/
With React it is okay for me. React without router, and Redux is okay for me. TL;DR React as View is okay for me :)
&gt;:) I am happy that you are happy. Spread the happiness around. [This doggo demands it.](http://www.toyeskies.com/Abby_10wks_1.jpg)
Hi /u/Quarel, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
Hi /u/steven447, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
Redux is okay for me if spending load of time was compensated. In my case, it is not. It's good for large applications. Concerning the IE support, I have specified that in the original post. Usually, libraries specify their support range.
I love [apollo-client](https://github.com/apollographql/apollo-client) because it's insanely easy to get up and running, even batching is pretty straightforward. I have worked in Relay applications but haven't built my own from scratch due to the amount of setup required. [Relay Modern](https://facebook.github.io/relay/docs/relay-modern.html) was recently released which is supposedly more enjoyable to use but I haven't tried it yet.
To be honest my post was not about going for exotics. I wanted just to dich architecture-oriented frameworks, and try to build a stack from a couple of libraries. Going for polymer in my case is not going to be a good idea, since I am doing transition from well tested Angular, React, Vue to lesser-known framework, with less community support.
Hey, so i work both on SP13 and SP16 on-prem and in Office 365, and the methods are all the same, since the API is mostly similar (very very minor variations between on-prem and cloud). Most commonly, i use the Script Editor webpart. It's predictable and works well every time. For interfacing SharePoint, i'll either use the REST Api or the JavaScript Object Model. Some of my peers use add-ins (apps) still, but it's less common now, especially on-prem since it uses iframes to display as a webpart. More common now is to use SharePoint Framework webparts, if you're interested, please check it out - it's awesome and it's released! So, for your actual question, my development methodology is very simple; I write my code using TypeScript, and compile it with webpack, then deploy by using a small PnP Powershell-script. The code I ALWAYS PLACE in either SiteAssets (if i'm developing for a team site) or Style Library (if it's a publishing site). I build locally by using webpack --watch, and whenever i want to test it i run the Powershell script. Since i'm using TypeScript, i can usually focus on the code for long durations of time, and then just iteratively deploy it to test. For tooling, i use VSCode and ConEmu for the watcher-process. [Here's an example of a deploy-script](https://pastebin.com/B6BWgxwN)
[removed]
Thank you, that's really helpful!
Having worked in a place where the person in charge suffered terribly from [NIHS](https://www.techopedia.com/definition/3848/not-invented-here-syndrome-nihs), this sounds like you are headed down a frustrating path.
Using jQuery instead of Angular or React or {{ insert_shiny_new_framework_name }} and some library to do the routing is NIHS.
Yes, of course! Have fun. I wish there were more hours in the day to play with all the toys.
Your comparison strikes me as a bit naive, but I like your enthusiasm and curiosity. The brutal downvotes here are uncalled for. I would heartily encourage you to take this on as long as you don't intend to unleash your first attempt into a production deployment environment. Please check out the following libraries and see if they are to your liking - I think they align well with your stated goals. https://github.com/Raynos/mercury https://github.com/substack/hyperx https://github.com/Raynos/main-loop https://github.com/Matt-Esch/virtual-dom If you poke through the associated GitHub pages, I think can find some other good libraries and slides from presentations. Happy coding!
It's true, you can save hours of configuring Redux with days of debugging 2 way bindings 🙃
Debugging happens once in a while let's say.
OP's original post has been on my mind lately, because both my teen-age son and teen-aged nephew are very interested in learning programming. My local university starts CS students with C++ and outputting to the command line, which seems a good approach for people wanting to pursue a career. But I don't think it would hold the attention of someone with a casual interest in programming; it seems too abstract to me vs. something interesting, like building a web page. Also, I'd guess OP's experience with learning javascript is more in the way of learning the basic syntax and maybe moving up to using JQuery or something and using a fluent interface. I think maybe someone wanting a basic knowledge of programming might benefit a lot from getting exposed first to OOP, and some basic design patterns (MVC, composition, etc.). I don't think Javascript's a good place to do that - maybe with some of the new syntactic sugar (like ES6 classes), but I think you reach a point in javascript pretty quickly where you need to start grasping more advanced concepts (simulating call-with-current-continuation, monads, async vs. synchronous programming, etc.). All said, wish I had a good way to introduce my kids to the subject. Node is a little too-deep-too-fast for them, and they should understand generally how to do things on the back end. Maybe building a "Hello, world" app in Laravel (PHP) would be a good place to start.
well, webpack dll plugin, split app to chunks, and if build speed is pivotal, have your vendor chunk in git.
Naming semantics aside, you want to build your own frontend framework. Rather than tell you this is a bad idea, I would encourage you to research existing libraries and frameworks. Focus on what they get "right" and what they get "wrong" (according to whatever metric you decide). Can you build something that meets all of your needs cheaper—in terms of time spent developing now and debugging later—than it would take to use an existing framework and work around the things it got "wrong"? If so, go forth and build your own. If not, pick something that exists and build atop that foundation. If you just want to learn how it all works, this exercise applies, but you'll want to dig deeper into the source code to see how the existing solutions work.
We agree for the most part. C++ and CLI is no place for a casual developers. MVC, OOP, FP, etc is the logical next step for sure. JavaScript is squirrelly at times, and the constantly-changing standard can be confusing (thunk/Promises/async-await for example). I was addressing his actual question about what he could do to bolster his resume to support the JavaScript learning he recently acquired. If he doesn't have real-world experience, then mini-projects on GitHub or BitBucket is his best bet. Development using a different language would be moving in a different direction. Now, as for your son and nephew, that's a different thing. A thing I'm also very interested in for my kids. About a year ago, I purchased a set of tutorials put out by Youth Digital that taught kids (my daughter is 10) to develop Java add-ons for Minecraft. It was perfect. She and my son really enjoyed us working together to make all sorts of crazy hacks and things. It was good for us to talk about programming and have something to do that we all enjoyed. Now that they are getting older, I'm looking for that next step. You might be onto something with Laravel. I've played with it a bit, and I like what I've seen. Also, you're right about PHP being easy and forgiving. It sounds like you're actively searching for a answer for them, if you find it and think of me, let me know what you've come up with. I'm genuinely interested. Good luck!
Backbone is perfect! You can choose to use Marionette on top of it but I feel like Backbone, jQuery and Underscore/Lodash will be a fine combo for you. 
There's definitely ways around it but we wanted to reduce boilerplate as well because as I mentioned before, we wanted something that took these things into account from the ground up. It really helps when we jump onto different projects - rather than needing to use something like a yeoman generator or boilerplate app, we can simply use hopp. hopp also supports mapping concatenated bundles so that you can avoid the build process completely for files within the same bundle. Let's say that we split the code base into two chunks: one with our own code (i.e. angular controllers) and one with the vendor chunk. When a watch task is running and we hit save on the file we are currently working on, hopp only rebuilds that file and uses the prebuilt parts of the bundle for the rest. With pure webpack, the entire bundle would still get rebuilt - though it would take less time with the vendor chunk factored out. This isn't an attempt to replace gulp or webpack (we're working on getting a webpack plugin up right now). We feel that there's different use cases for each.
I thought I was missing something. I'm reading through this thinking "What the hell? This is something web servers have done automatically for 20 years now" Fuckin' modern web development. Re-inventing every wheel possible. 
`strings` here is an array of strings that is static text between the expressions inside a template string. i.e., in the statement: upper`${p.last}, ${p.first}` You have 5 things -- first is a blank string (proceeds first replacement), next a replacement, `cooked[0]` followed by `, ` (this is `strings[1]`), a second replacement `cooked[1]`, and another blank string (trailing last expression) To show this a bit further, if the statement was instead: upper`${p.first}SOME_SEPARATOR${p.last}` It would be `SOME_SEPARATOR` instead of a `, `. The replacements are passed as additional arguments to the tag template function, typically people use a rest parameter to convert it to an array. You could also use the signature... function upper (strings, last, first) {} But then you lose ability to apply it generically, and to iterate over and do things with replacements.... there's a reason these get converted to arrays.
The minute they expose the Garbage Collection API via WebAssembly, I expect C# to explode onto the scene. Especially now that they've rewritten the whole thing to be far more granular and modular, thus not needing the entirety of the .NET framework anymore. 
Good stuff! I'd think this to be a step in the right direction, but could go a little bit further. I'd recommend using the [sub-resource integrity feature](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity). 
&gt; If you're trying to explore ways to organize your code better, I like a top-down development approach: basically, write code that uses an imaginary framework which exposes your dream API, then go and implement the API and corresponding tests. this.
Doesn't an Etag still require a request?
I wonder how much overhead / annoyance dealing with [interop](https://guide.elm-lang.org/interop/javascript.html) is. A huge chunk of code I see javascript is just to communicate between libraries other people have written.
Javascript is an extremely forgiving language to pick up, but can give you bad habits for other languages. You can use non-declared variables. It doesn't have strict type declarations by default. It's far easier to create visual interfaces using html elements styled with css in a js program than in most other languages. You have access to the chrome and FF dev tools which are extremely useful. You can literally program in any os with a text editor. (And you have a lot of good editor options available.) With only a week of studying on w3 schools or MDN you should be able to create some simple interactive programs. I think if I were to name two big problems with js it's this. 1) It gives bad habits and accommodates lazy programming. (You can move on to typescript, which is a javascript superset to address this.) 2) There's a library for everything, but everything requires a library. I'm still a novice at js, so by all means I defer to a more experienced programmer, but this is my take on it. 
If you want to get into single page applications, check out hyperapp, it's minimalistic and easy to get started. Otherwise, start with node.js.
I would think this would be much easier to accomplish with DOM elements than drawing everything in Canvas.
Create a branch off master, call it `bower` In this branch remove `dist` from gitignore. Once anything is merged to master, merge those changes back into bower, recreate dist and tag it. Or.... slightly easier solution: Don't support bower.
Brilliant. Thank you so much for all the resources and advice.
It's very likely that I will start with a simple DOM version. :) My concern is that I want this to be scalable. From small backyard gardens, to much larger ones. I've already run into the lag that comes from intricate dom menu structures in the past, and that memory intensive process is something I'm looking to avoid if a viable alternative exists. I could just be overcomplicating my work though. I've been know to do that. 
There are times when you want to use the second parameter to handle rejects -- it works slightly differently than using catch. (Though catch can be written as `.then(null, () =&gt; {...}`); If memory serves me correctly `then(f1, f2)`, the `f2` does not catch errors from `f1` -- it only catches errors from earlier up the chain. [Promise Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) In general, I never use it and I'll use `catch` early and then continue the chain from there.
My experience of webdev is that I started making websites for fun in the late 90s (1998 on Netscape Navigator and Notepad, of course), and continued doing so into the mid-2000s, until I started a different career and became completely unaware of anything that was happening in this industry. The sites I made in those days were rudimentary and only used HTML (and then CSS once that came out). When I changed careers into web development three years ago, so much had changed from what I remembered, not the least of which being responsive design and JavaScript everywhere. I heard many references to the horrors of the old days and lack of browser consistency. Things certainly have changed a lot, and it's interesting to look back on.
I don't think you will run into performance issues manipulating DOM elements. Use CSS transforms for animation and positioning and it should be pretty efficient: https://codepen.io/lemmin/pen/LLdqzV
Maybe you could use openlayers for this?
That's great and all, but you still cache the .html file right? So your original issue still exists, and all you've done is re-invent the wheel again. Way to go.
.then() takes two parameters because [the A+ standard for Promises had a .`then()` which took two parameters](https://promisesaplus.com). `.catch()` is an addition on top of the pre-ES6 standard. But inside the source code for V8, and presumably other JavaScript engines, .catch() literally calls .then(undefined, fn). Seriously, here's an excerpt from [V8's Promise.prototype.catch() implementation](https://chromium.googlesource.com/v8/v8/+/master/src/builtins/builtins-promise-gen.cc#1366): // ES#sec-promise.prototype.catch // Promise.prototype.catch ( onRejected ) TF_BUILTIN(PromiseCatch, PromiseBuiltinsAssembler) { // 1. Let promise be the this value. Node* const promise = Parameter(Descriptor::kReceiver); [SETTING on_resolve TO undefined HERE! - /u/csixty4] Node* const on_resolve = UndefinedConstant(); Node* const on_reject = Parameter(Descriptor::kOnRejected); // [I DELETED SOME CODE THAT CHECKS SOME THINGS - /u/csixty4] // [THE LINE BELOW CHECKS THAT THE BUILT-IN "THEN" HANDLER IS BEING USED - /u/csixty4] BIND(&amp;if_internalthen); { Node* const result = // [THIS IS IT! IT LITERALLY JUST CALLS .then() WITH on_resolve = undefined - /u/csixty4] InternalPromiseThen(context, promise, on_resolve, on_reject); Return(result); } Edit: historical note about A+
Ah yes - I just ran across the docs that `catch` is `then` in wolf's clothing. Thank you.
Depends on your dedication, I'm 4 months in and I am able to create full websites in react/angular 2/vue and I hardly tried in the first 3 months. So it's possible but only if you stay consistent and learn by building and not watching tutorials all day. 
Why would you cache your html file? Your html file contains the file signatures for any bundles your application needs. If you cache it, your user would never see updates unless they manually busted the cache, which isn't something you should expect they do, obviously.
Remember `catch` is a keyword in JavaScript, so under `es3` you couldn't write `.catch(...)`. You either had to write `["catch"](...)` or `then(null, (...))`.
Actually I got it everyone, just had to eat dinner and take my mind off it, haha! The issue was that I was setting minVal outside the top-level loop, so after it found the first min (1) it held that for the rest of the iterations of both loops. Also the use of Math.MAX_VALUE seemed to give some issues causing the list to overflow and give undefined or something, Math.MAX_SAFE_INTEGER causes the same problem. I found the solution that works best to be to keep track of the largest number when the array is created, before it is passed to the sort function, and to pass the largest number to the sort function as well, then set a separate variable equal to that number at the start of each for outer loop. This achieves the same goal, that is always having a minimum number larger than all numbers in the array, without weird overflow issues or whatever.
Because not everything is continuously deployed minute of every day.
No, but let's say you have a vulnerability in either your code or a library. If you cache your html at all, you risk your client never receiving the patched bundle until the cache expires. You definitely don't want that, I'd hope. Your html, in a SPA, is generally the smallest bit of code you're sending. So, why cache it? Especially if it's only sent when a user initially navigates to your site.
IMO the author should put at least one example in this post, it would help the understanding immensely. Having to download a package only to discover it wasn't exactly what you imagined is frustrating.
That's awesome! Thanks for the share. 
When i first looked at it, it said to be inspired by elm. Ahh, Looked at its [changelog](https://github.com/yoshuawuyts/choo/blob/master/CHANGELOG.md), state became mutable in version 5
https://www.reddit.com/r/javascript/comments/6knfkw/i_want_to_learn_javascript/djncmnc/
I'm not good enough with what you're working with to understand exactly what may be going on, but my guess is it has to do with Truthy / Falsey values in JS. Here's some info on the concept: https://j11y.io/javascript/truthy-falsey/ I have a coworker who runs into stuff like this all the time because he used to more strict languages where 'hi' isn't True, and '' isn't False. 
Jesus people, not everything is my way vs your way, my way is better than your way. All these things are just tools to add to your belt. Use it if it suits you, otherwise don't. IMO we don't deploy until the version warrants it and when it's fine we use query strings for versions. Little updates and fixed and testing are done on the dev server so caching isn't a problem. Anyway, to each their own.
Its a timing issue. When your script executes your selector is not present in the DOM. Hence the null. When you go to test it in the console the element is present. 
Ahh okay, should I pause use a delay?
I'm not sure if you're barely starting off, but the same thing will happen a TON more times in the future. Sometimes the best thing to do is just to take your eyes off it, eat or sleep and then come back to it and the problem is almost always blatantly obvious! Glad you got it solved!
Im not new to programming but I'm relatively new to some of the nitty gritty stuff of JS. Most of my coding in the past has been school assignments and such.
lol yea. I'm really waiting for a day to drop supporting bower. btw. I found a similar solution. It's from what jquery guys do. They make a branch, commit with dist files, tag the commit with version, remove the branch again, push the tag.
If you have another solution, I would like you to share it here. I want to know what other options are available.
Lol. As if JS had a good reputation...
Care to share?
But Haskellers *also* talk about universes (in the logic sense). :/
I've used both Elm and Miso and Miso is very similar to Elm but with Haskell's superior type system. Sharing code between server and client is also very nice.
That's fair, but universal has meaning in common parlance. It can mean many things. Isomorphism is a very specific mathematical term that isn't widely known, plus the target audience isn't likely to know what the term has come to mean in the JS world. Someone on the /r/Haskell thread initially thought the description was referring to some literal Isomorphism. 
typeof just tells you the type of object it is. checkout JavaScript: The Weird Parts
I agree with you ([proof](https://github.com/dmjio/miso/commit/ea5ae51f89e75f5bb4d4800cb99844e2a78a7a2a)). `:/` should have been `;)` :D
Over the hood ReactJS
Since you're using jQuery, just wrap it in `$(document).ready()`. You could also add a listener to the [DOMContentLoaded event](https://developer.mozilla.org/en/docs/Web/Events/DOMContentLoaded). 
yes it is possible to get the basics in 2 months but you got to put more hours into it for practicing what you have learned which is important and try implementing it in any real life scenario no matter how small or silly it may be, doing that will make your basic concepts more stronger.. 
Why the fuck it uses jsx..
Yeah, I have checked it out recently and I like that it is tightly coupled with LoDash. Also, the architecture looks good for me. But I haven't checked the source code yet 
Hey there /u/tigers444, what you're looking at is React code before being transpiled. It looks like CSS because they are declaring CSS to use on the React components. I believe it is possible to integrate React with SquareSpace but I don't think it will be easy if you are not comfortable with React. Hope this helps at least point you in the right direction.
in the off chance this isn't a school assignment and you aren't yet familiar with the builtin JS methods, you can also just use [sort](http://mdn.io/sort), as in `[6, 4, 9, 1, 0, 23].sort()` 
Would be useful to explain the problem and then show working on how the problem was resolved, rather than just posting a link to a repository in GIT. We're getting a lot of this lately, it's not really useful. Even the readme is poor. Edit: punctuation isn't a strong point
Haha its actually not, i have just been doing small practice assignments to get better acclimated to JS and put on my github. Im way more familiar with jQuery but I figured its best to undersrand JS at its core so its a little work to get adjusted to. Most OOP ive done was in java so yknow, vast differences haha. I was manually coding different types of sort for practice.
I'll get into the habit of not making obvious mistakes eventually, thanks!
I'll have to update my code tomorrow then. Its wierd, I'm currently reading You Don't Know JS and I'm not struggling much with topics like implicit coercion and prototyping, but then it comes to actually coding and I still sometimes write int i = ... In my for loops out of force of habit from java, or forget that you can pass functions in JS. I dont know how people master all these topics haha I dont think my brain is abstracted enough to plan out complex code.
Im a rising senior in college though and a front end dev intern hahaha. I mainly do CSS :( but Im really good at logical thinking and debugging so I think ill be aight. 
You seem sad :( ... Here's a picture/gif of a cat. Hopefully it'll cheer you up: http://random.cat/i/mcmVa7B.jpg ^^The ^^internet ^^needs ^^more ^^cats. ^^It's ^^never ^^enough..
link doesn't load for me.
[We all need kitties in our lives](https://imgur.com/gallery/xdapP)
hi shadoproxy - the image or the codepen? actually I'm going to edit the post and put the script inline
the codepen. i just get a blank page.
yeah, it's just a script, no actual DOM or visuals. trying to work out why the script would result in a memory leak. the script is inline in the post now, might make things clearer.
you're re-attaching the dom events every 50ms is my guess. move that out.
does the removeEventListener not remove them in the same script block and allow garbage collection to occur?
it might be re-adding them before they get removed. Why are you doing it in the test() function that gets called every 50ms?
Is it causing a memory leak? My knowledge of this is low but my results from chrome's memory profiler are the same. It looks like the heap is growing as the GC only partially removes nodes (lazy GC?), then, in one go removes all and the process repeats. Am I missing something here?
That makes sense, I suppose you don't really need to keep the branch open.... as long as it is tagged, bower should be able to pick it up I think
Looks like addEventListener doesn't return the listener function, so none of the listeners are getting removed at the end of each test() call.
Worth checking out: [Anime.js](https://github.com/juliangarnier/anime), [Matter.js](https://github.com/liabru/matter-js) and [WhitestormJS](https://github.com/WhitestormJS/whs.js)
This is actually pretty cool. Just one thing: &gt; Surprise, surprise, our favorite &lt;div&gt; and &lt;span&gt; can be used in Ink components! They contain zero functionality, but are useful for grouping elements, since JSX doesn't allow multiple elements without a parent. JSX doesn't care if you return arrays, in which case a component could return: `const Demo = [&lt;A/&gt;, &lt;B/&gt;, &lt;C/&gt;]`
I'm trying to learn how to prevent dom and event listener memory leakage. I've set this up as a test case to check whether I'm doing everything correctly. You've made me think of something - I'm using addEvent and removeEvent incorrectly - I should have a handle to the actual listener function, not a return value - e1,e2,e3 don't hold anything useful. I'll change them to point to the actual listener functions - maybe that is the cause.
Idea seems nice, but syntax feels weird.
thanks ally67, I noticed this whilst replying to shad0proxy - I've altered the script now to add and remove correctly, but it still shows memory leakage. I updated the image link.
This is what etags are for. https://en.wikipedia.org/wiki/HTTP_ETag
**HTTP ETag** The ETag or entity tag is part of HTTP, the protocol for the World Wide Web. It is one of several mechanisms that HTTP provides for web cache validation, which allows a client to make conditional requests. This allows caches to be more efficient, and saves bandwidth, as a web server does not need to send a full response if the content has not changed. ETags can also be used for optimistic concurrency control, as a way to help prevent simultaneous updates of a resource from overwriting each other. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/javascript/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
hello. This is my first "library" with js and first time tinkering with chrome extension. I'm trying to learn more about js, so feel free to fork and improve the script. 
A server generated unique string which stores data. Please google it: JSON web token.
Here are some great animation tools I've recently discovered on the web https://www.templatemonster.com/blog/html5-animation-tools/ . They can provide you with the most advanced animation features you need to create a powerful animation.
Stop encouraging people to write cli programs in node you sick puppy
Nice thx, I'm going to check it and try to integrate.
You've not actually describe what your library or framework is doing so there is no way we can advise you what to use.
Thanks, I edited the post to clarify.
I don't want to sound harsh, but to me it looks like developing a framework is currently a bit above your head. You seem to have a lot of misconceptions about all the pieces you want to use. Vanilla js for example is not an actual framework or library. It is just a term to describe plain javascript (although there is a joke page, which pretends to be a framework). Furthermore we have no idea of what you actually want to build, so we cannot really make an informed decision of what stack might suite you. It would just be wild guessing and assumptions.
By vanilla JS library I mean the old JS library in vanilla JS (the old style). I have enough knowledge on developing a framework (I've done it several times in C++), but you are right that I'm quite new to "modern JavaScript development" and I'm not familiar with NodeJs, Webpack, etc etc. 
When you bust but she keeps caching
I agree with you, but in the future you can just click `Test simple-id in your browser.` on the package page and you can run the package https://runkit.com/embed/bayagwn8b9io
moar like tech sack am i rite fellas?
I'm confused by the point about it being _drop-in_?
Not everyone serves bundles whilst controlling the server architecture. We're not in 2005 anymore
The codepen you linked is using canvas though. :D
This seems like a stripped down version of https://github.com/Yomguithereal/react-blessed
That's fine too as long as every resource that should change is versioned and every resource that hasn't changed is left as it was. If you can do this perfectly every time great, but on the 4,000+ file projects I work on automating this into the build procedure is a must. (My version of this is far less complicated but this is something we've done for years now)
 const sortFrom = from =&gt; { const hours = Array(24).fill('').map((_, hour) =&gt; String(hour).padStart(2, '0')); const index = hours.indexOf(from); return [...hours.slice(index), ...hours.slice(0, index)] } console.log(sortFrom('17')); // ["17", "18", "19", "20", "21", "22", "23", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16"]
What he means is that you're looking for a solution before having a problem. Or at least that's the position we are in. If your framework is for making WebGL based 3D games then it has different needs than a framework to aggregate data from open web APIs or a framework to generate PDF reports via JS. Knowing what you are building helps identify the requirements/scope and thus lets us weed out the things that don't apply or that will get in your way.
Reactiflux on discord
Because you _specifically_ asked about modulo, it works like this: 17 % 24 === 17 24 % 24 === 0 5 % 24 === 5 And you could maybe plug something like this into your function: for (let i = selectedHour; i &lt;= (selectedHour + 23); i++) { sortedHours.push(String(i % 24).padStart(2, '0')); }
That usually means that you've got code in place already, and the replacement code doesn't require you to rewrite the rest of the application. The idea is that you'd code it the quick, easy way first (javascript) and then re-code the performance sensitive parts in WebASM and not have to write any of the javascript around that area.
https://marketplace.visualstudio.com/items?itemName=Compulim.vscode-express https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint https://marketplace.visualstudio.com/items?itemName=vladmrnv.expresssnippet
/u/tunnckoCore thanks for posting it! You're actually way ahead of schedule, I was planning a late release. I don't even have an npm name yet :) But thanks anyway!
Hm, last time I tried ``` const Demo = () =&gt; ( &lt;A/&gt; &lt;B/&gt; &lt;C/&gt; ); ``` JSX transpiler (babel-plugin-transform-react-jsx) was erroring.
of course I can. It took me 5 days to trace you and now no computer for a week
As I said above, this post is way ahead of my release schedule, so there might be lack of details here and there. Would be actually useful if you pointed out a few things of why "the readme is poor", otherwise I can't do anything about it. Briefly, generating strings isn't a pleasing way to build CLI output. And when it comes to testing the output, it gets even worse. I'm the member of AVA team, we have multiple different output versions and all of them aren't small and simple. Managing them, making changes, ensuring the rest of the output stays consistent, testing - those are hard tasks to do at the moment. By introducing components, I hope to bring React's reusability and functionality isolation to the process of building CLIs. Will see how it goes.
It looks interesting. If I were you I would explain more how it works. Can you explain why you did it as a chrome extension 
Not really, `react-blessed` is targeted at, what I call them, dashboards or full-screen tools. If you want to build that kind of CLI, Ink is a bad choice.
Each run returns same results... is that ok?
We have 3 or 4 bundled files max, so it didn't matter how many development files change, your not including 4000 files in the html document. So at most you have to version 4 files. With us the version number is a variable in the string, so when the server updates its version number all is updated. No cache issues.
that's the same as returning three functions: `() =&gt; (h('A') h('B') h('C'))`, it doesn't make sense in javascript. But `() =&gt; [h('A'), h('B'), h('C')]` is valid. It's currently a problem in react that it doesn't do this while jsx always could. [They've finally fixed it now in v16](https://twitter.com/threepointone/status/810058843325546496?lang=en).
That snippet generates 5 different ids for me
Exactly, but not all people know this workaround. I've seen multiple times when they tried to just return multiple elements from a component, without a wrapper element. After all, from the official docs (https://facebook.github.io/react/docs/jsx-in-depth.html#jsx-children): &gt; A React component can't return multiple React elements, but a single JSX expression can have multiple children, so if you want a component to render multiple things you can wrap it in a div like this.
That’s not an array. 
Yeah, I should probably explain how it works, in a nutshell it checks if the name you typed exists in the list of libraries uploaded to cdnjs.com (https://api.cdnjs.com/libraries) I have made a copy of the latest libraries from the API and saved them in GitHub for modifications, since the API #1 does not contain all but latest libraries #2 so anyone can add their libs to the custom list. Why I created the chrome extension? Well, I wanted to try making extensions but at the same time I think lots of people who might need the same feature can install it, aside from that ... I don't know how inject your code into an online website to add features to it aside via extensions. 
Yeah especially if you have an SPA it's only 1 file to edit, I get it. Just curious though... within your bundles how many of the sub-files actually change per release? I've seen a bunch of apps (non or partial SPA) force a new bundle when only 1 file in a bundle of 10 changes. :-( 
You seem sad :( ... Here's a picture/gif of a cat. Hopefully it'll cheer you up: http://random.cat/i/RaGXpf1.jpg ^^The ^^internet ^^needs ^^more ^^cats. ^^It's ^^never ^^enough..
So JSX will allow multiple parent elements in newer versions? That will be insanely useful. 
refresh page - it will be same 5 ids. atleast it was so for me.
They'll update it soon, given that it already runs in the alpha. Just pointed it out because it thought it could be useful and squash those divs/spans and since you're not bound to react you can use jsx fully. 
Ah, you mean like that, sorry. It's probably cached, try to clone and change something and you should get new results
Cool spam bro.
so essentially, it all seems to be up to the garbage collector. When I do correctly create variables within the function (not global) and detach handlers, remove dom elements, etc. etc. the allocation does still climb but the GC kicks in every now and then and cleans it all up. There's still some odd behaviours / questions I have. - the node/listener counter in chrome profiler seems to record 9 for every 3 added...at some point it only showed this for nodes, but in my latest profiles the listeners also go up by 9 instead of the 3 it should be. - event listeners seem gc resistant - often the only gc which would clean them out was one called 'Full sweep' by chrome profiler. - the low level memory usage after a gc is still greater than the last which implies there is something still filling up memory slowly even though nothing else is running on the page. I'm done with my query - unless someone else wants to add in some thoughts, otherwise I think I'll just move on and assume I'm doing things okay and what I'm seeing is just browser memory management oddities. 
Wrong subreddit
Its not spam dear...... read the article and then say
VS Code itself comes with enough features to make Web development enjoyable. With that said, the following plugins are not specific to Web development, but are plugins that have become the norm: https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
Honestly you’ll be fine. Just keep writing JavaScript and you’ll get used to the subtle differences in no time. Don’t view it as a deficiency on your part. 
nice explanation... thanks
Do podcasts count? https://devchat.tv/ 
Hi /u/feldgendler, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Does it have any dependencies ⁉️
I'm surprised bobril is an inspiration. didn't know anyone even knew about it
For me: Necessary: ESLint and Beautify. Useful: "Auto Rename Tag", and "Close HTML/XML tag".
Shit man you beat me to it!
I've always found it hilarious that they abbreviate as "pos". Yeah, you do make pos software.
Looked at the article. It appears somewhat irrelevant to this sub-reddit (unless it is the start of a series about implemented a POS system using Javascript). The blog name suggests a web development slant, but there is nothing in that article that is specific to that. You've posted similar articles in the recent past. The spam accusation probably comes from the fact that these could to a cynical mind (and many of us here have one of those!) look at bit like "articles to hang adverts off and post far &amp; wide for impressions".
I've recently found that a well curated Twitter can prove *very* informative.
You're saying things like TypeScript are 'malfeatures'? No way, totally disagree! I think we're getting a glimpse of the future with stuff like that. Even though I hate CoffeeScript, things like it and other compile-to-JS languages have helped push the language forward quite a bit. The best bits from those kinds of things usually make it into the standard in one way or another. Unfortunately, because of compatibility constraints, transpilers will be a necessity for a while if you want to write the latest features of the standard.
Tail call optimization is turned off in the inspector. https://cs.chromium.org/chromium/src/v8/src/full-codegen/full-codegen.h?rcl=2f7ab9322f321c5e122a5a57cb27e20a2fb9e6d0&amp;l=501
Ultimately it's a matter of preference for the team. If everyone uses Flow then go with that. Nowadays I would never dream of starting a project without a type checker, it just elevates the quality of the product so much and provides too many benefits to just skip out on.
One question: why???
I tend to prefer `.catch` whenever possible as well, but there are the cases where in the case of `then(f1, f2)` where you never want `f1` to trigger if the promise rejects, but you also don't want `f2` to catch any rejects that `f1` throws.
https://github.com/vadimdemedes/dom-chef/blob/master/package.json "dependencies": { "lodash.flattendeep": "^4.4.0", "lodash.omit": "^4.5.0", "svg-tag-names": "^1.1.1" },
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [vadimdemedes/dom-chef/.../**package.json** (master → c9bc0f7)](https://github.com/vadimdemedes/dom-chef/blob/c9bc0f73ae984e00f2a227aaed1292fa03407a7b/package.json) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djq3iym.)^.
https://github.com/sindresorhus/refined-github/issues/539
Yes, that was the purpose of an example that errors.
Have you experienced any noteworthy downsides?
React Blessed was also implemented and tied directly to React 0.14 internals which in hindsight was a bad choice since there isn't a good upgrade path for it.
The prestige.
Sounds like you just need babel.
Would you care to share some of theses curated tweeters ?
Eslint with no-unused-vars would be a good starting point. 
Good one! We're already using that, I was removing some unused modules just now :) 
Ah, good point. It was pretty late when I posted it. I meant it in the sense that the code that you're translating can be functionally identical - you can drop in a WebAssembly port of something and have it work exactly the same.
No, it's definitely spam. I don't know if someone is actually paying people to write this junk, because it reads like someone wrote it for a school project -- they don't actually know what they're talking about, they're just parroting what they've read elsewhere. Zero practical advice, just a bunch of words lightly correlated with the topic.
I can only answer this one based on the time I've spent writing Typescript. No. No noteworthy downsides at all.
Medium is nice. A couple of people I follow: Tom Langier, James Gillmore, Eric Elliot, Adam Neary. Also follow Airbnb engineering, Several people are typing (Slack blog). 
My vote would be JavaScript or Python. One thing that can make JavaScript difficult is the async io. Both of these languages are on codecombat.com and you could finish that course in a couple of dedicated weeks
This is a really good overview - I have been looking for something to sort of clean up my understanding on async operation in redux/react and this article was a huge help.
Thanks to know that :)
hehe ... sorry. You can always fork and help me improve it as I am a complete newbie at this 
What are the advantages of it compared to RxJS ? 
It's either advantages **HAVE** or advantages**'VE**, but never advantages **OF**. See [Grammar Errors](http://www.grammarerrors.com/grammar/could-of-would-of-should-of/) for more information.
I ran the test without the inspector open. I did print to the console though. 
**Digests**: [JS Daily](https://twitter.com/JavaScriptDaily) - JS projects, articles, repos/libraries, etc. Covers pretty much everything tangentially javascript-related. **Devs/Designers/Advocates**: [Nicolas Bevacqua](https://twitter.com/nzgb) - JS developer/consultant, has a number of published JS books. [Axel Rauschmayer](https://twitter.com/rauschma) - JS consultant, dev, and blogger, runs [@2ality](https://twitter.com/2ality), and if I'm not mistaken, posts here as /u/rauschma. [Jeff Zeldman](https://twitter.com/zeldman) - One of the co-founders of the "A List Apart" email newsgroup from back in the day, does the A * Apart conf, books, website, etc now/still. [Sean Larkin](https://twitter.com/TheLarkInn) - Webpack core dev. [Tyler McGinnis](https://twitter.com/tylermcginnis33) - Partner with Ryan Florence at [React Training](https://reacttraining.com), sends the [Front End Newsletter](https://twitter.com/frontend_news) email digest. (though I think it's on hold for now). [Ryan Florence](https://twitter.com/ryanflorence) - Partner with Tyler McGinnis at React Training, tweets a lot about React Router. [Ben Halpern](https://twitter.com/bendhalpern) - Created [@ThePracticalDev](https://twitter.com/ThePracticalDev), and co-founder of a company that is built off of the account, [dev.to](https://dev.to). [Ken Wheeler](https://twitter.com/ken_wheeler) - Director of OSS at Formidable Labs, warning: angry tweets a lot. [Dan Abramov](https://twitter.com/dan_abramov) - The man behind Redux, a state library often paired with React, now works at Facebook as a dev. [Sebastian McKenzie](https://twitter.com/sebmck) - The man behind Babel, also works at Facebook. [Leland Richardson](https://twitter.com/intelligibabble) - AirBnB dev **Organizations**: [The Practical Dev](https://twitter.com/ThePracticalDev) - Tweets about all things software development and links to its paired discussion communitee, [dev.to](https://dev.to), a smaller-scale Medium-style publishing platform for developers. Also hosts [#DevDiscuss](https://twitter.com/search?q=%23devdiscuss) discussions on twitter every Tuesday evening (US time); follow their dedicated [DevDiscuss account](https://twitter.com/DevDiscussHQ) as well. [React Training](https://twitter.com/ReactTraining) - React Training's twitter account. [Hackernoon](https://twitter.com/hackernoon) - General tech articles, but a good amount of JS content. **CSS/Other Interesting WebDev/Tech folks**: [Jen Simmons](https://twitter.com/jensimmons) - CSS extraordinaire, dev advocate at Mozilla, I consider her *the* authority on CSS Grid (her and [Rachel Andrew](https://twitter.com/rachelandrew) do a ton of CSS stuff in general, but focus a lot on Grid and other layout in their conf talks) [Chris Coyier](https://twitter.com/chriscoyier) - CSS-Tricks/Codepen.io guy [Sarah Drasner](https://twitter.com/sarah_edo) - Contributor to CSS-Tricks, designer/CSS specialist [Brad Frost](https://twitter.com/brad_frost) - Another CSS master [CSS-Tricks](https://twitter.com/real_css_tricks) --- There are a lot of others, of course. Definitely try to follow the major frameworks, like React, Vue, Angular, Webpack, Grunt, Babel, Node.js, etc that have accounts, and any frameworks you use or may use. (heck, just follow any that you come across that you want; it never hurts and you may see something that will push you to try something new)
Check out [dev.to](https://dev.to) It's similar to Medium, but built specifically for software developers. Ben Halpern built it after success of his (at the time) satirical dev twitter account [ThePracticalDev](https://twitter.com/ThePracticalDev). Edit: Also checkout IRC chats; I know ##javascript and #reactjs are fairly popular and active. (I'm on both)
That's a pretty complete overview. Good job.
Yeah, I just used canvas to visualize the grid since that isn't part of the interaction. I just meant the interactivity would be harder to do in Canvas. It would actually work the same if you deleted all the Canvas stuff from that pen. You just wouldn't be able to *see* the grid.
Thanks!!!
Boris Letocha invented a more efficient child reconciliation algorithm that all subsequent virtual dom implementations basically copied verbatim. He matches on children nodes by drilling in from both sides of a list. Indirectly, Bobril is used by all frameworks. 
Assuming you're talking about lazy loading modules, take a look at this. https://www.slideshare.net/mobile/nirkaufman/angularjs-lazy-loading-techniques
Couldn't you use JSX with [hyperscript](https://github.com/hyperhype/hyperscript) ?
I'm not saying compile to js is bad, I love babel. I'm saying static typing is bad
I would not use `create-react-app`, since it's based on Webpack. While Webpack is *great* for building apps, it is not designed for building libraries. If you are building a library, Rollup.js is the thing to use. The official Webpack blog even has an [article explaining why this is so](https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c). The Rollup.js project has a [starter project](https://github.com/rollup/rollup-starter-project), which you can simply copy and use as a starting point. It uses Babel for es6, mocha for unit tests, and Istanbul for code coverage. To make the demo app, just use `create-react-app` as normal in its own folder/repo, separate from the library. To connect your library to the demo app, run `npm link` in your library folder to make it available on your system, and then `npm link &lt;your-library-name&gt;` inside the demo app. Once this works, you can `import blah from 'your-library-name'` like normal. Finally, go into your library folder and do `npm watch`. This will start Rollup.js in watch mode, so any changes to your library sources will automatically be compiled, which means the demo app can see them and do a live-reload.
Uhh... I think you are misinformed.
post your code 
Can you post your code? If the function is synchronous, the code should be waiting for the function to finish running, so you may have a bug in the function that is causing it to return null. if the function is asynchronous, then it's not going to return anything. Instead the return value will be passed into a callback function and can be dealt with there. If you post code, I'm happy to take a peek and try and explain what is going on.
Working on my first nontrivial node project, I picked up mocha for a testing framework and just used `assert` since it was built-in and the mocha docs primarily use it. I had no idea soft equality was used by default. Yuck. Though the diffs I have seen for failures with `assert` are quite nice, including the object property comparisons mentioned from chai.
Generally just follow so-called 'thought leaders'. https://twitter.com/jonas__jensen is my profile, you can see the people I follow there. 
Wrong
The new [coverage tool in Chrome's devtools](https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage) will let you know what code in each file hasn't executed yet. Also the UglifyJS Webpack plugin will let you know when it finds unreachable code or always true conditions in warning messages while compiling.
It's really not
RE:DOM supports both HyperScript and JSX, it's 2 KB and one of the fastest libraries around (way faster than React for example): https://twitter.com/pakastin/status/881771280760008705 https://redom.js.org
Medium has a lot of quality articles. The tags I follow are Design, JavaScript, React, Vuejs and Web Developement.
Something like standard. You run the command and it goes through your whole project and spits out style warnings, you can run standard --fix to have it autocorrect everything.
Reformatted your code so it's in a format that is more readable (to me). if(evaluatorCheck(strThing) == false) { //do stuff } else { // always executes because evaluatorCheck returns undefined // then its console.log statements show up shortly after this } function evaluatorCheck(strThing) { check = false; //logic that may set check to true return check; } So, a few things. First, you don't have a `var` in front of `check = false;` (it should probably be `var check = false`). This means you are setting `check` as a global variable (more info on that can be found here https://stackoverflow.com/questions/2485423/is-using-var-to-declare-variables-optional). Without looking at the rest of your code, I don't know if this is causing a problem or whether it is intentional, but if it's a typo, you should try adding that `var` and seeing if it helps. Second, in your origional post you mention that the function returns `null`, but in the code you say it returns `undefined`. I know this can get confusing, but those two are different. Do you know which one it's returning? Third, `always executes because evaluatorCheck returns undefined then its console.log statements show up shortly after this`. I assume this means you have a console log in the `else` block as well as in the `evaluatorCheck` function and the console logs in the `else` block get printed before the logs in the `evaluatorCheck` function. Is that correct? Finally, the code you provided looks fine to me other than what I mentioned in the first point, but I have a feeling there is an issue in the `evaluatorCheck` function. Can you post the code that you replaced with `//logic that may set check to true`?
Glad you figured it out. Stepping through in a debugger (chrome devtools) quickly showed that `Math.MAX_VALUE` was undefined, and then it needed to be declared (or reset) inside the loop. Being bored, I noticed you could just track the minimum index directly, and avoid both the problem of having to decide a suitable 'most biggest' initial value, and save the cost of the `list.indexOf` later on, with something like: var selectionSort = function(listIn) { var list = listIn.slice(0); // clone incoming list var listLen = list.length; for (var i = 0; i &lt; listLen; i++) { var minIdx = i; for (var j = i; j &lt; listLen; j++) { if (list[j] &lt; list[minIdx]) { minIdx = j; } } var temp = list[i]; list[i] = list[minIdx]; list[minIdx] = temp; } return list; }; var t1 = [6, 4, 9, 1, 0, 23]; selectionSort(t1); 
that makes so much since. I just assumed first and last name were the only elements in the array. Thank you for explaining it to me, much appreciated.
as someone who doesn't javascript much, was mildly surprised that Array.sort "is according to string Unicode code points" (from MDN). Which results in: var v=[9, 99, 99E99, 1, 0, 3, -100, 0.0, 0.1]; console.log(v.slice().sort()); console.log(v.slice().sort((a,b) =&gt; a-b)); 19:37:26.663 VM1323:1 (9) [-100, 0, 0, 0.1, 1, 3, 9, 9.9e+100, 99] 19:37:26.663 VM1323:1 (9) [-100, 0, 0, 0.1, 1, 3, 9, 99, 9.9e+100] (position of the `9.9e+100` in first vs 2nd results) for reasons I'm not entirely clear on. Possibly stringifying to literally `"9.9e+100"` and sorting on that?
These are the sites that i follow * https://news.ycombinator.com/ * https://scotch.io/ * https://www.sitepoint.com/ * http://uxmastery.com/ Also i am subscribed to this newsletter on angular https://www.ng-newsletter.com/ And pretty much the other links that the community posted here like medium and dev.to.
It's worth noting that before people from Facebook "invented"* JSX, they were using similar syntax as PHP language extension, just for prevent XSS: https://www.facebook.com/notes/facebook-engineering/xhp-a-new-way-to-write-php/294003943919/ *I wrote "invented" in quotes, because JSX is loosely based on old web standard called E4X: http://blog.vjeux.com/2013/javascript/jsx-e4x-the-good-parts.html
I pretty much only use Dart and TypeScript. Optional types + type inference offer the most intriguing trade-off. The code is still very terse since you need very few annotations to make it work and yet you get tooling which is comparable to that of significantly clunkier and more verbose languages. I also really hate writing bloaty JSDoc comments. I rather add some type annotations and some description. Even if you don't add a description, the names and types are usually all you need. I recommend to just give it a try. See for yourself if you think you get enough in return for adding a few annotations here and there.
Eric Elliot is garbage 
[Here's](https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b) a medium article explaining it
NodeJS is relatively new - especially compared to PHP. You'll find it less frustrating if you use what's already out and about instead of searching for something specific. There's a lot of great frameworks for API stuff, like Hapi, Express and Koa. As for CMS, I don't think there's something like Drupal or WordPress, you'll probably have to make your own if you want anything with a lot of features (but you can probably find something that already suits your needs with a search and help them out or fork it). You can run everything on a server or on multiple servers, that really depends on what you need, how intensive your workload is (however Node is kind of best known for dealing well with a lot of work and not that well with little work, compared with PHP and the like). Also, don't go too far into Node frameworks without getting the basics down. It's not PHP, you'll usually work at a lower level in Node, since you probably won't run an Apache instance to deal with requests.
Fail.
[Hashnode](https://hashnode.com/nodes) is pretty nice.
I will repeat with a few additional information. On Medium follow all the JS related tags that interest you and freeCodeCamp is huge. Also, Quincy Larson (everywhere). Funfunfunction is a great YouTube channel, follow it's creater MPJ as well. 
Shameless plug- https://marketplace.visualstudio.com/items?itemName=capaj.vscode-exports-autocomplete My extension makes it easier to split your code into many modules by autocompleting them wherever they might be needed.
"most people" Says who? I work in a large shop, and we use `assert.deepStrictEqual` wherever appropriate. Add reviews to your process. `assert` is simple, and easy. No need to bring in chai.
[ConcatNews](http://www.concatnews.com/)
Working in team. Certainly it's possible to have all the type annotations in your head when working on a project solo. Even in a team of 2 this becomes impossible. Hence we add types.
This isn't a framework. It's a no-api jsx -&gt; dom-node transform. If you've ever had to construct nested dom nodes in javascript you know how messy it gets. Strange actually that no one's thought of it before, this will be quite useful. Considering the load, maybe they come out with a babel transform, it wouldn't have any overhead whatsoever.
Ah right. sort() treats everything as strings by default. so `[4,20].sort()` produces [20,4], which kills the mood. Passing an a-b comparator is the right way to get number values sorted correctly. 
What settings are needed with babel+webpack? Don't they output `React.createElement` by default when they encounter JSX?
Is there a way to subscribe to all of these at once? Like subscribe all or something?
Awesome. I also follow hackernews
What the fuck have you written?
Not exactly news centric but I recently saw this repo on reddit a few weeks ago. Ton of development related links and a section for news and podcasts. https://github.com/sdmg15/Best-websites-a-programmer-should-visit
Why?
G+ page of JsLint 
Plain asserts are a great option. It's very reliable and there is quite a bit of amazing tooling around its foundation. For example, [power-assert](https://github.com/power-assert-js/power-assert) and [unassert](https://github.com/unassert-js/babel-plugin-unassert), both of which are great.
Take [a look here](https://babeljs.io/docs/plugins/transform-react-jsx/#example-custom), you can just define an alternative tag-factory with @jsx bla 
I created a Twitter "List" with all of the above mentioned accounts. Hope this is alright to link: https://twitter.com/Tyler_N/lists/webdev-reddit EDIT: Added attribution to /u/PM_ME_HTML_SNIPPETS
Surprised that I didn't find [Wes Bos](https://www.google.com.mx/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwj2xrbylu7UAhUM4yYKHW-NAroQFggoMAA&amp;url=http%3A%2F%2Fwesbos.com%2F&amp;usg=AFQjCNE9_e6yuAgnghvGwqPvGYTo1ZvHCg) here
I would not start a new enterprise project in es6, unless it's a quick prototype. Both ts and flow should be able incrementally a es6 codebase. If you've already got Babel in your build steps: flow would be easier to pop in and give it a shot. I personally dislike flow depending on ocaml... It just doesn't sit quite right with me. Saying that, it gets the job done either way. And typescript may feel too heavy. I would recommend a tech spike exploring both, put time into setting up both and convert "a feature/ domain" of your app to be fully typed. Then you would be in a far better position to make a solid team decision, knowing the pros and cons of each.
That'd be good to add to the OP's docs.
 places.filter((place) =&gt; filters.type === place.type &amp;&amp; filters.value &gt;= place.value &amp;&amp; ( filters.zone === place.zone || filters.neighborhoods.includes( place.neighborhood ) ) )
Consider jest. It's easy to setup, supports ES6 and has no boilerplate code.
&gt;you can avoid this using strictEqual &gt;But this is too verbose so most of people (from what I've seen) uses equal anyway and risk bugs. Readability counts. are you fucking kidding me? if people use the wrong equality check, you block their code from shipping. if people use the wrong assert, you block their code from shipping. i don't get this point at all. it's like saying don't use strict equality comparisons cause it's too verbose and most people just use `==` anyway. bullshit, use the proper construct to communicate your intent, even if it's a little but more verbose.
I would recommend [JavaScript: Understanding the Weird Parts](https://www.udemy.com/understand-javascript/learn/v4/overview) by Anthony Alicea. Probably all you would need to be honest. Also, wait till Udemy courses go on sale for $10.
This is exactly the answer I want to see. You read my mind! I will give it a try. Thanks
I really like the HOC approach this uses. This seems to be an area of innovation right now (form management) and I look forward to trying this method
I find flow annotations to be much more pleasant to write than proptypes declarations and would recommend starting there. 
Not the tool you want, but prettier will be helpful in taking that mess.
Thanks! Lol yeah I pretty much listed the most relevant JS folks/groups from my lists I've made. You can check out mine below: [Newsletters/Digests](https://twitter.com/gdavis92/lists/newsletters-digests) [Languages/Frameworks/Libraries](https://twitter.com/gdavis92/lists/languages-frameworks) [General tech people (devs, designers, advocates, companies, etc)](https://twitter.com/gdavis92/lists/tech)
Nice! I'll give them a subscribe
great, thanks!
With a BigNumber library. A quick Googling gave me this: https://github.com/MikeMcl/bignumber.js/ Obviously, this won't be as performant as Javascript's native floating point numbers. That probably won't matter for many applications though.
Check out the [Reactiflux](https://www.reactiflux.com/) discord community. There are a lot of active groups related to all things JavaScript and React. 
Here's a related snippet to broaden the discussion: const debounce = (func, delayInMS) =&gt; { let lastEvent = performance.now(); return (...a) =&gt; { if (performance.now() - lastEvent &gt; delayInMS) { lastEvent = performance.now(); return func(...a); } }; }; 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [sketchpunk/FunWithWebGL2/.../**lesson_032** (master → fa6ecc1)](https://github.com/sketchpunk/FunWithWebGL2/tree/fa6ecc10d588f493aefdc8b8d29680ea69da6436/lesson_032) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djqzjn7.)^.
I know it's late to the party, but we use electrode-react-ssr-caching on our server side react build and with the component level caching, we've been able to get our react render time down from ~300ms to ~20ms average per request. It's super easy to configure once you get it hooked up to your prod build. We also do some caching in our alt (flux) bootstrapping/flushing and use pug to render the outer page template, which gives us an average response time of approx ~65ms on AWS c3.xlarge instances and around 6k rpm throughput per instance. https://github.com/electrode-io/electrode-react-ssr-caching
appreciate it! i was more hoping for something people have used and can endorse -there are tons of libraries out there, it's hard to filter out the ones that will bite you in the ass 3 weeks in just by googling.
https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/debounce.md
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [Reactive-Extensions/RxJS/.../**debounce.md** (master → 6879837)](https://github.com/Reactive-Extensions/RxJS/blob/6879837b422f590617beb7c5b94347aad64a8b1d/doc/api/core/operators/debounce.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djr0tt1.)^.
This isn't functional. Reading through `debounce.js`, I saw tons of mutations happening.
Interesting. I hadnt even thought of using splice without specifying a number of indexes to delete to clone an array. I probably would have looped through it. Thanks for the tips.
The implementation isnt functional; but you can use it in a functional context if you consider it a black box. If your goal was to implement a purely functional implementation of debounce for curiosity, and not just to use, then yes this isnt a good answer. The problem you will find is that anything involving timers usually breaks functional languages and they rely upon an exception.
I understand, thanks for the clarification!
I don't think you have a memory leak. GC will clean it up when it's good and ready. Simply removing the event listener and removing the element may not reclaim any memory -- when the GC is good and ready, it will reclaim all that stuff that you've marked as not necessary (i.e. all the removed nodes, event listeners). If you DIDN'T see the drops there, that would be indicative of a memory leak. Uncomment the `nodes.push` line and remove the `removeEventListener` lines - you might see that memory continues to grow and is never reclaimed -- THAT is a memory leak.
Do you want to write your own or do you want to use an existing tool? [Slick](https://kenwheeler.github.io/slick/) carousels are pretty good. Others have created wrappers for React/Angular.
This looks like an interesting approach: https://slmyers.github.io/javascript/functional-programming/2017/04/17/functional-programming-easier-debounces.html
Can you reimplement the entirety of the ES6 class system using object prototypes? Can you tell me what bind, call and apply do and relevant use cases for them? Can you describe the purpose of a service worker and how to maximize their use for progressive web applications? What are some optimizations that can generally be made after a deliverable is produced that might have an effect given millions of concurrent users?
[removed]
Cool! Congrats on making your first javascript game! Here's two tips I think apply to (pretty much) all games made with Javascript and especially your game: 1) Use [window.requestAnimationFrame()](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame). This is the bread and butter of any javascript game. This lets the browser manage your frame drawing in a much more effective way than setinterval. Although for your game it isn't a big deal, it is much better practice to use requestAnimationFrame, and it *will* result in better performance. It's a simple change that is just so much better. 2) Don't tie your player movement directly to the keyboard event listener. As a result of tieing movement to the keyboard event in your game movement is jerky and unresponsive. Instead it would be much better to do something like listen to when a key is pressed down and released and then set a flag to true or false in each respective case. Then in your game loop (should be in a requestAnimationFrame function) move your player if that flag is true. This will result in much more responsive game input. Hope these tips help :) Congrats again on your first game, I hope your game making career flourishes from here on out!
Thanks, I think the above carousel resonates with variable-width carousel of slick. Can i try and decode it? Or do you have any suggestions on doing it?
Would you mind giving a brief example response to the last two questions? First two are easy enough but the second two seem more subjective.
&gt;Can you reimplement the entirety of the ES6 class system using object prototypes? ...no? Probably not. Do you mean like create object factories or something? I think I misunderstand something. Im under the impression that JS is classless and attempts to create a class system like other OOLs have is just a faux class-like system and more misuse of key-value pair object oriented system than an actual class system. I could be mistating that, but from what Ive read so far that seems to be the gist...(?) &gt;Can you tell me what bind, call and apply do and relevant use cases for them? I believe bind is similar to adding an event listener, though I'm not certain of the differences for sure. As for call, no idea. I may have used it before and forgot, but its not in the ol' noggin now. And I believe apply is used to run code at execution time as if it were written at author time, so for example you could conditionally apply the creation of a function so that it would only actually be in the code as if you had written it if the conditions allowed. I have read that this is frowned upon, but again I could be wrong. &gt;Can you describe the purpose of a service worker and how to maximize their use for progressive web applications? Nope! &gt;What are some optimizations that can generally be made after a deliverable is produced that might have an effect given millions of concurrent users? A deliverable being like a product? Or is that some advanced techy JS structure that I've never heard of? In any case, if I were thinking of optimizations I know little more than using strict mode to disallow implicit coercion and some other things that honestly I'm not aware of but I'm sure exist, freeing up some effort on the js engine and therefor improving efficiency. How'd I do? I answered off the top of my head without looking anything up to make it super legitimate. Update: after continuing in my book, zi see an example of apply and would like to change my answer. The example I see is using apply to set the argument for a function that is passed to another function before being set to a variable. So what I see is var example = funcArgumentName.apply(argument1, argument2);
I second this, but I actually have a recommendation that's even better, and it's free: https://watchandcode.com/p/practical-javascript
Read about prototypical inheritance, ES6 classes are just syntactic sugar. The question is about whether or not you know that and thus the behaviour of classes. Bind is a way of creating a new function from an existing one, optionally bound to a given scope and always passed certain variables. Call and apply are foundational js knowledge. They're different ways of invoking functions with a given scope and arguments. At this point I wouldn't hire you. 
Keep in mind Array.prototype.includes is not supported by all browsers yet. MDN has a polyfilled though if you need to support the other browsers. [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)
When you move on to another language. 
I mean I'm still in college and I just started learning this stuff a few days ago so I'm not terribly upset that I'm no expert yet. Prior to 3-4 days ago, the most complex JD I knew was basic class-like module creation and a general understanding of what a prototype is. I've never gotten into the deeper workings of any programming language, JS is my first to really understand things like scope and compilers and all that. The question as a whole was meant so I could guage my progress as I learn more. Im 100% self taught though so I dont think I'm doing terrible (?) 
&gt; Elm really shines when your codebase starts to get bigger. I am a believer, but if your application is a single state tree, how do you deal with it as your codebase gets larger? How do you reuse component-like things? 
Apart from one anachronism, you are correct. Please mention that Elm inspired the likes of React/Redux, specially the latter.
Good job! In the instructions: &gt; Make sure to use a JSX transpiler and set JSX pragma to h. Don't put off newcomers like this. I know writing docs is hard, but I am sure you can create a gist with a simple setup example and add a link to it. 😁😏
thats the code, is there an issue with it?
haha, just liked the idea. but "ink" is good too, don't worry about that :D
He is opinionated, and harsh, I can give you that. But garbage? WTF :/
Fair points. But I dropped mocha and specific assertion libraries years ago. I always use `assert` with the `strict*` prefix :) I and all my 300+ repos are one of these lower number results that you searched :)
It's huge. Node 6, 7 and 8 supports ES6 almost fully. If developer uses dev mode machine that uses these node versions, then it's useless to use AVA or Jest. AVA is doing some good job only if you have more than 1-2 test files.
Yep. The `assert` is pretty enough in 99% of the cases. Just should know these kind of shit defaults :D
yeah we are creating this software 
I'd definitely pay attention to this second point. From a user experience stand point, the input doesn't feel like a game control, it feels like what happens when you press a single key and hold it (a character appears, then a brief pause followed by rapid fire characters). I'd definitely do what was mentioned above: set a flag to true on key down and and false on key up to figure out if your character is moving. I'd take a look and see if you can mix in key combinations so that you can move diagonal. If you really want to be an over achiever, try putting some elementary physics for your character (Your character slowly speeds up to a cap, maybe even drifting a little if you want to simulate a space vibe). All in all great job! Can't wait to see your next iteration!
Reminds me of a less refined version of [Osmos](http://store.steampowered.com/app/29180/Osmos/). You also might get better performance if you look into using the canvas element. I found Eloquent Javascript to be really helpful for learning a lot of stuff with canvas. [It starts here](http://eloquentjavascript.net/15_game.html), with doing DOM manipulation, but later refactors it to use the canvas. Its also written with ES5, but I still feel its one of the best books on learning JS. I also found Steven Lambert's HTML5 [shooter tutorial](http://blog.sklambert.com/html5-canvas-game-panning-a-background/) helpful for learning canvas too. [Here is what I was able to do using that tutorial as a base](http://dethstrobe.com/shooter).
+1 Canvas is what (almost) all webgames are made with nowadays. And for good reason: it has a very simple but powerful 2d rendering api, as well as the super powerful webgl api for 3d/2d graphics. Not to mention fantastic game frameworks like [Phaser](https://phaser.io/) which rely on canvas.
I think you're doing good. I'm 100% self taught also, and though I think I knew the answers to those (except maybe 4, depending on what is the expected answer), it took me months to really master it and more than an year to understand all the theory underneath and turn all the good practices into habits. I have learned 8 or so other languages since, but Javascript (ECMA) remains, to me, the most beautiful imperative language ever invented. I work with it daily, both on front end and back end. I sometimes even use it for non resource intensive, non security critical desktop applications through electron (like simple utilities and tools), since I prefer its sintax over other languages, and having HTML+CSS to layout UIs is a plus. I have a tip, though. Before you try understanding what service workers are for and how they work, study what is a process pipeline, and after you do that, the difference and uses of synchronous/asynchronous calls in JS. It'll be a lot easier understanding multithreading then.
Can do! I'm reading You Dont Know JS right now at a rate of about 30 pages / day, and I'm getting most of it. I've been tripped up a couple of times trying to follow the flow of some code snippets, the largest problem of which I've had is following a module manager function and while I get the gist of it, going through it was like a maze haha. I'm 180 pages in so far in 6 days so that covers the first 2 books (up &amp; going and the one about scope), and I'm on this &amp; prototypes now, which is significantly longer. I'm hoping to have all of the books read within the next 4 weeks, but I would imagine they get increasingly more difficult. I work as a front end intern now but I pretty much only do CSS and don't have much opportunity to test out new JS skills, so it's all dummy code for me (hurr durr, basic calculator!) I'm not sure what kind of understanding I really need of JS to secure a junior front end position, but I'm pretty well versed in HTML and CSS. I'm hoping that once I thoroughly understand all these books have to offer and delve into some more complex stuff, I'll be well and on my way to a career in front end.
Are you sure the math happens client-side? I would assume that it’s happening on a server somewhere but can’t check the network requests from my phone... If you really want to know exactly how it works and are familiar with chrome’s profiling tools, you could take a short performance profile while using the calculator and see what the call stack looks like at a given time. But, that might be over complicated. 
The first point is not really against functional programming. Functional programming says that you should not mutate any state that is not yours. As the timeoutID is not accessible from anywhere else, you can freely mutate it. I'm not sure about the second point, because the time influence is the core concept of debounce. 
From a professional perspective: I don't care if you know every small nuance of JS. In fact, sticking to the bread and butter of the language (sure, you should use ES6), will probably make you and your team more productive than using obscure tricks and lesser known aspects. Knowing how to write clean and precise code in a way that scales well for large projects and is easy to maintain is what I'd consider "mastery". 
yep I think you are right. Any thoughts on why profile might count 9 nodes added for every 3 actually added?
yep, I agree now, and I do see a *real* leak when I keep the push, makes sense as the references are still there. Thanks
/r/veztron has good points - I've some more - from game-design PoV: * Collision alone shouldn't result in death - it should require to cover 33% or something similar. * AI should try to follow smallar AI too. Little complicated to implement, but it is possible. * AI shouldn't be able to spawn on top of player.
Union types are really nice, but wouldn't the second example be better suited to be an enum?
Out of curiosity I just checked, it is done client side. Out of more curiosity I checked the JS sources, deobfuscated though still unreadable you can see the core of their math library when you search for "/* _Module_:cwsc */" in the js sources. My guess would be that this istheir own math library for internal use.
The [Front End Happy Hour](http://frontendhappyhour.com/) podcast is worth a listen. A bunch of engineers from Netflix, LinkedIn, Evernote and Atlassian get together and talk Front End stuff over drinks. It's not *always* JS related but pretty great nonetheless
Why would you JSON.parse a string that is not a valid json string? Where did you get this string from? :D
[removed]
300 down to 20 is crazy! Electrode is on my list of things to check out.
String is a perfectly valid JSON: "last_synchronization_error": "Element '{http ......." I am getting unexpected token '{'. This is a part of the string that I am handling. String is an api response. 
bruhhhhh
is there a default math library for angular maybe? I'm not familiar with that framework. 
&gt;sure the math happens client-side? yea disconnect your internet. 
That VBScript looks pretty swell
I think the issue is that you are trying to edit the DOM before it is fully loaded. There are a couple fixes for this but the easiest solution is to get jQuery and use: $(document).ready(function({ $("#DERIVED_SSTSNAV_PERSON_NAME").text("test"); }); The other solution is to use the onload event for the window, as so: window.onload = function() { document.getElementById('DERIVED_SSTSNAV_PERSON_NAME').textContent = "test"; } I hope this solves your problem :) Please let me know if it does not and I will try to fix it some other way. Best Regards, Kevin
What is ascii?
Hi The replace function you are calling is not based on a regex, but on a string. You should call .replace(/your_regex/, the_replacement) article = article.replace(new RegExp('\\b'+brand+'\\b','g'), ' ').replace(' ', ' '); Note the 'g' flag, that indicates you want more than one replacement.
It seems like ' is your string boundary. The only characters that need to be escaped in a string are the string start/end character, the backslash (as escape character itself) and the linebreak. If you start a string with " then " has to be escaped if it's inside of the string. Same with ' or `. You could also write the string in a textfile without escaping anything. When you read the file (with fs in node) you get the correct string. Edit: to really solve your problem, you could explain where you got this string from. It seems like you pasted it in your source code directly in a string literal, which will not work if the string contains the same symbol which you used to start the literal. 
Is the first point relevant for canvas games? 
thank you very much! now it does exactly what i want it to do! 
For the first question, would you accept that I know that classes are essentially prettied object prototype inheritance and that I could reimplement it as such but for extend I'd have to look a few things up?
I gave up.. I sent a prepared json from server (prepared with pojo) and sent to front end.. there I changed back to string and then parsed again.. No errors! I tried using easier way and lost quite some time haha
IntelliJ/Webstorm has a "find usages" function that is really helpful for this because it will fail to find any. Functions and variable names that aren't used are also greyd out. It works extremely well for typescript, and I'm pretty sure it still works well for modular JavaScript. Of course, using typescript is another option—you can just delete stuff and see if it still compiles—but that seems like a longer solution.
Definitely, but I could see the same technique work for objects with more complex validation rules. Edit: For example, maybe an TrafficIntersection has two lights each with a color state. type FourWayIntersection = { x: "red", y:"red" } | { x: "green", y:"red" } | { x: "yellow", y:"red" } | { x: "red", y:"green" } | { x: "red", y:"yellow" } | Edit 2: markdown on phone is not my friend
You don't need all of jQuery just to do ajax, there are more lightweight solutions available. Try [fetch](https://github.com/github/fetch). You can use XMLHttpRequest itself if you want, but its not 2005 anymore and you might as well use something with a nicer api.
So a few questions. I'm building a chrome extension bit by bit. Later on I will want to add in functionality for a box to display on hover. The box will display some info. To make it look nice, the goto is jQuery UI? (Please don't make me learn css for this) So I will already be including jQuery if so. With that, would you say to use jQuery to do the xml...? In terms of learning and making the mini project worth showing off and being relevant to an internship, which route would you take? And thank you so much for your help. 
In case you can't access link: function addition(a, b, acc = '', carry = 0) { if (!(a.length || b.length || carry)) return acc.replace(/^0+/, ''); carry = carry + (~~a.pop() + ~~b.pop()); acc = carry % 10 + acc; carry = carry &gt; 9; return addition(a, b, acc, carry); } function sumStrings(a, b) { if (a === '0' &amp;&amp; b === '0') return '0'; return addition(a.split(''), b.split('')); } Example usage with example result: sumStrings(Number.MAX_SAFE_INTEGER.toString(), Number.MAX_SAFE_INTEGER.toString()) // console output: "18014398509481982"
Yeah, that's a better example for me. I really liked using union types in a project I did recently where I just wanted to only allow a certain set of strings for something but actually didn't want to use an enum based on numbers.
I think Typescript 2.4 introduced string enums. You should check that out!
Had a few minutes to kill so added #2 to OPs code, https://codepen.io/anon/pen/WOJmGa 
If you're using jQuery already then it'll be fine to use it for also using it for your ajax requests, but in general I don't believe that jQuery is entirely necessary as vanilla Javascript has improved greatly since jQuery came out. &gt;(Please don't make me learn css for this) This is like learning a spoken language and saying you don't want to learn about adjectives. Learn CSS if you're going to be a web developer, don't leave holes in your skillset just because you feel like it.
[removed]
Don't want to work in web dev, for now I figure I can find a website that generates the CSS for whatever I need for this project. I absolutely agree with you though. If it's needed, ill learn it. (Is it?) just more of a joke than anything. 
These should help: **[MDN: Getting Started with AJAX](https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started)** **[MDN: Using XMLHttpRequest](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)**
There is no objective measure. No JS Score. Here are my subjective standards: - If you are part of a team that delivers a successful project, you're good. - If you can make contributions to open source projects and they get regularly accepted, you're very good. Assorted "mad skillz" don't matter.
Looking at the comments I don't see any mention of stringify. * JSON.stringify(data) - Does the character escaping on a javascript object when converting it to json. * JSON.parse(data) - Parses the json back into a javascript object. In whatever server side language you are using you need the equivalent to JSON.stringify. In php that would be [json_encode](http://php.net/manual/en/function.json-encode.php). In Java you use a [JSONObject](http://docs.oracle.com/javaee/7/api/javax/json/JsonObject.html).
Seconding what /u/Jafit said. Don't learn XHR, [learn `fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) (and polyfill it if you actually intend to support non-evergreen browsers). XHR's byzantine days are numbered. As for using jQuery: Never use jQuery. For anything. It's always easier (not to mention smaller and better-performing) to just learn the native API and wrap it however makes sense for you.
You are incorrect. XHR and Fetch are similar but very different solutions. For example, you can not receive progress event data with Fetch since it returns a promise, at least not without resorting to ugly hacks, which negate the simplicity of using Fetch over XHR in the first place. Further, XMLHttpRequest has been an integral part of AJAX since its inception, which the vast majority of websites currently employ, so the deprecation of XMLHttpRequest is not going to happen anytime soon. 
Non-Mobile link: https://en.wikipedia.org/wiki/ASCII *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^87475
**ASCII** ASCII ( ASS-kee), abbreviated from American Standard Code for Information Interchange, is a character encoding standard (the Internet Assigned Numbers Authority (IANA) prefers the name US-ASCII). ASCII codes represent text in computers, telecommunications equipment, and other devices. Most modern character-encoding schemes are based on ASCII, although they support many additional characters. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/javascript/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
The bit you've pasted there isn't valid JSON in and of itself, it needs to be within an object. e.g.: {"last_synchronization_error": "Element '{http ......."} That will JSON.parse just fine without any escaping necessary. JSON.parse(`{"last_synchronization_error": "Element '{http ......."}`); ▶ Object {last_synchronization_error: "Element '{http ......."}
Happy to admit I couldn't answer all of those, and would probably gawk over an answer to any of those for several hours. Guess I've got some way to go! 
That's just a tiny part of json which was giving me error.. 
&gt; For example, you can not receive progress event data with Fetch since it returns a promise [We're working on that.](https://github.com/whatwg/fetch/issues/447) Like I said: XHR's days are numbered. Sure, it'll never be *removed* (just like everything else in the Web Platform), but it *will* hit a point where it doesn't receive new functionality that will only be implemented for `fetch`.
Yes, if you write a Canvas/WebGL/DOM/SVG game, you should use rAF.
You don't need jQuery to do such a simple task.
&gt; it'll never be removed (just like everything else in the Web Platform) [And now you've said two things wrong.](https://html.spec.whatwg.org/dev/obsolete.html#obsolete)
if you want to choose the most popular and cool tech, just go with react on FE, for backend express.js.
Ugh, there was a point where I had that edited to "virtually everything", just to preempt this banal ["well actually"](https://xkcd.com/1318/) pedantry crap. Not sure what happened to that. Bloody Reddit. Besides, if you're going to point to a rolled-back web feature, [at least pick a good one](https://developer.mozilla.org/en-US/docs/Web/API/Window/showModalDialog).
&gt; 2) Don't tie your player movement directly to the keyboard event listener. As a result of tieing movement to the keyboard event in your game movement is jerky and unresponsive. Instead it would be much better to do something like listen to when a key is pressed down and released and then set a flag to true or false in each respective case. Then in your game loop (should be in a requestAnimationFrame function) move your player if that flag is true. This will result in much more responsive game input. Here is an example for that kind of thing: https://jsfiddle.net/sw4w8qnu/ The movement is time based. E.g. if you move right, it will always take a second to move 200 units (pixels). However, since the delta is capped, that's only true if your frame rate is larger than 25 (&lt;40 ms per frame). If it drops below that the movement will slow down. This is the easiest way to prevent entities from warping through walls etc while keeping the movement frame-rate-independent (for 25+ FPS cases, that is). With a rAF-based loop, the frame rate is usually capped at 60 (because that's the refresh rate of most monitors), but it also might be 120 or even 144. With future displays, it might be even higher than that. The "proper" way to do this kind of thing is to run your simulation at a fixed step and then extrapolate the positions for rendering. However, if you don't really need determinism (demo recording, networking), it makes things more complicated than they have to be. For small games, just capping the delta is usually good enough.
&gt; yea disconnect your internet. You can just check the network panel from your browser's dev tools.
Build things. Books are a great reference for filling in gaps, but a lot of the stuff mentioned here never clicked for me until I started actual projects. 
So what exactly are you trying to do? I just ran your code on taco.com (nice HTML, btw), using the following script.js: var x = document.getElementById('NavigationButton1'); console.log(x.height); That correctly returned the height of said button (97). Seems to work just fine.
It is a PITA to manually escape... So we don't. Just about every major language has a JSON encoding method available. 
I'm not sure I completely understand the context of what you are doing. Here's how you could create a normal hyperlink in p5. It adds an element that looks like this to the page: &lt;a href="http://p5js.org/"&gt;This is a normal HTML hyperlink.&lt;/a&gt;. When you click on it, it will take you to the p5 homepage. (You could use link.position(...) to place it wherever you want on the page.) var link; function setup () { link = createA("http://p5js.org/", "This is a normal HTML hyperlink."); } You *could* turn other elements into a faux-hyperlink using window.location.href. It's a vanilla javascript way to send someone to a new page. var p; function setup () { p = createP("I am deceptive. Clicking me transports you to a new page."); p.mouseClicked(onPClick); } function onPClick() { window.location.href = "http://p5js.org/"; } And lastly, if you want to count the number of clicks, you'll want a global variable in your sketch. Every time the mouseClicked handler is called, you can add one to your global variable. var numClicks = 0; function onPClick() { numClicks++; // Add 1 to numClicks if (numClicks &gt; 5) { window.location.href = "http://p5js.org/"; } }
I don't agree with your telling OP to never use jQuery because it's easier to do it natively. jQuery was invented for a reason and it's not always easier to do it natively.
I choose unit tests for minimizing programmer time... seems to have led me to jest. 
He ends up implementing an infinite delay loop, it's not debounce anymore. And still not functional 
Man, as a junior js developer I need to seriously step up my game to become relevant by next year....
I actually had this game idea in the back of my head for doing on canvas. I sat down the other day just curious to see if I could get a div to respond to WSAD controls and ended up making the game there instead. But I'll definitely look into remaking it on Canvas! I went through MDN's tutorial to make a breakout game, so I think with a little practice, I could remake this. I'll definitely look through those tutorials! Thanks
Oh that is so much better! Thanks!
Oh that is so much better! Thanks!
That reason was much more valid at the time of its inception :)
I'll see about updating the code to use requestAnimationFrame(). And I'll look into modifying the player movement. Thanks.
Absolutely agreed, but still very much valid today.
jQueryUI is heavy as hell, and if you put it in an extension, it's going to bog it down. It's also pretty ugly by default IMO. &gt; If it's needed, ill learn it. (Is it?) Yes, CSS is necessary if you don't want unstyled, ugly components. Ignore the memes, CSS hasn't been some terrible monstrosity to work in for years. Positioning is occasionally tricky, but things like grid systems and flex box alleviate that.
I was going to say "Tape" until I saw "vanilla". 
no you understood well.. thats it i have done it i just using link somehow wasnt able to get a link working but i tried createP and html instead of createA. now everything works thanks for your time man.. amazing (*-*) smile its sunny in scotland 
This is the best advice here. Theory is great, it can seem overwhelming until you've put it into practice. Further to working on actual projects, can you work on a JS project *with* a team. There are good style-guides out there. But real professionalism in JS is going to involve being able to work with others, switch up your preferred JS writing style to suit that of the team/project you're working on.
In JavaScript you can change the page by changing the window.location.href object. So: window.location.href = "http://p5js.org"; Should do the trick, unless I'm totally wrong about the object. 
yea thats it man amzing thanks. but im still stuck on how i make this happen after 3 clicks of mouse not one?
Mocha. Only Mocha.
Why did the remove showmodal and what did they replace it with?
Came here to say this. Mocha has a slightly higher learning curve, but is pretty much superior to Qunit/Jasmine in every way. Alternatively if you really want to focus on performance and your tests can be run at the same time without breaking, you could check out Ava. It's still a little behind the curve feature-wise compared to Mocha, but the ability to run tests in parallel can be a big speed improvement.
Anybody else starting to be weary of words like best, ultimate, etc ?
I never bothered with XMR. I used the jQuery substitute but now I don't even need jQuery I can just use fetch()
I'm pretty sure he/she was asking about the ascii variable referred to in the code snippet, not the concept of ascii.
Just a heads up, the game spazzes out if the circle gets bigger than the playing area. https://gfycat.com/SentimentalImpressionableLark (ignore the stream stuff, i used OBS to record it as that was the easiest method for me at the moment)
Thanks for pointing that out. I'll try to update the example. But the idea still holds for other complex states and objects as BeanzPatio mentioned.
&gt; Like I said: XHR's days are numbered I skimmed the thread you linked to - doesn't seem to be an end in sight as yet? At the moment I think fetch just isn't worth using. You can whip up a wrapper around XHR very easily and it does progress, cancellation, and works on every browser in use without a polyfill. I was initially excited by fetch but in practice it's fundamentally flawed.
probably because you are using not existing inputs in them
Yeap. Anyway what that function is doing is putting ascii element's text to that url.
To be fair, other than implicitly binding in React components like so: export default class extends Component { implicitlyBoundFunc = () =&gt; 'Bound and gagged' render() { return ( &lt;p&gt;{this.implicitlyBoundFunc()}&lt;/p&gt; ) } } ...I don't actually use any of this working as a senior at a huge U.S. retailer. It's still stuff I would expect a "master" to know, though.
All the cool kids are doing [redux](https://github.com/reactjs/redux)
Because some output fields need to be done first before the others, and jscalc.io won't do that for you. So, put the required results in variables first, then use the variables instead of the input fields when returning the object.
But mom said that redux is a gateway framework. Quick questions: What is the difference? Is it harder to learn than flux? And thank you very much for the link I guess the videos made by the creator would be well made.
&gt; What is the difference? Off the top of my head I think `flux` allows for multiple state stores, but `redux` is designed so that only one global state store is allowed -- or encouraged. &gt; Is it harder to learn than flux? Nah, redux is pretty straightforward and shouldn't be difficult to learn. It's main drawback, in my opinion, is verbosity. 
I did not know you could do that, amazing!
It's a bit dry, but nonetheless worth it, made by reduxes creator Dan Abramov: https://egghead.io/courses/getting-started-with-redux Redux is based on the flux pattern, shrinking the already very explicit structure a little. Redux has become the go to approach for flux. 
I know you just copied and pasted, but /r/titlegore
If you're able to build exactly what you want in a clean and concise way.
Maybe this will give some insight: https://esdiscuss.org/topic/es6-iteration-over-object-values
It is also worth mentioning that redux uses an immutable store, as opposed to flux, where you can use a mutable store that emits an update event to your observer components. It is actually quite nice, once you get used to it, but it does require you to do things differently than you're probably used to.
Ahh, this does seem to answer my question. Thank you!
If your project already uses jQuery use that. Otherwise look into the fetch api or axios.
The original "Flux Architecture" is primarily a pattern, not a specific framework. When Facebook announced and described Flux, they did release a small "dispatcher" library to help people implement the pattern, but it's not a complete framework. Many other third-party libraries were then developed that also followed the "Flux Architecture" approach, like Alt, Marty, McFly, Flummox, and so on (lots of "Back to the Future" jokes in there). Redux also implements the Flux Architecture, but as I've described it, Redux is "Flux carried to its logical conclusion". It uses the Flux Architecture approach of separating write logic from the UI, but does so using functional programming principles. Redux won the "Flux Wars", and is now the de-facto standard for state management in React applications (and can be used with other frameworks like Angular and Ember as well). As far as actual learning resources: I keep a big list of links to high-quality tutorials and articles on React, Redux, and related topics, at https://github.com/markerikson/react-redux-links . Specifically intended to be a great starting point for anyone trying to learn the ecosystem, as well as a solid source of good info on more advanced topics. It includes links for learning core Javascript (ES5), modern Javascript (ES6+), React, and much more. I also published an "Intro to React (and Redux)" presentation at http://blog.isquaredsoftware.com/2017/02/presentation-react-redux-intro/ , which is a good overview of the basic concepts for both React and Redux. You might also be interested in my two-part blog post, [The Tao of Redux, Part 1 - Implementation and Intent](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/) and [The Tao of Redux, Part 2 - Practice and Philosophy](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/), which goes into the history and intent behind Redux's design, why it expects you to follow certain technical limitations in your code, and why various common use patterns and practices exist.
You can make a counter that goes up by each click. Define a variable out of the function scope and add 1 when you call the function, then verify if it's 3 or more and change the location then.
I can recommend Koa.js with Marko.js. Don't build SPA blog. My opinion is that presentational and blog websites should be server rendered. You can have performance improvements using progressive rendering, and Marko.js is designed for it. 
Absolutely agree! Could even use F1 traffic lights, or those traffic lights that can be yellow and red before going green.
Do your own XMLhttpRequest once, just to get some understanding of the inner workings. Then after that use a library (literally every library has a wrapper for this)
const obj = { ... info }; Object.keys(obj).forEach(key =&gt; doStuff(key));
While developing a new project is like rolling on a green field for you, maintaining it is a potential dark twisted nightmare for someone else. Here's a list of guidelines we've found, written and gathered that (we think) works really well with most javascript projects. Let me know if you agree with any or think one of these guidelines should be removed.
Uhm, that's not really related to the question. Plus `Object.entries()` already provides more functionality than `Object.keys()`.
I use mocha
I mean that's how you iterate over keys in an object. Not gonna lie I kinda TL;DR'd on the post so maybe I'm misunderstanding what you were asking for
That is also agreeable
Why would you say fetch "isn't worth using" when it has reached full support [every major evergreen browser)(http://caniuse.com/#feat=fetch)?
Plain objects (as created by object literals) are not iterable: for (const x of {}) { // TypeError console.log(x); } Why aren’t objects iterable over properties, by default? The reasoning is as follows. There are two levels at which you can iterate in JavaScript: 1. The program level: iterating over properties means examining the structure of the program. 2. The data level: iterating over a data structure means examining the data managed by the program. Making iteration over properties the default would mean mixing those levels, which would have two disadvantages: * You can’t iterate over the properties of data structures. * Once you iterate over the properties of an object, turning that object into a data structure would break your code. If you are interested – more information: http://exploringjs.com/es6/ch_iteration.html#sec_plain-objects-not-iterable
Thank you!
While developing a new project is like rolling on a green field for you, maintaining it is a potential dark twisted nightmare for someone else. Here's a list of guidelines we've found, written and gathered that (we think) works really well with most javascript projects. If you want to share a best practice, or think one of these guidelines should be removed, let me know.
neat. I always used the airplane mode toggle on my laptop. 
He asked why you didn't post it.
This is completely unreadable on mobile. The text has a fixed width that's wider than the rest of the page but you can't scroll. 
I know some senior devs who still do a bit of DOM manipulation in jQuery if they are in a hurry. An example would be to create a dynamic table and populate it with some data gathered from ajax request. While I mostly agree with never use jQuery it still has its uses. 
A few more to add to the list, not sure if these are skills characteristic of professionals or "masters": 1. Thoroughly understand the difference between synchronous and asynchronous programming, and how to write functions in both styles. Understand the various styles of asynchronous programming common in JS and their relation to each other (i.e. history in relation to each other): callbacks; promises; async/await; 2. Understand metaprogramming in JS: reflection within implementation (symbols API); reflection through introspection (reflect API); and reflection through intercession (proxy API); 3. Have a consistent coding style, and be able to explain why you prefer it; 4. Be proficient in a functional programming language (e.g. Haskell, Erlang) and know how to code JS in a functional style (someone who's mastered this likely knows a FP language, thus the first part); 5. Know how to implement common data structures in JS (linked lists, BST, queue, stack, etc.) and able to write algorithms to work on those data structures; 6. Know how a JS implementation works internally (V8), be proficient in C++, and know how to write a binary node.js module to extend the language; 7. Be knowledgeable about the JS ecosystem and how to use various libraries (connect, express, backbone, express, angular, react/redux, underscore, lodash, AMD, CommonJS, require.js, webkit, etc.); 8. Be able to talk intelligently about setting up a build system based on different requirements (Jenkins/Travis CI, grunt/gulp, etc.); 9. Understand and know how to use a version control system; 10. Know how to use a few different unit testing frameworks (Jasmine, QUnit, tap, other assertion libraries); 11. Solid understanding of network protocols (IP, TCP, UDP, HTTP, SSL/TLS), how to build a server in node.js to serve them, how to write a client for each, and how to handle errors involving them; 12. Understand websockets and how to use them in an application; 13. Understand debugging generally (stepping through code, setting watches, breakpoints, etc.) and the JS tooling to support debugging; 14. Knowledge of databases, how to set them up and query them, and how to write performant queries (SQL-based like MySQL/PostgreSQL/MS SQL with knowledge of normalized forms and their merits, NoSQL like CouchDB/MongoDB, key/value DB's like Redis, IndexedDB in the browser); 15. How to code for concurrency: locks, mutexes, semaphores, critical sections of code; how to implement it in JS (child processes, webworkers); how to debug it; and how to profile your code to recognize sections that would benefit from parallelization; 16. Understand common OOP design patterns, how to apply them in javascript, and the various trade-offs each pattern presents; 17. Really "get" favoring composition over inheritance, and how to use it effectively in JS. 18. Understand how type systems work, what kinds of errors they prevent, and how to use a transpiler that provides typing (like Microsoft Typescript); 19. Really thoroughly understand HTML and CSS, including CSS design patterns
Thanks. I hardly know how to formulate my question. But from the look of it, baking keystone together with nuxt on the same server requires some deeper knowledge, other than simply doing "yo keystone", it seems :P
If you're interested in building your own carousel from the ground up, by all means, use the Slick as a starter. I believe it uses JQuery to handle most of the DOM manipulation, so as a suggestion, it would be cool to have a non-JQuery (zero dependency) carousel. Otherwise, yes, Slick is pretty sufficient, has a large community, lots of features, open license. Can't really go wrong using it as is. Personal opinion, don't rebuild the wheel unless you want to understand it or can do it better. Even then, it may be useful to just build on someone else's work and contribute back ;)
In my experience, Ava is one of the worse frameworks. It's too buggy and slow. A few weeks ago I looked for a faster alternative to Mocha for running my e2e test suite. My tests actually ran slower than mocha, God knows why. After a quick lookup online, I saw I wasn't alone in this. Then I tried Jest - which was somewhat equivalent to Mocha in terms of speed (sometimes slower, sometimes faster), but its error reporting is buggy and weird. In many cases, I couldn't associate an error message to its failing test - an issue which I never ran into with Mocha.
Hah thanks for recording it for OP, I was just about to record it myself. I got that too, I considered it to mean I "won" the game. ;)
Show the code
I'm curious if you could give some hints about the fourth one? I am self taught and feel like I could do the first two and I know how to learn the third one but I have no clue on the optimizations one and I'm super curious.
Wrong. All the cool kids are doing [mobx](https://github.com/mobxjs/mobx)
You can't count on everyone having the latest Safari, considering it's tied to OS updates. And a lot of people still have to support IE11, etc. But the polyfill isn't the real issue. I think being able to cancel XHR requests is important - if you have an SPA running on a slow and unreliable mobile network, the user might give up waiting for something to load and go somewhere else (the actual scenario that led me to deciding to abandon fetch). With fetch, the request will still be going, tying up bandwidth. Nothing you can do about it. I don't consider that a fringe use case in this day and age. There's been six months of discussion on github on how to hack the promise interface so requests can be cancelled. Nothing works yet. So why not just use XHR? It's not a particularly nice API, but neither is fetch. It will just work on everything. No polyfills, no waiting for browsers to catch up. Hopefully fetch improves in the coming years, but right now, I definitely don't view it as having usurped XHR at all.
It is really up to you. However, I have talked in depth with my peers about this exact thing. "Which framework should we devote our time to learning?" The answer is different for everyone. With that said I really recommend React and it's ecosystem. For the backend . . . whatever you are most comfortable with. 
thanks, I'll keep it in mind
This is some good stuff right here. Wish I had seen it months ago, would have saved me tons of time.
"You Won!! Your prize is an epileptic seizure!"
Let me preface this by saying that I agree with much of what you said and think this is a great start. Thanks for taking the time to share this with the community. I have some feedback that I hope you will find constructive. You say not to put for collections. How do you handle sorting/removal from a collection? You should not delete a collection. You could put though. You should not avoid comments and logs. This is terrible advice. Whatever you use to transpile, bundle, minify, and obfuscate will strip them. You should not have a file/directory/field naming convention dependent on casing. If a front end calls a Perl, Java, Go, etc. backend, it should use the server's naming convention to avoid convolution and computational waste from case conversion. Furthermore, file and directory names should not necessarily be cased because some OS are case sensitive and others are not. This can create unexpected bugs and developer confusion. Use of patch is controversial -- but I agree with you. Telling people to aggregate folder by product and not by role is an anti-pattern in some frameworks. You should maybe distinguish when you should aggregate modules by role. It's also internally inconsistent with your config and scripts directories. If I were you, I would update with justification for your opinions on these topics. For most developers, a dogma is not helpful. Guidance is only helpful if the reasoning behind it is demonstrated. If I know why the rule exists, I know when breaking it is a better idea than adhering to it. 
Here's a simple example: Let's say you're running a SPA in React. You have a couple of components that make calls to a saga inside of componentDidMount(). Maybe one of these components makes a saga call each time: one to getAccountDetails(), one to getRewardsDetails(). In your first implementation, you may just have both saga calls made each time componentDidMount() runs. But what if accountDetails is unlikely to change, while rewardsDetails is more dynamic? Simply cache the accountDetails on first load, and on subsequent loads, first ensure the cache does not have accountDetails before making the saga call. If each accountDetails request queries the DB, and you have millions of concurrent users, caching these details is a significant improvement. tl;dr Analyze all AJAX calls and determine what is cachable in cookies/localStorage/sessionStorage/redux store/etc in order to cut down on future calls in the same session.
It's super hard to read that on mobile because the share buttons cover a good portion of the left hand text. 
I have set the share buttons to be displayed on the bottom on a mobile screen, and they usually do. Weird that it didn't happen in your case. Which device are you using? PS you can visit the AMP version for the time being: https://www.wisdomgeek.com/web-development/using-webpack-dev-server/amp/
Thank you! That makes sense (for the most part since I don't know what 'saga' means in this context). Does it come down to just being able to optimize ... maybe just ... common things? It's hard to put into words but I feel like minimizing expensive operations like reading files or network requests by caching results is a pretty general thing and one of the first things I would look for in my own projects to optimize. In that sense could your fourth question be considered highly contentedly dependent, where you look for generally good optimization practices to be applied to a specific problem at scale? Either way thanks for your reply! I really enjoyed the things you wrote in the thread so far.
To add to this tl;dr... In JavaScript, ints are 53 bits. To get past this, you can use strings - as they're bigger than 53 bits - and apply the algo above which effectively does the classic addition process all of us were taught in grade school (like 3rd grade - singles, tens, hundreds carry the one etc). Pretty neat imo, although I'm interested to know if that's the most efficient algo for this. I like the recursion, but I'm curios. Admittedly I didn't spend too much time looking at it. Edit: bits not bytes 
&gt; it's best played in full page I opened the pen with RES and played with scrollbars. Only survived about a minute, but I think they added a nice element to the gameplay...
&gt; Try making greasemonkey scripts What is a *greasemonkey* script?
Is this his beginner course?
Don’t think so. 
Does he have one for beginners?
Not as far as I can tell. 
as a senior js engineer, the only question that really matters in practice is the second one. the other three are all theoretical or academic and really have little to do with mastery of javascript.
&gt; Functional programming says that you should not mutate any state that is not yours. As the timeoutID is not accessible from anywhere else, you can freely mutate it. I've... not actually heard anyone say this before. The debounce (inner) function is neither pure nor referentially transparent, and it causes side effects. How it behaves when called very much depends on if and when it was called previously, and neither could we replace a call to debounce with its output value and still get correct program behavior. Everything about this screams anti-functional. If we're saying that side-effect mutations are OK just so long as it mutates *private* (not accessible from anywhere else) state... then all that impure OOP we've been writing for decades, where we incessantly mutate an object's private state, would be considered functional.
No problem - glad it's working now
3: a service worker is a program that runs in the background in an isolated context (e.g. it can't access the DOM. it can help with offline-first applications and can help delegate heavy processing. this is a wormy question because nobody really has any idea how to do what the question is asking. a few people have scratched the service worker surface, but nothing profound has come of them yet. 4: this is another wormy question that interviewers ask that seems like it can have a very broad and general answer but usually the person asking it has a very specific answer in mind. i'd say things you can do: monitor and optimize bundle size, network accesses and asset loading, but really if someone asked me this question in an interview i'd ask for more clarity. a very broad question whose answer doesn't really demonstrate mastery.
I think you made a top level comment :P
I was on my phone replying to something in the inbox so... yeah. I hate this app lol. Such is life :P
How does XHR solve the slow connection problem though? I can see the benefit of progress indicators, but cancelling the request doesn't seem like it would help in most situations (if it's running In the background at least you can cache the response in case they come back. And if they totally bail, it doesn't matter anyway). Fetch is so stupid easy to use it's hard for me to write it off. I worked on a file uploader recently that I had to use XHR for to get upload progress, and I can see myself still using XHR when I *need* those features. But in most cases I probably DO want a promise API and in those cases fetch is perfect. 
Would you do his ES6 course before the 30 day JS challenge?
this all wokred greate but now i put it to try in a seperate setup function and it worked i was linked and it counted but now it does link it just shows me the letters i cant click it is this because i am also using mouse pressed and mousedragged? is there a way to use all ?cause now i dont understand why it doesnt work when i copy to my own function ? function setup() { link = createA("http://p5js.org/", "This is a normal HTML hyperlink."); canvas = createCanvas(windowWidth, windowHeight); canvas.position(0, 0); frameRate(100); clear(); ascii = createP(`HI!`); ascii.style('font-size', '25px'); ascii.mouseOver(over); ascii.mouseOut(notover); ascii.position(750,750); ascii.mouseClicked(linky); } and just below this i have another function using clicked? mouseClicked = function() { ellipse(mouseX, mouseY, 20, 20); } it works weirdly if i create two function setups{} if i put it in one above it just shows txt and im no longer able to click if i put but i can use all the other functions...any idea? 
First two questions are ok, but I wouldn't go as far with the last two 'cause they're more specific and not general JS knowledge. One should know what a service worker is but is specific to PWAs, and optimizations, well... they're mostly general developer knowledge. I'd add these ones: * Do you know what a Closure is? * Do you know what a Callback is? * Can you do everything JQuery does natively? * Do you know what the context is and how the call stack works? * Can you debug? * Do you how to unit test your code? And, is it unit testable? * And last, but not least: Can you write clean code in JS?
I'd start with ES6 as it is a more broader approach to JS. The 30 days challenge makes more sense after unterstanding what ES6 is.
I didnt post any questions
You guys have both managed to not link the [best one](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink) 
Are all these expected points a junior developer should know? Reading some of these comments, its pretty intimidating how well versed you have to be in this to realistically get a junior level position. Gives me cold chills thinking about a standard front end dev and what they must know if even a junior is doing things like analyzing critical sections of code and managing mutexes for performance increase. That sounds like something my buddy would do, and he optimizes C++ code.
I don't think there's an answer to this. Even `setTimeout` itself isn't functional. setTimeout, for example, is not [referentially transparent](https://en.wikipedia.org/wiki/Referential_transparency). It returns an ID -- maybe the number `1`, for example -- but if we replace a call to `setTimeout` with its output value, the number `1`, then that would change the program's behavior... hence not referentially transparent. Ditto for `clearTimeout`. Not pure, not referentially transparent, causes side-effects.
**Referential transparency** Referential transparency and referential opacity are properties of parts of computer programs. An expression is said to be referentially transparent if it can be replaced with its corresponding value without changing the program's behavior. As a result, evaluating a referentially transparent function gives the same value for same arguments. Such functions are called pure functions. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/javascript/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
This is a common issue as JavaScript executes in a random order 
Thanks 
actually spoke to soon i wrote reply did you see.. at first i cp your var link; function setup{ link = createA("http://p5js.org/", "This is a normal HTML hyperlink."); } which worked fine but then stopped all the rest of my code i am using mouse clicked and pressed and not pressed allot. i then tried instead of having two setup functions put it into mine and it worked as in it showed me the txt but then wont link me anywhere is it possible that mouspresssed and all that jazz is interfering or have i done something silly? ta much
You’re welcome. 
Any reason you're not using an off the shelf ORM layer? Writing SQL statements from strings is usually considered "a bad idea™" especially if you are taking user input. There are tons of ways to craft an SQL injection attack.
Now build systems need a server?! Jeez.
Kill me if I ever have to work on another openui project. Kill it with fire.
&gt; Don't want to work in web dev, for now I figure I can find a website that generates the CSS for whatever I need for this project. How? I would also like to find a website that generates all the CSS I'll need for my project.
Why do you need a JS framework for something as simple as a blog? Sort of like using a crane to stack bricks. Can't you just use HTML templates with server side render and call it a day? You can use form posts on the client and unless I'm mistaken the only asynchronous calls you need are lazy loaded comments. Right?
You highlighted a good point, so I guess I'll include a new part in my class to inhibit injection.
&gt; Why did the[y] remove showmodal [A lot of reasons.](https://dev.opera.com/blog/showmodaldialog/#whats-so-bad-about-showmodaldialog) &gt; what did they replace it with? Either "the `&lt;dialog&gt;` element" or "nothing", depending on how closely you're looking for a replacement.
 //The player object const player = {...} These types of comments drive me absolutely insane. I don't need a comment to tell me that this is "The Player object". I can read javascript.
&gt; I skimmed the thread you linked to - doesn't seem to be an end in sight as yet? Nah, there's an end in sight around the newest draft with FetchSignal and company. [MDN's already documenting it](https://developer.mozilla.org/en-US/docs/Web/API/FetchObserver), and Firefox Nightly is already shipping with (experimental, behind-a-flag) support.
&gt;u/icantthinkofone &gt; &gt;Now build systems need a server?! Jeez. That's not what this is. It's a preconfigured hot reloading express server for development. It's been out for a couple years and has pretty much been the default dev environment for webpack based builds for just as long. Development has always required a server. 
Do you have a link to your codepen?
How often does stuff go down to $10? 
Every other week it seems like. 
Thanks. I was considering getting some basic courses as a beginner, but some reading since I commented and this reinforces that that's how they get people in. I'll wait until I understand the basics...
[removed]
Tape! https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4
Nice to hear. Unfortunately I solved that problem merely a month ago, so it's kinda fresh stuff.
If you are doing this for fun then cool. But if your focus is not the orm you are building you should grab an existing library. Security is not an easy thing to implement from scratch.
Why reinvent the wheel though? There's already [Big.js](https://github.com/MikeMcl/big.js/) and a few other competitors. 
Not a direct game feedback but you should put this on Github. You can self host it with [Github pages](https://pages.github.com/) so the demo would be (username).github.io/(repository)
It's not a blog, it's a database of Objects with Properties and Relationships. Companies employ People, Companies own Offices, People work at Offices. This page shows the locations of all the Offices on a map, with counts of the number of People at each. That's just another example. My starting point was "that's a pretty good fit for Rails, but it's high time I exercised some Node muscles". I probably don't need any client-side JS at all except for the map, but it might be nice to sprinkle some over the top for the data entry forms - autocomplete, that kind of thing. But if I'm going to build on the bleeding edge for my own edification, I have a responsibility to *attempt* to pick a technology that'll still be here in five years time. I should have narrowed the question down more.... it wasn't a good question on my part.
excellent list, but is it not a bit of a stretch to expect C++/Haskell/Scala proficiency to qualify for JS mastery?
I see. It doesn't need it but it has one. Same comment: Jeez! This is getting out of hand.
The only library I recall doing this is Microsoft's LINQ (JS version). It hasn't been touched for years. I thought I'd pick it up for fun, and for anyone who wished to use. Regardless of who uses it, it still needs to be secure. I'll do some research on Node SQL injection and see if I can be inventive. Any help would be appreciated. In the meantime, security is not really a big concern. The only project I'm using it in is an internal one-off system in a public enviroment full of children. I don't expect some kid to have the means to connect to a private server and authenticate with shitty values to ruin my data.
Note to future readers: the class does not build strings by embedding the query values inside the string, it places a ``?`` in the position. It expects your database API to fill in the blanks, avoiding SQL injection as far as I'm aware.
&gt; Same comment: Jeez! This is getting out of hand. I know. I spent literally minutes setting up a dev server on my last webpack project. Time I'll never get back /sarcasm.
I don't know what keystone or nuxt are, actually 😂😂😂
So, I looked into it, and that sounds pretty good. Will probably look into it in the future. But getting both to work together doesn't sound that difficult actually
This title has nothing to do with the article. The only thing the author says about yarn is basically 'i never thought it was that fast'. But there are no comparisons and he never even suggests npm is better than yarn.
I dismissed fetch as of now since I need to polyfill it and libraries like axios provide an arguably better api. What is the argument for fetch over something like axios? 
Java and JavaScript are two separate languages. Also, isn't Java ME dead? Is it still used by anything?
Sorry. I'm new and know literally nothing. Yes it's used with flip phones, including modern ones, which I feel like would be a great start for someone like me.
Try /r/java.
Did I miss something with NPM 5? Everytime I `npm install ` after pulling from git it tries to reinstall EVERYTHING, instead of just the new packages that were recently added... I've been using yarn for speed and for that reason above as it doesn't try to reinstall everything every time.
Alright I will, thanks.
Ok, that good to hear. I'm sorry I misunderstood the intent. 
Hi /u/onlinecoursesgalore, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
After 10 or so the circle was large enough that new reds were spawning on it (it shouldn't), so I just left it in the middle until it grew too large on its own.
&gt; 7. Code style &gt; * Use Airbnb JavaScript Style Guide for JavaScript. Using a standard coding style guide is crucial to maintaining easy to read/update code for teams of any size. There are more than just Airbnb's. My feedback: Update that bit to reflect a more reasonable requirement: "Use the javascript style guide required by the project, or select one that is well supported or maintained by the community."
Hi everyone, I am finally happy with the point the project is at so I felt like it would be a good time to share it around. This library tries to solve the problem of orchestration in a new server/service. The main goals being: + A generic interface + Simple api + Feels like vanilla JavaScript I grew tired of dealing with setup of a bunch of different libraries if I were to work on a new project. My solution to this was to create a generic interface so that any type of application can be built with minimal effort. So far I have a plugin for an `http` server and a plugin for `discord` interaction. The documentation may be a bit rough around the edges (It can be a bit tough to write about how to use the tool when I know the entire thing inside and out), so feel free to reach out with questions or submit issues on GitHub. My hope is that this helps others who are seeking a simple, generic interface to write their applications with. Cheers!
No different than any other language. You should be able to write clean, maintainable code that performs well in production, and generally adhere to "best practices" or at least have an opinion about the way you do things. Everything else is just details. If you claim to be a "professional" in a programming language, you should obviously know the syntax/built ins inside and out.
Yeah, there are (of course) several different code style standards. I'm personally a fan of [Standard JS](https://standardjs.com/) 
I agree, but the point of this is to just go with something and stick with it, instead of wasting time on bike-shedding - arguing over what boils down to preference. If one's so inclined, they could just go with StandardJS instead of AirBNB and the guide would be just as helpful.
Just keep practising, reading other people's code and exploring different things and all of it will eventually come. Think of where a certain technique/trick you just learned could be used and try it out. Throw away jQuery and implement everything you need with vanilla Javascript. Slowly, but surely, you'll get there and feel a lot more comfortable writing JS. And please don't get frightened by all these (actually, one guy) people making you feel like you're on a job interview and need to know everything or else they'll tell you you're not hired in that' "stone cold corporate" manner. I hate that shit. 
It can happen on Mocha too ... IIRC it happens if you throw an error during a `beforeEach` or `afterEach`.
Good job thanks for sharing. I would disagree about the documentation section. I don't think you should encourage to write comments unless very specific case where the logic may be very complex. Instead, to me, you should encourage to write self explanatory code, to pay extra attention to the naming of the methods/classes/variables. To refactor the code as often as necessary to remove the code smells like long methods, feature envy, bad naming etc. It's difficult to write intelligible comments, often only the author of the comment can understand what they meant, for the rest they need to read the code. So better focusing on clean code. Also you can mention that tests actually act as documentation. So the attention should be also put on organizing tests with a meaningful description for each test case. 
That makes great sense. The title should be updated and this summary included at the top. A more appropriate title would be "*My* Best Practices for a New Javascript project." or something like that. 
I'm not a big fan of having three different integration environments. If you can swing it, setup branch based staging environments (using a service like Runnable makes it a little easier) and get rid of the development integration environment. The more integration environments you have, the more likely you are to get yourself into a situation where code gets merged that holds up other features that were merged because of some common process mistake. If every feature branch is deployed as a working environment, and QA'd in isolation, you can often get to a place where all you have is master and feature branches.
I like comments, but I'm forced to agree. They can improve the codebase, or they can act as an excuse for bad code. Clear, concise, preferably declarative patterns will always be easier to understand. This is especially true if you work in a shop with many people of different nationalities. If everyone is ESL, and the company writes code in English, it will be difficult to communicate via comments. Demonstrations are easier to follow than explanations, most of the time. 
You don't need Inheritance in this language. If you mandated such I wouldn't work for you. I honestly don't know the difference between bind, call, and apply because I never use them. It is hacky shit to change the this value of a function. This happens most typically from using a method when you probably should be using a local function because you are uncomfortable with nesting and scope. I have seen people refer to this stuff as an expert skill often, but it strikes me as a newb thing.
You can't have two functions/variables that are both named exactly the same thing (in the same scope) in JavaScript. If you were to run a script with the following: function setup() { background(255, 0, 0); // red } function setup() { // This function completely overrides the first setup function background(0, 0, 255); // blue } Then you would see a single blue canvas on your screen. The first setup function gets overridden by the second setup function. What you want to do is merge the code from your two separate setup functions into a single setup function.
I don't think I ever said anything about using OO concepts. I was just explaining what was important to know about reimplementing ES6 classes in ES5 syntax. I too dislike OO in js, but many others do not. It is not necessarily "hacky" shit to understand and use scoping, or the basic properties of functions in the language you're using. Though please elaborate on why you think they're only useful when you should actually be using a local function. I assure you they're not newb things. They're foundational to the language and useful for all sorts of things you apparently haven't run into yet. Read the libraries you use. 
Most of the style rules end up being like driving on the right versus driving on the left -- there isn't really a clear winner between the two, but there is a VERY strong advantage to having everyone pick one and stick to it.
Code style is overrated. Pick your favorite beautifier and have it format the code to the team standard on commit. This is something that can be fully automated. Edit: sorry for all the repeated deletes. Reddit is acting silly on my cell.
Yowch. That would be hell when trying to do team code reviews or any updates to the code on a piece you would otherwise be familiar with, IMO.
They are talking about Prettier if I'm not mistaken.
I think all modern technology guides not created by the authors of the tools should be considered opinions by default.
This is the best description for the need of coding conventions I've ever heard.
Cool..
I run multiple servers on my workstation, all different projects, and I don't need webpack at all so what is the purpose of having duplicate effort by webpack?
Linters can pick up on more things than just formatting. Unused variables and unintentional variable shadowing are some of the common ones but there are other benefits. Obviously code reviews help but if you can have something that picks up on formatting AND common JS issues, mind as well configure both the linter and the formatter.
AVA
its also an amazing management strategy in general, consistency goes a long way in making future progress palatable
Who said you did? Why would you use a tool to make your webpack workflow easier if you're not using webpack?
since javascript is dead now. this is rather pointless.
Jest
Does your beautifier rename methods too?! 
JS is dead now? How long was I asleep? Do we have fembots yet?
Sure, i will be careful next time
Jest or Mocha. Jest is amazing for it's out of the box support for ES2015+, code coverage and other nice things. Very little setup required. You can't run tests in a browser though. Mocha is still a great tool, if you need to run the tests in a browser use Mocha.
Yes, you should lint the code too. Beautification is not exclusive to linting.
I tend to use a third method: const chain = initialValue =&gt; (...funcs) =&gt; pipe(...funcs)(initialValue) You will often use these data transformations in only one place of your code so saving the composed function in a variable doesn't help. Having the value directly at the end of the chain is unintuitive, especially when using pipe. Edit: example usage newValue = chain(2)( square, addTen, x =&gt; `the result is ${x}` ) 
How do you figure? If the code is always formatted to the same team standard on commit why would the code reviews be harder? Your comment is completely unclear, but I am guessing you are talking about a text diff that indicates more changes (false positives). If this is the case use a more intelligent diff tool. There are many open source tools available that can be integrated to your automation process.
Cry about it during the code review. I am currently leaving an employer where various teams have no uniform standard and so everybody is OCD about all kinds of unimportant time wasting bullshit like this.
&gt; Though please elaborate on why you think they're only useful when you should actually be using a local function. I don't use them at all. If you used local functions, where the `this` is clear you won't find yourself needing to set call, bind, or apply to access the callee instead of the object on which the method is attached. &gt; I assure you they're not newb things. They're foundational to the language No they aren't. They are unnecessary conveniences added with ES5. People were writing code in this language, even large applications, well before those were imagined.
That's a good point, thanks for explaining the reasoning behind the reversal of `initialValue` and `funcs`
I've literally been working on creating something like this. If you're interested have a look https://github.com/jimmaaay/d-carousel Edit I've still got some stuff to write regarding polyfills for older browsers in the readme
Same here - it's just annoying how it doesn't like `new C()`
code style !== lint
- Bigger circles can spawn on you and cause death without the possibility to react - Times over 100 seconds are too big to be displayed - after reaching score 30, the game gets boring because waiting is enough to get bigger
Axios is a really great way to do ajax. https://github.com/mzabriskie/axios Plain js (of ajax), after understanding is reached, in imo is a waste of time.
Isn't npm5 [pretty broken](https://github.com/npm/npm/issues/16991)?
[Here you go, pal!](https://www.youtube.com/watch?v=TwHsg2XO--c)
I was not talking about text diffs. Let me clarify: 1. Team code reviews -- and really meant to say any team collaboration from a broad spectrum (remote, junior, lead, QA, devOps, wordpress blogger, etc.) where language differences can be a barrier. 2. Updating code that you may have otherwise been familiar with (you coded it, committed it, others committed on top, you are in a new branch now on the same code which looks WAY different -- and mysteriously moved to a new location -- since that does happen.), you have to review and relearn the code you should have been familiar with at a glance. If I had to make an opinionated recommendation based on experience, it would be to use a team chosen style guide *while* you code. I witness less conflict in communication, collaboration, and demos. I think we release faster (though it may be contextual to my experience.) Some scenarios I have heard when preferring one's own way while coding: * 'Your documentation suggested coding something one way, and now the new guy used it verbatim accidentally nuking prod. I thought your linter|beautifier|editor was supposed to catch stuff like that.' * 'It's [insert complaint] to have to fix your errors when [applying your patch|fixing a dirty commit when your beautifier/linter failed to catch that thing|hotfixing some emergency myself that should have taken you 5 minutes but I was asked to because you had to review the code you wrote months ago first.]' I do see pros and cons with either preference, but if you don't like my suggestion then at least we can agree that it really only matters for a project if we can communicate effectively and return the required outcomes.
I used to agree with you. But how developers define self explanatory code is very subjective and differs from developer to developer. I think clean code should be there by default and commenting is always a help. I'm going to include your point.
StandardJS style is way too loose. If you want a strict style guide, have a look at https://github.com/gajus/eslint-config-canonical/.
&gt; With pure webpack (and with the DLL plugin), the entire bundle would still get rebuilt only changed chunks are rebuilt. If you have vendor chunk and app chunk, only app chunk gets rebuilt when you change your code.
why is this a race condition? "get search results" should just update the search results(and cancel only search result requests) and "get search term suggestions" should just update the suggested terms(and cancel only suggested terms requests)
If you had a team code style (which you've marked as "overrated") then your team wouldn't spend too much time in code review. 
Yes, that's exactly my goal. But I haven't found a way yet to tackle this problem. That's what I'm looking for. Currently I've build a single service/function that talks to the API. That's where I've implemented the cancellation of the requests.
It's not perfect, lack of newest things from best js frameworks, but has really nice UI, support, and good community. Why You fell terrible about ui5? :)
If the data isn't available until an event is triggered, skip the code that tries to acces it. If you want to process the data once they're available, use an event listener process them. Or don't execute the main code. Instead, use an event listener to wait for the data to become available, then execute the main code once the data is available.
You're absolutely right. The reason was transition from an internal guideline (we use airbnb) to a public one. Do you prefer to make a pull request? or I can correct it myself.
https://github.com/mobxjs/mobx-state-tree best of both worlds
Well, the only downside is that the entire team needs to be "in the know" to contribute to a project, but the learning curve is practically instant. Other than that it does inflict the bottom line of the business, since projects get done faster and are more stable, causing us to invoice fewer client hours. Clients are much happier though so we get more projects, and that evens it out. 
I'd recommend taking a look at rxjs. Doing things like this is what if was made for 
Your repo, man. I think it's awesome that you are sharing your thoughts and resources/requirements. There's always good nuggets of info that can be had from collaboration on best practices.
I do know about RxJS and that it can solve this problem. I just had heavy problems getting started with it. I do understand the theory behind it but I can't figure out how to really work with it, and I read many tutorials, watched videos etc. Maybe I give it another shot one day, or I start from scratch using the ES Observable proposal. I'll see. On the other hand: this feels like a problem that can occur in almost every project. So there need to be other kinds of solutions as well.
[removed]
[removed]
[removed]
[Thanks!](https://www.reddit.com/user/alex_nicole) Dick.
Well my opinion is that if a developer is not able to write a clear and intelligible name for a method or a variable, this same developer will not be able to write a clear comment :p
[removed]
You need to use chrome runtime onMessage and sendMessage. 
The API is very similar to https://github.com/tj/co, but you can send/receive between `co()`/`spawn()` functions. Probably not that useful for front-end JavaScript, but I think it's worth experimenting with in Node at least. :)
Greasemonkey provides cross domain storage for you. LocalStorage, SessionStorage and other browser provided storage methods will always be domain specific so every site doesn't have access to every other site's storage. https://wiki.greasespot.net/GM_setValue
Sorry for that issue. It was fixed.
Thank god this doesn't work. What a privacy nightmare it'd be.
Your example: example.firstAsyncRequest() .then( fistResponse =&gt; { example.secondAsyncRequest(fistResponse) .then( secondResponse =&gt; { example.thirdAsyncRequest(secondResponse) .then( thirdAsyncResponse =&gt; { // Insanity continues }); }); }); can be written as: example.firstAsyncRequest() .then(example.secondAsyncRequest) .then(example.thirdAsyncRequest); 
I personally find the gitflow strategy over engineered and not even effective for teams. It has the common flaw of making it very difficult to keep master branch stable. If any feature branch is merged to develop branch and it's not actually finished properly now you are effectively blocked from creating a stable release branch and merging it to master. It is much cleaner to branch off master and merge features to a test branch. Then when a feature passes testing that feature branch is immediately merged to master. This ensures master is always stable and can be released at any time. No need for code freezes etc to prepare for a release. 
Axios is great. Trust me
Wat
I thought about that after posting my list. In the case of C++, I made the comment because all of the major open-source javascript implementations (V8, WebKit, SpiderMonkey) are written in C++. I think to master any of the interpreted languages, you need to understand how the interpreter is working underneath. We're given abstractions to work with at the interpreted-language level. But when we need to push those abstractions with large data sets, speed, etc., you have to understand how they are actually implemented underneath to know productive optimization approaches. It probably doesn't matter at a junior level; the fact that JS implementations aren't using the C stack (instead, they implement the JS stack in the heap using linked lists) doesn't affect the junior dev's work. But knowing that sure helps understanding how closures work (the closure stack frame is simply unlinked from the JS stack and left in the heap). Knowing the engine, you know that hardware optimizations for stack operations don't apply at all to JS (stack pointers aren't managed in CPU registers). All of the documentation (and source) to learn these things requires some C++ proficiency. Separately, I think Node is as important to master for JS devs as the front-end stuff, even if all you do is front-end. A lot of tooling is node-based. And one of the things that's awesome about Node is that you **can** write modules in C++ that interact directly with the interpreter at a low level, and distribute them very easily. This is a world of difference from other interpreted languages and can solve a lot of really complex problems easily. As far as gaining proficiency in a functional language, the reason I said that is because I remember some time ago when there were a lot of developers with experience in procedural languages (like C) who moved over to OO languages (like me). I remember code that was more C-with-classes, than OO code. Drupal &lt; version 8 was completely like that - procedural PHP with some OO sprinkled here and there for appearance sake. It wasn't until a lot of developers entered the scene who were primarily experienced with OO concepts (and whose knowledge of procedural coding was more educational than practical) that a whole slew of best practices and good code started to show up all over the ecosystem. I see the same thing happening with JS. It's a great language for writing in a functional style, and great benefits accrue from doing so. But people are not yet really applying a functional paradigm to it; it's bits and pieces. You (the rhetorical you) know immutability leads to a more predictable system, so you sprinkle it in here and there. You can see how pure functions are beneficial - same in, same out - so you use them here and there. But if you take the time to learn a language like Haskell, where functional is the **only** way you can write code, you'll develop good functional programming skills. When you carry that back to JS, you'll get the holistic benefit of the style.
MDN is the Best
I feel like this is still an area of active experimentation. Redux alone has about [10 separate approaches](https://decembersoft.com/posts/what-is-the-right-way-to-do-asynchronous-operations-in-redux/) in general use, and this is just for getting the async action started. Debouncing and cancellation is a whole separate can of worms. I feel like most people "just make it work" by brute-force coding all the edge cases. This is what our team has been doing, and it works OK-ish for most stuff. Sometimes you sacrifice features to reduce the number of edge cases, like being sloppy with what you cancel. An extra query of two doesn't cost too much, after all. I feel like a full solution would have some way of saying "this is what I need" in a declarative way, and then letting the HTTP query engine sort out all of the details, sort of like how the DOM-diffing algorithms have fully automated the task of keeping the DOM up-to-date with your component tree. Manually calling `fetch` of `XMLHttpRequest` feels a lot like manually calling jQuery to update the DOM - something the computer should be figuring out, not the programmer.
That absolutely isn't true. There are far more important things worthy of review than spaces versus tabs.
&gt; Updating code that you may have otherwise been familiar with (you coded it, committed it, others committed on top, you are in a new branch now on the same code which looks WAY different -- and mysteriously moved to a new location -- since that does happen.), you have to review and relearn the code you should have been familiar with at a glance. Beautifying code will not generally move anything around. The only exception is if everything is a method and you are using a beautifier that sorts object properties alphabetically. Generally moving logic around could break things if you are calling a reference that hasn't been declared yet. Yes, agreed, clear effective expectations set at the outset solve most of these problems before they become problems.
Break it down, no-one will read all this code
The actor model, or erlang style actors would be 'elixir-style' actors here in this trendiest of communities. 
if(ui &amp;&amp; ui.item &amp;&amp; ui.item !== null) ProcessMunicipalityData(ui.item); 
&gt; I don't think you should encourage to write comments unless very specific case where the logic may be very complex. Instead, to me, you should encourage to write self explanatory code, to pay extra attention to the naming of the methods/classes/variables. This is sufficient in very simple and obvious situations but it doesn't scale very well, and I don't think more unusual or complicated requirements that benefit from comments are as rare as you seem to be suggesting. Sometimes it's helpful to have a short comment confirming that some code that looks unusual was intentional: the next section doesn't quite follow the usual pattern because in this situation the `frobnicator` might time out. Sometimes citing a paper about some data structure or algorithm you're implementing is helpful for someone maintaining the code later. Sometimes you might even need a warning about odd-looking code that is working around some compiler or library bug: don't turn `x+x+x` into `3*x` here without confirming that a new version of the compiler has fixed the optimiser bug that emitted incorrect output. Sometimes longer comments are worthwhile, perhaps explaining in one screen of plain English and/or ASCII art what the next thousand lines of tricky code are really doing, to help a new reader find their way around. Comments that just duplicate what the code is or could be telling you immediately generally aren't useful, but there are lots of other reasons that adding some extra information can help someone reading the code later. IME those overly literal comments are rarely a problem except for junior programmers, and under-commented code is a bigger problem for most projects than over-commented code, so encouraging (good) commenting seems fine to me.
Yes! This is where I wanted this discussion to go. Thank you. I also thought about registering and naming request types. Now every request type also needs a bunch of settings. E.g. if it should cancel pending requests of the same type or not. Now if there was a library that can handle all that, where would it be located in a dependency graph? I mean: would it be part of the ajax library core? Or a wrapper/plugin for that library? Or would it be more coupled with the framework - like Redux is (more or less) coupled with React or Vuex with Vue?
lol...in what universe are you living?
i guess you update the page in a callback? then you can have 2 separate callbacks,one for searches,one for suggestions.. maybe you can post your code to let us see how you make the requests and how you update the page
Eh, I just use [pnpm ](https://www.reddit.com/r/webdev/comments/6k2z90/pnpm_version_1_is_out_pnpm_medium/?st=J4R19WE4&amp;sh=000183b7) 
What did it get replaced with, Haskell?
I've already solved the problem in my current project - kind of. This thread is more about how to solve this problem in general or prevent it from happen again in future projects. Kind of like: "How do I manage my local data?" - "Use Redux!" - "Thank you." ...although it seems there's no ready-to-go solution to this yet.
Thanks, really helpful!
Sorry, my explanation was unclear on this. What I was trying to say was that the bundles go through partial rebuilds. Updating a single app file would not rebuild the entire app bundle. I've read further into DLL &amp; it seems that DLL works this way as well, so I apologize for that. There's always many ways to do things. If you prefer webpack, you should use webpack. This is the tool that we needed for our projects, we thought to open source it so other people could make use of it too.
I am imagining a function that does `state =&gt; arrayOfNeededStuff`. Every time the redux / vuex store changes, we re-run this function to see what we are missing. In the case of your example, if has typed some text in the search box, and we don't have suggestions for that text, the function would return, "we need a suggestion for string X." Likewise, if the user is on a results page, but has no results, the function would return, "get results for page X". Now, the HTTP engine would take this list of needs, and compare it with the list of in-flight requests. Based on that, it can automatically figure out what to start / cancel. If before we needed suggestions for string "javascr", but now we need suggestions for string "javascri", obviously we can cancel the first request, since it isn't something we need anymore. Likewise for search results. Once a request finishes, the app would stuff the result into redux / vuex, which means it will no longer be on the needed list. This is just a half-baked idea, obviously, but it's something I've been thinking about as our own app has become increasingly complex. I'm still not sure how it will work out in practice, or if there is a better approach.
Thanks for the response benjick, I didn't know you could flatten promise chains that way. I've added a [note](https://medium.com/@paulbreslin/update-it-was-pointed-out-by-benjick-on-reddit-that-its-possible-to-flatten-promise-chains-c43859753046) to the article. Cheers!
Cheers, no problem
How is this different than Web Workers?
What's so special about Airbnb's style guide anyway?
I think [the image for pipe is wrong](https://cdn-images-1.medium.com/max/1560/1*lWGBGQ1dSzK7Gq5iVE988w.png) It uses the same `f(g(h(x)))` -&gt; `func(f, g, h)` as the first image for compose, but one of those should be inverted. Probably the second so it's `func(h, g, f)`
You have 4? States, requested valid , requested invalid, no request valid, no request invalid. Figure out what you expect it to do in those 4 cases and how to track it (outbound calls counter, etc) and you have your answer. Not everything has a pluggable library, sometimes you just have to handle this kind of logic yourself.
Nice little tutorial for CLI users. One minor thing... and this is basically a medium thing but do we really need an image the full size of a screen we have to scroll past to get to the article? Seen this become a really common place practice and offers absolutely nothing to the article.
Wow, nice read - thank you for this! 😊 I am a front end developer, too - currently diving into rails, but I have plans for checking out python and django soon. Nice to hear, that the syntax is not that far away from known js 🙌
On mobile right now, but what you're looking for are Promises. They provide a standardized way of handling async tasks. I prefer es6 Promises, but most frameworks have some form of them (sometimes called defereds)
There's typos in the article.
Promises cannot be cancelled. Best you can do is essentially use another promise as a cancellation token.
This will be very handy in a few months when I started my thesis. Thanks!
They can be cancelled, all you have to do is call fulfill or reject on the original promise. [Here's an example](https://gist.github.com/pygy/6290f78b078e22418821b07d8d63f111)
[here's the demo](https://codepen.io/GabeStah/pen/BZxJmy) the link is halfway down the page, hidden in a sentence. it's like the author doesn't want people to see the finished result of their work
I'm already far beyond wether to use Promises or not. I'm also already able to cancel requests. The question is how do I coordinate the Promises or requests to only cancel the right ones. Canceling no requests has unexpected side effects but so does canceling all requests. I need to find the right spot in between.
What's the thesis about ? 
I disagree: Python's requirements for whitespace are stupid, arbitrary and unnecessary. How about if/elif? ELIF. Really? Don't we have a decades-old, de facto standard for this already? Arrogant AND stupid. Lack of line terminators: also stupid. These are artifacts of the laziness/dumbassery of the parser writers. It's pathetic.
No idea. I'm a 4th year graphic design student who does front-end development, so I am thinking of creating some sort of visualization for my 4th year thesis. My original plan was to create digital artwork via non-conventional methods (i.e. not Illustrator or a pen and paper). But as I understand the requirements &amp; restrictions for 4th year thesis I realize perhaps data visualization will be far better.
It sure is. This framework is amazing but if you want to render static only data look into chart.js , it's fun too and also has a good collection too. 
I've used ChartJS before when I created a futuristic admin panel. I was thinking of using an API to load in data and using D3 to visualize that information :).
What happens when it passes? How different is its API from vanilla React? Will adoption be easy? https://gist.github.com/duivvv/2ba00d413b8ff7bc1fa5a2e51c61ba43
My understanding is that there is no API breaking changes, except perhaps the removal of some things that have already been deprecated. The Fibre updates are entirely internal.
Although they are treating it like a breaking change as some people may have been relying on internal parts of the codebase incorrectly.
See Lin Clark's fantastic talk [A Cartoon Intro to Fiber](https://youtu.be/ZCuYPiUIONs) from ReactConf and Andrew Clark's talk on [Roadmap for React - Fiber and Beyond](https://www.youtube.com/watch?v=QW5TE4vrklU) for more info on what Fiber is and what it's intended to do. There's also an [excellent summary of React Fiber by InfoQ](https://www.infoq.com/news/2017/05/react-fiber-closer-look) as well, and I have some [links to more info on React Fiber](https://github.com/markerikson/react-redux-links/blob/master/react-implementation.md#react-fiber) in my [React/Redux links list](https://github.com/markerikson/react-redux-links).
I wouldn't say it's waste of time, fetch is heavily used.
I'm not sure if I get the first part. It also sounds a little complex. Maybe I get it wrong. I'm also thinking about how I'd use this.. whatever it will be. // register "data sources" lib.register('suggestions', { url: '/api/suggestions', method: 'GET', allowParallel: false }) lib.register('results', { url: '/api/results', method: 'GET', allowParallel: false }) // the options used below also have to be registered here // but I'm not sure yet how this should work // get data (code will actually be executed in some event listener) lib.request('results', { page: 1 }).then() lib.request('results', { page: 2 }).then() // cancels the first request lib.request('suggestions', { input: 'javascr' }).then() // does not cancel the previous request While writing this I wondered if using timestamps in your state management isn't enough to solve this problem. On the other hand I like the `lib.request()` function because you don't have to care about the request method, url and post params etc. What do you think?
What are typical use cases for something like this?
I think his needs and your needs may be quite a bit different -- there's a plethora of places to get basic, boilerplate CSS that can snazz up simple projects without having to know CSS at all (think: Bootstrap).
Can someone please explain to me the rational for shoving your tests in the same place as your code? I have seen this before, and every time i have tried it on anything beyond a simple project it has ended up becoming a nightmare. Often times you have numerous test specific helper functions, and tons of other test oriented cruft, where do all these things go? The root of the project? Also where do tests that encapsulate logic between multiple components go?
u/enkideridu just updated my article by using your tool :) check it out https://blog.sicara.com/compare-best-javascript-chart-libraries-2017-89fbe8cb112d
Cool! Thanks for the link out :) I need to make that chart easier to embed
[removed]
u/madole I just added Victory to the review
Awesome! 
Previewer: Preview images in neat lightbox and is super light-weight. Is the first JavaScript module I've worked on. https://github.com/ajayns/previewer
Yes and this should also work fine on Tampermonkey.
Your solution looks workable, assuming you manually cancel your requests when you leave the search screen. It's just another edge case to deal with by hand. I was trying to think of a way where the engine handles *all* edge cases, which is probably a bit overkill for your case (but maybe reasonable for the insane app we are building).
Nice article. I liked that you didn't try to rehash the docs. I do think that maybe you could've brought a short description of functionality. Basically I use `mergeMap` when I want the observable to complete and I use `switchMap` when I want cancellation. Where does `concatMap` fit into this?
Returning a selection from an array can be done by passing an index you would like returned; e.g. const someArray = [1, 2, 3] const max = someArray[0] console.log(max) // 1 Also just a note, JavaScript includes concepts like reserved words and predefined classes (objects) like the word Array, which by default is a constructor for an array class. So if you redefine Array in your code that is not a good practice like your above example.
No, I meant `ink` was taken on npm, but now it's mine!
Yep, will do bit later.
Every language has it's quirks. Different languages have different interpretations of general programming concepts. To say it's stupid is just... stupid.
You need to use https://www.npmjs.com/package/babel-plugin-transform-react-jsx and set `pragma` to `'h'`. For pragma, see https://www.npmjs.com/package/babel-plugin-transform-react-jsx#pragma.
Yep, I think you can.
Video doesn't work
You bring the JS file into the HTML file with a script tag: &lt;script src="myScript.js"&gt;&lt;/script&gt;
Welcome to 2012.
With tree shaking you can only import hyperscript part, which is also turboboosted with memoization and super easy to use with CSS-like queries.
yeah I understand that but where do you do that and when you do that does the js code automatically execute 
What browser? [mirror](https://streamable.com/40v43)
In the past week, I enhanced RE:DOM so that now it's one of the fastest UI libraries out there: https://twitter.com/pakastin/status/881771280760008705 No virtual dom and just 2 KB. Embracing pure JavaScript without any hassle.
I would advise against using jQuery if you can ever help it. As for learning XHR I would just consult the MDN page - there's a lot (or used to be a lot) of mysticism and hype surrounding AJAX in general, but really it's pretty simple and won't require any sort of tutorial provided you understand how HTTP requests work.
 var max = Math.max.apply(null, [3,4,7]);
Inside the body tag and yes, it executes automatically unless you use the defer or async attributes.
Sorry. Yes, I should have clarified that Tampermonkey implements the GM API. 
I've noticed the best developers might not know every tiny, obscure feature of the language but they are great problem solvers, are smart enough to be able to hold an entire app in their head and understand most networking, programming and computer science concepts very well. 
I've known people who do JS on a professional level but don't know the language inside out. That said, they're technically professionals but definitely not pros.
In your case I can't see a way around state management. When you sync router and state you can react to route changes. Some routers also have `onLeave` events or something similar. That's where you have to cancel all current requests. The best case is if you can call a `cancelAllRequests()` function that does all the magic. (But make sure you really want to cancel all requests. A music app for instance shouldn't stop the music stream when you change the current route) In the meantime I've been reading through the [Axios Documentation](https://github.com/mzabriskie/axios). I've noticed it already provides a very awesome API. You can create "data sources" (from my example) by creating new Axios instances with some default settings. It can create CancelTokens to cancel requests any time. And you can hook into the request flow with `interceptors` and `adapters`. Maybe it's possible to combine all that to build what I'm looking for. I'm diving into that now.
Hi /u/Saraen, this post was removed because /r/javascript is not a job board.
[removed]
Likewise. I've used both this and Airbnb and have come out preferring Standard, though Airbnb is certainly a bit stricter.
&gt; The problem is that composing functions like this doesn’t scale well. If you have many functions, your composition might end up looking like: `func1(func2(func3(func4(func5(func6(func7(x)))))))` &gt; How do we solve this? compose() takes functions as input, connects them such that the data flows from RIGHT to LEFT, then returns this combined function. &gt; `compose(func1, func2, func3, func4, func5, func6, func7)(x)` &gt; This is much better than the raw composition from before. 😊 Seems like exaggerated conclusions to me. We reduced the noise from parentheses, which is nice, but we didn't really solve or scale anything. It also assumes all of these functions take only one argument, which is often not the case in real life.
Reminds me of [this](https://blogs.msdn.microsoft.com/oldnewthing/20031223-00/?p=41373).
This is everything I wanted out of an intro to D3. It's been a huge blind spot for me. thanks!!
If AirBnB dropped semicolons I'd probably be on board with it
Text serialization (json, xml) will create redundant data; that's just the nature of the beast. Use binary serialization if you're worried about the size of your payload and the costs to serialize and deserialize. And for heaven's sake, don't use the `getTitle(note) =&gt; note[noteTitleIdx];` example. Your code becomes brittle and difficult to maintain.
I think (newer?) web developers are pretty undisciplined when it comes to things like this. We all like new and shiny and clever, but we don't really need it in most cases.
Thanks for the idea! I'll update the article. I use `mergeMap` and `concatMap` when I want Observables to complete. The difference between them is that `concatMap` will wait for Observable to complete before taking items from the next Observable. And `mergeMap` won't wait and will take items from Observables just as they are emitted. `concatMap` preserves the order while `mergeMap` just mixes the items from all uncompleted Observables.
For what it's worth you can easily override that with ESLint :-)
Which is why I show a better way than accessor methods right after that. As far as binary serialization: yes, it's a viable method but in JavaScript it's 10x the effort compared to this relatively simple tweak. It's not even clear it would be faster. Decoding json is super-optimized in JavaScript engines. Code to decode msgpack or protobufs has to be implemented in JavaScript which might or might not be faster. I certainly wouldn't make such claim without rigorous benchmarking. 
does it spawn "processes" on all the cores available? Does it have a "specialized" actors like erlang/elixir(supervisors and workers - supervision tree) and failover strategies?
You are creating tons of tiny Float32Arrays. Usually, there are a few large ones.
i don't think this particular lib does it but in erlang(thus elixir), you can spawn processes on all the available cores without dealing with the infrastructure(you can spawn hundred of thousands in just seconds on a macbook). They have failover strategies(will restart if they "break"), have networkd transparency(doesn;t matter if you communicate through another erlang node in the opposite side of the planet), and much more.
Awesome, thanks!
Interesting. I'm interested in using some kind of multi-threading for a Node server that will be performing heavy calculations. I dug into the actorjs code a little and didn't see any support for spinning up new Node child processes or leveraging the cluster. Guess I'll keep looking. 
Right, then you're not buying in to their standard completely anymore though
just use https://github.com/WebReflection/JSONH if you need to transfer csv-type recordsets and are worried about payload size. i'm not sure about the claim that many same-shaped objects take up more mem space than arrays.
Yeah, but one alteration across the entire project... it's not like it would break anything. So long as you have the linting tools and everybody adheres I don't think it's a big deal.
This is very similar idea. That being said, even if I knew about JSONH: 1. I use Go at the server and that particular project doesn't support Go. 2. Wire encoding is only half of the story. The other half in my article is about turning array representation of objects into classes so that you get nice API and efficient representation. 3. JSONH, as it stands, is for "homogenous collections" only. I need a little more flexibility in that my API returns JSON objects. Where it matters, I encode only part of the object as arrays. JSONH seems to require all of it to be array. 
And a grammatical error in your comment ;)
Hi /u/toqy, please refrain from personal attacks. Thanks.
Is there any place where I can post the job and look for any applicants in Reddit?
Destructuring is probably worth mentioning for this type of thing too since you can do something like: `const [id, name, createdAt] = notes[0]` But, I'm not really a fan of this type of optimization, or at least I'd just map the response data to make working with it more maintainable on the client. 
Would you point that out, please?
To build off up someone else's response if you are transferring enough data for this to matter. I would suggest making the following function: const createNote = ([title,message,date])=&gt;({ title, message, date }); Objects are just sooo much easier to deal with on the frontend and whatever speed up you would get on the frontend by reducing memory usage would pale in comparison to the cost of the extra function calls i( getTitle ).
There's also stuff like working under the assumption that lifecycle methods for a component will be called once and in a certain order. That's no longer true with Fiber. Those were never guarantees pre-Fiber but you can understand why devs treated them as implicit promises.
&gt; would pale in comparison to the cost of the extra function calls i( getTitle ) I wouldn't make such statement without a benchmark. Array access is faster than object property lookup and accessor functions that are "return this[5]" will be inlined by any half-competent JavaScript engine. It might or might not be faster but based on what I know about JavaScript jit implementations, such function calls would be inlined and therefore have zero perf impact. If you want to claim otherwise show us benchmark results. 
The file was called UPS-Package-1415247.doc.js this was in reply to a request for a tracking number. Is this malware? Let me know if there is a more appropriate sub for this sort of thing.
Yes malware. Definitely don't run.
Thanks, Definitely did not.
Out of curiosity I went through what it is doing. It tries to connect to one of 5 different websites and download some arbitrary code and execute that on your machine. Not sure what that code is, but definitely not from UPS.
Let's see if this finds anything useful. https://www.microsoft.com/en-us/security/portal/submission/SubmissionHistory.aspx?SubmissionId=9efa0717-b41b-4926-82f9-167cbd591cc8
Just FYI this syntax is [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment). [Destructing](https://en.wikipedia.org/wiki/Object_lifetime#Object_destruction) is something else.
[Obligatory Gif](https://giphy.com/gifs/news-group-anonymous-DBfYJqH5AokgM)
Honestly, it's just poorly written JavaScript. All the file you got does is download another file. There really isn't much to find there.
Yeesh, what's your deal with Python? Python is decades old (26 years), and [elif has been around at least 49 years](https://en.wikipedia.org/wiki/ALGOL_68), and is used by several languages. In fact, JavaScript is younger at 21 years! And for someone ragging on laziness and "dumbassery" of parser writers, it's [especially ironic](http://2ality.com/2011/05/semicolon-insertion.html) for you to say so in this [subreddit](https://twitter.com/brendaneich/status/349768501583548416).
One would have to download the other file to see if that contained anything interesting
Updated the article with more explanations 
 Math.PI.toPrecision(4);
OC is cranky.
It was funny the first six times.
Anyone have perf tests here? The only reason why I held off on React is because of the awful perf.
Last I heard, 16 is the base done. 17 is when the performance stuff starts to show. And if you watch [this](https://youtu.be/ZCuYPiUIONs), you can see the performance increases they are working towards. Someone correct me if I'm wrong. 
"Awful perf" is definitely relative. React 15's performance is fine for the majority of users. 
SUPER HYPE!!!! please, please tell me there will be backward compatibility with the createReactClass({}) module? I prefer it a lot more than what es6 looks like... Any answers to this? Thanks in advance! 
Well said. That's exactly right. I don't need to spend hours learning CSS to build a text box that's used one time, for one project. Thanks man.
It's indeed relative and it's below my standards.
https://jsperf.com/kl-data-access/1 http://imgur.com/a/mcBlh for my personal benchmarks on Chrome, Firefox, and Edge On first glance, it looks like Chrome's able to optimize all of the abstractions away, which in my mind is pretty amazing. Firefox and Edge, not so much. As far as simple data retrieval, staying simple is the fastest across all the most recent browsers. I decided not to create benchmarks for parsing the JSON, because the logic of not having keys in your JSON leads to shorter JSON strings, which leads to faster parsing. I think the logic there is sound. It seems like IMO keeping raw objects is still the easiest solution with the best maintainability. If data sizes matter a lot, going with CSV's and simply doing `([title,message,date])=&gt;({title,message,date})` at least documents the rest of your code as far as what data you're accessing, but at that point you could get further optimizations with a backend that doesn't serve JSON.
Ooooooooohhhhh BURN!
Yes, you can still use [`create-react-class`](https://www.npmjs.com/package/create-react-class)
Fuck off
[tangentially related Linus:](http://lkml.iu.edu/hypermail/linux/kernel/1402.0/00359.html) &gt;I realize that as a number, 3.14 looks familiar to people, and I had naming requests related to that. But that's simply not how the nonsense kernel names work. You can console yourself with the fact that the name doesn't actually show up anywhere, and nobody really cares.
Is there another library you prefer to use for rendering?
Thanks for the perf test case. I was trying to compare the speed when object/array had 6 properties. My theory is that object access would get slower when there are more properties. But boy, their UI doesn't like me and fails to save the test cases with very non-descriptive error message. 
There are many libraries that are faster, I shouldn't need to mention them as they are popular, but at this moment react is significantly slower than my custom built backbone.js-based setup that I've been refining since 2010. And while there are probably productivity gains to be had from switching to react it is not worth the performance penalty right now.
This guy knows how to have fun
gross
It's pretty unlikely anyone has perf tests comparing react to some shit you wrote so I don't get why you're posting other than to talk about some shit you wrote
Yesssssss. Do you get auto color output with commands like ls?
Right now there is no colored output. It's on my list though. I'll try to find a way
Before reaching into your JavaScript toolkit, take a step back and see if you can implement your interactivity in pure CSS.. With the ‘:hover’ selector you can do something like this: .diamond{ /* ... */ background-color: black; transition-property: background-color; transition-duration: 150ms; transition-timing-function: wade-out; } .diamond:hover{ background-color: white; } You can define a CSS animation and then fire it off in the hover selector as well...
I've been working on something similar and it has been driving me crazy
oh my god
I've been thinking about writing a blog post about how I did it, if your interested. I'd be glad to look at your project as well!
Colors is actually not very easy to accomplish. I'll add a github issue, but I don't have high hopes. EDIT: issue https://github.com/ericwooley/thewooleyway/issues/8
Wow J. Its really awesome and nearer to what i was looking for . Thanks..
[removed]
Nice diagrams! Very helpful and concise explanation.
It's not just the setting of 'this' that they are for though. `bind` is also for partial application, and `apply` let's you call a function with parameters not available to you at authoring time (e.g. Build an array of params and call with those). `call` is probably the only one there that does what you think. I can't think of anything other than context-setting that is achieved by call. So, sorry you're wrong - they're not hacks, they're very very important tools.
Meh. Already done by Knuth. TeX version is approaching pi, and MetaFont version is approaching e; they should both be bumped up and frozen at pi and e respectively when he dies.
If we use Typescript + redux + immutable.js what else does Elm offer? Coordinating at language rather than library level gives obvious benefits but is a big leap for a JS dev in the case of Elm. Automatic enforced versioning seems pretty awesome but no more than a nice-to-have. What else can we learn (copy) from Elm?
So, this looks like ransomware. Didn't get all the way to the bottom of the rabbit hole, but I got some PHP code that seems to encrypt all files, delete shadow copies and send off info about target PC for ransom purposes. https://pastebin.com/pY7LbS87 Analysis of PHP file: https://malwr.com/analysis/MDUzZGFjYWVhMzdiNDQ3M2I5MjE3N2JjZjNmZDE5ZTk/ edit: definitely ransomware -- "All your documents, photos, databases and other important personal files were encrypted&lt;br&gt;using a combination of strong RSA-2048 and AES-128 algorithms."
Appreciate you posting this here! Spent some time digging!
do you know how to have fun, or does fun knows how to have you?
Like this? http://jsfiddle.net/yo92f6L6/
Wouldn't [CSS animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations) be a better choice? It can also infinitely loop.
Noice
You can use css transitions or a javascript mouseover/mouseout event. If you want the same animation for mouseover and mouseout Id go with css transitions to keep it simple
its not how versions work you need another 1592653589791 patches to get to there
Can't tell if sarcasm or plain pointless rage
With opacity and CSS transition: http://jsfiddle.net/yo92f6L6/1/
What's the use case compared to tmux?
+/u/CompileBot node Math.PI.toPrecision(4); edit: I fucked up.
Output: [^source](http://ideone.com/PRm947) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/javascript/comments/6lh47x/the_latest_version_of_mathjs_3142_is_a_missed/djuj449%20Include%20your%20reason%20for%20reporting%20here.) 
Sorry, lets try again +/u/CompileBot node console.log(Math.PI.toPrecision(4));
Output: 3.142 [^source](http://ideone.com/xzHLGX) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/javascript/comments/6lh47x/the_latest_version_of_mathjs_3142_is_a_missed/djujhg1%20Include%20your%20reason%20for%20reporting%20here.) 
Just published my first NPM package, a project that brings together Highcharts and React, with proper React components, rather than passing massive JSON config objects. https://www.npmjs.com/package/react-jsx-highcharts Would love to get some feedback.
&gt; It also assumes all of these functions take only one argument, which is often not the case in real life. I would curry the ones that doesn't
Every reasonable password hashing algorithm will store the salt with the password. The assumption is that if you could secure the salts perfectly - you could just secure the passwords perfectly, which obviously doesn't happen in practice. The whole point of Argon2 is that it's slow enough to brute force as to be somewhat infeasible. 
Unless the code has changed since you read it, it uses Argon2 and not pbkdf. It does however, use the 'd' variant, where passwords should use the 'i' variant.
Tmux is great, but different. The main use case for this is to have a committed file, that runs all the scripts you need to run to develop, or build something. Idk about you but I find I often need to run more than one command for my dev setup. Eg rails and webpack, or react native and rsync, etc... In the past I've used concurrently https://www.npmjs.com/package/concurrently which is nice, but going through the output is really tedious sometimes. With tmux you could accomplish the same thing, but if you wanted to get devs up and running with less fuss, this would be better. Basically, it boils down to keeping the same workflow where 'npm run dev' does everything you need to make developing possible.
Part 2 is @ http://benediktmeurer.de/2017/06/29/javascript-optimization-patterns-part2/
That's really sweet, does it work with the upcoming Bootstrap4 too?
Not related to javascript, better off in /r/programming.
This assumes the parameter to be fixed is the first in the list. In real life, it often won't be.
All this method is doing is taking a list of the currently instantiated environment variables on the box, printing to a .env file, which is then presumably consumed by the dotenv package. So basically my question is why even rely on the dotenv package? Dotenv is typically used to get Dev environments running quickly without having to manually set your env variables on your machine. In this scenario you're taking the variables already declared, and then using dotenv to consume them, when you technically already have access to them in your app anyways. In short, you can keep dotenv as a Dev dependency and work without it. To illustrate: Create a simple Node app: console.log(process.env.NODE_ENV); Then run your app in the terminal, setting your NODE_ENV variable inline: NODE_ENV=production node app.js And voila. Your app should print "production" except this time the env variable was sourced from the machine instead of the .env file. 
 compose(func1, r =&gt; func2(1,2,3,r), func3) &gt; In real life, it often won't be. Come to glorious FP life, where it is! &lt;3
Not yet. Only Bootstrap3 at the moment.
You might want to check out https://opengenus-slack.herokuapp.com/
Very nice!
Why not use &amp;?
My project has not been published cause that was going to be a big party of it. It was going to just be a replacement for watch. 
I use `&amp;` and sometimes it seems to leave zombie processes if you CTRL+C. 
How about [promisify](https://nodejs.org/api/util.html#util_util_promisify_original)
I am not going to stop from putting your head in the sand, but the definitions for these methods are pretty clear from reading MDN. These methods (all of them) are for changing the value or context of `this`. They do allow the passing of additional arguments as an **optional** behavior.
I have a similar problem. Plan so far is to use https://stackoverflow.com/a/40498317/764384 solution to refactor into promises and then use async/await.
Indeed! I find partial application a lot more useful and versatile than currying.
Looks straight out of the corporate CEO handbook on how to convince the mass workers to keep at it. 
Would that browserify OK, given that it's a built-in feature of node? I've written so-called isomorphic code that does not rely on being in a node.js context, and want an answer that would work within or very easily port over to a modern browser, then there would be babel for further compatibility.
Creator here. It is basically running ESLint with your custom configuration and posting the result as a Github comment whenever you commit code to the repository. The source code is also available on [Github](https://github.com/lassegit/gitdude.com). Questions and critiques welcome. It is fairly beta. 
There are polyfills or other promisify libraries like Bluebird. Do some searching to find the best fit for your use case.
What /u/slmyers said, but that also is hard to read the output from
Pretty cool, but what are the advantages to having these types of errors running so late in the dev process? IMO, ideally these errors are brought up as you type in your IDE, then again before pushing to a remote.
Your looking for componentDidMount (:
&gt; 3) Turn Down a Promotion (Or, The Importance of Control) &gt; 4) Think Small, Act Big (Or, The Importance of Mission) The entire book can be summed up by 'git good'.
Thanks for doing my footwork for me (:
Depends on your way of working and project, but developers can use it to: - verify that commit code live up to a certain standard - sometimes developers don't use ESLint locally before committing - developers and others can causally browse commits, evaluate their code and discuss it - code committed from "outside" developers who aren't perhaps member of the core team gets checked too 
what number were stored ? 
I did try that, but it still fails to compile since `Sketchfab` doesn't exist anywhere
I see, this is good mostly for open source projects with many contributors, some open source. More so as a failsafe than a first line of defense. But I see he use of it now. Pretty cool!
You can see it in action on the [site's source code](https://github.com/lassegit/gitdude.com/commits/master). Thanks.
The book is divided into four sections. The title of section 3 is "Rule #3: Turn Down a Promotion (Or, the Importance of Control)". The title of section 4 is "Rule #4: Think Small, Act Big (or, The Importance of Mission)". They should be in the table of contents if you're interested in revisiting. They are good sections, worth reading in full. 
I'm not asking for comparisons to what I wrote, just standard benchmarks vs vue, inferno, etc. I only mentioned my backbone based setup because I was asked directly. 
Try using the data-hover="Over me!" attribute on your html code and in CSS, (.forumLink would be your 'Hover' text.) .forumLink:before { content: attr(data-hover); position: relative; top: 0; left: 0; width: 100%; text-align: center; opacity: 0; font-size: 0; } /* Span on :hover and :active */ .forumLink:hover span, .forumLink:active span { opacity: 0; } .forumLink:hover:before, .forumLink:active:after{ opacity: 1; font-size: 12px; text-align: center; } 
Clojurescript has some really good support for it with web workers, if there's bits you can do in browser. Not to recommend a different language -- but some cljs libraries have regular JS ports alongside or aren't too hard to make them with. I've been thinking about the same kind of thing for doing video compression. I used child_spawn to get the process parallel on a few videos at once and it damn near set my machine on fire. I couldn't figure out how to get more fine-grained control through node to make sure that the processes didn't snowball into the only think that was going on. Maybe look at parallel.js, it seems like it focuses on what you're trying to do. I'm checking it out myself /
Not really. The entire book is really just 'learn to love what you do by not sucking at it'.
tl;dr Defining a class outside a loop is better than defining a class inside a loop.
Yes, really. Those are the actual titles of the sections in the physical book. And I like your one-sentence summary.
You've probably forgotten about the script tag in your index.html if `Sketchfab` is undefined: &lt;script type="text/javascript" src="https://static.sketchfab.com/api/sketchfab-viewer-1.0.1.js"&gt; WillMount means the component is about to but hasn't mounted. DidMount is the correct one. class SketchComp extends React.Component { componentDidMount() { this.client = new Sketchfab('1.0.0', this.frame) this.client.init(this.props.urlid, { ... }) } componentWillUnmount() { this.client.destroy() // ? } render() { return ( ... &lt;iframe src="" ref={ref =&gt; this.frame = ref} allowfullscreen mozallowfullscreen webkitallowfullscreen /&gt; Now you can change `urlid` on the fly like you change any other prop: &lt;SketchComp urlid="7w7pAfrCfjovwykkEeRFLGw5SXS" /&gt;
I've seen something similar at a past company that integrated into the CI system. https://github.com/volmer/policial Why do this as a message and not as a CI integration?
Your problem is unrelated to the iframe. Are you using modules (either es6 or commonJS)? It looks like you are, and I'm assuming you're using webpack along with it (or some other module bundler). In this case, adding the script to index.html isn't enough. You either need to reference Sketchfab on the window, like this: ``` var client = new window.Sketchfab(version, iframe); ``` or import Sketchfab (preferred, if you installed it via npm), like this: ``` import SketchFab from 'sketchfab'; ```
If you take one thing from the article, let it be this: "Software development is a craft. And I don’t mean just crafting what appears on a screen, or building a bulletproof database. I’m talking about the code itself. Well-written, organized, readable code is downright beautiful. It has an energy of it’s own – it’s almost poetic." I wouldn't mind if that line was in the corporate CEO handbook.
You're right, my mistake. 
If you enjoyed that book you might like: Peak: Secrets from the New Science of Expertise, The Power of Habit: Why We Do What We Do in Life and Business, and The War of Art: Break Through the Blocks and Win Your Inner Creative Battles.
You're talking about micro benchmarks. Inferno's creator, who made one of the "fastest" library that exists and has recently switched to FB has spoken about the nonsense of it all recently, he's even measured perf *regressions* when React was optimized for such benchmarks. Hence React is maintained for real world applications, not flipping 100.000.000 rows back and forth. Fiber will eventually make an actual performance impact when its reconciler is unleashed. This will bring occlusion and priority tasks to the web. Micro-benchmark libs will still be "faster" flipping their rows, but they will run and behave like laggy web-apps as they always have while Fiber will likely compete against native apps from then on because it's been made to establish a stable frame rate over all things, it won't render all 100.000.000 rows when other components claim priority (for instance for animations or user interaction) which is the whole point of it: https://twitter.com/hollyglot/status/841364072972992512 As for your backbone stuff, there's no way React would bring you regressions unless you're doing something horribly wrong. 
Is it common for people to publish npm packages that don't have links to GitHub or some other open source repo?
God forbid a CEO from inspiring others to improve. No, come to work, do your job, be a cog in the machine. Do the same thing from 20, to 40 till you retire. CEOs to a lot of shitty things, the worst being chasing after short term profits, but convincing mass workers to keep at it isn't one of them.
Moment makes this painless... Otherwise you will need to string manipulate and add 1 to the number month (its zero indexed)
This is pretty neat. I'd like to see colour contrast (accessibility) added in there.
Redirect the outputs to log files. Zombie process with &amp; means poorly written code.
here's the code for what you want (if you don't have the liberty of adding moment for whatever reason), adjust to taste: var pad = function( str, thelength ){ var padding = "", pad_len, output = ""; //can check if-thelength b/c if ( str &amp;&amp; typeof( thelength ) === "number" ) { str = str.toString(); pad_len = thelength - str.length; while ( padding.length &lt; pad_len ) { padding += "0"; } output = padding + str; } return output; } var padCount = 2, msPadCount = 3, dt = new Date(), formattedDate = pad( dt.getUTCDate().toString(), padCount ) + "/" + pad( ( dt.getUTCMonth() + 1 ).toString(), padCount ) + "/" + dt.getUTCFullYear() + " " + pad( dt.getUTCHours().toString(), padCount ) + ":" + pad( dt.getUTCMinutes().toString(), padCount ) + ":" + pad( dt.getUTCSeconds().toString(), padCount ) + "." + pad( dt.getUTCMilliseconds().toString(), msPadCount ); console.log( formattedDate );
Only if you think it is.
Node.js v8 have `util.promisify` a utility to wrap node.js style callback in promises you can then use with async await.
Sure and then tail -f the file. But you can see how that is definitely more complicated, and less polished.
That's what I got from the article too. I don't disagree with it - when I was doing CS at uni I was seriously questioning whether or not I wanted to be a developer. After almost 2 years in industry I really enjoy developing, I enjoy being responsible for what I build, and I really enjoy writing good, clean code.
And would browserify handle this OK when packaging it for use within an HTML document?
Absolutely not. I switched careers at 27 (used to be a journalist) and now I'm writing JavaScript full-time at a great job. JavaScript isn't going anywhere and no human should ever stop learning new things.
Whatever you do don't spend any money buying a tutorial or getting "certified". There's loads of free resources out there to get you started. edit: from the /r/LearnJavascript subreddit [mozilla's howto](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps). Start here, and when you get a firm grasp on the basics come back and ask about webpack/gulp/what everyone's favorite UI library is.
Did you feel you had any "advanced" computer skills or anything like that, or did you just jump in head first?
also, chinese involvent brings more eyes to the table
25 doesn't sound too old at all. Teach yourself the basics, get an entry level web dev job and keep learning for a couple of years. Then after that you might want to move onto more "advanced" areas like software engineering or full stack development, where better knowledge of computing fundamentals is required.
What are you trying to achieve? Open a new tab with the search? Display results somewhere on your page? Get text results and parse?
Usually it's best to try the CSS solution before writing any scripts. Use the CSS hover attribute.
I want it to open for example Google search on the same page with the results of it. So it replaces the current active browser window (not opening a new page). 
Companies where this would work are an endangered species, if they aren't already extinct. Here is the Managers Guide: **The Golden Goose Principle** &gt;1) *Find a subordinate focused on providing value to others.* This person will strive for approval, so it is paramount that you inundate them with tasks and projects. Be sure to give little to no requirements and be as vague as possible on direction and expectations. Their pursuit of success drives them; if they succeed, you will shine with doing next to nothing. If they fail, it will be their failure, as the decisions they acted on were their own and not yours. &gt;2) *Find a subordinate so good they can't be ignored.* Make sure you keep this person hidden from other departments and management. Offer encouragement, but rarely offer praise. Instruct this employee to remain silent in meetings and conference calls while you showcase their work and ideas. Tell the employee you are shielding them the viciousness of upper management. &gt;3) *Find a subordinate who turns down promotions.* It is imperative to keep your Golden Goose under your thumb and off the radar in order to keep reaping the rewards. &gt;4) *Identify any employees who "think small and act big" immediately.* These employees will often have simple and direct plans to reach their goals and the goals of the department. They will often have metrics they refer back to often as to measure progress and ensure they don't stray off course. These subordinates must be either reprimanded or removed immediately as they tend to remove the smoke screen of confusion you've created in your department. If left unchecked, you will eventually be forced to give &gt;honest answers and accept responsibility and ownership of your department. Avoid this at all costs. Thunderfan1984 put it best. **Follow Your Passion!** I make it a point every work day to spend at least an hour or two keeping up with new technologies, methods, paradigms and languages. My passion is programming. My employer is a means to continue pursuing my passion in a comfortable way. The trade off is I need to give them some of my time in exchange. Today, people stay at jobs around 2-3 years before seeking other opportunities. Use those 2-3 years to give your employer what they're paying you for, but also to develop your skills and acquire new ones to bring to your next job. 
Love Angular 1.x; will not be moving to Angular 2/4/whatever. Looking at React/Vue but as the comment at the link says - "citation needed". And yes, I get the tongue-in-cheek-ish-ness of this (cough, straight lines, cough), but as is, it's not helping your case.
No way! I just started programming 4 months ago, and I just turned 26 in May! It's all a matter of how much time you can/are willing to put into it. There are a ton of resources out there that you will hear recommended, but a good path that was recommended to me is: freecodecamp and do as much of the JavaScript sections that you can. JavaScript: Understanding the Weird Parts, a $10 course on Udemy that will give you a deeper understanding of the language. The free ebook series "You Don't Know JavaScript", which gives you a REALLY deep understanding of the language. Finally, I've heard good things about Eloquent JavaScript, another free ebook, but I'm not sure where that would fit in in terms of difficulty with the previous things. The bottom line is that it's definitely not too late to start. Depending on how much you're willing/able to work on this, you could have a decent paying job in a year.
window.location.href = url + query
No, it is never to late! Head over to [javascript.info](http://javascript.info) and have fun. And don't worry about "starting late". What matters is what you do today. Don't worry about being the best in the world... just be your best.
Theres many ways to do this. Personally I prefer any method of managing variables without generating a file that could accidentally end up in a public git-repo. Theres ways to do this through NPM which I think is the best way to do this. Generally I don't think you should need a package to do something like this.
&gt; window.location.href = url + query So it's window.location.href = google.com + query? That's it? ....and where do I place that? 
I suppose, not sure because I have not used browserify for a long time and with webpack it works
Use tools.
At a high-level, this is what you'd do: - On sign-up, create a column that's a unique GUID or whatever algorithm you chose to generate this key. Probably should be indexed for usage later. - In your API docs, mention that his token _must_ be passed in via headers or query-string param. - Organize your "private" API so that it's all under a single path (makes it easier in express or others). When a request comes in, use middle ware that will: - Inspect the request for this secret, if it's not even present (or doesn't match the appropriate pattern for the algo), fail the request. - If it is there, look it up in your DB and see if the user is even active/paid-up. Fail if not. - If you reach here they can proceed, so call next() or allow the request to flow through. This, of course, assumes you have a DB (which you'll need anyways for accounts fwiw). 
You will need to implement a [UUID(GUID)](https://www.npmjs.com/package/uuid) generator that creates a random unique token. During the sign up process the server will generate a token which will then be saved with the user in your DB, and be given to the user to use when hitting your API. When the user hits your API they will supply the token, your server will look up the token in the DB, and if there is a match will let the user continue.
I finally moved over to VS Code and this is the best plugin ever (for a fellow terrible speller): https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker "Me fail english? That's unpossible!" - Ralph Wiggum
Here's a basic concept: https://jsfiddle.net/qtq327dv/ The ones that don't work are just blocked from being used in an iframe.
For the most part, yeah. Make sure your query is formatted to use the right params per provider. Eg `https://www.google.ca/search?q=test+query` You place it in the code that is called when you press the button.
Oh man, that looks perfect. Thanks so much
Bingo! I'd never tried moment prior to this. You weren't kidding! I figured it out within five minutes. Thanks!
I ended up going with moment.js, but it's impressive that you came up with this.
You must be talking about some kind of edge case where that's true. I'm talking about the current react's mediocre vdom implementation which is not as efficient as newer engines. That's why React Fiber needs the new "reconciler" because their old one is inferior to other popular frameworks as well as anyone who takes the care to optimize their code on a low level.
This is exactly it. It's yet another example or corporate America trying to convince the masses that chasing their passion is ill advised and a waste of time. Even within the article one of the lines was saying that even if you chase your passion nobody will likely want it. As a actual working software engineer who has worked for a top 5 hedge fund, multiple SaaS startups, and a few corporate environments I can attest to this first hand. If anything the fact that this article is scoped to software engineers makes it even more false. As a working software engineer you are VASTLY more equipped to chase a passion project than any other corporate drone. Ideas are cheap to build and you only need code to vet out a potential new project. You can demo something real and tangible vs a service based industry or a physical product maker who needs thousands for a simple mold of his project. This is just trying to convince corporate workers that their dreams of running their own business are misguided and that instead they should simply invest in more skills to make them more valuable to their corporate overlords so they don't get canned. Following your passion can be one of the best life decisions you ever make. Maybe some of those passions won't put as much coin in your pocket as your corporate CEO will but you get to wake up every single day and LOVE what you do and it will enable you to work harder at it BECAUSE its your passion. I don't know many corporate workers who go into work and LOVE what they do to the point that they ACTUALLY give the same effort as if it was there project. 
I knew HTML and CSS already, it's a good solid base. But I had no programming skills.
Assuming node.js : https://blog.hyphe.me/token-based-authentication-with-node/
I'm familiar with basic authentication, but my question is more targeted to getting a secret and access token for an app similar to how you can have 4+ apps registered in twitter, and each app twitter gives you access token and secret token and you have to enter a callback uri, etc... I hope that clears things up better.
I created this a while ago and though I'd share for feedback and to spread the word :)
I'm sort of in the same boat. I'm 35 and just started learning progamming. I feel a little late to the party but if making a career change doesn't work out at least I will have picked up some skills I can use as a hobby or side hustle. 
I am convinced (having worked in an accessibility organisation in the past), that one of my colleagues has dyslexia. Their coding is very, very heavily reliant on copying and pasting - even single words. Classic mistakes of wrong homophones and transpositions. Their spelling and writing (particularly in comments and docs) is dire. You know they've copied and pasted because the same errors are repeated. But no-one has ever raised the subject and it's a difficult one to bring up. "Hey dude... are you dyslexic? Because you can't spell for shit!" I get that some people can't help their spelling. It shouldn't be a barrier to doing a dev job. WebStorm does the same as that VS Code extension by default and that's what we use. But if you don't know how to fix the spelling it's an extra level of complication. At least you're aware of it, and hopefully your colleagues will be understanding. But if you try to pretend it's not a thing you'll just make people awkward and grumpy having to deal with it.
&gt; Whatever you do don't spend any money buying a tutorial or getting "certified". this so much. Javascript is the most open programming language. Certification may make sense in C# or Java, the only certification in JS world is your github portfolio, stackoverflow profile and maybe past projects.
_The Pragmatic Programmer_ is a great book that talks about this too. I think you'd enjoy that one
All this adds compared to the built-in `try-catch-finally` is error filtering. I suppose this might be a little nicer than an `if` or `switch` statement in the `catch` body, since you don't have to re-throw ignored errors. You don't define what catch-by-name actually does, though. All built-in error objects have a `.name` member, which gives the type. When defining my own error types, I always add this as well. I imagine catch-by-name could first check the `typeof`, then the `e.name` member (if it exists), and finally the `e.constructor.name`, which should cover all the common error types. None of these tests should be case-insensitive (boxed primitives are *not* equivalent to their primitive counterparts, and shouldn't be treated as such). The `typeof` checks don't work cross-frame, so a name-based filter that actually works would be more useful.
I like the idea of having a fixed bar for controls. Would be nice to have an option to have it at the bottom, because in larger phones the top area is hard to reach one-handed.
Thank you so much! But instead of an iframe, how do make the search use the full browser window (not iframe)? TY.
As i've tried to tell you, Fiber will be "slower" than your popular benchmarking frameworks on paper. That is because their metrics do not amount to anything. Fiber wasn't made to compete in micro benchmarks, it was made to bring native performance to the web.
Change `results.src` to `window.location` The iframe errors will still be there because of JSFiddle's iframes, though.
had most of it handy for another format I have where I can't pull in other libraries... I just swapped some pieces around for your format
Same as /u/foleyatwork and /u/jiblet84: I started life as a writer. I've got a BA in English and that for *ten years*. I switched at 35 and managed to teach myself javascript in about 8 months.
Having a linter integrated into your dev environment is extremely helpful. It will let you know if you have undeclared variables (because you misspelled them) or if you have weird brackets (because you wrote "elise" instead of "else"). It can be bothersome at first, but you can tweak it to give you the proper amount of strictness.
Neat!
Wow, so it's out of beta already? That was fast. Congratulations! I tried beta6 version recently, and it was rock solid. Only I thought nested layouts were on the roadmap for v.1 though. I was hoping those would be added before the big release :-/
u aint win shit my nigga- try again lulz
There are many API gateway services available. Checkout AWS API Gateway.
The general consensus here has it right - no, you're definitely not too old. I started learning a little later than you and got my first development job (in an extremely competitive market) after a couple of years, and it can definitely be done faster. I had absolutely no prior experience going in, and it was painful. Don't expect the road to be too easy, but don't get discouraged either!
~~Nope. The class is never defined inside the loop.~~
Yeah... Now I have to scroll to the bottom (because presumably that content is there for a reason, and if not, removing it would be a better fix) and then go back to the top to continue. I don't see the improvement, frankly. 
serious question: what's the difference between this and simply setting up a per-route static cache for React's `renderToString` output?
1) Use snippets to write a lot of code for you 2) Use a linter like ESLint to tell you when there is something wrong
THANK YOU! Been waiting for this for ages.
I have a few problems with the term "craftsman mindset". In my eyes, the reality of a "craftsman mindset" is totally different from the "Craftsman Mindset" described here. The terminology is wrong IMHO. There are two roots for my position: One, I am a professional developer and have been one for about 15 years. In this position I've learned to live the real "craftsman mindset" to make money. Two, I have bought a house and hired a lot of traditional craftsmen to do work for me: painter, tiler, landscape gardener, electrician, heating contractor, plumber and so on. So, I experienced the real-life "craftsman mindset" hands on. What is the "craftsman mindset" in reality, then? The craftsman tries to sell you a project for as much money and with as little work as possible. They will take shortcuts when you are not looking. They will not constantly think about how they can improve and get better. They will usually only think about how they can get stuff done faster. They come to you, quote you a nice big number, then they get to work and do what they are more or less good at. Of course, they want to beat their estimation because they want and need to make (more) money. Unfortunately, this is practically the same in software development for fixed-price project work. (Fixed-price project work is the only fitting analogy to how a traditional craftsman would work.) You give the customer a quote considering a project time almost twice as long as you think it should take. Then you get to work and you will try to be as fast as possible. The aim should not be to give the customer a system that will set new standards in software development quality. The aim is to quickly deliver a system that will work well for the customer and where they do not notice where shortcuts were taken. Just as most traditional craftsmen, you do not constantly think about how you can improve your skills in general. Actually, you should constantly think about how you can reach goals faster without compromising quality noticeably. So, the "craftsmen mindset" is used in software development but it's something else than what is described in the article. 
Yeah, that's new. \*shrug\*
I copy-paste my variables. The good news is often my spelling mistakes carry forward. If a mistake doesn't lead to a bug... is it still a mistake
I personally not understand the notion of coders wanting to write "beautiful" code. It upsets me every time I hear a dev talking about making "beautiful" code. Code is not artful or "poetic". Code is a tool. You write as little of it as possible to get the job done. You don't over-engineer. You keep complexity as low possible. You write it as if you explain something to a 5-year old. You automate as much as possible. If this should be your idea of beautiful, fine. For a lot devs it is not, I'm afraid. Especially junior devs trying to produce"beautiful" code in fixed-price projects have a tremendous influence on the profit margin. I know some developers who try really really hard to write the most "beautiful" code they can. In my experience those can be the worst money-sinks in a company. They over-engineer their work and produce "beautiful" but expensive code. They need twice as long as a pragmatic programmer. They often explain that the future maintenance cost of their code will be lower but in my experience this hardly ever outweighs the initial extra effort. This leads to those dreaded 'there goes my bonus' moments that I really hate. I agree that coding is a craft. But people should stop talking about it as if it is an art.
I feel like at the end of the day, the quality of code makes no difference to business revenue or your paycheck. Product effectiveness and code quality are two separate concepts. Spend more time marketing, less time writing code. I prefer writing fast low-quality code that can be completely discarded, than investing time writing high-quality code that might ultimately have been a waste of resources. Basic architecture aside, in most cases, it really doesn't matter how you write your CRUD apps.
What do you mean "too late"? In your career? In Javascript's lifetime? Either way, the answer is "of course not, silly." Learn anything anytime.
use an ide that had intelliesense, like vs code. i can't remember the last time i typed more than the first 3 letters of an object.
The best way to improve bootstrap is to not use bootstrap ;)
Also serious: did you read the article? I haven't used Gatsby myself, but the description sounds like it's doing _way_ more than just rendering React components to strings. 
React is slower for real apps. Real benchmarks are more rare, but I'm pretty sure it is true as is true anecdotally for me. The way that vdom diffing and then rendering currently works in React is a non-starter to me. Even a little bit of care taken to performance using vanilla would give you better performance than the current React. That being said, I am excited for Fiber and seeing React fix its issues and get onboard for 2017. 
Can you update us when 4 is supported?
You have three options. The classic solution is to pass a function describing what you want to do with `rtn`, rather than returning it. Then inside `test`, you call that function on it. So if you were going to write function test() { var rtn; request(url, (error, response, body) =&gt; { rtn = body; }); return rtn; } let val = test(); console.log(val); instead you would write function test(callback) { request(url, (error, response, body) =&gt; callback(body)); } test(console.log); Now you don't have to return the value, you just describe how you'd use it. Inside `test`, the name `callback` refers to the `console.log` function, so it gets called when the body is ready. The problem is that this quickly results in callbacks inside callbacks inside callbacks. So the more modern solution is to return a promise. A promise is an object representing a future value, with a `then` method to which you pass a function describing what you'll do once that value is ready. function test() { return new Promise((resolve, reject) =&gt; { request(url, (error, response, body) =&gt; { if (error) reject(error); resolve(body); }); }); } test().then(console.log); The more cutting-edge solution is to await the promised value, which you can only do inside an async function. function test() { return new Promise((resolve, reject) =&gt; { request(url, (error, response, body) =&gt; { if (error) reject(error); resolve(body); }); }); } (async function() { let val = await test(); console.log(val); })(); Callbacks are used all over the place, so you should get comfortable with those first. Some resources: - https://developer.mozilla.org/en-US/docs/Glossary/Callback_function - https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise
Thanks for commenting. First, your definition of "craftsmen mindset" (little c, m) is very different from the "Craftsman Mindset" (big C, M) described in the article. I think you mention that yourself. Second, I don't like your description of painters, tilers, landscape gardeners, electricians, plumbers, and so on: "they will take shortcuts when you are not looking. They sell you a project for as much money and with as little work as possible." I'm inclined to believe you either have had bad experiences with contractors doing work on your house or you are predisposed to look down upon these people and don't appreciate the work they do for you. I think all of those professions you mentioned are absolutely valid crafts and can be approached with the Craftsman Mindset described in the article.
As a developer, I believe technical debt is the worst kind of debt there is. To each his own, though.
now i did, and still have the same question. okay, it adds a querying layer that can pull the needed data during build time into the views. but you can do this by just caching the generated dom string (or stringifying the created dom). i'm not a React user, so maybe these things arent as trivial in React as i imagine they should be? i can make you a static site from any SPA with minimal effort via route-crawling &amp; dumping`document.body.outerHTML` in an onload or setTimeout/1000 call. via https://github.com/segmentio/nightmare actually now i have more questions: &gt; Route-based code splitting &gt; &gt; Many sites generate one JavaScript bundle for the entire site. this is a static site generator we're talking about, right? how much javascript does it really need to require code-splitting? a static site would need at most a bit of code for a mobile nav hamburger, maybe `position: sticky` polyfill, maybe some dropdown nav code and some lightbox/popop js if you're feeling adventurous (&lt; 2k total)
Really well written up, thanks! :D
I love your description of beautiful code: "Code is a tool. You write as little of it as possible to get the job done. You don't over-engineer. You keep complexity as low possible. You write it as if you explain something to a 5-year old. You automate as much as possible." Could not have said it better myself. This is exactly the type of code I am promoting in the article. I have a question for you: where do you draw the line between art and craft?
That's the problem - he doesn't.
I guess I overlooked a few things! Definitely all valid points so I'll look at fixing those behaviours. If you can natively convert a primitive literal to a boxed primitive, how are they not equivalent? When would you want to treat them differently? Do you mean `instanceof` checks won't work across frames? If so, that's noted in the readme, but I appreciate you can't then fall back to the catch-by-name if it doesn't behave as you expect. In general, it's not intended to 'add' a lot, which is why it's a tiny library, but if you're doing that kind of thing frequently, it's worth having an abstraction. I guess following the do one thing well mantra. I actually had the idea of building this as a TDD kata, when I was pretty junior, which is why I was making it cover some strange edge-cases (like catching `undefined`). I also haven't actually used it myself, so your feedback is definitely appreciated.
Google for Pathfinding algorithms. Probably A* is the most common here.
Hi Boomer70770, First off, thanks for taking the time to read my essay and craft a response. If those four bullets came from a real book, that is downright eerie and I would like to read that book so I know how to spot people attempting to take advantage of me. I’m afraid that those points you listed do not do much to disprove the points in the article. They simply show that some people will try to take advantage of others with valuable skills and stop at nothing to prevent their inevitable success (I guess they wrote a book about it, at least). People like that suck. I think you and thunderfan1984 both hit on a very valid and important point: **Passion matters**. In my article, I did not intend to say that passion is meaningless and ought to be ignored. If that point came through, that is my mistake and I need to take another stab at it. My hope was to convey *passion* as something that is not just fuel for the fire, but also a reward for patience and hard work. The point I'm trying to make is that in *software development*, it is *important* to adopt a mindset of consistent, incremental improvement and attention to detail — much like a skilled, veteran carpenter (that cares about quality) would build a functional, minimalist chair. I propose that one should take joy in mastering their tools (like Javascript!) and producing simpler, more readable code that accomplishes their goals (and is easy to test lol). In taking the time to *craft* this beautiful code (see eu_punk’s comment for a better description), one will find greater satisfaction and joy in their work. This satisfaction and joy can also be called “passion.” I think my mistake was bringing in all of Cal’s points at the very beginning of the essay, as they are not relevant to my point. I am only emphasizing one part of his multi-faceted argument, The Craftsman Mindset, and applying it to my profession, Software Development. 
If anyone knows how to contact Cal Newport, I'd love to somehow get him to weigh in on this conversation.
If the character, walls, and enemy can be represented in cartesian coordinates, you can use something called the a* search algorithm. If you're looking for a library on github, I would recommend searching for "a star" instead of a*.
While I agree with not getting certified I completely disagree with the concept of never buying a tutorial. Yes, there is a ton of good free stuff out there but there is also great premium content out there a lot of which is inexpensive. 
The line is the same as between design and art. Art may be there just for its own sake. It may not even make any sense. It may or may not make you think. Designs and crafts are built in a way that each of its parts support the main function. If something is well-crafted or well-designed it does not make you think. It makes you understand. Immediately.
Code is allowed to be art, the same way anything else is allowed to be. The point you're making about the problems caused by new developers who misunderstand the aesthetics of a project is good, but the issue there is the misunderstanding of the person in question, not the philosophical one of whether something is beautiful or art. Edit: an extra word slipped in there
Just think of all the people you are beating to having to switch careers to programming. Automation is going to be a bitch for alot of people you're out ahead of the pack. 
Hey, great work! In the future, can you please put in a description of what it is, even if it's just in the comments? So frustrating having to go to a site to even see if you're interested. Even worst when developers don't explain what it is or why you should use it over another tool/library/framework. 
Yeah it is, should start tomorrow morning. It's never too late.
Yeah we thought it better to just get a 1.0 out and keep adding features in minor releases then wait for every planned feature to get in.
I do not look down on them. Otherwise I would not have hired them. They are able to something that I would need a very long time to accomplish. Plus the results I'd produce would probably be much much worse if not downright dangerous. Sure, you could apply the Craftsman Mindset to any craft, experience tells me that this is not the case. We live in our house for one year now. We still have contractors coming back to fix stuff they did not do or did not do correctly (as specified in the contract). They did deliver a house that is nice to live in but they all cut corners here and there. They want to make money after all. So they have to be quick. They are not doing the work for its own sake. So, it's perfectly natural to do this. It's not inherently bad. It's just bad if the customer (me) realizes where they skipped a bit. And yes, I did distinguish between CM and cm in my comment. :)
&gt; GraphQL-based data processing layer Way too hip and cool for me. 
If you're going to make a joke, at least make the graph make sense... An increase in removed complexities results in added complexities? Wut?
Good idea — will do, thanks.
Oh, yeah, I meant `instanceof` not working across frames, not `typeof`. I work on cross-frame stuff from time to time, so it's a relevant issue. Yes, primitives auto-convert to boxed types, but it doesn't work in the opposite direction. A boxed `Number` does implement `valueOf` and `toString` so math kinda-sorta works, but it is still an `object`, not a `number`. For instance `new Number(5) == new Number(5)` returns false, even though they are number-wise the same. Rather than step into this minefield, it's better to just treat the types differently.
Yeah. I drive for ups. So one day I'm sure the robot trucks or drones will make most of us obsolete. 
Over [here](https://github.com/tjcafferkey/stylerjs/blob/master/src/index.js#L3) shouldn't you use `document.querySelectorAll` instead of `document.querySelector`? I think `querySelector` only returns the first element it finds that matches the query.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [tjcafferkey/stylerjs/.../**index.js#L3** (master → b43fadd)](https://github.com/tjcafferkey/stylerjs/blob/b43fadd7a07b3d65bc4eba6c8fc79837ad3e261b/src/index.js#L3) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djvnh9s.)^.
Ok. Code can be art. In fact I have written an article for a web dev print magazine about the very topic. I participate in size-coding demo competions (like 1K or 4K demo) in my freetime and yes, this is code that I am willing to accept as art. In production code, however, I do not want to see art. I want to see design. Every bit should serve the bigger purpose. There should be no accessories or additionals that do not serve a specific purpose. And I agree, the over-engineering dev is the problem, not the philosophy. I think I just have gotten tired of seeing people mess stuff up for the sake of beautifying their code. After all the years I might have become that equivalent of an old finger-pointing man who speaks of the better past instead of actively trying to improve stuff. Dang. Here is something to think about.
From the blog post: &gt;Gatsby is your friendly, blazing fast static site generator for React. And after nearly a year of research, prototyping, and testing, Gatsby v1 is ready for action. &gt;Static site generators offer many benefits over traditional dynamic website frameworks — better performance, higher security, lower cost of scaling, and a better developer experience. &gt;As part of v1, Gatsby blazes new ground for static site generators by supporting rich integrations with CMSs like Contentful, Wordpress, and Drupal, and a suite of features, on by default, that make your sites startlingly fast — route-based code splitting, service workers, offline support, and more. &gt;Gatsby means no more compromising between developers, designers, and authors.
Neat game! I converted it to canvas for you. It runs much faster now :D https://codepen.io/jbrundage372/pen/VWGLeE 
Did I say faster? I meant smoother.
Men, gun looks so good, but my bosses already hate catchy hipster things... the name does not inspire me confidence. 
Looks like a single item is the intended behavior and `querySelector` is correct, since the function name is `getElement` not `getElementOrElements`.
Any old JavaScript beautifier/formatter will get you started: http://jsbeautifier.org/
Talks about workflow and then brings up inferno. You're pretty fucking confused buddy.
First step would be to take that array at the start and un base64 it. It gives you: ["UHJvbWlzZQ==","UHJtc1dycHI=","YWxs","YXBwbHk=","e30uY29uc3RydWN0b3IoInJldHVybiB0aGlzIikoICk=","Y29uc29sZQ==","bG9n","d2Fybg==","ZGVidWc=","aW5mbw==","ZXJyb3I=","ZXhjZXB0aW9u","dHJhY2U=","bGVuZ3Ro","Y29uc3RydWN0b3I=","ZW50cmllcw==","d2luZG93","bG9jYXRpb24=","bG9jYWxob3N0","SW50ZW50TWVkaWE=","Tm90aWZpY2F0aW9u","cmVxdWVzdFBlcm1pc3Npb24=","cGVybWlzc2lvbnM=","bmF2aWdhdG9y","Y29udGVudFdpbmRvdw==","Z2VvbG9jYXRpb24=","ZmluZA==","d3JpdGU=","ZG9jdW1lbnQ=","bnRmY3RuUHJtc3Nu","ZGVmYXVsdA==","UmVxdWVzdEZpbGVTeXN0ZW0=","d2Via2l0UmVxdWVzdEZpbGVTeXN0ZW0=","cXVlcnk=","dGhlbg==","c3RhdGU=","Y3JlYXRlRWxlbWVudA==","c2V0QXR0cmlidXRl","c3R5bGU=","ZGlzcGxheTpub25lOw==","YWJvdXQ6Ymxhbms=","YXBwZW5kQ2hpbGQ=","Ym9keQ==","YWRkRXZlbnRMaXN0ZW5lcg==","cmVtb3ZlRXZlbnRMaXN0ZW5lcg==","aGFzRm9jdXM=","Zm9jdXM=","Ymx1cg==","cGFyZW50RWxlbWVudA==","cmVtb3ZlQ2hpbGQ=","Y2xpZW50WQ==","Y2xpZW50WA=="].map(atob) ["Promise", "PrmsWrpr", "all", "apply", "{}.constructor("return this")( )", "console", "log", "warn", "debug", "info", "error", "exception", "trace", "length", "constructor", "entries", "window", "location", "localhost", "IntentMedia", "Notification", "requestPermission", "permissions", "navigator", "contentWindow", "geolocation", "find", "write", "document", "ntfctnPrmssn", "default", "RequestFileSystem", "webkitRequestFileSystem", "query", "then", "state", "createElement", "setAttribute", "style", "display:none;", "about:blank", "appendChild", "body", "addEventListener", "removeEventListener", "hasFocus", "focus", "blur", "parentElement", "removeChild", "clientY", "clientX"]
Yeah, been there. In chrome debugger you can also beautify scripts. Click on the external script and in the view page there is a button on the bottom left {}, which will format the script. You can then assign breakpoints, see error lines clearly and step through it. Super nice. 
Sounds great ... except when the debugger locks up :P
You seem very convinced of your ways, but maybe take a look at the long list of large companies using React in production sometime.
Hah :).
Okay I can get behind this distinction. Call me romantic, but I still like to blur the lines (craft, design, art -- same, same, but different).
It's never too early OR late to pick up a scripting language. 
we are trying to build a cloud integrated pomodoro clock that works natively with our mobile phones, laptop, browser AND comes with a physical LED light that connects to USB port, all from scratch. Electron and Node.js
Yes, it is a static site generator just like they said in the first line of the blog post. [Here](https://rocketmedia.com/blog/static-vs-dynamic-websites) is a good primer on the differences between static sites and dynamic ones. This one in particular just works very well with React and allows you to write your static sites in React instead of plain HTML. Next.js server renders your applications, meaning it is still a dynamic site, as the HTML doesn't have a physical location. With Static sites generating the HTML is not something that the server does, it is a build-time step.
Next thing you're going to tell me is that angular doesn't suck because google made it. Haha.
Wow those gatsby websites are fast, thank you for actually including examples. Might have found the framework for my portfolio/blog rework.
I think I'm starting to understand. Given that `Sketchfab` is undefined, is it best if I use `window.Sketchfab` as @mdboop suggests?
But you can redirect all output for each processes to the one stdout and just follow that. { cmd &amp; cmd1} There is a reason why these apps/shell utils were written 20+ years ago
The naive alternative is loading all dependencies for all pages on every request, even if the majority of that code isn't used on a given page. One might even do one better and inline the js in the html and reduce the the number of network requests, which could half the time to load the page. I don't know the particulars of gatsby, but that would be a feature that I would value.
The real treasure trove on A* and Breadth-First Search algorithms is Amit's game programming website.
Okay I'm sold. I will force myself to read about Vue and google for some jsfiddle examples 
This is my favorite resource -&gt; http://www.redblobgames.com/pathfinding/a-star/introduction.html
what code? it's a *static* site generator. the amount of js it should load is a 0KB-2KB for all "dynamic" enhancements it needs. everything else is not a "dependency", it is *content* plus maybe a single css stylesheet (possibly inlined).
You can do anything you want, any way you want, thats the beauty of all of this. No one is making you use this. If you don't like the way this organizes your scripts, do your own thing. Pipe it in and out of 10 files if you want. The library simply aims to make a simplified, streamlined way to run commands at the same time, with only node dependencies, that has a readable output.
You can use this jsfiddle script to get that functionality. Just figure out how this part of their onclick works: pathFinding(mapData, playerObj, mapData[x][y]); And adapt it to control your 2d grid/maze. http://jsfiddle.net/loktar/VP8nq/light/ 
I started at 32 with Javascript and changed careers a few months after starting. It's never too late. Frontend JS requires a bit more learning of HTML, CSS, and the various web apis if you want to start messing around. For that I recommend any of the free codeacademy style sites. For backend you can install NodeJS, and get the Learnyounode package to start playing. I basically started out by typing commands into the chrome dev tools. 
I think `Object.prototype.toString.call(val)` is a mostly reliable way to check types. Even cross frame. But it would consider boxed types the same type as primitives. Object.prototype.toString.call(new Number(5)) &gt; "[object Number]" Object.prototype.toString.call(5) &gt; "[object Number]" It's not the fastest thing in the world, though, if tons of performance is your concern (guessing it's not for an error handling library, though). 
The error is most probably here: `TO /temp/orders.csv DELIMITER` I've never seen an SQL query saving a file to be honest. Why don't you simply read the result of your query, and save it with node?
I use this approach + the yargs package to achieve all of the variable and option passing that I think I'll ever need. 
Can you read?
Since this would have helped me when I was starting out: Math.max takes an arbitrary number of arguments and returns the highest number argument provided. To make Math.max take an array of numbers as an argument you must use .apply. Apply expects the first argument to be an object to use as the context (in this case it doesn't matter), and then the array of values to use as arguments.
There can be behavior that is not static like a clock or something. You don't want to pull in the entire react library that renders the component that renders the clock, you want to inline any relevant functions and render the output statically, and prune off everything else in an ideal scenario. For instance, my component can have a counter: class Counter extends React.Component { constructor() { super(); this.state = { count: 0 }; } increment() { this.setState({count: this.state.count++}) } decrement() { this.setState({count: this.state.count--}) } render() { return ( &lt;div&gt; &lt;h1&gt;{this.count}&lt;/h1&gt; &lt;button onClick={this.increment.bind(this)}&gt;Increment&lt;/button&gt; &lt;button onClick={this.decrement.bind(this)}&gt;Decrement&lt;/button&gt; &lt;/div&gt; ) } } The render function can indeed render the div and enclosed nodes with a count value of 0, and the rest of the react libary can be pruned away assuming that Counter is not enclosed behind any logical conditions, but increment, decrement and count still need to be included with the page in order for the button functionality to persist. To be clear, I don't know that gastby does this, but it would be neat.
that makes a bit more sense, though you could easily just use the 3KB and faster Preact for this clock or use/write a minimal clock without any dependencies. are you saying that Gatsby can eliminate the React dependency from complex React components and output plain JS and HTML? If it can actually do this, then that is both impressive and useful.
Heh, yeah tl;dr = it's less expensive to just declare all classes globally
The appeal to me with gatsby is that I can continue my normal react workflow and then just render to github pages or other plain file host without a large js dependency for noscript and seo. I know there are other generators, but I don't want to deal with ruby for Jekyll or another workflow for what should be a probably relatively simple proposition from a user standpoint. I added a late edit to indicate it, but I don't know that gatsby is able to do this at quite that level, but it would be neat if it could. :)
I'm right there too! But you have time it's not to late I always wanted to learn to make games but I didn't know where to start? If you love it! You do it and find a way to make money doing it!! Like Steve jobs said! DO WHAT YOU LOVE 
Say I have an autocomplete component. It fetches a small dataset of comedians (just first name and last name) over an API, and then filters it based on what the user types. Since you said you're working mostly with the DOM, let's start with the HTML - it looks like this: &lt;input type="text" id="input"&gt; We show results in a list, which looks like this: &lt;ul id="results"&gt; &lt;li&gt;Result 1&lt;/li&gt; &lt;li&gt;Result 2&lt;/li&gt; ... &lt;/ul&gt; The API returns data in this shape: [ { first: 'stephen', last: 'colbert' }, { first: 'amy', last: 'poehler' }, ... ] We can initialize a new autocomplete like so: autocomplete( document.querySelector('#input'), document.querySelector('#results') ) And we can implement the `autocomplete` function like so: async function autocomplete(inputElement, resultsElement) { // an array of comedians let data = await (await fetch('/api/data')).json() inputElement.addEventListener('change', e =&gt; let filtered = filter(e.target.value, data) resultsElement.innerHTML = render(filtered) ) } // a very naive way to filter the results by what the user typed. // text is what the user typed in the input // data is what was returned over the API function filter(text, data) { return data.filter(({ first, last }) =&gt; first.startsWith(text) || last.startsWith(text) ) } // renders the filtered data. // filtered is the array of comedians to render function render(filtered) { return filtered.reduce( (html, comedian) =&gt; html + renderComedian(comedian), '' ) } // renders a single &lt;li&gt; representing a single comedian. // comedian is the { first, last } tuple representing a single comedian function renderComedian(comedian) { return '&lt;li&gt;' + comedian.first + ' ' + comedian.last + '&lt;/li&gt;' } That's it! Generally, `filter` is useful anytime you have an array you want to whittle down to another array, and `reduce` is nice when you have an array of things you want to reduce to a single value (in this case a string). Hope that helps.