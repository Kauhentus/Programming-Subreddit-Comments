Thanks! Unfortunately, not tested, because i'm mac user.
I think you mean Dugland Cockroft
&gt; Is adding that check even though it is not possible for a request without a page param to be passed on to the controller a better practice for api design? Well, it's not exactly about API design.Tthe thing is this... In the controller, you're checking for `req.params.user` and not receiving it is considered an error _as far as the controller is concerned_ -that is, without caring if other parts may or may not make it possible to get here without a `req.params.user`-. But you're _not_ checking for `req.params.page` in the controller at all. And not only that, not receiving it produces an unexpected and uncontrolled behaviour. You've been lucky enough that it simply produces an empty `posts` array. But as far as this piece, the controller, is concerned, that's just _luck_. It's undefined behaviour. So, yes, I would say that it is a good practice to "do something about it". Notice that I'm not saying whether the controller should consider it an error or provide a default behaviour or treat it as optional or whatever. But I do think that _something_ should be done about it in the controller.
just update the AdminBro Documentation: [https://softwarebrothers.github.io/admin-bro-dev](https://softwarebrothers.github.io/admin-bro-dev) 
That's a laughably simplistic view of the usecase for Objects. 
Use Typescript. The compiler will help guide you and catch mistakes as you type them.
Yeah, call me back when you've got react-finance, ngFinance, and Vuenance.
Interesting point. This is all I could think of... The usual reason offered when flatmap is implemented using an iteration protocol is performance- it helps a lot. This array implementation does still have moderate performance benefits (saves array allocation and smooths out maximum allocated memory) just not quite as much. Sort and reverse would have even lesser performance benefits, and it would not help with memory usage at all. This might be a priority for mobile? Idk. More importantly, sort and reverse happen in place and could reasonably happen before or after mapping. This makes the semantics of such combo functions difficult to remember. Flatmap really only has one way it could feasibly work given the type signatures of flat and map. Similar comments could be made for other map filter reduce combos. 
Not sure, but using map might be faster? Map one of the arrays and use the index argument in map function to retrieve corresponding value from the other array.
I made a chrome plugin to replace many of the names of ES6 with 'ES6' because I dont want to have to think about ECMAScript 2015 aka ES6 aka ES2015 aka ecma2015 aka ecma6 aka ECMA Script 2015... [https://github.com/decherneyge/eck-no-standards](https://github.com/decherneyge/eck-no-standards)
They are causing the page to reflow (think thats what its called) so that the browser sees that animate was removed and then puts it back after the reflow so it triggers the animation. The void i guess is a way to touch the element to trigger the reflow without actually doing anything? [https://gist.github.com/paulirish/5d52fb081b3570c81e3a](https://gist.github.com/paulirish/5d52fb081b3570c81e3a) &amp;#x200B; &amp;#x200B;
When I do this, I usually build the class inside a factory function, and then instead of “return ClassName” I use “return new ClassName”. So the exported class is an actual instance of the class instead of the prototype.
I’m actually okay with using a finance object with methods. It reminds me of “Math.method()”. I kind of like having the object.method syntax because it tells me exactly where that function came from without looking for the import statement.
Sure Maybe you have an object and want to get all the values and transform the data object.entries returns an array of arrays, where the elements are [key, value] You could do something like Object.entries(o).flapMap(([_,v]) =&gt; v.toLowerCase()) I’m on my phone so pardon formatting. The reason to flatMap would just be one traversal over the data vs two. 
Well, that's the cool thing about individually exported functions. Using this syntax `import * as Finance from 'finance';`, you'll be able to get the best of both worlds! Or if you can't, you can just use `const Finance = require('finance');`.
What are these abbreviation complaints? I used to do finance and cagr is seriously obvious to me. 
potree
I read that as Fiance.js
This makes sense. One of us should do a refactor and show him how it's done.
I will make it legal 
&gt; let ref = JSON.stringify(reference) [JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) vs [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)
&gt; void (body.offsetWidth) I suspect this was done to appeal to the linter
Thanks. You can generate procedural textures with it. According to Wikipedia it can be used for stone and water textures. You could also use it for height maps to generate terrain. But primarily it's only a fun project, although I would be happy to see something cool created with it.
Have had a look at open layers? https://openlayers.org
Bookmarked. I’ve been using Vue for a bit now (deployed first REAL web application with Vue last week!), but I’ve never taken the time to learn animations in Vue or any JavaScript framework/library other than needing to do one thing here or there. Like using Velocity to make one thing bounce on a page. This abstracts things in a way for me that makes sense to me. Even if I don’t use it in a production app, it might help me to learn to think about animations properly, at least in Vue. Kudos on the introductory page, it explains the basics well.
[https://github.com/Icehunter/litterbox/tree/master/node/packages/LitterBox](https://github.com/Icehunter/litterbox/tree/master/node/packages/LitterBox) I'm not the best at comments and documentation... so I did some basic stuff... and it's probably too soon to ask for this. I was hoping to get a community review and see where I might be lacking in implementation? &amp;#x200B; Thanks in advance!
Hey just thought I’d let you know that the layout is broken on the iPhone xs
On the email signature app that is.
Ironically the file system in node is still fs and move is still mv 
Hi /u/dizzyack, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/424c414e4b, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/GoblinWarrior88, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
i love sweet things, and i really like a nice dose of sugar every once in a while. but too much sugar makes things unpalatable. there was a lot syntactic sugar added in es6, and as a result, there has been an explosion in code complexity and tool complexity over the past few years. think of how many lint rules there are and the number of debates teams have had over when to use destructuring assignment vs when to refer to the whole object hierarchy. languages like ruby and scala that provide multiple ways of doing the same thing usually end up having a community created conventions manual where basically the most useful and reasonable subset of a language is recommended as a community guideline. i'm worried javascript is being forced to go that way because people keep bolting more shit on that gives you different ways of doing the same thing. 
Yeah, I understand. I posted before reading the rules, thanks tho.
The point being made was; 0000-01-05 should not be an accepted date nor yield a valid day number, because literally year zero does not exist in the gregorian calendar; there is no year zero between 1BCE/BC and 1CE/AD ... however, JavaScript dates aren't exactly based on gregorian calendar - instead it is based on ISO 8601 - which, on the other hand, is mostly based on gregorian calendar ... with the exception that what gregorian calendar calls 1BCE, the ISO-standard calls "year zero" ;)
JavaScript is the last place math works as expected :D
How is _dependency_ synonymous with _black box_?
I'm not talking about OOP at large I'm talking about OOP in JavaScript. I'm saying that having an extreme bent towards any programming paradigm is bad, not that OOP is bad.
Flat mapping is a concept used heavily in more strongly typed functional languages (Haskell, Rust, Scala, etc) and so the reason this PARTICULAR method is making its way into JS and not something like reverseMap is because of that. Interestingly, while arrays/lists are a fairly common use case for flat map in those functional languages, the most common use case by far is asynchronous code. If you have the equivalent of a bunch of methods that take some simple value (say an int or string) and return a Promise, you can compose them using flatMap and still get a single Promise at the end, rather than a Promise that resolves into a Promise which resolves into a Promise etc.
I updated and added functionality to Full Claendar, the JavaScript based event calendar. [https://github.com/waldronmatt/fullcalendar-BS4-PHP-MySQL-JSON](https://github.com/waldronmatt/fullcalendar-BS4-PHP-MySQL-JSON)
 I updated and added functionality to Full Calendar, the JavaScript based event calendar. [https://github.com/waldronmatt/fullcalendar-BS4-PHP-MySQL-JSON](https://github.com/waldronmatt/fullcalendar-BS4-PHP-MySQL-JSON) 
Slow week working on **Video Hub App**, but finally got a cleaner screenshot selection UI: [https://github.com/whyboris/Video-Hub-App/pull/138](https://github.com/whyboris/Video-Hub-App/pull/138) Also got to refactor and clean up along the way. So much to do, so little time. Was hoping to have a version 2.0.0 release on Feb 20th - the one year anniversary of the software, but might have to push it back by a month.
Really lovely!
Actually i think it has nothing to do with the reasons you mention. Flatmap aka chain is a monadic operation, a concept coming from maths which is introduced to us through functional programming. Apparently they want to add flatmap because of the popularity fp in js gained the recent years! 
I can't imagine even `flat` is that common. How often does someone want to something like `[[1,2],[3,4,5]]` to `[1,2,3,4,5]`. I'm not saying it's never but I can't think of a single practical scenario and it's a one liner using `reduce` anyway.
Admin-Bro is really cool! Haven't come across this project before. I love it -- even has sortable columns for data!
Unsure if you're looking for something like it, but for generating simple documentation try docsify: [https://docsify.js.org/#/](https://docsify.js.org/#/)
Pretty cool little search app, but you should remove your Imgur client ID from your source code into a .env file With create-react-app, i think if you prefix the variable name with ``REACT_APP_``, it will be available to your client in the process.env object In your case you should probably have ``REACT_APP_IMGUR_CLIENT_ID`` and change the reference from the direct string to ``process.env.REACT_APP_IMGUR_CLIENT_ID`` Also allows you to use the same code not tightly coupled to one. Your code should work with any valid ID, and that should be deferred to configuration
We're in the midst of moving a bunch of smoke / integration tests from Puppeteer to [Nightwatch](http://nightwatchjs.org/) Puppeteer is good and easy enough to write tests with, but at work I think we're version locked to an older version and would get frequent build fails due to some dependency puppeteer requires, or our tests would fail with some rather esoteric black boxy reason, usually some sort of timeout or something, but then would pass if you restarted it. We ended up disabling the tests til we could refactor them because devs got so used to the test failing and then passing on a restart that they'd be dismissive that it could actually be their code.
Just a collection of formulas, neat
Thank you! I'm also going through today and at least in the JS version commenting the business logic.
Here's the black box: https://github.com/ebradyjobory/finance.js/blob/master/finance.js
I agree with you in theory but in practice it's a very different story. I've seen people outright condemn developers for "reinventing the wheel" because they chose to use a very small custom wrapper for XMLHttpRequest objects instead of a supposedly "tried and true" solution like Axios. It's a damned if you do and damned if you don't mentality that is making JavaScript in general a very toxic toilet bowl. I just wish everyone would stop making build tools and bundlers so we can actually have time to figure out the ones we already have and get a sense of stability for a change.
Your solution will work, but definitely obfuscates what the code does. At a glance I actually have to think about it, and it only scales to two conditions...what if you have to account for 4 conditions, or you inherit some bad architecture and have to account for 400 conditions Copy and pasting something I have open, though it's TS, for the approach of formatting a couple variants of content API responses. All of our responses for content have a type node that determines what type of content it is, and then it's data can be a variety of shapes So the idea is that it takes a content object, destructures and reassembles the shared common object props as the base response object, then uses a switch case to decorate it with the custom attributes for the appropriate format based on content type this formatter is passed to a method that uses it in an array map to transform raw API data into stripped down objects our front end consumes But we're gutting this whole shit in favor of GraphQL...yay! ``` const formatContentForDisplay = (content: any): FormattedContent =&gt; { if (!content.data) return null; const { type, data: { id, web_id, title, dek, thumbnail_url_1_1, summary, thumbnail_url_16_9, publish_date, locale, url, embed_url, slug, primary_topic, contributions, }, } = content; const baseContent = { id, web_id, type, title, dek, lede_sq: thumbnail_url_1_1, lede_16x9: thumbnail_url_16_9, publish_date: publish_date, primary_topic, locale, url, slug, }; switch (type) { case 'articles': return { ...baseContent, contributions, byline: formatByline(contributions), isLinkout: false, }; case 'videos': return { ...baseContent, summary, embed_url, isLinkout: false, }; // TODO: handle linkout formatting if there is any case 'linkout': return { ...baseContent, contributions, byline: formatByline(contributions), isLinkout: true, }; default: return null; } }; ```
Open layers and cesium
You need to use JSON.parse, not stringify.
Wouldn’t memory allocation mostly be affected by the data type? Performing a flat then a map would create temporary variables(s), but unless the array is made up of primatives, you are essentially collecting pointers, which is trivial. Unless you’re working with arrays in the MBs I’d argue it’s trivial either way. I think the real reason is to reduce iterations. Storing 10000 numbers doesn’t take that much memory, but iterating over that set 4-5 times would take a human perceptible amount of time. 
THAT is a use case I can get behind. 
JS moves pretty fast as a language, especially the last couple years since the general consensus became "jQuery bad" I haven't kept up on all the who's who of modern JS, but I've worked with some good people who do tech talks and stuff, and most of them have come to JS from other languages. I've been coding for a living for about 20 years now, and my general opinion is that it doesn't really matter, as long as I can smoke weed at my job and get a check. The language matters less than the patterns and approach to solve the issue. Modern JS is awesome in that there is less context switching between writing backend and front-end code, but they are definitely two different disciplines. Less tooling setup because your backend and front end can probably share testing setups and all that fancy shit. But all the young guns at my job hate it when I'm like "JS is awesome..it lets me do the type of shit I was doing in Flash 10 years ago!!" 
decremental iteration to 0: while (i--) {} should be faster than incremental \[1\], but the difference between for/while should be negligible. \[1\] [https://stackoverflow.com/questions/3520688/javascript-loop-performance-why-is-to-decrement-the-iterator-toward-0-faster-t](https://stackoverflow.com/questions/3520688/javascript-loop-performance-why-is-to-decrement-the-iterator-toward-0-faster-t)
My own test showed that decremental is much slower. Like abysmally slow compared to incremental. I only tested with creating new array though. It should be faster when replacing values in an existing array.
If you can manage to keep it from leaking too much memory and/or bogging down, there's no good reason to switch. There are thousands of apps out there (esp enterprise) that will continue to use AngularJS. Not everyone runs screaming for the newest shiniest framework asap. The only reason we are ditching it at work is because it doesn't scale well with massive data sets and we need something that's performant and can scale even further. I saw a post feom a google engineer when angular 2 was in beta, and he basically said "we have over 1400 apps internally here at google that use AngularJS, and many of them have no interest in changing any time soon." Even if angularjs was abandoned by google, it's popular enough that it would likely be forked and maintained anyway. If the framework is working for you, don't worry about changing it.
AngularJS is currently on its final major release (1.7), and [will be supported](https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c) until June 2021. So, it's not quite "dead" (as you said, there's certainly plenty of existing apps built in AngularJS), but nobody should be building new apps with it, and anyone maintaining an existing AngularJS app should be thinking real hard about migrating away from it within the next few years. 
Still waiting for safely accessing properties from deeply nested objects.
Aaaaaaaaaaa!!!!!!! Thank you! That did it! Can't belive I got them mixed up. Thank you kind stranger! 
Lol vuenance sounds like an erectile dysfunction pill.
[Relevent PDF.](https://www.investigatii.md/uploads/resurse/Clean_Code.pdf)
Or you could transpile other languages into it.
[removed]
I was looking at \`Array.prototype.flatMap\` and \`.flat()\` the other day, but it isn't supported in Edge or IE. Would inclusion in ECMA2019 remove the 'experimental' tag and mean wider browser support?
Hi, I made a fork of this library and addressed your concerns here: [finance.js](https://github.com/RaycatRakittra/finance.js) Cheers.
This looks pretty solid, thanks for sharing.
&gt;Korg Monotron Duo clone Thanks for reminding me that I still can't play piano despite my strong New Year resolution in... 2007. Great project!
I've been working on a simple 2D online role-playing game done entirely in js. It's coming together and I have a demo up that can explored at [https://play.consty.com](https://play.consty.com). A screenshot is also available [https://i.imgur.com/iP1Dyve.png](https://i.imgur.com/iP1Dyve.png). 
Ask your doctor if Vuenance is right for you.
But this invocation isn't the same - here, Finance is a class/constructor. They aren't static methods either or methods from an object. The one-liner to invoke one of these functions is `new Finance().AM(...)`, rather than something more simple without needing the constructor or a temporary and useless class (your `Math.method()` example).
I haven't looked to deeply at this, but a couple words of caution: * The project isn't very active. Looks like it used to be TS but now just the JS is being updated. There are several open issues. * If I'm using somebody else's code to do financial calculations, I want to be extremely confident that they're done correctly. There are tests but it doesn't look like a lot. For example, I want to be damn sure that the IEEE floating-point weirdness is fully accounted for; the last thing I want is "Okay, so your subtotal is $3.10 and tax is $0.20, making your total $3.299999999999994. Cash or credit?"
This article includes almost no new syntactic sugar. But I do agree. I'm trying to learn Redux, and I came across something like this: ``` const fetchData = data = async dispatch =&gt; ({...}); ``` Took me a good few seconds to fully understand what was happening.
"So when the subroutine compounds the interest, right, it uses all these extra decimals places that just get rounded off. So we just simplify the whole thing and we just round it down and drop the remainder into an account that we own."
Thanks a lot :) Yeah is is actually snowing in Germany. The cold snap should also take place here, but luckily stayed out. After the extremely hot summer, I still enjoy every cold day out there.
Could you communicate with iframes using [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)?
I do it almost every day as I work a lot with data parsing and analysis. There is absolutely a need for it. Let's say I have a list of users and their posts, and I need to get all posts, flatMap let's me to users.flatMap(user =&gt; user.posts) instead of a convoluted reduce. It's pretty neat.
Typescript?
You really think function fetchData(data) \{ return async function (dispatch) \{ return \{...\} \} \} Is that much easier to read?
I tried to use it in Chrome yesterday and was really upset because I logically thought it was already a thing. :(
To be honest, I think what you wrote makes it easier to understand what's going on. It may be more code to write, but I can see at a glance exactly what is happening.
 You think "use strict"; function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } var fetchData = function fetchData(data) { return function () { var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) { return regeneratorRuntime.wrap(function _callee$(_context) { while (1) { switch (_context.prev = _context.next) { case 0: case "end": return _context.stop(); } } }, _callee, undefined); })); return function (_x) { return _ref.apply(this, arguments); }; }(); }; Is hard to read??
 You think "use strict"; function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } var fetchData = function fetchData(data) { return function () { var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) { return regeneratorRuntime.wrap(function _callee$(_context) { while (1) { switch (_context.prev = _context.next) { case 0: case "end": return _context.stop(); } } }, _callee, undefined); })); return function (_x) { return _ref.apply(this, arguments); }; }(); }; Is that much easier to read??
Typescript provides a non-null assertion operator, it only affects the type, telling the compiler the possibly null or undefined value is present. For example: const a = person!.firstName would this an error at run time if person is null, but your code would no longer show person as nullable. There’s no null conditional operator that would let you access inner properties, that have potentially undefined or null parents. This would return null if any parent along the way would. For example: const a = person?.firstName would assign a to null if person was undefined, and throw no error. 
Edge is about to adopt chromium and IE has been dead for some time now
react-ance
Why is it dead and what should people be using instead?
thanks!
This. You can also progressively migrate you app away. At work we develop a pretty large web app that was originally built in angilarjs. With been migrating parts of it to react for a while now and aim to get rid of angularjs this year hopefully. Both can happily leave next to or even inside each other.
A more recent version of angular for example
That's a good example, thanks
It's the perfect crime, until someone has a case of the Mondays.
Yup it get that but honestly the DOM interactions would always have a huge overhead to not justify compiling to WASM over JS. Look at how good elm works these days and it compiles to JS. And for type safety there are numerous languages available to use (ReasonML, TS, Flow, PureScript to name a few).
I made a Chrome extension that checks article links on Reddit and finds their original publication date. If one is found it adds the date on the listing. By default it also displays a colored dot that gets redder the older the article is. [Extension](https://chrome.google.com/webstore/detail/reddit-publish-date/cfkbacelanhcgpkjaocblkpacofnccip?hl=en-US) | [Github](https://github.com/chrisstiles/Reddit-Publish-Date) &amp;#x200B; Also made a bot that comments on posts on links to outdated articles, but apparently most of the bigger news subs don't allow bots.
I'd also add try to keep your build system sane, not too complex. That can be a pain to maintain too. - Use one build tool where possible - Aim for one build command
This is really cool. I signed up after seeing the site. Will try out your script too!
1.7 seems fine for a lot of cases. But I guess AngularJS is kill given that most code examples don't follow best practices and it has no SEO room to breathe. What I don't understand is what Angular has to do with the conversation besides the name. Vue seems much more approachable for AngularJS people, for example.
&gt; Vue seems much more approachable for AngularJS people Not sure how. Angular and AngularJS are very similar, while Vue is very different. We have both at work. I've written an AngularJS app and updated it up through to Angular 7. I pass off tasks on Vue apps cause I don't have the foggiest idea what's going on in that code. It's miles away from any version of angular.
Thank you for letting me peek under the hood. I had similar picture in my head but it is nice to read actual interpretation of the spec. Regarding my problem this was the key phrase: &gt; If you wrap obj.getThis in parentheses, nothing changes, parentheses only syntactically group things, but the don’t influence how something is evaluated Apparently `(x)` is not man enough to do the dereferencing, unlike `(0,x)`, which is.
version locked to an older version of what?
I haven't really looked into Angular, but it seems to require a bunch of new tools upfront, namely typescript. Meanwhile Vue is just "hand me a div and I'll show you something".
Glad to hear, I think Codewars is one of the best platforms for coding challenges.
well it’s a custom loader that no one wants to rewrite for stylus-js, because our team had a lot of turnover and the people who made the decision on why we’re using stylus in the first place aren’t there to defend it...even though we updated to webpack 4, using the most up to date css-loader breaks everything so we’re stuck on this custom sjsx loader for now
Nice! I really like this. Do you know if it is possible to get the question text through the API so you could put the question along with the link in a comment above each solution? 
&gt; Angular, but it seems to require a bunch of new tools upfront, namely typescript. Meanwhile Vue is just I'd say the opposite. Vue is just a component framework. Angular is an everything framework. With Vue, you usually have or will want to to select a number of other libraries to piece together to provide the various functionality single page applications benefit from. Angular is comprehensive and consistent, and the various pieces and methodologies remained much the same between AngularJS and Angular. Typescript is also a strict superset of JavaScript. You could literally just write JavaScript and it is also TypeScript.
Javascript had those sorts of conventions even before ES6 happened. Maybe not to the same extent as Ruby, but just off the top of my head: - Always use the "strict" versions of comparison operators. - Always use `"use strict";` - Don't use `with` Of course the new syntax expands that greatly (e.g. never use `var`, prefer arrow functions when possible), I'm just saying it's not exactly anything new.
Look forward to reading this. Thanks!
I don't get it, you say learnJS group does not help, but this post to this group is your first and then after 10min you posted in learnJS &amp;#x200B;
looks like it's directly using Number which is IEEE-754 double precision? my 2 cents, it's not production-ready unless you have an arbitrary-precision decimal dependency. 
&gt;Why is it dead Because they've stopped developing AngularJs (except for small hotfixes). &gt;what should people be using instead React, Angular (Not to be confused with AngularJs!) and Vue are the more popular choices at the moment. Picking any of them will provide a modern development experience with regular updates.
Fair play to you. This is sweet.
I honestly think Vue is pretty similar to AngularJS. I recently had to migrate a project from AngularJS to Vue and I often found I could reuse a ton of stuff, with small changes like changing `ng-repeat` to `v-for`. The whole 'lifecycle' concept in Vue is very different to anything in AngularJS though.
RemindMe! 1 Day
I will be messaging you on [**2019-02-03 23:18:08 UTC**](http://www.wolframalpha.com/input/?i=2019-02-03 23:18:08 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/amh8nz/codewars_challenge_repository/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/amh8nz/codewars_challenge_repository/]%0A%0ARemindMe! 1 Day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
This may help you if I understood your issue correctly: https://stackoverflow.com/questions/13964155/get-javascript-object-from-array-of-objects-by-value-of-property
Codewars does have an API that replies with a description for each challenge, I chose not to add this to the coding challenges because each programming language has different syntaxes for commenting. Adding a link to the README may be a possible option in the future. 
Hi /u/Taylor1990_cro, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt; The whole 'lifecycle' concept in Vue is very different to anything in AngularJS though. And I would say that managing state changes is more significant than templates in most apps. The things a template engine needs to do and provide are well defined and consequently templating is quite similar between frameworks. Templates are just one part of an application. The bulk of complexity lies in the "back end" of your JS SPA. These are the parts that often won't port easily, and what in my opinion makes Angular[JS] quite different from Vue. How do I manage state, how do I manage dependencies, how do I do async, how do I connect parent/child/sibling/unrelated components, how do I route actions, etc. Those are the things that make AngularJS and Angular quite similar to each other and quite different from Vue imho.
Hi /u/NowVSFutureBalance, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/PapiPoseidon, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/brothaprice, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/thecrazycatman, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dr4605, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
OK I'm no expert but I definitely like the idea of PWAs. So when apps were first released on the Google play store or iOS store, they needed to be programmed natively ( which means they needed to be built in a specific programming language - Java for Android and Objective C for iOS). However as JavaScript and other web technology got more powerful, people saw they could mimic a lot of that functionality with a simple website. So instead of making a whole app, they build a "wrapper" that could just run the website. A wrapper has the sole purpose of sole running that website (ex Phonegap) This made development a lot easier cause instead of having many developers working on 2 different platforms u could have the same ones only developing for web and just putting it in the wrapper. PWAs are the step further. Instead of adding additional software to run the website now your browser can act as your wrapper. And now more and more mobile browsers support PWAs and allow for an add to home button which allows it be stored on your home screen and make it look like a native app. This provides benefits like smaller app size, automatic updates, and offline support. However in order to use or download the PWA u have to visit the site, so centralization has become a problem. With Google play store, we now supporting PWAs we solve that problem. Granted it probably opens up a whole new can of worms but it's definitely gonna me interesting to see how it pans out. Ik this isn't 100% ELI5 but I hope I did help you understand a bit. Feel free to make any corrections TDLR: Developers used websites to make making apps easier, then browsers helped them out by removing the app aspect of it and now Google play can properly distribute them.
I think I explained the situation, check my comment to the earlier commentor.
I must agree. Naming things is the 1st hardest thing to do in programming. I have a feeling that no variable never has a good name lol
Thanks for sharing this
You’re welcome 
Greetings all- Newbie at javascript and having some issues with my youtube search bar. It doesn't work! [https://github.com/ruggedelelectro/searchvids-/tree/master/youtube\_search](https://github.com/ruggedelelectro/searchvids-/tree/master/youtube_search)
Jfc. Til that angular and angularjs are somewhat different things.
No one answers on learnjavascript
I can agree about JSX. I like React, but I don't like JSX. Sadly they released React a little before template literals were introduced to JS and never changed it (at least that's what I've heard). You can still do React with createElement but why would you... And of top of all that I don't like TS either (I like Dart , tho, but don't have enough time to learn Angular + Dart) I do things upside down. Instead of optimizing, then coding, I code, and then optimize. But I guess that's just called inexperience, (hey if it isn't broken, don't fix it :D) You are right, having more than 5 setters in each class can get pretty messy pretty quickly, but I haven't yet found myself in such a situation that I need to make a script listen to changes and then re-render the entire component so I wouldn't waste time making all them setters. As I've said I write code, and then optimize. I guess I'll implement my own state management (maybe if I decide to finish coding that game I am making) in time, when it's really needed. &amp;#x200B; I'll send you a link to my app in a bit, (editing 2k lines of code when introducing a new feature to the framework is painful) to your inbox
Just curious why other JS help posts are allowed?
Oh no! I have been storing CodeWar challenges all wrong! Sorry if this is a stupid question but how do I "gracefully" migrate over to the way your storing challenges? GitHub: https://github.com/Abdul-Sen/Coding-Challenges
I only see [one instance](https://www.reddit.com/r/learnjavascript/comments/aifgg8/callback_function_inside_of_filter/) in which you posted to /r/LearnJavascript, and you got some really good help. What gives? Either way, now that you've brought attention to your situation, I'm afraid I'm going to have to revoke your posting privileges. You've been told 3 times in the past 2 weeks to use /r/LearnJavascript, and still you insist on posting here. That's unacceptable. You'll still be able to read the posts here, and you can comment, but you'll no longer be able to post. If there comes a time that you have an actual post to share -- that's not a help post -- then message the mods and we can approve it for you. I'm sorry it's had to come to this, but you leave us no choice.
Migrating should not be necessary if you setup Scrapey using the instructions in the README. Once you run Scrapey it will pull all challenges into your setup repo. Each time you complete a challenge and run Scrapey it will only add the new challenges to your repo. 
Yes! Note that () is not really an operator, but rather a purely syntactic way of grouping things. All operators dereference. 
I had to remove, and then repost
Pretty smug reply for being wrong.
Maybe add that this works only in chromium based browsers.
They're mostly not, there's just so many of them it's hard to keep them off the sub.
See ya on another account
Thanks now it is more clear, I will have to revisit call stack and event loop.
wider support for browsers that keep up to date - assuming the new versions of those browsers are adopted. This does not include IE.
It'd be great a reference in the readme just in case we want to implement it!
What values does it take? Just `low` and `high`?
What’ve you tried so far, because this looks like boilerplate. 
It also takes ‘auto’ as default
First off just want to say thank you for responding to my question, and this is the best of what I've got so far- &amp;#x200B; process.stdin.on('end', function () { //do your processing here. var i; text = "Hello" for (i = 0; i &lt; input; i++) { text += input\[i\] + "&lt;br&gt;"; } console.log(input); });
If you’re trying to read from stdin, you need to convert the buffers value to something you can use. Maybe casting to Number the data you get back from the on data portion. Within your loop your mutating something, just place your console.log in that section. You’re mutating the text field, is that part of the assignment? Why are you rolling out a &lt;br&gt; tag while you’re on what I’m assuming is Node btw?
And incredibly new, at that. https://www.chromestatus.com/feature/5273474901737472 I wouldn't use this in anything even approaching production code, and even then, I wouldn't rely on it for any sort of critical feature. This is firmly in the "nifty 2-point enhancement story to finish up the sprint" camp. 
 You do realize this is a direct violation of Codewars code of conduct right? Be honorable. Cheating is discouraged. If you find a way to complete a kata that falls outside of the kata itself (notably but not limited to: exploiting Codewars's test framework, website and servers), then refrain from doing so. Violators will be banned for such usage. Codewars has algorithms to detect some forms of cheating but does not attempt to track down every possible way. If you witness someone else who has a solution that you do not feel to be honorable, please report it on the gitter channel or on this issue. **Please do not post your solutions on Github. We realize you would like to use these challenges as your resume, but you should have side-projects for that. If a Code Warrior is unable to find a solution online, then they are further encouraged to complete the task themselves - which will enable them to get more value out of their time spent.** https://github.com/Codewars/codewars.com/wiki/Community-Code-of-Conduct
Thanks for the advice will do
Feels like this is a feature that's going to be abused by ads 
Kinda true
Hi digibioburden, Yes, this library was build using jQuerys AJAX functionality along with adding some of the ParseHTML so the scripts are executed automatically on load. Ive used the Vue CDN library along with this script and it works great! It also uses the HTML5 History API to handle the back and forward buttons. I also recently added the functionality to automatically send google analytics pageviews ( provided you have analytics installed on the site of-course ) when you are switching urls. Thanks! &amp;#x200B;
Hey, thanks for the feedback! I'm actually doing Max's node course right now and I've finished the first three modules. I'm actually getting the same feeling that was mentioned in that huge comment I quoted before, that Max is stretching himself thin over having so many courses. He tries to cover as many concepts as he can but he seems to be rushing through each concept, only introducing it with some vague diagrams, and not really explaining it properly or relating it to the code. Then when he actually writes the code, he sometimes uses the wrong terminology to describe the code which really messes with my understanding. And I know this from reading other material afterwards and comparing it to what he said. Anyway, I'll continue to take his course while supplementing my understanding with other readings, as you've said that Andrew's node course covers fewer concepts. And maybe I'm just a little spoilt from having taken Brad's "Git a Web Developer Job" course, which was exceptionally well organized and articulated.
This is why we can’t have nice things.
Pretty cool read. I didn’t know native Promises are not recursion friendly. Anyone know more about telling the difference between shallow and deep recursion?
I'm going to be the one being pedantic here... And say this has nothing to do with JavaScript. It's HTML. It would even fit better on a forum about PHP.
That's my pet peve about "hey check this out" in web development. Like if it is some proposed shit nobody does or almost nobody and its new.... ain't got time for that. For all I know it ends up not being a thing anyhow.
Sorry, but site hasn’t responsive design
[removed]
Don’t they already do this? Many sites already render ads before content.
First issue is, it's a bit hard to read that code without proper formatting. Ran it through Prettier, and here it is in a code block: function resetRoad() { segments = []; for (var n = 0; n &lt; 500; n++) { segments.push({ index: n, p1: { world: { z: n * segmentLength }, camera: {}, screen: {} }, p2: { world: { z: (n + 1) * segmentLength }, camera: {}, screen: {} }, color: Math.floor(n / rumbleLength) % 2 ? COLORS.DARK : COLORS.LIGHT }); } segments[findSegment(playerZ).index + 2].color = COLORS.START; segments[findSegment(playerZ).index + 3].color = COLORS.START; for (var n = 0; n &lt; rumbleLength; n++) segments[segments.length - 1 - n].color = COLORS.FINISH; trackLength = segments.length * segmentLength; } Looking through it... yes, it's creating an array of 500 "segment" entries. Each entry has its own `p1 and `p2` fields, and each of those is itself an object with some additional fields (`z`, `camera`, and `screen`).
It's also firmly in the "so easy there's almost no excuse not to do it in new code" camp. (I'm writing this on my shitty Android phone on a 5Mbps down / 1 Mbps up connection. Performance optimisations like this make a huge difference to my browsing experience)
If you were really pedantic you'd notice it also works with fetch
It all comes down to the data you're processing, i.e. the length of the array in that example code. If it only contains hundreds or even thousands of items, you're going to be fine. But if it's up in the millions or greater you may be risking the possibility of out-of-memory exceptions at runtime. &amp;#x200B; This was something I discovered while working on an asynchronous JSON-parsing lib a while ago, some users were parsing huge amounts (many gigabytes) of data and reported it falling over. Debugging the memory leak I was pretty surprised that promises seemed to be the cause of the problem, and I was even more suprised to discover that switching to bluebird magically fixed the problem: &amp;#x200B; [https://gitlab.com/philbooth/bfj/commit/c80fe0f5ffd2ebe50c62cb8c0449b48f009144ee](https://gitlab.com/philbooth/bfj/commit/c80fe0f5ffd2ebe50c62cb8c0449b48f009144ee) &amp;#x200B; So I guess the moral of the story is: measure memory usage with some realistic data and see if you think it's going to be a problem in your case.
It’s ded.
I mean, let’s be honest, nobody should have ever been building apps with it to begin with. 
i think i read somewhere that this won't work in iframes.
Thanks for sharing! Is there anything similar for sentiment analysis?
When everything is high priority... nothing will be
I wrote a library using which you can draw/mark any webpage - https://harshalitalele.github.io/jsdraw/ You can add this to your blog/webpage to let your users make notes on it while reading. I think this would be of good use to readers and researchers. Suggest ideas to extend it and to make it better. 
For js link tags, it's going to break the expectation that the code loads and executes in order. 
I would assume if this is a production app., you would be transpiling this for browser support - so in that case, they're definitely different =&gt; [https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code\_lz=IYZwngdgxgBAZgV2gFwJYHsI1RVyAUAlDAN4BQAkMAO7B7wCmyUAFvgOTuFkC-ZZiFBiw48AJiKkyMRszadCAOmQsGEfJIC8APlI9CAbl5A&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=stage-2&amp;prettier=false&amp;targets=&amp;version=6.26.0&amp;envVersion=](https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=IYZwngdgxgBAZgV2gFwJYHsI1RVyAUAlDAN4BQAkMAO7B7wCmyUAFvgOTuFkC-ZZiFBiw48AJiKkyMRszadCAOmQsGEfJIC8APlI9CAbl5A&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=stage-2&amp;prettier=false&amp;targets=&amp;version=6.26.0&amp;envVersion=). Now, whether or not each javascript engine is different for this under the hood - probably some slight differences, but I haven't ever seen benchmarks/discussions on it before nor bothered to look into it.
Async function is `yield`ing result where as `then` is using promise, is `yield` works same as in python???
Async/await is syntactic sugar around promises. Promises are quite terrible to handle due to the callback syntax so I would always use async/await, makes code easier to parse and understand.
async/await is an alternative syntax for working with the Promise API. It doesn't replace promises so much as allow a different way to use them. async functions always return promises, and when you await something, the value you'll want to await should be a promise. For example a translation between the two would basically be: // using Promise API function () { return somePromise .then(value =&gt; { // stuff }) .catch(err =&gt; { // stuff }) .finally(() =&gt; { // stuff }) } // using async/await async function () { try { let value = await somePromise // stuff } catch (err) { // stuff } finally { // stuff } }
Kinda irrelevant considering HTTP2 Push
r/webdev 
Here's a sneak peek of /r/webdev using the [top posts](https://np.reddit.com/r/webdev/top/?sort=top&amp;t=year) of the year! \#1: [Animated login avatar](https://v.redd.it/38jmec4zrlh01) | [88 comments](https://np.reddit.com/r/webdev/comments/7zanzv/animated_login_avatar/) \#2: [StackOverflow is super toxic for newer developers](https://np.reddit.com/r/webdev/comments/9n24fl/stackoverflow_is_super_toxic_for_newer_developers/) \#3: [Markup horrors of the ad blocker wars](https://pbs.twimg.com/media/Dt23cXZXgAEDdW4.jpg) | [403 comments](https://np.reddit.com/r/webdev/comments/a4k85f/markup_horrors_of_the_ad_blocker_wars/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
Polyfills for async/await are using generators under the hood (they are similar to yielding from functions in python), so it's a good observation. While any function in python can yield their result, effectively halting its execution, in javascript you can do that from generators (the ones with the funny function* syntax). How these polyfills work is quite simple - they take the async function and convert it to a generator. Each "await" step is converted into an expression which yields the promise from the generator. Now this generator is wrapped into a function which is going to control when the execution continues. We only want the execution to continue when the promise is settled - we are going to call .next only when the promise is settled (for instance in .then), also replacing the return from yield with the settled value or an error. We continue doing so until the generator is finished. There's more details to it of course (you need to return a sensible promise from the wrapper function), but that's the gist. 
You can use sentiment analysis ONNX model for this. 
If you rely on this behavior, then yes. But if you for example use existing async parama https://www.w3schools.com/tags/att_script_async.asp it will not break
What kind of theme is that ? Looks smooth
How did you create the drop in time animation. Looks really smooth. I’m working with react native for a long time professionally but it’s always a hassle to create silky smooth drop solutions like you do in the first part of the video. Can you explain how you did it?
wowww... nice explanation... thank you so much
understood... thank you so much for the examples...
Dropbox, Google Drive, iCloud, etc
&gt;One thing you might find different about working with async/await vs using promises with then etc. is that when you await a promise in an async function, you must wait for the promise to resolve before running anymore code in that context. Using then, you can easily put code after the then that gets executed before the promise resolves Yeah... correct, but with await, we are basically doing a synchronous programming???
Yeah but then who ever is going to read the file has to read entire file even if they need a particular data point.
That will be true regardless of where you host it. You would need to make an API so someone could request a specific part of the file and your server would only return the part they asked for.
I have this function which does some operations inside, when I am calling this function, I am actually getting empty data... I am wondered, since I am using await, the result should gets evaluated??? or since it's async and the `return data` is independent of the result, it's returning??? how is that happening??? If I want my `data` to be returned, what should I do?? confused... ``` export function getData() { const data = []; repoList.forEach(async (repo) =&gt; { try { const repoData = await getRepoData(repo); const sfData = await getStackoverflowData(repoData.name); data.push(Object.assign({}, repoData, sfData)); console.log(JSON.stringify(data)); } catch (err) { return console.log(err); } }); return data; } ```
Yes.
can you see the below problem?? I have little gap in the concept https://www.reddit.com/r/javascript/comments/amnx52/are_promises_asyncawait_are_different/efnexgs/
can you see the below problem?? I have little gap in the concept https://www.reddit.com/r/javascript/comments/amnx52/are_promises_asyncawait_are_different/efnexgs/
All it takes is a "without any dependencies" trope for 368 to upvote and probably 1/3 of them to go use non-decimal precision, untreeshakable, unreadable written "library". &amp;#x200B; This is just as bad as npm installing any random dependency, most probably didn't even look at the code quality. XD just laughed at the "legal" joke. 
&gt; For example, I want to be damn sure that the IEEE floating-point weirdness is fully accounted for Floating-point numbers are a big no-no in financials. You would typically use some fixed-point arithmetic type, and do integer math on it. https://www.ibm.com/support/knowledgecenter/en/SSGU8G_11.70.0/com.ibm.ddi.doc/ids_ddi_197.htm
you need to cache it. or use a proper database.
You're welcome. If I have coworkers who don't fully understand how async/await or polyfills work, I have them write a polyfill for them. It tends to clear a lot of stuff up. It doesn't have to be production-grade (like handling incorrectly implemented promises). You can do async/await with generators and setTimeout pretty much (use setTimeout to write a promise, generators and your promise for the async/await).
how to write polyfills??? can you send me few links to learn, I will try writing myself... I like learning by doing... by the way, can you see the below problem?? I have little gap in the concept [https://www.reddit.com/r/javascript/comments/amnx52/are\_promises\_asyncawait\_are\_different/efnexgs/](https://www.reddit.com/r/javascript/comments/amnx52/are_promises_asyncawait_are_different/efnexgs/)
how about hosted mongodb, such as DocumentDB or mlab?
yeh, now forget the happy flow, and add try catch handlers for everything :( oftenly it starts to look worse than with promise.then.catch
Yeah but this is JavaScript, all the numbers are floating point. I agree with what you're saying, though.
Colour theme name?)
There is hardly a reason not to use it in production code, since browsers that don't implement it will just ignore it, and downloading priority is hardly a thing you could ever use for critical features even if it became standard. There is literally no downside to this feature, other then a spawning a few new sites that will hint you to use Chrome for best experience, which is only a downside if it makes you personally butt-hurt.
firebase rtdb 
Yes, AJAX is still used for async HTTP requests. Websockets are designed for real-time streaming applications. Both have very different use cases.
The downside is risk. Right now, only Chromium supports it, everyone else ignores it. Until they don't. What happens when Firefox or Safari support it differently? Say one says that the presence of the hint now means all non-hinted resources must wait for hinted to finish? Best wait until the spec is complete and adopted before hoping browsers went fuck you.
What would be the different use cases if you don't mid me asking? Thanks! 
It _looks_ like synchronous programming, but in appearance only. The idea is to be write code that is familiar and consistent with synchronous programming even though during execution it behaves a little differently. When it runs, it's asynchronous, where code is waiting for promise resolution in blocks that get executed asynchronously. The division of these blocks is defined by lines using await. Effectively, each await secretly creates a then callback in the background and puts the code after it in that block.
Looks like you're running into this https://www.reddit.com/r/learnjavascript/comments/alsr0y/comment/efgry9h
Fetching some API results - get request (e.g get a list of messages from server) Getting real time updates - websocket (e.g. get notified of any new messages as they come) Apart from API requests, also any kind of request you need to make, you'll use ajax (e.g. fetch a text file from a server). Almost all apps you build will use ajax. Websocket is only used when you need to get real time updates.
Ajax is usually used to fetch data from your API Servers for display or action purposes. Think of facebook trying to retrieve posts in your timeline Web sockets’ use cases is when on your timeline, without doing anything, you see your timeline automatically updates and show new posts. 
Neither angular or react is built on "Ajax". Yes Angular can lazily load it's modules which you could argue is asynchronous.
This actually append with grid and IE. 
You'd use Ajax to make request to API to load datasets, you'd use sockets for a real time communication like a chat. Granted you can argue you could use sockets for db access but sockets have reliability issues.
Establishing a connection between a server and a client is slower than HTTP in Socket. So, Sockets are useful when you wanna build a steaming or a chatting application where you can keep sending data back and forth in a single connection. But in most cases, you gonna send or receive just one data. In such case, HTTP is faster 
S3
I just wanted to get the new of the update out there. Feel free to use, clone, fork etc.. Don't forget to star the repo if you like it. Happy hacking
 Hello Everybody, I have created a simple Public-Chatting web app using node.js, Check it out!
useful tiny thingy, thx into +1
I’m sure there are a bunch of recent books I’m unaware of that do a great job, but as a beginner I wore out my copy of [Danny Goodman’s *JavaScript Bible*](https://www.amazon.com/JavaScript-Bible-Danny-Goodman/dp/0764557432/ref=nodl_), and continued to find it a useful reference for years afterward. I don’t have any experience with the latest edition, but it may be worth a try.
Not when the resources are on different servers...
Sandstorm - Darude
You don't know JavaScript books search on GitHub for free version n you can also buy the book to support the author. For video lecture you can use udemy's "weird part of js" By Anthony alicea 
Thankyou 👌😊
Then split it into smaller pieces. 
I've always hated programming books - they're boring and I end up skimming them instead of actually absorbing anything. Maybe try a udemy course or one of the interactive learning sites like codeschool or codecademy? For me, I need to interact with the code, building something and seeing my changes in the browser in order to get it. FWIW, while I did graduate high school Im also terrible at math. I'm talking barely a c- in algebra 2 can't do mental math beyond simple addition/subtraction. And yet I'm about mid-level javascript engineer, specializing in react. Don't let any insecurity regarding how intelligent/capable you perceive yourself to be hold you back. 
Are the images user uploaded or static content? If it's static just Google "online image compression" there's a bunch of really easy free tools. 
They are static. Yeah I did that and like you said, a whole bunch came up. I was wondering if one was better than the others, or preferred I guess. Seems like they're all pretty similar though. &amp;#x200B; Thanks.
I apologize is this is a stupid question, i’m learning to code atm. Could these priorities be linked to classes so that I don’t have to add this to every line/function?
Sounds like the deal is you get to learn modern JavaScript while also being in paid employment. The good thing is you already know how to do wordpress, so you have lots of time at night to read up on js and practice the skills that will make the job you want, a reality - yourself 😎
Ipfs 
for static builds i add [imageOptim](https://www.npmjs.com/package/imageoptim) to my production build chain.
Quite obvious but making sure the images are of the correct size helps too. We had a client who was uploading 4000px width images into an area they only required 150px. They were adding about 15mb to a page load with all the images they were uploading. The blessing and horrors of a CMS 
It would be nice if you could specify a maximum on a DOM node that applies to the tree under it. So make the ad wrapper have a maximum of super low, and then whatever they try to do inside won't have any effect.
This is a nice comment! 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
no. you can probably select by them, using something like `.item[important="low"]{}`. but you'd still have to add it. and since this is pre render time, you can't add it via JS (by this time the DOM is already loaded and being processed). you'd have to set up rules in your templating and serverside code.
If you mean jQuery implementation when no. 
It’s a Google-driven spec, so of course it’s an illusion of control that also appears super useful to an average developer. I’d be looking for a macro-level control that supersedes all other priorities that allows a developer to prioritize the domains, like preconnect, and then priorities are isolated to those and all others domains treated as secondary.
This was actually a great read 👍🏾! 
Learn about stuff first :)
Nice read man, just some questions and an unsolicited feedback :p \- Are you still running your entire stack for free? And did you consider any other IaaS or PaaS provider? Feedback: \- I don't like gifs on technical blog posts, they distract me from the content, maybe you should consider that. Thanks for sharing.
Doesn't the browser consortium frown on vendors implementing attributes like this? I mean, universal data-\* attributes came to spec for a reason. Why not just use data-priority-hint="high"? 
!remindme 4 hours
I will be messaging you on [**2019-02-03 20:20:21 UTC**](http://www.wolframalpha.com/input/?i=2019-02-03 20:20:21 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/amif7o/priority_hints_hint_the_importance_of_a_resource/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/amif7o/priority_hints_hint_the_importance_of_a_resource/]%0A%0ARemindMe! 4 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Oh great, another slightly useful feature that every browser will implement differently and will be abused by spammers, pop ups and ads.
I don't want to make a lot WordPress. How to tell this to boss? If it is possible I would love to work only with JS and be sure that they don't want me to do shitty job.
About the salary. just check on the Internet what is the average salary of your current experience in your country and make sure that you dont go far lower than that or ask very far beyond that. Try to tell them your projects, its awsome features and hard problems that you've solve. In my experience it always works and you'll can always ask for higher salary than the average :) Goodluck mate.
I made a Chrome Extension to track time in Youtube: [https://github.com/makaroni4/youtube\_time\_tracker](https://github.com/makaroni4/youtube_time_tracker) It's made with Webpack, Vanilla JS and Jest. It's very minimalistic in design and implementation, idea was not to use any framework or library. I only used Jest to provide extensive test coverage (I'm moving to JS from Ruby world and Jest is just amazing).
Google/Chrome hasn't given a shit about spec for years. 😪
Have a look at the ‘you don’t know JS’ book series. It’s free on amazon for a kindle. Check out Udemy for some decent courses, check the reviews first though. Can recommend Brad Traversy and Colt Steele. 
AFAIK the `data` attributes are 100% for userland implementation, and as the prefix implies, were designed for _data_. This is a host implementation, and deals with behavior, not data.
[AJV](https://github.com/epoberezkin/ajv) 
Additionally, it deals with _loading_ JavaScript.
FreeCodeCamp.org provides a pretty good roadmap to becoming practical in JS.
I've used zschema https://github.com/zaggino/z-schema and protobuf https://github.com/protocolbuffers/protobuf/tree/master/js Both have their tradeoffs
Right now it's not even enabled by default in Chrome yet. Using it in production at this point provides no benefits and risks things potentially breaking if at some point in the future the spec changes. I'd wait until it's enabled by default in at least one major browser.
Remember IE 6.0 and MSHTML? With current Chrome dominance, we are back there.
Actually, it looks like this will make it easy to downgrade the priority of ads so they don't interfere with the loading of more important content: https://wicg.github.io/priority-hints/#downgrade-priority-of-an-iframe-and-its-subresources
Like this? https://wicg.github.io/priority-hints/#downgrade-priority-of-an-iframe-and-its-subresources
Thank you for the confirmation. I didn't realize I should be posting in /r/LearnJavascript, so I'm moving the rest of the discussion there. Cheers
Ads are generally delivered in an iframe, meaning image importance is only going to be relative to the other images in the iframe.
The demo date pickers give me &gt; Invariant Violation: Minified React error #185; visit https://reactjs.org/docs/error-decoder.html?invariant=185 for the full message or use the non-minified dev environment for full errors and additional helpful warnings. 
You can put the loading of the add lib on low..
I don't think you really understand what AJAX means. Angular is a framework, it has modules for both Async HTTP requests and WebSocket. React is a view library, it has neither. You provide connectivity yourself with either your own code or third party libraries such as Axios. WS is nowhere near displacing AJAX, the two have different use cases and live side by side. AJAX is _by far_ used more widely.
Man I'm fucking tired of people parroting this back. Chrome absolutely gives a shit about specs, and they work with other browser vendors every day to compromise and work on solutions together. In this case, it's you and the parent commenter that don't give a shit about the spec. Data attro Utes are for users to use. Having a browser attach additional changes based on them would be a total abuse of them and would literally defeat the purpose of them ever existing in the first place (the whole idea is that data attributes are safe from browsers ever using so you don't need to worry about your custom attributed having new behaviour in the future). Chrome is one of the major reasons we still have a spec for this shit. God knows they are big enough that if they wanted they really could completely ignore cooperation and could just do whatever they want, but that's not what they do, and they never have. Take HTML imports, they pushed for them, implemented them behind a flag in chrome, other browsers wanted changes, and soon chrome found that they were right, and the spec was scrapped and the code marked for removal. Take shadow dom. They helped write the first version of the spec, they implemented it, and even Firefox was part way through implementing it (again, since they all work together on this shirt). But then they both found significant issues, and the spec was changed. Firefox was able to quickly switch and implement the new one, but chrome is still working on it since they have to slowly deprecate and remove the old spec. If they didn't give a shit, they could just push ahead, FFS they even had a web framework (Polymer) that depended on the initial shadow dom spec, and changing it meant radically reworking their framework as well, it was a lot of work. But they do it, because they give a lot of shits about being compliant and being a good player in the web ecosphere.
Link is broken. It redirects to http://avstream.js.org/
https://github.com/rawrmaan/restyped 
Good bot
Thank you, FederalAssociate, for voting on license-bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
Hi /u/WebDEG, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/tbelcher, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/BasSlapper27, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/joovinsouth, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Is this why when I read an article it jumps around for several seconds after the text and banners load as the ads load? I always thought they did this maliciously because I end up clicking or tapping on them accidentally as a result. 
I personally prefer to use a technology which has typesafety as first class concern-so I make my APIs GraphQL last year or two.
have you ever heard of typescript? Seems like waste of runtime CPU resources to do it at runtime.
_To be fair_ in the case of XMLHttpRequest you're (generally) much better off looking at fetch/Axios/anything else purely from a maintainability and shared knowledge standpoint. The test for me boils down to: - how complex is the functionality, plus one of: - how critical is the functionality - how application specific is the functionality - and finally, does it make sense to shoulder the maintenance burden? complex + critical = probably want a library. complex + specific = probably want to write it ourselves. And so forth. Also, I've been using webpack for the last few years, and gulp for longer, so I'd say the build ecosystem is pretty stable at this point.
S3 is definitely the easiest option if you feel an urgent need to use a flat json file, but there are many many other better options. Some options: Mysql, postgres, mssql, or even sqlite Mongodb, dynamodb, couchbase Of these options spinning up an rds mysql or postgres instance on aws is very straightforward, spinning up a mysql or postgres droplet in digital ocean is also simple. The questions you're asking show you're pretty early on in your software journey, for now you may benefit quite a bit by spending more time learning the right questions, head through some full stack tutorials, make a few small projects and this kind of stuff will get way easier. 
Why don't you put all the files in lib, and re-export all the functions in the root index.js? This way consumers only need to import a single file. If you want to group them by file, you can export objects which are a collection of all the functions in the file. 
[https://json-schema.org/](https://json-schema.org/)
You make fair points, and have clearly done your research - I can't in good faith refute anything you say. Yet I will still hold on to this opinion for as long as I continue running into websites that "works best in chrome"
Don't do it! And I say this as someone who spent many hours gaining a full and complete understanding of how prototypal inheritance work in Javascript. But again, I say: don't do it! Prototypal inheritance is Javascript's bastardized wannabe form of OOP. Brandon Eich literally was building one kind of language, but then there was a ton of hype about his newfangled "Java" language. Not only did this make him change the name of the language to catch the hype, it also made him try to shoehorn in Java-like OOP features into a language that was never designed for them. As a result you get prototypal inheritance. But look at the thought leaders in our space, like say the Facebook React team. React hasn't even been around for *that* long in the grand scheme of things, but in that time the people behind it have done a complete 180. When React first came out you *had* to use classes to create a component, then they realized functions were a million times better when you didn't need state or lifecycle stuff, and now with the latest release of React you can do everything (including state and lifecycle methods) using pure functions (and "hooks"). That is a *massive* architectural shift, and it must have been incredibly costly for Facebook to make. So you know the engineers there would have preferred to stick with what they first came up with, if it had worked. But it didn't, so the absolute smartest people (in JS) at Facebook all agreed to take the framework in a completely different direction, one that eliminated all need for inheritance. Learn from history, and how OOP was never meant to be a part of Javascript (and with prototypal inheritance, it still isn't). Learn from the present, and how Facebook switched their approach from 100% class-based to 100% function-based. And if you learn those lessons, you'll know why you shouldn't even bother learning prototypal inheritance anymore.
Deliver some great js work first, before you think you’re in a position to ask for a full time change, that attitude of ‘no shitty wordpress work’ will just make your boss think you’re ungrateful, not prepared to help the team, and probably lose you the job altogether 😕
That's completely missing the point though. Be mad at shitty lazy developers not doing the bare minimum of work creating those sites that "work best in chrome". There is literally nothing Chrome or Google can do to stop people building websites that work best in any one browser, and it sure as hell doesn't mean they don't care about any spec because of it.
If they implemented it as an API for JavaScript, I could see that working via private methods, but if it’s just HTML, third-parties could easily parse the document and make alterations.
Makes total sense! Thanks!
Yes, developer monoculture is an issue here as well - but pretending chrome isn't complicit is willful ignorance. What types of stuff do you think these developers are using that only work in chrome? To-spec implementations that somehow only chrome implemented correctly?
Neat! I’ll try this when I get home. 
Well considering that it can't be a "spec" until at least 2 to 3 different browser vendors have implemented it, no chrome isn't complicit. If they didn't implement it, it would literally never move forward and could never be a standard. Like I said above, FF is the only browser right now with a full shadow dom implementation. That doesn't make them going against the spec, it just means they were the first to support it. When safari finishes theirs and chrome gets the new version in the browser, then it will be standard. At no point is Firefox doing anything wrong in that process, they aren't deviating from the spec, they aren't going away from standards, they are being part of the process. Turns out, Google is putting a shitload of money into chrome, so they tend to be one of the first to implement things (often helping make changes to the spec after they are done because of issues they found). Short of simply not implementing anything new or a while (which would bring cries of Chrome being the next IE6 and blocking the web), there's nothing they can do to stop devs writing stuff for only their browser.
Can you give me the steps to reproduce ? 
!remindme in 1 day
I will be messaging you on [**2019-02-04 19:35:02 UTC**](http://www.wolframalpha.com/input/?i=2019-02-04 19:35:02 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/amnmf9/if_youre_on_macos_and_have_homebrew_installed_run/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/amnmf9/if_youre_on_macos_and_have_homebrew_installed_run/]%0A%0ARemindMe! in 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
RemindMe! in 1 day
RemindMe! i1 day
Good point. I didn't really mention inheritance in the article, but I agree, that prototypal "inheritance" (particularly when trying to mimic Java class based inheritance) and OOP in JS is just not a great idea. For those trying to find out why it's such a bad idea, I would recommend [these](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md) [two](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch6.md) chapters from "You Don't Know JS", and if you have time to spare, go ahead and read the whole book! 
ajax is for a single request/response. It is more friendly on the server than leaving a bunch of connections open. Websockets is more for "realtime" applications like gaming or whatnot, with appropriate increase in server effort. &amp;#x200B; Under the covers, they both rely on basic \[Sockets\]([https://en.wikipedia.org/wiki/Berkeley\_sockets](https://en.wikipedia.org/wiki/Berkeley_sockets)) which is the sort of universal tcp/udp networking connection. Which are accessible from node and other non-browser javascript environments. i.e. [https://nodejs.org/api/net.html](https://nodejs.org/api/net.html) 
Nah. We like flavors here.
I prefer “flavours”.
I can respect that.
Javascript really isn’t Javascript. The term “vanilla” serves a purpose. The most obvious example of this in my experience is jQuery. Many, many people first learned jQuery instead of Javascript, and if they were anything like me, their whole mental model of what Javascript is was **screwed.** I think a similar situation is coming to pass with React. Nothing against React, but if the term “vanilla” is meaningful at all, it’s as a contrast to such a complete re-think of how JS works, and how it evolved.
RemindMe! 1 day
A man of culture
As stated in the title it is a waste of time.
YDKJS is _generally_ a good book, but Kyle's writings about classes and inheritance are biased and misinformed, and we probably shouldn't recommend those chapters to others. Kyle assumed that Java-style OOP and inheritance is the only correct way to implement those features, and anything implemented differently than Java is not "true" OOP. But that just isn't so. [There are as many varieties of OOP and inheritance as there are languages.](https://www.reddit.com/r/javascript/comments/8q6267/why_are_js_classes_not_real_classes/e0gyorf/) Python's inheritance model, for one example, is also objects linked to other objects, same as in JavaScript, and the same pattern that we JavaScripters would identify as prototypal inheritance. Here's [JavaScript and Python classes side-by-side](https://i.imgur.com/p9Kw815.png), demonstrating classes as objects and inheritance as delegation. Python's inheritance model is not a bastardized wannabe form of OOP, and neither is JavaScript's. OOP in JavaScript is perfectly fine. cc /u/ghostfacedcoder
React, or jQuery, aren't in any way "re-thinks" of how JS works. One is a simple library for mapping state into view, and the other is a thin - if heavy - facade over DOM, which at the time of it's creation was an API so terrible it was almost unusable. Sorry, but the term "Vanilla JS" serves no purpose at all, it's just a fancy name for WebAPIs that some throw around to gloat because they made a web page without any frameworks, like it was a steam achievement or so.
[Exploring JS](http://exploringjs.com/)
No, it serves a purpose. Next!
Javascript for kids. It has been written for kids after 10 yo. I'm nearly 30 yo and I'm learning so many things. It starts from 0, you will learn the basics and how to make games like snakes. https://www.amazon.fr/JavaScript-Kids-Playful-Introduction-Programming/dp/1593274084
I’m personally a fan of chocolate JavaScript 
*Hey just noticed..* it's your **7th Cakeday** senocular! ^(hug)
FYI, here's a list of useful QL plugins for devs https://github.com/sindresorhus/quick-look-plugins
Nice!
Developing with React is much different than developing with...ehe..."vanilla" JavaScript. React wants you to structure your project in a particular way, and base JavaScript doesn't care about that. I think JSX is the main counterpoint to your argument, though. JSX is an attempt to re-think how JavaScript interacts with HTML.
It wouldn't be https if it had http in it ;)
Normally you can't see?
... wat?
JSX does nothing of the sorts, it's an extremely thin transpilation layer that makes your code more readable, and nothing more.
&gt; JavaScript really isn’t JavaScript ಠ_ಠ This is what annoys me the most. This subreddit has become overran by children who watch a few YouTube videos or go to a bootcamp and think they now know everything there is to know about the language but refuse to learn how it works at a fundamental level. Downvote me to hell for all I care /r/javascript, I’ve already unsubscribed. 
Well, there are less and less limitations, that's the whole point. The schemas are usually limited to server-side, unless doing more complicated things on the client. In my setup the schemas are available to the client in specific cases (page edition or client-only rendering). Software like objection.js can do json-schema validation for knex instances. 
I think SIMD (Single Instruction Multiple Data) is what you'd be looking for, it was planned to become part of JS, and even shipped in Firefox and Chrome. It was dropped though, but looks like it might now be possible through WebAssembly in the future.
good work. 
does it work with json5 tho?
As a lead dev who has to interview potential candidates weekly I can tell you there’s a ton of people who can code in jQuery or React but can’t write “vanilla” JS. They’re dependent on their library of choice. 
Can’t you just hit spacebar?
Why? For it’s time it was a fantastic framework and is still incredibly flexible. If it weren’t in LTS I’d continue to develop enterprise applications in AngularJS.
Quick looks is marvellous! Wish there were more plugins!
I know, I mean that maybe we can have a solution like cloudflare or using a proxy, but for streams I think is hard :D
Yeah, in retrospect I guess I saw "prototype" and jumped the gun. To be fair even if you don't want to use prototypal *inheritance*, understanding the prototype chain and how it works still has some value ... although (again, if you're not doing OOP) I wouldn't put it very high on the list of things to learn. Either way, I was just trying to use this opportunity to caution new folks against learning bad habits (learning to use the prototype chain for inheritance), but I sincerely apologize if it came across as me bashing your article. The community absolutely needs good explanations for difficult concepts (even difficult concepts that lead to techniques I'd recommend against using). And as I said in my first comment, it took me a decent amount of time, and several articles, to fully "grok" protoypes in Javascript. Your article offers one of the best and most succinct explanations of it that I've ever seen (and really I should have led with that in my first comment).
So do you consider hiring people who can’t write JavaScript or no?
Found the error. I apologize, it was a typo in the Datepicker example, \`birthBay\` instead of \`birthday\`. Already fixed it. 
To me it's less about whether Javascript does OOP "properly" or not. On the one hand I'd argue strongly that Prototypal inheritance is "improper" if you're used to a traditional OOP inheritance approach, and again I'd point out that historically Javascript's "OOP" functionality was a historical afterthought. On the other hand, I've built major and successful web applications with class-based systems. In fact, I literally wrote a book on Backbone.js, a class-based framework, But the thing is, the biggest Backbone app I ever built got transitioned to React, and while there was no single factor that caused the move, the added complexity and ... well, mess, that classes create was a big factor. I honestly believe that using classes at all in Javascript (whether literally with `class` or just with a hard-coded prototype chain) makes your code less maintainable. And again, I'd submit that the very smart JS people at React (I'm talking Dan Abramov smart) came to the same conclusion.
Sure. If they show a willingness to learn, but I have a hard time hiring people who embellish their talent levels. Most of the people I’ve interviewed from boot camps can’t write “vanilla” JS. 
This. 
Open an issue with the V8 guys staying the program should throw an exception when it encounters unknown keys while deserializing
This is really cool! I love generative art like this!
Good one!
If you don't mind spending the time to compress them manually, both https://tinypng.com (works on pngs and jpgs) or https://compressor.io work very well (althought tinypng usually does a better job). When we had an image optimizer from npm in our build chain (imagemin, I believe), large images (e.g. 1-5MB in size) would go through pretty much untouched. Just to illustrate, here are compression examples for this image: https://unsplash.com/photos/pLa9Cg3YsU4. ``` 610661 Feb 3 15:38 compressorio-compressed.jpeg 814506 Feb 3 15:28 imagemin-compressed.jpeg 252507 Feb 3 15:35 tinypng-compressed.jpeg 862052 Feb 3 15:27 unsplash.jpeg (original image) ``` As you can see, tinypng wins and imagemin does nearly nothing to the image. Perhaps there are some settings for imagemin that would make it compress better? Manually compressing them doesn't take that long, especially since tinypng allows you to compress 10 images at a time. The only downside is you lose the original image if you decide to overwrite it or end up with twice the amount of images if you decide to keep the originals. 
Coming from python where everything is namespaced, that feels a bit cluttered. But maybe I just need to get used to it. I've been reading about tree shaking, and exporting objects that are collections of functions would make that impossible I think. Maybe I just have to export everything in index.js And from what I've read, there is no difference in putting index.js in root or in lib. I can just have package.json "main" point to either one, yeah?
Thanks! 
&gt; I'd argue strongly that Prototypal inheritance is "improper" if you're used to a traditional OOP inheritance approach Does that mean Python's inheritance is also "improper"? Also, there's no such thing as a "traditional inheritance" approach. Python, for example, pre-dates Java, and Smalltalk pre-dates C++. &gt; again I'd point out that Javascript's "OOP" functionality was a historical afterthought. No, it wasn't. Brendan Eich, "I chose Scheme-ish first-class functions and Self-ish (albeit singular) prototypes as the main ingredients." The idea of prototypes and the prototype chain was always an intentional main ingredient of the language.
&gt; What happens when Firefox or Safari support it differently? You take 5 minutes to determine if it still works how you want and change it/remove it if it doesn't?
I think you’d have to re-stream it on your own API. https://stackoverflow.com/questions/37043719/how-can-i-allow-mixed-contents-http-with-https-using-content-security-policy-m
&gt;I've been reading about tree shaking, and exporting objects that are collections of functions would make that impossible I think. True. &gt;And from what I've read, there is no difference in putting index.js in root or in lib. I can just have package.json "main" point to either one, yeah? Correct. 
I just stumbled on this today, which is an good discussion on this topic: [https://www.reddit.com/r/javascript/comments/7k7o8i/how\_to\_structure\_javascript/](https://www.reddit.com/r/javascript/comments/7k7o8i/how_to_structure_javascript/)
You mean, write a story, groom it, prioritiize it with your product owner, pull it it when there's capacity, stage release, regression test it, release? Cowboy development might work for you, but I take pride in my work and don't release broken shit if I can help it.
Ah, yes, I suppose it depends upon the use case. Using an actual class instance in the (semi-)global scope should allow you to call methods from that one instance, rather than invoking a new instance with each method call. That’s why using the ‘Math’ object is an efficient way to call math-related methods. It doesn’t create a new ‘Math’ instance. It calls the method on the single global instance.
You can use typescript
Ahh, thanks. I changed it to npm link now
Is there a way this can work with opening quicklook from cmd (which AFAIK is `qlmanage -p file.json`)?
2 things I would fix...1) remove all comments - this short of code should explain itself. 2) Just return deepEqual, don’t check that it’s false and then return false, that’s a double negative
That is for inline comments...it’s ok to have the function description up top. Also remove last else if and combine with the return true to be just return val1==val2. Anywhere you return a Boolean can be replaced with returning the condition itself
thanks :)
Isn't Google discontinuing chrome extensions?
No. They killed off chrome “apps” but extensions are not going anywhere. 
Any way to use this on firefox?
Yaaaa. That's the ticket. Thank goodness, I was hoping I was mistaken, I love extensions.
Make sure data sent over the wire is also compressed. With brotli, or gzip as a default. Google also released a png compressing tool called [zopfli](&lt;https://github.com/google/zopfli&gt;), add it as part of your assets building steps if you work with png :)
Thanks, it also took me several attempts to finally get what is going on with all the prototype stuff in JS. 
Haven't even heard of this before now but genuinely curious about this. Does this code of conduct specifically say that private repos are also not allowed? I feel like a private repo for a user to store their own answers would be fine if it wasn't published.
Hi, I have modified my function like this as you suggested, ***export*** **async** **function** **getData() {** **const** **data** **= \[\];** ***await*** **Promise.all(** **repoList.map(async** **(repo)** **=&gt; {** ***try*** **{** **const** **repoData** **=** ***await*** **getRepoData(repo);** **const** **sfData** **=** ***await*** **getStackoverflowData(repoData.name);** **data.push(Object.assign({}, repoData, sfData));** **}** ***catch*** **(err) {** ***return*** **console.log(err);** **}** **}),** **);** ***return*** **data;** **}** &amp;#x200B; but the problem is I need to call this function from react component constructor again I need to await for this which is not possible. How can I achieve this/?
Thanks! Basically the animation is a single `Animated.Value` called `animationKey` that transitions between 3 values, 0, 1, and 2 which is then interpolated by the elements. [Here's a gist with the code of how the animations work.](https://gist.github.com/jennmueng/7af7fc8c2855d0c57b2531c9ab1f0589)
What's json5?
Looking forward to this week's Hooks release!
[removed]
Simple yet effective I love it! I thought it would be some difficult for implementation. Nicely done!
This will reveal me as very very unproductive at work
Thank you, great work and tutorial!
Does this package take into consideration case sensitivity?. For example, *home* is more readable than *hOmE*! 
Probably late for this! But i created a library readability analysis of text. It calculates several parameters like Flesch reading ease, Flesch grade level, etc. I adapted a python library for this task which is linked in the github page. [https://github.com/clearnote01/readability](https://github.com/clearnote01/readability)
give your input a random name and add `autocomplete="off"` attribute ?
That's the living :) !! Keep it going, next one a song about =&gt; :D
No, because some people think jQuery, React and god knows what else library or framework is "JavaScript".
Unfortunately not atm, I've added an issue on Github: [https://github.com/makaroni4/youtube\_time\_tracker/issues/8](https://github.com/makaroni4/youtube_time_tracker/issues/8)
_Probably_ due out today based upon [this PR](https://github.com/facebook/react/pull/14692)! [Ctrl+r](https://github.com/facebook/react/releases)... TypeScript 3.3 came out last week as well, I think today will be dependency updates day.
Thank you I was wondering if there were any news regarding this that I was missing.
Autocomplete="off" does not work. Chrome ignores it.
 Thanks for the advice, actually I just posted the wrong file, the ccorect one that contains the function (nth), wich is not working is this: [03\_list.js](https://github.com/raschmitt/JS-Learning/blob/master/03_eloquentJavascript/04_dataStructures/03_list.js) &amp;#x200B;
 Thanks for the advice, actually I just posted the wrong file, the ccorect one that contains the function (nth), wich is not working is this: [03\_list.js](https://github.com/raschmitt/JS-Learning/blob/master/03_eloquentJavascript/04_dataStructures/03_list.js) 
Fab post! Dan Abramov has to have one of the best tones of voice for programming writing out there. He perfectly threads the needle between readable, factual, authoritative, and approachable. No matter how much I assume I know about a topic, I always come out of one of his articles better informed and more confident.
even with another value e.g. autocomplete="nope" even when you strip the attribute ? myinput.removeAttribute("autocomplete")
The problem is [here](https://github.com/raschmitt/JS-Learning/blob/8d4b839d58b607ad8997749ea9d682d92479c633/03_eloquentJavascript/04_dataStructures/03_list.js#L108) It's a common error. When you build a recursive function that returns something, the general structure is this: function f(...) { if ( /* end case */ ) { return someValue; } else { // call the function recursively... // Here is where many people do this: // f(...); // but what you need to do is: return f(...); // That "return" is the key and you're missing it in your line 108 } }
Amazing job! . 
You can try adding autocomplete="*new-password*" to the fields you don't want to be autocompleted.
Tried that, still not working 
Tried that, still not working
Tried that, still not working properly.
No the formulae used do not take the case into the consideration. But I'll try to add something for that later.
Fantastic anti-bloat training, some amazing programs in 1k!
I created [mockingcase](https://github.com/strdr4605/mockingcase) package and I need a function that calculates the readability of a random case word/text! Contact me if you have some suggestions. 
Have a look at http://2ality.com/2017/06/pkg-esnext.html I’ve used a strategy similar to that but instead of looking for “esnext” in package.json, I named the files I wanted to be transpiled like “filename.esnext.js” since that was easier for me to write the webpack config for. Wish I could share it but it’s not mine to share. 
[removed]
That's a really cool idea, was actually working on something like that yesterday on my own. Obviously it's missing the crucial part, which is the cache :/
Why is dank mono so popular all of a sudden
A better way to think about reduce is that it's supposed to _reduce_ an array to a single entity / variable. ["apples", "oranges", "bananas", "mangoes"].reduce( ( accumulator, currentValue, currentIndex, array ) =&gt; accumulator + (currentIndex === array.length - 1 ? " and " : ", ") + currentValue ); //"apples, oranges, bananas and mangoes" The juice recipe example fits better into .map() ["apples", "oranges", "bananas", "mangoes"].map( (val) =&gt; "squeezed " + val ); // (4) ["squeezed apples", "squeezed oranges", "squeezed bananas", "squeezed mangoes"]
This is a great project. What do you think about the idea of making the source code available as open source (on github for example)?
Thank you! I'm glad you liked it. HN reception was less positive :P
This should go into a pull request on react. It's a fundamentally useful utility. 
Everywhere. Javascript is a tool for expressing yourself to the computer. The better you know how to use this tool, the more expressive you can be. This is true no matter what you are doing. Most projects start out small, but then users want thousands of features. The more the project grows, it needs to stay organized to avoid chaos. These advanced features mainly help with code organization, so you can satisfy your users without creating endless bugs or getting buried in confusion.
I'd love to see some build-chain logic for building a single project into Chrome/FF/etc. The only source code I've looked at that does this is uBlock Origin but the complexity of the project is mad (and as such the build-chain is too).
Yes. I'm a bit disappointed that you didn't try changing the return value inside `finally`!
Wow, [5 points and zero discussion](https://news.ycombinator.com/item?id=19073739). You definitely normally do better than that. It's a real toss-up whether you're going to get a good discussion on HN. There are some super smart people who frequent it, but also some toxically over-opinionated people. If you just get unlucky and hit a couple of downvotes early on then it can derail the whole thing. It's a shame, because this is normally the kind of thing that they eat up!
[https://github.com/improbable-eng/grpc-web](https://github.com/improbable-eng/grpc-web) /w typescript using protobufs
Thanks mate, Yeah Its still free I end up spending $3 last month as I used to spin up dev environments for testing. There is heroku which I already used before and has a straight forward docs to get you up and running Quickly and for free down side is you server go to sleep if there is an hour went by without any activity, but for now I'm sticking to aws as it's convenient specially lambda. For the gifs, I got a lot of complains already but the intention was to make the post more funny as you don't just get to learn something you get to laugh as well. 
Thanks mate, I'm still actively working on it, and I don't consider to open source it yet maybe in the future who knows. 
I think what most people do is the "Jekyll route" when they wanna have a markdown-blog, ([https://github.com/barryclark/jekyll-now](https://github.com/barryclark/jekyll-now))
I changed the URL — there’s been some discussion on the new one: https://news.ycombinator.com/item?id=19073851 But it’s mostly about how confusing it is. :-)
Thank you friend for your reply. What I also would like to know is, is advanced JS used in DOM manipulation in order to add beauty/dynamic content that would not be possible using basic JS?
True. They think they're learning JavaScript, but in actually, they're learning jQuery.
there should be a vanilla-javascript subreddit.
Name it better as EcmaScript, its official name
[MDX](https://github.com/mdx-js/mdx) fits the description (mostly). Not really sure how reveal.js relates to blogs/writing in general, but there's even a reveal.js equivalent called [mdx-deck](https://github.com/jxnblk/mdx-deck).
[https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools)
I hope most devs don’t run into this kind of complication with hooks very often. I guess 90% will stick to useState.
You use them both in node and front end. JavaScript callback/promise/async mentality is kind of a must learn now imo. While it may seem like an advanced topic to you now if you take the time to learn one of the examples (the multiple timeouts of different times called out of order one is usually popular pattern) so that you can see how promises return and resolve it will help you with your sequential mindset. I love javascript and was so confused when moving into this new way of using it (if you will), but it has been so much more worth it to take the time and learn. Now javascript can build a complete program using node - as good as any other language. I used to use it only for client side manipulation of HTML data and with Ajax some sequential server side calls to databases and DHTML components. BUT NOW with node, and a number of other tools like say electron (which is just node anyway), I can build a fully functional client side app. Because you can work so well with HTML and CSS and client events, you can use node to build out a UI using those familiar technologies. You can interface to any of the databases. One of my favorite things to do is to manipulate electron apps to that I cam communicating with an HTML front end but processing and communicating using the node command line functions to avoid CORS limitations for data transfers. JSON makes life very easy when working with databases - especially the NoSQL document style stores. Bottom line is there are no limits in current javascript development and with a little effort and dedication you can find yourself using javascript for about every single thing you ever need. Good Luck!!
I kinda anticipated the HN reaction when I first saw it posted :) I think, at least for me, I’m still a bit confused about the audience for hooks. When they were first introduced, the argument was made that it is easier to grok for people that struggle with classes. But reading your (wonderfully informative) post, it feels like there are actually more hidden complexity and gotchas in hooks that you need to understand than just learning a bit of OOP. Also, one unrelated question: in my experience, developers have quickly run into performance issues when defaulting to functional components, as they are trying to do too much in a component that essentially has no shouldUpdate checks. With the introduction of hooks, do you foresee this becoming a larger problem?
It was disappointing to see how few people over there understood the point of the article, let alone the utility of hooks. I know I've never used a setInterval in a component before. What I _have_ done countless times is convert a functional component to a class component so that I can use state or make an imperative request post render. Even ignoring all the other benefits, not having to do that again has me excited.
I started it as an example project. But you can build on it: [https://github.com/ndabAP/nuxt-express-example](https://github.com/ndabAP/nuxt-express-example)
nice voice.. nice song. terrible recording.
[You won't find more up to date than this!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) 
React.memo and useMemo as well as [prop] checks on useEffect and useCallback deals with this pretty well, no?
Really great article, the only thing I don’t get is why the callback ref is assigned inside a useEffect. In my mental model of hooks this shouldn’t be needed. Anybody know if this is a general rule, or just a corner case in this code?
Probably because it's cheaper than operator mono lol
After a little bit of expermination, I think it's stored in cookies at PREF key and you need to append "&amp;f6=400" 
In the case of multiple different potential results to different sets of conditions, I'd definitely stick with something more readable. In this particular case I was curious specifically about the pattern of having only two different similarly constructed results of any size based typically on a flag or simple condition. In that case, it irks me to have to construct the result twice, but I understand it's the most readable. I have the desire to keep code as compact and optimized as possible, but I have to balance that with others and my future self being able to understand what I wrote. 
Nice this is awesome! Any chance that you can use this with React?
The thought didn't even cross my mind, but that's actually an amazing idea :-) Just tried it out, and the return in `finally` wins. I feel like I shouldn't update the article though because I don't want to accidentally inflict that kind of code on the world... 
There's also [create-react-blog](https://github.com/frontarm/create-react-blog), which gives you a MDX blog boilerplate with static rendering, built around create-react-app and Navi.
ES6 was a great improvement on JavaScript. I find the best way to learn it is to re-write any old JS projects you did in ES6. Fastest way is to use a linter which forces ES6!
Ah, fair enough. 
I had written something similar to this years ago in ActionScript. https://www.notadesigner.com/creating-an-underwater-effect-in-actionscript/ The demo seems broken right now, because of some missing files (I told you it was old). But I'll fix that in a jiff. The code should easily translate from AS to JS as they are both related.
Thank you for the explanation. I appreciate it!
Try Jonas' course on Udemy. It goes over the most concepts you mentioned in detail. I don't remember anything about JSON in particular, though. Jonas's course material like, code challenges include solutions. Final project is with ES6 + Webpack + Babel, so for a beginner in JS will be daunting. &amp;#x200B; [Udemy- Jonas' Course](https://www.udemy.com/the-complete-javascript-course/)
freecodecamp has an ES6 section in their "Javascript Algorithms And Data Structures Certification". You can also give a go to this free course : https://www.udacity.com/course/es6-javascript-improved--ud356 I have not tried it.
This is interesting, but my eyes sort of glazed over, and I couldn’t finish. Not that it was technically complicated, more that I am not so bought into this design that something like this could hold my interest. If anything I look at the class and say it might look messy, but most people could understand it. Well written article. 
React allows you to use external libraries by default. Since react components will be rendered to HTML you can use this animation library as usual.
Uhhhh, deleted?
Right, I meant more like changing React props or state, to use this library declaratively, or will it only work with a straight up DOMElement?
Maybe I'm missing something, but I don't see how I use this with three.js. Using tween.js I put a TWEEN.update() in the render loop and it's ready. Here?
https://eloquentjavascript.net/
I think that is totally understandable and tbh you don't have to know how or why if you don't really care to. The main takeaway is that useInterval exists (Dan published it) and this article explains why it is preferable to use Dan's hook to implementing it yourself. I appreciate him going into this detail but def won't be retaining the entire thing. Mostly just taking away that if you run into something that conflicts with React's model of time then you might want to use a ref and a one time effect and reference this article for further detail. 
Free video course on laracasts - just Google the name and you'll find es6 course there (I'm on my phone). He talks about webpack at some point, which is a bit outdated, but still good to watch for a beginner
Perfect, thank you!
Hi /u/juanmorales323, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ritzk9, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
The answer to that is no. Nothing is built with complicated tools that can't be built with simpler tools. They just make something easier for some people in some cases. And sometimes they don't.
They're already ruined. Why would I want pop ups from the internet on my computer? They already abuse the fuck out of my email inbox.
There's a pretty comprehensive feature comparison here: [https://github.com/shellscape/webpack-plugin-serve/blob/master/.github/FEATURES.md](https://github.com/shellscape/webpack-plugin-serve/blob/master/.github/FEATURES.md), which also has some info on the standout features compared to the rest. On top of handling HMR correctly for multicompilers, it's faster, smaller, doesn't require knowledge of yet another CLI (you just use whichever normal webpack CLI you prefer), and far less brittle than webpack-dev-server. Overall it just works a lot better.
Going to plug /u/wesbos as I always do - [https://es6.io/](https://es6.io/) Definitely worth it!
Exactly. Hence the blog post. It could be such a nice feature for mobile web apps to compete toe-to-toe with native apps - particularly in the messaging and communication space, but I don't think it's ever going to happen due to the rampant abuse from the adtech industry and complicit websites that use the tech.
A declarative concept sounds good. I will add this on my todo list :)
I see, I agree with the article then. My opinion is a product of shitty practices.
&gt; Just for clarification, JS is pass by value, ~~except~~ **even** for objects where the value is really a reference. FTFY &amp;#x200B;
I think it is possible actually with a custom renderer. Could you provide me a simple example how you use three.js in combination with tween.js? Then I have a reference to this feature.
I agree ^ it’s going to take me a while to make that mind set shift. Hooks FTW! Thank you Dan Abramov, you have changed my life. Again.
The toLowerCase method is available in the [string prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) Javascript strings are immutable, so toLowerCase will not augment the current string, but instead will return a new string with all letters lowercase. I have no idea what that annotation-esque syntax is, but a I would suggest you start with trying @Node.Text.toLowerCase(), or if that annotation is some kind of html wrapper method perhaps @(Node.Text.toLowerCase()).
I swear AdTech ruins everything they get their grimey hands on.
Cookies are site specific, and the browser keeps them all sandboxed from each other. From the Javascript console you are not going to be able to set a cookie for a different site. Your browser just won't let you do it.
I don't know Smalltalk, but both Python and Ruby's inheritance systems are much closer to Java's/traditional OOP than to prototypal inheritance. And as for Eich, you're just agreeing with my point. Javascript was never intended to do OOP (Scheme doesn't do OOP), and the ability to do OOP was layered on to a prototypal system at the last minute.
Its expensive.
This guy is right
It looks great. I will grab this, thanks :)
70% od the course od ES5
My "favorite" is all the sites that seem to be running this bit of javascript that asks if they can show you notifications before they actually send the request to the browser. That way, if you say no, they can try again later because they haven't actually been blocked at the browser level. So many sites that should know better are doing this. Looking at you, Tom's Hardware.
The things you're calling advanced vs basic are things that are advanced vs basic in any programming language that employs them. It has nothing to do with the DOM, a web api. You seem to be asking if it's okay to write procedural code. And, yes, for small things that won't often change, sometimes it's okay, and sometimes it's not. 
Haha super agree ^
That's right. But 30% of course (even the last project) basically made me work with ES6 more than I could possibly want. &amp;#x200B; You can always try Eloquent JavaScript. It is a wonderful resource, but not sure if it will meet your practice requirement. There are exercises, but not sure if they will be challenging enough.
Hi /u/Fitz_Roy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/AdjustedWatch, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/HansonWK, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Look4Found3r, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/AdjustedWatch, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/theInnovatorGuy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/wirtandi, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
yup sorry i realized after the fact thanks!
I like it but I wish there were more guard rails along all the edges
Doesn't FAT already stand for File Allocation Table?
Yeah, it also stands for the term "fat" which describes something cool :)
this is hilarious. google is the largest ad-tech company in the world, they're the ones driving creation of all this tech. they sure as fuck didn't do it for convenience sake. also saying they are ruined due to how popular they are? that's a contradiction. even if people turn them off (they won't, the number of people with a cellphone as their only computer experience, dwarfs people savvy enough to turn it off) companies won't stop using the feature. ad-tech isn't ruining web push notifications, it's the reason they exist to begin with.
Worked like a charm. Thank you very much.
As someone who has been writing a ton in react hooks, this is super helpful, I didn't know about the set interval case... My question that maybe is a really stupid one, is it seems like your effect is creating an interval on every render and cleaning it up with clear interval after the render... Couldn't you just use setTimeout and skip the clear interval? 
They were never good. Not once have I found web push notifications anything other than intrusive and annoying.
Dude, advertising rules the world and fucks our lives. Tv is flooded with ads, so is radio, so is the internet, so is the street (and I don't even live in Asia). And we even have to endure their "it's good and exists because of ads money" bullshit. Better call them AIDS. And there's nothing we can do or fight for, except for some palliatives like adblock or pihole. Nevertheless, it doesn't matter. Advertising rules the world.
Web push notifications were not created by Google. It is a web standard created by the W3C. See the [Push API](https://www.w3.org/TR/push-api/) page for more details. Web Push Notifications were also not created for convenience sake to push ads - they were created to allow the web as a platform to compete with native apps, especially on mobile devices. The intention of adding all these features for Progressive Web Apps was to allow the creation of fully functional web apps that can be installed on devices like mobile apps without having to use an intermediary like Apple's App Store or Google's Play Store. The point of the article, if you read it, was that the original intent of the feature is in jeopardy now due to greedy and abusive adtech companies and the sites that use their products.
This is the correct take. This wasn't ever going to be a beneficial feature. AdTech didn't ruin it, they exposed it for the crap it is.
I get new mail notifications from fastmail, would that be intrusive and annoying?
Summary for those not familiar with Electron: if `nodeIntegration` is enabled, then javascript running in the renderer process (the web page UI) of your Electron app can require and use node APIs, so can do anything they like on your machine. In general, it's strongly recommended to disable this, to sandbox your UI from the OS in the same way that normal pages in a browser are sandboxed. If node integration is enabled, any XSS attack into the UI of your Electron app could call node APIs, e.g. to read/write files anywhere on your machine, execute programs, etc. It turns out that if you're using the `sandbox` or `nativeWindowOpen` options, then even if you disable `nodeIntegration` for your application, any extra windows opened by the application will have it reenabled, and become exposed to these attacks.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
It's not created on every render. The old interval is cleared and a new one created _only when `delay` changes_.
&gt;It could be such a nice feature for mobile web apps to compete toe-to-toe with native apps - particularly in the messaging and communication space, but I don't think it's ever going to happen due to the rampant abuse from the adtech industry and complicit websites that use the tech. What? No, it's because, compared to native app notifications, the web browser push notifications feature set is a flaming pile of garbage. I use native app notifications because I have control about what I'm notified about, who can get at me, and when that is okay. I can choose what types of notifications to show. They respect Do Not Disturb. There are categories and classes of notifications, and I can change their behaviors. I don't get *any* of those features in a browser's push notifications. Clicking "Allow Notifications" is like setting every single notification on my smartphone to on, complete chaos. My browser doesn't have a "global push mute" like a phone's DnD mode. Some sites allow me to change what notifications I get, but that's not part of the standard and not at all common. Really, the feature is just trash. It's like someone competent started designing this feature before sustaining a major brain injury, then finished development with no memory about what the world had learned regarding push notifications over the past decade. 
&gt; Web Push Notifications were also not created for convenience sake to push ads - they were created to allow the web as a platform to compete with native apps, especially on mobile devices. Who knows or cares why they were created. The point is Google is pushing PWA's. Web push notifications make the technology attractive to advertisers. This helps adoption. If you think the largest ad-tech company in the world doesn't have a vested interest in making their products as advertiser friendly possible, well I don't know what to say. This childish fingerpointing at the 'slimy evil ad-tech' industry is ridiculous. Point it at Google then, like they are somehow more noble than anyone else in that industry.
Mobile apps have been killing push notifications for a while now. I'd disable them altogether if I didn't use them for things I actually care about: communication, reminders, etc. I've started just deleting apps that send me ads in PNs. Maybe the solution is to treat PNs like email and add a spam filter.
I agree that it’s annoying, and that it’s a form of gaming the system. But I definitely see why businesses would do it. Pretty much any opportunity to increase engagement with visitors is beneficial to the business. Even if only 2% of visitors respond “yes” to that prompt, that’s a win in their book. Businesses will respond to the incentives put in front of them. It’s hard to get businesses to act against those incentives based on moral conviction alone.
Ok then I am getting confused on what they mean by this: React by default re-applies effects after every render. This is intentional and helps avoid a whole class of bugs that are present in React class components. 
The article doesn't even mention Google at all. I also never said anything of nobility or that Google is better than anyone else. Nothing you are saying is grounded in any facts. I agree that Google makes most of its money from ads (this is a fact from their public quarterly filings), and they themselves are part adtech with their AdSense products and acquisition of Doubleclick. No one here is saying that Google has nothing to do with adtech. The article just mentions all adtech companies in a broader sense.
Can this be used with react?
Noone likes advertising. But what you're saying is completely upside down here. Ad-tech isn't ruining anything, it's driving the creation and adoption of a lot of tech.
Read the section just following that: https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects &gt; You can tell React to skip applying an effect if certain values haven’t changed between re-renders. To do so, pass an array as an optional second argument to useEffect
Web developers can’t be trusted. 
Yea , The same thought comes to me! We used Ember at my previous company. Our reasons were 1) Convention over Configuration . We used Rails in our back end =&gt; It was easier for our back end devs to quickly ramp up since Rails is also built with the same idea. 2) It was easier for the new hires to ramp up , since we all followed the same convention ( file structure . components etc) Ember is a very powerful framework .Its sad that the communitybis not very vibrant ! 😞
Google is one more ad-tech company, cool that you pointed it out. But other than that, the article is still valid. it doesn't focus (even mention) Google. The tech we are talking about wasn't made by Google. So why are you so focused on them and what is your point?
There's a pretty simple solution here. Browsers automatically block all attempts to enable push notifications from websites viewed in the browser. Not even possible to enable them manually. Completely blocked. The request is only allowed if the user launches the PWA from a shortcut. Which is like 75% the point of making a PWA in the first place. Boom, crisis averted. What do I win?
I'd love to see some examples of legitimate cases of `return` in `finally` (or even better in both `try` and `finally`). I've written my fair share of `finally` blocks, but I don't think I've ever returned from one.
Honestly, I don't mind that. What makes the "real" request obnoxious is that it's coming from the browser chrome. An inline modal on the website is fine.
\&gt;not using https in 2019
That's a pretty good solution actually. I like it, but there is zero chance that browser vendors will support this, because they have to cater to all use cases :-/.
you're selectively ignoring google because it goes entirely against your point. google is the primary company pushing PWA's. i've attended tech talks for things like polymer where they specifically point out how e-commerce and advertiser friendly PWA's are. ad-tech drives innovation. despite people's best efforts to vilify it.
Well the nice thing about my solution is it's a lie. It's actually two solutions which are completely independent. It would be very simple to have the "installed" PWA notification settings kept separate from the "browser" notification settings. So you don't actually need to change standard browser behavior at all, just make it so installed PWAs get their own opportunity to ask for notifications even if the user's turned them off in the browser entirely.
Check out "downshift" for a great search/autocomplete implementation in React.
Sounds good. I'd love to see your implementation. 
This was one of my favorite exercises when I started learning JS (next one being re-writing all the array methods with a custom `reduce` function). Great article for anyone interested in better understanding currying, functional programming, and javascript. You can condense the auto curry into a pretty one-liner: ```js const curry = (fn, length=fn.length) =&gt; (...args) =&gt; args.length &gt;= length ? fn(...args) : curry(fn.bind(null, ...args), length - args.length); ``` But the arrow functions `this` if `fn` isn't bound.
I like the notification from CircleCI that my build passed. There are some use cases which ARE useful but like with almost everything, features get overused.
It’s a necessary evil. Else the web would just be a bunch of paywalls. We’d have significantly less content. 
Yeah I never even thought about using this method. It definitely would allow users to send requests and quickly close the app with the confidence their request was sent. Nice implementation.
This doesn't completely solve the problem. Typescript is great, but it's mostly concerned with types at compile time not runtime. You can use a partial interface to describe the response data, but you still need to do runtime checks against it to ensure the data actually fits the interface.
I mean, this is how web apps *should* do it, because the app can’t customise the browser prompt to, say, talk about what the notifications are for, so they have to create their own prompts. Web apps that request for geolocation, notification etc. permissions immediately on page load will be rejected immediately by most users. Now whether they keep trying to ask for permission every time is another thing altogether. 
This looks really interesting. Are you using this in production? I keep hearing about RPC, but I've never run into it in any projects I've worked on.
Absolutely. Mail is mail, it should be checked when it's time to check the mail, not treated like a synchronous chat app (unless your job requires it, in which case my condolences).
I can see that being useful if it's an interrupt that you're waiting for to do some work or such. Yet to come up for me.
I think that should be my choice
it's web marketers that are the problem, not the developers. devs hate this shit at least as much as you do, but they want their pay check so ...
It's so intrusive. You're just reading an article on a website you will probably never visit again. - We use cookies, is that ok? "Nope" - Fine. We would also like to send you some notifications, what do you think? "Nope" - Alright! By the way, don't you want to subscribe to our newsletter? "C'mon, fuck off" - Oops, please disable your adblocker to view this site. Return to Google/whatever. Never look back
Since you can't `await` in a constructor, you should display a loading indicator and replace it with the contents once the data is loaded. class SomeComponent extends React.Component { state = { data: null } constructor() { getData().then(data =&gt; this.setState({data})); } render() { return this.state.data ? this.state.data.map(item =&gt; &lt;div&gt;${item}&lt;/div&gt;) : &lt;div&gt;Loading....&lt;/div&gt;; } } 
Almost everyone who cares about the web is pushing PWAs. Google, Mozilla, Apple's Safari team, the web standards bodies, web developers and web advocates, etc. This is very much not just a Google thing, but yes, Google is a strong proponent of PWAs.
Nice! I might use it for my upcoming project 👏
For sure. This isn't the first time we've seen companies abuse features like this, and it certainly won't be the last.
Yes, it is. I don't want to change that. I want to change the extent to which it is so. There's middle ground between a couple ads and a page full of banners (like most are), fake links and traps to make you subscribe, enable notifications or install an extension. The same happens to tv. There's something in between 0 commercials and a 1h 30min movie that takes 3h to watch on TV. Nowadays, if I want to watch a movie that is on TV I either a) wait for it to go for about 30-60min and then rewind in order to skip commercials or just download it for free. It sucks, I know. Netflix does it the right way, but in Spain Telefonica's (our largest Telco) pay per view platform costs you more than 30 bucks a month and yet they show 30-40s commercials before movies and shows. Where's the money going, then?
I don’t know if I’m as cynical as the author. To me, it depends on the app I’m using. I have most notifications on my phone turned off except for a small amount because it’s mostly just meaningless noise. Why do you want your PWA to send notifications? Why do you want users to use your PWA? If I visit a website for reading movie trivia that’s riddled with ads, there’s no way in hell I’m enabling notifications. If I’m visiting something similar to WhatsApp or something with real-time interactivity then of course I’ll enable them, else how am I going to effectively use the PWA? Just show me, the user, why I should want to get notifications from you. I’m not going to give that permission without a good reason. Just my opinion, though.
Honestly man... Browser vendors should really fix their permissions approach. Instead of a big fat popup, it should be a little red dot, maybe where the HTTPS logo is, then users need to open that to enable a permission. Only when a website have given them a proper explanation of why and how, then users can when to opt in
The library does not include any UI, and it can be used with any frontend framework, including React, Angular, Vue, etc. The example application included in the repo (the demo in the blog post) is implemented with React
Outline.com
Oh, I didn't mean to imply that there's a *legitimate* use for it...
Oh I don't think you implied that. It just made me wonder about what kinds of problems would require this kind of fuckery. I'm also curious how `finally` interact with `yield` in generators.
To be fair, most of the JS community will go to whatever is currently trendy, most of them don't really care or refuse to understand how it works. I don't really understand how react / vue are more popular than, let's say, sveltejs ([https://svelte.technology/](https://svelte.technology/)) when it pretty much outperforms them, has a very similar API like Vue and it's one of the less bolated messy frameworks out there. 
This is exactly what I'd seen done for this situation in other places. I was going to give the same suggestion, but without the example because I'm feeling lazy. ;)
I can confirm. Recently had to develop some of this stuff for my company and did not enjoy implementing it. 
I'm using ember at work and i have to admit i didn't liked it at first, but after some time, i learn to appreciate it. The reason of the lack of popularity of ember is, i think thé difficulty to add components from third parties 
So if the request is not from the browser, you hit yes and then you hit no for the browser popup? Seems devious af.
So if I'm zooming a div, but there is one element inside a div which i dont want to zoom. Is it possible? I tried asking this on stackoverflow as well but didn't received any response! 
You can do the same things both ways. Advanced techniques won't necessarily make your animations better. These techniques are more about delivering high-quality software in a professional setting day in and day out. They allow you to ship more features with fewer bugs, and to collaborate better with others. The goal is to make your program as simple and understandable as possible, since ongoing maintenance is the biggest expense software companies face. These techniques let you divide your project into smaller, more manageable pieces that are easier to understand and work on, vs. a big ball of spaghetti where everything is connected to everything else, and fixing one bug creates two others.
Why use React *and* Angular *and* Vue?
I'm writing a large (currently 40kLoC) app with ember, and I don't have any issues with adding third party components. I only had to fork [ember-material-lite](https://github.com/anlumo/ember-material-lite) because it's unmaintained.
Have you tried using this in concurrent mode already? My intuition tells me that this will not work. When a new tree throws a promise, the suspended tree will discard all local hook values (state and refs), so your data will not be there anymore, when the first fetch promise resolves. Additionally, I'm not sure if useEffect is even being called after a promise has been thrown in render. 
The tech in 'AdTech' is similar to the intelligence in 'military intelligence'.
'Advertising technology' is the new 'military intelligence'.
Nah, your solution is good. If an app does this, there is no more app. Android lets you block specific notifications, but I'd rather just remove the app. Same for web, the latest on my ban list is actually reddit. They pushed me some "trending in r/..." message, never again.
the website uses "or" How you can incorporate GraphQL into any of those frontend frameworks
Advertising is the cancer of the human race. It infects every channel of communication eventually.
Web devs are largely spineless sellouts. It sure isn't their descision, but they could as well simply choose not to work at places that do the above, but rather in the million different jobs, from building/running Wordpress shops/sites, to complex web app development, to completely many completely different niches. If those guys who are actually good at what they do stayed away from Ad-Tech, they could always find work at a similar (maybe a bit lower) pay level, and all those AdTech companies would have are a few good SWE's who simply don't care about the morality, and a hoard of juniors or otherwise tactlessness devs who really need that job. But alas, as per my first sentence, those companies still find more than enough people to fill their ranks.
Svelte doesn't outperform anything, native apps run circles around it. React just added a scheduler which maintains a 60fps rate by prioritizing and occluding content - it could rival native apps soon and perhaps outperform them - on a single js thread. Vue will be next. These are the changes that matter to most people i guess, i personally don't care much about the few kb that Svelte saves me in exchange for html string templates. Not to talk down on it, Svelte is seriously great, but i wouldn't automatically assume that people are that uninformed about their choices.
I'm in the middle of trying to learn how to do exactly this kind of thing, with the exact same tools. I'd greatly appreciate more information about how you accomplished this setup. :)
It's kind of a Catch-22 though. These intrusive annoying options show results. I opted for a small modest sidebar sub box and I don't get many subscriptions. It could also be my content, though.
I immediately uninstall unearned notifications. Word with Friends started bugging the fuck out of me with their daily advertisements to play for money and I had to uninstall.
I'm becoming more and more fond of the opinion that the world would be better without ads.
Sorry but, like im talking about web. I would never use js for anything else. Not even phone or desktop. It just makes no sense.
Adtech is only a symptom of capitalism! 
You're forgetting the: * what do you think of our website? Feedback forms, before I'm able to see the site. Sigh... 
The issue is that even if it’s a new site still nobody wants notifications. Nobody REALLY wants more notifications pop up on their phone. I really don’t care who won the Super Bowl, or what new device Google is putting out, or what some idiot celebrity said today. 
s\/isruining\/has ruined In a desktop context, Reddit enhancement suite is the _only_ application I've granted notification privileges. On mobile? The last new app I granted notification privileges was Vipps (a Norwegian user-to-user payment service). People too eager on pushing spam/ads has completely ruined notifications.
Why is the logo in the Hitman font? Very cool
Tyler McGinnis has solid JavaScript and React courses. His courses accelerated me faster than anything else.
With so much exciting new technology we devs can only deal with so many things. I am afraid Ember is not one of them. React (YMMV) solves all of my FE problems, I don't need an alternative. Especially one with such a step learning curve. Any extra time I can dedicate to exploring I spend it on GraphQL, k8s, Express, and so on and so forth. And if I want to expand my FE horizons I'd rather play wih ReasonML, Elm, Cycle, RxJs, Svelte, or any of the more bleeding edge frameworks out there. **TL;DR** do not see any benefits in taking up a hard to learn framework that would pretty much make me unemployable when there is so much more exciting tech out there
google
OP compared svelte to React and Vue, what have native apps got to do with it?
[removed]
I disabled push notification prompts as soon as they became a thing, and will never enable them for anything.
That's sweet
I wonder what are the benefits of this? How is it better than the SW just intercepting a normal request (which would still work if there were no SW)?
Came to say this... seriously... it's out of hand.
What i am saying is that React implements what makes native apps fast, scheduling. Native apps schedule, which is and has been the biggest bottle-neck. Without scheduling the web is slow, no matter which framework you choose. Microbenchmarks are utterly meaningless otherwise. Kind of surprises me now that you've been going on about people being uninformed.
React fiber is cross platform, it simply means that React is currently breaching the wall between native and web, which previously was not possible.
You should checkout React or Vue.js.
You have good intentions, but nobody writes "perfect" code and trying to over-complicate or over-engineer is seen as a negative trait. Read Clean Code by Robert C Martin and learn all about design patterns and you'll learn when to use what approach.
What have you already learned? What are you interested in learning next? What goals do you have that your going to accomplish by learning javascript? 
But then I guess more and more websites that aren't really PWAs and going to include a PWA feature just for this... and then users will be trained to ignore the "Install PWA to home screen" messages, and click "no" even when they might have wanted it. That's one thing I worry about with the "Install PWA to home screen" message... if they click no the first time, can they be prompted again by the same website? I'm not really sure how it works. But I wouldn't want to show that message to them on the first visit if it basically locked them out of asking again later (when they might actually want to install it).
Thanks!
How Well should i know js to move React?
Done, add in 1.14! Thanks for the suggestion, didn't realize peer dependencies are not installed by default.
I am having difficulty in doing school work. I need someone who help me in teaching those concept in detail.
I didn't even know there was a way to prompt people. I've always done it from the three dot menu.
No, capitalism is a symptom of being human. Trading with each other is what we do when nobody with a gun is telling us we can’t. 
I gave up and disabled these by default on all sites.
Rather have to deal with ads than having all content be state sponsored. 
You are right, then a tool like joi or ajv will have to do.
Bad if you're concerned with supporting any browser released before the end of 2015-ish.
Pretty well, I would recommen Vue.js it is much easier to understand and get grip in it, but still very powerful.
Uh... capitalism is not equivalent to trading and bartering, it's one specific form of it.
There are no standard "best practices" right now, which is why you haven't found an article. There are many, competing frameworks that do things only superficially differently, often overly-relying on transpilers to the point of becoming separate domain-specific languages, splitting the developer community into cargo-cults that mindlessly spew platitudes, while ignoring the fact that what they are doing should be much simpler than they realize. I suggest ignoring all of the frameworks. I suggest ignoring the virtual-dom, as it's about to be replaced, and it's a poor hack-pattern. Take a look at this because it's similar to what standards will become: [https://lit-html.polymer-project.org/](https://lit-html.polymer-project.org/). I also suggest ignoring anything to do with server-side rendering, as it's completely obsolete due to HTTP/2. Very few people know these things, as they're currently drunk on kool-aid, but expect that to change in the next couple years.
[Repent, for the end is nigh!](https://idlewords.com/2015/11/the_advertising_bubble.htm)
Yes the form where the people doing the trading set the price between them without somebody with a gun telling them what it should be (if they’re even permitted to do so)
Ember asks you to do a lot of your learning up front, because it's prescriptive about a lot of what you'll do. Components, routing, services, data store, data fetching and stuff are all built in. You get a lot of stuff for free, but it's a lot to absorb at once, lots of nuance that'll go over your head at first, and it can feel overwhelming, and people bounce off of it. Something like React doesn't try to be everything you need, so it's easier to jump in, have a nice experience making a component, and then you defer the pain of learning the framework you end up cobbling together. Having to onboard people to learn your custom stack is future you's problem. This has been a pattern going back a long time. JS dev sucks. Someone makes a tool that makes a good experience for part of the frontend stack. People flock to it. Eventually people realize it sucks to maintain all of these duct taped together frameworks. Someone makes a slightly more expansive library that makes a good experience for a slightly larger part of the frontend stack. People flock to it ... e.g. Backbone gave people models. They had to patch in a view layer, routing, a data layer ... Then Angular showed up and the view and controller layers were integrated, and people all ditched Backbone. One of Ember's core conceits is that you're going to end up with a framework, one way or another, whether they give you one, or you build it yourself, and Ember tries to give you a cohesive one. It's a hard problem, and I'm glad they're trying.
I feel like you're constructing a straw man against an opponent who doesn't even exist in the first place. Why would *everything* not-capitalism involve "somebody with a gun"? What is this hypothetical somebody with a gun supposed to represent? And finally: what is your argument that capitalism *as actually practiced in reality* (before we get no-true-Scotsmanned) does not involve violence? There are a whole lot of countries in this world that have been fucked over by capitalist forces. Just look up Operation Condor.
Check this out [https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs](https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs) The make this [http://todomvc.com/examples/vanillajs/](http://todomvc.com/examples/vanillajs/) &amp;#x200B; Using good coding standards with no library. Its a nice place to start in my opinion. But if this is going to be a project of any medium or large scale you should look into reactjs or angular. You need firm understanding of basic js to transition to react or angular. React is very light and understandable but you'll need to download libraries, angular is a big framework but has everything you need included.
&gt; But then I guess more and more websites that aren't really PWAs and going to include a PWA feature just for this... and then users will be trained to ignore the "Install PWA to home screen" I'm already trained for this. There's tons of news pages that do this on mobile.
Whoa.. is pretty similar, now I like it even more 
I just turn off notifications for any app that's not a messenger app. Removes all headaches and leaves notifications I actually care about. 
Electron's garbage and needs to die lol
Yeah actually, now that I think of it, I have noticed the PWA popup on some sites that were just basic article/news type sites.
It could go a little better. Use a ‘once and mute until accept’ policy by default. Pages can send a notification that essentially is a ping request to allow them. If you accept, great, carry on. If you don’t the. Any follow on pushes are automatically muted. This allows users to ignore initial requests that could likely be useless, like to view an article on a site that will never be visited again, but it remains in the queue to be reviewed later if valued is discovered. Later review and accept would ‘turn on’ but really simply allow the display of new messages. 
Yeah I've noticed it on a few sites, including twitter, which asks if you want to add "Twitter Lite" to your "home screen" ... [Android/Chrome screenshot example.](https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f59d0da-a0a1-45f1-87dd-19ccb53bdf80/3-twitter-lite-large-opt.png) I thought it was interesting how it's just called "adding it to your home screen" in Chrome, not sure how other browsers display it. Kind of implies that it's just a bookmark to a website. But I guess a more complex explanation would confuse most users, even a lot of people who work in general IT jobs don't know what an PWA is yet, I only first heard about them like a year ago. But you'd think there would be a "Click here for further information" to explain what it actually does (installs an app-like service worker from my understanding). I don't know much about PWAs yet, but very interested about them for the future, as it seems like a decent easy replacement for native apps for a lots of apps that don't need performance.
But, why?
Try Boost or Sync; reddit's app is pretty lacklustre.
I figured this question would come and I understand why. So these classes are to be imported by multiple other projects. My reasoning for doing inside this project is so the other projects don’t have to code it each time and less maintenance (hopefully). Either way there is work that has to be done. Hopefully that kind of answers the question
Actually, I might *not* have seen that import syntax...
Most of the time we dont learn in school base also in my experience but learn them by ourselves by reading online blogs and watching tutorials in Youtube. maybe try searching online and watch video if you dont understand the words used.
I tried to do that but it's take so much time and now it's affecting on my grades.
I developed a [CLI as an npm package](https://github.com/Annihil/github-spray) that enables you to draw on your 53 by 7 pixels GitHub calendar heatmap ░▒▓█ It has numerous of options such as specifying the start date, the font, invert colors, adjust colors, flip orientation, set a repo origin url and push to it. It is not permanent, you can cancel it by removing the created repository.
Have you asked the instructor for help? What topics are giving you trouble? Do you have a few examples of things that you're having difficulty understanding?
Does anyone know of a plug in that auto denies request to allow push notifications? 
I asked instructor and he is really help me couple of times but he is not available every time. That's why I need someone who can explain me the school work more deeply.
Please don't encourage them by helping them! Refer them to r/learnprogramming instead. 
Downvote, because I’m tired of people saying they adapted Robert Martin’s Clean Code, only to find the adaptation filled with a hodgepodge of rules many of which have no relation to anything from Robert Martin’s Clean Code. 
&gt; I also suggest ignoring anything to do with server-side rendering, as it's completely obsolete due to HTTP/2. SSR is still needed for good SEO. and http2 doesnt matter because purely JS-rendered apps will always have a worse experience because when a browser sees html, it can stream-parse it and build the UI as it is loading. this is simply not possible with JS, which must be downloaded, compiled and executed in full before any dom is created. you will always have a blank page flash while all of this happens.
Is there a rule I am missing?
Not really, you just said you want to do it here so you don't have to do it elsewhere. That doesn't really explain *why* you want to do it in the first place. Not trying to be pedantic, but knowing what it is you're trying to do would let me (and others, I'm sure) give better advice.
the real mvp here
Nice false dichotomy
Honestly, every page that demands me to turn off adblocker in order to view it (and I can't cheese it with manually stopping loading after all meaningful content is loaded)... I just decide to exit the page. I can live without reading, it's better than yielding to that kind of bullshit.
Any callback will have access to stale state only, it's not a problem with intervals. It's weird, because at first i really struggled with this, for some reason ignoring that this is how javascript works and i encounter it everyday whenever i use callbacks. But in my head hooks had to be magic, or something. 
google stackoverflow mdn watchandcode codecademy -&gt; freecodecamp
[Bill Hicks on the topic](https://youtu.be/GaD8y-CGhMw) 
Lol say what? That is exactly what capitalism is. It doesn't need to include money, it just has to mean YOU control the means of production or the capital, not some oligarch or the government. 
And would that be a bad thing? More noise != more signal.
I'm one of those PRs! Submitted it in April. It'll be a year old soon!
There are too many good alternatives for this to matter.
well, if an app is well designed enough, the notifications request will make sense
Yup, this is why I don't use the Amazon app
Fetch or xhr covers the axios use cases now :/
I use them with Slack and some other communication apps on desktop (as Chrome "apps".)
I think a good browser fix would be to limit notifications to only PWAs that you have "Added to Home Screen". Adding to home screen is a good signal that you trust the app. Some browsers are already aware of when a PWA web app is launched natively.
The opposite of capitalism is communism. State owned media would exist in the opposite of capitalism. 
Advertisement in general is getting out of hand, billboards, tv shows, movies, in game promotions, internet tomfoolery. I don't feel like a foreign government is a real credible threat to us. However I feel like we are never recognizing elements that grow within us as being 'enemy'. Like an immune system unable to attack cancer because it's our own cells just operating wrong. Advertisers are cancer to our society.
It’s a mixed bag. LOTS of very Jr devs asking and in some cases begging for help. There are a few cool people for sure. There are also members who write terrible code, but pass it off as gospel to the Jr devs. It’s basically Reddit. 
What. 
I agree with u/derknerd. When people are trying to learn JS and React at the same time, I wish them good luck but it's tough. React will undoubtedly make you a better JS programmer but you should be pretty solid before you start. Not to say Vue is simple but it's more accessible to the average person jumping in to their first library of this type. 
Very low effort. Try something constructive next time. For instance, "I feel the shortcomings of the axios framework is as follows and I believe that frameworks x, y, z do a better job because. ... For this reason I believe this project should be..." Let's keep this sub useful for all eh? This could be a great time to give some guidance to a newcomer, I for instance was taught using Axios and would love to hear another's opinion on it's shortcomings. 
Careful, IT people dislike capitalism with a passion as you probably already know. It's a sad reality when smart individuals reject the best existing system that improved their lives and lives of others humans in larger numbers than ever before in history.
They really need to use at least their own cookies cmon.
Is there a reason to still use Axios if there is fetch present in all modern browsers and Polyfills are available?
What is a good alternative that I could use on both the server and client? Axios great because it handles both interchangeably.
I really like the idea if that, completely agree. At the very least stop it from happening as soon as the site is loaded because it's getting ridiculous. 
The two that I've used the most for large scale apps are Revealing Module and Observer pattern. Revealing Module allows you to make only certain functions and properties public and helps with code reuse and organization. Observer allows you to implement pub/sub type components.
If they're going to do that they should do it after you've consumed enough of the content to make a decision. Honestly it's better for them and the user
Or offer it as a setting - off for all site - ask for sites with pwa shortcut - allow for sites with pwa shortcut/ask for other - allow from all
mostly, yeah. I really like being able to create an instance of axios with a base url and options. 
Making a base url still requires non base urls to be created and used. Make a constant and string interp the URI to get your second URL 🤷🏼‍♂️ 
fetch
I think the real reason is that it’s not backed by a major company (Facebook, Google). 
God no. So much “enterprise ready” overcomplicated nonsense. Don’t turn JavaScript into Java. KISS. 
Don’t overthink it. Just keep functionality contained in modules and you’ll be fine. 
The advantage is that axios actually joins your urls for. You don't need to concern yourself if your base url coming from config is http://dev-api or http://dev-api/ axiosInstance.get("people") will always produce http://dev-api/people It's not hard. Axios just makes it convenient :)
I don’t think most IT people are anti-capitalist as much as they are pro-regulation. 
Axios worked by default on both the server and the client. It doesnt require two separate packages. It seems like via the fetch route, it requires two different packages, `fetch` and `node-fetch`
We just started Node in school and learned Axios a couple days ago. Seems they're still teaching it. Wonder if it's a waste if I won't be using it.
So why don't you do something about it? You could help out and try to fix your issue for example :)
Nice reading skills, m8.
Literally everyone in webdev management needs to accept the death of notifications. But they won't listen until someone highlights a decrease in customer enjoyment and conversion. Plebs. 
Doesn't isomorphic-fetch fix the two package problem?
Uh dumb me. It is too early in the morning. Sorry :/
Uh dumb me. Its too early in the morning to write stuff on the internet. Sorry :/
Learning it is not a waste any which way. You're not in the school to learn specific tools that you are going to use, but to learn to use tools, any tools and learn to learn new tools.
We'll put, I feel better. Thank you.
I really enjoy the sane defaults and sane api of axios. I'm sure there is a good explanation for it, but it is "annoying" to me to have to call response.json() which returns another promise in order to get my data. Is this a small thing, yes, but small experiences like that make me like axios better.
Agreed. Axios has so many small quality of life things about it that just makes it so nice to use. 
&gt;What is this hypothetical somebody with a gun supposed to represent? The somebody isn't hypothetical and that somebody represents the state. The fight is between those who want to control and those who want to be free. It always has been and always will be. Stop being so obtuse. Capitalism is synonymous with free markets and freedom to choose. That you suppose you have a more sophisticated understanding doesn't change that general usage of the term. Just relax. When you read capitalism, unless it's blindingly obvious to the contrary, read: individual freedom, personal and economic. 
This. I love fetch, it's a million times better than using XmlHttpRequest, and I believe polyfills make it viable for everyone. But the interface just feels a bit less comfortable to me than Axios.
I mean ... this is great, but honestly no one pays thousands of dollars to go to a boot camp to learn BASIC, even though it's a tool that can teach you to use other tools. Students *should* expect their students to learn the current relevant, or (to be fair, since many schools/teachers aren't always perfectly up to date) at least the last generation. And by that metric Axios absolutely fits. *At worst* it's last generation tech, and it's very arguably current tech.
That works for mobile, but not so much for desktop. E.g. I don't need a desktop shortcut to my mail, but I'd still like to receive notifications for it. 
I give them some trust: open devtools, remove the modal divs and re-add overflow:scroll to the body/content div. If the modal shows up again, then I shall shut the door after leaving.
"Rate us on Google Play Store" You're not even an app!!!!
Serious question, what do you mean by: &gt; it requires two different packages, fetch and node-fetch node-fetch is a package for server side, what is the fetch "package" for the client side? I thought it was implemented natively in browsers
Why? Just write clear comments over trying to perfect your code to some unrealistic standard.
Oh, neat! Do you enable it in user settings? I should sign up for notifications that my push CI failed!
Read into those articles and you should figure something out ;) https://hacks.mozilla.org/2015/11/offline-service-workers/ https://developers.google.com/web/tools/workbox/guides/using-plugins#custom_plugins
Not all browsers
Fetch doesn't reject the promise when a response has an error code. All around axios has a much nicer API than fetch imo
Fetch has a much lower level API
Oh I see, that is my misunderstanding then, I thought for some reason there was a separate package for fetch. In my right now attempt to find documentation (on my phone), is this the fetch docs we are referring to? https://github.com/github/fetch/blob/master/README.md#installation If so, it seems like there is still a dependency for the client.
I don’t mind helping. On an unrelated note, you can mine bitcoin in webgl, right?
Whoa, since when a couple of neckbeards on Reddit is "most"?
Worked, thanks both
Not really. ` const res = await fetch('https://www.reddit.com/r/javascript/comments/an94xq/axios_needs_maintainers/efs5v0t.json'); const json = await res.json(); console.log(json); ` It's super easy. 
The sane defaults, sane APIs and features like interceptors really make it so much better for me than using plain fetch.
it works sometimes, but its too damn annoying to do on everfy f*** page
I basically do the same thing, but with tampermonkey/greasemoney scripts, so I don't have to repeat myself.
But should it? My API returns 404 if no object is found (but it is correct response) and in axios I have to "catch" error to handle it. It's not an error.
That's because \`fetch\` is an abstraction. You're not supposed to use fetch all over the place, you create your own wrapper functions around fetch and use that instead.
...but then you need to check for http status code because non-200 wont fail the promise, need .json() in every call, many other small convenience things... and now you wrote a wrapper which isn't 1% as good as axios
Server-side. I couldn't get the `node-fetch` to work with Azure Functions. Axios worked straight away.
10 lines of code is hardly a wrapper. And I’d rather use something that is part of the JavaScript standard and will be around forever instead of some random library that may or may not be maintained for the foreseeable future. Do you think the guy maintaining your code 5 years from now is going to want to dig up what the hell axios is when he hits a bug? 
Hms, why not write your own wrapper for fetch? I've created my own crappy little wrapper that also caches the response client side (sorry for the claustrophobic code and poor usage example, which I took from one of my stupid React side projects): ``` //Default expiry is the number of milliseconds in a day. LOL. There are so many of them! export default function(url, options = {}, expiry = 86400000) { const cached = localStorage.getItem(url); const timeStampKey = `${url}:timestamp`; const cacheDate = localStorage.getItem(timeStampKey); if (cached !== null &amp;&amp; cacheDate !== null) { if (Date.now() - cacheDate &lt; expiry) return Promise.resolve(new Response(new Blob([cached])).json()); else { localStorage.removeItem(cached); localStorage.removeItem(timeStampKey); } } return fetch(url, options).then(response =&gt; { const contentType = response.headers.get('Content-Type'); if (response.status === 200) { if (contentType &amp;&amp; contentType.match(/application\/json/i)) { response .clone() .text() .then(content =&gt; { localStorage.setItem(url, content); localStorage.setItem(timeStampKey, Date.now()); }); } } else throw new Error(response.status); return response.json(); }); } ``` Which I then use like this: ``` export function getLaunch(id) { const url = `${API}id=${id}&amp;mode=verbose`; return async dispatch =&gt; { dispatch(gettingLaunch()); try { const json = await cachedFetch(url); dispatch(getLaunchSuccess(json.launches[0])); } catch (error) { dispatch(getLaunchError()); } }; } ``` Axios is great, but if the only reason for not using fetch is having to type out response.json(), then I think you're being a bit tardy (I'm tardy on a lot of occasions so I'm effectively throwing rocks in a glass house here, feel free to roast my furry koala butt!). 
Fair enough, but the apis are different and so axios still has a valid use case
Very much down to opinion there, which is probably also influenced by whether you're using async or promises or callbacks
I relate to this so much.
Neither is Vue though 
It can be way more ten 10 lines depending on your needs. I did write fetch wrappers couple of times and its not worth it in long run. From my experience, other devs in the future would much rather dig through old lib then digging through custom wrappers - they most likely wouldnt hit that issue in first place with proper lib, and if they did, the solution would most likely be in first few git issues / SO answers, while the custom wrapper nobody wants to touch
Found a little bug, got a message saying “go to https://tourapp.co/bugs”, but the page returns error 404...
&gt; have to call response.json() which returns another promise in order to get my data. I do wonder why this is the case. Is it to keep a consistent API regardless of whether you're reading streaming data? It does feel odd to have to await `.json()` when I know it already has the data it needs to parse.
Sorry about that, I haven’t had the chance to do the bug reporting system yet. Do you remember what happened and the circumstances of the bug?
No, that's the polyfill. These are the docs: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
You’ll find most of the documentation on MDN, as usual for browser features. See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API for an overview and https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch for usage examples. 
Personally I've migrated to the latest-and - greatest, but it's kinda good to know older versions are still being supported out of principle. 
That's just a polyfill
Yeah "ignoring anything to do with server-side rendering" is terrible advice and sounds like the kind of absolutist rhetoric you speak out against.
It's like the popup windows from the 2000+. DIDN'T YOU LEARN ANYTHING?
I'm getting Ads from Google Ads on Facebook. It's an ad company advertising ad service on another ad company's web. The whole business has gone full retard. 
So, in short, people should resign themselves to a shitty situation because YOU don't like to click "no" on a window? ... From now on: I'm going to enjoy the shit out of implementing this shit, thinking how much I'm going to annoy little pricks.
https://a.uguu.se/r1rIKkTUUwyR.jpeg ^this is the design that i'm trying to make. Does it make any sense now? I know i'm terrible at explaining. Sorry :( --------- https://www.google.com/search?q=water+going+through+rocks&amp;client=firefox-b&amp;tbm=isch&amp;source=lnms#mhpiv=1&amp;spf=1549354687031 ^a real world example
What's the difference? Catch in any of those situations is clearly something wrong that should not happen (from the business point of view). In that case I can have logic in single place. Seems easier to read, maintain and reason about.
Too soon.
We're not talking about boot camps here though? If you want to learn specific tech you take courses on that specific tech, or rather: read the docs. Schools in general teach all sorts of rather irrelevant stuff, but for a reason. Schools should teach about how the technology doesn't matter much in the end because it's an ever moving target. You don't go to a school to learn about implementation details.
Maintainability: Your frontend will probably be obsoleted by external stuff sooner than that becomes issue. We're building street-side signs here, not the pyramids. Readability: depends on which month and what year the reader learned javascript. Speed? This has been inversely proportional with the maintanability and readability since forever. That being said, good code is good code and many books have been written about this. 
Wrappers like Axios, perhaps?
[removed]
It's not a huge difference, but in my view axios has the best API going, and a decent upgrade over fetch. Whether that makes it worth using for you is a different question. My feeling is, if I'm going to be using it on the backend, OR if I'm going to be bundling a polyfill anyhow, I'd rather just use axios.
I think fetch in its current form is simply garbage. Axios has a way better API
I last worked with it 3 years ago. It was already old back then and on its way being replaced by frameworks and libraries that simply improved upon it. And the Ember.js learning curve was quite flat (as in: it took a lot of time to master Ember.js). The biggest downside to me is Handlebars (JSX is so much more intuitive and, honestly, nobody working the frontend needs to separate JS from HTML anyway, if you do then you're doing it wrong my dear former backend-dev who `div`-soups the entire project and would love to get rid of that pesky HTML). Compare HBS templates with all the helpers to a simple JSX file. Night and day. Ember would benefit from a full on switch to JSX.
Sorry for the rather late follow up! I just put together a gist with a sample snippet from the service worker and the Vue client, with some bare minimum comments. https://gist.github.com/duke1102/8ed4f6a281769a5e88534a1ffa84e680 Keep in mind that the code is still not really optimized and will go through some refactoring soon*ish*. Anyways, feel free to ask me about this, I'll try to answer. I also plan to write a small tutorial series on how to implement a Service Worker (w/ Google's Workbox) with advanced caching strategies and other functionalities soon. Kinda feel like people would enjoy such a tutorial series, especially since it took me a bit to really get into Service Workers and I feel other developers might have a similar struggle.
I write such a wrapper in every project i start and it's usually 10-15 lines. Not worth another dependency at all.
4xx is by definition a client **error*, so semantically it makes sense to throw an error.
Yup. Exactly, that's a great benefit. We also check if the user is connected to the internet and if he's offline and tries to e.g. send a message, that API request will automatically get queued into background sync and replayed once connectivity is available again. Shame though that iOS still lacks proper support for background sync and web push.
:'D We don't. Oldest we support would be Firefox ESR 52.
Because\` AbortController.abort\` is still experimental and there is no easy way to achieve \`onUploadProgress\`/\` onDownloadProgress \`?
None of the big companies are actually software development companies any more. Google is an advertising company, involved in cloud services Facebook is an advertising company, wholly involved in advertising and collecting data on its customers Microsoft seems to be some kind of weird hybrid. It is involved in games, the cloud, desktop OS (its advertising, data collection platform), server OS (trying to draw developers from Linux, stopping its server customers from switching to Linux). Whatever. Apple is a mobile phone, lifestyle products, laptop manufacturer Amazon is an online retailer, which a line in cloud services which wants to get involved in bricks and mortar shops. None of them are involved in the development of software tools for desktop developers. You can try Embarcadero if you like Delphi, but their Linux offering is weak. The real problem is C++. Ever since the desktop development switched to C++ things have been on a downwards spiral because the easier to use so called dynamic or scripting languages don't interface properly with the main cross-platform C++ libraries in existence. Qt you know I am referring to you. In short what is needed are low level desktop programming toolkits which are designed and modeled from ground up to be used by dynamic languages, rather than have those facilities bolted on as an afterthought. There might be a few of these already in existence, but they may not be free.
Has this guy just discovered destructuring or something?
Is NativeScript what you're describing?
the garbage dump
Do you also reinvent the wheels of your car as well
What’s wrong with try catch. It’s used widely in situations where the logic is expected. Also no one expects 404 to be the intended response to a request. Why make a request if you expect it to give you anything other than a 2xx
Catching just means the promise was rejected. Promise rejections aren’t necessarily an error. In other languages like java they’re known as exceptions. 
By the same logic you shouldn’t be using Babel or webpack because they may not be actively maintained in the future. Or any dependency for that matter. 
Guess these aren't team projects?
&gt; The real problem is C++. (Warning: rant ahead...) C++ became a huge, vast and complex language, and the legacy baggage will drag it down forever, second only to the poor design decisions that have been made in the past. I write C++ code for almost 20 years, and each other day I discover something comepletely new. Life is too short to learn C++. I really hope Rust grows.
One thing I don't like about axios is that non `2XX` status codes cause an error in the promise. I don't think this is correct - the HTTP request _was_ successful, the server responded correctly, it just gave a "non-success" status code. An error for Axios should be a timeout/connection drop, etc.
Can you help me get started on making a commit myself? How do I start? How much am I allowed to change at a time? What's the procedure for actually helping with a project?
#BringBackRSSFeeds!!!
Tired of the cargo culting. Clean code is a very opinionated book. I would say maybe 30% is acceptable and a lot don't make much sense outside of OOP. And for god sake, the author has been horrible with women, young devs, FP programmers and anyone holding a different point of view for years now. Not a person you want to relate to.
Can you believe after the massive downvote you got that our schools are turning into marxist education camps? It's chilling...
RSS feeds need to be revamped.
IIRC the Fetch promise is resolved when the headers are there. The content hasn't been necessarily received yet.
It wasn't like that t the beginning - people who wanted to share information (andporn) made it flourish. The money came later.
If you want good grades be prepared to put in time and effort, there's no alternative
It's super shitty.
:)
I think we can safely conclude that we've run into the brigade that at one point in time would include the whole jQuery library in their apps for its Ajax functionality! 
Well, that makes sense. Thanks for the explanation!
Yes! As is looking for the div that needs to be removed and the one whose scroll has been disabled
"Scheduling means that web apps can be as fast, or faster, than native apps. " :) Seriously, think for a second what you just wrote. How would that even theoretically be possible?
I used to do that, then you start a new project and what do you do? Copy those 10–15 lines over to the new one? Months later you realise there's a bug so you fix it in one project and realise all your other projects will have the same bug. So you say fine, I'll create my own git small repository with the wrapper. You make that and include it in "all" (i.e. some because you don't maintain everything properly) of your projects as a git submodule. After including it in every project, and several updates later you realise git submodules are the worst thing in the world, so you move it to a private npm package. Then your colleague finds your wrapper and says what in shit is this? I need X feature that your wrapper doesn't have, so you move the repository to Github and make it open source so your colleague can commit. After doing that you find out your colleague is actually a linux neckbeard and won't commit to anything to Microsoft servers so you need to move it elsewhere. That evening you arrive home and realise your wife has left you and taken the children. Congratulations you've reinvented a much shitter Axios. \`npm install\` Axios and be free of life's problems.
&gt;Apple is a mobile phone, lifestyle products, laptop manufacturer, and dabbling in AI This is so wrong. Apple develops several OS, two languages, many frameworks. And of course they provide dev tools. 
JavaFX
What's latest and greatest?
There are apis like REST when you are making a search to a list of objects but there are no objects found matching the specified criteria so API returns 404. Or you do not have permissions (403, 401) etc. I am not talking about widely used things, I'm talking here about good software practices which I want to find. &amp;#x200B; I was doing 200 OK with object {status: error, message: something} but aren't status codes for this.
The real reason why there is nothing like React native for desktop is because a desktop usually has the resources to run a full JavaScript application with out any problems. Mobile phones do not. In other words: it’s good enough. It’s worth noting that Cordova is more akin to electron than react native is too. 
Yes I know. I'm 3 years+ into C# and know how good exception based programming is ...not. Throwing exception is good and goto is bad. Wait, what's the difference? Ah I do not know where exception is going to be executing next. &amp;#x200B; But I am just asking. Isn't it more readable if we do not have to check if it's error because of network or resource not found in catch and just assume that catch is network problem and keep showing "not found" to user (which is correct response) in try which is actually our app logic. Just logical separation. Maybe not to be found here...
I love spread operators. I use them almost exclusively for immutable state.
Down there there's a link where you can see a real demo of it in action. Native apps are not fast just because they thread or because UI is running in its own thread, that definitively helps, but they also do visual occlusion and task prio, which are the true bottlenecks. In the web we know it as virtualization and it's usually built into tables and such (imagine a dataset of 100.000 items, but only 15 fit on the screen, occlusion can cut out 99.985 render tasks, which makes a massive difference). The problem with virtualization is that it's highly specific and even native virtualization is crude. With React is becomes part of the scheduling process, it has a very positive chance of rendering faster than native ever will. I hope that answers your question.
Backend node.js wise, Async/Await has made node-fetch so simple along with calling the json function on the response. Just wait the the async function and you’re good :)
Maybe if you only run one or two of those apps but if you run 10 of them on a machine with 4gigs of ram you'll run into problems 
So you are saying that running some code ON TOP of a native app is faster than running just a native app? This makes no sense. I guess it would help if you could give some real world example. Ie. How can you achieve better FPS doing anything when you run a scripted thing inside a browser vs. running the same thing as a native binary.
¯\\\_(ツ)\_/¯ that use is so rare, no one actually cares. Like I said, it’s good enough. 
JavaScript moves so fast ... At still you saw some modern stuff that you can easily transfer knowledge from. I remember seeing ActionScript 3 in school back in 2010. God that thing is useless
Also, it might take a while for a huge JSON to be loaded and parsed.
Agreed, this is actually a common pattern for HTTP clients in many languages. It's an annoying default, but Axios lets you override it easily: axios.get("https://errorurl.com/", { validateStatus: () =&gt; true })
https://giphy.com/gifs/editingandlayout-anchorman-that-escalated-quickly-ToMjGpjpXMFPshSYGLm
My conclusion wasn't based on Reddit but something I realized within my local coding community.
`const prepareFetch = (baseURL, commonOptions={}) =&gt; (URL, options={}) =&gt; fetch(baseURL + URL, {...commonOptions, ...options});` Something like that? 
How many of Apple's tools are targetted at cross-platform development, ie Windows, macOS, iOS (or whatever it is), Linux and Android?
Yeah, just wait till it steeps into our military comms. "We're outnumbered, I need orders Captain" \*your message will arrive after this short word from our sponsor\* "Men, suffer with ED no more-"
Dude, you need to relax. Capitalism utilizes free markets etc. But that does not mean that free markets cannot exist without capitalism. They totally can and do all over the world. Take some economics courses man, I'd like to explain it all to you but there's too much to correct you on here.
when else in history did we have tech so advanced? I'd say the internet is what has enhanced the lives of humans more than some trade system. That way we can look up facts and see that capitalism is an atrocious system, and any system founded on the idea of infinite, perpetual growth will inevitably fail. Hence depressions/recessions every 30 years on the dot.
Use canvas. Probably you will find similar examples on codepen.
TLDR: I overloaded a function to behave like a hook when it is called from inside a function component and behave 'normally' otherwise. This is a special case where calling a hook behind an if statement is fine. (Scroll to the end of the article for the implementation).
Just the fact you said "implementing" rather than "designing" implies you're one of the devs who'd be "resigned to a shitty situation" if you didn't have this job, hence hardly the kind of dev I'd worry about to design really annoying stuff (one that good blockers don't remove).
In that case, might as well make `JSON.parse` return a promise...
Now with pwa there is not really a reason. Google just recently made it possible in the play store and i'd imagine Apple will do the same when the market forces them. With edge rendering engine gone soon there wont be a need for electron either when chromium comes with every windows box.
There's no real such thing as "best practices". The closest you're going to come is following a single style guide and using a linter to keep you honest with that. And then just keeping your code clean. Follow principles like DRY when you can, but don't over-complicate your code to do so. BTW, when it comes to abstracting code, I follow the rule of 3. Once you've written the same code 3 times, then you finally have enough information to consider abstracting it out into its own function/class. Before that, you've just got a coincidence and trying to abstract it at that point will probably make it harder to re-use the code again. And beyond that, put in good comments and use sane names for your variables and methods. Whenever something changes function, change its name, too. Unit testing helps in a lot of cases where there is a lot of logic, but less so when it's mostly UI. Beyond that... There's the pottery parable. https://www.industryweek.com/companies-amp-executives/pottery-class-parable-idea-generation In short, code a *lot*. Focusing on code quality before you have experience is an exercise in frustration. Once you have experience, it's actually easy and calming.
&gt;Maybe check out AirBnB's javascript styleguide Agreed. https://github.com/airbnb/javascript
&gt; sane defaults I've only used it a few times, and maybe I'm missing something... but I thought that is was pretty insane that `response.data` is inconsistently either a string or object depending on what the remote server responds with (automatic converting to an object if it's valid JSON, but remains as a string otherwise). Came across the same thing in a PHP curl wrapper too, and in both cases it tripped me up and left me dumbfounded to why this would be a good thing to do. A single variable shouldn't be a completely data type depending on what a 3rd party server does. It should either be a string or an object. You know if you're expecting JSON and want it as an object, so you could just call a method like `response.dataAsObject()` or something, and you know its going to be an object, or throw an exception. Using the same variable for both types means everyone using the library is going to have to write code to detect what type is it, and handle both types. Did I misunderstand something? Just seems bonkers to me.
sure, [here you go](https://jsfiddle.net/qvhbnaxd/) 
Also json is not the only response type! 
Best get used to it. By the time you graduate, half of what they taught will be out of date. This has been happening since the beginning of computer science... and isnt going to stop any time soon. Best to learn how to *learn* and how to * solve problems*. The tools are not now, and never will be, static.
Hey, thanks for the advice. Sorry for deleting my post here, I have moved it to r/LearnJavascript, because I think that would be a better fit for follow-up questions in the comments (which might be too basic for this sub).
The you’d have to await every time you parse json which happens a lot outside the context of an async request.
Obviously, but if the time it took parsing JSON was the reason for making it async, then you'd also want it to be async when parsing JSON _not_ in response to a request.
But, but the other response types have their own methods that can return a Promise :)
It makes one wonder if that Bjarne Stroustrup interview might have been true after all. 
Thanks mate. In the end I decided just to bite the bullet and configure a compiler. Thanks again though.
No, I but I do inflate the tires instead of delegating it to someone else. Because it's easy enough considering I'm a professional car mechanic... There is no logic in the wrapper function, just setting default headers, API URL etc. It's a literal 10-liner, I think it's silly to add a dependency just for this.
Isn’t that the whole point? Fetch just makes you decide how to parse the response after receiving it, I believe axioms defaults to json and if you want something else you pass an option to the method.
I'd prefer 204 No Content in case of empty list or even better, just an empty json array.
Just don't do it 
Fetch rejects because it's emphasis is on the operation, not the content. It is a lower level API than axios. The request itself succeeds or it fails; if it fails then you don't have a response object to work with. If it succeeds, no matter there server response, you will have a response object to interpret. 
If rather it due than be taken over by a malicious maintainer like what happened with event-stream. https://news.ycombinator.com/item?id=18534392
&gt;It makes developing complex APIs a breeze by being strongly typed
This is probably the fundamental point of disagreement. IT people believe based on their own intern desire to create that every other human will be motivated to create new stuff and inventions in a post-capitalistic society where basic needs are all satisfied universally. This simply isn't the truth and it does not happen in practice. Humans are lazy and opportunistic. Without a reward system where those that want to get ahead can get ahead, there would be almost no technological advancement. Sometimes it is not about the money. Getting praise and prestige from publishing that new science paper also strokes the greedy ego even if there is no direct application or monetary gain. Giving to charity is essentially based in egoistic tendencies that every living human has which is to show others that he is a good person. That is a form of narcissism. Going against our nature will further spread this monstrosity that we are now starting to form which is a hybrid economy that is taking the worst aspects out of socialism and capitalism and still pretending it is pure capitalism so that it can blame an ideology for all that is wrong today even tho nobody ever lived in true capitalism. No matter what kind of value based system humans create, there has to be a reward mechanism to satisfy ones desire for more. It doesn't have to be capitalism, but it never can be any form of socialism, even the "democratic" one (a word as funny as it is antithetical). 
From my current project: `` async function apiRequest({ endpoint, method = 'GET', payload, token, } = {}) { const response = await fetch(REACT_APP_API_URL + endpoint, { headers: { Accept: 'application/json, text/plain, */*', 'Content-Type': 'application/json', 'x-token': token, }, body: payload &amp;&amp; JSON.stringify(payload), method, }); if (response.status &lt; 200 || response.status &gt;= 300) { const error = new Error(response.statusText); error.response = response; error.status = response.status; throw error; } return response; } `` Do you really think this is worth a dependency and 5kb increase in bundle size? It's basically the same as setting axios.defaults. The probabilty of there being a bug is roughly the same as screwing up your axios config. If I need a new feature then implementing it will be as easy as configuring axios in most cases. If not, *then* swapping axios in will take 10 minutes.
The author might appreciate you giving him this feedback! You should leave a comment in the medium article :)
Of course they are
I personally think git submodules are fun, but it's a nightmare onboarding people who are (understandably) unfamiliar with them onto a project that uses them.
Well, not my point - my point was about wondering why `.json` returned a Promise. The reason for that is not that `fetch` can return other types of responses, because those are other methods.
I still don't see the benefit of strict typing. Is it something I won't understand until I actually develop with it? 
heh, second language and all. But if you're _that_ curious, it isn't _that_ hard to block adblockers. I made good money out of it, too. just use html canvas and a runtime generated script.
“Share this article on Fuckbook” I haven’t even read it yet, madarchod!
The main benefit is that you find more errors already while coding which you will otherwise find while testing or not find at all. &amp;#x200B; Another thing is that tools understand your code much better already while you are coding, and therefore can automate things like refactoring and even coding itself by auto completion.
Not as high quality, but there was a pretty good talk about how "Netflix does Devops" (or something like that). The guy was quite knowledgeable and shared some interesting stuff
I find auto variable renaming feature very useful to quickly get things done while refactoring your old and short sighted codes on the go. Seriously a game changer for me!
Like the other answers. Electron is "good enough". However, Nobody likes to ship a index.html that weight in at about 100mb.. &amp;#x200B; There are community efforts to use the built in browser instead of shipping a subset of chrome with each app. This would reduce the size by 99%. &amp;#x200B; But there's nothing out there \_today\_ that works as well as Electron does with the ease of development that scripting languages has. &amp;#x200B; Please check these repos: [https://github.com/pojala/electrino](https://github.com/pojala/electrino), [https://github.com/jscherer92/Quark](https://github.com/jscherer92/Quark) &amp;#x200B; They both have great goals and show a lot of promise. However, none of them are "production ready". Electron is, that's why it's currently the king. Hopefully not for long tho :D &lt;3
Okay, I hear you on almost all of your points, and differ only very slightly and a few. You hit the nail on the head about ego driving humans forward. We should extend beyond IT people then, given what you said about their motivations, to creatives in general. It is rare that someone creates for creations' sake. But the psychological reasons behind these motivations will continue. As something loses value, one does not keep seeking it. Perhaps a creative would find another way to capitalize. I think the future is headed toward automation. When everything including food production is made/raised by AI/machines, what will there be for the humans? So with a decreasing population in unskilled labor due to automation and population only ever increasing, what non-quasi-socialist method would you propose to help these people? I know, they could cross train and get a job doing whatever we don't automate. Or, pie in the sky, we can all hold hands and smile and automate everything and get rid of money. But, as you pointed out, how would these humans be motivated without money as a reward? Maybe they'd do it for the upvotes? Now that I have successfully created a straw man, let's talk about issues today. Democratic socialism is not antithetical, I don't think. Because at the heart of democracy is socialism. Think about it, is your vote more important/weighted than mine? I think, and most people do this, that you are confusing socialism with communism. I don't know who you've been reading on dem soc, but it might be that you have been misled. I think what really is meant is that we will be a democratically elected government with social fiscal policies. Socialism works, too, mind you. Think Police, Firefighters, taxes, social security. It works in government, too. I point to many successful, current Socialist-style democracies in place in Europe today. However I don't see Americans ever jumping on board with this for a few decades at least. The problem with socialism is when it becomes communism. Key difference is who controls the money. People have control of the government and market system in socialism, while the government (usually dictator) in communism is in control of those. I don't know if you'll budge at all -most people don't- however I am hopeful that you will at least acknowledge that I have made decent counters, as I can see that your points are well-constructed, leading me to believe that you are thoughtful and perhaps able to see another side for what it is and not made out to be.
Oh, I see. As far as I know it’s the only sensible option, since HTTP requests are async by design, we now use promises to handle response and catch errors. If .json() didn’t return asynchronously, how would we chain the following .then() and .catch() promise methods? Other libraries that wrap the fetch api don’t do anything drastically different, they just provide some defaults so you can skip the parsing step. Most of the time when I’ve used the fetch api directly, I wrapped it in a helper function to do the same thing.
They are OK enough, but there's a few annoyances with them and I agree that they are fairly hard for newcomers. I use [git-subrepo](https://github.com/ingydotnet/git-subrepo) now which I wouldn't say I really like either but it's a bit better than submodules in my opinion.
How would it find errors while you're coding? I think the only use case I could think of is a time where I accidentally passed a string when I was supposed to pass an object literal. Besides that, most of my errors come from testing where I need to test api calls with data sent from the front end. And to what extent can it automate refactoring or auto complete? To clarify, I've never touched TS yet. I only do JS and I use it in VSCode, where it seems to treat my JS like TS and gives me errors or warnings as I write it out. I'm usually very diligent with understanding what data is being sent where and how. I guess I can see how typing would help in cases where there's more than two developers on a project or if you come back to code you wrote months ago. 
You mean Alex Jones, right? /s lol
&gt;Do you really think this is worth a dependency and 5kb increase in bundle size? No maybe not if that's all you're doing. I personally make use of lots of Axios features (cancelling requests, transforms, interceptors etc.) so I personally wouldn't make my own fetch abstraction, but that doesn't look necessary for you.
Usually you want to handle a 404 in a special way though. It's nice to treat it as an error scenario. For instance, if I get a 404, I want to show the user we didnt find anything. If I get a 401, I want to tell the user they are signed out and need to sign in. Still, I see nothing wrong with how fetch does it.
Thanks for the replies. I wanted to do it to lower the amount of work for the child projects, by always returning the most amount of data. After writing out a reply I realized although it's probably easier to just give the projects that are importing it all the data, it's not really the most efficient approach. The projects should only request the information they need. Anyways again, thanks for the replies
What you described is not "blocking adblockers", it's smuggling graphic ads past it. After all, the functionality of an ad blocker in regards to such ads is basically being a blacklist of domains and/or js files. However, graphic ads are also not the ads that tend to really be annoying. The real annoying ads, such as pop-unders or ads that hijack the page for a few seconds, tend to be much harder to make. Also, what you described might work for a small website with little traffic, but if a big enough site like Reddit tried something like that, it'd be pretty easy to wait a few seconds for the ads to render then remove the canvas (or even set a watcher if the website persistently tries to re-generate the ads). See, it takes much longer to write a sophisticated ad than to write a script to block it. And the more traffic the site has, the probability that there is of at least one person in the crowd both capable and willing to write such scripts for an ad-blocker he contributes to grows exponentially.
It really helps as the project grows in size, or you’re dealing with complex types. 
You shouldn’t return 404 when it’s a search query. 
More algorithm fun - **Fast Poisson Disc Sampling in Arbitrary Dimensions**. Perfect when you want random but not so random points. Little demo included if you like watching algorithms do their work. &amp;#x200B; [http://mjp.co/js/poisson-disc/](http://mjp.co/js/poisson-disc/)
Looks good, but registration stops me going further. Maybe a guest mode?
He's factually wrong and people here are just criticising ads and his ignorance, is it marxism? :D if so, a lot has changed since last time i've checked
what interview are you referencing?
But the attempt to LOAD or SAVE the data was NOT successful...Which is what truly matters right? This is specifically the reason I hate fetch lol.
Pretty soon you will want more features in your wrapper and it won’t just be a 10 liner at which point you’ll just be reinventing the wheel 
&gt; Socialism works, too, mind you. Think Police, Firefighters, taxes, social security. It works in government, too. I point to many successful, current Socialist-style democracies in place in Europe today. I agree that it works in a way that it beneficial to the passive and consuming-oriented part of the society but I would argue that is also immoral and universally unfair to exploit success of the few to feed the masses. At this point we might embark on to the "chicken and egg" discussion because I see it in complete reverse. It is not the business owners who exploit the worker, it is the other way around because governments put a skilled worker in a position of power that is greater than any average individual business provided that the government actions were in fact what majority of voters wanted, which sometimes doesn't happen but that is a whole other topic. As for the future, I am pessimistic because a substantial part of the population will become permanently unemployable and even if their basic needs are met, they will exercise their greed via the voting and try to essentially steal what they believe is their fair share of the worldly wealth. On the other hand, complete automation and zero-sum system will give us for the first time in history the ability to effectively divide the population because the producers will no longer need the consumers but the consumers will always need producers. Which will again give birth to resentment, anger and conflict. It may be most prudent to try to keep the balance as it is even if it is perceived as unfair by everyone involved. But I am dreaming, if you look at the global policy changes you can see that we are on a high-speed train headed for chaos. 
This one: https://www.snopes.com/fact-check/program-management/
Not videos but many tech companies like AirBnB and Uber have tech blogs where they go into detailed case studies about their engineering. 
If is an array of objects, you can write a custom compare function for sorting it and take first/last element. Reference - [http://www.javascriptkit.com/javatutors/arraysort2.shtml](http://www.javascriptkit.com/javatutors/arraysort2.shtml)
We just converted our fetch wrapper to throw on certain status codes so that we can use catch for unsuccessful codes instead of just errors. 
Math.max(array.map(x=&gt;x.totaleth)) Math.max gets the max value of an array array.map applies a function to each value in the array, returning a new array
I know Discord does something similar to this as well. [Discord Engineering Blog](https://blog.discordapp.com/tagged/engineering)
At *that* point I may well swap in axios and make my wrapper function call it. But no need to do it upfront. I haven't reached this point in most projects.
&gt; Math.max gets the max value of an array. Not from an array, rather from its arguments. If you have an array, you'll want to spread it into individual arguments Math.max([1,2,3]) // NaN Math.max(...[1,2,3]) // 3
&gt;Math.max(array.map(x=&gt;x.totaleth)) my data is like this \[{"\_id":"5c585ed5a9a5b931c3057d48","exchange":"Poloniex","totaleth":-338,"dt":"2019-02-4T15:48:37.232Z","\_\_v":0}, {"\_id":"5c585ed5a9a5b931c3057d47","exchange":"Bitrex","totaleth":-227,"dt":"2019-02-04T15:48:37.222Z","\_\_v":0},{"\_id":"5c585ed5a9a5b931c3057d46","exchange":"Gemini","totaleth":86,"dt":"2019-02-04T15:48:37.220Z","\_\_v":0},{"\_id":"5c585ed5a9a5b931c3057d45","exchange":"Bitfinex","totaleth":-373,"dt":"2019-02-04T15:48:37.219Z","\_\_v":0},{"\_id":"5c585ed4a9a5b931c3057d44","exchange":"Binance","totaleth":6531,"dt":"2019-02-4T15:48:36.586Z","\_\_v":0},{"\_id":"5c585ed4a9a5b931c3057d43","exchange":"Kraken","totaleth":-342,"dt":"2019-02-04T15:48:36.584Z","\_\_v":0},{"\_id":"5c585ed4a9a5b931c3057d42","exchange":"Okex","totaleth":-6987,"dt":"2019-02-04T15:48:36.581Z","\_\_v":0},{"\_id":"5c585ed3a9a5b931c3057d41","exchange":"Huobi","totaleth":0,"dt":"2019-02-04T15:48:35.990Z","\_\_v":0},{"\_id":"5c585ed3a9a5b931c3057d40","exchange":"Yobit","totaleth":6,"dt":"2019-02-04T15:48:35.971Z","\_\_v":0},{"\_id":"5c585eb0ebf763319b18f5f7","exchange":"Bitrex","totaleth":-227,"dt":"2019-02-04T15:48:00.269Z","\_\_v":0}\]
wow, I didn't realize axios was in this situation. Will be warning some co-workers who use this library a lot
&gt; REACT_APP_API_URL + endpoint Now you've introduced extra cognitive load by having to remember if you need to end your base urls with a / or start your endpoints with / in order to ensure the string concat happens correctly. Then someone else copy pastes this code into another project and initializes the urls differently. Writing repositories between projects is now considerably more difficult. Axios solves this problem out of the box. https://www.reddit.com/r/javascript/comments/an94xq/axios_needs_maintainers/efrzmem/
Good catch sorry i messed that up
Very true to the first part about exploiting successes of others. My friend's dad runs his own body shop and complains of things of that nature keeping him from wanting to employ more people. But the point of a business is to produce a good or service for a group of people or another business, and knowing that much when you dive in, you have essentially given in to the market for your good/service. So saying it sucks to have to be better to your employees than they will be to you may be related to saying it sucks to have to add this feature to my product or the market won't take it. In a sense. But we've seen what businesses (notorious outliers) are capable of doing to their unskilled labor when unregulated, such as factories in early 1900s. So learning from history we passed laws and OSHA etc. Do I want people forgoing producing something for society to cash in their WIC cards and food stamps at Wal-Mart? Absolutely not. I am just wondering, since automation is imminent, how would we solve this in a non-socialist way? The only solution I see is a jobs program to train fast food cashiers (lol) and others to be able to program the machines and maintain them. But that even is quasi-socialist. Humor me. What do you think is a good, non-socialist alternative to solving the problem of unskilled jobs diminishing? Do you agree that a free fed training program would incentivize, in however small a way, the otherwise unproductive population? What would you say could incentivize them in a better way? I'd like an answer to the first part the most, the others are kind of rhetorical and, as they say in the courtroom, are leading the witness kinda like a straw man. Just wanted to show that socialism is not evil.
There's so much interesting engineering content out there and so little time. What to do?
the library works - there's no reason to be scared of using it.
Ask as many people as possible what they recommend, and then narrow it down to the titles that keep on getting mentioned. I can personally recommend: https://frontendmasters.com/courses/javascript-hard-parts/ 
Is this pulled from an API? Would like to see some spacing lol. This looks like you are just matching each object in the array to map, I think a for loop would do you good here. Also, if your data grows the for loop version would give you a performance boost. &amp;#x200B; You could then nest another for loop (or even map again) using the index from the first for loop, such that you can map each value from the object at arrayOfObjects\[ i \]. You're on the right track, but remember your array and object traveral fundamentals here. &amp;#x200B; I'm pretty sure I'm correct on this, and the performance of a for loop vs map is better for the loop when you deal with a boat load of data.
iam writing code in vuejs yes the data is pulled using axios.get and then iam pushing the data in this.wheretobuynsell array now i want to use this.wheretobuynsale object for finding min and max value &amp;#x200B; i will add spacing for more clarity &amp;#x200B; &amp;#x200B;
True, [everything but IE](https://caniuse.com/#search=fetch) 
What are you using at the moment?
&gt; What do you think is a good, non-socialist alternative to solving the problem of unskilled jobs diminishing? I can't think of an answer to this that would not make me sound evil in the currently acceptable discourse but if you really must know it is some kind of population control/incentives and genetics screening program to not even have to deal with unemployable. It is a fantasy. We don't have the political will or technology to really apply it. I can only hope we'll develop to that point before the last of the "civilization-builders" go extinct and we may find our new home somewhere else. That is the most pacifistic solution possible but there are others that only the fanatics really advocate for. 
You'll probably have to manipulate the objects in some way to get the numbers you want. But once you can extract the numbers into a new array, you can math max those, return the numbers and find with a for loop and if statement if array\[ i \].\_id.value is equal to your mins and maxes and return the one that is. I'm assuming your trying to display the min/maxes, so you might need another variable to store the objects that hold min/max. &amp;#x200B; Bear in mind that I use angular, but what I am saying is in plain ES6 JavaScript, which should work for vue if I;m not mistaken.
Yes, since it does not use cache it will re-request the data when another element triggers the same suspense catcher.
If you return a non-promise in `then`, it will still result in a promise :) To try it out, run this in your browser console: await (Promise.resolve('Resolved').then(val =&gt; `This is not a promise, but this is: ${val}`));
superagent
There might be an `asyncParse` method in the future.
Eugenics lol &amp;#x200B; Not saying that it isn't a solution, but you're right some one is bound to call you a monster for that. Darwinism, I say. If you aren't fit, we can't fit you on our planet. &amp;#x200B; There's no real, non-pipe-dream answer to it that readily presents itself. But, as evil as it makes me seem, if you can't afford to take care of yourself and you are unwilling to work to do so, these types of people dying does nothing but take some of the burden off the rest of the producers. I think it'll shake itself out when people refuse to learn a new skill or new job field. People die all the time, meh
Hmm, there is at least one example of a platform built on top of Electron, where you only need to run one instance of Node no matter how many apps on the platform you are running: www.openfin.co Unfortunately, they have been marketing to trading firms exclusively, so there isn't much chance of switching your text editors over to it soon. The restrictions on file access and OS features would also make some types of apps more difficult to develop.
Look I wasn't suggesting sterilization but a good first step would be to stop subsidizing the procreation of people who will stay dependent on others. The "do-gooders" basically created the modern starvation of Africa, not the war lords and resource predators. 
I don't know what to tell you except it has never happened across many years and multiple teams. It's a miniscule, hypothetical issue. It's not a hidden footgun either, if you confuse it then your request doesn't work right away.
You can audit your package pretty easily. ``` npm audit //(requires npm v6+) or yarn audit ``` Also, if you are using webpack, you really should be taking advantage of [tree shaking](https://webpack.js.org/guides/tree-shaking/), so you shouldn't have to worry about bundle size. 
It can help find out if a method or property exist and if it is null or not. So for maybe your todo object has a “isCompleted()” method or a “completed” property. Typescript will check this while you code. Now if you want to refactor the property “completed” to “done”, Typescript will automatically do this exactly where it is needed, no need to manually find and replace them, which is much more error prone.
Hi /u/lxcsxn, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
That's a bad separation of concern, as well as using exceptions for flow control. Axios/request aren't attempting to load or save data, they are making an HTTP request. They should only throw an error if they fail to make an HTTP request - they shouldn't throw an error if, for example, the request is for an ID that doesn't exist.
Hi /u/aminnagpure, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/boutell, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/jsloverr, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/imran8233, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/stepmilo, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Yes, that's why I was asking why people tell that fetch is bad. I have used superagent/axios but if axios is unmaintained I will switch to fetch which seems more logical.
Why?
I don’t need courses, I’m more into stories and insight into what challenges the big guys face and how they solve it. Just found Riot Games engineering blog and I think I have stuff to read for the next month. So much valuable info.
No, i didn't say that. All i am trying to say is that scheduling is what makes apps fast, no matter if native or otherwise. In the video i posted below Dan Abramov showcases a first draft of it, a scheduled async web app that can be bombarded with render requests and still manages to stay responsive, something that is impossible in the current web as well as on native. That javascript driven single threaded web-app app he's demoing, it would lag even if you'd write it in raw assembler or c++.
Yes, that's probably better. But you can't always control other companies. Also what again with no permissions.
What is the purpose of an http request? To transfer data...So if there is no data transferred, then it's a failure. Agree to disagree on this one. People should just use what they prefer of course, just stating my view.
Sometimes, in search for truth, reason &amp; enlightenment, I want to believe it.
4xx is client error. So when client (e.g. fetch, browser, our app) queries API for some resource (which can probably exist, we don't know yet) and it doesn't exists then server returns 404 telling "Client, you made an error, you requested something that cannot be found, do something about it, maybe try searching for other things". It seems like scenario case for application which is intended. But I understand your logic. In fact that's how I always coded things and now I'm exploring the other way around which seems simpler.
&gt; Capitalism is synonymous with free markets and freedom to choose. No, capitalism is about individuals owning commercial property (real estate, stocks, companies, means of production, etc.) and using your ownership of said property to make money (rent-seeking behavior). "Capitalism = free markets" is not true and is a common misconception. You can easily invent a fictional economy where individual people cannot own commercial property but are still free to trade goods and services in a free market.
Hi kenman, the source link appears when you scroll to the footer of the demo site, or click the drawer at lower right at any time.
It is still a dependency that is required in a build chain that is two different set ups, one for the client and one for the server. Axios was literally *need js http? download axios and go*. Didn’t matter if I was working on a server or client. 
[also, check here for finding object length using Object.keys()](https://stackoverflow.com/questions/5223/length-of-a-javascript-object) &amp;#x200B;
You don't seem to grasp that anything that is doable with browser and javascript is doable faster in native code. Your last sentence is very untrue. You think the React code somehow magically doesn't get translated to machine code at any point? Or are you saying this produces machine code so tight that it is humanely impossible to produce better by hand? Feel free to provide me with any data hinting otherwise. Actually at this point I'd even want to see anybody else in the world besides you making this claim.
On the one hand you're right: you cannot just _download node-fetch_ and go, because you need to _not_ use it on the client. On the other hand: using fetch is literally _need js http? download isomorphic-fetch and go_.
Ok! Thanks, I definately will :)
Oh, that's pretty cool. 
[Don't Use Exceptions For Flow Control](http://wiki.c2.com/?DontUseExceptionsForFlowControl) would be a good read for you
&gt; What is the purpose of an http request? To transfer data...So if there is no data transferred, then it's a failure A 404 request isn't "no data transferred" though, it's a successful response from the server telling you that it can't find the resource you're looking for ;) It is a failure at a higher level, but like I said I consider it a bad separation of concerns because then the function will error if there is a genuine HTTP error or just a domain error.
Is this a real live stream? Or can I watch on demand?
I ain't sure about awesome part, but came across this -&gt; [https://github.com/kilimchoi/engineering-blogs](https://github.com/kilimchoi/engineering-blogs)
Coding Tech aggregates and repost many interesting talks on programming: https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ Also most big conferences have channels, like NDC, JSConf, BUILD, ReactConf, etc.
Define the "worse" initial UX parameters. Are they perceptible to a human? You mention a blank page flash, but does that actually occur when the JS is loaded with the HTML together, in parallel using http/2? Or, are you stating what happens using current bloated frameworks without SSR and without http/2? Modern SEO does not require SSR or static pages, and the SEO hit people speak about comes from the load-time of content, which disappears with http/2, as the round-trip is eliminated for additional content once the html is parsed, and the JS parsing you're speaking about is so fast as to not be perceptible to the human eye. What happens to that parsing time with WebAssembly? SSR is a fad.
It seems like you also need to include an es6-promise polyfill as well. https://github.com/matthew-andrews/isomorphic-fetch ``` npm install --save isomorphic-fetch es6-promise ```
This man is a treasure, and not just because of JavaScript.
Only if your runtime doesn't support promises, i.e. if you use a very old version of Node or support IE. The same holds true for Axios, by the way.
Dude why? Some explanations pls. 
JS, Mozilla, Brave.. and yet he is not known to the general public.
Who said he’s not know?
True...But I generally like to catch HTTP style errors in an interceptor, whereas in my controllers/views I only care if I received the data I want to show.
The video game website Giantbomb has a dev podcast that I've been meaning to check out.
I don’t have anything else but thanks for sharing that, I’m gonna watch it later
Damn I hate c++, it's impossibly annoying to interop with it :(
Agreed, that's one of the points on my mind as well. Now that we have more and more Electron apps on consumer computers the problem will get more noticeable. Although Google is supporting Electron with reusable Chrome instances pushing it even further.
Working with React, I think it is kinda useful to define types for component props if you expect anyone else but yourself to work with these components. Saves other people the time of figuring out what they can/can't pass as an argument. Or if you want to integrate your components into other software than browsers without worrying crashing the app - like framer X. I still hate it though.
I was taught mostly In Pascal in college. My first job was in C. You think I wasted my time?
It isn’t flow control if your request returns anything other than a 2xx. If your request returns a 4xx or 5xx something is wrong
Ok thank you, I'll restore. In the future, if the link isn't prominent, can you post a comment so that it's easier to find?
Because the request is still valid /api/users?search=johndoe Isn’t the same as /api/users/johndoe The former just shows that no results match your query and should return an empty array The latter is obviously accessing a resource that doesn’t exist and should return a 404 Maybe you should do some reading on how to design a proper API
That’s not 204 is used for Jesus. The shit I’m reading here is atrocious. Do you guys even work at a real tech company or are you just a one man team. 
Because it's a bad user experience. If someone wants to turn smooth scrolling on or off, they'll do so in their browser settings. Plus subjecting your users to extra JavaScript that's running every single time they scroll is kinda bad and unethical. That's extra battery life that people are spending just because you're hijacking their browsing experience. In some cases I can understand scroll-jacking (like those slideshow layouts some websites use) but smooth scrolling should never be one of them. 
Assembly language covers every development use case yet we still use Javascript.
I realize this is probably just academic but isn't it easier to just await promise.all and array map + append .then onto your promises for incremental updates? Very interesting solution though
Us: *Standard library vs 3rd party library discussion.* You: AsSeMbLy LaNgUaGe CoVeRs EvErY dEvElOpMeNt UsE cAsE yEt We StIlL uSe JaVaScRiPt I get the point you are trying to make about “abstraction” as a necessity but we literally have two alternatives to Axios built into the language.
Yep, and look how big of a hurdle that has been. Vue has become the rare exception to that rule, and it has definitely made it harder to justify adopting. My company eventually agreed to adopt Vue officially after MUCH spirited debate, because it involves fewer decisions than React. It's not opinionated in the way that Ember and Angular are, but it comes with more out-of-box than React. Plus, who cares if there are fewer engineers with Vue-specific experience, if it is very easy to learn. This was a very difficult debate, and the biggest concern people had was that it doesn't have the backing of a big company. It's an oversimplification of the actual situation, but it's a common argument.
BTW, since this was obviously a copied and modified version of the [ryanmcdermott clean code "adaptation"](https://github.com/ryanmcdermott/clean-code-javascript), don't forget to adhere to his [license](https://github.com/ryanmcdermott/clean-code-javascript/blob/master/LICENSE). That is, you need to retain his copyright. cc /u/ctrls0ft
Maybe you should too, at least google something.
No I don’t need to. Judging from dozens of APIs from great tech companies this is how it’s done. Maybe you work at a shitty company or you’re just a one man team. 
The source code is available here: [https://github.com/apostrophecms/apostrophe-open-museum](https://github.com/apostrophecms/apostrophe-open-museum) ApostropheCMS is under a permissive MIT open source license.
Unfortunately, a maintainer in this context is someone who reviews contributions to the code base and merges them into the main releases of the code. So whoever owns the repo as well as others who are granted privileges. 
I really enjoy axios! If I would have the enough knowledge, I could give a helping hand...
I'm scared all this GraphQL traction is teaching people to not think through their API design. Although the ease of use is probably what's giving it traction. 
Fetch can abort too: https://developers.google.com/web/updates/2017/09/abortable-fetch
[removed]
I think our fellow is saying that BE should have a little more fame than at present. I agree, in the sense that he is an incredibly important technologist and thinker.
&gt; Are they perceptible to a human? yes, they absolutely are. &gt; Or, are you stating what happens using current bloated frameworks without SSR and without http/2? no, i'm stating what happens when i use my own lightweight vdom layer [1], with node 10.15.1 behind nginx w/http2. there is 0 bloat, all assets are first-party, everything is tree-shaken, css-purged, bundled, compressed and gzipped. this is on a site that scores A+ on https://observatory.mozilla.org/ and straight As on https://www.webpagetest.org/ (in Fast 3G and Moto G Chrome) and gets 100% for Performance in devtools lighthouse audit (mobile/applied). total JS time is 10ms, domcontentloaded is 165ms and onload is 320ms (with images). if you render only with JS, there is always an annoying blank page flash (even on my fast desktop). the same with loading webfonts. take my word for it. i'm at the point of questioning why Linode cannot achieve anything faster than 45ms TTFB on static content served by my nginx process, while a CDN can respond in 16ms (likely Linode's network hardware is to blame). i've personally profiled and tested it all. there is 0 kool-aid involved. &gt; Modern SEO does not require SSR or static pages GoogleBot does execute JS, as does Bing. but not all crawlers do. executing all js is very expensive, considering how much third party bloat is typically present (ugh). [1] https://github.com/domvm/domvm
I am sure those trading platforms use the fastest Xeons with minimum 256Gb RAM with Optane and RAID SSDs
[http://www.quickcode.co/engineer-blogs](http://www.quickcode.co/engineer-blogs)
Oh nice, that is good to know! Thank you for sharing.
&gt; Giving to charity is essentially based in egoistic tendencies that every living human has which is to show others that he is a good person. And not just others, often the person we want to convince the most is ourselves. Some good points, but this is just circular, sophist nonsense: just because *you* don't care about others doesn't mean that nobody does.
Good breakdown. All correct. HTML here with SSR is almost acting like a pre-cache for the page before the application takes over. It still feels hacky to do, like there should be a better way, a way to simply say to the browser, "hey, here is my application, go ahead and render things first as it's loading" but I suppose SSR is here to stay until then. I suppose I'm saying that I hope WebAssembly or some standard amends some of this, as it's too many hoops to jump through for what should be a simple solution. 
Yeah, I usually is one man team.. 
How's the planet doing these days? Any issues with the whole "humans blindly pursuing self interest" thing?
https://youtu.be/9R710ry-Cbo
&gt; How would it find errors while you're coding? I think the only use case I could think of is a time where I accidentally passed a string when I was supposed to pass an object literal. That's exactly the point. I know a lot of programmers that don't touch javascript because of that. To find these "compile time"-errors while testing/running the application is very unnecessary/tedious work.
I used to have the exact same opinions. I gave TypeScript a try and, while it took a while to fully appreciate it, I now wouldn’t go back. Generally, bugs in software tend to arise from assumptions or oversights. Having TypeScript constantly checking your entire codebase for any weird edge-cases that may arise from an assumption or oversight on your part is immeasurable useful, I find at least.
Explore why people care about strangers. At the bottom, you'll find self interest. Nothing wrong with that.
Partially works... The backlog of issues is definitely something to consider. Not all projects stand the test of time. Especially when their functionality is put into the js spec. 
First, I like to add a 'CALC' sheet where I preformat the data I'm going to work with. Add a sheet named 'CRM CALC' and format it as follows Next, you'll have to create a script through tools &gt; script editor. &amp;#x200B; In the script editor, paste the following code in. `function addCall() {` `var ss = SpreadsheetApp.getActive();` `var calcSheet = ss.getSheetByName('CRM CALC');` `var mainSheet = ss.getSheetByName('11');` `var outupt = calcSheet.getRange('A2:I2').getValues();` `mainSheet.insertRowBefore(13);` `mainSheet.getRange('A13:I13').setValues(outupt);` `mainSheet.getRange('B3:B9').clearContent();` `mainSheet.getRange('E7').clearContent();` `}` &amp;#x200B; This code will insert a new line in your call history, then paste the formatted data to it. You can then assign the 'addCall' script to your submit button. &amp;#x200B; Hope this helps! Let me know if you need any more help. I got my start in coding by making sheets and scripts like this. &amp;#x200B;
[http://highscalability.com/](http://highscalability.com/) Old, but, forever GOLD content!
I read 'Netlifx' in the title and thought some company seriously decided to name themselves that.
I admit I was naive with that statement but for my use cases Axios just provides a set of extra functionality that I'd have to write and maintain myself. I believe that if I run into potential issues and the library no longer fits my needs that I can either fork and make changes or switch into another solution if necessary. But ultimately you're right that if the browser provides for your use case and the library does not add much to your needs then it's a difficult recommendation. 
I'd probably start by looking at Electron or Proton Native. Both are solutions for creating native desktop applications.
&gt; Explore why people care about strangers. At the bottom you'll find self interest. A common misconception, based on a tautology. What you'll really find is the realization that others suffer just as we do... so if we oppose suffering for *us*, simple consistency demands that we oppose it for them too. "Unconditional love" is irrelevant. And nonexistent. Even a mother may abandon a child to die if its existence threatens her welfare or that of her other children.
Looks lovely! Great job
What's with new proposals and `#`?
&gt;https://github.com/gizt/selector Loved it!
Great work!
When you go to registration, leave registration code blank and make sure that you are confirming both your email and password (there's confirmation boxes for both). It should give you a response back saying success or not and if not what the reason is. If you still have issues let me know.
Node avoids it by letting each package run with its own version of a library. Since every package is isolated in scope, this works for Node just fine.
This has to be a joke, i totally thought you're being serious the whole time, so you've got me. : D
But in theory I could call this library and get an object instances from it. Let's say the same library has a function that takes instances of said object. If the instance object was given to me by v1 of the library and then I pass this as an argument to the function in v2, there could be a problem.
I think the real problem is that promises (and exceptions generally) tend to elide the difference between programmatic and operational failures. I'm not sure what the best solution is. Possibly we need some kind of trinary monad, or for fetch to return either rejections or promises resolved with Result monads.
I'll be honest: maintaining a project like this in my free time isn't a very attractive prospect. It may be good for one's resume and Github profile, but supporting a project like this could be a real labour of love. Networking is complicated and fails in lots of "interesting" ways. It's probably the ugliest side of what we typically do as JS developers. 
React Native for Desktop is absolutely a reality - for Windows, Microsoft itself develops React Native ports for both UWP and WPF. [React Native for MacOS](https://github.com/ptmt/react-native-macos) is also very actively developed, and last time I checked there were a couple of RN on Linux projects that worked quite well. 
Rent seeking doesn't mean what you think it does. The freedom to use one's capital is a distinguishing feature of a free market. Real free markets can't exist by definition without the free employment of capital.
For fucks sake. Why do they have to use Medium?
Based on that comment you couldn't explain it if you tried. No doubt your Marxist education has confused you. 
&gt; If the instance object was given to me by v1 of the library and then I pass this as an argument to the function in v2, there could be a problem. Sure, which is why library authors shouldn't leak their dependencies, and library users should stick to the documented API of a library and not mess around with internals. I've literally never encountered this issue before. Is this a problem you're experiencing? There are lots of things that *can* go wrong but you have to stick to what's currently giving you trouble if you want to stay sane.
It's not a problem I currently own, I was only watching that video regarding package managers and it just seemed like a potential problem and I was curious about how to manage it. Seems like in this case we need to be responsible and follow best practices. Edit: would I be able to use NPM to report a security issue if it is common for a library to give away objects and then receive them in functions? (just like described above)
Based on that comment you couldn't explain it if you tried. No doubt your Marxist education has confused you about many things.
&gt; most of the JS community will go to whatever is currently trendy I go with whatever is most mature, well supported, proven, performant, and compatible with the rest of the JS/Node ecosystem, and React checks those boxes a lot more than any other framework. Also how is Svelte less "trendy" than React? Its 1.0 was barely 3 years ago and it has a fraction of the community support that React has. Dropping one of the most mature JS frameworks for some tiny newcomer because "performance" is exactly the type of behavior you are decrying.
Good job on the design and UX
The extra push-up. I can’t find the link.
Yes sorry! www.theextrapush.com
\`console.dir(obj)\` is helpful too, especially if the object has other objects nested inside of it. 
In chrome you can just change the default permission from "ask" to "block" afaik. On mobile so i can't check right now. 
Sorry for not replying sooner. This was very useful information thank you!
I have created a NoSQL database using Node JS &amp; MessagePack. It is specially created for portable devices, to maintain their database in the device storage. If you could have a look &amp; give me a feedback, it would mean a whole lot to me. Repos : [https://github.com/zaygozi/lazlodb](https://github.com/zaygozi/lazlodb) &amp; [https://github.com/zaygozi/lazlo-node](https://github.com/zaygozi/lazlo-node) NPM : npm install -g lazlodb | npm install lazlo-node
It's got nothing to do with NPM, and I'm not sure it would really be a security issue. Both versions of the library need to be aware that the object they're given might not be created by them - that's the case even if you only use one version of the library but create your own mock objects!
Hi /u/_kevinkim_, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/uuuzzz, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/antonreshetov, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Wow thanks! Looks great! I;m getting this error message however... Message details TypeError: Cannot call method "getRange" of null.
Github Repo: https://github.com/GabrielTavernini/QuizKNN
It sounds like both the data and the key are stored on the same machine? If that’s true, it doesn’t really add security IMO, unless the key can be secured. Typically this would be a private key, something a user has to enter. I think a good analogy here is keeping a spare key in a fake rock. Yeah, someone would have to find it, but nothing stops a person from taking it from the rock. 
[https://www.humblebundle.com/books/programming-cookbooks?hmb\_source=humble\_home&amp;hmb\_medium=product\_tile&amp;hmb\_campaign=mosaic\_section\_1\_layout\_index\_2\_layout\_type\_threes\_tile\_index\_2](https://www.humblebundle.com/books/programming-cookbooks?hmb_source=humble_home&amp;hmb_medium=product_tile&amp;hmb_campaign=mosaic_section_1_layout_index_2_layout_type_threes_tile_index_2) &amp;#x200B; wish people who just link to the actual bundle and not their affiliate links.
ELI5?
What’s the output or result ?
I went to this talk it was pretty cool! I know a lot of companies do engineering blogs. Most companies do talks on technologies they're participating in or influencing. I haven't heard about any other companies showing examples of direct implementations. I'll follow up if it do! 
Hi /u/jedialvarez, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Yep, this is mostly academic indeed. I had to solve this in a very particular context where I needed this partialAll inside of an already existing async generator.
are the sheets you are working with named **11** and **CRM CALC**? If the names don't match exactly, that could be the issue. I made a copy of the sheet you shared originally and used this solution successfully.
Yes, and this problem exists in spades with Grunt. It's why, as others have said, you shouldn't leak your dependencies as a library author. There's nothing explicitly in place to _prevent_ this, nor should there be.
Hi /u/ElizabethWheeler, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
https://www.humblebundle.com/books/programming-cookbooks Full Link here. It has already been established that most of the books a quite dated and this bundle ist best skipped. 
Wish people would not advertise paid products and services.
Hi /u/vutran6853, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/phantom422, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
it's especially useful when outputing HTML Nodes
Upload progress.
Uplogress. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Upload progress.'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
2.6 is the latest version of Vue
I've made a funny video about SemiColons &amp; ASI in JavaScript 😅, here it is if you're interested in watching it [https://www.youtube.com/watch?v=D\_4EEuZqQoU&amp;t=27s](https://www.youtube.com/watch?v=D_4EEuZqQoU&amp;t=27s)
First, the obvious: it's a sigil for indicating a member of a class is private. Second, the less obvious: It's a sigil. [https://en.wikipedia.org/wiki/Sigil\_(computer\_programming)](https://en.wikipedia.org/wiki/Sigil_(computer_programming)) &amp;#x200B; Imagine the following scenario: You're using a module which exposes some objects, and you dynamically add properties to those objects. In an updated release, the module's objects now also include some private members which happen to use the same name. &amp;#x200B; What should happen? In most compiled languages, objects don't allow dynamically adding new properties, and since they're compiled, they have the benefit of allowing the compiler to throw an error. In the ECMAScript spec, no compiler can be assumed. As such, if the spec decided that throwing an error would be the correct behavior here, then it would be practically impossible to know if you're going to introduce or run into breaking changes in any given module's release. &amp;#x200B; There's another possibility. JS engines could look for the "private" keyword, and at any time, if any property is accessed, look to see if it was private, and if so, create / read from a duplicate public property if the read / write came from outside the class, or the private one if it came from inside the class. This would introduce serious performance penalties. &amp;#x200B; Since serious performance penalties and breaking behavior are both not acceptable, the third option is a sigil. Note that the \`#\` isn't actually a part of the variable's name; you can't access it via a string by doing \`myObj\['#private'Property\]\` (you can only access it via \`this.#privateProperty\`). It kinda sucks, 'cause dynamic access to variables can be handy, but it's the best compromise out of a ton of really crappy options IMHO.
Nice one! I especially like how number 2 is going to tilt a lot of people :)
Why do they even bother? ESLint has become the industry standard, surely there are better ways for them to spend their time