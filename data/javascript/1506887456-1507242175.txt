My post is about Visual Studio...
&gt; I wasn't aware most ES6 is also compiled down. Slightly pedantic but ES6 __can__ be transpiled to ES5. It's not a necessity and modern browsers implement pretty much all of the ES6 "spec".
Thanks for that, so maybe the refactoring tools will all be implemented in vs code too...
babel actually isn't using the ESM spec, rather, it just uses the syntax. so it would not be possible to act like how babel does. various ideas of making the grammar unambiguous, using a pragma, or a package.json field were looked at for a few years. you can still serve your files with any file extension and the web will happily treat them as ESM if you serve with the proper `content-type` header. the web is not based upon file extensions as stated in https://mimesniff.spec.whatwg.org/#interpreting-the-resource-metadata .
Below is the full code - change the background of a window: document.querySelector("button").addEventListener('click',function(){ document.body.style.background = randColor(); }) ONE - function randColor(){ return '#' + (function co(lor){ return (lor += [0,1,2,3,4,5,6,7,8,9,'a','b','c','d', 'e','f'][Math.floor(Math.random()*16) ]) &amp;&amp; (lor.length == 6) ? lor :co(lor); })(' '); } TWO : function randColor(){ return '#' + (function co(lor){ return (lor += [0,1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f'][Math.floor(Math.random()*16)]) &amp;&amp; (lor.length == 6) ? lor : co(lor); })(''); } 
And neither will views from users who disable JavaScript — because of scripts like this. The difference is that people disabling JavaScript by default will hurt us legitimate developers as well. Doing this is mistreating one's users. Don't even pretend that it isn't.
Extracting methods was added to vscode in the latest version.
&gt; I'll just personally abuse somebody oh you poor snowflake you
~~I'm guessing one doesn't work?~~ ~~If that is the case~~ it's because you are passing `" "` into the first function instead of `""` in the second. This means you are generating hex codes with a space in them like `# 123456` instead of `#123456` (assuming `123456` is the random color being generated.) Edit: I didn't read clearly. The error is described above.
They are not the same. First one ends with `(' ')` and so adds a space between `#` and color code.
good rule of thumb you want help. use a JSfiddle and explain what doesn't work.
At first glance, it seems to animate "left" and "top" CSS properties. That's a bad thing to do, because it will cause dozens of layouts on any animation frame, which will cause lag. Maybe Chrome has implemented some optimization for this. Oh, and speaking of "animation frame", the animation uses setTimeout instead of requestAnimationFrame, so that's also a reason why it's slow. Of course CSS transitions / animations or the web animations API would be even better. You should only ever animate transforms and opacity if you want efficient animations. In case of this animation, a translate transformation would work just fine and quickly. Maybe with a 3d hack / will-change: transform if necessary.
sorry guys i didn't see anything saying I couldn't any recommendations on where I can post this then?
so which one do you think is better ;p
&gt; The indent was to disrupt certain niche vertical market with static website creator When did English go out of fashion?
Will skynet hold food fares? 
You still come off as a pompous prick, man. Really, "/thread"?
You didn't address a single one of my points. If anything you added to the work required by the reader. What, exactly, do you expect to happen. Give us a few complete sentences about what you're trying to do. What, exactly, if happening instead. Again, complete sentences. Reddit has built in code formatting, click the "formatting help" button on the bottom right hand side of the text input when posting.
damn, why are you taking this so seriously? relax. /comment
There is a bug in Chrome's "Experimental Web Platform Features" that affects Ghost's default theme (see https://github.com/TryGhost/Casper/issues/340). If you disable the experimental features in chrome://flags then it will resolve.
stackoverflow.com for instance
I literally don't know what that means. What's "the version control level"? OP is asking for a "script".
*&lt;head: desk&gt;*
Like, instead of trusting that your developers ensure they lint their code using their IDE before committing to the Github repo, or hoping that they don't miss an error like that in code review, you can have a service that hooks in to Github (or any other version control platform) to run the linting process to deny that code from being merged in to the master branch.
That's not what OP is asking for, as far as I can see, but it's an interesting idea. So, do scripts exist which do that kind of denial of a commit for *any* language? Perl, PHP, Python etc? All I know about is post-commit hooks, which, it's right there in the name, won't help.
I really enjoy this pattern to clean up a bunch of ifs.
You're taking it more seriously than I am, judging by your own response. Take your own comment, relax! Ok, you're obviously more interested in trying to be a smartass than anything else. Not really worth arguing over. Have a good one!
Vue. :P Now that I'm on desktop and can see properly... I haven't played with animations much, but if you add this to the top of the CSS for debugging purposes: ``` * { border: 1px solid blue; } ``` it shows how the animation is filling the height of *the div*, not the image. Reducing the padding or margin might fix it. I'm not certain about the image stacking issue, but I suspect a problem with precedence in your CSS. Instructions on an #id override instructions on a .class, so if you've written instructions for both `#load-form` and `#load-form .load-line`, the latter might not work as intended. Also also, you might want to find a way to stop the interval once the counter reaches zero.
Yup, we used one at my last company. Here's one that ours was based off of: https://houndci.com/
That says it does *style* checking, for *pulls*.
The first doesn't work because you're passing a string consisting of a single space into the immediately-invoked functional expression. This is initializing lor as ' ', which, after the random hex characters are appended, returns "# 45DA67" (for example). The space makes it an invalid HEX code.
appreciate the advice it makes a little more sense now that you put it that way.
Interesting... an introduction to functional programming that highlights `Array#sort`. Some might argue that `Array#sort` isn't even a function. [like this person](https://softwareengineering.stackexchange.com/a/20923)
Sure that's a bug in Chrome? That div is visible by default, it covers the entire page, and it uses a backdrop filter. https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter Chrome does exactly what it's told to do. It "works" in Firefox, because Firefox doesn't support backdrop filters yet.
When IE dies out. When IE dies out. Alternatively: When modern browsers ship ES6+ features optimized and performant.
I think the factory pattern is an anti pattern most of the time. You are likely violating SRP somewhere else to want to do this
 from x import y a = 1 if true How is this yoda language friendly to anyone? It's the most confusing language I've come across. Anyways another reason is it can't be minimized (due to necessary indentation) which is necessary for the web. 
Hi /u/samiali123, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
&gt; his is initializing lor as ' ', I appreciate, the space causes the code to break. This code still confuses the heck outta me but I am doing my best to undersstand it. Apologies for all the back and forth / confusion 
You can use .mjs in the frontend, too. Parsers can’t handle Polyfills (no imports, no exports) and I don’t find parsing things twice very appealing. There are several ways in which ES module detection could have been done, each one has pros and *and* cons: http://2ality.com/2017/05/es-module-specifiers.html
To answer your question - yes I would describe this as best practice. The real beauty of creating an api endpoint here is that you can potentially slice out the front-end with whatever you need and keep the back-end separate. Your `index` view could return just `&lt;body&gt;&lt;/body&gt;` with a script reference that pulls information from the endpoint and builds the page. Of course this won't account for server side rendering.... each library does this slightly differently so you'd have to dig into it. But whatever you choose, you can still keep those API endpoints. One thing I would say is to not use `res.redirect` in the `/users/add` endpoint. Reason being - if you invoke this endpoint from XMLHttpRequest or fetch, the redirect doesn't mean anything or make sense. An ajax request can't redirect the browser. (you could potentially read the `Location` response header, and status code of 302 or 301 and set `window.location` with the result, but nothing happens automatically) Often it makes more sense to return the new record. If you had a DB backing the application, you would likely get back an `id` that can be used to track the new record on the front-end.
When the function randColor is called, it returns a string. This string consists of two main parts: '#' and whatever is returned from the next function (which is the final value of lor, more on that in a moment). The next function doesn't have to be called, because it's written to call itself (its an immediately-invoked functional expression). Inside that function (which is anonymous), is another function called co, which takes one parameter, which is referred to as lor. If you look to the end, where the problem is, you see that an empty string is being passed in. The first time through (co is a function that is called recursively, which means it calls itself), the value of lor is ''. If co did nothing, your final value would be '#' ('#' + ''), but naturally co does something: it defines an array that is 16 values long, consisting of each possible digit in hexidecimal (hexadecimal is base 16, instead of base 10). To pick which value, it calls Math.random which returns a value between 0 and 1. That value is multiplied by 16 and rounded down to the nearest whole number. That number is used to pick the character from the array. That value is then added to lor. Then, we look at lor's length. If it's 6 (the full length of a hex color code), it returns lor to be added to '#'. Since it's not, at this point (we only have one digit), co calls itself, passing the new value of lor (whatever this single digit was). We then go through the process of picking another random number, indexing into the array and adding to the first digit. We do this until we have 6 random digits which are added to '#', giving you your random hex color. So, you see, if lor starts not as an empty string but as a space, we get a 5 digit alphanumeric string preceeded by a space (we only go through the function 5 times instead of 6 because lor starts with a length of 1 - the single space).
Because .xhtml file extension tells the browser to use the XML parser instead of the HTML parser and it will break on each and every well-formedness failure.
TLDR? yarn, es modules and what? the 3.0 upgrade tool? pretty underwhelming
Decent article, but I have a few gripes. I'm assuming that you wrote the article. Please disregard if you didn't. 1. What's with the division when explaining let? I don't want to have to do math to figure out what you mean. 2. It's more enigmatic JS to use `const` for arrow functions. You use `let` and `var` a few times. 3. Functions should use `camelCase` 4. `let Func = (a, b = 10)...` why not call the function `add`? It adds clarity. 5. Maybe you should touch on one-liners like `arr.map(el =&gt; el + 2)`
Thanks for the concise article! Question, are some of the comments on it spam? 
why couldn't nodejs look at syntax to simulate it then
Hi /u/arosegrows, For javascript help, please visit /r/LearnJavascript. Thank you!
HTML is not XHTML which *is* XML. The validator will break on such failures not allowed or used in HTML such as &lt;img/&gt; or &lt;input/&gt; which do not use or need a closing slash. Formedness is a XML thing, not a HTML thing.
Try again
Not the same thing.
If you want the benefit of a top college course on web development, check out Jose Annunziato's courses as taught at Northeastern University. https://www.youtube.com/user/jannunzi/playlists The webdev course focuses on MEAN stack but touches on some others and is a good introduction. These courses do presume some programming experience so may not be the most helpful if you're looking to learn your first language.
my policy is 'last 2 versions'.
You'd probably be safe with 97%, but it really depends on how important the 3% is to you. It's more of a management decision. 
That doesn't break HTML and is easy to fix. Hell, the beautifier I wrote accounts for this and even automagically converts the code one way or the other.
Atom’s search is one reason I haven’t used it in a long time.. search binary files when I’m looking for text? Crash on any substantial project? No thanks. Vs code is no sublime text when it comes to speed but it’s better than anything else there for front end dev.
It's a bug. By the backdrop-filter spec, [the backdrop filter output is the first thing drawn onto the element](https://drafts.fxtf.org/filter-effects-2/#BackdropFilterProperty). [By the CSS4 color spec, opacity should be applied to the element after it is drawn](https://drafts.csswg.org/css-color-4/#propdef-opacity) Perhaps more importantly... the Webkit team wrote the initial backdrop-filter proposal, the spec isn't meaningfully different from what they proposed, and their [on-by-default] implementation works as above. 
It depends on your audience. My shop's output is used solely by tech-literate academics who use the app (and therefore their browser) for dozens of hours per week. As such, we can rely on them being pretty up to date, knowing how to update the app tells them to, and so on; so we don't need to support anything but the last couple of versions on major browsers, and we only support a fraction of the app's functionality on IE. If your site is there to offer pension advice, you probably need to support everything.
depends on the use case. a framework isn't really needed for state in a simple app tbh. 
why are you trying to switch to vs code? because of hype?
Dont mind them, im with you. Although you should keep it to yourself and other vim users. People see it as "you think your better than me?" and take offense.
The idea is extendible to static code validation like HTML syntax. Here's an example: http://github.com/Shopify/erb-lint That library is hooked up to a Pull Request validator that runs the proposed code through all these linter libraries and spits out any violations on the Pull Request comments and can mark the PR as failing (not to be merged). Pull requests are the last and final line of defence to the master branch. If you want the listing to occur pre-commit, then you can hook that up in your local .gitconfig.
 Also I noticed that VS Code on Windows is fairly fast. Grab a couple of other cross-platform programs, maybe some java app like jDownloader that's also very sluggish and compare the performance in both OS. Electron is chrome plus a nodejs server and a web application running on top of that, so probably it will perform similar to a webpage. 
How can you fix it if it's not broken? Actually, broken is the wrong word and I'm not sure what I meant to say there. What you wrote doesn't mean a thing. It's what the specification states and it is clear. There is nothing in any specification for HTML that has ever existed that will show any HTML element with a closing slash in it. You won't even be able to find any example whatsoever, anywhere, from the W3C or WHATWG showing a closing slash in the specification. And if you want to point to void elements (why oh why do people do that?), the specification is even more adamant: the closing slash can be used but it has no meaning, does nothing, and browsers are instructed to ignore it. So what is the point of using a meaningless, unused, ignored closing slash?!
I know you aren’t asking me, but I did it for the reasons in the article. First class typescript support and the other things I outlined. Haven’t found another editor that comes close in those areas. And most of the things are built in so I only have to add a handful of plugins!
Define "slow", what is slow? What sort of specs are you talking about? 
... what are you using to write code on, a potato? 
although i've never tried to write a routine that would do this, it doesn't seem like it would be anywhere near of that complex a problem, that such a complex library would be necessary to perform. Am I just not familiar enough with the domain of the problem? 
how is python more friendly :S
I just had to teach a developer what "copy recursively" means. 
This isn't really an intro to FP, more an intro to native Array methods. I'm always confused by these FP posts that don't talk about the basic building blocks of FP: composition, partial application, and currying.
.
Excellent point. I had not thought about it from that perspective.
I'm in a TypeScript phase, so, TypeScript &amp; tslint (with [tslint-microsoft-contrib](https://github.com/Microsoft/tslint-microsoft-contrib)), gulp, webpack(&amp; dev-server), awesome-typescript-loader, jasmine, karma, karma-webpack, babel. TS compiles to es6/7, then babel compiles to es5. Babel is adding support for [stripping types pretty soon as well](https://babeljs.io/blog/2017/09/12/planning-for-7.0) as a preset, so ts-loaders may be unnecessary. If you have to ask why I use babel with TS instead of just TS, it's because the two packages export things differently and Babel has better handling for default exports, although I think it's a problem they've caused...
For me, the clinchers over Atom were speed and stability, and built in Git support. 
First off, not a complex library. Clocks in under 200 sloc (not including tests). Second, if you haven't tried to write a routine for this, you probably aren't familiar with problem area, or at least not familiar with the level of abstraction provided by CsvBuilder. If you are truly interested in determining if it's "library" worthy, check out the repo. Obviously, I thought it was!
It's 2017 not 1977. Vim is an anachronism that has no place and offers nothing except familiarity and a false sense of elite superiority.
&gt; Really, "/thread"? what does it mean? :-/
of course he codes blindly in assembly, but only when the stars are right and the squirrels sing
i've been using ES6 for a while w/ no clue about `new Map()` and `new Set()`. looks useful for creating an object to then pass to a function that saves to my DB using Knex. 
Yay! Sweet! Thanks.
I made [a benchmarker for Node](https://www.npmjs.com/package/whats-the-damage)... other benchmarkers measure the time it takes to complete, but this one monitors memory usage and CPU too, so you can benchmark the overall efficiency
1. For example Nylas Mail is the slowest one,. It does not repond quickly on click, it feels laggy on scroll. 2. I switched from VIM to VS Code a couple of months ago to benefit from the better ES6 support it has and it was a good experience overall except when I needed the text editor to respond quickly ( at the speed of VIM or Sublime text ). Sometimes I need to wait for couple of the seconds for it to save, open or close a file. For now I moved back to VIM and managed to get neerly the same support/plugins ( prettifier, eslint, jsx ... ). 
This is not what I've asked for, I wanted a script that can validate HTML for an internal system of mine in which the users type HTML.
But he's correct. Netflix has a ton of metadata, metrics, data collection. Streaming video is a side effect and the easiest part of the whole platform. Do yes the API matters a lot.
Thanks! This seems perfect for my purposes!
Where is the HTML to be validated? On disk? In a database field? In a form being typed live and only there as part of a &lt;textarea&gt;? Is it a full HTML document or only a subsection with no &lt;head&gt;, &lt;body&gt; etc? **EDIT**: this is the first time we've heard that the HTML comes from third parties.
Didn't write it. Just found it helpful.
It means "this was the absolute answer, discussion over". Sometimes used seriously, sometimes as a joke.
Its perfectly fine, but if you write real-world code like that you're bound to butt heads with automatic semicolon insertion at some stage. Your indentation is great, albeit inconsistent between server/client. #theimportantthings
.Sort() isn't really functional as it is impure and mutates the original array.
Maybe I phrased my question wrong. The HTML comes from a third party, and should be validated on submit or during live typing. It's partial HTML (meaning no &lt;head&gt;,&lt;body&gt;,&lt;script&gt; etc.)
That would call the callback instantly and supply the return value to `nextTick`.
 var $ = function(){ this.someMethod = function (element,callback){ // do something with the element you passed it // then use the function you passed into it callback(element); } } This is kind of generally how things are built with this callback heavy architecture.
 $.someMethod(document.getElementById("test"),function(element){ // do something once the proper element is targetted }) This is how you'd use something like that
* TypeScript + TSLint + TSDocs. * Webpack to bundle ES5 generated resources from tsc. * mocha + chai + karma for testing. * prettier to avoid having to think about formatting.
Just use CommonJS. script tags are rare, AMD is dead. TC39 modules will be popular sometime, but not for for a while yet.
I don't think Spotify uses Electron, however, I know that they have a custom "electron" like framework.
"Slack already had a great web app," It is the biggest pig of a web app I've ever witnessed. Your arguments seem to rely on popularity more than anything else.
as far as i know spotify based on chrome embeded framework
VS Code !== Visual Studio
Why is this downvoted? I think what he meant to say was that you don't need to introduce something like Redux or MobX in a simple React app unless you have deep hierarchy of components.
it very much depends on the project and it's audience. if you build something for tech-savy users, you can expect them to have current browsers; if you don't, you will have to support older ones as well. 
"VS Code is currently one of the most popular text editors, surpassing much more performant Sublime Text." With a link that show the opposite. - Sublime Text 31% ... - VS Code : 7.2% How can we take this article seriously if the author mix up VS and VS Code ? :s
&gt; There is nothing in any specification for HTML that has ever existed that will show any HTML element with a closing slash in it. That isn't correct. This is addressed in the specification, but it isn't mandated. You even seem to point this out yourself without clarity. I urge you to read the specification again. Your contention that a more precise syntax is wrong for merely being optional is illogical. &gt; So what is the point of using a meaningless, unused, ignored closing slash?! To achieve strict validation against one, of many, points. I am unsure sure why this is an issue worthy of emotional investment for you since the advise is neither harmful, inappropriate, nor inaccurate.
Found [nedb](https://github.com/louischatriot/nedb), [lokijs](https://github.com/techfort/LokiJS), [gun](https://github.com/amark/gun) Created [undb](https://github.com/laggingreflex/undb) - Simple JSON in-memory auto-persistent database for server and client
Often quicker than text editor or ide tho. I it often
Crap. Confirmation bias. Misread it when the data initially came out and again today :( I'll update the article. Edit: Thank you for pointing it out. %s/selection/confirmation
Popularity, yes, 100%.
Great research, although I wish they'd tested plain [glamor](https://github.com/threepointone/glamor) as well.
Let me guess you also write Java right?
Very nice!
As far as backwards compatibility is concerned, for me the problem child is always Internet Explorer. Chrome and Firefox users tend to be up to date because of those browser's update functions. You can check [CanIUse](https://caniuse.com/) and the Kangax compatibility tables (if using ES2015+ features) to see which browsers support which features... But it almost always boils down to the same thing: do you want to support IE11 or lower or not? One thing to keep in mind... broken sites make for unhappy users and many broken sites make users conclude their browser sucks (which it does) and upgrade to a better one... So if you go out of your way to provide backwards compatibility you may end up making your life harder by not giving these users a reason to upgrade.
It seems strange to discuss callback scheduling without any mention of promises. If I recall correctly, if you had `Promise.resolve().then(foo)`, then `foo` would be called after the current block of execution, but before returning to the event loop.
Hi /u/BeYourself2017, the example you provided is correct. Backslash is used as an escape character in borh JavaScript and JSON, and therefore, passing a string with only one backslash will be parsed by your script and split out as a newline character symbol, which JSON cannot handle encoding.
That's fantastic! Thanks for your work. Would love to see it compared to vanilla js and "just plain css" as a baseline. 
Js is ~35 times faster than python, but 2 or 3 times slower than say Java. So language speed seems to not be the problem. Could have something to do with IO to your gpu or lack thereof for the rendering of html elements? Perhaps Ubuntu's native browser is sluggish? Atom is kinda slow in general. Vscode should run fine, though.
The Next article in the series. https://medium.com/@neelbommisetty/creation-observables-rxjs-creation-operators-f9d1f827c60c
Great people are looking more into this! I’m definitely interested in how you interpolate JS into your CSS. I’ll throw my version in which does React web and React Native if anybody is interested! https://github.com/jacobp100/cssta
I don't think they were talking specifically about a state manager, op was just generally talking about a framework, i.e. Angular or react (which would be pretty useful)
`foo` would be placed as a Promise Job in the micro-task queue, processed after the `I/O callback` phase of the event loop (which I assume we're in) and before the `process.nextTick` queue, which occurs before the event loop ticks to `the idle, prepare` phase. Important point is, any callback that occurs in response to a promise resolution (ie any callback inside .then()) becomes a Promise Job. Assuming the use of native promises. Edited some terms I mixed up.
Yeah, those are not big changes... not even changes worth making a video for.
Or: Git rebase considered harmful.
How does it handle constructor parameters that aren't identical between super/mix1/mix2? Can it handle mixing class + class like function, class + object, class like function + object? The same as above but where es6 extends fails?
BS! YOU find it. You can't. You won't. It's impossible. You will fail! You and your posts are so full of reddit shit your eyes are brown.
You're not going to get upvotes if you don't use the correct in-group vocabulary, people. Your domain extension should be .io, too. How else will we know your site is techie and cool?
Bitter Typescript-hipster alert!
For your edification, [the HTML5 spec](https://www.w3.org/TR/html52/semantics-embedded-content.html#the-img-element) says nothing about a closing slash for `&lt;img&gt;` and does not show any examples of using a closing slash. Nor does it show it for `&lt;input&gt;`. So where are you getting your information from?
yup, you are right. My use case is different from yours. My problem with promises is that they are invoked only once and when ever you have multiple moving parts in an application making their own async requests, it becomes quite cumbersome if you want to know the combined status of your application. 
jabbascrip
Love your graphics, though you forgot Olive Oil! Have you thought about writing it in TypeScript or FlowType or at least provide a type definition library for it? Also here's a read you might find interesting https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#support-for-mix-in-classes
At my last job, I was a Node developer. I had never developed in Node, and I was the only Javascript developer, so I had to teach myself. This article would have come in VERY handy about 8 months ago. Absolutely great write-up! I also had very little understanding of the event queue, because the Node docs are not very user-friendly unless you're already pretty knowledgeable. 
[removed]
Yeah, I also wish they added [react-jss](https://github.com/cssinjs/react-jss).
you're making no sense? 
That's some nice hair
In my case it was a joke and over 73 people are too uptight to take it lightheartedly. I like VIM, others don't. Clearly the others shit their pants over it. I spend most my time SSH'ed into servers, its very useful for me to know. I cannot use VS Code/Atom/etc when SSHed into a server. 
various things are ambiguous and you can't know if it was intended to execute in CJS/Script/Module grammars: import('polyfills').then(() =&gt; import('app').then( this )); Parses in all the grammars for example but has different values of `this`. This example is contrived, but in general this shows uses where you simply cannot tell the intent. TC39 over the last year has had multiple proposals for a pragma like `"use module"` and ways to remove the ambiguity in the grammars, but all were unable to move forward.
Uhm first of all I'm under the age of 30. Second of all I spend most my time SSH'd into servers. It's really useful for me, but thanks for elevating your own opinion and discounting mine. I'm just as fast in VIM as any other editor and I NEVER have any problem with VIM. Whereas Atom for example has known issues properly keeping the setting for freaking soft tabs. Are you so insecure you couldn't tell that my original comment was lighthearted? Jesus man...
I've never understood this myself. I've been doing this a long time and never used a closing slash there but, recently, it seems its more prevalent. In the past, you'd see people putting in there with the purported reason of "in case I want to use XHTML" which is as ridiculous a reason to insert extra characters if I ever heard one. 
Thank you!
I'd say look into Vue.
So is the post’s diagram incomplete then? Or is the micro-job queue part of the internal use idle/whatever queue in the diagram?
It is as far as I'm aware, basically with the nextTick queue in the centre should also be a micro-task queue, indicating both get processed at the end of the `timers`, `IO events`, `check (setImmediate)` and `close handlers` phases. If you want a really good series on the event loop, this was the best I found: [Event Loop and the Big Picture by Deepal Jayasekara](https://jsblog.insiderattack.net/event-loop-and-the-big-picture-nodejs-event-loop-part-1-1cb67a182810) It also has this handy depiction, but phases used internally by node (`poll`, `idle / prepare`) are omitted : https://cdn-images-1.medium.com/max/1000/1*aU5dr98pxTsZ4AMfnA6lNA.png 
I'm sure this already exists. Typeinstaller or something 
Thanks for the suggestion. Vue looks quite similar from my first impression. I still wonder why Ractive remains much less popular, though.
How would it be called instantly? From my understanding of the docs [here](https://nodejs.org/api/process.html#process_process_nexttick_callback_args): &gt; Once the current turn of the event loop turn runs to completion, all callbacks currently in the next tick queue will be called. That tell me when the loop comes back around _then_ the `callback` would be called. The way it's coded now, it would call it immediately?
Hi /u/IslandTropical, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
If you remember the name feel free to post it — before I built TypeSync I looked for something similar so I wouldn't have to. Additionally, TypeSync uses the DefinitelyTyped registry which is kept up-to-date by a Microsoft bot, so it won't try to add typings for packages that don't have any available.
Still an easy fix. It's only a matter of moving the backdrop filter line over to `.subscribe-overlay:target`. &gt; the whole thing should be composited using its opacity. The spec doesn't seem to be clear on that. Also, the first paragraph on that MDN page mentioned something similar: *Because [the backdrop-filter CSS property] applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent.* Also², there is a separate filter for opacity: https://drafts.fxtf.org/filter-effects-1/#funcdef-filter-opacity So, it would make sense if the element's opacity doesn't affect the opacity of the backdrop filter. Well, the spec is still a draft. There are of course some imperfections.
The ideal algorithm is: if the percentage of paying users that require polyfills is higher than the the percentage of paying users you lose by slowing down your page load due to the polyfills, then you should add the polyfills. Realistically, you won't have the data to know how many users you're losing due to page slowness, and there's also a good chance that you haven't done absolutely all you could do to optimize page speed to begin with, so I'd recommend just putting the polyfills in and revisit the matter when js bundle size becomes a high priority in the list of perf-related todos. With that said, even without exact data, you can still decide to drop support for really old browsers (e.g. IE6) if the cost of testing it surpasses the amount of money you get out of it. You can also decide to drop support for newer browses (e.g. IE10) if higher-ups are ok with it, but make the decision knowing that you risk making your company look incompetent to a user of the not-that-old-but-unsupported-browser.
True. Sorry folks. I'll register a new domain, move the site and repost the link in a more proper fashion.
What are "asynchronous stuffs"? Is it just putting a value into a variable? I thought I was up on JavaScript terminology...
&gt; Additionally, TypeSync uses the DefinitelyTyped registry which is kept up-to-date by a Microsoft bot, so it won't try to add typings for packages that don't have any available. Good thinking, at least you won't ddos npm this way
Ubuntu is generally slow and buggy, try opensuse instead that said though you won't get the speed of vim or sublime from Vs code, be reasonable
Exactly — all it does is download a compressed JSON file and checks your installed packages against the available typings, then adds missing typings packages to your `devDependencies`. I only hit the npm API to figure out the latest version of the typings packages being added.
it has like 5k+ stars on github and frequent pull requests accepted from multiple users. So, it does look fairly popular. Just because it's not recommended on Reddit doesn't mean it's unpopular or not good -- Reddit can be an echo chamber at times.
Nice!
I'll trade clean histories to bisect. I've needed git bisect once in the years of using Git. Seems like OP uses it a lot.
&gt; What will happen if I remove them? Why not see for yourself?
Hi /u/reeferd, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Even if this already exists, I've never seen it. This is amazing man, good thinking!
Just a minor remark, and I don't know how common this is in the nodejs world nowadays, but it can be helpful to follow REST (or rather, atom publishing) conventions when naming URLs of an API, because it avoids a lot of uncertanities. The convention says, use the plural name of the resource as collection URL, e.g. "/users", and for adding new elements, POST to that URL. In your example, that would simply mean to replace "/users/add" with "/users". The convention also has rules for detail pages (GET /users/{id}), changing content (PATCH or PUT /users/{id}) etc., but you only need to implement whatever you want to support.
VSC is for lightweights
Thank, really appreciate that! Wouldn't be possible without the great work of the DefinitelyTyped team, and Microsoft for making these resources easily available.
My guess is so that it's treated like a value instead of a code block. You do the same thing if you have an arrow function that returns an object instead of having a standard function body.
Asynchronicity refers to deferring a task to a later time, most commonly when waiting to execute code after getting a response from another server.
I know someone who uses it at work and wishes they had something like Vue or react. Take that anecdotal datum with all the grains of salt you need.
The book excerpt there doesn't say, but I assume you're putting this JSON in your code in a literal string? (that's the only case I can imagine that you need to do this) E.x.: ``` JSON.parse('{"a": "hello\\nworld"}') ``` You need to escape the backlash because, in this case you aren't writing literal JSON, you're writing a Javascript string that contains literal JSON. Because of that, Javascript will try to evaluate any escape sequences in your string before any JSON parsing takes place. If you want those escape sequences to get passed on to the JSON parser, you have to escape the escape sequences.
If you don't wrap it in parentheses, here's what happens {a: 1} The code above is not an object. It's a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) (similar to the curlies in `if (foo) {}`). The `a:` in the block statement is not a object key. It's a [label statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) (as in `foo: while (true) break foo`). If you want your code to start with a object expression statement instead of a block statement, you need to wrap the object expression with a parenthesized expression. Thus, the following is an object: ({a: 1}) `eval` is a weird corner of js. It implicitly returns the value of the last statement. When the last statement is a block statement, the actual last statement is an implicit return statement with a value of `undefined`. That's for the same reason as an `if` statement. Think about it this way: calling `() =&gt; {if (foo) {}}` returns `undefined`. So it stands to reason that `() =&gt; {{}}` also returns `undefined` because both are not expressions, and thus cannot be the argument of a return statement. However, `({a: 1})` is an expression. Calling `() =&gt; ({a: 1})` returns an object. Same thing with eval. Now that we know the difference, we also know that `{"a": "b"}` is invalid js because the curlies here are a block statement, and `"a"` is not a valid label. Therefore, this throws a SyntaxError.
Really neat! Would be cool if you could take a more declarative approach to enharmonics, e.g. by providing a key and inferring the appropriate sharp and flat symbols, rather than imperatively telling it "use #"/"use b".
cool
I specifically mentioned state. OP said he didn’t want to use react / angular, so Idk I guess his UI is probably very simple. It is possible to develop apps without a framework. Depending on project size and who’s developing, a framework can actually cost you time. None of this is controversial. 
What about Styletron?
This is excellent! Can't wait to try it out.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [Coding News Summary — React 16, major language releases, Chrome 61, and Yarn](https://np.reddit.com/r/webdev/comments/73u15i/coding_news_summary_react_16_major_language/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Correct, it takes a callback function. But what you are doing is calling the callback function right away and then supplying the return value to `nextTick`. What you actually want is: process.nextTick(() =&gt; callback(null, {})) Or process.nextTick(callback.bind(callback, null, {}))
I was kind of thinking about this the other day. Like if I was going to teach someone js now is there even a reason to teach things like var or function? I guess a problem with this would be when they want to read other's code, but by that point hopefully they would be good enough to figure out the old stuff.
Well function definitely. I always write functions I bind to a variable as a full function definition.
/r/learnjavascript Probably doesn't matter too much though because so many people post their code here asking for help.
**Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year!** \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Discreet Mathematics (Logic, AND, OR, XOR, etc.). 1st year university. [Great Reference](https://www.amazon.ca/Logical-Approach-Discrete-Math/dp/0387941150) though I am sure there are others as good. Algorithms (Big-O) and Data Structures (Trees). 2nd year university. Just saying that these topics were taught to me in school.. I didn't have a grasp on the fundamentals until I went through these classes. I went to college and learned practical software development using a variety of languages but I only learned the fundamental understanding of how and why after going to uni. 
I don't believe there is anyway to do that built in though you could just write a quick function to do it for you. e.g. Object.prototype.splitByKeys = function(...keyArrays) { const baseObj = this; return keyArrays.reduce(function(objs, keyArr) { objs.push(keyArr.reduce(function(obj, key) { obj[key] = baseObj[key]; return obj; }, {})); return objs; }, []);
I know what asynchronicity is is, I just want to know what stuffs are.
&gt; All of which are usually skipped in modern courses They actually aren't, in fact most of those things you mentioned are still prevalent in most comp-sci courses. Programming courses != Comp-sci courses For Resources you might wanna take a look at the following repo : https://github.com/mr-mig/every-programmer-should-know
Your use of an outdated version of WordPress worries me.
Again that shit site with blur? How to remove it? Probably there is some popup that shows up? But is block by my 3 blockes plus disabled "popups" from the browser? :D
If item is an object you can just say item.Color = "3";
I dont realy get how u wanted to split that object, but you can do something like that: const obj = {x: 1, y: 2, z: 3, a: 4}; const [obj1, obj2, obj3, obj4] = Object .keys(obj) .map(key =&gt; ({ [key]: obj[key] })); console.log(obj1, obj2, obj3, obj4); it prints: {x: 1} {y: 2} {z: 3} {a: 4} same result but with `Object.entries()`: const [obj1, obj2, obj3, obj4] = Object .entries(obj) .map(([key, value]) =&gt; ({[key]: value})); Edit: well, you could use that hacky way, but it generates linter warnings about unused variables: const obj = {x: 1, y: 2, z: 3, a: 4}; let x, y, z, a, obj1, obj2, obj3; ({y, z, ...obj1} = obj); ({x, z, a, ...obj2} = obj); ({x, y, a, ...obj3} = obj); console.log(obj1, obj2, obj3); output: {x: 1, a: 4} {y: 2} {z: 3} 
Please, don't actually use `eval` to parse JSON in your code. It was never meant to parse JSON (as demonstrated by the other comments), and it can easily become a huge security leak if you're not careful with what data you're parsing. Use the standard `JSON.parse` function instead. It's available in all browsers that are (still) officially supported by their vendor. There should be no reason why you can't use it.
You're actually wrong as well. The difference is that `getOwnPropertyNames` will return own enumerable _and non-enumerable_ string property keys, wheras `keys` only returns enumerable own keys. It will not return any Symbols, that's what `getOwnPropertySymbols` is for.
How embarrassing, thanks :-D
"Stuffs" isn't JavaScript terminology, it's a slang form of "stuff" for multiple. You could replace "stuffs" with "things" or "programs" to make the opening "Few days back, I was guiding some new node.js developers on making asynchronous programs."
Oh, so, "stuff."
https://developers.google.com/web/fundamentals/primers/promises Google has a number of beginner-oriented tutorials if that one isn't to your liking.
 let obj = {x: 1, y: 2, z: 3, a: 4}; let {x, y, z, a} = obj; let o1 = {x}; let o2 = {y}; let o3 = {z, a}; console.log(o1, o2, o3); // {x: 1} {y: 2} {z: 3, a: 4} Not really much of an improvement over just writing {x: obj.x} etc, though.
So this is awesome but I gotta ask I thought most libraries at this point were including the typing files with the repo now. is that not always the case?
gotta do what you gotta do. I just feel like based on your description it was probably a software issue rather than a connection issue. I would feel better about this solution if there was a modal displayed saying "connection failed, retrying now" with an option to cancel.
&gt;any callback that occurs in response to a promise resolution (...) becomes a Promise Job Is it safe to assume this also applies to resuming from an 'await' in an async function? That is, the function will continue after the await at the same spot in the event loop that other promise resolution code is executed? Also worth describing is the order in which promise resolution functions are invoked. AFAIK this is reliably the same order as they are added, but I don't know if this is guaranteed.
Ractive has been around longer than React, so I think it's fairly stable, which is a plus. The major design difference between Ractive and React is that React embraces naked JS (i.e. you literally write `.map` to loop over things), whereas Ractive abstracts over the render cycle with a larger templating language, similar to Angular and Vue. Personally, I'm not a big fan of HTML-first templating approach that Angular/Vue/Ractive take because, for example, complex control flow (think dt/dd or colpans) tends to get awkward. Also, the abstractions aren't always good (looking at you, two way bindings). HTML-first libraries also tend to be bigger in size. For example, a minimalist virtual dom like hyperapp or preact clock at like 1-4kb, vue core (virtual dom + directives) is at ~25 kb, and ractive is at 60+ kb. React is mostly big due to the backwards compat requirements at Facebook, but we've been seeing significant size decreases over the last few releases thanks to various deprecations (e.g. mixins). This type of size shavings is really really really hard to do for a library with large API surface like angular or ractive. Also, obviously, being a less popular virtual dom library, Ractive has a smaller ecosystem. Re: Vue popularity, I'd guess that Vue is more popular than Ractive thanks to brand development (e.g. there's a Vue CLI, Vue SSR, Vuex, etc) and that appeals to both people coming from angular and from react, where just about every library is angular-this or react-that. The author of Ractive is arguably as prolific as an OSS developer can be, but most of his work is independently branded (Rollup, Buble, Butternut, etc)
Awesome - any reason why it says `@typings` instead of `@types` in the console?
(Almost) Always prefer composition over inheritance 
http://andyshora.com/promises-angularjs-explained-as-cartoon.html 
Thanks, this is the kind of answer I'm looking for. Brand development can definitely be a deciding factor in a framework's popularity.
I've seen a few examples of promises being compared to ordering food. When you go to order food, you don't get your food immediately. You'll usually get a receipt first, and then you wait for people to make your food. After awhile, the restaurant will say either "Here is your food!" and give you the food, or they will say "oh, something went wrong, what would you like instead?" So in code, if ordering food takes time (or is what we call "asynchronous"), then the code might look like... orderFood() .then((food) =&gt; eatFood(food)) .catch((error) =&gt; orderOtherItem(error.otherItems) In the metaphor, the receipt you get is the "promise". If the restaurant "resolves"/ fulfills your order, you will "then" eat the food. If the restaurant "rejects" the promise, you catch it by doing something else, like ordering another item. So a Promise can be used for things that you can't get immediately, lets you get the results of something as soon as it is "resolved", which you can "then" do something with as soon as it is ready, or "catch" if something goes wrong.
you don't need to create a new promise when foo is already a promise. you can just do something like this... function multiply(n) { return foo.then(data =&gt; data.map(item =&gt; item * n)) } any rejections of the original foo promise will get caught in the catch section you have when calling the multiply function
That is pretty nice and highly readable. But what if want to do the same thing for an "options" object which has multiple properties some optional and some mandatory? 
Understood. But what if, say, the multiply is a method of an object and multiply has to mutate some property on the object (itself; this) for example, if on above line 4 there was: this.dataLength = data.length; In that case it would be a mandatory to wrap a new Promise in order to preserve the functionality. tl;dr, If I had to create a new promise, would this be a bad pattern or is there a better one?
To understand promises you need to understand the nature of the JS runtime first (i.e. it's synchronous by default). Once you know that you then need to understand callbacks and callback hell : http://callbackhell.com/ &gt; Instead of immediately returning some result like most functions, functions that use callbacks take some time to produce a result. The word 'asynchronous', aka 'async' just means 'takes some time' or 'happens in the future, not right now'. Ok so callbacks are asynchronous, what about promises? &gt; **Promises are a way to write async code that still appears as though it is executing in a top-down way, and handles more types of errors due to encouraged use of try/catch style error handling.** Yep that's about it, promises are designed to replace callbacks. I recommend the following FunFunFunction videos as reference material for some code examples in the following order: - [Promises - Part 8 of Functional Programming in JavaScript - YouTube](https://www.youtube.com/watch?v=2d7s3spWAzo) - [Error handling Promises in JavaScript - Fun Fun Function - YouTube](https://www.youtube.com/watch?v=f8IgdnYIwOU) - [Generators in JavaScript - What, Why and How - FunFunFunction #34 - YouTube](https://www.youtube.com/watch?v=ategZqxHkz4) - [async / await in JavaScript - What, Why and How - Fun Fun Function - YouTube](https://www.youtube.com/watch?v=568g8hxJJp4) 
I wouldn't say it's bad, it's probably fine if you really want to do it. It just sounds unnecessary, at least in this contrived example
Javascript: Understanding The Weird Parts on Udemy
I’ll have to check out the talk. I would expect that this information would all be derived from the implementation of ECMAScript using libuv, so the origin information would be [http://docs.libuv.org/en/v1.x/design.html#the-io-loop](the libuv docs).
Not replace per se. Wrap or make "easier" to use. Callbacks are fundamental and promises wouldn't make sense without them. 
Hi guys sorry for the late responses... work intervened.. About constructor parameters... What it does is create a chain of classes in the order you passed params to mix.. so in effect mix(A, B, C, D) is similar to class A {}; class B extends A {}; class C extends B {}; class D extends C{}; So normal rules for constructors (and indeed all overrides) apply. Thanks for the comment about the graphics! I can't take credit though :) I thought about 'classes on steroids' and an image of Popeye came to mind :) About preferring composition... I'd say that with multiple inheritance you get the best of both worlds. Composing classes from multiple other classes. ES6 has some great new syntax that you can benefit from when you use classes. 
Ahhh I see now. Thanks!😃
Wouldn't it have made more sense to just use curl in a cron job?
For what? Auditing data? There the point was to make it easy for humans to look at it and examine it, whenever they felt like it.
Nice analogy, although I'd be pissed if I was notified of a problem with the order asynchronously lol
I dunno es6 modules are already pretty popular, they just have to be transpiled for browsers
Even then you won’t need to create your own promise. Just do the work you care about in a `then` of the promise that already exists.
&gt; like a boss It's been eight years. Can we *please* retire this?
i'd probably merge the second tier contents screens (intro, basics, advanced, examples, api refernces) up into the main readme file. That way you're not dropping down two levels to reach the content.
an easy way to look at it is that a throttle is a queue of rapidly-fired events which processes each item every X ms. a debounce is an X ms timeout from the prior attempted function invocation. every subsequent invocation resets this timeout unless it expires and the function is executed. throttle: z-z-z-z-z -&gt; z-----z----z-----z-----z debounce (trailing edge / lazy): z-z-z-z-z -&gt; -----z debounce (leading edge / eager): z-z-z-z-z -&gt; z-----
 function require(n) {throw new Error(`${n} is required`)} function foo({optional, required = require('required')} = {}) {}
Should add a notice after running to remind the user to npm install or npm update. Bit more friendly
Most libs are not including typing files.
Who are you monster still using eval 
Web browser uses the keyboard arrow keys for scrolling the page, not navigating links or elements on the page. If you want to use arrow keys for something else, you'll have to listen for `keydown` events and perform the required task. The `keydown` event handler should check the key code first, before doing anything else. see: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
Seriously? It is all over the spec. I promise they aren't trying to hide it from you and that document is written at a 9th grade level. * 1.6 - https://www.w3.org/TR/html52/introduction.html#html-vs-xhtml * 1.10.3, Errors that involve areas that affect authors migrating to and from XHTML - https://www.w3.org/TR/html52/introduction.html#restrictions-on-content-models-and-on-attribute-values * 2.1 - https://www.w3.org/TR/html52/infrastructure.html#infrastructure-terminology So those above define the terms and relationships between HTML and XML. Distinctions for XML are spelled out in nearly every chapter after with Chapter 9 dedicated to nuances of XML syntax. The most important part of this whole conversation is directly specified at the bottom of 1.6: &gt; The DOM, the HTML syntax, and the XHTML syntax cannot all represent the same content. **For example, namespaces cannot be represented using the HTML syntax, but they are supported in the DOM and in the XHTML syntax.** Similarly, documents that use the noscript feature can be represented using the HTML syntax, but cannot be represented with the DOM or in the XHTML syntax. Comments that contain the string "--&gt;" can only be represented in the DOM, not in the HTML and XHTML syntaxes. Everything in XML syntax is magically compatible to HTML except namespaces.
https://www.reddit.com/r/javascript/comments/73ki1w/html_linter_script/dntpzf9/ Stop crying. I gave you the answer with this link.
I've actually been trying to solve the same problem for a chordpro parser I've been writing for a while. It's easy if you know the key, but I still haven't sorted out guessing the key from the chords in the song... Seems to have too much ambiguity... Then,of course, there are edge cases like songs that change key half way through
to clarify what /u/Meefims already pointed out, in that case you'd do this: function multiply(n) { return foo.then(data =&gt; { this.dataLength = data.length return data.map(item =&gt; item * n) ) } 
This was the first article I've seen that seemed to demonstrate why advocating for 1990s web technology isn't the answer for accessibility, nor is ARIA for that matter, honestly I didn't look twice at ARIA. I've no problem with accessibility, but like it makes life easier on the target users, it should be easy to use by developers as well if one expects it to become standard, not heavy handed ivory tower bloat.
yea but what about the css query logic can u elaborate on the element part
[You Don't Know JS](https://github.com/getify/You-Dont-Know-JS)
Is this close to a real example? I can't see a reason why a function like `multiply` or anything seemingly sync, would have a hardcoded external reference, particularly one that is a promise. I think posting a more realistic example would help a lot here
Haha when I got the notification I thought you were being mean then I saw it was a link to a book. Thanks a lot! Will deff check that out
In this case it's probably better to use the two-argument form of `then`.
Try using: $('#button')[0].click(); IIRC jQuery will just attempt to run events that have been registered through that instance of jQuery, and not fire a native dom event. Calling .click() on the native dom element should work in Chrome at least and possibly other browsers. 
That’s already in the readme under Usage. 😀 
Can’t believe I didn’t catch that, thanks!
Hi /u/BeYourself2017, For javascript help, please visit /r/LearnJavascript. Thank you!
practical javascript on watchandcode.com, it might start out with things that you already know, but all of the lessons build on each other in a deliberate order and towards the end it explains how to do pretty much exactly what you're asking. 
 var $ = function(element){ if (element) { this.element = document.querySelector(element); this.element.addEventHandler("mouseover", this.hover) } this.hover= function(callback){ return callback(this.element); } } // invoked as so $("testElement").hover(function(e){ // do stuff });
Yes. If you have need to deal with the parameters from `new Promise` and you already have a promise (i.e., you can call `.then` or `.catch` on something), it seems you've done something wrong. You don't need to wrap `new Promise` if you already have a promise. Only use `new Promise` if you're wrapping something that isn't already a promise, like a callback. Foo isn't defined in your example, but the only case I can see for using `new Promise` would be if it was a node-style callback, e.g.: function multiply (x) { return new Promise((resolve, reject) =&gt; foo((err, result) =&gt; { if (err) { return reject(err) } resolve(result.map(item =&gt; item * x)) })) }
I am having a hard time imagining why you would need to wrap a promised function in another Promise. Assuming you actually have a good use case for this extremely unusual construction, `.catch(reject)` seems fine to me.
That sounds an awful lot like spam mitigation from twitch. You can try dispatching a mouse event on the textarea, see if that does it?
Ah good catch! I will update those pastes momentarily. Alternatively you could put a `.pluck(‘path’)` in the main pipeline before calling that browserify function so that the entry arg would refer to the path string. However, I think your solution is far better since both the input &amp; output are the same type: a vinyl file. It felt worth mentioning to demonstrate how data can change within a pipeline without modifying core functions such as the browserify function we created such as in the case of a third party function we can’t change. 
The `#` at the start signifies an id. I just checked Twitch and the chat box and chat button do not have ids of `textarea` and `button`. You need to update your selectors to actually point to the correct elements. Also, there's no need for jQuery. document.querySelector('textarea').value = 'text here'; document.querySelector('div.chat-buttons-container &gt; button').click();
Mozilla Developer Network has a lot of good articles along with APIs
A promise describes some value that will show up in the future. JS isn't a blocking language, typically. Many times you'll see the pattern "ask this thing a question and when it has the answer my code resumes along a different track" This started with event handlers in front-end world many moons ago, but I don't think many people realized it at the time. You have a button on a page, click that button and an event fires. Different tracks of code. You couldn't attach the event handler and in the next line of code get results from the form back immediately - you need to wait for the user to click the button. Promises started out in jQuery a long while back as "deferred values". They had this slick method called `ajax` which would wrap an `XMLHttpRequest` for you. XHR would need an event attached to it, `onreadystatechange` - this would be fired a few times, eventually with the data from the server. It was kind of klunky back in the day and jQuery, through their idea of deferred values, gave it a clean API to work with. There's also differences with promises as we understand it and the jQuery variant. They called the functions `success` and `error` initially. You also couldn't chain values along like we do promises. -- you can return a new value from a promise to do subsequent processing... I think in jQuery you get back jQuery for chaining. They also provided a `Deferred` class for use outside of `$.ajax`. This *idea* behind promises were later standardized as `A+ Promises` and a few libraries implemented them outside jQuery. What you really need to know about promises: * there's a value inside of it... maybe. * If you want to get the value out of it, call `then` and the parameter will be your value. * If something went wrong, you'll never get the value from `then`, but you can get the error from `catch`. * The value is always inside it. You can pass around that object wherever you like and calling `then` will still give you back that value * You can also return a new value inside the `then` callback - this can be another promise or any other value. Doing this means a new promise with a different value.
I'd suggest it's usually better the other way. Barring some pretty rare use cases, I prefer the use of .catch over a thenable's rejected handler. (rejected handler being the 2nd arg passed to .then()). With the rejected handler, you're only making sure you handle the error of specific promise/at a specific point in the thenable chain. If .catch is used instead, not only will it handle errors from the promise chain, but it'll also cover any errors that may be thrown by any resolved handlers too.
I'm not sure what exactly you mean by &gt; the function will continue after the await at the same spot in the event loop that other promise resolution code is executed? If you `await` a promise, you don't know when it will return, but the event loop wont pause until the promise does return, otherwise everything would freeze up on async tasks. Edit: Are you asking if everything subsequent to an `await`ed promise is processed as a micro-task? If so, no. A quick demo is: async function main(){ await fetch() // fetch a website or something Promise.resolve().then(() =&gt; console.log('micro-task')) console.log('not a micro-task') } ...the console will log 'not a micro-task' and then 'micro-task' (predictably). Admittedly desugaring async/await is a bit beyond my knowledge, but if I had to hazard a guess, anything occurring after `await` is not by default processed as a callback to a promise resolution. Execution of the function simply resumes in a later loop (I assume like a generator?) . Would love to have that bit clarified by someone with more knowledge though. 
Nah. Ts isn't cool
I know that, i mean in the actual output of the command
/u/MrXyfir solved your problem, but what are you using this code for? Please mind the rules of the subreddit and the twitch ToS. Since you can get people to donate money via chat commands, you should be very careful with what you do with this.
I'm not entirely sure that's accurate, only because I think libuv is a generic event loop to be used in many languages, and the rules for when callbacks (occuring in response to a promise resolution) are to be processed, are language specific. I'd imagine its specific to V8's implementation of ECMAScript (which in part uses libuv) rather than something to do with libuv itself. 
Good point!
Also about the promise job order, the [Job Queues are FIFO](https://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues )
Maybe I'm spoiled, I don't have anything less than a Core i5, except for my recently acquired personal laptop, which has a AMD A4 on it .. and even on that VS Code is pretty snappy, after the initial load time. IMO, if your developer tools aren't responsive enough, it's time to upgrade hardware if you make your living at this. 
Thanks for the suggestion, I added a note in the output and pushed an update to npm. :)
I've fixed the typo and pushed to npm — thanks again for pointing it out!
Regarding CS concepts. Rithm School has a great link that goes over majority of Data Structures and Algorithms. https://www.rithmschool.com/courses/javascript-computer-science-fundamentals For JS Fundamentals: * JS Koans: https://github.com/liammclennan/JavaScript-Koans/tree/master/topics * Eloquent JS: This is hard but fair http://eloquentjavascript.net/ I always refer back to John resig's JS Link, If you are able to understand everything here, then you have JS fundamentals down. * https://johnresig.com/apps/learn/
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [liammclennan/JavaScript-Koans/.../**topics** (master → 3e3c84c)](https://github.com/liammclennan/JavaScript-Koans/tree/3e3c84cac06dcec1d6119826d8d06ab739b4ef6a/topics) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dnu59q8.)^.
What about interop? I find the way to use JS libraries from Elm painfull.
I find Elm much more painful than Javascript, probably because I come from a OO background. Elm knowing out where errors are is certainly useful and leads to much more robust applications, however I find relying on intellisense (especially via Typescript) a much more enjoyable way to code. I find the adoration for Elms method of pointing out spelling mistakes amusing as this is such a trivial issue if you have any typing. If I know exactly what I want to do Elm is a fantastic tool, if I don't it's truly painful.
No worries, you're welcome! Glad to see the enthusiasm around the tool. :)
Me too — it's all about removing as much friction to adoption as possible, and I hope TypeSync can help with that.
I find his criticism a bit too easy and I can't really agree with him. All he does is fall into the old rhetoric of "Javascript was developed too fast", "Javascript was built to check form inputs", "No long term thought into Javascript", ... I'm sure the people on the TC39 committee will be glad to hear the expert opinion of someone deeply invested in ELM. The only real example of an issue he gives is it's weak typing, though he doesn't even consider for a second if that could be a contributor to JS's popularity. For the rest it is like he hasn't even heard of TC39 or babel with babel-preset-env. (which is now a de facto standard) He then goes on to say JS becomes a nightmare for large applications and considers Excel. Well I am pretty sure if you will look at the codebase of MS Excel you will find piles of dung. If you look at the codebase of Excel online you will probably also find piles of dung. Complex software is hard to write, it's hard to write in C++ and it's hard to write in Javascript. I am very charmed by ELM and functional programming in general, and have actually tried ELM. But I'm also sure writing Excel in ELM will be hard. I like the movement towards more functional programming in the browser, at least we're 'stuck' with the language that allows for it. We could have ended up with Actionscript, vbscript or java. Too bad some functional fundamentalists consider everything not 100% pure 'painful'. 
Oh my god, now I can finally handle individual errors!
You won't get a full stacktrace simply by using async/await (if you use real asynchronous code, using something like `() =&gt; Promise.resolve()` to simulate an async. function _will_ produce a full stacktrace, but try again with a Promise that only resolves through `setTimeout` and it won't work). The author writes &gt; Although V8 doesn’t implement this optimization yet, but I tested Chrome and node (V8), Firefox and IE Edge, and none of the produced an async. stacktrace with just async/await alone. I found a gist with an example for how to get stacktraces from asynchronous code. Disadvantage: more code. Advantage: more flexibility - you could also add relevant local variables to the output. https://gist.github.com/lll000111/3d6a53da4d53beb909189793c7631ba6 This also works with real promises (the/catch) - just add a `.catch( err =&gt; {...})` that does the same thing. The problem mentioned in the blog post does not exist in that case because at the cost of extra code you get to use the lexical scope. However, the created stacktrace will be not as nice as that created by the async/await version (see gist). So even then async/await is better (for stacktrace creation). **Of course**, this is a workaround - it would be much better if what the blog post says is actually implemented by the runtimes.
Very useful, thanks.
Thank you
Take a look at Async / Await
Great research. 
Too supercharged..
Last interview I had for a front end gig they gave me a problem about database transactions. -___-
I've been wanting to use camelCase in my cssjs code too for some time. I like react css convensions and I've used [this](https://www.npmjs.com/package/js-css-loader) for a while, and when I moved to [jss](https://github.com/cssinjs/jss) (which is like emotion) I've used react conventions in my code as well using their library `require('react/lib/CSSPropertyOperations');`. Hope it helps 
I’ve only seen this site on my tablet but the right side nav was pretty comfortable. Outside of touch screen devices I’d agree with you though!
camelCase works by default with emotion, as long as styles are inside template strings. The problem is prettier removing the camel casing.
Here's a modal implementation which uses a "template" of sorts to construct new modals on request: https://jsfiddle.net/mgp17dox/4/
most online "courses" are not really meant to teach you, it was meant to make money for the course authors. and oh, 90% of the authors can't program for shit so you get beginner materials everywhere.
For free?
Are you the food eater guy from YouTube also?
well it might not be a problem with the order itself, but one that arises during processing your order - thus asynchronous handling of food order errors makes sense.
Any source for back end job interviews? thanks
do you understand callbacks? It's essentially the same thing, just prettier. if you don't understand callbacks, then you will need to learn about asynchronous vs synchronous coding first.
Either I've had a job too long and thus not been in interviews or the people making interview questions really love to throw their CS degree around based on some of the algorithm stuff. As someone who does not have a CS degree but has worked as a web developer for about a decade now, I probably would not be able to answer some of the questions in there, especially off the top of my head in an interview situation.
I ask this every time I see one of these self-contained examples and people always tell me they'll get back to me. Many real projects need to integrate things like social login, google maps, and a variety of sdk, usually AWS. Even lower level stuff like bootstrap dropdowns, an infinite scroll plugin, masonry... Ultimately I think Elm will remain an academic thing whose good ideas will be ported to JavaScript (e.g. Redux). It will serve a purpose, even though it's unlikely to achieve widespread use in the wild.
The Twitch Beta doesn't have ids, but the normal one does, just checked. Either way, I tried using pure javascript before I posted this and it didn't work. Your script doesn't work also. The value 'text here' is added, but the 'click' is registered. document.querySelector('div.chat-buttons-container &gt; button') this selector actually finds the button, but the '.click()' doesn't do anything. EDIT: formatting
I am not trying to publish or do anything malicious, it is just something I wanted to do to pass time. Although I was just messing around and couldn't find a reason why such a simple script wasn't working, I appreciate the heads up. I mean, it should work right?! it's just simple. That's why it's bugging me. EDIT: added last line
I have tried [0] as well, but it doesn't work. Edit: yes, using chrome
No, for cheap. Currently they're 850 USD, I could give mine away for 425.
I was asked to implement some weird sorting algorithm. 
I won't spam and won't publish anything related to this. I was just messing around out of boredom and noticed that a couple of simple lines of code didn't work. I can use this code to send a comment here, but the same thing doesn't work over there: document.querySelector('#commentreply_t1_dntzize &gt; div &gt; div &gt; textarea').value = "I won't spam and won't publish anything related to this. I was just messing around out of boredom and notice that a couple of simple lines of code didn't work."; document.querySelector('#commentreply_t1_dntzize &gt; div &gt; .bottom-area &gt; div &gt; button').click() Edit: typo
Are you designating the files as JavaScript (React). Cmd+K -&gt; M -&gt; “react”
Interesting question. Not at the moment, but I will contact you later.
You understand it better when you see it. [A practical example](https://jsfiddle.net/x3ax093u/1/).
Make a sassy comment, expect sass.
I’m with you man. Part of the problem is there’s such a big range in the term “front end developer.” For example, if I make a website for an upcoming action film, with lots of animation, video, and interactivity, that’s totally different than if I make a SPA for classroom management in a school. But both would be called front end dev. I’ve taken to calling them creative web developers (as in, developers to make what ad and design people call “creative”) and web engineers respectively. 
We ran into this issue with certain cases while using `scss`. According to prettier, they've fixed the bug in question: https://github.com/prettier/prettier/issues/2860
Cracking the coding interview
May as well take a look at the front end sample here. 
I'm in a similar position. Been a front end dev in some capacity more than a decade. It always seemed more like the intersection between web development and design, and less between CS and web development. I don't understand the shift away from design, but I think it's partly so some people can feel like a more serious programmer. I had an interview test a year ago that required me to write algorithms with specific O complexities. When did that become useful in typical front end dev? Luckily I'm usually just in an architect role of some kind nowadays, but it seems like a terrible trend for the industry. I'd rather hire a designer-developer. 
thanks for pointing that out! Just updated the blog
I understand it if you are looking for a developer for a role that involves working with big data so performance from using the right algorithms and data design become a lot more important even on the front end but I still feel having the interviewee solving that kind of stuff serves as nothing more than the question maker trying to prove how clever they are. I much prefer making the applicant solve some sort of real world problem by writing a small app in a few hours or even on their own time before the interview as that says a lot more about their skill level and you have some actual code to review.
Simple guessing game vs the computer. Randomly generated int, prompt for user guess, have two counters that keep track of wins for user and computer, best of three wins. This covers a fairly decent scope of: variables, types, if/then and built in JavaScript functions. Doesn’t need to be anything complex, ease them into it, with teenagers it’s about quick gains.
Interesting, but for me this is occurring without using '&amp;-'. Only workaround so far is to manully write in the dashes....fun. 
Yeah they are designated JS(React).
Never thought 3 words would rustle so many jimmies lol
Javascript is painful?
What kind of scaling issues are you experiencing?
There are multiple ways to approach scale issues in that case. Using https://github.com/indutny/sticky-session is one of them as also remembering that node scales horizontally pretty well so you can always have multiple nodes running sockets. I wouldn't bother about this, unless you plan to scale pretty high (500k~1M sockets) right away, in that case I would think about using things like Kafka or self-managed online services (Kinesis?), though probably more instances of socket.io would suffice (but you'll have to manually deal with them I believe - see https://github.com/socketio/socket.io/issues/1853#issuecomment-74382064)
We had much fun with interns and codingame.com. I am not affiliated with them it's just a great platform and the games are fun and you can solve them in many different programming languages. So it is even an opportunity to compare languages and see what they do well and what not.
Hi /u/badass_toast, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/rocconz, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/eligloys, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/LilSnippets, For javascript help, please visit /r/LearnJavascript. Thank you!
Good approach too. Every team has a stack of weird, hard to solve requests. Just give one to an applicant. Even if it was solved a year ago, it'd at least be useful to see someone else's take. 
Build something that works before worrying about scaling. Read up on scaling strategies with socket.io if you're that concerned, so then you'll know they exist, but for the present just build something that works.
This, although it's a work in progress https://github.com/arialdomartini/Back-End-Developer-Interview-Questions
chrome also allows you to run the call again in a new tab where you can see all the pretty printed data.. how is opening a new terminal and pasting in a command better than a single right and left click?
are u sure the event is actually attached to the button and not something else.. there's a script called visualevent by Allan the guy who wrote datatables that will show you all the events registered on the page and where they're defined. you can use it to find the relevant source code that handles that button press 
I have had enough of building things that just work. I dont want to have to rewrite stuff again just because socket.io marketed themselves very well. I need the highest performance for lowest server cost so I am looking for the right library to achieve that. I dont want to rely on socket.io reconnecting for isntance when I might not be able to use it later on. 
I am not experiencing any yet but I am looking for a stable and fast solution for a real time game server that should be able to process as many simultaneous users at once. I previously used Socket.io for a game server and saw major lags with just 4-5 people. This was surely not because of socket.io itself but rather that each player was pushing his position about 20 times a second. If I remember correctly that was a big problem of socket io though, many small messages.
I am mainly wondering if socket.io is suitable for a RT game server. I know that agario was built with uWebsockets (c++) but last time I used socket.io it wasnt using uws AFAIK. I just dont want to use all of socket.io's awesome features and then have to migrate to something else because of its performance at scale. (With scale I also mean MANY messages per second)
It demonstrates that the curl request works, as a stand alone thing , so it can be scripted for more complex applications 
doesn't that pretty much limit its usefulness to shell scripting? I mean most languages have their own network APIs and not all machines have curl
&gt; if I had to hazard a guess, anything occurring after await is not by default processed as a callback to a promise resolution. Execution of the function simply resumes in a later loop (I assume like a generator?) That's the essence of my question, does the body of code after the await effectively act as a promise job, and get executed along with the rest of the promise jobs when that promise completes. I would assume yes, actually, and that it doesn't wait for the next pass of the event loop, because that would allow timer tasks and I/O tasks to run before the resumption of the await. The other nuance here is does await resumption share the job queue with the other promise completion tasks, or is there another one that runs in a different order. That is, if there are several async functions awaiting the same promise that also has other .then handlers, in what order does the code get called. (To be fair though, writing a system that relied on this ordering would be fragile at best, probably should be avoided.) 
You can look into mosca and mqtt if you want more performance. Sorry I'm on my phone, can't link you up.
&gt; "No long term thought into Javascript" Isn't ELM pretty much one person's phD thesis? 
True, but generated curl command will show which headers to set. Plus as I mentioned in the articles there are converts available online that will conver CURL command to many languages. I've used it with both Node and Python.
As someone who interviews people for JS (not necessarily frontend), I can tell you that it's not necessarily finding a solution off the bat that's important. It's more about showing your ability to figure your way through it or even partly through it. If the interviewer expects perfect solutions to these questions in 5 minutes, then it's unrealistic for a frontend job. But I too have been guilty of having questions that were just too difficult or too focused on algorithmic ability for an interview. We take those out and don't fail candidates solely based on answers to them.
missed the converter. wish I knew that existed earlier. that looks supremely useful.
If I remember correctly, there's a way to differentiate between clicks (and other events) generated via JavaScript vs those generated from an actual user action. It's likely Twitch is ignoring events generated by JavaScript to prevent spam. You might want to look into Selenium or Headless Chrome to send real user events. Edit: I think this is what they're probably checking: https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted
Sounds reasonable except, at least as far as I know, front end engineer refers more to people who build and work on frameworks and libraries, whereas developer refers to people who use these tools to build things. Correct me if I'm wrong?
Key takeaway: &gt; In general, don’t transpile code unless you absolutely need to! Stack traces, meh. 
Pretty sure async/await is ES8.
Almost everybody explains this wrong, including myself until recently, Look here ( I recommend the video, its more fun) https://blog.domenic.me/youre-missing-the-point-of-promises/ https://www.youtube.com/watch?v=hf1T_AONQJU My take is that promises are an elaborate way, maybe even confusing, to "return values" and "throw exceptions" in a language that is forced to used callbacks to handle async io and events. In other words, when you end up in a callback situation, you can no longer return values (return them to where? you dropped your callback into a black box ) and throw exceptions (who will catch them? we've already moved on.), so you have two favorite flow control tools removed from your toolbox - promises bring those back (but its not obvious) Throws from a .then callback are caught by .catch, and returns from a then callback go to the next then callback, and bonus - returning a unresolved promise from a then callback will wait for that promise to resolve before calling next then. 
Keep in mind that users travel and may still want to see USD when outside of the US. As such, I would not make this assumption based on location. I would make this a user preference with a bit of verbiage and a link near the price that says something like "It appears you're in the EU. You can change the price denomination in your user settings." 
You could use a service like [hostip](http://www.hostip.info/use.html), there's quite a few that perform geotargeting for you, then use locale functions. Otherwise just use sensible defaults, example if you're based in the US you can assume most people will use USD, and allow the user to select their preferences(possibly store them in their account info, etc.) 
Thanks. Making this a user preference makes sense.
Thanks. Making this a user preference makes sense.
Or you could even simplify it and make it a cookie or localStorage variable with a some sort of ui that represents a toggle between denominations like ( $ | € )
There is no distinction between "developer" and "engineer" in software development. There is no software engineering certification - in most of the world, anyway.
Software architects should understand algorithmic complexity. It's their job to design a system that will perform as well as possible.
This seems like a perfect solution for my setup. Ideally with an initial auto detection and then a user toggle. 
Awesome, good luck! :)
Also in case of horizontal scalling you should avoid storing state at the instance and move it to some shared storage like redis. Regarding the 3rd party services I would recommend PubNub rather Kinesis.
Felt more like micro useful links to me.
What you're wanting to do would be more easily accomplished by using [document.createElement](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement) to inject a dialog box that prompts for the input. This will also allow you to hook into the events (like typing and clicking OK) to validate the input was in the format you desire (e.g. int versus string, etc.).
I get what you're saying, but web development is simply not software. It is totally absurd to even conflate the two. No one thinks a JS app is more performant than a traditional server-side rendered app. We don't do it because it's more performant. In terms of performance, we manage perception, i.e. we consider UX. That can't be measured with an algorithm.
KISS [type=“date”](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date) [type=“time”](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time)
Is this supported cross browser?
[Fetch is one way.](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)
[No](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#Browser_compatibility) and [no](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#Browser_compatibility)
I've done something similar, I stopped working on my project once I discovered none of the search engines can index my pages.
Right, my point about algorithmic complexity includes the pieces outside of software. For example, a method that needs to communicate with a service should use transinet fault handling in the event the network is unavailable, the infrastructure is overloaded, or the service is just not responding. Considering the complexity of the fault handling is important, as is the complexity of how services are accessed. A good design of infrastructure is also important and relates to performance. Also important to note, my comment is not all-encompassing. I am not stating that architects only need to know one thing, nor am I conflating software and what goes into development. Perhaps the misunderstanding comes from specifically what architecture you are designing. It sounds like you are concerend with how a website operates to provide a good experience. I am referring to architecture in general.
I use [flatpickr](https://chmln.github.io/flatpickr/)
this is not read/get this is post/patch api call though. 
My idea is that the crawler shouldn't have WebSocket support, so will fallback over HTTP and that would work.
Fetch doesn't only allow get requets var form = new FormData(document.getElementById('login-form')); fetch("/login", { method: "POST", body: form }); https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
If a particular piece of code responds slowly because the developer doesn't understand how to properly implement a sorting/searching algorithm on an array of objects (as just one example), then that means the site doesn't respond very well and is thus slow. And performance is absolutely part of UX.
I sure hope JavaScript won’t be around forever. Programmers deserve better. https://youtu.be/99Zacm7SsWQ
Note that the "front-end" interview part is only one section of this handbook - the algorithms section is a different part. The overall handbook isn't just for front-end development. 
you could use javascript for this or you could use a print specific stylesheet that makes the textbox larger. there's a media attribute you can set on your link tags that will direct it only be used on a printed page. 
I would say the handbook in general is a pretty good start. You'll get questions about algorithms and database connections typically, as well as potential operational questions like your ability to work in Linux. 
Oh I see, in the above where do I put the URL and the `X-API-KEY`?
I agree that there is no formal qualification to this end but certainly there are many titles in the professional world that fall under the same umbrella but imply different roles, for instance in advertising an Art Director and a Graphic Designer likely have the same degree, much of the same skills but ADs are more focused on developing concept and campaigns, while designers are more tasked with execution. 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
The difference between Graphic Designer and Art Director is clear; one designs graphics, and the other is a director. This is like Software Developer, Software Development Lead, and Software Architect. Software "developers" and software "engineers" both develop software, and do things that might be considered engineering. Distinguishing one as a framework developer, and the other as a user of tools is arbitrary.
Players shouldn't push their position. You should maybe spend a bit of time on your game networking logic instead of sockio alternatives. For example in a point click strategy game. When a user clicks to move somewhere, just take the "player 1 move to x,y" command and broadcast that to everyone. You can also first validate this command server side which helps anti-cheating.
use normal inputs and validate. use select boxes to limit options for month, day, year. If you want a script check out github.com/Pamblam/CalendarJS it's a responsive cross browser calendar that doesn't use jquery and it can be configured as a picker.
Something like this: const myHeaders = new Headers() myHeaders.append('X-API-KEY', 'keyValue') const init = { method: 'PATCH', headers: myHeaders, body: 'my body data' } await fetch('URL_GOES_HERE', myInit).then(res =&gt; res.json()) https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Headers
I still think it's a semantic discussion rather than a fact, the line between Graphic Designers and Art Directors is not as clear as the titles imply. Art Directors spend most of their time designing graphics, using exactly the same tools as Graphic Designers, but on a broader scale, with less detail. Having held both of those titles, and that of developer, I think the metaphor is appropriate - Art Directors design systems of design (kind of like frameworks), which the designers use to build other things.
Have you located the debugger built into your browser?
So it's part of ES2017, which `is the eighth edition of the ECMAScript Language Specification`.
Turn them into divs.
browser or node? 
Yes, in a point and click adventure you wouldnt push your position that is correct. Stuff is different with 3D shooters though or any RT game actually. Even if I'm just streaming the input I am still pushing many messages per seconds. I am very keen with networking logic and am solely making sure I choose the right network layer for my project as previous implementations of mine with socket.io yielded fine but not great enough results. My main concern is having to spin up another server for each game if say a AWS t2.micro instance will only suffice for one game of 5 - 10 players. My goal is to have at least 30 players per server or of course more if possible. My main question of course still being if socket.io's performance increased since engine.io switched to uws 
Job titles are less about ability and more about responsibility. Your art director is responsible where the designer is not. That's it.
Make sure to connect to a service that gives you updated exchange rates. You don't want to get in legal or financial trouble because of an outdated and hard-coded rate.
Sorry I wasn't arguing with you, I was just linking that as a reference. I love MDN's examples, and it always shows what spec it's a part of
Apache 2.0 license I believe. https://github.com/Netflix/falcor/blob/master/LICENSE.txt https://www.apache.org/licenses/LICENSE-2.0
Personally, I don't really like date pickers, especially when you have to get the time also. I'm a fan of just a bunch of text boxes with placeholders and a suggested input format. Then just validate with vanilla js.
either.
that feeling when you realize you've been doing it all wrong
Yes you can scale socket io now. ) Also if you want easy way to develop already scalable apps then you can check the library which i am writing ( already have working version) https://github.com/goriunov/ClusterWS It allows to scale websocket ( uws) I also have repo with exmple just check for repo in my portfolio.
Hi /u/sitepen, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
But... Why? What would be the benefit to use the websocket protocol for static content?
Maybe something like this? http://ondras.github.io/rot.js/hp/
But we can still use it with ES7 &gt; ...thanks to transpilers like babel
Might as well use Elixir if you care that much about websocket performance without wanting to rewrite things eventually.
+1 for Elixir 
well the benefit is that you don't have to send http headers for every request. Just do the initial handshake and then just exchange the data you need. Also you don't have to authenticate every request-since the connection stays open/reconnects automatically, you only look up the user session once. Still, it is only worth it if you send some kind of real-time data IMO. I did a mongo query library which worked only over WS.It supported live queries-so you'd get a realtime view of your database. It was kinda cool, but it was just an experiment.
Holy shit, just the article I was looking for. 
This library doesn't do anything anyway just go straight for uWebsockets. You scale up by adding more machines - it's more of an architecture design rather than using this or that websocket abstraction. Don't bother with clustering, etc - it's cheaper to get 4 x single threaded machines than equivalent in power 1 x 4 threaded CPU and it will safe you a struggle of forcing node.js to take advantage of more than one core.
At first glance, your post need to be put in structure, write out with headline and try to solve the problem one by one. For my own experiences, I am stucked like you before and still in deep shit now and then but I tried my best to find a solution. Whenever I got stucked, I remember Addy, a software engineer from Google, said:" First do it, then do it right, then do it better". You should try to make your work run first and improve it later. Hope you will move on well!
I was asked about SIGTRAP and various esoteric (to me) Unix things.. I walked out mid interview
You should look into HTTP/2. Most browsers and many webservers already support it, and it does what you want. (Not sure about authentication per request though.) Websockets are meant for bidirectional communication. If all you want is to stream in new data, look into "server-sent events", which are probably much less resource-intensive and should mesh well with HTTP/2.
You’ll get better as you gain experience. Gain experience by working on challenging projects. /r/learnprogramming’s FAQ has a large list of projects and when you get stuck you can ask questions there or at /r/learnjavascript.
be productive and dont dwell over what is best to do. doing anything at all is better than hypothesizing forever over what's optimal
hey thanks.
&gt; It sounds like you are concerend with how a website operates to provide a good experience. I am referring to architecture in general. That's probably it! :) I did not mean within the context of backend webdev architecture or even software architecture. I meant strictly on the front-end. Do I worry about the algorithmic performance of the front-end? Yeah of course, but I'm not really obsessive about it. I'm far more frequently trying to maximize throughput of data to the browser, finding ways to reduce jankiness with DOM manipulations, thinking of ways to cache data, etc. Algorithms help with sorting and filtering to be sure, but we have those methods available to us, and it's not particularly relevant to my daily work. I'm certainly not perf testing sorting functions.
Here's a project with a full on MUD server and websocket based client: http://ranviermud.com/ https://github.com/shawncplus/ranviermud
Well, it's not meant for static content only. Would be something you ideally use for the entire application, including REST services. So basically, except for the first request (where you still wouldn't have an open socket), all other requests would travel over WebSocket.
have you looked at the repo list for hacktober ? a large number of the tagged issues are things like reformatting the read me and changing documentation. I used hacktober to get free graphics from someone more artistic than me, no coding required.
Thanks. Part of the problem with this whole thing is that I'm haveing a hard time describing this thing. It's literally like an engine. You can do things like floating windows and typical gui elements and do stuff like convert active 3d entities to text characters or shaded blocks... on the fly. . . just for example. But jesus christ... 10 years ago or so I tried to use Eclipse and after half a day went back to Notepad++. So with this thing, not only am I trying to navigate Visual Studio, but I'm trying to get a handle on C# Can I get something in JS so I can just use VSCode and Github please?
oh btw . . . look back at the thread in another reply, I describe the challenge with describing this engine. I think it's unique.
wrong subreddit, sorry 
Yes, agree 100%. structure your post. think like an "engineer" -- break it down -- you have way too much you're trying to accomplish within your post. I find when I'm stuck, it's because I don't know the immediate task at hand. It's important to understand your overall goal, but more importantly, understand the next step you need to accomplish... and then just do it. Most importantly, just do something -- it's better than living with the anxiety of thinking you can't accomplish something.
Any reason why you're using `net` over `http` or a higher-level wrapper of either?
For this problem we must use net and not http, I was able to finish this in 2 seconds using http.
Do you want to start a war? I'm pretty sure this is how you start one. :p
If it's in some self-contained scope then no. This will usually be the case if Socket.io is imported into the application and then bundled using webpack or something similar. If you're looking for a global object it's as simple as `if (window.SomeObject !== undefined)`.
Well in that case, I'm not 100% sure as I've never used `net`. I'd imagine the issue is that net isn't sending an HTTP response as it only handles the basic TCP streams. Anything else you'd have to build into it yourself. These might be of use: - https://stackoverflow.com/questions/29869999/http-createserver-vs-net-createserver-in-node-js - https://stackoverflow.com/questions/18497741/how-can-you-make-an-http-get-request-over-a-socket-using-nodejs
Pretty cool.
Or MQTT, or protobufs. 
I'm also having a tough time finding anything on the level of SadConsole, but blessed may be worth looking into. It's basically a reimplementation of curses in JS. https://github.com/chjj/blessed 
I use them in my project [Xyfir Buttons](https://github.com/Xyfir/Buttons/blob/c01fa50e42980cf68af353ab2f72f26f0e780aba/lib/inject/Button.js). Basically I use them to mimic the interface for https://github.com/visionmedia/superagent in an environment where that library isn't actually available (a file injected from a browser extension). I capture the data and transport it to another environment where it is available (the extension's background file) and using the data build an actual request for superagent.
Even with ~5 years of professional coding under my belt, I still have to catch myself asking too many questions sometimes and just say "OK, what is next step?" or "How do I just get a shit version working?". Once it's running, it's so much easier to pick out all the different parts and make them better (performance, organization, decoupling, etc)
use the wappalyzer plugin for your browser: https://wappalyzer.com/download
Cross post from [/r/programming](https://www.reddit.com/r/programming/comments/73vua5/benchmarks_showing_electron_apps_are_super_slow/?utm_content=comments&amp;utm_medium=hot&amp;utm_source=reddit&amp;utm_name=programming)
/r/madlads 
/r/roguelikedev might be able to help.
Just like they would if they were running in chrome, who could have guessed?
Damn I hope nobody turns off my framework tomorrow :S
aaahhhh .... smells like touchdowns Thanks that looks great!
and I'll be goddammed if I didn't alread have it fucking starred. 
Seamless named property access w/ Immutable.js structures is pretty neat.
Have you used them to solve particular programming challenges?
I'd be interested to see added comparisons with eclipse and visual studio... just for comparison's sake. I use `vim` if I need to open a single file, review and make changes. I open eclipse / vscode / visual studio / atom (I don't actually use atom, but i digress) when I'm working on a project.
Pretty funny. Glad to help :)
Been a while but, based on feeling (yeah very faulty metric, I know...) Eclipse feels a lot more snappier and responsive than Atom.
Web sockets have nothing to do with the DOM.
Can we put a jQuery plugin into a Knockout component then into a Polymer component then into a React component so we can build a Vue app using Ruby, Cold Fusion, and Node? Edit: Can we get this as a Wordpress plugin too?
I mean, I could have told you this after the first time I started up Atom.
Dogs and cats, living together...
I use code everyday and have never had performance issues let alone freeze every time I type a character like author suggests.
I wouldn't suggest this to anyone, but I've used it to transform input event object values. Before passing into the handler, I needed to transform the value on the onChange event object, but I couldn't do event.target.value = 'new value' as that would change the value in the dom, so instead I used a proxy with the event object as the target and returned my transformed value when the property 'value' was accessed.
Http://karryon.com.au/wp-content/uploads/2017/03/giphy-5.gif
Something is seriously wrong with this benchmark..10+ seconds to open a.project is something I've never seen with Code. In fact, VS Code is one of the fastest IDEs I've ever used. Comparing it to vim is also equally as silly.
I feel like this is a subtle Sublime Text ad. Fast, feature full, low memory, and doesn't have the worst text editor UI known to man.
It does when you're on a toaster
&gt; Sublime is surprisingly fast here taking only a mere second. I'm not surprised, motherf*ckers. Seriously though, the comparisons are too shallow. You need to be aware of what's actually done, and whether that's going to benefit you later. For example, Sublime loads and highlights the entire file when you open it. So, it takes longer to open large files than programs that don't - but for the rest of the session it'll fly anywhere in the file instantly, while the "faster" editor will always be stuttering. Whether that's better depends on your use case.
I have a 16GB laptop using ubuntu and don't experience these problems at all. Atom opens quickly and has only frozen once or twice in 6 months. 
Your argument is like walking around all day with a refrigerator strapped to your back, then when questioned boasting "well I can carry it, guess you're just weak". Well, yeah, my machine is apparently weaker than yours. But wouldn't you rather that extra power go to something actually useful? If you can't wrap your head around efficiency, what about battery life? Wouldn't you rather get hours more battery life?
Kate and Geany are worthwhile considerations as well.
Everybody knows that. Nobody builds Electron apps because they're fast.
&gt; If not Vim, then maybe Emacs. Or, well, just anything that is not a web browser masquerading as a text editor. So... then... *not* Emacs?
So many typos. 
I've read that React syntax like JSX can be used in Vue. Is that what makes this work?
Careful, these questions will soon go down the road of why we have software VMs, and why don't we write everything in assembly. Guys, I think most of us understand the "why." My comment is not a serious one.
Wth is "Code?" I need a disambiguation. * ^^^^^^*^I^know^what^it^is.
I use VSCode almost everyday and I have not faced any performance issues so far. My i7-4510U runs ST3/VSCode without any lag whatsoever, that too, when working with a large Laravel codebase. Yes, Code is slower than ST3, but it's nothing like what this benchmark suggests.
You'll need a better argument than "it's slower" to get me to put a big damper on my development experience. VSCode has been fantastic for me, and I wouldn't ever consider looking back for such a short-sighted, one-dimensional metric.
Same reasons you'd use `let`, `const`, or `var` for anything else, based on scope and so on. Wherever possible I use `const`, because there's usually no reason to reassign the variable.
Microsoft's web based code editor.
Visual Studio Code.
&gt;Your scientists were so preoccupied with whether or not they could that they didn't stop to think if they should. -- Dr. Ian Malcom
I love VSCode more than anything but it for some reason has started freezing up when it comes to Git and viewing working trees requiring a restart. Any clues? I have a year old MBP too, not a toaster. Downvotes? Just asking a question.
Data validation always seemed like an interesting use case for Proxies to me. Checkout [ObjectModel](http://objectmodel.js.org/) for one example of this usage. Vue 3 will use them instead of getters &amp; setters for its reactivity system.
ObjectModel looks similar in principal to the Data_Object class that I have made, combined with constraints that I think I have removed from my latest codebase because I wanted to focus on the core HTML rendering. I'm now using a Proxy for setting the style height and width attributes of Controls (basically virtual DOM components). I'll fit some data transformation in somewhere so that sizes can be expressed in terms of `[w,h]`, with it automatically transformed to CSS where necessary (possibly on rendering, with sizes expressed like CSS being turned into an internal representation).
never *ever* ***EVER*** compare it to . . . [Him.](https://i.ytimg.com/vi/FYy-YVDpU3I/hqdefault.jpg)
How big is the repo?
You must be one of those imposter “browser devs” not a real engineer like me who writes everything in machine code. /s
Syntax is wrong for ifs if(!look.equals("get") || !look.equals("Get")) {...}
 const myHeaders = new Headers() myHeaders.append('X-API-KEY', 'alskdjfaslkdfja') const init = { method: 'PATCH', headers: myHeaders, body: '{"rrsets": [ {"name": "kjack.abc.com.", "type": "A", "ttl": 3600, "changetype": "REPLACE", "records": [ {"content": "192.168.18.44", "disabled": false } ] } ] }' } await fetch('http://pdns.abc.com:8081/api/v1/servers/localhost/zones/abc.com', init).then(res =&gt; res.json()); it said `Uncaught SyntaxError: Unexpected identifier` and highlighted await fetch('http://pdns.abc.com:8081/api/v1/servers/localhost/zones/abc.com', init).then(res =&gt; res.json()); I don't see any syntax error, I tried adding a comma or `;` in the previous block to no aval. 
This takeaway holds true in general. This particular post just highlights one example of why it’s true.
Less than 1Mb
These days, in modern javascript (es6): - never use `var` - prefer to use `const` everywhere - only use `let` where you want a changing variable Specifically regarding arrow functions — it doesn't matter, they all work the same
/u/pokeman528 — this is `java` code you have posted, to the `javascript` reddit wrong programming language ;)
Make sure your environment has async/await. Otherwise just use a regular promise.
Well, the error says it: You're returning an _invalid HTTP response_. That is, you're listening on the correct port alright, but you need to properly read and write the content to the socket so that it is seen as a _proper_ HTTP response. Writing just `"HI"` on the socket is _not_ a valid HTTP response. It needs to have, first and foremost a _status_ header which _may_ look something like this: HTTP/1.1 200 OK Then, you should put in some additional HTTP headers, such as the date, the age of the document, the server id, some content headers like the `Content-type` or `Content-length`... Only after those, you print a blank line and then the content body of your response. e.g. HTTP/1.1 200 OK Date: Mon, 2 Jul 2018 12:28:53 GMT Server: Apache/2.2.14 (Win32) Last-Modified: Sun, 1 Jul 2018 19:15:56 GMT Content-Length: 88 Content-Type: text/html Connection: Closed &lt;html&gt; &lt;body&gt; &lt;h1&gt;Hello, World!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; For this type of question, you should probably use a different subreddit, such as, r/learnjavascript or r/learnprogramming
sorry lol wrong subreddit
exactly so — a private variable can be easily hidden from the global namespace: &lt;script&gt; { const private = true } &lt;/script&gt; a whole application can be placed behind two curly braces just like that this is a privacy feature of javascript, and maybe also a security feature /u/man_with_cat2, I can't think of a good way for you to detect socket.io purely from, say, the javascript console — it's easily possible the library emits some global variables of some kind, so maybe there's an opportunity there, you could look through their usage docs or source code and see if there are any global exports if otherwise you have more control, maybe you're running a headless browser, you could perhaps witness telltale network events
No, it's not related to Vue's JSX. Actually, it's pretty simple. We just wrap ReactDOM.render in a Vue component (upon mounting), and new Vue({ el: [element ref] }) in a React component (upon mounting as well).
Except you have one instance of chrome for each of these apps
Use relative sizes and only directly change the outermost container. PS: A concrete code example is much easier to comment on.
replace this line: await fetch('http://pdns.abc.com:8081/api/v1/servers/localhost/zones/abc.com', init).then(res =&gt; res.json()); with the the following: const link = 'http://pdns.abc.com:8081/api/v1/servers/localhost/zones/abc.com' fetch(link, init) .then(res =&gt; console.log(res.json())) .catch(error =&gt; console.error(error)) alternatively, for newer browsers, you can use the modern syntax: async function apiCall(url) { try { const response = await fetch(link, init) console.log(response.json()) } catch (error) { console.error(error) } } apiCall('http://pdns.abc.com:8081/api/v1/servers/localhost/zones/abc.com') 
Will you then call it ReVue?
On the contrary, I thought this might help unite the two :)
HTTP(2) already does that. There is no need for such a hack. Even HTTP(1) can already do a lot.
Damn, how did you find out? That was my master plan!
I use a MacBook Air (yeah, yeah, I get it, but it works well for what I do!) and it’s absolutely slower than many other IDEs I’ve used. I don’t know if it’s quite as bad as the benchmark suggests, but it gets noticeably sluggish.
I agree with /u/miniversal You should build an HTML form to gather the information &lt;div class="form"&gt; &lt;label for="age"&gt;Age:&lt;/label&gt; &lt;input id="age" name="age" type="number" value="0"/&gt; &lt;br/&gt; &lt;label for="make"&gt;Make:&lt;/label&gt; &lt;select id="make" name="make"&gt; &lt;option value="volvo"&gt;Volvo&lt;/option&gt; &lt;option value="saab"&gt;Saab&lt;/option&gt; &lt;option value="opel"&gt;Opel&lt;/option&gt; &lt;option value="audi"&gt;Audi&lt;/option&gt; &lt;/select&gt; &lt;br/&gt; &lt;div className="error" data-error="false"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt;{ const form = document.querySelector(".form") const getAge = () =&gt; form.querySelector("input[name=age]").value const getMake = () =&gt; form.querySelector("select option:checked") const errorContainer = form.querySelector(".error") form.onchange = () =&gt; { const age = getAge() const make = getMake() let error = null if (!age) error = "Invalid age" if (!make) error = "Invalid make" errorContainer.textContent = error errorContainer.setAttribute("data-error", !!error ? "true" : "false") } }&lt;/script&gt;
Pretty much this, don't use var.
what _exactly_ is the `undefined` error?
I urgently need docker image!
I love it, thanks!
Why not us VSCode. I have to decipher it as well.
1. when you're referring to a textbox, are you talking about a textarea element? eg, `&lt;textarea&gt;&lt;/textarea&gt;` 2. have you tried the `readonly` attribute? readonly allows expandability, unlike disabled, and might be more accurate for your purpose. you might apply readonly to a textarea element like such: `&lt;textarea readonly&gt;&lt;/textarea&gt;` 3. this actually sounds like it might be a tricky CSS solution you might need to style the textboxes tactfully .textbox { whitespace: normal; height: auto; } 4. take a look at [this pastesafe application](https://pastesafe.github.io/) — the bottom part of it is a large readonly textarea, and it's stretchy to the extent that the viewport changes size (however it does enact scrolling when the contents exceed its size, however it could be styled differently...)
Thank you! My original idea was to make a browser plugin to view some properties of socket.io websockets. Referencing the properties of the Socket object was a rather important part, so the idea kind of sucks if it might miss sockets initiated from private scopes. Back to the drawing board I guess :)
Personally if someone coming from native code writing something else for specific platform then comes to web dev world, you cant argue with local guys who have been there done that in web dev ecosystem; mostly they would take vscode as king. It’s something in there that aligned with their usage. Personal experience without bias. Vscode is so slow that cannot handle large file, every stroke of character I can feel the delay. Not for me, and always sublime. Although it might miss some useful plugins to make web dev more productive. But I really cant stand how slow it could make my programming session not so healthy. But please not to go too far using simulated terminal like Hyper instead of native Terminal or iTerm? It’s something that there’s no need for benchmark. Clearly something else that aligned with web devs.
well hey, it sounds like maybe it could be a tool which developers using socket.io could opt-in to use I'm not sure how socket.io usage looks, but I imagine you could make a little library, let's call it `sdebug`, which a developer could use to analyze their socket.io objects: const socketio = new SocketIO.Session() const monitor = sdebug(socketio) // log a report every second function report() { console.log(monitor.getReport()) } setInterval(report, 1000) report() // or maybe insert a monitor widget into the page document.querySelector(".monitor-container") .appendChild(monitor.getWidget())
[removed]
I freakin love sublime. It really comes into its own when you do complex search and replace operations.
Indeed, you'd have to call `button.dispatchEvent(...)` to simulate a mouse event, however `isTrusted` would still give you away. You can't fake `isTrusted`. You're busted. Exactly as /u/MrXyfir says, you'd have to get crazy with headless browsers and docker or something to do this properly
Use `let` if it's anything that changes. let allows variables to be scoped to blocks. use `const` if it's not going to change
I wish I could, but this name has already been taken.
basically, there's never a sane reason to use var over let these days. if you can get away with const, use const, otherwise use let. that's it.
Not sure `web based` is correct even though it's written using web technologies and executed in an (embedded) web browser.
It runs fine on my deskop, but on the lab computers at my school it crawls compared to sublime text 3. It seems to be picky about browser versions and hardware.
Maybe there's a bad extension installed?
The web-based editor that is used in VSCode is called "monaco". [Link.](https://microsoft.github.io/monaco-editor/)
Oh so you're a machine code kiddie. I write programs with flip-flops and latches.
Pedantic correction: It's packaged with a web _renderer_. It's not much of a browser if you can't browse. Apologies.
Ben Nadel alert
If its slower in the sense that you need to benchmark hypothetical tasks to notice a difference, then I also am not worried. I do care about slow to startup, or to switch files, or lagging/freezing. That gets on my nerves pretty quickly. Have not noticed that yet with VS code. Atom, more so though, it feels very bulky.
Start by providing the actual source code of what you're working on so that we'd know exactly which code is good and bad.
the amount of eye and comment cancer in the post and the comment section about such an irrelevant topic is mind boggling
something something magnetized butterflies
I have no complaints with ST3. It's basically everything I want in a text editor. It doesn't replace an IDE for a Java / C# / Cpp project, but then again neither does vscode. 
added
No
Hard to get excited when a new number release isn't a vehicle for a ton of new, fun features, but prioritizing this kind of housekeeping, I think, is always a good thing. 
No need to be ashamed, Macs make great development machines. In my experience, VS Code performs exactly as you’d expect for what it is. It’s half way between a text editor and a full IDE, and that’s roughly how long it takes to launch. Yeah TextEdit fires up pretty much instantly, but I could open and quit VS Code about five times by the time PhpStorm has finished launching. 
I'm not Ben Nadel. 
I love vim but I still use vscode for most of my work because it's what I'm used to. Plus, I'm not opening these massive files everytime. If I wanted to I would just use vim because I know it's faster. There is a place for both to exist.
Magnetized butterflies? You dirty peasant, as a REAL programmer I do everything using bits of grass and some stones
Do you get the same performance? Even with applications doing a lot of REST calls?
Good work, lots of nice conveniences.
&gt; there's never a sane reason to use var over let these days With the exception of supporting older UAs. And not *that* old either: Safari has only had support in stable public releases for just over a year, Chrome in non-dev/beta releases since six months before that, and Firefox two months earlier. (source: http://caniuse.com/#search=let) Globally that covers more than 80% of users, but things worse in specific territories (for India that figure is less than 50%) and markets (I still have to support IE10 for a few users in a client that is a high profile UK bank grumblegrumblemoanmoan, though I'm currently supporting legacy and thankfully we've put our foot down a bit harder on the matter for the newer products). And even ignoring that: many projects can't afford to possibly lose nearly 20% of the potential audience so either can't use let and friends or need to transpile down to an older standard for release. *Of course if you are using arrow functions this is a moot point: they are more limiting with respect to support by older UAs than let &amp; const.*
.
But the post is by him
So the main issue I have with most negative Electron posts is that they seem to put performance on a pedestal as if nothing else is worth talking about. Imagine if this post was instead called “Why I Still Use C++”, and the author filled it with performance comparisons between C++, Ruby and Python. Would the results provide any insight? Would they surprise anyone? No shit, C++ would wipe the floor with them... does this mean we should write everything in C++? Few are arguing that Electron is fast so I don’t really understand why people are so feverish to argue the opposite. 
yea, exactly. and if you really care for those with older browsers, you should consider using transpilers anyway instead of letting them limit you on what you can use.
This right here. You can put a css transition property on the width, and if you're sizing at set intervals then you can just change a class... The browser will do the work for you.
&gt;. I write programs with flip-flops and latches It's been too many years since college; took me embarrassingly long to figure out you weren't talking about shoes. 
the problem is every easy task is actually already completed or in progress by someone else... But I'll keep searching. 
You're totally right about that! 
Thanks for your help! I'll make sure to save that quote somewhere because it really is a good one. 
Yes, you're all right. Thanks for your help! I'll break down my issues and look for the best steps in order to fulfill my goal. 
I have no idea why I felt like this issue is only affecting the beginners... Of course it would affect professional programmers as well, after all, in this industry everyone keeps learning new stuff. Thanks for your help! 
Thanks for your help! You might be right... I know I have anxiety and all, but I didn't think it would affect my learning process, I thought it might only ruin my public speech skills and stuff like that. I won't remove the post tho because I feel like if there's someone in the same situation as I am, they should be able to read this and understand everything is ok, you just need to not lose focus of your goal. 
I can't upvote this enough. Where are all the questions on _visual_ design and user experience? There's nothing on typography or grid/colour theory... almost no practical examples of accessibility. This is more programming that front end development.
Thank you, very glad to hear that :) .
Oh, hey, a post that's stating the obvious and using it as an argument to make people switch to vim. I bet the author is male and in his late 20s!
The have a new dashboard for the status of the incoming features here [https://emberjs.com/statusboard](https://emberjs.com/statusboard)
I have a ChromeBook I hacked to install Gallium OS on. It's a reasonable machine for the price (&lt;$200) - decent screen, easy 12 hours + battery life, dual-core CPU, 4 gb ram. It is really limited on storage, it has 16 gb built in SSD. I needed a decent text editor this summer while I was travelling with the ChromeBook. I tried Atom, and it was exactly like the headline - "super slow and eat[s] memory", and bad enough performance to be completely unusable for code editing. I was really disappointed in my first experience with a serious Electron app.
I'm sorry if I'm totally out of the loop or something but what is the significance of that?
A few people find him overrated
So what would be the target audience here with "What is a function" right next to the "React 16" link? Seems to me as I could just as well follow echojs or the JS subreddit... :-)
You need to leverage CSS transforms, because the compositor layer is run on the the GPU not the main CPU thread. The following should be useful references for you : - https://www.youtube.com/watch?v=WrA85a4ZIaM - https://www.youtube.com/watch?v=biJXpv-6XVY - https://csstriggers.com/transform
Hi /u/Quicksteam9, even though your second paragraph may be solid advice, your first paragraph is pretty vulgar and attacking, so I've removed the post. If/when you edit it to contain a little less aggressive language, I'll reconsider approving it.
Ah, I see. I like some of his stuff but don't always agree with other stuff he says. He is, if nothing else, prolific with his content generation. 
Once he wrote that he hadn't had time to see what 'let' and 'const' are all about, and anyway, he's happy using 'var' in ES6, why should he upgrade to something else? I wouldn't take any advice from someone like that. Plus the pictures of him hugging people are cheesy and annoying :-)
This just in: layers of abstraction add development convenience but cost in efficiency. Film at eleven.
This is an interesting project! I was wondering if you researched WebComponents as an interim format instead. Did you encounter any downsides that were blocking to use the standard instead?
We need to go deeper - is someone working on "vuengulareact" yet ? :)
Atom isn't at a higher level of abstraction than say emacs its just a particularly inefficient one.
The counter argument is that electron is "good enough" when it appears to be pretty much garbage.
This would be fantastic if GB of ram was the primary metric one used to determine performance.
https://www.npmjs.com/package/types-installer This is the one
It doesn't take that much memory for me. For one of my actual current projects, 4 files open, between 100-200 lines each, VSCode takes 25Mb. Not 349Mb like OP says. Edit: [Boom](https://i.imgur.com/RqicJHi.png).
I honestly haven't seen it before — oh well. ¯\_(ツ)_/¯ Just took a quick peek at the source; it works by trying to install every package in your dependencies with a `@types/` prefix, whereas TypeSync uses the data made available by Microsoft's type publisher.
I have used VS Code on a MacBook Pro for a year now. No noticeable slow startups. Slower than Sublime? OF COURSE IT IS. Sublime is a text editor, where as VS straddles the middle ground of text editor to IDE. So bear that in mind! You are always going to have trade offs. I'd rather a slower startup time to get the features because then you're set for the day anyway. Productivity &gt; initial startup time. 
Garbage at what? Doing 100,000 instance search-replaces &amp; traversing 6MB files? No arguments there. Good thing such edge cases are rarely encountered during the day to day work of most devs! Not to mention that Code and Atom, while both Electron apps, have very different performance profiles. What is the actual argument being made here?
That's because it's not an argument, it's a joke.
I think its a matter of the tradeoffs. Take slack for instance. A 10 engineer startup building a next gen collaborative chat application has to optimize for fast developer experience. If they can get the features out that matter to users, thats going to be critical for them to survival. Slack is always running on my desktop whenever I'm on my computer. It would be nice if it didn't consume a shit load of memory and CPU space in comparison to what it actually does. SlackHQ of course has plenty of resources (ie: money and engineering talent) to devote to making slack desktop app fast and energy efficient so I kind of expect them to prioritize optimizing the shit out of slack to the point of potentially rewriting it in c++. I would even consider it a competitive feature. Hopefully webassembly helps make the transition easier.
Nobody's talking about emacs though - they're contrasting electron (interpreted code running inside a web browser/node.js runtime) with vi/nano/sublime (compiled machine code). That's not to say that the web-browser-plus-node.js runtime is particularly efficient for running desktop apps (especially compared to a custom, designed-for-the-purpose one like emacs' lisp runtime), but comparing a tightly-optimised compiled executable with an interpreted one running on a general-purpose runtime and pointing out that the latter is less efficient is pointless. Like I said, you swap flexibility and degree of abstraction for convenience and inefficiency. Vi is faster than electron, but you also can't take code out of vi and run it natively in the browser, or package it into a mobile app using a framework like cordova. Hell, even emacs' Lisp code can't be ported around and repackaged for use on different platforms like JS, CSS and HTML in an electron app can be. It's arguably a similar *number of layers* of abstraction compared to electron (machine code-&gt;OS-&gt;runtime-&gt;UI code), but the *degree* of abstraction from the underlying hardware is significantly higher with electron apps, which makes the code more widely reusable.
/r/programmingrequests /r/learnjavascript 
This is ~/.eslintrc.json: { "extends": ["standard"] } You are also going to need eslint-config-standard, eslint-plugin-import, eslint-plugin-node, eslint-plugin-promise, and eslint-plugin-standard installed globally. I have never used `eslint --init` personally; the config files aren't too hard to write by hand. edit: Tested on my system, seems to work great! Having a global eslint config is a good idea; I don't know why I never thought of it before.
Thanks 
lol what world are you living in
There's a project in its early stages called [Electrino](https://github.com/pojala/electrino/blob/master/README.md) that I'm curious about. It's Electron minus Chromium. Instead it uses the native OS browser engine already on your machine (webkit for Mac, edge for Windows). Read more about it [here](https://medium.com/dailyjs/put-your-electron-app-on-a-diet-with-electrino-c7ffdf1d6297). I wonder if going this route will help remove some of these memory/cpu issues we're seeing with electron. I hope it matures enough to be a solid option to Electron
Going to need to see the whole source.
Was in the process of replying before the post was removed. Imposter syndrome is very very common, especially among engineers and developers, and this really hits close to home. There are SO much stuff happening all the time so it's easy to try and keep up with the new stuff, and run into a wall when it turns out it's just too much.
I'm actually using asp.net textboxes. Thanks for the suggestions though.
&gt; It seems to me that React is very explicitly designed to be a UI rendering layer, and Redux a data management layer. What I'm not seeing in many, if not all, examples of React+Redux repos is anything handling business logic. I'm pretty much of the same mind as you. I've been working on a third-party-API-backed React/Redux project at work for a few months now, and there seems to be a huge gap in the conversation whereby nobody can seem to decide whether the Redux store should be the Model, or the ViewModel. This might sound like an esoteric problem, but it's a source of massive architectural uncertainty that causes constant problems for the project - should we be transforming API data into the form required for rendering in reducers (allowing us to write nice, stateless React components, but limiting our ability to query/reformat the data in other ways if/when we need to), or should we be using Redux as the model, and having individual React components reformat the data for their own needs (with inevitably means maintaining their own internal state, and constantly risks tripping over things like implicit object creation in props that defeats React's rendering optimisations). Some of this may be a reaction to a lack of institutional knowledge of the architecture as we build out our first project in it, but even reading around online it seems like there's a lack of clear "best practices" to follow around whether the Redux store should be the Model or ViewModel, and how to manage the inevitable tradeoffs that either choice causes. 
To clarify: there's nothing *wrong* with `var` - it's just rarely (if ever) the best solution these days now we have useful tools like `const`, and `let`'s block-scoping.
Code launches in 3 seconds on my PC .. and I have a ton of addons and themes ... https://imgur.com/YuX14ul
So what is next? Comparing fuel requirements of an aeroplane vs a bicycle? 
Why use lensify instead of R.evolve? Looks like it achieves the same result or am I missing something? 
VIM is something my brain simply cannot learn :-/ I love VSCode, was on Sublime before. I still keep Sublime just in case. Though there's this super nice feature on Sublime which is not available on VSCode. 1. Sort lines 2. Permute lines 3. Sort selections 4. Permute selections
I have a project with about 20 files open, couple hundred lines in most of them. Couple of them are only about 20 lines. Total of 28Mb. I can't replicate this guy's issue at all in any of his Electron based editors. Also this guy couldn't figure out how to open Emacs, so he might not be a reliable authority.
[removed]
I've never had trouble running electron apps so by whatever metric you want to use they work fine for me.
Well, that's because React and Redux were not designed to solve this problem. Specifically, React and Redux are *only* the view layer of a traditional MV** framework. This allows you to choose whatever system you want to handle business logic. In the case above, I'd just wait until the "ComponentWillMount" event on MovieDetails to make the ajax call to get the details. But there's no wrong answer to this. 
Am I the only one here that never closes ides? I just leave shit open, so I don't see any startup nonsense 
I am probably a bad, unworthy developer... But why does quirks mode even needed to be mentioned today, and more specifically, be asked to an interviewee?
Atom on my mac has some process called "Atom Helper" that uses about 500MB of memory. It's pretty crazy for a text editor.
I needed to travel from one end of the street to the other end. So i compared using a bicycle to taking a luxury party limo. - The bicycle was easier to get into, the party limo took much more time to unlock the door, open it, climb in, then close and lock the door again. - The bicycle was faster to start up, just start pedaling. The limo had to be started and warmed up a bit before putting it in gear and starting down the road. - For the very short distance the bike accelerated faster off the line. - Then if you look at gas consumption the bike was at zero and the party limo used a significant amount. - Bikes are allowed almost everywhere, while party limos have limited use and need to stay on roads. - Overall, everyone should use a bicycle for every use case. ~~Yes the party limo had amazing features that we didn't talk about, but who cares those don't help me push my already formed opinion~~ Seriously people, use the right tool for the job. If you just need to quickly open and edit a file use a basic file editor. If you plan to do development on a project use an IDE and enjoy switching between files quickly, git integration, debugging, intellisense, etc. Yes it will take more memory, because it will DO more.
Since when does lowest memory usage == highest value? No one is fighting holy wars about running DOS still.
Why don't you ever see articles pushing for Lynx over other browsers? It's so much faster after all.
It is not a question of "everything assembly" -- but simply using better (software) architecture (which of course requires time, and lots of it and possibly many iterations when demands change) and _less layers_. We now very often see so many libraries and abstraction layers, it cannot be right. Many pieces of software cannot do all _that_ much more than similar software 20 years ago - when 33 MHz and 4 MB(!) of RAM were state of the art. Most of the gain in hardware speed went into abstraction layers without nearly as much _real_ gain on the "this is what it actually does" side. I'm not saying there was no gain, of course there there was! I'm talking about proportionality.
Cannot answer: _Details_ matter. What kind of question is that when there is no concrete code + environment, only an "idea"?
See above - React and Redux were not really designed to be anything but the View. As for your specific scenario, when the data from the API is not in the correct format to use in the component, that's what "mapStateToProps" is for. import * as actionCreators from './actionCreators' import { bindActionCreators } from 'redux' import {connect} from 'react-redux' const reverseString = str =&gt; str.split("").reverse().join(""); const ForwardsAndBackwards = props =&gt; (&lt;div&gt; &lt;div&gt;Forwards: {props.forwards}&lt;/div&gt; &lt;div&gt;Backwards: {props.backwards}&lt;/div&gt; &lt;/div&gt;) const mapStateToProps(state) =&gt; ({ forwards: state.string, backwards: reverseString(state.string) }) const mapDispatchToProps = dispatch =&gt; ({actions: bindActionCreators(actionCreators, dispatch}) export default connect(mapStateToProps, mapDispatchToProps)(ForwardsAndBackwards) So, if your redux store contained "Hello World" in the string property, your component would render "Hello World" "dlroW olleH" all without using internal state, even though "dlroW olleH" does not exist in the store. 
I've had bigger projects for sure, but I guess he's using plugins that are like validating the entire node_modules folder or whatever. But he wants to blame it on Electron.
and if your're regularly opening files that are large enough that you're starting to see slowdown on your editor you've probably got bigger problems. 
Babel is the hero we need. 
Hahahaha what
Good question! With R.evolve it would seem that you still need to define all your transformations. So that would be: const state = { foo: "bar", baz: "bla", } const stateTransforms = { foo: R.lensProp, baz: R.lensProp } const stateL = R.evolve(stateTransforms, state); Exactly the issue I'm trying to solve with lensify. So with lensify, you can do: const state = { foo: "bar" } const stateL = lensify(state) 
My laptop can run AAA games, but it can't fucking edit text with Atom... We're making great progress in technology? 
ST is decent but it isn't free which can become an issue. I'm contracting at the moment and often have to use a machine provided by the company I'm contracting for rather than my own. I can't get people to stump up the license fee for ST if I'm only there for a few weeks and personal licenses can be a headache at some places. I know you can use it without a license but that's a minefield too. VSCode is just easier in that regard. It's also improving at a much faster rate than ST due to the resources MS are putting behind it.
You bring up a horrible issue by saying Atom freezes and then declare how it's not an issue, in fact it's just the opposite! Only once or twice in 6 months! Best editor ever! If something bricks then it's a brick. edit: I don't care what editor people use. Just wanted to point out that our expectations are getting lower and lower. Applications shouldn't freeze... ever.
MapStateToProps is exactly where derived data should reside. Don’t forget that MapStateToProps can take another argument “ownProps” so you literally have access to the entire store and the components current own props. DO keep in mind that this function is ran on each component update so is can get busy fast. Make good use of the component lifecycle methods so you’re not updating unless necessary.
wut?
X-Post referenced from [/r/node](http://np.reddit.com/r/node) by /u/keithwhor [Generating Pixel Profile Pictures with Cellular Automata using Node.js and StdLib](http://np.reddit.com/r/node/comments/748743/generating_pixel_profile_pictures_with_cellular/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Yeah, but why do I need static lenses in the first place when I can just use R.evolve? Lenses are useful when objects are dynamic and lenses are build on the fly, but lensify just creates lenses for static objects if I understand correctly. From docs: const stateL = lensify(state); return R.over(stateL.playerMoves, R.add(action.moves), state); When it could just be: return R.evolve({playerMoves: R.add(action.moves)}, state) Same result and no lenses needed.
Im not sure how you extrapolate Atom and VSCode behavior to all Electron apps given that their results dont even really agree. In this case they deviated by up to 100% on different benchmarks, even if they are both high. There is no reason not to believe that a 3rd Electron app couldnt be 100% or &gt; more efficient than these examples.
Just someone with NIH syndrome, pay them no mind.
If anything, this blog convinced me that paying for Sublime license is justified.
That's called web components and it will save the world !
could you explain what you mean with dynamicly built lenses exactly? How would that work? (because it sounds exactly like what I'm trying to achieve here..) The problem I am trying to solve is the creation of lenses, every time I would like to work with them, without having to use lensProp a bunch of times. Now, with that being said, R.evolve does seems to be a better solution for a reducer, though! Didn't know it existed. **Edit: **Also, for operations on complex objects, I would prefer to write R.over(stateL.player.scoring.moves, R.add(action.moves), state); instead of return R.evolve({player: { scoring: {moves : R.add(action.moves)}}}, state) 
I think lifecycle methods should be used relatively rarely. If you find yourself using them in most of your components, it is a sign that you should probably abstract away some logic to higher-order components. As for avoiding recomputing derived state in mapStateToProps, that's what [selectors](https://github.com/reactjs/reselect) are for. 
This. I never used ST because of the license. I used Lighttable then VS Code in its stead, and am happy enough with it.
I agree, lifecycle methods are used rarely. I find myself using them when I go, “This massive app is slow.” And need to rethink things. As far as using another library for derived data, well okay, I’m sure you can find a library for anything. I’m trying to answer the question at hand not introduce more learning and confusion. Deriving data in mapStateToProps is perfectly fine and an acceptable practice for small to medium sized apps. I understand there may be libraries to do the job better but that’s not the question here.
Our mind-readers are currently on vacation, please elaborate.
One more piece of advice that isn't on this post yet. If you find projects to practice on, don't pick something that's too challenging. You'll be frustrated and likely burn out before you ever get good enough to actually make it happen. For an example of a simple project, you could put a button on a page that when you click it, creates an alert with the number of times you've clicked it so far. Boring? Yeah. But then you can think of additions to that concept, like how do I make it remember how many times I've clicked after I hit refresh? Can I change the background color of the page based on how many times it's been clicked? Stupid things like that. I learned a lot of programming before I even realized I was doing "work". For instance, in middle school I was interested in making dropdown menus for some reason. So I made like 30 different kinds of dropdown menus, which taught me a bunch of javascript / css / html without me even thinking about the fact that I was learning a valuable skill along the way. Anyways, good luck and feel free to DM if you get stuck.
You're right, but I'm sure you know you can target your required browsers through babel-env.
How do we skirt javascript fatigue? Hmmm. Oh I know, just say that it exists! That makes it okay.
It took me a while to discover some ramda features too, never found a good tutorial that would be practical and wouldn't start talking about Monads, categories and YCombinator. By static I mean that the object's property names are used in the code. To get the lens from lensify I need to know the name, so I could just use R.evolve instead. On the other hand, code that works with lenses do not need to know anything about the form of the object it's changing. Thus it can work with any object. Lenses and objects outside of the function can change without needing to change the function itself. To be fair, I never found lenses useful and always used evolve/adjust. So that's why I wanted to know if I was missing something.
Well said.
Lifecycle events are extremely useful and I hook into them in production apps often (it's quite frankly the biggest benefit of React or any vDOM library). For example, dynamically populating data in redux can easily be managed through didMount and willUnmount (and that's just a common/simple example). React just has a lot of ways to do things (manage internal state, trigger re-renders, daisy chain props, share state via a library like redux, composition, add unique methods to your component prototype, etc) and that leads to a lot of unique practices between devs, but ultimately your uses depend on numerous factors than just rendering a view component.
mm, yeah you've got a point there. If the state object changes, so does the path to the lens 🤔 I'm definitely going to check out evolve, and alternatives some more. Thanks for the suggestion!
Electron is just wrongly used. Don't expect fast performance if your rendering is HTML based like in VSCode. If you keep things low-level, work with Canvas or even better with WebGL, then things will run smooth with very low memory consumption. Web based apps can run pretty decent, [Figma](https://www.figma.com/) for example uses WebGL and WebAssembly (actually compiled from C++) and got a native performance feeling - the author knows his stuff and isn't a web developer.
Emacs is a OS though.
 // Compile the vertex shader gl.compileShader(vertexShader);
Use selectors (mapStateToProps). They contain the logic of filtering and gathering required data. Concerning mutation logic, use reducers. With both reducers and selectors, you have your full business logic structure.
This is outdated. I'm pretty sure the Code team recently put out a release related to 'big' files.
My VM from work will log me out automatically after a while of inactivity.
I find most of these posts are by mac book x owners complaining about performance since they're running outdated specs for the price of that silly logo.
Highcharts comes to mind but I don’t think is free to use anymore. If you’re looking for customization, use D3 and send requests on some interval
I can't think of a reason why Var would be used at all. Function hoisted var definitions have some fun side effects. 
Meh, if any of your your source files are 6MB you're doing it wrong! Likewise you can use a text editor to search and replace 100K strings if you like but the "right" tool for the job is probably sed. Not that vim is not good or useful, it's good to know at least the basics of it for contingencies but code and atom both run just fine on most modern machines - lord knows what's wrong with his installation if this benchmarks are that bad!
It's better to transpile and polyfil than support specific browsers. 
At my current job, we had a similar discussion/idea. Since we are using WebSockets for Client &lt;-&gt; Server communication via `Redux`, it was thought that we could use it for everything. The biggest hurdle for me to think that's a good idea is how do we cache images/files/static content on the Browser? When I have an `img` that has a `src` of `http://123.com/abc`, if the `Headers` are set right on that request/response, I will have that url cached and the browser will hit its cache before requesting the image again. Over WebSockets, it appears that you'd have to re-write the browser cache for each and every static item sent via the socket.
If an app wants to provide a rich development ecosystem for the editor I'm using at the cost of some memory usage on my end, so be it. It's a small cost for a huge plus.
Why do you need redux? Maybe store the filter in redux, but for the rest, I would put an api call in `componentWillMount()`?
Absolutely true but if you separate Javascript the language from the DOM API and related browser things then you shouldn't see this as a criticism of Javascript *qua* language, but more of the very idea that every app needs to dwell in a browser, which is a bad idea. GNOME Shell in Linux uses Javascript and it doesn't have these problems.
Right, and exactly why I've never had the desire to run an IDE or text editor in Chrome...
The point is to be cognizant of the costs. I prefer Python to C++ but I recognize that I am losing computational efficiency by doing so. Similarly a lot of people still prefer slower editors that do other things they like that makes it worth continuing to use them.
ST is awesome enough that accurate reporting is easily mistaken for advertisement. It's the only thing I would switch to if I wasn't already Emacs4Lyfe.
Except this is more like something with the weight of an airplane that only does as much as a bicycle.
**N**umb **I**n the **H**ead Syndrome?
Hi /u/tamrrat, For javascript help, please visit /r/LearnJavascript. Thank you!
I don't see how a web component would offer much here. This is simply converting the Vue tree into a React tree and vice-versa. Web Components are a good standalone target, but I don't see how defining custom elements would do anything but complicate the conversion process.
Right, the key to our approach here is that major releases are the *wrong* time to add a ton of new features and changes. By keeping the framework stable during the 3.0 transition we increase the likelihood that older apps get off older APIs and make the transition with the rest of the community. We avoid needing to support the 2.x codebase in parallel to the 3.x codebase. You're right that we miss the opportunity to treat major releases like a feature/marketing event, but the measured approach is simply better for our community. I think of EmberConf as the big "announcement" event of the year. There are a number of exciting features in the pipeline, some of them unblocked by this transition. For example real steps away from Ember's object model to ES classes are limited by a) decorators, which are stage 2 at TC39 and b) class fields which are stage 3 but require &gt;IE11 to polyfill accurately. 3.0 gets us a bit closer. Some others, like improvements to the component model, won't be waiting until 4.0 to land.
Every program I use freezes once every 6 months. I've opened files with vim that are too large and with all the plugins I have it freezes. Chrome and FF freeze very occasionally. Photoshop freezes very occasionally. No software is perfect.
Hi /u/Techivilla, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `techivilla.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [techivilla.com](/search?q=%28and+site%3A%27techivilla.com%27+author%3A%27Techivilla%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|11|100%
If the other solutions don't work, try using requestAnimationFrame for updating your layout.
Do you know of any good websites that have d3 stock market chart examples? I've been googling around but haven't found anything that specific.
&gt;do what professional programmers do and use a programming language Yeah, so javascript... Also, are the programmers at Facebook, Netflix, Pinterest, AirBnB not professionals? Professionals don't recreate the wheel because it makes us feel smart, we use open source libraries to offset development costs. So your comments aren't helpful or informed.
They aren't that bad. cloud9 works pretty well, for example. 
*Rectanvular?*
&gt;Well, that's because React and Redux were not designed to solve this problem Exactly why I made this thread. I know there are strong opinions around this stuff, so I'm trying to flush those out. The app I'm working on handles around 500k monthly users, and is **very** data heavy. Most React app examples are very small--e.g. every todo repo--and that the structure of those repos and the structure of our app should be different. So I'm trying to tease out the fact that maybe we need to formalize a controller pattern or something before we end up hacking together React+Redux to be a tool it wasn't intended to be.
Hi, I'm a Redux maintainer. I'll try to answer both /u/kingofkyrgyzstan and /u/Shaper_pmp . One of my favorite quotes is: &gt; Redux is a generic framework that provides a balance of just enough structure and just enough flexibility. As such, it provides a platform for developers to build customized state management for their use-cases, while being able to reuse things like the graphical debugger or middleware. As a result, you can build up your own preferred architecture around React+Redux. I wrote a pair of blog posts that describe the common patterns that are considered to be "idiomatic" React+Redux usage, which you may want to read through ([The Tao of Redux, Part 1 - Implementation and Intent](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/) and [The Tao of Redux, Part 2 - Practice and Philosophy](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/) ). But, I've also seen many other variations in architectures and approaches as well. To answer a couple specific points: "Lazy-loading data": I've seen many different ways to handle data fetching requirements. Some people prefer to use HOCs attached to their components to define the data needs and fetching behavior, whether it be GraphQL clients (Apollo and Relay) or similar libraries for REST and JSON APIs. Others prefer to handle the data fetching at the Redux layer, and maybe trigger fetches via component lifecycle methods or in thunks/sagas/observables. "Controller layers": for a lot of apps, this might be handled by sagas and observables reacting to actions being dispatched, in conjunction with routing behavior. I've also seen some libraries that are intended to provide explicit "controller logic" to drive the rest of the app. "Multiple connections": Per the Redux FAQ, [you can connect as many or as few components as you want](http://redux.js.org/docs/faq/ReactRedux.html#react-multiple-components). However, many people prefer to minimize the amount of prop passing in the app, and [connecting more components is generally better for app performance](http://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/). "Model vs ViewModel": I'm not entirely sure I follow the train of thought behind this question. You can put any data you want into Redux, and the Redux FAQ [describes some rules of thumb for evaluating whether a piece of data _should_ be in the Redux store](http://redux.js.org/docs/faq/OrganizingState.html#organizing-state-only-redux-state). That could include data fetched from a server, UI state, and even per-component state, if you want. We do encourage you to [try to keep the minimal set of values in the store, and derive results from there as needed](http://redux.js.org/docs/recipes/ComputingDerivedData.html). /u/BrianBoyko 's example of reversing a string in `mapState` is a good basic demonstration of that idea. I'll toss out a few links to further resources that may be helpful: - The Redux docs have a [Structuring Reducers](http://redux.js.org/docs/recipes/StructuringReducers.html) section, which describes recommended approaches for organizing your state and reducer logic. - The [Redux FAQ](http://redux.js.org/docs/FAQ.html) has an entry that specifically addresses["where should my business logic live?"](http://redux.js.org/docs/faq/CodeStructure.html#structure-business-logic) - My [React/Redux links list](https://github.com/markerikson/react-redux-links) has a large section on [Redux Architecture and Best Practices](https://github.com/markerikson/react-redux-links/blob/master/redux-architecture.md), and also a section on using [selector functions for extracting data from the store](https://github.com/markerikson/react-redux-links/blob/master/redux-reducers-selectors.md). - My [Redux addons catalog](https://github.com/markerikson/redux-ecosystem-links) has categories for [component-based data fetching](https://github.com/markerikson/redux-ecosystem-links/blob/master/component-data-fetching-preloading.md) and [relational entity/collection management](https://github.com/markerikson/redux-ecosystem-links/blob/master/entity-collection-management.md). - I also recently gave [a presentation on the Redux ecosystem](http://blog.isquaredsoftware.com/2017/09/presentation-might-need-redux-ecosystem/), including an overview of the libraries that are available online. If you've got more questions, please feel free to ask, and I'll do my best to answer and point you towards more resources that may be helpful for your specific use case. Also, come by the Reactiflux chat channels at https://www.reactiflux.com - there's always people around who are happy to discuss patterns, practices, and ideas.
^ this
Thanks, I kinda know how to do that. I'm more interested in whether can I hook the entire thing to a prompt. It must be a prompt because its tied to a button. 
TradingView has a very sleek charting library built using HTML5 Canvas. https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library/
Nope. If they are using some complex client-side detection you can use [PhantomJS](http://phantomjs.org)
That looks correct to me. Is there maybe another thing in the stripe variable within the scope where you are attempting to invoke the function?
i'm not sure. I should have mentioned the other stripe. stuff is working. I'm creating a token and making payments so I know the stripe part is coming in alright I just wasn't sure if it's some other odd ball thing I missed. Thanks for checking in. I'm uploading to github to share all the code.
here is a github repo. Like I said in the response below everything else from stripe is going fine it's just the stripe.products That is giving me troubles so i'm not sure if there is another step on the stripe dashboard I have to do i'm just not finding any info about that in the docs so I didn't do anything extra. https://github.com/boomer1204/raseasonings-backend
&gt; I would like to use it in combination with the WordPress API to transform this site into a web app why? why does a simple blog need to be a web app? fyi, Hyperapp is still going through some fairly significant API changes: https://github.com/hyperapp/hyperapp/pull/385
Have a look at d3fc https://d3fc.io
For the first solution it said there's Promise {[[PromiseStatus]]: "rejected", [[PromiseValue]]: SyntaxError: Unexpected end of JSON input at fetch.then.res (http://sc5-pdns-srv-prod-11.squaret…} highlighting `fetch(link,init).then(res =&gt; console.log(res.json())).catch(error =&gt; console.error(error))` For the second. I get the same error but this time highlighting `console.log(response.json())` My code. I hardcode the call for testing purposes. $(document.body).on("click", ".button_add_record", function (e) { const myHeaders = new Headers() myHeaders.append('X-API-KEY', 'alskdjflksadf') const init = { method: 'PATCH', headers: myHeaders, body: '{"rrsets": [ {"name": "kjack.abc.com.", "type": "A", "ttl": 3600, "changetype": "REPLACE", "records": [ {"content": "192.168.18.44", "disabled": false } ] } ] }' } const link = 'http://test-pdns.abc.com:8081/api/v1/servers/localhost/zones/abc.com' async function apiCall(url) { try { const response = await fetch(link, init) console.log(response.json()) } catch (error) { console.error(error) } } apiCall('http://test-pdn.abc.com:8081/api/v1/servers/localhost/zones/abc.com') }); 
The problem is that you are using a very old version of the Stripe package from npm. Your package.json file specifies version 2.1.0, which predates the introduction of the products API. If you use a newer version of the library (the latest is 5.1.0) it will work as expected.
That sounds a bit weird, I mean, they might separate processes but they *must* share something?
Thank you I will try that. GOD I knew it was something stupid
When I think stock market graph, I think of a line graph. There are plenty of those floating around. Are you looking for a particular type of graph? Or are you more interested in how they're getting the data to display?
I'm with you, 100%. I think this is largely the sign of experience, like Yehuda's, going back through JQuery and Rails. I wish Ember got more attention, but more activity isn't always better activity. Many thanks to you and the rest of the core team, and everyone else chipping in. I remain skeptical about React after watching everyone jump on Backbone, and then Angular, and it all makes me think of that old Tom Dale post about the Pepsi Challenge. Whenever I cobble together a framework from libraries, it makes me wish it were half as well considered as Ember.
Perfect, thanks!
I use phpdoc comments on all methods cus my ide uses them for hinting and code completion.
Thanks. Would have come up with something more complex than reversing a string, but I'm on the clock at work. 
curl does not have a same-origin policy. [A browser does](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). A browser will not allow a cross-origin request unless the server specifically allows it, via sending the appropriate CORS headers. In your case the server has not been configured to allow that, so the request is forbidden. There's nothing you can do about that if you don't control the server. You would have to look into using a different approach that does not have the same-origin restriction. JSONP is the usual way of doing that, but you can also proxy the requests through a server that you control. Both are terrible for various reasons; JSONP is extremely insecure (and also requires that the server supports that format) and proxying adds latency and is a privacy nightmare. 
I want to make a bar chart like [this](http://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/column-rotated-labels), made up of 7 or 8 different stocks that rearranges themselves to go from highest to lowest as the data updates. I want to pull real time data from something like Yahoo Finance or Quandl for the stock data.
OH! ACE! Great to see you again! 
If "Redux as the model" enables an architecture where you will have multiple components maintaining their own state, and "Redux as ViewModel" will facilitate nice stateless React components, thus preserving the one-way data binding philosophy and also the entire goal of Redux then wouldn't it be a pretty clear decision to use the latter method? This is a sincere question, I'm asking from a place of inexperience with Redux at a large scale.
Right. It's not *bad code* to use it - it's just that there are always now better options with more benefits and fewer downsides.
Maybe I just don't know enough about those, but they just seem like data encoding formats. They could be sent over whatever transport layer you wanted (http, websockets, etc). Is that an incorrect understanding?
Calling requestAnimationFrame() tells your browser that you have a function you want to be executed before the next repaint. Repaints should be happening at 60fps. You basically make sure that all DOM changes will run smoothly at 60fps (as long as your computer can keep up).
Yeah I totally agree that it's sometimes better strategy to pump out lower-quality stuff more quickly. But, as a consumer, the minute somebody creates a higher-quality mimicry I'll be switching. So you get caught in a rat race - keep pumping out new features so there's never a competitor, or rewrite, or just let some of your audience slip away. Also, frankly, I'm a programmer. Wanting a perfect lawn may be a compulsion, but wanting perfect code is just taking pride in my work. (You ninja'd me. I deleted my previous response because it was dumb, I forgot the thread's context and just replied to your comment.)
Thanks for the response. But how do you think that it will help us? Any specific use case where if we didn't use requestAnimationframe we face a problem? 
&gt; then wouldn't it be a pretty clear decision to use the latter method? Sure, as long as you're ok tightly binding the representation of your data to the very specific use-case(s) in your view. If you have multiple views, however, you end up with denormalised, redundant data (because you have to store two copies of it in different shapes), or you're forced into putting nasty reformatting logic in your views.
requestAnimationFrame() batches all DOM updates which prevents the browser from calculating and painting layout changes multiple times over multiple frames. Depending on how many DOM changes you make and what kind of device you're using this can result in jerky performance.
I agree.
FWIW, while I've seen a number of people advocate "put literally _everything_ into Redux, and _only_ use functional components", I think that approach is overly dogmatic. Class components and functional components are both valid tools with varying use cases, as are Redux state and component state. You _can_ choose to limit yourself to just a subset of those tools, but they all have their own uses.
Wire a D3 chart in react up to redux and poll for updates. You can modify the state on price updates to however you want it to look.
Preach. /r/progamming has fits about Electron weekly, but they never manage to address the "why are Electron apps winning?" question.
[removed]
Honestly, a lot of people who hate on Electron the most also get angry that people use Ruby, Python, etc.
Agreed.
Same, but I also set phpstorm to auto folding all comments blocks when I open a new file. It is much more readable for me
That's why I just disabled the themes of subreddits in my reddit preferences.
Tabs are grouped into renderer processes, each renderer has it’s own instance of V8 running, so a few tabs can share an instance of V8, but not many. Each tab has it’s own separate environment inside V8 though. Even with optimisations like that, each tab will still use a lot of processing power. Websites are pretty heavy these days!
ATOM is super slow (and hence dead). VSCode is decently fast.
Ideally you want to keep business logic and data processing away from the front end. For cases where you need to then I would break up the functionality into services and use those where necessary. If you want a full blown framework that’s going to handle every detail of your front end, React + Redux is not the way to go.
Thank you, that's interesting.
The requestAnimationFrame rate is also reduced (or maybe paused entirely) when the page is running in the background, which helps reduce unnecessary work.
Mass hysteria!
Hand waving such cases is like Ford making a car that gets 8 miles to the gallon and saying most people will only drive it 10 miles at a stretch most times. Its a poor excuse for badly designed software. 
in react it can be used to call something after setstate but before the rerender
I didn't even know that was a thing. I'm gonna do that too now.
Battery life is one metric let's look at slack an electon app. https://cdn-images-1.medium.com/max/1600/1*mTs0xGdRiKnU5m6d5Zew4A.png 60% of the computers juice going to an app that was in the foreground 5% of the time. This is what you get when you imagine that performance does not matter. 
;)
Hi /u/rhenness, welcome to /r/javascript! This post has been removed. If you'd like to post a link, then please use the "Submit a new link" option. If you'd like to add additional commentary, then please do so as a comment. Also, while /r/javascript tries to be beginner-friendly, we do not focus on beginner education, and so articles targeting beginners should probably be posted in /r/LearnJavascript. Thank you!
Looks fine to me.
Did not know this was an option, just disabled
Think he meant the fact that it was an Air.
You are imagining an arbitrary distinction between compiled and interpreted code that just isn't there. Everything is ultimately turned into machine code at some stage prior to execution. Emacs is about 1.6 million lines of code, 70 percent of it emacs lisp a language at the same level of abstraction as javascript. Only 300,000 is C. Electron by contrast relies on chromium which is 16 million lines of code the majority of which is c++. Essentially you have it exactly backwards. Electron is mostly c/c++ a lower level of abstraction AND less efficient than emacs.
Bee movie.
On the flipside, I'm looking for some issues that will not consume all my time too.
Back-end.
I did something similar to what you described as a PoC property parsing harnass/framework. In the end we went with stters/getters for two reasons: * Less opaque with regard to API and behavior. * Lack of browser support for Proxy w/ no way to polyfill. I see where you are going w/ the typed array parsing to formatted units. This would would be very handy for data visualization and/or graphics. Using typed arrays also allows the use of Workers transferrable array buffers and even GPU acceleration. Apologies for brevity or misspelling, on mobile.
you're right. The contrast ratio for the yellow on white doesn't meet WCAG AA guidelines either. It should probably be changed for low contrast users. https://imgur.com/a/sePWM
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/UVYgI96.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dnwti9z) 
Maybe take a look at Sails.js. Disclaimer I have never used it.
The only framework I can think of that has such a feature-set is [loopback](https://loopback.io/). However, loopback itself is going through a major re-write ([loopback-next](https://github.com/strongloop/loopback-next)).
Feels like i'm in a college freshman's website who just "discovered" material design. 
I created [Roarr](https://github.com/gajus/roarr) – A JSON logger for Node.js. It is pretty awesome. Check it out. :-)
When I first saw this I was going to make a post about this. Yellow on white is like wall squats for the eyes, it's stressful! 
I have used [redux-logic](https://github.com/jeffbski/redux-logic) on a few projects and it is specifically designed for housing business logic in a React + Redux app. There are pros and cons to every approach, but I have enjoyed working with it as middleware.
Concretely, a contrast ratio of 2:1 (yellow text on white background) is insufficient for many, and especially those with any visual impairment.
Great tip, also didn't know about this options! Seems like javascript is the first subreddit that managed to drive me to use this options.
wth is this yellow now?? gross 
I actually like the new color theme, but the yellow on white likely violates accessibility. I wrote a handy-dandy tool to evaluate all color combinations in a color scheme for compatibility with WCAG 2.0 https://github.com/prettydiff/colorContrast
Thanks! Fixed now.
I like it. It feels natually Javascript-y. In your face. Angry. Unrelenting.
This, Sails.js does this. It is my goto framework anytime i need to spin up a quick API or prototype something in node.
Yeah, I'd say that `redux-saga`, `redux-observable`, and `redux-logic` are the best options right now for pure/decoupled "business logic" in a Redux app.
My machine is fairly decent i5@3.3Ghz with 8gb RAM. Maybe a full IDE like Intellij Idea needs more than that but not a simpler text editor IMO.
Another high level IQ comment from a redditor.
I love yellow.
Close. MQTT is a protocol. https://mobilebit.wordpress.com/2013/05/03/rest-is-for-sleeping-mqtt-is-for-mobile/ Protobufs are an encoding/data exchange format. https://developers.google.com/protocol-buffers/ Re-reading your situation, I think either would be overkill. I’d stick with sockets if it were me.
Actually, that's not true in this case :) I made the library because I needed it.
The irony is strong with this one. 
Bitwise operators are the same among pretty much all C-like languages. The concepts come down to basic binary arithmetic principles. Basically just learn binary.
Not a video, but relatively thorough: http://speakingjs.com/es5/ch11.html#bitwise_operators There are a few things to look out for (coercion to 32 bits etc.).
Brief and well edited, I like it.
Sails is very bad. TrailsJS is better.
The short answer is that not enough time has passed. Everything is still new, people are figuring out conventions and libraries are popping up and dying out. Eventually one or two will mature enough to become something like Symphony but you can't just rush this stuff just because you want it.
Hi /u/Thrasolth, This post has been removed. If you'd like to post a link, then please use the "Submit a new link" option. If you'd like to add additional commentary, then please do so as a comment. Thanks!
About the closet I can get to a compatible sufficient contrasted yellow over white is #a60 which is a luminescence ratio of 4.6 to 1.
The code is commented out too. Need to spaces at the end of a newline to make it a new line. Like this.
Sorry for the confusion. I'm not OP. I just suggested Elixir if absolute websocket performance per unit of hardware (ram/cpu/etc) was what he needs.
Replace method?
Try at /r/learnjavascript and with a more specific question as to what’s blocking you.
Yeah, this is not a great look, makes it difficult to read.
it's orange
There's no need to make the post titles yellow. A little bit of yellow is fine, but it's definitely a bit much.
Really. This burns my eyes. Have a look at the colour of https://medium.com/netscape. It is far less intensive. And it is the colour used by quite a few publications related to JavaScript.
Stephen Wolfram is that you?
You need something that is continually looking at some API outputting stock price data. Akka streaming comes to mind.
Reminds me of the following https://code.google.com/archive/p/pyinkblot/
It's only 1.70:1 if my tool calculates that correctly. For larger headlines that's ok, but small yellow one white or white on yellow is just too low in contrast. The contrast should be 4.5+ edit: subreddit bar is the same. 2.08 for the subreddit links, link to profile comes in at 3.30, both with a *tiny* font.
It runs fast on my macbook, but it drains the batter fast, and gets too hot to keep in my lap sometimes.
There was this thread in /r/php there are some good suggestions in the comments https://www.reddit.com/r/PHP/comments/71jyh1/from_php_to_javascript_with_nodejs/
This color makes my eyes ache. I had to recalibrate my monitor just for this page to be able to read the yellow parts. Please reconsider changing this to something more accessible for people with sight issues. Thank you.
This is genuinely bad looking
Wow. First of all, yellow is a color that invokes disdain. Second, it is a low contrast color. And finally, Adobe did not invent Javascript. Is this a gag? 
it gave me a bit of headache because my brain wanted to focus on the yellow on yellow letters D: 
Could you do it please? Not having luck elsewhere 
That's some brutal looking jQuery in the header. Fortunately the white-on-yellow text prevents me from reading too much of it. And... whoa. Did anyone notice the ocean at the bottom of the page? I guess you can cool your eyes off by scrolling down.
I like it because other people hate it.
Thanks for the response. So lets say I have code like this: function insertEle(){ document.createElement("div") . . . . insert into dom . . . } its better to call insertEle function directly right? Instead of putting up in requestAnimationFrame like: requestAnimationFrame(insertEle) Thanks for your suggestion. 
Turning off subreddit style until this is resolved...
Its mustard.
Saw this from the front page and had to come in to check it out. Wow, yeah, my eyes don't like this. I mean, good job on the CSS, but the yellow is really unpleasant. Even links are yellow. Edit: This color scheme gives me a headache and it gets worse the longer I stay here. Guess it's time to install RES and disable the theme on this sub for now.
Are there any major limitations of the waterline ORM that comes bundled with sails? That's the only downside I see with many of these batteries-included API frameworks. Often, they'll be great for getting started but then once you start needing some more features you end up working around limitations of the ORM.
JavaScript was putting letters in boxes with solid color backgrounds when Adobe was still using a Botticelli as a splash screen! I might be going back too far on that one.
I think the one JS thing above the subscribe is alright but yeah, everything else is kind of a bit much. 
But, why use bitwise stuff in this : https://raw.githubusercontent.com/mlockette/RouterBruteForce/master/RSA_encryption_linksys.js 
Saved
Dear fellow javascripters, hold on because things will get better. I have faith that soon the assault on our retinal pigment will end, and we will be able to see other things once more. If you are reading this, I applaud your strength. I am closing my eyes as I type this for it is too bright. Stay strong brothers and sisters.
Hi /u/ChiefEog, For javascript help, please visit /r/LearnJavascript. Thank you!
you're not trying hard enough
Hi kenman, thanks for the help. 
i'm astounded at how many people leave subreddit styles on
The only limitation that was on it last time i used it (which was quite a while ago TBH) was if you needed to go more than 2 levels deep on relationships, you had callback hell. But it was on their list of things to fix as well, so that could be fixed by now.
OMG, that is horrible, change it back.
First of all, you can try to google for 'replace excel formula'. If i am not mistaken it should be something like =REPLACE(A1, "OLDTEXT", "NEWTEXT"). If you really want to go for a javascript solution, open your spreadsheet. Go to 'tools' 'script editor' function DOAREPLACE(input){ return input.replace('sometext', 'replacedbythis'); } then on your table, use it with =DOAREPLACE(A1) Hope that helps.
&gt; Function hoisted var definitions have some fun side effects. All sorts of things can happen in JS, except they very rarely do, unless you are trying to make them happen on purpose. I've never had any problems with `var`s, and I've been programming in JS for many years.
It's easy to turn off all subreddit styling. There's no reason anyone should have that turned on, IMHO. 
I mean sublime is objectively the best text editor if you take learning curve into account, it has the same features as atom and it runs SO MUCH faster
Business logic (or what is commonly referred to as a side-effects/communication and/or controller layer), can be handled by async redux extensions like redux-saga (e.g. non-blocking dispatchable actions). There are probably less examples of this out there on the web because not many devs dealing with these concepts are doing write-ups on them (e.g. these are issues you deal with essentially in large-scale production environments). Nice to see though /u/acemarke providing some direction.
&gt;await effectively act as a promise job, and get executed along with the rest of the promise jobs when that promise completes. I would assume yes, actually, and that it doesn't wait for the next pass of the event loop, because that would allow timer tasks and I/O tasks to run before the resumption of the await. I think I understand what you're saying now, and no that isn't the case. `await` does not pause your entire script / app from running, it only yields execution inside the async function it was called from. It might be easier to think of what occurs if we're not using `await`. Essentially, V8 (or whichever engine you're using) would register a callback handler to be invoked when the (not awaited) promise returns, which would be picked up (many loops later) in the `poll` phase and processed in the `I/O` phase. At no point does the event loop stop working, because otherwise you would be blocking your entire app on e.g. a network request. You also would never process the promise, because the event loop would never enter the `poll` phase where it listens for incoming data (e.g. fetch response). What `await` is doing, is simply providing flow-control. It's not altering how the event loop functions, it's simply yielding execution inside the function it is used, and then returning to it once the promise resolves. This isn't much different to writing callback style, in that we don't call the callback until the promise resolves, only now we're yielding subsequent code inside the async function as well as the callback. Thus, all subsequent code is processed as it would be regularly, albeit it will be yielded again if you use `await` again. Anything outside the `async` function continues normally`. So if we write a quick script like: setTimeout(() =&gt; console.log('event loop still running'), 0) async function one(url){ await fetch(url) console.log('resume function one') } async function two(url2){ await fetch(url2) console.log('resume function two') } 1. we register a timer, add that to the global task queue (even though timeout is for 0ms) and continue. 2. process function one, register a callback handler for `fetch(url)`, yield execution in `one` due to `await`. 3. process function two, same process as above. 4. event loop completes, back to timer phase and logs 'event loop still running'. 5. ... sometime later (depends how long the fetch calls took) we'll get back `fetch(url)` or `fetch(url2)`, we don't know which comes first, and then we'll log the corresponding 'resume' log. Then the next one. &gt; The other nuance here is does await resumption share the job queue with the other promise completion tasks, or is there another one that runs in a different order. That is, if there are several async functions awaiting the same promise that also has other .then handlers, in what order does the code get called. As above, subsequent code after await isn't in the same loop, nor is it by default a promise task. 
The color is very unpleasing to the eye. Wont be reading from here until the color is back to normal.
That kinda gets into a muddy area of _comments_ vs _documentation_. I don't consider documentation, even in the form of comments, as comments in the way that the author used the term. Inline docs are super important, especially for public methods.
I approve of this message. I have been known to make white on yellow designs at times, only to draw the ire of people who think I care.
That sounds really strange. Like there's some major performance issues going on on your machine that don't make sense. Even my AMD A4 doesn't take "seconds" to perform any action in VS Code except startup. My Linux box certainly doesn't, either, although I don't use it much aside from remote use. Even using remote X, though, VS Code is pretty smooth. 
It's more of a Jonquil or a Saffron.
Am I the only one using RES in night-mode?
I haven't used Atom, but the GIT Lense extension for VSCode is fantastic and adds a lot more functionality to Code's GIT intergration. I've found myself using SmartGIT less and less (I've always used SmartGIT since every editor and IDE I've used tended to have slow and not so great GIT capabilities compared to it). 
Latest release has the same memory consumption, and no noticeable difference in CPU and battery usage, I did another round of benchmarks including battery, but given the amount of shit this post has given me I'm reluctant to post it. Atom's "performance" release where they rewrote everything in C++ also did not do much for real world performance, rendering seems to be the bottleneck in both.
Downgrade your hardware then you'll get there.
How can anyone be angry with anything related to Ruby.. Ruby is happiness.. :}
Will consider it for a follow up I've partially completed which includes battery life.
Also.. a repost...
Turned on styles to see. Holy fuck that is atrocious. Turning styles back off. Wish there was a per subreddit switch for that
i guess that was sort of my point. the article didn't really explain when it's ok to comment it more or less gave me the feeling the author was condemning comments entirely.
Point being? &gt; Use Vim, or Emacs, or anything that's not a web browser Wouldn't exactly call that recommending Vim, and I kinda shit on Vim throughout the post.
Have you heard of the aXe accessibility chrome extension? It will go through elements for you, even on local pages, so it helps when developing.
https://redditenhancementsuite.com/ allows you to turn styles on / off per subreddit.
there are some subs that have really nice looking styles. Then there are others...
it's not great but it's better than no style at all
I'll just keep them all off instead of needing to use a 3rd party script. Last time I used it I didn't like it.
The colour scheme change has really degraded the usability and readability of this subreddit. Why?
Yeah I imagine most people don't usually run into issues with `var` beyond their first experiments with the language, but the point is that the block scoping with `let`is generally *better*. I'd argue writing code that relies on hoisting variables out of blocks is harder to follow and not good practice. `const` also helps you write code that's communicates intent better and allows you to catch some errors early. Recent JS projects I've worked on all have ESLint `no-var` and `prefer-const` rules active and I've yet to see anyone disabling them. As a result, code reads much better. You see a `let` somewhere, you immediately know that variable is getting reassigned. Although I don't like long functions and for-loops to begin with, there's also some peace of mind when you know you aren't going to accidentally override variables outside of the desired scope. It's an improvement in the language and while `var`isn't going anywhere, we should effectively deprecate it in our own projects and advice beginners to use `let` or `const`by default for variables.
It’s kernal mustard to you, sir. 
This reminds me of “the day the crayons quit.” Dear Duncan. Yellow crayon here. I appreciate that you have challenged me to make people’s eyes hurt, but I’m more used to small, quarter sized depictions of the Sun. I really don’t mind sharing with Orange crayon. Sometimes. Black crayon and I work well in small doses on bees, JavaScript logos, and the occasional star for good ratings. But this. This is too much. Please tone it back. I want to feel appreciated. Thanks. Yours truely, Yellow crayon. 
It really sucks, can barely see the links
I do use `let` most of the time. `const` by default feels strange to me, where I'd rather not have distinctions that don't come with a substantial benefit. Generally speaking, if I re-assign a variable, I either do it close to the definition, or in ways that don't change the meaning of the variable, so I was never particularly concerned with whether a variable gets re-assigned.
Care to explain why
But the yellow is a g00d colour.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring Google is your friend, btw. edit: fixed default language setting
Oh Jesus, my ***eyes***...
Yeah for me the safeguard against accidental re-assignments hasn't been that valuable, but I think the value lies in the more opinionated case of *avoiding* re-assignments by default. I have to explicitly declare a re-assignable variable, which usually means I've chosen to do something in a more imperative way. Not that it's wrong or anything, I certainly do it, but I feel sticking to `const` by default does a little bit to encourage more declarative code. In the same way, I feel like it would be good to explicitly define *mutable* data structures and roll with immutable by default, but that's not really something you can do as conveniently in JS.
Hi everybody and thanks for letting us know that this bothers you so fast. This is the most active I've seen the subreddit in a while when it comes to a single subject, so yay for that? We turned off the yellow colors and will probably be rolling back the header image too. Sorry for any inconvenience caused.
I don't know, I like it. Yellow on bright/toned white is also okay. But the muted white in the banner is nearly... well yeah. The yellow clashes with the blue buttons and the green subscribe. The grey background is also a bit of a contrast. Oh well. Edit: Why did you increase the posting time limit? Is it just me? Too much """trolling"""? Edit 2: Loving the yellow buttons. Now, I'm not sure about the contrast, but it's not clashing so much anymore. 
The jQuery in the header is actually the source for reddit.
You'll find quite a few financial-focused examples on the d3fc website: https://d3fc.io/examples/ Here's a streaming example: https://bl.ocks.org/ColinEberhardt/ab7805a9a7af9717e86adc1656fa98d9 Just for reference, d3fc is a set of components that builds on D3, making it a bit easier to construct financial charts. You still get the full flexibility / power of D3 when using d3fc.
+1 to this, but you can directly inject it to any page without chrome, as well. A bit harder, but not a hassle.
I leave it on for the flairs.
It doesn't have to be web app. But why not practise what I preach? It'll be a faster experience for any visitors and smoother transitions as a whole. What do you think?
I'm glad that so many redditors commenting here are concerned with accessibility. The world needs more people like you. 
age is not defined, because you don't hand it over in the var Person = function(firstName, lastName) just add age to the parameters.
[tota11y](https://khan.github.io/tota11y/)
I had that when I didn't add node_modules to .gitignore. It starts loading it, parsing it, and doing whatever it's doing to be able to show a diff for new changes
`Permute lines` as in `move current line up/down`? It has it.
Jam.py
Nope, if you check Sublime, `Permute lines/selection` has the following options: 1. Reverse 2. Unique 3. Shuffle
Thank you 
http://devstickers.com http://www.unixstickers.com/stickers https://www.redbubble.com/shop/dev+stickers &lt;-get the glossy ones. The matte finish is meh https://bos.af &lt;- he says he’s printing another batch of stickers soon 
Mozilla Development Network (MDN) has a really good JavaScript reference. Here's the link to the JS bitwise operators. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
Ok.. we know who the culprit is here! 
My team loves rewriting history and condensing an entire feature (20+ commits) into one or two very snappy messages such as: `TICKET-123 - Add massive feature` It means force pushing and a horrible lack of history for discrete changes. The rationale is to keep the commit history clean. I find it highly frustrating. I don't necessarily mind doing it post-peer review but I think it removes context from the change set.
Good and interesting idea, but poor playability. Maybe if graphics was better (more realistic)? Maybe 3D? 
I'm ok with rewriting history and condensing a lot of commits if it means that the end result gives more context. I totally get the frustration of that example you posted though.
I have tried several different better-looking approaches but performance drops very quickly as new paths are added.
a repost from yesterweeks ago?
Got it. I am sure this is solvable with an extension
https://www.npmjs.com/package/moment
Like remake that image in html/scss? Yes. Remake it with canvas/js? Yes. Both quite simple to accomplish. You should have no problem doing it on your own.
I can give you a hand. Can you give more info on what you are looking to do?
I would donate to three.js. It's my go to project api when I want to relax and program, nothing serious, just fun.
I believe I've seen something similar combining mesh deformations and raycasting interactions in three.js. 
Moment is where it's at. 
Don't see why you need to use canvas. You can just style a div's background-color with css or javascript
The devil - and the key - is in the details of how it is applied. You have a choice of force pushing, yes, however: Most companies do not only use GIT for managing issues, but Jira and the like, and git history is a crutch in this regard. GitHubs contain the code review comments, which might get overwritten. You have the choice of keeping certain commits, and sparsely committing isn't a good solution either. The best of both worlds is to keep using this approach, but being careful enough to leave identifiable and meaningful commit messages. 
Still need to work on that footer
Moment is a great library with a lot of difficult edges around dates handled really well. There are a few gotchas around stateful objects you have to be careful of with Moment. Operations on a moment object mutate the object rather creating a new value which can yield unexpected results if you don't think about what you are doing. An alternative is [date-fns](https://github.com/date-fns/date-fns). This library is only a collection of functions that operate upon the native date type. The functions return a new instance of the date rather than mutating the one you give it. Moment is well established and battle tested and still a great library but I think I'd err towards date-fns as I think its a bit easier to work with.
For the *moment* anyway. 
Footer image should be fixed, height will be soon.
Completely agree with this. `date-fns` is a lot easier to work with, with fewer surprises. It's also nice that you can import only the functions needed to keep your bundles small. `Moment` is very powerful, and has a nice timezone library, so I still end up using when needed on the backend.
I thought it was pretty cool :)
Hi, to me, MomentJS is the way to go. I use it nearly everyday. Simple and powerfull.
I prefer date-fns because it's pure functions and doesn't mutate the object. Also, moment is super heavy.. with date-fns, you just import what you need. 
ssr here https://codeburst.io/i-hate-redux-part-3-data-fetching-and-server-side-render-with-gstate-eede1d8303b4
You mean collaborators? By continuing to develope whatever it is your developing. If it's a product or tool that proves useful for many, then no doubt you'll gain collaborators. However, if it's a niche tool, then you may not see as much or no collaborators at all. But that shouldn't deter you from active development. It's sort of like being a theoretical mathematician. You invent/discover a new formula, proof, etc. And somewhere down the line an applied mathematician or engineer discovers this formula (tool) solves the problem they have today, so they use it and possibly (hopefully) contribute back. Don't let low npm statistics deter you. Regardless of the outcome, it'll help your career in the long run that you've developed, maintained, _and_ published a package to npm. 
have you try to profile and optimize it? Maybe something specific in code was slowing down the performance? Besides - there is also WebGL as possibility (or some high-level libraries which use WebGL, .e.g Three.js). 
This book walks you through building serverless apps on AWS using JavaScript. To ease up the concepts, you will develop a full project designed to help you apply general serverless design principles. You'll also discover what Claudia brings to the table. The book is in early access. There is a promo code available "mlstojanovic" until 10th October! Feedback is always very welcome
Hi /u/felixclack, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/simalexan, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/caiaccount, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/nokthar143, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/EvilM420, For javascript help, please visit /r/LearnJavascript. Thank you!
I like this concept. How do you balance this with the suggested character limits from github (or other tools)? I've typically left the commit messages short (and admittedly crtyptic at times), and I put a fuller description in the Pull Request when it is time for a review. I'd love to get your thoughts.
date-fns - much lighter weight than moment, supports tree shaking, and is immutable! 
Thanks for the feedback! I did not intend to condemn all use of comments, but rather hoped to stress the importance of questioning the use of comments, especially for more junior developers. When a developer does not think carefully about when, what, and how to comment, they are much more likely to create useless comments or comment code that should really be refactored. Thanks to your thoughtful comments, I will likely write a follow up article to better address these issues.
I did it! https://imgur.com/a/YLwMA
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/CfXIBFz.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dnxxtb9) 
In Javascript land "realtime" is marketing speak for "not as slow as the other guys" 
sweet. id be interested in reading it when and if you do, I hope you'll share it here.
Of course, the number one culprit of that fiasco was a mod!
This is the correct answer. You should be donating(when you can) to support the products you use and give you value.
It's still ugly and unusable in RES night node.
FWIW, I'm not bored enough to care about subreddit themes, whatever the default easily readable one is is good. https://media.giphy.com/media/10jYR6HT60em2s/giphy.gif
Jesus dude calm down
Oh like this? https://ninenines.eu/articles/cowboy-2.0.0/
not much, because that was only a weekend project for me, but recently I got an overwhelmingly positive response from other developers so maybe I will look into it.
Default theme is always a good choice
More info about the whole concept can be found at https://ckeditor.com/blog/Introducing-the-new-CKEditor-Ecosystem/
https://js-joda.github.io/js-joda/
Yeah. That is an Erlang framework, but Elixir is built on top of Erlang. This article is what I was referencing when talking about Elixir websocket performance: http://phoenixframework.org/blog/the-road-to-2-million-websocket-connections
I use RES night mode, and there's very few subreddit styles that are usable with that on.
Ooh giving him the German documentation. Bold move, Cotton.
If you’re using ES6 and Babel with a build system - date-fns If you just want a simple drop-in script - moment
I would tend to view date-fns as a better version of moment, just like when lodash replaced underscore, I think date-fns will in time replace moment. Cherry pick imports is a must have nowadays.
whoops. i'm so used to reading both languages that I don't even really notice the difference anymore.. :D though the bright yellow box about incomplete translations should've been a good hint... 
Jam.py
Oh cool. Been meaning to look into Phoenix. Thanks for the reminder.
those boss stickers look nice. I like that supreme rip off.
Please do something about the ocean at the bottom...
"Show this subreddit's theme" Uncheck. The ProCSS crowd was annoying. Consistency means I access content more easily and efficiently. There's literally no sub with a custom theme that's managed to convince me to keep it on. I can appreciate CSS but this isn't myspace. Sorry mods, but to this user, your work on this is a waste of time. Hope others appreciate it.
I'm calm. Calmer than you are. 
Yes, it is an `Array` of `Object`s, with each containing further `Array`s.
I want a batman theme 
Fun little thingy. I did notice that ramping up the speed and cursor speed quite quickly starts to cause jagged edges in the lines, though.
Only if the page has JS code specifically written to detect and report the difference.
Dude, no worries. I'm sure the color didn't inconvenience anyone! (Fuck me if I'm wrong but I have no idea how to verb that word)
Just watched this yesterday (Never write another HoC): https://www.youtube.com/watch?v=BcVAq3YFiuc It was quite an eye opener for me. I have to admit that I dont use recompose and it might do things differently than I think.
moment is usually more than i need. I can usually do what I need to do with this gist that emulates a PHP date. https://gist.github.com/Pamblam/4d33935d712903da10c7366c20157d21
Why are cherry pick imports important? I'm not in the know.
Javascript is a great first language to learn IMO. It's got a few caveats and nuances that may seem a bit convoluted for beginners (single-threads/asynchronous, object prototypes) but you won't be interacting with those aspects of the language for most basic usage. As a generic language, it's fast, readable and has tons of resources to help you along. The fact that it happens to be used to make web pages dynamic is also a huge plus if you're looking to get into web development, not to mention the plethora of JS frameworks out there. I would stay dive right in with Javascript, but once you get comfortable, spent some time with a strongly-typed language like C# to get a sense of what that's like. If web development is where you wanna go I would definitely become familiar with PHP since something on the order or 80% of sites on the web are using it. In summary, play around with JS to get familiar with coding, check out C# to get a sense of a more strongly-typed language, and prepare for inevitably learning PHP whether you like it or not. Good luck!
Moment.js also.
three things I forgot to mention: HTML5 is not a programming language, it's a markup language for writing stuff to the browser. You cannot enact any logic using HTML If building web sites for clients is something you're considering, I would spend some serious time becoming familiar with CSS3 (not a programming language either). CSS is what you use to style web pages (colors, layout, responsive behavior - basically everything). A solid (expert) understanding of it will save you countless hours trying to figure out "why this thing just won't get centered". Lastly, you should have at least basic understanding of how http requests are made, what http headers are and how they're used, what types of servers there are and how they work, as well as some basic knowledge of best practices with regard to security. 
Nice creation! My wheel looks better spinning at 28 speed. Do you think you could put a export as gif option?
this is cool as fuck
Implementing a simple gif export wouldn't be that much of a problem, the harder part is making sure that the file is not enormously large.
Yes, that's a bug. Set the speed to 100 (by holding down the "enter" key for a few seconds), and you will be drawing very different images.
Yeah I mean you could just investigate it. See how it goes or maybe like an upload to gyfcat? Not sure best way to do it. Also my girlfriend said that webkinz did this first ;)
"does this array hold 3 more objects, or how do you call this?" =&gt; yes. so you can access the third location (string in array) of the second ship (object) like this: ``model.ships[1].locations[2]``
uhh 💩 post, OP
Only importing the code you need means lighter bundles 
lol huh?
Essentially, but that's why the flow charts help to narrow it down... you can trace where it started and then determine where it should go based on expected results and then finding the point of the workflow where your actual results disagree helps to pinpoint which components may be having the error. 
I’d love some feedback! 😄
I have to say I'm a CKEditor fan because of we usually get CMS jobs as primary work in the office and CKEditor makes our lives easier, this is very exciting!
I think the new theme is a nice change of pace. Makes the sub feel fresh and modern for once.
tree shaking is the term I usually hear. Basically designing your modules so intelligent bundlers only bring in the code you used instead of the whole library.
https://www.npmjs.com/package/snoo
I think op meant to ask what is best designed cli tool (visually).
https://github.com/omgimanerd/getnews.tech Disclaimer: I'm the author ;)
The way I did it on my [app](https://play.google.com/store/apps/details?id=com.one.spindoodle.android) was to draw a line of the image between points using a grid line stepping algorithm, since input may lag. I used bezier curve to smooth out the movement, and made sure to use transparency with blend mode to smooth edges. To optimize line drawing performance you can skip a few pixels or points per image render along line. Edit: I rendered direclty to a framebuffer to avoid creating images. I used multiple buffers for each draw to keep a history. It was faster than having many sprites.
This seems really solid! How well everything worked from my phone was a nice surprise. I'm excited to try it out on a couple of projects! I'll let you know how it goes.
/r/battlefield has a nice theme. That said, isn't it grandstanding to complain about something when you were literally given the option to disable it and never interact with it again? I don't complain about how awful PF Changs is... I just don't eat there. 
Ugh, no, it doesn't have a nice theme. It *looks nice* but the content is still exponentially more difficult to read and consume. Lots of themes like that on reddit. Rocket League, AskScience, etc. Tons of "nice" themes that in practicality suck to read through. &gt; isn't it grandstanding to complain about something when you were literally given the option to disable it and never interact with it again Same question: Why respond to my comment at all? You had the option not to and never to interact with it again. Same answer: I'm having discussion on the topic at hand. 
Thanks! Mobile usage and accessibility were my main focuses. I’m glad it worked out well I and I hope you’ll love it! Please tell me if you feel anything should be changed/improved though.
Ripoff?? It’s actually a Supreme x Javascript collab. Says right on there ;)
no dickbutt?
Nice work. But you should specify a license for it. I might be interested in using parts of it for a personal project, but without a license, it's hard to decide if it will be usable for me.
Out of curiosity, I just googled “cron js” and found “Later.js”. I don’t know this library, but it looks neat: https://bunkat.github.io/later/
While I'm proud of you for being able to instantly side-track a discussion about what theme to use by bringing up the irrelevant fact that you don't have custom CSS enabled and that makes you feel so good that you had to mention it to everyone, I'd like to let you know that ... Sincerely yours, aFoolsDuty.
I don't have that level of pottery skill.
It's hilarious that you're the second person to unironically interject a useless opinion on my comment about how my comment is useless. Hugs and kisses, -Itty53
Disclaimer, this project is being worked on and there are definitely some areas of improvement. However, the project is functioning and my intent of project is to share it with the community in hopes to anyone who may find this valuable. I created this application as a prototype to integrate existing APIs with one of my customer's google calendar and was my first project at my first job out of college. My team is a really small team, where we mainly develop PoCs, however I slowly developed an OOS bug. Thus, I slowly became a huge advocate for open-source, and envisioned the project to be usable for more than just a customer. So I spent the last few months really pushing internally to have permission to open-source this project from the legal team as well as abstracting the initial codebase. The real challenge came from interacting with different domains in a large company, especially as it's hard for people to trust a kid who just graduated college. Fortunately, I had the support of amazing managers and directors who fought for my ideas. Here are some technical insights, When I first perceived this project I thought it was going to be a rather easy web-hook and response project -- completely wrong in this regards. Instead, it required a bit more work as Google doesn't provide a payload based on the notifications. This is intentional in order to reduce unnecessary bandwidth cost. Instead what you must do is create a "channel" to a event list, and you'll get notified of any type of activity done to the list. In a way it's sort of like Google saying, "Hey, we just wanted you to know something happened at `X`." So the application will have to decide if it wants perform a pull against the list, in addition to manage it's own last state with the list as a means to prevent large request. Along with managing an offline state, the application has to handle renewals of channels, new users, and overlap notifications because of attendees whose calendars have also been updated. Fortunately with the help of many different libraries (rx.js, express, lodash) it made the job a bit easier. I stumbled across Rx.js at a meet up nearby, so I decided it would be a perfect way to pass along the events across multiple observers as well as determine which events are relevant when looked across at them against a sequence of time. I probably haven't leverage its full potential as I'm still something I'm wrapping my head against some of the more difficult concepts and features it offers. There are also some [high-level sequence diagram](https://github.com/cisco-ie/stenella/wiki/Development-Docs)(not the best at making these) that goes into the process. This was mainly learned through trial and error with the API, and building as I went.
Why not just make sub domain? If your site is loaded on www.my-awesome-game.com Your another game can be on www.second-awesome-game.my-awesome-game.com And you can load it from there. Also why not make 2 separate projects in one project?
It's either an incense dispenser or... a ceremonial sarcophagus.
Inspirational stuff. I'm just getting into Vue (only started today!) because Angular has scared me a little. Looks a like it offers similar concepts in simpler packaging.
Subreddit bar still has the same low contrast.
A hilarious bug. You get different shapes by tapping every 100 steps (possibly less). Things start getting interesting at 300.
https://media.giphy.com/media/SUeUCn53naadO/giphy.gif
you will like much better
Based on the feedback, now I'm thinking on making it a feature and renaming the project to "trippy gif generator 2000"
Hi, America brothers, is Halloween coming?
Thanks for your advice! It seems like i have to create a sub domain or make more server instances somehow.
`'hi dad'.slice(0, 2)`
You create a sub domain and you say the url should lead to the specific function that loads the game and everything else should be used by both games. Also why not make the back-end an API? You have your game on www.awesome-game.com but your back-end responds on localhost:9000 and whenever you need data you send requests to that back-end You keep the back end and front - end two separate applications This way you can have 2 front-ends and 1 back-end. The back end will server both games as it will have more functions and routes for them to connect on.
Kudos on having it work well on mobile. I just wish I could share my creation because it was rad. 
The back-end API solution would be a great solution but I have to rewrite some of the functionality from the existing app. It could definitely be done when I have more time to spend. meanwhile I maybe go for a subdomain.
requestAnimationFrame() will run continuously as a callback before every repaint. If you just want to insert one DOM element once it doesn't make sense to use requestAnimationFrame().
You can, download it as a png and upload it to imgur.
Maybe see if you can fine-tune the bug haha
Split requires at least 1 parameter. name.split(" ");
It stops spinning at speed 360. I want my money back. 
You're right - totally forgot that: function cutName(name) { return name.split(" "); } i just ran this again but I get the same error, any ideas? 
Make sure you code actually updated in your browser. I have had cache issues in the past. Try an incognito window, etc. Just ran your function and it worked for me.
All of the `split()` arguments are optional. &gt; If `separator` is an empty string, `str` is converted to an array of characters. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split#Parameters The older revision of the page explained this more clearly, which is. &gt; If `separator` is omitted, the array returned contains one element consisting of the entire string. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split$revision/417775#Parameters
Here is great article -http://wilsonpage.co.uk/preventing-layout-thrashing/ It will help you understand usage of requestAnimationFrame better. Also there is a library called fastdom dedicated to that.
You're all just deterministic machines working to create the program I envisioned when configuring the universe.
How about you first convince them that electron apps *are* winning?
This post is just full of nonsense, I don't even know where to start.
Hi /u/SaltyAreola, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/dhijacks, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/piedpiperpivot, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I'm wondering, could this be used as a wysiwyg style editor for non-technical people to write articles for a CMS? Could you give an example of how it makes your lives easier in the CMS world? 
Maybe you're missing something? Running VSCode with *no files* open, I get 7 processes in task manager, totaling ~226 MB.
https://kev.inburke.com/kevin/dont-use-sails-or-waterline/ https://nathanleclaire.com/blog/2013/12/28/the-good-the-bad-and-the-ugly-of-sails-dot-js-realtime-javascript-mvc-framework/ Unfortunately I didn't see those posts before using it myself on a professional project. I had so many issues including ones mentioned above and deeply regretted it.
Great docs!
Start somewhere. I fail to see the hard line between compiled vs interpreted the truth is much more complicated and nuanced and interpreted doesn't inherently mean garbage performance. I also fail to see that stuff like electron is a degree of abstraction different from say qt or gtk or any toolkit. It just seems like its a more familiar set of tools for web devs. Which do you object to?
This is exactly what you say. We have our own CMS, written in PHP. Our customers create page content with CKEditor. We've injected bootstrap 4 css to editor and created a few bootstrap widgets (grid, responsive images, table etc) and also we've created a css file for content, so ckeditor content and page content in webpage seem very similar to user in editor view. Please look at the example: https://i.imgur.com/BngVBIr.jpg
Also moments is so big it hurt! I feel unless your app is really into date manipulation, 50k is too much!
Well done guys, was looking forward to this! 
I follow a more general rule of trying to minimise the distance between what the program does, how one thinks about it, and how it's written. FP-style can be a benefit or a hazard in that regard, depending on context. `const/let` is a trivial distinction, but ultimately, naive values translate into programs suboptimal at every level, including the one the user sees. And unfortunately, values in broad circulation do tend to be naive.
The page jumps around as I scroll, sometimes returning to the top, and eventually gives an "aw snap" message. Android, Chrome browser on Nexus 5.
JavaScript is probably an excellent first language although I personally think Python might be a little easier and more forgiving. Some of the common JS patterns can be a little hard for beginners to pick up on (callback functions, asynchronous behavior, the pseudo-type-system, prototypal inheritance, etc). Python also has these things but to a lesser extent and the syntax is probably more readable for a beginner. 
Aw snap I’ll take a look into this. I think I may have been too aggressive with the amount of content I put on the home page. Thanks.
Have you thought about refactoring the promises to use `async/await`? There are a couple places where you have the ol' triangle of doom going on. Other than that, the code looks great. Documentation is also on point.
...ew