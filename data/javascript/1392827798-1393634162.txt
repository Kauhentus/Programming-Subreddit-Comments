It's cool, a week from now we'll have a Broccoli vs Gulp slideshow. In a month it'll be Fondue vs Broccoli.
Why would you want to do this? Are you interested in writing code like this because this is how you learned it in some other language? I **strongly** urge you to consider that JavaScript does not have *classes* intentionally and attempting to fake it with some pattern or convention is probably not as helpful as you might consider.
To be honest I wouldn't modify the prototype directly at all. Rather, I'd create a new "class" and instatiate an instance of it with `new`. E.g. var Foo = function(){}; Foo.prototype.bar = "Bar!"; var foo = new Foo(); foo.bar // -&gt; Bar! EDIT: I just realized that I didn't actually show an example of inheritance. var Foo = function() { console.log('creating a Foo'); } Foo.prototype.a = function() { console.log('Foo.a'); } var Bar = function() { console.log('creating a Bar'); } Bar.prototype = new Foo(); Bar.prototype.b = function(){ console.log('Bar.b'); } var bar = new Bar(); bar.a() // -&gt; Foo.a bar.b() // -&gt; Bar.b EDIT2: [Here's a related question on Stack Overflow] (http://stackoverflow.com/questions/2107556/how-to-inherit-from-a-class-in-javascript)
Why are you trying to insert a line break between the closing td and closing tr? I'd say this is probably your issue, a &lt;br&gt; tag is not allowed here and there's really no reason for it as closing the table row and opening a new one will... start a new row. &lt;br&gt; = line break &lt;td&gt;&lt;/td&gt; = table cell &lt;tr&gt;&lt;/tr&gt; = table row
As OP is the author of [this one](http://markdalgleish.com/projects/bespoke.js/) and mentions it in the presentation, I'd guess it's that.
also check out this article on writing fractions in HTML - doing this properly could greatly simplify your code. http://changelog.ca/log/2008/07/01/writing_fractions_in_html essentially you can write your fractions like this: &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;
It's using [Bespoke.js](https://github.com/markdalgleish/bespoke.js). Created by the OP.
ummmmmm..... Echo.js is an image lazy loader: http://toddmotto.com/echo-js-simple-javascript-image-lazy-loading/ You might want to rename your library. Echo.js is already really well known.
The way things work *under the hood* is that there is a primary scope chain to resolve references. This primary scope chain is the lexical scope chain bound to functions that allows closures. The secondary scope chain is an invisible immutable property of the language to allow prototypes. The benefit of prototypes is that they are supposed to be cached in memory for rapid execution, much like how classes work in memory for other languages. The intention of this series of experiments was to determine if there was a slower resolution time for prototypes versus closures. The various tests account for instantiation costs, which are largely insignificant in the real world but factor heavily in the first jsperf test, resolution costs in the abstract, resolution costs apart from instantiation, and so forth. You don't need *new* to set or retrieve a closure. Lexical scope is an immediately available feature of the language that requires no help or convention to access. You do need *new* when accessing a prototype though, because the prototype is only available at reference time upon an instance of an object, which is not necessarily an object-literal. This testing is about comparing separate and unrelated features of the language that are both references requiring resolution. It is not about patterns, and closure is not a pattern anyways. I urge you to not think about code, particularly performance testing, in terms of patterns (declarative) because it is a sustained cognitive bias. &gt; That's more than unnecessary, it completely defeats the purpose of using prototypes. The second perf test largely illustrates this with a greater than 2x performance gain to access prototypes when resolving the reference is separated from its instantiation. This does not mean, however, that there is no cost to setting or resolving references of either kind, which the other three tests do illustrate. A different test idea to make a perf comparison more realistic to practical application would be to assign a very large function to each the closure and prototype and then compare if there are significant gains from the cached state of the prototype or if modern browsers cache the large function either way. &gt; Your second test doesn't make any sense. You can cache a's return value rather than calling a() every iteration of the loop. In the case of this perf, you probably could cache the return value of a() since it returns the same thing each time, but that is not the point. It is a very practical and real world use case that you may need to call a function, or series of, in loop iterations that do not return identical values. &gt; The point I'm trying to make is that the reason to use prototypes over closures is that is greatly reduces the memory usage of your app. I will agree with that, but... you have no control over memory management in JavaScript. None at all, by any means. So, while valid, this point is largely immaterial much like the price of genetically modified red tea on a trade ship in China 85.25 years into the future.
good, but the author probably should have split the content in multiple pages...it is a really long page :)
Echo.js as image loader: "Initial commit" Aug 2013. EchoJS as ahead of time compiler: "Initial commit" May 2012. So yeah no, won't be changing :) edit: not that I'm laying claim to the name "echo-js", given that if you google for echo-js you see [other](http://www.echojs.com/) [uses](http://echoappsteam.github.io/js-sdk/docs/), with at least the Echo JS SDK predating both image loader and compiler.
I'll switch to Gulp if someone can find me a rem fallback plugin!
The doctype is decided by the SaaS CMS. I have no control. I understand doctypes. Thanks. 
Those modules aren't just there for if the user manually types in the url or reloads, they are also there for the back button....
Fast enough on Firefox mobile / Nexus 5. 
So no video?
I've been using them to track my single-page emberjs app for the last 3 months and it's a great service. What i like the most is that you get lots of helpful info on what the user had been doing right before he provoked the error. Their UI is also slick and easy to use. They were also quick to respond on a few questions i had and even implemented some of the enhancements i proposed. I guess the only feature i'd love to see included is support for source maps As for alternatives, i've used bugsense but they seem to be focused on mobile platforms and their js offering is not that well executed.
Fails for me in chrome, no plugins.
Thanks for that arbitrary list with barely any description to each framework. Very useful.
My first iteration which just supported functions did glue code for javascriptecore, v8 and spider monkey. It was interesting because you inlined native code alongside the JavaScript code which it split out using a preprocessor. Current iteration no longer depends on preprocessing the JavaScript code but it is currently javascriptecore only, but will probably extend back to the other engines eventually. Part of the iteration process was tossing out stuff that seemed like a good idea at the time but mainly just made it opiniated. Did the while writing and IDE thing when younger, can't really recommend it. Similarly part of my iteration process was to realign my tools back within commodity tooling. E.g. Better to work with vanilla JavaScript so source could be edited with any JavaScript editor, rather than creating yet another wacky dialect.
Well my experience was: * coffee-script not coffeescript for npm * no such brew llvm34, used llvm instead but needed to update my brew * needed to finagle llvm bin folder into my path to get llvm-config exposed * also needed to npm install -g node-gyp 
I got the code from a tutorial website, had to change it a bit to fit my needs. The image sprites are causing problems in Chrome (especially the "walls"). Other than that it should be fine.
awesome, thanks. Will fix README.md now. llvm34 requires an additional brew command: `brew tap homebrew/versions` I'll update my brew once I'm back on ejs machine and see if it's time to just switch over to the normal llvm formula.
http://liveweave.com/3hYQwy Fixed image references.
Have you looked at [gulp](http://gulpjs.com)? It sounds like your cup of tea.
I'd also be interested in hearing what the benefits of this are over something like logentries or sentry. 
Hmm that looks interesting. I've been happy with Jake (https://github.com/mde/jake) though I would like to use something that watches for file changes. I've been meaning to try Broccoli (https://github.com/joliss/broccoli) for that, though Gulp and Jake both look like they have file watching capabilities I think Broccoli's tree model sounds like they stepped it up a bit. There's kind of too many choices.
Great! but one issue...In Chrome the lamps and enemies move too, while you are moving...
I thought that pluggin got rolled into the last build of jQuery, I hear if you run it in Chromium though you still need to use rickroll.js library, it keeps the program in a distraction loop by linking to release confirmation of Half Life 3 that end ups being infinitely a rick roll.
holy fuck thats nice
So this isn't intended for a node.js app?
Not for me they dont.
No, this is meant to instrument web browsers for errors. Currently we're solely client-side browser focused.
well that was 20 minutes well spent at work
Good thing for me that reddit isn't my life! However, are you saying you prefer to see memes on a subreddit about web development? It's pretty frustrating when you are subscribed to hear about new ideas in webdev.
Thanks! If we haven't already met, make sure you come say hi at the next one on March 12 :)
:( 
Another more test. I prefer Model1 case but sadly is the slower way… http://jsperf.com/creating-model-efficiently-with-privacy
Yep, that's right. I scaffolded the presentation using [Bespoke.js Generator](https://github.com/markdalgleish/generator-bespoke), another open source project of mine.
20 minutes of my own time well spent too. I can't seem to break it. Someone tell me how to break it. I must break it. 
Same here.
Related: https://plus.google.com/+PaulIrish/posts/12BVL5exFJn
I can't believe there are still people who haven't seen this yet.
Will do.
commenting so I can look into this more.
Your teacher is wrong. The case label can't be an expression so it would take at least 30 case labels, then for each return value there would be a break. There isn't really a "good" way to do this. You could have a 30 length array with the return values and if it comes back undefined then send back invalid. Problem then is a lot of repetitive values stored but it should be fastest way for a lookup.
I see, thank you for clearing it up for me. I will stick to my code, for readability, but nice to know other practices.
Fair enough. We're using it on a big site with lots of developers so it's nice to have consistency across pages, but I could see how it's not that enticing for general use.
There's something really wrong about the way the water climbs around the ball when it's almost at rest near the surface. The water's surface tension feels all wrong, neat lighting though.
Curious whose fault it is that parseInt is missing the radix parameter... Ask your teacher to provide his version of the solution after the assignment has been submitted. I'm actually curious if he did this in a convoluted way and as such rhysbrettbowen is spot on in his advice.
It's not an assignment, my classmates are working on understanding algorithms, using no programming languages, but since I already know it, I decided to do it using javascript. I think / hope he will show me next time I see him. The radix parameter is my fault, I am sorry about that.
Using switch for comparisson: http://pastebin.com/VCHBP4ye
Really wish your fixed header didn't [take up half of my reading space.](http://i.imgur.com/RS52llF.jpg)
I apreciate it, and I certainly will.
So simple. Send me 100K in DOGE. =)
Get rid of the "else" statement at the end and make the variable have a default value. Then do you switch statement. No need for a "default". var x = prompt(); var a = parseInt(x); var p = "Invalido" ; 
This is a joke of an assignment. Drop the class if you aren't willing to learn how to do this.
Uh. No. It's "live-bound". Pshaw.
From now on, I'm calling my event listeners: "Event-driven finite update streaming thingies"
I haven't checked, but the site may prevent CORS (Cross Origin Resource Sharing). If CORS is disabled (disabled in all browsers by default for security reasons) then you cannot send AJAX requests from one domain to another. One way to check if a website supports CORS is to look at the headers your browser receives from the site (open up the network tab in the dev tools in your browser, then navigate directly to the API endpoint.)
Write the code the 'right way' then run it thru a minimizer. ;-) 
I'm not exactly sure what's going on in that section. Nothing seems to be out of the ordinary when I check the networks tab in my devtools. I do see a message saying CAUTION: Provisional headers are shown. But other than that idk. What could it be?
Well, I actually got it working.. basically I just want to pull in a widget based on the artists soundcloud url.. it mostly works, but for some artists.. I just can't get them to play... here's the site: [CoachellaTumbler](http://coachellatumbler.com/) I know its rough.. I just made it last night.. but if you hit either Lana Del Ray, Lorde, or AlunaGeorge... the widget will load and render.. but I can't for the life of me figure out why these artists won't play... all the other artists work fine.. Have you run into anything like this?
The request will show in the developer tools, but that doesn't mean that the JavaScript will have access to the resulting data. You're trying to perform a cross-origin request, but the remote site is not set up to send the proper CORS headers that would allow that, so the request fails. But the browser still had to perform the request in order to see if the appropriate CORS headers were included in the response.
My go-to method for breaking javascript or flash is to flood it with a sustained &gt;300 clicks per second.
I like your drive. I have been reading up on your framework lately and I am liking what I see. I think it will be the perfect entry point for myself into client side MVC. Also it looks like it will prove useful both for my personal and professional projects. Thanks for the hard work and I look forward to digging into some code over the next coming weeks. I am already loving the API documentation and the simple todomvc implementation.
It's cool, but I would really like these custom elements to be namespaced. It would be great if you could create a set of custom components under your own namespace and import them all into the browser in one call. It would make the html much more readable and add more meaning to the custom elements.
Inside your function *moreLines* add a selector for the textarea and set the height. $('textarea').css({height: "400px"}); // substitute '400px' to whatever you wish
Awesome! It worked. thanks!
This is pretty interesting. Thank you.
A workaround to CORS restrictions would be to use jsonp. An example can be found [here](http://codepen.io/anon/pen/utnaE).
I tried it with a track pad...when my finger stumbled from one side to another in short jitters it caused some weird looking waves.
Open the javascript console and type this `water.addDrop(0, 0, 0.1, 100)`
Depends. Use it on the web? Probably not until the next couple of generations have died. If you currently support IE6 or IE7, you'll likely want to wait at least another decade: IE6 was released 13 years ago, IE7 was released 8 years ago. Otherwise you'll likely be able to use it within a year of mainstream browsers releasing versions with ES6 support. On the server? Probably when V8 gets full ES6 support. Node currently supports a number of ES6 features when running with the `--harmony` flag, but it's still very patchy. /u/MatrixFrog has linked to the compatibility table which should give you an idea of the progress. As far as I know the general timeline was for ES6 to be proposed as a standard by the end of this year with browser support expected to land in the course of 2015.
You really shouldn't be using a table for this in the first place. If you just want the answers to be stacked horizontally, you can do that with CSS. Also, if you want help with JS, it's helpful if you can provide an interactive example (i.e. use jsfiddle.net, jsbin.com or plnkr.co). That said, you're building your HTML from a huge heap of strings and string literals. That's probably not the best way to approach this problem. It's difficult to recognize broken HTML in a messy blob like this.
Also see the [marquee tag](https://www.google.com/search?q=marquee+html).
You should use `Elephant.prototype = Object.create(Animal.prototype)`. If `Animal` does not have side effects, you could also use `Elephant.prototype = new Animal()`. If you need to support ES3 browsers and don't want to use an ES5 polyfill, you could also use `function C() {} C.prototype = Animal.prototype; Elephant.prototype = new C()` instead of `Object.create`.
I never really liked Grunt's configuration-over-code for some reason. I guess it just felt too much like Ant. So far my biggest gripes with Gulp is that `watch` will break when a task fails (which kinda defeats the purpose -- `gulp-watch` with `plumber` seems to be the best replacement).
I haven't seen it yet, and wow, looks inviting. Want to dive in.
Or probably [Reveal.js](https://github.com/hakimel/reveal.js/) which i think slid.es is using.
JavaScript embraces asynchronous code. Instead of blocking code execution by actively waiting (via a sleep or delay, or by waiting for the user to perform an action) you pass a continuation (in JS terms, a callback function) that will be executed when the time has passed or the event has occurred. As /u/siranglesmith explained, JavaScript is single-threaded. The JavaScript engine uses a so-called event loop, which serves the same point as the "main loop" you're used to in synchronous code. For code that should be executed every "tick" rather than wait for a particular event to occur, you can use `setInterval` or `requestAnimationFrame` (DOM API). This code will be executed repeatedly, but will not blocking the event loop (as long as you don't do anything blocking in your code, like `while (true)` or naively calculating Fibonacci numbers). You can think of JavaScript's event-driven model as an abstraction over the underlying event loop. Because JavaScript was originally developed for the browser, there wouldn't have been a point in making the developer implement a main loop for every web page, especially when the idea was to be able to manipulate the web page in response to the user's actions (which is easier to reason about in an event-driven model anyway). However it can be difficult to wrap your head around an asynchronous model if you're used to purely synchronous code. It also means a lot of dependencies will be more implicit than explicit, but it allows you to separate concerns more cleanly.
I don't think you "should" always use ===. It's just that it's a good practise to know when you need to use either "==" or "===".
but they are all 'best javascript framework' 
&gt; It also means a lot of dependencies will be more implicit than explicit, but it allows you to separate concerns more cleanly. what does this mean? 
Unless Grunt does something amazing this year. Been hearing a lot of rumors on that. 
That'd be good. I've sunk a lot of time into my Grunt build (and more training other devs to use it), and I like it a lot, but it's definitely slowing down as we add more and more to it. Tho some of that could be addressed by smarter tasks and configuration. 
Yikes. Be careful with computed observables, especially when combining them with custom bindings. The article mentions avoiding dependencies. Knockout creates dependencies implicitly, which can be all too easy to forget. If your bindings have any side-effects, accidentally triggering dependencies can wreak havoc. Even if the side-effects are harmless it can still pose a serious performance issue. Computed observables and bindings are powerful tools. But like most powerful tools they can do a great deal of harm when used incorrectly. And unless you have sufficient experience in using them, you might not be able to recognize incorrect usage in advance.
Very, very cool.
Why is Bower called out? Yeoman comes with Bower.
Pro tip: use the save link.
You and me both. I actually have a meeting today about it.
Probably because it's a separate, first-class project which actually predates Yeoman IIRC.
What's the word on Flight? It somehow has flown under my radar for the most part, although I see that I already have it starred on Github lol. It looks interesting, but does it really do much? It kind of looks like there's not a whole lot to it other than being a simple event aggregator.
Why is it only for FireFox yet has an IE8 polyfill for indexOf?
We'll be sure to keep that in mind for future releases!
Also, you could save one line by doing this: var x = parseInt(prompt()), p = "Invalido"; 
nice !
Thanks, feel free to contribute :) https://github.com/mbilbille/dmak
There are alternatives to the AST approach as well.
Gulp will work for frontend intensive repetitive tasks and as long as all tasks are native JS modules. At some point it will become apparent that performing DevOps tasks with gulp is way more complex and tedious than with grunt. Grunt wants to add streams in its next major version, Gulp will realize the devops defect and in the future we'll see two very similar products with everyone's personal taste being the only major difference. 
Perhaps something like this: var x = 4 var a = parseInt( x, 10 ); console.log("Codigo de Origem: " + a + "&lt;/br&gt;"); console.log("Procedencia: " + getAnswer(a)); function getAnswer(a) { var answer = [ 'Sul', 'Norte', 'Leste', 'Oeste', 'Nordeste', 'Sudeste', 'Centro-Oeste', 'Noroeste', 'Invalido']; switch(true) { case( a &lt;= 4 ): return answer[a-1]; case( a == 5 || a == 6): return answer[4]; case( a &gt;= 7 &amp;&amp; a &lt;= 9): return answer[5]; case( a &gt;= 10 &amp;&amp; a &lt;= 20): return answer[6]; case( a &gt;= 21 &amp;&amp; a &lt;= 30): return answer[7]; default: return answer[8]; } } Although I don't agree with writing cases in a single line to have a lower LOC count, I generally format them like this: switch(var) { case 1: val = 'something'; break; case 2: val = 'else'; break; } But coding style is usually prescribed by where you work, in the real world.
There are some crazy things in the works for Grunt 0.5.0 (probably 0.6.0 as there is a big maintenance update comping up that breaks 0.4.x).
Gulp is very immature and overly complicated by trying to stream everything even when it makes no sense (surprise: it doesn't even fully stream content but streams whole buffers of whole files, so you end up with half you build in memory). And Grunt is so much more hackable, even the intern can setup a custom one-off task in 10 minutes. I have a strong feeling Gulp is hipster material, that the buzz is just about it being not-Grunt and having sexy buzzwords like 'streaming'. I never see good arguments for it except trivial stuff.
I really like this. ありがとう！ 英語のヒント：I think you probably mean "fun" (楽しい) rather than "funny" (おかしい). They're often confused, but the adjectival form of the noun "fun" is also "fun". "Funny" has a different meaning.
whoa didn't know that this existed. +/u/dogetipbot 20 doge
log2(1392916013412) &amp;asymp; 40.3. Congratulations, you've implemented a 41 bit integer. JavaScript numbers are IEEE doubles which can exactly represent all integers up to 2^(53), so this isn't giving you anything you didn't already have just by using builtin numbers.
yeah this actually just loses precision. Date.toString() doesn't include milliseconds so it's more like 31 bits...
I was thinking the same thing too.
Edit: I am an idiot
Fuck you, let me make my own uninformed decisions, asshole.
I'm guessing your issue is coming from the fact that you're just opening the local file, as opposed to serving it with a local server. Use the [connect](https://github.com/gruntjs/grunt-contrib-connect) middleware and the problem goes away. It was a little odd that there was absolutely no error or warning associated though, but generally speaking, opening local files in the browser leads to nothing but headaches. Here are the updated files, just use ```grunt server``` to start it up. **Gruntfile.js** module.exports = function(grunt) { grunt.initConfig({ pkg: grunt.file.readJSON('package.json'), watch: { src: { files: ['*.html'], options: { livereload: true } } }, connect: { server: { options: { port: 9001, base: '.' } } } }); grunt.loadNpmTasks('grunt-contrib-watch'); grunt.loadNpmTasks('grunt-contrib-connect'); grunt.registerTask('server', "Serve your app", [ 'connect:server', 'watch' ]); }; **Package.json** { "name": "livereloadTest", "version": "0.1.0", "devDependencies": { "grunt": "~0.4.2", "grunt-contrib-watch": "~0.5.3", "grunt-contrib-connect": "~0.6.0" } } 
Can't blame you, Reddit is so much more dazzling when half disoriented on sleep deprivation.
Try the livereload chrome plug instead of manually adding the livereload script. Works for me using gulp. 
Just because the bitwise operators force truncation to 32 bits does not mean that JavaScript numbers can't represent larger values. Moreover, your proposed "solution" (fingerquotes) suffers from the same issue because the value returned by `Date.now()` is in fact a standard JavaScript `Number`, an IEEE double. 
omg i love you so much. if i had gold to give, i would, but i'm a poor man. thanks so much.
looks like `grunt-contrib-connect` actually handles the injection of the livereload script for me, so I don't have to resort to that. This is great news since I'm sharing code with various people, and it would be annoying to have to convince them all to install the browser plugin in.
Angular can be slow at points, due to the fact that is constantly monitors the DOM, which causes problems in a number of browsers, including chrome.
Doing that, the huge waves eventually leveled out, but the water level rose a lot when it did. You created water!
How long before someone creates FrenchPressScript which compiles to coffeescript before compiling to javascript...
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Hello everyone. Let&amp;#x27;s test new canvas blend-modes performance. Takes about 10 minutes \[/r/javascript\]](http://np.reddit.com/r/webdevnews/comments/1yh41z/hello_everyone_lets_test_new_canvas_blendmodes/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Setting up grunt-contrib-watch to livereload my pages in the browser \[/r/javascript\]](http://np.reddit.com/r/webdevnews/comments/1yh43f/setting_up_gruntcontribwatch_to_livereload_my/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [AngularJS Overview For Managers -&amp;gt; Share it with them \[/r/javascript\]](http://np.reddit.com/r/webdevnews/comments/1yh45b/angularjs_overview_for_managers_share_it_with/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
I don't think there's any implicit coercion in either. `!!null` isn't just `== false` but also `=== false`, as it's [falsy](http://es5.github.io/x9.html#x9.2) and the `!!` explicitly converts it to boolean. For `null == false`, [according to the spec](http://es5.github.io/x11.html#x11.9.3) `null` can only `==` itself or `undefined`.
It's just by definition. Here's a direct quote from the ECMAScript 3 standard that tells how equality works: 11.9.3 The Abstract Equality Comparison Algorithm The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows: 1. If Type(x) is different from Type(y), go to step 14. 2. If Type(x) is Undefined, return true. 3. If Type(x) is Null, return true. 4. If Type(x) is not Number, go to step 11. 5. If x is NaN, return false. 6. If y is NaN, return false. 7. If x is the same number value as y, return true. 8. If x is +0 and y is −0, return true. 9. If x is −0 and y is +0, return true. 10. Return false. 11. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return false. 12. If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false. 13. Return true if x and y refer to the same object or if they refer to objects joined to each other (see 13.1.2). Otherwise, return false. 14. If x is null and y is undefined, return true. 15. If x is undefined and y is null, return true. 16. If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y). 17. If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y. 18. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y. 19. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y). 20. If Type(x) is either String or Number and Type(y) is Object, return the result of the comparison x == ToPrimitive(y). 21. If Type(x) is Object and Type(y) is either String or Number, return the result of the comparison ToPrimitive(x) == y. 22. Return false. So let's walk through `null == false`. We go step 1 -&gt; step 14 -&gt; step 15 -&gt; step 16 -&gt; step 17 -&gt; step 18 -&gt; step 19. Finally a match. We now have to evaluate `null == ToNumber(false)`. Here's the definition of `ToNumber`: 9.3 ToNumber The operator ToNumber converts its argument to a value of type Number according to the following table: Input Type Result Undefined NaN Null +0 Boolean The result is 1 if the argument is true. The result is +0 if the argument is false. Number The result equals the input argument (no conversion). String See grammar and note below. Object Apply the following steps: 1. Call ToPrimitive(input argument, hint Number). 2. Call ToNumber(Result(1)). 3. Return Result(2). So now we must evaluate `null == +0`: Step 1 -&gt; 14 -&gt; 15 -&gt; 16 -&gt; 17 -&gt; 18 -&gt; 19 -&gt; 20 -&gt; 21 -&gt; 22. A match at step 22: return false. That's it, it's false by definition. ===== The first one is much more straightforward. The unary `!` operator always coerces the result to a boolean, so `!null` evaluates to `true`, and `!true` evaluates to `false`, so we must evaluate `false == false`. Step 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 11 -&gt; 12. Step 12 tells us to return true, so that's it. 
Ohoh, that should be all kinds of interesting for particle effects. Where can I read more about this? all I can find are demos...
That's some fine spec readin' there Lou! Suggest moving to [ES5](http://es5.github.io) or even [ES6](https://people.mozilla.org/~jorendorff/es6-draft.html) though. ES3.1 is pretty long in the tooth at this point.
I used ES3 just because it should represent the lowest common denominator, even IE6.
The [logical not operator](http://es5.github.io/#x11.4.9) will always evaluate its operand and convert the resulting value to a primitive Boolean value according to the rules of the [ToBoolean abstract operation](http://es5.github.io/#x9.2). But you're right, best not to try to reason about == in JS - it's subtle and requires careful spec reading to get right in some cases.
By line, you mean the input text field? I tested on both Chrome 32.x &amp; 33.x and it works perfectly fine. (no use of Flash here :D)
You could do nested ternarys instead of any switch which wouldn't be too horrible, I would probably lean on this method more than the large stacking of if/else if when you are just assigning one variable. var p = a == 1 ? "Sul" : a == 2 ? "Norte" : a == 3 ? "Leste" : a == 4 ? "Oeste" : a == 5 || a == 6 ? "Nordeste" : a == 7 || a == 8 || a == 9 ? "Sudeste" : a &gt;= 10 &amp;&amp; a &lt;= 20 ? "Centro-Oeste" : a &gt;= 21 &amp;&amp; a &lt;= 30 ? "Noroeste" : "Invalido"; Also: Shameless plug for a small library I made awhile ago and just updated to better help this problem: https://github.com/Ben-Russell/Switcher Solution would be: var p = Switcher(a) .Case(1, function() { return "Sul"; }) .Case(2, function() { return "Norte"; }) .Case(3, function() { return "Leste"; }) .Case(4, function() { return "Oeste"; }) .Case([5, 6], function() { return "Nordeste"; }) .Case([7, 8, 9], function() { return "Sudeste"; }) .Case((a&gt;=10 &amp;&amp; a&lt;=20), function() { return "Centro-Oeste"; }) .Case((a&gt;=21 &amp;&amp; a&lt;=30), function() { return "Noroeste"; }) .Default(function() { return "Invalido"; }).Result; Working Example: http://jsfiddle.net/SLmfu/
Awesome. The [FAQ](http://www.polymer-project.org/faq.html) and [Browser Support](http://www.polymer-project.org/compatibility.html) pages is missing for some reason, though. For those who are wondering, Polymer (as a whole) supports only the latest version of "evergreen" browsers, while individual pieces may have broader support. See the [cached Browser Compatibility](http://webcache.googleusercontent.com/search?q=cache:ms4ggSJq2uAJ:www.polymer-project.org/compatibility.html+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us) page for more info.
At what level of expertise is it necessary to dig in the implementations of the language? What do you guys use JS for?
Logentries is capturing our client side exceptions.
[From the W3C](http://dev.w3.org/fxtf/compositing-1/#blending)
I created this script to enhance the existing site, please share with me any feedback you guys might have.
That's what a drop of water is.
Try this out in your console: console.log(null, !null, !!null); // null, true, false And as /u/radhruin suggested, don't mess with `==` unless you know what the implications of implicit coercion for your target environments. This doesn't cause any problems (assuming the object `obj` exists): console.log(obj.foo == null) // Will be true if obj.foo is either undefined or null
Obviously this post is not for managers, but for employees to summarize to their managers.
Keep up the great work Thomas!
All of the current browsers require polyfills, even Chrome you have to turn on experimental JavaScript to get anything native. The reason I want browser vendors to implement them is because, A) no polyfills and B) Polymer is like pre-pre-alpha and changes frequently due to their attempts to keep inline with the drafts as they change. edit: I guess Polymer is actually in Alpha now, but still will change as the spec does.
What's the backend equivalent of a web component (or front-end component in general)? Things like modules and classes have some similarities, but not all of the features and benefits of front-end components that you would think might translate. &lt;webserver&gt; &lt;static dir="public"/&gt; &lt;routes&gt; &lt;get p="/users"&gt; &lt;response code="200" convert="json"&gt; &lt;query collection="users"/&gt; &lt;/response&gt; &lt;/get&gt; &lt;/routes&gt; &lt;/webserver&gt; webserver: static: dir: 'public' routes: get: p: '/users' response: query: collection: users code: "200" convert: json webserver static dir="public" routes get p="/users" response code="200" convert="json" query collection="users" 
AngularJS, use it where appropriate (as should be said about anything). It's a real pain to work with for very large sites with complex relationships. The biggest hurdle is knowing where to find things because Angular's level of abstraction is quite a bit higher than standard JS.
Javascript: The Definitive Guide is a deep dive into the language. What parts of the language do you feel you don't understand well enough?
Async JavaScript is a fantastic book. Pragmatic Publishers.
I don't understand the point of Polymer anymore. At first I thought it was a polyfill for web components in browsers that don't support web components. That sounded good. Now there's this idea that "everything is an element". Why? Why is there an element &lt;polymer-ajax&gt; and another one &lt;polymer-animation&gt;? Why should concepts like these be expressed in markup? Everything is *not* an element, and for good reason. Markup has its place, but trying to cram everything into markup feels wrong and pointless.
Really cool, although I was expecting 65 without the library. I'm a sucka!
It would help if you understand that functions in javascript are "first class" objects like strings, numbers and so on. What that means is that you can create functions on the fly and pass them around to other functions, return them from other functions and so on. So when you call mystery(5), you can think of it as creating a new instance of the "mystery2" function where the value of "input" inside that function has the value 5, so it looks like you had this: var secret = 5; var hidden = function mystery2(multiplier) { multiplier *= 5; return secret * multiplier; }; This thing where the value of the variable used inside the mystery2 function is bound to the value of a variable outside the function at the time it is created is called a "closure". You can see when you call hidden(2), it will then return 50. I don't see how it would return 40.
Well, firstly, I think you'll find that the answer returned is 50, not 40. So the first call, to mystery(), executes the function body as expected. Part of that execution is the creation of an inner function, which is then returned as the result of the call. This will mean that the "hidden" variable holds a reference to the inner (hidden) function. That's fairly straightforward. The trick is that JS functions are closures, which is to say, they capture the state of (ie. the variables defined in) their outer scope at definition time. The newly defined function is then able to reference these variables during subsequent executions, even after it has been "removed" from that scope - we say that it has closed over the outer scope, hence closures. Their more formal name is lambdas. So in that code, the definition of mystery2() inside the main function is closing over all variables in the outer scope. This gives mystery2() access to the "secret" and "input" variables for any point thereafter, without them needing to be explicitly referenced inside the new function itself. Thus, when the "hidden" variable (which now holds a reference to the inner function) is invoked as a function with its own parameter, it can simply multiply them all up in the manner specified (2 *= 5; return 5 * 10) and that's the final answer. The main things to realise are that "hidden" is becoming an invokable function due to the return type of mystery, and scope is giving it access to the variables around it at that point. Hope this helps :)
Effective JavaScript!
are you stupid?
We put a CDN in front of the php that hits the DB, so you get the same benefits.
[Javascript Allonge](https://leanpub.com/javascript-allonge/read) took my understanding of JavaScript to the next level by teaching me exactly how functions work, and demonstrating functional programming concepts in action. Plus it's free.
"[JavaScript. The core.](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/)" is an essential read if you're not quite sure what's going on in there.
I'm absolutely loving React. The component-based architecture is perfect for making site/apps that contain lots of re-used elements such as widgets. We can pull down JSON from the server and dynamically decide which components to create, passing them their relevant data. Furthermore, the other thing I'm enjoying is that it's just JavaScript, and updates are done explicitly as opposed to implicitly (ala AngularJS) - coming from Angular, I am really not missing the magic and need to design plugins specifically to work within $digest loops - you can just use normal JS (e.g. SuperAgent, Director, Backbone, or jQuery) and call setState as needed. It's scary initially because of the "DOM in my JS...wat" part, but once you start breaking stuff down into tiny components, the amount of HTML you actually need to put in your JS is minimal.
JavaScript: the good parts.
Angular.js seems to have loads of logic in the markup. Might be a new trend.
+1 for Javascript Allonge, great read!
Would you say React is useful even if you're not going full-on thick client SPA? Would you recommend it to "top up" parts of the application where a browser reload would be inconvenient or unsightly? 
I was thinking the same thing!
like this idea, check Ben's implementation for this: https://github.com/cowboy/wesbos
Just started using d3js recently and it's pretty awesome! The downside is the steeper learning curve compared to stock charting and graphing libraries. This coupled with the build it yourself approach is probably why it wasn't included in that list. Here's a good e-book for those just getting started: http://chimera.labs.oreilly.com/books/1230000000345/index.html
It's not 8 lines, but personally I find it more readable. I have a pet hate of long if-then-else blocks, but each to his/her own. http://pastebin.com/dPVuRkZF
There was a discussion on /r/web_design about this as well! http://www.reddit.com/r/web_design/comments/1yffpm/nice_design_chartjs/
&gt; The JFreeChart project was founded seven years ago, in February 2000, by David Gilbert. Also that o.O Either its a simple typo or its a cut and paste job.
How do you deal with the lack of IDE support? If there comes a way to have jsx in php storm without it complaining and still have syntax highlighting and code completion, etc., I'll more seriously consider it. I know that sublime seems to play well with jsx, but I strongly prefer php storm. 
Seriously. I kept getting the image of a hairy chested Iranian used car dealer trying to sell me on these: "My friend, my friend; this right here? This right here the *best* javascript framework!*"
Anyone know if using reactify + browserify is a viable dev workflow? Also anyone tried rendering react views on the server yet, in a non-ugly?
There are a couple of solutions built on top of d3.js that I don't see in here and was curious what people thought about: nvd3 and dimple.
Strange.. I'm using IntelliJ which is the same as PHPStorm in editing Javascript and I get along fine. For some reason, Intellij seems to just accept JSX without freaking out and does a decent job at highlighting it. The only thing it does not support is the doubly-brace syntax for e.g. style &lt;div style={{color: "red"}}/&gt; which I rarely use and if so work around by assigning the inner object to a variable. But yes, a real good IDE support for JSX would be nice.
You probably want to use [watchify](https://github.com/substack/watchify) for dev workflow (it's like browserify but watches for changes and rebuilds the bundle). You can see the project templates for React at [complementary tools](http://facebook.github.io/react/docs/complementary-tools.html#full-stack-starter-kits) documentation page. Some of them include server side rendering.
About a year ago, I realized that I knew *how* to make javascript do a lot of stuff, but at some point, the code always became completely unreadable and impossible to maintain. Two books have made a big impact on me since then, and I'm a lot happier with my code since having read them: [Testable Javascript](http://www.amazon.com/Testable-JavaScript-Mark-Ethan-Trostler/dp/1449323391) Not so much about how to right tests, as how to make your code test*able*. I learned a lot about handling dependencies, and thinking through the responsibilities of every component. [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1392999190&amp;sr=1-1&amp;keywords=clean+code) An opinionated guidebook for writing code that you can read. How much time do you spend reading your own code, trying to figure out what it's doing? 
Can someone in-depth explain this? I read the documents but I'm still unsure of what this does. Can someone explain the following? * What does this do? * Why would I want this?
Huh... I just tried it and you're right, it does work fine. I could have sworn it was giving a bunch of errors before. Alright... I'll give React another go.
Here's a [this gulp/browserify/reactify project skeleton](https://github.com/fforw/gulp-react) I just created out of my earlier attempts.
Somebody doesn't know what the "J" in AJAX stands for. Not only that, his magic solution is an iframe.
[Watch this video](http://www.polymer-project.org/resources/video.html) Eric Bidelman does a great job introducing polymer. This used to be on their front page, but it looks like with the Alpha release they updated their website.
You can see here an example with require.js and Backbone, in pure JavaScript. http://www.webdesignporto.com/react-js-with-backbone-router-and-local-storage
My sense is that it's sort of like "everything is an object" or "everything is a function". Here it's "everything is an element". In practice, these kinds of absolutist paradigms tend to end up being subideal. Sure, you can do anything you want with them, but your designs end up being needlessly convoluted. That said, OOP and FP *are* useful once you step back from them and compromise. I think what polymer is doing will end up having the same result. The upshot will not be "*everything* is an element", but rather "*anything* can be an element", and that is a very powerful concept.
Nvd3 looks good to me for simple charts.
This is also what people did before the "old ajaxian" methods existed to get similar behavior ...lol
Perhaps you could connect this to IRC so I would have someone to talk to with it. foreveralone.jpg
You can use react without jsx, in pure javascript. 
Hey, thanks for your response! I think you're missing my question. I know that express is basically a router with some other built-in middleware. I'm just looking for solid examples of how people build out their Express apps for scalability (including their directory structure). &gt; https://github.com/sahat/hackathon-starter This is exactly how I wouldn't structure an app. A 170 line app.js file with controller files.
Yet another empty list post consisting of what is essentially a formatted Google search.
Well, it is weird, but I think the reason they added that was because there is some code that they wanted to componentize, for example for common dependencies of UI components that do not themselves require a front-end, and in this context there is not a better alternative. So for example if many components are going to need to do ajax, or animations, they could have decided "all Polymer components will use requirejs" or jquery or something and then included the animation and ajax code that way. However, since Polymer has a good neutral way to distribute code built into it, that makes much more sense than prescribing some particular module system (or specific libraries obviously). Or they could have decided that everyone just always handles their own dependencies their own way if they don't involve actual UI markup, but that would not be as beneficial in my opinion. So you can have Polymer components that just don't include a UI.
hmm well that would not make it simple, but anyone is free to do it.
Ember is built by the same people who made Rails. It follows a lot of the same design philosophies.
Javascript: The Good Parts was what really filled in the gaps for me.
I have been doing something like this lately. I don't know anything about scalabilty but it works for me. // Config stuff above // var app = express(); var router = require('./routes/router.js'); router(app); // router.js Routes = { home : require('./home-route') } module.exports = function(app){ app.get(Routes .home.route, Routes .home.routeFunction); }
Neither Backbone, Underscore, or React need to be shimmed. You could remove that entire block of configuration by simply upgrading. You may find it nicer looking to use the simplified CommonJS form of AMD. Would look like this: define(function(require, exports, module) { var Backbone = require("backbone"); var React = require("react"); var ViewA = require("./ViewA"); /* ... */ }); Why didn't you integrate the "View manager" with the Router? Seems like that would be a more testable solution. Also on the discussion of test-ability your Router constructor has a huge side effect of kicking off the Backbone history detection. I suppose this isn't a huge deal, but it does mean you should take care to `Backbone.history.stop()` after each test. Aside from some other formatting issues, nice post! I'm going to give React a shot in my next application, I think it'll integrate well with LayoutManager.
Hey! I've been lurking Reddit and seeing your posts. Just thought you should know, I love this project. Since this is turning more into a game, you might consider posting over at /r/gamedev. As for your question: You are describing something like an entity-component system, in which game objects/characters are **entities**, and they can each have a set of **components**. I highly suggest taking a look at the [Phaser](https://github.com/photonstorm/phaser) framework, just to see how it handles a component-entity system. Also check out [LessMilk's blog](http://www.lessmilk.com/), where he talks about making HTML5/JS games using this system; [this post in particular](http://blog.lessmilk.com/how-to-make-flappy-bird-in-html5-1/). 
JFreeChart is Java. Not JavaScript.
Good idea, i'll post it over there too! And Phaser is a good suggestion. I allready tried to implement my Dungeon Generator as a Phaser Plugin, and using Phaser as my game framework. This worked, for some things. For example, i couldn't use custom tilemaps. Some holdbacks, like that, actually got me writing everything on my own. But i can always take a look at the source code from Phaser to see how they handle things. Thanks for your reply :)
I've structured quite a few Express applications and by far one of my favorite features is the `app.use` method. This allows you not only attach in middleware, but also other express applications. This means you can easily modularize and separate concerns, such as your API from your static content. Think about how you can break down the pieces and anonymize as much as possible, then you can easily layer and compose through an example like: `use("/api", require("./api"))`. This also makes your applications more testable since you are simply exporting reusable express applications that don't need to know about where they are mounted.
[Batman.js](http://batmanjs.org/) (it's serious)
Do we need this in such a prominent place? Have you noticed spam in this subreddit?
[Check this out (Amazing world animation in JS, the 1K world.)](http://www.hmp.is.it/amazing-world-animation-js-1k-world/)
i see... so do you feel this banner helps? Maybe if the offenders are kindly directed to this post it would work for all?
nobody's complained about the sticky post until now (you), and dozens of people have messaged me to point out spammers because of it, so I think it has helped keep people vigilant. if there's a big outcry for me to remove the sticky, I'll remove it. you can always hide it, you know.
oh cool, hiding it is!
you can add "other express applications" as middleware? Do you have a repo illustrating this technique? Or you just mean break out the middleware to modules?
Damn this was cool. But try as I might I just couldn't understand the code. 
oh that's cool! Do you consider `api.js` also as a stand-alone entity or it can only exist with `app.js`? (i'm thinking about duplicate use of middleware, sessions, cookies, bodyparser, etc)
http://i.imgur.com/2RMOh.jpg
[A cool explanation](http://www.inolen.com/articles/making-quake-3-browser-plugin/).
Angular seems to be beating Ember in popularity lately.
Takes me back to college years, when we'd Quake LAN parties instead of Computer Science classes, which resulted in college dropout and further learning of JS, in which Quake 3 port is now made... Weird cycle, huh?
but the round trip to read the DB is seemingly adding to the time each request takes? 
Wow, it's really smooth in Chrome, 60fps even when my computer's running a Windows 7 VM and another Steam game.. I couldn't get the bots to load and I don't know if there were any other players connected at the time, but it said there were none.
Holy shit, are you me?
I've reported that object literal parsing error and they're getting a fix out soon. WebStorm/IntelliJ has by far the best out-of-box support for JSX. JSX is just E4X, a prior version of JavaScript that was adapted only by a small number of browsers so for those reasons many editors already support it. (It's also part of ActionScript's syntax as well). Semantically, it's very different than E4X. JSX is just function calls - E4X was something strange.
Only the first person that gets the request. After that it's cached in the CDN just like a normal file would be.
I think you're correct.... should i start from echma5 or go straight to 6? I think i'm going to go the more object oriented style when it becomes more standard using classes
Bots worked fine for me. You have to set the number of bots to something other than 0 at the start.
It was really choppy for me in chrome, very smooth in FF.
I'm running Linux with Override software rendering list enabled in chrome://flags, as well as experimental canvas features enabled.
Dat eval. 
Look at it this way. If you went door to door to every single house/apartment on your street, what percentage of people would be able to solve your problem, even if they spent an entire day on it? I'm guessing between 0 and 1. So this is probably around 1-5% of the population that can solve your problem even if they spend all day. You should not expect brilliant experts to work for free. If you post on odesk you might find someone who is desperate or in another country who can do it for $100. If you want to be fair, start at $400. 
OMFG, I love this, amazing game.
Cool! I am just getting started tinkering with nodejs, so this is really neat. I will definitely check out the source. 
Yes. And the video series on YDN theatre. * http://www.yuiblog.com/blog/page/2/?s=crockford+on+javascript * http://www.yuiblog.com/blog/2007/06/08/video-crockford-goodstuff/
didn't load for me in firefox, just hangs
wow, brings back memories and runs so smooth... yet looks awesome
From my recently started node/angular app: public -&gt; client side code public/assets -&gt; compiled client side code (served as a static directory through express) app/* -&gt; everything server side everything else is on you
Invert the conditional test in the long form so it's testing for the exceptional condition not the normal condition and drop the else so the normal condition is not a part of the indented clause. Then your function will end with the normal success path which is more descriptive of what you expect it to do most of the time. E.g. var ret = ... If (ret === null || ret === void(0)) return 404... return res.json(ret); The right form is easily justified when you remember who you are writing code for. Humans. Not the machine. 
Then who are you?
take it easy my friend
You are me.
Hehe :D Thanks.
Thanks, I have not used Node.js before when scripting so it was also my first project using it. I think it could be worth learn more about it.
It's amazing how well it runs on my machine.
A mix of both: var ret = PostArray.get(parseInt(req.params.id,10)); return ret !== null ? res.json(ret) : res.json(404, sendError('No post with that ID found.')); This way, your code is short and you still have a debug point if neccessary.
It worked for me in firefox, so it must be something in your setup
you might want to try [youtube centre](https://github.com/YePpHa/YouTubeCenter/wiki) its a wonderful youtube customization script. one of its features is that you can change the size of the web player and do neat things like when you scroll up whilst already being at the top of the screen it will 'fake fullscreen' the video much like your script
The long form seems like a lot of code for a very trivial thing, but since the condensed form is not readable I prefer the long form.
`if( ret == null )` accomplishes the same thing. No need to check against `undefined` explicitly.
It won't take too long, ES6 features are much needed for enterprise JS application development and library development - since lots tech companies develop such applications today we might see this technology soon in standard browsers. you can already use [some of the features in nodejs](https://github.com/joyent/node/wiki/ES6-%28a.k.a.-Harmony%29-Features-Implemented-in-V8-and-Available-in-Node).
I always prefer long form conditionals unless the ternary is extremely short, such as: var foo = (bar &gt; baz) ? 10 : 20; or (taxRefund &gt; 0) ? celebrate() : secede();
Rule of thumb: be clear, not clever. If there is a performance gain in the condensed version (doubtful), comment above it explaining what it does or you will hate yourself a year from now when you have to figure it out again. 
I use coffeescript myself so it would actually be : return res.send 404 unless ret? Which I think is far better :-)
That gulp script is beautiful looking. I just converted my ugly hacked together mess of a gruntfile to gulp instead after seeing it.
I'm thinking that breaking a rest api off into its own express sub-app is the only use-case that makes sense, since the middleware used for a rest api is going to be distinct from that of an express app for servicing humans with HTML.
what benefits do you get from using express sub-apps vs just passing an array with all your middleware that your rest API comprises of?
Omg omg == is not allowed on this subreddit no matter how valid it is. Omg!!!
Another alternative is to get the best of both world: var ret = PostArray.get(parseInt(req.params.id,10)); return ret !== null ? res.json(ret) : res.json(404, sendError('No post with that ID found.'));
That's awesome, i just spent way too long humming at it until i was in tune.
I'd say a single ternary operator when you want a value back is acceptable. var a; if (x) { a = foo; } else { a = bar; } Yuck, verbose and hard to maintain. var a = x ? foo : bar; Simple and easy to read and maintain! --- However… var a = x ? foo : y ? bar : baz; Ew. Too hard to read. Long form it is! var a; if (x) { a = foo; } else if (y) { a = bar; } else { a = baz; } It's gonna be complicated either way, but this is certainly easier to follow.
but, of course, don't write minified -- use a minifier in your build/deploy process.
I upvoted you not necessarily because I agree with you, but I think that's the best approach to using a ternary. The reason most people prefer the long form is simple: Ternaries are too terse; they combine an conditional evaluation with a variable assignment in one statement. However, by breaking it out onto multiple lines (though I would end each line with ?, :, ;, rather than precede subsequent lines), you provide a combination of terseness and visibility into what the code is doing. ++
I have always felt that the code follow the ? and : should be a single action that can easily be visually consumed without cause for additional mental processing. Otherwise, you might as well just break it up into traditional strategies. Edit: incorrect word usage
No it's kangax, prolific author of one of the best JS blogs on earth, http://perfectionkills.com
I think a few things: 1. Move the method called by onscroll to a variable so that once the condition is true once, you can stop watching it and it only fires once. Ex: var alertonce = function() { $(window).off('scroll', alertonce); alert('once'); }; $(window).on('scroll', alertonce); 2. Remember that one reason for using the $(function() { ... }); closure pattern is to isolate modular code, so in this case, wrap the function in #1 above and the onscroll into a single closure or drop it alltogether if you dont really need the isolation. 3. Your function appears to fire everytime the user scrolls (at all) and they haven't scrolled 1400 yet. From what you say you want, change your scrolltop check to check against the dials' containing div in the dom. on(scroll) If(scrollTop &gt;= (knobs.offset().top - $(window).height()))... Sorry if the code frags arent making sense, redditing mobile. :)
What if ret is defined as an empty string because that is truly the content?
I would personally go with var ret = PostArray.get(parseInt(req.params.id, 10)); if(ret === null) { return res.json(404, sendError('No post with that ID found.')); } res.json(ret);
At first I was like "why is he using node to build this?". Then I realized you weren't talking about node.js! Very cool!! The instructions got me a little confused because you say hover when you actually just click on the transparent part of the nodes to drag the line.
Lol was reading this and I see: PayPal &amp; krakan first thing I think is: wtf? Paypal is regonizing Bitcoin via kracken exchange?? But then I check read further and am slightly disappointed. Oh well.. Js is cool too. 
The difference between a multi-line ternary and the traditional if / else is that if / else allows for many else statements, as well as the else-if statement. A ternary, on the other hand, is a single statement, regardless of whether or not it is on a single line. Consider: var action = someState &gt; someCondition ? 'Flag' : 'Unflag'; Here, the condition evaluation and assignment are on the same lines. However, var action = someState &gt; someCondition ? 'Flag' : 'Unflag'; In that example (assuming my formatting was preserved) the condition is on the first line, and the potential assignment values are aligned after the equals sign. It's still a single block of code, and much easier to understand at a glance. Sure, it takes up more space, and you don't read it left-to-right quite the same way as a single line, but we're not reading English here- we're looking at several units of logic encapsulated in the same space, and multi-lining them breaks them into individual (i.e. easier to read) units..
== is very powerful. And to be honest, it's really really difficult to cause a fuck up in your code by using it rather than ===. The main gotchas in js are around hoisting and function scope. The == vs === argument is really silly.
I can repro. Thanks for the nice reduction. I filed it here: https://code.google.com/p/chromium/issues/detail?id=346037 If you message me your email, I'll cc you on the ticket so you can track it.
Add yourself to the www group (or whichever group xampp is running in). It's not a unique problem to xampp, it's an issue with every program that runs as its own user and creates / reads / writes files.
Ternaries don't have to be condensed: var ret = PostArray.get(parseInt(req.params.id,10)); return ret !== null ? res.json(ret) : res.json(404, sendError('No post with that ID found.')); I personally find this more readable than either of the options you gave. It's especially easy to understand for people used to expression-based languages like Scheme or Haskell, where the conditional forms evaluate to a value, like ternaries. In general, I prefer to use `if`s when I don't want to use the value of the conditional, and ternaries when I do. But it's false to claim that ternaries are inherently less readable than `if` statements.
Cool, thanks for filing.
Seems like every node I spawn ends up at the bottom, not where my cursor is. This is in the latest version of chrome.
great....but too bad the loading time is a tad slow :( billion polygons, textures etc., after all.
Pretty sure he was being sarcastic. There have been several posts recently about how we shouldn't use '==' ever ever ever.
Everybody knows Crockford's book for sure. But you should really watch his whole series of videos on Javascript. Essential in my opinion. I have watched each video in the series at least twice. [js-assessment](https://github.com/rmurphey/js-assessment) is awesome. It's basically a huge test-driven quiz, with a bunch of failing tests you need to make pass. You should do this, and as many of these kind of things you can find. Take every stupid JS quiz you can find, some of them are kinda useless and focus too much on arcane corners of JS behavior. Do them anyway. I haven't read javascript allonge but in general I think learning functional programming techniques can really up your game. Helps you think about programming in a new and very different way, that can have implications for other stuff you do besides JS. After that, just write some stuff even if it already exists, and test the god damn bejesus out of it. I wrote a little test-assertion library because I wanted to explore how things like chai.js work. Do little projects like that. Read the code of stuff you use. Look at the annotated code of underscore.js. Read it and make sure you understand what is happening.
Same here. It appears as if the device pixel ratio is the culprit. I set the screen to emulate a 1:1 ratio in dev tools and it worked fine after that.
I'm curious why it isn't public. Other issues on the Chromium tracker are public... what is the difference here? edit: a data point - it is not failing for me with v32.0.1700.107 on Mac OS X, which I believe is somewhat older.
Utilize different resources. Sometimes a concept doesn't sink in until the 5th *different* explanation. Don't spend time being stuck - spend time learning or doing, then approach your problem again, then go back to being productive when you get stuck. Each time around you'll get closer and closer, honing in on it from all sides, chipping away at the barrier of confusion and unknown.
That would be changing the context of both of the posts I was replying to.....
Yes. There has been a lot of bashing on type coercion on here recently. I kid.
consistent crashes are sometimes considered possibly exploitable (assuming no more information)
It won't detect anything from any of my connected microphones EDIT: I've got this in the console: WebSocket connection to 'ws://www.freetuner.co/socket.io/1/websocket/K9JSLPGlH7b0hP0xd8lX' failed: Error during WebSocket handshake: Unexpected response code: 503 socket.io.js:2371
You can make a custom grunt task. See http://gruntjs.com/creating-tasks for more details, but it would look something like this: grunt.registerTask('taskName', 'Task description', function(){ })
IMHO the best way to learn javascript is looking into the source code of several open source projects , when in doubt (this could be in each and every god damn line) use mdn - mozilla developer network, devdocs.io 
I don't really like coffeescript. I like less that reddit downvotes posts like this because they express a view that is unpopular in whatever subreddit. I do prefer that syntax :) I just dislike the whole of coffeescript ;)
Omg omg ignorance over a valid part of the language. Omg!!! ;)
If it throws an error, sure. if GA isn't being loaded, that'll certainly break things. I wouldn't expect GA to throw errors normally, though. Have you tried basic debugging and taking the Google analytics code out to see if it works again? Maybe look in the console for errors?
Sure, but one might suspect that the same question posed to people qualified in a certain field, hanging out on a public forum in a specific area related to that field, might raise that expected percentage to 80-90%. I only did a year of programming at uni and it wasn't in JavaScript. Even I can tell, only a couple of lines / commands need to be changed or added to achieve what I want. But that's not my knowledge base. Sure if I search long enough and read all the websites, I'm confident I could do it. Sadly for you, coding isn't as hard as you seem to think it is once you have learnt it. The only difference between a qualified coder and an unqualified one, is that the qualified one has the information in his head instead of having to find it in a reference source. ( I.e time) I do 3D Animation and Post Production, also a highly paid qualified job. If people ask in the forums i subscribed to, on how to do something, what MEL script they need to enter, what settings to use etc, I would tell them. Because I came to Reddit to share ( give AND take) information on chosen topics, not just to be a self righteous asshole. :) but don't worry yourself, it has to be _someone_, and I know it's not me. Thanks for your extremely helpful reply, it probably took longer to write than the couple of lines of code I needed. Job well done. 
http://fabiensanglard.net/quake3/qvm.php Madness!
Yeah I don't understand the negativity. On the whole I personally think coffeescript is far more terse and readable than plain javascript. And since I write code for myself and other humans I find it to be far better than javascript. I can understand not liking some parts of it. But being so against it doesn't make sense. (I've run into such hostility towards it in other contexts). I know and am strongly proficient and appreciate many different languages - being outright negative towards any one language whether it's ruby or python or c++ or whatever strikes me as rather narrow minded. 
Post some source code.
Remove 'javascript:' from before _gaq.push. You only need javascript: where you are calling JavaScript somewhere the browser expects an URL (eg an href). I suspect that's the issue. 
For the background music, you can use the Web Audio API. Here's the spec: http://www.w3.org/TR/webaudio/ Here's a tutorial: http://www.html5rocks.com/en/tutorials/webaudio/intro/
Routes as RegEx just seem like the lazy solution
thanks i will try i like w3 school thanks again
My biggest gripe revolves around the fact that it's unnecessary. It compiles to JS, you still have to debug JS (though theoretically now with source maps you can at least see coffeescript, even if you can't edit it), it adds another layer (you still need to understand js), and JS isn't that hard to learn! If it were possible to use coffeescript without knowing JS, I _might_ have a different opinion, but it's not.
Making a game like checkers or hangman is always a fun way to learn :)
Yup! Hack through it, put it all on one page, attach everything to the window etc etc... Then, when you start seeing the related chunks of functionality, separate them into their own modules and all that good stuff. Beginners far too often are paralyzed by the thought of 'doing something wrong', but its by doing shit really badly that you understand why the best practices are in fact, best practices.
you could make some polyfills to emulate html5 capabilities in older browsers. The easiest one would be the input placeholder attribute. Don't be afraid to use jQuery.
Nice, I like it! This is also a good subject for extreme optimization, which is very interesting in a JS environment.
2. make sure you draw your backgrounds before you draw your character. 3. use some boolean flag to check if your character is alive. something like (i suppose you use [requestAnimationFrame](https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame) for render) For some reason cannot format my code with markdown, so here is a [pastebin](http://pastebin.com/xstiEDP2) 
That's not w3schools --- that's the technical specifications. Usually those are incredibly hairy and ... well, technical. If you ever want to look up what a certain standardized api /should/ do that is the spot. Coincidentally there are a few pages on w3schools about this -- http://www.w3schools.com/tags/ref_av_dom.asp http://www.w3schools.com/html/html5_audio.asp But they appear to be incomplete -- I'm not seeing anything about "AudioContext"
Or simulations like Conway's Game of Life... There are some good practice pieces in simply copying another game.
Build something. Take a look at creating a chrome extension.
* Graphic User Interface (GUI) * write a language parser in JavaScript for your favorite other language * image carousel with animated effects * slideshow * financial calculator for debt repayment/consolidation * irc chat client with web sockets for live data * data analysis engine for your favorite api service If are actually trying to learn this language don't dick around with jQuery, because crutches won't help you learn.
Don't be afraid to use jQuery, but be aware to some extent of what jQuery is doing in your behalf.
Take a look at what RSVP.js does to wrap their code in (function () {...})(window): https://github.com/tildeio/rsvp.js/blob/master/tasks/browser.js They run concat first, and then run their own custom task after to handle any final additions they need to make. They've also got a very clean setup for task options and custom tasks, so I consider them to be a good reference for setting up my gruntfile.
Tower Defense game!
Nice work! Might be an idea to have a larger undo history, as for me it only undid the last change.
Thanks! Yep a longer history would be cool. I'll see how and if I can implement it. I try to do this without any tutorials so I think more about the logic behind it. :D 
When I first started with Javascript I pumped out a iCopter-type game and it was a great learning experience. Completed it in a weekend and I felt amazing about it, whilst also learning a variety of vital JS skills. Do something that interests you. Even if that something has already been done, like my iCopter-type game, it is a great learning curve and you can learn a lot from it.
Agreed. You probably want to use an array as a history. You push the last performed action (add or remove) onto the array, and when you undo you just `pop` the last item off and undo it.
Aside from that your code is looking good! Keep learning!
I'm already using an array but clearing it right after the undo. If I get you right you'd suggest going reverse through the array when undo is clicked? 
ToDolist probably shouldn't be in the global scope In general it is a good idea to only select an element by ID or Class (line 2). This will simplify your definition of a reusable member and it is faster to select by a class in css. Why are you preventing default on keyup? All of your methods will be publicly accessible I.e. addEntry Why is lastRemoved an array? It looks like you only store one item in it at at most. Line 22 doesn't seem needed , you already set value. In that same function that and list are unused. In that same function you probably don't need value, you bed already cached the item from the dom. It looks like you have unused list and that variables elsewhere. To make this a reusable pattern and easier to maintain you might want to consider using a binding and templating engine, but it depends what you aren't trying to accomplish here. Looks pretty good man. 
`myArray.push({ action: 'add', text: 'foo' })` `myArray.push({ action: 'remove', text: 'bar' })` Then, on undo: `var action = myArray.pop(); // this gives you the last item, and removes it from the array` `if( action.action === 'add' ){ ... `
I think audiokat might be indeed correct. Also, about events: you cannot stop an event from happening. If you happen to hook into the same event at an earlier stage, you can try to block other event handlers from being called by calling event.stopImmediatePropagation - where supported. Inline events are usually the first in the line, so unless they are being overwritten by DOM events (xy.onclick = ...), it is impossible to stop them - this is why you shouldn't use them unless you really know what you're doing.
Thanks for the huge feedback! What do you mean with the Global Scope? I'm really a JavaScript newbie. I use data-Attributes instead of IDs just because I personally prefer them when I do experimental stuff - I do not use classes because I like to have classes for CSS only while IDs or data-Attributes are used for JavaScript. lastRemoved is an array because I had in mind to do a longer history of undo and IMO an array is good for this. The addByInput function had a lot of issues: Indeed value and list where not needed - I removed them. "that" is needed because I didn't know an easier way to refer to the current list, when I use "this" it is the input field itself so I set the variable before the keyup event. I'll take a second look into the unused variables. Thanks for pointing that out. A template engine is one of the next things I want to implement - can you recommend any? The only thing I try to accomplish is getting better at JavaScript. I originally started this yesterday evening to play around with prototype and because I had some time before meeting a friend. :) Another thing I want to try is saving the entries with LocalStorage or MongoDB. 
Thanks! I didn't know the array.pop() function. Will try it out. :)
No worries there are a lot of best practices in javascript, it takes a long time to learn everything. You might want to search for "global scope pollution" there is a lot on it and to address this I personally prefer the "revealing module pattern" (which also helps keep things private). Two good things to learn there :) I currently use handlebars for a templating engine. It's fast and has a lot of features. For the unused variables and a few other things checkout jshint, it helps find a lot of those kinds of things. I have some good book recommendations if you want too! 
I tried Handlebars once with Ghost CMS and found it awesome - seemed equal to Liquid to me. JSHint is a good reminder, I always forget about it (it's even build-in on CodePen...) Finally, yes please keep the recommendations going! :D I already read "Pro JavaScript Techniques" by John Resig and will read "Secrets of the JavaScript Ninja" next. I also own a book about Node.js ("Node.js &amp; Co" by Golo Roden). However, any recommendation (be it offline or online) is welcome. I need to dig really deep into JavaScript and I really want to master it someday. I'm very happy that there are people around who don't tell me to use jQuery - as EVERYONE on StackOverflow does. Thanks a lot to all of you here. 
Try using CSS classes prefaced with js-, such as js-listItem, etc. Class names are much preferable to attributes.
Javascript: the good parts Javascript: the definitive guide (make sure to get the latest) Javascript design patterns 
thanks a lot. :)
The more I read this the more I plan not to contribute to this Sub-Reddit. I try to encourage communication, but in the little posting I do, they are all to my blog and it does have an ad. I do link to many sources on my blog posts and they are all original content, with little rehash. But looking at the comments here, I can't help but feel this community down votes just because I only post my own blog.... I can't imagine if Chris from css-tricks tried to post his own content here anyone would complain, even if that's all he did, and he would make more money from all the ads he has (as an example). Am I the only one that sees some of these comments this way? That I am breaking some contribution rule? Am I walking a thin line? 
Check out MDN's documentation for standard built-in object prototypes. There's a lot of handy stuff there. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
A few comments: * For the sake of readability, I recommend making sure that you indent everything regularly. That is, when you open a div, everything inside gains a level of indent. The first div in your wrapper has no indent, but the second one does. The third div is indented even further. * Selectors such as "class*=" are not generally recommended for performance reasons. * Your CSS classes appear to alternate between "__" (.list__header) and --/- (.todo--is-done). I recommend picking just one, or else making sure that you have a naming scheme which makes sense (if you do want to use both). * I recommend you read up on HTML event propagation. I haven't done it in raw JS in a long time, but event propagation should allow you to set a listener on just the list container, and capture all of the events there (ie, you don't need to set a listener on every input, just the one on the container). You'd need a second (but only a single one for this event, too) handler for the clicks. That's a more OO way of handling it, and allows you to set it up during init, rather than on the fly, or via keyup presses. * You set "input.value" to null, but the old string doesn't appear to go away * Since you're going for OO style, you should checking out Function.prototype.bind. It'll allow you to do something like this for your event bindings: ToDoList.prototype.undoRemove = function() { this.undoButton.addEventListener('click', function(e) { e.preventDefault(); // array.pop() returns last element of an array &amp; removes it. var lastEntry = this.lastRemoved.pop(); if (lastEntry.action === 'remove') { this.addEntry(lastEntry.content.innerText); } else { console.log("No last entry."); } }.bind(this)); }
It looks like right now you are storing the list as html in an element and when you remove something the li for that item is removed and placed into an array. You might consider storing the current list in an array as well and generating the list based off of that. That way you can store additional information with each item, for example a unique ID. That way when you undo something the placement of the item in the list could be preserved(right now when you undo something it appears at the bottom of the list). Some other ideas of info to store with each item could be priority, dateadded, etc. Also, to make your objects not living in the global namespace: var lists = {}; lists.work = lists.work || new ToDoList('work').init(); lists.private = lists.private || new ToDoList('private').init(); Now they are inside the lists object(which lives in the global namespace) instead of "work" and "private". You could also use window.lists or something like that, but it's really the same thing. The nice part about using *window* however is that *window* will never be overwritten(window.lists might be though).
Thanks for your feedback, I'll take a look into bind and HTML propagation! The CSS naming is seems confusing but I makes sense for me - I use `.todo--is-done` because it's a modifier ( -- ) state (the `is-done` looks wrong in this case I admit). Elsewhere I try to stick with `.block__element` (`.list__header`) or `.element`(`.list`) for my CSS naming - `.list--work` on the other hand is a modifier again, therefore the --. The `input.value = null` thing is weird, it worked before but I'll look into it. :) **Edit**: The input thing was because I wrote `that.value` instead of `input.value`.
Indeed storing the whole list in an array is better and I'll make it this way when I add localStorage or MongoDB support. However, I don't understand what this var lists = {}; lists.work = lists.work || new ToDoList('work').init(); lists.private = lists.private || new ToDoList('private').init(); exactly does. Could you explain it further? Or hint me with some link?
Basically, when you create an object like you were: var private = ...; Outside of a function, you're creating that in the global "namespace" or "scope". In contrast, if you created a variable (using var) *inside* of a function, that variable would only exist inside that function's scope. For example: function blah() { var foo = 'bar'; } console.log(foo); The console.log will output undefined since foo exists only in function blah's namespace. (note: if you instantiate a variable without "var" inside of a function, JS will reach up into the global namespace and create an object there with that name - likewise when referencing a variable inside of a function, JS will check the function's scope for that variable and if it doesn't find one it will then progressively check the scope outside of the function up to the global namespace for a variable with that name). This is important because if some other part of the program and created a variable in the global namespace/scope called "private" it would overwrite yours. This is commonly referred to as "namespace pollution". var private = new ToDoList('private').init(); ....(some arbitrary amount of code later) var private = ... Your original private is gone. It doesn't have to be sequential in the code either, some ignorant function in some library could do this by accident. What that code is essentially doing is creating a "lists" container object in the global namespace, and then properties on it(work and private) which store the actual todolists. The || is checking if that already exists, and if not instantiating a new one. It's the same as saying if (lists.private) { lists.private = lists.private } else { lists.private = new ToDoList('private').init(); } or a little more succinctly if (!lists.private) { lists.private = new ToDoList('private').init(); } A lot of people use the "window" object to store things in, so you will see that as well, but it's really the same thing(with the added bonus that "window" will never be blindly overwritten, whereas the "lists" object I created here might be)
Oh wow thanks for the compliment in first place! That really makes me happy because I have no programming background beside HTML/CSS. - The init method was what I thought would work as a constructor - like, a thing to tell "hey, add all those functions to the current list". Is there a special constructor in JavaScript? - about the binding and stuff: That's a thing I'll have a look into now as well as `removeEntry()` - I thought removing stuff with `removeChild()` would be the "way to go". :) - Not using jQuery is my main goal. I admit that jQuery is a amazing framework but I don't want to use it without knowing what actually happens, therefore I avoid it and try my best with vanilla JS. Works good so far. :D (btw Kudos to Reddit for not being StackOverflow-like and telling me to use jQuery.)
https://github.com/stevekwan/best-practices/blob/master/javascript/gotchas.md https://github.com/stevekwan/best-practices/blob/master/javascript/best-practices.md
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Making a particle engine using Javascript (tutorial) \[/r/javascript\]](http://np.reddit.com/r/webdevnews/comments/1yq0ux/making_a_particle_engine_using_javascript/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
You already utilize the constructor at :1. Put the init code there as well :)
and again: thanks! 
Yep.
This is a clever way to present a very large table; however, there's one major problem. As a viewer of this table, I expect it to behave like any other web content—that it's searchable (find on page) and selectable (I can select all, or select more than just the visible viewport). And this breaks that promise. With that said, I'm sure it fits the edge case of an extremely large table well. And kudos to sharing your project on GitHub.
Or a flappy bird clone.
Great ideas! But I would not call Jquery a crutch - Jquery helped me understand and appreciate Javascript more. I started with heavy Jquery usage, but as I got more advanced and gained experience, I started using it less and less - I think it can be a great learning tool and powerful yet simple way to get more insight into the vanilla parts of the language as you start taking apart selectors, touch events, and really going into the meat of Jquery. Soon enough, everyone realizes that they can do anything without it, but to start its a great tool! 
Very smooth scrolling though I agree with squashb about find on page the look and feel of moving around it was very nice. Great work.
Not sure what sets this appart when compared to dataTables or jqGrid. Either way, good work. 
Many things. First, it's free and opensource. - It handles pretty much infinite rows / infinite columns : DataTables and jqGrid do that via pagination, and I think it is a no go in terms of user interface. - It is free (jqLite is not) - The design is really up to you. Original library gives you nothing. The example styling is done in css in the example file. - It is light and do not require any deps There exists some other (commercial and free) solutions with such "infinite" vertical scrolling (SlickGrid for instance). But for "infinite" horizontal scrolling, I found only - one bloated commercial solution - one nice opensource solution called v3grid, but depending on both iScroll (no really a problem) and more annoyingly ExtJs. 
You can do [infinite vertical scrolling](http://www.datatables.net/release-datatables/examples/basic_init/scroll_y_infinite.html) in dataTables. While their guide mentions that the feature is deprecated, it still works, and they also offer [scroller](http://datatables.net/extras/scroller/) I'm still going to look at what else this can offer. I know our clients ask for table filtering, and dataTables seems to offer a superior experience with filtering, but some of our tables do not necessarily require filtering.
How is this better or different than SlickGrid?
Sorry it is not exactly what I meant my infinite vertical scrolling, but that's my name for it which is wrong. I don't know exactly how I should call the functionality in FatTable. It's called virtual in v3grid. Solution that loads extra data automatically when you reach the bottom of the scrollbar are ok to some extent. But your browser will get slow as hell if you scroll to much. Also, there is not way to jump to row 20000 rapidly. In that sense it does not handle an infinite number of rows / cols. Fattable just need to have the array of column widths fitting in RAM, and apart from the binary sort on the column offset array, all operations are bounded. That being said, DataTables is a great library, is much more featureful and as a great documentation! 
Where are all your tests dude?
What tests?
What slick grid does on the rows, Fattable does it on both the rows and the columns. 
This is also my experience so far! I'm building a REST client with React (using also server-side rendering) and I'm super happy with the results. With React the whole architecture sounds solid, clean, under control, and... it comes out natural out of my hands (don't know how to say, but that's why I'm loving React). Something not easy to reach with JavaScript, especially when building large apps. However I'd say that organising the thing working both server AND client-side was the hardest part... lot of blood and yet I'm not sure if it is the best solution I could find... (edit: grammar)
Nice tutorial. You never clear the particles, which would eventually cause the app to run out of memory. IMHO it would be better to use a fixed-size "pool" that you take from. An alternative would just be to `pop()` dead particles in a reverse for loop once per frame.
About the server thing: after some weeks of research, I've found a satisfying server+client solution: the first view (= the whole html document) is rendered server-side, then it is mounted as React component, and then it runs as a single-page-app (with a [page.js](http://visionmedia.github.io/page.js/) router). I've found browserify didn't give us enough control over the code, so I switched to [Webpack](http://webpack.github.io) and things went much better (warning: there's a lot to study there). I liked it because it has a express middleware that I can use during development, and the same configuration can be used flawlessy when building for production.
You can: * ask the value by using [Window.prompt](https://developer.mozilla.org/en-US/docs/Web/API/Window.prompt) method * update the URL in the location bar by setting the value of the [Window.location.href] (https://developer.mozilla.org/en-US/docs/Web/API/Window.location#Example_.231.3A_Navigate_to_a_new_page) property Here is the simplest way to implement this bookmarklet (it won't handle correctly the "Cancel" button): javascript:location.href = "http://dogechain.info/chain/Dogecoin/q/addressbalance/" + prompt("Enter path to append"); 
It doesn't work with chrome on Android, unless I don't understand what it is suppose to do. I can't go beyond 46 rows! 
Haven't tested it on Android indeed. Let me see.
Sublime Text 3 with [SublimeLinter-jsxhint](https://github.com/STRML/SublimeLinter-jsxhint) and [this syntax highlighting plugin](https://github.com/yungsters/sublime/tree/master/tmLanguage) rocks for me.
If you have the address on the page, you could highlight and use this to open the page you want in a new tab for it in Chrome javascript:(function(){ var selection = document.getSelection(); if(!selection || !selection.anchorNode){return;} var element = selection.anchorNode; var start = selection.anchorOffset; var length = selection.focusOffset - start; var text = element.textContent.substr(start, length); window.open("http://dogechain.info/chain/Dogecoin/q/addressbalance/"+text, "_blank"); return undefined; })();
Thank you! It's exactly what I had in mind. +/u/dogetipbot 50 doge verify
That should be quite easy to add support for IE&gt;=9.0, but I don't have any Windows machine :|
Another thing you could do is just use Chrome's custom searches. You can make a search and call it "Doge". When you type Doge in the location bar, Chrome will show "search doge" and you can hit tab, then paste your value there. This would be your custom search url: http://dogechain.info/chain/Dogecoin/q/addressbalance/%s Edit: [Guide for this if you've never done it](http://www.makeuseof.com/tag/create-custom-search-engines-google-chrome/)
Genius! Thanks a lot! :) +/u/dogetipbot 50 doge verify ;)
And honestly I have almost no idea what I am doing. I do search engine marketing and what to track events. The GA code was something I got straight from Google, so I didn't think it would break anything and I figured my developer would say something if he thought there would be a problem. I didn't add the javascript:, the developer did and I didn't argue because I figured he knew what he was doing.
Well I'm in a weird situation because usually I'm a backend guy - mostly Django and a wee bit of node and shit, but React is a great framework if you are in an office with the person who is fucking adept and you can be like I NEED THIS DATA and then they do it and you build some pretty decent shit.
I don't get it. All billion cells of data on the client side? That takes a lot of memory...
Hey, this looks pretty good but there are a few bugs. On Chrome, drag the scrollbar to the very bottom then scroll with the mousewheel. It starts showing whitespace. There is another bug (possibly causing the first) that will take some cleverness to solve. All browsers have a hard limit on the maximum pixel dimensions of an element. This limit also applies to scrollTop and scrollLeft. This means the element you use to simulate the height of all the rows cannot be large enough to handle an unlimited number of rows. If you don't believe me, try to scroll to the bottom of your demo and you will see that you can't reach the last row (or come even close). The HTML says you set the height to 35000000px, but the element's offsetHeight only returns 33554428px. The limit is different in each browser. I think IE has the smallest (across all versions). As I said, this limit applies to the maximum scrollTop, so you can't just chain together a series of shorter elements. I tried that method and failed. Maybe you will have better luck? You can partially solve this problem by detecting the max height and snapping to it, then calculating the scroll position and showing the rows based on the percentage the user has scrolled, but this leads to pigeon-holing and some rows become impossible to view because scrolling even 1px jumps past more records than can be shown on screen. I'm not sure how SlickGrid solved it (or if they even did solve it). Good luck.
The mousewheel had no effect when I tried. (Firefox 27, Windows 8)
Where can I read more about your Phaser project?
The loop is already a reverse while loop, but you couldn't use `pop()` because not all particles have the same life span. So it has to be `particles.splice(particles.indexOf(particle), 1)`. It's likely that a pooling system will be introduced later (this is just part 1).
__^[wow ^so ^verify]__: ^/u/Godranks ^-&gt; ^/u/check_ca __^Ð50.000000 ^Dogecoin(s)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
It's beautiful.
Yeah, my bad -- splice, not pop. :) 
IIRC, it has to be the 0.11.* unstable branch.
The [7 lines](https://github.com/javascript/augment/blob/master/augment.js#L12-L18) look beautiful but "class" declarations are: 1. more verbose than they should (just to save on few lines of boilerplate code?) 2. have extra link in a scope chain (again, just to have "the world's smallest" title?) I'm talking about code from the Getting Started: this.Circle = augment(this, function () { this.constructor = function (x, y, r) { .. }; this.area = function () { .. }; }); vs. more "conventional": var Circle = klass({ constructor: function() { ... }, area: function() { ... } });
This is a thorough explanation of the math behind floating-points in computing. It doesn't have much to do with JavaScript, and I even think most developers, let alone JavaScript developers don't need to know this. If you're interested in how this relates to JavaScript, read only the conclusion. The author tells us to use thoroughly tested math libraries, and to avoid JavaScript when working with floating-point numbers 
[You sure?](http://cl.ly/0K1H3b1j1J072l1h3X3V) Not every feature is ready of course, but at least it's coming.
Cool, but the code is hard to read. It's a style thing, but if you take advantage of longer variable names and add, you know, maybe a single comment, you might have a better chance getting other contributions.
async came after the original design and kinda got bolted on. one of the few things we can thank IE for. Now, well... as people move to using more and more promises, we have things looking more and more async, but it wasn't always that way. the history of ajax support: http://en.wikipedia.org/wiki/XMLHttpRequest
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**XMLHttpRequest**](http://en.wikipedia.org/wiki/XMLHttpRequest): [](#sfw) --- &gt; &gt;**XMLHttpRequest** (**XHR**) is an [API](http://en.wikipedia.org/wiki/Application_programming_interface) available to [web browser](http://en.wikipedia.org/wiki/Web_browser) [scripting languages](http://en.wikipedia.org/wiki/Scripting_language) such as [JavaScript](http://en.wikipedia.org/wiki/JavaScript). It is used to send [HTTP](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) or [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure) requests to a [web server](http://en.wikipedia.org/wiki/Web_server) and load the server response data back into the script. Development versions of all major browsers support [URI schemes](http://en.wikipedia.org/wiki/URI_scheme) beyond http: and https:, in particular, [blob](http://en.wikipedia.org/wiki/Binary_large_object): URLs are supported. &gt;The name was standardized to XMLHttpRequest for compatibility. It may be misleading, in particular because any textual data may be received from the server, not just [XML](http://en.wikipedia.org/wiki/XML). Data are also commonly received as [JSON](http://en.wikipedia.org/wiki/JSON), [HTML](http://en.wikipedia.org/wiki/HTML), or as [plain text](http://en.wikipedia.org/wiki/Plain_text). Data from the response can be used to alter the current document in the browser window without loading a new [web page](http://en.wikipedia.org/wiki/Web_page). The response data can also be [evaluated](http://en.wikipedia.org/wiki/Interpreter_(computing\)) by client-side scripting. For example, if it was formatted as [JSON](http://en.wikipedia.org/wiki/JSON) by the web server, it can be converted into a client-side data [object](http://en.wikipedia.org/wiki/Object_(computer_science\)) for further use. &gt;XMLHttpRequest has an important role in the [Ajax](http://en.wikipedia.org/wiki/Ajax_(programming\)) web development technique. It is currently used by many websites to implement responsive and dynamic [web applications](http://en.wikipedia.org/wiki/Web_application). &gt;XMLHttpRequest is subject to the browser's [same-origin policy](http://en.wikipedia.org/wiki/Same-origin_policy): for security reasons, requests will only succeed if they are made to the same server that served the original web page. &gt; --- ^Interesting: [^Ajax ^\(programming)](http://en.wikipedia.org/wiki/Ajax_\(programming\)) ^| [^Quicknet](http://en.wikipedia.org/wiki/Quicknet) ^| [^Remote ^scripting](http://en.wikipedia.org/wiki/Remote_scripting) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfn5pn7) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfn5pn7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 68637:%0Ahttp://www.reddit.com/r/javascript/comments/1yrldc/js_theoryarchitecture_question/cfn5pj5)
i keep hearing such terrible things about mongodb in production. Is this still the case?
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [JS library to display huge (billions of cells) tables \[/r/javascript\]](http://np.reddit.com/r/webdevnews/comments/1yrq2d/js_library_to_display_huge_billions_of_cells/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
Me either, but on some random day I found this: http://www.modern.ie/en-us/virtualization-tools It's time limited, so realistically it won't work for long term dev, ,but it lasts a good few days if you want to take a stab at it. Anyways, cool library man!
XHRs aren't the only async feature of JS. `setTimeout`, and `setInterval` were, as fas as I'm aware, available in the original implementation, as were many event handlers (`onload`, `onclick`, etc) Further, XHRs weren't even a new idea when they were introduced. I was using XML Data Islands, and various "long-connection" techniques, to do the same thing well before XHRs existed. Granted it was much more of a pain-in-the-ass, but it worked. I'm so glad that I no longer have to write two sets of scripts that communicate on the server, one of them writing out crap like: &lt;script type="text/javascript"&gt;parent.updateStatus( '5%' );&lt;/script&gt; // server flush &lt;script type="text/javascript"&gt;parent.updateStatus( '7%' );&lt;/script&gt; // server flush &lt;script type="text/javascript"&gt;parent.updateStatus( '8%' );&lt;/script&gt; // server flush
Not sure about production use, but it seems too easy to get started with especially with nodejs stack.
Cache locality... two loops for might have done it as well. Basically I'm guessing that V8 generates better code for that loop, but I probably should either measure or inspect the generated code. Yup, I know the canvases trick, but I was lazy :D, you can improve on my code.
JavaScript isn't both asynchronous and single-threaded. The only thing that truly happens asynchronously is an Ajax request, and that's only the internal request/response code, no JavaScript code you can control. There are events, callbacks, timeouts, yes, but they're all run on the same (single) thread.
Aye. If you go to about:crashes in Chrome you'll see a reference to your recent crashes (aka sad tabs). You can file a ticket on the Chromium tracker immediately from there. All those are private by default.
Check to see how datatables handles searching -- you might be able to get away with some sort of similar tactic.
One solution might be to hijack CTRL+F like Google Docs and others do, using a custom search interface tied to the table's data source.
This is so old. Also, IE7 is &lt;1%, so I won't be bothered.
Wow, thanks for all these info. That's why I love reddit. I'll investigate that ! 
`// Generated by CoffeeScript 1.6.2` yada yada yada you might have a better chance getting other contributions.
Use it correctly, and it's brilliant. It's not suitable for everything, though. http://www.mongodb.com/use-cases
The code is generated from coffeescript https://github.com/poulejapon/fattable/blob/master/src/fattable.coffee Have you been looking at the correct file? I definitely need to write more comments though...
On one screen I totally agree. On more screens I partially agree. As you said it people use spreadsheets with way more rows than that. I developed this library for my employer, and we're a platform for datascientist. People need to have a view of their dataset, and it is often very big.
Thanks! I'll give it a try!
Thanks! I need to check that.
This is unfortunately the case for all browsers. Resize is handled by rebuilding everything. Could be better. :|
Thanks I added an issue. https://github.com/poulejapon/fattable/issues/6
Heads up: I think you forgot the argument in your example implementation of `fetchCellPage`. (this looks really cool, anyway!)
Hi! I noticed that you posted an image from dropbox.com. I have rehosted your image to imgur because high traffic can break dropbox.com links. [Here is the rehosted image](http://i.imgur.com/IJokwji.png) This action was performed by a bot. If there is an issue or problem, please report it below. [^[Bot&amp;nbsp;FAQ]](http://www.reddit.com/r/DropBox_Bot/wiki/index) [^[Report&amp;nbsp;Problem]](http://www.reddit.com/message/compose/?to=DropBox_Bot&amp;subject=Problem%20to%20Report) [^[Feedback]](http://www.reddit.com/r/DropBox_Bot/submit) [^[Source]](https://github.com/tzoch/dropbox-bot)
setTimeout and setInterval aren't async though, they won't necessarily run in the exact timing of the command, they will run as close as possible, once the thread is available to run a new op. It depends what you want to consider async for this question I suppose. Dynamically adding scripts I suppose gets you pretty close to async, but they would all, back in 99 at least, only load one at a time as well and in the order placed. Async means things may finish out of order. 
I just wish there was some library of javascript that already had this as a part of it. Maybe even one that made it easier to manipulate the dom after my ajax had completed. If only such a thing existed....
Javascript has support for events, but by looking at standard you can see it wasn't that much of a priority to create nice async support apart from the basics (SetInterval, SetTimeout and xmlHttpRequest). Multithreading adds lots of complex problems into the design. Also Netscape didn't need the power of many threads in their DOM-manipulating language AND it would be insane to use multiple threads for that - on desktop we try as hard as possible not to let multiple threads work on GUI at the same time, we prefer async and messages passing for that. So it was created much simpler while only single thread support. Also multi-threaded general purpose virtual machines with support for async are not exactly trivial to create. There's lots going on with performance, task switching, memory copying between threads, properly isolating locking AND deciding what to put in parallel. It's mostly very complicated and error prone and taking lots of time to design and test. There's this saying "Every complex enough parallel software implements parts of Erlang Virtual Machine" and is said for a reason.
Those time limits are built into the OS, but Microsoft doesn't mind you working around them for testing / development purposes. You can keep copies of the downloads, or snapshots of configured machines that you clone. https://modernievirt.blob.core.windows.net/vhd/virtualmachine_instructions_2013-07-22.pdf &gt; It is also highly recommended that you implement a rollback strategy for any virtual machines that you download. This could be as simple as holding onto the original archive that you downloaded, or you could take advantage of your virtualization platform’s snapshotting capability so that you can start over with a fresh VM at any time and not have to worry about the guest operating system running out of trial time. Also, highly recommend using [Karma](http://karma-runner.github.io/) for running tests in multiple browser environments. 
 function template(str) { return new Function('locals', 'with (locals) {return ' + str.split(/\{\{([^\}]+)\}\}/g).reduce(function(js, part, i) { return js + ' + ' + (i % 2 ? '(' + part + ')' : '"' + part.replace(/\"/g, '\\"').replace(/\r?\n/g, '\\n') + '"'); }, '""') + ';}'); }
This code is part of their Absurd.js library. And there's plenty of value, for some of us at least, in understanding what goes into a good solution for this kind of problem.
&gt; MongoDB is a general purpose database suitable for most applications and use cases. I suppose that's still technically "not suitable for everything", but it hardly seems very self-limiting.
It's worth nothing without promises, sorry
It breaks the autoscroll so I hope no one ever uses this.
Thanks a lot for the super clear answer!
This is a dangerous approach if you intend to let your users define their own templates. Right up there with using evals around user-generated content. A much safer approach is to build a function that will "walk" the object name (e.g. person.address.street). This is the approach that we took and it works extremely well. It also works for arrays. We also use this method for binding objects to forms, similar to Knockout.
True - it has a sort of half-arsed approximation of promises (a "promise-like interface", useful only if you don't really understand any of the actual benefits of promises and just want something that *looks* slightly like them) but it's really just an unnecessarily-confusing way to implement registering a single callback, not true promises at all. Try doing something as simple and straightforward as registering *two* callbacks to execute when the asynchronous call succeeds or fails and the whole half-arsed approach falls apart.
Awesome post! Yours is way more readable and maintainable but I thought I'd post a one line engine for funs. one line: pattern = '~(@(?&lt;func&gt;\w++)\((?&lt;param&gt;[^)]*+)\)(?&lt;content&gt;(?&gt;[^@]++|(?-4))*)@end)~'; Source: http://stackoverflow.com/questions/18029339/php-template-engine-regex
While there may be some value to what's being posted, I'm not going to take the advice of a user that was created 10 days ago, and has only linked to their external website content. No comments, just a couple of links. I think I'll pass and look at something that doesn't seem like spam.
JavaScript is neither asynchronous or single-threaded itself, as the language addresses neither. However, environments can be asynchronous by providing asynchronous APIs, which browsers and Node do. Older browsers were single-threaded as far as JavaScript was concerned, but modern browser environments provide web workers.
Yea sorry, I'm gonna have to agree, without real promises, this isn't exactly worth while over a much more established framework. Also, quit spamming us. If you want to discuss your new framework, or provide information, start discussing it with people. Spamming your personal sites without any additional context or communication is very spammy and illegitimate looking.
It's actually an incredibly smart design decision if you ask me. Async simply means that you can write code that doesn't execute until some time in the future, such as: on an event, after a timeout, or when a request completes. Multithreaded would mean: new opportunities for race conditions, deadlocks (assuming mutexes were supported, which they'd *have* to be), and other concurrency bugs. And for what? The truth is that the CPU is the bottleneck roughly... 0% of the time (rounding down to the nearest whole number). So parallelizing work in JS the traditional way isn't nearly as valuable as you might think. Now, consider Node.js for a sec. You probably weren't talking about Node; but it perfectly exemplifies why this async paradigm is so smart. Again, it's single-threaded, which makes code much easier to reason about. But all the things that would traditionally slow down your app in other languages are async: file I/O, database access, network calls, forking processes. In Java, for example, you'd typically spawn a thread and make a blocking call. With JS you fall into the pit of success because async is your only option, and it's a superior one.
Good stuffs
Hi @tbranyen, I created Sails. My apologies for any perceptions of dismissiveness- we're all 100% committed to the project and we realize we're all in this together. I'll answer your points below: + sails v0.10 comes with grunt sync, thanks to a pr from the community. The grunt integration is completely opt-out able-- just delete your gruntfile. You can change where static files are served from by using the path config. + associations are available in v0.10. They work cross-database/cross-adapter, and are optimized to reduce queries when possible, based on where your models are stored. + sails and waterline have over 500 tests, but you're right- our error messages could use some work. It's one of the things Cody is working on next in Waterline. + you can disable any of the hooks which comprise sails by setting the hooks config when lifting sails programmatically. We need more docs here, I agree. What magic in particular are you interested in disabling? Hope that helps, Mike
Side note: v.0.10 is 99% backwards compatible. I went to great lengths to provide reasonable deprecation warnings and support for 0.9 config wherever possible. You can check out the beta docs site at beta.sailsjs.org, and the migration guide here: https://github.com/balderdashy/sails-docs/blob/master/Migration-Guide.md
It comes from zynga so I hope no one ever uses this.
V0.10 is still in beta, but I have a beta docs site up at beta.sailsjs.org. You might also check out https://github.com/balderdashy/waterline-docs
You want /r/Java. Java and JavaScript are two separate languages.
You're correct. Apparently, I'm still living in 2003.
I'm sorry your program wasn't well received. Maybe if you post a Github page to allow others to hack on it or the source somewhere you might get a proper reviewing of the code. Stuffing it in a download doesn't seem to work well here.
Could be a problem when integrating into a page with other data. Would it be possible to somehow extend the CTRL+F functionality rather than replace it, e.g. when the user searches for something, let the browser do its thing but perform a custom asynchronous search in the background and if any matches are found, insert them into the DOM in the appropriate locations and then force the browser's search to refresh? 
Where's the JavaScript?
One last thing- as for disabling globals, you can use the 'globals' config to turn off any or all of the globals that sails exposes by default. Example: http://stackoverflow.com/questions/18617716/how-can-i-access-my-models-in-sailsjs-outside-a-controller (Worth pointing out: I originally answered that question in September-- you can now disable the sails global itself as well. Check out the unit tests in sails core for some examples of how you might go about bootstrapping your sails app with different hooks enabled, with and without logger/globals, etc) 
I'm sorry it wasn't very well received here. I thought it was very good, and the visual effects were nice.
I constantly get reminded, why I dislike Java.
This is a UX nightmare. It certainly looks neat, but terribly convoluted in terms of animation. Also, the positioning of the dismiss animation is misaligned.
And you're absolutely on target re docs-- we're working on it. We use sails ourselves, and I understand the frustration. We've been shifting our business more and more towards supporting sails for revenue, and it's allowing more time to focus on the framework, which is what has led to more of Cody, Scott, nick, and my time being spent maintaining, documenting, and building on sails. Here's the prototype of the new doc site: beta.sailsjs.org (The site is compiled from markdown in the sails-docs repo, with the idea that we can all keep up with it more efficiently if the community is involved. So if you see anything off-base , please send a pr or post an issue and we'll take care of it. Thanks for the feedback.)
Yes, I was looking at the source files. Saw one comment :)
There is more than one comment :| . Did you try to click on the link? You are supposed to see coffeescript, not javascript.
I think what you suggest is impossible at the moment.
You're right, I had written that comment originally looking at the JS, then looked at the Coffeescript halfway through and didn't change the "single comment" portion of my message. I see your comments now. They're mostly interface documentation, which is great for implementors (those using your code). The comments I was referring to were the ones that give little breadcrumbs of information to those who are reading your code and wanting to contribute. A little explanation of your thought process can go a long way when I'm scratching my head trying to fix your code. As far as the variable names, in most cases, you chose good names. However, [some of your algorithms](https://github.com/poulejapon/fattable/blob/master/src/fattable.coffee#L599-L629) need a little love in that regard. If I see `last_i`, `last_j`, `orig_i`, `orig_j`, `dest_i` ,`dest_j`, `shift_i`, `row_y`, `di`, `i`, and `j` all in one method, I really can't tell what any of those mean and I'm going to avoid debugging that method until I absolutely have to. A few comments, or variable names that have a stronger correlation to what's going on (`row` instead of `i` etc) would be very helpful. **Edit:** I cast a voodoo spell on the person who downvoted this. In their next job, they'll be stuck debugging code with single-letter variable names and no comments for pennies.
Hm, yeah, it seems that the find dialog is outside the window scope, so keydowns don't go through to the page. Probably not possible without using a custom search dialog. 
No problem. There is very little interest in anything I do. I'm somewhat invisible. 
I visited then left without looking. I'll explain why. I arrive on your advert infested tripod page and click on what I assume is an embedded javascript application, it transpires its an image which immediately begins downloading an archive which I wasn't expecting while simultaneously firing off an advert in a new window. This is a terrible experience, you can whine about being invisible or you can make some active changes which will help you to be taken seriously. If you need help with github pm me.
You're both right. I'm making tiny progress...
I appreciate you are still learning, but you could fairly easily output these values to the DOM without the need for the prompt so that whenever they change they update on your page. Once you are able to write this stuff out to the DOM you can look at using jquery animations to create transitions between different areas/chapters of your story. But yeah, dave guy is right, you need to use a backslash for escaping: prompt('STR\nAGI\nINT\nHEALTH');
This library is actually amazing. It is a near perfect pure math model of iOS momentum scrolling behavior. Very difficult to do. 
[MDN](https://developer.mozilla.org/en-US/) is a far superior resource for web stuff, w3schools isn't always right.
As an FYI, regardless if OP is a spammer or not, the sub's [sticky post](http://www.reddit.com/r/javascript/comments/1qyqvn/sticky_please_report_spam_here_when_you_see_it/) is a good place for reporting spammers.
If you're interested in React, you may be interested in a [companion blog post](http://brandontilley.com/2014/02/24/creating-chrome-extensions-with-react.html) I wrote to go along with the extension's release.
Shameless plug, if you're looking for a little bit less verbosity and mixins check out [CIP Classical Inheritance Pattern at its best](https://github.com/thanpolas/cip)
Idk about you but my chrome shat itself. I shouldn't have to dedicate a good chunk of ram to see your page!
The animations stutter in OSX on Chrome &amp; Safari.
As someone who is not really familiar with CI are there any complete working examples of using CI with the MEAN stack? Just a simple app would help me wrap my head around it.
I completely agree. After reading that, it's immediately apparent that the writer doesn't know very much about Javascript and what it was designed for.
Great, thanks!
Very cool. Would be great if it could be themeable (perhaps not windowed) and allow for extensions. For example, a calculator extension (type 8+2 and the output would be 10)
You're mixing up the things in the first article. Your snippet is actually not valid JavaScript and won't compile. You must have mis-read the article. The article also shows the second snippet. What you probably meant in your first snippet is: function NewThing () { return { attr: 0 }; } var thing1 = NewThing(); var thing2 = NewThing(); The above example is a so-called "factory". It's a function that creates and returns a new object. This is one way to do it. There isn't really "the" way to do it as it depends what you are trying to accomplish. However, the most popular way to mimic traditional OOP is they wat you did it in teh second snippet: function Thing () { this.attr = 0; } var thing1 = new Thing(); var thing2 = new Thing(); What `new Thing()` does is it creates a new object and copies the `prototype` of `Thing` in to it and then executes the code inside the function `Thing`. This is called a constructor function. You can add methods (functions) to the `prototype` of `Thing` which will then be available in the created object: function Thing (name, price) { this.name = name; this.price = price; } Thing.prototype.info = function () { return 'It\'s a ' + this.name + ' and it costs ' + this.price + ' dollars.'; }; var thing1 = new Thing('Banana', 10); var thing2 = new Thing('Coconut', 200); console.log( thing1.info() ); console.log( thing2.info() ); // will print: // It's a Banana and it costs 10 dollars. // It's a Coconut and it costs 200 dollars. **My suggestion:** Read the *entire* first article.
Oh, sorry for the mistake. So that means I could basically use either of these methods, but the second way really is more popular among developers. Thank you for the detailed answer!
Yes, in a nutshell. However, the first article doesn't say that your first snippet is the way it should always be done. It shows you different ways to deal with and create objects (and the rest of JavaScript). I suggest that you read the entire article. Slowly, and while trying some of the things out.
thank you! suggestions got noted :)
Thanks for the suggestions! My original implementation wasn't windowed, it injected DOM into the page you were on, but there were a lot of issues as you can't really predict what the host page is doing. Shadow DOM allowed me to get around styling issues, but key binds were still a problem on some pages. There were some other annoying issues that using a new window solved. The extensions idea is neat; I'll keep that in mind! [Edit] Can't spell
No. Reading pixel values out of a document (rather than from the canvas itself) would be a security hole and would require explicit user permission to do.
Not another one! I just learned Gulp over the weekend.
Fun fact... javascript was written in 10 days. So I really doubt the intial analysis even considered async/multi-threading things.
Only by [rendering the document inside the canvas](https://developer.mozilla.org/en-US/docs/HTML/Canvas/Drawing_DOM_objects_into_a_canvas). This is far from being trivial and rather error-prone. Maybe it is easier to find out what object is highest in the z-index-stack at the position in question and read the background-color/picture/etc. from the currentStyle/getComputedStyle.
There are a lot of well-documented, -used and much more versatile (e.g. mustache) or even smaller and faster (riot.js) template engines available. Why didn't you just google JS template engine and have a look at the first choices?
http://i.imgur.com/f6KRj9q.gif
You can write code that denies untrusted javascript modules access to parts the DOM. Allowing the canvas to read DOM data means that any module with access to a canvas may have malicious intent. This makes mashups (including script and content from many different locations at once) more dangerous than they already are. Incidentally, this rationale is similar to why you can't import image data from remote domains into a canvas and then read the pixel data from it.
Fixed, thank you.
Correct.
If you have so many tabs open you need a search box, you're doing it wrong.
Thank you all, I love reddit, haha.
This is absolutely fantastic man. I've veered away from regex for so long 'cause I can never manage to grasp it... this really helps! :)
Fixed, thanks.
id really like to share my project with you and see if you canhelp me out 
Check out [Broccoli](http://www.solitr.com/blog/2014/02/broccoli-first-release/)! There are too many build tools…
i don't really get what their problem is with gulp. They say that it's "trees not files", but gulp's more "streams all the way down, until you get to the turtles".
This is great, though it would be nice if there were some way to navigate through sections.
It's like grunt, only not as good... 
This is great!
I guess I don't usually have as many tabs open as you, but ctrl+1..9 usually works fine for me. (works in any browser)
thanks! I've always wanted to learn regex syntax, but never really knew where to get started.
I did a quick count and I have 30, including pinned tabs. :) I know a few other people with tab-itis, as well. My old boss used to have 50-70 open at any given time. o.O In the end, though, this was really just a scratch-my-own-itch kind of project that I thought might be useful to others. \^_^
I'm not aware of any, but I'm not a big Safari user. I ended up making this because I couldn't find a solution I really liked for Chrome, so it wouldn't surprise me if there wasn't a great one for Safari.
This dates back to the very early days of the language when it was primarily used for things like validating form data. In those very early days nobody used DOM methods like `getElementById()` and such -- the DOM didn't even exist. Instead, form fields were just exposed as variables in the global namespace and you interacted with them directly: if(foo.value.length == 0) alert('Name must not be empty!') ...and so on. It was extremely crude and anyone coming from a modern perspective would be horrified to see code like that, but for backwards compatibility that has to be maintained.
Seeing as I just started working with Meteor, with 0 mongodb and node.js experience, this might be good. Thanks.
Yeah, I think people are sort of missing the point of it. It does have issues though.
It's on the list. Because of the really, really hacky way I'm using eval, it's surprisingly difficult, but it's definitely something I want to do (debugging level 26 is a bitch, right now).
Pros: * Short. Cons: * incredible insecure. * mixes code into the template * promotes using code IN the template (as opposed to logic structures) * did I mention **incredibly insecure**?
This sounds like a great reason to namespace your js and not pollute the global scope. 
So much work to avoid just using the correct prototypical pattern. 
Huh?
It's now fixed.
You would have at least had my attention if the actual syntax was *.less → %f.css *.css → %f.min.css *.min.css → dist.min.css but no, of course not, it's just as bad as grunt.
http://www.2ality.com/2012/08/ids-are-global.html Well, just don't use globals.
Looks great! I also saw your other visualization projects and I'm impressed! I'm thinking of learning D3.js too for a project that will read JSON files from voltage readings and display them in real time. Any advice where I should start? Thank you and keep sharing amazing work :).
Hey, cheers. D3 has great examples [here](http://bl.ocks.org/mbostock) and great documentation. Plus there are a few books available as well that can help. As for visualisation design, I wrote a blog post on designing visualisations [here](http://maori.geek.nz/post/book_edward_r_tufte_envisioning_information) from a Tufte book. 
You should post this to http://www.reddit.com/r/web_design/ and http://www.reddit.com/r/webdev/
Thank you jaybusch and specimin for taking the time to comment.
Oh, it's a *lot* worse than that. All the old DOM0 properties get stuffed into namespaces where you'd never expect to see them. Never name inputs things like "nodeType" or "id" or you'll regret it. And older IE? Don't get me started. See here: http://kangax.github.io/domlint/ 
If you do any mapping stuff, this is probably your best 2d library out there. I use Leaflet everyday as my job and I can't recommend it enough.
I've been trying to pick a good js builder out of all this mess. Anyone tried mimosa or gulp? Not really sure what the differences are. 
As someone who writes dust templates in my day-to-day job (using [LinkedIn dust](https://github.com/linkedin/dustjs)), there are two features that I like about dust: * its "less-logic" approach * its asynchronous nature **The "less-logic" approach** is something that I like since it helps to keep templates clean. Since it's difficult to massage data within a dust template, it forces you to think about the structure of the data ahead of time and transform it in a layer other than the presentation layer. Some see this as a disadvantage; to each his own. **Its asynchronous nature** is useful for lazy-loading and also works well if your data is streamed (allowing for early flush if used on the server side, for example). You may have a template that uses other templates (partials) which will be loaded lazily when rendering takes place, allowing dust to request the template *when it is needed* rather than loading all possible templates at the same time. I'm sure there are other reasons why I like working with dust, but for now these are what I can think of. Edit: I remembered another things I like: blocks/inline partials. **Blocks and Inline Partials** let you write a more reusable template. For example, you can create a template for a page containing a block for the header, body, and footer. That template can be inherited from, but you can override the blocks with other stuff. If you don't override any blocks, you get whats in them from the base template. Here's a little example more or less taken from [LinkedIn's Dust Tutorial](https://github.com/linkedin/dustjs/wiki/Dust-Tutorial#wiki-blocks-and-inline-partials): **Base Template** &lt;div class="page"&gt; &lt;h1&gt;{+pageHeader}PayPal{/pageHeader}&lt;/h&gt; &lt;div class="bodyContent"&gt; {+bodyContent/} &lt;/div&gt; &lt;div class="footer"&gt; {+pageFooter} &lt;hr&gt; &lt;a href="/contactUs"&gt;Contact Us&lt;/a&gt; {/pageFooter} &lt;/div&gt; &lt;/div&gt; **Extending / Overriding blocks in a child template** {&gt;"shared/base_template"/} {&lt;bodyContent} &lt;p&gt;These are your current settings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;xxxx&lt;/li&gt; &lt;li&gt;yyyy&lt;/li&gt; &lt;/ul&gt; {/bodyContent} {&lt;pageFooter} &lt;hr&gt; &lt;a href="/contactUs"&gt;About Us&lt;/a&gt; | &lt;a href="/contactUs"&gt;Contact Us&lt;/a&gt; {/pageFooter} Since the **pageHeader** is not overridden in the extending template it gets the default content from the base template, but as for the other blocks, they are filled in with the content from the extending template. I use this concept frequently since you can learn to compose templates in interesting ways that increase modularity and reuse.
I agree with you with regards the data structure, a square peg shouldn't fit into a round hole ! Thanks for your comment I found it insightful :D
That's awesome. It's like Livereload... that doesn't crash! (And works smoothly with WAMP!)
It's been done over 15 years ago, nothing new here.
I knew this, and ignored it until one day I forgot to function somesuch() { //var someElementId = "I forgot to actually declare this variable"; if (someElementId) { return "Oops!"; } return false; } Wackiness ensued. But hey, I found my bug!
Awesome! I'll certainly be going through this. I could use a bit of learning in this direction.
You should cross post this to /r/d3js 
Once you want to test one out: https://www.debuggex.com/
For a while, I'd have ~200 at a time on average. Great extension.
Phew! That's a lot even by my standards! =O
At first I didn't like it at all. Then I started using it and appreciated it's features over it's initial appeal. It's far more powerful and works really well. You just have to get used to it's syntax not looking as gorgeous as Mustache or Handlebars.
It can be on either end. If used with Node.js you can have the server render it or it can be used in the browser.
I find http://www.regexper.com/ really helps too.
Thanks, syntax is nice but I prefer functionality personally( unless it is unneeded)
Yeah, I've found that snapping feels a little weird.
Leaflet.js is awesome. I've used it to do [this]( https://www.rijksmuseum.nl/nl/search/objecten?q=melkmeisje&amp;s=relevance&amp;p=1&amp;ps=12&amp;ii=0#/SK-A-2344,0). It did require a fair amount of tweaking tho :-)
How would I go about getting interested GitHub members to look at this Javascript Game?
Thanks. I'll add this to my list of reasons why you shouldn't use attribute "on" events. Didn't know about this one.
Yeah, I'd seen it already. It seems slightly more boilerplate code though. Maybe I should make grunt-generate-configs and load-grunt-configs compatible though. Thx for the point!
Also, have a look at my post re [managing large scale projects with Grunt](http://thanpol.as/grunt/Managing-large-scale-projects-with-Grunt/)
Couple of things: * I have seen a similar libary - [BreakupJS](https://github.com/jessebeach/breakup) * The problem is in medium. Sometimes I just want to execute when I come to medium from small, and not from large. Hence somehow I like enquirejs better, since it allows me to use the media queries as such. And usually, you can use variables for media query strings, that kind of give you the named regions.
This is perfect, every regex beginner needs to know about this tool, I wish I had this when I was first learning. You should implement a next() function or table of contents to skip around lessons
As far as I understand, it has nothing to do with the on attribute. It's a HTML5 standard.
...but I can't actually peel the sticker off. You're going to leave your audience with all this unsatisfied peeling angst while they're browsing your website.
Also feels like the element is trying to avoid the mouse which isn't good for clickable things.
Today we'd say it's an elegant DSL for accessing your form elements.
It's on the list. Thanks. EDIT: Done!
I'm on mobile, all I see are two squares? What is this?
As a new guy to JS and web languages, what does this mean?
Cute, but I see very little if any practical applications for this.
If you added a images under the stickers in your examples, users would see much more use for this imo
Well, more like HTML 2.0 (in 1995). 
Saw your code before your comment... was so thankful to find that you were being sarcastic..
This is really impressing, good job !
Everytime I see the domain listed next to the link, my brain translates it as "Filipina Awesome". Can't unsee...
[Firebug lite](https://getfirebug.com/firebuglite) is curiously missing from the blog post, which would be my 1st option.
Original post can be seen here: http://www.reddit.com/r/node/comments/1yv4um/patternemitter_node_event_emitters_with_support/
Very nice looking site, but the library doesn't appear to do anything novel.
Is the source code available for this?
Link to github or something, and a license. Having access to the source isn't the same thing as having the right to use the source
And the "I want to maintain a popular module" lure. And the "not invented here" and of course "there are 200 tools like this but mine does it slightly better (because I made it and was to lazy to find something else, didn't want to collaborate and just want something on my profile)"
Don't be a hipster and just use grunt and make beautiful projects instead of worrying about the perfect build system.
Then it isn't for you, is it?
Great tutorial, thanks for supporting us! If anyone ever needs Firebase advice or guidance, feel free to email me at abe@firebase.com
It worked me on Firefox, but second request just made two copies of first request.
me too nevermind, it worked after a couple more tries
 &lt;script&gt; var AKSB = AKSB || {}; AKSB.q = []; AKSB.mark = function (b, a) { AKSB.q.push(["mark", b, a || (newDate).getTime()]) }; AKSB.measure = function (b, a, c) { AKSB.q.push(["measure", b, a, c || (new Date).getTime()]) }; AKSB.done = function (b) { AKSB.q.push(["done", b]) }; AKSB.mark("firstbyte", (new Date).getTime()); AKSB.prof = { custid: "223233", ustr: "", originlat: 0, clientrtt: 61, ghostip: "172.229.8.44", ipv6: false, pct: 10, xhrtest: false, clientip: "167.181.192.7" }; (function (b) { var a = document.createElement("iframe"); a.src = "javascript:false"; (a.frameElement || a).style.cssText = "width: 0; height: 0; border: 0; display: none"; var c = document.getElementsByTagName("script"), c = c[c.length - 1]; c.parentNode.insertBefore(a, c); a = a.contentWindow.document; a.open().write("&lt;body onload=\"var js = document.createElement('script');js.id = 'aksb-ifr';js.src = '" + b + "';document.body.appendChild(js);\"&gt;"); a.close() })(("https:" === document.location.protocol ? "https:" : "http:") + "//aksb-a.akamaihd.net/146060/aksb-a/aksb.min.js"); &lt; /script&gt; There, that's a bit better yeah? Looks like it's creating a new iframe for a profile P.S. Most IDE's have a document formatter to clean up code like this. You can also do it from the chrome developer tool by hitting the "{}" button usually on the bottom-left of the window. Or you can use something like [jsbeautifer](http://jsbeautifier.org/) online to do it.
The author's site and twitter are at the top of the page. Hit him up!
Is it just a matter of coding experience to be able to take that garbled mess and make it look like readable code? 
You could break it up manually if you know the general structure of the language, or copy/paste the JS into an [unpacker/beautifier](http://jsbeautifier.org/).
http://jsbeautifier.org
Sorry for expressing my opinion on a public forum. I don't see any practical applications for this in general. Where would you see use for this?
Oh no. It's real. &gt; HTML Living Standard — Last Updated 25 February 2014 http://www.whatwg.org/specs/web-apps/current-work/#named-access-on-the-window-object
Thank you very much :)
Tips: * Make navigation buttons to be able to go back and forth between lessons, since some of them reference previous techniques that are easy to forget * Be more concise about the lessons, some of the instructions are pretty fuzzy and have to be read through a couple of times, and reasoned with in order to assert what's actually wanted. * Couple of syntax issues in some of the examples, (I can't browse back but I remember there being a space for one of the curly brace selectors e.g. {5, 8} when it should have been {5,8}). That being said, pretty fun tutorial. I got stuck @ lesson 24, using this: &gt; var reg = new RegExp(username+'=([\\w]{1,})'); &gt; reg.exec(userData) (I had to double slash the \\w, otherwise the string ignored it) which returned: &gt; ["BobbyTables=happy", "happy"] so it's in the returned list, but I'm not sure this is what was wanted and couldn't exactly figure it out. (tried a non capturing group but to no avail).
Wow that was quick, I mean the time between the press release and this implementation not the text reading sped with Spritz. I was thinking myself about cloning Spritz. This is cool!
really? I mean it's just code.. You can do just about everything that node could do using streams, promises and callbacks.
And my opinion, that I was expressing, was that if you don't see a use for this is that it isn't for you. I could see this used to display sale prices or something else you'd want to tease. Maybe some copyright or disclaimer text. 
Wow, I finally kinda understand regular expressions. Thanks!
I just added support for IE9.0 thank to your tip. Merci beaucoup, mate!
did you read my comment at all? I gave you three options for formatting the code, of which one you need only copy/paste into a website.
I'm not terribly fond of it's syntax either and have hit parsing errors with it's single {, but tried it after seeing paypal and linkedin starting to use it. My only issue other than it's syntax is that it doesn't handle templating errors very well. A missing partial in the template renders nothing instead of just a blank space. Loading the templates up at server side is a bit odd as well. I'm pretty sure it's just doing an eval on the compiled templates. 
I hadn't heard about this yet. This is great!
I'd love to hear what others think
PM me. I'm actually very available for the second half of the event and would love to be involved.
This could be fun, pm me as well
Awesome! Glad to be of help :D
Did you have something to say in that blog post? The post hems and haws and says very little about anything. This might happen or that might happen. This that etc. Is there a takeaway? You know what I noticed? There don't seem to be any women on your engineering team, there are none on your board, and only a single woman executive. Your merchant success management team is nearly all women, and they are nearly all hot. Maybe you should write a blog post about that!
Looks like the code doesn't use touch events, only mouse, thus it won't work on mobile.
Well yes. But it's not been added as "part of HTML 5" – the behavior was introduced in the days of HTML 2.0. 
All calculations are probably done in the fragment shader. Bumpmapping and cube maps are perfectly fine techniques for raytracing as well.
You can read the source and dissect it and learn from it. There's nothing stopping you from doing that. EVER.
(this is a guess, but I've read similar papers) The raytracing part is for the iris / cornea, the mesh being rendered is spherical. The fact that the iris looks recessed is then done using a shader. There's a really great application of this in Portal 2: some of the ceiling lights look like fluorescent tubes behind frosted glass, and you can see the glossy refraction of the tubes moving behind the glass. But it's all done in the shader, the surface has no depth to it, it's just two texture layers moving relative to each other.
thats sweet, the more you know i guess
I notice between this one and the spritz is it actually slows a little on longer words and doesn't quite have the red letter directly in he center but closer to the first third. 
Can't I tell counterup to look for and count-up any class? And, yes, Waypoints is included and I would just use that, but it seems to rely on elements reaching the top of the viewport, which they don't in this case because everything is fixed-positioned. Thank you for your answer. 
Must play Portal 2 again. For science. You monster.
&gt; Once you’ve been working on your app for a little while, it’s almost inevitable that you’ll end up with at least one very complex (or long!) data-bind attribute. Long element data-binds are a code smell that you're putting functionality/responsibility in the wrong place (in this case, the UI). If you start writing anonymous functions in your bindings, you should stop and reconsider your design. There's no need to do this: &lt;button id="level" class="btn" data-bind="text: level, attr: { title: level }, click: function() { level(level() == 'Info' ? 'Warning' : level() == 'Warning' ? 'Error' : 'Info') }, css: { 'btn-info': level() === 'Info', 'btn-warning': level() === 'Warning', 'btn-danger': level() === 'Error' }"/&gt; A developer coming back to this is going to scratch their head at this for awhile. That anonymous click handler function goes in your view model. Those equality comparisons in the `css` binding, go in your view model. But since the `css` binding logic is only trying to assign one of those three classes, there's no need to have an object with those conditionals. Just bind to a computed that returns the string name of the class you want. The button should read like this: &lt;button class="btn" data-bind="text: level, attr: { title: level }, click: setLevel, css: level.btnClass"&gt;&lt;/button&gt; Any developer coming after me to maintain my code will spend less time here trying to figure out what this button does. If they need to see what `setLevel` or `level.btnClass` are doing, then they can visit the view model: function ViewModel () { var self = this; self.level = ko.observable("Info"); self.level.btnClass = ko.computed(function () { switch (self.level()) { case 'Info': return 'btn-info'; case 'Warning': return 'btn-warning'; case 'Error': return 'btn-danger'; default: return ''; } }); self.setLevel = function () { switch (self.level()) { case 'Info': self.level('Warning'); break; case 'Warning': self.level('Error'); break; case 'Error': self.level('Info'); break; default: self.level(''); } }; } Here's a [fiddle](http://jsfiddle.net/VGLBZ/). Ryan Niemeyer has a [blog post](http://www.knockmeout.net/2013/10/knockout-3-highlights.html) about the highlights of KO3. He covers [preprocessor](http://www.youtube.com/watch?v=kep19WW7rp8#t=327) bindings. If I thought I was going to be using this all over the place, I might make a customBinding named `btn-level` (or whatever makes sense to you). I would leverage the preprocessor and init in the binding so this: `&lt;button data-bind="btn-level: level, click: setLevel"&gt;&lt;/button&gt;` would turn into this by the end of the preprocessor: `&lt;button class="btn" data-bind="click: setLevel, text: level, attr: { level }, css: level.btnClass"&gt;&lt;/button&gt;`. In the init, I'd append the btnClass computed onto the level observable and then you don't need that in your view model or any other view model. If you use and love Knockout but are starting to have long binding strings, start to really explore what customBindings can do for you. The preprocessor is a great addition to the options available for configuring a customBinding, and although the `data-bind-*` trick is neat, it introduces an unnecessary layer of complexity for a problem that should be solved by packaging up long data-binds into the view model and/or into customBindings. **Edit:** Here's an updated fiddle of how I would want this to work: http://jsfiddle.net/nwayve/VGLBZ/1/
My experience with ExtJS may or may not be representative. I began working with it two and a half years ago when 4.0 was the new hotness and I stopped working with it a year ago when it was still bumbling around in 4.1.x. First of all, ExtJS is not even in the same category as AngularJS. ExtJS is for making webapps that look like desktop apps. You can theme it, but if you're looking to make a webapp that embraces web technologies, ExtJS is a bad choice. AngularJS is agnostic about the presentation, ExtJS is all about the presentation. It's a GUI framework. Secondly, ExtJS is a commercial product. Sure, you can use the GPL version, but that's not how it is meant to be used. Not that the commercial support is very good: the "standard" support buys you four support tickets for $299 -- plus the forum, which is not going to help you with "real" problems (i.e. anything that can't be answered with "RTFM" or a link to a tutorial) anyway. We only raised a single ticket and the resolution boiled down to "this will be fixed in a future version". ExtJS has Sencha Architect (formerly ExtDesigner), which is theoretically an awesome tool if you want to do rapid prototyping. Sadly it was very limited at the time (I doubt it's improved much) and can only be used to place the stock components and is really just a glorified configuration tool. If you try to do anything remotely fancy, you're suddenly stuck in a crappy Dreamweaver WYSIWYG reenactment. Finally, ExtJS suffers from ridiculously bad design (at least if you consider its price tag). Most design decisions seem to come straight out of the last decade and the async parts are scary if you look at them too closely. If you need to override any parts of ExtJS core, you'll end up either blindly monkey patching all of it or rewriting entire classes from scratch. Despite being a humongous GUI library apparently extensibility was not part of the design (here's a hint: events make for cheap extension points). Oh, and don't get me started on what happens if the server connection is even remotely unreliable. ExtJS was written for big business CRUD apps with a rock-solid server connection, inexhaustible budgets and no UI designers. At least that's the only scenario in which I would even remotely consider it a good fit. Apparently Sencha Touch is somewhat reliable, though. Most of the Sencha tooling (i.e. the SDK/toolkit) at the time only supported Sencha Touch, but as far as I can tell Sencha simply re-invented (pre-invented?) Yeoman and other tools that have good open source alternatives.
I'm really impressed that this worked with reasonable performance on my Xperia Z in Chrome. 
Fun idea but you're completely undermining the entire point of OKCupid! It's actually a really sophisticated application that when used properly can help you *narrow down* your dating pool to people you'll have successful dates with. If you try to game the system like this, you're likely just going to wind up getting banned. You'll have a much better time reading and using the tips on the OKCupid blog or over at /r/OKCupid. You don't need to mess with the hearts and heads of dozens or hundreds of internet strangers and throw off the carefully-tuned algorithm. Props for seeing a programmatic solution to a problem, but give OKC a chance to work. My amazing girlfriend and I have been together for over a year thanks to OKC. :)
Correction: this sounds like a great reason to *use modules*.
Or you could simply use [credential](https://www.npmjs.org/package/credential) for your password logic. There's really no point in writing the glue for a hashing algorithm yourself. Plus, it uses PBKDF2, which is currently better understood (i.e. more trustworthy) than bcrypt/scrypt.
I don't want an external library to screw with default events like `change`. Why? Let's say you have a plugin that just converts everything to uppercase: - onchange 'h' - onchange 'H' - onchange 'He' - onchange 'HE' ... - onchange 'HELLO' I'd rather listen to a custom event on the library. Your point about a lot of libraries just having single function callbacks is correct, the practice is archaic.
Jquery
node.js does eventing really well
Oh so Node.js uses jQuery to manipulate DOM as well? You clearly misunderstood the question.
I like you use comments for ranting.
And [Browserify](http://browserify.org/) brings that to browsers. Switching to node.js and Browserify has made my web development so, so much easier.
If you don't want to use OKCupid, you should use a service that more closely matches your needs. Or go to a bar :)
Why is Google's CDN missing in that graph?
I have just published a tutorial using both Skrollr and Waypoints. Check it out, you might find a snippet which will help you. http://ihatetomatoes.net/how-to-create-a-parallax-scrolling-website-part-2/
"onchange" is usually only triggered when focus moves off the control.
was on mobile and didn't read the PS or below... jsbeautifer bookmarked.
"to move where the ball is heading" The ball will always keep heading someplace new. Whatever you choose, become sufficiently proficient in it before chasing the next shiny toy.
You forgot to add "only in Google Chrome" to your post title.
&gt; and they are nearly all hot. You ruined your argument with that.
+1. I wrote some event bindings onto a bunch of check boxes (select all + delete selected sorta deal). The front end team implemented iCheck which does make form elements &amp; checkboxes look rather nice, but it basically uses its own event binding, and doesnt proxy events to the original elements. Breaking all the javascript I wrote previously :/
Yes, absolutely obsolete. 
Take an evening to get familiar with Backbone, and you'll probably be fine. It's very small in scope, intentionally. It won't take very long. You can get Backbone literate in no time. If you think a company isn't looking toward the future, then don't work for them. I think Backbone has fallen out of favor because Angular solves a lot of common pain points of working with it. Personally, I can see this being what happens a little bit down the line with Angular, too. The common pain points generally come out of a lot of freedom to do things in bad ways, so you've got a few super teams of Angular best practice people, and a lot of people feeling around in the dark, making a mess. I'm a big Ember fan, because it's more conventional, and the best practices are baked in, and one of the core design philosophies in Ember is minimizing ways for people to shoot themselves in the foot, unless they're really going out of their way to circumvent conventions. It makes it harder to get started, but I think it's more forward thinking, so it's an investment I don't mind making.
If you put an inline script tag just before the `&lt;h2&gt;`, any script inside it will be executed immediately before that element is rendered; and an inline script tag just after it will get executed just afterwards. Doing something like this is a really bad idea, though.
It would render top to bottom. Thats why its a common practice to include any JS you're working on in the footer. This allows the DOM to have structure at the point that the JS gets loaded. If you can tell us the purpose of the request we can give you a more accurate and acceptable answer. As already stated any inline JS is considered bad form. 
I think for some projects the bigger frameworks are over kill so backbone will always have it's place. It's also a good starting point if you want to roll your own framework for your specific needs. Short answer: "No, it's not going to be obsolete."
I'm on an application written in upwards of 40,000 lines of ext js 3.4. My experience with it is similar to yours. There are a lot of nice things about it. The tree panel, although a bit difficult to understand at first, provides a wide range of functionality very easily. All their components are very customizable. We are using the php symfony 1.4 library for ext direct (rpc), which works quite nicely to batch several requests together. And if I ever have to write another line of ext code in my life it'll be too soon. I hate ext. For all the reasons you describe and more. It gives you very little help to avoid dom thrashing unless you are aware of the inner workings of the framework. We had a panel that was taking 20 seconds to load because of all the events being thrown around during the etl phase of reading in the back end data. Took a couple days to identify the problem, which was solved with little more than `.suspendEvents()` and `.resumeEvents()`. It's an impressive framework for the number of features and options, but I will never accept another job offer from a company who's application is written with it. 
I don't think that's entirely true. While you're right that Backbone.JS has lost some momentum it still has an advantage over Angular.js and Ember.js. The last two are full blown frameworks, were as Backbone.js just offers MVC basics (it's like looking Rails vs. Sinatra or Express.JS). We use Backbone.js for our "Manage Workspace" (at Get Satisfaction), we are quite happy with it and we are not moving much. Lately, we've been thinking in bringing React.JS and replace the view parts from Backbone.js, rather than switching over full frameworks like Angular.JS and Ember.js. At the end it's not a matter of what technology is the coolest thing nowadays, that's simply stupid! Instead look at the thing that you're trying to build and choose the right tool for it!
Don't be blue, http://www.w3.org/TR/file-system-api/ While this might not be of use to *you* for a production website, the goal is to empower forward-thinking HTML5 developers who don't mind using experimental technology to create something awesome. :) Sorry if you felt misled!
Exactly. I know what to expect from default events and I don't want anything going in and potentially changing them. That's a matter of standards. If I want to key off an event fired by a plugin, then I want that event to be clearly documented and have a specific use case as well. This will also help in debugging, as I can clearly separate it from the default events. 
Keep in mind, while Backbone.js is losing steam it still will be around for many years. It's not like it's going to disappear next month. Personally, I think it's totally worth the time to learn Backbone basics considering you can do it in a weekend.
Thank-you very much! Much appreciated. I tried this, but got (many of) the following errors: Uncaught TypeError: Cannot call method 'shift' of null I clearly have alot of learning to do. Thank you anyway, I really appreciate it. I'll try posting this to Stack Overflow.
I used your first article when I was learning to use Skrollr! Thank you very much. I will take a look, much appreciated.
Pretty sure you can do this with PhantomJS and even HTML5 canvas.
How exactly is this w/o size limitations? If it is using the Chrome File System API there is a quota limit I believe. 
vote for node + phantomJS
I found this a couple of days ago: https://github.com/sindresorhus/pageres Seem to do what you're after. 
You set the file quota limitations yourself. "Without limitations" is a misnomer I suppose, but "without practical limitations" is more accurate. A 1GB sandboxed FileSystem is not unreasonable. With a persistent FileSystem there's a considerable upper limit. var a = new FSO(1024 * 1024 * 1024 * 10, true); a.createQueue() .getBytes(function(a, b) { console.log(FSOUtil.prettySize(a), FSOUtil.prettySize(b)); }) .execute(); Logs 0B 10GB Assuming the user has 10GB of space available. No problem. (Of course, this is using persistent storage, meaning the user will have to agree to storage upon first-visit initialization.)
You should try to take what you've done and make a function out of it. That way you can get the Fibonacci sequence to any number you pass in and not have to change your loop. maybe it would look like getFibanacciTo(4000000) and print them to the console. Good luck on your journey!
Ok, so "practical limitations" makes more sense. ;) 
You want to attach to the native events, yet I assume you also want whatever abstraction is offered by the plugin. Let's say you use a phone number formatting plugin. If you do this: $("#phone").on("change", ... ); $("#phone").telephoneFormatter(); No matter what, you'll be getting the native change events before the plugin can get them and reformat the data, since you attached your event first. So the best the plugin will be able to do is update the #phone and fire a *second* change event manually, if you really insist on reusing the DOM event. The reason the plugin offers a `change` option is that it's an *abstraction on top of the DOM element change event*. If having to pass in an option to the plugin is objectionable, the best way to deal with that is to have the plugin fire a synthetic event of a different name or with a namespace.
No.
It's [open source](https://github.com/nikolac/Bookly) and built primary with Dojo.
Always good to have alternatives, I usually use jsonlint.com
Nice list. [Simplebuild](https://github.com/jamesshore/simplebuild) might qualify (or might not). It's a way of creating universal build plugins. In other words, a simplebuild module can be used as a plugin in any build tool, including vanilla JS. It's still very early in development.
[big.js](https://github.com/MikeMcl/big.js/) ... only 2.6kb
Implementations come and go. They also change a lot over their lifetime. It's the ideas behind them that really matter. Do you believe that Ember's opinions will help focus your team, or will it force you into the wrong architecture? Do you think that Angular directives are a helpful abstraction or a hindrance? Do you think Backbone fits nicely into your stack or is too unopinionated to the point where you can't build anything performant with it? Everyone has different answers to those questions. Contrary to what many say, I certainly think that most frontend JS systems are competing. Most apps on the web are doing basically the same thing, so when people say "they are different tools, use the right tool for the job", I think that should be interpreted as "the community doesn't know the best way to build a frontend, so take your best guess at the right way to do it". With that said, React is clearly the best and you should use it :P
I know that it was just a tutorial so the example is basic but I had an initial reaction of cringing for all that js code to create that simple example. That's not to say that I have a negative opinion of React, I've only heard good things about it. Like I said, was just because the example was simple, nothing more 
I did a new RegExp(gibberishRegexSimilarToYours).exec(userData) and got it right, setting it to a variable and executing it then did not work.
Hello Fgutz! (Can't find your name) Once you write one application with React you will easily remember the main methods and what they are supposed to do, the API is very simple. Thanks for the comment,
Why do some have strikethroughs?
&gt;The Browserify author cannot call RequireJS a piece of junk! The Ember folks cannot say the Angular dudes don't know what they are talking about! You just cannot do that, it's inappropriate. They can do whatever the fuck they please, you don't have a right not to be offended. There are too many frameworks doing the *exact same fucking thing*. Progress does not come of reinventing the wheel over, and over, and over, and over.
There's always [jQuery Math](http://www.mikedoesweb.com/2012/jquery-math-finally-solved/) :D
My only beef with that one: `var Big = require('./big');` Ummm, why isn't it an npm module? Means to `require` I have to install it as a file in node_modules, can't use npm update etc. and I have to make an exception in my git ignore. It's annoying. Other than that, good choice. Edit: oops, looks like he's fixed that: https://www.npmjs.org/package/big.js Works fine in node now: $ npm install big.js --save &gt; bjs = require('big.js') &gt; bjs(12209384902834902834029384).plus(109283091821930812098390) { s: 1, e: 25, c: [ 1, 2, 3, 1, 8, 6, 6, 7, 9, 9, 4, 6, 5, 6, 8, 3, 3, 8 ] } 
your class does not actually look like JavaScript, not even ES6
Stay away from doing your game logic in `requestAnimationFrame`. Doing this is going to cause the exact problem you are trying to avoid. The request animation frame should be as simple as possible as it's basically the vsync/buffer code. Adding additional latency in that is going to have more drastically visible effects.
it's a Unix system, I know this. display zebraGirl.jpg
that's as far as I got.
It looks like TypeScript.
I was really hoping this would be the crazy Unix filesystem thing Lex uses to turn everything back on. But, it is still pretty awesome.
You could use [html2canvas](http://html2canvas.hertzen.com). Its based on recreating the DOM though. I think PHP for windows has a screenshot function which might give more accurate results though. Edit: I take it back - Use PhantomJS or pageres.
How is the "stars" column derived? I've been experimenting with both gulp and grunt. While grunt was "first" and thus has a lot more plugins and adoption, gulp seems way more straightforward with less tempfile management and has all the necessary plugins that I can think of, so I'm really wondering if and why people genuinely prefer grunt over gulp. 
more plugins
nooooo reinventing the wheel and having thousands of choices is good for the soul
what the fuck is happening to this subreddit
access security grid please system security grid
Stars is the number of stars that the GitHub repo has. Some people prefer Grunt because it is easier to configure—try explaining Node streams to a developer who knows HTML, CSS, and a bit of jQuery.
[IRIX](http://en.wikipedia.org/wiki/IRIX). It is/was a real OS.
It's not that surprising to me that a non-zero value evaluates to `true` That is the case for various other languages (e.g. C, Python). Java requires a boolean value when using `if` statements, so it might be a little confusing if you are expecting that behavior. If you want strange, try this little Ruby snippet: if 0 print "Zero is truthy!" end
cool! didn't know that
It bothers me more than it should that I can't close the window after I've opened it. Maybe because I'm at work.
its a UNIX system....I know this
Hm, that could be any number of things. Looking back at the code I posted, I wrote ".count" instead of "count" for the class in the div. If you copied that directly, it might cause an error with the counterup line later on.
It looks great!
That's actually expected behavior. I expect that when a number is cast to boolean to get false, true and nothing else. So you have false for 0, true for 1 and what for everything else? If the number is zero I expect it to be cast to false, and if it's a non-zero value I expect it to be !false. The same is for strings where you have the empty string similar to 0. It all seems natural.
Well you shouldn't be relying on events to fire in any particular order. A much better technique is to exploit event bubbling and put secondary listeners further up the hierarchy. For instance, my formatters usually act on an input itself, but the data change listeners sit at the form level. In the case of native JS, I totally agree with you that you can't keep using native events, because then other code will have to be aware that you've got some state modifying code running, and then you'd need to add more code to see what state the element is in, and so on (I think you see what I mean). In the case of input-enhancer jQuery plugins (and although my comment is general in nature, jQuery plugins tend to be the worst offenders and also have the easiest way out) modifying input values, jQuery has this feature called `valHooks`, which no one seems to understand. You can actually override the default behaviour of `$.fn.val()`, swap out the unmolested value for a formatted one, but when queried with `val()`, other code will always receive the native event. So provided you write your valHook function carefully (in case other plugins also override valHooks), you can do all this cool state changing stuff, manage it under the hood and not have to worry about other user code or plugins having to understand what you're doing. Some plugins will create new functionality that is totally different from anything native, and it's reasonable then that they expose new events, but if they hinge off of native elements they should continue to respect how that element behaves. My form validator code shouldn't have to know whether or not there is a combobox library dumping additional UI on top of a native `select` element. That being said, I appreciate that in some instances actually writing plugins this way is difficult, because you have to reverse engineer every user interaction. I actually started writing a [select box beautifier plugin](http://jsfiddle.net/jamesinc/5bSYN/) around this concept a while ago, and quickly learned how extensive select box functionality is (especially if you want full native keyboard support)
Totally just did that, at work. Not that its that NSFW, but still lol. I was digging in all the help stuff and was like I got this! 
I'm glad we're on the same page, good thing you can hide it in the overflow or make the console active focus
 access console That was awesome!
I guess its only triggering the access console twice without saying please that makes it happen 
Well to be honest, this post was made in a /r/javascript subreddit and nowhere in this post is "jQuery" even mentioned. Also, what question are you referring to again? 
I don't think it could ever go "out the door" until it is officially no longer supported. Backbone is still a better library to use in many cases. It's less opinionated than Angular or Ember, so it's quite nice in situations where you want a bit more control. Plus, you may not take long to pick it up. I am using it for a client project right now as my first project, and after modifying the Todo project they use as an example, it didn't take long to figure out how to start from scratch. So, it doesn't hurt to try it out.
sudo access security grid please
Simplebuild is still being developed, so you can take out the strikethrough. I just hadn't pushed my recent changes.
Removed! Didn't realise you were the author :)
i hate this hacker crap
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Fsn**](http://en.wikipedia.org/wiki/Fsn): [](#sfw) --- &gt; &gt;**fsn** (File System Navigator; pronounced "fusion") is an experimental application to view a [file system](http://en.wikipedia.org/wiki/File_system) in [3D](http://en.wikipedia.org/wiki/3D_computer_graphics), made by [SGI](http://en.wikipedia.org/wiki/Silicon_Graphics) for [IRIX](http://en.wikipedia.org/wiki/IRIX) systems. &gt;Even though it was never developed to a fully functional [file manager](http://en.wikipedia.org/wiki/File_manager), it gained some fame after it appeared in the movie Jurassic Park in 1993. In a scene in the film, the character Lex Murphy, played by [Ariana Richards](http://en.wikipedia.org/wiki/Ariana_Richards), finds a computer displaying the interface. She exclaims "It's a [UNIX](http://en.wikipedia.org/wiki/UNIX) system! I know this!" and proceeds to restart the access control system, locking the laboratory's doors. After the release of the film, some perceived the visualisation as an example of media misrepresentation of computers, citing the computer game-like display as being an unrealistic Hollywood [mockup](http://en.wikipedia.org/wiki/Mockup). &gt; --- ^Interesting: [^FSN](http://en.wikipedia.org/wiki/Fsn) ^| [^Fox ^Sports ^Networks](http://en.wikipedia.org/wiki/Fox_Sports_Networks) ^| [^National ^Salvation ^Front ^\(Romania)](http://en.wikipedia.org/wiki/National_Salvation_Front_\(Romania\)) ^| [^Fox ^Sports ^South](http://en.wikipedia.org/wiki/Fox_Sports_South) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfpoxvy) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfpoxvy)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 72508:%0Ahttp://www.reddit.com/r/javascript/comments/1z0m2z/jurassic_park_computer_system_in_the_browser/cfpoxpt)
Nothing about standards, its about examples of how people are using modules in the wild, and it's not like this system is set up to make easy. 
It's pretty easy to do recursively too. f(n) = f(n-1)+f(n-2) where n&gt;2 fibonacci = function(n) { if (n &lt;= 0) { return 0; } if (n &lt;= 2) { return 1; } return fibonacci(n-1)+fibonacci(n-2); } so then obviously, you could generate the sequence in order with a for loop.
&gt; A much better technique is to exploit event bubbling and put secondary listeners further up the hierarchy. Noooooooo! You're suggesting that you need to know the internals of how every plugin you works, _and_ make sure they're attached in the "correct" order. Yeah, that's way better than having to deal with custom events &gt;_&lt;
Can we see this turned into a Google Chrome extension that will drop down or pop up and read through whatever the highlighted text is?
are there plugins for grunt that are amazing that gulp doesn't have? The sheer number isn't really that interesting and long as there aren't big missing holes in the gulp collection. 
build.js
What argument was that? More of a statement as far as I can tell.
Any plans on making a Firefox version?
two million lines of code and sam jackson's character didn't think to [grep](http://en.wikipedia.org/wiki/Grep) a bit?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Grep**](http://en.wikipedia.org/wiki/Grep): [](#sfw) --- &gt; &gt;**Grep** is a [command-line](http://en.wikipedia.org/wiki/Command_line_interface) utility for searching plain-text data sets for lines matching a [regular expression](http://en.wikipedia.org/wiki/Regular_expression). Grep was originally developed for the [Unix](http://en.wikipedia.org/wiki/Unix) operating system, but is available today for all [Unix-like](http://en.wikipedia.org/wiki/Unix-like) systems. Its name comes from the [ed](http://en.wikipedia.org/wiki/Ed_(text_editor\)) command g/re/p (**g**lobally search a **r**egular **e**xpression and **p**rint), which has the same effect: doing a global search with the regular expression and printing all matching lines. &gt; --- ^Interesting: [^Regular ^expression](http://en.wikipedia.org/wiki/Regular_expression) ^| [^Find](http://en.wikipedia.org/wiki/Find) ^| [^Ngrep](http://en.wikipedia.org/wiki/Ngrep) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfptbkt) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfptbkt)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 72668:%0Ahttp://www.reddit.com/r/javascript/comments/1z0m2z/jurassic_park_computer_system_in_the_browser/cfptbfx)
It can seem that way, and it doesn't help that Grunt's file globber has 4 different modes. I've found that once you get used to thinking of a Grunt plugin as simply access to a programmatic file format (in this.files), the per-plugin parameters become much more sane. (That said, I do view Gulp's emergence as a direct consequence of Grunt's reliance on creating a single mass configuration object.)
Yes! Within the month. There's a few more features I want to nail down in the chrome environment (add/editing bookmarks) before I move to other platforms. 
huh? what happens? nothing unexpected happened for me.
Please never do this. Just because you can use both Polymer and Angular on the same page doesn't mean you should. If you want to use a client side framework then pick one.
sorry for delay. sure, you can create repository on github or bitbucket.
Not really: while there are stuff like plugins to start a connect server in Grunt and not in Gulp, that's because that wouldn't be suitable to be a Gulp plugin. Gulp tasks are just JavaScript, so anything you can do in JavaScript, you can do in Gulp.
Because of the way in validating it, it all has to be on one line. I'll see what I can do about it, though.
jshint?
Just mentioning it in the lesson would probably help.
Care to point out what ES6 syntax currently looks like? public/private were dropped? Just declare members directly in the constructor?
Not production not large but a little example I've done two weeks ago [on bitbucket](https://bitbucket.org/ayamflow/vuejs-route-test). I love component but I've switched to Browserify which is less cumbersome to use (maintaining the component.json is a pain).
Hey Andrew! A really like the design of the website, but do I really need to sign up to see if I'm interested in the game at all? The youtube video isn't starting for me. "This video doesn't exists". Could you fix this?
I'd love to have different colors for different levels, kinda hard to see what piece is what level now.
Traceur? They have also scaled back to maximally minimal classes also, just checked on Github. The old style will compile/transpile with TypeScript, but maximally minimal classes will not. Traceur output is nasty compared to TypeScript produces, a candidate could be 'es6-transpiler'.
What I like about what you've done, OP, is that you've used probably the most efficient (or almost the most efficient) technique for listing all the Fibonacci numbers up to a certain point. Some other ways to improve your code that haven't been mentioned previously: You haven't declared `i` using `var` so it's an implied global variable, which is a no-no. JavaScript doesn't have block scope, so even if you define something in a for-loop, it'll be available elsewhere. In the first example, you have the loop running 100 times (using `i` as the counter) but `n` reaches 100 after only the first 12 loops. So there are 88 loops running where it then has to bail because `n` is too large. You'd be better off changing `i &lt;= 100` in the condition part of the for-loop to `n &lt;= 100`, so that it only runs the loop the 12 times it needs to. You can also get rid of the if-statement, therefore, within the body of the for-loop. The same is true in your second example. `n` will reach 40,000 at the 24th time round the loop, I think (I might be off by one), so your loop runs an extra **39976** times waiting for `i` to reach 40,000 as well. Here's a bonus idea that I got from reading Project Euler: if you write out the Fibonacci sequence, take a look at which numbers are the even ones. Is there anything special about how often they occur, or when? What is `i` when `n` is even? Is there a way to automatically skip out the odd numbers just by incrementing `i` the right way?
I've seen two things happen: 1. If you don't type please at the end of the command, you'll get some Macintosh desktop with him saying "ah ah ah, you didn't say the magic word". 2. If you say please, you get an ASCII art face. It doesn't seem to matter what you try to access. I just typed in gibberish.
Forgetting to enclose HTML tags with their proper parent tags shouldn't be an accepted form of short-hand. This is what leads to odd bugs and unknowns. When methods like these are used-- or jQuery itself without need-- it's just pure overhead and nonsense. Unless this method is implemented for a special case, such as fixing an unpredictable user input, a developer should never assume that '&lt;tr&gt;&lt;td&gt;Text Here&lt;/td&gt;&lt;/tr&gt;' is OK without a table enclosure. The method presented to fix that automatically, instead of just fixing it... well, I'll just say that I hope you got sucked in by jQuery's overhead magic and didn't know where to stop, having a little bit of fun-- but not actually considering this as a solution. TL;DR: jQuery's solutions are not end-all solutions.
So sad. So many good energy lost on duplicating things just to boost everyone's ego...
**First**: Java and JavaScript are 2 completely different languages. **Secound**: This is a mess and people are going to be less inclined to help you until you tidy it up. **Third**: I think it would be better for you to do some jQuery tutorials before continuing, because any help someone gives you here is only going to be showing you the solution and you are not going to learn anything.
I kinda only want a sollution. sorry.. I just want it to work so I don't need to look at it again. The second part of the code snipped failed to format 0,-. sorry.
The use case for creating the detached table row is more than likely to insert that row into an existing table. Yes there are other ways to accomplish this, but I've seen it done before and it works. 
&gt; How to **properly** convert HTML string to a DOM element I'm not worried about it working. I'm worried about this method being promoted as a "proper" implementation. The author presents his problem and correctly shows how to properly create the string, but then dives into jQuery's methods and creates his own method to fix his incorrect string. The problem is fixed, he understands how to fix it, why make a method that will fix such a simple thing for him now? There should be no use for it, that's just lazy. On the other hand, he was interested in learning why jQuery took care of such things for him. It's a good post about how jQuery works (to support IE and other-wise lazy programmers in this case), and how to properly convert HTML strings, but the method shouldn't be used and the title is misleading. It *should* read: &gt; How to properly convert HTML string to a DOM element, and revealing the magic behind jQuery
&gt; After the release of the film, some perceived the visualisation as an example of media misrepresentation of computers, citing the computer game-like display as being an unrealistic Hollywood mockup. That's my favourite Jurassic Park fact.
The article should stop at: &gt; console.log(notWorking('&lt;table&gt;&lt;tr&gt;&lt;td&gt;Text Here&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;')); This is the correct string. str2DOMElement is BAD. If you're going to use tr/td, enclose them in the proper tags. str2DOMElement converts the string and even creates a dummy div in order to return the parsed html. There are two things to learn: 1. Don't make a div and assume it's going to work like a table. 2. Don't make a dummy div to generate your html. How would I create a table row? I would create the elements for table, body, row, like so: var t = document.createElement('table'); var tb = document.createElement('tbody'); var tr = document.createElement('tr'); tb.appendChild(tr); t.appendChild(tb); In fact all you need is tr. But from string? var t = document.createElement('table'); t.innerHTML = "&lt;tbody&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/tbody&gt;"; You just create the proper container instead of a 'div' and then set the innerHTML. If you want to get the row then.. t.childNodes[0].childNodes[0] Edit: To make sure I address your question. The title implies that the "proper" way to convert html is done through the use of str2DOMElement. The "magic" stuff is interesting yes, but shouldn't be used.
Thank you! this is what I was looking for. Do think it's worth it going with component before I start the project, or should I spend the time learning Browserify? And if you don't mind me asking, why did you end up preferring Browserify?
Too much magic.
&gt; no dependencies Uhh
I still haven't wrapped my head around routing in a react app. Are people doing something with setState on a root react view within a route handler to force some kind of react page re-render?
Documentation is good.
My fav is still [jsoneditoronline.org](http://jsoneditoronline.org/) ([source](https://github.com/josdejong/jsoneditor/)), but always good to have alternatives.
I've wrote this over the past few days while architecting a new system for a large scale application. I open sourced it because the company decided to go with Marionette but I thought the implementation was cool and solved a ton of problems I've ran into in the past. I wanted to reduce boilerplate, and automate it. Also the view handling is something I haven't seen before... all GUI elements including interactive user generated conflicts are handled 100% in CSS. Thing 1 and Thing 2 are trying to be shown on a small screen, I wanted to avoid having cross module communication/dependency/shared view logic/etc. and get a message passing design pattern from the foundation up in a shared protected scope that was resilient against the globals getting trashed by 3rd party libs. There was also a need for designers to be able to integrate into the modules easily and be able to deal with UI issues when the pop up without needed a developers time. Also the designers would be building pages in this system where they were free to implement random jQuery libs and script blocks from the web without developer oversight or review. As said... they basically decided Marionette was the right answer because it has documentation so their 4 developers can learn it super easyily... I as kind of blown away they thought this was confusing. Whatever, it's OSS now, if you like it... use it up. If you hate it... no need to tell me how stupid I am and how you can do the same thing in 450 different ways, I've been attempting to explain the importance of writing stable software for a hostile enviornment for about 72 hours at this point and I'll likely tell you to go fuck yourself. &lt;3
This is probably the single-most claimed "benefit" of every JavaScript package I've seen. It's become my own personal in-joke.
All of the other work they've done is great, but modules are the #1 feature IMO, and if the committee doesn't produce something that has a featureset congruent with what the ecosystem is already thriving on, then we're going to end up with a big mess.
This looks really neat, I've always despised Chrome's handling of bookmarks (with regards to trying to organize or find something among many of them).
Can we please just fucking *stop*. I'm going to make an omnipotent.js framework, where it chooses every framework in existence there by preventing you from ever having to worry about dependencies or not being trendy enough.
Concatenating your variables together makes sense if it makes sense in your domain. Where is this data coming from? Is presenting it in a colon-separated formate sensible somehow? Will it make sense to whoever is reading your code? Simply arbitrarily concatenating variables into a string so that you can hide the number of variables you are dealing with makes no sense. Also note that javascript providers the magical [arguments variable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments) that you can use to access all the parameters passed to the function without explicitly stating them in the function signature.
Yeah I just put it up on git a few hours ago... it's real. I'll be adding documentation to the Wiki soon but the demo code pretty much explains itself in varying degrees of implementation. I guess I should link to the files from the article, figured it's github so people would just look... right_pane == basic component with a view/hide state https://github.com/chadillac/AFF.js/blob/master/demo/js/right_pane.js attention_whore == a viewless event churn that other events can hook into and request updates https://github.com/chadillac/AFF.js/blob/master/demo/js/attention_whore.js a_widget == most advanced example that uses backbone models, views, has a show/hide hook, external dependencies, and exposes handlers for allowing other modules to pass it a state https://github.com/chadillac/AFF.js/blob/master/demo/js/a_widget.js the less structure for handling gui conflicts: https://github.com/chadillac/AFF.js/blob/master/demo/less/demo.less Show how designers and other modules can use communication channels without explicit declarations: https://github.com/chadillac/AFF.js/blob/master/demo/index.html running: AFF().dbg.linked() will dump you a list of depedencies that are registered AFF().dbg.registered() will dump you all registered namespaces and events that we know of AFF().dbg.debugging = true will enable logging to the console of event propagation through the framework edit: I just realized you thought I meant it was friendly as in "I will hold your hand and cup your balls"... but I meant it was "friendly" as in it won't let your application turn to shit due to outside conflicts, missing dependencies, parameter order changes across dependent modules, etc. I'll document it soon... then it will be more human friendly.
have you tried passing them as an object function name(options) { var a = options.a var b = options.b var c = options.c } name({a: "a", b: "b", c: "c"}); This way it is easier to update your signature of your function without refactoring the code and doesn't force you to write and nonstandard argument parsers.
Nice if you like sad jokes.
just pass an object: function name(args) { console.log(args.var1); console.log(args.var2); } name({var1: 1, var2: 2}); And you can get default params with jQuery.extend or similar.
lol @ multiple 9000 line files this is horseshit
I enjoy the occasional groaner from time to time, yes.
But it's fresh, steaming horseshit! That means it must be good!
Don't forget the yeoman generator!
I have heard a lot of people talk about phonegap. http://phonegap.com/ It appears to be fairly popular.
This is awesome! I ended up using the document.createElement to get away from a bad developers use of the 'new' operator. I'll have to write this into my utilities. Thanks!
https://cordova.apache.org/ That is the new version of Phonegap
I think you really jumped the gun posting it here. I'm not dogging your project, but just the fact that you decided to post it here after barely finishing what looks to be a rough draft, a very early alpha version. A _framework_ provides an API that you can use to build stuff, but you don't even have your API documented (aside from a few debug methods). None of the demo code is documented, so it doesn't serve well as a reference implementation. The source itself isn't even really documented. There is no way that I could build anything meaningful given what's provided unless I just copy/paste your demo... There's also no feature/capabilities list; you do list a lot of vague goals, but those don't explicitly define what it actually does. I still can't tell if this is meant to be an application framework (Backbone), or more of a GUI framework (Bootstrap, jQueryUI), or some mix of both (Angular, Ember). What about browser support? CSS3? Module system? Build integration? Automated testing? The hard dependencies -- jQuery, Underscore, and Backbone -- are pretty frightening. You can do pretty much anything under the sun with those 3 libs/frameworks, so what problem exactly is AFF solving that thousands of man-hours on those projects have failed to solve thus far? 
You can but I wouldn't advise it. Apps written in HTML feel laggy and looks slightly "off". Native code always wins out for me.
perhaps useful where many dates to be entered
To paraphrase: jobs doing something that didn't exist two years ago didn't exist two years ago. [This](http://www.indeed.com/jobtrends/javascript.html) is a far more meaningful graph. 
This is written quite well. Great project.
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Background Check – Automatically Switch to Darker/Lighter of Elements According to the Background \[/r/javascript\]](http://np.reddit.com/r/webdevnews/comments/1z3m8h/background_check_automatically_switch_to/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [Announcing TypeScript 1.0RC \[/r/javascript\]](http://np.reddit.com/r/webdevnews/comments/1z3mbd/announcing_typescript_10rc_rjavascript/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
Updated page, give it a refresh for a quick walk through.
Yes, but you don't have to use a tool like PhoneGap. But, if you plan to go say a front end heavy app... I advise building a back end on NodeJS. It's performance is outstanding. It will require a much higher degree of skill. It would be very hard to write it solely on Javascript. (Not sure it's even possible to have no back end)
For it's compression it uses node-formidable (internal.js) https://github.com/felixge/node-formidable
Holy shit, I need this exact thing for a current project and was resigned to figuring it out myself. 
A big part of it is the view_manager I suppose, it lets you reduce the GUI logic down to raw CSS by automating the state changes to trigger cascading logic. As said, 450 ways to implement, it's been on github for 4 hours. Sorry it's not better documented, I was under the impression you could look at the design patter and the 35 lines of basic code, understand how it worked, because it's pretty straight forward in that regard. But I was wrong, I'll get it documented and build some sample apps to show how it works, why it works, and how it will save you time and headache in managing large applications using any other framework you want in the middle or even using this in middle, be it Marionette, vanillaJS, or whatever you prefer, but you'll get a lot of the benefits of the competition with less typing, less requirement as far as conforming to their implementation principles, with what I think is a pretty lean looking and flexible design pattern. I can't say the same for Marionette makes you type a short novel for boiler plate on every instantiation if you're producing modular and reusable compontents or Angular and the like basically twist your arms behind your back and shove implementation details into the dom to make their systems work. This could be pure JS, a hybrid, this could have no views at all, it could be only for views... it's just a design pattern that keeps your code short, your scope protected, your view management and conflict resoultions in regard to that at a level outside of your code (MVC... where it belongs.). I guess I'm just taking fucking crazy pills. Stright from Marionette docu: MyApp.module("MyModule", function(MyModule, MyApp, Backbone, Marionette, $, _){ this === MyModule; var myData = "this is private data"; var myFunction = function(){ console.log(myData); } MyModule.someData = "public data"; MyModule.someFunction = function(){ console.log(MyModule.someData); } }); console.log(MyApp.MyModule.someData); //=&gt; public data MyApp.MyModule.someFunction(); //=&gt; public data Implemented in AFF... AFF(function(){ var namespace = "MyModule"; var myData = "this is private data"; var myFunction = function(){ console.log(myData); } var publicData = "public data"; MyModule = { someData:"public data", } MyModule.someFunction = function(){ console.log(MyModule.someData); } }); console.log(MyApp.MyModule.someData); //=&gt; public data MyApp.MyModule.someFunction(); //=&gt; public data In AFF your $ is protected an auto scoped, as are all the other libs, You don't have to use ANY of the core stuff of AFF... **but if you did** AFF(function(){ var namespace = "MyModule"; var myData = "private data"; var public = { someData:"public data", someFunc: function(){ return public.someData; } }; window[namespace] = public; }); console.log(MyModule.someData); // public data MyModule.someFunc(); // public data And then something else comes along and says MyModule = false in some other place 6 months from now your entire app collapses. The design patter is built specifically to make this exact tutorial from their own docs a thing of the past and to make the boiler plate needed to do so short, much more flexible, and you get seperate of and complete removal of view states for free if you decide to implement like the github demo. 
Level 23 is giving me problems unless I'm missing something (which is entirely possible) I *think* it's asking for an expression to match a word that appears twice in a row ('test test'). When I try answer(/(\w*) \1)/); it doesn't accept it as correct, when running /(\w*) \1/.test('test test'); returns true. EDIT: I'm an idiot. Words have letters.
Cool! Love projects like this; well written, fairly simple, extremely useful and effective.
Wow! Such over-design! Much "enterprise"! Very framework!
Yea, that's bullshit but I've come to expect no better. 
[Backbone still looks to be the top dog](http://www.indeed.com/jobtrends?q=angular%2C+ember%2C+backbone%2C+knockout&amp;l=). That javascript graph, to me, means people have taken "javascript" off job descriptions and replaced it with *some* mv* lib/framework. One would think folks would be looking for people who know the language of the framework, not just the framework du jour.
That's interesting. I'm really liking Angular though. The thought process that went into creating it. I've been doing javascript stuff for a bit (mostly jQuery) and running into dependency injection just kind of blows my mind. Those google folks are talented.
It's not a polyfill [yet](http://darobin.github.io/formic/specs/json/), but potentially it will be useful. It's a common thing to fetch each form's input value and construct JSON object to send form data via xhr. JSONFormData is JSON version of FormData object, which can be posted manually, in the same way, or using internal, basically same, send mechanism by usual "click submit to send" way. Polyfill is already capable of sending files, but not of a big size yet. Files processed using File API to base64 string. 
This guy who works on this a complete joke.
Gah reverse sexism is grate right! How about instead you buoy everyone who wants the opportunity to code, instead of pretending like girls are somehow repressed in the modern education system where they are already well represented.
This is really cool. Also, I was poking around the Compass docs and discovered a similar feature, although it doesn't interact with images at all, more just makes text the right color depending on the CSS background: http://compass-style.org/reference/compass/utilities/color/contrast/
How dare they try to drum up interest in a field where women are underrepresented! 
console.log() writes to the [console](https://developer.mozilla.org/en-US/docs/Tools/Web_Console). document.write("asd"); puts something on screen. 
Anyone tried it with base64-ed inline SVG backgrounds? =)
console.log is something we use as developers for testing or messaging other developers. It's not supposed to be noticed by the average user and will usually break IE unless someone just so happened to press F12. If we were to use console.log directly then we usually wrap it in a safe logging function or mock out the console object if it's not available so IE doesn't break, or only use it during development and then remove it before deployment. With that said, I think what you're after is either document.write("some text") or document.getElementById("someId").innerHTML("&lt;div&gt;some text&lt;/div&gt;"). For #2, can you provide an example? I think you're talking about the canvas tag, which has a width and height but also contains graphics, video, or games. Using canvas can get quite advanced and there are some frameworks around it. [Here's a tutorial](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial). There are a lot of graphics libraries. Here's a few (may not be the latest or most used): http://bonsaijs.org/ (graphics) http://raphaeljs.com/ (graphics) http://fabricjs.com/ (canvas) http://www.createjs.com/#!/EaselJS (canvas) https://code.google.com/p/cakejs/ (canvas)
It seems like by "DOM-like API", they really mean "jQuery-like API". That's a good thing (there's a reason people overuse jQuery; the DOM is a terribly unfriendly API), but it might not be the best way to describe it.
That's really cool. I'm also glad I didn't see it before I realized that Express can be told to accept both JSON and URL encoded requests at the same time.
Conversation regarding modular dependency management in jQuery: https://gist.github.com/davearel/9254418
I can't help but feel this way about a lot of the node web frameworks. I was searching for one to play with on my new personal project. I've made a few templates out of express myself but everything else has a lot of neat features and a ton of "you don't even have to touch code" magic. If I'm a programmer I like to write code, not rely on magic. If I want magic I'll make my own magic that I can control. Almost every time I've ever relied on someone else's magic it usually means I have to do something weird to make what I wanted to happen actually happen.
Wow, so much hostility in here. The author's written something in their own time. Released it for free. If you don't like it, you could just give some constructive criticism rather than being jerks. No wonder people think we developers are self-righteous arseholes. 
tl;dr Adding context to otherwise seemingly arbitrary JSON can help future programmers understand it better. Based on concepts from Tim Berners-Lee's "Webizing existing systems": http://www.w3.org/DesignIssues/Webize.html By https://twitter.com/bigbluehat at Cloudant. 
I thought just like you did for some time until I met the right women. Women aren't less interested or less capable. Problem is there is a social stigma against women on technology. A small girl will see those disney channel tv shows where there is a "computer kid" who is a weirdo. Young boys play computer games and nobody cares. Some young boys start exploring computers, they will be the go-to geek boy for the other gamer boys. That girls who could have a future, don't have a chance to get good, because people all assume girls "don't play videogames" and "girls don't do computers". My own sister was a nursing student and hated programming. Once she was studying shit(yes, literally shit) and saw me doing a programming project; she said: "I'm happy I'm studying shit, at least I'm not doing that". Now she admits she was wrong. She decided to change careers and by chance she ended up on Computers and Business Management(my degree). She began to like programming and had the best grade in class. Point is, my sister always "disliked" programming because "she was hinted" by the society to do so. She just had to try it to like it.
It was developed with ACE editor on nodejs heavily using shh2 module. My main goal was to complete the gap between your browser and server that is why server code is extremely simple (just 2 dependencies at all). EDIT: sorry for the bad gateway error on demo, it is up now.
Do you not even read? They don't get a 100$ gift card, they get 100$ of credit at donorschoose.org a website that buys classroom materials for teachers. So disregarding the fact that we obviously need to change something to help CS appear as an attractive career to women (and this program is a pretty damn good idea to do that), you are still wrong. 
*Added link below Study after study shows women simply do not gravitate towards these fields. I can't recall the study (Swiss?), but after 30 some years of attempted social engineering, the results were obvious: When women are bombarded with and sought after by STEM fields, their numbers grow - for 2 years. Then drops off again. Then another program to recruit women results in? You guessed it, 2 years of interest. Women are simply not interested in these fields as a general rule. Does that mean effort shouldn't be spent recruiting the best minds possible, be they women or men? Of course not. It does mean however that comments like yours are shortsighted and lacking an understanding while attempting to come off as the opposite. Programs like this are more detrimental to society in my opinion - the longer we keep isolating people and alienating others in the name of 'equality' (absolutely regardless of any actual demand), then we're continuing to drive wedges in society. For that reason I would wish that programs like this are abandoned entirely. Not to mention, if we're actually convincing ourselves that we're, 'in touch with the female gender', wouldn't it stand to reason that creating a cash incentive carries a certain connotation? That women can't be bothered to educate themselves to better their position in the tech industry (through an absolutely free course, no less) unless you dangle a few dollar bills in front of them? Nah, people are just holding them back. EDIT: For anyone inclined, [this series of videos](http://vimeo.com/19707588) is based on the study I mentioned above. (Also, ignore the fact that /u/-missnyankitty goes on to admit below that men and women are wired differently, that's just anecdotal evidence to prove her point that we're identical in biological makeup and disposition and society is responsible for gender roles... /s)
http://www.indeed.com/jobtrends?q=javascript%2C+front-end&amp;l=
http://i.imgur.com/az0DByS.jpg 
&gt; Point is, my sister always "disliked" programming because "she was hinted" by the society to do so. She just had to try it to like it. I'm not going to spend much time getting into a 'thing' with you, but that's the most absurd thing I've read here in /r/javascript. You are *completely* ignoring reality. I have a brother in law who never finished high school and when he was between jobs I tried desperately to get him to finish his GED but he just wouldn't do it even though he *knew* it would be a huge help for him and his family. 2 years later and a few crappy jobs he decides to go for it. He got his GED 3 months after starting classes. Before graduation I asked him what the heck took him so long. His answer? "Man, I hated math, I couldn't stand it. My first day at GED class I spent some time with an instructor and realized I love math, I just didn't pay attention enough in school and was embarrassed as to how far behind I thought I was." But I suppose he too was a victim of society's hinting methods. Nonsense. You're leaving out so many variables in this thing in order to reach a conclusion that does what exactly? Further, how is that women are fooled by a hinting society, apparently not intelligent enough to know what they themselves like, yet men are, in record numbers, now staying home and raising kids? Did they not get society's hint that they are supposed to be manly men who do manly things? Of course not. Oh, and the women who *are* professionals? By and large they are in management, and women seem to excel there. Except that's a positive and so we're okay with that generalization, we can say women just may excel at men in management positions but don't even for a second *imply* that maybe, just maybe, women are less inclined to be drawn to STEM fields. Because sexist.
&gt; Study after study shows women simply do not gravitate towards these fields. You say that as though there aren't a variety of reasons for this, some of which may be fixable. &gt; the longer we keep isolating people and alienating others in the name of 'equality' (absolutely regardless of any actual demand), then we're continuing to drive wedges in society. Who the fuck is being alienated by this?? A private company is reaching out to girls in high school, trying to get them interested in programming. Does this make you feel isolated in any way?
You need to get that crap out of here. Now.
&gt; I prefer working with people who really love their job with a passion, not people who got lured into it. Regardless of their gender. Lured into it? What the actual fuck are you talking about? You'd think Codecademy were luring young girls into a shady van.
It's been 'released' on here multiple times and rebranded even more. The dev essentially cobbled together multiple libraries and removed the dependencies to make it 'dependency less'. 
I need this high powered gaming laptop, *for class*. Edit: /s goodness gracious
The examples don't do anything on iOS. Tapping on them simply shows a tooltip that says the name of the example and "tap to close".
I can definitely see your point, and agree with it to some point, but have some poignant disagreements. First off, if you read the website, the cash doesn't go to the girls, it goes towards educational materials for the teacher who has students do the program. Second, a huge problem with this issue is that there's an assumption that a woman's experience with CS is the same as a man's experience. It just simply isnt. I think much of the problem boils down to childhood exposure and the teaching style that many CS programs offer. Before anyone barrages me with an influx of "you're just a girl on a feminist pedestal," I need you to know that these opinions come from my experiences being educated and employed by as a female computer scientist, and are my own. Disagree- I accept that- but this is what I've lived and breathed for the last 5 years. First off, I was never exposed to any STEM disciplines as a child. Yes you take science and math in school, but coding? No. Anything technical? No. When you talk to computer scientists, most of them will describe a childhood of playing with circuits, building switches, playing Doom on their first household PC- **things they valued as a hobby**... I experienced none of that because for girls in my time (I'm in my 20's), **hobbies** were crafting or making shit of out glitter or sewing. We were taught these skills by our moms and grandmothers. It wasn't until my late teens that I built my first webpage in HTML and realized that computers were amazing. I felt cheated out of a childhood where I could have developed my skills with computers. This resulted in me going back to college, when I already had a bachelors in another field, to get a degree in CS because, simply, I love it. Secondly, men and women are different. The culture of "all genders can do the same thing!" becomes disgustingly unclear when you take your first programming class and you're the only women in a lecture hall of 200 people. Men think differently then women... especially the type of men who are attracted to a CS degree. Most CS students are introverted, passionate, extremely cerebral, a little socially awkward, and introverted. They have a different thinking style. Thus, classes are taught a certain way. Through my whole degree, I found lecture almost useless, because I would have to go home and teach myself the content in a way that made sense. In my junior year, I made friends with another female CS student. We became inseparable, because we understood information in a similar way and did our school work together. If I wasn't stubborn, cocky, and a little conceited, I would have dropped out of CS the second year simply due to the "divide" I felt from my colleagues (people who I couldn't identify with or build even basic relationships with). Finally, as an expansion of the "divide," I felt- as a women in CS, you're treated differently. You're treated as if you have leprosy. You walk into a Linux lab, everyone looks as you when you sit down. I, no joke, went to a job interview once where the first words out of the interviewer's mouth was "You're a woman." Right out of college, I got a job at a small manufacturing firm as tech support where I was told, the first day, I would be fired if I tried to pursue any romantic relationships with the floor workers when I was fixing their computers (I was the only women who worked there). I was given an office in the far side of the building so I wouldn't talk to anyone. I was told I couldn't wear "feminine" clothing, although the office had no dress code at all. Every time the gender rift comes up in conversation, I get a mountain of bullshit about how there's no difference in gender, or how "women aren't cut out for STEM," or how discrimination doesn't exist. Honestly, it's bullshit. Women are cut out for CS, EE, and nuclear physics - it just takes a special type of woman to deal with the menagerie of total horseshit that goes along with working in a 86% male-dominated field. **TLDR: Go ahead and create incentives (by private companies, not on a larger scale along the lines of affirmative action. we want to keep things constitutional here). Reward teachers for exposing their students to JavaScript. Get some girls exposed and excited about computers... and then just pray they can deal with the social, academic, and personal isolation that comes with being a vagina in a room full of dicks.** edit: Just to clear this up- men and women are different. I never said they were the same. I'm speaking towards how the male majority in the Computer Science world has made breaking into the degree *unintentionally* difficult for women. This is no one's fault and I'm not blaming men for all my woes, I'm just saying it's something that needs to be recognized when we look at statistics and go "huh, I wonder why more women don't sign up." edit 2: You guys are apparently okay with discrimination based on gender in the workplace. Good to know. 
Thanks, corrected.
&gt; ...with being a *vagina* in a room full of **dicks.** Nice and subjective. Take your bull**** elsewhere. 
I'm really curious about how programs encourage women into computer science. My cousin goes to a girls school and there was a small girls only program to show off how cool computer science was. she took and she liked it but there's no computer science class in her school. She can take computer science but she'd have to go to the boys school for it. Not only is there not enough time to go to the boys school for one class and come back without being late for any of your other classes but you're pretty much assured to be the only girl in a boys only campus.
The linked site throws a pop-up with every page interaction. Surely there has to be some other source for this information?
because those 10 words were the WHOLE point of the comment. I apparently also forgot that there really aren't physiological differences in men and women! My mistake! next time you get insulted by language, take a look at the intent and context in which they were said.
The fact being that females ARE underrepresented and no, the education system has t corrected itself. As evidenced by the fact that, you know, women are severely underrepresented. 
This money is coming from somewhere or someone. And, People or organisations can give money to whoever they damn well please. Marissa Mayer wants to encourage girls to start coding? Great. Zuckerberg wants to give money to people if they grow awkward, curly hair? Amazing. PROTIP: You're allowed to do the exact same thing. If you really care, you can go start a non-profit that offers the same for boys or both genders. Or, you can sit on Reddit and try to drum up karma.
Well, for starters, gender-exclusive schools shouldn't exist. 
Let's see: a woman gives a thoughtful and detailed account of her experiences where things specifically are tilted against women pursuing STEM disciplines. Chelsor calls it subjective bull****. I guess the implication is his dashed off insults are not subject, and we should take them as objectively true.
&gt;I'm not going to spend much time getting into a 'thing' with you, but that's the most absurd thing I've read here in /r/javascript. You should hear what people say about ===!
is the stage variable set? "...ddTo(stage);..." also, why are you loading bonsai twice? one is cdn and the other is local
How many boys were in your sewing class?
scott, the other thing to recognize is that the $100 goes to the classroom, not the girl who took the lessons. That money benefits everyone in the classroom.
When you try to assert yourself by using a clinical definition of one word, and then the slang of another, then your agenda is quite obvious. Would be no different than me saying, "Having a penis doesn't make me any better a cooking than you're having a cunt makes you a better programmer." No one would take me serious, and rightfully so. I'm not interested in going toe to toe with someone who is sexist in nature.
Yea, fixed that. My code is now: &lt;!-- element where we place a graphics context //--&gt; &lt;div id="stage"&gt;&lt;/div&gt; &lt;!-- load latest Bonsai version //--&gt; &lt;script src="bonsai.min.js"&gt; but I still cannot do something like this: (it just doesn't show anything on screen): new Bitmap('path/to/image.png').on('load', function() { this.addTo(stage); }); Also, how to set the variable?
I went to the orientation for my university ICT course a few days ago, and I can tell you that it's almost all men, unsurprisingly. I did manage to catch up with one of the only women there, and asked her how she was finding it. &gt; "In business, it's almost all women. In ICT, it's almost all men." I offer a question to you. Do you think that the lack of women in STEM majors is related to the shorter career that most women have?
I tend to agree but a lot of my cousins in the UK go to gender-exclusive schools and tend to like it for some reason.
Look. I'm using BonsaiJS, or at least I'm trying to. I want to be able to draw rectangles and stuff, but I do not know how to do it. Can you give me a hand please?
I'm sorry but you seem to be missing my point here. I think it's important that people -when they start programming- start it for the right reasons. Bribery isn't a good reason, love for technology is.
Sorry, but guys watch the same clips on the disney channel and see how little "pussy" the "nerdy" guys get. So I think that point is quite moot. You're showing one specific case there of a woman who apparently was in the wrong field in the first place. My girlfriend is a nurse and she's hate to do my job as a consultant.
best i can do is point you in the right direction. http://docs.bonsaijs.org/ &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="movie"&gt;&lt;/div&gt; &lt;script src="http://cdnjs.cloudflare.com/ajax/libs/bonsai/0.4/bonsai.min.js"&gt;&lt;/script&gt; &lt;script&gt; bonsai.run ( document.getElementById ( 'movie' ), { code: function ( ) { new Bitmap ( 'path/to/image.png' ).addTo ( stage ); }, width: 500, height: 400 } ); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Why not?
I was taken aside separately after a floor-wide orientation and told these things. Are you saying it's really okay to have different dress code and conduct expectations of your employees based on their gender? 
Yeah, a bunch of 16 year old girls are going to get bribed and/or lured into becoming crappy programmers in exchange for $100 vouchers for their schools. Are you actually thinking the words you're saying?
Hey, thanks a lot! Just couldn't get that done. Thank you!
I didn't complete college in an isolated bubble- I'm aware that everyone has to study and I didn't graduate top 10% in my class because I got the obligatory "being a woman merit badge." What I was attempting to convey is that woman might have a hard time entering CS fields because of how information is taught (especially for younger people still in high school or their teens). In junior college I had a CS class taught by a woman that was extremely easy to follow. Teaching and learning styles exist. STEM whining feminist my ass - you're not going to get a higher participation rate in STEM fields unless you have people talking about that exact participation rate and the bars that are keeping people away. 
I said nothing about dress code but I'm sure the men would not like to be required to wear a dress while women don't seem to have a problem wearing pants. Actually, I once dated a girl who preferred dresses. My point is, women insist on being treated differently but told to treat them the same. The problem with that is trying to regulate behavior that is an inborn nature. You can't fight mother nature.
adblock?
Thanks for this comment - my inbox has been a dark dark place in the last hour. 
I'm not even sure what that question means?
Gender and technology aren't that strongly connected as you seem to believe. I studied in a Turkish university for a while and there were more women than men in IT there. Being poor is another case; at the local coderdojo (where we teach programming to children with technologies like scratch and arduino's) we mostly get kids (both boys and girls) from parents who have an above average income and who have studied. We try to also reach othjer kids who don't have that advantage, but it's very hard.
There are two kinds of programmers in the world. Type 1 is the kind whom, when shown a new piece of kit, will go look at the source code. When they read docs, they want to see architecture, assumptions, structure, etc. These are the people who are most common in Node land, because Node is still in early adopter mode and every other package is at version 0.3 or something. Type 2 is the kind whom, when shown a new piece of kit, will ask: "But how will this save me time?" They never look inside, and they'll complain documentation sucks unless it includes a step-by-step tutorial titled "How to solve &lt;your specific problem&gt; with &lt;new thing&gt;" These are the people who love all-in-one frameworks, because they don't care about the science of coding, they care about getting the end result as quickly and cheaply as possible.
For $100?
Sure, I was just saying that IT isn't always linked to exposure to technology. They also focused more on the business side of things, which is something most IT educations seem to miss.
How did you decide where the pivot point would lie? That seems to be the most interesting part of Spritz.
Do you have kids/siblings/nephews? Boys don't watch Hannah Montana nor violet nor anything of that. Boys like the movie cars and stuff like that. Problem is, when they get into computers, boys are expected to do well with them and be engineers one day whle girls aren't expected to do much more than basic usage because they will be nurses/teachers or something. Bottom line is, saying girls don't naturally enjoy this kind of stuff is WRONG. They may not be shown the beauty of tech stuff when they are young, they may meet discouragement to follow this path while boys get encouragement, but they aren't naturally less capable nor worse than boys. Personal experience on that one over and over again. Of course I'm giving you just one example, can't spend my evening writing. But Many people, not just girls, studied, are studying or will study the wrong fields, just because they never tried anything else that mattered to them. A friend of mine has a gf who finished marketing and now studies CS, she is good. My ex was top salary from her years graduates... yes, the girl was top salary ahead of all the men who finished that year. I could carry on and on and on. And I ain't even a white knight of the Internet, I just did actually thought "girls aren't drawn to technology"/"girls are worse with computers" and I WAS PROVED WRONG. And Steampunkdev, I would also hate to be a consultant =) Also, for the record, the worst programmer I know is a woman, a teacher, a cancer and I hate her. edit: clarification
Thank you *very* much for that advice, I wish I had followed it immediately. Instead, it initially struck me as disdainful... and so I just spent the past few days reading up on and messing with mimosa, grunt, gulp, and a few others, before finally figuring out *you were 100% right*. Waay too much out there with half-baked, inflexible, implicitly magical behavior. The sample Gruntfiles I saw looked daunting at first, but that's a *really* flexible system for writing project build scripts, and getting on with life :)
That's silly. No, I don't think that at all. We need to get our head of our asses and stop thinking that STEM is the hardest thing ever and everything else is so easy. Nursing degree- not easy. Law school - not easy. Medical school - not easy. The fields of engineering that tend to have higher concentrations of women - still not easy. I think it's a chicken and an egg thing. I'm willing to accept that, in general, women aren't as interested in CS/programming as men. I don't, however, believe for a second that that alone explains why I was the only girl in a lot of my CS classes. It's really fucking hard being the only girl at work or in class. It wears on you. There's a definite feeling of "otherness" that the men in CS will never understand. 
Yeah I think I threatened to get into the boys only STEM treehouse
There's a lot of difference between saying girls are generally not drawn to computers and girls are bad with computers. Heck, I know plenty of COBOL programmers who can't properly work a mouse.
This is perfect for CMS systems which rely on regular users providing images with overlaid text - *almost* idiot proof.
Jesus, man. Fuck it.
This is actually legitimate. I just assumed a causation between gender and teaching styles since it at held true- but alas the ol' correlation vs causation gets me again. I'm not about to let this go though. How STEM fields treat women is... unbalanced and weird. On a whole, though, I think minority groups get whiny and entitled and I don't want to be someone who does that, I just want to point out some of the struggles that I faced that other women might face too. The example of what Adria Richards and co. did is stepping back twenty feet for every one foot they may fall forward. And while their actions may be petty and selfish and ineffective, it doesn't detract from my original thesis: The technical challenges of STEM aren't the only factor keeping women away from the field- it's also the social and environmental pressures that come along with it. And it's only through a (logical, calm) understanding of this that things will get any better. To be on either extreme of the argument is incorrect and we shouldn't judge a whole group by the extremes (in the case of the vocal feminist group you talked about, we can't judge all female computer scientists on that standard of behavior). 
That's like saying there are more black people in prison because black people are more interested in being in prison. 
I think the way Codecademy went about doing this seems pretty clever and reasonable. It's not like only women will directly benefit from it (FYI, the money benefits their classroom as a whole, which at most schools include both genders). Even with that being said, I feel as if there really isn't a whole lot that can be done within STEM programs to increase female participation. I've read too much of countless incentive programs that were doomed to fail in the long run to see this sort of thing making much of a dent.
I've just pushed a few changes. There are a few more functions—including `showAnswer()` and `previous()`, which a few of you were requesting, and there are also a few style changes including better colours and responsiveness.
While that works fine for your case ("test test"), it doesn't work when the repeating word isn't the first thing. "hello test test", for example, would match the space between "hello" and the first "test"—`\w*` would match nothing, and `\1` would match nothing again. Basically, your expression matches the first space, followed by repeating characters surrounding the space as much as possible.
Depends if you shop in stores or from the backs of vans in alleys. 
&gt; There are many women interested in this field, you cannot say the first sentence is true because it implies all women. I absolutely agree, which is why I immediately followed with, "as a general rule." If I seemed vague, let me reiterate; **I do not believe women are uninterested in STEM fields.** I do, however, believe the majority of women (take me at *my* words, I'm saying *at least more than half*) are uninterested in STEM fields. I'm suggesting that we can spend all the time and money in the world to develop programs that target and develop exploratory opportunities for women in STEM fields, and the result would very likely be (based on comprehensive studies we *now have access to*) a marginal increase in women working in STEM fields. Let me propose the 'alienating' point of my comment that some people seem to be taking issue with and tie it into this response... Assuming we spent a limitless amount of time and money getting women into STEM fields - how many brilliant minds have we eliminated because they simply are not women? The response to this is typical, "men already have the tools they need to succeed." Do you have any idea how incredibly insulting that is? You could literally throw the Earth's resources at getting women into STEM fields and women would *still* say men have the upper hand. Much like you, I am sick of hearing about it. My experience has been that STEM fields are made of some of the least caring people on the planet - what does your code do? Yet to listen to this insane feminist here you would be convinced that the STEM field is made of jocks and alpha males who won't let the poor woman study her maths like any other student. We are all sick of hearing about it. And honestly I can't believe I've jumped right into this conversation. It's amazing how much more enjoyable reddit has become when you spend enough time filtering the way you see it. And then in my beloved JavaScrip sub that I absolutely love to lurk, I see this sexist bull**** pop up and my lack of self control results in me arguing back and forth with someone who will never ever see things the way I see them and vice versa. And for what? Nothing. Nothing was gained, no opinions were changed and in fact probably more people are digging in to sexist belief systems. Sorry, everyone.
Hi! I liked most of your post and I think most of the people who are arguing with you are sort of missing your point, but I just wanted to talk about this bit: &gt; First off, I was never exposed to any STEM disciplines as a child. Yes you take science and math in school, but coding? No. Anything technical? No. When you talk to computer scientists, most of them will describe a childhood of playing with circuits, building switches, playing Doom on their first household PC- things they valued as a hobby... I experienced none of that because for girls in my time (I'm in my 20's), hobbies were crafting or making shit of out glitter or sewing. I've heard this kind of argumentation before – this idea that boys are "encouraged" to code and girls aren't – and I don't think it adequately explains the gender divide. I grew up in the late 90s, when computers were still really new. _No one_ was "encouraged" to use computers. They did things their family and teachers didn't understand. It was a time when 'nerd' was still an insult, and family and teachers would often tell you that your obsession with computers was unhealthy and the internet was dangerous and all sorts of things like that. This is the Hacker Manifesto, from that time: http://www.phrack.org/issues.html?issue=7&amp;id=3&amp;mode=txt It was obviously written by someone who _wasn't_ encouraged to use computers. Susan Sons talks about her own experiences in that time: http://www.linuxjournal.com/content/girls-and-software My experiences were pretty similar. Parents and teachers would tell me it was unhealthy. Friends would be impressed by what I could do, and it was too early for any of us to have any idea that it was weird for a girl to have my skills. So that modern programmers ended up being mostly male, I don't think it was because they were 'encouraged' to do it, I think it was because they were the people who did it anyway _despite_ being _discouraged_ from it, because they loved it.
This is a really good explanation, actually. Heck, in elementary school I didn't even know that programming languages were a thing. In high school, I had no fundamental understanding of circuitry or even how a computer worked. My whole wish, I think, is to get to a point where girls (or everyone, for that matter) are exposed to computers as a legitimate vocation from a young age (which is exactly what this $100 incentive is all about). I think with the rise of technology in the use of mainstream media and games (toddlers playing Flappy Bird and geek culture becoming "cool"), we'll start seeing a bunch more youngsters getting into the field. But le reddit circlejerk isn't here to talk about that, they're here to argue about all these FemiNazis' entitlement. 
&gt; One would think folks would be looking for people who know the language of the framework, not just the framework du jour. I think that that largely is the case in enlightened organisations, certainly in my experience. However, a lot of companies are hiring because they don't have the knowledge in-house to know exactly what it is that they need, or simply want someone exactly like what they have now. I certainly consider "requiring" x amount of experience in y framework to be something of a big red flag when considering jobs. Personally, unless a framework is doing something completely ground-breaking (and very few are, certainly that I'm aware of) then I'd always hire someone with an intimate knowledge of the underlying language, and general software development best practices over experience with specific frameworks. [EDIT] Of course, this data isn't remotely scientific since it is only based on the ads posted on that one particular job site. I wouldn't be surprised if some of the [downturn in established technologies](http://www.indeed.com/jobtrends?q=javascript%2C+java%2C+php%2C+ruby%2C+python&amp;l=) is purely down to the tech industry generally moving away from such places as a means to advertise jobs.
Really, read this. Twice. Maybe it might make a difference. I've been in CS/software engineering a long time. I'm older than I care to admit. Maybe I had a shitty day dealing with idiot kid coders (not developers, they don't develop) who know how to google something at stackoverflow , but don't know how to actual think out a problem. I don't care, I'm going to rant. I am by no-means a guy who gives a shit about studies or stats about 2-years(give me a citation, please) to prop up my point of view; call me cynical. I can only work off of my impression and years of experience. But given all your comments here, are you actually going to argue that CS or engineering in general isn't some sort of boys club? Shit, it is cliche joke that every time a women or girl ever got on any sort of 'serious' newsgroup back when Usenet or IRC was the only thing that you could do on the Internet there would be some sort of idiot saying show me your boobs. You don't think that was a hostile environment. Really? That is welcoming? Shit, it would get worse when the 'offending' women would actually be smart and make valid points. Come on, don't say that we, the men, haven't exactly been supportive in the past. Or would you argue, well if you can't handle the heat, don't come into the kitchen? I'm all for heat in the kitchen, shit make it fucking hotter so I don't have to deal with the googlers, but don't throw shit at someone just because they are a woman. And, yeah, I know you will claim, not me, I never did that, I always judge people by the quality of their work. Bullshit. I don't believe you. There is no way (an yes, I can't prove it, but nor can you, that is the beauty of the Internet) you haven't done something in your life that wasn't sexist or demeaning to a female coworker who probably had a good idea that you shot down. Unless, you have never worked with a woman engineer, then what basis do you have for your opinions on this matter? Shit, back then, even if you were the chivalrous guy defending the women from the trolls on Usenet, you were accused of doing it not because you though here ideas were great, you were doing it to get into her pants. Every single guy has at some point has been the bad guy in this way at some point. Every single one. I haven't read one comment here on the other side that said women didn't have to do just as well. All anyone has said is they support the idea of more women in CS and Engineering. Nowhere in any of these comments is the hint of 'a women doesn't have to stand on equal footing with a man'. All people are saying is we should do more to have the female gender represented. There isn't a problem (a yeah I am calling it a problem) with dumb men being represented in CS/Engineering. Shit, we are over-represented. And, sometimes, we don't represent all that well. I would love to have a smart women who could think out a fucking problem for themselves. Shoot, today, I would take a dolphin that could think out a problem. Wouldn't it be nice if the guys in this business didn't think of women as a women first, but actually as a engineer? That their ideas wouldn't be colored by the appearance of breasts? Don't you see that this isn't about supporting women? It is about the men who actively don't welcome them. And you clearly (and don't say that it isn't true) aren't welcoming. Where in any of this is a put down on boys getting into CS? Did you even read the content of the link? Are you afraid of good talented women coming to take your job? See my comment about turning up the heat to get better developers coming out of school. Tell me, why the hostility? All I see is an organization giving a gift card to donorschoose.org for teachers to be used anyway they want (shit, even on the boys) for the girls completing a course in javascript. I fail to see how this puts down the boys. I see no comparison between the girls and boys. Where are boys not being supported in general? You seem to be saying that just because one organization decides to increase the interest for the girls in completing an online course, they are saying 'boys aren't good'; how do you make that leap? Do you have a daughter? If, you do, would you want her to work in CS/Engineering? And don't say, well I would want her to earn it like a man? That is BS. I have a daughter and she will earn it if she wants it, but she doesn't need to be put down for being a woman or asked about her boobs. Nor does yours if you have one. She needs to have a world where her boobs don't matter to the the men. Fuck, with all this talk in this thread about how 'I had to work hard to get my degree' (good. I hope it was hard, but so did the women), comments about 'blacks and gays'(You - go the fuck away and play your MMO) and 'reverse sexism'(what the fuck does that mean?) and the general hostility towards /u/missnyankitty, you have all so clearly proved the point that women need to be supported in this field and clearly can't see that you are part of the problem. It isn't the girls that need help, it is the men.
Is it just me or is their history usage seriously messed up in Chrome?
&gt; Do you think Backbone [...] is too unopinionated to the point where you can't build anything performant with it? I find that quite an odd leap to make. I'd say, if anything, the unopinionated (read "small") nature of Backbone makes it far less likely to cause poor performance than larger, more feature-rich frameworks. Or at least, if it's not performant, then it's most likely not Backbone's fault, it's the developer's.
Yep, just wanted to explain it for anybody else who had the same problem in the future.
errr just use that project you found and configure it for the dates you want? i dont get what the issue is?
[THIS](https://en.wikipedia.org/wiki/MHTML) may interest you
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**MHTML**](http://en.wikipedia.org/wiki/MHTML): [](#sfw) --- &gt;**MHTML**, short for [MIME](http://en.wikipedia.org/wiki/MIME) [HTML](http://en.wikipedia.org/wiki/HTML), is a web page [archive format](http://en.wikipedia.org/wiki/Archive_format) used to [combine](http://en.wikipedia.org/wiki/File_archiver) resources that are typically represented by external links (such as images, Flash animations, Java applets, and audio files) with HTML code into a single file. The content of an MHTML file is encoded as if it were an [HTML e-mail](http://en.wikipedia.org/wiki/HTML_e-mail) message, using the MIME type multipart/related. The first part of the file is normally encoded HTML; subsequent parts are additional resources identified by their original [URLs](http://en.wikipedia.org/wiki/Uniform_Resource_Locator) and encoded in [base64](http://en.wikipedia.org/wiki/Base64). This format is sometimes referred to as **MHT**, after the suffix **.mht** given to such files by default when created by [Microsoft Word](http://en.wikipedia.org/wiki/Microsoft_Word), [Internet Explorer](http://en.wikipedia.org/wiki/Internet_Explorer), or [Opera](http://en.wikipedia.org/wiki/Opera_(web_browser\)). MHTML is a proposed standard, circulated in a revised edition in 1999 as [RFC 2557](//tools.ietf.org/html/rfc2557). &gt; --- ^Interesting: [^Mozilla ^Archive ^Format](http://en.wikipedia.org/wiki/Mozilla_Archive_Format) ^| [^The ^Cube ^\(game ^show)](http://en.wikipedia.org/wiki/The_Cube_\(game_show\)) ^| [^The ^X ^Factor ^\(UK ^series ^7)](http://en.wikipedia.org/wiki/The_X_Factor_\(UK_series_7\)) ^| [^List ^of ^biblical ^names ^starting ^with ^M](http://en.wikipedia.org/wiki/List_of_biblical_names_starting_with_M) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cfqjhvy) ^or[](#or) [^delete](http://www.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cfqjhvy)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 73793:%0Ahttp://www.reddit.com/r/javascript/comments/1z12cr/html5packer_pack_your_html5apps_into_a_single/cfqjhs1)
I don't think it can be used to dynamically change the dates it counts down to, am I missing something?
Backbone doesn't manage layout thrash for you like Enyo/React/Ext do. See things like http://blog.fogcreek.com/we-spent-a-week-making-trello-boards-load-extremely-fast-heres-how-we-did-it/. So not such an odd leap to make.
In case it wasn't clear in my post, I'd like the same countdown to count down the time until deadline 1, then start counting down to deadline 2, then start counting down to deadline 3 and so forth. I would also like the names of the deadlines to be displayed above/below the countdown.
If I were you, I'd use [moment.js](http://momentjs.com/) and [local storage](http://www.w3schools.com/html/html5_webstorage.asp) This way you can store your different countdowns locally, and then moment is a great date tool. Angular would be super useful too, but that might be overkill if you're brand new to JavaScript.
Thank you so much! I'm completely new to js and want to do this as a weekend project so your comment really helps. Thank you so much, I hope you have a great day :)
Yeah so.. I'm gonna go ahead and do this.
If you read the source, he's just taking the word length and dividing it by 2. Nothing fancy here.
Conversation has migrated here: https://gist.github.com/tbranyen/9255362
right so, you'd have your list of dates in a variable, and just initialise the date control with the date thats next in your lists ie something like: var currentIndex =0; var dates = [{ year : 2011, month : 1, day : 1 }, { year : 2012, month : 1, day : 1}]; then your loading code would basically figure out which date is "next" and initialise the component appropriately. ie for (var date in dates) { //logic to figure out wehther todays date is after the date. if its not initialise the component. } You'd also do this in the "countdown complete" function in that example such that if someone did witness the dates change over it would load the next date. Hope that helps.
No it's not.
Cool. I'll need to add it to https://docs.google.com/spreadsheet/ccc?key=0Aqj_mVmuz3Y8dHNhUVFDYlRaaXlyX0xYSTVnalV5ZlE#gid=0
How are race and age not the same thing as gender? Have you ever signed an document that contained an anti-discrimination clause? Treating people different based on physical quantifiers rather than their job qualifications and work performance is unethical whether its gender, age, religion, sexuality, or skin color. I can program in C++ whether I'm a woman or an eskimo or a transgendered MtF. It doesn't matter one bit. If you're unfamiliar with anti-discrimination laws, [feel free to click here](http://www.phfa.org/forms/pennhomes_pre_processing_manual/dv_item08b_ndscrmntn_clus.pdf_)
This looks great and all, but I'm just gonna go ahead and pick a bone with the [phantomjs-node](https://github.com/sgentle/phantomjs-node) repo. If you wanna write your modules in coffee script, great. Have at it. Personally, I can't fucking stand coffee script. I think it's unreadable syntactic garbage. But whatever, that's your prerogative. But **STOP putting it in your README.** It does not make me want to jump in and start using your module if I get frustrated trying to read your examples.
I don't understand why you take it as a given that 50/50 split in the sexes is somehow better than what people, given their own free choices throughout life, simply choose to go into, and whatever that split is so be it. Surely there are biological, and by extension neurological, differences between men and women that would draw each to fields of study more in tune with how they think? 
Perhaps more accurately: "If you want the latest ES6 additions from Google's V8 &amp; Node, then you'll need 0.11.*" The Meetup on ES6 I went to just a few weeks ago used that version to demonstrate Generators &amp; `yield`; seemed that was the only/best version for that demo.
Scheme is a good language to learn with JavaScript. Scheme is what JavaScript was based off of. In order to be a good JavaScript programmer, you must understand functional programming (including scope!).
yeah you are right and every woman who has complained about hostile work environments is wrong. My bad
I encourage you to learn it on your own since it seems like that's what you want to do, but in case you get stuck, here's an example that can accomplish your goal: http://jsfiddle.net/schooley/EftzM/ I didn't comment as much as I should have so if you have a question please ask!
My mother is an accountant, my father is a lawyer. I couldn't make or fix anything if my life depended on it. I was never exposed to computers or math at all in my childhood. My parents and school pushed me towards things like history, or literature, or sports. I started coding 2 years ago when I made a switch to CS. 
You need to stop spreading this lie. That is not even remotely true.
&gt;Surely there are biological, and by extension neurological, differences between men and women that would draw each to fields of study more in tune with how they think? This is the crux of the issue. I guess you aren't aware of it, but this is essentially blasphemy (or perhaps even "hate speech") to some people. Lawrence Summers was basically forced to resign as president of Harvard University for publicly speculating that biological differences between men and women (in particular, greater variance in intelligence) could be partly responsible for the underrepresentation of women in science and engineering. Because some people's philosophical outlook prevents them from accepting this obvious fact (that men and women are biologically different in significant ways), they can only conceive of social (and therefore sinister) causes for the underrepresentation of women in these areas.
This. A million times this.
This is true for some people, the same way it's true for some men to not choose the career path, yes. But if you really look at what happens during the life of a girl, she is CONSTANTLY told that she cannot do math like boys can. Boys in the STEM career paths have been told their whole life they're capable and have been encouraged to do these things, whereas women receive the opposite encouragement. There is a reason for these trends. Look at a random sampling of males to females in a start-up, in a CS lecture, in a tech company. I guarantee they will all vastly lean towards the male side. This is not because they simply do not choose it, it's because they're told that they cannot do it. Now this of course is not true always, but by and large, girls as they are growing up are not seen as equals when it comes to math especially. There are women in CS, but I bet every single one of them has a story of sexual harassment, being undercut because she's a woman, not getting paid as much, lack of higher up job opportunities. Every. Single. One. This is an epidemic. We are getting somewhat better, but it's not even close to being equal. Think back, how many times was there a comment while you were in college about how many girls were in your class? The misogyny is rampant, it's toxic, and most women are told to stay out of this male dominated profession. You can think that what I'm saying is hyperbole, but the distributions speak for themselves. There are things that we as a society encourage different genders to do. There are roles we expect each other to fill, and it's all bull shit. Women are not encouraged to do CS, and when they do CS, they receive plenty of flak for it. I know you've seen it if you're in the field, even if you experience interacting with women that don't show it. It's there. Just pay attention for even a second. 
Because the idea that people are 'given their own free choices throughout life' is contingent on people being in a culture that is equally supportive of everyone's choices, and the simple fact is that that is not the case. Cultures change slowly, and the idea that women are poorly suited for technical pursuits is a very old idea rooted in a very different social and technological world. Could there be a neurological or biological difference that furthers the differences that we see? Sure. But we're a long way away from being in a cultural context where such a difference could be discerned from learned behavior. Even if we don't reach a 50/50 split, I think most people would argue that the 'true' distribution would be less skewed than it is in a more supportive cultural environment.
Thank you for sticking it out and dealing with all of the bullshit that comes from my gender. Women need fighters like you :).
&gt;They probably felt just like you did, only difference is, they've been raised to "man up" and told nobody takes their complaints seriously. What your pointing to is a larger problem within the STEM community that may disproportionately affect women (because of other social pressures that they are subject to). STEM disciplines in universities have a reputation for being unwelcoming and doing a poor job of helping people who are struggling. Smart people hit a section of the curriculum that is particularly challenging for them and quietly migrate into other fields rather than draw attention to themselves because they are struggling- there's a kind of academic machismo throughout the technical fields. It's hard not to draw the conclusion that the male dominance of these fields reinforces this. Making the fields more welcoming to women would make the experience of being a STEM major better for men as well, but that kind of change will not happen by accident.
You are only looking at one part of the argument and discrediting the whole thing because of that. You are only looking at one part of the argument and discrediting the whole thing because of that. You are only looking at one part of the argument and discrediting the whole thing because of that. You are only looking at one part of the argument and discrediting the whole thing because of that. You are only looking at one part of the argument and discrediting the whole thing because of that. I just want to make sure you understand that this is not an actual critique of what she has said. There is an essay of information there and you chose 10 words to discredit it. 
This kinda blows over the point that assets grabbed from shared CDN's like google's hosting of jquery are banking on the fact that, since enough sites use it, it's already there. Hence no lookup *at all*. That said, home/landing pages DO deserve extra special treatment, so **if it works for your site** to minify js/css/etc into the HTML itself, go for it. But do benchmark and see what kind of effect it will have for your users, what the geolocation issues will be etc. One other killer way to "fix" this is to not use a CDN *separately* from your content. No, instead use a CDN that fronts your entire site like [CloudFlare](http://www.cloudflare.com/) -- that way it's still only one dns lookup, and the assets are just under domain.tld/res/thing.js, but you get the "cdn is super close" effect AND reuseable assets AND a single DNS lookup. Granted, you should still consider in-lineing for speed, but weight it against parallel downloads the browser might otherwise do too.
ಠ◡ಠ
To be honest, I was just going to copy/paste and hack away at JS someone else had already written and not think much about it, but seeing as this is a project I'm doing primarily to learn I think I will benefit from actually learning it. THANK YOU SO MUCH for taking the time out to write out something I can start off of! This is quite exciting. I plan to take some time off and work on it this weekend. I'll PM you when I reach a point of finishing this. 
No, Backbone doesn't manage layout *at all* - literally `View.render` is a no-op. It leaves the implementations up to the developer, which means that it's possible to fill in the gap with a slow solution (as in the example in your link), or a fast one, but in neither case is that down to anything Backbone.
It doesn't help right now but I'm hoping it will when I start working on it tomorrow. Thank you internet stranger :) 
That is a fantastic analogy, I plan to use it myself.
ITT: Men being hostile to women while claiming that CS isn't hostile to women. 
There's an interesting documentary from I think Norway about gender roles. I don't remember what it was called though, unfortunately, nor do I have a link. But part of what it said was that it seems that the more equal the genders are in a country the more likely they are going to want to conform to gender roles. So you have this useless situation where a country IS equal but people struggle endlessly to try and make it equal. It was interesting and if you express interest I'll have a look when I get a chance and see if I can find a link.
_please_ don't `document.write` anything, ever.
Do the circle sizes mean _anything_? Why is a sample size of `2704` in Silicon Valley about 1/3rd the size of a sample size of `50` in Las Vegas?
wtf? What is the point of this game exactly?
Interesting list, thanks!
demo version is free, $5 for full version
I think [Collections](http://documentup.com/montagejs/collections) has the basic structs topic pretty much covered.
node.js, definitely. Most new web technology is based in either node, rails or python, and node.js is going to be around for a while. And if you're going with node, then express is a natural progression (though I've been using [koa](http://www.koajs.com) recently instead of express (koa is a "successor" to express, but built on generators)). The other two are debatable. They're both decent technologies, but neither has become a "clear winner". I personally use Cassandra in all of my projects instead of MongoDB (mostly because it scales infinitely better/easier, but it's also more robust, has features that Mongo doesn't, yada, yada). Other people use CouchDB, or Redis if it's all you need, or some flavor of SQL if you need actual structure, joins, transactions, etc. Angular is in a similar boat. It's hard to say how long it's going to stick around for. If you need to use it in some project, then great go ahead and learn it. But if you're looking for a technology to use and haven't made a decision, it has competitors like Ember, Knockout, Backbone, etc. I've used angular, I like it, but it has a fairly steep learning curve which can also put a lot of people off.
Are you kidding me with this site? It's like I just stepped out of a time machine into 1994. 
Less 'blow[ing] over' and more pointing out the flaws in that strategy for the unique 'first impression' case. It does take a watchful eye to figure out if a site would benefit from the approach. I totally agree with you that CDNs are needed and are great. But like you said; sometimes CDNs cause a lot of network traffic for a large percentage of users, which is unfortunate. Great point on the CloudFlare process. Their solution really is one of the better solutions if you are able to use it.
Pretty sure the studies mentioned 2 or 3 comments up where women dropping out of STEM fields after government programs spurned then into them at the expense of others is direct refutation of that claim. But please continue to try to fit the world into your preconceived mold.
I don't think _anything_ is "preventing" node from reaching mass adoption. It's growing at a steady pace. You have to realize that the technology only started a few years ago, and it hasn't exactly been a mature, stable platform until relatively recently. But it's maturing, and as it does so more and more companies are adopting it. Getting some big names using it has helped a lot too. [node.js vs rails search trend](http://www.google.com/trends/explore#q=node.js%2C%20ruby%20on%20rails&amp;cmpt=q) (if you throw php in there, it dwarfs the other two, but it's in a complete downward trend. And I don't know how to add "python" without it including snakes ;))
Fully agreed on the adoption of node! I think we're talking past each other though. I'm not talking about the adoption of node. I'm talking about the adoption of the MEAN stack in particular, as a framework if you will.
I've just discovered this a week ago and been restructuring my work prototype in it, from standard MVC. Thankfully I was already using javascript calls to an API for data, so my MVC controllers were fairly bare. Its just the annoying matter of turning every razor view into an HTML page. So far its really great. Especially templating which has made it easier to keep page feels. Only annoying thing I've found is that if your js files return a class function, Durandal will reconstruct and bind it every time the cached view activates. You have to export a constructed object to avoid this.
glad people aren't taking the YAFS advice
As I said initially, I think the competition against MongoDB &amp; AngularJS will prevent "MEAN" from ever taking hold. But that's not to say there won't be some other acronym or whatnot for: node.js + NoSQL + UI Framework + App Framework (express/koa/whatever) And _that_ is what I think should take hold. NNUA. NUAN. NAUN. NAUD. DAUN. I dunno ;)
How about node.js + nosql + nginx + nepalinux + ... Okay, I can't think of any others. But we now have NNNN!
Nice work! I wrote a small library called [l33teral](http://appendto.com/2014/02/l33t-literals-javascript/) to help with large complex object graphs, where you want to deal with nested properties like `customer.contactInfo.phone.0.areaCode`. Check it out and let me know what you think if you get a chance.
Then you are not educated on the details of such things and are trying to say that how one views a person's race or age is the same as how one gender acts and thinks compared to a different gender. You are trying to say a black person acts and thinks differently than a white person because they are black in the same way a man and women think and act differently. Not true at all and I don't have the time or inclination to explain it to you.
Welcome to the club on illuminated builders! I think the name &amp; logo of grunt are very appropriate: it is not very high-tech, beautiful or subtle but it is boots-in-mud practical and gets shit done.
&gt; merged the dependencies Last time this thread came around it turned out author did just imported the dependencies in a few huge files. 
There's a checkbox that allows you to adjust for sample size. Based on what you check, the circle size is either absolute number, or percentage, of people who use the tech in the area.
sorry bout that, fixed now
"This will be down voted but" is the Reddit version of "most people won't share this." That's something I didn't know about CS and would have been pleasant to learn if not for the passive-aggressive negativity. 
It isn't brand new.
This is interesting, and I think we'll need to rethink our approach to using jQuery for jQuery to remain relevant in the future. I'm a fan of jQuery, and recognize that it ushered in a new era of web development, and that they've done a fair job of evolving, but I don't think the current paradigm (a single monolithic global) is the way of the future.
Your conclusions of what I did and did not say are completely incorrect. If you hold the view that women can be treated differently than men "just because," then I know you'll have fun when Title IX kicks you in the ass. I would definitely look discrimination laws up if I were you! Cheers! Edit: I *do* have the time and crayons to explain this one to you, though. 
Marketing? Wat. MEAN is just a collection of common tools. Just like LAMP. Are you gonna say that LAMP is just marketing? 
That you bring up Title IX and then imply women aren't different from men is just more proof you aren't thinking this through so I'm done with you.
Software tester here. Suggest you use 'Display dismissed' as opposed to 'Display fired'.
Sadly, the post doesn't really tell us anything about what's inside, but thankfully the YouTube description does: &gt; Getting the Most out of Knockout.js Computed Observables &gt; crypto-js &gt; JsonStub &gt; What's the Role of the Server in Single Page Applications? &gt; Live.pics.io — How We Developed a Service Using WebRTC &gt; Organizing your Angular Code
What that's a pretty nice looking lib.
Agreed, the monolith/global needs to go.
Well there will be cases where it will make sense to use it but please don't try to use it everywhere just for the sake of using it. If you get the chance to work with an architect let him decide what stack is the best for your product and then stick with that decision. 
I don't agree - very few boys choose STEM careers. The boys who do not choose STEM are not doing so because of the reasons you give for girls not choosing it. They do so because they are not attracted to a deeply analytical work environment, nor do they have the borderline autism and low social functioning that promotes high functioning in these areas. The real reason is that in a distribution of men only about 5% have the disposition for this sort of career and only about 2% of women [* I have only anecdotal evidence for these figures]. So there may still be work to do to increase the women accessing those careers but lets not make the mistake of arguing that all men have these skill sets or that women must necessarily have these abilities in the same ratios.
Coming up with an acronym and marketing it? Yes that's marketing. But it's also essential because adoption by more than just developers MATTERS. 
Who is marketing the MEAN stack? Edit: why am I getting downvoted for asking a simple question? 
The use of the *safe-navigation* (`?.`) operator is not an excuse for the loss of the ternary operator. This is something the parser can easily detect and handle. Groovy contains both [the safe navigation operator](http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator%28?.%29), as well as Java's ternary operator, **and** has the [elvis operator](http://groovy.codehaus.org/Operators#Operators-ElvisOperator%28?:%29) (`?:`, A.K.A., the short ternary operator).
404
The AP2 spec for promises is less relevant now that they are in ES6 and going to be built into the platform.
This. Someone once told me: "the plural of anecdote is not data." 
What about the infamous 'pipeline problem' -- women who [join the CS track and leave at some point in their career, in much greater numbers than the men's 'pipeline'](http://staff.washington.edu/yasuhara/cv/publications/Yas05.ASEE-CS_1_gender_prelim.pdf)? Is there problem there a "lack of interest" by women? Probably not, since in that article I just linked: &gt;Seymour &amp; Hewitt’s landmark study of STEM majors found that persisters and nonpersisters differed more in their reasons for choosing a STEM major than in the concerns that eventually caused nonpersisters to leave That article also goes into gender differences between what women and men find interestingv about CS--finding only that logic and creativity had significant gender differences in terms of how it affected interest. Does a woman who stops her CS education in the middle of her doctorate 'lack interest', or did she discover that something doesn't sit right about the field? Or to use Ashe Dryden's famous phrasing, what if they feel that the pipline leads to a "sewage treatment plant"? If the difficulty is interest along, [why do other STEM majors have higher proportions of women, including up to 50% of math majors](http://www.uc.edu/content/dam/uc/win/docs/stem_fact_sheet.pdf)? Why is the pipeline problem SO MUCH WORSE in CS than any other STEM? Why is CS the only major STEM field where the percentage of women earning degrees has DECREASED since the 1980s? It is very hard to claim that CS is so exceptional in 'interest', compared to all other STEM fields, that the problem is entirely one of 'interest'. If women are leaving the career to have babies, which are more women leaving CS because of this that they proportionally are in other fields--is the problem less of WANTING to be a stay-at-home mom or is a problem of Cs workplaces not accommodating the different needs of new mothers (even things as simple as breast-pumping can become challenging)
I'm just not clear on how coming up with an acronym to describe a set of tools is somehow marketing-speak and should therefore be discounted in some way. Should we look askance at LAMP because it has an acronym? 
Charlie Robbins and Nodejitsu stay winning the cunt game
That is a great feature, which JS had an equivalent.
Software developer here. Suggest you add an administrator account to allow displayed strings to be customized.
Definitely this. MEAN is great, nodejs is great, and angular is great, but they don't work for all situations. With a as many technologies as we have out there right now, be picky and really look at your requirements vs framework and platform features/benefits 
I'd go with branding. The MEAN guys are trying to develop a solid brand. They accomplish it through marketing. 
I just think the term marketing is being used loosely. MEAN is a brand and they're trying to build a reputation for the brand. Remember, it's much easier to sell technology to stakeholders if it's a big name. 
Do you have a specific problem you are trying to solve, or are you just looking for general resources? If the former, post your code either here or at r/LearnJavascript! If the latter, the "usual" places will have the answers you need: * (1) Google provides fairly complete [documentation](https://developers.google.com/google-apps/app-apis) for their APIs * (2) [Stack Overflow](http://stackoverflow.com/tags/google-apps-script/)
I'm reminded of the [Law of Demeter](http://en.wikipedia.org/wiki/Law_of_Demeter). If you need that many dots, you're probably doing something wrong.
Javascript here, too.
It isn't a lie, nor is it a falsehood. Women in the tech industry have to put up with bullshit that men never do (or are even aware of), *especially* when they speak up about it. EDIT: My comment is a statement without proffered evidence, sure. But so is LambdaBoy's comment. I think the fact that mine is voted down while his is voted up does back me up some: people in tech don't like to even hear about the problems women face.
&gt; MEAN is marketing ... topic is irrelevant to what we do as developers Essentially you're saying that, because the MEAN stack is is a marketing term (if you use the term marketing very loosely) we shouldn't care about it. I don't think you've explained why that's the case. Would you say the same thing about the LAMP stack? 
You're confused. The original comment to which you responded said that, and I was not the author of said comment. In fact I stated the opposite - that it does matter, that marketing of our tools is essential to their adoption both amongst peers (developers) and other project stakeholders.
I'm tired of this discussion. Enjoy your ignorance.
Err, the text is overflowing and the overflow is hidden :|
For domain objects, I agree. But JSON data documents (REST API, mongo collections, message bus messages, etc.) are really the target objects for this library. And like I said in the post, ideally the schema of these objects would be concrete, and default values would be provided, but this is often not the case.
Ah, I see. So you're saying that marketing is necessary, while the other guy is saying that that makes the MEAN stack something to be ignored. 
Yep. I'm saying it's a healthy, essential component of adoption.
&gt;Please, try harder or get forked. Not sure how else to say that.
I agree. This is a dirty business, and the only right answer is a non-partisan agency that owns the copyrights and trademarks and only goal is to support the adoption and use of Node.js. 
Regarding the two comments saying this is just a re-hash and a spam post and that the developer has cobbled together other libraries, well, why not say that? Why not comment saying something productive, tell others that this is a bad framework in a constructive way - something that's actually in some way related to the codebase. Because people posting: "lol @ multiple 9000 line files this is horseshit" "But it's fresh, steaming horseshit! That means it must be good!" "This guy who works on this a complete joke." is entirely inappropriate for a subreddit that is supposed to be about JavaScript, and not promote a hostile environment. I never said this framework was good (I've never used it - I have no opinion) but calling the guy a "complete joke" is just rude. Again I don't know the author, but what if this was the first thing they've released? Their first shot at an open-source project. Rather than someone explaining to them that "zero dependencies" doesn't work the way he thinks, instead he gets his code called horseshit. 
Closure Library
btw [here's my response to the YAFS post](http://thanpol.as/rants/An-open-letter-to-the-TasteJS-folks)
disclosure, i'm heavily invested in the MEAN stack, that's what i work on professionally.
&gt;First of all, Javascript’s native .sort() function uses Quicksort. This is incorrect. V8 currently uses quick sort, Firefox uses merge sort, and WebKit varies depending on the input array. AFAIK the only thing that the spec requires is that the sort be stable.
If you consider yourself to be intermediate my first recommendation will always be to stop using any frameworks exceot the vanilla js framework. Those frameworks have baked in design decisions and are intended to solve common problems for large scale applications. If you are not creating large scale applications you are cheating yourself out of truly seeing why these came to be and will be unable to deal with anything ouytside the norm of what the framework expects. You want to understand the subtleties of js, not js in the context of a currently popular framework. I reccomend working soley in node at first because it will let you focus on the language and not the dom. You can just run your programs in the console as if you would if you were honing your c++ or python skills. The only caveat is the command line debugger may not be great for many but there are ways to be able to step through code in things like visual studio. You can pm me if you'd like help getting setup with those. Finally, as far as books everyonr will reccomend the good parts, elloquent javascript, the patterns book online by addy osmani and they are great in my opinion as well. However, I highly recommend this online book https://leanpub.com/javascript-allonge/read it will be more difficult to get at some points than the others but just take it slow, code and step through the examples and you will really understand javascript and the functional paradigm on a much deeper level. It is an excellent book.
I do have a specific problem - have a form in google docs capturing info daily - looking to automate with mail merge the data in the spreadsheet - also any further suggestions to optimize and leverage in a team environment I'm really struggling with wrapping my head around how scripting even works. Hoping someone can help me 