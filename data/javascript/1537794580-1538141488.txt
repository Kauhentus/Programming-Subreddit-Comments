Cool - I like it, Your good looks good man! I wrote AutoImport originally. It was a good learning experience and was nice seeing it get to 0.5m downloads. 
I use semi-colons. But it isn't ridiculous to not use them. It isn't enforced thus is more coding preference. Your analogy is stupid, plenty of analogies can be given to make the, use of semi-colons sound ridiculous also. I like reading constructive debates. Not, "*this is ridiculous because I think so"* statements :(
What are some of the commercial grids that you like?
I can't find any evidence to support this.
You need to do all kinds hackery to turn a regular data grid into a tree grid + a bunch of menial stuff that components should take care of (flattening the input and calculating ancestries for individual nodes). Last time I needed a tree grid, I've whipped up my own (as long as you don't need any advanced features, it is rather simple), rather that poking and prodding and existing component's API. Sadly, in the React space this particular niche is woefully underserved.
&gt;Speaking of React, I am not a fan of your use of "Virtual DOM". That term means a specific thing and I am quite sure your use is not it. Actually..... \*\* pushes up nerd glasses \*\* the term "virtual DOM" is NOT specific to React. It's a term that has been around before react and other tools and frameworks have their own implementation of it. (things as far back as [ExtJS](https://www.sencha.com/products/extjs/#overview) have used a virtual DOM for rending larger lists since 2007). &amp;#x200B; The issue is that now React is popular... most modern literature found on Google about "virtual DOM" is going to reference it.
Really nice work here. I love that such an advanced data grid is MIT licensed AND has no external dependencies (quite impressive). Are you open to receiving feature PRs? I would love to contribute by either helping with some of your road map items (specifically creating additional editors and formatters or print styling). I also noticed that things are "lite" on the testing side ;-)
Still, virtual DOM (at least in my understanding) is supposed to be some object tree vaguely representing a DOM tree which is to be made into actual DOM with some further transformation. I don't think that's what this library is doing.
Do you have any example with React? I am trying to import it and create a new instance but I am not able.. :/
Just tried freecodecamp. Full screen is cluttered, ugly and on small screen, and they force you to write something word by word. Meanwhile, https://javascript.info/hello-world just shows you what you need to start out learning JavaScript (this is exactly what this post is about...?), not HTML5 and whatever nonsense you don't care about. You know which one you should pick.
You said underscore, there is lodash too, very useful to learn some tricks React is pretty much the most known js library out there after jQuery. If you take a look at react, check redux too. Don't hesitate to take a look at well known framework too like Angular or Vue. It can be hard to understand but you can learn a lot of things
Thanks for the kind words. Im very happy to receive pull requests, for small things like formatters, editors etc submit away, for more comprehensive updates please start an issue first to discuss them so i can be sure the fit in with the direction of Tabulator. Also if you want to help with the testing you are more than welcome, im just one man so building everything and testing across all major browsers with so many interconnected features is a bit of a burden. For major releases I do a public beta for a few weeks to catch most issues, but outside of that any help with testing would be great!
I have had a couple of people ask that today, This weekend i will put a page showing integrations with various frameworks like react and vue etc...
You know, with modern frameworks, you have repeaters which can databind arrays to UI elements. Boom, instant dynamic table. Filtering, sorting, paginating, etc is all just simple array manipulation now. People on Reddit love to call technologies 'dead'. To me, all dynamic table libraries have been dead for years.
Well then, I apologize :)
Then that's the (Java) application's job to monitor its window's state and trigger any code in any runtime inside it.
What part about destructuring they didn't mention [here](https://javascript.info/destructuring-assignment)? 
hehe, very gentlemanly of you :)
Good one! I've used socket.io, but I've been meaning to give the ol' built-in interfaces a spin.
You are absolutely correct there, and for simple layouts I totally agree with you. The issue comes when you are trying to do lots of additional things on top of simply displaying data (complex sorting, filtering, editing, validation, conversion to pdf or xls for download, localization, etc...), which you could of course spend ages implementing yourself, or just use a library to save you time which is where Tabulator comes in. As for the reactive data bindings, I think that is one of the most powerful features of modern frontend frameworks, which is why it is on the roamap to add the functionality into Tabulator in the next six months so it can seemly interface with frameworks that use that design paradigm.
Just in case you aren’t in on the joke, this (and the butterfly response) are quotes from an XKCD comic about what makes a real programmer. 
So, if you're struggling to retain new JavaScript information, it could be that you're missing a very important element. What is that element? JavaScript is not about memorizing. Yes, there are some things you need to remember. But, more importantly, you need to understand what you're doing. Or, you must first grasp the problems that JavaScript tries to solve. Then, it will come naturally. Here is a reddit post on how I approach it: https://www.reddit.com/r/javascript/comments/9hjego/my_5_rules_for_learning_javascript/
The virtual scrolling really helps with performance here, good job! &amp;#x200B; A couple things I'd like to see: \- Vertical scrolling on the timeline, I had no idea that I had to scroll on the label section to see more events \- Scrollwheel events on the timeline section \- Gantt connections to whole events, it's mildly frustrating to connect events currently
Thank you :)
@ u/JeannieThings So what topics would you consider to be beyond the basics of JavaScript?
width &amp; height are null to fullscreen? how about "100%" instead?
Can you clarify what you mean? Or feel free to just open up an issue in the github repo.
Awesome! I need to start learning React anyways for a website project at work so that's a great coincidence :)
Both! Check out [this part](https://github.com/ericbiewener/vscode-vandelay-js#usees5-boolean) of the documentation.
You will get same result, when you set width and height to 100%.
That's cool that it is just done automatically. I think one advantage that my extension still provides is if you need to customize how the import gets written, e.g. you use webpack aliases.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**ch1.md** (master → 0cc17c5)](https://github.com/getify/You-Dont-Know-JS/blob/0cc17c53ff772e20dfd6a7072c965df2486116e8/scope%20%26%20closures/ch1.md) ---- 
"An unbalanced tree was written using document.write() causing data from the network to be reparsed. For more information https://developer.mozilla.org/en/Optimizing_Your_Pages_for_Speculative_Parsing"
So far, everything I’m finding in the first few levels on codewars (6kyu, 7kyu, 8kyu). So lots and lots of functions working with arrays and objects and strings and to solve mathematical problems. Like the kind of math/array/object skills you need to demonstrate in a technical interview. I can build an app in Vue or React and hook it up to all kinds of APIs and make it run efficiently and make it look beautiful. But I really need to demonstrate a deep understanding and quick recall of logically working with arrays and objects and functions for a technical interview.
I'm almost positive that or something like that is what is causing the warning because if I test it outside of my project then it works fine, but once I include the code on my site, it throws the warning about unbalanced trees.
Prettier has pretty much ended the formatting debate ( to the best of my knowledge). Give it a shot website: prettier.io If you have strong opinions on code formatting, you may disagree with some decisions, may feel the urge to abandon, but please do give it 10 days. 
Unity
Prettier all the way. 
Some communities have local meetups, I'd check meetup.com and see if there is anything going on in your area. Eventbrite.com may provide some leads as well. You could also ask around your network, and see if anyone else knows of any events. You could also consider organizing a talk yourself! See if a local incubator or co-working space has a space you can use, and send out some emails. It's easier if there is already a community you can join, but it's not required to get started.
I agree. I would normally write that code like this: const text = await fetch().then(res =&gt; res.text()); const lines = text.split("\n"); Succinct and readable. Though I also agree with other commenters that if your use-case is much more complex than this ... it's probably better to go with a tested solution like RxJs.
fixed :D
Thanks for the examples, i already have a simple way of implementing this involving a formatter. I will include it the next minor version release. &amp;#x200B; Cheers &amp;#x200B; Oli
I follow a very strict standard of coding which is semantic based. Try, looking at the source code of my library, CrxOop, which acts as a language inside a language. Apart from very few places, it strictly follows my standard. And if you have any questions, I am willing to help.
Can you post your HTML? The warning makes sense, you overwrote the DOM and the speculation failed before the entire structure was interpreted.
Hi /u/akhil_it18, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Hi /u/woolfi182, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
I'm not so sure this is better in a language without static types. First of all, `Promise.all` signifies that you're transforming a List of Promises into a Promise of a List. This is much nicer than a literal `magic` 
Hi /u/yairEO, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/yairEO, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
[snippet](https://raw.githubusercontent.com/siffogh/match-game/master/demo.gif)
I've been writing javascript for 13 years, have large open source projects on github and 42k points on stackoverflow. And you are sending ME to /r/LearnJavascript ???? are you serious? I've asked for a Javascript NPM package for html-based bar-chart. it's still 90% javascript, so it does belong in the "/javascript" room, with the "help" tag. There were extremely rude people attacking me and now this. what is this unfair treatment.. it's feels very wrong, as I am pretty new to reddit, but I get much much better respectful behaviors in other programming communities i'm involved in. 
Read up on the event loop and how Node uses it to prevent blocking the thread in certain cases (such as reading a file from the file system)
There's no difference other than it cannot inherit methods from `Object`. Also `let obj = Object.create(null)` is a cleaner way of doing it.
Yes* *If you queue a task (e.g. `setTimeout` or use an async function) that code within the task is not necessarily executed in sequence with the surrounding code. e.g. function thingydoo() { console.log('i like burritos'); setTimeout(() =&gt; console.log('me too'), 10); console.log('i like nickleback'); } thingydoo(); you'll see * 'i like burritos' * 'l like nickleback' * 'me too' When you probably didn't mean to acknowledge liking nickleback. Checkout [this talk on the event loop](https://www.youtube.com/watch?v=cCOL7MC4Pl0&amp;feature=youtu.be).
The super "proper" way is to use javascript to create and insert the elements yourself: let stuff = document.createElement('div'); stuff.textContent = 'stuff'; document.getElementById('someID').appendChild(stuff); stuff = null; // not always necessary, but it's a good habit to clean up after yourself
I like GraphQL, but your comparison to REST misses the mark. While you avoid issues with REST, new issues arise. For any nontrivial implementation, you need to consider depth limitations, timeouts, and potentially cost analysis. A lot of these can be mitigated with a precompilation &amp; whitelist build step, but you've traded one set of problems for another.
No sorry I can't. I moved on last night and it's 1k+ lines. The solution was to create a div, assign an ID to it and then do: `document.getElementById('someID').innerHTML = '&lt;div&gt;stuff&lt;/div&gt;';` My code is a combination of GDPR workarounds + EU Cookie law work around (selectively drop GTM based upon their IP queried from a GeoIPDB and/or consent to cookies) + a Google mobile first penalty work around + jquery exit intent popups + non jquery viewport based "scroll" triggered popups (doesn't use any scroll methods since they do not work consistently across all browsers) + membership where members don't see these popups + and the final piece I am working on is to replace embedded social sharing buttons with email forms **(when I encountered the speculative parsing issue)** in certain situations like the user came from Google, or the referrer is blank, since I can't popup forms and rank normally in Google's mobile index, this work around can't use jquery since the library doesn't load in time. This is super fun stuff, trust me. /sarcasm Pseudocode: load functions in .js file (header.) Wordpress Shortcode prints container divs and the JS call to function. 1st function calls this function that processes some variables based upon the user's browser, the existence of a specific cookie, and the document.referrer. calls 2nd function and based upon it's value, calls document.write to produce customized html for that specific user based upon the variables. I now innerHTML here to do this.
Thank you! I've heard about GraphQL before but didn't read about that much and now that I have it looks awesome ans I will totally check it out and continue to explore it thanks to you. 
This is somewhat weird way to implement a Builder. The implementation, in fact, contradicts what is being explained. The author presents the pattern as involving 3 roles: _Builder_, Director_ and _Product_. It presents a clear differentiation from _Product_ and _Director_, but then the implementation presents `Airplane` as **both** the Director **and** the Product. This is clearly not a good idea. At least if your goal is indeed to "isolate representation from construction". Not only that, but the _Director_ is presented as the entity that "constructs an object using the Builder interface", and the goal of this is, naturally, to allow a certain independence between _Director_ and _Builder_. But then again, the implementation presented for the Director is _completely tied_ to the Builder, by using its properties directly. There is, actually, no independence gained here. In the end, the actual problem lies in the fact that the _Builder_ has already built a complete copy of the _Product_, rather pointlessly. What happens is that the _Builder_ here is merely acting as a "default values holder", and so, it completely mimics the shape of the _Product_ without actually building it. And then, the _Director_ is **not** using the Builder to build the _Product_ as was explained, but instead the Director is building the product itself by simply _reading from the builder_.
Every time I have built both the API and the app that consumed it, the API was a small fraction of the workload. I have never really experienced the troubles you mentioned. Plus, the real pain of making an API is dealing with complex database schemas. If you can keep the burden off having intimate knowledge of the database off the plate of the frontend developers, they will be much more productive. GraphQL is best for very small teams with very simple databases. I have not researched it, but my guess is that, with GraphQL, you could make some calls that would result in extremely heavy SQL statements, without even realizing it, since you have no idea what the SQL is. For a big project, that sounds like something to avoid. That's why you have an API team. 
I'll have to make a fork and take a look at the source. This is the exact type of open source project I've been looking to contribute to for a bit now!
It doesn't matter how long you've been involved in JS, the rules here apply equally to everyone. Also, asserting that you're right because you've been doing it for some period of time is a fallacy, and you've done that at least 3 times in this one thread. &gt; I've asked for a Javascript NPM package I don't see "NPM" nor "Javascript" mentioned once in your post. &gt; it's still 90% javascript, so it does belong in the "/javascript" room, with the "help" tag. The `help` tags should be reserved for advanced topics, not "how do I..." and "I need a library for..." type questions. We could definitely do a better job around that messaging, I'll give you that. &gt; There were extremely rude people attacking me and now this. what is this unfair treatment.. it's feels very wrong, as I am pretty new to reddit, but I get much much better respectful behaviors in other programming communities i'm involved in. You're making a mountain out of a molehill. You're also getting very emotional with the incredulous replies, claims of attacks, etc., which is counter-productive in technical discussions. I suggest that you become better acclimated to the subreddit and learn how to have respectful arguments, or seek assistance elsewhere. Consider this a warning.
Well the idea here is to make changes to front-end be as much independent from back-end changes as possible. GraphQL definitely allows for better iteration speeds ( with some trade-offs obviously ). With regards to your db related query, there are projects like prisma which allows you to have a GraphQl layer over your db ( kind-of like an ORM ), which then allows you to have type checked schemas and other goodness for your otherwise string-like queries.
/r/reactjs
My bet is that they compile out &amp; disable all console.logs considering that \`console.error\` still works. Maybe their code has a bunch of console.logs in the development build and its easier to remove them that way rather than actually remove them in source.
Turns out there was an issue with the export wrapper in the 4.0.0 build, i have fixed it and made a 4.0.1 patch release which should work if you include it.
You're correct!
It reminds me the flex scheduling framework feom the actionscript good old days :) 
At a point in my life, I was so shy I used to talk to furniture to practice speaking to people. I'd literally walk up to a TV or a table and say hello. You might think I'm crazy, but hey... As you can tell, I was determined to get over it. To be comfortable around people. Especially when it comes to attracting a date. With time, I got to a point people would not believe my when I said I was shy. In fact, many people see me as a very confident person now. Although, deep inside I still struggle sometimes, especially around aggressive people. At the same time, it does get easier. The three things that helped me were: - Realizing that everyone has a level of anxiety around people. - You should have at least one thing you do that is for other people. The point here is, if you focus too much on yourself or your troubles, you'll never get out of this. So perhaps volunteer somewhere, help the elderly, or something. - Being clear on what you want from life. You don't have to be everybody's best friend. Be willing to reject people who don't treat you right. Also, you have one life. So choose wisely what you do with it!
I am aiming for better crowed than new dev on "/LearnJavascript" which have zero chances of being familiarized with such library that I seek. I've written that I need this for a dashboard in React so it's obviously a **javascript** component I am after, that is what working with React means, installing NPM packages and importing them to your project. I thought it was obvious I am looking for a a javascript library after stating this is for a React dashboard. You are simply saying my post is not "advance enough" for you and kicking me away to play with the children in "/LearnJavascript" who cannot possibly help. some help..
It feels a lot like the github fork explorer thing, you've got to click and drag the background to move around.
that's hardly "losing your mind" stuff.... 
Good old flex. I use to developed in Flex before doing JavaScript, that may explain it ;)
Yes you should, I have not try with a touchpad.I will raise a bug should be easy to fix.
Thank you for your feed back, \- Agree I will make the scrollbar visible, should be easy to just need to change the overflow:hidden to scroll. \-This one is under development coming in next release. \- Is this because the area is to small and it is easy to miss?
Looks good, but there are serious problems with scrolling on iOS, the layout seem to float around, is it possible to fix that or the problem is rather complex?
If you are employed and preferably don't work remotly, it's easy.
I would have a look to [reselect](https://github.com/reduxjs/reselect) and [redux](https://github.com/reduxjs/redux), they have small codebases, are very simple and are used a lot. I would also have a look at [backbonejs](http://backbonejs.org/docs/backbone.html) annotated source code, is an old library and maybe its concepts are surpassed nowadays but it is totally worth reading.
Ive not had that reported as an issue before, if you are having trouble please report it as an issue on the GitHub repo along with a screenshot/video of what is happening and i can look into that for you.
Ok so I will have to use async still. Is it good practice to separate small sections of code into functions and use await?
JavaScript the language is neither compiled nor interpreted. _Implementations_ of JavaScript, however, can either interpret or compile. Prior to 2008, all implementations of JavaScript were interpreters. When Chrome arrived in 2008, it was the first to compile JavaScript to machine code. Today, Chrome does a bit of both. Outwardly, however, it makes no difference to us developers. We still give source code to the browser same as we always have. I think that's the detail that matters the most: do we distribute our programs as source or as binary. &gt; The answer to that will be compiled, 100% compiled. ... Consider your JS program has a syntax error on line 7 of your code and you have a console.log or an alert on line 1. If the language was interpreted, it should console.log or alert before it gets to that syntax error, right? No, it shouldn't. Interpreters will (typically) still scan and parse the entire source and find the syntax error before it begins interpreting. &gt; The first example I can think of is hoisting Same thing here. Interpreters are not forbidden from looking ahead, and every one I'm aware of will scan and parse the entire source before it begins interpreting.
Are there any alternative dsl builders to this?
I havnt built anything specifically with backbone.js in mind, but if it can handle standard JS libraries then it can handle Tabulator
Most Javascript DSLs are ad hoc. Library authors just wing it. As far as I know, Loony is novel because it provides: 1. a syntax for writing programs within Javascript 2. a way to define a language your programs are validated against.
If anyone is wandering why you'd want to use a file as an interface here is some discussion from (8 months ago with some decent reasons)[https://old.reddit.com/r/javascript/comments/7rv221/to_indexjs_or_not_to_indexjs/dszx99t/]
It depends a bit on what you’re using to run your Slack bot. It may have some thing to store credentials.
You may want to consider Toastmasters. Google it to see if it may be a fit for you.
Then product teams end up with a hard dependency on said "API team" whenever they want to make minor changes. That might be preferable in some circumstances (e.g. if you happen to be working on a database that simply cannot handle anything other than highly optimised queries), but a big part of GraphQL's appeal is the way it allows teams to move independently - precisely because they've been given a layer which abstracts the detail of how the data is accessed / stored, without completely dictating every use case. There are a great deal of high-volume public GraphQL APIs out there now - they must be getting around the "oh no, they could make an expensive query!" problem somehow. It is probably not that different to what you would do with plain REST - require pagination for sets of data, enforce rate limiting, stuff like that. Plus, if the API isn't public you can whitelist valid queries. &amp;#x200B; I can't say I've found the SQL side of things to be the hardest part when building APIs, at least those intended to be consumed by a UI, in the past. The hardest parts are trying to avoid making decisions that push complexity down the funnel to the UI code, or trying to anticipate future needs, or trying to deprecate a field and tracking down all the client code that could possibly be affected. There are good patterns and practices you can follow, but you have to bring them with you, there is nothing enforced. GraphQL is an investment but it can save you a lot of pain too. It's a specific tool for specific situations, and I've really enjoyed working with it in those situations.
Absolutely. It has to be, because cors is browser to browser. I can upload a sample app that does twitter login on the backend and fetch in the frontend, without any cors issues. It’s just a POC, but it does what it says :) 
I agree completely. Extensive own tests shown that fetch/rest is faster/simpler, for high loads. There is no gains in performances in both servers /clients, with a big load of data, a high load of users, more tcp calls with rest isn't a problem at all. Code is simpler, the sum is a gain. It really starts to be extreme with synchronous databases. Setting and understanding wss:// is also too disturbing for many of us. 
I store them in the database. If you have something like a from job you can use that to refresh the JWT so you don’t waste time refreshing it to make a call. Honestly, a network timing diagram is the best way to understand these interactions. Draw 2 lines down a page, one for each server and time goes from top to bottom. Then draw a arrow from one to the other to show a network call. I always draw authentication out this way because it just makes it easy to understand and see what’s going on. 
There is none and Google lies.
Just something to teach me JavaScript and have it stick.
Go to VSC, they have some good offers (free trials for some learning sites e.g. pluralsight) ;)
Thanks mah dude
I'll second backbone. It's a very different structure than react, which can give a good perspective. Not used as much, but still a good read. 
The sample API feels very awkward ... Primarily due to the limitations of tagged template literals and getters I think. Personally I think something like that (SQL query builder) would be better implemented as a regular chaining API ... If you wanted to get super fancy you could even dynamically generate the methods.
This is really a non-statement. Saying your code is that size is like saying you made a vegetarian pizza because you added some celery to a pizza on the ground. http://hdraws.com/scripts/matchgame2018.html here is a match game i made in 4 kb, and it has no dependencies.
The sample SQL example is kind of awkward. It's just an example showing that Loony programs are well-defined, and it will throw if you write an invalid program (in this case an invalid SQL statement). In it's current form, Loony isn't very useful, but it's a good start. For example, you don't have to use tagged template literals. You can use plain function calls instead. You can also make it simpler, more flexible, and faster by using a customized parser generator. The end result is you could write an arbitrary, validated chaining API.
Oh perfect! That's exactly what I've been looking for! Going to give it a go once I get home
Really cool man! Did you have a specific performance budget in mind when you started? 
I don't know about programs, but these youtube tutorials are fun and cover a lot of javascript concepts: https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw
http://phaser.io is quite powerful, I've seen some devs do awesome things with that.
Brilliant
FreeCodeCamp is structured around JavaScript/Node. 
Preact is pretty straightforward to read through. 
Just read through this: https://eloquentjavascript.net
We are using Aurelia. Its amazing. Mostly vanilla JS, and a user driven project are two primary factors in our choice over angular and react.
I installed prettier but its still adding new lines on my imports.. thats the only thing driving me nuts
Is there a way to disable adding new lines for the imports? Its still putting it in
🤷‍♂️ my graphql servers that I write avoid N+1 queries all-together by batching (thanks to the graphql lib I use the server). No worries for me as a front end developer!
You can have prettier follow eslint rules if you have them. 
Don’t think the author understands either rest or graphql.
&gt; You may have to add mobile-specific fields to your API, which the Desktop clients don’t really need, or worse, you end up creating different versions for different clients and have to evolve them individually. I stopped reading right there because this sounds like people are making changes as fast as possible without thinking about the larger system. There is no architecture or technology that can make that better. That's a culture issue. &amp;#x200B;
I use elixir as my backend language of choice with absinthe for graphql and dataloader for batching my sql queries (I use ecto as well)
Yes and yes.
Yes, but be careful with chaining awaits. One of the points of using Promises(and therefore, async/await) is to declare pieces of code that might not be executed immediately or might take a long time. If you chain too many async functions, you might slow down your application unknowingly. As a rule of thumb only call await when you are absolutely sure you cannot begin the execution of that function earlier, and you absolutely need it to finish before moving on to the next instruction. Otherwise, consider saving the result of the function in a variable *without* await, and then awaiting the variable only when you actually need it.
I think it is. You can use it for both in the browser and on the server.
For small and toy projects, GraphQL is ok. For complex, serious and backwards compatible APIs, RESTFul is a better option.
I'm betting on ReasonML 
Ya, but clickbait worthy
&gt;With regards to your db related query, there are projects like prisma which allows you to have a GraphQl layer over your db The database is not your model. It's seriously short-sighted to expose your database as your model, and expect nothing to go wrong. &amp;#x200B; The article proclaims that with a GraphQL implementation you don't have to worry about versioning. This is also completely wrong, what if a field type is removed or changes to a complex value, you think nothing will go wrong on the FE? 
I don't like GraphQL, I understand the use case but it's yet another thing build by Facebook that needs hundreds of layers on top to make it work because that's what they do. It's the very definition of over-engineering.
&gt; Well the idea here is to make changes to front-end be as much independent from back-end changes as possible. GraphQL definitely allows for better iteration speeds ( with some trade-offs obviously ). &gt; &gt; But you can't, the data it still sourced on the server and whoever is in charge decides what requests you can and cannot make. Sure, it kind of make querying more flexible, but you're still limited by the entities at your disposal, and let's be frank you're not going to require directly some aggregated results (for instance) because there is a lot of things graph-ql does not support. 
I seriously hate these type of articles. I am a fan of GraphQL, but most of the "REST is crap, GraphQL is the best" arguments are annoying and just completely wrong: 1. "Get rid of over and under fetching data" - any decent REST API will allow sparse field-sets and related inclusions. We use a PHP library called [smokescreen](https://packagist.org/packages/rexlabs/smokescreen) to easily handle these concerns. 2. "Awesome Schema and Type system" - yes we can use [JSON Schema](https://json-schema.org/). 3. "Better API versioning" - article says you don't need versioning and nothing ever goes wrong ... oh until you change an entity, change the type of a field, move scalars to complex types - then your FE breaks with no warning. You can build evolutionary api's in REST or most API formats, it just takes discipline and documentation. 4. "Improved API insights" - this has nothing to do with GraphQL and is applicable to any framework where you monitor requests. 5. "Easy Pagination" - again, nothing specific to GraphQL. 6. "Schema stitching/composition" - same as 1. it's fairly trivial to handle entity stitching/inclusions 7. "Great OSS community" - agree, but true for any popular API architecture. I think GraphQL is nice, but I also like REST. I think most people that switch to GraphQL write articles like this to convince themselves they've made the right choice.
Correct me if I’m wrong, but it sounds like you’re looking for the best place to store an authorization token in the web browser. If so, you have a couple of options: Use sessionStorage if you intend for users to be logged out upon completing their browsing session; or Use localStorage or IndexedDB if you intend for user sessions to persist across multiple browser sessions, though IndexedDB is probably overkill unless you’re also storing large amounts of data client-side. In either case you’ll be using JS to store your tokens in the web browser, and neither option requires a backend DB server. As with most things related to client-side JS, Mozilla has some [excellent documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) to help you get started. Good luck!
In any case, it looks nice. Keep going! 
My exact reaction to a McIntosh in 1989. It eventually caught on though.
Interested in functional JS? Poke through Ramda, lodash, and Immer
But React is very definition of under engineering. It does two things to perfection and that's it. Everything else is up to you to pile on top of it. Gives you choice but you need to be knowledgeable and experiences to make good decisions. GraphQL is much more complex than React. Apollo isn't needed at all but it makes things simple as long as their way works for you (90% of cases). ORM makes sense for GraphQL because everything is conditional so you need models and automated ways to query or modify parts requested by the client. You don't want to write that by hand if you can avoid it.
Thank you for making this public. I found it in a totally roundabout way and I've been struggling with a player on my own for a while, now. Esp since I taught myself HTML5 and CSS3 in about 2 mths and just started doing stuff on my own. I will study this as a guide on how to make the thing work on more than one song so I can showcase my material. :)
I'd start with a spreadsheet. 
I have a spreadsheet. 
Npm gets the modules, but presumes you don't need to bundle them all up into a single file because npm is built with node in mind. Webpack will look at your file structure, pull in all the dependancies (css/scss files, js/ts files, libraries etc. And then output them into file structure you specify, usually one of each file type. Webpack uses loaders, which can run tasks on your files before they get added to the bundle, Babel is used for taking new, flashy, es6+ syntax and turning it into old, reliable es5 syntax in your bundle. The code runs exactly the same, but will now be supported in older browsers. You can also run a sass loader that will process down your css. Keep in mind that babel does not polyfill. So methods, such as array.find may not be available without a polyfill. The downside to webpack is the ery complicated config. If you aren't supporting ie11 or opera mini, most of es6+ is supported out of the box. You can check caniuse for most features. I believe the charts are also right on the MDN pages as well. 
All the best for your efforts :)
There actually isn't a web browser, I'm doing everything server-side in node. My bot is essentially acting as middleware between a 3rd party database and a Slack channel. So the flow is: Bot starts up in slack, generates its access token with the database, User in Slack pings the bot "@slackbot somecommand", the bot then sends a get or post request to the database using the access token, formats the response and posts the answer back in the slack channel. When the bot sends the request, it needs to authenticate with the database via an oauth token. I have a service account that the bot will use, so the username/password credentials will be the same every time. All I'm struggling with is how to store the access token I get from the initial token generation, and how to figure out when to send a refresh token, store the subsequent access token and so on. 
I am still waiting for some exhaustive resource on how to properly implement a complex JS server. I have seen a hunred tutorials demonstrating how to do graphQL TODO list, but very little on anything more complicated. How do you respond to a complex request without making your database melt? How do you go about serving subscriptions?... I've experimented with [Prisma](https://www.prisma.io/), but that feels like walking a tightrope. As long your database schema matches your API schema exactly, everything is trivial. But I dread the day when the API requires a significantly different shape of data than the database has...
[NestJS](http://nestjs.com) is my favorite. It does use TypeScript though. And Express is still popular; it is pretty much the de facto backend framework these days. NestJS builds on top of Express. 
Jesus this quirky, immature writing style that frontend engineers tend to use for their technical blog posts is extremely cringey 
??? How are newlines in imports a bad thing? Have you never had to review a diff, reorder imports, or quickly add/remove them?
I’m a huge fan of Express.js. Easy to implement and it plays well with other technologies.
I don't want to create an account to test it out. Skipped it, sorry.
Well, when your playing and you visit the shop, then go back to try and keep playing it takes you to the login screen. When you try and log in again you get a message saying "You are already logged in". ¯\\\\\\\_(ツ)\_/¯
If you want something you access in a browser and has an interactive interface then Javascript is your only reasonable choice. There are others that compile to JS but overall javascript is the best place to start for web interfaces. As for getting all of your data, it's very likely you'll need a server side language for that. There are many more options there but you might as well pick javascript also so you don't make your learning curve any bigger (you've already got a lot to learn it sounds like). Overall it is a pretty big task. The complicated parts will mostly be getting data from all the different places (especially if they don't provide an api). I would probably start by creating a web page that loads mock data (just write your own json file to load initially) and then once you're happy with your interface or part of your interface, start working on getting the data from the actual source. Good luck!
&gt; But React is very definition of under engineering. I disagree. React is an ecosystem, you buy into it suddenly there is diverse issues with the "model" that have to be solved with third party libraries. It's fine for huge teams, let's be clear, and I like React Native but come on, this isn't not under engineered.
You don't need an email or anything, literally just make up a name password and pick a colour.
Hmm not happening for me but I'll look into It!
Done! I attached the video that shows the problem. The biggest issue I think is that headers are not in sync with the body of table when you try to scroll past the scrolling area. Otherwise this library looks great and I will consider using it in surferseo.com since I wasn't really happy with react-virtualized. I'll let you know I manage to integrate it with React.
Find does not clone your object it returns the object and all objects in JavaScript are by reference. Imagine that instead of primitive objects in your array it was a list of users. It would be super weird if the find function created a new cloned instance of the user.
Makes sense. It didn’t seem logical to return a cloned object anyways, but the docs stated it in such a way that I’d think it only returns the values it found, not an actual reference to the found object (or the object itself which is a reference for that matter). Thanks for the clarification!
I heard about this library, so i guess its time to try this, thank You :)
Yeah it doesn't work on mobile... yet ;)
This isn't C. The value stored in the array is a reference to the object.
I'd say the web format is a pretty good use for this. If you're planning with working with API or spreadsheets or however you plan to use your data I'd recommend JavaScript and having Node.js as Backend 
Hei, cool idea i like it. You should fix the overflow problems, would make it look more like a game. For Adsense you have no luck, i've had webgames that just would never have enough content, a trick is (could get you perma banned from google): (if you have a big player base) is to make a forum or any content heavy site with proper sitemap and SEO then you can try to apply with the forum on a different domain. I never really had luck with google and games, so maybe you should look into other Ad providers, there are some good ones that are specifically made for games. 
That's a good idea, the ui need some work as it look a bit old school. but it's a work in progress so. Also you may find this book interesting [https://eloquentjavascript.net](https://eloquentjavascript.net) as it have good exercises at the end of each chapter. Anyway it looks promising.
you'll need to unlock the book by tweeting it. requires access to your twitter.
You could build a function that takes the input string and converts it to the format you want and compares the two. inputString.toLowerCase().replace(/_[a-z]/g, (found) =&gt; found.toUpperCase()); This would turn "foo\_bar" into "foo\_Bar".
It got stuck after the 'primitive types' question for me... Chrome Canary
It’s easier to check for an underscore that is followed by a lower case letter. If you find any like that, fail. Something like _[a-z] I guess.
Reinventing the wheel
Can't type in inputs from chrome on android
You took a valid criticism and fucked it up by being a one-upping douchebag. 
I appreciate the help, problem is I gotta make sure that everything else remains lower case So for example ABC\_Man\_Man is false and to be honest I got no idea how I do that.
It's the 'I don't know how to handle an issue' which is solved nowadays with 'let's completely change frameworks or add another layer'. Somehow it is easier than trying to fix the issue itself. 
You could do the same with any other tech, I don't see the bonus Gra0hQL provide here. 
Good idea, if I may provide a suggestion, instead of flashing green when right and red when wrong consider using some colorblind friendly colors, like blue and red. 
We haven't really touched mobile yet
Yes, there are only 5 questions there for now, I haven't put in the redirects after the question run out yet
Just wanted to let you know. 
Interesting...accessibility and thinking of others, who would have thought? Thank you
Appreciate it!
Red is problematic for red/green color blindness.
Thanks for the detailed response. Love the monster Hunter hack haha
I found a bug, if you hit question then submit. It gives you an unexpected identifier exception 
Good thing that this isn't youtube and views mean nothing :)
Considering that pretty much everyone and their mother uses js minifiers for production code, it's mind boggling that those minifiers don't have an option to remove `console.log()`'s in final code, but okay...
Have never seen a game like this before but i think it's pretty cool, would love to work on something like this. Are you purely a dev or will you be designing it yourself too? 
The first one
Very cool game! I had trouble moving the map though... the middle mouse button click/drag did not work, maybe I was doing something wrong? But overall great idea, quite a solid implementation as well, keep going!
GraphQL sounds like it can easily be abused to do DDOS attacks by making exteremely complex queries. Anyone ever have to deal with that situation? Do they have limits you can impose such as how many relationships can be done in one call?
The design is not repsonsive and stuff gets stuffed outside of the view needlessly.
Yes, it's not responsive yet. Do you have any thoughts about the idea?
The project is 100% me, I even drew the in game skins!
Really glad you enjoyed It! Try using shift instead of the middle mouse button - it's an alternative.
Stuck on first question \`const foo = true\` 
Thanks! I'm excited to polish it up with responsiveness, hopefully soon
Tried it on me phone... Error message has a typo, you misspelt browser... 
Ahh Sorry! Yeah it's not supposed to run on mobile, yet!
A clueless person made a medium.com post? I'm shocked.
Correct me if I'm wrong but you seem to be looking for this. String has 2 or more groups of more than one letters, the first of which much be uppercase and the rest lowercase. These groups are separated by underscores. There's nothing else in the string. If so... let format = /^[A-Z][a-z]+(_[A-Z][a-z]+)+$/; let testCases = [ "Abc_Man", "Abc_Man_Man", "_Abc_Man", "ABC_Man", "Abc_Man_man" ]; console.log(testCases.map(s =&gt; ({string: s, matches: format.test(s)}))); // true, true, false, false, false Instead of asking, though, I suggest you [learn](https://eloquentjavascript.net/09_regexp.html) about [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions). Also, probably, you'll find having some tools to [test them](https://regex101.com/) and [analyse them](https://regexr.com/) is useful.
&gt;article says you don't need versioning and nothing ever goes wrong ... oh until you change an entity, change the type of a field, move scalars to complex types - then your FE breaks with no warning. This is true but I would say there is still an advantage - it will break in an explicit way, at the boundary of your backend application, rather than in a more subtle way somewhere in your client application. Of course this is still painful, and you should really have good processes in place to avoid breaking changes (just like REST, as you say), but it's nice to know that when something slips through, your teams will be alerted. Rather than waiting for someone to simply notice the broken functionality. &amp;#x200B; You are right to say a lot of GraphQL's advantages are not unique to it, and there are libraries / projects out there which can provide similar outcomes. Of course though, it is up to you to research these things, collate them, implement them, and this all takes time too. Most of the REST based APIs I've worked on had none of these features, because it wasn't a problem until it was a problem. So I think there is an advantage to GraphQLs extremely opinionated architecture, in that you can avoid making these decisions yourself and still be fairly safe. It would be better to actually understand the reasoning behind its design of course, but not everyone is going to bother with that of course.
O_o
Semicolons are not required in JS...
So, the first question for me was "make a variable called foo that has the boolean value true." In good order, I typed: let foo = true; Clicked submit, the square flashed green... and then nothing. hmmm So I tried: var foo = true; (maybe it's ES5 only, right?) Green flashing square, nothing. I scratch my head, and click "Solution," to which it spits back: const foo = true. ಠ_ಠ 
No worries haha, it's a small thing :)
I have red/green color blindness, and in this case, that's not problematic. The problem comes when those two colors are placed together.
Well, that's one way to think of it. There are edge cases that do come up that aren't entirely uncommon. Not to say they should be required in the questions necessarily, but I seem to have run into some of those edge cases in the way the assessments are set up. The way the code is evaled, if you don't put a semicolon, it might concatenate the user code directly with other underlying code, thus causing a confusing error.
Green means you got it right! Good job. What were you expecting to happen?
Absolutely love the concept of this. It's definitely necessary in the current JS climate! &amp;#x200B; Just wanted to let you know that the input boxes aren't showing up properly in Firefox as they do in Chrome.
Sounds like a bug in your code. I’m curious what semicolon edge case do you run into? I wrote JavaScript professionally for a few years and never ran into such a case. Every time I’ve seen an example, it’s horribly written code.
Got it, I'll probably get rid of the flashy colors. A simpler indication of correct or incorrect would probably be better.
Great! Thanks for the FireFox tip.
No worries. I've also found that on any question, if I click "Solution" then "Submit", "Solution" changes to "Question", but will not change back to "Solution"
I'd love to see the image actually
[https://imgur.com/a/MROacXH](https://imgur.com/a/MROacXH)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/ki732G1.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e6ltpkk) 
^thanks ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Whoa, that's really bad. Weird how it doesn't look like that at all on my machine. I'm using Arch Linux though, what OS is that on?
It depends on the application. If you need real-time responsiveness and the ability for the server to push data, then there isn't an alternative. HTTP carries header overhead and HTTP2 server-push isn't processed by userspace code. The real difficulty is if you need synchronous send-receive requests. You have to create your own means on both client and server to track packet ordering.
good job :)
I think this one is similar to what I've run into. Imagine you have an IIFE: &amp;#x200B; const hello = 1 (() =&gt; { // do stuff })(); &amp;#x200B; You'll get an error saying that 1 is not a function. Just saying it happens, and my rule is to always put semicolons to rule out any of these edge cases.
I agree with not making it the user's fault. If you don't use semicolons, you might run into something like this: &amp;#x200B; const hello = 1 (() =&gt; { // do stuff })(); &amp;#x200B; 1 will be thought to be a function
It would be nice if you could sell a block or just remove it
I see
Uhm, $10/month? Really? Not that this is bad idea, but that price surely is... Pluralsight is $30/month and has way, way way more than 3x the amount of content that you do. You may want to re-think your pricing. 
Just the feedback I was looking for, thank you
No worries, it's really addictive! Did you base this off an existing concept? Have you got plans to make it so you can create your own room? Eg. I'd love to be able to play with some friends on the same board without other people.
I like your article. It's not a 1000 lines bullshit.
Okay fair enough. You shouldn’t need to write a self invoking anonymous function anymore though. Just use bracket scope.
In terms of accessibility, colors alone should never be used to identify information. You can use a combination of text and colors (Green light says, "Correct", red light says, "Incorrect")
If you’re talking about my file/project structure I use MVC. I’m a MERN stack developer so I think that the MVC structure makes the most sense with the set of technologies I use. 
You can't submit in chrome. It doesn't work.
Required reading on the subject: http://inimino.org/~inimino/blog/javascript_semicolons
A little more information in the README would be nice. &amp;#x200B; So, I have been needing something like this for a while. Basicly I'd like to make a 2D game based on OSM data. In that regard, how customizable is this client? &amp;#x200B; What I'd need to do is render areas and use them as images for the game so I can do it on the fly. (render the area in background then use as tile in game world). &amp;#x200B; Is your client suitable for my needs? Thanks a lot
Sweet
Excellent thoughts, thanks!
I'm on the most recent version. It flashes green then nothing happens 
Hi /u/rtg604, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/PositiveHospital, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/programmingquest, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Oh, that's just how it is right now. You got it right, so you just have to click the next question button. I've gotten that complaint before so I'll be thinking about how to improve the UX there.
REST cannot supply mutations to the API consumer. That means you HAVE to write complex, security-flaw prone, "covers every possible case" validation logic to the data model server-side. People who this has never been a problem for are usually people who have written insecure APIs.
Hi /u/SmallSoftOwl, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/luminiteNL, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/stopfollowingmeee, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Try to ask this on StackOverflow and watch your post being closed in a few seconds.
I finished your example here: [https://codesandbox.io/s/v60nqv2xl7](https://codesandbox.io/s/v60nqv2xl7)
I mean... I don't know what I was expecting. Usually there's some sort of modal or something that would pop-up with maybe a little more information. If I was correct, it would say "yes... and some other ways of doing this are x, y, and z"
Thanks! Short but sweet :D Question. Lambda = function that takes another function in as its params?
A lambda is an unnamed function. Technically, all JavaScript functions can be lambdas if you want them to be.
Literally nothing in this article other than following what the React docs say to do from step 1.
Not really. Mine doesn't have any graphics, animations or multiplayer. It's not a close comparison. But my size statement is true. 
Would you two be happy if i used a stripped down version of this example code on the Tabulator website as bit of a guide for using Tabulator with React?
ImeanthisisclearlyridiculousbecauseIthinksoandallthesestupidthingssuchaspunctuationandspecialsymbolstomakestuffreadableareherejustforfunitsnotforcedonmesowhogivesashitlmaoIcanperfectlyreadthissoshouldyoubythewayhavefunwiththatlogicitwilltakeyouveryfaritsjustmyopinionandactuallyIcanjustcallyouadumbassbecausenobodycouldreadthisfarnorwillbothertobecausethisisobnoxiousjustlikeyourownlogic
I had the game's requirements in mind and made my decisions in order to make it as performant as possible (which is why I chose preact for example). 
I'm one of the mainainers of the project. Thanks for sharing it OP and if anybody has any questions, feel free to ask! Also, help us spread the word guys by giving us a star on GitHub! Thanks!
Not exactly a problem specific to JavaScript, but definitely true.
I think this interesting because the "lambda" term is so common in other languages, but not used at all really in JavaScript even though it's such a core feature.
Lol i wont even bother reading this if that is the case
Indeed, it's one of the best features of JavaScript, that functions are data and can be passed around. Most languages have lambda tacked on. JavaScript is lambda. Just one of the reasons why I love it so much!
Looks good at first glance. I've been looking for something like this. Thanks for sharing. 
Let me know if there's anything I can do to help you start with the package.
https://www.reddit.com/r/javascript/search?q=blockchain&amp;restrict_sr=1
tl;dr 1. Don’t inline functions as props 2. Use shouldComponentUpdate and props properly
I am also going through a same doubt in my mind, being working in some company for 2 years mostly i have worked in react, angular, node. Recently i have changed my company as a UI engineer 2. I have hunger to learn more but dont know how can i get backend work in my company. &amp;#x200B;
Okay, very good to know
not mobile friendly :(
When I say foo = true; it flashes green, neat. I click "Solution", and it tells me to use const foo = true; Weird but alright. So, i click submit, and then it does this... https://imgur.com/a/skn99PP 
Start doing cocaine, it‘s more fun.
Pretty cool. You can also use lodash to do this in another slick way. const pigIds = _.map(pigs, 'id'); const patPig = _.find(pigs, {name: 'pat'});
Same here. I assumed green meant I got it right, but figured it broke when nothing else happened.
" Create an array named numbers with five elements, each element being of type number. " &amp;#x200B; `const numbers = [1,2,3,4,5]` =&gt; unexpected identifier &amp;#x200B; `const numbers = [1,2,3,4,5];` =&gt; this works
prettier's default line length is pretty low. it's 80 chars by default, which might be the reason for your new lines. it shouldn't be formatting them on new lines unless they have reached that limit, which you can also increase. 
Where are you seeing the pricing info?
These are arrow functions. They are pretty much exactly like that normal functions, except that they do not change scope of execution (the "this" value). () =&gt; {} Is equivalent to (function () {}).bind(this)
Cashing in the hype train? People have forgotten that their is a think call book that has no monthly fees.
Comparing 1) \` const ids = pigs.map(pig =&gt; pig.id); \` 2) \` const ids = pigs.map(({ id }) =&gt; id); \` I'm not a fan of destructed one - it might be a little shorter, but look at all those brackets/braces - those are not very readable. In more complex example it could be even worse.
For starters, it should have accept all 3 of these declarations (const, let, var) and not only "const" But like you said, there will be bugs and it's just a prototype so ppl should ignore that and evaluate the concept and overall implementation
I think I get it now, when it flashes green, you supposed to click next? If that's the case, I don't think that's nearly intuitive enough. I would again suggest a modal pop-up, and if it's incorrect make some suggestions. Use a regex to determine if they're missing var, let, or const. Maybe they're missing the foo. I would just check for that stuff. I'm not having the greatest day otherwise I'd add more. 
My pleasure. Its a great resource 
Thanks! We are looking forward to having you!
Here is what I don't like: **Very limited tests in beta.** \- During this stage, you should allow more of tests for testers to see, and limiting them to 10 tests ( I believe) and nagging them to login is really annoying. I believe that one way to get over this, is to allow the users to do their tests and saving their progress in the local storage, and at the end, for example 20 tests done, you can ask them to login and save their progress on the account. You can get the inspiration for this from Khans academy. **Pages are not responsive.** This is not related to tests themselves, but it influences UX greatly. I understand that this is too early to talk about (or is it?!), but still... **Price is ok, but** consider giving the user some discount on some basis, annual or by reference link. Since you are new on the market, and the market already has something to offer, making good business plan should be essential thing, something to brainstorm about. **Algorithm section.** \- The most important aspect of programming is not presented. In my opinion, the sites that contain only "the syntax" part of the language, ie, documentation for language, is not helpful at all, **for me.** I guess, what I try to say is that algorithm section should be very next on the TODO list. You can advertise that by: Questions that Google or Amazon are asking for their future employees. I can talk about this day in and day out, and I think that you get it. &amp;#x200B;
Hi /u/pdubs94, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Not really is a project that is simple and easy to see what are the fundamentals of deepzoom.This project has educational porpoise. 
What use is there for this other than losing your monies in a pyramid scheme?
Awesome. I always find it fun to pick a constraint and work within it. Whether it’s a performance budget or something crazier like “only angled lines” or “only triangles” in a design. Not because you have to, but because there’s a certain creativity that comes from pulling things off inside of constraints. Good work! Seems like a fun project. 
I agree. I think it makes more sense to just have a "submit" button that: * Flashes Green and moves on if correct * Flashes Red and stays on the same screen if incorrect
 lol, no, but thank you
:(
When typing on mobile, by default it want's to input the first letter in upper case. `Var` is not valid identifier, `var` is. Not sure how to fix that though, maybe some css magic? On a sidenote, you might want to consider how the site feels and looks like on mobile. Currently it's very frustrating to use on mobile.
What does it mean it works? `Other.catch(e)` resolves the promise with a promise that rejects, so it's the same as it were throwing back again. Using `return Promise.resolve(example)` is not even doing anything, because flow is broken out of the rejection.
OP, please ignore the commenters trying to shoot down your price point as though $10/month is outrageous. No, your idea isn't Pluralsight but you're offering a focused solution. The people who would be interested in your product are trying to make a career jump worth tens of thousands of dollars a year, you're real customers wouldn't flinch at $10/month. I would also point out that people regularly pay $10 on Udemy courses that are focused on one thing, so this isn't unheard of at all (once the content is more fleshed out). &amp;#x200B; Don't low ball yourself. Developers are really bad at attacking other devs who are trying to earn a living from their work, but the truth is you should price based on the value you're adding. As long as your promotional content ties things back to that value (e.g., a high(er) paying job) you'll be fine.
Question 1: "Create a variable named foo that has the boolean value true." &gt; let foo = true WRONG Erm.. ok? &gt; var foo = true WRONG ... Looks at solution... &lt; const foo = true Oh. The person that wrote this is an idiot.
Holy runtime performance
Exactly. Being native it can be natively optimised. 
You could use lodash, but the point of lodash was always to fill in the deficiencies of ES5. With ES6, you can write faster code and save yourself a library.
I deleted and rewrote this comment a few times trying not to sound like a condescending jerk because it’s truly not my intent. The term lambda comes up in relation to JavaScript at my office a lot. And I see it a lot at JS conferences and in blog posts. Not sure why you’re not seeing it often. 
TL;DR : they learned react basics.
&gt;Seems like a huge burdensome hack to get better file searching in your editor I would say using index.js is a burdensome hack to get encapsulation. Ryan Dahl mentions it specifically in his ['10 Things I Regret About Node.js' talk.](https://www.youtube.com/watch?v=M3BM9TB-8yA) and how package.json made it unnecessary. &gt; and don't really struggle to open any particular file. It depends on how you navigate projects, It's an extreme pain in the ass for many people, me included. 
Isn't const still considered a variable? I know it cannot be changed (unless it is a class, you can change a property), but I still have heard people call it a variable. 
Hi kenman, That is surprising to me. 13 days ago I posted another of our blog posts in the engineering blog about mentorship (https://www.reddit.com/r/javascript/comments/9f9czv/how_your_company_can_support_junior_engineers/) that didn't have any Javascript related content. That post got 157 upvotes and was the top post that day. However, you are now telling me that no non-JavaScript content is not allowed, I hope you understand my confusion.
The people here are mentioning something called 'responsive feedback', where you expect a response in reaction to submitting the answer. Yes, it flashes green but that may not be enough of an indicator that the question was answered correctly. Adding a message saying 'success' or moving onto the next question is a much better indicator of the result.
In one of the function questions it says to make a function that returns 10. Posting the exact solution text into the question still says its wrong. `const basicNumber = () =&gt; { return 10; };`
That sounds more like a private beta to a couple people not announcing it on the javascript subreddit.
Nice article!
My recommendation to anyone who wants to publish modules is to create a namespace. It can either be based on your own user or some "organization". I never have to think about my NPM module name or come up with something gimmicky. If I want to create a logging module, All I need to do is call it @kwiwk/log Avoid the headache altogether.
This is a function called `f` function f(x) { return x*2; } // Or, if you prefer it: let f = (x) =&gt; 2*x; // It's the same Now, this is another function. I'm going to call it `catch`, but it's not at all related to your `catch`. function catch(fn) { let someData = getSomeData(); fn(someData); } The function `catch` receives as argument some other function which I've called `fn`. It (`catch`) does some operations and then calls `fn` passing some data that it has produced (how it does that or what the `getSomeData()` funciton does is unimportant). Now, I can call... catch(f); I am passing function `f` into function `catch`, and `catch` will, as we've explained above call `f` passing some data (`someData`). Now, `f` will receive that data and refer to it as `x`. `catch` does **not** know or care at all how `f` calls its arguments. They are, _formal arguments_. Their names only matter to `f` and, to a certain extent (see note below) to no one else. When you call `f` you do not need to know how `f` calls its arguments. You can call `f(2)`. You only need to know that `f` takes one argument. And what's more, **you** know it. That is, it is **you** deciding that `f` takes one argument. Of course, in your particular case it's know exactly _you_ deciding this, but the fact that the specification for Promises states that the function you pass to `catch` will be called passing one argument. So, the answer to _"How does it know...?"_ is: It doesn't, and it doesn't matter. Nobody _needs_ to know the name or the arguments of a function. ---- Note: The argument names _do_ matter outside the function, but only as _documentation_, as a declaration of intent. That is, we write `function select(element, context) { ... }` so that those names give you a hint about what a function expects to receive. If you wrote `function select(askjdh, dsjkfh) { ... }` you would be continuously going over to the actual documentation to read what arguments you need to pass. But it is only in this sense that others may care about the names of those arguments. There is no other restriction or relation regarding those names. Additional note: This is a pretty basic question, and it's really unrelated to promises or modules. Also, IMHO it would be better if you asked this sort of question in /r/LearnJavascript.
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [If you're looking to learn javascript, a professor at my college made a really cool free to use online textbooks that includes: exercises, clickable links, and lots of example files.](http://profsamscott.com/javascript/) | [4 comments](https://np.reddit.com/r/learnjavascript/comments/7xd7x0/if_youre_looking_to_learn_javascript_a_professor/) \#2: [To everyone currently enrolled at a college: don't forget to get your Github student developer pack. It contains a free domain name, digital ocean credit and much more.](https://education.github.com/pack) | [13 comments](https://np.reddit.com/r/learnjavascript/comments/8b81be/to_everyone_currently_enrolled_at_a_college_dont/) \#3: [Algorithms and data structures implemented on JavaScript with explanations, examples and links to related YouTube learning videos](https://github.com/trekhleb/javascript-algorithms) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/8l09o2/algorithms_and_data_structures_implemented_on/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
I'm assuming you are doing `let e = require('someFile.js');` at some point. But anyway, the difference between doing `e` instead `e =&gt; SomeFunction(e)` is that `e` on the first example is just a variable that evaluates to whatever value it's holding while the second example is an arrow function in which `e` is merely a function parameter.
This highly depends on the server you are running the script on. In your case your server doest not allow directory listing. Also you couldn't use that listing in javascript either way as it is not parsable. You need to tell your server to list the directory in a plain text/xml or json format. 
I wonder, are you using Windows? There are some copy paste issues most likely because of line endings on Windows that haven't been sorted out yet
Amazing thoughts to ponder while validating the business model, I really appreciate it
Yep, there will be a lot of effort going into responsive design soon
yes the navigation between questions is not intuitive at all. And the Submit button sometimes doesn't respond, requiring a second more precise click. Very annoying.
I'm sorry you're not having a good day. You made my day better with your comments though!
Anyone got a small JS task or something I can work on? Tough family times, got burned in r/forhire for a few days of work.
Awesome comments, thank you!
Here's a sneak peek of /r/forhire using the [top posts](https://np.reddit.com/r/forhire/top/?sort=top&amp;t=year) of the year! \#1: [\[For Hire\] I Will Sit In Your Building and Do Nothing All Night](https://np.reddit.com/r/forhire/comments/8bev85/for_hire_i_will_sit_in_your_building_and_do/) \#2: [\[META\] Start requiring \[HIRING\] posts to include an hourly budget or salary.](https://np.reddit.com/r/forhire/comments/9brw63/meta_start_requiring_hiring_posts_to_include_an/) \#3: [\[META\] Do not hire bmnyblues](https://np.reddit.com/r/forhire/comments/7t5nmo/meta_do_not_hire_bmnyblues/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Haha, yep
There's a bug when clicking submit while focused on the solution
Is there something wrong with announcing it on the JavaScript subreddit? This has been the most worthwhile, beneficial feedback session I could have hoped for.
I am using windows. I typed out the same answer before I checked the solution and it was also wrong. I didn't spend much time trying to figure it out though so it could be that. Either way good work so far, it looks great.
I hope I wasn't misleading, I tried to explain in the original post that it's a work in progress and I want to gather feedback and validate the idea. Now I know, time to build this thing out
Thanks, I'll get those bugs worked out!
I think generally, a 403 means: 1. You don't have access to the resource you're trying to open (the mockups folder in this case). 2. You tried to authenticate but it failed. 3. You didn't try to authenticate.
It looks like other people are helping you out, but you should know that non-Error errors have really awkward behavior around stack traces (or a lack thereof) and are a pretty bad look. Do something like `throw new Error('OH SNAP')` instead, or if you really want the extra parameter, instantiate then assign attr then throw. There are other issues with this code - returning a promise inside an async function, passing an undefined variable to .catch, not actually ever calling StartOfExample... but the error thing is important.
I absolutely love helping people. I wanted to build a site that allowed people to learn to use Node.JS straight out of the box, to build a few apps, with almost no packages. It's not as bad as some have been led to leave. Express is jam-packed with features, but if all one needs is a web server, it's a waste of bandwidth - big-time. https://pirple.com sort of beat me to it, but is doing it a bit differently than I would. I'd have a lot more interaction, on my version. Thanks, James
[https://stackoverflow.com/a/36816541](https://stackoverflow.com/a/36816541) ?
Losing other peoples monies in scams
Warning: Not free. Self promo for paid material
I don't think you can consider a constant a variable because it cannot vary, although it *actually* means it cannot be reassigned, which is why you can still mutate an object assigned to a constant
You might want to consider a mobile-first design approach because it's easier to add additional information and width than subtract it. I ran your website full-screen on a 15" Macbook and still get horizontal scrollbars.
Eh, s/he's requesting feedback, including on pricing, not really trying to sell the product 
I don't think you should even advertise a fee until you get the usability aspect worked out. I understand that it's hard to build something on your own time and put a lot of effort into it before seeing a return, but that's how it works. That's what you gotta do. 
Yeah only const primitives can't be mutated. Whew JavaScript
I indent with semi-colons
Namespaces are useful when you have lost of packages that you use in your main piece of software. Angular is a good example of this. I haven't personally done it, since I don't have many projects on NPM, but they are quite handy.
I think it's possibly more of a computer science term. JavaScript it's a broad church and people move in different circles. . 
Hey there, it would be cool to see explanations for answers that require them. On question two I didn't know the answer and wanted to learn what the answer was
Functions that either take or return functions are called Higher Order Functions. This is made possible because JS has first-class functions, they can be used as any other variable.
Is that still the point of Lodash? There's a lot of utility functions in there not covered by ES5+
Hi /u/BeerInTheRear, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
!RemindMe 6 months "this might be ready now"
I understand what a variable is. Most of my experience and my CS degree was Java/Spring. I just notice many people in a lot of tutorials still consider const variable and I wasn't sure why. That is why a proposed my statement as a question. So, I was thinking maybe that is why you could still type const in this tutorial and get the answer correct even though it is asking to make a variable. 
Are you saying it is faster or slower?
It is self promo for paid material, though there will be some form of free content. Feedback has been amazing and is helping guide the design, I hope that's okay
Try November 1st, 2018
Sounds good, I'll most likely be flushing out the solutions
I like rxjs but can in no way justify using it professionally. The additional complexity and learning curve completely overshadow the benefits 
You should maybe point that out in the article. As it stands the usefulness is not evident. This response however makes it clear.
[https://raw.githubusercontent.com/d3x0r/JSOX/master/JSOX-Value.GIF](https://raw.githubusercontent.com/d3x0r/JSOX/master/JSOX-Value.GIF)
Is more than just that. You can't "rebind" an arrow function. [ An ArrowFunction does not define local bindings for arguments, super, this, or new.target. Any reference to arguments, super, this, or new.target within an ArrowFunction must resolve to a binding in a lexically enclosing environment.](http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions-runtime-semantics-evaluation) 
I use RxJS/Redux Observables on every project. It becomes fairly intuitive once you understand the basic concepts. The learning curve may be a bit steeper for less experienced developers obviously. Also, I would pick Redux Observables over Redux Saga 10 times out of 10. 
Yes, I agree with you. CONST should not be the right answer. 
Yes. Most of the web developers (I believe) are not CS people and using convention thrown from youtube tutorials and bloggers. I mean, it gets the job done, the dog will still be a dog even if you rename it to a cat, but still, there needs to be a time spent on explaining those keywords in the language, and what do they mean actually. Not just "let's get to the code" part.
I have to be a US resident to learn JavaScript now?
It is super nice when you have to deal with complex async tasks. Websockets or other protocol-y stuff where you need to deal with data as it comes instead of querying it when needed. Promises are nice for the later case, since you expect a query to finish, not to keep emitting over time. If you ever had to use `setInterval`, then an Observable would have dealt with a lot of issues that come from those. Dealing with events from the UI is also super nice with observables. You *observe* an input/movement/etc, and then you tell your code to *react* to it(I hate using react here but I can't think of a better verb). Pipes such as `share`, `tap` and `map` are particularly useful IMO. IIRC Angular 2+ is powered by observables, and you can use them to declaratively determine what to show on your screen(also using their `AsyncPipe`).
Only thing I would add is that Observables are not asynchronous by default. Once subscribed to, they execute synchronously until an async operation happens, unlike Promises which are always asynchronous.
Typically, functions in Lodash end up in the language at some point. At that point we can stop using the library for those specific functions. It's like Q, or jQuery.ajax. we can just use Promise or Fetch now.
Honestly, once you learn them (yeah learning curve - I know), I find them much more intuitive and powerful than Promises.
He looks like he’s gonna fuck you up if you don’t fix those CI failures https://i.imgur.com/O0REbdp.jpg
I use TravisBuddy and I can confirm! But the developer is open to feedback and has implemented changes based on my concerns and issues.
P5 is good, but recently their website was unavailable. Not sure if it's up again. I like fabric.js, though my use case was for drawing a bunch of svg shapes to a large canvas and interacting with them.
&amp;#x200B;
Ballsy to try to sell this for $ 25 a pop. Let me know if that works for you, no salt. I'd love to program something worth peoples money, so if people actually buy this, I'd love to know if it's that easy.
Seems to work just fine when running it in jsbin on mobile. http://jsbin.com/xavemazagu/edit?output Is there any specific error you are getting?
P5.js site is up. Just checked. Fabric looks interesting and it supports images. I'll take a look at that is well. thanks.
 # OpenCart Multi Vendor Marketplace by MultiMerch
The javascript has a tendency to over engineer code blocks into blobs of unreadable closures. I personally feel the second one is much more readable.
If you run out through Babel it will be the same TBH. 
second one makes more sense... just from using it. would you rather type this.getAll().files() or this.getAllFiles() completely unrelated, but your lack of types is disturbing. if everything is `any` there is no reason to be using types.
&gt; "Without looking at my code and with only a general minimal description of something I'm doing and without telling you how "it fails", take a wild guess, people: What is happening here?"
Quantum programming.
Exactly, you can't rebind it because it transpiles to a `var _this = this` in the closure, so rebinding this has no effect because the transpiled code is now using _this in place of this. This is how it preserves the original context and prevents rebinding. 
Just use Webpack code splitting with `import()` functions. So have a single entry point that gets loaded on all routes, which looks like, if(document.body.classList.contains('somepage')) { import('./lazyload-somepage.js').then(module =&gt; { module.default(someArgs); }); } Conventional Webpack code splitting will do the job for you, you just need to decide how you're going to trigger it (a class on body, or a route, etc.)
Hey Federico , what u doing bud
Wouldn’t this cause another JavaScript file to be loaded after the page has loaded resulting in a slower load times? Splitting this files with webpack with multiple entry points would yield one file per page. Nothing dynamic is needed. 
**Disclaimer/Note:** *I am one of the maintainers of the project and we have recently transferred to a GitHub organization. While this has been posted in the past, I am reposting to increase visibility of a high-quality learning resource (in my opinion), due to the fact that old links to the repository might break unexpectedly.*
So you mean I should draw directly to the canvas instead of creating sprites and using those? Will that be performant enough for game though? I thought it would be better to have a seperate canvas thats not shown but just used to render the map so I can extract the map as a sprite and draw it into the game canvas that is visible. This way, since the player would be moving inside the world, I wouldnt have to redraw the map when the player moves but simply move a sprite. That was my line of thought. 
If the budget allows for it, I'd go with Heroku. I too like the peace of mind of not being in charge of server security. 
It's the opposite though, You end up with significant reductions in complexity. 
Or, you know, use a modern build system
My totally random guess would be that you're executing something inside of a console.log() that is actually needed.
Java is not the same programming language as JavaScript. Please refer to /r/java.
Java is not the same programming language as JavaScript. Please refer to /r/java.
Looks like it’s because you specify data type:JSON - this tells jQuery you are expecting the server to return JSON data. If you server doesn’t return JSON along with the response (or null or {} ) then jQuery will reject the response (even if the return code is 200) you can look here under datatype JSON for more info http://api.jquery.com/jQuery.ajax/
Oh ok, I tried instead of JSON to put in **statusCode doesnt seem to work. Any example u can provide?**
Language/syntax doesn't seem to be a big problem space right now, so my first question is, why does this exist? What motivation would anyone have to use it over existing standardized languages?
This is easier in the short term but in the medium and long term it will slow down development because issues that happen on the remote server are much harder to debug and you need to pay to get good support.
It's not fair to compare Promises with Observables because they're different in a significant way; Promises on their own cannot be used to create asynchronous data streams. Promises resolve once whereas Observables can resolve multiple times. &amp;#x200B; The closest equivalent for Observables would be async generators (generators which return multiple promises using async/await). Aync generators have the ability to resolve multiple times asynchronously so they can also be used for streams and other use cases where Observables would normally be used.
You don’t even have to put a dataType. JQuery will then try to infer it. A good practice would be to put a dataType that you expect your server to return. Then have your server return that type for every request error or not
&gt;Oh ok, I tried instead of JSON to put in statusCode doesnt seem to work. Well of course, as statusCode isn't listed as an available option for the "datatype" parameter in the documentation that the first commenter linked. &gt;EDIT: Changing it to TEXT worked, but is that really best practice? It depends on what kind of data `Request.CreateResponse(HttpStatusCode.OK)` from your C# API returns. If you set the datatype as JSON in the Ajax request, then jquery will try to format the response as a Javascript object. If the response is a simple string, then that formatting will fail and it goes down the rejection path. If you want to use JSON as the datatype, then your server needs to send back JSON (or {} or null) as mentioned by the first commenter. 
I have to add one thing: even if you var the variable it will still throw an error, but `undefined is not a function` instead. Only the variable gets hoisted, **not** its value. In order to execute the function you need to do it this way: ``` testtest() function testtest () { console.log('hi') } ``` Only this will log "hi".
It's what one would call an alias. Every might not always be straightforward for everyone.
Damn, no excuse left, I finally got to make time to experiment with Elm.
It's meant as a learning resource, nobody forces you to copy that code. You can see that "every" is indeed very close in meaning to "all" and not add the overhead, just use every.
Any company needs to hire the people they actually need. Any other simplification or generalization like the one in the linked blog post, will end being applicable only for certain cases and failing on the rest. So... _some_ start-ups and _some_ non-start-ups in some circumstances need to hire people who aren't proven. Others or in other circumstances, they need to hire people who are. Which is obvious and doesn't lend itself to writing much of a blog post, of course.
Don't forget to use GSAP to animate the like button. 
It's due to that.
 ## Second part &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; This is my second blog post in the trilogy of posts in which I describe my experience, problems, solutions to them, so on and so forth. For obvious reasons this blog post and the next one won't be as long, so I hope anyone reading this will find it less time-consuming to read. ## "First week" impressions &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; During the development of the second application I realized that even though the task lying before was more difficult and because of that, it would take longer to make, that wasn't the case. After using TypeScript for two weeks by that time, even though at first, the syntax of it was weird and at times confusing, I really quickly got used to it. The framework also started making a lot more sense, and widgets were memorized rather easily, even if I used them only a few times. All of that allowed me to make fewer mistakes/errors, or be able to find them and resolve them quicker than the last time, which also accounts for this blog post to be not long. ## Next application &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; The next thing I was told to make was a Schedule planner by modifying the To-Do application described in the previous blog post. ## Modifications and problems &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This section will be similar to "Errors" section in the previous blog post. The only difference here is that I will also explain modifications to the code I had to make to achieve desired results. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;As it was in previous blog, here is the [Schedule planner app](https://github.com/erykmol/TODO-app/blob/Schedule-planner/src/app.tsx). ### Modifications &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The first modification I did was to expand task items (these are the `Checkbox` and `Button` widgets) into event items by adding Date, Time, Duration and Description items. my approach to it was to first upon inputting the title of an event, the Button with its name would be created. Upon creation, a `Page` ( it's a container that is presented as a page ) widget would also be created in which the user would input all information needed about the event. In Tabris.js `ui.contentView` doesn't support `Page` widget, so adding a page onto it whenever the user pressed an event button wasn't possible. The widget that has support for `Pages` is `NavigationView` (which is a widget that displays either singular `Page` widget, or a whole stack of them. It also adds a toolbar that allows the user to go back to the earlier `Page`). Unfortunately `NavigationView` only enables `Page`, `Action`, `SearchAction` widgets to be appended to it. So first, I had to create a `Page` that would work as the main menu and would contain `TextInput` for event titles and event Buttons. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Next feature I added was the function that would check Date and Time items with actual date and time. If a particular event was in progress, then the function would highlight the event in the main [page](http://docs.tabris.com/latest/api/Page). I did the checking part by taking a date, and time items in these `DD.MM.YYYY`,`HH:MM` formats respectively and using `split` function on them to compare them with the current date (look [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate) if you want to know how to get current day, month, year etc.). In this function, I also included two more features: deleting an old event and displaying the next upcoming event. Deleting as you might imagine wasn't hard to write because it involved checking dates and times, as in checking events in progress. With displaying next event I just added `if` statement that was checking if event date and current date were apart few days. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Last feature I had to make was a function for checking if any events that are inputted are overlapping with already existing ones. So again I used Date and time items but only when there was some other event already in the application. Because this function is in the editing function of this application then I also made it save the event if everything is okay. ### Errors and problems &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;To be honest I can't remember the situation in which I stumbled on this error, but what I wanted to do was to pass a primitive(`string`,`number` etc.) by reference, but I wasn't able to do it. That's because when you try to pass a variable to a function, it's not that exact variable that is passed but a copy of it is created and this copy is used by a function. To counter that I created a model (model is a part of MVC, [here](https://medium.com/@patrickackerman/classic-front-end-mvc-with-vanilla-javascript-7eee550bc702) you'll find a proper explanation): ```ts class Event { public date: string; public time: string; public duration: string; public description: string; public text: string; } ``` That `Event` class is a model that holds all information (including that variable) about an event and then I'm able to pass an instance of this model by reference. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;When I was trying to use [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object (it's an object that keeps data in key-value pairs) to be able to hold event information (in a `Event` class instance) and corresponding Button widget to that information, I had a problem with declaring that object, and because the `Map` is a generic type ([here](https://www.typescriptlang.org/docs/handbook/generics.html) is the entire explanation of what generics are). It means that for me to map `Event` class instances with `Button` instances in a type-safe way, a proper declaration would be `const eventMap = new Map&lt;Event,Button&gt;();` (&lt;Event,Button&gt; === &lt;key,value&gt;) instead of `const eventMap = new Map();`. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;At first when doing the feature concerning display of which event is coming next, I wanted to do it in [Popover](http://docs.tabris.com/latest/api/Popover.html#popover) widget, yet I was unable to use it because compiler was showing me that in `Popover` widget `contentView` property doesn't exist. This is a framework bug, and I've made an issue in the GitHub [here](https://github.com/eclipsesource/tabris-js/issues/1718) if you would like to look at it. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [erykmol/TODO-app/.../**app.tsx** (Schedule-planner → 75be859)](https://github.com/erykmol/TODO-app/blob/75be8595c23e5f38ab3b4613a31606785f72b94b/src/app.tsx) ---- 
 ## The end of journey &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This is the last blog post in the series regarding my experience with Tabris.js from an inexperienced person standpoint. This blog post will have a similar to the last one, in regards to the section about modifications and problems I encountered, but will mostly revolve around one widget. ## Last application &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Last application I was developing was a Companion app, that took one specific multi-day event and displayed its non-removable schedule with a map related to the event. ## Modifications and problems &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Because this application was meant to be made around only one event, I was able to just throw out half of the code from previous application. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Again, here is [Companion-app](https://github.com/erykmol/TODO-app/blob/Companion-app/src/app.tsx) for code reference. ### Modifications &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Second modification I did was to contain the entire schedule of an event in a JSON format in a variable and then parse it (parsing is done to be able to work on an object instead of a string). &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Also, because the schedule was longer than the screen of my phone, I had to change the widget in which all text would be displayed in. At first I was trying to use `ScrollView` widget ([this](http://docs.tabris.com/latest/api/ScrollView.html#scrollview) widget allows items displayed to flow beyond the screen and gives users the ability to scroll to those objects that are beyond the screen), but when I tried implementing the button that upon pressing would scroll up to the topmost position, I found that the `offsetY` property that would allow me to make the screen scroll dynamically instead of setting a static value, always returned `undefined`, or if you cast it as number, then `NaN`. This is a bug concerning the framework, I've created a more detailed issue [here](https://github.com/eclipsesource/tabris-js/issues/1722). This left me with [`CollectionView`](http://docs.tabris.com/latest/api/CollectionView.html). &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Because its structure and way of implementing is really different in relation to other widgets, I'll try giving a clearer use example and explain a `CollectionView` widget and proper way of using it in more detail based on it. `CollectionView` is a widget that displays a list of items, through which you can scroll. These items are kept in what are called `cells`, which are widgets that keep proper display widgets inside. You can think of it as a container to which these widgets are attached to before being presented in `CollectionView` and are created by its `createCell` method. In real life example, `createCell` and `cell` itself look like this: ```ts createCell: () =&gt; { const cell = new Composite();// container is created new TextView({ // widget properties }).appendTo(cell);// widget is created and put inside a container new ImageView({ // widget properties }).appendTo(cell); return cell; } ``` `Cells` only hold widgets that display data(in our case `TextView` and `ImageView`). What takes care of populating these widgets (in other words putting data that needs to be displayed like a path to the image or text) is `updateCell` method. It's important to remember what `updateCell` is supposed to do is to only put data into widgets that are in `cell`. Here is how it would look like: ```ts updateCell: (cell, index) =&gt; { cell.apply({ TextView: {text: model[index]}, ImageView: {image: model[index]} }); } ``` You can see that `updateCell` only takes data from `model` and puts it in widgets contained in `cells`, which makes `CollectionView` suitable only for presenting information on the screen, which should be their only function which is why we need to use [MVC](https://medium.com/@patrickackerman/classic-front-end-mvc-with-vanilla-javascript-7eee550bc702)(Model-View-Controller), and the `CollectionView` will make up the "View" part of it. A "Controller" part of MVC pattern in our case will be a function that will take our schedule(which is a JSON object) and rewrite it to an array of strings. This array of strings will be our "Model" part of MVC and it'll be displayed by the `CollectionView`(View part). Now the lengthy code example: ```ts const foo = (...): string[] =&gt; { // Controller function // that rewrites schedule // and returns a model as an array of strings } let model = foo(); const collectionView = new CollectionView({ // some code itemCount: model.length// itemCount is the number of cells for CollectionView to display createCell: () =&gt; { const cell = new Composite(); new TextView({ // some code }).appendTo(cell); new ImageView({ // some code }).appendTo(cell); return cell; }, updateCell: (cell, index) =&gt; { cell.apply({ TextView: {text: model[index]},// updates widgets property that is displayed ImageView: {image: model[index]} }); } }).appendTo(ui.contentView); ``` To recap, if you want to change something displayed, you only change the "Controller" that produces a "Model" which holds data. This "Model" might be different than the last one, but it shouldn't do anything, nor should the "View" except for displaying data. ### Problems &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;After making a feature with `RadioButtons` so that a user could display different days if he wanted, and adding a button for displaying a map(this is why there is an `ImageView` in `cell`), whenever I pressed the map button when all days of the weekend were displayed, a blank gap showed between event days. A colleague checked and on Android, this problem doesn't occur so it again must be the iOS layout problem. &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Last more notable problem I encountered was with refreshing collection view whenever someone chose to display one of the event days. I tried doing it by first deleting items with `CollectionView.remove()` and then displaying only one that is needed, so for example if the user wanted to see the first day, then after deleting `cells` from `CollectionView` I would use `CollectionView.load(0)` to display only that day. Instead, it resulted in the application not showing any and all days. That's because `load` method doesn't recreate `cells`, but only updates them for a new "Model". After learning the proper way to use `CollectionView` I started using my "Controller" function(`foo`) produce "Model" that contained only the day/s I needed. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [erykmol/TODO-app/.../**app.tsx** (Companion-app → 393decd)](https://github.com/erykmol/TODO-app/blob/393decd2943a8c94a77836302a63a3c2d81f70f5/src/app.tsx) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e6o2bdp.)
I bet you're a lot of fun to work with. 
Search for "recommendation engine". That should get you going in the right direction. ML is not necessary for this, but your stack might change to something like the GRAND stack.
For `countOcurrences()` I'd rather apply a `filter` and get the `length` of the resulting array instead of a `reduce`
What do I need to see for me to start experimenting with the language: * Well made, polished, easy to navigate website (a sign that the author(s) takes the project seriously). * A convincing list of features and comparisons against vanilla JS. * A bunch of examples of various degrees of complexity. These should range from brief snippets to full github repos. * Exhaustive documentation. Every feature has to be described in precise detail. Eg. if you have a "foreach" loop, you need to have a section dedicated to it, "our language has a foeach loop" is not enough. * A good getting started guide. This shoud start with a "npm init" and end with a simple working application showing off basic features of the language. For adoption for any project on my part, there are several more requirements: * Good error reporting strategy ("Syntax error on line 56." is not enough). I will not bother if I have to spend ages figuring out each little error message. * Excellent integration with the JS ecosystem. I need to be able to take advantage of all the JS libraries out there. I also need to be able to use the existing frontend stacks (React, Vue etc.). * Tooling support (if there is any more friction than using JS + VS Code + Parcel, I will not bother). Setting all this stuff up is hard work. When I've made my own language, I've spent *months* working on the documentation and examples. I don't really care about adoption tbh. If you want people to pay attention, you need a really good sales pich though. If you can't convince people in one short paragraph, you will not convince them at all.
You know what else is useless junk overhead code? Entire JavaScript engine rofl, just use Assembly and stfu.
Honestly, for those types of projects I just write ES5, maybe use some library like [Cash](https://github.com/kenwheeler/cash) or Vue from the CDN. A landing page should be as fast as possible and webpack/babel will add unnecessary kbs and lower performance a bit. On each page on the front matter I do something like this: --- js_file: something.js --- Then on my footer include it dynamically like this: &lt;script src="js/main.js"&gt;&lt;/script&gt; {% if page.js_file %} &lt;script src="js/{page.js_file}"&gt;&lt;/script&gt; {% endif %} &lt;/body&gt; &lt;/html&gt; Then I have a `deploy.sh` script that minifies the JS files before deploying to Firebase.
Doesn't Github already integrate directly with Travis now?
You could submit a PR for that. Sounds like a useful improvement.
Why?
This is the right solution
Hi /u/AnecD, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/chiorio, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Do you think this could be handy for someone that's still taking their first steps into learning JS? I've been through a few beginner tutorials and know little about how basics like arrays and functions work, still trying to get comfortable with it.
It could be very useful in learning JS, even early on. Hint: If you search for "beginner" on the website (not the repo, there's a link at the top of the repo and README), you will see a list of beginner-friendly snippets, which you can then browse. These very in difficulty and complexity, but they are targeted mostly at people with little coding experience in JS.
The only formatter that matters is prettier. Prettier wouldn't spread your import statement over multiple lines since it's smaller than 80 characters (prettiers default). The only exception could be that it sometimes respects edit hints, for instance if you intentionally spread out objects. In that case edit it in-line again and remove the last comma, then hit format.
 const shank = (arr, pos, delCount, ...elements) =&gt; arr.slice(0, pos) .concat(elements) .concat(arr.slice(pos + delCount)); /* var months = ['Jan', 'March', 'April', 'June']; const shankedMonths = shank(months, 1, 0, 'Feb'); // creates a new array by // taking months // at position "1" // deleting 0 elements // adding the elements "Feb" console.log("Months:", months, "shankedMonths", shankedMonths"); // expected output: Months ['Jan',March', 'April', 'June'] shankedMonths ['Jan', 'Feb', 'March', 'April', 'June'] const shankedMonths2 = shank(months, 2, 1, 'may', 'november') // creates a new array by // taking months // at index 2 // deleting 1 element, // adding the elements "may" and "november" console.log(shankedMonths2) // expected output ['Jan', 'March', 'may', 'november', 'June'] */ This is the exact same functionality as Array.prototype.slice, only instead of mutating the array in place, it returns a brand new array. Helpful if you're trying to avoid mutation and keeping your code functional. 
Thanks a lot!
I feel like we don't have that in the snippet list. You could send a PR if we don't, would be happy to merge it.
Ouch
AMP saved the mobile Web. We should push for something like it that isn't tied to Google. My suggestion is that new elements should be added to HTML that do what AMP does, and are guaranteed to perform well.
It's main benefit is something along the lines of enhancing organization, legibility, and the features someone could utilize in vanilla JS without as much setup- while also being easy to set up. Though, for the sake of this post, I'm asking that we take it as a hypothetical that the language is considered "liked", I'm simply looking to find peoples opinions on how I might spread the lang around.
Practice , practice and practice
I didn’t say they were a bad thing.. for that use case it makes sense but is not applicable for what I am doing. Preference is all
Forgot to mention that I was also consdering Heroku. Have you had any experience hosting with them before? 
I didn’t say they were a bad thing.. for that use case it makes sense but is not applicable for what I am doing. Preference is all
Obviously this is cool and a respectable 13k entry, but a White dev making his game’s character brown to virtue signal should be an automatic disqualification on the basis of cringe.
What would you suggest in lieu of that?
Hi /u/technoiswatchingyou, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/fig966, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/real_samuraijack, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
The changes in the ecosystem is driven by need. You should think about how your subset of javascript can solve a problem in the Javascript community. If you can market your solution in a way that resonates with members community then you *may* get adoption
Seriously, this method is so much nicer. The ability to rename destructured arguments is also incredibly useful, e.g. when calling `.sort()` on an array of objects and want to compare say the `name` properties: const objArr = [ { name: 'joe smith' }, { name: 'jane doe' } ]; objArr.sort( ({ name: aName }, { name: bName }) =&gt; { return aName &gt; bName } ); //=&gt; [{ name: 'jane doe' }, { name: 'joe smith' }]
Only small projects, nothing high demand. I love it. 
Thanks man. I just used any because I was lazy :D
https://github.com/mohsinulhaq/react-popper-tooltip 
Over the years I've started to use a mixture of the 3. I started out with just JSDoc because the Google Clojure Compiler (which is what we used to minify JS back then) could read the JSDoc type annotations and print out type errors and stuff, but now I use TypeScript for type annotations, JSDoc syntax for things TypeScript doesn't cover and Storybook for components. Back in the Google Clojure Compiler days, I would create a "Pattern Tool", which was essentially a handbook of the UI/Design system. Storybook covers that need. 
And let me guess front end engineers aren't actually software engineers?
`bifurcateBy` I think returns the results backwards. Put the falsy values in index `0` and the truthy values in index `1`. Personally I would find that to be easier to reason with. And instead of `fn(val, i) ? 0 : 1` you could write `+!!fn(val, i)`
Yes to all of this! This is basically how we pull props into a React component.
Just was making fun of his logic, but considering Front end engineers have no logic and instead think that I am agreeing with them... Most likely.
nah that's crap, parcel is better /s
Idiots like you who wouldn't realize it's sarcasm? They definitely aren't.
I am pretty certain that the functionality matches the same method from a popular package (lodash?), but I'd have to check. While `+!!fn(val, i)` is a lot shorter, it's hard for people to understand, so we'd rather stick to the current version of that piece of the code. It's not that longer and it's easier to process at a glance.
"vanilla js" is a non-technical term that people use off-handedly. It means what you think it means. If you tried to take it literally, you couldn't use *any* libraries, but that's silly. So most people *probably* mean that you aren't using a major framework. (Nevermind that React is actually a library, not a framework.) It's supposed to be an attempt to simplify JS back to how it was and not complicate things. Personally, I find those frameworks freeing, not confining. Especially React. It lets me worry about the meat of my app, instead of all the little details.
Vanilla is an idea that is useful in certain contexts but as a general thing it’s meaningless. React and Angular are just JavaScript. Typically I see people use Vanilla as a shorthand way of referencing doing everything on your own and often to help ask the question of whether a library provides real value over what the language or the environment already provides. Don’t worry too much about it. Understand the language, understand the DOM, but don’t think about whether what you’re writing is vanilla enough as if it were some ideal.
Who shit in your cereal this morning? Take it easy, everything is going to be ok.
it's not clear to me why you're downvoting me. i kind of get the impression that you don't know much about these tools and are trying to criticize the poster asked what people thought, so i gave my polite, non-confrontational opinion you then asked me if i meant a packager, two task runners, or a react native thing that doesn't apply to websites no, i don't. but thanks for trying so hard
Certainly. I've spent all the time that I needed in vanilla js when I was starting out a few years ago, and have moved on to using angular and react for all my projects. However, I had one project that I was going to try to do without either of those -so I could learn about native web components, and how using them in plain vanilla js can differ from using them in some something like Angular with Elements or Stencil. During this exercise I found basic things like routing to be pretty difficult compared to using react router. So I started to wonder about the line between what others would consider vanilla and not. So I guess the question is more about everyone's opinion
I did not downvote you. I made a snarky comment but do not accuse me of downvoting you because i did not do that. I do not downvote people.
You need screenshots in your README. Your example is unbearably difficult to understand. Maybe move the inline/render props (TooltipTrigger.props.tooltip, TooltipTrigger.props.children) to methods instead. Why do the elements have `{...getProps({ /* your props here */ })}`? Can't this just be `&lt;div ref={tooltipRef} className="tooltip-container" {...tooltipProps}&gt;`? I'm not seeing what getProps is supposed to be doing besides adding additional props, which can already be done with JSX. I feel like the span with triggerProps and triggerRef inside the TooltipTrigger can just be a part of TooltipTrigger, making it so that the children of the tooltip is just "Click me!" instead of all that verbose markup. If you really want to keep the ability to put additional props on that span, I'd make something like `triggerProps={{ className: 'trigger' }}` on the TooltipTrigger and spread it to the span inside TooltipTrigger. I don't see the benefit of having to use a render prop with getProps and triggerRef. It just looks like a lot of boilerplate.
This makes me realise how little Javascript I truly know.
Why don't you go do some damn research before talking about a framework that you obviously don't understand.
Jesus christ, literally every time. Vue supports JSX. React performs the exact same amount of god damn magic. Vue support CSS modules. Why is it so hard for React devs to do research?
ok. sorry, it's just strange to me that i'm getting downvoted for responding to "how do you guys do this" with a polite "this is my preference," and then a "nah that's crap, parcel is better. I mean gulp, err grunt, err metro ... /s"
yes. the splitting is also imperfect, meaning those subpieces will have overlap. it also screws with caching, and http negotiation is typically slower than the file send for small js pieces. on top of that, and in my opinion more importantly, it makes reliable testing brutally difficult
You have to spread rumors about the other languages and only hangout with the cool language subsets
Hi /u/MrMZa, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/bill19-help, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Isn’t that what Array.prototype.slice does?
I don't eat cereal, probably because I can afford real food as I am not self-certified engineer on reddit.
There are some out there, but keep in mind that cacheing can easily turn into a major headache. I'm assuming that Apollo's cache mechanism works with graphql in a way that makes it easier to know the data has changed server-side than a boring REST service would be able to. [https://github.com/xori/unrest-js](https://github.com/xori/unrest-js) is one I found, for instance.
This is epic. How did you make only part of each image draw?
I use TS professionally and the availability of TS types and its community of support is really stands out from Flow. Also has a good ecosystem around it. At this point I really have no issues with it. Its able to infer a lot and I don't see any reason to use Flow. I've been seeing more and more projects including types in their project, which is a plus too. &amp;#x200B; I hope someday this kind of decision between the two doesn't even need to be made (whether that means one comes out on top or there is some compatibility layer) because the addition of types into JS has been such a benefit to myself, I can't imagine not having them at this point. &amp;#x200B; Disclaimer: Hyper biased towards TS. 
The problem is that vanillaJS means shit to begin with. a lib like jQuery is really a DOM abstraction, you are still writing Javascript, you are not using another language, you just not using the DOM. i.e. $("#foo") instead of document.querySelector("#foo"). So as long as you are writing javascript you are using vanillajs, but not necessarily Vanilla DOM. 
I was in the fence for going with firebase, what is the problem with it ?
I favored Flow for a long time, mostly due to it having string literal types long before TS did and better inference, but TS has always had the bigger community and the team has kept adding features so they've caught up in expressiveness. I think TS pulled ahead with the recent addition of conditional types (useful for correctly typing certain higher order React patterns) so as of this year I can't think of a case where I'd recommend a project adopt Flow over TS.
&gt; document.body.classList.contains aren't Javascript functions, in the sense these are not part of ECMA spec. These are DOM API, the same way http.createServer is a Node.js API. All this is vanillaJS.
This is my same experience. Been using TS professionally for like 4-5 months, it's a win hands down, no contest, no reason to use Flow at this point. I even recommend to people that they switch to TS from Flow for small/mid sized projects. I do hope one day JS gets types built in. I do think once TS is extremely mature to the point that they're flawless, and every package has types, it will happen. But that's probably 5-10 years down the road.
You can't add new elements with a call to slice.
Why the fuck are you responding to a 3mo old post with irrelevant shit? I've used JSX in Vue and it's not great.
Hey thanks!! It's an svg clipping mask on both characters that changes with the mouse drag!!
does nothing?
Having followed and used webpack since the old 1.x days, having written and rewritten way too many webpack configurations, and tools that generate webpack configurations for specific needs, and having written a dozen custom webpack plugins and loaders, I'll leave you with the two pieces of advice I now give professionally: &amp;#x200B; First: If you want to actually use your time to get things done and write code, then use parcel. I know too many engineers that have wasted days and weeks trying to get their webpack configuration just right. You will keep having to go back and make tweaks and fixes. It's a huge time sink. &amp;#x200B; Second: If you want a reliable developer experience, use parcel. Webpack 4 has serious memory problems and constantly crashes node when trying to watch, even with trivial projects. &amp;#x200B; TLDR: Webpack is super powerful and customizable, but time consuming and has a high maintenance cost. Don't make that investment until you need to. Just like everything else in software- don't over-engineer and write code you don't need yet. It's a lot easier to go from parcel to webpack, than from webpack to parcel.
So is this useful snippets or basic examples?
This is a library I wrote as part of a talk I gave at a meetup I co-organise, titled _Manipulating the Web Audio API with JSX and Custom Renderers_. I was aiming to see if writing a custom pragma (à la React.createElement) for managing trees of elements representing `AudioNode`s would be a pragmatic fit. The video of said talk should be uploaded soon, so I'll subsequently share it in the comments.
IMO, the project lead should decide the code style, not the tool.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Good bot
For what it's worth, I've specified the license as ISC, but perhaps I should include the license at the root of the repository.
MDN is probably the best resource for this. https://developer.mozilla.org/en-US/
Yeah it does, in the sense that you provide a schema at runtime which Apollo can check against to determine that all desired information is in the cache. Could be tricky to get around with rest. Unless you provide schemas anyways.
My work uses Flow but my team and I prefer Typescript. I've set up a couple of projects in both and Typescript is by far easier to use. It's nice too because it handles inheritance loops while Flow doesn't, and Typescript seems to be deep readonly by default, where Flow needs complex solutions to support deep readonly objects. There are a number of other hacks that we had to create for Flow that we wouldn't have needed with Typescript.
Whoa. Definitely going this route
There are use cases for not using any libraries at all. I used to work for a company where everything on the front end was library free for the core implementation and all ES5 - load speed for the code was crucial which is why this approach was chosen.
Hey any good resources you can recommend for starting out with Stimulus? Is it pretty much just read the docs and get going? 
Why did it ask for my location?
I'm assuming because the time it shows you is based on your position
I should clarify: It's silly to treat vanilla JS like the one-true-way, like so many do. IMO, even just preferring "vanilla JS" over all frameworks means you haven't met the right framework for you. You'll eventually settle into a way of doing things, and having those methods handled more easily is going to be better than programming them from scratch each time. I'd bet that even your performance-first front end has a suite of tools written in-house to perform many tasks in the same way each time, but without the overheard of all the un-used code in a third-party framework.
I suppose that's what part of my question was about, that last part. When writing your own supporting code becomes more than vanilla. Seems like the grey area is too wide to have a clear line between a simple helper library and something more like a framework. 
Thanks for posting, I too have noticed those kinds of weird errors in error logs when using localStorage/sessionStorage. But even with your library, you'd still have to wrap all the `setItem` calls in try/catch because it will still throw on quota errors. Sure that will usually happen the first time in `isSupported`, but it could happen in any subsequent `setItem` too. Seems confusing to hide only some quota errors. Would it be better to hide all of them or none of them?
TypeScript without type checking is basically just Javascript. I can't see why people would want that.
Everything
Factories. Prototype. Generators.
[removed]
You really should share your output, and have someone else share there outout
Inb4 “what is a class?”
I’m curious as to what browsers your app supports? 
while: do something as long as the condition is truthy if else: do something if the condition is truthy do something else if the condition is falsey do while: do something first regardless of the condition and then keep doing it if the condition is truthy for: execute the first statement only once. second statement is the condition. do something if the condition part is true then execute the third statement. then skip the first and repeat.
I might over simplify here, but... While: a loop that will execute your code until the given expression becomes false If / else: a way to check if something is true and if not (else) the other code executes Do while: (I’ve never used this, but I think it’s like..) a while loop that evaluates the the condition AFTER the loop, instead of before running the block of code. For: kind of like while statement with a counter. You specify how many times it will run by both checking (like a while) the condition and specifying what should the incrementor start at and how to I ncrement (unlike a while).
Because it doesn't seem (on the surface) to actually be relevant to what the OP is asking, it just seems like you're rehashing old tool wars. If you don't want to be downvoted explain how rollup solve's the OP's problem.
Performance. I often hear vague things about hidden classes or that you can improve performance in a way similar to asm.js but more flexibly just by using `|0`, but it's very hard to find definitive explanations.
I made this website where you solve puzzles in Javascript, any feedback is appreciated. [https://programmingforthepuzzled.github.io/puzzled/](https://programmingforthepuzzled.github.io/puzzled/) &amp;#x200B; Here is the repo: [https://github.com/programmingforthepuzzled/puzzled](https://github.com/programmingforthepuzzled/puzzled) &amp;#x200B; I used a little bit of Vue, mostly just for learning purposes. 
You underestimate what Javascript engines can optimize. The difference is negligible. https://jsperf.com/reduce-vs-filter-length-343242331/1
You can use pretty much any canvas framework/library like p5, pixi.js three.js and more + the audio API
callbacks, promises, async, await
I've been using JavaScript professionally for about 8 years and I want to learn when to use for, for in, for of, .forEach and all the other ways of iterating an array. Currently, I use for loops for almost everything because I like writing verbose, easy to understand code. Also, is it still a good idea to use arrays when all these fancier data structures exist now? We have sets and maps and weaksets and weakmaps. What are the performance differences? And generators. What are the performance differences with them? These are questions that I'd really like answered, but I just keep defaulting to the way I've always written Javascript...simple and boring.
Good reference - thanks. Also like those other 30 sec guides that are linked...
Thank you; that was an interesting watch (was doing dishes, saved some time). Any chance you've got more good optimization-related links?
Is it necessary to write semicolon?
https://xkcd.com/2050/
source: [https://youtu.be/cKOSJ5AAwfc?t=4m17s](https://youtu.be/cKOSJ5AAwfc?t=4m17s) (best) remix: [https://www.youtube.com/watch?v=gnB-jp2nsIc](https://www.youtube.com/watch?v=gnB-jp2nsIc)
Hi /u/ETExplains, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
Serialization. Validation. Ajax.
Your tests are wrong. They should be testing for equality but are instead assignments. Instead of `if (a = 1)` you should be doing `if (a === 1)` (or `if (a == 1)` but I wouldn't recommend it).
This seems like a great resource. Thank you for sharing! 
How it’s all compiled. Lexing, tokenizing, LHS &amp; RHS...all that stuff.
My friends call Jacob forLoops, I feel you.
Nothing displays for me. No code, nothing. I'm on Android.
No
this
Sometimes 
There’s still time to submit your proposals, thank you to everyone who has contributed so far! Tickets for the conference are now on sale here: https://eventil.com/events/confrontjs-2018 
As you've mentioned using the classic c style for will work. To me using the other types of for loops is more about signaling intent to the reader. If you see `for (const x of thing)` you know that the body of the loop is going to be mainly working with the contents of something (array). If you see `for (const x in thing)` then you know that the body is going to be working with the keys of an object (for example). Also if you're just going to be working with the values and not the index, why keep around the index explicitly. These days, if I see a plain for loop I expect that the index of each loop iteration is significant and is going to be used for something, potentially looking back or forward in the array each iteration. If there is no index variable (because we're forEach or something) then I can reasonably assume the loop body is just concerned with the current element. Hope that makes sense! Just my 2c.
&gt; Never have problems with type errors in node_modules (this is really important because it makes using TypeScript a little easier and I get better type coverage) What do you mean by this? Might not be what you're talking about, but here's the only annoying part I've experienced with TypeScript so far. If you install a package that uses types which introduce global variables/functions, and you have your own types which define the same then you'll get errors. May sound rare, but this will happen if you use something like jest, and any of your installed packages uses typescript+mocha. I have this problem in my repo, because I use Cypress for integration testing (which uses mocha) and jest for unit testing. The best solution I've found so far have been to define the types I use explicitly: "types": [ "jest", "koa", "koa-route", "showdown" ], 
https://v8.dev/blog/ignition-interpreter Might help..
Hey u/swan—ronson - this looks very interesting, mainly because I happened to just release a very similar library called [r-audio](https://github.com/bbc/r-audio) It looks like you’ve tried to solve the exact same problems in slightly different ways, DM me if you’d like to chat!
Wow basically you used 1000000000000 libraries 
Your link is broken, it asks me to log in into Github.
If you want to learn a framework without making too many decisions of your own, learn Angular. It makes a lot of the decisions for you. The positive/negative of React is that you're free to use whatever you want with it. As an example, I think Angular has it's own \`fetch\` thing for accessing API's (I'm not an angular expert, so i could be wrong). With React you have to roll your own, or use \`npm\` to install something like Axios or fetch. This makes learning a bit more difficult, because the documentation for everything is on different websites. The downside to learning Angular is that in my location, it's not as popular as React. Which is sad in a way, because I do think that companies that want to update their front end tooling from jQuery to something more modern should use Angular, because of all the decisions it makes for you. But that's an discussion for another time.
 &gt; is it still a good idea to use arrays when all these fancier data structures exist now? We have sets and maps and weaksets and weakmaps. What are the performance differences? The spec says that Set, Map, WeakMap and WeakSet methods must be better than O(n). Insertion, deletion, and inclusion-checking for maps and sets are all O(1) in V8, while on arrays they're O(n). Maps also track their own size while plain objects (if you're using them like maps) have to compute that with an O(n) function call. If you have a large amount of data you're going to be coming back to, adding to, removing from, checking overlaps/inclusion with, etc, it makes sense to use sets and maps. &gt; when to use for, for in, for of, .forEach and all the other ways of iterating an array The important one is for-of. A for-of loop checks an object for a custom iteration method, which makes it possible to use simple loops to iterate over complex objects or objects where access should be accompanied by some special behaviour. Say you're writing a function that takes a SQL select query. Instead of returning every single result of a user's query so they can iterate with a for loop (and run out of memory when selecting 50 billion records), you can return an object with a custom iteration method that holds 100 results, but selects the *next* 100 results from the DB when those have all been iterated over. If you have an object representing a webcam feed, the custom iteration method could yield the latest frame each time, making the for-of loop infinite while the camera is turned on. 
But why?
You *can*, and usually it won't change anything. But sometimes it will and it's not always obvious why unless you memorize the rules and pay close attention. Here's an example: let str = "Hello World" [...str].forEach(console.log) That will throw an exception, and can be saved by putting a semicolon on the first line.
no cookies? :&gt;
I think you need a local-server to serve the java-script files. Install Python or Node. Python has a simple library called SimpleHTTPServer. [This Tutorial](https://www.pythonforbeginners.com/modules-in-python/how-to-use-simplehttpserver/)should do the trick. 
[removed]
The algorithmic complexity of both is the same so I would expect them to take similar amounts of time to complete. Speed isn't the only factor though, there's additional overhead in creating an array just to check it's length instead of just incrementing a number.
This sounds like unpaid work. I prefer mentoring people (for free) that I specifically choose myself.
Thanks, I have checked the tutorial and it is easy to understand. Now, my question is, how do I get the files **world-110m.json** and **world-country-names.tsv**? 
&gt;`str.split("").reverse().join("")` Indeed, I only discovered *that* long since forgetting what I wrote initially... Not putting the `""` in the brackets actually *doesn't* split the string...
The same could be said for almost any Library or feature though, everything adds complexity. It would be like arguing that we shouldn't use concurrency because it's more complicated. Reactive extensions solves a whole domain of problems and exists in many languages. So while the knowledge needed is certainly higher so is the payoff. 
These are the links to the files. * [https://bl.ocks.org/mbostock/raw/4090846/world-110m.json](https://bl.ocks.org/mbostock/raw/4090846/world-110m.json) * [https://bl.ocks.org/mbostock/raw/4090846/world-country-names.tsv](https://bl.ocks.org//mbostock/raw/4090846/world-country-names.tsv) Download and save them in your project folder. 
This workflow is fairly typical of previous generations of development. Since browserfy &amp; webpack, doing this should generally no longer be necessary. Webpack today in it's current incarnation will do much of what you're doing in here for you. They have modules you just configure and attach to the right places and they handle the post processing for you, the minification / uglify. I'd just find a nice webpack boilerplate, and leverage that. I suppose if you need to leverage some older codebases, this might be okay.
To add a bit to the comment from Taskforce_Kerim... Mentoring is generally a complex thing. If there is no relationship between mentor and mentored, it is _very likely_ to become a thankless task for the mentor. So, I guess the question is: What's in for the mentors? Did you just add the role with some tasks to perform? From what I can read in the site, the “benefits of mentoring” explained are just the generic satisfaction with one's self. And this is precisely what doesn't work if there is no particular relationship with the pupils. Have you thought about this? Do you have any further plans to expand the mentoring activity?
I'd ask the same question.
Works for me. Not signed in into Github. Even on mobile.
I had read this and it is what I described as “the generic satisfaction with one's self”. To be fair, it is not _nothing_, though. I do think that that satisfaction is indeed worth something... under some circumstances. My main concern is that this kind of set-up does not, in fact, provide the correct circumstances.
Thanks! I have downloaded them and placed them in Documents/Javascript folder. Inside this folder I also placed the JS code in a file called index.html. I run python -m SimpleHTTPServer inside the folder and the terminal will output **Serving HTTP on 0.0.0.0 port 8000 ...** However, when I click the browser icon in BlueFish, FireFox will simply output a blank page with address **file:///home/p/Documents/javascript/index.html**. Why is it still not displaying anything?
How come you chose to use AngularJS over Angular/React/Vue etc?
Rarely, and it’s usually intuitive when required. 
#### TypeScript Before Babel 7 Integration I didn't like in TypeScript that it was doing too many things at the same time: in addition to type checking it also was trying to transpile my code (I have babel for it) and to impose its linting rules (it's hard for me to switch away from eslint with [airbnb]). I guess it's all configurable but requires some time, that made me to postpone trying TypeScript for the better times. [airbnb]: https://github.com/airbnb/javascript
I started to look into Elm, because it’s got a lot of nice ideas. Then I saw its templating syntax and decided I wasn’t interested in that rubbish at all. 
You're not wrong, and I touch upon the point in the talk I gave around the library. I developed this from the perspective of writing a custom pragma for JSX targeting, and given my experience with Web Audio I attempted to marry the two. The fact I had to write an `Aggregation` component to handle multiple connections to shared nodes shows that using a tree to manage a directed graph is somewhat limiting. This idiosyncrasy aside, I do like the cleanliness of declaring the graph in this way; scaling this for larger, more complex audio graphs is admittedly questionable. Tl;dr - yes, but it's an experiment.
Async await, promises / promise libraries / when to use what, what the hell is meant by server side rendering, why mongoose is so popular despite its sparse and presumptuous documentation, passport v auth0, exactly how large / redundant of an api justifies the use of GraphQL, if there’s a better way of error handling in express apis other than Boom from Hapi, etc. There’s just so much shit and I can’t mind map it fast enough
Try navigating to `localhost:8000` in your browser as that is where SimpleHTTPServer is serving the page.
You fired up the http server and didnt use it. Just go here: http://localhost:8000/ That will output what you are looking for
Not sure why you were downvoted, this is an informative summary.
Hey /u/fiala__! Great work! I like the idea of nestable pipelines for grouping audio node elements; it's certainly a lot cleaner than my idea of an `Aggregation` component, and this was definitely an area with which I struggled. I notice this lives under the BBC's GitHub org. Are you using this in production anywhere (if you aren't under any NDAs that will prohibit you from discussing this)? I have heard of the Web Audio Conference; it's definitely on my list of those to visit. Was your talk recorded?
Thanks now the terminal outputs some errors. It says 127.0.0.1 - - [27/Sep/2018 11:21:32] "GET / HTTP/1.1" 200 - 127.0.0.1 - - [27/Sep/2018 11:21:32] code 404, message File not found 127.0.0.1 - - [27/Sep/2018 11:21:32] "GET /mbostock/raw/4090846/world-110m.json HTTP/1.1" 404 - 127.0.0.1 - - [27/Sep/2018 11:21:32] code 404, message File not found 127.0.0.1 - - [27/Sep/2018 11:21:32] "GET /mbostock/raw/4090846/world-country-names.tsv HTTP/1.1" 404 - So I changed the line of code to .defer(d3.json, "/localhost:8000/world-110m.json") .defer(d3.tsv, "/localhost:8000/world-country-names.tsv") but I now getting 127.0.0.1 - - [27/Sep/2018 11:31:00] code 404, message File not found 127.0.0.1 - - [27/Sep/2018 11:31:00] "GET /localhost:8000/world-110m.json HTTP/1.1" 404 - 127.0.0.1 - - [27/Sep/2018 11:31:00] code 404, message File not found 127.0.0.1 - - [27/Sep/2018 11:31:00] "GET /localhost:8000/world-country-names.tsv HTTP/1.1" 404 - How can I specify the localhost, so that JS can fetch the files?
I know it hurts after you've invested so much time but i would advise you to forget about grunt/gulp. De-install them if you like, i couldn't imagine a single use-case any longer that would warrant these tools. They are from another era of javascript, modules didn't exist back then and you would manually knead javascript blobs and iife's together into a pile, then reg-exp out script tags and such. Today we have modules. Use Webpack (or, Parcel), period. If you use a framework like React, they have simple cli's that do this for you. For instance, open your shell, type: npx create-react-app test cd test npm start Even if you set up Webpack manually, it's worth it. Modern build tools are AST driven, that stands for abstract syntax tree, meaning you throw them an entry point (index.js) and they figure out dependencies on their own. Css, minification and so on is done by loaders. 
&gt; At this point I really have no issues with it. Its able to infer a lot and I don't see any reason to use Flow. Same here - only the opposite. I mainly use Flow but I also test quite a bit with TypeScript. Each time I'm angry at Flow I try to do the same with TS, and regularly I look through Flow issues (Github) and check what TypeScript does in the same case. I fond that in the majority of cases TypeScript has the same holes as Flow. *Both* are far from ideal. I would not want to miss a type tool now bot that's the truth. Check out issues on Github, both projects. Many legitimate cases with no solution. Type systems are hard (to implement)!
I volunteer as tribute 
Yeah, I'm a fan of Exercism and people behind it, and it really surprised me they did this. Some of them have wrote extensively on building things on top of unpaid emotional labor (I won't link directly, because parts of Reddit are unreasonably upset with them for unrelated reasons). I'm going to be charitable and assume they did a "boiled frog": they come from backgrounds where it's not unusual to do work pro bono (like teaching in heavily disadvantaged background). I guess that's how you get from "this is the age of paying marginalized people what they're worth" to "gib free mentorship plz." :/
http://geogen.cz/
Traditionally a simple build process like that would be done by writing your own local script (.sh, .ps, .bat, these days .js too or any number of others, moving to something like make once things are large enough that you want partial builds when small changes are made), probably per project rather than even trying to make it general. The problem with creating something more generic than "just what you personally need for this one project" is that everyone wants something slightly different and you accidentally end up creating yet another generic build and/or package management tool that will grow to epitomise the same problem you started it to try to fix. The problem with wanting to use pipe the way you describe (i.e. exactly as they are intended to be used) is getting all the different tools to use stdin/stdout. You could write a general pipe wrapper though, that could deal with usual command line layouts by default and be configured to deal with tools that have unusual input arrangements, so you could do cat src/app.js | pipeme rollup | pipeme babel | pipeme uglify &gt; dist/app.js to get your output. All `pipeme sometool` would do would be to read from stdin until it closes, write that to a temporary file, run `sometool /tmp/stdinfile /tmp/stdoutfile` (appending any other arguments pipeme was called with too), read the output and push that to its own stdout. For dealing with tool that neither support piping natively nor follow the "`command &lt;input&gt; &lt;output&gt; &lt;options&gt;`" convention it could contain a small database of commands and their oddities (held in text configuration in /etc perhaps, maybe supporting the option of overrides in a user-local config file, and even further overrides in a project-level (or just current working directory) file). The same configuration could list which tools *do* support piping out of the box and in those cases it could skip the generation+reading of files and just hook the called command directly to stdin/stdout to you get the pipeline efficiency back (the read+write then do then read+write process would force everything to be sequential). How to intelligently deal with commands erroring out might take a little careful thought.
In Python it would split it at whitespace. Anyway yeah, I ended up here replying to this because of your post on "What does a self-taught become job-ready". Just wanted to see a bit what's your background, but I forgot to answer to the thread. Anyway, I'll answer my opinion here since we're here; as a freelancer you're ready when you're able to complete projects that somebody is willing to pay for. As a developer in a team you're ready when you think you'll be able to take on a useful share of the team's work. I don't think anyone expects you to take the most challenging tasks in the beginning, so I wouldn't worry about not being ready for everything. I got started professionally through freelancing with no academic computer background, so feel free to ask me anything. 
Didn't downvote, but [Angular is on its way down](https://www.hntrends.com/2018/jun-no-signs-of-slowing-for-react.html?compare1=React&amp;compare2=AngularJS&amp;compare3=Angular+2&amp;compare4=Vue) and dropping like a stone, and it's one of the most complex frameworks to boot. There is no benefit in leaning it beyond learning Angular. If you start today, especially as a beginner, learn React.
u/unbalancedopinion has the right answer, but on top of that, what library is Randomize.nextInt() from? It's not pure JavaScript, and the only similar native function for any language which I can easily find from a quick google is Java's Random.nextInt... I hope you're not confusing Java with JavaScript ;)
&gt; 5 minutes Not op but not sure what you were expecting 
Well, it's JavaScript right? How to build MERN with MongoDB, Express, React, Node, react-router, redux, express middleware, body-parser, mongoose, lodash, lodash-es. leftpad, by now you can see I'm just trying to throw random library names haha!
Yeah so you're almost there - the path is just slightly wrong. I'm not 100% on the folder structure of your set up there, but basically if the `tsv` and `json` files are in the same directory as where the JavaScript is being called from, then you can just change them to the following: .defer(d3.json, "world-110m.json") .defer(d3.tsv, "world-country-names.tsv") However, if they're a few folders deep then you would need to add "xfolder/yfolder/fileName.extension" so the script knows where to look.
Thanks! Finally it is working! Is the webserver (localhost) necessary to fetch the files because JS cannot read/write files from the PC's hard disk?
First, fix the problem pointed out by unbalancedopinion. Then get rid of the if/else statement. The easiest way is to create a character map and do something like this: var map = { 0: "F", 1: "R", 2: "U", 3: "L", 4: "B", 5: "D" //etc } var scramble = Randomizer.nextInt(0, 17); var note = map[scramble];
It's supposed to work with APIs that implement the Storage interface.
I would argue that JSX (while it's not critical, it is an important part of React) is far from Vanilla JS.
No, I mean, are you (or anyone here) of similar issues with IndexedDB.
Most of the time, last 2 versions. Problems I come across wasn't caused by legacy browsers but quirky behavior of modern browser under certain conditions.
Library doesn't hide any errors but uses exception to detect whether code runs in the environment that supports native storage. I didn't want to change the behaviour of localStorage and if you store so much that you can hit the real quota limit then you should handle it gracefully instead of ignoring the error. &amp;#x200B; The QuotaExceededError you can see in the article has nothing to do with space you are using or which is left on device but that's what Safari throws when Private Browsing is enabled.
JavaScript
Yes I believe so
"You can get into way more trouble with a good idea than a bad idea because you forget that the good idea has limits.” — Benjamin Graham 
You may want to take a look at the JS exercises of www.codewars.com There are no DOM exercises tho. It may also be a bit too advanced depending on your level. You may also want to take a look at https://bonsaiden.github.io/JavaScript-Garden/ to see all the quirky things JS has...
Using Grunt/Gulp together with Webpack is pointless, sorry. We had a graduate at our company do this recently, he was using some Gulp plugin to get it to run his Webpack config and it made things 10x more complicated than they needed to be. If you want a watch task just add `--watch` when you run Webpack. There's no reason to use Grunt or Gulp again, Webpack can do everything you need it to.
Get rid of nice-scroll. It's shitty.
"nice-scroll" plugin is used, someone ignored the fact that scrollbars aren't supposed to be changed by the page (accessibility amongst other things) but by the user or the system this is both an anti pattern and an UX fail 
Look for the ‘30 days of JS’ it got a tutorial with paper js and audio
Do they match current industry rates of pay for mentors?
Closure, Generators, Co-Routines and Performance
I'll help with this one. If anyone has a trick to improve performance, don't do it. There are multiple engines, which all change over time. Your `|0` might have helped a year ago in chrome, but does nothing today. Write your code to be as legible as possible, then benchmark it and rewrite parts in more performance oriented ways. Don't bother with tricks most of the time, stick with architecture changes. You might be able to increase speed by a few percent following some cool tip online, but you could increase it by magnitudes going from a quadratic solution to a linear one. 
Not OP, but here's my two cents: One of the basic things is to generate less garbage: https://stackoverflow.com/questions/18364175/best-practices-for-reducing-garbage-collector-activity-in-javascript Also, iterations over big collections can be very impactful on performance. Sets, Maps, WeakMaps tend to perform better than standard objects.
Thanks... one more question: what about cookies? Aren't these text files stored in your computer that JS has access to?
Don't forget that using the for of/in loops is super helpful if you are in an async context too. I almost always reach for for of/in loops first because of that now.
The site isn’t loading for me. Not sure if it’s because I’m on mobile. 
Isn’t it easier to just write tests more thoughtfully? I mean I usually design unit tests to cover all behavior expected from the subject. Like they are another way to document the production code behavior. E.g. in provided example my tests would start with the 1000 temperature handling. 
Not working on Firefox OSX here.
definitely works on chrome ill check why not on firefox now
A lot of the tools already do this, and people do use them that way. I've done it before. But it adds a dependency on a *nix shell, and while it's not impossible to develop this way on Windows, it's nowhere near as simple as using a task runner you can install and invoke through npm. 
&gt; The QuotaExceededError you can see in the article has nothing to do with space you are using or which is left on the device but that's what Safari throws when Private Browsing is enabled. True, but what about when you see a normal QuotaExceededError? function isSupported() { try { const testKey = "__some_random_key_you_are_not_going_to_use__"; storage.setItem(testKey, testKey); storage.removeItem(testKey); return true; } catch (e) { return false; } } That code will return `false` if you're over the quota, and subsequent `setItem` calls will use `inMemoryStorage`. No subsequent `setItem` calls will throw. But if `isSupported` returns `true`, subsequent `setItem` calls may throw if the you only go over the quota later. Seems confusing and inconsistent - sometimes you work around the case where the quota is exceeded, but sometimes not.
There are similar issues with IndexedDB! For instance, Firefox in private browsing mode will always call `onerror` from `indexedDB.open`.
&gt;Thankfully, people are writing some helpful things. Mathias Bynens recently [wrote about hidden classes and prototypes](https://mathiasbynens.be/notes/prototypes). That's awesome, I was pleasantly surprised that long prototype chains don't really affect performance so long as the prototypes don't mutate. 
I think you do have a very valid point. Do you have ideas on how we could make it sustainable?
Exactly! This is also what I compare it to; it is just being a volunteer, but in an online environment. One does not expect volunteers to be paid?
I still don't get where I should use closures
I’m closer to being someone who *needs* a mentor than can *be* a mentor, so this isn’t from a “I don’t want to do this” POV. I think it’s a great idea with some opportunities. - Mentees should have to apply for mentorship. Site is free, service is free, time is not. It should be spent wisely and an application process would weed out those who aren’t disciplined enough to progress. - A simple, optional Patreon link should be provided so that mentees have the **option** of thanking their mentors. Yeah, this could become an expectation of sorts, like tips in a restaurant. Not everyone can afford it and that’s okay. I just went through a Udacity program where mentorship was available. It was not a great experience. Huge lack of engagement between parties and a really slow response time, so it was often just easier to go to Slack. And this was a course that typically costs $250/month. Just my thoughts. 
It actually remains the only template abstraction that is inherently javascript. From knockout mustaches to angular, templates were always their own, arbitrary languages parsed on top of javascript, breaking scope and all assumptions. JSX is a superset, like TS or Flow, meaning it vanishes traceless without changing a single runtime assumption. The only clean alternative to JSX is imperative code, createElement, which is precisely what it turns into.
My advice for anyone starting out is finding and understanding the error messages. There's almost always an explanation \_somewhere\_ when "nothing happens". Working in browsers, this means getting acquainted with the Developer Tools. Check out what's under Tools &gt; Web Developer. In this case I'd look at the Web Console to see if there's a js error and the Network console to see if any files are 404ing (not being found). Googling errors and/or pasting them in when asking for help goes a long way. Once you've dug into these things enough spotting what's going wrong becomes second nature. Good luck, and good choice with D3. It is an amazing library.
A while ago I created this little tool https://github.com/ruyadorno/ipt in order to provide interactive interfaces for this kind of ideal unix pipe workflow but often I find that the only good use cases available are within git commands. When it comes down to javascript tooling ecosystem I end up having to write an entire custom implementation just to handle them e.g: https://github.com/ruyadorno/ntl
I am curious if you have evaluated https://www.npmjs.com/package/nps which is for the purpose of replacing npm scripts with a drop-in js scripts file called ```package-scripts.js```. You can get pretty close to changing your tasks together in the way you describe, see their example ```package-scripts.js```.
Unfortunately I don't have any good solutions that others haven't tried already. Sorry.
&gt;Mentoring is generally a complex thing. If there is no relationship between mentor and mentored, it is &gt; &gt;very likely to become a thankless task for the mentor. &amp;#x200B; Exactly. I like mentoring people but usually after I know them a little bit, after establishing the minimum basis of a friendly relationship. To do it for free for strangers, who might even be earning money off of my efforts, seems rather unrewarding.
\&gt; What? Am I supposed to perform these rites for the warm fuzzy feeling it gives me inside? &amp;#x200B; Depends. How warm and fuzzy do exorcisms make you feel?
&gt; Some of them have wrote extensively on building things on top of unpaid emotional labor (I won't link directly, because parts of Reddit are unreasonably upset with them for unrelated reasons). &amp;#x200B; Would you mind sending me a few DM's?
I think the majority of cases where you're using for loops you might be better off using array methods like `map`, `filter`, `reduce`, `some`, `every`, etc. `map` is useful when you have an array of Xs that you want to turn into an array of Ys. const itemIds = items.map(item =&gt; item.id) `filter` is useful when you have an array of Xs and want just the elements that satisfy some condition. const preferredItems = items.filter(item =&gt; item.votes &gt; 5) `reduce` is useful when you want to calculate a single value out of an array, like the sum of all x.votes in an array of Xs. const totalVotes = items.reduce((votes, item) =&gt; votes + item.votes, 0) `some` is useful if you want to know if any Xs satisfy some condition const anyActive = items.some(x =&gt; x.active === true) `every` is useful if you want to know if all Xs satisfy some condition const allActive = items.every(x =&gt; x.active === true) I think it's worth pointing out that Apple removed the `for` keyword from Swift a while ago - it's assumed that most uses of `for` can be more clearly expressed with array functions instead. (Though they did keep the `while` keyword for occasional low-level/performance cases.) A good excercise I set for myself on a project was to follow that rule - try not to use any for/while loops at all and see how far I could get. It turned out to be a lot easier than I thought, and the code ended up being smaller and clearer. I still find JS's `for` loops most useful in sequential, async operations. But instead of: for (let i = 0; i &lt; items.length) { const item = items[i] await save(item) } Use `for ... of` for (item of items) { await save(item) } But again, if it doesn't need to be performed in sequence, you're better off using map: await Promise.all(items.map(save)) 
Because, if it succeeds enough, it stops being truly volunteer. Like a Github repository or a Stack Overflow account, it becomes something you might need to get hired, and that need grows the less likely you are to be "organically" perceived as competent due to your background. So a wealthy white dude with a diploma probably can "volunteer," because if they don't, their appearance and the diploma are likely enough to get them a job. Someone else, quite likely trained on your own site, likely won't have the option to "not volunteer," they'll do the work because they need it to get hired. 
[RunKit](https://npm.runkit.com) is also good for this if you're looking to test node packages, but I haven't found an alternative for frontend packages, so will have to give this a shot
Thanks for the reply! So basically if I’m using the React which comes with Webpack, all l have to do is set up the bundles, right? And from what I understand Webpack comes with these loaders installed?
You seriously couldn't google this?
Too bad :(
Some nice ideas there! Thanks for sharing them.
Java is not the same programming language as JavaScript. Please refer to /r/java.
Thanks man, I’ve been taught that frameworks are often referred to as heavyweight and lightweight, my guess is that Angular is one of the heavyweight ones? Does Angular making these decisions for you means that all you have to do is point is which data you want to process kind of like a built in AJAX? 
Java is not the same programming language as JavaScript. Please refer to /r/java.
All frameworks use Webpack, Angular, Vue, and so on, they all have these cli's. You would use Webpack even for a small vanilla about-me page, it's just the first step you take. Cli's already deal with most of what you'd want, css, minification, images and compression and so on. In the end you say "npm run build" and it creates a ready-made distro that you can upload. In the rare case that you do need something special, you can "eject", meaning they'll make webpack configs public, at which point it's at your disposal. I'd still take a couple of hours one day and learn Webpack (or Parcel, which is probably easier), it's worth it.
I definitely will! Do you happen to know a course on Udemy that covers all these bases and also teaches a framework like React? Thanks for taking your time to reply.
The best i know is from egghead: https://egghead.io/courses/react-fundamentals It's free if you sign in. Teaches you the cli, then going forward with app building. 
Thanks
Just bookmarked it, thank you so much, best of luck to you too!
The Mostly Adequate Guide is pretty great. I would start there. Some bonus unsolicited advice: I didn't really grok functional programming completely until I learned a pure functional language. If your main goal is to learn FP I'd recommend Elm or Haskell. You can always come back later and apply what you've learned to JS.
Yes. [it's required according to the spec.](https://www.ecma-international.org/ecma-262/5.1/#sec-7.9) &gt;Certain ECMAScript statements (*empty statement, variable statement, expression statement, do-while statement, continue statement, break statement, return statement, and throw statement*) must be terminated with semicolons. There is no question about it, they spell it out that semicolons are required for most statements. But, they also say they'll try to insert it for you for convenience. &gt;For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations. It's kind of confusing when to add one and when not to need one and it's a lot of context specific rules you need to memorize if you want to not insert semicolons. I honestly don't understand why people are so fixated on not writing semicolons. You're not writing poetry, you're writing code. It should be clear and explicit and not leave anything to the imagination of the compiler or the person reading your code.
Server Side Rendering: JavaScript engines like React take a bunch of JavaScript code, run it, and take the HTML document produced from it and send it to the browser for rendering. This takes anywhere from a few milliseconds to seconds of on the client side. This happens after the JS payload is delivered from the server to the client which is often a bad user experience and doesn't let robots see the content. SSR let's a JavaScript engine on the server build an html document, then sends that to the client, with some extra information so that the JS on the front end knows what it should do so that it doesn't re-render the whole document. 
Nope, I have no 'no-cookies' settings
Neat little app! I am very uncreative and never think of things like this. A couple comments: 1. You should probably reset the input when clicking on buttons. I had typed 'Squirtle' originally to find Squirtle, and it would keep popping up in the text box after various actions. 2. There may be a problem or two with the 'guess that Pokemon' game. I sometimes had to click the button twice, then I would see it flash one pokemon but then immediately pick a different one. 3. Add `.DS_Store` files to your `.gitignore` file.
I was going to start with JS then learn Elixir
Some nice thoughts here. Thanks for putting in so much effort 
Know that the image resource pointed by an image element will only start loading if the element is in the document, and the element is set up so that it's rendered. In your code, when the image element is placed into the document, the browser will render the element as well as loading the image resource. So, the image is shown while the image is loading. To preload an image, set up the element so that it won't be visible within the document viewport. Do not use `display:none` style to make it invisible, because that style won't make the browser render the element. Instead, place the element off screen by using `position:absolute` style with negative coordinate which is low enough to make the whole image element unseen from the viewport. e.g. if the image element dimension is 100x100, put it on -100px,-100px coordinate or lower. When the image finished loading, change put the image element to where you want it to be. e.g. function preloadImage(url, parentElement, placementCss) { parentElement = parentElement || document.body; placementCss = placementCss || ""; var img = document.createElement("IMG"); img.src = url; //or just use: var img = new Image(url); img.style.cssText = "position:absolute;left:-9;top:-9;width:1px;height:1px"; img.onload = function() { this.style.cssText = placementCss; }; parentElement.appendChild(img); } //e.g. preloadImage("https://site.com/image.jpg", document.body, "position:absolute;z-index:107;left:0;top:0;width:1px;height:1px"); 
Mozilla Developer Network is a great resource too. With a guide to js.
Hi /u/reebs12, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/iEnjinere, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/martinrajdl, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/RussianInRecovery, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Imaswerd2, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/rubbertoe714, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ms777j, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Oh I see. I have a rough idea of how it works but I’ll have to actually use it to really understand how it works, thanks you for all the great information, it really helps clear things up.
Oh ok nevermind then.
I agree. I think the use of semi-colons makes code more readable. But I do think it's preference and coding style. Same with variable names and so on. Maybe you take a more functional approach, maybe the naming of those change per project because of that. Maybe you're on a project with heavy Python back-end thus heavy Python developers who favour the semi-colon-less life. &amp;#x200B; I like your comment :) I agree on I haven't seen a compelling argument not to use them. I just hover this subreddit to pick stuff up and learn. Sarcy comments are usually just a waste of a possible interesting debate :)
Please share a codepen or a jsbin
Thanks a lot, I always write semicolons,but I've met some programmers do not write any semicolon. So I have this question. Thank you again, buddy.
 var panel = this.nextElementSibling; I don't think that will work since .accordion class has no siblings? You can try to put a bunch of console.log() to test if you're targetting the correct elements. Alternatively you can do it using CSS :target selector (no JS): https://www.w3schools.com/cssref/sel_target.asp (2nd example). Though there are limitations to this (relies on #)
You don't need to do anything with `style`. Images can be preloaded without adding a node do the DOM. Run this in your devtools and look at the networking tab. You'll see the HTTP request for the image. Depending on the HTTP response headers, the image will be added to your browser's cache. const kitten = new Image(); kitten.src = 'http://placekitten.com/200/300'; 
I like the article. Gives good points :) I think it misses the point of test coverage (in my opinion anyway). I don't need my test coverage to care about what my tests are doing or how thorough they are. I just need it to tell me *I have x% of y tested*. It's up to me to ensure those tests cover edge cases etc. it's what the tests are there for. I think test coverage gives a good, top level view of how well tested my application is. &amp;#x200B; I do like the idea. Of testing mutation. But I think that would be nice to work with in conjunction with tests rather than a replacement.
Got it, Many thanks!
thanks dude! I really like how you solved AudioParam transitions with a list of function calls passed directly to the param prop, that's really neat. Re: usage in production, we only published the lib a few weeks ago but there are people at the BBC who are starting to use it, there aren't NDAs but nothing has been deployed yet I'll PM you an invite link to the WA Slack – it seems there are a few people working on similar projects, so I'm going to start a #declarative-web-audio channel where we can share ideas if you'd be interested :) P.S. my WAC talk is (here)[https://youtu.be/W0MvW2jaW8g?t=5h36m12s] 
Both are very good. Of those two, I would _start_ with _Professor Frisby's_. If you want other alternatives, using a different language (such as Elixir) has already been suggested so I won't repeat that. If you want to restrict yourself to JS and you want _books_, then there's [a book](https://medium.com/@luijar/functional-programming-in-javascript-d7cc3d78d463) from Manning which I would also consider a pretty good choice for learning.
Oh that’s fine I didn’t know that was a thing I am still very new to reddit. 
\[In order to obtain speed, V8 translates JavaScript code into more efficient machine code \*\*instead of using an interpreter.\*\* \*\*It compiles\*\* JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler\]([http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/](http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/)) &amp;#x200B; Usually when someone says things like "scanning ahead" they are talking about a compiler (whether they know it or not). A scanner is also known as a "lexical analyzer" and is part of a compiler. 
I see your point, but do you have a better solution? I don't want to handle any possible corner case but focus on small bundle footprint going after 99% of use cases. You can always wrap the Storage after checking for quota, but it wouldn't be reliable anyway. Besides, I think that at the point when 10MB quota is not enough the problem is in the design of your application as you use localStorage for what it wasn't intended. 
&gt;ES6 Javascript is a decent step forward, but the downside to that is if you want see it working on the browser, you'll need a tool, like Grunt, Gulp or Webpack to compile it to ES5 using babel. Many browsers are near fully es6 compliant. Yeah, transpile if you're putting stuff in production, but if you're looking to \*learn\* es6, then webpack isn't strictly required. 
You ever look real closely at the jQuery .offset()? [https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/offset.js](https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/offset.js) &amp;#x200B; I don't think it's the same as the browser's .offset() &amp;#x200B; &amp;#x200B;
Yes, but it's a bad idea
&gt; Well... yeah. JavaScript the language is a spec. Even though what I said may sound obvious, the fact is every debate on this topic still focuses on "JavaScript" rather than on a specific implementation of JavaScript, such as v8 or Chakra. &gt; ...instead of using an interpreter. It compiles JavaScript... Not sure why this part was emphasized. I explicitly said, "When Chrome arrived in 2008, it was the first to compile JavaScript to machine code." Also, your article is from 2013, and software can change a lot in 5 years. These days v8 also interprets. https://youtu.be/N1swY14jiKc?t=13m51s &gt; A scanner is also known as a "lexical analyzer" and is part of a compiler. Also part of an interpreter. ;-)
r/https://functional.works-hub.com/?utm_source=Reddit&amp;utm_medium=Sam&amp;utm_campaign=sam &amp;#x200B; Functional Works is a community for FP engineers - both those already knowledgable in FP, as well as those who want to learn more about FP. There's great content in the "Learn" section, and a lot of the jobs don't require commercial XP with an FP language, but simply an interest, or a passion, or side projects.
Kyle Simpson just wrote a book called functional lite . Check it out he's a great js writer 
Most places can be reached through a combination of plane, boat and/or train/roads. Depending on how many countries you need, it may get expensive, though. Try to optimize your route by solving the [Travelling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem).
The first one basically aliases the function and gives it a new name. Sometimes you can use that option when you want to preserve some type of state. 
It's great, but although I have to understand the library I imported, sometimes I don't know how it exposes itself in the global scope. Some libraries like three.js instances itself in `window.THREE` which is acceptable but then some like `socket.io` instances itself in `window.io` which is quite unexpected and requires me to search for it. Obviously if you've always been programming with the libraries in the browser you should have that memorized but when you come from a Node background it becomes really frustrating.
&gt; I understand that arrow functions cannot use the this keyword. This is not correct. Arrow functions [bind `this` to the context that they're defined in](https://hackernoon.com/javascript-es6-arrow-functions-and-lexical-this-f2a3e2a5e8c4). To understand the difference between 1 and 2, [read this](https://gomakethings.com/function-expressions-vs-function-declarations/).
The main difference the first and second is that the second one will be \_hoisted\_. This means that the interpreter will place the function declaration at the top of the file, allowing you to call the function earlier. For example: ``` syntaxTwo('foo'); // outputs 'foo'; syntaxOne('foo'); // Throws: 'syntaxOne is not defined' const syntaxOne = function(argument) { console.log(argument); } function syntaxTwo(argument) { console.log(argument); } ``` In the case of the arrow function, you're partially right about `this`. You can use it, but it's referencing the `this` in the scope above it. For example, if you're declaring it in the global scope in a browser, that would be `window`. So for example: ``` // Arrow function let person = { name: 'Foo', // this is not bound to anything, `this` only references the scope above it sayHello: () =&gt; console.log('Hello, ' + this.name) }; person.sayHello(); // Hello, undefined // function declaration let person2 = { name: 'Foo', sayHello: function() { // `this` will be bound to the person2 object console.log('Hello, ' + this.name) } }; person2.sayHello(); // Hello, Foo ```
Makes a lot more sense now about the `this` keyword, thank you.
Really good question! I had to brush up myself to answer, so Id appreciate anyone chiming in to correct me. (This has been answered pretty well already I see now, but want to leave this here for anyone else’s benefit!) First, how familiar are you with [hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) in JS? There are a few differences between the first two syntaxes which are not obvious without understanding more about hoisting and also [closures and lexical scope](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures). The first is example you gave demonstrates creating an anonymous function, specifically using _the function operator_. Anonymous functions are not hoisted, they are evaluated in place as your code runs. In your example the anonymous function is being assigned to a const, and const will not be hoisted anyways~~ (as opposed to vars which are hoisted). Because this uses a const instead of a var,~~ you would not be able to call this function earlier in your code than the line it is declared on. (Edit: realized I made a mistake. The var declaration itself will be hoisted, but it would not be assigned to the function body. Calling function expressions before they are assigned will result in a` TypeError: &lt;var name&gt; is not a function`. Stack overflow link) The second example is a named function declaration. This will be hoisted to the “top” of your code when the file/code is first run/interpreted. Meaning you could write that line at the very bottom of your code and still run the function at the very top of your code. Those are the most technical differences between the two. Another consideration is error stacks, anonymous functions don’t have a name to be shown in the stack when a fatal error occurs in them. Named function declarations that a fatal error occurs in will show the name of the error in the stack. But! The first example would also show the name you assigned it (the const’s name) in stack errors just like named functions. 
In recent years I worked on tool for dynamic test files split across parallel CI nodes to get faster CI builds for Ruby tests but now I did similar integration for Cypress. Here I described a few CI parallelisation problems that dynamic test files allocation solves [https://youtu.be/G6ixK4IK-3Y](https://youtu.be/G6ixK4IK-3Y) &amp;#x200B; This is @knapsack-pro/cypress package [https://github.com/KnapsackPro/knapsack-pro-cypress](https://github.com/KnapsackPro/knapsack-pro-cypress) &amp;#x200B; I'd like to get feedback from more people what I could improve. &amp;#x200B;
So then perhaps everything that gets transpired away, like typescript or jsx, is just as vanilla as ES7 or ES8. 
Yeah I have a hard time with that one. I was looking at the bootstrap scrollspy recently and they use the jQuery offset. The numbers returned matched nothing I could figure out using BCR or offset. They seem to change depending on if something is relative or static. To be honest I'm not a fan of the jQuery method mainly because it is so confusing.
Have you try to run tests in parallel on multiple CI nodes to save CI build time?
Yep, totally this. You have to choose, what you want to do: small chainable tasks or one task doing everything for you? flexible, but problems with version compatibility OR safe all in one but no option to customize? Since we are human and always strive for the things we don't have at a particular moment, Noone will ever satisfy all of our needs.. 
Man I got a lot to learn. Ha, I appreciate the help. To answer your question about hoisting, I know a very small amount about it from the JS course I am taking with Andrew Mead, and the little I have read about in this thread. I plan to take "JavaScript The weird Stuff" after this and I am sure it will go into a lot of that kind of thing. 
Yep, totally this. You have to choose, what you want to do: small chainable tasks or one task doing everything for you? flexible, but problems with version compatibility OR safe all in one but no option to customize? Since we are human and always strive for the things we don't have at a particular moment, Noone will ever satisfy all of our needs.. 
Dont sweat it! If youre asking these kinds of questions already you’re well on your way. I have been writing JS professionally for over 2 years now and had to go digging up this stuff myself just now. Scope is weird, at first. The more code you write and the more youre exposed to thinking in JS, it will become second nature. Youll trip up sure, but when you do youll be able to intuitively figure out its a scope issue without having to recite the definition or spout off the nitty gritty of it. Im unfamiliar with Andrew Mead, will check that out. Id highly recommended watching some of the older foundational stuff by MPJ over at [funfunfunction](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q). I watched a lot of this when I was starting out, and just let it wash over me. Didnt always understand things, but low and behold enough stuck, and MPJ has some really inspiring philosophies about programming in general. 
this
This comes down to coding style for the most part. I like to adhere to the style of declaring functions/variables very close to where they are needed. That favors function expressions often, and also leads to less polluted scope (IMO). I code with const instead if var 90% of the time, which also adheres to the “declare things where they are needed” style. If I want to share a function with the whole file, Ill declare it near the top of the file usually (below my imported modules) or the top of the scope that its needed in. I find putting things I know Ill want to use multiple times near the top of file/scope to be a mental separation, and will do it whether I end up using a function expression or declaration. 
Lots of options but from a pure resilience side of things, why not issue a jwt to clients with all the info you need for the game server to operate without ever talking to your express instance? Performance of not needing to hit your mongo instance is also nice. Many options for architecture but maybe these sorts of technical challenges aren't top priority at the start?
Eh I have a class, never heard the term factory function before, but it's very apt. Are you sure I need an array of them? 
yes, you need an array of them and then you can loop over them like balls.forEach(ball =&gt; ball.update());
Hi /u/PathOfTheProkopton, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ComplexHawk, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/jagkotbal, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Now I wish I hadn't specified that they come from OP, lol. I'll try to remember that for the future. This may be right up my alley -- though they're not usually massive I pretty consistently work with arrays and objects in parsers I build. I try to make everything as fast as possible with vanilla JS of course, but better performance would still be nice. Thank you very much!
You know I'd seen the JWT thing a few times when setting up my authentication but since my cookie-based session was working I hadn't looked into it. I'll dig deeper to see how it can help me out here. Thanks for the reminder. This is a lot of learning at the same time, so some degree of challenge is good for my self-education :)
In case anyone's wondering, got passed onto the next round (onsite) but didn't get the gig cause I messed up on the data structures and algorithms portion royally lol 🤷‍♂️
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Have you looked at JWT? The benefit is that it's stateless.
Dope! Thanks! Started watching now.
Yes, looking into it now, thanks!
Functional programming has absolutely no problem with state (only mutating it) and is perfectly appropriate for UI development (functional reactive programming is very nice). Certainly not impossible.
I saw the other comment after I wrote mine. I think it’ll simplify your authentication a lot but it might be a pain to change :/
I'm fine with better in the long run.
The beauty for what you want is that a jwt would contain the set of "claims" about the user, including the user id. And then from that you don't need a session kept alive within express to manage the game state. Obviously all this depends on some assumptions that you can run this game without needing to reference changing session data etc. Try starting simple, extract your passport session store to redis so you can run multiple node processes for performance and resiliency, then use a express socket layer to manage sessions ( I worked on sockpress and for small scale it'll work nicely for you I'm sure )
Yeah that's why I was building this converter to convert some jQuery I had it was really hard and there are no converters 
That would be so awesome. I will surely keep an eye on it
Knowing what they're talking about. Being able to explain their own code. Having code to show off. Having projects to talk about and things they've done. Dressing appropriately. Talking appropriately. Not being sexist. (I wish I were kidding. Totally nixed someone for this.) Not being a zealot about 1 technology. Being on time. Being polite. Being honest.
Interesting. Lacks of examples in readme.md unfortunately
You know about this site right? [http://youmightnotneedjquery.com/](http://youmightnotneedjquery.com/) It's not a converter but I use it.
I found a lot of great lessons by just reading through the [Ramda](https://ramdajs.com/docs/) documentation and playing around with it. It's a utility library similar to lodash, but with a more functional perspective. Frisby's guide is also great. 
Following that same logic, how long until webpack is obsolete?
The author, in his investigation, went to a thesaurus and came up with "Plug," "Seal," and "Cork." "In this sense," he says, "closure seems to convey the idea of keeping something in… enclosing it." But as... interesting... as that may be, I'm pretty sure the term was borrowed from [mathematics](https://en.wikipedia.org/wiki/Closure_(mathematics\)), same as how so many other programming terms were borrowed from mathematics ("variable," "function," "class," etc).
If someone claims to have a strong background in JS, I ask them to name the 'falsy' expressions. I *always* get blank stares. At that point I know they're not the 7/10 they said and usually move on without any further JS questions.
I agree with you, but for laymen like myself who are a bit mathematically inept or do not have a traditional CS background, I think it helps to simplify the metaphor a bit. 
I might be missing some: * Empty String * Number Type 0 * undefined * null * NaN
[removed]
Andddd wait for it `document.all`..... just JS things
* false
Filed your game's [first open issue](https://github.com/TowhidKashem/snake-game/issues/1). Turning 180 degrees results in death if both key presses are performed within the same game logic step. 
I lol'd
Googling instead of checking documentation for JavaScript. No one remembers everything in the APIs, so being comfortable with using documentation for JS or a library is important. Interviewers want to see you reach for MDN (or other relevant documentation) first. They want to see that you can find and read documentation and implement it based upon the information found there. &amp;#x200B;
There's a lot of examples in /tests/ as stated in the readme.
Hadn't heard of domc and stage0. Took a peek but unfortunately it seems they use `Function()` to compile code on the fly, so they're not suitable for anything that might get deployed with a content security policy :(
A while ago I wrote a snippet which basically "diffed" the global object keys. I generated the list by opening with not hing imported. I can explain more (or rewrite it) if anyone's interested
I don't understand the hate for w3schools. I use it often. A lot of times I only need syntax; I don't need a complete high-levwl explanation of the code, and typically w3schools gives that.
From what I've seen with candidates: ##1. Can't demonstrate full control over the async nature of JS. If I ask someone to write a function that counts from from 1 to 10 in 1 second increments, it trips up more people than you would think. Many of them try to stuff a setTimeout or setInterval inside of a while loop and of course it fails spectacularly. Same goes for things like making use of promises or simple AJAX requests. Not everyone seems to understand those are asynchronous operations and you can't just return their contents into a variable, and then synchronously make use of the variable after. Or if you ask them how they might perform an action that can only occur after several different async operations complete, they might devolve right into nested callback hell instead of demonstrating how to use `Promise.all()` or at least a simple flat promise chain to keep things tidy. You absolutely must be *fluent* in your understanding of how to work asynchronously in JS, else your code will be sloppy at best, or result in race conditions at worst. ##2. Don't know the basic language mechanics of JS like closure, `this`, scoping, and prototypal inheritance. Not a day goes by where I don't deliberately make use of `this`, closure, scoping rules, and prototypal inheritance at work to some degree. You really do need to know at least the basic behaviors of these things to write JS effectively. That includes knowing how to use `bind`, `call`, and `apply` appropriately, including how to use `bind` for partial application when needed. Also an understanding of the scoping rules of ES6 fat arrow lambas vs ES5 lambdas. I'll also throw in the notion of first class functions into this mix. I see shit like this a lot: doThis('foo', function () { something.doThat(); }); This can just be written as `doThis('foo', something.doThat);` which is where unambiguous knowledge of `this`, `bind/call/apply` becomes important. Or if their solution is `doThis('foo', () =&gt; something.doThat())`, then I want to know *why* they chose that approach, how it differs from just passing the function in, and how it differs from an ES5 lamba. It's perfectly valid of course, but I still want to make sure you can explain *why* it works and *why* you're doing it. 
You could upload a custom script inbtwn that copies lodash to another var name
This is a horrible mindset
Sounds like you dodged a bullet. What kind of company makes you frontload a bunch of work, prove your competence, and then throws you out of the pool because of something you can look up online?
This was the right mindset a year ago, but w3schools has improved since then. [https://www.w3fools.com/](https://www.w3fools.com/)
mindset comes from the old days when w3schools would teach bad practices - see w3fools.com
Can you elaborate on what the exact criticism was? 
I'm seeing this in a lot of peoples code samples and it kinda bothers me: Random smatterings of native es5, es6, jquery, react, etc. all in the same app. It shows me the person doesn't really grasp things. It's cool to say "I know a few es6 features so I'll show them off", but knowing when and where to use them or what the consequences are in various target environments means everything. That's the difference between senior level and someone who just kinda knows some JavaScript.
Idk most technical interviews involve knowing data structures and algorithms. You’re not sure why he failed. 
Yeah, I'm stuck with mobile-only currently, but have been using logging to time some calls/blocks. Would like to try some of those flame graphs for this but haven't yet basically just because I keep working on my projects and forgetting.
Isn't that just an Internet Explorer thing?
correct link: [https://en.wikipedia.org/wiki/Closure\_(mathematics)](https://en.wikipedia.org/wiki/Closure_(mathematics))
While I'm not in a leading position myself I still heavily agree with you. It's extremly time consuming and frustrating to work with someone who's code looks like their first day in JavaScript. Most of my colleagues don't even know what the property "prototype" means and put variables into the global scope by assigning it without ever declaring it. HONESTLY HOW DID THEY GOT THEIR JOB?! Everything would break if I'd run their script in strict mode. Luckily younger in our company (which I'm part of) are open to listen to advices. Just wish they would improve their skills when they're currently not involved in any project instead of doing bullshit. I've build my own little jQuery if I had nothing to do and learned much from doing so.
I will note, closures are not specific to JavaScript. Glancing at examples of closures in other languages might help clarify what exactly a closure is.
Haskell
that's pretty silly. It sounds like an interview that should be walked out of
There is more than one way to do functional programming — Haskell style and simpler style used in impure languages like OCaml, F#, Clojure, and Scala (some people actually do Haskell in Scala). Most guides just teach you all typeclasses from Haskell, which is useful, but might be not what you are looking for.
I’ve seen things that are just incorrect on w3c
Not doing cocaine in the bathroom (wish I was kidding.)
Hey, what are you referring to here? Are you referring to this exercise? [https://javascriptpractice.com/assessment/cjmjovn4p00hi0a58cfsjusdq/view](https://javascriptpractice.com/assessment/cjmjovn4p00hi0a58cfsjusdq/view) &amp;#x200B; And did you click submit with "Const called foo."? I'd like some clarification on what happened so I can fix it, thanks!
Thanks for pointing this out
How's it looking now? [https://javascriptpractice.com/](https://javascriptpractice.com/)
First Elixir book would probably more fun way to learn
Much more responsive now: [https://javascriptpractice.com/](https://javascriptpractice.com/)
You need a copy of the node list in that you can add an attribute that will be set as soon the node was visited. This will eliminate the problem of infinite loops.
So far about 30 people have signed up for updates to the free version and about 4 people for the paid version. Very promising, we'll see how it goes.
Hot damn! Well done! That's inspiring
What OS and what version of Edge? It seems to be working fine on Edge on Android for me
I think this is also pretty silly too, to be honest. I google for the documentation most of the time. I don't just straight go into the documentation website, google will most likely bring that up. Navigating through MDN for example is a chore and the search engine more often gets me lost than finding the thing I'm looking for. If I see the link from Google sure i'll click it but if I see a SO post explaining the API or some interesting article about it I might just click it. If they actually want to examinate how well you understand documentation, they should make it clear right from the start that you are interested in developers that can make sense of proper documentation without needing to google something and that you'll only be able to use said documentation during the interview. Otherwise, I'm just gonna simplify my life, let google pull up the best results and use those.
I would try chunking the data then stream the data to the client. Javascript websockets do not like big chunks data being sent at once.
NO! Learn everything about vanilla javascript. As you are making sample project start learning and implementing. Remember code to learn dont learn to code.
BigInt
Nice. It's a shame this is the only actual non-comedic answer so far. 
I fucking hate big o questions in frontend interviews. Do you know how many times that shit has popped up in my career? Fucking never. And I guarantee it's the same for 99% of us. It's a dick measuring contest.
Thank you, I'll take a stab at fixing this when I have some time tom.
Good progress, I've been following TypeScript evolution. Every time it gets better and better.
The company was one of the bigger tech ones here in NYC. Not a Big N but still pretty large (around 300 devs). The interview comprised of three 1 hour sections. First was JavaScript Competency (had to build a slideshow with various specs), second was Data Structures and Algorithms and third was System Design (white board basically dealing with state management, breaking off components, etc). I aced the first and third (the 2 practical ones) but bombed the second since I don't have a CS background and am self taught. I guess they needed someone who would ace all 3. The question asked was a hard level leetcode one done on hacker rank. I didn't get too far progress wise at the end of the hour :(
That's actually good to hear, i've just been so used to webpacking that it becomes the norm for me.
I've never heard of them referred to in the way, but I guess you could say angular is heavier than the others. &gt;Does Angular making these decisions for you means that all you have to do is point is which data you want to process kind of like a built in AJAX? With what you said, I think you have some preconception of what Angular does. You're better off trying it out with a small unimportant project, like a Todo or something. &amp;#x200B;
I think closures have a lot to do with the idea of scope. In JavaScript, {} is an object literal. But, it is also a scope when not assigned to anything. So for example: {{{ let hello = 1; }}} here hello defined with var, it is "enclosed" within the innermost scope. But {{{ var hello = 1; }}} is not, because vars are "hoisted" up the scope. A closure is like a let in the previous example, and it can consist of carrying multiple properties, stored, and tossed around between variables when needed for preserving its data without leaking outside of its own scope. Hence, avoiding collision with globally defined variables.
I meant any book. First one you can find
I've been thinking about your comment, but I'm struggling to see the parallels between a mathematical and a programming closure.
Yes! I will for sure try it out eventually, the problem is that since I’m just starting and there’s just so many things out there I really want to do it efficiently while not rushing things. As someone stated in this thread I think I’ll start out with React to mainly improve my skills with JavaScript, then after that I’ll be free to explore other frameworks and such. Thanks for all the help! 
Hmm interesting. I've heard of NaN boxing, but that's still a step removed from just doing 32bit maths in JIT code. I knew Chrome didn't specifically detect asm.js, but I thought the `|0` still made a difference to what it could infer. Great if it doesn't now. I'll keep digging.
This series of books are pretty good for learning closures and many other advanced JS topics. I've learned so much reading them... Hope it's useful for you. https://github.com/getify/You-Dont-Know-JS
Like what?
Like this very long list: https://web.archive.org/web/20110412103745/http://w3fools.com#htmlsucks
I'm confused.... My link works. Yours doesn't.
Elixir is a terrific language to learn. I think you'll get a great education and a serious productivity boost by learning it after JS. It was the first non-front-end language I learned and I'm so glad I did!
Sounds like they are throwing away great candidates due to outdated hiring practices. Nobody needs to be able to answer leetcode questions for a JavaScript job. 
&gt; ball = { &gt; &gt; x: null, &gt; y: null, &gt; vel: null, &gt; side: 5, &gt; speed: 5, &gt; &gt; update: function(){ &gt; this.x -= this.vel.x; &gt; this.y -= this.vel.y; &gt; &gt; &gt; }, &gt; &gt; draw: function(){ &gt; ctx.fillRect(this.x, this.y, this.side, this.side); &gt; } &gt; } Could be wrong but is this not a class?
Yes and no. It acts very similar to a class, but it's not the same. It's as if you took a class and unwrapped it.
Oh I agree. The parallels are only barely there. If you want to understand how closure and other concepts work in _programming_, then the mathematical descriptions won't help you. If, on the other hand, you want to understand the **etymology**, if you want to know the _origin_ of the word, if you want to know, "Why is it called a Closure anyway?" as OP's title asks, then the answer is mathematics. That's the origin of the name.
I mean portfolio or else some sort of simple coding challenge my company gives out (yes, I know these are terrible but it doesn't require hours upon hours of work). In that scenario... I don't expect amazing things, but this is literally all I have to go on to see how you might write code. And if it comes off like you've never delivered anything to production ever, it's sort of a problem. 
That's an object with some properties. The Ball class would look like: ``` // class class Ball { constructor () { this.x = null; this.y = null; this.vel = null; this.side = 5; this.speed = 5; } update () { this.x -= this.vel.x; this.y -= this.vel.y; } draw () { ctx.fillRect(this.x, this.y, this.side, this.side); } } // instance of the class const ball = new Ball() ``` Now you can make as many `ball`s as you want that all have their own independent inner values
Hi /u/Lootje02, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt; That's an object with some properties. /u/here-for-karma answered it [below](https://www.reddit.com/r/javascript/comments/9jfmkb/could_someone_please_tell_me_how_i_could_have/e6rr32u/).
Ahh the one thing that makes js bearable
&gt; But as... interesting... as that may be, I'm pretty sure the term was borrowed from mathematics, same as how so many other programming terms were borrowed from mathematics ("variable," "function," "class," etc). I'ma disagree on that one. Variables, functions, and classes all have at least a loose association with their mathematical counterpart. A JS closure and the the closure property of sets share pretty much nothing outside of the name. JS closures deal with scope, but the closest thing to the mathematical closure property would be related to typing.
dodged a bullet there. you seem very competent and im sure you'll find a company that will truly appreciate your talent.
He's not asking what a closure _is_, he's asking about the etymological origin of the term.
Would you mind to explain what the solution to the 1 to 10 counter would be? I am learning async JS and you let me wondering 😅
Haha thanks for the encouraging words, it hasn't been fun job hunting this time around :/
It always amazes me that candidates don't know what immutability is, or if they do know they don't know why it's used or how to do it. Especially those who claim to be react/redux experts. 
The initial value of `this.vel` is `null`. Based on how you're modifying it in `update`, you'd likely be looking for something more like `this.vel = { x: 0, y: 0 }` for an initial value (set in the `constructor`)
Nearly all of your points are generic to any interview, not just JavaScript. They are still relevant, just not to what OP was asking
That’s strange. I’ve worked on huge monoliths, that take upwards of 5 minutes to open in and IDE and have not encountered these issues. 
It's asynchronous. It fires a ton of setTimeout or watchInterval timers into an event loop. You can't guarantee the timing, but it would be exceptionally rare for them to land on one second increments. Think of it this way. You are given a task that takes one minute - you tell your friend and watch them complete the task. If you line ten up, it will take ten minutes. If you instead shout out that process to your friend without asking for a completion confirmation before moving on, you are just shouting out a bunch of commands. They may complete. They may not. Regardless, you have passed the process off and it isn't part of your control flow anymore.
As paparyku said streaming is the way to go when transferring large data over network. [https://www.npmjs.com/package/socket.io-stream](https://www.npmjs.com/package/socket.io-stream) seems like a good library.
[It's part of the spec](https://developer.mozilla.org/en-US/docs/Glossary/Falsy), probably because of IE. The devs that be decided to make \`document.all\` falsey because of how people built their sites for old vs. new browsers. You can check some browsers like Chrome that have a valid \`document.all\` and its falsey.
Closures in programming languages aren't related to "closure" in math (or "closure" in psychology for that matter). Peter Landin coined the term, which was later picked up by Sussman and Steele when they designed Scheme. Consider: function returnFn(param) { var a = param; return function() { console.log(a); } } var result = returnFn("value"); What's stored in `result` after this runs? It's some kind of representation of a function, but what kind? Is it just a pointer to the code for `console.log(a);`? No, that's not enough because if you call `returnFn()` and pass different parameters, you get back functions that print different things when you call them. So the thing you get is body a reference to the function itself and the bits of surrounding environment it needs to hold onto. In this case, it's the variable `a`. Landin needed a term for "function + environment" and chose "closure" because it wraps up and bundles together the function and the environment it needs. Today, we say it "closes over" those variables. 
Difference between a call back and promise
React is an example of keeping state in a purely functional UI.
I did this exact thing for an interview a while back. Does the company name start with A and end in Q? If so, they seem like a great place to work. I ultimately ended up taking a different offer but really really liked what they were doing and what I gathered about their company culture. If not, disregard. 
I'm a little out of the loop, can you start using typed bind today by using your own wrapper with more specific declarations? Something like `function bind(fn, ...args) {return fn.bind(...args);}` but with appropriate argument and return type declarations?
Well, almost. What's the difference between these two statements? setInterval(increment(), 1000); setInterval(increment, 1000);
Actually the first question intrigued me a bit so I had to solve it, here you go: async function count() { let counter = 1; const values = Array.apply(null, { length: 10 }) .map((i, j) =&gt; new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; resolve(j + 1), 1000 * counter++); })); for await (const item of values) { console.log(item); } } What this does is it generates an array with values from 1 to 10, then maps it to an array of promises which return the values from the initial array, but in increments of 1 second by incrementing the counter. After that, I'm using an async iteration over it to log each item from the array of promises.
Great article, nice to hear some positivity about RN. 
The only problem with async/await is it's easy to make really bad promises if you don't grok what the underlying code is transpiling to.
It reads a little bit idealistic to me. Like they're providing a platform for both the students and the mentors. They don't see the mentors as service providers as much as clients, I think. They could also easily transition into a project that helps the community by positioning themselves as a platform for companies to assign employees to mentor students and recruit the smart ones. For my startup, I'm considering mentoring a couple to see if I can find potential coworkers. (I'd also consider doing it on the side for fun because I like being helpful -- I was a TA in college and I miss it) 
Yeah, since JS has "stack frames", shouldn't it be "stack capture"? &amp;#x200B; Maybe "snapshot"?
As I mention [here] (http://www.reddit.com/r/javascript/comments/9jakz1/-/e6ryr3n), I'm considering trying out mentoring to see if it's a feasible way to recruit. How do you perceive this and is it a use case you'd encourage, ignore, or discourage? 
Math and modeling are the fun part of coding. So much more so that the mundane data-pushing that is 99.9999% of the Net as we know it.
Hey, I actually graded this one and passed you onto the in-person. Let's just say you had some nice squares!
Per the website: https://surveyjs.io/Home/Licenses &gt; You can use SurveyJS Editor (Builder) hosted on our website for free, governed by our website’s Terms of Use. If you are embedding SurveyJS Editor (Builder) into your application, i.e. using it as a software library, we provide a free Creative Commons license for non-commercial usage and a paid license for commercial applications. See licensing details below.
You made this as complicated as I could possibly imagine an answer being.
good bot
Thank you, pythondude325, for voting on license-bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
I have never needed to use BigInt in my 2+ years of Nodejs or 4+ years of front end work.
I have read numerous descriptions of closures before and I haven't read one that was that clear. Perhaps you could address my next question in this series of thought, which is ... "why closures?" I never think to use them because the usefulness of that feature is not clear to me.
Careful, because functions aren’t hoisted to the same kinds of scopes that const and lets are limited to. They’re hosted to the top of the enclosing function or top of the script if not enclosed. Also (for OP) be careful if assigning a function expression to a var (as opposed to a let or const). The var itself is hoisted to the same scope level that a function would be hoisted to (func or global) but doesn’t actually contain that function until the code initializing it is met. My own personal best practices are function keyword when it’s permanent infrastructure; only use function expressions for defining methods or assigning functions as data; and arrow functions for lambda expressions and callbacks only, never “real” functions or methods.
 const delay = (ms) =&gt; () =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms)); let counter = 0; const increment = () =&gt; (counter += 1); Array.from({ length: 10 }).reduce( p =&gt; p.then(delay(1000)).then(increment).then(console.log), Promise.resolve() ); 
Fizzbuzz. I'm not joking. Most can handle it just fine, but a surprising number really can't handle it. I had one guy who was an industry veteran and friend of a co-worker, so we were all set to hire him, but then he took ... I think it was 18 minutes just to do fizzbuzz, and we wound up passing.
not sure why you're being downvoted. it's a totally reasonable question
THANK YOU Totally confused too. My experience has shown this to be a source of bugs. My guess is that people don’t know this and think I’m a bad interviewer because they don’t know it too?
If you're on macOS, I strongly recommend Dash. It's a local copy of most docs sites, well indexed, and easily navigable available with a system keyboard shortcut. You can even integrate it with your editor to look up highlighted methods. 
Check out the `State` data type: https://evilsoft.github.io/crocks/docs/crocks/State.html
Do you ever use higher-order functions like map and filter?
Had the same exact interview at the company. Loved their offices but decided to pass on the offer. 
A closure "closes over" (retains) the scope of its enclosed context.
In JS it's prevelant because of the asynchronous nature where it's reliant on callbacks and promises. It would be difficult to do anything if you couldn't structure chained promises in a single function to reuse higher scoped variables.
Precisely. There are some folks who have bought every JavaScript reference ever sold and they look up every detail. I don't understand why they prefer that to searching online, but it's none of my concern as long as they're delivering results.
I'd write `increment` to be a higher order function that accepts a `max` arg defaulted to 10, that retains a count let initialized to 0 in its closure, and that returns a function that iterates the count in a log statement until the count hits the max. I'd also close the terminal before it counted over 10,… just in case. 
IndexedDB
Honestly, if we're talking about things being overcomplicated, swapping to recursion probably isn't the right move. The parameter in the recursive solutions are fairly confusing, too. `count(9)` would only count for 1 second. const sleep = (ms = 0) =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms)) const count = async (seconds = 10) =&gt; { let i = 0 while (++i &lt;= seconds) { await sleep(1000) console.log(`slept for ${i} seconds total`) } } await count(5) await count() await count(1) Or, you know, just use `await sleep(1000)`.
Looks like you're right. I found more relevant information by looking up "Landin," and found these two quotes: &gt; A useful metaphor for the difference between FUNCTION and QUOTE in LISP is to think of QUOTE as a porous or an open covering of the function since free variables escape to the current environment. FUNCTION acts as a closed or nonporous covering (hence the term "closure" used by Landin). Thus we talk of "open" Lambda expressions (functions in LISP are usually Lambda expressions) and "closed" Lambda expressions. And: &gt; The reason it is called a "closure" is that an expression containing free variables is called an "open" expression, and by associating to it the bindings of its free variables, you close it. Computer Science borrowed so much terminology from math, and closure was existing terminology there, that it seemed highly unlikely to me that that _wasn't_ the origin. But, nonetheless....
It's likely you've made use of closure without even thinking about it or realizing it at some point. Any time you've returned a function from another function, or passed a function to another function, or used a function to return an object with methods in it that depend on the parameters of the main function etc. One common example is using closure to do privacy and encapsulation. function makePerson(firstName, lastName) { return { getName: () =&gt; `${firstName} ${lastName}` }; } let person1 = makePerson('John', 'Doe'); person1.getName(); // "John Doe". As you can see, that object's `getName()` method "remembers" the values of what lexically scoped variables it has access to And because of that closure, you can pass `person1.getName` around as a value to be called by other functions, and it will still work: function greeter(greeting, nameFn) { console.log(`${greeting}, ${nameFn()}`); } greeter('Hello', person1.getName); // "Hello, John Doe" This is a bit of a contrived example, but it demonstrates how closure allows a function to be passed around to be used by other functions, while retaining "knowledge" of what it needs to execute properly. 
No, I have read about them, but haven't really used them myself. Sounds like I need to focus on them. https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528
I bad no idea what this test was, pretty neat
Curious how recursion complicates anything. 
I agree that the expected solution was probably just the obvious `setInterval` solution, /u/a_blue_ducks' first one. But at the same time, my initial solution has spawned a great constructive discussion, it's cool to see how many different ways there are to solve a problem.
Events. Folks are relying more on frameworks, which are abstracting away the majority of browser interactions. Knowing what's actually happening in the browser is critical when debugging and optimizing.
This was especially relevant in C# (and probably Java and other languages though I didn’t use them at the time) when they first implemented lambda functions as first-class arguments, debugging tools represented the state as a “temporary” class where an instance of the class contained the function and the all environment scope as a tuple. If you used too many closures, the debugging length of these temp classes was really difficult. I think they’ve hidden the implementation detail now but it really helped understand the concept of function state in closures. 
Nice work. For something so simple it's surprisingly fun to play.
Ugh, lets consts and arrow functions. var counter = 1; var intervalId = setInterval(function() { if (counter &gt; 10) { clearInterval(intervalId); } else { console.log(counter); counter++; } }, 1000);
Do more with less. Bytes cost money (literally -- latency impacts the bottom line). I see wayyyy overcomplicated solutions for really simple problems. Keep it simple, keep it short.
I'm surprised at all the `var`s and `function() {`s, it's 2018, ES6+ syntax should be preferred. &gt;Q7: How would you check if a number is an integer? Use `num % 1 === 0;` This will incorrectly interpret strings as integers too due to coercion, like `'4.0'`.
Ha. I wrote on my phone and didn’t spot check but I believe you. 
for php(boo sorry but it works for me), I keep having to look up stack/needle order for strpos vs. array push vs. array keys it like it flips back/forward
Sorry you're getting downvoted for it. I tossed you an upvote for it, even though I think it could be improved (if we were aiming for simplicity, which isn't the only thing to worry about). Don't understand why anyone would downvote someone else for taking a shot at something. Especially since it works just fine.
oh man... if I had legal sourcing of adderall... pretty sure I need it... though maybe not I mean "I feel good" taking it, and cat sit down code for 12hours straight... doesn't like the intended effect of "being able to function normally" and then that threshold/cost... ahh well
Yeah sorry for my original reply, I had just finished playing Overwatch and that game puts me in a bad mood fast lol. This was a fun discussion.
Yes, it was acceptable as proof-of-concept. But because it was not the main reason of achieved performance, I've replaced it with path generation and have no loss in performance, maybe even improved it a bit. https://github.com/Freak613/stage0/commit/465bbaa57532834aa4ced6e0d744b50d08e6e536
of course I had to write it too: function countdown(n) { console.log(n); if (n &gt; 0) { setTimeout( () =&gt; countdown(n-1) , 1000); } } countdown(10); 
Well, I guess that's how some people disagree on reddit, by downvoting. That's alright and thanks for the upvote
No worries, I initially thought about writing the `setInterval` solution or the recursive `setTimeout`, something like: let count = 1; setTimeout(function counter() { console.log(count++); count &lt;= 10 &amp;&amp; setTimeout(counter, 1000); }, 1000); and then I said well let's spice things up a bit which really did lol.
Why would you want that? 
They are specialists.
I usually just Google and click the first MDN link. If there are none then I add "mdn" to my search string. Faster than Googling "mdn", click on MDN link, search MDN, then click documentation link. Yeah, I probably should have added MDN as a search engine in Chrome by now...
It's tempting to write something like: async function foo() { const result1 = await doSomething(); const result2 = await doSomethingElse(); const result3 = await doYetAnotherThing(); return processResults(result1, result2, result3); } This is inefficient because the first three calls are synchronous, so you have to watch for each call to return before the next one starts even if they are not relying on the previous call. What you really want to do is something like async function foo() { const p = [ doSomething(), doSomethingElse(), doYetAnotherThing(), ]; const [result1, result2, result3] = await Promise.all(p); return processResults(result1, result2, result3); }
Well, since you mentioned `.bind` doThis('foo', function() { something.doThat() }) should be `doThis('foo', something.doThat.bind(something))`
React (when used correctly) has a pure render. Meaning, given the same input (props and state) you get the exact same result. This is also known as referential transparency. The actions (DOM events) are effectful functions that can update component state, cause props to update, etc. These are not purely functional. Try thinking about the types of these functions, or look at the purescript wrappers for react. Any meaningful program needs some effectful functions, or it won’t be able to show any results. In haskell et al this is strictly controlled with types. In javascript (and many other PLs) you need to control this with discipline :)
React (when used correctly) has a pure render. Meaning, given the same input (props and state) you get the exact same result. This is also known as referential transparency. The actions (DOM events) are effectful functions that can update component state, cause props to update, etc. These are not purely functional. Try thinking about the types of these functions, or look at the purescript wrappers for react. Any meaningful program needs some effectful functions, or it won’t be able to show any results. In haskell et al this is strictly controlled with types. In javascript (and many other PLs) you need to control this with discipline :)
If you use Redux, you in? I tempt to use Immutable.js fort the confort and readability. 
It's a solid choice for sure. 
Can you give an example of when you've used prototype inheritance? I feel insecure, because I've never used it in about 3 years of professional work. Is there a need to use it if you are using a framework like Angular or React?
I was wondering if the images dimension would make any difference which is why I'm placing a 1x1px image on the top left corner. I'll check out if it works by using the images original resolution, thanks.
I recently did a bunch of interviewing and the only question that really stumped me was about the maximum number of concurrent connections a browser can have open. The answer is way weirder than I thought: https://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser
We usually give out a short exercise to fetch a json encoded array from a local API (containing image urls), then append the images to the document. jQuery is included for convenience. We give them 15 minutes alone with google allowed / encouraged, and tell them they can ask any questions they like during the process. I like that it covers a few angles, AJAX, looping, manipulating DOM &amp;#x200B; 9/10 applicants can't do it (Depending on other factors, it's not a instant fail of their application. One person we hired struggled with the DOM side because they have a Java background, not web, so we gave some leeway there. Another guy who said he had 5+ years web experience was less excusable)
That's what I tried already but after some research, it seems that an image has to be in the document for the browser to actually render and cache it to preserve memory.
If we're hiring you to build complex, HIPAA compliant web applications, and it takes you 18 minutes to code a for loop with three conditionals in it *in the language they'll be using for the job*, that candidate isn't a good match.
&gt; Not being sexist. Being a jerk works both ways. I was interviewing for a very well knows company a while back and the interviewer's questions essentially cast me as a racist. She asked shit like: &gt; So tell about the most recent event when you were prejudice towards a person of color? Uh, what? I guess my being an obvious homosexual wasn't *"marginalized"* enough to outshine my toxic, white, maleness. Jesus.
Check out SoloLearn. Its an app and there is one for each most popular language 
Reduce actually gives you the current index, so you can even drop the incrementer Array.from({ length: 10 }).reduce( (p, _, i) =&gt; p.then(delay(1000)).then(() =&gt; console.log(i + 1)), Promise.resolve() );
I tried Dash, but I'm more used to [devdocs.io](https://devdocs.io/). It has an offline mode and just feels better.
The original can get even worse: Object.entries(stats).reduce( (acc, [key, { value }]) =&gt; ({ [key]: value, ...acc }), {} ); 
Depends on what you do, what type of project you're working on. In your typical frontend project you probably don't use them much. But when you need them, you need them. How is Babel going to help?
Looks good to me, what’s the problem?
Really not trying to but the idea that you’d specifically try to hire someone that only knows a single programming language and see that as a benefit is crazy. It doesn’t matter what the language is you’re working in, broadening you're exposure with other languages is always a positive. That’s my point.
Everybody has to do that. PHP really screwed the pooch on consistency.
Can you people please for the love of God learn to name parameters and variables so that other developers can actually read what your code means? Why do you even do this?
IKR? My wife speculated I might have undiagnosed ADD. When I lived in Texas, my psychiatrist just shrugged and handed me a Focalin prescription. God**damn**, those pills get me through the day. I code better and have better job interviews. I just moved to California and had to formally take an ADD test. I mean, if I don't have an attention/focus problem, that's great for my ego, but now I'm hooked on Focalin like a San Francisco junkie.
From my experience `this` `bind` and `call` are useful when your code rely a lot on `class`. I try to avoid them as much as possible because people don't understand `this`
Not es6 enough! Get rid of those curly braces and returns!
You can get part way there, but I think partial application will require actual variadic types since your arguments are now two variable-length tuples. Basically you can't currently do anything like this: type BindFn = &lt;T, U, A extends any[], B extends any[]&gt;( fn: (...args: A, ...rest: B) =&gt; U, ...args: A ) =&gt; (...args: B) =&gt; U; If you're binding *all* arguments you're golden though: type BindFn = &lt;T, U, A extends any[]&gt;( fn: (...args: A) =&gt; U, ...args: A ) =&gt; () =&gt; U;
Yes i've worked with time recently, interval and timeout are way too much unreliable.
Ehm, I do think it could help. There are lots of exercises of varying difficulty. Much can be learned from seeing a student approach a problem. As for if it is something I'd encourage, I don't think I'm the right person to say, as I am only a student/mentor and not the site's owner. Maybe you could contact Katrina Owen ([https://twitter.com/kytrinyx](https://twitter.com/kytrinyx)), the owner, to find out what she thinks about this?
In my experience with Angular, or TypeScript for that matter, you don't need to know it as much. However, if you look into the transpiled code of class inheritance, you might notice it is actually using prototypes. I wouldnt say it's something you need to know as some people put it, but it is definitely nice to know how it works and how the things you're working with are created.
you are very welcome. I'd say my JavaScript knowledge is senior level, but when i went through the whole site, from start to end, there were still some concepts, that i apparently didnt understand as well as i thought. so i can really recommend giving everything a thorough read when you got the time. JavaScript is ever evolving and vast. no matter your skill level
I'm testing stage0 for around a month and was able to apply it for all possible cases that I've met. I was able to build material-ui alternative with stage0(it's not public yet), and being so close to the metal I had better controls over styling and complex animations, because it can be done without unnecessary updates. Yes, stage0 doesn't have its own rendering pipeline, forcing you to build your own, I just provided example with `update` calls. And reconcilers missing callback for removing for now. I can't understand why would I need `disconnectedCallback` for simple view-components, but can understand it could be needed during routing to turn off all page-related stuff, but it's still the matter of how developer will organize the code. stage0 is just a set of tools, that doesn't force any restrictions to dev. And yes, you can combine it with web-components if you need to.
Shouldn't you avoid setInterval completely for this problem, considering there is no guarantee the function will be run every 1000ms (in the case of the event loop being blocked on other work)? Would a more acceptable solution be to use requestAnimationFrame, and do a comparison using Date? Or does that suffer the same issue of potentially being blocked by other work?
increment() execute when you use setInterval, its return value will be used in your setInterval. The other use increment. var obj = {count:0, end:0, clearId:0}; obj.end = 10; obj.increment = function (){ if (this.count &lt; this.end + 1) console.log(this.count); else clearInterval(this.clearId); }.bind(obj); obj.clearId = setInterval(obj.increment, 1000); How about something like that, untested, but it should work.
Good use case for bind here. We can create a new bound function instead of creating an anonymous arrow function in setTimeout. Optional second parameter for counter size, default to 10. function count(i, max = 10) { console.log(i); if(i++ &gt;= max) return; setTimeout(count.bind(this, i), 1000); } // call like count(1)
requestAnimationFrame + a comparison using the Date object would be better. At least the date comparison guarantees accuracy, even if not run every second. Like you said, setInteral could cause a drift if the browser is blocked on another call for over a second.
&gt; I can't understand why would I need `disconnectedCallback` for simple view-components There are many edge cases that would require different hacks like attaching event listeners to `window` to catch mouseup events outside of a component. &gt; And reconcilers missing callback for removing for now. The problem is that you'll need to propagate this callback through entire subtree.
fiction
Hmm.. I always got error when returning object.. Turns out I need to wrap it in \`(\` and \`)\`.. Thanks for the tips..
All my parameters are one and two letters.. I dont even need to minify..
Found the problem, see my second edit if you're interested.
You're evil
yes, of course. but they should understand **why**, and how it helps them solve problems outside the scope of their knowledge.
That's the worst excuse for illegible code I've ever heard. I want to frame this quote.
I agree with the general principle, but it's easy to go too far with that. Latency *can* impact the bottom line, depending on the nature of your site and the size of the latency. But dev time also costs money as well. So spending a week rewriting a function to shave a few hundred bytes off your download size and ending up with a tiny, but unreadable, function stands a fair chance of costing you more than it saves in user impacts.
how many frames you gotta request to hit the downbeat of each second?
Also, browser events propagation is good to help here. It allows to stop propagation if event is handled by something or keeping it go up the tree.
As vanilla js project get larger you'll notice the more they tend towards spaghetti. For me the first and biggest win from learning about closures was the ability to break js code into more manageable chunks. https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript
I would take advantage of async/await. It's the most clear and obvious syntax IMO. function delay (ms) { return new Promise(resolve =&gt; setTimeout(resolve, ms)) } async function countdown () { for (let num = 1; num &lt;= 10; num++) { console.log(num) await delay(1000) } } countdown()
Why would you ask such a question ? Unless you want to humiliate the person sitting right across you. &amp;#x200B;
&gt; But didn't you have like open/close API for that in component But who will invoke a `close()` method when it is removed from the document. And usually you don't need to close it, you just need to clean up external dependencies when it is removed from the document. Imagine a more complicated edge case when you need to integrate something like ProseMirror, you'll need to invoke a `destroy()` method when it is removed from the document.
I wonder what makes people write completely unreadable code. And it's not even about other devs in a project but in 6 months you won't know what is going on in your app
Unless the compiler is smart enough to see that the second argument to `reduce` is a literal, the compiled version will also mutate the argument instead of creating a copy. 
Thank you for the suggestions. I will be definitely implementing those with the next update. I have got tons of things to learn about github and js. :)
What compiler is this? That’s a pretty serious bug. 
Funny I had to use it in my first 2 months. Cryptocurrency relies on it. 
&gt;Thank you for the suggestions. I will be definitely implementing those with the next update. &gt; &gt;I have got tons of things to learn about github and js. :) &amp;#x200B;
Sorry but nothing can beat Stackoverflow (which is mostly the first link available)
&gt;I have never, not ever, run into a situation where I thought: "Gosh, strong typed JS all over the place would have fixed this!" Perhaps you're just not working on large enough projects? I don't think I've ever seen a sizeable JS project that hasn't suffered due to ambiguity around types. It's the sort of flaw that becomes a lot more obvious once you've worked in other typed languages (e.g. Haskell, Scala, even C++)
All of this. I meet so many candidates that can write a reaction component but can't tell me the value of `this` in a simple function.
You don't need that anymore. Just use plain object destructuring and spread.
I think knowing only JavaScript is the mistake. 
There's no excuse for failing a fizzbuzz.
The $10 an hour usual suspects companies then pay $200 ph to fix
Try stuffing something like jQuery or leaflet into angular... I have to use bind so often 😪
That seems to me to be very complicated. Here's my attempt: function countTo(current = 0, to = 10, timeout = 1000) { console.log(current); if (current &lt; to) setTimeout(() =&gt; countTo(current + 1, to, timeout), timeout); } countTo(); A simple recursive function. No hip ES6+ magic involved because you don't need it. No promises because we're not computing anything, we don't need async functionality, it's a simple `+1` operation.
Would it bother you if a candidate ignored jQuery and used the fetch API instead?
I'd love it personally! Realistically, as long as they can get the data I wouldn't care what API they use
Which: 1. Never happens 2. If it does, flee the interview Seriously. What are you guys talking about? What JS app hangs for 1s or longer? The task was to just do a `+1` operation every `1000` ms. If I'm the interviewer I'd throw your resume in the trash if you came up with that kind of solution. You're not wrong, but for the love of all that's nice in the world, I certainly hope you're never going to be right... Accounting for problems and solving them before they occur is great. But that's obviously not what this test is aiming for...
And even when it is useful, it often takes quite a while longer to read and find the relevant section to what you need to know. So under a time constraint like a test, I'd be even more likely to just Google instead of using official docs.
Doesn't your editor/IDE tell you?
Wouldn't this be a DOM thing, not a JS thing?
imgur Community Extension https://chrome.google.com/webstore/detail/imgur-community-extension/ehoopddfhgaehhmphfcooacjdpmbjlao?hl=en https://github.com/williamparry/imgur-Extension could do with some help. Good timing for Hacktoberfest too :)
9/10 ppl blew up with some random answers 😁
Are you fucking serious? I’ve been writing JS for over a decade, and in an interview situation with pressure and stress I’d probably take 15 minutes to write fizz buzz, unless I’d recently had to write it (which I haven’t).
#Diagnosing performance bottlenecks. Seriously, learn how to use Dev tools.
Looks fine to me since the object is newly created as the last param to reduce.
A normal GET form that would redirect to search page? The only js here would be to set hidden input value when you click a button. Search page would have params like this: /search?type=sell&amp;city=helsinki That type would come from a hidden input that you will change using js.
looks nice. i saw the codepen demo. I am not pro in testing and SSR but i am willing to help in anyway i can. I have DMed u my github handle pls do give a connect. :)
lol the "implement quicksort" types of questions. It's like, mate I could write you an Alexa skill that will walk you through website performance diagnosis to fix your site during the course of this interview, but honestly I can't write quicksort - the only thing I remember from university is tits and pro evolution soccer 5.
looks interesting. but I dont think Im capable of doing something as complex as this :( . sorry!
That people ask themselves this question boggles my mind, you have a problem and you solve it with whatever is at your disposal, period. You don't grow as a programmer by forcing yourself to study theoretic programming puzzles but by programming something real. Actual challenges will come soon enough, libs or not. The whole point of a library is that it establishes a pattern or a structure that makes some task easier. Sometimes it helps to have at least an idea what's going on underneath, sometimes it doesn't matter *at all*. The people that are crying "vanilla" trying to coerce others into learning the aging dom api, appends and queries and all this nonsense, do it if you want, but you'll waste time you could otherwise put into writing real applications. Kind of this is what creates the split between pragmatic developers and those that know a lot of theory.
&gt;sure ill take a look at the extension :) thanks. never worked with chrome extension but I suppose i can pick it up in a day or two. 
Oh yeah I messed up there, the first one would be invoked immediately and the second one after 1 second. I would make it stop with an if statement, maybe that approach is wrong haha
Rocket.chat 
I'm not sure I like this solution. It is going to lock up whatever process calls count and that might not be desired.
The aspect of programming that touches on raw cognitive capacity is probably the most difficult to "learn." My brain is like made for it, but I'm utterly hopeless at everything else in life instead. A portion of programming comes down to pure smarts, and unfortunately there aren't too many ways of getting around that.
This is the right way to do it. const times = [0,1,2,3,4,5,6,7,8,9,10] const getNextTime = index =&gt; { $('time').html(times[index]) if(index === times.length - 1) { setTimeout(()=&gt; $('time').html('PEW PEW PEW') ,1000) } else { setTimeout(()=&gt; getNextTime(index + 1) ,1000) } } getNextTime(0)
Nice work man, quite clean code!
Just wanted to say, that's some really nifty code right there. Have some kudos from an internet stranger on this Friday
I would fail to write fizz buzz because I have no idea what it is. Really, it seems you're looking out for people who have memorized the solutions for the problems in "How to pass an interview" instead of for real world developers. 
In this context it doesn't really matter. For simple map/reduce/filter functions I believe one char variable names improves the reability. And if you are familiar with iterators you don't really need names in this example. 
Eh I use a for loop when there is a side effect, so if I see a for loop I subconsciously think that a mutation is happening somewhere else and to keep that in mind. With a map/reduce function I assume that all the data needed and mutations are self contained. I guess these aren't standard assumptions but the logic follows from their use cases.
Out of my depth here, but using something called requestAnimationFrame and Dates for a timed counter surely can't be the most sane solution?
I suppose it depends on how much you trust yourself and your co-workers.
The question is do you want to create a real mobile app or just a website optimized for mobile users? If you want to create a real one then I recommend using Native Languages but as you want to do it in JS then you should take a look at the following: - VueNative - React-Native - Flutter
It won't swallow syntax errors (except in eval). But yes, it'll catch all the runtime errors. IMO, you should probably have a second try/catch around the rest to handle any issues with it, but that is going to depend on what the code is actually doing and if it actually needs code to handle errors. I can't think of very many instances where I'd need to catch an error for the first part of something but not later, but I guess it's possible. In the end, this looks like code that I'd question, but eventually pass through a code review after hearing your reasoning. You should probably comment it to say why you're doing that, though.
It's not even in the ES spec yet...
I think I wasn't clear, the part outside of the try/catch is completely synchronous, and I would not normally use a try/catch to handle errors there. Just check for array out of bounds and undefined variables. Now, I know I can still do those checks inside the try, but what I'm wondering about is during development, when I don't realize yet that those errors are possible. Then I get invisible runtime errors. 
Event Emitters in node too...since not all JS is browser side these days I think events can be a good question for front and back end
&gt; I don't even know how to start with you. I’d taking any of the points above and providing a counterpoint. I mean that without any sarcasm. I’m more than happy to debate this without insults. &gt; Essentially you're saying you wouldn't hire a translator that can only translate English to Spanish and Spanish to English because not knowing French. I’m not highering a translator. I’m highering a software engineer. That’s a straw man argument and I don’t think we need analogies here. &gt; If a persons job is to write javascript, then it's ridiculous to impose a penalty for not knowing languages they won't be using as part of their jobs. My comments have been entirely in regards to highering. I’ve said nothing about punishing an employee. When you’re highering you have limited time and information to gage someone’s effectiveness as an engineer. It’s completely valid to make predictions about a perspective higher due to lake of bredth of experience.
Trust shouldn't come in to it. With a large code base and team of varying skills I prefer to remove trust from the equation. This does that. But like with other things, the places that need it the most are less likely to have it...
Jesus, clutch my pearls. I would have just stood up and left, in a perfect world but DADDY NEED MONEY
I think I'm always a fan of using the native solution where possible. The reason being that if developers, especially Junior developers become invested in a library, it can become difficult to code without it. I see this all the time on SO, where someone suggests using jQuery to iterate over an array. I never want my developers to become stuck.
They solve the same problem but a promise also helps prevent spaghetti hell.
Then simply log out the errors in the catch. You could even create a class that stops logging those errors in the production build and only logs them in debug builds. (Or create a cookie or use a URL parameter to turn debugging on.)
They accomplish the same goal, **but** you can pass promises around as if they’re values. That’s something that’s not easily possible with callbacks.
ADD is bullshit, basically artificial "evolution" giving ppl Adderall. Humans didn't develop needing to put so much focus and attention to a single specific task day in day out years and years on end. I was diagnosed with ADD simply by reports from my 6th grade teacher. I refused any pills as I had a friend who was on them and we all felt they made him strange, since we knew him before he began taking them.
You don't have to know what it is beforehand. It's a children's game that can be described in under a minute.
&gt; Program in the right way and you don't need to worry about these things. Sure, until you start work in a team or get to work with a ton of legacy code. call/bind/apply is not obsolete at all, it's like saying you don't need to learn what those funny yellow lights are on the side of your car, the car runs just fine.
Your problem is that your "problem solving skills" are not good enough, so what do you want to improve about your problem solving skills? Define your desired outcome and look for ways of achieving that. You need to be specific. Do you want to solve problems faster? Do you want to make less mistakes? Do you want to be able to see more solutions? Do you want your solutions to be more flexible? 
You raise a valid point. 
 for (let i = 1; i &lt;= 10; i++) { setTimeout(() =&gt; { console.log(i); }, 1000 * i); } 
You may use `catch` instead of `try...catch` to get rid of the `response` reassigning but you won't escape the rethrowing. ```js // No wrapping in try...catch here. // If something is thrown or rejected by `attach_field` and // then rethrown/rejected in the `catch` then it propagates out. const response = await ObjectTypesFactory.attach_field({ id: this.object_type_id, field_id: this.selected_field_id }) .catch((err) =&gt; {/* Handle the type you need, otherwise rethrow. */}); ``` In [this article] Eran Hammer shows a Bounce library they have created to `rethrow(err, types)` or to `ignore(err, types)` errors. [this article]: https://hueniverse.com/learning-to-throw-again-79b498504d28
Is it really that big of a time investment? 
When will they update the official language standard? 
so you're parsing *all* frames to catch a time interval? how does that profile?
most companies don't actually use them in their code, though
This is the exact solution I was scrolling for. Good job.
plus they can still whine that they can't find good candidates
One more remark: ```js let response; try { response = await ObjectTypesFactory.attach_field({ id: this.object_type_id, field_id: this.selected_field_id }); } catch (error) { // `response` is not defined here because it wasn't assigned. // It wasn't assigned because the right-hand side of the assignment `=` thrown an error. $rootScope.handleFormResponse(response, this); return; } ```
When I started teaching myself to code, one of the first things I did was make a snake game using jQuery. I didn't know about things like Canvas yet or even really what jQuery was to javascript, but how I approached the logic is very similar to yours. It even has this same bug!
Squarespace does a lot of great FE work but I feel like they're concentrating on the wrong things. For DS&amp;A, keep doing problems on hackerrank, etc.
&gt; Same goes for things like making use of promises or simple AJAX requests. Not everyone seems to understand those are asynchronous operations and you can't just return their contents into a variable, and then synchronously make use of the variable after. Umm.... this is literally what async/await is. You await the function that returns a promise, storing the response in a variable, then using that variable in synchronous operations later. &amp;#x200B;
Can confirm, I was a total piece of sh*t at it, I’m not totally anymore, put in the work helps a lot
Maybe I'm missing something, but if you're already writing typescript, why would you use babel over tsc? Does babel give you anything more than tsc does? Webpack has had a typescript compiler/loader for a while now, that's basically what I'm using in all my projects now. Babel might be easier to get up and running than webpack, but I don't see a reason to use babel over the others. 
I first learned about closures long before I was a developer. The concepts of open/free and closed/bound variables are essential to the discipline of predicate logic. I'm not sure when they originated historically, but [Frege](https://en.wikipedia.org/wiki/Gottlob_Frege) deserves a lot of credit for predicate logic, so I'm guessing the terms are pretty old. I came by them in logic course in 2001 taught by a now-retired philosophy professor. In logic, we talk about *formulas*, whether they are *well-formed*, and what kind of "meaning" the variable terms that they contain have. In JavaScript, by analogy, we have *expressions* which can also be *well-formed*, but JavaScript expressions have "validity." In modern (strict) JavaScript, this is well-formed: increment(x) But it isn't valid, because x is undeclared -- it is "open." In strict JavaScript, expressions with open variables are invalid. So let's close it. const x = 1; increment(x); Now `x` is no longer open; the `const` statement "closes" over `x`. This is a closure, albeit a very boring one. Here is how the two examples might look in predicate logic, respectively. Logic isn't procedural like programming, so there are some differences, but the important part is the variables. First, here is the "open" expression: incremented(x) = 2 Next, the "closed" expression, which provides "meaning" to variable `x`: ∀x (x = 1 → incremented(x) = 2) Structurally, these logic formulas are very similar to the JavaScript, above. The terms "open," "closed," and "closure" are applicable to both the JavaScript and the predicate logic alike. PS: Alan Turing, Alonzo Church, and Haskell Curry were logicians.
While what you say is true, you can easily fall in this trap and develop a wasteful behaviour. I guess a balance is needed. &amp;#x200B; You can check more in [this](http://tonsky.me/blog/disenchantment/) article.
Word up. And math borrowed so much terminology from logic -- see above.
I realize I can do this with a alphabetized hashtable, but I'm wondering if there's a library that achieves the goal with a lower time complexity than O(n) = 1.
Checkout [up-for-grabs.net](https://up-for-grabs.net) to find some projects that are welcoming new contributors. The site aggregates issues that are specifically tagged as a good place for an outside developer to start contributing to a project. Just recommended this to someone in another thread too. IMO a brand new project thats just starting is not likely to have the infrastructure in place to handle a completely outside developer walking on and taking a major contributors role, especially if that contributor doesnt have domain knowledge around the problem set, or a reason to stay committed to the project (like needing to use the project in their own work, for example). 
What? Hell no. We have a big codebase and even just transitioning from javascript made obvious tons of bugs. Bugs is a given on a big software. Typescript makes catching bugs much easier. Also, don't get me started on writing slow code! Writing code with typescript is soooooo SO much faster because of 2 main reasons: tslint.autoFixOnSave, and autocompleting arguments all the time! Workflow with js: Should this variable be const? Let me check. Did I forget a semicolon? Is this variable defined? What is the attributes of the object that this function returns / accepts etc (can be fixed if you fix that with tedious jsdoc) Workflow with ts: Save the file. Everything that should be const, now is. Semicolons are added as the should be. Everything is autocompleted. A blast.
Oh, maybe I was whooshed then...
I'm afraid If you are not familiar with JavaScript there are many pitfalls when coming from OOP languages like Java, even for an experienced programmer. That being said the functionality you need is extremely simple, you just need to use [expressjs](http://expressjs.com/) framework that you can download with npm. You can find many tutorials on making an API with express. [Filesystem](https://nodejs.org/api/fs.html#fs_file_system) is built into node.
&gt; If I'd have a unix timestamp for userBornOn and someone turns it into a string for whatever reason, then their work will simply not pass through our pull requests. And even if it does, unit tests will catch it. And if they don't, our automated E2E tests will catch it. And even if they don't, then maybe our software doesn't really care and neither should we, or we have a bug we can easily fix. Yes, and, as known, it's totally faster for development if something is to fail during CI/CD rather than your IDE telling you immediately about it. /s &gt; The thing is, TS is an immense time investment. Especially in bigger projects. The learning curve takes so much time for people to get it right. What learning curve? I had never worked on it and within a couple of weeks I was able to transition a huge project, unit tests and all, into typescript. Setting a type into things requires a huge learning curve? What. &gt; I'd rather save hundreds of hours of time if the tradeoff means spending a few more hours on fixing bugs that are unlikely to happen in the first place. In my experience typescript SAVES tons of development time, because it catches bugs before they even happen. Imagine how much time that saves from introducing the bug, deploying (oops, unit tests didn't catch that, because it was a Viewer issue that just rendered a variable), the end user reporting it in a ticket, your developing team looking into it, debugging the code, re-deploying. Now your IDE just catches that. With the very small trade-off of you having to declare the types. I really try to see your point, but having myself experience with big javascript projects and knowing that the world is not perfect, typescript sure is a life-saver.
I was in bed by the time I read this response, but here is how you could write a recursive solution that takes params and abstracts away the sleeping. &amp;#x200B; &gt;async function slowCount(currentNumber, end) =&gt; { &gt; &gt; console.log(currentNumber) &gt; &gt; &gt; &gt; if (currentNumber &lt; end) { &gt; &gt;await sleep(1000) &gt; &gt;return slowCount(currentNumber + 1, end) &gt; &gt; } &gt; &gt;} &amp;#x200B;
Babel gives you much more control over how new language features are transpiled. With babel-preset-env you can just specify which browsers you want to support, and it will automatically only transpile the features those browsers are missing. With TypeScript you have to figure out which of the possible "target" options work with your supported browsers, and then you'll end up transpiling a lot of stuff that they all support because you can't pick and choose individual features to compile. This can have significant performance implications, both in terms of bundle size and execution speed.
Always contribute to project which you **use**. Otherwise you lost the interest very quickly.
Why would you avoid using setInterval for exactly the thing it was designed for? If you have a blocked event loop, you've got bigger problems. Writing non-idiomatic code without exceedingly good reason is the path to code that is harder for team members to grok and thus maintain.
I'd rather hire a brilliant dev with bad breath than an average with minty fresh.
async/await uses promises under the hood, so you can use both async await and promise chaining methods interchangeably. so you could do: const response = await ObjectTypesFactory.attach_field({ id: this.object_type_id, field_id: this.selected_field_id }).catch(asyncErrorHandlingWhateverIDunno); Bear in mind that the return value of `asyncErrorHandlingWhateverIDunno()` will be assigned to `response`, so make sure it's appropriate for whatever checks or operations you'll be doing later with `response`. 
async/await is not part of a widely supported JS spec yet. I would not expect an interviewer to be using features like this. And regardless, my codebase at work is not making use of these because we are coupled to a version of TS that doesn't support them. That means if an interviewer gave async/await as an example, I would still need to know that they're not reliant on this and actually can deal with async code the "old" way. If you know async/await but don't have a mastery of Promises, you'd be useless to my team.
The use javascript only, and think they are good programmers.
Don't know of a library, but this is something from way back when, and uses PHP and MySQL: https://www.webdeveloper.com/forum/d/156977-resolved-scrambled-word-decoder/9
Yeah this right here... Non-standard solutions require extenuating circumstances to justify them. If something like setInterval isn't working in your app reliably, the bug isn't setInterval, it's whatever other shit you've got going on that is causing it to work unreliably...
If an error is thrown here you’ll be calling your handler twice. That’s not intentional right?
If they don't bother brush their teeth before a job interview, it says a lot about their personality.
That's not it's name.
If you understand REST APIs in general you’ll just want a cheat sheet and maybe read an article or 2 about best practises for writing APIs in Node. If you’ve got literally 0 knowledge of the web, can’t imagine that’s the case, then go through HTTP basics. Small Node APIs are often incredibly simple
m8 you might be surprised at how off putting someones lack of shower habits can be 
Did they actually require you to do this in nodejs? Java can serve as web Blbackend just fine.
Even then the arrow syntax proposal that's supported by both TypeScript and Babel eliminates the need to use the latter two entirely. 
Yea, we used to do a very similar one. We’re a bit more ‘selective’ now and do more algorithmic/puzzle challenges. But when we used to do the straight code challenge in ours we’d mix it up so that we’d hand them broken code and have them debug part before completing the ‘feature build’ portion. It’s so much more about seeing that someone can look at code they’ve never seen, read it, interpret it, have a conversation about it and respond to it than it is some ‘perfect’/‘clever’ solution. 
&gt; You need to be well groomed. I'm not saying you need to look like Patrick Bateman, but you need to have made an effort. I understand your reasoning, but this may lead to missing out on great developers who aren't big on presenteeism i.e. bullshitting you.
In a strongly typed language you cannot type a property with the wrong name, because it doesn't compile. Of course typescript will not catch the logical bugs
26 questions I'd never ask in an interview I honestly couldn't care less if you know the ins and outs of JS, Ruby, or Python (the 3 primary languages we use). I care that you can code. Details can be picked up later
\&gt; Not being a zealot about 1 technology. This is my top reason for rejecting people, and in my previous work, where I had to interview lots of developers, I heard it in 1 of 4 interviews. When people said "&lt;language&gt; is garbage." it was an instantaneous NO on my notebook. Dude, if I need you to start a business-critical thing in FoxPro, COBOL, JavaScript, PHP, Ruby, Java or Brainfuck, I need an open-minded person that would at least think about it, not an elitist jerk.
I agree that making progress is extremely important for a new programmer. Definitely do spend as much time as you can learning vanilla js and the foundations of the language, that will never be a bad idea. But in terms of momentum and time invested, its best to finish actual projects rather than try to reinvent the wheel every time. In reality we only have so much time, motivation is finite, and learning to code can be very frustrating. You will certainly be exposed to a lot of parts if the language trying to implement everything in vanilla as a beginner, but will you be productive? No, you will not. You are also unlikely to understand what mistakes you have made, and why they should be avoided. 
It does say how to check if a _number_ is an integer, not a variable.
&gt; Random smatterings of ... "react" You sure about your level of JavaScript mate?
Thanks, your answer is very useful, I am having a hard time of selfconfidence right now and sometimes feel like a total dumbass hitting random keys.