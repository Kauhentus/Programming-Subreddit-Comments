I know, but it still complicates using it in open source projects with other licenses.
My DB professor was literally Dr. Null. https://harrisburg.psu.edu/faculty-and-staff/linda-null-phd
Yes, but it's a third-party library *feature,* not a JavaScript quirk. OP wrote a bug because he didn't understand the implementation. That is a problem that is by no means specific to JavaScript. I think that's what is being said. And yet, the code which contained a bug was written in JavaScript. I see both your points. I'm personally of the opinion that calling it a JavaScript-related bug is a questionable statement because you could write a similar bug in literally any language that can parse JSON.
Hmm no not really I'm not doing anything prototypal. Okay thanks!
1,000 people with this name out of approximately 7.3 billion people in the world. That's an edge case affecting 0.000000137 percent. I don't need to change my code for that.
"Never trust the client"
The trick to being a good Javascript developer is shooting yourself in the foot with all of its provided footguns. Eventually Javascript runs out of ways to screw with you; well at least until the next framework is released that introduces more footguns.
Yes it looks like clean and modest 
https://tylermcginnis.com/ has some really great stuff. I think his first React course is free.
https://www.youtube.com/watch?v=A71aqufiNtQ
Be careful with this, especially with `addEventListener`. The `bind()` method returns a new function, so if you use it inside `addEventListener()`, you end up creating an unretained, anonymous function and lose any chance to release it later with `removeEventListener()`. This is the reason why many people use `bind()` in the constructor: class MyClass { constructor() { this.element = document.querySelector('.target'); this.handler = this.handler.bind(); } handler() { // handle the click // `this` should point to this class instance, not the event owner } disable() { this.element.removeEventListener('click', this.handler); } enable() { this.element.addEventListener('click', this.handler); } } I know that a LOT of people hate this pattern and there are other ways to do it, but this is a pretty clear way to ensure you can clean up after yourself.
Unfortunately no. CKEditor 5 is more of a project name. It has nothing to do (in terms of the code base) with CKEditor 4 and both editors (CKE4 and CKE5) will be maintained for a long time together. That was tricky to communicate. Similar issues to e.g. with Angular 1 and 2+, but they decided to change the name from AngularJS to Angular to make the space for the other project and can bump the major version.
Well the name thing is rather complicated... The editor is called "CKEditor 5". So the number 5 is a part of its name. At the same time we wanted to its versioning to follow semver so a while ago it was going to be "v1.0.0" (as in semver). But then it might be also confusing with CKEditor 4 versions, so we have "CKEditor 5" in version 10.0.0 as a start. ps.: I've proposed "CKEditor V" (like in GTA V) but others didn't like it much :/
LOL
Interesting. I'd opt for making a private npm package with the shared components so that it interfaces with the existing tech and configs and has versioning and branch versioning. It would certainly be better when dealing with more than 2 projects. I'm currently working with [create-react-library](https://www.npmjs.com/package/create-react-library) for this purpose.
&gt; It's more jQuery/not understanding jQuery. Idk, the dude who pitched the idea is in this thread saying he messed up on suggesting the idea in the first place. Maybe it's really no ones fault.
Every day is a breaking day
This will never start
1) The title. "10 Best". This is not only clickbait, but also wrong. 2) Angular placed first in the list. Then React. And Vue on #8? Hello, this is 2018! 3) Mithril isn´t even mentioned. But Backbone and Knockout! Oh, and ExtJS? I went WTF over that one. 4) No mention of state/unidirectional flow vs. two-way data binding. 5) No reference to how these frameworks was ranked "best". 
It's 1000 people in the US, so 1_000 / 325_000_000 or 0.0003769%. 
Any reason why you didn't use react portal? 
Thank you so much. We are also happy for releasing this under MIT.
Your response is /r/bestof worthy. Reddit is a truly odd place.
Input: data = [ { first_name: 'first name', last_name: 'last name', date_of_birth: '2003-01-20' }, { first_name: 'first name22', last_name: 'last name222', date_of_birth: '2009-01-20' }, { first_name: 'first name33', last_name: 'last name33', }, ] Code: function extractMostRecent(list) { return list.filter(p =&gt; !!p.date_of_birth) .sort((a,b)=&gt;new Date(b.date_of_birth)-new Date(a.date_of_birth))[0]; } console.log(extractMostRecent(data)); Output: { first_name: "first name22", last_name: "last name222", date_of_birth: "2009-01-20" } If you want it a bit fancier... const has = p =&gt; o =&gt; !!o[p]; const hasBirth = has('date_of_birth'); const compareDates = (d1, d2) =&gt; new Date(d2) - new Date(d1); const younger = (a, b) =&gt; compareDates(a.date_of_birth, b.date_of_birth); function extractMostRecent(list) { return list .filter(hasBirth) .sort(younger)[0]; } You may prefer to keep it in one loop using reduce. Then, using those same helpers you _might_ do something like... data.reduce((youngest, current) =&gt; (hasBirth(current) &amp;&amp; younger(youngest,current)) ? current: youngest )
Why would placing the id in the address bar not be friendly? If I look at the address of your post for example, its id seems to be [8f7q4e](https://www.reddit.com/r/javascript/comments/8f7q4e). 
If you're working with "create\-react\-app" you should be able to create arrow methods. That way you don't event need to bind.
Dont you ever apologize. Eternal thanks for your excellent work!
I love this game.
So, where can we find the repo?
Only If it's a site in US, for US people.
True, but we only have statistics for the name Infinity in the US.
[Relevant\(ish\) xkcd](https://s1.qwant.com/thumbr/0x0/0/7/112b97ff1186c24fdca4eefa2946e848de1f55378ba6e1c33baaa4a8a3582d/exploits_of_a_mom.png?u=http%3A%2F%2Fimgs.xkcd.com%2Fcomics%2Fexploits_of_a_mom.png&amp;q=0&amp;b=1&amp;p=0&amp;a=1) 
As an alternative to other valid solutions, you might want to separate your class that represents whatever it should represent from access ans manipulation of the DOM.
Sweden here, we have two (official source): http://www.scb.se/en/finding-statistics/sverige-i-siffror/namesearch/Search/?nameSearchInput=infinity
Interesting, I'm surprised there are any at all. Doesn't Sweden have strict rules on what you can name your kid?
It’s a bugged part of that feature, is not?
I always upvote Bobby Tables.
It's a pretty useful feature overall it's just a shame the data is stored in a DOM attribute that can also be accessed in other ways.
Relatedly, there are over 2000 really fucking stupid parents in the U.S.
Many npm-modules with a native builds do currently not work on node 10. I recommend to stick at 9.x for at least 30 days. Then you can switch.
No sure where the 1000 comes from only 511 in the last data I have. 
The down and dirty of what's happening here is that your method, when passed into addEventListener, is not retaining its context. Normally, methods know their context (what `this` is) because you call them from the instance which is to be used for their context. c.doAction(); // `this` in doAction is c because its called from c When you separate a function from its instance, it doesn't know what to use for `this`. const doAction = c.doAction; doAction(); // no reference to c, can't use it for `this` This is because of how methods in classes are defined in JavaScript. They're added to the class prototype which is a set of definitions which is shared among all instances, inherited through the prototype chain. One method is used for all instances, and how it knows to use the right `this` is determined by how its called, for example looking to the left of the dot operator to find `c` in the earlier example above. Though I used a variable to show the loss of context in the doAction example, the same applies to passing methods in as arguments to other functions, other functions like addEventListener. this.selector.addEventListener("click", this.makeSound); // only method is passed, not a reference to `this` When addEventListener needs to call makeSound to respond to a click event, it can only call it as `makeSound()` and not `this.makeSound()` meaning makeSound doesn't know what to use for its context. In the case of addEventListener specifically, it will set the context for you, using `this.selector`, the object from which addEventListener was called (which is addEventListener's call context). This is unique to the implementation of addEventListener. Otherwise, normally, functions will use the global object (`window`) or `undefined` if in strict mode when called without a context. There are a number of ways context can be changed when calling functions. If context is not being captured from the object its called from, it can also be set using the [call](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) or [apply](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) methods in functions. This is an alternative way to call functions that let you set context for a specific call. const doAction = c.doAction; doAction.call(c); // c will be used for `this` You can imagine addEventListener doing this internally when calling makeSound. Call and apply don't help you so much here with addEventListener because you're not calling the function, the click event is. Using [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) you can make a new function which, when called, will always be called with a specific context, no matter what object its called from, or whether or not call or apply are used on it. This will help here because you can pass a version of your makeSound function created with bind that will always use the correct `this` for its context. const makeSound = this.makeSound.bind(this); // context will always be `this` when called this.selector.addEventListener("click", makeSound); // click events will keep this context, even when trying to make it this.selector Because bind makes new functions, it can be problematic if you bind a function directly within or specifically for a listener but don't keep a reference of that function around to allow you to remove the listener later. Keeping a bound version of your function around also prevents the need to call bind repetitively to create new functions whenever a bound version is needed. This is why you'll see binding happen in the constructor like so: constructor() { // ... this.makeSound = this.makeSound.bind(this); } This part is a little tricky. Remember how methods in classes are shared in the prototype? The prototype is separate from instances - a separate object. But its an object instances can use to find values when they don't have one of their own. This is what's happening with `this.makeSound` on the right. makeSound is being looked up on the `this` object (the current instance), is not found, so it reaches into the shared values repository, the class's prototype. There it finds the shared `makeSound` function. That function is resolved and bind is used to create a new version of it with a context of `this`. Now that function is assigned to the _instance_ variable `makeSound` in `this`. Prototypes can be used to _get_ values but setting values occurs on the instance itself. So now, when accessing `makeSound`, the instance doesn't need to look to the prototype; it has a version of its own, and a version with the context of the instance itself bound to it. Because the prototype version of makeSound remains unchanged, it means other instances are able to use the pure version that isn't bound to this instance. Whew. [Arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) have a bind-like behavior too, in that, when they're created, they use the surrouding context at that time as their call context. That context also can't be changed with call or apply (or bind for that matter). Their abbreviated syntax also makes them attractive for event handlers. this.selector.addEventListener("click", event =&gt; this.makeSound); // wrapper arrow function with this context, calling makeSound with this context But the same problem with repetitive creation and inability to remove applies here, so instead you can create methods like this in your constructor. constructor() { // ... this.makeSound = event =&gt; { let sound = this.getSound() this.selector.innerHTML = sound; } } Each instance created will get their own copy of makeSound which is an arrow function called with the constructor context (the created instance) as its `this`. Compare this to other methods in the class body which only get created once and are shared among all instances but depend on how they're called for context. Defining methods like this feels a little awkward, but there is a [proposal](https://github.com/tc39/proposal-class-fields) for JavaScript that allows instance variables to be set in the class body which will allow you to define them in a way that makes them feel more like other methods rather than being crammed in the constructor. class Cat{ makeSound = event =&gt; { let sound = this.getSound() this.selector.innerHTML = sound; }; constructor(){ //... Typescript allows this already, and there are babel plugins which will do this for you now too. What you should use is largely up to you. Bind is pretty standard, but I think arrow functions are becoming more common place, especially with class fields picking up steam (and almost now part of the language). The approach in your working example is also an option, though largely discouraged. You'll see it used a lot in older codebases, sometimes using `_this` or `that` as variables to represent `this`, so it's good to know why it's being done when you see it, even though you shouldn't be doing it yourself. 
I would not use `new`. The use of `new` suggests you're creating an instance of the constructor you're `new`-ing. This is not the case for you so const componentA = new MyComponent(); componentA instanceOf MyComponent; // false Also by using `new` you're allowing the creation an intermediate instance that gets ignored as you bypass it with your own. If, alternatively, you want to opt out of creating the `component` and use `this` for your properties instead, returning nothing at the end of your function (`this` is automatically returned if you don't return your own object) then `new` is what you would need. In using `new`, though, you'd also probably want to move over to the `class` syntax. `new`-ing objects from constructor functions isn't so standard practice anymore. Also, when using `class` you'll get an error if you try to call the constructor without `new`.
Thanos approves
Maybe he is not named Null, it is just that they don’t know his name? Or maybe his real name is Undefined and they couldn’t store it? Who knows?
Completely understandable dude! Evolution is a fickle beast. 
There's no sarcasm on the internet.
Finland has "less than 10" Inifinitys, both male and female. (Names with less than &lt;5 people aren't displayed exactly due to privacy) Source https://verkkopalvelu.vrk.fi/nimipalvelu/default.asp?L=3
My is probably a Swedish name pronounced very differently than English "my".
Or... "50cents" + "2pac" = 52
Hey -- sorry I've got limited time here, but I'd recommend you break down the problem into specific tasks and then attempt to complete each one. 1. Capturing/manipulating User input in a text field. (GET COLORS) 2. Listen for events and trigger functions accordingly (TAKE INPUT AND DO SOMETHING WITH IT) 3. concatenating strings. (CREATE RBG CSS) 4. Updating the DOM with new attributes/styles (TAKE NEW COLOR AND APPLY TO TEXT). I've likely missed some of the finer detail, but I believe if you solve for each of these problems individually you will have solved the assignment. 
I think you missed the lesson on CSS. Any online tutorial can fix that. See, there's a CSS property called color, which accepts hexadecimal numbers as long as it starts with a hash sign (#). It has three hex bytes: red, green, and blue. Like #ff0000 is red, #00ff00 is green, and #0000ff is blue. Also it accepts rgb(decimal red, decimal green, decimal blue) format. So what you want to do is construct a string that is in the CSS color format with the values of your input, maybe just consternate them with commas or something, but make sure they're valid numbers (from 0 to 255). Then you change the HTML style property of the button text to "color:" and the CSS string you built. Needless to say, you need to do all of this on a function which will be triggered by the button's onclick event.
📅 2018-04-27 ⏰ 12:17:56 [(UTC)](https://www.timeanddate.com/worldclock/converter.html?iso=20180427T121756&amp;p1=1440) &gt;To celebrate the launch of my new book http://www.learningtypescript.com I'm going to give away 1 book 📕 per week for 10 weeks 🚀 Retweet this for a chance to WIN A FREE BOOK on the 4th of May 🤞There are 9 more books to go \#typescript \#nodejs \#angular \#reactjs &gt;— Remo H. Jansen 🇮🇪 ([@RemoHJansen](https://twitter.com/RemoHJansen)) &gt;🔁️ 16 💟 8 📷 [image](https://i.imgur.com/KaXs0WN.jpg) &amp;nbsp; ^(I'm a bot and this action was done automatically)
The sadist in me loves this.
Damn, this is a well thought out answer. I really appreciate you taking the time to inform me on the proper way to use methods.
Did you change your name to your email or is your email named after you 
 const obj = input.find(obj =&gt; obj.type === 'CAR' &amp;&amp; obj.models.includes('FORD'));
Yes. And similarly, the vanilla javascript example would use .filter instead of .find
Aye, right, if you want all of them. Question was about retrieving a list not lists though 🤔
Or you could consider not being a dick and purchasing the digital copies instead if stealing them. He wrote a good book and provided the information for free, all he asks is that you purchase them if you want hard copies or portable electonic copies.
Sorry I meant "lists"
 _.filter(data, item =&gt; item.type === "CAR" &amp;&amp; item.models.includes("FORD")) 
I would avoid using `Array` for storing IDs. `Set` would be better fit for this role in my opinion.
Don't give them any ideas.
Thanks. That's an interesting feature I'll look into. Any specific advantages of using `Set` over `Array`? This could be my limited knowledge about sets but looks like adding to a Set can be done one-by-one (`Set.prototype.add()`) .. The user cant, for instance, add a whole bunch of items at one-go (I will have to write a function to let the user give me a list / array and that function converts it into a set via iteration).
Thanks, any idea why I would be getting ""item is not defined"?
Indeed, you would need to add it separately one-by-one. But if you wanted to guarantee uniqueness of an ID when adding bunch of IDs you would need to check if all of them are unique. So in the end is almost the same thing. Except `Set.prototype.has` is faster than `Array.prototype.includes` for huge arrays. As far as I know ;P
Oh ok. I'll look into this. AFAI've seen so far, that uniqueness factor is tempting, so even if a user were to supply an array of IDs with dupes, Set will help me filter that out. And if `.has()` is going to faster, then all the more reason. (Also, nice TIL, so thanks!)
Sorry it took me some time to reply to your comment. Thanks for suggesting this. However, since I'm not from C background, I had a hard time wrapping my head around big flags and figuring out how it would be implemented in this program... Any pointers? 
Lol enjoy that honesty, the number didn't takeaway from the point. 
[Momentjs](https://momentjs.com) is a great library for time &amp; timezone functionality. 
You should try using a timezone library like: https://github.com/spencermountain/spacetime There are a lot of intricacies with timezones, such as states not abiding by day light savings times. It's best to use a library that's been thoroughly tested and used.
what version? i'm using jQuery 3 and not seeing this behavior in a test that i just wrote... (function() { 'use strict'; describe('boom', function() { it('blows the fuck up', function() { fixture.set("&lt;div id='bomb' data-payload='{ \"username\": \"Infinity\" }'&gt;&lt;/div&gt;"); var payload = $('#bomb').data('payload'); expect(payload.username).to.be.a('string'); // this passes expect(5 + payload.username).to.be.a('string'); // this also passes }); }); }())
 // global definitions somewhere at the start of your lib const LOWERCASE = 1 &lt;&lt; 0; // must be powers of 2 const UPPERCASE = 1 &lt;&lt; 1; // (1 &lt;&lt; n) = n th bit is set const NUMBERS = 1 &lt;&lt; 2; ... then replace `switch(this.type) { ... }` with var _chars = []; if(this.type &amp; LOWERCASE) { _chars += _lowerAlpha; } if(this.type &amp; UPPERCASE) { _chars += _upperAlpha; } ... This might result in a long if ladder, but it doesn't matter, what matters is that the user can input the type such as `UPPER | NUMBER` as a type and now it's clear and intuitive that output will have only uppercase letters and numbers. Everything boils down to simple bit operations but as you can see you can easily use them without even understanding (if you want to actually understand, you should actually learn how bitwise operators work, that's up to you): * `1 &lt;&lt; k + 1`, define new type of parameter, where k is current amount of options, e.g. you had one option, so to add a second one, it will be in a second bit: `1 &lt;&lt; 1`; * `yourSettingValue &amp; OPTION`, test whether OPTION bit it set, which is checking whether the user wants that option. * `OPTION (| OPTION)*`, you use | to join two settings into one variable, if you aren't familiar with regex, `()*` just means can repeat from 0 to infinite amount of times, which is exactly what you can do, you can either use `UPPER`, or you can use `NUMBER | UPPER` as your settings. Not only this reduces the count of options users need to know, it also removes redundancy, you have only `lower`, `alpha` and `numeric`, but where you check for them, you need to combine all of them in various ways, which is a lot of additional code, checking each individual bit is simpler, and ensures that user can match whatever they want and it will always work as expected. 
You can see this all being used at this quick example. http://culurs.com/radial/
It should be pretty straightforward, might want to recheck that you saw my edit, since `empty array += array` won't work and you'll get a string, from which everything will only go downhill, and suddenly, your random string will contain commas out of nowhere. Goodluck!
This looks like an error from the data you're receiving from the backend. Notice how you use jsonData = (json.dumps(rows)) This means the data you send back is a string. You need to do data = JSON.parse(jsonData); in your javascript in order to have an object version of the data. Then, provided the object is a list, the $.each function should work fine. 
So according to the same site this data was acquired from (sorta), there's 1,635 people with the name "undefined". I could be wrong but that seems fishy. I doubt this is real and hope that there's no poor souls out there that actually have this as their name for real. Who would be just the right amount of dumb and smart to name their kid that?
If you've really replicated the code properly, the only reason I can think of would be that the array had `undefined` in it somewhere, but that would give a slightly different error. Can you send a sample of the code you've written? Sounds kind of like you wrote it wrong.
I checked my jsonData again (in case row date was not passing correctly, and my json.dumps data looks correct so it should be able to parse it by date, weight &amp; calories: [{"id": 1, "weight": 180, "calories": 2100, "rewards": 1, "date": "2018-04-12"}, {"id": 1, "weight": 185, "calories": 1800, "rewards": -1, "date": "2018-04-13"}, {"id": 1..... and so on for the complete history of the user}]
You don't need to split it into an array. JavaScript gives you so much freedom, that even doing console.log("abc"[Math.floor(Math.random(0, 3))]); Is okay to it. Of course, if you want it to be obvious to everyone, you can use var str = "abc..."; console.log(str.charAt(Math.floor(Math.random(0, str.Length)))); Doesn't really matter in such small thing, but when writing code which others might use, it's important to think about things such as not allocating another array when you can use the one you have already (string is still just a char array, that's why you can access chars directly from string object).
You mean something like `Math.random()*str.length` (as in JS, `Math.random()` doesnt accept any parameter). But I get the idea, yes. Seems to be a nice optimization there. :) Thanks.
Yeah, haven't used JS in a while, whatever works, welcome.
The range ratio is described there. However their's would not solve my loop range problem.
Try it with &lt;div id="bomb" data-payload="Infinity"&gt;&lt;/div&gt; then .data() should give you the number Infinity
I've always wanted to ask someone who worked on designing JavaScript... why not have separate addition and concatenation operators like PHP does? Seems like it would solve a whole bunch of counterintuitive behavior. (Note: I realize you probably weren't the one who made that decision, but if you were involved, maybe you have some insight as to why they did.)
I'll argue that this person is named a number so technically it's the people that are not type-safe. I will admit though that my code is not always people-safe.
All major browsers (IE included) support strict mode, so yeah, you should use it everywhere now. Be noted that ES module is defaulted to strict mode already, so use don't need to `use strict` if you already using ES module.
I once had to deal with a royal person, who does not have a last name - in a system requiring a last name in order to complete a form... That was a mess as well :-)
The correct answer to this is to fill that field with a bunch of invisible non-printing unicode characters right?
use strict is es5. they're already working on 7.
Yes, that's always the answer
If you're using ES5, yes you can use it. If you're using ES6 module syntax, "use strict" is actually redundant, since modules are already in strict mode by default.
Sweet, thanks! I'll be watching for your post!
I tried out Node 10 with our in-production Angular 5 product locally -- worked smoothly out of the box. But we won't be migrating for at least a few months, and more likely won't switch till after summer (just in case). The way I think about these things: personal projects - go have fun with the bleeding edge work projects - stay away from the bleeding edge for at least a few months unless you see clear need.
You really should not be starting new protects with a jQuery dep.
I hate that prase "considered harmful" it's use way too much in web development and mostly is used to force someones opinion on others.
I see. I just wanted to give a heads up in case you hadn't seen it. I agree that frameworks are often limited compared to doing things directly in canvas. Very nice dials also and they work flawlessly on a touch screen. Good stuff.
Yeah, developers not reading the documentation is definitely a consequence of javascript not being type safe 😅
Thanks for that answer you made me chuckle
Indeed it's become somewhat of a lazy title, but the actual contents of the article seem objectively useful to know If you're using babel-preset-env, you probably wouldn't want to ne including polyfills for obscure browsers
dude man . . . If the last 2 yrs on reddit have taught me anything, it's that nobody sees auto-sarcasm anymore. 
Definitely, but some beginners only know jQuery at first, and I hope this repo could help them build websites easier.
It's not seo friendly because the the G bot cannot associate your posts to the title and keys. Plus the ID is still not unique because of the way it is encoded for example if you add several digits after the last == then the id still remains valid. Do you have a solution to the problem I mentioned?
Took a peek at the source - it's entirely canvas. They've got three canvases for (I think) a map layer, a unit layer, and a ui layer.
&gt; Except, if you use babel-preset-env the way I did above. Arrow functions will never stop being compiled... no, like never ever. Oh, no, the humanity. My JS file will be... like... 2 bytes larger compressed. Or something. I actually support IE10 and 11. It costs me nearly nothing. People use them disproportionately more than Edge, somehow, and they're not THAT bad to support, especially for simple apps and content sites.
Isn't that how it's going to work? What pipeline nonsense are you talking about?
On the backend you'll need a few things - a route that handles POST requests, bodyParser to handle post request data, and then a SQL query to insert the data passed to your route. So you'll need to assemble a string that could be passed to your con.query(). It would look something like: var name = req.body.name var type = req.body.type var immuneTo = req.body.immuneTo etc... Then you'd assemble them all in a single variable: var query = "INSERT INTO 'pokemon' VALUES(" + name + ',' + type + ',' + immuneTo + ")" and pass query variable that to your con.query() (within your POST route). Yes, you can do parameter insertion, but this allows you to log your query to make sure it's being passed in properly. See more on that [here](https://stackoverflow.com/questions/41168942/how-to-input-a-nodejs-variable-into-an-sql-query) On the front end, make sure your naming conventions on your form are standard - so in this case use `name = 'foo'` when defining what the input is in that field. More on that [here](https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data). Finally something to look into is an ORM (Object-relational mapping), this cleans up a lot of the code that happens on the backend when querying your database. One that is commonly used with SQL is [Sequelize](http://docs.sequelizejs.com/). 
First question is wether you want a page refresh or use ajax to have all this update the UI without a page refresh. Starting out it's usually simpler to just go with a page refresh. This article looks like it has just the right level of detail: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/forms In addition, you basically have these steps: form submit -&gt; post route -&gt; sql insertion **A little more detail** 1) Simple way is to add "METHOD" and "ACTION" attributes to a classic &lt;form&gt; tag, with a &lt;button&gt; that will auto-submit the field. 2) The post route will be the target of 1) and `req.params` should contain your form fields, that you can then pass to your sql query. 3) sql query where you 'INSERT INTO' your new record into the DB. At some point I usually move this into a "models/pokemon.js" file, but what you have is fine for now. 4) I assume sql query will return the ID of the record you just inserted. 5) res.redirect('/pokemon/new-entry?id' + id) will redirect to a new page with the new id passed in . 6) You can set up a route with that to select and display the new record. `app.get('/pokenmon/new-entry)` `req.query.id` should contain the ID . Let me know if you have any more questions.
[removed]
LTS = use this for production Current = help us find bugs
I agree that adding too much sugar is a bad thing, but not for the same reasons. I highly doubt there is a noticeable performance impact of introducing a bit of sugar. The real price is the cognitive overhead when reading code and potential for abuse. That aside, I don't see how the code you posted foo(bar(baz)) Does anything to address the binding issue &lt;button onClick={this.thing.action.bind(this.thing)}&gt;&lt;/button&gt; &lt;button onClick={this.thing::action}&gt;&lt;/button&gt; 
You have some really neat tools in here. I wonder if I could use any of these math / range tools for a problem I encountered last weekend... I built some components for editing colors that give you a hex value input box, and input range sliders that let you adjust the R, G, and B values for each color (0 - 255 range obviously). Last weekend I wanted to add HSL sliders as well, which I thought would be a trivial addition, but its been tricky. No matter what HSL &lt;-&gt; RGB conversion algorithms I tried, they would never work both ways (i.e, using the algorithm to convert HSL to RGB and then back to HSL would lead to an ever-so-slightly different final HSL color and vice versa). I read that this is because HSL uses more bits to define colorspace, so you inherently will lose precision with the conversion. Normally that wouldn't be a huge deal but I'm trying to do this all in the same view with input range sliders that are 2 way bound to their respective variables (moving one of the sliders on the HSL part will also cause the RGB sliders to adjust accordingly, and vice versa). This setup means that when there is a precision error and one slider gets a little 'off' from the other ones, the sliders start to move on their own until one reaches a hard upper or lower limit (they get stuck in a sort of feedback loop). I ended up giving up and moving onto something else because all of the math explanations for how to address the problem were a little over my head. :p
It's unnecessary bloat built for an era when cross brower compatibility was a pain in the ass and functionality was lacking from the language/core api.
Item can be anything, like "bob" or "q": `const results = _.filter(data, q =&gt; q.type === 'CAR' &amp;&amp; q.models.includes('FORD'))`.
Even better, I have a whole colors library. https://github.com/bronkula/drawtoolsjs/blob/master/color.js Creating a new COLOR object has the ability to convert swiftly between hsl, hex, or rgb. it can output toString and it can even convert text words to rgb colors. Most of my http://culurs.com experiments are designed around new implementations of that object library.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [bronkula/drawtoolsjs/.../**color.js** (master → a810f81)](https://github.com/bronkula/drawtoolsjs/blob/a810f8190b903eb608c3c692c05868d37649aa16/color.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dy2slwo.)
Thanks. The events library https://github.com/bronkula/drawtoolsjs/blob/master/events.js is designed around turning any jquery multi event into a positional xy coordinate. All my stuff is inherently touch capable.
Oooh, awesome ... I wrote something similar (but probably a lot more rudimentary) for my Angular UI projects. I'm gonna poke around your code and see if I can implement any of your solutions in my own color service. I know there are probably a lot of existing solutions for my problem, even existing angular solutions, but I'm only developing as a hobby right now so I make a point to build everything myself rather than use existing solutions. I learn 10x as much and finish things 10x slower that way, hah.
I would recommend setting the properties via methods. Or better yet, make this a class and provide the settings at construction time - this way if different callers within a single realm had different requirements, they wouldn't step on each other. That said, if you insist on maintaining the API where the caller sets properties, you can switch to [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) and raise an exception when there's an error. 
Advantages of using strict mode?
Why should it? Just do this: &lt;button onClick={e =&gt; this.thing.action(e)}&gt;&lt;/button&gt; 
It's not as clean when there are multiple parameters and you don't want to use single character variable names.
Sorry for raising this, but why is everyone suggesting a library when it can simply be done using modulus operator. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators.
So when something is coded to work in a specific way, and it works in that specific way, but there are unintended consequences, you don’t consider that a bug? Because there’s a guy with the last name Null that can’t use the legacy program of my current employer, because the code works exactly as intended, and they consider that a bug.
How would you write the solution?
If you really want to learn I suggest familiarizing yourself with each aspect of your stack starting with the db then ending with the front end. Let's familiarize yourself with sql first. I find that the best way to do this is to install a sql client (since you are using mysql here may I suggest [sequel pro](https://www.sequelpro.com/)). Get into the sequel client, start writing some queries and familiarizing yourself at least with the basic CRUD operations, `INSERT`, `SELECT`, `UPDATE`, `DELETE`. ([mysql cheat sheet if you run into trouble](https://gist.github.com/hofmannsven/9164408)) Now your express backend seems to be following a relatively *restful* design, which is good since rest also tends to stick to the CRUD layout which means you can implement it with just the information you have above. You'll want to create endpoints roughly corresponding to those db calls using HTTP methods (`POST`, `GET`, `PATCH`, `DELETE`) I suggest testing this using [postman](https://www.getpostman.com/), which is a fantastic call for testing http calls. The final part is the form which is relatively straight forward. You just need to change around the `method` and `action` attribute on your form to the right method. At that point you're mostly good. You'll have to tweak the input so that you are naming your fields correctly I.E. `name="immuneTo"`. Check out [w3schools](https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_post) if you run into any trouble with that.
CKEditor 5 will be **free for open source**. You can read more in https://github.com/ckeditor/ckeditor5/issues/991#issuecomment-384995497
Ok then if you are concerned about those browsers, use a different setting.
&gt; AFAICT Wow!, Dr.axel him self!, that post is awesome it helped a lot 
Hey, salahuddeen, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I don't mean this example, `e` is totally fine here. But there are cases where you want longer names. &gt; For multi-args, there's rest/spread. &lt;button onClick={ () =&gt; this.thing.action(arguments...)}&gt;&lt;/button&gt; If you're using flow/typescript, this throws away type checking ^ &gt; Or don't use `this` Not sure what you mean by this ...
[Timezones are hard. ](https://youtu.be/-5wpm-gesOY) Use a library like momentjs.
No. I want actual pipeline (`|&gt;`), not this-based pipeline only as infix `::` does. Pipeline seems to have more support, so my guess is we'll get that plus perhaps syntax for method extraction.
This is beginning to sound much better :)
Yes. But of course, then whatever code generated that would need to escape any embedded `"` characters etc. For that matter, the OP should understand that if someone gives a last name of `{"a":1}` and they use `.data()` to get the value, their page is likely to break as well. Escaping user data is hard!
This is great! I appreciate all of this
`font-size: 2em;` Don't do this.
Instead of estimate each element, consider estimate features.
Oh, OK, I think I see what's happening now. Your `#gameArea` element is positioned using `position: relative`, which creates a new [stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context) - basically, that element and everything inside it gets positioned separately from the rest of the page. The gameArea element has `z-index: -10`, but the `&lt;body&gt;` element (which is its own stacking context) has a z-index of 0, so the gameArea element ends up "behind" the body. When you try to click on the button, you're clicking on the body element, which is positioned in front of your actual game area. In order to fix this, you can probably just get rid of the `z-index: -10` rule, since you want the canvas to be at the same level as the body element anyway.
why?
You *can* use Node.js for this. It really depends on what you your restrictions are, and what you're comfortable with. Regardless of what type of backend you use, take a look at [Ajax](https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX) The whole idea of a SPA is to not load new pages but to exchange information with the server and modify your page using the data. Given that, you should be able to see where your audio player would persist across *"pages"*. Hopefully.
Thanks! I’m glad it helped.
&gt;less cliche &gt;reddit Pick one. ^^^seewhatididthere
There's absolutely no rationale not to use it. What are you smoking?
its considered harmful
Read the mythical man month. Also, Joel on software has a pretty good guide on estimation, but it relies on months of data collection from your devs.
Yea, i always thought that `last 2 versions` is pretty bad thing, and yea didn't used it. :) And why not Opera Mini? Also i think that &gt;=1% is pretty enough, even &gt;=1.5%. Current global coverage is 82.41% with the `&gt;=1%, not ie 11`.
moment is heavy and slow. it's handy because it includes a lot of data about timezones, but if you already know the offsets then moment and all other timezone libraries are a massive waste of resources. it takes all of 4 lines of code to figure out the time if you know the offset of the timezone. function getDateInTz(offset, dst) { // get the local timezone offset on the computer running the code for reference var ofst = new Date().getTimezoneOffset(); // add an hour for dst if (dst) ofst += 60; // account for the offset ofst += offset * 60; // create and return the date object var date = new Date(); date.setMinutes(date.getMinutes() + ofst); return date; } [try it](https://jsfiddle.net/1xq0mzLj/) if you still insist on using a library, have a look at [protodate](https://github.com/Pamblam/protodate). it's better than moment in every way. btw, javascript can't tell if your system time is wrong. javascript dates are based on your system time.
[http://browserl.ist/?q=last\+2\+versions&amp;#37;2C\+not\+&amp;#37;3C\+1&amp;#37;25](http://browserl.ist/?q=last+2+versions%2C+not+%3C+1%25) Problem solved
You don’t need node. Use client side routing for page changes (‘history’).
I think it depends. Are you going to use MongoDB to store records or have any API later ? If so then you should use node. If you just want to use your browser to persist data then all you need is angular. 
I'd like to see more than 5 or 6 words on the page?
Like, from a UX perspective or some other reason?
Modern frontend frameworks work on the idea that only the content that changes between "views" or "pages" get updated. So using one of the modern frameworks (react, Vue, angular), the audio section wouldn't change between pages and so be visible at all times. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Good bot.
Test on every device you can get your hands on. Fix bugs. Cry. Repeat until good enough. Publish app. Receive angry emails from users of random devices for the rest of your life.
reminds me of my DOS days...
I was just joking since the title of this article uses the phrase 'considered harmful'
How do you factor in an unknown?
thanks for your suggestion. 
What kind of tiny screen resolution do you have?
When I read this headline I misunderstood and thought it was talking about how the babel-preset-env npm package was hacked and delivering a harmful payload.
 &lt;!doctype html&gt; &lt;html lang="en"&gt; &lt;header&gt; &lt;meta charset="utf-8" /&gt; &lt;title&gt;Color.html&lt;/title&gt; &lt;style type="text/css"&gt; body { background-color: white; } h1 { text-align: center; } h2 { text-align: center; } &lt;/style&gt; &lt;/header&gt; &lt;body&gt; &lt;h1 onclick="window.alert('Student\'s Name')"&gt;CLICK HERE FOR MY NAME&lt;/h1&gt; &lt;h2&gt;CPS 120 JAVASCRIPT LAB&lt;/h2&gt; &lt;p&gt;Enter two-digit, hexadecimal numbers for the amounts of red, green, and blue light you want combined to create a color.&lt;/p&gt; &lt;p&gt;Enter the hexadecimal numbers in the boxes below.&lt;/p&gt; &lt;input type="text" id="red"&gt;Red&lt;/br&gt; &lt;input type="text" id="green"&gt;Green&lt;/br&gt; &lt;input type="text" id="blue"&gt;Blue&lt;/br&gt; &lt;input type="button" value="Click here to see the color you created" id="button" onclick="setColor()"/&gt; &lt;/br&gt; &lt;script&gt; function setColor() { var red = document.getElementById('red').value; var blue = document.getElementById('green').value; var green = document.getElementById('blue').value; document.getElementById("button").style.color = "#" + red + blue + green; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
I'd also consider using [GitHub Pages](https://pages.github.com/) for this repo. It'll let other developers see the app first without cloning the code and running it locally. And best of all its free!
There are known unknowns, and unknown unkowns. You can guess an interval for a known unknown.
Bad bot
Wow, good fucking bot indeed...what am I doing with my life. 
COCOMO model 
Cocodel. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'COCOMO model'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
\&gt;[jamie.build](https://jamie.build) I'm good.
Thanks A Lot
Thanks For Share The Link
I Am Finding Some Video Tutorials.
Remember, Java is to JavaScript as Pain is to Painting, or Ham is to Hamster. We don't know Java, and if you're trying to apply your Java knowledge to JavaScript, it probably won't work. The code you posted has zero references to anything `active`.
NEVER CONCATENATE USER-DERIVED VALUES INTO A SQL COMMAND. Sorry for shouting at you, but you seem on the more novice/junior side and I want to nip this terrible practice in the bud before it's too late. Why? Because someone can put in whatever SQL they want to execute in your database. This is called SQL injection. Proof of concept: 1. Load your `pokemon` tabe with rows 2. Now make a request, `GET /pokemon/%22%3BDROP%20TABLE%20pokemon%3B` This will cause the following SQL to execute: SELECT * FROM pokemon WHERE id = ""; DROP TABLE pokemon; (Your app is also vulnerable to "insecure direct object references", but that doesn't matter in this case because there is no PII, or something else private.)
Yeah, I can't install nodegit anymore. I'm thinking I need to go back to 9.
Sorry. I know little to nothing about javascript. I didn't know. 
Personally, I prefer to use the handleEvent interface. No memory leaks and proper context for "this". No need for bind or arrow functions. To use it, give your class a handleEvent method that handles the click and pass the "this" to the event instead of a callback: class Cat { constructor() { this.sound = "meow"; this.selector = document.getElementById("sound"); } setSound(sound) { this.sound = sound; } getSound() { return this.sound; } makeSound() { let sound = this.getSound() this.selector.innerHTML = sound; } doAction() { // Pass class object to event listener. // Browser will then look for handleEvent method. this.selector.addEventListener("click", this) ; } // Handle click from above: handleEvent(e) { this.makeSound() } } var c = new Cat(); c.doAction();// the makeSound method will not change the text to "meow"
&gt; "Why are there a bunch of boxes after my name?" Some royal person probably? I imagine the rhombus with questionmarks Firefox used to make would be worse.
In context of "I decided, I implemented" sure, no question. But if you add 9 other devs + 2 PM's. Now most likely we will ended up with at least two teams (5 each). Thats where your jQuery will become as maintainable as assembly. Here is answer on how to write maintainable assembly code https://www.quora.com/How-does-one-write-maintainable-assembly-code. Answer of Peter Hand sounds to me like React + Redux.
1,440 x 900 - the default on a Macbook Air.
In a way forces many checks and in a way improves quality of code. 
I deleted the question from my profile, because my script worked. If I had seen your reply I wouldn't have deleted it. How am I stealing the author's work? The markdown files are publicly available, I can read them online or download them for personal use. If I write a script that converts those md files to pdfs, how am I being a thief?
Well, it's hard to guess without any other information at all. The plugin you got seems to have vanished from the usual RPGM forums and sites. It _seems_ that it should include a "help file" which may or may not have interesting information on how to use it, but as I haven't ben able to find it, I can't really say for sure. It _might_ also help to know how you are using it and how you get the error. In other words, more information is needed.
Yeah, estimating features are absolutely a good thing, especially when determining a scope of a POC or MVP.
My multiplication buffer is around 2, one of my colleague has it around 1.6, from our expeerience everyone has a multiplication number, when it comes to estimation. Also we found the https://en.wikipedia.org/wiki/Three-point_estimation a good way to do it, instead of saying one number, you estimate 3, best case, worst case, most likely. It helps expressing uncertanity.
This keeps popping up in this reddit, and the programming reddit too, I guess it's time to read it.
Yeah bugs are impossuble to estimate, the only thing one can do is splitting it to identifying the bug and fixing it. And fixing may be estimated better.
I agree that practice helps a lot.
Yes machine learning using object detection will draw these lines in an appropriate place 
Modern tools (like babel) polyfill automatically, better than that, they actually remove duplicated or superfluous polyfills and/or can target specific targets. The idea that you need to tie your app to jquery in order to achieve that is archaic. Use whatever you like, fetch, Promise, async-await, Object.values, spread - all of this will work in older browsers.
When using vanilla JS make sure the methods you use are well supported, https://developer.mozilla.org/ is a good resource. Debugging on mobile devices can be a pain, try browserstack.
By definition a SPA doesn't have other pages, so you can just use a client side API for the music such as https://developers.soundcloud.com/docs/api/sdks#javascript
Well you have been able to use it for a long time, older browsers will simply ignore it
That depends how much monies that 1% gets you.
The count inside the function and the count outside the function are not the same, you’ve declared two separate variables. I’d recommended getting some basics down first, have you tried codeacademy.com ? 
Thank you very much your a life saver!
Yeah I have been doing code academy I just got a bit sidetracked.
Hi all, As I was browsing codepen the other night I can across this gem of a UI, https://codepen.io/Manoylov/pen/YeWYPm I really wanted to make something like it so I set to thinking about how I'd go about it. I saw another pen a while back where the creator broke a &lt;p&gt; tag's text into individual elements so as to be manipulated with JS individually. I figured this was a good starting point for my little project, except with an image, not text. Things I tried to keep in mind when building this were keeping the code scale-able, so as to be used with whatever image I desired, with whatever dimensions, the only constraint being the image must be nested in a parent element with specific styles attached to it. I would love any feedback or criticism in regards to my Javascript, I'm sure there are a few functions I could clean up. Thanks 
not professional, but imho the animation itself is pretty good
An AUDIO element doesn't have to be added into the document in order to be played.
Don't ever use var. Use const most of the time and let if you really need to reassign something. This will eliminate hoisting.
That's not hoisting. That's closures.
Not sure why you were downvoted but you are 100% correct while the other comment is not.
Holy crap tons of ads on mobile -_-
It's a combination of both. He's accessing the variable `Count` inside the `var Count = Count + 1` declaration. Which tries to access the hoisted `var Count` in that statement \(which is undefined\).
Use a for loop? for i=0; i &lt; name.length; i++
Doesn't work on mobile safari for me
/u/ChamberedSwatch has given you the fix for your issue, but I'll offer a few other notes/thoughts while while we're here. When you do `var Name = ['Adam', 'Bob', 'Joe']`, you are creating a new array with the same values every time the function is called. This is a bit redundant, and you could instead define the names outside of the function. While, capitalizing the names of arbitrary variables is entirely your call, typically the convention is camelCase. `Count` would be `count`, `Name` would be `name`. A variable with multiple words would be anotherVariableWithMoreWords. When you see the first word capitalized, it's usually indicating a class name, maybe a constructor function. Preferences differ, do what you like, just an fyi. The result of `document.getElementById("Nam")` can be saved to a variable, saving you having to search the dom element every time, which is slower. It's not going to matter here, just a useful thing to know. If "Nam" is a typo, ignore this. If not, there's a time and place for abbreviations and acronyms, this isn't one of them, just use the full word. Also, doesn't need to be capitalized. Again, only a preference and you can do it how you like, just be sure you're consistent or you'll soon become familiar with the headache of not remembering exactly how you named things. `Name[(Count)]` The `()`is unnecessary. Once your code is working, you'll want to have count wrap back around to 0 after it reaches the end of the array. Here's the modified code demonstrating the above: var names = ['Adam', 'Bob', 'Joe'] var count = 0 var nameElement = document.getElementById("name") function changeName() { count = count + 1 if (count &gt;= names.length) { count = 0; } nameElement.innerHTML = names[count]; } 
where's the tut?
Relevant xkcd https://xkcd.com/327/
In addition to what others have said, you can use the modulus `%` operator too. 1 % 3 = 1 2 % 3 = 2 3 % 3 = 0 4 % 4 = 1 ... 
Press ctrl+u to display the source code. This is it!
This 100% open-source Ember.js 3.1 app is written in Typescript with the maximum strictness the new Ember type definitions support and makes heavy use of decorators. https://github.com/CenterForOpenScience/ember-osf-web
Is "Whack" good or bad? I always thought it was good? I think we're starting to home in on the problem here ;)
Thanks for the tips as you can tell I'm new so your advice will help greatly.
In addition to that I recommend /u/extDASH consider using [knex](http://knexjs.org/) to build queries.
Probably because of `fetch`
Ah I see. But if he didn't declare it again then it should work, right?
Firefox 59 handle it well better than any other browser. Seem that quantum was a good name choice.
if you click on the link and see the moving starts, just scroll down. you should be able to see the code and the explanations. let me know if you still can't see it.
This is not a tutorial
this shouldn't be necessary. there are more comments/explanations in the tutorial itself than in the source code.
Yes that's correct, if he removed the `var` all would be fine.
how do you measure that? just curious - i'm a ff fan myself.
what do you mean? can't you see the text that explains the code and the code itself with comments? they're below the animation
Sounds like you need a dependency...
Hi /u/extra-foldedAP, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Bolinkattree, For javascript help, please visit /r/LearnJavascript. Thank you!
For those not familiar with the modulus operator it's similar to the division operator except it only returns the remainder. So, if you think back to elementary arithmetic, 1 / 2 = 0.5 or "0 and 1/2" ... 1. 2/3 = 0.666667 or "0 and 2/3" ... 2. 3/3 = 1 or "1 and 0/3" ... 3
Hi /u/Chipatama, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
It's my fun project and i don't want to use any pollyfill or s.thing. Feels good giving not a single fuck.
Haha, I shouldn't laugh but that reminded me that my post was just like all the stupid Maths textbooks I had that made stupid assumptions about what people know :) Good work :)
Hehe ^^
There are a lot of tracking scripts but they have nothing to do with the MP3. The code that loads and plays the MP3 is in the app.js file \(filename might change over time as it's hashed\) : [http://www.kanyewest.com/assets/scripts/app\-4f80c928ddc.js](http://www.kanyewest.com/assets/scripts/app-4f80c928ddc.js) Strangely enough, you can see in the end of that file that the MP3 filename is stored in a reversed array \- it is reversed and joined into a string. Not sure what the reason is there, as it's trivial to look in the network panel for the MP3 file. I guess it's to stop \(easy\) scraping? `{a=i.createSound({id:"song",url:"/assets"+["3","p","m",".","F","L","E","S","R","U","O","Y","_","T","F","I","L","/","s","e","g","a","m","i","/"].reverse().join("")}),s.addEventListener("touchstart",r),s.addEventListener("click",r)}}),console.log("`[`builtbylane.com`](https://builtbylane.com) `x` [`davidbaker.tv`](https://davidbaker.tv) `ϟ made in brooklyn")},{soundmanager2:1}]},{},[2]);`
[classy-mst](https://github.com/charto/classy-mst) adds ES6 style syntax and inheritance support to [mobx-state-tree](https://github.com/mobxjs/mobx-state-tree). I just released version 1.0.0. Also wrote a blog article how to [Self-host a Node-based blog with comments and forum in under 15 minutes](https://charto.net/blog/blog-setup/).
A small and simple library for developing responsive screens in React Native with the use of 2 methods. No media queries needed. It optionally supports orientation change. [https://github.com/marudy/react\-native\-responsive\-screen](https://github.com/marudy/react-native-responsive-screen)
Do you not know how to web developer? You need to be writing web apps in your sleep as well, stop being amateur.
You have a single static page with a few images and text boxes, you don't need GatsbyJS or any other framework.
Conventionally capitalizing variable names is reserved for objects with a Constructor function. Eg: var instance = new Obj();
Out of curiosity, what ES6 higher order functions are you thinking of? because higher order functions are a simple product of first class functions, which ES5 has as well
\&gt; This was a fairly big company, too that I thought would be more up to date on modern technologies. In my experience fairly big companies aren't quick to pickup modern technologies. What gave you this impression?
Gonna be a no for me dawg
The question about let/const vs. var was valid. I assume he wanted you to discuss block scope and/or immutability. However, the question about higher order functions was weird as that is fairly Javascript 101 (not even an ES5 vs. ES6 thing). 
I'm using `Object.getOwnPropertyDescriptors()` for this though \(as well as `Object.getProtoTypeOf()`\). AFAIK scope is the only kind of information that is inaccessible.
Regexes _can_ be stateful. And while I wouldn't advise to rely too much on these string representations, [you may find _some_ in the language specification](https://www.ecma-international.org/ecma-262/8.0/index.html#sec-object.prototype.tostring). (**Do read the note there**)
This seems to be mostly a _re-write_ of [parts of?] Addy Osmani's book. Sad.
TBF it *does* credit Addy's book at the bottom, but I agree with you. But why read about it on cool*python*codes.com instead of from a JS expert? Plus this site has some kind of creepy fake native notification(i assume, it doesn't even tell you *what* it's asking you to allow) popup. Yuck!
Very interesting. I would never have guessed. I know that lodash.isEqual is able to compare RegExp; I'll keep looking through that code. And sweet! Thanks for the spec link. I tried searching for RegExp stateful examples, and [the one I found](https://stackoverflow.com/questions/11477415/why-does-javascripts-regex-exec-not-always-return-the-same-value#11477448) shows state being tied to the property `RegExp().lastIndex`. Do you know if this is the only way that they can be stateful? If so, I can just analyze this property. The note in the spec is interesting... I suppose the only way would be to follow the prototype chain and determine what kind of object it is based on the constructor value. Is this correct? Looking at a generator object, I see that the toStringTag is a symbol \(but is not writable\- regardless, an object could be constructed to appear to be a generator object\)
Feedback: I didn't leave with an understanding of why I would ever want to use weakmap
Yes, only _global_ (`g` flag) regexes are [stateful](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#Examples).
Got it. Thanks!
A major point of this function is to simplify the inputs as much as possible and not have to do manipulation beforehand. If I'm using your input idea, I have to do manipulation to go the other direction. because rangeRatio(350,[-60,60],[0,100]) wouldn't map correctly. Both ranges need to be able to be arbitrary. Now that I'm thinking about it more, yours puts all the onus of manipulation on the outside of this function, but I'm trying to make a function that does all that manipulation internally. It DOES do a negative and positive in essence. But it does it inside, instead of expecting you to do that manipulation outside.
don't forget there is also that magic point where inebriation and creativity cross and you find solutions to all sorts of hard problems... but 'tis a mighty tight rope to walk...
Wrote a small Genetic Algorithm Library. Would love some feedback! https://github.com/cashlionjp/JeneticS
While I understand what you mean about placing responsibilities, I'm not sure I completely follow you. In my opinion, `rangeRatio(350,[-60,60],[0,100])` should simply be not valid because `350` is not in the range `[-60,60]`. What I meant is that you should completely separate the range from its particular representation. Say you want to have a range of valid values: `[20, 160]`. And say you want to map it to a circular sector representation `[-60, 60]`. Now, when you map a value in one direction (`[20,160]` -&gt; `[-60,60]`) you'll only accept valid values in the range of `20` to `160` and the mapping will work correctly. Similarly, when mapping the other way (`[-60,60]` -&gt; `[20,160]`) you should only map values which are valid in the origin range, that is from `-60` to `60`, and then the mapping will work correctly. The problem, then, lies elsewhere, but I don't think it is about placing the responsibility out of `rangeRatio`. That responsibility shouldn't be there to start with. If you keep the range as an independent entity, it should only allow values inside the range and any calculations or measurements you do should not produce a `350` but a `-10`. Once the range is defined as `[-60, 60]` it should never allow or produce other values than those inside the range.
I Dig into the post... it was credited to toptal 
Facebook and Google are huge and known to be a little more cutting edge than might be wise. It gives a skewed view of "big companies" to people who have never worked for a large-but-not-giant company.
I'm sure Addy doesn't mind of people steal his design patterns. It's kind of why he wrote a book on it. 
Hi /u/Painkiller001, For javascript help, please visit /r/LearnJavascript. Thank you!
It's because that input element doesn't have an `id` of `firstName`, it has a `name` of `firstName`. You can either change it to `id` or use `document.getElementsByName('firstName')[0]`
Media streaming app https://github.com/ridhwaans/homehost
If you're going to select only a single element, use `querySelector` rather than use a method that returns a collection and then reference the first element in the collection. HTMLCollections are not good to work with anyway.
I already did :) It's ok, we see a lot of it on this sub, unfortunately.
Ok i tried using the document.getelementbyName and return the name as "objectnodes " and i tried the id method and it return the name "undefined".
Did my whiteboarding at google in es2015 js, sass, and pug. Had zero problems. 
Something like array.find array.includes. 
...okay? That's the point they're making 
i always think whiteboarding code is not a very good indicator of a programmers ability. Its like asking a metalsmith to make a sword without an iron and hammer. 
I would be interested in your implementation of the function and it's handling of these 3 inputs. Hell I'd be interested in a pull request on github if you have a more elegant solution. circleRangeRatio(60,[50,100,360],[0,1]) circleRangeRatio(12,[10,20],[-30,30,120]) circleRangeRatio(340,[-60,60,360],[0,1]) Mine produces these results circleRangeRatio(60,[50,100,360],[0,1]) &gt; 0.2 circleRangeRatio(12,[10,20],[90,30,120]) &gt; 102 circleRangeRatio(340,[300,60,360],[0,1]) &gt; 0.33... 
Mmmmm... probably not, considering the following higher-order functions (methods on the Array object for you purists) all became EcmaScript standard with [5.1](https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.21) ```Array.prototype.reduce Array.prototype.map Array.prototype.forEach Array.prototype.filter ```
YMMV on this one, but I always ask if they mind if I whiteboard in pseudocode, that way, weird stuff like this doesn't matter. Generally, syntax doesn't matter, as long as the general idea is correct.
https://i.imgur.com/qacR5wB.gif
&gt;Is this normal? I don't think it is. It sounds like the interviewer \(your potential new boss, I assume?\) hasn't been taking the time and effort to keep up with his field, and that's a really bad sign – particularly in the JS ecosystem that is constantly changing and evolving. I wonder why the other, more experienced developer didn't interject? Maybe he was afraid to? Or maybe he didn't really know what you were talking about? Either way, I think that's another really bad sign. If they're giving you a hard time about using ES6 in the interview \(an industry standard that was finalized three whole years ago\), imagine how much more difficult it would be to use \*anything\* new in your job if they'd hired you. You'd probably want to bang your head on your keyboard everyday. I don't think you should feel bad about this interview. Job interviews are just as much an opportunity for you to prove yourself to the company as it is for the company to prove itself to you. It sounds to me like you would feel happier and more fulfilled \(and perhaps even paid better!\) at a different organization.
I don't agree. The whiteboard interview really isn't about syntactic perfection. To solve a problem an interviewer shouldn't expect the interviewee to memorize APIs. The interviewer doesn't need to leverage the internet or IDEs (resources and tools) to write a solution to a problem on a whiteboard. The fundamentals of the job involve solving problems, so asking one to show you that process is perfectly reasonable.
what city are you interviewing in?
I'm not talking about the functions that were added in es5, I'm talking specifically about functions added in later versions, like find and includes. Someone not familiar with the newer versions might very well think, that those can be added via "plugin" as OP described. 
I would argue that in a let / const world, you should never use var, as the _reason_ to use var rather than let will almost certainly result in a readability issue even if it seems more elegant. Especially in the world of JavaScript, elegant / clever code is not necessarily good code. Readable code is good code.
He wanted to know *why* are you using things you use. Saying because it's updated syntax is **completely ignoring the semantics of each** or missing the point why they introduced them. That is they didn't introduced them because they wanted do update syntax ... They solve certain problems. That's what you should have explaned. User /r/enterloper made some good refs to what they do.
awful explanation of const. it's simply an annotation of variable mutability, not the value.
Then provide a better one. Well... *better* than that ^. 
just use var next time dude... we're making a big deal out of this
I'm guessing he just meant the lambda operator.
&gt; he wanted you to discuss block scope would probably also be annoyed if someone told me let vs var is just updated syntax
I agree in theory, my issue is that the only time I'm ever coding, I'm on a computer, typing code, executing code, repeat, etc... So for me, the problem is that my memory / ability to access knowledge has proven to be fairly context driven. It's like when people walk through a doorway and the context shift causes them to forget what they were doing, when I'm away from my coding environment I forget how to code, when I'm out of the kitchen I forget how to cook, and so on. I don't need a fancy IDE, google, or whatever else, but I do need enough to kickstart my brain recognizing the task at hand as being the thing I've trained it to do. Give me notepad and keyboard, and we're off to a good start. 
Just wanted to include a small snippet (contrived example) where hoisting of var can make sense function doIt (x, options) { if (!options) { var options = {} } let result = 2*x; if (options.extra !== undefined) result += options.extra if (options.abs) result = Math.abs(result) if (options.inSentence) result = `the result is ${result}` return result }
Yeah it’s not about mutability it’s about reassignability 
Nice.
[Default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) are the way to go. function doIt (x, options = {}) {
&gt; I tried to mirror my use case to your proposal. In the case of the second example the arbitrary loop is only 120. You need to produce a logical number from -30 to 30 of a 120 length loop. I'm really, really sorry. But I still don't get it. What numbers are valid in `[-30,30,120]`? And is my description of `[90,30,120]` correct or not?
Or just (x, options = {}).
Maybe your interviewer was a compiler. /s Seriously though, it doesn't make sense to me for the interviewer to nitpick about the minutiae of syntax, but the ability to code on a whiteboard without syntax errors might be their personal criteria for what makes a good or bad candidate. On the other hand it might be that they want to evaluate your skills in a version of the language that they feel comfortable in (which may be because they primarily code in some other language and aren't up to date with JavaScript). I can't speak specifically for the JavaScript world, but I would say it's "normal" in the sense that any given interviewer is likely to have their own arbitrary criteria. It can't hurt to get familiar with other languages, but if you're really good at JavaScript I'd say keep using JavaScript.
The two ranges are synonymous, except yours is the way you proposed. And your description of my proposal was correct. I think you're thinking you won't need the loop size, and I am of the opinion that you most definitely will need it.
Stupid people on high position will become comon to you very soon
This right here. Most companies are stuck with legacy compilers, interpreters, runtimes, etc. because there's no business incentive to move ship over to the newer stuff. It happens a lot in the industry that what's thought to be a painless upgrade turns into 40 hours worth of work scattered across a month to deal with some new bug the old version didn't have.
Sounds like an aweful experience..
Was it for developing automated testing software? I personally work in a place that's stuck using ES3 because of incompatibilities between Microsoft's interpreter/runtime and ES5/6.
I see... Yes, I do believe you should not need the "loop size", as you call it. I do not see what's the use case for a value to be in such a range. Please, beware that I do mean the value and the range, and that I'm not making (yet) any references to the _visual representation_. This is what I meant by completely separating the internal representation of a range, and its valid and current values, from the visual representation of a control to represent/manipulate such a value. What magnitude would you ever have that can have a value in two discontinuous segments (from `0` to `30` or from `90` to `120`)? And even if you had such a magnitude, it would still be better represented by 2 ranges. How would it be that it made sense to represent it internally as one continuous range (`90,91,91...118,119,120,0,1,2,3...28,29,30`)?
risky click of the day
Absolutely DO NOT take the job and don't further waste time on that interview process. Your time isn't free.
I've never done one of those whiteboard sessions in an interview. I actually had assumed they would get people to do diagrams, brainstorming, collaboration etc rather than actual code. You know, like what you might use a whiteboard for in real life...
If ES6 is a problem for them, you don't wanna work there...
Thanks for the feedback! You're right about brightness. i was experimenting with the formula and thought the dark cross in the middle looks cool. I'll probably update the tutorial with an alternative bias calculation. Regarding setInterval, what you wrote is basically what I would call "best practice".
The hover function is not working for me. Bad bot!
I wrote testing framework that uses baseline strategy https://github.com/Igmat/baset
Uhm, no, I don't think I would do that. Weekday choices... `[5,2,7]`... That would mean something like... Friday, Saturday, Sunday, Monday[, Tuesday]? The thing is that this is not really a _loop_ (if today is Saturday, then Monday does not come before; you cannot set an alarm for _last Monday_, right?) and also I don't think this fits with what we were talking about before (it's just an enumeration, not really a _range_).
I'm still wondering why 'let' and 'const' were even introduced as new key words. We already had a perfectly good key word with 'var'. I propose the following: var foo // global variables var var foo // this is for lexicals var var var foo // this is for constants Why fix the language when you can just add more equal signs... I mean 'var'.
I think we're too far into the why. Irrelevant of you not wanting to do it, or being able to see why, I do and can. I think I've also described it well enough, and my function DOES solve the problem. So we've been having a long discussion now. I am actually quite interested in better implementations of my function that does the thing that I want. I am not being facetious, and genuinely want to see the better implementation if it exists.
Yea I know. But the guy clearly ripped off the structure of Addy's book without crediting him anywhere (unless I missed it)
You said this in a way more approachable manner, which I appreciate. *Sometimes* I’m wrong about things, but I **always** want to be corrected, The other guy started off super negative, then followed up with fragment sentences after ridiculing how terrible my explanation was. Thank you for not being super negative as we all learn together. 
It sounds like the interviewer may have wanted you to demonstrate that you know how to implement `Array.find`, etc, yourself. That's not all that farfetched; a reasonably fair way to check basic computer science knowledge for junior engineers. He may have legitimately not known about the new syntaxes, which isn't a great sign but may not be that uncommon in big companies. That being said, you should have absolutely explained the differences between `let`, `const`, and `var`, and explained when they were all appropriate to use. Understanding block scope is important.
I do concur in that this is getting nowhere. On the other hand I think I'm not getting my point across, which is not really about the implementation but about the _approach_. I mean, a different implementation of _your function_, maintaining this idea of "a range with a loop size", would probably end up being just as complex as yours. What I wanted to explain is that, approaching this in a different way, that added complexity in your functions would simply not be needed. In any case, let's leave it as it is. If you're happy with your approach, then everything is fine and who am I to discuss it.
My first thought is older browser support, and maybe just that the interviewer didn't know higher order functions or functional programming. I'd definitely say the interviewer has some stuff to learn, but it's also worth some introspection on your part: did you ask about the context in which you'd be coding if you received the job? Are there some methods that you'd have to work around or a need to transpile code? Can you read and write non-ES6 code proficiently if asked to maintain existing code? Etc.
You are right. He could’ve built it with plain html, css. But where is the fun in that? Why can’t he use [insert framework/library]? I mean it’s his portfolio I think he should be able to use what he wants. Now if this was a production web application... that might be a different story where using the right tool and reducing technical debt has to be taken into consideration. But in the case of a portfolio, who cares as long as it showcases his skill and experiences. 
Haha agreed, nothing good can come from being a jerk, we need more positivity and community support in this world 
So then what is the implementation of the concept you're proposing? You still haven't offered me any solutions.
&gt; 1/1000th as many trade-offs as Vue had to make when attempting to put all of JS into HTML What part of 'v-on:submit.prevent' is JS? It's a bloody HTML attribute: https://stackoverflow.com/questions/925994/what-characters-are-allowed-in-an-html-attribute-name
Thank you. I've personally removed the connection of questioning my own skill at development the interview process. The interview process is a bit of a joke and has no correlation to how well I do my job.
I may be wrong, so please correct me if I am, but I thought `const` was used for `Object` variables, because the variable will store the reference to the variable. Therefore, even though you may change properties on the object, you’re never changing the reference, so the variable value remains constant.
This sounds really peculiar. I don’t have the same issue, so cannot be able to appreciate exactly what that’s like. So for example, if you’re in a client meeting (so away from your computer) and your boss asks you whether something is possible, or how you could solve a problem the client is having, are you saying you’d come up blank and not have an answer? Or do you still know what’s feasible, broadly speaking, but couldn’t code it on the spot?
This is amazing! I will update this comment with feedback. Thank you!
Why would Google use Facebook's tool when they have their own in-house tools...
Just out of curiosity, do you have a GitHub with some code I can browse?? If you write good code then experience shouldn't matter for a junior dev job, more or less.
Could anyone give me a basic explanation of block scope in this context? Or point me to a resource that can?
Look at this website, there are great list of books suggested by top experts as well as taught at top universities like Stanford and MIT: [http://www.doradolist.com/stanford\-algorithms.html](http://www.doradolist.com/stanford-algorithms.html) It looks like "Introduction to Algorithm" is taught by many top notch school.
I recently had a Java interview where the interviewer blasted at me "NO, NO PYTHON, JAVA!" when I was explaining hash maps, I only mentioned "They're like dictionaries in Python" after I explained them. He got mad and went onto the next question without letting me finish. 
There's a fair bit of gatekeeping in some programming circles unfortunately. It's a shame!
I don't want to look at any more javascript noods.
var is scoped to the function, while let is scoped to the nearest "curly brackets" For example: if (true) { let a = 5; var b = 6; } 
* `const` is a signal that the identifier won’t be reassigned. * `let`, is a signal that the variable may be reassigned, such as a counter in a loop, or a value swap in an algorithm. It also signals that the variable will be used only in the block it’s defined in, which is not always the entire containing function. * `var` is now the weakest signal available when you define a variable in JavaScript. The variable may or may not be reassigned, and the variable may or may not be used for an entire function, or just for the purpose of a block or loop.
Sounds pretty red-flaggy. I don't want someone who doesn't have a clear understanding of ES6 to ask me to whiteboard JavaScript to them. Every single JS dev I've met, junior to architect, has had nothing but hyped enthusiasm for ES6 for like the past 2 years.
And react had that damned PATENTS clause when it first came out.
Agreed, but having worked with all of these, angular and polymer are vastly inferior. Also most teams at Google weren't using either to great effect--people wrote just like you would C++ because most people were backed engineers. And besides, DOM binding is just one piece of the puzzle--Google was also loath to adopt basic open source libraries because the tooling is not set up for it--it's set up for statically bound google3 dependencies.
[You know, at least I'm not the first one to make this typo...](https://www.reddit.com/r/javascript/comments/6mafu0/nood_question_about_javascript_logs/)
a) It does not map directly to the execution of Javascript. b) It does not try to represent/fit *any* Javascript into an attribute.
Can you explain what you mean by: &gt;`const` maintains the integrity of value and type of the variable. So for primitive values, you can't change them. For objects/arrays, you can only change their inner elements/values and nothing on the prototype. I just tried: const obj = {} obj.__proto__.test = "test" obj.test // prints test and obj.__proto__ = null object.__proto__ // prints undefined both seemed to work. But I might be misunderstanding what you mean.
Don't bother supporting older than one generation. For example I only support iPhone 6. But that's just because that's all I have. For the most part if you can make your shit work in safari and chrome it'll work on iPhone and android.
I very often will give a high-level pass but give the caveat that I'd need to double-check the code first. Saying something is easy when, in reality, there are serious technical roadblocks (usually hidden), is a great way to piss people off. 
i thought it was kind of sweet and to the point
`let` and `const` actually *do* hoist within their scopes. 
wat. https://github.com/facebook?language=&amp;page=2&amp;q=&amp;type=&amp;utf8=%E2%9C%93 beyond react, they made jest, and hhvm to name a couple of prominent technologies.
#2 - Container / Presentation components The example shows exactly how *not* to use this pattern. `ProductContainer` is tightly coupled to `Product`, making the separation useless. What you want, is to separate the business logic from the presentational logic in a way that they can be connected whenever you need to connect them, not hard coded. // Can be used for any component that needs a product, not just `&lt;Product /&gt;` class ProductContainer { state = { product: {} } componentDidMount() { getProduct(this.props.id).then(product =&gt; this.setState({ product }) } render() { return this.props.children(this.state.product) } } App = () =&gt; ( &lt;ProductContainer id="3"&gt; {product =&gt; &lt;Product {...product} /&gt; &lt;/ProductContainer&gt; )
I refuse to use let.
I'm not sure what you're trying to test there, but the point OP was trying to get across is that even though a const can't be reassigned, you can change the properties of an object or values in an array. E.g. const thing = { a: 1, b: 2 } thing.a = 2 // allowed thing = somethingElse // not allowed
.. arrow functions?
You said bloody. Kewl. 
Theoretically, I thought all variables are supposed to reference their data. For example, if you increment a number, a new number is allocated and the variable changes its reference to the new number and leaves the old one unaffected. Obviously this doesn't *actually* happen internally, but the js engine is supposed to behave like it does. I'm not sure where I read this though, I could be wrong. 
That _is_ a way to use it, but I'd personally prefer not to mutate any object expecting that to be obvious while using a const. Generally I'd create a new object (as a const), or reassign with a let if adding/changing properties.
In my experience startups are the first to pick up modern technologies when they first start out, then they will stick with it and never update it for like 10 years.
Personally I feel like that's a poor side effect that should be avoided
Why do you stay there?
\[MDN topic\]\([https://developer.mozilla.org/en\-US/docs/Web/JavaScript/Reference/Statements/block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)\)
Have you looked at the quill docs? This method looks to do exactly that https://quilljs.com/docs/api/#gettext 
You work at Facebook and thought React was only used internally? Or do you mean it was developed in house? If the latter, that just makes them more cutting edge!
Hi, thanks for the feedback. I will update it with a more clearer explanation. For now you can see here: https://stackoverflow.com/questions/29413222/what-are-the-actual-uses-of-es6-weakmap 
Thanks a lot :)
Hi /u/EdwardSchmitt21, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
The modulus operator, in this situation, essentially clamps a value onto your circle. It is the remainder after integer division. Another way to think of it is subtracting a number from a value until your value is smaller than that number. So 156 modulo 100 is 56. 9 modulo 2 is 1. Pro tip: modulo 2 will tell you parity (even or odd). Modulo 10 will give you the last digit of a decimal number (the ones' place). Analog locks are often used to teach it. So if my hour hand reads 8 and I add 6, it now reads 2. This is modulo 12 arithmetic.
I have wonderful co\-workers and it's a friendly environment to work in. I'm given the creative freedom to make CLI utilities in modern JavaScript in Node.js whenever we need to, as long as it gets the job done and I show my coworkers how to maintain it \(e.g. explain the differences between modern JavaScript and ES3\). Besides, modern JavaScript is never off the table.
Oh no I was well aware that React was both developed internally and widely used outside--but one technology alone doesn't make a company cutting edge, especially when React was built on a lot of prior art. That said, after /u/benihana reminded me about Jest, HHVM, Immutable, and I remembered Flux was also a Facebook original, I was willing to walk back my assessment of FB as a whole.
Got you thank you so much, so if I define the paramters in the query with ID! then apollo caches the result using that unique id, so that later on when it sees the same id it can look it up in cache due to its uniqueness. right?
Do you happen to be working for Atlassian?
It's sometimes common to have interviewers ask for a low-level way of doing things. Using older mothods with less helpers. One time they asked me.to show how to perform operations on a string. They insisted I write my own functions for iteration of every character. I was like, I would definitely use built in functions for this. They didn't hire me
Which...is a perfectly reasonable thing to do.
I’m aware that preventDefault is part of the DOM API but that has nothing to do with it. I see you’re missing the point. 
&gt;For those interested, a great inspiration for this article came from the Gang of Four book *Design Patterns: Elements of Reusable Object\-Oriented Software* and Addy Osmani’s *Learning JavaScript Design Patterns*. I highly recommend both books.
It's not bad practice because you'd be using const to stop reassignment, not mutability. There's other ways to control mutability if that's your intention.
Er... sorry, but how is that a completely different thing from "The fundamentals of the job involve solving problems, so asking one to show you that process is perfectly reasonable."? It sounds like you two are talking about the exact same thing.
Okay. That’s interesting. I find the opposite in that when I’m discussing a high level concept, I sometimes find my mind wandering into the specific details as to how I’d code the solution. I don’t verbalise such thoughts. And I think interviews sometimes compound the issue of you cannot readily recall information. The expectation of the interviewer makes it worse... Like when you’re trying to take a piss with a guy already stood next to you.
Not to mention Graphql.
is it really that blatant? (haven't read the original)
Yeah, that's the beauty of it. Also, if you later make a mutation and spacify the type of result you're getting, the client knows to look check for updates for that query. You should also look into optimistic updates, which might also be automatic in such a scenario.
Of course you can keep using `const` for any code you personally write, but the utility of it is going to be greatly diminished if everyone else uses `let` for everything. There's not much you can do about that.
Ok. Your proposed function however would only map one direction, and only onto a loop that starts from 0. My function maps a number from an arbitrary range onto another arbitrary range.
Sure, but you can adjust your range so that it starts at 0, use modulus, and then reapply your original shift. It could help you avoid if statements or conditionals that significantly increase complexity. Just an idea!
omitting var altogether would be the next
i was very clear in my response. Writing code on a whiteboard is a poor interview exercise in my experience. 
Because I use a fundamental aspect of the language? 
You can use `await` for this. 
Yea, every interviewer has things they want to hear the candidate say. Especially obvious stuff that a lot of candidates don't point out. To be fair, if you're able to discuss the problem and its solution confidently then it's good enough for me.
You can test your app or really anything in the browser using https://www.cypress.io/ - and that's Mocha + Chair + Sinon all included by default 
You should know what your functions should need to translate to if you're ever in the need to make your code backwards compatible for older browsers, let's say IE11. Run your through a babel processor and see what it spits out. I love the es6 stuff, but a lot of government agencies require older crap that will drive you insane.
No because you refuse to accept that people can have a style that is different from your own and therefore have different needs. It's kind of the beauty of babel. I have some old code in production which was using rxjs when they recommended :: :: works in some places and if it works for you use the plugin. But the official specs have alot more use cases. That's why they are "making a simple thing complex". 
Hey, bel9708, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Sometimes when you have a bad interview at a company it's not that you did a bad job, it's that the company is terrible, you wouldn't want to work there anyway even if you got the job, and the interview failed because of their terribleness. As long as you're not one of those people who always thinks they're right (even when they're wrong) I think it's pretty safe to assume the latter case when you have interviews like that.
I just wanted to point out that when you use `const` you're not declaring an object as `const`, you're defining that reference as `const`. To prevent an object from mutating you would want to use something like `Object.freeze()`
I find it strange he referred to ES6 as "plugins." is an update to the standard and is part of an ongoing effort to move the language forward. If it were Java, C# or C++ he would have just referred to the compiler and language version. Saying "use vanilla Javascript" seems to speak to a misunderstanding around the language in general. I'm curious what the primary language in the shop is. 
Except you don't have a way of knowing if the code in the Github account was written by the person being interviewed.
So everyone should write js in their own favorite flavor of js? That's retarded.
I don't like this practice because its not clear to other developers that when you use `const` you expect the object to be immutable. I think you should stick to using immutability for immutability and use `const` for constant references.
im assuming that you understand that using a whiteboard as a tool to diagram or visually exhibit a concept and writing code on a whiteboard are two different things? 
Isn't this exactly the same as this? function doIt (x, options) { if (!options) { options = {} } ... } I was under the impression that function params are already `var`s.
Sure, I'll let you know when I upload it 
&gt;but the utility of it is going to be greatly diminished if everyone else uses let for everything Why? Just because others' coding practices are subpar doesn't mean that holding yourself to a better standard is a waste. It'll make life easier for you *and* for anyone who ever has to read that code that you write in the future. It's unfortunate if the rest of the codebase is in `let`, but that doesn't diminish the usefulness of using `const` - it just means that other code written by others that you'll come across will (unfortunately) be undifferentiated.
I don't understand. What are "es6 plugins / plugin methods"? I've never heard that terminology before.
No amount of pay increase would be worth going back to for loops. 
A higher order function is a function that returns a function so neither of those fit that definition. I'm thinking there was a mixup in terminology in OP's description.
You should tell then that your are writing on a whiteboard and not in a browser window. And also if the feature are officially in the spec of a language, your test is fine. They had to tell you if you aren't allowed to write ES6+ code for the test. 
add a linter?
Well you *can* put data in the URL for a post, or even in the body of a get. But generally you use the body for a post because it has more data that might exceed some maximum URL length and may be encoded more efficiently. For POSTs (or PATCHes) you can encode some data in the url (like an ID) and other data in the body. 
Also, servers don't generally log the body of a request but they do log full urls. This makes POST better for gathering data from users since it doesn't hang around in server logs.
Whack is 90s slang for bad
I fucking hate linters but in this case I would welcome it.
A message body has no semantic meaning for a GET request and so including one is dangerous. Proxies, for example, may choose to drop the body entirely and caches may ignore it.
Was thinking the same thing. They wanted me to whiteboard a tic tac toe game. 
A bunch of people have answered a variation of this, but I would consider this a major red flag. If the interviewer was not up to date with new technology, that's forgivable. I don't think it's forgivable if they were annoyed by it. Lastly, whatever your opinions are about whiteboarding, depending specific syntax at all makes 0 sense. I've done whiteboarding a few times but I've always used a made-up pseudo language. Two redeeming points: * As a javascript developer, I do think it's good to be very familiar with pre-es6 syntax. * I do think it's OK as an interviewer to ask to avoid certain language features or libraries. For instance, I once conducted an interview in which the interviewee had an almost 100% answer supplied by a built-in feature of their programming language. In this case I asked if the interviewer could reimplement it with simply loops. If the interviewee didn't want to, I would have ended the interview immediately. However, based on your description of these events this doesn't really seem to be the case and you were dealing with an inexperienced prima-donna. If working at this company would mean reporting to this person and your situation allows it I would try to look somewhere else.
It's not bad practice because the *reference* is constant.
it looks like position().top is giving you inaccurate values for some reason, which means the wrong link is highlighted. For example, if I click on the second link, the position().top of the second section is like 2242.5, while scrollTop() is 2242 (so 2242.5 &lt;= 2242 will be false, which will mean the link doesn't get highlighted). I'm not really sure why this happening, but you could probably just subtract 1px from position().top and it seems to work OK. Also, another thing I noticed is that the page tends to lag a lot than scrolling. This seems to be caused by the shadows; if I change some of the `filter: drop-shadows` to `box-shadows`, it works a lot better. Alternatively, you could try reducing the radius of the shadows and see if that helps.
I managed to completely miss that. As far as I know that's totally wrong and const/prototypes have no relationship.
&gt; ight also be automatic in such a scenario. Thanks.
You should look at ES as different releases of Vanilla JS. Unless you're specifically targeting old browser I would always use the newest ES features available, maybe with a polyfill for browsers that don't offer native support. Currently I would suggest learning and using ES6, and looking to ES7 in the future
Haven't used it yet, but I find the API kind of odd. User defined prototype methods are never really the way to go. Rather than asking the user to extend the prototype, what about providing the `live` and `mutate` functions as constructor arguments and provide the necessary arguments? ``` const agent = new Agent({ live(self) { for (let i = 0; i &lt; self.dna.length; i++) { if (self.dna[i] === evolve[i]) { self.score++; } } }, mutate(self) { for (let i = 0; i &lt; self.dna.length; i++) { if (Math.random() &lt; rate) { // MUTATE DNA } } } }) ``` Something like that seems a more intuitive and standard interface. Thoughts?
For using ES6 today you should make some compilation to ES5 as well like gulp or similar. Some companies like mine for example ask to write all code on clear ES5 because they don’t want to make extra step before it production. I am writing code on Vanilla ES5. And I agree that is is a lot of done for today on ES5 it is supports on whole browsers after IE8. Also a lot of API documentation for ES5. This is the point. You can write on Type Script as well and compile it to JS. But who will support your code?
Several things imo: 1) Read the source for popular open source projects. You can learn a ton by reading code like that and seeing new techniques. Then you usually have to google it because you have no idea why they did that. Here's a good start: http://underscorejs.org/docs/underscore.html The bonus with underscore is that it's annotated very well This video is also great https://www.youtube.com/watch?v=i_qE1iAmjFg 2) Build lots of varied little projects. Games especially are really great because you run into interesting algorithmic or UI problems. You could start with a game of tic tac toe. Then move on to snake. Then sudoku. Then a simple pac man clone. The graphics can be really bad, and that's ok because that's not the important part. Beyond that I would ask yourself if you care more about learning JS specifically, or you want to learn domains? For me, I like learning various domains like how can I write a very simple: - web server - game - react-like framework from scratch - form validation from scratch - web app - emulator - ... I favor short projects that are 1-2 steps beyond my reach. If I'm too ambitious it's overwhelming. Good luck! 
You are absolutely right. I was confused by what he said as well. I think that the interviewee be able to solve a problem on the board/on paper by writing code or even psudeocode. My main point was, absolutely correct syntax and API recollection should be left out of the whiteboard/paper interview, for that isn't core to the process of solving engineering problems.
No one at Google uses Angular, in fact if you follow a lot of googles blogs they pretty much say it's shit. Google writes it's own frameworks from scratch, Angular is only seen as an outside consulting business thus it's designed with consulting in mind, but no one actually uses it for anything 
I think you may have confused AngularJS with the current generation Angular (currently at v5). I understand the prejudice against Angular’s name if you’ve used AngularJS in bigger applications. But it’s a completely different ballgame now. Anyway, no reason to turn this into a pissing match regarding our favorite libraries. I think I can kinda get into the idea that Google’s slow to adopt. Although they’re usually close to the cutting edge, considering things like Google Docs collab mode, which is a nice combination of a back- and frontend solution done well.
Unless it was Rails then they eventually have to do something at some point
Because traditionally GET is just the request download a resource from a web server... whenever you visit a page and download JS and CSS files, your browsers doing a GET request to get those resources. It's similar to routing, doing a GET for domain.com/index is different than doing a GET for domain.com/profile, but either way you're just downloading HTML from the server and asking for which one you want via the /{path} GET-ing from an API is the same thing. It works like a file system, you want to GET the data at a certain /path/to/file.json. But then people wanted to get creative, and instead of making different folders for each user's profile, they just captured the URL and loaded specific data. And one day someone was like "I want to be more specific about what data I want", and so query params became a thing
I can't provide them because it would take be hours to track down, but essentially it was one of the browser performance blogs that argued against frameworks like angular. Granted they were talking about the old angular, but seriously no one outside of the Angular team uses or cares about the new Angular, I mean it has nothing going for it. It's not the best framework in terms of performance, flexibility, or ease of use and it doesn't have any marketshare. It's essentially just a framework meant to lure in dinosaur enterprise companies to sign fat consulting contracts. 
I agree with the varied little projects, but not games... that shits hard lol and deals with a lot of disciplines you don't typically use. But yeah, make little projects... make your own blog framework, recreate a simple reddit, etc, just make stuff
what a shit article, can't believe you used your real name.
That’s interesting considering the recent developments making the Hello World app only 3kb or something to deliver to the browser. I get the idea you’re confusing a blog about the old version with it’s current state. Obviously if you’ve been hurt so to speak by the JS version I can understand some hate towards it, but that’s not really giving it a fair chance is it? Then again, everyone can love and use whatever they want of course. My opinion, using it on a day-to-day basis for a couple of big organizations is the Angular has learned alot from it’s mistakes. That’s the price of being first (AngularJS), and while it’s still quite opinionated is a breeze to work with after you understand why they decided to do a couple of thing a certain way. Oh and now it does scale pretty well. Then again, use what you love and you know of course.
Hey, Bjeaurn, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Thanks! Good bot!
Haha. That's fair. Emphasis on very very simple games. I started writing simple games recently and really learned a lot. React is built on a lot of the same principles that drive games. The way UIs are going I think there's value in this direction, but perhaps after learning other stuff first :)
fap less code more
Declaring a var for something that is already a parameter doesn't make sense.
I'd hire you. The interviewer sounded like a dick.
It was you, wasn't it.
I work for an old Fortune 500. We use Babel, es2015, Babel, React, express, etc in our customer facing marketing site. We're an oddity though, all the account management, support and internal sites are terrified of that stuff. They just about accept jQuery. Recently started work on a joint project, I'm forcing them to use modern tooling and it has been hard work. The learning curve for them is basically vertical.
Backward compatibility.
You would think so. But we're a very small team running a very big site, we don't have capacity to play by our own rules. It's not like we could just build our own version of Express, we simply don't have time. The point I was making was older and bigger isn't always equal to slower and outdated. There can be pockets of modern teams hiding out.
It's always confusing to talk about literal escapes as you can only really type the escaped versions... It sounds like what you want to do is replace all escaped characters with there unescaped equivalent. Then check the length of the resulting string. There's unfortunately not a built in function for that. You might be able to hack something up using `eval` or `JSON.parse`, but really, if the list of control characters you care about is relatively short, it'll probably be faster, safer and more readable to just use `String#replace`: var x = "A\\r\\n\\r\\nB"; // x is a literal "A", followed by a literal backslash, followed by a literal "n", etc. console.log(x.length); // prints 10 console.log(x.replace(/\\r/g, "\r") // replace a literal backslash r with an actual carriage return .replace(/\\n/g, "\n")); // replace a literal backslash n with an actual newline character // prints 6
Knowing jQuery can be really helpful, but in modern web development there are far better tools. Some frameworks even include jQuery, like Ember, because there are times you might want to use both. Ember is also more structured than angular or react so it may be easier to pick up (in my opinion). https://medium.com/@wisecobbler/if-you-think-you-need-jquery-in-your-react-app-you-re-doing-it-wrong-77899ed7217e
Next time this happens, offer to write in ES5. Then if they give you an offer, use it to get more money from somewhere that's heard of webpack.
When interviewer asks you to write code on a whiteboard \- run. I will never understand why on earth would anyone do that. Do you work on a whiteboard instead of a PC? And, in overall, if your interviewer is not a pleasant person to talk to \- spare yourself a trouble and don't bother with getting an offer from them. Healthy work environment is much more important than anything else. 
My books (free to read online) may work for you: The first one explains ES5, subsequent ones explain what’s new and different in ES6, ES2016, ES2017 and ES2018. http://exploringjs.com
&gt; and don’t want to see the 2006 buzz words like jQuery, Bootstrap, and so on (sorry, not sorry). These was the words of a JavaScript interviewer at AppsFlyer. You can read his full [article](https://medium.com/appsflyer/unlocking-the-javascript-code-interview-an-interviewer-perspective-f4fe06246b29) here. 
Jquery is becoming obsolete, if you are building a website from the scratch,try to stay away from it, the era of manupulating the dom directly with javascript has passed, now days there are frameworks that do it with way more elegance and effectiveness look at react, vue.js and angular (vue is my choise). The only reason to use jquery nowdays is pretty munch because of legacy code.
How the fuck did you ever get hired by Google?
Object.seal() is actually a better option.
A lot of other answers here talk about frameworks making it obsolete, but that's not the case. It's obsolete because the problems it solved are no longer problems, even if you want to work with the traditional DOM.
I find that you can avoid jQuery now that you have things like `document.querySelector` for DOM manipulation, the new `fetch` API for fetching remote resources, and the helpful new array combinators. jQuery does make *some* things much easier than vanilla js, like event delegation, where I sometimes miss it - but with some clever thinking you can implement it yourself. React.js is a very popular framework and it will help you monumentally in finding a job if you're skilled in React. I personally went the Vue.js route, but React is undoubtedly more popular. jQuery for the most part will be utterly unnecessary if you're using React, so I'd say your friend is right.
Wtf?
So do many backend frameworks, FWIW.
Practice... ... a lot.
Yes. These are more commonly known as lambda functions in other languages and math. It comes from [Lambda Calculus](https://en.wikipedia.org/wiki/Lambda_calculus)
Essentially POST has side effects GET shouldn’t. Making the same GET request should have the same result each time, POST probably won’t (i.e if you post the same form twice you will get a new record each time) 
jQuery is still widely used and very easy. You don't need a whole framework to do simple DOM manipulation.
I see everyone seems to have gone off jQuery, is it bad that I still use it for my projects?
You don’t need jQuery to do simple DOM manipulation imho.
I have always wondered, why should the logic for an operation be defined at the protocol layer, and not just the application? Couldn't you technically define a GET controller that would DELETE or POST a resource in your apps logic?
jQuery is interesting to know. The fact that it eliminates whole classes of errors in DOM manipulation by representing "everything that matches" as an array, *always*, makes this an interesting approach. It also includes a simple, platform independent way to implement event handlers. 
CSX.codesmith.io had amazing challenges and resources for basic JS type stuff
Oh yes, I agree. I give the option of using a text editor or white board.
Super small Javascript testing library. It can't get any faster or smaller: https://shikaan.github.io/titef/ https://github.com/shikaan/titef https://www.npmjs.com/package/titef
Do React. I have been programming professionally for 15 years. I swore off front-end development during the height of jQuery because I found it to be a hot mess. It wasn't jQuery's fault; it was more about browser and JS immaturity. But also the concept wasn't great: jQuery was really good at manipulating the DOM, which is just one big data structure that serves as the low-level interface for browsers. I dunno about you, but that interface sounds like a nightmare. So it solves a real problem very well, but it's a problem we shouldn't have to deal with. This kind of thing is why we didn't stop developing languages at C. You will find that React (and maybe Angular too, I don't know) takes an event-driven approach, and deals with state by dividing it into domains known as "components," and protects access to it. Basic stuff on the backend, but this is a revolution in the front-end world. I also used Babel so I had all the features of the JS language at my disposal. If I had this project to do over again, I might have done TypeScript instead. I love static type systems (mostly because I love good and early compiler errors), and I think I would like React even a bit more if I had TS in the mix. I didn't do it because the tooling got to be a little overwhelming and I needed to make rapid progress. I used create-react-app to avoid fussing with the notorious JS toolchain.
I'm not hot shit but I can afford to be selective about gigs that I take, and I would avoid a jQuery project unless it was to port it to a modern framework. You would have to have some real office perks for me to forego the sanity-promoting niceties of React or Angular. I think it would be good for your career and recruiting to update some of those projects.
Yeah, you're right. I got the two confused. It was too early in the morning. ha ha
They use Angular in more than 600 apps at google...\[proof here\]\([https://youtu.be/dIxknqPOWms?t=1518](https://youtu.be/dIxknqPOWms?t=1518)\)
Hey! Thanks for the feedback. I absolutely agree it’s weird api and actually I was trying to decide how to better handle that, Currently, the culture class calls the live and mutate functions of the agent internally. i’m not sure how to expose the callback i passed in to be called externally - like the prototype allows. I’m sure i’m misssing something obvious.
He won't because it's not true, proof here : [https://youtu.be/dIxknqPOWms?t=1518](https://youtu.be/dIxknqPOWms?t=1518)
Will those jQuery projects break in the future or do mean I should update them simply to show off more recent technology? If someone isn’t paying me to do it, I probably wouldn’t make any changes unless necessary. I have an old portfolio site built on Angular 1 and it was a great experience but the client-side rendering wasn’t so great for me. I will try to move onto React and Vue now, maybe get back into Angular 2. The thing is, I love writing JS but in my line of work, these frameworks seem like overkill. If I have to import jQuery as a dependency, I end up using it as it handles the little things. I want to have more projects that “do” stuff but I find what my clients really want aren’t those sites.
I agree. When I need immutability, I use `Object.assign({})` or ImmutableJS.
Not the same. If you changed the if statement to typeof object === 'undefined' then yes it would be the same. But then you are modifying the value of a function parameter which is against many eslint rules. 
No, there is no reason to, React and Angular replaced it long time ago. It had a good run though 
If you are using a framework like React, Vue or Angular you should not need nor use jquery. If you are writing vanilla js you can and I would use jquery because you'll end up writing a bunch of jquery-like helper functions anyway, and the library is tiny.
So let / const and arrow functions won't work in IE11, which last I checked, pretty much has to be supported via babel until it goes away.
Bro, nobody use the 'j' word anymore
weak argument, Php is still widely used, so is wordress 
I absolutely disagree. Stuff like atribute query selectors, adding classes, Ajax calls, dom manipulation is just easier to write and quicker with jquery. Can you do it without vanilla js? Of course, but you'll end up writing your own library of helpers. And that's fine I guess, but if I'm looking to get shit done from the get go I'm going to use jquery, or maybe lodash and axios or whatever else. The point of libraries is to help you get working code out instantly, it's not some dick measuring contest of 'Ohhh I don't need library X". If à tool makes you more efficient and makes your day easier use it. There are no real world points for writing pure JS vs using a library. And I'm willing to wager that developer A using nothing but pure JS and developer B using jquery, and having to support a real world example of IE 10 +, developer B will win out every time.
Try to avoid jquery now that most of what you need can be done in native js. a) jQuery has many methods which are similar to native js, but slightly different - this can make you confused and deteriorate your vanilla js skills. For example: jQuery’s `each` uses index as the first param and an element as the second, while vanilla `forEach` is the other way around. b) Forcing yourself to use vanilla js will also improve your skills and understanding of the DOM api. For example: using querySelectorAll instead of jQuery selectors forced me to learn about the many different ways to cast a nodeList to Array. And made me read up on the difference between nodeList and HtmlCollection.
Yes, I even remember just when I was learning Angular, I kept running into situations where I knew I wanted to do something I could do in jQ and it was right there in Angular and even easier. But I find with my clients, there is unfortunately less need for Angular and other frameworks, but I hope to change that.
&gt; a whole framework Vue is not bigger than jQuery. (as long as you don't add routing and state management... Which you don't have to if you're just replacing jQuery)
[removed]
Oh. Thanks to all , but before I jump into react, how much JavaScript is required?
I sort of understand the concept of a white board. You're trying to find out what they can remember and how fast they are able to solve relatively simple problems. My only thing with white boards is you are taken out of the normal way of coding. Some people are emberassed of their handwriting. When you make mistakes you get nervous because now you have to find the eraser instead of clicking the delete button. I would rather see companies use a laptop with a projector. I actually wanted to do this at a previous job when I was interviewing candidates but the company only had desktops.
I wouldn't argue that you should update to show off or impress anybody, of course. It really depends on where the project is in its lifecycle whether an individual upgrade is worth it, so I can definitely understand your position. If it ain't broke, and you're not adding big features, why fix it? I get that. I had an interview discussion with a SaaS company (IPO'd just a couple weeks ago) that used Vanilla JS until this year. They were porting to React because they were having trouble recruiting and teaching new talent (a custom framework is much worse than older tech for this), and also because React plays really well with Vanilla or jQuery. So you can do new features with React while not moving everything at once, which is nice. My reason for avoiding jQuery these days is not that I think those projects will break soon. I think that such projects are likely to involve a lot of "undifferentiated heavy lifting" that modern frameworks obviate. That's usually the reason we get new languages in the first place -- someone sees a way to abstract a portion of the problem space, and people use the new language because they don't want to deal with that problem either. But that doesn't always mean the old language is obsolete. It just might become more niche. For example, lots of people write C, because the world needs kernels, hardware drivers, real-time systems, etc. But if you told me you wrote a proprietary web server and REST API with C, I would want to hear more only out of morbid curiosity. I know jQuery is used to develop some of the newer frameworks, so it has application there for sure. It sounds like you have projects which are legitimately best-served by jQuery. If I was considering work on those projects I would probably want to look closely and judge that for myself, but over Reddit I will take your word for it, for sure.
But JS have had lambda functions for quite a while, albeit arrow functions bound `this` context to it. It's still doable in older JS.
Really not trying to step on your feet here and i liked jquery for all the things you've mentioned when i used it years ago, but then again, these are patches and band-aids that shouldn't be needed if frontend was sane and deterministic. There is no way you end up with random instances of this and that component if your view is a pure reflection of state, or that something doesn't exist any longer, etc. The whole idea of manipulating/mutating the dom, writing and reading out classes, informing views by selecting them, using things like setTimeout for delays - it's brought nothing but pain and misery.
I’m going to answer the question in the title specifically. Yes, you should. You don’t need to be a jQuery grandmaster or anything, but it will only take you a few hours to learn the basics and a decent amount of regular exposure will leave you sufficiently comfortable with it. I’ve had two jobs in my relatively short career so far and I needed to know jQuery for both. Enterprise software is very often concerned with what works, not with what is the newest, shiniest thing and jQuery works. There are better ways to do many things than with jQuery, and there are also better ways to browse the web than IE and yet we’re still having to support it as web devs way too far into the 21st century. I maybe wouldn’t recommend jQuery for personal projects or anything where you have the privilege of starting from scratch, but it’s something you probably should know regardless.
All of it. I mean, the more JS you know and the better you are with it, the more problems you'll be able to solve more elegantly. I guess if you mean how much JS is required just to start... don't worry about that, every tutorial for React will teach you enough JS to get started. Make sure you use Babel or (better in the long run) TypeScript to learn ES6+. I wouldn't spend a lot of time learning older JS idioms up-front. Worry about those as you encounter them. 
Great response! I really hope I’m using jQuery only where it’s most positively impactful, though I know there are moments I get lazy and think “I’ll probably need it later so might as well start using it towards the beginning of a project”, which is bad, but eventually, I want to add something like Slick and boom, I was already using jQ. However, I generally try to avoid any unnecessary dependencies because it always comes back to bite me in the ass when it comes to optimization. I just commented in the first place because I felt obsolete myself reading all the other comments about how OP should stay away from jQ so I wanted to get a little deeper into it. I agree that OP probably shouldn’t spend time learning jQ because first of all, when you end up using it, it’s really dead easy to learn. The concepts are fairly basic and there is plenty of documentation and SO content out there. Secondly, because of its simplicity and utilitarian purpose, making a website with it where it isn’t a good fit wouldn’t be fun. From my experience, Angular is really powerful, and my buddies from the office do incredible things with React, so there is more functionality and the concepts are more complex yet super useful just to have a grasp of.
They’re only easier and quicker in your opinion because you already know jQuery. When you’re starting from zero knowledge of DOM methods, you have two options: learn JavaScript or learn jQuery. Neither one is objectively easier or quicker to learn. jQuery only presents different solutions to the same problems that modern JavaScript is capable of solving. And when you already know modern JavaScript’s DOM methods, as is the case with OP, then the only reason to learn jQuery is to work for a company which uses jQuery. “A library exists for that” is not a reasonable excuse to avoid using standard library features, whatever language you’re working in. Coding is not about hacking existing tools together until something works. We get paid to learn and make things better. Often that means letting old methods die, even when they’re popular and useful. That’s why we don’t use Flash or Java applets anymore. 
The only reason I spent some time learning JQ was so that I would be familiar with it if I came across it in codebases that were not mine. It's still used out there, and there are obviously older projects that still rely on it. My advice would be to learn it to the point of knowing what it is, the basic syntax, and why it's use is in decline. Then put that knowledge into a locker inside your head until you come across something that uses it. Don't spend too much time on it. I'd be more concerned with picking up React (or something similar), and getting very acquainted with it. 
Because that's the difference between GET and POST. Bloody hell, these questions are getting more stupid as time goes by. GET requests are for links. There is only a link. A POST is for form submission, it has a body, and the data is in that body. The URL itself does nothing. It is most useful for dangerous, not repeatable actions, such as cresting a record or deleting one. You don't want these actions to happen when people select one of these URLs from the browser history or a bookmark.
I think you *are* using it appropriately, after I saw in another comment you mentioned you're using Wordpress, which I would think of as a kind of "framework" itself. I haven't used WP a ton but when I did use it, it seemed like extensive customization was not easy to do or maintain. In the case of tweaking Wordpress styles/templates after the server-side render, jQuery is definitely the right choice. So I learned something today! Thanks.
Well, I dont think that jQuery is much much easier to do simple things. If you are using modern js and css3, you dont have to load a complete library like jQ. Ppl usually use jQ for easy elem selection, animations and ajax. For that, you can use queryselectors, css3 and the fetch api. 
multitasking. You haven’t coded until you’ve nutted to void:(0)
There's no need to use jQuery anymore. Cross-browser compatibility is hardly an issue with modern browsers and Babel takes care of the rest. The utility functions' native equivalents are fine, a few years ago that wasn't the case and the jQuery API was much nicer. Using jQuery like a UI library very quickly leads to messy and unmaintainable code, since there's no structure and it just wasn't built to be used in the way that some people here are advocating. Just because React, Vue, etc. make jQuery obsolete it's not because it's direct competition to those libraries.
No need? We use it on our web page. It works quite fine. 
I did read them actually. Precisely, I disagree on this: &gt; While the article itself might be bad copypasta, picking up a GoF book, or reading up on SOLID, or looking into enterprise architectural patterns and trying to implement them in ES land is not a bad idea. What you call enterprise architectural patterns, I often call them overengineered overly complex solutions to problems you don't have :-) I've learnt them all (part of my studies), and honestly either they are trivial, or they should be avoided. In short, I think they are useless. Even SOLID: for me the only useful part (for the js world especially) is the S and maybe the I, and both are just... common sense? Common sense... Sometimes I feel like our industry has forgotten its existence. Honestly a "Dude, just use your common sense and aim for clarity and simplicity, and make code that is easy to change" is for me a better advice than all these patterns (which often makes code very hard to change precisely).
The statement above is one I can get behind!
What do you call modern javacript? Ecmascript 6?
Even ES5. Anything with XMLHttpRequest and document.querySelector is capable of emulating most of jQuery’s functionality on a huge browser base. And that goes a long way back.
There are better, less bloated tools for each of those use cases IMO.
ES2017 I suppose, since IIRC that's the latest standard.
There's no need because everything it does can now be done in vanilla JS without the payload or performance bloat.
So is using a whole framework, but the point stands.
$('#my-div').hasClass('.bob').end().append('&lt;span&gt;Hello Bob!&lt;/span&gt;'); $.getJSON(url).then(function(r) {$('#my-div').find('li').append(r)}); How would you write this quicker in vanilla js?
I disagree with this. If you understand JS itself then you'll be able to get by reading the jQuery docs in the future if it ever comes up. And if it doesn't, which is increasingly likely now, you won't have wasted your time on a relic of the past.
Take a leap into React my dude, the web is rich with learning materials. Once you feel comfortable with React, you could even try and dip into React Native. ;\)
Even so until recently my company was running node4 with only had 60% or so es6 coverafe
Well, you are just saying things without providing examples. Look here: http://youmightnotneedjquery.com/ Set it to IE 10 and then compare the two code samples. You CAN do it without jquery, but it's simply not quicker or less code.
I'm pretty sure Google has lawyers who would have properly read the React patents clause for them, instead of the nonsense interpretation that dummies on the Internet pulled out of their asses.
Yes, it is easier to do DOM and XHR stuff without jQuery, now. But if you’re going to do web development that involves working on people’s existing sites, there is a lot of jQuery in the wild. Way more jQuery than React. So you need to learn it. Think of this as a practical question, not an idealistic one.
There are over 11,000 open positions on Indeed related to jQuery - from Mid-Senior, averaging over $60k. The question wasn’t “is jQuery obsolete”, it was asking if it’s worth it to learn jQuery. The job market says yes. Besides, if you’re actually learning JavaScript fundamentals, jQuery is pretty quick to pick up. Learning it is obviously valuable. Using it in new projects is a totally different question. 
If you just want to get familiar with something new, go for it. If you're looking for something that's useful right now I'd skip it. The most commonly used functions in jQuery are: $.ajax \(or .post\), Select by class Select by ID That being said, that's as much as I would dive into Jquery. Fun history stuff: Jquery was around before a lot of the fancy new CSS stuff came out. So it was used to do a lot of DOM manipulation, make things fancy, especially with jQueryUI, and to simplify AJAX calls \(they require a lot of boilerplate logic to do correctly, and no one wants to write the same code over and over again\). Additionally, jQuery had a really healthy ecosystem of modules. So if you used jQuery and needed, say, a modal, there was likely an open source modal library built in Jquery. Now, most of JS development has shifted to React, Angular, and Vue \(and some others\). For good reason. If you've ever looked at a Jquery codebase, chances are it's a noodley mess. While jQuery was worlds better than what came before it \(mostly vanilla JS or things like yui or moo\). The concept of being able to create "components" and the way that modern JS frameworks handle data is worlds apart and much more suited to well organized, sustainable development. Personally, I'm more of a fan of Angular. Angular 2 is really accessible \(especially compared to Angular 1\), but lots of people love React. They're both great frameworks and largely the people arguing about them are arguing about fairly esoteric things that if you're just starting out are not going to bother you much. So my recommendation is to just pick either Angular 2 or React and stick with it until you're comfortable. A lot of the concepts will transfer between the two if you decide to switch gears down the road. Angular / React have an awesome community as well \-\- there are a lot of third part modules for them just like there used to be for jQuery. You can also make hybrid apps with React and Angular. While some people might want to crap on hybrid apps, they're great for straightforward apps that don't need crazy processing or deep native / graphical functionality. \(I wouldn't program a game or VR in hybrid, for instance\). Hope my increased verbosity setting was beneficial for you this morning.
No. Learn lodash next.
DELETE should be used for deleting resources
The only significant difference is AJAX, and that's caused by the requirement to support ancient browsers. Using `fetch` the vanilla JS would be simpler than jQuery. It makes more sense to conditionally include a polyfill for IE than to use a library.
Like... I even hate whiteboarding, because I code as I'm thinking, so I generally have to move code around. On a computer, that's easy, but on a whiteboard, then I have to erase stuff and rewrite it. On a flip pad?! That's freaking awful. I 100% would have bombed that portion too.
All of my government contracts.
The title is a little off; this is about web workers
No, it's not bad. It's a static library that doesn't require a build system for you application. It and your application will continue to run, until browsers remove functions the library depends on. By contrast, these other fancy react type apps require a build system and get out of date quicker. You need to do proactive maintenance, or you'll end up rewriting you app from scratch in a year or two when there are major changes to your micro dependencies in this fast moving node.js ecosystem.
I agree, jQuery also is sane API - that how you ideally want to interact with DOM and browser. It is good to learn it even for pure educational purpose.
I've had to build a jQuery plugin for every company that I've worked for. It's not for SPA but if your company has any legacy code, then jQuery is essential. 
Yeah but you have to learn to use Vue. jQuery is just JavaScript with loads of useful methods.
JQuery is less necessary because browsers have converged more than they were when it was big. JQuery also enables and encourages very inefficient practices (you'll be looking stuff up in the dom constantly). Just don't do it. 
Oh, woah. I actually got an answer. Thanks very much. How were you checking what values they were returning? Likewise, can you use two box-shadows with "box-shadow"? Two or more looks way more natural to me, and I see a lot of people do it (albeit on smaller pages than mine). Thanks again &lt;3
I'm glad I don't have those government contracts. My government contracts don't stipulate anything less than IE 11, and one of them doesn't even require anything before Edge.
I know of companies still locked into IE9
That's great, everyone's situation is different.
&gt; I can’t use arrow functions in production code. Both Babel and TypeScript would allow you to. &gt; It won’t take but a good afternoon to get the basics of jQuery down so OP can know what’s going on... it’s not a huge time investment. Depending on the job, it's a waste of time. As I said, if (s)he becomes good at JS itself then (s)he can always just parse the docs in the future; it isn't very hard.
If you're making Wordpress sites then the expected quality of code isn't going to be very high to be honest. It's almost like another sector.
React 
&gt; It's always confusing to talk about literal escapes as you can only really type the escaped versions... Sort of right: There are semiraw string literals: String.raw`\y\n\0\\` === '\\y\\n\\0\\\\'; Semi because, these are all errors: String.raw`\`; String.raw`\u`; String.raw`\x`; Line 2 and line 3 are [legal in \&gt;= ES2018](https://tc39.github.io/proposal-template-literal-revision/) though. Also semi because interpolation still works (unless you escape it): String.raw`${1 + 2}` === '3'; 
Sadly, you do need to learn jQuery because of how much existing jQuery code there is out there. With that said, friends don't let friends write new jQuery code, so use vanilla JavaScript or a nice component framework for any new code you are going to be writing outside of the scope of existing legacy code. 
A quick aside - I wouldn't bother learning angular.js (angular.js is what they call the older version of Angular before the TypeScript rewrite) unless you absolutely have to. Learn React/Angular/Vue instead.
I think you’re missing or ignoring my point and overestimating the time investment necessary to just understand basic jQuery. Agree to disagree but I’ve said my part.
asynchronous request, if possible on the server side stream data back as it's processed and have the client update as the data streams in. 
Newer projects avoid JQuery, but many legacy ones still have it. Jquery will be around for a long time.
You can build an app to be immutable and work on assumptions that requests worked as expected. An example of this is something like Slack. When you send a message in Slack, it appears in the chat log instantly as if it was already sent out (albeit greyed out). This gives the user the feeling that the app is working as intended, and in 99% of cases, the request will complete successfully and the text will turn black to punctuate that the message sent successfully. In cases that it didn't work, a red X appears next to the message and a tooltip displays saying that a network error occurred and you can try to resend the message or cancel it. If you receive a message in a different order than the server timestamps it, it will automatically arrange the messages chronologically as well.
I am talking about team work. If you just one in the team will use ES6 and other ES5. Who will care of the project once you go to vacation or else? This is my point. 
Web Workers are for concurrency, not necessarily parallelism. https://stackoverflow.com/questions/1897993/what-is-the-difference-between-concurrent-programming-and-parallel-programming
Yes
In the real world where people have jobs, jQuery is still used all the time. Almost every site I touch has jQuery.
People are being real mean in response to a simple genuine question. In fact, in Rails, you access the params of a request, whether it's query params of a GET or params from the body of a POST the same way. Node doesn't make it easy because it just doesn't do as much for you. It expects you to know the difference between the different types of parameters.
I absolutely would not use jquery. Javascript is moving away from the idea of callbacks. I would look more at learning something like NodeJS and some of the more edge concepts like Promises.
I think it's still worthwhile. A ton of legacy code still uses jquery and even when doing React, often times jquery code is mixed in \- not best\-practice at all, but the real world doesn't always follow best\-practice. Put it this way \- how can it hurt?
What do you use it for tho?
Styled Components are the way to go!
Just create projects and follow tutorials that create projects. It's that simple. I've been going through these: [https://www.turbo360.co/tutorials](https://www.turbo360.co/tutorials)
I see that jquery is no longer used in product today but for study purpose I still suggest you at least touch it a little bit. At least, event handling and Dom manipulation is very useful for you to get a good understanding of how JavaScript works. Many people including me would say that jquery is bad compared to react, which is true, but that is based on the fact that you understand jquery.
Dude, you wrote the library :P
I mean, yeah, I agree, sorta. It's when we had to support IE 10 that we decided that JQuery wasn't worth it anymore. Looking back, I think we could have made that decision in IE 9 support days, but we weren't thinking too much about it back then. If a project already had JQuery in it, I'd absolutely not take it out. It's not worth the risk to fix something that isn't broken essentially to save a few kB. But if I was asked to start up a new project tomorrow that supported IE 10, I'd not use it. If it had to support IE 9, I'd have to do some research, but I'd consider not using it. To go back to the original question, at this point you should definitely learn JQuery if you might be supporting any legacy code. It's still everywhere, and it's not like it's that hard to learn once you already know JavaScript. I'd avoid using it in new projects though.
more employable and more miserable yes
Depends on what you are building. If you are using Wordpress and those likes, you will encounter a lot of jQuery and very simple DOM manipulations where you don't really need anything complex as React/Redux or Angular etc. In some cases even more modern pain JS API's will work to do what you need. When you are building an app with very specific needs (no Wordpress like CMS needed) then frameworks like React+Redux / Angular, will probably be a better option since jQuery and complex DOM manipulation and state handling becomes a big headache very fast. But generally, just pick a framework that fits your needs at any given time. No need to use an excavator to dig a hole where a shovel will do. 
Scratch the surface, it will suffice
L M A O
jQuery is just a utility library. Most of it is outdated nowadays though since JavaScript improved quite a lot. I'd personally recommend learning the small framework called ["vanilla.js"](http://vanilla-js.com). Nearly every fortune 500 company uses that one. Afterwards, learn ES6, then Vue or React. If you want to do something that's a little bit more low-level, look at node and its integrated libraries. Also, I'm programming mostly in JavaScript since over 10 years and I've never felt the need to use jQuery. Helpful resource: http://youmightnotneedjquery.com
All of my clients want IE10 or at least IE11.
JQuery is a library. React, AngularJS, and Angular are frameworks. All you need to know for JQuery is know that an API doc page exists and be aware of some of the more popular methods. The rest is all "&lt;methodName&gt; JQuery" into Google. That said, browserr support for native method is growing every day and there's very little reason to use JQuery unless you absolutely need to support ~IE10 and down as JQuery provides polyfills for those.
Big companies tend to avoid new tech due to risk and risk means more money.
it's good to know how it works but shouldn't be required for new projects, good bit of historical knowledge. I would consider using jQuery in a new project bad form. it served it's purpose and moved the language forward, but now it should be retired for most uses.
The community is shifting away from jQuery. but still learning it will come in handy a lot of times. even if people were to stop using it today there are tons of projects built with it that should be maintained not to mention it's huge ecosystem of plugins which make it harder to migrate to a new framework
&gt;If you are writing vanilla js you can and I would use jquery because you'll end up writing a bunch of jquery-like helper functions anyway, and the library is tiny. As people pointed out in your other reply, this is wrong. Your knowledge of vanilla JavaScript is severely out of date. This was your argument in the other comment: &gt;Stuff like atribute query selectors, adding classes, Ajax calls, dom manipulation is just easier to write and quicker with jquery. But, all of these things have been directly replaced by the native DOM API.
You probably can't because webpack has compressed and stripped a bunch of the code. If it's your own bundle you can use webpack bundle analyzer to see a detailed output. 
&gt; makes this an interesting approach makes this a slow approach
Hey, you just stepped into a minefield! There are several competing approaches, and dozens of competing strategies for each approach! This is very much not a settled matter, and folks have strong opinions that are really just opinions. For example, another commenter mentioned Styled Components. That's the name of a particular library. It's very popular, and does its job well, but it's got some issues and when I have the choice, I don't use it. What I don't like about it is that it makes it hard to debug CSS in the browser, because it produces elements with incomprehensible class names. I used it for a while, then stopped using it. I don't think I will ever go back to it. I've also used things like Radium, which inject CSS directly into the `style` attribute of the element, and then try to manage pseudo-classes and media queries for you. I think this library is aptly named, since you should stay away from it as though it were radioactive. The same goes for any library that takes this `style={}` approach. Fundamentally, I just don't like putting CSS in Javascript. Get your chocolate out of my peanut butter. What I do is this: 1. I have a component named, e.g. `&lt;DetailCard /&gt;` 2. That component's wrapper element has `className='DetailCard'` 3. It lives in a directory called, e.g. `/components/DetailCard` 4. In that same directory is a Stylus file called `DetailCard.styl` 5. That Stylus file looks like this: .DetailCard h1 color pink p color red ... And so on. So, in essence, the component's name becomes a scope for all the styles that are nested inside it. Stylus makes this really easy to do (so does SASS or Less, I just prefer Stylus). This way, I just write regular CSS, and don't rely on any library to manage my styles for me. I get to write all the `@keyframes` and `@media` queries and `:hover` states I want, and I get to call my elements whatever I want, and use ordinary methods to debug it. When I need to calculate the value of a style rule in the front end, I do that. I either inject a value into the `style` attribute, or change the element's `className`, depending on what I'm trying to do.
Thank you verymuch. I findout the answer after looking at more of the examples. And thank you for showingout the correct sub for my problem.
I think they were probing your sense of interaction design around a common problem that faces web applications. They probably wanted to hear you speak clearly about successful ways to manage "processing" type states in a client app. There are multiple strategies. I could see interpreting the specific question in two different ways: A\) dealing with a slow request, or, B\) dealing with a task that is so intensive that it doesn't happen in a single request but instead in a backend job that completes eventually. An example of A is perhaps a page in which some particular component must load a lot of data from a slow server endpoint, but the HTTP request remains open for the duration of the waiting stage. An example of B is something that is too expensive to do in a single request and instead enqueues a job on the backend, like re\-encoding a video upload, such that the client has to then poll \(or be notified by a websocket\) for when the job is finished. Handling \(A\) is a matter of ensuring you properly track some kind of "spinning" state in the client, disable and render a spinner on the button or page element that is processing, and disable interaction in that specific zone of the page \(but not the full page if other parts can still be responsive\), then clear the spinning state when the request completes. Handling failure is an important part as well. But there is no magic here or things that are "technically called X" \- it's about be on top of the client/server interaction state at all times and keeping the UI in the most responsive form through each condition. Handling \(B\) is interesting and you see a lot of different approaches there, some better than others, and it will depend on whether the task is blocking the user's next action or whether they are free to change tasks while the job processes in the background. I could detail various ways to do this, and things I've seen done in the past that are good and bad, but this kind of interaction may not even be what the question was about.
Alright, you're clearly spamming now since you deleted your previous comment.
For one instance maybe but as your app scales and you're doing that dozens or hundreds of times it makes a difference. That's one of the beautiful things about react, you're not mapping through the dom looking for stuff, it handles that for you and operates on exactly what you intended to operate on. Don't get me started on how easy it is to do multiple binding of ajax requests with jQuery.
&gt;what is that technically called ? "Skeleton screens"
 Can you modify the string, like so: const rx = new RegExp('\r\n', 'g') function innerStrip(str) { return str.replace(rx, '\n') }
There's absolutely nothing wrong with just posting the thing you made and ask for feedback man.. maybe try that next time. On topic.. why would I need another selection library and what does it do that makes it so great for mobile? A DOM is a DOM.. so is this one more performant? Or what are the benefits..?
There's a bunch of different approaches, and everyone's doing thing's differently, so there's no "standard" at the moment. A quick summary of the major approaches: - Separate CSS: write CSS files like you always have (although often imported into your JS files so they can be bundled by a build tool like Webpack), and write your own classnames to match. (Ditto for compile-to-CSS languages like SASS and LESS.) - Inline styles: Use React's `style={}` prop, and the styles get applied as literal inline styles on the elements - CSS modules: write separate CSS files, but when they're imported, they're processed with a special build loader that auto-generates unique classnames scoped per component file. - CSS-in-JS: this covers a broad range of libraries with different approaches, ranging from writing CSS attributes in the form of JS objects, to writing CSS inside of JS template literal strings and creating wrapper components that have those styles applied to them. For more info, see the [React Styling](https://github.com/markerikson/react-redux-links/blob/master/react-styling.md) section of my [React/Redux links list](https://github.com/markerikson/react-redux-links).
Since nobody has mentioned yet, it may not be the new hot trend but it's entire reasonable use plain old css files. That's what create-react-app does by default, just create css files and import them and carry on styling things as you would have before. 
You'll definitely want to be quite comfortable with JavaScript before jumping into React. 
oh, I see it now. I didn't scroll down.
The best solution will be a compromise between the extremes. Coupling between these tools (e.g. tool1 returns an object with a particular shape and tool2 accepts an object with that shape as an argument) seems like the deciding factor to me. If you look at [all the packages for lodash](https://www.npmjs.com/search?q=lodash) then you can see you've got the choice, as a user, how to consume it. You can: - just load the whole thing - get an individual package for just one little bit of it - consume it as ES modules `lodash-es` - even make your own custom build using `lodash-cli` - use lodash-webpack-plugin to avoid including unused parts of lodash in your build Some issues which spring to mind as a potential user of your tools: - Updates: do I want the latest version of every function in lodash all at once, or do I want to upgrade a bit at a time? _Can_ I upgrade a bit at a time or do dependencies between tools mean they must be upgraded together? Does v1 of toolA work with v2 of toolB? - Build tools can remove unreferenced code; does the packaging approach make this easy? Do the tools have shared (internal) dependencies (e.g. they both use some custom object accessor) - if so, will I end up with n copies of these if I install n difference module packages in my project? - Can I import just what I need?
If you're supporting legacy code, maybe. If you aren't, you're unlikely to see it. I haven't had to even think about jQuery in about 4 years. All VanillaJS.
Typescript is definitely an interesting way to go. I've been meaning to get into it a bit myself, but it's more of a "from scratch" deal; converting an existing code base to typescript can be a lot more work than its worth. 
Super small Javascript testing library. It can't get any faster or smaller: https://shikaan.github.io/titef/ https://github.com/shikaan/titef https://www.npmjs.com/package/titef
+1
It is bad but not that bad. I mean, on the long run React or Angular is going to pay up. But you can use jQuery on small projects...it's just that there are better approaches now. jQuery leads to bad coding because it doesn't give you a clear path to follow, you don't have property binding and things like that so it's really easy to mess up, also you'll write more code than you would with a proper framework.
I am in the real world and have a job. No jQuery here, only on legacy projects. I mean, If you are starting something new and still choosing jQuery I guess it's just that you are not willing to adapt, because with Angular or React you certainly write less and do more. And time is precious.
&gt; How were you checking what values they were returning? I changed the code inside the scroll listener to this: $('.pageSection').each(function(i) { console.log($(this).position().top, scrollDistance) and then opened the console tab of the developer tools (right-click &gt; inspect element, or there's a menu option somewhere depending on which brower you're using). &gt; Likewise, can you use two box-shadows with "box-shadow"? You can separate the box shadows with commas, like `box-shadow: shadow1, shadow2`. However, if you set the blur radius and the offset right I think you can replicate most of what you have with just one shadow. For example, with your `#profilePicture` you could do this: `box-shadow: 3px 3px 20px 2px rgba(0,0,0,0.2)` and it looks pretty much identical.
[here’s](https://ionicframework.com) an option
&gt; $element.addClass('my-class'); `$("element-selector").addClass('my-class');` - normally you don't want to keep reference to DOM object Also, have you checked if the examples work in all browsers? res = await fetch('api.com'); &gt;Expected ';' 
Wow I should keep this saved. Thanks for the post &lt;3
Other options are Cordova, and React Native. 
&gt; The only significant difference is AJAX `document.querySelector('a')` returns one element. `document.querySelectorAll('a').classList.add('my-class');` =&gt; `Unable to get property 'add' of undefined or null reference` doesn't know to chain commands as jQuery does. 
I've been curious of this same concept. Very interested in any information on the ability to 'unpack' a bundle, as I'm trying to deploy a web app that uses a Webpack bundle. 
&gt;`$("element-selector").addClass('my-class');` - normally you don't want to keep reference to DOM object The purpose was to highlight the `addClass` method and compare it to the vanilla method, so I deliberately kept out the querying part. However, there's plenty of situations where it would make sense to hold on to a DOM reference. &gt;Also, have you checked if the examples work in all browsers? Fetch does not work in IE 11 (and IE 10), but with a [polyfill](https://github.com/github/fetch) it does. Similarly, Async/await does not work in some older browsers. However, since it is syntactic sugar, it cannot be polyfilled. Instead, you can use the Promise API directly: fetch('api.com') .then(res =&gt; res.json()) .then(json =&gt; {/* */}) The Promise API is also easily [polyfilled](https://github.com/stefanpenner/es6-promise) if desired.
Security? 
I wasn't aware that lodash could be built like that, that's really cool. I'll try to study that kind of structure, thanks!
Thanks a lot! I'll study that.
&gt; `element.classList.toggle` TIL this is a thing. Awesome! 
I only meant that as an example of something where concessions have to be made for older technology, nothing more. I’m simply arguing that having some knowledge, especially easily attained, of older tech is worthwhile in some cases, namely jQuery in this case.
I don't think JS is a good language for whiteboarding, any programmer should have knowledge of more than 1 language and JS is usually the worst pick for a whiteboard session imho. Regardless, I wouldn't think much about it if you used it, whatever works. Though I understand the interviewers remarks to just use var. For whiteboarding it's perfectly normal to even use pseudocode, so why get into the nifty details of block scoping, callback nesting, .. a whiteboard session is not about showing off you're 99% understanding of a language, if the man asks you to use var for clarity, just do it. All said I think Python is the perfect pick for whitebaording, it's pretty much 90% pseudocode already.
So you can use it as your CS project? Nah, not gonna help you there.
iPhone 7, latest iOS I think. Safari. Press and drag have meanings that are not overridden in the demo. Going up/down is scroll. Left/right works fine as long as I’m not reddit where it means “go back” These combined made for a Software Gore situation where the box it thought I was selecting was completely different than where my finger was.
Nothing stops you from using plain css/post-css and maybe css-modules switched on so you're getting encapsulation. I know it can feel wrong, that's mainly because css in general is an artefact of the old web and downright broken, but that's the easiest to go about it at least. Other than that there hasn't been the one solution to solve all problems yet and nothing that really sticks out: http://www.npmtrends.com/aphrodite-vs-emotion-vs-glamorous-vs-jss-vs-radium-vs-styled-components-vs-styletron A promising new take on it is [css-blocks](http://css-blocks.com/), but still very raw - personally i'm going to wait how that turns out.
TL;DR : 1) Learn how to break big problems down into sub-problems, solve the sub-problems, combine to create a solution to the overall problem. 2) Visualize any problem you're trying to solve using a whiteboard. Apply these techniques to both projects and coding challenges. Advice: I would encourage you to also use this as an opportunity to round out your skills as a software engineer. As a web developer, what you're doing is solving problems as they relate to web development. Examples of problems you may face on a given project: - How do I fetch data from this API and display it in a way that's intelligible for the user? - How can I make this site mobile friendly? - How do I make an intuitive UI? - What is going to be my strategy for implementing authentication? It will help you tremendously to develop a foundational problem solving skill-set that you can apply to problems you face in Web Development but also to any coding challenge (think LeetCode) or problems you might face when working in a different language (maybe you're building an API in Java). Two strategies I've always found to be core to any problem solving skill-set are: 1. Break the problem down into sub-problems, solve the sub-problems, compose the solutions to the sub-problems into a solution for the larger problem. Take the first from above where you are fetching data from an API and need to display on the client. You likely want to separate the logic of fetching from the API from the logic of displaying fetched data to user. You might then think about what helper functions you need to accomplish each of these. As you go about solving these sub-problems, you eventually come up with a solution to the overall problem. 2. Visualize, visualize, visualize. Most of us are visual learners. So if you're working on a side project, take some time to diagram out on a whiteboard the different components of your system/program and how they might interact with each other. Doing so helps you build your intuition and also helps you catch any misunderstandings you might have about the problem at hand. Working on projects will help you get a better idea of different tools / technologies you might use in Web Development (React vs. Angular vs Vue, JWTs vs Sessions) and working on coding challenges will help you build out your algorithmic thinking. 
quality 
While Electron is awesome, &lt;webview&gt; and IPC messaging will surely present problems to new developers. I think it would be fun for a newbie to play with, but trying to build something substantial may be rather difficult.
Ty
This is really helpful, thanks.
let spaceShooterGame = { simple: true } Good luck!
Agreed which I stated start small. 🙄
Built a desktop version for my Elm app, the client written in Rust, no Electron needed https://github.com/huytd/kanban-app
Yeah good luck writing vanilla JS without jquery that works on a variety of browsers including IE, because no, in the real world you can't ignore it.
It's not that hard if you can support IE10+. Unless you have a specific business case to support &lt;IE9, you should not be supporting &lt;IE9. Even Google dropped support for it half a decade ago. 
Whenever you use `let`, you are warning readers of your code that you're going to reassign the variable in question later. If you aren't actually going to reassign the variable, then don't use `let` - use `const` instead.
You should try GraphQL if you have these thoughts. It's a protocol which makes much more sense for an API than REST with it's primitive abuse of the old http methods. Also /r/graphql is a great resource!
Here's a sneak peek of /r/graphql using the [top posts](https://np.reddit.com/r/graphql/top/?sort=top&amp;t=all) of all time! \#1: [Relicensing the GraphQL specification](https://code.facebook.com/posts/121714468491809/relicensing-the-graphql-specification/) | [4 comments](https://np.reddit.com/r/graphql/comments/72lxy9/relicensing_the_graphql_specification/) \#2: [Introducing Amazon AppSync – Build data-driven apps with real-time and off-line capabilities](https://aws.amazon.com/blogs/aws/introducing-amazon-appsync/) | [0 comments](https://np.reddit.com/r/graphql/comments/7g7e9o/introducing_amazon_appsync_build_datadriven_apps/) \#3: [Pain Points of GraphQL - The main issues you probably will face developing a GraphQL API](https://labs.getninjas.com.br/pain-points-of-graphql-7e83ba5ddef7) | [0 comments](https://np.reddit.com/r/graphql/comments/80cxk7/pain_points_of_graphql_the_main_issues_you/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Know what jQuery is and how it works and why it was important. But don't start adopting its methodologies, or learning a framework will be much harder. Older JS approaches often involved injecting DOM nodes with information you might need later, or doing on-the-fly lookups or function creation. Modern frameworks are preferred because all those things are very bad ideas once an app stops being small. Spend a day or two on jQuery, then a month on React.
That footer on medium pages with no option to close is bloody annoying.
Thank you to all of you, that's really helpful. I'm working on a React app at the moment and trying to do a few coding challenges here and there but still feel like I can't remember it all.
Project #5: A Chrome extension that disallows that footer! 
Could u please have a link to part 1?
Some great in depth responses - i really appreciate it. It seems like i might have needed to clarify the question a bit 
 document.querySelectorAll('a')[0].classList.add('my-class'); Fixed. 
I'm going to support this in my next publish. I'm planning on working on this next weekend and ship it after that. I've finished the api for it, which I'm quite satisfied with :). So to answer the question, currently no but it'll be supported
[https://medium.freecodecamp.org/the\-secret\-to\-being\-a\-top\-developer\-is\-building\-things\-heres\-a\-list\-of\-fun\-apps\-to\-build\-aac61ac0736c](https://medium.freecodecamp.org/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c)
Thanks!
`execute` runs asynchronously; you can't return the results before the asynchronous operation has completed. Return a Promise instead. (also, you'll probably find it a lot cleaner to use `map` than `res.items[i]`)
Put 4 spaces in front of your code to post a code block.
uBlock has a list that you can subscribe to that includes this: `Adguard’s Annoyance List` enable it under settings. Alternatively just add: ``` ! medium.com - register popup (Never miss a story from ...) ##.screenContent &gt; main[role="main"] ~ .js-stickyFooter.u-bottom0.u-sizeFullWidth ``` But be prepared to have to update it manually.
I'm creating a memory game based on numbers. Each time the person gets a number right, the number length should increase by one, hence my counter variable. Using the debugging tool on code.org, i can see that my counter updates but my math.random number remains the same throughout the code. Click "build on code studio" on the bottom to see the code. 
Changes to the DOM do not take effect until your Javascript code flow ends and the event loop continues. setTimeout is a fine way to handle that.
Completely agree that `if (!object)` is incorrect &amp; that default params would be better, but that's not what we were talking about. This is what the person I replied to posted, as an example of when `var` is necessary: function doIt (x, options) { if (!options) { var options = {} } ... } My point was that `options` is already a `var` (or, at least it's scoped exactly the same way) so there's no need to declare it as such
I would start by making the text bubbles always be readable/unobscured.
Take a look into the requestAnimationFrame() method and most importantly the javascript event loop. I highly recommend watching the video below as it directly explains why you're experiencing this issue and how to solve it. Don't just bookmark this to look into later, the event loop is a fundamental part of javascript you should know about. https://www.youtube.com/watch?v=cCOL7MC4Pl0 https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
 request () { return new Promise((resolve, reject) =&gt; { gapi.client.youtube.search.list({ part: 'snippet', type: 'video', maxResults: 10, q: document.getElementById('searchField').value }).execute(res =&gt; resolve( res.items.map(({ id: videoId, snippet }) =&gt; new YTAudio( videoId, snippet.channelId, snippet.title, snippet.channelTitle, snippet.description, snippet.publishedAt, snippet.thumbnails.default, snippet.thumbnails.high, snippet.thumbnails.medium )) )) }); }
This is amazing. I am just getting started with Angular and this is exactly what I was looking for.
Thanks.
but... async...
Once the response comes back, the promise is resolved with the value inside the parentheses.
First item on the list, adding Redis and neo4j is what I keep trying and failing to find the spare time to do.
I didn't write any of the code in my comment, they were all taken from https://github.com/nefe/You-Dont-Need-jQuery which is the posted link of that reddit thread. I was jut pointing out that raw DOM still has few places where it gets unnecessarily verbose. If you happen to start re-inventing all those utility functions in your code, you may as well use jQuery. I don't know if there's a way to use only still relevant parts of jQuery like `$.ready` and `$.fadeIn` and drop the parts which have no more use in modern JS like `$.each`, `$.map`, or its Promise utilities.
&gt; If you happen to start re-inventing all those utility functions in your code, you may as well use jQuery. I definitely agree if that were the case. But what I, and everyone else here, are saying is that there is very little of that anymore. YouMightNotNeedjQuery.com is a 1:1 conversion for people transitioning off of jQuery. This is just to make it easier for the developer. Real applications should not be using 1:1 conversions, because working with native DOM methods will change the way you structure your app. 
I don’t need running water either but it sure is nice 
Visual Studio Code is built on it and it zips.
You shouldn’t generalize like that. ;) Seriously, many comments here say you never need this, or you must do that. Remember that we all have different situations, in varying industries, with all kinds of customers. Don’t assume your experience is how the whole world works. I sometimes have to support older browsers. I am also stuck on JQuery 1.10.3 or so with one customer . It’s a pain, but I deal with it. For now.
Short answer: Yes Also short but slightly more involved answer: You should learn it, but ideally if you're serious about learning javascript you should also learn a framework. The frameworks are mind-bendingly different than jquery in the way that they work, and so it's a completely different endeavor, but if you're going to working in the industry you almost must know jquery because it's so prevalent. All that being said, for what it does jQuery is pretty awesome, but the code you end up writing with it tends to be kinda a cesspool or selectors and dom manipulation, and you're not really architecting an application like you do with the frameworks.
&gt;Build an Instagram clone Ok, but how would I begin?
So I’m intrigued what all goes away functionality wise leaving electron 
There's a million tutorials out there you can follow.
Dope is whack. Don't do drugs and stay in school.
Unless I'm misunderstanding the code in the demo, this is essentially creating jQuery patterns using React syntax, yeah? Instead of depending on React's internals where state/props update the view automatically you have to "manually" (even if it's in a stream you're still manually rendering) re-render the DOM on state changes. Seems like this avoids bringing in a library by reverting back to the imperative patterns that React tries to move away from. Seems like this is a pattern better implemented in VanillaJS or jQuery rather than React
Up until a couple years ago, the airline reservation clearing house was standardized on IE6... and I say "a couple years" because that's when the person I knew stopped working in a related company. So they had to have VMs with XP and IE6 to catch incoming data and move it to a modern db/system. 
But what he meant was WRITING is quicker. It's fewer keystrokes, so it's better. Right? /s
In comparison to other Electron apps. 
My problem isn't coming up with ideas, it's more coming up with design. I'll have an idea, start building it then my mind blanks when it comes to the front-end design of it. 
Yup, you’re misunderstanding. It’s completely declarative; there’s only a single call to render for the entire app, and it happens once and only once in the pattern setup. 
“I like the black box. It keeps me from having to be good at this.”
It’s all open source?
You delete the trailing spaces.
No, I haven't done anything while breaking the tag line.
It is not fixed it does: `document.querySelector('a').classList.add('my-class')`. jQuery update all elements matching selector (and returns jQuery wrapper, so you can chain another manipulations on same elements). Also it doesn't throw exception if the element doesn't exist. 
Yes, the following code was very surprising to me for (const x of [1,2,3]) { // at this point x refers to the variable defined BELOW // as a consequence, the x defined ABOVE is unused console.log(x); // throws a ReferenceError const x = foo(); }
&gt; Keeping reference to DOM objects is the backbone of every modern framework we are talking about Vanilla JS. And my comment was about jQuery, for jQuery it is anti-pattern. 
I mean... it's like 5 lines of pure JS for the setup, then it's just a code pattern. So yes, in a manner of speaking.
&gt; The Promise API is also easily polyfilled if desired. or just use jQuery :) &gt; The purpose was to highlight the addClass method and compare it to the vanilla method, so I deliberately kept out the querying part. for jQuery "querying part" is important, also what is `$element` in jQuery? Reference to DOM? Than it should be `$($element)`. I explained in that thread somewhere - Vanilla JS in the example doesn't do the same things as jQuery. jQuery doesn't throw exception if element not found, it returns jQuery collection of updated elements so you can continue chain of manipulation on it, it works the same way in different browsers. My point is that jQuery's API for AJAX and DOM interaction still more consistent and sane. It is also stable for years, I mean it tested and doesn't change often. There are few examples of [`addClass`](http://api.jquery.com/addClass/) $( "p" ).addClass( "myClass yourClass" ); $( "p" ).removeClass( "myClass noClass" ).addClass( "yourClass" ); $( "ul li" ).addClass(function( index ) { return "item-" + index; }); $( "p" ).last().addClass( "selected" ); 
Can anyone link part 1
Thank you, I will give them a shot!
You'd need to make it asynchronous because the javascript thread blocks UI painting. Otherwise it will just freeze until all of the looping is done and then show the final output.
I have a bookmarklet called "Remove Fixed" that removes all fixed elements from the page. It works like a charm on medium. Just add a bookmark and use this for the "link": javascript:(function()%7B(function%20()%20%7Bvar%20i%2C%20elements%20%3D%20document.querySelectorAll('body%20*')%3Bfor%20(i%20%3D%200%3B%20i%20%3C%20elements.length%3B%20i%2B%2B)%20%7Bif%20(getComputedStyle(elements%5Bi%5D).position%20%3D%3D%3D%20'fixed')%20%7Belements%5Bi%5D.parentNode.removeChild(elements%5Bi%5D)%3B%7D%7D%7D)()%7D)() 
Redux is like a few hundred lines of code. Not exactly a "black box."
Really? Or are you just trying to teach me a lesson or something? If it's sincere, then thank you very very much! No one likes to be boring. I have a dance video, so if you sort by my most up-voted comments, you should find a video that I posted up here about 6ish months ago of me dancing. a lot of people liked it! 
Hi @phpkcuf, I currently used sublimetext and I install TrailingSpaces package in my editor and also add a key binding for it as: { "keys": ["ctrl+alt+t"], "command": "delete_trailing_spaces" } while press keys, I got "No trailing spaces to delete" in editor but still same error while running vue project.
The syntax is called `destructuring`. The method takes an object with properties `name`, `value`, and `error` and stores them in variables of the same names.
The function declaration is destruction a single object, and extracting 3 values out of it; name, value, and error. When you call the function, it is expecting an object with those 3 keys. But I think your error is coming from the 'test' part. That wouldn't work there because it is expect a key value pair. The other two variables work because it's a shorthand way of saying "value: value, error: error" . Replace 'test' with name: 'test'. So the input parameter will look like this {name: 'test', value, error} 
A guy wrote redux from strach, took him only 99 lines
Ah I see. Yeah you'll have to map over the node list. Oh well. At least there isn't an additional dependency being sent to the client that will mostly be unused. 
literally the blackest of boxes
I'd believe it. I've only glanced at the redux source, but it looks like maybe 1,000 lines, and most of those are documentation comments or multi-line warning messages that it print out.
Outstanding :D
VsCode is a bullet train compared to atom. You’d think the makers of Electron would do a better job of implementing it. 
&gt;It allows you to exploit the natural parallelism of the universe. :D 
Hi, /u/foxdonut00 I've read the article, the tutorial, and some more bits here and there. Still, I'm somewhat confused as to some of the details: - Is "Meiosis" a pattern? I'm really doubtful about this. There's no "simple explanation" on what Meiosis actually comprises, just the full tutorial explanation where Meiosis is mentioned liberally but never particularly defined. In this sense, I would see _all this_ as more of a general **approach**, rather than any sort of pattern. Is there any sort of definition on what Meiosis is? - At one point there's even a mention that "Meiosis is an implementation of the SAM (State-Action-Model) pattern", is this _still_ a valid affirmation? - In general, considering that Meiosis is more an approach than a pattern, I feel like I can't see what it adds to _general practices and approaches_ already proposed. I do find the "idea" interesting, but I fail to see how you're adding anything over the _general idea_ to justify giving it a name and calling it a _pattern_. I would love to see a concrete explanation of this. P.S. The title of this particular article... I'm afraid the "You don't need X" formula is starting to feel very _clickbait-y_, is silly, and would be better avoided.
The demo website isn't optimized for mobile devices, maybe I will implement this later, so please use it, currently, only on desktop devices. But, if you can specify the issue, maybe you can post it on GitHub, I will take a look at it later!
The author linked it in the first sentence in the article.
Vanilla React :D I like the approach, however, as others have mentioned, I don't see this as a pattern, rather than applying common sense and SAM. You don't need the entire toolshed to hammer in a nail. 
Since jQuery is one of the most used libraries out there, I would take a look into it since it's easy to learn and use. In the same time, other Javascript Libraries and Frameworks getting famous, but it's hard to tell which one you should stick to, since every year there is something new that gets hyped as THE future technology, but gets replaced in the future. React seems to be a valid thing with his JSX format and since it's just a UI Library and everything else is vanilla Javascript, there is not much to learn.. just to understand how the concept of it is and how to use it. &gt; Is it true that all JQuery can do react also can do more perfectly? Both are completly different use cases. It's like comparing if a fork or a spoon can saw a tree better.. both have their strength and use cases. Since both uses jQuery, both can do what Javascript can do. jQuery's use case is to make it "easier" and sometimes faster to use some Javascript functions. It provides you a library of helping wrapper methods to skip additional checks and maybe DOM manipulations. React will provide you with a code base that helps you to create easy to use, modular/template like buildings that you can reuse. I am pretty sure that you even can combine them (but wouldn't recommend. I am more the dev that uses and recommends vanilla js). So to answer your initial question, if you should learn jQuery after learning Javascript: The answer is Yes/No. It depends on what you think is important to you and what not. I would recommend to learn it, since more experience is ALWAYS a good thing (even if it's a terrible experience.. that forms your character). Who knows? There is a good chance that you will find a jQuery code one day on your way and you somehow need to deal with it. At this point you will be happy to have the experience ;) Learn as much as possible to increase your value as high as possible. Even perfection isn't possible, you still should consider trying to aim for it every day, every second. Learn from what stopped you from doing perfect work and give your best at all times! 
&gt; There is a simple way to extract only what you need tho Except that's exactly what I don't want to do, I don't want to go to jQuery source code and copy bits and pieces that I need. Only if there was already a modular approach like mentioned I'd use it. I don't know why `$.ready` would not relevant, looks like someone copied the jQuery implementation and it's certainly not one line. `$.fadeIn` was just an example, I don't know if it internally uses CSS or a `setTimeout`. 
`onChange({name, value, error};`is using property shorthand. http://es6-features.org/#PropertyShorthand It's equivalent to `onChange({name: name, value: value, error: error};` `onChange = ({name, value, error}) =&gt; {}`is using object destructuring (http://es6-features.org/#ObjectMatchingShorthandNotation) It's equivalent to `onChange = (obj) =&gt; { const name = obj.name; const value = obj.value; const error = obj.error; }`
These tips are golden for people that want to learn programming, having no clue how to start. 
Actually i still find it hard to understand what is happening on that line. Why am i passing .execute a callback thats the resolve function? Execute doesn't run when everything is done otherwise i wouldn't have a problem. When resolve is called by execute, is it gonna wait for everything to be done? How does it know when its done? What is resolve in this situation? Im confused...
This isn't destructuring. It's using object literal shorthand notation(an absurdly long name). The two are basically opposites of each other. ``` // Destructuring const { x, y, z } = { x: 1, y: 2, z: 3 }; // Shorthand notation const abc = 123; const myObject = { abc }; console.log(myObject); // { abc: 123 } ``` So what's happening in op's code is object literal shorthand notation on the function's parameters as it's called to create and send a single object with those keys. 
Thank you, definitely gonna watch it
Okay, look into destructuring. Some examples below. ### The familiar way of passing parameters function bla1(one, two, three) { console.log('first', one, two, three); } bla1(1, 2, 3); // first, 1, 2, 3 ### Object as parameter, destructuring it: function bla2({ one, two, three }) { console.log('second', one, two, three); } bla2({ one: 1, two: 2, three: 3 }); // second, 1, 2, 3 ### Passing parameters Here you'll see that `bla3({ one, two, three })` sends the `const` variables along. That works as follows: JS sees `{ one, two, three }` and turns that into `{ one: one, two: two, three: three }`, so it saves you typing the same thing. function bla3({ one, two, three }) { console.log('third', one, two, three); } const one = 1, two = 2, three = 3; bla3({ one, two, three }); // third, 1, 2, 3 ### Default values You can provide default values, too. If the object parameter isn't provided it defaults to `{}` and each of its properties default to 1, 2, and 3: function bla4({ one = 1, two = 2, three = 3 } = {}) { console.log('fourth', one, two, three); } bla4(); // fourth, 1, 2, 3 --- So your question: &gt; `onChange({'test', value, error})` is throwing the error That's because 'test' is an object property that can't be resolved to a variable (because it's a string) and doesn't have a value.
It's shorthand for }).execute((response) =&gt; { // ... create mappedObject resolve(mappedObject); You're not actually passing `execute` the `resolve` callback - you're just *calling* `resolve` after the response comes back. &gt;Execute doesn't run when everything is done otherwise i wouldn't have a problem. I've never actually worked with `gapi` before, so I'm not 100% sure - is it working and you're trying to understand why, or is it not working and you're trying to figure out how to fix it? I was assuming that the function with the `response` parameter runs once the response comes back, and you wanted to parse/use the response elsewhere - all I did was convert `request` into a promise-returning function, which is the usual thing to do in this sort of situation. &gt;What is resolve in this situation? `resolve` is the parameter in the Promise constructor on the first line: request () { return new Promise((resolve) =&gt; { If you don't understand what all this is, you should read up on Promises: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises
What ideas brought you trouble with respect to front end design?
It was actually working now. Am I correct in saying that the arrow function "=&gt;" is new in es6? 
What are you actually trying to achieve with this? 
Strange that he chose (sucess, err) as his callback signature, rathern then the customary (err, success)
Your over thinking this. JS is run on the browser while all the others listed are run on the server. As to getting bloated, no. JS itself is still pretty lean. Some of the add ons are getting out of control, but that's not necessarily bad either, e.g. jQuery.
I don't think it is a "library" as in "meant for production and maintained". I think this is an *idea* illustrated with code (as one would expect from this guy).
Actually, the wording says that the error is signalled by the absence of value in `success` and that `error` _may_ contain information about the error. So, IMHO, it's a bit worse than changing the order of the parameters.
Yes. 
That is probably the worst "explaining react" and the worst ELI5 that I've ever seen. Any generic tutorial on React does a better job, IMO.
The core logic of Redux itself was under 100 loc for a while, without comments, checks, etc m. It might still be. I’ve seen reimplementations of it in as little as 14 lines.
...I so hope these people were joking...
1. None of these languages are that good for creating UI. C# is passable. If i am writing a native desktop application today, or a mobile app, in most cases i pick up JS. Better tooling, more components are third party controls, bigger community and thereby support. 4. Javascript mostly evolves outside of the standards body through community effort (think of node, modules, transpilation, react, etc). That means it can move fast, discard old ideas fast, and things that really make sense in the longterm can be picked up as a spec. 5. There's hardly fragmentation: http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core Most frameworks are react-like, some are drop-in-replacements, some can at least share components. React is a cross platform framework, so this opens the floodgates to any other platform.
Is it usable yet or? 
Project #6: A Chrome extension that hides this comment!
Going to try it. Idk. 
&gt; This was a fairly big company, too that I thought would be more up to date on modern technologies. ...there's your mistake. it's always the big ones that are resistant to change.
It’s at a very early stage, let me know how it goes!
Well. I made an issue because it doesn’t build. 
Have you got it to build? 
Why not convert it into a web extension or use it with one of the Script Extensions? You can automatically enable it per site or all sites.
Design is one of my weaker points. At the moment, I'm building a web app for my portfolio site and the design is very slow. I am spending a long time drafting ideas, experimenting, and tweaking before I finally settle on something. Even then, I may end up changing it and starting that part over. My resume, at least what I have completed in the conversion, turned out really well and is my favorite so far. Everything else is still eh. Although, I am making progress and taking the opportunity to get caught up with flexbox, SASS, and design elements.
More unfinished stuff to put in my 'hack' folder. 
circlejerk? is there anything wrong with that? I am not sure if you've noticed, but this is Reddit.
Great post :) Thank you
And in comparison to Visual Studio proper.
You don't need Redux, you just need to re-implement the state handling your framework already has?
Default to const for all variable assignments. I treat let like a code smell, if I run into a situation that makes me want a let, i try and think of a way to refactor it to use a const, then for the small use cases that I can't I use let.
I've written my own simplified version for smaller projects and can confirm the concept is simple af. It's just slightly more structured pubsub
Typo: \d matches character that’s not a digit, equivalent to [^0-9] Should be `\D`
It's an abstraction layer between your chosen frameworks? 
Are they UI issues or logical JS errors?
Hi /u/jboyflex, For javascript help, please visit /r/LearnJavascript. Thank you!
Definitely will use. Thanks! 
How does it compare to SoloLearn? 
xcode simulator or browser developer tools
they're stuff like "burger menu isn't opening", "sliders stop sliding". I tried to make a div where console errors get dumped so that people can take a screenshot of it, but the solutions on stack overflow are not capturing real errors. Also I got a couple of reports with console where it said "$(...).slick() is not a function", so before initializing slick slider I set a rule to check the type of $('..').slick and if it's not a function to hide the slider, yet still all the website breaks for some people.
where exactly in developer tools can I simulate devices? the responsive simulator is just resizing the screen and not showing the actual device errors
The author here: I'm available on [Twitter](https://twitter.com/lasnindrek) if you have any feedback, suggestions or fresh app ideas.
I haven’t tried it myself but have you looked at Codepush? I think they offer simulation on a lot of devices
As a regular user of codewars, does this have anything codewars doesn't? (Such as code-completion)
+1 for Jest
Every modern editor has an option to show trailing and leading spaces. Turn on that option and delete said space.
Example: Try this in Immutable JS console. const a = Immutable.fromJS([ {id: 123, randomvalue: 'hello'} ]); const b = Immutable.fromJS([ {id: 123, randomvalue: 'hello', othervalue: 'sup'}, {id: 125, randomvalue: 'sup', othervalue: 'hello'} ]); and the unique values array (Immutable) should be: [{id: 123, randomvalue: 'hello'}] 
Dear god, you fixed it. Thank you so much. Even my professor was stumped!!!
Why?
jQuery and React/Vue are different things. React/Vue makes jQuery unnecessary, but it's not a *replacement*. Do I think you should learn React? Yes. Do I think you should start over on your short-term project? No.
I use Xcode for the iOS stuff and Genymotion for Android. Genymotion has a great choice of ready-to-download emulators for many manufacturers and API-levels and is free for personal usage. To run Xcode, you need a Mac, but it's the only option I know.
looks great! is this a PWA?
This seems really cool. 2 points of feedback: 1) The challenge on the left is really slow to load (3 seconds at least) 2) Please let me enter some code and tinker around without registering. I expect to be able to type in code on the right but only see the protip
You can tinker without registering. Click on the “Code” tab. The ProTip area is the Console where test case output is displayed.
pretty good video but he needs to work on his tight 5
Basically this. jQuery basically is what Javascript missed 8-10 years ago. Most if not all stuff provided by jQuery can be solved with modern days Javascript more efficiently.
If those are NEW projects: Yes. If it is legacy code: not if you work on getting rid of jQuery.
This article says that instead of using a pre-built library, you should write all the code yourself using the pattern. That by definition is re-implementing it. A widely used and worked on library like Redux is absolutely more stable and bug free than something home grown, because it has already been tested heavily and bugs have been fixed. Anything I create myself I'm going to have to spend a lot of time testing in house to make sure it works properly. My original conclusion still stands. There is only value to re-implement this functionality on my own if I need to make it behave in ways that are substantially different from what the library provides. Now I've done that before, but only as a last resort when there is no way to make it work with the library.
It's a "single page" web application that utilizes code splitting to lessen the initial payload.
Ah interesting. Not what I expected. I'd love to have the code console side by side with the instructions. Either top/bottom or side by side. Great work!
Thank you!!
You can try to use Ionic 1, specially if you need directives like a back button, side menu, lazy loading, pull-to-refresh, etc.
Okay, @nickforddesign thank you for your information. I will try using cli &amp; ESlint also try to remove unwanted spaces from my file, to fix the issue.
&gt; or just ~~use jQuery~~ include 85kb of bloat :) 
If you know JS, you can wait for a jquery legacy code base to fall on your lap before having to learn it.
good god man, are you coding in a pipboy
probably want to change the text colors as they are sometimes hard to read. if I write "return true" the word true is this really light orange that doesn't work well with the background. oteher than that, impressive!
This is cool! Not gonna lie, definitely submitted a wrong answer a couple times in a row because I thought the sound was awesome. Great job!
Since the expected output you mention here is different from the expected output you mentioned in that other post, would you mind explaining what's exactly the criteria for the elements you're looking for? I mean something like this: according to the expected output mentioned here it could be something like "the elements of list A whose `id`s _can_ be found in some element of list B". According to the other post, it could be something like "the elements of list B whose `id`s _cannot_ be found in any element of list A".
Thanks for the response. Wouldn't that affect any web browser, though? The issue does not ever happen in Firefox, Safari, or IE/Edge.
Race conditions are odd. Under the right situation, it might actually affect other browsers, and you just haven't experienced it. Or it might never happen there. That's assuming it *is* a race condition. The zooming is odd, though. If you get it to happen, then try to select the name that's filled in below, is the text there but invisible? Or is it just not there?
You can "build an app" with cordova just by framing in any web app. There are very few changes needed to make that part work. Making it actually talk to a server instead of trying to talk to the internal webserver in Cordova is slightly harder, but not horribly so. I recommend making a Cordova app and just throwing your existing html/js at it and seeing what happens.
I took away the "readonly" attribute, ran the Ajax, the text went away, and there was nothing I could select in the field that the Ajax had populated.
Is it preferred to render components via the shorthand function vs a traditional full class?
Browserstack lets you test on different browsers and also on different mobile devices.
You're really arguing that 3-4 lines of code you write yourself (or copy paste) will be more bug prone than a 600-700 line library? These 3-4 lines will give you the freedom and flexibility to grow your app along with it demands instead of being slowed down by too much boilerplate in the beginning and then later locked down by missing flexibility in the library. Even so, the article doesn't say you "should" write all the code necessary to use the pattern. Quite the contrary it touches on the fact that you are free to use the libraries matching your requirements.
They're similar, but slightly different. Though similar in their use of keywords, `for..in` and the `in` operator work slightly differently. Both account for both own, and inherited properties, but the `in` operator also accounts for non-enumerable properties whereas `for..in` loops do not. This means values like `toString` would not show up in a `for..in` loop (as they're non-enumerable) but would be true with an `in` check. for (var prop in {}) console.log(prop) // &lt;nothing&gt; 'toString' in {} //-&gt; true When using the counting approach, you're not capturing those non-enumerable properties, though you would when using `in`. Of course the first example _does_ use `in`, but only in the `b` iteration loop. So its possible `a` has a non-enumerable value that can still match `b`'s version but fail the comparison because the counts wouldn't match. // using first deepEqual var a = {val: 1}; var b = {val: 1}; b.toString = a.toString; // now own, enumerable property (same value) deepEqual(a, b); //-&gt; false This would return true in your second version, however. Similar issues can arise with `for..in` as far as inherited properties go. Do you want to iterate through inherited properties? Or just an object's own properties? If you want to avoid inherited properties, then you should also include a `hasOwnProperty()` check or iterate through `Object.entries()` instead. Note that when comparing values, you're also pulling from both inherited and non-enumerable values. !deepEqual(a[prop], b[prop])) // accessing [prop] can be non-enumerable and/or inherited So your second version using `in` instead of counts is the better approach. 
That indicates to me that it's actually gone, and not just a render bug. I would concentrate on figuring out what's causing the text to disappear for a bit.
I hope him using snake case is just for readability, since the entire JS API uses camel case.. 
You'll get better response if you put that in a site like CodePen and link to it.
I think you should be able to see the instructions and your code at the same time without having to flip between tabs.
Master vanilla JS, then use Vue for everything. That's what JS Masters do.
It look like you next step is to add event listeners to your buttons.
im not sure what to do to get that
85k wow!
Javascript really ? Not algorithm ? Am I the only one to think that it's a terrible idea for beginners / coders to learn JS has a first language ? 
I really want to practice my code on my daily commute. I really wish we have things like this.
That's far from neglibible
And C#, C++, Java, PHP, Python, Ruby, Swift.
For me it's even getting started. Like, I know the problem I'm trying to solve but don't know how to put all the pieces together to forms omething I want to use
Should've done triangles instead of squares
That’s output from webpack dev server in iterm, not my editor
Thanks! That explanation really cleared things up.
Check out emacs!! There are several great language server options for JavaScript that come with a suite of refactoring tools. I would recommend Tide in particular which comes pre-configured in the doom-emacs distribution which an emacs distro is focused primarily around vim keybindings. Doom-emacs (I would recommend pulling from the develop branch): https://github.com/hlissner/doom-emacs Tide: https://github.com/ananthakumaran/tide
Progressive Web Application
in unit tests, you can mock the WS client: https://stackoverflow.com/questions/42867183/mocking-websocket-in-jest in integration tests, you should test it for real
Good point! I didn't write it, however, I just found it somewhere. I'm sure someone has an equivalent extension that does the same thing :)
I was concerned about performance, that's why the particles are a bit chunky. fillRect() is more performant that drawing triangle paths in Canvas?
Thanks
Nice
You can't. You can, however, set up Xcode and run the iOS emulator, or Android Studio and run the Android emulator, then go to your page in the browser of the emulator. You should be able to debug the emulated browser from Safari or Chrome, I do this at work and it works fine. Another thought: use Sentry to record runtime errors. This will at least let you record a stack trace, and potentially save user/device information if you have it.
Straight outta world wide web a crazy moda**** named Reddit!
hello! nice work. You should let users change their username after they connect with their Gmail account. Have a good day!
Yup, already on the [roadmap](https://edabit.com/roadmap)!
Blueyboard. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'Bluetooth keyboard.'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
Stack Overflow Careers is a great one. If you are looking for areas to improve your project maybe check that out, they make a point of showing perks as well.
You can run emulators with Android Studio for Android and Xcode for Mac/iOS devices https://www.turbo360.co/tutorial/react-native---setting-up
&gt;telling a vim user to use emacs [It's almost like you want to start a fight](https://i.imgur.com/WLzeQMj.png)
But...RxJS isn't a state management library.
Emacs + evil mode = best of both worlds. Rebinding the keys so they are not the nightmare fuel from the depths of Richard Stallman's insanity.
Where's the game in that? How about something like this: alert('you are in space, type an action'); if (prompt('type action') === 'shoot') { alert('you win'); } else { alert('you lose'); }
I use solo learn to learn basic javascript programming and with a SwiftKey keyboard on my Android Phone it work ok. You have an interpreter for every language they are teaching so you can write your own stuff. 
You can stick with plain CSS or use React's Stylesheet components. There are plenty of projects you can follow online to help familiarize you with them like this one: https://www.turbo360.co/tutorial/react-native---instagram
I'm only suggesting because [the memes are doing triangles](https://m.facebook.com/story.php?story_fbid=1496717137122385&amp;id=100003523389839), but it could be fun to see what performance is like, and what optimizations could be made
What web app are you making? I need to make something for my portfolio as well, but can't think of anything really cool to do. 
This is such an amazing idea ! I'll look into it, just quickly though it's not responsive or mobile friendly, maybe something to look into, I'm testing on Firefox mobile on Android
Sorry - I think I misspoke. The web app is my portfolio. I'm just using NodeJS &amp; React for the portfolio (probably overkill, but gives me an opportunity to learn React). As I work in the government sector, my work isn't accessible by the public, so therefore, I don't have "links", "images", or "code" to view, so everything on it is text-driven. I come up with ideas for stuff overtime, like making a game, a mobile app, a portfolio, etc. Since November, I recorded 14 unique ideas that I could work on, however, I haven't. Some ideas are - 1) Creating a personal finance management software, integrating your salary, benefits, calculating taxes, budget, and 401k/ira growth. If you aren't great with money, this would be a great way to learn how everything works. 2) Creating a "third-party" tool launcher for a game (a single location of all third-party tools, macros, and sites) 3) HTPC Dashboard 
Edabit is meant to be *browsable* on mobile but not *usable*. As a matter of fact, creating a mobile app is something I've thought about quite a bit and I really can't get past the following obstacles: 1. Programming without a physical keyboard is *very* challenging. 2. Fitting everything onto a small screen while still being intuitive is next to impossible \(I've tried\). I'm kind of a perfectionist and I know that creating a mobile version of Edabit won't be anywhere near what I would consider acceptable. That being said, if anyone has any ideas/thoughts regarding the above two obstacles, please feel free to chime in!
Yeah those are actually good points, I wonder what other apps do if any exists
Yes, you can make that assumption. My suggestion is to mainly test your logic and not "platform" or "library" code since that's going to be 1) very well tested and 2) very widely used. The chances of you finding a bug in their code is going to be very low. So here's an easy way to test your logic: 1) Make your functions "pure" if possible (don't rely on global variables, and pass everything in). 2) Put your logic in a separate file 3) You can now require your file into jest / mocha / whatever test runner you use, and test it. Let me know if you have any questions.
&gt;Eh I tend to just hand over a list of stuff that we did the previous week and ask the interviewee to do any 1 or 2 of them as a standalone project in their framework of choice, at their leisure, either at a desk or at home. I hope you pay them for this.
Okay, so I've made some progress! At least, I can make it stop "losing" the returned value. When a user enters a username in the username field, an "onKeyUp" event invokes 4 different functions. Here's how the "input" field looks: &lt;input type=text name='manager_email' id='manager_email' onKeyUp=\"name_lookup(['manager_email'],['manager_name']); sup_org_lookup(['manager_email'],['sup_org_div']); sup_org_text_lookup(['manager_email'],['sup_org_text']); sup_org_name_lookup(['manager_email'],['sup_org_name']); \" size=40 maxlength=100 autocomplete='off'&gt; This works fine in Firefox, Safari, and MS Edge, but not Chrome. If I take all but one of the functions out of the onKeyUp event handler, I don't have the problem of the results displaying then disappearing. As soon as I put a second function in, I have the problem. Is there another way I can have the entry in this one text field invoke all four of the functions? Thanks for any help you can offer!!! It's *greatly* appreciated!
confusing and neat
I did try paring it down to two functions, instead of four, and I put the two inside another function, and just called the one enclosing function on the onKeyUp, but have the same problem. Here is the code for the two functions: This is the one that populates the name field, by querying a database for the username that was entered: my $name_lookup = sub { $manager_email = $cgi-&gt;param('manager_email'); $stmt = "select preferred_fname, preferred_lname from existing_active_wd_workers where username = '$manager_email'"; $sth = $dbh-&gt;prepare($stmt) || die "prepare: $stmt: $DBI::errstr"; $sth-&gt;execute() || die "execute: $stmt: $DBI::errstr"; @rows = $sth-&gt;fetchrow(); $manager_first_name = $rows[0]; $manager_last_name = $rows[1]; $manager_full_name = $manager_first_name." ".$manager_last_name; $sth-&gt;finish(); return $manager_full_name; }; This one takes the same entered username, and queries another table in the database to return the Supervisory Org (if any) associated with the username: my $sup_org_lookup = sub { $manager_email = $cgi-&gt;param('manager_email'); $stmt = "select supervisory_org_name, supervisory_org_id from supervisory_orgs where username = '$manager_email'"; $sth = $dbh-&gt;prepare($stmt) || die "prepare: $stmt: $DBI::errstr"; $sth-&gt;execute() || die "execute: $stmt: $DBI::errstr"; my $sod; $i=0; while (@rows2 = $sth-&gt;fetchrow()) { $supervisory_org_name[$i] = $rows2[0]; $supervisory_org_id[$i] = $rows2[1]; $i++; } unless ($supervisory_org_name[0] eq "") { $sod = $sod."&lt;select name='sup_org' id='sup_org' onclick='set_sup_org_text(this.value);'&gt;"; for ($j=0;$j&lt;$i;$j++) { $sod = $sod."&lt;option value='$supervisory_org_id[$j]'&gt;$supervisory_org_name[$j]&lt;/option&gt;"; } $sod = $sod."&lt;/select&gt;"; } $sth-&gt;finish(); return $sod; }; I don't see how the second one could be causing the value returned by the first one to disappear/be erased/whatever. Thank you, very much, by the way for trying to help. As is often the case, this is a project for work, and it's super high priority, and we're supposed to go live in two days! 
Here's how I'm calling the functions now: &lt;script&gt; function twoF() { name_lookup(['manager_email'],['manager_name']); sup_org_lookup(['manager_email'],['sup_org_div']); }; &lt;/script&gt; &lt;input type=text name='manager_email' id='manager_email' placeholder="Enter Manager\'s email username" onKeyUp=\" twoF(); \" size=40 maxlength=100 autocomplete='off'&gt;
Okay, so this is sort of crazy: It seems that perhaps what is causing the problem is me typing the username in too quickly. When I go really fast (particularly with the shorter names whose letters are easiest to hit when "touch typing"), the name flashes up, then disappears. If I type the same username more slowly, maybe taking 1.5 seconds instead of .75, the name doesn't seem to disappear. I'm going to do more testing. Any thoughts on a way to not have the Ajax lookup begin until a second or two after the typing has ended? I've seen some scripts, but am not sure how best to implement them.
Okay, so it seems that the problem is related to how quickly I type in the username! If I type very quickly (which is easier with short names whose letters are easy to hit when "touch typing"), the name almost always flashes up, then disappears. If I type more slowly, the name always stays. Here's a video with voiceover to demonstrate: https://haverford.box.com/s/1jkx464qrbxrv8gqnade2wptvsxqpxs9 Is there an easy way to implement some type of delay for the ajax to start the lookup, so that it waits until after the typing is done. As it stands now, it tries to do the lookup on every "keyUp"...so it's searching on "c" then on "cr" then on "cro" then on "cros" then on "cross"....ideally, it wouldn't start the ajax search until after all the typing has stopped for something like 1.5 seconds or so. Maybe "onKeyUp" is a bad choice here. 
var url = localStorage.getItem\('SomeURL'\) for more [check this MDN article](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)
So this is sorta what i have and i want to get the value of "token" from that URL [This](https://imgur.com/a/1fdxIsH) is what i am refering to
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/MCWNEZB.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dy8rokx) 
Is it just some sort of law of the universe that these things can't exist without having someone else's politics injected? https://i.imgur.com/OUN4wlM.jpg
Ok yeah, I wrote that challenge. I’m not American and I don’t even remotely care about politics; the subject was on my mind because Trump was just elected at the time and I wanted to make the challenge more interesting. It’s supposed to be taken tongue in cheek, as a light hearted joke. Obviously I was wrong on that point and I will change it to something less offensive. I don’t care about politics, he just said some crazy shit and I wanted to poke fun at it. I don’t LITERALLY think the guy should be silenced.
So I think I've got it working now! I was able to successfully implement a delay before the Ajax functions begin, which waits until a pause after the typing has stopped. It seems to consistently work. I'm calling it a night for now, and will test more tomorrow. Thank you for all your help, kind stranger!!!!! 
This response should be higher. For method #1, check out webpack and 'style-loader' and 'sass-loader'. This method is the closest to the barebone CSS / SASS. However, when you're writing an React component and sharing it as npm module, it might be a good idea to just expose .css or .scss file so that the user can decide which way they prefer.
then it would be: `var url = localStorage.getItem('``token``')`
localStorage is only accessible by a script originating from the same domain as the script that set the value.
I tried hooking up an angle sensor to my steering wheel, to allow me to select letters by rotating the wheel. Works okay in city driving, but caused some issues on the interstate. Brake pedal is Enter key.
Wow. THANK YOU SO MUCH! THANK YOU THANK YOU! Have a nice day :)
come say hey!
bad bot
Makes sense. Thanks!
Exactly what I've been looking for! :\-\)
Small nitpick. Why are these method names in strings when in other files they are not? https://github.com/Adamant-im/adamant-im/blob/master/src/components/Options.vue#L114
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Adamant-im/adamant-im/.../**Options.vue#L114** (master → eb959ba)](https://github.com/Adamant-im/adamant-im/blob/eb959badf49d6acc3e6a1a7815775c24cb4677a4/src/components/Options.vue#L114) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dy90ost.)
It's not in JS, but Ruby—which is super easy to read—and it's a book you have to buy to read. But do check out Sandi Metz and Katrina Owen's 99 Bottles of OOP: [https://www.sandimetz.com/99bottles/](https://www.sandimetz.com/99bottles/) It's excellent, and does not do the thing you're complaining about. \(And, as an FP enthusiast, I suggest you simultaneously, or subsequently, check out Professor Frisby's Mostly Adequate Guide to Functional Programming, which at least has the benefit of being in JS: [https://mostly\-adequate.gitbooks.io/mostly\-adequate\-guide/](https://mostly-adequate.gitbooks.io/mostly-adequate-guide/)\)
I don't want to confuse you more, and probably I'm confused too, but I believe OOP &amp; Procedural are orthogonal. Honestly, I would tell you to not get hung up on that kind of terminology. There are many different ways to define Object Oriented, and a lot of them contradict one another. It would be simpler to just think of the _objects_ that you have as data structures; they're just bits of information encoded in some formal definition (JavaScript objects!). If you want to make an application, just name an object something like *state*, then code something up to display that to the screen. Whether it was written imperatively or declaratively should be thought about after-the-fact and used to work out better solutions.
Thank you sir.
Looks pretty awesome, and I have nothing technical to offer, except that I've read that if your 100% secure, anonymous, encrypted chat app gets enough traction, the FBI and/or FSB will drop by for a chat. Something to look forward to.
The future is bright, it's like asking if you should learn to write good applications. Now, with that said, it might be a hard sell to pitch to your company that this level of quality will improve business metrics, not everyone can afford the time and resource it takes to build and deliver that level of amazingness to user experience on the web.
I faced a similar challenge to 1 with a language learning app I wrote for my school. In my case it's where a question requires a sentence for an answer, some lower ability students can't begin to form a sentence let alone type at a sane speed even on a desktop keyboard. What I do is keep records of all answers submitted - we have to do this anyway to manually mark the sentences. In the marking interface, the teacher flags it correct or incorrect and if incorrect. They can also flag it as a model answer whether it's correct or not. For students at lower ability levels, the question comes up in multiple choice format using model answers submitted by other students.
Cool, this is quite good! Some suggestions though, looks like there's too many resources loading at once, thus slowing down the site. The code editor's cursor is somewhat strange as it does not point to the right character, it gives a hard time if I have to edit something. Also, on submission, I feel like the evaluation could be sped up.
This is pretty sound advice. A lot of people have it engrained in them that the old paradigm is better and that the new one can't possibly be an improvement. Usually because \*insert javascript is slow strawman argument here\*.
Thank you!
This is absolutely true
nice
It's cool that you included a section "Wait a minute, it does the same as Electron, doesn't it?" because I got exactly this question at the end :)
Now I want one that replaces ads with male chickens and we call it...... cockblocker!
Can't stop the coder hype I guess.
They are really helpful little tools that you should use whenever you need it. Everything else is just buzz and it’s been massively silly. PWA‘s are not „the future“ nor will they replace native apps, this is just another of googles crazy fever dreams where chrome runs web apps as an embedded Host. JavaScript is better than that, and the apps it will drive will run natively without having to wait for a vendor 10 years for each little thing that native developers take for granted. 
 &gt; Is unit testing really useful for very small applications? Or for that matter, is it important for client side projects? Honestly, I think tests can be used on anything. I often will write microtests in the console just to confirm a simple function does what I want. Almost any time I do something that involves `Date` I write tests because of how complicated things can sometimes get. Unit tests simple *prove* that a function or method works. A lot of time, you don't need that level of confidence. And sometimes you need it only once or twice for a project, and you don't need a testing framework for that. &gt; Does anyone have a suggestion/tutorial for getting started with Unit Testing? So, tutorials are kind of useless if you haven't decided on a testing framework. **And choosing the right framework for your project is incredibly important.** Twice I've had to re-write entire suites from one framework to another because I went from testing headless code to needing browser tests, or moved a browser library into Node. You have to work that out first. My experience is a bit dated now, but if you are writing just for the browser (and want to catch platform-specific problems in IE/Chrome/Safari/FF), then Mocha is great. If you are less worried about that, a Jasmine is fantastic. I would be really grateful if anyone wants to correct me here. I sometimes run my Jasmine/Jest tests in VSCode integrated terminal, but usually I just run them in a normal terminal in the background and I use the `--notify` flag to tell me if a test has failed. I am usually notified within 1 second of a file-save, which is fine for me. FWIW, from just my personal experience, try to stay as close to the vanilla version of your testing framework as you can. If you know it's something you'll need, figure out how to handle asynchronicity out of the box. Figure out how mocking works. Figure out promises. Figure out timeouts (like, if you need to confirm `b()` completes within 500ms of `a()`.) Do this first. Before you reach for a plugin or assertion library. I used to love plugins, but they added another thing you have to update, another thing to break after an update, another thing to maintain because they updated their API and `isNot` is now `is.not` or whatever... Gah. I love them, but I wish I never saw them. 
I've written a fairly extensive js refactoring tool for VS Code. It might be useful for your research. You're welcome to have a look at the source on my github. https://github.com/cmstead/js-refactor Best of luck! 
Install the[ jest plugin for VSCode](https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest), it gives great instant visual feedback to help you learn. The jest homepage has the basics but you can find loads of tutorials for this test framework.
This should be avoided unless you actually need this behaviour and have no easy way around. This is not very SCU friendly
This is a difficult question to answer. Very difficult. It's kind of like religion. You spend your whole life believing something to then be shown that what you've been doing, what you've learned is wrong! You will kick, scream and be confused as hell! But, when you "correctly" use OOP and the design just works you will feel very good about it. Unfortunately, this takes time. A lot of time. My advice would be to see examples of where people have used design patterns and go from there. Sorry not overly useful.
Like others mentioned you can use simulators. However, I’ve found them to sometimes behave differently than real devices A more reliable way is to use services like browserstack or appcenter that let you test on real devices 
That’s right! you don’t need redux. Or react, or js, or a browser. Write your apps in assembly like a real developer!
Really neat! Could you consider darkmode for late night coding?
Wait, is this already on node?
https://github.com/AlbertoMontalesi/JavaScript-ES6-for-beginners-ebook/blob/master/assets/JavaScript%20ES6%20for%20beginners.epub you can download the epub from here. It's the first epub I create so please forgive any problem.
It's like asking "how is the future of HTML?" in 1998...
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [AlbertoMontalesi/JavaScript-ES6-for-beginners-ebook/.../**JavaScript%20ES6%20for%20beginners.epub** (master → fe969a3)](https://github.com/AlbertoMontalesi/JavaScript-ES6-for-beginners-ebook/blob/fe969a3756877b84a9dca83dde95b12953b4be54/assets/JavaScript%20ES6%20for%20beginners.epub) ---- 
Not a single benchmark to justify this chap's opinions, or to prove they are actually worthwhile optimisations and not just pointless micro-optimisations. For example, he advocates dynamically rewriting methods, but that interferes with JIT.
Thank you, I outsourced the socket and http protocols: *httpserver.js* const routes = require('./routes'); module.exports = { createHTTP: (app) =&gt; app.get('/', (req, res) =&gt; { routes.default(req, res); }) } *wsserver.js* const WebSocket = require('ws'); const communication = require('./communication'); module.exports = { createSocket: (server) =&gt; { const wss = new WebSocket.Server({server}); wss.on('connection', (socket, req) =&gt; { console.log(`Connection(${req.connection.remoteAddress}) established`); socket.on('message', (data) =&gt; { console.log(`Resolved: ${communication.resolveResponse(data)}`); }) .on('close', (code, reason) =&gt; { console.log(`Connection(${req.connection.remoteAddress}) closed with code: ${code}`); }); communication.sendRequest( { type: 'ping' }, socket, (err) =&gt; { if(err === undefined) {return err}; }) }); } } For the WebSocket(wsserver.js) I was looking [into this mocking library](https://github.com/thoov/mock-socket). Given my code, how could I test it? In the example(see link) it makes perfect sense, since a property messages is created in chat.js, which is being used as a control to pass or fail the test. But in my code, so far, I don't see anything where I could test something?...
Thank you. I posted an answer above, which was also directed towards you :) I am thankful for every help I can get.
By the way! I have been on your site all night and there seems to be a bug whereby if a user submits code that contains a `console.log()` statement, some of their lines won't appear in the Solutions page. That is a very big problem when users sort by **shortest code**, because then the code may appear as shortest even when it shouldn't. So it happened to me twice, the first time by mistake and the second to prove there was a bug. Here you go: my Solution appears as the shortest one in both these cases, and it shouldn't. As you can see, there is code missing here... 1. [https://edabit.com/challenge/nHaKL55KwW3XaGrAw](https://edabit.com/challenge/nHaKL55KwW3XaGrAw) 2. [https://edabit.com/challenge/62FxK8G5XB6mdX4Fy](https://edabit.com/challenge/62FxK8G5XB6mdX4Fy) And here is a 3rd case where code is obviously missing from a solution, though I'm not sure it is for the same reason: [https://edabit.com/challenge/nQtiQCoqM6rxWpZmC](https://edabit.com/challenge/nQtiQCoqM6rxWpZmC)
I still don't understand why we wouldn't just integrate operator overloading instead of this. Operator overloading has many more application than these BigInts and can be used to implement them in a polyfillable way. The spec for this basically already addresses the issues with general operator overloading but refuses to generalize it to other use cases. [See also this issue](https://github.com/tc39/proposal-bigint/issues/69)
Oddly satisfying... return Array.from(str).reverse().join('') 
Thank you for the free tool. I’m digging it. It is really intuitive and interactive despite being unsupported for mobile use. Away from computer at this time, but I will report back after computer trial is under way. 
Read under "Operators" in the linked document. Your comment makes no sense.
I find FP better too but it might be hard to appreciate the benefits of FP without knowing OOP (not saying OOP is all that bad but we need something to contrast it against) And I get the feeling that someone who started in FP might find OOP better for things that usually need roundabout way to implement in FP like having a state (in real world we sometimes do need states after all)
No, because it typically takes all of 15 minutes to complete. 
React Native is a very strong contender for this, and you get most of the cross\-platform aspects of also being able to run on iOS out of the box. It's relatively stable now a days as well and performs ridiculously much like any native app.
:D :D
You should practice by building things.
The colors
nice post
Just signed up and started working through the exercises. Great work OP!
Why would you store things as base64? It adds ~30% overhead iirc
As always, years later than everyone else and many men's lives lost.
I'm of the opinion that TC39 is driven too often by particular interests, and that these prefer to focus on their short term goals instead of keeping a larger perspective.
I’m sure it will be fine! Thank you.
oh my god that italic font. Ewwww, just gross. 
That's my favorite part. To each their own. 
OP care to chime in?
Solarized dark is just fine for me, thank you very much
This is very interesting. It would benefit from benchmarks.
Using the constructor instantiation of primitives is considered an "anti-pattern" because it's literally not instantiating primitives in that case. It's instantiating *objects wrapping the primitives* (which exist for god knows what reason) that behave differently and will break your code if you think they are primitives. It's not about performance.
Nope. Safari got it released earlier. (with 11.3) It's just that their web app implementation sucks big time...
As usual, the real answer is in the comments.
[Can't give up my own theme...](https://camo.githubusercontent.com/29708e7d7766649e78d284487fb2e8e46339dbcc/68747470733a2f2f692e6779617a6f2e636f6d2f31643737643762383134336365313661333762303132306633646361316238352e706e67) though I'm using Operator Mono now instead of SF Mono in that screenshot
I may be wrong but some of these micro-optimisations are as old as jQuery itself and don't fully take into account modern JIT compilers. Premature optimisation is the root of all evil, it's more important to understand what not to do that can prevent the engine from inlining code etc and trust in your transpiler to do a decent job. When I worry about performance, I believe in using real world benchmarks, writing monomorphic code, using common sense and fixing actual problems. 
Banning `boostlog.io` for plagiarism: https://medium.com/@georgeranch/designing-for-performance-javascript-on-steroids-part-i-fc9133cfde17
Do you know if this theme can be any way remade for other programs, e.g. Atom/Brackets? Damn, this theme looks soo fabulous, great job man!
Hi /u/SebastiaanEssen, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
your comment is stupid just like your name, lol
Banning `imbeginner.net` for plagariasm: https://blog.jscrambler.com/12-extremely-useful-hacks-for-javascript/
Hi /u/nearbyshower, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/Larryn1030, For javascript help, please visit /r/LearnJavascript. Thank you!
&gt; Devdocs.io Hey buddy. Thank you, but any suf\suggestion for offline access? 
Language servers are implementing protocol which limited to few actions. I can use protocol, but still need to implement my own language server.
I'm not sure you can really compare a style of writing apps to the literal foundational language of the internet...
Thanks so much! It's good to know that this is yet another kind of "choose your destiny" thing lol. It's like the choose your destiny of React/Angular/Vue... It does seem like Mocha is what I need should probably use at the moment. I understand though what you mean basically - keep it simple. I used to do python programming and I'd code in a lot of "error handling" ... "try except" etc.... and I believe what you're getting at is to try sort of thing in vanilla JS rather than relying on libraries. Correct me if I'm wrong. At some point in the near future I'll get around to it. I think I'll try mocha. There are a bunch of extensions for VSCode that look good for Mocha. Thanks for your input - I appreciate hearing about your experience!
Others suggested Mocha... what do you think is the benefit of Jest over Mocha?
Something that I don't see said very often, but just understanding how memory and garbage collection work in the browser would go a long, long way to helping people with performance. In a lot of projects I look at, there's almost always an obscene amount of memory churn that's really easy to strip out. Things as simple as storing jQuery selectors outside of hot loops can improve performance pretty significantly.
Two thoughts from my side: 1) It's not really a library, you're providing a framework to implement algorithms. 2)Is there a reason to mix class syntax with functional style? But nice one, makes me want to learn genetic algorithms! 
"This level of amazingness" implies as if a "progressive web app" means something specific. It means tighter integration with mobile APIs and UI experience. Which is something sites do at least a bit of, and no web app can't possibly do all of (as APIs improve every day).
While this doesn't sound to apply to OP's scenario, sometimes you don't have a persistent file storage available and storing small images in database might make sense. Think of a containerized chat application where users can select their own profile picture and setting up a persistent file system just for that functionality would add overhead. Keeping things simple.
Hey got any resources to learn more about this?
Setting up some form of static hosting is always worth it. Don't forget that when you put the images inside the API response as base64 it becomes impossible to cache in HTTP protocol level and you have to cache those images manually in the browser. If you have graphQL apollo client to help you with that\-why not. GraphQL makes it effortles. If you don't\-you better set up that static file hosting because with REST it's quite a lot of pain.
This is really cool, only suggestion I have is that you should be able to view other solutions without penalty after submitting a correct one. You know, to check and see how others thought about the problem, if there's a more concise answer than what I gave, etc. Overall, great job!
The mocha VSCode plugin is very basic compared to the jest one. Jest is faster, more actively developed and includes mocking, test coverage and BDD syntax out of the box. Mocha needs multiple additional libraries to be installed for equivalent functionality. Main disadvantage of jest is that it's normally associated with React, many guides will assume you're using the 2 together but this doesn't have to be the case.
Unfortunately, not really. It's mostly just been trial and error and a lot of reading about things. Most of the projects I've been working on are games, so keeping them at 60fps is important. I think the big thing is to just keep in mind your hot paths. If you're looping 1000 times, 60 times a second, and you're declaring a variable inside of that loop, that's 60,000 instances that the GC may or may not know how to deal with. If you declare it at the top of the loop, or even as a local variable outside of the function, the GC doesn't need to worry about it. jQuery's even worse about that because every `$('some selector')` searches the whole DOM and instead of just assigning the result to a variable at the start of a function, I've seen people call it every time they need that element not realizing that it's searching all over again. Mostly, though, I've just spent a lot of time trying to chase down weird things like pages hanging every few seconds for a split second.
 BigInts are a first step towards generic operator overloading (which is still on TC39’s roadmap).
IME, this is normal, once a large group of stakeholders is involved. The alternative is a single party (Java) or a benevolent dictator (Python). But there are discussions about constituting a smaller design team, to create a more cohesive roadmap.
They're on the edge, just the opposite edge.
Okay, fair enough. My comment comes from recent experience of being expected to complete a several hour long project for an interview, which I’ve been seeing more and more of lately. 
So, I'll try to give you a semi-pratical rundown. I'll use a slight spin on the typical shape example, instead of shapes we'll making [waveforms](https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Waveforms.svg/1200px-Waveforms.svg.png) (sine &amp; square) and drawing them to a canvas. So, drawing a sine wave procedurally would look like: function getCanvasCtx(canv) { if (!canv.getContext) throw "Can't get canvas context!"; return ctx = canv.getContext('2D'); } function drawWave(canv, yGenerator, [startX, startY]) { const ctx = getCanvasCtx(canv); ctx.beginPath(); ctx.moveTo(startX, startY); for (let x = startX; x &lt;= canvas.width - startX; x++) { const y = yGenerator(x); ctx.lineTo(x, y); } ctx.stroke(); } function clearCanvas(canv) { const ctx = getCanvasCtx(canv); ctx.clearRect(0, 0, canv.width, canv.height); } function sineGenerator(amplitude, frequency, offset) { return x =&gt; (amplitude * Math.sin(frequency * x)) + offset; } const canv = document.getElementById("waveform-canvas") const { height, width } = canv; let sine = sineGenerator(height / 4, 6 / height, height / 2); drawWave(canv, sine, [0, 0]); As you can see the procedural example is just a bunch of functions and state stored in local/global variables. The same in OOP would look like: class Wave { constructor(canv, start = [0, 0]) { this.canv = canv; this.start = start; } get ctx() { if (!canv.getContext) throw "Can't get canvas context!"; return this.canv.getContext("2d"); } get width() { return this.canv.width; } get height() { return this.canv.height; } generateY(x) { throw "generateY for Wave subclass not implemented!" } draw() { this.ctx.beginPath(); this.ctx.moveTo(this.start[0], this.start[1]); for (let x = this.start[0]; x &lt;= (this.width - this.start[0]); x++) { this.ctx.lineTo(x, this.generateY(x)); } this.ctx.stroke(); } clear() { this.ctx.clearRect(0, 0, this.width, this.height); } static redraw(...waves) { // clear all the canvases for (let wave in waves) { wave.clear(); } // redraw all waves for (let wave in waves) { wave.draw(); } } } class Sine extends Wave { constructor(...args) { super(...args); this.amplitude = this.canvas.height / 4; this.frequency = this.canvas.height / 6; this.offset = this.canvas.height / 2; } generateY(x) { return (this.amplitude * Math.sin(this.frequency * x)) + this.offset; } } const canv = document.getElementById("waveform-canvas"); const sine = new Sine(canv); sine.draw(); So, the object oriented version is a bit longer, but you should notice the last three lines are cleaner, and the one big advantage is we have no encapulated the logic/data for building a sine wave into it's own class, so now we don't have to pass a bunch of stuff around through arguments. However, there doesn't seem to be a huge advantage to this yet. Let's see what it takes to add a Square wave to each. Procedural: function squareGenerator(top, period, offset) { return x =&gt; (((x + 1) % period) &lt; top ? top : 0) + offset; } const canv = document.getElementById("waveform-canvas") const { height, width } = canv; let sine = sineGenerator(height / 4, 6 / height, height / 2); drawWave(canv, sine, [0, 0]); let square = squareGenerator(height / 2, width / 4, height / 4); drawWave(canv, square, [0, 0]); OOP: class Square extends Wave { constructor(...args) { super(...args); this.top = this.canvas.height / 2; this.period = this.canvas.width / 4; this.offset = this.canvas.height / 4; } generateY(x) { return (((x + 1) % this.period) &lt; this.top ? this.top : 0) + this.offset; } } const canv = document.getElementById("waveform-canvas"); const sine = new Sine(canv); sine.draw(); const square = new Square(canv); square.draw(); Okay, so neither were that hard to add, and the procedural version is actually shorter! So, what's the advantage to OOP? Well, lets see what it looks like when we want to have multiple waves on two different canvases, while also updating some values and redrawing. Procedural: const canv1 = document.getElementById("waveform-canvas1"); const canv2 = document.getElementById("waveform-canvas2"); const { height1, width1 } = canv1; const { height2, width2 } = canv2; let sine1 = sineGenerator(height / 4, 6 / height, height / 2); drawWave(canv1, sine1, [0, 0]); let sine2 = sineGenerator(height / 4, 6 / height, height / 2); drawWave(canv1, sine2, [5, 0]); let square1 = squareGenerator(height / 2, width / 4, height / 4); drawWave(canv2, square1, [0, 0]) let square2 = squareGenerator(height / 2, width / 4, height / 4); drawWave(canv1, square2, [0, 0]); // change sine1 start and square1 period square1 = squareGenerator(height / 2, width / 6, height / 4); clearCanvas(canv1); clearCanvas(canv2); drawWave(canv1, sine1, [5, 50]); drawWave(canv2, sine1, [0, 0]); drawWave(canv1, sine2, [5, 0]); drawWave(canv2, square1, [0, 0]) drawWave(canv1, square2, [0, 0]); The same in OOP const canv1 = document.getElementById("waveform-canvas1"); const canv2 = document.getElementById("waveform-canvas2"); const sine1 = new Sine(canv2); const sine2 = new Sine(canv1, [5, 0]); sine1.draw(); sine2.draw(); const square1 = new Square(canv2); const square2 = new Square(canv1); square1.draw(); square2.draw(); // change sine1 start and square1 period sine1.start = [5, 50]; square1.period = sqaure1.width / 6; Wave.redraw(sine1, sine2, square1, square2); As you can (hopefully) see OOP makes it eaiser to manage several of these wave drawings since each object holds it's own state that we can update indpendently and since they are all of the same parent class, they'll each respond to a similar interface making it easy to work with different kinds of waves at the same time.
So I should be able to use this in production in 3? 4 more years?
&gt; their web app implementation sucks big time Yeah, any idea why that is? It's a little odd that they go to the effort of implementing a big part of PWAs, but seem to drag their feet on other big parts.
Hey, dessydes, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Is there some reason that MS seems to be on wacky tobacky when it comes the their browsers? Genuinely curious.
You can use it in production right now. Your site will run fine in web browsers that don't support service workers but if the browser supports service workers your site will be better. 
To be fair, Windows 10 seems to have a better adoption rate than MacOS according to https://arstechnica.com/gadgets/2018/04/with-new-windows-update-still-awol-fall-creators-update-reaches-92-penetration/?amp=1
Yes, you should. With Progressive Web Apps and Web Assembly on the scene now, the "web browser" is more of a virtual machine than an HTML/CSS/JS interpreter. \(Consider that the web platform now has "subsystems" for file storage, databases, networking, graphics, sound, etc.\) That is where the web platform is moving \- to an "application delivery" platform.
Depends what you’re using it for, if it’s anything more complex than caching (e.g. transforms, redirecting) then you’ll run into issues.
For general programming, you've got to watch this a little too. I would have thought the JIT compiler would spot obvious repetition like that and optimize it away for you. As always: test, then optimize if really needed (experts only).
They have a stranglehold on the market, with very little motivation to compete with chrome and Firefox. I don't know the exact #s but there's tons of companies out there who's internal tools still only work with IE 6-7 and will likely never upgrade. 
yeah not sure what you are talking about, cordova is just a webview, it definitely doesn't require that you rebuild anything from scratch. for me the main learning curve was making sure the relative paths of my assets worked correctly in both the web version and the cordova version (same codebase). i use webpack to build separate versions of apps to different directories. the web version gets built to /dist and the corova version goes in /www. this works very nicely, but if you don't use a compiler you could write a bash script or a gulp task to copy your assets into /www, and then run cordova build.
sick
it's an antipattern to cache selections??
yes I actually do the same thing in my app except using node and grunt to run tasks &amp; build a dist for deployment &amp; webpack to bundle all my dependencies. I guess the issue I'm having is to re-install and apply all those dependencies and task runners on top of Cordova, as opposed to applying Cordova to my already nearly prepared app
This is beautiful.
They don’t through. Most people use Chrome. https://netmarketshare.com/browser-market-share.aspx http://gs.statcounter.com/browser-market-share
I do just click “install tomorrow” quite a few days in a row on my Mac. Doesn’t Windows 10 restart for updates when it wants, and you can’t stop it?
You can also postpone it as long as you want and - but only on pro - even skip updates if you want. My Surface also installs them quietly over the night just like a Mac does, MS learned from its mistakes ;)
Unless you define "ancient machines hanging on to life by a thread" as an appreciable market, there are none in which IE or Edge are dominant in any sense. I say this as someone who has worked on the team for years ;)
That doesn't mean that there aren't still a significant number of business apps that still require IE to work.
Significant compared to Chrome's market share? Certainly not.
This ignores the "features" that make objects interesting: inheritance, data encapsulation, and polymorphism. I'm not a huge fan of OO programming
For me, it's that some APIs (like `getUserMedia`) work great in safari, then when you add the app to the homescreen, no longer work at all... Meaning a PWA that runs in a tab works great, but once it's added to the homescreen it LOSES functionality!
They don't really want you to get apps outside of App store and the rest of their ecosystem.
First formatting: function isFourLetters(str){ var arrayStr = str.split(/\W+/); var result = arrayStr.filter(**word=&gt; word.length==4**); return result; } ***** A filter is just a loop that returns an array based on a conditional, so it'd be like so: var result = []; for (var i = 0; i &lt; arrayStr.length; i++){ var word = arrayStr[i]; if (word.length === 4) result.push(word); } 
I thought we were talking about a reason MS might build a "wacky tobacky" browser? I think it's safe to say the "IE11" market is not lucrative enough to justify boost a tiny dying market at the expense of one a thousand times bigger and growing like crazy.
&gt; MS learned from its mistakes ;) https://i.imgur.com/w5IWsra.gifv
&gt; Also JS lacks classical inheritance and interfaces, so you can't really implement SOLID This is mostly wrong. Yes, JS does lack interfaces because that's about static type checking, and JS is a dynamic loosely typed language. The JS inheritance model is more powerful that Java's inheritance for example, and JS can imitate Java's inheritance as one choice out of many. Douglas Crockford wrote about this well over a decade ago, and then later concluded that trying to imitate Java's inheritance was a mistake in the first place: http://www.crockford.com/javascript/inheritance.html Let's also not forget that inheritance is way over used, and we should [favor composition over inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance). And here's how to do dependency inversion (the D in SOLID) with JS: https://stackoverflow.com/questions/5349003/dependency-inversion-principle-in-javascript#5349478
 arrayStr.filter(function(word) { return word.length == 4; });
Here's a link to a game I'm working on with an example of useful OOP, please see the client/client.js file. There are 4 categories of Entities that may look different (enemy, tree, fruit, projectile), but they behave basically the same - just render them by position and update any animations/health/etc. each frame. The Player class extends Entity, because player animations and behavior can be radically different from the entities (independent sprites/different animations/names/chat) - but updates to rendering and positioning are similar, and there's no need to rewrite all that code. * line 402: class Entity {} * line 631: class Player extends Entity {}
This project seems to include a lot of stuff that one might want to define themselves. For example react/react-redux/lodash.map/proptypes etc. Why bundle these when the core logic is around 5 lines of code? The way I see it, this should be a configurable redux middleware where you define which action should be dispatched when the online and offline events happen. Essentially, have a middleware that listens on the `navigator` for `online` and `offline` events and trigger user-defined actions. (In your example, they are `ON_LINE` and `OFF_LINE`. What do you think?
Yes you can, don't be so literal...
But don't worry there's an iApp in the iStore that has the same iFunctionality for 10 iDollars
in my experience linters are not fun if you are fighting against the rules. after i got used to standard &amp; airbnb styles (whichever, both are fine IMO), i find that i don't have to fight the rules anymore, it ONLY makes my life easier. i think others have pretty much answered your question. your colleagues are basically wrong, but it's tricky to be the new person at a company and tell everyone else they are doing something wrong. maybe this is a good opportunity to practice being diplomatic? it's easy to antagonize people by telling them they are wrong, but you can work on doing it in a way that doesn't trigger their defense mechanisms or insult them.
That's worse than I could have ever imagined. 
I like dark themes, but the available ones were to dark and contrasting for my taste. So I ended up overriding ~20 properties of the Material theme. After publishing my relaxed terminal theme (https://github.com/Relaxed-Theme/Relaxed-Terminal) I came to the idea that having an editor theme based on that colors would be neat. I never thought that it would be that time consuming to finish that though. That’s the little backstory about the origin. 
Chrome's market share has absolutely zero bearing on the business requirements of those apps. They're not all of a sudden gonna magically working in Chrome. There is a reason Windows 10 still includes IE.
IE is not being actively developed outside of security updates for that reason. The problem is that Microsoft can't sunset it overnight because the user base is 1) not quite as tiny as you are making it out to be, and 2) the user base that is still on IE represents a very significant share of Microsoft's business.
1st, 2nd, 3rd... This package th-ize your number! https://github.com/ycmjason/thize
Im happy to hear some feedback aswell
&gt; something that caters to the unconnected bits I don't think you get the idea of PWA. The point is native-like performance, not losing connectivity
Just what I wanted thanks!
Do we really need a DSL for this?
Hi /u/Poopingcode, For javascript help, please visit /r/LearnJavascript. Thank you!
Wow! This is amazing! The most beautify part is probably `sync` IMO. Love this!
Awesome, thank you! I never really gave too much thought into the JIT compiler granted I did have a few discussions with people telling me that compilers are always improving and that even things like caching the length variable for a for-loop can be overkill (or even ignored) in a vast majority of scenarios, by the compiler. Interesting stuff and I'm gonna do more research on it, especially if I plan on sticking to JIT compiled languages like JS. 
I think we're talking past each other. FWIW I work on the team and I know all about these decisions (having helped make some of them :-P).
Will do!
Hello, I develop web apps that are used internally at the company I work for, and the default browser for our users is IE11. The 'default browser' setting resets every time you restart your computer, so even though our users could use Chrome they're not doing it. We (the devs) are trying to change this, but in such a big corp it is really hard. Kind regards, lowb0b
&gt; JavaScript doesn't have explicit interfaces, ... because it's not statically typed in the first place In other words - it doesn't have them. Good. &gt; JavaScript might also not technically have classical inheritance, but that's an implementation detail JS has dynamic prototype chains, which is a different beast from classical inheritance &gt; first understand what you are talking about, at least at basic level Now you are just being full of shit
[Hopefully this helps!](https://codepen.io/anon/pen/jxmWOx)
Neato! Great job!!!
What do you mean the "pointer problem"? I'm using Opera and Chrome \(for macOS\) without any issues on my end. A screenshot would definitely help! Cheers!
The DSL is what makes Pathify so expressive and lean. Check the "Code Comparison" demos on the demo site to see real world examples: - https://codesandbox.io/s/github/davestewart/vuex-pathify/tree/master/demo?initialpath=code Click into the individual demos, then use the green buttons to open the corresponding files. For more info, check: - [Pathify 101](https://davestewart.github.io/vuex-pathify/#/guide/intro) - A quick intro to how Pathify works - [Rationale](https://davestewart.github.io/vuex-pathify/#/discussion/rationale) - Why Pathify was created 
Thanks! Glad to hear!
Big government institutions in the UK seem to love IE, I imagine their staff are getting shifted to Edge.
React or Vue. Pick the one you like the most.
I remember looking at [todoMVC vanilla](https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs/js) a while back and thinking it had a good architecture. Hopefully, you can find it interesting. I like your style and I think it's nicely decoupled and readable. If I were to make one suggestion it would be to name the "obvious methods" in `Main.js`. `locator` and `initialize` are possibilities. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tastejs/todomvc/.../**js** (gh-pages → 5e69c95)](https://github.com/tastejs/todomvc/tree/5e69c95ef7d60d52a0d94819d7dcc542e7375fb0/examples/vanillajs/js) ---- 
My guess is that this is by design.
Unless that category is Enterprise Applications that have to be accessed using IE. 
Yeah of course, but that’s not what the original point was
The name is a bit confusing, a lot of people know `babylon` as the parser that `babel` uses: https://github.com/babel/babel/tree/master/packages/babylon
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [babel/babel/.../**babylon** (master → 494a56d)](https://github.com/babel/babel/tree/494a56df5fe820cdabca311c97029b7b424f558e/packages/babylon) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyahl3g.)
If you're just learning JS, don't use a framework. 
its definitely what the original point was. That's why the sentence after it directly states those exact conditions.
No prob!
That's incredible. How could they not realize this? How could they not test for this? How could such a half-assed, non-tested solution for installable web apps have taken so long to develop? New-Apple's Software quality is garbage tier. It's hard to believe that their OS and core software used to be top notch. `if (apple) goto fail;`
After a month or so of plain JavaScript, maybe take a look at jQuery. At the very least, it will give you an example of how to use frameworks in general.
\&gt; most of the functionality is part of ES6 You must be kidding.
Does this make safari the new IE
Couldn't get used to it because of the way it required to intialize things, but that's just my opinion. Anyway, the webgl2 support is huge plus.
God u vanillajs shills, nobody wants to use ur trash framework. Its like, 20 years old
This is like DirectX. Why add a Microsoft dependency to webGL? 
but most companies aren't going to immediately hop onto node 10.. from Amazon to Walmart, they are at LTS or previous LTS
&gt; The DIP example seems contrived, and anyway not OOP-like There are thousands of more examples with a simple search. You don't need interfaces for SOLID, despite the fact that the Wikipedia articles on the subject focuses on class-based strongly typed languages with interfaces. But if you want a more authoritative example of dependency injection / dependency inversion in JS, have a look at Angular. https://en.wikipedia.org/wiki/Dependency_injection#AngularJS_example
other problem, if DOM was partially updated, the variable may reference "old" version of the UI object. 
Looks great. Anyone know how nicely this plays with Nuxt? I didn't see any notes on this in the FAQ.
My guess is in a corporate environment the systems would be thawing a frozen system image on every boot. As such, system configuration stays forever consistent :( Of course I could be wrong, I just know that deep freeze is a popular choice.
The Tower of Babel as told in Genesis 11:1-9 is a purported origin myth meant to explain, or does explain, why the world's peoples speak different languages. Babylon was a key kingdom in ancient Mesopotamia from the 18th to 6th centuries BC. It’s useful to comprehend the origins of things, which I find helps differentiate between them when terms are “reused” in current day. 
Hey, Dave here, Pathify author. I haven't worked with Nuxt yet, so I can't say for sure. If you want me to check this out (and provide some help!) file an issue :)
I tried building my own framework. Here is an example component: var PoopBox = new Poop({ el: 'poop-box', props: [], template: "&lt;div class='overlay'&gt;&lt;/div&gt;&lt;div class='msgbox'&gt;&lt;/div&gt;&lt;span class='cancel'&gt;[ cancel ]&lt;/span&gt;", data: { message: "" }, methods: { onCreated: function(){ console.log("pooping a poop-box"); window.addEventListener('poop-message',function(e){ alert("message received:"+e); }); this.addEventListener('click',function(e){ if(e.target.classList.contains('cancel')) { this.parentNode.removeChild(this); } }); // set message var m = this.querySelector(".msgbox"); m.innerText = this.data.message; }, createBox: function(msg){ var box = document.createElement("poop-box"); PoopBox.data.message = msg; document.body.appendChild(box); } } }); Base code: function Poop(poop) { // setup if(!poop.el) { console.log("Poop must have el"); return; } if(poop.el) this.el = poop.el; if(poop.template) this.template = poop.template; if(poop.props) this.props = poop.props; if(poop.methods) this.methods = poop.methods; if(poop.data) this.data = poop.data; if(poop.css) { document.head.appendChild($createElement({ tagName: 'link', rel: 'stylesheet', type: 'text/css', href: poop.css })); } // register element if(this.el[0] !== '.' &amp;&amp; this.el[0] !== '#') document.createElement(this.el); //define functions this.initialize = function(ele) { // template if(this.template) { ele.innerHTML = this.template; } // properties if(this.props) ele.props = this.props; // model if(this.data) ele.data = this.data; // methods if(this.methods) { for(method in this.methods) { ele[method] = this.methods[method]; } } // add listeners ele.addEventListener('click', function(e){ if(this.rowClick) this.rowClick(e); var act = $locateAttribute(e, 'act'); this.actionid = $locateAttribute(e,'id'); if(act &amp;&amp; this[act]) { e.stopPropagation(); e.preventDefault(); this[act](e); } }); // get attributes for(att in this.props) { if(ele.getAttribute(att)) { ele[att] = ele.getAttribute(att) || true; } else ele[att] = false; } // run on created if(ele.onCreated) ele.onCreated.bind(ele)(); } // find and initialize poops var poops = document.querySelectorAll(this.el); for(var p=0;p&lt;poops.length; p++) { this.initialize(poops[p]); } // create an observer instance // TO DO: make one observer for all poops that has a poop registry var that = this; this.observer = new MutationObserver(function(mutations) { mutations.forEach(function(mutation) { for(var j=0; j&lt;mutation.addedNodes.length; j++) { if(mutation.addedNodes[j].nodeType==1) { var newPoops = []; if(mutation.addedNodes[j].tagName == that.el.toUpperCase()) { newPoops.push(mutation.addedNodes[j]); console.log(that.el+' added 1',mutation.addedNodes[j]); } if('.'+mutation.addedNodes[j].className == that.el) { newPoops.push(mutation.addedNodes[j]); console.log(that.el+' added 2',mutation.addedNodes[j]); } var ps = mutation.addedNodes[j].querySelectorAll(that.el.toUpperCase()); //console.log(ps); for(q=0;q&lt;ps.length;q++) { newPoops.push(ps[q]); console.log(that.el+' added 3',mutation.addedNodes[j]); } if(newPoops.length&gt;0) console.log(that.el+' found '+newPoops.length+' new '); for(var n=0;n&lt;newPoops.length;n++) { console.log(that.el+' is initializing ',newPoops[n]); that.initialize(newPoops[n]); } } } }); }); var target = document.body; var config = { attributes: false, childList: true, subtree: true, characterData: false }; this.observer.observe(target, config); //observer.disconnect(); } 
As for which approach to use, my favorite method is to create a CSS file for each component, and then use a scoped class name for every CSS-targeted element. ``` // ProductPage component &lt;div className="product-page-detail"&gt; &lt;h3 className="product-page-headline"&gt; ``` It’s dead simple (won’t malfunction), scoped to your component, and follows industry-standard CSS best practices.
Good thing it's decentralized/open\-source.
Not a developer. Already a working product. Not sure what you mean.
While I agree on the argument let's not forget that web dev tend to go full circle every now and then (see server side template rendering). So yes, we shouldn't dismiss new practices and standards but in the mean time those kind of decisions need to be weighted during conception.
Bonus bit : you can integrate devdocs search into your browser and benefits from shortcuts. Exemple : "dd js promise" *dd* is the shortcut I mapped to use devdocs search, *js* will scope my query to the cached js documentation and *promise* will bring me directly to the Promise definition. Each doc has a configurable shortcut to help you narrow your searchs. 