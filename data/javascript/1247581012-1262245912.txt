plugin author really needs to lookup the stop() function in the jquery [api](http://api.jquery.com)
Wonder if dojo.Deferred satisfies your requirements. It is rather nice, eg if method1 and method2 both return a Deferred your example would be: MyWebservice.method1(params).addCallback(MyWebservice.method2) It gives you: A standard interface convention for functions whose results become available asynchronously (they return an instance of Deferred, which can have callbacks added to it to observe for the result) Ability to chain together any number of these Deferred-returning functions in a nice way, with results of one being passed to the next Sensible error handling behaviour which operates alongside this chaining, with a way to register 'errbacks' to catch error conditions, an error part-way along the chain halting further callbacks and calling errbacks etc. Also handles exceptions within async code/callbacks quite nicely Ability to compose multiple Deferreds into a Deferred.List, which is like running them in parallel and waiting for them all to be done Ability to specify a canceller for a Deferred which can be used to cancel it; this (I think!) respects callback chaining decently too. http://docs.dojocampus.org/dojo/Deferred It's in MochiKit too: http://www.mochikit.com/doc/html/MochiKit/Async.html#fn-deferred and based on this Python: http://twistedmatrix.com/documents/current/api/twisted.internet.defer.Deferred.html (For FP geeks: Deferred is actually a Monad, or near enough, despite some warts...)
i know you want to provide higher level functionality as well. but so far this can all be accomplished in rhino with importPackage(javax.media.opengl.GL), and then you just call opengl from javascript :-) if you don't plan on writing an AAAgame you will have a hard time maxing out current graphic cards.
I'm not sure this is the same thing. I mean, I understand that you can access OpenGL through Rhino but then I'd also need Java and the unnecessary overhead that could bring to a standalone application that embeds js to make OpenGL apps. Also, I could just focus on a standard subset of OpenGL like OpenGL ES and I wouldn't have that hard time maxing out current graphic cards, would I? I mean Vlad's doing that for Canvas3D and it seems to be working pretty well for him. And overall I'm learning lots of things so just for that it's worth the effort :)
Wow, noscript just paid for itself. :)
All $0.00 of it. So you're saying XSS "protection" is worthless? ;)
I think he means the time he had to spend clicking 'allow script' on every different website.
sure, i appreciate your work. i just think that the harder problem here is to create a 3dengine that is javascripty. the raw opengl calls are tough for canvas2d people :) ppl don't want to read the redbook just to hack some 3d gfx in js. with closures and our lightweight objects sometehing nice could evolve. i will try vlad's canvas3d - didn't know about that, thanks.
More like priceless?
Heh, that's fun. I've contact the jQuery UI team to make sure that they resolve this.
Hate that!
Time is money!
Looks interesting, docs look very clean at least. I clicked a single link to see its Observer class and note there's no way to unregister, which is useful to prevent races around network IO ('active object changed, old object just had a state update complete late, notified UI objects, which now show wrong state', etc.) It also seems a misadvertisement to pitch as 'the best of all the other frameworks, just cleaned up'. Take for example jQuery vs. Prototype, they use fundamentally different styles of API (I personally prefer jQuery's singleton vs. Prototype's munging of built in tyes). You can't really (and shouldn't) have both in a single framework
you can unregister listeners with 'stopObserving' method. was you talking about that? regarding the site and advertising I'm personally not sure the way it's going, it's kinda growing thing and it still changes. Personally I wanted a Prototype/Mootools kind of framework, object oriented and with the native classes extensions, but much more compacter and modular, with a small core like jQuery, and I liked jQuery short and handy methods. That's approximately the line where I'm trying to join them. I think there will be time for cleaning up the ideology and advertisement once the thing get more or less shaped.
That's cool. :) I'm a little (read: massively) hung over today and managed to miss stopObserving().. Wishing you the best with it.. there can never be too much variety!
Lol, I'm waiting for that JQuery UI fruit to write a rant about this one too. Anyways, great job man. These days, I'm using YUI3 for work (kinda have to considering my employer), but I love the style you have going here. Will check back in a few days when I start my next personal project :) Edit: I haven't benchmarked your library yet (and probably isn't necessary at this stage), however thought you may be interested in this article for your trim prototype speeds: http://blog.stevenlevithan.com/archives/faster-trim-javascript
yeah... try it in all the browser
The opposite is true too, why create hundreds and hundreds of images, or use the still poor supported CANVAS, instead of using a backward compatible 7k plugin?... Of course, if you use it only for a logo or for static text you are doing it wrong, it is intended for dynamic text, as post titles in blog... you can do this with images?
You might want to revise your [isArray](http://thinkweb2.com/projects/prototype/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/).
&gt; Lol, I'm waiting for that JQuery UI fruit to write a rant about this one too. Erm, no. Perhaps you didn't read my concerns regarding the BBC Glow library closely but all of my criticisms were circumspect (I had no beef with the actual construction of the library - more that they weren't interested in contributing back patches to Open Source projects). RightJS looks like an interesting library and I applaud the author for creating it! It looks like he's attempting to follow a genuinely original path; that is what we need more of - JavaScript libraries that tackle challenging problems in new and interesting ways.
It works in all the browsers I use.
&gt; Who is actually going to remember that 13 is the enter key a month, or even a week later? I don't know, maybe people who actually put comments in their code?
and anybody who at least once has used javascript. Anyway, the flood of ill-advising, jquery-centered basic javascript blogs really makes me sad
It's generally considered better to have readable code than a comment explaining why it's not.
Then `keys.ENTER` (uppercase usually signifying a "constant") would be more appropriate than the author's solution.
Anyone who has done anything keyboard related ends up remembering that 13 is the enter key. You end up remembering those things, like the powers of 2, or some basic HTML colors.
Oh Resig, I wasn't talking about your rant on Glow. About that one, I'm on the fence, no particular opinion. I was in fact referring to this post: http://marcgrabanski.com/article/jquery-tools-vs-jquery-ui to which I disagree very strongly. I think others in the comments do as well. Hope I've made my comment clear, and just for the record, I respect you and your work a lot. Keep up the excellent work with JQuery :P
&gt; function KeyCode(event) { &gt; this.event = event; &gt; this.normalize = function() { &gt; return (this.event.keyCode ? this.event.keyCode : this.event.which); &gt; } &gt; &gt; this.isEnter = function() { &gt; return this.normalize() == 13; &gt; } &gt; } Holy mother of fail, enjoy having your methods redefined from scratch every time you instantiate an object.
Sorry, but I had to downvote because you used tinyurl (it triggered my downvote reflex). You should know reddit doesn't limit URL length.
Ha, serves me right for assuming! Anyway, the point is moot now - and I'm glad you're enjoying jQuery!
Sure, that's fine. I am just arguing against the magic number solution (which appears to be what Sephr was going for)
I called him out on this in the comments, but apparently you need to verbally fellate the guy before he will approve your comment.
As best I can tell most of the 'industry' is built on heresay, with some popular dogmas even published by luminaries such as Crockford ("dont use new, it's evil!"). Definitely interested in better reading suggestions assuming you have any.
Thanks for the link, quite a thoughts food. But I think speed is not everything, with javascript you always can fallback to native constructions bypassing a framework. More important how you actually do the everyday work with one or another tool.
This sounds interesting but the writing style put me off, with its seemingly random sprinkling of commas: &gt; It's the second line, which is the key. If you give a curried function, less arguments, then it expects, it will give you back, a function, which has been fed the arguments you gave it, and will accept the remaining ones
I saw crockford, in the URL, and was surprised, that someone whose writing, I had hitherto enjoyed, had made such egregious, and irritating, use of commas. I also found the narrative style, less to my taste, than other Crockford works, I have enjoyed. Only when I hit the title link, expecting to go back to the front page, did I discover, that it's a shadowed version, of http://www.svendtofte.com/code/curried_javascript/ . Now, I can understand, someone by whose name, I can presume, does not have English as their first language, having a poor understanding, of punctuation convenions .. but, why is this post mirrored, with no apparent attribution, nor editing, nor embellishment, rather than simply linked? SMELLS OF SHENANIGANS.
Hmm. At the bottom of the 'styled' page is this footer: &gt;The independent content producer refuses to die! jz &gt;The original page disappeared a couple of years ago. This is an unauthorized copy.
heresay = best practice, that's okay. but this is not even good practice. btw crockford said "not using new is evil" (has to do with what /this/ will be set to within the constructor).
on crockford's page this is linked in the outgoing-links section. afaikt the site was down and he mirrored it locally.
yeah, but it's a lot more fun to submit xss exploits as tinyurls
so i had to downvote you (Sephr)
oh also this http://www.reddit.com/r/ideasfortheadmins/comments/8z0vo/dont_allow_tinyurl_services_ie_replace_the/
I guess now that they dropped older Windows versions anyways they will put .NET under the JavaScript engine.
That's funny, i've got an magazine here on my desk with an ad on the back side, which says something like: "easy develop rich internet applications with Silverlight - Microsoft" And the guys who create that are fighting with IEs javascripts engine... LOL!
I don't think their Javascript performance will be good enough to port .NET to it...
Like search became strategic 10 years after google, like entering digital music market was strategic 6 years after itunes/ipod, like making a browser standards compliant... you know where I'm going with this
*Under* not *over*. What mitsuhiko is saying is that they'll re-implement javascript on the .Net runtime (à la IronPython or Rhino) (which would be a good idea, if only because it'd rid us of the shitty current engine, and might finally kill the COM-based DOM of Trident)
I was under the impression MS's web Office apps were going to be Silverlight apps...
It should have been 5+ years ago.
oh. so Microsoft is now going to support all the features of EcmaScript 4 they once opposed, since it makes large amounts of JS code much easier to maintain? Oh no that's right, we don't need modern language semantics in JavaScript. Only in C#. (As an aside, I wonder what's happening with script#..) 
It's funny, the ambiguity -- under can also refer to authority or auspices, in which case javascript would dominate over .NET, i.e., .NET would run in javascript.
That's a pretty weird interpretation though...
...but easily misoverstood.
I don't think the DLR has any support for the kind of fancy runtime type discovery or tracing that current generation JS engines make use of. The CLR's JIT compiles to native code hot IL methods that types were predetermined for, i.e. at compile time. I have no idea though, don't follow .NET much. I followed IronPython for a while and AFAIK it still does all its method dispatch, etc. at runtime.
"Javascript has never been really strategic for Microsoft" What? Perhaps the author and I don't agree on the meaning of 'strategic'?...
&gt; Microsoft is generally very good at squeezing performance out of very *unnecessarily* complicated software – if they have the incentive. Now they do fixed that for you what a load of speculation
I don't think matters much considering the performances of trident's js and DOM things can only improve. 
I can't see too many benefits to using server-side JS. The article claims it's easier to manipulate a page's DOM server-side and return it directly back to the user, but that seems like a waste of bandwidth. Furthermore, sending data back-and-forth between PHP/Ruby/insert-scripting-language-here and JavaScript is easy using [JSON](http://json.org) as a transmission format.
I always wondered why they didn't update regexes in JS to be less incomplete (no "dot matches all"???). At least there's a solution :)
Hi... I'm the person that wrote the plugin, I'm sorry you almost feel bad for me, let me assure you there is no reason for this, I'm fine, really... let me know if there is anything I can do for you :)
Great read. I learned a lot from it. Thanks
http://code.google.com/p/database-diagram/wiki/Introduction so does this :)
Slightly weird camera angle to say the least.
&gt;It looks like he's attempting to follow a genuinely original path; that is what we need more of - JavaScript libraries that tackle challenging problems in new and interesting ways. They don't look that original to me. Just glancing through the code I see method after method that look very... familiar. Let's see, * $ext = $extend in MooTools * $alias = Array.alias in MooTools * $eval = $exec in MooTools it goes on, I mean, look: function $try() { for (var i=0; i &lt; arguments.length; i++) { try { return arguments[i](); } catch(e) {} } }; This is exactly, verbatum the method found in MooTools. And I don't just mean that all these shortcuts are similar, even the name is the same ($try). They even have $E, a deprecated method from MooTools 1.1. I realize the author is saying that they are trying to take the best ideas from all the frameworks out there, but what they've really done is copy and paste the bits they like most and called it their own. No attribution or even a mention of where their inspiration came from. Totally cheap.
I understand your feelings, but you ain't right http://rightjs.org/credits
The main benefit is reusable code. Works on the front-end, works on the back-end. 
[jQuery.getScript() does not cache](http://jamazon.co.uk/web/2008/07/21/jquerygetscript-does-not-cache/)
Why would I use this over jQuery? Honest question.
depends on what you want. if you need something safe, with lots of docs, support, plugins etc.; then use jQuery, pragmatic and understandable choice. but if you are hungry for new fancy stuff, maybe interested in taking part in a new project, then you might try RightJS. It's not like a big serious opponent to jQuery, it's more for-fun thing.
sorry, missed the branch. my answer is below
There's a difference between being inspired by a library and copying portions of it outright. The thing is, the license (MIT) permits you to do so, so long as you retain that license *in the code*. Further, your credits page talks about taking *ideas* from other libraries, when clearly you've taken more than that. Again, the license permits that, but it's kind of cheap to say on the home page that people deserve libraries that don't make you ask WTF all the time and that Rightjs takes JavaScript to a whole new level by "taking the goods" from other libraries and "cleaning them up", and yet you've copied portions of those libraries wholesale without crediting them for their work. I agree with Resig that another JS framework helps everything move forward and maybe there are some good ideas in there that we all can learn from, but you make the argument that the other frameworks are somehow inadequate while at the same time copying their work without crediting it as such and respecting their licenses.
You are right, but you can't really take those things seriously when someone names his thing "the right javascript framework" and write on the first page "welcome to the paradise". But anyway, I agreed with you, that's my bad and I will put additional comments with credits where there was direct copypasting. Thanks for kicking me with that
btw, from mentioned by you, there's only the $eval function was taken from MooTools. things like $ext and $try it's more influence of the the first versions of Prototype, $E i'm using for ages, the name is just obvious. $alias was written out of hands by myself. The names and functionality were written in more or less common way with MooTools, Prototype, Python, Ruby, etc., just to follow the less surprise principle and keep the thing close to the standards.
Are you in any way involved in the project? If you are you should add a simple "About" or "Features" link to the website. I hate software projects where I have to deduce what it actually is and does and I am sure I am not alone in that.
easier fix: jquery
If I were doing server-side Javascript, I'd use [node](http://github.com/ry/node/tree/master).
Wait... since when was innerText a web standard? textContent is the standard, as defined here: http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-textContent AFAIK, innerText is an IE-ism that other browsers copied in order to remain compatible.
he updated the post accordingly
Sounds like someone has been working with IE8 quite a bit... how is it like? Does it fix old DOM issues, but introduce new things (like this)?
Much respect to him for that.
It's still a bad post. There is not much to it apart from one piece of information and he got that wrong. We should be downvoting stuff like this.
WTF: `document.getElementsByTagName("body")[0].innerText` And why is this a "Firefox fix", IE is the browser that doesn't support standards. I have implemented [textContent in IE8+][1] (which is a more elegant fix if you don't have to worry about &lt;= IE7. [1]: http://eligrey.com/blog/post/textcontent-in-ie8
Don't go adding methods to JavaScript prototypes in a browser, even if you can. Don't make "print" a method on "String" in any programming language.
I think it's a "Firefox fix" because the original author was under the impression that innerText was the DOM standard. He was wrong and fixed it. Not sure where he would have gotten that info from though...
Found it. He must have read this. http://whoisron.blogspot.com/2008/06/javascript-textcontent-vs-innertext.html It even links to the same 'fix' site.
&gt;This is the simplest, easiest way to get all of your JavaScript onto the page without affecting the user experience. I disagree, the simplest and easiest way to accomplish this is to put all your javascript at the bottom of the document.
Agreed. And also... &gt; By having just two files, you eliminate a large point of concern over which file is downloaded and executed first as well as eliminating unnecessary HTTP requests. Is there some browser out there which doesn't execute JS from top to bottom?
Of course this isn't a problem if you just request JSON with XDRs.
JSONP can go cross domain, for what that's worth.
I believe that all browsers allow you to peek inside a script tag. `.text` works fine, as does `.innerHTML`. What if you returned your script as a comment -- or change the script type to `text/x-do-not-execute` and just call `eval` on it? No JavaScript objects will be created and it should be garbage collected fine when you remove it. Or does that go against the spirit of JSONP?
It seems you don't understand what XDR is. XDR = Cross-domain request
That is true. I was in a hurry and read XHR. I retract my statement.
&lt;script type="text/x-no-exec" src="fetchme.notjs"&gt;&lt;/script&gt; will not actually fetch anything, though. People that use those hacks to use home-made scripting languages in the browser have to parse those script tags and fetch them themselves, usually over XHR, with all the limitations that entails. 
How do you do that?
Cross-domain `XMLHttpRequest`, IE's, `XDomainRequest`, and `pmxdr` ("`postMessage` XDR") all do that.
Thanks for the response. To be clear (for others), XDR is fairly new and is only available in a minority of active browsers. Perhaps someone else can list the browsers that support it?
pmxdr is supported by all recent browsers.
Sure, recent browsers. But *most* browsers don't support it (IE6/7): http://eligrey.com/blog/projects/pmxdr I'd never heard of pmxdr until you mentioned it. :) The point is, that most of us are still stuck with JSONP for real-world stuff. Anyway, cheers for brining up XDR. It looks like the way forward.
long polling still seems a lot smarter than "smart polling".
Long polling isn't free: server CPU starts to max out quite quickly after a few 10k's active connections.
It's not free but it's cheaper than doing 10 or 20 times the amount of short requests instead. the latency is a lot better (something this "smart js polling" makes even worse!).
I don't like it because it's a abuse of the browser and the web-server. The browser can live with it though, so if you really need to do this, a custom server may be in order.
server CPU is not necessarily effected, for example in jetty you can easily suspend request processing: "threads can be allocated to connections only when requests are being processed" http://docs.codehaus.org/display/JETTY/Continuations
this is a periodical updater as seen in prototype http://www.prototypejs.org/api/ajax/periodicalUpdater
because you prefer the style and weight of this? 2 years ago people were saying why use jquery over protoype?
Anyone else notice that the image in the article is actually PHP code not Javascript?
Yeah, that confused me for about 2 seconds.
What you actually need to know about javascript scope: it's lexical, it's function-based (functions create scopes, other statements don't), all scripts live in the same, global, root scope. *Always* use `var` to create new variables, even in the global scope.
Downmodded for being a mishmash of cargo-cult knowledge.
That's a good write-up of the nightmares of debugging IE, and I've certainly run into the stray comma issue before. One thing to note is that IE8's built-in JS debugger is actually not half-bad. I don't think this analysis applies to IE8's debugger at all; it sends out the first error and it actually has a debugging environment (so you can not only get to the correct place in the JS file but also step through it). If only they would retroactively add this to IE6 and 7...
I think you missed the punchline. (It's in the comments).
Yeah, too bad IE8 usually works with minimal changes to the javascript (in my experience at least). The real ugly stuff only comes up in IE6, which really needs a debugger indeed. (Preferably a firebug port) Though on the other hand, maybe not having a debugger will lead to not supporting it being acceptable more quickly.
I didn't miss that at all... I just wanted to comment on the article itself.
My mom taught you something about JS? Weird...
You don't have to have scripts denied by default to get the XSS protection.
How can a JS framework be "right" when it adds a bunch of stuff to the prototype of base types??
the name is a filter to exclude people without sense of humor
LOL. best answer.
Generally if you want an object to know about its creator, you have to tell it in some way. The best approach is probably to take the target of the event that was dispatched (presuming you're using events). Say like: function update(e) { // setup code if (e.target) targ = e.target; else if (e.srcElement) targ = e.target; // targ is now the thing that threw the event. // Do something code } Yeah I know. ten kinds of broken, but hopefully gets you in the right area. Probably won't work right on opera or safari, but the general idea is sound. 
Or, hey, you could use EcmaScript 4, which has optional type hinting all over the place. Except they killed it dead. Bastards. 
this dudes site is garbage!!!
Read up on: 1. Unobtrusive JS (event handling without inline code) 2. Callbacks/closures (The former generally implies the latter.)
Step one, read: &gt; 1. $(document).ready () All The Way Gee, ya THINK?? Step two, realize this article is completely not worth continuing to read. And besides, it should be $(function(){}) anyway.
Sorry I can only upvote you once (A little help, fellow redditors?) Javascript was my first programming language and I quickly 'graduated' to Java. I love Java, I make my living with it, and I have a couple of certs. I had, I will confess, looked at JavaScript as too simple for anything other than validation and non-compliant with basic MVC. I've spent the last couple of hours reading up on some of the newer concepts you've mentioned. I wonder what else I've been wrong about. 
It has grown up a bit. You'll also want to look at: * Object literals (and why to use those for dictionaries/hashmaps instead of Array) * Currying and binding * JS as a compiler (to run other languages in-browser) -- see processing.js * Higher-order array functions, like map and reduce. Powerful shit. IE doesn't have them, but you can drop in their implementations at the top of your file if you need to. Some gotchas you may not have encountered yet: * There is a (stupid) distinction between objects and literals in the case of numbers, booleans, dates, strings, and possibly some other built-ins. Play with `new Number(5)` vs. `Number(5)` (or just 5). Use `typeof` and `someVar.constructor`, for instance. * Always use === instead of ==. The latter is not transitive: `false` == `0` == `"0"`, but `false` != `"0"` * Be careful about `if(foo)` where `foo` is not a boolean. Learn about "true and false values", which relates to the above point. Also, debugging is easier with FireBug.
I'm gonna recommend that the OP learn the basics first. Adding an abstraction layer on top of something you don't quite understand is not going to help with debugging... Alternative reason for recommendation: Suffer like I did, dammit!
&gt; I had, I will confess, looked at JavaScript as too simple for anything other than validation and non-compliant with basic MVC. Know what's funny? I enjoy using JS because it helps me develop MVC-oriented code. Look at it this way: * Model: DOM * View: CSS * Controller: JS In fact, Mozilla Firefox's interface is built almost entirely in that manner. (The system is called XUL.) Of course, when you are doing extensive data manipulation, you use JS data structures for the model. And the markup you send to the browser is really the basis of the View: The DOM can function as either Model or View, depending on what you are doing. It's kind of brilliant, really, to have a separate language for each concern.
step 1. don't write jquery code.
&gt; Step one: Indent your code. FTFY--It's amazing how some people don't ever indent their code. Edit/Update: I read the rest of the examples and this one is definitely invalid JavaScript: $(document).ready (function () { if ('body').hasClass ('home') { // home page code } else if ('body').hasClass ('blog') { // blog code } // and so on }); I think the author thinks strings need to be encapsulated in parenthesis.
 .11. Don't arbitrarily prefix all your variables with useless sigils.
Since you're asking, [A memoizing Y combinator in Javascript](http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/) 
I believe this is [calmE](http://www.flapjax-lang.org/docs/#calmE)
Um you realize you can attach methods and data to elements without jQuery right?
Why not? jQuery is a really good library that makes DOM manipulations painless.
just being snarky. also, jmho, but most javascript libraries seem to cater to people adding superfluous eye-candy to their websites.
 function update (e) { var target = e.target || e.srcElement; } Would also function the same, you also (i'm guessing) did the second else if bit wrong, as targ should be e.srcElement not e.target again.
I wasn't shooting for total accuracy here, just a general idea.
Chris Bryant said that they are going to support IE, Firefox and Safari. Does that really mean that Office won't work in Chrome?
via:http://alex.dojotoolkit.org/2009/08/js-1-8-function-expressions-the-opposite-of-good/ JS 1.8 Function Expressions: The Opposite of “Good”
This is quite silly. Just make a keybinding in your editor to paste the word "function" at the cursor. For heaven's sake, this is nowhere as bad as Java.
It seems that everyone wants JS to grow, but they all want it to grow away from JS (or C-styled)
Wait a second. He wrote that post because he doesn't like writing the word "function"? His solution saves him only 7 or 8 characters each time he writes a function, and makes the code less readable (to me at least). Edit: One of the comments put it this way: &gt; Really? The strings “return” and “function” are keeping us up at night?
In [my world](http://screamingdonkey.hurlant.com/demo/evalui/ "click on Run in the UI, or just view the source and ponder what the &lt;script type=application/ecmascript;version=4&gt; tag does"), function declarations can look like this: &gt; function $(e:String) document.getElementById(e); Alas my world has been de-standardized by heartless committees. 
That doesn't make the script load any faster. &gt; JavaScript is different. Unlike nearly every other language, the terseness of JavaScript code is a key determinant in the performance of a web application. The bigger your scripts, the slower your app loads. It’s as simple as that. 
Yep. Even in Scheme,from which JS partway descended has a ``lambda`` special form and *no one* ever argues that it is "too verbose" although anonymous functions are quite common there. Ok, one could say that ``define`` can also implicitly create lambdas and bind them to a name, but oftentimes I use both ``define`` + ``lambda`` to create named functions, because I don't like the special casing in ``define`` that much.
The suspect that the word "function" is hardly what slows your script down... A few months ago at work I decided to take a look and see if we could do away with our JavaScript localization script, which is literally just a huge object (key --&gt; string). Before I went through the effort of removing it, I tested it out. We had about 20,000 strings; I thought this was greatly affecting performance, but the amount of time it took to load this (not counting bandwidth) was *a few milliseconds*. Removal of the localization script wouldn't actually speed things up at all, not in comparison to the speed of the [YUI menus](http://developer.yahoo.com/yui/menu/) we use (which can take a few hundred milliseconds at worst). Of course, I wasn't testing functions, I was testing a huge object. Perhaps in a huge script, "function" vs. "#" would really make a difference - but I'd put my money on not.
Looking at the slides, I think the talk would be much more informative than this write-up. I think the write-up falsely focuses a bit too much on some points (global vs. local look-up gives you very minimal speed gains, #2 is true of all languages).
It would be good to see a benchmark comparing for, while, and reverse while loops. I almost never use while loops, favouring for each and for.
When will people learn that a reverse loop is amateurish?
&gt; Perhaps in a huge script, "function" vs. "#" would really make a difference - but I'd put my money on not. Yes, I think you're probably right. You would have to have a lot of function definitions to make much of a difference to the overall script size. That said, I prefer Perl's `sub` or Python/Ruby's `def`. For something as common as declaring a subroutine/function/lambda, short is sweet (although I think `#` is too short and unnecessarily cryptic). 
[This](http://ajaxian.com/archives/fast-loops-in-js) is a pretty good test suite.
Editor snippets and gzip to reduce typing and filesize.
How on earth is the license for your JS library related to your Java back-end?
Licensing issues at @40m not to miss.
I dont quite understand the final example because of the lightbulb, I hope the author isn't doing items[i] to add to an array. Either way, the whole $.map(arr, fn) syntax seems a bit much...I thought that jQuery was all about simplicity. Here is the same thing in MooTools var y = [1,2,3].map(function(x){ return x * 2; }); console.log(y);
&gt; So I added one more line to my license, which was: "The Software should be used for Good, not Evil." I thought I'd done my job. About once a year I'll get a letter from a crank who says: "I should have a right to use it for evil!"
A Statement Followed By a Question Separated By a Colon: An Effective Journalistic Technique?
What a horrible article. "I don't like Javascript because it doesn't come with a fancy GUI to automatically refactor for me." Wow.
He does the exact same thing: var doubled = $.map(arr, function(item) { return item * 2; }); alert(doubled); I guess you can make it look similar to yours like this: var y = $.map([1,2,3],function(x){ return x* 2; }); console.log(y); Instead of the arr being on the outside, it's passed in as the first parameter, that's the only difference.
I like that map is a method of Array there in your example...my personal tastes, not critical to functionality.
That's not the only difference. I realize now what i didnt before -- map is prototyped to Array object in MooTools where it is apart of the jQuery ($) object in jQuery. That is a huge difference and I dont mind the prototyping
make the paddle faster so you can catch up when js decides it wants to go to sleep.
It's great! Well done. It's useful when the ball changes its bounce off angle based on where it hits the paddle. This allows for more control.
I sped it up a bit, seems to help some.
Paddle is definitely too slow. Can't catch the ball if it's bounced a direction you weren't expecting. Mouse control? As I recall, most breakouts have paddle control so you can quickly and accurately position it. 
bravo. golfclap. Goes "boom" in IE 8. Makes FFx 3.5 cry, but it's playable. Chrome has no problems with it though (minor formatting issue on the welcome screen). Don't have Opera or Safari on this machine, so no comparison to offer there.
I admit I developed it in Opera then got it working in Firefox. I am stuck with IE6 since I have to test with it for work, and I didn't really bother with it on that.
On Safari for PC it renders similar to Firefox but the "click space to play" sits farther up. (Opera the text is in the box, Firefox 3.5 the text is just below the border, and in Safari the text straddles the border.) The paddle is also much more responsive with Safari. When playing in safari the ball got caught between the paddle and the wall and then disappeared. Clicking on the space bar didn't bring it back, I had to reload. I didn't play the game long enough in any browser to tell if this was a game quirk or a browser specific quirk. 
I'm going to d/l Safari and play with it. I have it at work but not on this pc. I think it's a game quirk caused by an attempt to speed up the paddle by request without enough testing. Thanks for reminding me about Safari. 
Paddle is too slow, ball is too fast.
The start with, the game is really good. Congrats :-) But instead of using a huge library like jQuery you should write your custom functions. You're really using just a small portion of a really versatile library. And you can just copy some of the relevant functions or write them yourself, drawing inspiration from the jQuery implementation. Also, please watch this video: http://www.youtube.com/watch?v=mHtdZgou0qU There are some really good tips. You've done a good job of designing the classes for your application like a separate sprite class where you handle all the sprite calculations. But this kind of game development is more suited for C++ where the compiler optimizes all of your lookups for you. Whereas here, each time you call this.titlePage.update() there are 3 lookups which could have been reduced to one with a simple trick. I can't even think of the bother the JS engine has to put up with while looking at a statement like this.actors[this.paddle_id].collide( this.actors[this.right_id] ). You can do better. You can optimize for speed and that's what you should be doing when you're developing games with JavaScript to be run in a browser window. Also, your interactions with the DOM seem to create too many reflows. You could draw the whole game window in a DocumentFragment and than attach the fragment into the document, you will triggering just 2 reflows (one for clearing the old scene and one for attaching a new scene). You'll see the difference. Keep up the good work.
Don't use setInterval. Use setTimeout(loop, 1) and compare the last timestamp of the game loop with the current time. You will get smoother animation that way. Now that's feedback. ;)
I do web development, and game development in my spare time. I literally did this to kind of 'play' with Jquery. Your last part about the DOM is very interesting! I may even have to do a non jquery rewrite now. Thanks for the feedback!
I do that in the java version, I don't know why I didn't think to do it in the javascript version. Thanks for the feedback!
If the ball hits two blocks at the same time, it doesn't change directions. I'm guessing that when the ball hits the top or bottom of a block, some direction variable is flipped (1, -1 or true, false) and if it hits two at the same time, the y direction never actually changes. Maybe you could add a bit of a timer so that if it hits two blocks on the same side within some small amount of time, the direction doesn't change the second time. But other than that, congrats, you made a nice game :)
nice game... I managed to loose the ball on the edge my first game though; didn't loose a life, but couldn't do anything either
Cool game, its kinda tough and somehow I managed to get the ball offscreen http://imgur.com/bTbYc.png
I don't think optimization is the problem here. Premature optimization is the woe of the computing industry, too many developers get a hard-on for optimization when it's not necessary. Fix some gameplay aspects 1) Paddle is too slow, needs to be faster then the ball so that it isn't impossible to catch the ball in situations where the ball is travelling faster then the paddle. 2) Modify the angle of the ball by using distance from the center of paddle, incorporate incoming angle slightly if you wish as well, going only at 45 degree angles is a bit annoying. Treat targets like they are rectangular and the paddle like it's oval. Without jquery I could write this in about 20 minutes, and it would probably be way faster. Although having a animation library for the block fade-outs would be useful, but I could hard code a animation easily. Thing is, way faster wouldn't really translate anything to the end user. I don't personally know jquery, I use dojo and I know dojo inside out, but to really learn my version of dojo it took years. I assume it's the same for jquery and if you want to invest in a detailed knowledge of it, you should use every feature possible regardless of bloat. Only start worrying about this optimization bullshit when either you or someone else (client) worries about it being slow, and then optimize in priority of biggest bottleneck down. Optimization is seriously a endless task and although very enjoyable should be avoided. It's the forbidden fruit of software development. The heroin of the computer industry, the gains make you feel good, but they come at the cost of added complexity and time, while driving you away from the original goal which should be a healthy clean codebase. Worry about optimization once you have good software, cause likely the process of optimization will take you to dark places.
Small problem: At least in a chrome dev build, you can push a ball off the play area with the side of your paddle.
The game seems to lock up when you hit any edge with the paddle and keep pressing that direction. Firefox 3.5.2/WinXP.
Great work man... One suggestion: Make the paddle to move as the mouse moves. That way you wont have to make intervals for the paddle animation and the game will run smoother everywhere.
I also just did this. Knocked it out through the right side.
**Bug!** If you pin the red ball against the left wall with the side of the paddle the ball disappears and the game is still on. Just paddling around the place with no end in sight. That's a paddlin'. //Eddit: seems others noticed this also. //Eddit2: On the second level ball and paddle slow down. Then half way through the level speed up.
Recommendations: 1. Ball changes angle based on where it hits the paddle. 2. Instead of a fixed number of lives, have a count of 'deaths'. 3. More variety, randomized or designed boards. 4. More eye candy i.e. bejeweled
I've no problems playing it in Firefox 3.5
When I played it on a machine with more horsepower, it was just fine in FFx 3.5. However, on my laptop it was a little bit "laggy" (but playable) in FFx, whereas it was zippy fine on the same machine under the same load in Chrome.
Man, I wanna attend this...
It's a very bad idea to implement different standard features under the same name, such as `some` and `every`. They take callbacks, not strings.
the original functionality is still available, you can send any callbacks too.
My guess: final, actual assigment is deferred until the statement ends. So it works like this: var r = 'a'; // r == 'a' r += 'b'; // r ('a') concatenated with 'b' yields 'ab', but r is not assigned to yet. r += r; // r (still 'a') concatenated with the returned value 'ab' yields 'aab'. r still unchanged. r += r; // r (still 'a') concatenated with the returned value 'aab' yields 'aaab'. r still unchanged. // now r is finally assigned 'aaab'. Where in the standard is this defined? More subjective: is it right to do it this way?
Hmm that's interesting. Tested it out in C++ and it resulted in "abababab" and C# resulted in "aaab". It's probably more of an order of operations thing than anything else. My guess is that C#/Javascript convert it to something like (which certainly seems wrong): r = "a" + (r="a" + (r="a" + "b")) and C++/PHP do something like: r = r + (r=r + (r=r + "b")) so when it gets evaluated, you get: r = r + (r=r + (r="ab")) =&gt; r = r + (r="ab" + "ab") =&gt; r = r + (r="abab") =&gt; r = "abab" + "abab" =&gt; r = "abababab" Interesting though. 
Pssh Standards in Javascript? Are you crazy! It seems to me like a nuance of compilation/evaluation of the original source. 
Serves you right for writing gnarly code.
Maybe an issue with static substitution on the right hand side? I just noticed yesterday a new bit of Javascript optimization (in Firefox, anyway): function test() { return 1+1; } console.log( test.toSource() ); // yields function test() {return 2;} So I see what you mean; perhaps the browser is too clever for its own good and shoving in "a" for all occurrences of r. That wouldn't surprise me in C#, either.
yeah operator precedence was what I first thought too, but looking at these articles on [javascript operator precedence](http://www.codehouse.com/javascript/precedence/) and [PHP operator precedence](http://us3.php.net/manual/en/language.operators.precedence.php) it seems that = and += are at the same level in both languages, and both are right-associative. So I don't know why the behaviour is different. edit: behaves the same in IE and firefox. just fyi.
cool. 'Gonna try it out
I tried this in chrome and it gave a syntax error, it should be equivolent var [asdf,asdf2] = (function(){ return [1,2];})();
Another thing I didn't know you could do in JS var x = (function(){return 1})(); x = 1? too lazy to try/ 
Yeah...I only checked in Firefox 3.5.2. Doesn't seem to work in WebKit browsers like Chrome or Safari. Not sure if this should be considered a bug in Firefox or a bug in Webkit. Anyone know a bit more about ECMAScript that can chime in?
 var r = 'a'; r += r += r += 'b'; JS will move from the right to left in this case, so you are doing this. * '' &lt;-- {Empty String} * 'b' * 'a' + 'b' = 'ab' * 'a' + 'ab' = 'aab' * 'a' + 'aab' = 'aaab' JS will not parse the whole statement like PHP/C will it works on the current situation only.
Actually, it is the "more correct" way to do this. It is doing exactly what your telling it to, and that is add r to the string 'b', not add r to 'b' then duplicate its self.
Yes, that'll work. You're wrapping a function inside of an anonymous one and calling it. You can carry that trickery even further and create your own (slow) crazy loop constructs: var str = "hello world"; // starting small... for (var i = 0; (str[i] != 'd'); i++) { alert(str[i]); } // and now we've gone off the deep end for (var i = 0; ((function(letter) { alert(letter); return (str[i]) ? ((letter == 'd') ? false : true) : false; })(str[i])); i++) { } 
huh.... nice to know
This is destructuring assignment, which was introduced in JavaScript 1.7 along with array comprehensions, generators, and other cool features. That means it will work in Firefox 2+. [https://developer.mozilla.org/en/New\_in\_JavaScript_1.7](https://developer.mozilla.org/en/New_in_JavaScript_1.7) edit:formatting
This is [JavaScript 1.7 destructuring][1]. Bet you didn't know you could do this with object destructuring (it makes making functions that accept options objects much easier): function foo([a, b], {c:d, e}) { return a+b+d+e; } foo([1, 2], {"c":3, "e":4}) === 10; Real-world example: function Person( { gender, name:[firstName, lastName, middleName], age, billing:{creditcard:[cardType, cardNumber], shippingAddress} } ) { // no need to parse options, handle them here } Btw, no "JavaScript" engines other than SpiderMonkey and Rhino actually run JavaScript. All other "JavaScript" engines run ECMAScript, which is different (though Opera does support limited array destructuring assignment stuff like `[a, b] = [b, a]`). [1]: https://developer.mozilla.org/en/New_in_JavaScript_1.7
Except += should replace the value in r and then return the combined value?
That declares an anonymous function that returns 1, then calls it and assigns the returned value (1) to x.
Anyone know if/when webkit will support newer versions of JavaScript?
I used to go crazy-go-nuts with this kind of thing in Flash Actionscript, which, like most Javascripts was really ECMAScript (and thus it would usually work out in a browser as well). I would make anonymous functions inside of arrays that used values in other parts of the arrays in which they were declared, and that's just the beginning. It was all just for the science. I was a wild man. The world was mine.
No, a += b should add the value of a to b. It is supposed to be the same as this. var a = 5; a *= 4; // a ~===~ 20 (Actually) var a = 5; a *= 4; if ((a - 20.0) &lt; 0.00001) { document.write("Equal"); } This is because of the stupid use of IEEE floating point numbers...
http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf The standard is actually pretty detailed and unambiguous, accounting for the relatively high compatibility level between different JavaScript engines, which is why the code given here is guaranteed to return the same result in every JavaScript engine, ever. 
page 60 of the [ecma-262 spec](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf): &gt; 11.13.2 Compound Assignment ( op= ) &gt; The production AssignmentExpression : LeftHandSideExpression @ = AssignmentExpression, where @ represents one of the operators indicated above, is evaluated as follows: &gt; 1. Evaluate LeftHandSideExpression. &gt; 2. Call GetValue(Result(1)). &gt; 3. Evaluate AssignmentExpression. &gt; 4. Call GetValue(Result(3)). &gt; 5. Apply operator @ to Result(2) and Result(4). &gt; 6. Call PutValue(Result(1), Result(5)). &gt; 7. Return Result(5). 
When it becomes a ratified ecmascript standard, most likely. Ecmascript 4 died a painful death, but Ecmascript 5 looks on track. It probably doesn't have any of the features you're thinking about, but at least they've agreed to update the spec, so who knows what'll happen after that. 
Being 40% evil myself, I find those licenses arbitrarily restrictive. 
There is no equivalent in C. Perhaps you're thinking of C++, an entirely distinct language?
Add the value then assign it to a in a single statement. And no, in your example you used integers, so no need to deal with floating point nonsense:)
All numbers in JS are floating point.
Yep, that is how it is *supposed* to be done. Also, JS uses IEEE floating point notation which is utterly stupid. (5 is really 5.00000000000000013414)
&gt; EDIT: Does not work in WebKit browers. Or Opera, or Internet Explorer, … In fact, it's simpler to say in which browsers it does work: browsers running on gecko 1.8.1 or superior (Firefox 2.0, Netscape 9, Seamonkey 1.1, Flock 1.0, Songbird 0.5, K-Meleon 1.1, Camino 1.6.5)
The 1.x where x&gt;5, never. It supports some array methods of 1.6 natively (though not the generics I think), js 1.6, 1.7 and 1.8 are basically proprietary Mozilla extensions to the standard. So they might support some part if it's useful for them, but overall it's unlikely you'll ever see let expressions in Webkit or Opera.
&gt; Not sure if this should be considered a bug in Firefox or a bug in Webkit. It's a proprietary extension to Javascript. So it's neither.
To make it clearer what this means: step 2 occurs ("get the value of r") occurs *before* the recursion into evaluating the RHS, so essentially it starts by putting a lot of 'a's on the stack, overwriting r at the end of each recursive step, but using the stored 'a' instead of the value now stored in r for step 5. I don't think this is quite what any of the other posters described, but can't think of some code that would make the difference observable. Given C++'s storage model, its behaviour seems more obviously right for C++. PHP doesn't really have a storage model, so any behaviour can be expected. C# and ecmascript must have a rationale for evaluating the LHS before the RHS, but it's not obvious to me right now.
I know what floating point is, I just didn't know JS didn't have an integer type.
Chrome only uses Webkit for rendering. Javascript is done with V8.
I bet you don't know anything about ecmascript
but the [original article](http://www.nczonline.net/blog/2009/07/28/the-best-way-to-load-external-javascript/) he's basing his blog post on is better.
That, is hot. 
That's nice, but useless if you want to target 99% of browsers. All in all, it seems like a really poor cheap knock-off to a really nice pattern matching system that you would find in something like ML or Haskell.
I cannot wait until 2016 when I can use this feature *and* support Internet Explorer!
Really? It would be nice if you could show us some kind of a proof.
http://msdn.microsoft.com/en-us/library/ms537658%28VS.85%29.aspx It does look suspiciously similar. 
This is horribly silly... loading a java applet?? The overhead on that step alone isn't worth it. Why can't you just split your function in two, and set the second half to start on a setTimeout?
Comma, is not.
What were u thinking. You can set time out and the function which needs to be executed will run later. I hope u dont end up replacing the setInterval with your applet. :P 
No. No. No. No. No. This is not the way to do it. Javascript only has one thread, if you do this you stop all the Javascript on your page until your applet gets back. As James says make two functions, the first calling the second with setTimeout(). 
hmmm....ok just good FYI... 
Go ahead, steal my source. I wanted to share this hack with all of you.
well done. Im doing something similar for a mobile project of mine, however I'm using BaseJS instead of jQuery. Nicely done though :)
Very weird. Reddit says there are 2 comments in here, but I can see only my own. Edit: Yes, now it says there are 3. :)
what about the thousands of IE7s and IE6s that stand for averagely the %50 of the internet?
Thanks, I appreciate it! Maybe you can at least steal the idea from what I posted... how do you like BaseJS? Any reason you've chosen it over jQuery?
Oh i'm using BaseJS because it's a mobile phone browser app. jQuery is too bulky for mobile browser cache.
Opera never gets any love.
I sort of don't love how this is basically 45 lines of code sans explanation buried under about 45 Google ads.
WTF is with the "All Browser,Google Chrome,Internet Explorer,Safari,Firefox" nonsense? `document.cookie` is the same for every single browser that isn't IE version 1.
Copied straight from javascript.irt.org and the 90s.
Here's an even bigger mindfrick: function f() { return /a/g.test('a'); } f() --&gt; true f() --&gt; false f() --&gt; true Basically, regexes with the global flag carry state about where they last matched (see `r.lastIndex`) and pick up from there. On top of that, regex literals only create one object per code site.
Yeah, it's the lastIndex property. Some browsers respect it and some don't. If you are using reg.test() it's best not to set the global flag.
Yeah, or do `r.exec('\\')` instead. (Or even `"\\".match(r)`.)
I agree. I always thought it would be nice to have like a "let" expression for assigning stuff to variables with pattern matching. something like: let [foo, bar, _] = returnSomeStuff(); or even let { 'somekey': value, _ } = returnSomeStuff(); alert(value); There's even function pattern matching that can be done in JavaScript. This should work: /xyz/.test(function() {xyz;}); //true So why not just add this thing? I know Firefox has the let keyword taken for defining variables with block scope (instead of the less proper function scope 'var' has). EDIT: should have read the comment below. This concept could be pushed further I think.
It's not an irregularity. RegExp is stateful when you set the "g" flag. On your first run, it matches, so it returns true, but now lastIndex is set to 2. The next time you run it, since lastIndex is the length of the string, and the RegExp doesn't match the empty string, it returns false and resets the lastIndex to 0. Now when you test again, it works like the first time you ran it. I admit it's weird, but not incorrect. Read more about it here: [https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/RegExp/LastIndex](https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/RegExp/LastIndex) http://stackoverflow.com/questions/894696/why-is-the-javascript-regexp-test-method-behaving-as-a-toggle
 I pretty much don't have much hope for JavaScript for becoming a really good language. Instead, I'm hoping the next wave of programming languages will focus on compiling and targeting existing languages and runtimes. This isn't new, as LISP programmers have been doing this for decades. However, it's nice to see this type of reflection finding its way into languages like C#, which supports reflection for expressions and enables you to write C# code that can be translated into SQL (LINQ to SQL).
Thank you, that explains it. I'm no sure I agree with it, but that it explains it.
It does seem to cause a lot more problems than it solves, I've seen this sort of confusion happen a lot... however, there are some neat uses of lastIndex. For example, you can use [RegExp.exec()](https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/RegExp/exec) to repeatedly search and capture the same pattern over and over again in a string.
On the contrary, `exec` works just the same as `test`, and this behavior (`lastIndex` and the global flag) is part of the ECMAScript spec and is the same on all browsers. As rkcr explains, this is by design, though a little alarming at first; basically use the 'g' flag with care.
Sometimes in languages that have objects (read: most of them), calling a method on an instance of an object changes it. :P
*Deleted comment*: Apparently they also have condescending douchebags anywhere you can find a textbox on the internet, too.
Yes. Those arrogant assholes who understand object instances.
I usually don't define the functions in the return, rather define them in the body of "Connector" and then put "init()" (just the method name) in the return. I think this leads to cleaner coding.
This is a nifty hack, but in general I've found private methods &amp; values aren't all that useful for two reasons: 1. Debuggability - they don't show up in Firebug, you can't easily call or inspect them. 2. Testability - there's no way to run a unit test *inside* the closure that creates the object, so there's no way to test your private methods. Also, the way you've got it setup here creates new closures for *all* methods (both public and private) with each new object. This wastes quite a bit of memory; that's what the prototype system is for. Instead, I usually just use "private by convention" values and methods: prefix their names with an underscore, and then don't call anything that starts with an underscore outside the class definition. ["We're all consenting adults here."](http://mail.python.org/pipermail/tutor/2003-October/025932.html)
It's rather insulting that "Private" was included in Java and C++. Using a naming convention like your underscore prefix is for adults that can be trusted. Forcing a programming adult with 'private' is very condescending. In the same way a programmer should not use global variables everywhere, we should be disciplined enough not to go accessing private data! I also notice that Java and C++ don't have a limit on the number of global variables you can use - which would be in the same forced spirit as private methods/functions/attributes. So why isn't it the same for private data?
The only trick is that sometimes you're not working with "adult" programmers. If you have to expose your code to amateurs, preventing them from calling your String concatenation helper function or whatever is the safer thing to do, because you may need to make breaking changes to it someday and some programmers are dumb enough to depend on something like that. Just to be clear: I never hide functionality. If a class needs to do something, anyone can do it. However, if I have a function that I've pulled out for readability/maintainability, I don't put it in a public scope unless it exposes functionality that would otherwise be unavailable. I guess I'm saying there's a difference between: "we're consenting adults, you can come into my house if you need to" and "we're consenting adults, I'm tearing down my walls so you can see me taking a shower."
i don't like having to call the init constructor manually though. It breaks convention and generally makes things less readable.
I'm a big fan of that approach, for a few additional reasons: - you can pass method references around without worrying that they'll break because you didn't "bind" them to an instance. - no "this" keywords repeated all over your code. However, there's one huge downside for all this comfort: - It's slower and it uses more memory. Another redditor once did some quick benchmarks, and it's no photo finish. An object defined through the prototype object will usually have a tiny constructor, and no closure needs to be created for each instance. My own rule for this now is: - if you only create a few instances of that object, the closure-based class definition will be just fine, more comfortable, more powerful, etc. - if you create a whole lot of instances, stick to prototypes. Deal with the this.that() and the method binding. It's worth it. 
The code in the post actually creates a singleton, which is different than an object in the traditional sense. var Connector = function() { ... }(); This line executes the function body immediately and assigns the value of the return statement to Connector, meaning a singleton is created. The proper way to create an actual class/object relationship is as follows: var Connector = function() { ... }; // the function isn't executed upon assignment var myConnector = new Connector(); // instead it's executed when the actual object is created The post does properly describe how to create private/public variables, though the need for them is often pretty dubious imo.
The issue with private by convention is that it leaves a lot of gronk all around the APIs that you end up creating. Your code ends up not being well encapsulated because it does have all these extraneous variables that are not part of the API you are trying to provide. When you are debugging you generally don't want to see those private variables - they should be abstracted away. However if you create an object inside your closure called "private" and put those variables on it, it becomes pretty trivial to see all your private data. Secondly, when it comes to testability, you shouldn't be testing the actual innards of your code. Test-Driven Development says that you should be testing to do something, then accomplishing that in your code. Thus the only thing that is being tested is your API. Anything inside ought not really need to be tested - you can put asserts in if you need to, but if it needs to be unit tested, it probably ought not be private in the first place! 
This is all common sense. Anybody who has ever studied object oriented programming in JavaScript would already be very familiar with this method. Just look at the source of ANY major JS framework.
There is nothing wrong with hiding functionality! If you have a function that has to do something big, literate coding says that you ought to make it as simple as possible from a macro view, and break everything up into small, easy to understand well named components that are perhaps reusable with other functions in the class. Those sub-procedures are not relevant to the user of the function and should be encapsulated. For example, I always try to put the processing function of a map statement into its own named variable. There is no reason that the caller needs to know about it!
You missed the point. var Connector = function () {...; return function () { ... };}(); var myConnector = new Connector(); The function call can return the class, not just an instance of it.
&gt; Your code ends up not being well encapsulated because it does have all these extraneous variables that are not part of the API you are trying to provide. Whatever generates your API documentation needs to be aware of the private convention, whether it's @private JSDoc tags or a leading underscore. It's generally trivially easy to make it so, though. If people have to dig through source code to read the API, your code won't be well-encapsulated anyway, and it's just as easy for them to ignore all methods that start with an underscore as it is to ignore all closures defined in a constructor. Probably easier. &gt; When you are debugging you generally don't want to see those private variables - they should be abstracted away. I almost always do - a lot of times I'll have Firebug open and just want to poke around in the state of all running objects. I also don't want to have to be stopped at a breakpoint in one of the methods to see the private variables associated with that object. &gt; Secondly, when it comes to testability, you shouldn't be testing the actual innards of your code. I know that's the theory, but in practice you'll almost always want to be able to inspect the state of an object after some method calls, without necessarily making that state API-public. Judging from the number of testing peer classes (friend classes that provide access to an object's internals *only* to unit tests) I see in my employer's C++ codebase, this seems to be a really common problem. "Test only the API" is unnecessarily course-grained for most classes.
There's no reason that the caller has to know about it. You don't have to *prohibit* something to avoid using it.
&gt;If people have to dig through source code to read the API, your code won't be well-encapsulated anyway, and it's just as easy for them to ignore all methods that start with an underscore as it is to ignore all closures defined in a constructor. That's not true! var clazz = function () { var pub = {}, prv = {}; pub.fn1 = function(){}; pub.fn2 = function(){}; prv.fn1 = function(){}; prv.fn2 = function(){}; prv.initializer = function(){}; prv.initializer.apply(this, arguments); return pub; } var instance = clazz(); All the public functions are assigned to pub, all the private ones to prv. If you want to see the private variables you can assign: pub.prv = prv; And take it out afterwards (or only have your pre-processor put it in on a debug compile [yeah, I compile my javascript to include dependencies, do internationalisation, obfuscate it and compress it]). At any rate, I like my privates private and my publics public. Not because I don't trust people not to use them, but because if you are just going to emulate it anyway, why not do it properly! I'm looking forward to getting the chance to use Scala for this reason (and the static typing) - its going to be the language of my next pet project!
Compare with: var clazz = function () { this.initializer.apply(this, arguments); }; clazz.prototype = { fn1: function() {}, fn2: function() {}, _fn1: function() {}, _fn2: function() {}, _initializer: function() {} } var instance = new clazz(); I'll let the readers (if there are any) decide which is more readable. FWIW, I almost didn't see the difference between `pub` and `prv` in your code - I didn't notice it until I copied your code to modify it. I also hate having to modify code to switch between debug and production versions (IE6 and it's alert-based debugging can die).
You mean: this._initializer.apply(this, arguments); And you talk about missing pub and prv (I think that's [Muphry's law](http://en.wikipedia.org/wiki/Muphry%27s_law)!) &gt;I also hate having to modify code to switch between debug and production versions I do too: I have two builds that are always created: one with all the code unobfuscated and split up into 1 class per file, and another with everything packed into one file, obfuscated and compressed. I can put hooks into each to do different stuff. Oh: and the good thing about mine is that you can easily do inheritance: var base = function () { var pub = {}, prv = {}; pub.fn1 = function(){return prv.fn1()}; //all the prv values won't be seen by child classes prv.fn1 = function(){return prv.value}; prv.initializer = function(arg1){prv.value=arg1}; prv.initializer.apply(this, arguments); return pub; } var derived = function () { var pub = base.apply(this, arguments), prv = {}; pub.fn2 = function(){return pub.fn1()+prv.fn2()}; prv.fn2 = function(){return prv.value}; //can safely overwrite prv.value unknowing of how the parent works - because the parent is encapsulated! prv.initializer = function(arg1,arg2){prv.value=arg2}; prv.initializer.apply(this, arguments); return pub; } var instance = derived(1,2); instance.fn2(); //returns 3!
You could always create a meta &lt;script&gt; tag and load it with an absolute link. You're idea is better, it does save time/bandwidth.
jQuery and you're set
If you're looking for a purest experience with javascript, I would definitely check out Oreilly's Javascript Guide; http://oreilly.com/catalog/9780596101992/ The w3schools online tutorials and reference are good resources; http://www.w3schools.com/JS/default.asp I mainly utilize jQuery for my Javascript needs now, and their online documentation is great; http://docs.jquery.com/Main_Page 
How about McFarland's "Javascript: The Missing Manual"? The text has clear examples that you can work through to help you learn, and the book is also well written. The only quibble I have with the book is that it bases a lot of the more advanced stuff on jQuery, which may or may not work out for you.
Are you an experienced programmer already? If so, Javascript the good parts. http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1251072337&amp;sr=8-1
[Eloquent Javascript](http://eloquentjavascript.net/). I only recommend that if you already know some programming language, but if so I can't recommend it enough. It's beautiful, interactive, and brilliant. (This, even though the author is a bit of a functional weenie.)
Clear examples are definitely a plus, thanks I'll take a look.
I've used some jQuery plugins in the past and it's mainly why I want to learn the language. It just seems so powerful.
Javascript The Good Parts is probably the best book ever written for Javascript if you know how to code.
Books: * [Javascript: The Definitive Guide](http://oreilly.com/catalog/9780596000486/) * [Javscript: The Good Parts](http://oreilly.com/catalog/9780596517748/) * [Pro Javascript Techniques](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273/ref=pd_sim_b_8) Sites: * [Quriksmode](http://www.quirksmode.org/compatibility.html) (great for figuring out what works in what browser and not limited to Javascript) * [eJohn](http://ejohn.org/) - John Resig, creator of jQuery, usually has a lot of insightful information on jQuery and javascript in general * [jsLint](http://jslint.com) - The most nazi Javascript parser out there and will let you know how bad your code is. Passing the lint will make you a better coder. Not all of the stuff Crockford says is bad is bad, but only if you know what you're doing so for beginners I highly recommend using jsLint to check your code often. It's also great for finding that elusive. Videos: * [The Javascript Programming Language 1/4](http://video.yahoo.com/watch/111593/1710507) - Great talk on Javascript by Crockford (covers a lot of stuff that's in *The Good Parts* as well) * [The Javascript Programming Language 2/4](http://video.yahoo.com/watch/111594/1710553) * [The Javascript Programming Language 3/4](http://video.yahoo.com/watch/111595/1710607) * [The Javascript Programming Language 4/4](http://video.yahoo.com/watch/111596/1710658) * [Maintable Javascript](http://video.yahoo.com/watch/568351/2820297) - Great talk by Nicholas Zakas * [Javascript: The Good Parts](http://video.yahoo.com/watch/630959/2974197) - Crockford talk, covers a tonnes of stuff in his book. * [Advanced Javascript with Libraries 1/2](http://video.yahoo.com/watch/410472/2391234) - John Resig * [Advanced Javascript with Libraries 2/2](http://video.yahoo.com/watch/412541/2395771) * [Writing Efficient JavaScript](http://video.yahoo.com/watch/304232/2076311) - Gopal Venkatesan 
JavaScript in 24 hours. I got to learn how to do pop-ups and cool, flashy stuff. /sarcasm For absolute beginners, anything by Sitepoint publishers is decent. Not good for people who want to be pro web developers but it's a start. 
It's a fantastic book. It is to JavaScript what Perl Best Practices is to perl. However, from the preface: &gt; This is not a book for beginners. Someday I hope to write a JavaScript: The First Parts book, but this is not that book.
Maybe we have differing opinions on what "incredibly fast" means, but freezing my entire browser for 5 seconds each time I load a comments page doesn't cut it. I'd rather have a plugin that let's me grab the up/down for a comment on demand rather than kill my browser with JS every time I load a page. edit: It turns out that he updated the code in the forum post, but the script itself isn't updated... bah. Well, now it's down to part of a second slow-down rather than a multi-second slowdown. Second edit: and it turns out it doesn't even work properly, sometimes the script stops executing midway through... investigating, because this would actually be useful.
Hur hur, you said performance of private members. Hur hur.
Performance of private members IN YOUR PANTS.
On a 500 comment reddit post it stops for about 10 seconds (Windows). I know it's unbearable sometimes, but it's as fast a I could make it at 1am on a workday. For Linux it's a bit slower, I don't know why. The code is still incredibly fast in comparison to what it was. I'll be updating the code some more for lazy processing to allow you to browse comments while it's loading the scores. About it not working properly, can you open your error console and check out what it says? You are using FF 3.x or 3.5+? Edit: Some common problems show with deleted comments and minimizing comments. I'll be updating the code for this later, but it doesn't affect other comments in the line. While you might notice a bug or two, it's not detrimental to the entire system.
3.x. The problem is that it fails on closed comments (that are closed due to the score being too low), because spans[1] does not exist here: parent = spans[1].parentNode; I'm actually looking at the code right now, because I think the (still somewhat problematic) speed issue is directly related to this line of code: var div = document.getElementsByClassName("id-"+name); This makes the browser have to search every DOM element for every single comment. I think it would much more efficient to look for all comments, then parse their className and find the appropriate data in the voteTable object. I'll post my changes if it improves the speed a lot. Edit: *Wow*. Okay, this is definitely a BIG part of the slowdown. Without modifying the DOM (just timing the amount of time it takes to find the correct divs), [this thread](http://www.reddit.com/r/WTF/comments/9dhts/magic_tricks_performed_on_chimp_chimp_acts_like/) takes 25 ms with my code and 1678 ms with the old code. Here's what I did, in a nutshell: var i, parse_id = /\b(?:id-)(t\d_\w+)\b/; var comments = document.getElementsByClassName("comment"); for (i = 0; i &lt; comments.length; i++) { var div = comments[i]; var id = parse_id.exec(div.className); if (id) { // Insert code here } } I haven't updated the code yet to modify the DOM faster, but that shouldn't take long.
You're right about the getElementsByClassName, but I believe it's a C++ hash table, so it should be much faster than any Javascript loop that I could develop. The main slowdown comes from the displayVotes function and it used to be with the browser having to process an innerHTML function. I've since removed the innerHTML function and replaced it with DOM methods. The DOM methods are significantly faster, but there's still some room for improvement. &gt; //Append ups and downs &gt; //spans[0] is for collapsed comments, spans[1] is for expanded comments &gt; //this part is f-in slow This used to run through a something.innerHTML += "blah" method which took about 8-10ms per record.
Well, that's another problem, is how everything is built up with DOM. Five DOM-appendChilds in a row will run a lot slower than one, since the browser (sometimes) recalculates on each append. I think there'd also be a speed improvement if all the new elements were put in a span, and that span alone is appended to the existing DOM.
I'll work on this tonight and try to post my updates. I'll also do some calculations on the original script compared to this version and any subsequent versions. To do this testing some justice it might take some time, but I'll try to work on turning this script into a very usable and useful feature. Thanks for your comments.
It's such a crime that the Javascript language isn't just a little bit better. If private members weren't such a hack, maybe the performance wouldn't be so bad.
Get a jquery book!
it really is. Load pages dynamically, tie functions to any element. Get the value of any element at any moment. jquery is what you want. It is the best API for javascript ever! You will learn more javascript as you write jquery.
http://www.packtpub.com/learning-jquery-1.3/book/mid/1802090m1d2r
Here's my heavily-hacked version of the script: http://gist.github.com/174069 I was going to release this myself, but it's still got a couple of bugs — in some circumstances, I've noticed it putting the up/down totals in places where they don't belong. If you know how to fix this, please do. The major gain in this script is the use of the native JSON API if it's available (as it is in Firefox 3.5) instead of `eval`. It's also got a lot of the optimizations discussed in the other comments.
Ah, didn't know about the native JSON API in FF 3.5, neat. I'll add that to my hacked version of the script if you don't mind. (I'm working on it still, but it runs a lot faster; to a speed I can stand).
In the same vein as OP and savetheclocktower, here's my heavily hacked version of the original script: http://gist.github.com/174087 There's a lot of big changes I made: 1. Searches for comments in a fast manner. 2. Templates the added DOM for fast insertion. 3. Original code seemed very defensive and unsure of itself; I got rid of a lot of the unnecessary defensive code. I've yet to see a case where it crashes, but I haven't browsed reddit too much since I was working on this. :P Anyways, it manages to do [this monster of a thread](http://www.reddit.com/r/WTF/comments/9dhts/magic_tricks_performed_on_chimp_chimp_acts_like/) in less than a second (on my machine, ~400 ms), so I consider it a success. Edit: Seriously? Someone downvoted me for making the script faster?
No offense, but it's just terrible. Both versions of your scripts. Here's the numbers I gathered. These are just the processing times of your scripts and does not include the time it takes to download the json. * Original script on 597 comments - 17.1 seconds * Your script on 625 comments - 3.3 seconds * My all new script on 731 comments - 0.320 seconds I also made the script much smaller by using the jQuery that's readily available on any reddit page. I don't mean to sound rude, please don't take it as such. It's just not acceptable to lock up the users browser for 17, or even 3 seconds when it's unnecessary. Here's the source code. Please feel free to do whatever you want with it. It should be noted that it still takes 5-8 seconds to download the JSON on that many comments. So it's still slow. // ==UserScript== // @name Reddit Up/Down // @namespace tritelife // @include http://*.reddit.com/*/comments/* // ==/UserScript== GM_addStyle(".moo_ups { color:rgb(255, 139, 36); font-weight:bold; }"); GM_addStyle(".moo_downs { color:rgb(148,148,255); font-weight:bold; }"); var $ = unsafeWindow.jQuery; $.getJSON(location.href+".json",null,function(r){ var comments = r[1].data.children; var tl = {}; $('.comment').each(function(i,c){tl[c.className.match(/id-t1_(.+?) /)[1]] = $('.tagline',c).eq(0);}); var searcher = function(comments) { comments.forEach(function(comment){ if(typeof(tl[comment.data.id]) != 'undefined') tl[comment.data.id].append(['(&lt;span class="moo_ups"&gt;',comment.data.ups,'&lt;/span&gt;|&lt;span class="moo_downs"&gt;'+comment.data.downs,'&lt;/span&gt;)'].join('')); if(typeof(comment.data.replies) == 'object') searcher(comment.data.replies.data.children); }) }; searcher(comments); });
Bastards indeed, but it was going nowhere as far as implementations go. Too bad.
Kinda. Mozilla's javascript engines implements a good chunk of what would have been in EcmaScript 4 ( destructuring assignments, expression closures, generators, scoped variables and a bunch more ), while Adobe's actionscript 3 engine implements pretty much everything else (type hinting, namespaces, classes and interfaces) In a fit of madness, I once packaged a proof-of-concept that'd let you [run ecmascript 4 code in legacy browsers](http://screamingdonkey.hurlant.com/demo/evalui/). I should probably update it a bit, as it's useful even in a non-es4 world. 
No offense to your script, but while it's concise it runs at half the speed as [my pure JS variant](http://gist.github.com/174087). So I think I'll stick with that. Also, you've got a pretty fast CPU, because on my machine a page with that many comments takes more than a second to render under your script.
Very nice! My processor is a Q6600. Your script ran on 988 comments in 229ms. Which is much faster than my script. However... I accept your challenge, and hereby submit my new version which uses css instead of heavy dom selectors/manipulation. Comes with one downside, and one upside. Downside is that it doesn't do the blue/orange coloring. Upside is that it runs in 13ms on 1094 comments. // ==UserScript== // @name Reddit Up/Down CSS // @namespace tritelife // @include http://*.reddit.com/*/comments/* // @include http://*.reddit.com/user/* // ==/UserScript== var $ = unsafeWindow.jQuery; $.getJSON(location.href.split('?')[0]+".json",null,function(r){ var css = []; var searcher = function(comments) { comments.forEach(function(comment){ css.push(['.comment.id-t1_',comment.data.id,' &gt; div &gt; div &gt; p.tagline .expand:after,.comment.id-t1_',comment.data.id,' &gt; div &gt; .collapsed &gt; .expand:after{font-style:normal;content:\' (',comment.data.ups,' upvote',(comment.data.ups==1 ? '':'s'),', '+comment.data.downs,' downvote',(comment.data.downs==1 ? '':'s'),')\'}'].join('')); if(typeof(comment.data.replies) == 'object') searcher(comment.data.replies.data.children); }); }; var thread = (!r.length) ? r.data.children:r[1].data.children; searcher(thread); GM_addStyle(css.join('')); }); Now we just need the JSON to come in 20x faster to make these measly 200ms matter. :D Edit: Code updated to support custom comment sorting, comment thread subsets (permalinks), and user comment pages.
Hahaha, I absolutely love that idea. I'd never thought of using content. I don't think I will mourn the loss of colors much in comparison to the speed increase, though the eternal issue with content is that, by using it, we block any other scripts that might try to play the same trick. Still, in terms of speed, I definitely concede that your solution takes the cake.
What, no need to test Chrome?
Guess not....
lol who is this guy?!
lol this guy is great, who is he??
What does Flash have to do with anything?
In my glorious thesis, it served as a convoluted and contrived excuse to justify Mr. Nielsen's popularity. 
Lol, way to own up to it.
Spam/stolen, check the submitters history. You can find the original article [here](http://buildinternet.com/2009/02/how-to-make-an-impressive-animated-landscape-header-with-jquery/).
Similar to most jquery tutorials, great looking results but *when* am I going to use this?
It's gay. why would I want to use this?
What? You don't have tacky clients?
This will just not work. You cannot read the location of the parent window object that is framing you. All you will get is a runtime security error that prevents the rest of your "framebusting" script from running. if (top != self) is the only check you have, comparing the window objects directly without trying to read sensitive information.
You went full retard, man - Everybody knows you never go full retard.
the only way you can 'try' to deduce the domain of the parent window is to use the location.referrer property
Yay! These are some incredible improvements. You're all very good with the manipulating the Reddit code. =D
Thank you. I got back logged on the updates that I promised (sorry, family from Denmark is in town), but I'll get to them and post something new. I've been using my new code for some time now and it's working out quite well. I did find one bug that might cause comments to be partially analyzed. This happens if there's a deleted comment. Modify your code to add this if statement: //find the below line in the code var spans = div[0].getElementsByClassName("score likes"); if(spans[0] &amp;&amp; spans[1]){ //this if statement needs to be added count = 0; ... parent.appendChild(closeparen); }
Good programming, terrible game choice. Snood is a frustrating and random remix of Puzzle Bobble.
Thanks!
Awesome deal and can't wait for this to be finished. Just ordered mine.
Unfortunately, it's completely unreliable. There's nothing to prevent users from disabling JavaScript in their browser. Using a single cookie with something like a GUID and passing that around to the server can be used to keep track of loads of data in a server-side database.
There's nothing preventing users from disabling cookies. :)
That being said, this window.name business is totally a hack. 
Same here.
Isn't this a security exploit? I.e. If I store 10 megabytes in the window.name of my webpage and repeat this with all windows the user opens from my window, the browser might sooner or later crash.
I ran into this problem recently when I was trying to verify a claim that it was faster to change a DOM element's class than it is to change its inline styles. The issue was that, in order to measure the time, I'd switch the element back and forth, back and forth on a few basic settings (height, width, background color); but some browsers waited till I was done to actually render. So I ultimately had to create a loop out of setTimeout(), so that each render would finish before the next one begins.
The problem is real, but I'd be interested to hear a more expert take on the solution. Not sure if I'm an expert, but I write cross-browser JS for my day job (IE6/7/8, Safari3/4, FF2/3...). Some commenters are on the right track. I'm almost positive that "setTimeout(...,0)" can only be better than the unexplained "setTimeout(...,10)". In some browsers there are other ways to force a DOM update, like accessing offsetWidth. The timeout method sounds risky in a typical browser where all windows share a single thread of execution.
Wait, wait, wait... &gt; I spent four hours last night trying to find a way to highlight rows in a Dojo grid and make it work. *snip* &gt;If someone out there is already doing it and I find a working example, then I would rather do that and same myself the time if I can. Maybe Dojo is dying because the people using it are spending several hours trying to find an example online instead of taking the time to write it themselves. A development community based on copy-pasta and not content creation cannot survive. Just saying. I know this doesn't apply to all Dojo developers. Especially the Django crowd (I &lt;3 Django).
I'd help you but I'm stuck on 0.4. Upgrading to 1.x is enough work to consider moving to a framework. 0.4 does my job nearly perfectly though, very few bugs related to the framework. I'd update but I don't trust them and don't have time. Maybe when there is time I'll consider a upgrade, but that 0.4/1.x split caused serious support problems I think.
personally, being a dojo guy I go STRAIGHT to the source. The dojo source is pretty damn good once you get it, except for that fucking editor2, I'll admit I cheated and put fckeditor2 in a dojo widget wrapper and replaced all my editor2 widgets last week. I did some plugin development for editor2 though and it was a pain in the ass, 2-3 weeks of development reverse engineering and implementing a plugin, and it fails in chrome and I don't know why yet.
As far as I'm concerned jQuery has already won this war.
This is plainly the case, yet you're being downvoted. 
Looks like they're using a Javascript library (like jQuery, Prototype, etc.) that uses the $ function. In your example that's jQuery code. The $(".someString") at the beginning is jQuery selector for accessing all DOM elements on the page with a class of someString, and then they're navigating through its ancestor elements to find a specific group of elements near the original and calling .foo() on those.
That sounds right. But this code is in a bookmarklet. And there is no place that I see where they download any of the libraries (prototype, jquery etc.). This seems to work in plain old Javascript interpreter. And of course, if try to execute as Javascript (in a file), it barfs on "$()" (not defined). But seems to work in the bookmarklet. Does the bookmarklet code get special treatment?
Bookmarklets can programmatically add script references to the pages they are being executed on.
You are right. I just checked and the pages where the bookmarklet is supposed to work do have one of the libraries already loaded. Thx!
The easyXDM tests only pass in Firefox. They crash webkit (all flavors) while Opera and IE6 fail the tests.
Hm, I just tested the widget example in safari, crome, opera, firefox, IE8 and IE6 and it works in all except IE6. IE6 should work as IE6 passes all the required tests on http://easyxdm.net/tests/ Ill look into this - It looks like the enumeration of subscribers fails in the WidgetManager class in IE6 - should not be a problem to fix.
I found the bug, it was actually not in the library, but in the sample widget I made :) With polling (used with visible iframes) messages must not be sent faster than they can be read (300ms interval is the current). I'm going to try to remove polling entirely now.
Use the scrollbars? I like it.
&gt;The History of Javascript, Part 1 FTFY, article not at all what I expected.
I'd recommend the #jquery IRC channel over at freenode, for any kind of jQuery related questions. Lots of helpful and smart people.
+1 to that, came here to say the same thing. ajpiano is especially helpful. There is also the #javascript channel. 
[stack overflow](http://stackoverflow.com/) baby Also, [firebug](http://getfirebug.com/) and [w3schools](http://www.w3schools.com/JS/default.asp)(esp. the object reference) are your friends :) Also log onto irc.freenode.net via IRC like miketayl said both #jquery and #javascript can be real handy *edit: My, would you look at that grammar. Oh, you can't anymore can you?*
Asides from the above mentioned IRC channels, only other resource I use is [Javascript: The Definitive Guide](http://rcm.amazon.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=nowarlab-20&amp;o=1&amp;p=8&amp;l=as1&amp;m=amazon&amp;f=ifr&amp;md=10FE9736YVPPT7A0FBG2&amp;asins=0596101996) What plugin are you trying to get to work?
1. Documentation - [MDC](http://www.google.co.uk/search?hl=en&amp;q=site%3Adeveloper.mozilla.org+inurl%3A%2Fen%2FJavaScript) and MSDN in particular 2. #jQuery on Freenode 3. #js on irc.mozilla.org 4. Ashamed to say it, but w3schools.com is handier than it should be (mostly due to PageRank) Note the #jQuery guys are very friendly about JS questions in general, although obviously you'll probably get a jQuery-centric answer. :) For the most part, the support in #javascript on Freenode is at the "I'm trying to figure out how to enter raw HTML in Dreamweaver" kind of level
Thanks! I honestly would not mind this solution being in JQ. I am pretty new to use of JS, but have been doing server side for as long as I can remember. My troubles come from not jumping on the OOP stuff when I should have so I am a bit conceptually challenged. If #javascript is at the level you state, I am sort of beyond that for this particular issue, which I may pop into a comment here for the sake of background info. I suspect that often seem to be the case for me, I chose problems that are not good points of entry for learning.
Thank you as well. I suspect the problem I am in is that I almost need someone to just take the code and spec and make it work. In a irc channel, I am going to get a lot of "try onkeyup" or "try onkeydown", all roads which I have been down at length over the past 3 days. I will post a comment here explaining the little rabbit hole I have jumped into in case anyone has any specific pointers. I will also give SO a try. I see they have a bounty system. If that is the case, that may help, as I long past the threshold of just throw money at this so I can move on.
This may get long... If you go to https://twitter.com/signup they have a username field, that as you enter text into it, certain chars are ignored, silently. Those that are allowed, pass off to a inline element that visually shows you the url you are signing up for. That is all I want, similar functionality. Looking at their source, even once formatted, it seems they find and replace vars with single letters in the code, it is a lot to traverse and understand. I have had this working in some form or another, with various bugs in behavior. I have had three friends look at this, all seasoned JS coders, that are not able to solve it perfectly. The conditions would be: * A-Z a-z 0-9 and dash are the only allowed chars, all others silenty dropped * Copy entered output into a span, same rules as above, plus, replace space with dash Of those two conditions, I have been able to get them to work independantly, merging them into one feature fails in a few places. Areas that are problematic depending on approach: * Delete key may not work * Span is always appended to, gets out of sync * Span is always one character behind * Entering text in the middle of the string appends the span, instead of mirroring it * Select all then delete has many different behaviors, all incorrect Here is a paste of it http://pastebin.com/mfc36fa9 I can say, twitter did their testing on this one, as it is the single and only perfect use case I have found. I would love to be proven otherwise, and see a 5 liner that solves this. Thanks everyone so much for all the pointers. If I find anything elegant, I will post it back here. PS, anyone know a place where I can upload .html file that can be loaded and played with, yet keep privacy since some projects I can not announce to the public? Using mydomain.example.com/test.html is would be too public for some clients. [edit: markdown is weird, always]
I know you said you tried onkeyup, but explain why it doesn't work for you. The way I would envision this would be, 1. onkeyup fires 2. grab value of input box 3. validate and remove any offending characters 4. continue/repeat I know you have been down this road before, but it might help you to think about why certain approaches didn't work.
What really helped me get my head around js and oop was [Resig's book](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273) For day-to-day issues and stuff I also use w3schools.com, especially their [Javascript Reference](http://www.w3schools.com/jsref/)
instead of using events, try this: set an interval when the input is focused. the interval checks and parses the contents of the input and updates the span. when the input is blurred stop the interval. 
The plugin (you might put this in a separate file, such as jquery.userurl.js or something): /* LICENSE * ------- * This work, including the source code, documentation * and related data, is placed into the public domain. * * The original author is rtp, some user on reddit. * * THIS SOFTWARE IS PROVIDED AS-IS, WITHOUT WARRANTY * OF ANY KIND, NOT EVEN THE IMPLIED WARRANTY OF * MERCHANTABILITY. THE AUTHOR OF THIS SOFTWARE * ASSUMES _NO_ RESPONSIBILITY FOR ANY CONSEQUENCE * RESULTING FROM THE USE, MODIFICATION, OR * REDISTRIBUTION OF THIS SOFTWARE. */ ;(function($) { /* * Extends jQuery with the userUrl function. You run this function on the INPUT element * where you insert your username/name/whatever. * * arg1: the id of the span/div that you wish to display the stripped username * arg2: the callback function to filter the value */ $.fn.userUrl = function(id, filtercallback) { // a local reference to this INPUT element var _this = this; // store a temp value, so we don't get hyperactive in setting the text on the stripped-username-element var _val = undefined; // method for fixing up the username :) var fixUserUrl = function() { if (_this.val() === _val) return; $(id).text(filtercallback(_this.val())); _val = _this.val(); }; // attach the fixUserUrl to keyup on *this*, and then run that event. _this.keyup(fixUserUrl).keyup(); // check for copy/paste (runs the fixUserUrl function every 300th millisec, // I'm not sure about the CPU cost on this...) setInterval(function() { fixUserUrl(); }, 300); }; }(jQuery)); Use the plugin like this: $(function() { $('#userurl').userUrl("#preview", function(val) { return val.replace(/([^\s])\s+([^\s])/g, "$1-$2") .replace(/[^\w\d-]/g, ""); }); }); The HTML code: &lt;input type="text" id="userurl"/&gt; &lt;div id="preview"&gt;&lt;/div&gt; Edit: *added license, so it's public domain.* Edit2: *fixed the code to reflect your needs. :)*
rtp, thanks for much for your work. I implemented it, but get no action from it. I have a few questions. I get no errors and can be positive that jquery.userurl.js exists in the same directory as the file I load. I see 'before' and 'after' in a console. Looking at your code, you take two args, the first being the #id, which makes sense, as that is the div I want to display the text in. The second is the regex. However, I do not have parity in the regex's, so I believe I would need three args. The first would be a pattern to match the characters I either want or do not want in the input itself. If I hit that condition, nothing should happen. (Typing 'fd -fsdw3$dw 76h!' would yield 'fd -fsdw3dw 76h' in the input itself) I am basically allowing a user to set a "title" to a page, that is also going to become a uri resource. I want to allow "bob's bait shack" as a title, but the uri would be /bobs-bait-shack The second would be the regex for the div display. This has to only show alphanumerics and dashes, but also replace a space to a dash. When I run the below, and enter text into the input, I am allowed any char I desire, and the div is not updated. I think I did something fundamentally wrong in how I deployed, but I also believe I need a third argument. If you can hang in there with someone less seasoned, I would love to contact you off comment and make sure you are compensated for your time. Thank you again. &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;untitled&lt;/title&gt; &lt;meta name="generator" content="TextMate http://macromates.com/"&gt; &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script src="jquery.userurl.js" type="text/javascript"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $(function() { console.log('before'); $('#preview').userUrl("#userurl", /[^A-Za-z]/g); console.log('after'); }); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type="text" name="name" id="userurl"&gt; &lt;div id="preview"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; * prays to god markdown is going to play nice with this one. 
Uhm. You have *#preview* and *#userurl* mixed up: $('#userurl').userUrl('#preview', /[^A-Za-z]/g); You apply the *userUrl* function onto the input element, and the first argument in the *userUrl* function should be the selector (the id) for the preview element. I'll edit the script above so that it matches your needs. Also, no need for any kind of compensation. :) **Edit: I fixed the code above. So check it out, does it work the way you want?**
&gt; For the most part, the support in #javascript on Freenode is at the "I'm trying to figure out how to enter raw HTML in Dreamweaver" kind of level \#javascript on Efnet (irc.efnet.org) is pretty good. There's some clued-up chaps in there (and me). But it's very much a Javascript channel, you'll get a js answer rather than a jquery-or-whatever answer ;)
I find #jquery to be full of inane, non-JS dialog and horribly basic questions.
Huge: http://developer.yahoo.com/yui/ Doesn't matter that you use jQuery, it's a great JS (in general) resource, especially w/ all their videos. http://tech.groups.yahoo.com/group/ydn-javascript/ Active mailing list w/ js questions answered. --Robert
I picked up a lot from watching their videos.
I found this article very helpful. Thanks for the post! I'll be referring to this info in the future, I'm sure.
Oops, my bad. Updated the code, here is what happens: If I enter in: this, is a test- i like $money That is what I see in the input item, and also what I see in the div. I can not seem to get your code to do any character blocking on the input menu. I generally do that by returning false, but at that point, I have no event to to send off to update the div. Various keypress, keyup, keydown, some give you the delete key, others so not. My desired result, is trying to enter the above string, the input would block a list of chars, or a regex of chars, so the above, would show in the input as: this is a test- i like money The div, would follow that same logic, but replace the spaces with dash: this-is-a-test--i-like-money I do thank you again for your work on this, and especially for tuning me into 'setInterval', as I was not aware of that at all. Now that I know it exists, I am sort of wondering how in the heck I never managed to need it.
Could you paste your code somewhere? What browser do you use? It works for me in IE 8, Firefox 3.5, and Safari. I use this callback (same as the one in my original post): $('#userurl').userUrl("#preview", function(val) { return val.replace(/([^\s])\s+([^\s])/g, "$1-$2") .replace(/[^\w\d-]/g, ""); }); Perhaps I've misunderstood you, and you wish to filter the value in the input element as well? I wouldn't advice that; I think it is better to handle such things when the form is submitted, and maybe throw an error, or use some kind of real-time validation?
This is a really nice sounding approach. Let me give this one a try, and see where it gets me.
Hi anarchman From what I understand, onkeyup sends the event as the key is relased, which means, the character is already entered into the input. You can 'erase' it, but you will see a flash of the character for a second. This is being hyper picky of course, torn between being in a mood to learn these in's and out's, and just wanting to work around it and be done. :) Also, in my use case, a quick 3 person survey, end user confusion on the flash of a character. Looking at the [JQuery Example for keypress](http://docs.jquery.com/Events/keypress) they have a similar live example. Notice a delete key fails to update the div. I just found this [QuirksMode.org post](http://www.quirksmode.org/js/keys.html), at the bottom, it has a really handy tester, that I should have built a long time ago rather than these random stabs I have been taking :/ With keyup not viable, I have keydown and keypress. Looking at just letter 'a' and the delete key in the chart below. keydown and keyup share the same charcode of 0. I am left with keypress being the only thing I believe I can use. With keypress, the user types into the input, hits a key that is not in my allowed list, and I return false. At that point, my lack of understaning of JavaScript kicks in. But I believe I do not have an event to then update the div. I have tried a few ways to let it through, though until now, I was not aware of 'setInterval', which very well could give me a repeating event that can do some work for me. Hitting the lowercase 'a' -- keydown -- keyCode is 65 charCode is 0 -- keypress -- keyCode is 97 charCode is 97 -- keyup -- keyCode is 65 charCode is 0 Hitting the delete key -- keydown -- keyCode is 8 charCode is 0 -- keypress -- keyCode is 8 charCode is 8 -- keyup -- keyCode is 8 charCode is 0 * If I mixed up keydown, keypress and keyup in this, forgive me, I went over it a few times to be sure I have it right. Thank you all though, without reddit, I would not have even began to try some of the different concepts being presented here. [Edit: markdown]
Correct, filtering on the input element, and also modifying the resulting div. If you check out this twitter [signup page](https://twitter.com/signup) and poke at their username field, try to enter in a $ or an @ symbol or anything other than in their case, a-z_0-9, they are dropped silently. My slight variation is I want to allow spaces, but convert those to dashes in the div. Your code works for me, where I was getting hung up was that I thought it was supposed to be doing something that it wasn't intended to. I will also do server side string massaging to double check, but this visual representation is semi-important in this case. I get what you are saying about it being advised against. There is a bit more complexity to what this is going to eventually be used for, I have just distilled it down. My end goal is different than a username field, it just so happens twitter somehow has near exact functionality working to what I need. Thanks again.
Awesome, hope it works and if it does that you offer up a code, if it still isn't working, post up your latest code snippet. You may want to check out the [rubber ducky method of debugging](http://www.reddit.com/r/programming/comments/83i5n/the_rubber_duck_method_of_debugging/)
No problem. :)
I won't argue with you about non-JS dialog and basic questions--but there's still plenty of people in #jquery with an impressive knowledge of javascript. I guess it's all how you define signal to noise here.
If you can't detect a signal because of the noise, then the ratio is off. 
:not is one of my favs. I can't wait until I get to use this in CSS.
MooTools has a nice Hash implementation. Using it all the time, loving it, the one posted also looks great.
This doesn't seem to work on the user comment page for me. (I added it to the include parameter, so maybe it wasn't written to...)
It has a few issues I've discovered since I wrote it. I'll get a new version written up shortly and reply to this thread so you'll get it. :)
I just updated to code to support custom comment sorting, comment thread subsets (permalinks), and user comment pages. Thanks.
How do you find MooTools compares to, say, prototype? I use the latter and have not had a chance to check out the former.
I mainly use mootools but I also sometimes use prototype (mostly when I work on legacy apps etc). Prototype is also a nice framework (note: I prefer the "prototype"-approach over the namespace-approach) and if you really use* prototype and MooTools you could get the feeling that MooTools is in fact a more modern version of prototype. Many principles are the same but the implementation of some features and methods just feels more modern and straight-forward in MooTools. If you are a heavy prototype user give MooTools a try. Some things are different, some may appear inferior at first but so much just feels improved. *by "using" the framework i mean to build frontends for apps with it, not juggle around some divs etc. MooTools Class-infrastructure is definitely one of the best out there and if you're new to MooTools you'll have many great moments just from reading the docs for the native objects extensions. my rule of thumb for working with MooTools is: before you attempt to implement (and even that's made so sweet and easy with MooTools) some feature to some native object or are about to write some function to interact with for example an array, check the docs and be amazed that the MooTools guys probably have already thought of that. 
Narwhals, *FUCK YEAH*!
Can you explain the custom comment sorting? I don't see that anywhere. Also, just a minor thing, but this line: // @include http://*.reddit.com/user/*/comments* excludes the code from working on the overview page, changing it to just http://*.reddit.com/user/* works better. Also a side effect of this script is that the minimize icon is much easier to hit now since your text is part of that link. =)
By custom comment sorting I mean on a story when the user changes from 'hot' to 'new' for example. I wasn't splitting at the ? so the .json was being appended after the query string. This little bit gets us everything before the question mark. location.href.split('?')[0] I updated the code to use that include. I wasn't sure if it would work on the overview page because of the mix of stories and comments. The side effect was on purpose. I done that for my own version because the toggle button was so hard to click. This made it easier, I just forgot to change it for the public version. I'll leave it in though as it does really help.
Been doing this for years, also this guy shouldn't put his pic on his blog.
If you weren't busy admiring the dude's hair, you might have read about a profile-directed approach to automatically doing what for years you've no doubt been doing by hand.
It's probably good to point out why you can't reference objects as keys in dictionaries under JavaScript. However, I think its good to point out that **if you wanted to make a key/val pair based off of an object you could**. The problem is that when you reference an object you get the toString() method as the designated key. So, you could actually do something like this: var x = { 'foo': 'bar', 'toString': function () { return 'x'; } }; var y = { 'foo': 'car', 'toString': function () { return 'y'; } }; var test = {} test[x] = 'Hello, x'; test[y] = 'Hello, y!'; and get the expected results. 
i have utter respect for the dude's hair. lazy loading js libraries is an awesome concept if you are not worried at all about security. i'll take a look at the library, just cuz... but before i put in the effort to figure it out for myself: has anyone tried to implement #this# with any well known framework (jquery, mootools, dojo, etc)? edit: #this# refers to the js code in the article, not the concept of lazy loading (sorry for confusion)
grammar pirate: "Many applications due these optimizations manually but this is a nice automated approach to the problem" due=do (arghh)
Dojo, which I use, and does this. I have some code that I build into my compressed load module, others I load in the background, and others that load on-demand. I have a LOT of modules/widgets. Edit: for record, I have about 25 custom widgets that I wrote, some extend dojo widgets, most don't. There is 4446 lines of javascript across those files which is about 100kb of code. I cheat though in lots of ways though to keep load time down. I've got a pretty comprehensive ajax app. Sometimes you have to hide loading, and do things for the user to give the impression of responsiveness.
i wanted dojo to be great, as it has lots of support by heavy hitters (IBM, Zend). i still can't bring myself to use a a js framework that makes my pretty HTML not W3C valid. i could be out of the loop, have they stopped perpetrating stuff like this: &lt;input type="text" name="meh" dojoAttachEvent="onkeyup: _IAmNotValidHTML" /&gt;?
I believe they have done work to make it so that you can write html that validates, but I never really gave a shit. It's not one of my requirements, I'm not going to needlessly make it one unless required. Oh and if anyone is outta the loop it's me, I'm on dojo 0.4. It's old code, never upgraded because I got too much invested and not enough bugs to justify. I do plan on upgrading the toolkit one day though.
[♪♫ If I were King of the Forest, Not queen, not duke, not prince ♫♪](http://mvdirona.com/jrh/work/JamesHamilton.jpg)
You're on the right track with organising things into objects. I go a step further and wrap stuff up as a closure, eg: var MyApp = (function(){ // Some public and private values var somePublicVar = true; var somePrivateVar = true; // A prototype var Thing = function(foo){ this.foo = foo } Thing.prototype.doStuff = function(){ .. } // provide public accessors for some stuff return { somePublicVar: somePublicVar, modifyPrivateVar: function(value){ somePrivateVar = value }, Thing: Thing } })(); var thing = new MyApp.Thing('foo'); That way you can hide some stuff away from the external interface. Because JS uses prototypes rather than classes, you can even build your object prototypes inside a closure like this, and only make public those that need to be. If things grow beyond a single file, that's pretty easy to extend your object, eg, in a second file: MyApp.OtherThing = (function(){ ..whatever.. })(); Although that won't have access to the 'private' stuff, so you've got to be a little careful when chopping stuff up into files Works quite nicely. I name them like.. MyApp.js, MyApp.OtherThing.js, and then have a bit of server support to find the files and include them in the right order (and compress and consolidate them for deployment)
Thanks! I've been trying to wrap my head around closures for a little bit, I think I'm starting to get it but haven't really gotten to the point where I use it yet. Are there any sort of standard use cases where it comes in handy?
Closures are great. They're like little tiny scopes that a function carries with it, for example: function whatever(){ var foo = 'something' setTimeout(function(){ alert(foo) }, 1000) } The inner function (in the setTimeout call) carries with it the scope of the outer ("whatever") function. So the foo variable is available there. This extends to more complicated things, like: function setupEventHandler(element, message){ element.click(function(){ alert(message) }) // or however one attaches events in jquery } ..which you've probably done, but not realised what was actually going on ;) In the example in my first comment, the `modifyPrivateVar` function has access to the `somePrivateVar` variable, because of the outer `(function(){ .. })()` call (all that scary-looking thing is doing is defining a function and then executing it immediately - purely to make it a closure). This means that `somePrivateVar` is *completely* inaccessible outside of that outer function call. Other functions defined in there can access it, but it's entirely encapsulated so nobody can fiddle with it without using the functions you provide for the purpose. This is a good thing, it keeps your code nice and simple by hiding away the internal bits that nobody apart from you should be playing with ;)
Any time you want to prevent access on implementation details of your object. It also generally helps to keep a clutter-free global object (window in most cases).
You already learned your first lesson: don't get fooled by Javascript's simplicity and start with cowboy coding! While Javascript has no explicit syntax for namespaces, class inheritance, private variables and other advanced language features, all of these can be emulated with simple programming patterns. Treat it like a "real" programming language and design your program like you would do in any other language: organise things into objects, use inheritance to derive similar objects from some abstract base class, maintain a "flat" library for common utility functions (e.g. logging,..). jQuery is fine, but don't let it dictate your programming style (i.e. implementing your whole application as a jquery plugin). 
Sounds very reasonable, thanks. I've yet to dive into inheritance, but I've remember watching some of the YUI Theater screencasts with Douglas Crockford, and there seems to be some good advice there. I'll have to revisit them again soon, I think. :-)
Douglas has very good advice for people just getting into Javascript, he'll set you on the right path for good coding. Make heavy use of [jsLint](http://www.jslint.com), if you pass a lint then your code will certainly work the way you programmed it.
One suggestion: obviously, you're not really using "myObject", but pick a name that is highly unlikely to collide with what others have used. Another: I don't know what server-side language and framework you're using, but I would aim for maximum readability (i.e. related functionality grouped together in different .js files) in the dev environment and then concatenate all the JS files together in the production environment (for caching and number-of-requests purposes). HTH
Yup, already using jsLint as part of the Javascript bundle in TextMate, so I get warnings every time I save my document unless it passes. Very handy and certainly teaches good coding practises!
Yeah, I'm not calling it myObject, trying to find reasonable &amp; readable but application-specific names, but I might actually try to improve those just to be safe. We're using Django for this project, and I know there are a few options for automatically processing .js- and .css-files available in 3rd party apps, both minifying and concatenating. Thanks! 
Personally I like splitting up larger javascript into smaller purpose driven functions/objects that would work out of context. I like this because it creates slightly more general functions that are easier to reuse, and usually means I can think about each function separately.
Closures are great, but wouldn't that get too memory intensive for a large JS project?
Why would wrapping everything in a closure be memory intensive?
I was basing it on this article: http://valums.com/b/ I was more concerned about IE though. Especially the bug where if you're not careful, closures can leak memory in IE. But after reading that article again, it looks like it doesn't really matter for the other browsers. 
Because it requires a closure over the parent scope, and each created object may contain many more properties than a prototyped object. It's easy to test this with a for loop with the same object implemented with both schemes: prototyped objects eat a lot less memory in IE and Firefox at least. Closure-based objects are also slower to construct, which is important if you're creating lots of them. I have no idea how it works at the VM level, but even conceptually, constructors for prototyped objects have less work to do. I might sound like I'm advocating one over the other but I'm not. Closures are so much more concise in many cases.
In terms of splitting things into files, assuming you're planning to have some sort of concatenation step, the above technique pretty much lets you be as messy as you want, or to split things up into files covering different concerns as you might do in a programming language which has proper module support built-in. var namespaceObjectName = (function() { // Concatenate all your different "module" files here return { // Expose your code to the outside world by defining properties in this Object }; })(); For example, I'm doing a JavaScript port of Django's forms module, which I want to expose as a "forms" namespace object. For porting purposes, it's handy if I have JavaScript files (forms.js, fields.js etc...) analogous to the modules which live under django.forms (forms.py, fields.py etc...) and it's also handy if I can assume that these "modules" also know about each others' contents (as if you'd imported them into the current module, in Python), so I'm not using "forms.blah" everywhere in the implementation. Using the above approach, the code within each file can just sit in [what appears to be the global scope](http://code.google.com/p/js-forms/source/browse/trunk/forms.js), but when it comes to deployment, the scope the concatenated code shares is actually that of the closure function and [I can expose the functionality to the world how I like](http://code.google.com/p/js-forms/source/browse/trunk/build/formsnamespace.js).
[This free chapter](http://ajaxian.com/downloads/books/javascriptninja/JavaScriptNinja_ch3_Article2.pdf) of Secrets of the Javascript Ninja gives some great examples. Actually no... it gives examples of using (function(){})() and its relationship with closures, which isn't what you meant perhaps. My mistake. 'tis an interesting article nevertheless.
In this context though, the parent scope is the window, and it's one closure per global object or file, so not too many. It's basically just a simulation of block scope.
This is pretty basic, but if you're just moving from cowboy coding into something more formal, think of you objects as being reflective of the real world. Don't add additional functionality to an object unless it belongs there. Make as many objects (or object literals) as you need to get the job done, and give those objects as many methods as they need to get *their* jobs done. This makes your code easier to read, organize, and most importantly if you're hoping to make a living doing this, re-use.
For the code beautification job try to use http://jsbeautifier.org/
The site has been overhauled. There are now 3 different JavaScript sleep implementations as well as a chart showing how each of them affect other JavaScript on the page.
Testing says no.
It uses images. Lame.
It's just lame.
I hope you'll find this code snippet useful...
Agreed. Here's a proof-of-concept version that uses plain ol' text: * http://satedproductions.com/tmp/reddit/nav_flip.html The vertical one requires width calculation and a teensy bit more work than I'm willing to put in right now (/r/apathy kicking in...) but this can all be done without images.
Arrr. Horrible implementation, this one does caching and decoding (untested): ;(function($) { /* the cache for the parsed URL vars */ var _url_vars = null; /* internal URL decode function */ function _dec(x) { return decodeURIComponent(x).replace('+', ' '); } $.extend({ /* get the URL vars from the given URL or the current one */ getURLVars : function(url) { if (url &amp;&amp; _url_vars != null) return _url_vars; var items = ((url || location.href).split('?')[1] || '').split('&amp;'), rv = {}; for (var i = 0, n = items.length; i &lt; n; i++) { var x = items[i].split('=', 2); rv[_dec(x[0])] = x[1] ? _dec(x[1]) : ''; } if (url) _url_vars = rv; return rv; }, /* return one named URL variable from the current URL */ getURLVar : function(name) { return $.getURLVars()[name]; } }); })(jQuery); 
Here's a better version, that includes caching and can handle URLs passed into it: **FILE:** *jquery.getURLVars.js* (function($) { $.getURLVars = function(href) { var href = href || window.location.href; var params = href.slice(href.indexOf('?') + 1).split('&amp;'); var queryString = {}; $.each(params, function() { var param = this.split('='); queryString[param[0]] = param[1]; }); if (!$._queryStrings) $._queryStrings = {}; $._queryStrings[href] = queryString; }; $.getURLVar = function(key, href) { var href = href || window.location.href; if (!$._queryStrings || !$._queryStrings[href]) $.getURLVars(href); return (key) ? $._queryStrings[href][key] : $._queryStrings[href]; }; })(jQuery); **Sample usage:** var params = $.getURLVar(); $.getURLVar('asdf'); $.getURLVar('foo', 'http://www.google.com/?foo=bar'); **NOTE:** You should never be calling $.getURLVars() directly. Just call $.getURLVar() with the query string param you're after -- the script will take care of everything else. If you don't specify a query string param, the method will return an object of all query string params.
With or without images, the final product just isn't that appealing.
Amen to that. The effect reminds me of the crap I used to do back in the before times of long-long ago when I was learning Flash.
To the OP and to the below "improvements": if you're going to do something instead of using [existing, off-the-shelf tools](http://plugins.jquery.com/project/query-object) at least make an effort to think about corner cases and get them right. http://foo.bar/ and http://foo.bar/#yo?dawg fail 5/6 tests in the implementations here.
I couldn't help noticing how much they used the word "Web 2.0". Isn't this already old enough and abused term. Get over it guys!
Twice?
Looking at the examples we immediately find it using XHTML Strict. Does it rely on it? I don't use XHTML for anything anymore.
This is the regular expression I'm using which works fine s = s.replace(/\[code\](.*?)\[\/code\]/gi,'&lt;span class="code"&gt;$1&lt;/span&gt;'); What I'm trying to do is pass anything within the [code][/code] tags to a function then return it. This is what I tried function clean(str){ //do some stuff with str return str; } s = s.replace(/\[code\](.*?)\[\/code\]/gi,'&lt;span class="code"&gt;'+clean('$1')+'&lt;/span&gt;'); But this is passing "$1" to the clean function instead of what's between the tags. Any idea as to how I'd go about getting this to work?
Here's a little something to get you going in the right direction: var old_str = '[code]Hey! I have stuff around me![/code]'; var regex = /\[code\](.*)\[\/code\]/gi; var markup = '&lt;span class="code"&gt;%s&lt;/span&gt;'; var matches = regex.exec(old_str); var new_str = markup.replace(/%s/, matches[1]); alert(new_str); I broke it all into variables and tried to make it as verbose as possible so you can see what's going on, but it can be rewritten like this: var old_str = '[code]Hey! I have stuff around me![/code]'; var new_str = '&lt;span class="code"&gt;%s&lt;/span&gt;'.repace(/%s/, /\[code\](.*)\[\/code\]/gi.exec(old_str)[1]) Or like this: var old_str = '[code]Hey! I have stuff around me![/code]'; var new_str = '&lt;span class="code"&gt;' + /\[code\](.*)\[\/code\]/gi.exec(old_str)[1] + '&lt;/span&gt;'; You don't want to use a simple replace, because you're not replacing you're extracting and then dropping the extraction into another string.
And to clarify, the "replace(/%s/)" method stuff isn't necessary -- it's just my preferred way of doing string concatenation in JavaScript when you've got longer strings to work with. Sort of like a sprintf()...that isn't a sprinf().
Awesome. Much appreciated :o)
You can use a function ref as the replacement part. It will then be called, once for each match. s = s.replace(/\[code\](.*?)\[\/code\]/gi, clean); `clean` is the name of the function. You have to remember the arguments that will be passed to the function 'clean': first argument is the whole match, next are all captures: $1, $2, ... function clean(whole, one) { return '&lt;span class="code"&gt;' + one.replace(/&amp;/g, '&amp;amp;').replace (/&lt;/g, '&amp;lt;') + '&lt;/span&gt;'; } Try it with s = "[code]a &lt; b &amp;&amp; b &lt; c[/code]"; 
bart2019 is credit to team! many thanks!
I really like how it enables you to update the page efficiently after the page has been rendered.
From my experience writing large applications using JavaScript I have found using named functions as much as possible solves many problems. A named function is much better than an anonymous function because the named function provides a hook for documentation. Anonymous functions have to be executed in a method, where a named function can be executed anywhere. I would say breaking separated parts of code into named functions for easier management/maintenance. Typically the largest blocks of code left over are loops that contain many lines of a logic. It is not wise to break a loop apart into smaller units as that can interfere with logic. Just like anonymous functions named functions can execute immediately without having to be defined first and called later. Simply place empty parenthesis directly after the closing curly brace of your function to create a function that invokes immediately. This means you can have functions that execute at the exact same point they are declared with a var command. Personally I never use object literals, because I find they do the same thing as functions except they don't provide scope for declaring new variables. As a result they are more rigid and less flexible. The benefit to an object literal is that they can be reached into using dot notation, while a function is a secret block box to all code outside it aside from closures. As a result I never use object literals when the solution to the limitation of functions is closures. A closure is a variable declared in a function that is accessed by other functions executed under the same function that is defining scope for the variable. This is actually quite important when your code becomes thousands of lines long and contains dozens, or even hundreds, of functions. If anybody other than you is ever expected to see the code then it needs to be documented. This sort of design scheme also provides a more fluid and visual form of hierarchical code organization that simplifies structural considerations where there would otherwise be complexity of many overlapping moving parts referencing each other. EDIT: I have also found using a single var command, if any, per function is much cleaner and more efficient than multiple var commands. Numerous variables can be declared, and even defined, in a comma separate list using a single var command. This one var command should always go at the top of your function so that its variables are not used before scoped, because otherwise you could end up with unintentional global variables which is very bad.
Cool, I guess. Does anyone have examples that we can look at?
i'm sick of google
them's some purdy pictures.
The backlash is long overdue.
Non-surprising info. Chrome and FF win out most categories. But Lunascape? Really? Anyone else tried out that piece of crap? I can't imagine why anyone would include it in the discussion...
I'd go with Chrome, except I can't live without all those great FireFox add-ons. Besides, most of the slow-downs in browsing have nothing to do with the browser, and everything to do with DNS hangups, and crowded networks.
Why non-evil?
Try http://asynchronous.me/ . It gives examples to craft asynchronous code for common scenarios such as for/while loops, if-then-else statements, requests that depend on previous responses, etc. There's a paper that explains how to ensure correctness. There are no libraries though, it's just coding. Let me know if it helps! /Thibaud
The common word to use is deprecate, not depreciate. Interesting article.
Just today I was discussing this with my boss. I think it might be time to look some where else. We were looking for a JSDoc type solution for Dojo. But it's too annoying to setup and maintain.
I haven't seen anything like this before using JavaScript. That's a pretty awesome effect.
It looks neat, but when would you actually want to use this on a site?
I don't know that I would. It is, however, an interesting proof of concept that if nothing else gives some insight into what's possible.
It looks horrible. It is too pixelated.
The Sony VAIO logo was way better than the Firefox logo. I agree that the firefox logo looks pixelated.
&gt;I haven't seen anything like this before using JavaScript. Then you need to see [this demo](http://www.nihilogic.dk/labs/pocket_full_of_canvas/#presets/imagedeform.js) on nihilogic. Preferably on Chrome.
Wow, so much work for so little use. I admire other people's desire to code something just to say they can.
Saying this is impressive is an understatement.
It's another step toward obviating Flash for every type of animation. Flash has its place on a healthy web, certainly, but having other options which don't require a plugin is also a *good thing.*
In theory pixelation would be reduced by making the stretched image for the effect from a higher resolution copy of the source image. It does look awesome on the VAIO logo - especially when sliding horizontally.
Don't get me wrong, I really like Oliver Steele's work, I think I first heard about him when he wrote that functional javascript library, although I've been also using Skia for some time now (and I think Chromium uses also Skia for Canvas). However I find this presentation extremely boring. There's nothing interesting before 70 minutes in and he doesn't really show any interesting "functional" abstraction (except for callbacks) but he doesn't go that deep into the problem either. 
same here, I really really wanted to hear more in-depth about what he had to say. What i did see was sort of....excruciating....
Fail from the beginning -- don't bother with this article. Building a menu with sub-navigation using an unordered list and not putting the sub-navigation into the proper list item is completely wrong. This: &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Sub 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Sub 2&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; Should look like this: &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;Page 1&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Sub 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Sub 2&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Page 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; Markup aside, if you're ever doing something like this in jQuery: $("#navigation ul:first").children(":first").siblings().slice(0,1).filter(":contains('2')") for something as simple as a menu then you've failed twice. **Does anyone bother reading these articles before giving them up-votes?**
I've just been reading through their new code base. It contains several code snippets borrowed from other libraries. This is completely OK of course, everyone does it. But the rest of us provide *attribution*.
Am I wrong or the only way to make cross domain requests with the io module is by using flash? Isn't JSONP wrapped into io?
I wasn't aware of this. Could you provide some examples?
I want to start using YUI again, but the code samples look so wordy and verbose. I don't feel the need to move away from jQuery's simple common-sense syntax...
I'm still baffled to this day how such a talented team can come up with such a disappointing library.
yui kicks ass. made my life simpler today - their layout manager let me do exactly want the client asked for, was well documented, and appears to work perfectly.
Never used YUI, but what do you think are the main issues with it? I'm a bit crockford fan, so was thinking that if I ever needed to do some AJAX crap I might use YUI, but it looks scary from afar...
Wouldn't it be element.onclick which holds the event callback?
yes, sorry, that's what I tried but it's not there --- corrected the text above
IIRC, the best way would be to write your own attachEvent function that logs calls to some other object. The problem is that IE won't let you override a COM method (you'll get an exception), so you would have to probably use your own, custom attachEvent function that executes the browser's native attachEvent and also logs. I may be wrong, or this info may be out-of-date (should be true for IE6 and probably IE7), I haven't actively written JS in a while. HTH.
Well I guess the simple answer is that there is no way to check if an element has an event registered on it (via attachEvent). Maybe go back to defining the callback function on the event property? elem.onclick = function () { ... } Using that method you should be able to check if elem.onclick is null or not. That seems to be the only way without keeping track of it yourself.
 elem.attachEvent('onclick', myHandler); elem.onclickEvent = "myHandler"; ------------------ Later... if(elem.onclickEvent) ...
You can use this code for attaching events. var el = document.getElementById('yourid'); if (el.addEventListener) { el.addEventListener("click",myFunction,false); //most everything should use this //simple property assignment to the object if(!el.attachedEvents){ el.attachedEvents = new Array(); } el.attachedEvents["myFunction"] = true; } function myFunction(){ alert("hello"); //this just checks if the function is attached. alert(document.getElementById('yourid').attachedEvents['myFunction']); } Edit: in the attachedEvents property you might want to reference the event that you attached the function to and not just the function name, so you can use a key/value combination for that. el.attachedEvents["onclick"] = "myFunction"; Edit 2: since you can have multiple events on the onclick method you should allow the attachedEvents keys to store an array of function names. http://www.howtocreate.co.uk/tutorials/javascript/domevents
How nodes are sorted in Safari 2 using ranges. I first saw that in jQuery. The point is that there are only one or two attributions in a very very large library. Other libraries are littered with attributions. YUI is not.
I do more or less the same thing, except that I generally have the functions redefine themselves on first call (so they don't browser sniff every time they're called). Something like: var targetEvent = function( object, type, handle ) { if ( object.addEventListener ) { targetEvent = function(object, type, handle ) { object.addEventListener( type, function( e ) { handle(e.target); }, false); }; } else if ( object.attachEvent ) { targetEvent = function( object, type, handle ) { object.attachEvent('on' + type, function() { handle(event.srcElement); }); }; } }; 
Ah that's my bad, I didn't check the code, but yes, this version is the correct one. As far as I'm aware, once you overwrite the function, anything in the old function is destroyed. You would have to define the variable elsewhere or use some other closure (haven't thought about it that much, there's probably a good way).
What is a DSL? What does this code do?
Domain Specific Language
You lost me at "in IE"
Tool updated. 1) JavaScript beautification now correctly unindents comments if that option is selected. 2) JavaScript beautification now inserts a space between the "catch" keyword and the following expression in accordance with JSLint strict white space rules. 3) Markup Beauty adjusted so that unindention of comments no longer interferes with code indention if the comment is immediately preceded by unindented code/content.
Honest question, why would you do this with vanilla JS vs. using something like jQuery which is a 19KB download?
http://getsprockets.org/
Well f**k, they have better marketing.
But it doesn't look like Sprockets minifies.
[VRML](http://en.wikipedia.org/wiki/Vrml "Anyone remember when this was supposed to be the next big thing?")? Is that you?!
well, the url used in the iframe for a doc I just tried is: https://docs.google.com/drawings/client?xpc=%7B%22cn%22%3A%221cnLnVgK1v%22%2C%22tp%22%3Anull%2C%22ppu%22%3A%22https%3A%2F%2Fdocs.google.com%2Frelay.html%22%2C%22lpu%22%3A%22https%3A%2F%2Fdocs.google.com%2Fdrawings%2Frelay.html%22%7D the xpc variable is url escaped json, here it is unescaped: {"cn":"&lt;hidden for security&gt;","tp":null,"ppu":"https://docs.google.com/relay.html","lpu":"https://docs.google.com/drawings/relay.html"} I emagine that without the relay it won't work. btw I took out the cn parameter for security, it's probably unique to your doc. I tried nulling the "cn" and then using it, but that didn't work. Even using the old "cn" with the doc open in another tab it didn't work. I'd emagine the JS here interacts with it's holding frame, so you won't get it working out of context. I'm bored now, but your next try should be to emulate the iframe environment. Setup a page with an iframe similar to the one in googledocs, and then watch messages going in/out. enjoy the reverse engineering.
Why "`&lt;hidden for security&gt;`"? It's not like I can't just `JSON.parse(decodeURIComponent(`_`xpc string`_`)).cn`, which is `"1cnLnVgK1v"`.
Crockford doesn't work on YUI afaik. They use some of the libraries he wrote, but I've met the YUI team and Crockford wasn't one of them.
I was specifically referring to the JS part of YUI. Should have made that clearer initially. YUI2 was a total mess of random JS utility files. YUI3 is way more coherent, and a huge improvement, but it still seems to fall short of the jQuery it's trying to imitate.
I see, so what do you think are the main problems with YUI that make it so disappointing in your opinion? My hope was that it at least would follow some of Crockfords minimalist philosophy....
Layout manager is Javascript. The only way you can get a fixed height bottom panel with an expandable center area is using Javascript, as far as I know (and certainly if you want everything else it supports, like draggable panels etc).
downvoted for using "an usage"
I speak French.. keep in mind that some people are making efforts to be understood and for what its worth, I think my sentence was legible. And for the record, yes this was a pun.
Thanks for your contribution :) Survey filled.
:) ok then, I guess I'll go upvote :)
Some of these look useful! I wasn't aware of this library but I'll vote for the ones that look promising to me if that works.
"[The choice of "a" or "an" is determined by phonetic rules rather than by spelling convention](http://en.wikipedia.org/wiki/A_and_an)" Quick reddit English lesson.
Still a terrible idea all around, but if you want to be extensive, you should know that gecko-based browsers (ok yeah just Firefox basically) can run this directly from Javascript provided a JVM is installed: &lt;script&gt; java.lang.Thread.sleep(2000); // 2 second of nothing alert("booga booga!"); &lt;/script&gt; Essentially, any builtin java class can be instanciated, methods can be called, and a good time can be had by all. (but you can't define new java classes from JS, so no real threading for free..) 
Very nice article, finally something good in the JavaScript reddit.
Kinda cool and yet at the same time kinda crappy! Awesome!
I don't know dojo, but here's both a jQuery and Mootools example. The general idea stays the same. jQuery: $(document).ready(function(){ var buttons = $('ul#work_nav li a'); buttons.click(function(){ buttons.removeClass('active'); $(this).addClass('active'); }); }); Mootools: window.addEvent('domready',function(){ var buttons = $$('ul#work_nav li a'); buttons.addEvent('click',function(){ buttons.removeClass('active'); this.addClass('active'); }); });
jquery form plugin does this as well.
&gt; Your script ran on 988 comments in 229ms. **THIS** **THIS IS WHY I HATE JAVASCRIPT.** **BECAUSE _THIS_ IS CONSIDERED "FAST"**
The first method could be written : function anchorChange1() { // set configuration var config = { colors: [ "#F63", "#CC0", "#CFF" ] }; // get all links on page var anchors = document.getElementsByTagName("a"); var size = anchors.length; // loop through anchors and attach events for (var i = 0; i &lt; size; i++) { anchors[i].onclick = (function (item) { return function() { this.style.backgroundColor = config.colors[item]; return false; }; })(i); } } 
@actionscripted love how all these sites are filled with bile from people like you who waste so much time and energy being hypercritical. You clearly didn't read the article very well. The example HTML was designed to be overly simple as a means of showing how you can get any item using traversing and selectors. This was not a tutorial on how to create a subnavigation. In fact, this was also not a real page nor real navigation (fwiw a subnavigation of this sort could exist on the sidebar with main nav at top so its not "completely wrong" in any case...but clearly your vision is limited by your apparent need to criticize). The script example you cite was also a means of showing how complex you can get by combining selectors, filters and traversing. Again, if you'd actually read what the article said, you'd know that.
Please forgive me, I upvoted a big bold shoutcaps.
But it doesn't look like Sprockets... is written in python.
What's a high order map?
Edit: Forget, what i said, i'll have to look it up myself... Edit 2: Seems like backslash escaping the closing parenthesis doesn't work anymore. Replace it with %29 instead to get a working, albeit ugly link.
Why oh why do people insist on using anonymously named function? var map = function(arr, func) { .. } function map(arr, func) { .. } The above two lines accomplish the same thing, with the noticeable difference that the first line creates a map variable referencing an anonymous function whereas the second line creates a named function called map that can be referenced in the local scope just the same, through the local identifier "map". 
Because it's essentially the same thing for most use cases and since it does almost the exact same thing there's no reason to care either way. Plus (snark warning) you can line up your assignments in ways that are very, very pretty: var foo = 'bar'; var qwerty = '1234'; var partyTime = function(wooo) { alert(wooo); }; It may also have something to do with ActionScript. Many client-side developers have at some point written "code" for Flash clients and most of the Macromedia and online docs/tutorials would opt for anonymous assignment. It may also be because when working with objects in JavaScript the traditional method would drop the anonymous function right on top of any existing data stored there: myObj.partyTime = function(woo) { alert(woo); }; window.onload = function(e) { alert(e.target); }; So it could be any number of these reasons. Really, who cares? It does the same thing either way. I cannot imagine a scenario where the subtle differences between anonymous assignment and function creation would matter in JavaScript.
It has certainly made a difference for us when it comes to debugging. Using named functions will actually give you nicely named function references in console output and profiling reports, instead of a whole bunch of "function()" statements.
Wouldn't this be a better implementation of number 2? function map(arr,func){ if(arr.length ==1) return func(arr[0]); var val = func(arr.pop()); map(arr,func).push(val); } 
I would think the server would be a better place for this type of code. Not to take anything away from the effort of making the plugin, though.
It's not as simple as it may sound to differentiate a browser and its specific rendering engine based *only* the http-headers you receive on the server side. Usually I use a server-side rule to shortcut a rejection and a client-side tool could be a quite handy addition.
The idea of this plugin is to allow rejection not just on page load, but also on specific page events. For example, with this plugin I could reject all IE users who click on a specific link or page, rather than just rejecting them from the site entirely. It would likely require AJAX to do this using a sever-side script. Also, as facepalm_reloaded mentioned, it is easier and more accurate to do browser detection through javascript then based on the HTTP headers.
The large browser icons in the reject overlay should be linked.
I thought jQuery made it pretty easy to ignore browser differences and let it find workarounds.
This has been fixed in the development version. Thanks for noticing.
There are still a mountain of features that can't be easily replicated on all browsers. Certain new CSS3 features and HTML5 features primarily. I've built several sites that were just too complicated to even attempt trying to get working on MSIE. Though you are correct; if your trying to make your web app cross-browser across the board, then obviously this plugin isn't something you would need.
Rejecting browsers is stupid. Suggesting they upgrade is one thing, but not allowing them access to the site is a much dumber option. 
This is the first ever stack exchange javascript community
&gt; Some example footer content. Maybe fix that?
http://stackoverflow.com/questions/tagged/javascript
Why is this being upvoted? It's a blatant rip-off of stackoverflow.
It actually isn't. You can pay a fee to use the Stack Overflow software either on your own domain or on stackexchange.com. See [Stack Exchange](http://stackexchange.com/ "8====D")
By default they still can access the site, if you actually bothered to look at how the plugin works.. The point of the plugin is the suggest upgrades. The user can easily click 'close' and continue on the site if you have configured it this way. There is even a cookie option that prevents the popup from showing more than once per browser session, so if the user doesn't want to upgrade they can still continue with the site. Optionally you can flat prevent them from viewing the site... which isn't stupid at all. I work on several projects that don't work on IE6 under any circumstances, so IE6 users need to be rejected across the board, and we want to provide the user with the clear ability to upgrade. If you have a "smarter" solution I'd like the hear it.
Redirect to customized version of the site. http://ie.domain.com/us/ or http://us.domain.com/ie/
I first misread this as WeedGL, carry on.
&gt; Shaders are actually c code that WebGL executes to render our scene. Erm... **no**. I'll give the author the benefit of the doubt and assume he meant to type "c like language"... and restructure the sentence around that... I don't like that wrapper library much at all... It'd be much better for each shader and program to manage its own state (active uniforms and attributes) rather than being managed by the wglu instance. EDIT: added civility
&gt;meant to type "c like language". As I mentioned in the post, I am new to OpenGL programming, thank you for pointing that out, I've made the correction. &gt;It'd be much better for each shader and program to manage its own state I realized this as I was wrapping up v0.1, I am pondering various methods of improving the implementation and would love recommendations. 
Ah, cool, well while we're at it: &gt; WebGL is a standard created by Khronos (the creators/maintainers of OpenGL standard for web browsers to use OpenGL. Is missing a close parenthesis that made me initially read it as though OpenGL itself is for web browsers, simple typo. As far as interface design I concede that it's all very preference based, and there are some cool things in it (I think your leveraging of the &lt;script&gt; tag to hold shaders is brilliant). Obviously this is my own opinion but: vs = wglu.getShader("tutorialVertexShader"); fs = wglu.getShader("tutorialFragmentShader"); program = wglu.createProgram(vs, fs); bonus points for using variable arguments or taking an array because, though just a vertex shader and a fragment shader are the common case, technically you can attach an arbitrary (implementation defined) amount of shaders to a program. I'm also not sure if you'd want to automatically link your program or not. All of this enables wglu.GL.useProgram(program); Which i feel is much cleaner, although i would further prefer program.use(); However that would require the program hanging onto the OpenGL context, which is a bit dubious. As far as attributes and uniforms, you can retrieve their type from OpenGL (no idea about WebGL so you'd be on your own there) which would enable to you to call the correct functions yourself. program.setUniform("ModelViewMatrix", myModelview); From that it would be possible to 1. Determine the type of "ModelViewMatrix". 2. Coerce myModelview into that type. 3. Submit myModelview using the correct glUniform* function. This is similarly possible for attributes, although I would suggest a slightly different interface, something like vertex = program.getAttribute("vertex"); wglu.GL.begin(GL.TRIANGLES); vertex(1, 0, 0); vertex(0, 1, 0); vertex(-1, 0, 0); wglu.GL.end(GL.TRIANGLES); to enable immediate mode, and something similar for vertex arrays (not sure if WebGL exposes vertex buffer objects). For vertex arrays though, something as simple as. vertex.submit(vertices); Should do fine, if you really wanted to screw with things and allow interleaved arrays i'll leave that to you but you could probably do something interesting with like format = wglu.createVertexFormat(vertex, color); and have format operate similarly to how single attributes do. I know that's alot of stuff, and I mean it's really just one guy's opinion, but I'm pretty opinionated :-p. Hope you find it useful... If you need any inspiration, i'm writing an OpenGL binding for python adhering to my design philosophy, although I didn't really intend for anyone to see it just yet, here it is: [http://github.com/Ademan/pygl](http://github.com/Ademan/pygl). src/scripts/test.py contains examples of the interfaces I've implemented thus far. It's largely incomplete though, so this post alone probably is more informative than that code. Anywho... Cheers, Dan EDIT: speaking of typos, luckily you figured out what i meant :-p 
Well, wait...what's that?
&gt;simple typo. fixed, thanks &gt;your leveraging of the &lt;script&gt; tag I cannot take credit for it, that idea is all [Vlad's](http://vlad1.com/). Also, the functions which are Vlad's verbatim or nearly so are commented with a copyright to him in the code itself, I hope that's enough. &gt;technically you can attach an arbitrary (implementation defined) amount of shaders to a program. I did not know this, [wglu.getShaderProgram](http://www.cs.rit.edu/~bpd9116/webgl/doc/WGLU.html#getShaderProgram) assumes you're passing both a vertex and a fragment shader. &gt;Which i feel is much cleaner, although i would further prefer `program.use();` Agreed, I'll look into it. &gt;hanging onto the OpenGL contex [wglu.GL](http://www.cs.rit.edu/~bpd9116/webgl/doc/WGLU.html#GL) is the GL context. &gt;As far as attributes and uniforms, you can retrieve their type from OpenGL (no idea about WebGL so you'd be on your own there) which would enable to you to call the correct functions yourself. I'll look into this too. &gt;`wglu.GL.begin(GL.TRIANGLES);` [OpenGL ES 2.0](http://www.khronos.org/opengles/sdk/docs/man/) is rather sparse/concise/limited/whatever compared to the full OpenGL spec, so GL.begin() and GL.end() are not available. Which is a big part of why I'm writing this library. Just getting something on the screen is a rather involved process that goes all over the place. I want to handle the boilerplate behind the scenes as much as possible. ------- Also, I realized something from your first post. &gt;It'd be much better for each shader and program to manage its own state The actual [addAttribute](http://www.cs.rit.edu/~bpd9116/webgl/doc/WGLU.html#addAttribute) call takes both the length (defaults to 3, which is why it doesn't need to be set for verticies or colors. And assumes you want the program tagged 'default', but it would work for multiple programs, though I need to look into avoiding collisions when two attributes have the same name in different programs.
&gt; OpenGL ES 2.0 is rather sparse/concise/limited/whatever compared to the full OpenGL spec, so GL.begin() and GL.end() are not available. Which is a big part of why I'm writing this library. Just getting something on the screen is a rather involved process that goes all over the place. I want to handle the boilerplate behind the scenes as much as possible. Ah, my bad, I'm not sure what's in and what's out :-/. &gt; The actual addAttribute call takes both the length (defaults to 3, which is why it doesn't need to be set for verticies or colors. And assumes you want the program tagged 'default', but it would work for multiple programs, though I need to look into avoiding collisions when two attributes have the same name in different programs. Having programs keep track of their own attributes and uniforms would avoid all name collisions :-). Also I said you can discover the types of attributes and uniforms, you can do that through http://www.opengl.org/sdk/docs/man/xhtml/glGetProgram.xml to get the number of attributes and uniforms, and then you can iterate over them and discover their type and names with http://www.opengl.org/sdk/docs/man/xhtml/glGetActiveUniform.xml and http://www.opengl.org/sdk/docs/man/xhtml/glGetActiveAttrib.xml in OpenGL, still no idea about WebGL but hopefully that'll help.
&gt;Having programs keep track of their own attributes and uniforms would avoid all name collisions :-). Yup, it's very much an early work-in-progress, so that's very likely where I'm going to take it &gt;links thanks, it [appears](http://www.khronos.org/opengles/sdk/docs/man/) those are all part of ES, and I'm pretty sure they've been implemented in Firefox (my dev platform) I'll see what I can do.
There are so many "please give me free tech support/teach me how to program" posts now I initially thought it was a self.programming post with someone really asking those questions. Any day now..
Well, I initially had these questions, and I've decided to share what I've learned since then.
Well, shoot. I've been wanting to make a C64 emulator in Javascript, but didn't think the performance was there yet. I'll have to check this out.
In case you're interested in the progress I've made: programs and shaders keep track of their own attributes, uniforms, and compile/link status, recompiling/relinking automatically when they've been changed. This means no more `addAttribute` calls wglu.newProgram('default'); wglu.programs['default'].attachNewShader('vs', myVSsource, wglu.GL.VERTEX_SHADER); wglu.programs['default'].attachNewShader('fs', myFSsource, wglu.GL.FRAGMENT_SHADER); wglu.programs['default'].use(); 
Hint: Use a &gt; at the beginning of the line so that it displays as a quotation.
`var cells = $("#tictactoe td");` `$(cells).removeClass("selectedX");` protip: don't do that.
Why is there a name of any particular browser/device on a javascript checklist? What year is this? I thought we were moving towards being user agent agnostic. I guess not all of us.
That's not quite right dude with an annoyingly similar username to mine. The gotcha is that a constructor function can be both a constructor and a standard function. It's the "new" operator that matters. 
Nice solution.
As a user of the Opera browser, I can assure that rejecting browsers is in fact stupid. Even if you don't have the testicular fortitude to create standards compliant sites, that doesn't mean you should block people from browsers that you haven't tested in (google, i'm looking at you). In most cases, Opera is blocked and I have to work around the blocking mechanism and when I get in, everything works just fine. If you've tested and know it's broken in IE6 or any browser, tell them that and give them the option to continue to broken land if they so desire. This should be stored in a cookie or something so they don't have to opt-in every single time they visit the site. Even when sites are broken in Opera due to Opera bugs or whatever reasons, I can then report bugs to the appropriate people (site devs or Opera devs) and sometimes use user javascript to resolve the issue client side. I can then tell the web devs how to work around the issue or just deploy the fix to Opera users who need it. Sometimes (if the site is important enough), the fix will get pushed to all Opera users via browser.js. When you actively prevent people from viewing your site, you narrow their options... which, as i stated previously, is an ignorant thing to do.
Yeah, I liked that too, nice and simple.
Holy crap! This could be THE fix for a coding problem that's been vexing me for a while now. Thanks.
Same idea, different implementations, lots of writeups: http://www.google.com/search?q=debounce+javascript+function
Nice to know it has a name.
Saw the headline and thought wow Maynard is quite a diverse guy. Great music, great wine and now java script expressions.
http://jsregex.com/
That would have been even better than a couple years back when Britney Spears wrote an article about metaheuristics.
Is there a way to accept firefox 3.5 but not 3.0?
Interesting game, but I find it more fun to type words rather than letters. My brain needs to type a sensical stream of letters to type well.
&gt;The yellow x means that testing for the presence of this global returned "undefined", the white o means that the global variable points to an object. That is fucking moronic. before reading this legend I interpreted the "x" as a cross (= yes), and "o" as zero (= no), while *it's the other way around*.
But an X can be taken to mean 'false' as much as it can be taken to mean a cross/yes. It's not the blogger's fault that our global semiotics are confused. I agree he should have used ticks and crosses for less ambiguity, though.
&gt;If you've tested and know it's broken in IE6 or any browser, tell them that and give them the option to continue to broken land if they so desire. This should be stored in a cookie or something so they don't have to opt-in every single time they visit the site. Way ahead of you. If you look at the plugin, it allows for just this. The point is to allow users to proceed anyway, if you wish them to, and even provides the option to store a cookie that remembers the users choice for that browser session.
IE started that trend, and Opera embraced it for the sake of helping page render correctly on it, since nobody ever gave a damn about testing on Opera. I have no idea why Safari does some of it too. That's awkward.
OH NOEZ!
but if X means "false" it shouldn't be the only highlighted value.. this is where teh blogger goes wrong.. he should have highlighted o in green and X in red..
okay, what wise-guy put "Narwhal" as an implementation?
Yes, I kept seeing those X's as hits, like in Battleship or something.
I would really like to know what I should add/how I should change these submissions to make people more likely to discuss them. I'd really like some feedback on my project.
I would really like to know what I should add/how I should change these submissions to make people more likely to discuss them. I'd really like some feedback on my project.
not sure how to improve comment-likelyhood but: why are you abstracting away from gl/glu? it seems pretty lowlevel anyways var axisLines = new WGLUObject(wglu.GL.LINES);
My library is higher level while maintaining the ability to use the lower level. Rather than mucking around with vertex attribute pointers and buffers you can just make an object with vertices and colors then you can draw it to the screen in one call.
I'd guess most people just don't have a browser with WebGL support. I know I don't. Maybe I'll get around to installing a Firefox nightly some day...
&gt;I agree he should have used ticks and crosses for less ambiguity, though. Or plain and simple "yes" and "no".
It's not Webkit-only, it's WebGL-only. It also works with the `moz-webgl` and not just `webkit-3d`.
Really? It doesn't work on the Firefox nightly build I have installed. I get an error that looks suspiciously like one of the known differences between WebKit and Firefox: Error: uncaught exception: [Exception... "Could not convert JavaScript argument - 0 was passed, expected object. Did you mean null? arg 1 [nsICanvasRenderingContextWebGL.bindBuffer]" nsresult: "0x80570035 (NS_ERROR_XPC_BAD_CONVERT_JS_ZERO_ISNOT_NULL)" location: "JS frame :: http://nitobi.com/yohei/WebGL%20Sample1/js/utils3d.js :: makeBox :: line 206" data: no]
anyone have a browser [this](http://learningwebgl.com/lessons/example01/) works on?
ah http://nightly.webkit.org/, i have the latest [firefox dev build](ftp://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk) though and it didn't work on it 
Why?
It's all a plan to get people to accidentally hit tab and click on their ads! But srsly. Apparently I'm way too dependent on tab completion.
Because it was there! Or because it wasn't there! Or . . . something. 
about:config and search for webgl. Then enable the one that says something like "all sites".
It could be used as some kind of toy learning environment. 
I wrote it and I reassure you it works on the WebGL-enabled browsers I tried :-) It should work on the latest dev builds of both WebKit and Firefox, I've tried it on a variety of PCs using FF, and on a MacBook Air using WebKit. If you're using the latest Firefox (with the config as described by mitsuhiko above) or WebKit with the settings as described here: &lt;http://webkit.org/blog/603/webgl-now-available-in-webkit-nightlies/&gt; -- if you're using that and it doesn't work, leave a comment on the post and I'll do my best to help out.
I fired up vim and was painfully disappointed with how un-supported it was. That said, neat project :)
That's disgusting and I love it.
I doesn't work in the latest WebKit nightly build for me. :( 
You need to enable WebGL by typing defaults write com.apple.Safari WebKitWebGLEnabled -bool YES ...into a terminal. 
Now it's working, thanks!
You could consider putting it in a timed loop. Alternatively, use a blocking call to a dummy routine and count a timer down.
This is how NOT to do it. This is completely wrong and will lock up the entire browser because the loop blocks the browser from doing anything else. As a result, the user sees the browser as being frozen. If you need to pause execution in your script you should use [setTimeout](http://www.w3schools.com/js/js_timing.asp) appropriately, which does not lock up the browser.
Made with Flusspferd technology! :-D
I'd really like to play with this, but not nearly enough to run an installer.
At work, I used to enjoy doing server-side JavaScript in classic ASP for this very reason (same language on both layers / lots of code reuse / less mental context-switching). If JS became common as a cross-platform server-side language, I think you would see the same vibrant library/framework ecosystem that you now have on the client-side (jQuery, Prototype, Dojo, ExtJS, etc). I believe it would be a reasonable competitor to Python and Ruby. I'd use it over PHP in a heartbeat.
[Jaxer](http://www.jaxer.org/) has been around since about 2006.
http://jshq.org/commonjs/
I love the design of the website, so clean. Unfortunately, this reminds me of Apache wicket. I hate Apache Wicket. I'll have to try for myself though...
At work I'm using something similar except running on Rhino. Its kind of weird using Rhino since Javascript is basically Python with braces (array comprehensions! destructuring assignment!), but then you write client side and you are sad again.
same here. I'm not a programmer by any means and knowing one language and fairly well and being able to use it server and client side is great (eg use the same template language both in server-generated html and in json/client-side generated html).
MooTools has a server-side edition http://mootools.net/download
GREAT article. It really shows why MooTools stands above the rest when it comes to creating reusable JS objects. I've been using Moo for a few years now and I didnt know that mutators worked that way, pretty damn cool.
Not to be confused with [V8-Juice](http://code.google.com/p/v8-juice/), which sounds like a port of this project to Google's Javascript engine, but isn't...
I am surprised none mentioned [Haxe](http://haxe.org/): * Write your server and client in same language (check) * Javascript-like language (check) Plus, Haxe has many excellent language features like type inference and reflectivity. It has been actively developed for the last several years and has pretty good performance.
Not sure why you're getting downvoted (maybe 'cuz you didn't mention Jaxer by name?), but Jaxer was the first thing I thought of when I saw this headline, too.
Yea, the title "*the* JavaScript Web Framework" is already taken.
Or do it in any browser without a stupid addon (paste in address bar/use as bookmark): javascript:%20(function(){var%20el=document.createElement('div'),b=document.getElementsByTagName('body')[0];otherlib=false,msg='';el.style.position='fixed';el.style.height='32px';el.style.width='220px';el.style.marginLeft='-110px';el.style.top='0';el.style.left='50%';el.style.padding='5px%2010px%205px%2010px';el.style.zIndex=1001;el.style.fontSize='12px';el.style.color='#222';el.style.backgroundColor='#f99';if(typeof%20jQuery!='undefined'){msg='This%20page%20already%20using%20jQuery%20v'+jQuery.fn.jquery;return%20showMsg();}else%20if(typeof%20$=='function'){otherlib=true;}%20function%20getScript(url,success){var%20script=document.createElement('script');script.src=url;var%20head=document.getElementsByTagName('head')[0],done=false;script.onload=script.onreadystatechange=function(){if(!done&amp;&amp;(!this.readyState||this.readyState=='loaded'||this.readyState=='complete')){done=true;success();}};head.appendChild(script);}%20getScript('http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js',function(){if(typeof%20jQuery=='undefined'){msg='Sorry,%20but%20jQuery%20wasn\'t%20able%20to%20load';}else{msg='This%20page%20is%20now%20jQuerified%20with%20v'+jQuery.fn.jquery;if(otherlib){msg+='%20and%20noConflict().%20Use%20$jq(),%20not%20$().';}}%20return%20showMsg();});function%20showMsg(){el.innerHTML=msg;b.appendChild(el);window.setTimeout(function(){if(typeof%20jQuery=='undefined'){b.removeChild(el);}else{jQuery(el).fadeOut('slow',function(){jQuery(this).remove();});if(otherlib){$jq=jQuery.noConflict();}}},2500);}})(); Source: http://www.learningjquery.com/2009/04/better-stronger-safer-jquerify-bookmarklet
I think by not acknowledging that *Juice* is still a perfectly valid javascript web framework (albeit a less *aptly* named one), it sounded like I was denegrating it.
Why don't you start now? Many popular frameworks (jQuery, etc.) have already been ported to server-side, and there are many new frameworks popping up. It's easy to add in an Apache module and get started. [There are even Ruby-style frameworks and ports available](http://en.wikipedia.org/wiki/Server-side_JavaScript).
I expected a different [V8 Juice](http://www.v8juice.com).
However safe it looks, using the with statement makes me involuntarily nervous. I like the approach, though.
You're right, I probably should. I confess massive ignorance on the state of server-side JavaScript. After I left ASP and the MS stack for LAMP I really never looked back, but I've always had a soft spot for JS. Thanks for the link - I had no idea there was so much going on.
Wow, it's almost as good as Mootools in a mashed together, hacky way.
Reported for unattributed stealing of smashing magazine's content, yet again.
In my experience, Jaxer hasn't gotten any better since 2006. I tried it for a project that I was working on recently. There are bugs, and all I hear is the sound of tumbleweeds from the developers.
Can't seem to find any demos for it. Also, the source code is kinda sloppy. EDIT: Capitalized the 'A' in 'also'.
Holy crap! This looks so useful. Hopefully it'll work with Firefox 3.6.
**AD** **AD** **AD** **AD** Boring dribble (content?) **AD** **AD** **AD** **AD** **AD**
With Adblock Plus: &gt; Boring dribble (content?)
Fun.
Interesting if only for this: [Browser Support Table](http://www.bbc.co.uk/guidelines/futuremedia/technical/browser_support.shtml#support_table) Leading to this: [Decision Tree for Degradation of Browser Versions](http://www.bbc.co.uk/guidelines/futuremedia/images/Decision_tree_for_browser_deprecation_100.gif) 
Wow, the BBC released an open source javascript framework? That's very interesting.
I read this as "GCC Blow Tutorial". Hmm.
You should read this: http://www.reddit.com/r/javascript/comments/8zd3e/john_resig_on_glow_the_bbcs_glow_effort_has/ Resig (creator of jQuery) was pissed that they spent 2 years creating a library just to support Safari 1.3 instead of collaborating with jQuery folks to add this functionality to the jQuery library...
it's not really what happened though.... the bbc has had some from of javascript library for close to a decade, it's just a lot better now :-)
Personally I can't think that this would be possible and accesible... the only way i can think it could be done is if you get the zones where you want the click to work. And set an event handler on document and then if the click is in one of the zones you could fire an Event to the relavent element....to do this would be OTT in my opinion. What I suggest is you have kind of a psuedo affect. Set the image as the background and have the body set to opacity 0.8 or 0.5 or something. 
Nice! how about an onmouseover that highlights the character so I can just hover and Ctrl-C. edit: no it doesn't work in any version of IE. But hey.
I'm not very good at programming... I've never used closures in JS. Though I have read about them, and done a little experiment. Has anyone used these in their day to day programs they get paid to write?
This is a set of JS tools called "Closure", not a set of JS tools for using closures.
What saurik said. And people -do- use closures everyday considering most of the javascript code is async, event based, with a lot of "give me this piece of code" (i.e. sometimes closure) "that I can execute later"
Gah, terrible name.
Closures are also highly practical for encapsulation, avoiding namespace polution. You will often see a construct like &gt; (function() { ... })(); It creates an anonymous function and executes it on the spot. This has the effect that every otherwise global variable inside is only accessible to other code inside and not on the outside. Then you can export a few globals in a controlled fashion by writing &gt; this.myGlobal = function() { ... } inside the above block.
It does collide with Clojure.
Bout time! I'm surprised it wasn't included before..
I would love to see a build of either Safari or Chrome which allows you to switch between the Nitro/Squirrelfish engine normally supplied with WebKit and the V8 JavaScript engine in Chrome. 
&gt; It makes Droid the first shipping product I know that uses V8 on an ARM processor, although V8 has included an ARM JIT compiler for some time now. For mobile web developers (like me), it means we're one step closer to having desktop-quality rich web applications on low-power handheld devices. … wat?
This is why i didn't get an iPhone. It's been a long wait, but it's finally here.
Strange coincidence. I just used javascript to randomize background images for h2 elements. What's cool about it is that each h2 element on a page takes a random icon from a list of gifs, sort of like a list-item marker, but using random gifs. 
Ohhhh... ta.
Ahhh, thanks.
this looks absolutely brilliant. And only 10k lines of code. On an unrelated note, can anyone tell me why apache went threaded? It seemed like a silly idea all those years ago.
it's pretty juicy 
Unsupported Browser The socket to the server could not be opened. This suggestest you do not have Flash installed. Download / Update Flash. Also if you're using Internet Explorer please consider installing one of the following browsers: Mozilla Firefox 3.5, Safari 4 or Google Chrome. But... I am on chome....
Do you have some kind of Flash blocker? if so you'll need to add our domain to the list. Also if port 4131 is blocked it wont work either (this is the servers port)
&gt; Unsupported Browser The socket to the server could not be opened. I'm using Firefox 3.5.4 with Flash installed.
any kind of flash blocker installed? Theres a chance it just timed out. If you don't have a flash blocker installed try reloading a few times. If you still aren't able give me a [PM](http://www.reddit.com/message/compose/?to=philo23) Also if port 4131 is blocked it wont work either (this is the servers port)
Can't login as guest in Firefox 3.5.5 and Safari 4.0.3. Nothing happens. No visible errors, no console-reported errors, nothing.
is it possible your firewall (or company/school's) is blocking the chat servers port? (port: 4131)
Could you please try visiting this link: http://joltproject.com/~philo23/Jolt/#mode=debug Make sure it has the #mode=debug on the end and then check the Firebug/Web Inspector console, and then tell me what it shows
Just firebug: * http://imgur.com/jEJYR.png Firebug + in-page console: * http://imgur.com/tqPgg.png Firebug's net panel + in-page console: * http://imgur.com/OD76I.png
Just tried it again, new output for both Firebug and the in-page console: * http://imgur.com/SP7IF.png
I had the same dialog show up. It seems to be tied to a timeout that starts to count down before the page is fully loaded. Work-around: ignore the dialog, wait until the login dialog show up under it, then reload the page. With the JS and SWF assets cached, you will beat the time-out and partake in the glory of the chat room. philo23: Don't start the timeout until the page is fully loaded. Not everybody has a decent connection.
what are you using server side? 
Damn, I thought this was talking about google closing its doors, then I discovered it's only the fourth post about their confusingly-named JS library.
ah, it looks like your name is too long, it seems i dont parse the e=bad for the login, my fault, if you try connecting with a shorter name it should work.
a custom built python server written by my friend.
Yeah i probably should be using the security-error code that flash generates, only problem being is when flash doesn't get embedded due to browsers errors (Internet explorer i'm looking at you). I'll refactor that code.
github link?
the servers source code isn't currently available. But it will be in the future.
Very nice chat room
I appreciate the passion, but I always associate Mustangs with double-parking, muffler-less douche bags.
 I may be being dense, ( please oh please, enlighten me) but between the classical and prototypal patterns, what is the difference? the setting up of the Phone constructor is the same, which just leaves the second parts: Phone.prototype.getPhoneNumber = function() { return this.phoneNumber_; }; Phone.prototype = { getPhoneNumber: function() { return this.phoneNumber_; } }; in both cases you are declaring the Phone.prototype.getPhoneNumber method.... just that in the second case the prototype object literal has no other methods besides .getPhoneNumber? Does it even necessarily have any other methods in the classical pattern? Or maybe it has to do with what &lt;this&gt; refers to? confused...
Erik doesn't explain this very well. Both the "classical" and "prototypal" patterns are OK — it's the "functional" pattern that's the true anti-pattern. The difference is that the first two patterns have the instance methods defined only once (on the prototype). The last pattern has the instance methods defined every time the constructor gets called.
It looks like somebody has optimized away the author's indefinite articles: &gt; We need to be extremely careful with this option and, as result, rather than a Compiler, we will deal with a "code messer" where hard debug will become automatically the hardest ever.
The link I provided is actually a direct link to the time index, but if you hit the play button within reddit they don't parse that for the embedded player: the question occurs during 53:44-~56:05.
holy shit that was fucking boring
If you [RTFM](http://code.google.com/closure/compiler/docs/api-tutorial3.html#propnames), you'll see that teh advanced mode has some prerequisites, in this case quoting identifiers you want preserved. // ==ClosureCompiler== // @compilation_level ADVANCED_OPTIMIZATIONS // @output_file_name default.js // ==/ClosureCompiler== (function(){ "use strict"; this["myLib"] = this["myLib"] || {}; })(); myLib.test = 123; compresses fine in advanced, (as does just writing "this.myLib.test" in the last line, not sure if that will always be the case). In advanced level, it's a compiler with certain requirements, not a mere compressor. edit: formatting
&gt; Python style a part, where the underscore has a concrete meaning Erm… no it doesn't. In python, the single-underscore prefix is a *convention*. The double-underscore prefix (`__foo`) does something (introduce name mangling).
I was actually at that talk. When the speaker mentioned it was a public talk I burst out laughing. Thankfully that wasn't picked up by the mic...
Ajaxian has a post about Emile with some examples: http://ajaxian.com/archives/emile-stand-alone-css-animation-javascript-mini-framework
Umm ... so what? I can deal with **7** articles on closure on the front page, but why do I care about it being *mentioned* in may? In other news: Google craps another gadget. Redittors start digging for the gold that must be there.
I like it, but no one would talk to me. Just like a real chat room! 
Thanks
Frankly, I don't even like Closure, and really appreciated Waldemar's rapid "this problem would always occur" response. I was actually just watching the presentation randomly, saw the interaction, thought it was hilarious, and felt others would enjoy it.
I think this is awesome! Really addictive little puzzle, like halfway between a normal slider and a Rubicks cube! Does it work well on the iphone/touch enabled smartphone?
This one doesn't work on an iPhone b/c of the interface. I suppose I could tweak it for the iPhone/iPod people. My co-worker made a game with canvas that should work on an iPhone that's just as addicting. I'll try to get him to post his soon.
Awesome! This is really fun. How did you come up with the idea?
&gt; halfway between a normal slider and a Rubicks cube! That is *exactly* what I was thinking. I love both of those so this is awesome.
I think I saw a similar game somewhere back. My coworker and I had some free time a few days back so we each decided to make a javascript/canvas game. We wanted to prove people can make some fun stuff without flash.
Solid game -- try to avoid making it necessary to distinguish between red and green though. I have trouble telling them apart and it can be a huge hurdle.
Very similar to iGummies, but with better scrolling effects. http://www.igummies.com/cube
You should save the highest scores, people likes competition. Ask for a nick after completion, then save it to a db, store the nick as a cookie.
Wow... fantastic puzzle game! I know it's a good puzzle game because I quit very quickly after trying in disgust at my lack of abilities!
&gt; This game currently doesn't run on internet explorer without the Google Chrome plugin. Hey, flash is a plugin too yet this game runs on all most major browsers (safari, chrome, firefox, and opera) with out a plugin. Best part of the page. Suck on it, IE users.
*opens firebug console* SlideO.prototype.checkForWin(c=true); *wins game* =]
Very cool, level 3 and still not bored :-). One minor complaint, when you beat a level, the dialog box pops up before the blocks slide into their final positions, it bugs me a bit.
http://excanvas.sourceforge.net/
cool, now can you make a version of the game that doesn't discriminate against color blind people?
ah okay the other levels dont' bother me so much, but the red and green was killer texture differences would help -- even just vertically inverted the images for the blocks
&gt; The truth is, developers will switch to Closure because it bears the Google name, and that’s the real tragedy here. That's close to what's shitting me up the wall at the moment, and I'm glad it's been said. Right now it seems like anything that comes out of the goog gets incredibly hyped by the peanut gallery, regardless of what it is, how flawed it is, or what has come before. Not to say there aren't interesting properties to many things produced by the incredibly talented people they employ .. but 7 reddit headlines on the level of "OMG GOPONIES!" don't give me any food for thought. Any chance we can get back to discussing things on their merits, rather than this cult-of-not-even-personality?
Alright, alright. I posted it now.
Good point! I added some inner shapes to the boxes. I hope that helps
I tried excanvas. It doesn't work properly for this game. :(
Yeah, that's a good idea. I'd love it if I store data in this way (rather than a cookie). http://webkit.org/blog/126/webkit-does-html5-client-side-database-storage/ I don't think it works on firefox, opera, or chrome yet?
Nice game. Almost as good as my SlideO game. ;)
omg totally -- i think even having any sort of inner color on the boxes helps with the perception -- like just having a black circle in the middle of the pieces gives me way to like 'normalize' the color of the block against a standard!!! thanks!!! i can play the first level now!
Did you publish the source to the SlideO game? I would like to learn some GUI programming in Canvas, maybe see if I can extend it to make it easy to develop, but I don't have a starting point. I've seen some tutorials for drawing and animation, but no game-type interaction.
Anyone knows why I cannot connect to this website? It keeps saying "connecting". Maybe could post a mirror site? I've done my own experimenting with canvas programming and I'd like to see this.
I haven't published the code so far. I really should. There's a few things I'd like to clean up first. If you'd like to see some source code to animation with canvas look here: http://www.chromeexperiments.com/ (warning you may need chrome for some of the demos to run)
Yes for me too. I can provide hosting if you want.
Fuck yes! I've been trying to build this on my mac for a few days with no luck. Thanks Next up Raccoon -- Mootools/v8cgi webframework http://raccoon.keetology.com/faqs/
Number 1 rule of Javascript: You should cache anything that is going to be used more than once. DOM traversal takes so much time.
The `for (var i=0; i&lt;imgs.length; i++)` loop could be optimized to `var i = imgs.length; while (i--)`.
"See CRAZY MICRO-OPTIMIZATIONS" taken straight from the comments
his reason not to do those "crazy micro" things is code clarity. the while loop is arguably simpler and clearer than the for loop here. 
This just emphasizes the really poor state of JavaScript infrastructure at the moment.
Soooo... Is that a good thing?
Very nice. I wonder if there's a way for the client to send a request for updates to the server... that wont be answered until there is some information to send? That way there's not 1 hundred clients constantly polling the server. I think something like this exists - where a webpage would keep sending new content without updating the connection.
Ahha! Another mechanism is related to a special MIME type called multipart/x-mixed-replace, which was introduced by Netscape in 1995. Web browsers would interpret this as a document changing whenever the server felt like pushing a new version to the client.[1][2] It is still supported by Firefox, Opera and Safari today, but traditionally ignored by Microsoft.[3] It can be applied to HTML documents, but also for streaming images in webcam applications. http://en.wikipedia.org/wiki/Push_technology
The most beautiful part is: JS on the server. Kudos!
TABLES?????????? NOOOOOOOOOOOOOOOOOOOOO You should use DL, DT, DD tags, google em
Nobody uses that anymore. It was neat though, it would allow a web page to update an image periodically (like a webcam) without reloading the whole page and without using any javascript. The cool kids now use a long-lived XHR session that the server holds on to until it has something to send back. It allows for real-time notifications from server to client without the additional traffic of polling the server repeatedly. Since the client re-opens a new XHR request immediately after, it lends itself well to HTTP/1.1 keep-alive mechanisms, reusing the same TCP connection continuously, further minimizing the network overhead. The downside is that it ties a socket on your web server. That makes servers that use a significant amount of resources per incoming http requests unsuitable for this. Generally, this use case screams for a light async I/O-based http server. Unsurprisingly, that's exactly what this little chat system is using. http://en.wikipedia.org/wiki/Comet_%28programming%29 
Very cool app! How well does it scale? Meaning, how much bandwidth do you need if you have 100 users (maybe spread across several chatrooms) talking at once?
shut it
"Comet" - Heh, I've just found a buzzword for my CV.
Wait a minute ... you guys are *charging* beta testers $20 each?
So... In short, this is an article about a bunch of optimization methods that were ineffective?
If you really want to slow things down (for...fun?): var someArray = ['foo', 'bar', 'howdy']; for (var i = 0; ((function() { alert(i, someArray.length, someArray[i]); return (i &lt; someArray.length - 1) ? true : false; })(someArray[i])); i++) { } ...just move the condition check and actions into an anonymous function in the middle clause of a for loop. You keep the main block of the loop empty, and have nearly doubled the amount of time it takes to do what a normal loop (`for (var i = 0; i &lt; someArray.length; i++) { ... }`) would've done. The real problem with this article is that he's trying to optimize what cannot be further optimized.
Cliffnotes Version: No further optimizing needed for normal people?
did i break it? http://imgur.com/OqvN4
The default configuration works pretty well for JS, including syntax highlighting. Can you be more specific?
what a bunch of crap
I've actually found vim's default handling of js to be somewhat lacking, especially with respect to indenting and formatting; compounded by inline javascript in html, and confounded by inline javascript in php. The best I've been able to do is use javascript.vim by Tye Zdrojewski in tandem with IndentAnything.vim by the same author.
I was very annoyed of ctags default tag generation. Always had to add my custom regex in ctags command which is not perfect. Then I found [this git link](http://gist.github.com/199338). To make it work place the file in your $HOME folder as .ctags and copy the javascript.vim as js.vim in your syntax folder and add "*au BufNewFile,BufRead *.js,*.javascript,*.es setf js*" in your .vimrc file. To make it work with taglist add "*let tlist_js_settings = 'js;f:function'*" to your .vimrc file.
I will have to try javascript.vim. However, if this helps, I have a syntax file that handles the case of CSS and JS intermixed into HTML (and vice-versa, although it is somewhat application specific for my purpose with a JS-compiler I had been working on), as well as Python via PSP. http://svn.saurik.com/repos/menes/trunk/profile/.vim/syntax/swill.vim Use it with: au BufNewFile,BufRead *.css let b:swill = "css" | set ft=swill au BufNewFile,BufRead *.js let b:swill = "js" | set ft=swill au BufNewFile,BufRead *.html let b:swill = "html" | set ft=swill au BufNewFile,BufRead *.sql let b:swill = "sql" | set ft=swill au BufNewFile,BufRead *.swl let b:swill = "swl" | set ft=swill
swill, how apropos. well done, i'll give it a go.
Doesn't work in Opera 10.10 so you get no cake! =)
This article provides no sample code or benchmarks.
Heeey, somebody worked very hard listing things that other people did.
This looks really impressive. Can't wait to try this out.
Just tried this out: wow! This is firebug on stereoids. 
I'd say the real problem with this article is that his measurement technique has so much error in it that he can't actually learn anything about the things that he is benchmarking. ;( I don't think anyone expected a /dramatic/ performance improvement with the tiny changes they were suggesting, especially given how fast the loop already was; but, for example, I'm working on a compiler that targets JavaScript optimizer, and knowing what form of loop control structure tends to be most efficient would be valuable, and this article totally fell flat on providing that. I'm probably going to run my own benchmarks on all of these issues soon and will publish an article with the results. 
prelude to a disaster
fucking silverlight needed to play a video? I downloaded it and it still doesn't play it! I get a full screen of black. screw that shit.
I'm on linux, and I was served a direct link to the video. Enjoy: [http://ecn.channel9.msdn.com/o9/ch9/2/7/8/5/0/5/IE9JSEngineEarlyLook_ch9.mp4](http://ecn.channel9.msdn.com/o9/ch9/2/7/8/5/0/5/IE9JSEngineEarlyLook_ch9.mp4)
Err...why didn't they just use the &lt;video&gt; tag? Or should we all wait for IE9 to come out until we can be sure we have all the right versions of all the necessary Microsoft proprietary technologies, protocols, and codecs before we can watch the video? *Edit: Both statements are sarcastic, and rhetorical questions.
&gt; `(i &lt; someArray.length - 1) ? true : false` Why can't you use `i &lt; someArray.length - 1`?
Can someone explain this "blue-eyes approach to simplified web development"?
Way overcomplex. There's little good reason to be using character code conversions in any modern language with indexable strings. function password(length, special) { var chr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz12345657890", schr = "!@#$%^&amp;*()-=_+"; var p = "", s = special ? (chr + schr) : chr; for(var i=0; i&lt;length; i++) p += s.charAt(s.length * Math.random()); return p; } Same effect, a third of the code, more efficient (no wasted loops), and you can use custom character sets easily, in case you don't want confusing character conflicts, like "I" and "1", or "O" and "0".
&gt; Is it worth creating rich and innovative twists on what is possible or should we stick to straight-forward uses of the language? Another possibility would be to evolve the language a bit. There's a JS runtime that already support extensions like: &gt; function stuff() "string to return"; ES4 would have been a giant step toward that, but whatever. Waiting a few more years until some committee gets their act together is good too. 
I'm not getting anything, and the sliders don't work. =(
I had to open up the firebug console, otherwise I get an error that "console is not defined". But nice trees.
Thanks for letting me know - I've removed the console output now so hopefully it should work for others without Firebug.
Neat. This is reminiscent of an earlier [foray into client-side compression](http://ajaxian.com/archives/client-side-tar-and-lzma-compression) with BrowserPlus
fail. there's so much wrong with this
Explain?
Don't get anything in Opera.
it would be cool if you could input your own resursion rules to make different shapes other than just the basic tree a la [L-systems](http://en.wikipedia.org/wiki/L-system)
It would be great if your script had the ability to be interrupted and would not lock up the browser when using daft settings. Learned that the hard way, obviously!
You could prevent browser locks by using "faux threads" as described in http://www.julienlecomte.net/blog/2007/10/28/ or the javascript worker threads introduced in FF 3.5.
because a) according to the article you're not compressing it, you're increasing the size of it by 33% b) it doesn't work cross browser c) you should just do this server side if there's a reason to do it all...
You need JavaScript help, not Java help.
Dammit, that's what I meant. :-/
I don't understand what you're trying to do.
I'm basically trying to copy my site over, but when I copy the lightbox gallery it doesn't work and I don't know why. I don't know how to replicate the line of code above on my end.
Not trying to be a smartass, just trying to understand the problem: what is wrong with copying and pasting?
This is really nothing more than packaged XMLHTTP combined with a network socket app written in Python. And the "Bonuses" about "50 requests per second".. of course you would get that if you forced the implementer to basically substitute re-route their calls to an alternate network application. This gain ... is ultimately.. Okay, If you like Python and you dont want to use JSP or you simply know nothing about TCPIP programming, this would be a possibility, but you're circumventing some great specific solutions like the ones being worked on by the Webkit team and the incredible SSI by Opera Software. Am I wrong? i think it would be more exciting to see it in a binary with multiple releases, to make it indepedent from a server side scripted languge, aka lightHTTPD. 
&gt; picard.routes.engage(request, response) Make it so!
thanks for the feedback, maybe I should edit my post to clarify some things: a) my approach doesn't increase the size by 33%, since the resulting .zip is not base-64 encoded (only the pure JSZip approach needs to do this to serve the zip as data url). it just has zero compression. b) it does work cross-browser, but requires gears to be installed c) In the beginning of the post I mention the disadvantages of server-side compression, which might or might not apply to your web app. I will sketch some more concrete use cases in a follow-up post, but when your app has to serve multiple files and their names/folder structure must be retained, putting them in a .zip is the most user-friendly way.
It's not just about HTTP though. Node.js is attempting to breaking evented I/O to the lay person via JavaScript. Also, the ability to build full server-side stacks with JavaScript in this manner opens up quite a number of interesting possibilities. Unfortunately this submission is a cross-post from /r/programming. Perhaps you might find the discussion on the other more trafficked submission of interest? http://simonwillison.net/2009/Nov/23/node/
cool! always happy to supply irrelevant criticism!! honestly i have no idea what gears are! Maybe that's a subject for a different blog post? It's just that if you're creating a web app and worried about usability it doesn't seem that costly to do this server side -- since it's my expectation that you were fetching all of the content from the server first a la themeroller.. I suppose if you make creating an app using canvas that let's you let's say draw images and want to download all of these images at the same time -- and they're all local and not on the server it makes a lot of sense!
I *think* you need to copy over all the included scripts, eg all these files: /universal/yui/yahoo-dom-event/yahoo-dom-event.js /universal/yui/animation/animation-min.js /universal/scripts/global.js /universal/scripts/lightbox.js /universal/yui/get/get-min.js /universal/yui/dragdrop/dragdrop-min.js /universal/yui/connection/connection-min.js /universal/yui/element/element-min.js and the javascript to include them.
Generally, three things: 1) You're not learning anything and are in a bad spot when you need to debug, modify or enhance that code. 2) You're probably copying over more code than you need, which can cause its own set of problems. 3) You're probably taking someone else's code; in this case, I believe the original poster is taking proprietary stuff (Squarespace.Lightbox et al.) and using it on a non-Squarespace site, which is a violation of their Terms of Service.
You are breaking the law by doing that; be careful. Per their Terms of Service ( http://www.squarespace.com/terms/ ): "You agree that you will not ... copy [or] transfer ... any programming code or any source code used in or with the Services. You may not ... create derivative works based on ... the Services, in whole or in part. You agree that violations by you, any other person or entity, of these copyrights, trade secrets, patents, other intellectual property protections, or the terms of this Agreement will be prosecuted to the fullest extent of the law in the federal and state courts located in New York." Just because you can view source doesn't mean you own the code. Someone spent a lot of time writing SSLightbox and the other libraries, and you agreed to a contract saying you would not copy their work to another host. Next time, *read* the ToS and stick to open source.
Sweet! Ps: Your code isn't that bad... (in reply to the js comment)
`//Yes, my code is horrible. No, I don't care.` Right on. This is cool. :)
Neat, but why?
Wow, that's pretty cool, the quickness of the loop saves you a lot of 'fancy' (wasteful) animation. Oh, I've seen code that is a lot worse.
Yeah, I decided to take this into consideration as well. After many headaches I decided to just make a similar-styled site from scratch and use the open version of lightbox.
Nice!
Why was I thinking of a clock that lets customers know how long until last call?
The bar with the seconds is not moving smoothly. It is almost flickering while moving. It looks like it increases sometimes by 1 pixel sometimes by 2 pixels in size. I would expect also that the other bars move only on overflow. For example the minutes bar should move 1/60th when the seconds bar overflows from 59s to 0s. Now it moves at arbitrary times.
sweet!
[Clocky 4](http://edutom.co.uk/clock/4.html) is better. *Edit*: Sorry, I meant worse.
Thanks, but you could have warned us it's 211MB
Very cool! You should place a trapezoid at the edges of the bars to give them an isometric faux-3d look.
Oh, like the [Opera Friday countdown widget](http://widgets.opera.com/widget/6640/). You might want to grab the [Opera 10.20 alpha](http://my.opera.com/desktopteam/blog/opera-10-20-goes-alpha)
Haha. You came across that while I was working on it. Have another look now :-)
For the hell of it. I've developed a fascination with clocks recently.
I've not had that problem while testing, but it is pretty difficult to get stuff running smoothly as setInterval doesn't guarantee an execution time. I'll try and tighten up the loop and make things run a little smoother :-) 
Much improved. You're truly pushing the boundaries of horology.
Thank you, good sir :-) I'm going to have to stop editing files live, or pick filenames that are less predictable :-P 
That, good sir, is a good idea :-)
I've read your CV, know where you work and what your name is too. Just saying.
Awesome. I saved you about 2 minutes of googling I think :-)
http://excanvas.sourceforge.net/
how do i take it out?
very cool. I've seen an actual clock just like this. I love it!
Really like it! http://edutom.co.uk/clock/3.html &lt;- this is a great idea, obviously a bit awkward to read ;)
Thank you :-) It's quite amazing how many people seem to have changed the numbers to see the other ones - I love that slightly hackerish mentality. 
Awesome! Can you remember where you saw it by any chance? 
I did think about that. I might just bother to put that in. Thank you, kind sir :-)
I took your code and screwed around with it. I've never done any JavaScript before, but I made a kind of cool triangle clock. I have no idea how to host it or anything, but this n00b thanks you for having easy to understand code.
This ran extremely slowly on my fast machine, with FF3.5 on arch linux. I increased the setInterval() parameter to see if that helped, which had the effect of helping at first then it started to drag again afer a few cycles. Might anyone know if this behavior reflects on the slowness of canvas rendering, the repeated calls to Date() or all the floating point math in nested loops? To me, it doesn't look like anything that should tax my system, but the effect is quite noticeable, including causing my system tray clock (which reflects seconds passing) to stop updating it's display for seconds at a time.
I'm sorry to hear that. Personally I've always had problems with FF under linux when using canvas. I've done a few simple canvas experiments and haven't done very well with the performance in FF under linux at all. FF3.5 was an improvement but not by much. FF under windows seems to deal with canvas a lot better for some reason - not sure why. FYI, the chrome binary for linux works really well for canvas in my experience. Of course, lots of new Date()s and FP math in something that runs every 100ms isn't good either - I shall look at improving it.
You are most welcome :-) I've always found it difficult reading some of the 'hardcore' JavaScript that the pros write. Feel free to send me the code in a message and I'll pop it up alongside the others, if you'd like.
I'm racking my brain but I can't remember. Damn, this is going to bug me.
Right you are! I have a virtualbox setup with windows as a client system, with the same version of firefox. Sure enough, the clock ran just fine there. Thanks for the input!
I played around with your code some more. I commented out the canvas, and all references to drawing, but kept all the loops etc. I added a div for diagnostics, and put in a function ( updateDiagnostic() ) to update it's innerHTML and used it like so: ... var hourRotation = (fullRotation/12)*(cHours+(100/60*cMinutes/100)); var minuteRotation = ((fullRotation/60)*(cMinutes+((100/60)*cSeconds/100))) - hourRotation; var secondRotation = ((fullRotation/60)*(cSeconds+(cMilliseconds/1000))) - minuteRotation - hourRotation; var diagnosticOut = "hourRotaton: " + hourRotation + "&lt;br /&gt;" + "minuteRotation: " + minuteRotation + "&lt;br /&gt;" + "secondRotation: " + secondRotation; updateDiagnostic(diagnosticOut); ... now there is no lag in Linux. Introducing the canvas element, and letting it draw the outside arc of the clock, even while commenting out all the other drawing actions, still drags down the system. Sigh. So now we know that it's not the date calls, or the FP math, but the mere presence of the canvas tag. Works fine under windows FF 3.5 just as you wrote it, btw.
works, but scrolls to top
Awesome! Doing now! :D
Great video, I learned a lot about node and the reason why it exists. I'm definitely excited about what it can/will bring to web dev. 
This was a very inspiring video. I really want to read up on Node.js and hopefully take it for a spin. Kinda pissed I missed JSconf as well...
http://edutom.co.uk/clock/bluedice.html Well done, sir! I like it very much :-)
how impossible will it be to get something like this running on a shared host?
Very. Stop restricting your toolkit and get a VPS. Surely any self-respecting web developer can spare $20/month. http://slicehost.com or http://linode.com
Yeah, I have one. But I'm just wondering about uptake; it seems to me that it's only when stuff starts hitting Dreamhost, etc, that it starts getting tons and tons of development going on.
Like what? In my experience, when things go mainstream (or mainstream in the development world), the community around that project starts to go downhill a bit. Many frameworks for example; I adore Ruby on Rails, but "back in the day", it felt like it had a nicer community surrounding it. And this really wasn't helped by Dreamhost and many shared hosts getting support for it. And just look how bad the PHP community became!
I think it's just kind of a inevitable bummer that when an open source project becomes successful, there's a shift from the initial flurry of creative development to maintenance. I think that's kind of happened with Rails. But I think it's also true that when a huge community of users of a platform, as opposed to developers of the platform itself, develops, then there a lot more comes out in the way of usable extensions to the platform. Like, say what you want about PHP sucking -- it does, in many ways. But after having worked in the Rails world for a long time and being forced into PHP, I was very surprised to find that just about any possible tool I could think of was out there, somewhere. If you need it, someone's written it. So I hear where you're coming from on the niceness thing -- on the other hand, when the proverbial shit hits the fan, it seems better in the end to me to have a ton of usable software than a friendly community. And anyway, those early days communities are often not as nice as they portray themselves to be. 
This is why I love Reddit :D Thanks heaps!
No problem at all :-)
COOL!!!!!
Even on Chrome that is slooooooooooooow.
Most impressive; although the simulation is working the cpu quite hard ( up to 46% for me ).
it's very impressive and too slow even on chrome. the problem is, are browser going to be substantially faster soon? i don't think (even though i hope) so. browser/javascript speed has taken a huge leap in recent times, but now that the easiest optimizations are made, further speedups will become fewer and have a smaller impact. webkit and ff both jumped from pure interpreted to (at least partly) JIT compiled native code. that's a speed improvement nobody will top easily. better graphics hardware acceleration maybe - and this may very well be the bottleneck here (i didn't look at the source). they're working on it in FF (looks promising - DX Cairo backend) and IE (long way to go) - dunno about the other browsers. so maybe there's hope for this.
For certain definitions of 'awesome' anyway...
Raphaël is a small JavaScript library that should simplify your work with vector graphics on the web. If you want to create your own specific chart or image crop and rotate widget, for example, you can achieve it simply and easily with this library.
Right, although, by that logic, I'm stuck with Catalyst for a while. (I don't mind one bit. ;-)
That's fantastic. I'm going to start integrating it soon.
i should be doing my own homework, which is due by midnight. unless i misunderstood the problem, the function is pretty much the same as Encode() function Decode(message, key) { var alphabet, coded, i, ch, index; alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; coded = ""; i = 0; while (i &lt; message.length) { ch = message.charAt(i); index = key.indexOf(ch); if (index == -1) { coded = coded + ch; } else { coded = coded + alphabet.charAt(index); } i = i + 1; } return coded; } 
Hmm... I appreciate you taking the time to look at this. I know I am not alone with homework and finals. Here is the code I have so far. I believe the Decode function is now correct (thank you). I cannot get anything to appear in the message box when I click the decode button though. I am sorry, I am such an amateur with programming. &lt;head&gt; &lt;title&gt; Substitution Cipher&lt;/title&gt; &lt;script type="text/javascript"&gt; function Encode(message, key) // Assumes: message is the string to be encoded, and // key is a string of the 26 letters in arbitrary order // Returns: the coded version of message using the substitution key { var alphabet, coded, i, ch, index; alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; coded = ""; i = 0; while (i &lt; message.length) { // for as many letters as there are ch = message.charAt(i); // access each letter in message index = alphabet.indexOf(ch); // find its position in alphabet if (index == -1) { // if it's not a capital letter, coded = coded + ch; // then leave it as is &amp; add } // otherwise, else { // find the corresponding coded = coded + key.charAt(index); // letter in the key &amp; add } i = i + 1; } return coded; } function Decode(encoded, key) //Assumes: encoded is the string to be decoded, and // key is a string of the 26 letters in order //Returns: the decoded version of the encoded message using the substitution key { var alphabet, coded, i, ch, index; alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; coded = ""; i = 0; while (i &lt; encoded.length) { // for as many letters as there are ch = encoded.charAt(i); // access each letter in encoded index = key.indexOf(ch); // find its position in alphabet if (index == -1) { // if it's not a capital letter, coded = coded + ch; // then leave it as is &amp; add } // otherwise, else { // find the corresponding coded = coded + alphabet.charAt(index); // letter in the alphabet &amp; add } i = i + 1; } return coded; } function UppercaseKey(){ var str; str = document.getElementById("key").value; document.getElementById("key").value = str.toUpperCase(); } function UppercaseMsg(){ var str; str = document.getElementById("message").value; document.getElementById("message").value = str.toUpperCase(); } function UppercaseEncoded(){ var str; str = document.getElementById("encoded").value; document.getElementById("encoded").value = str.toUpperCase(); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;table&gt; &lt;tr&gt;&lt;td&gt;According to the substitution cipher, each letter: &lt;BR&gt;&lt;BR&gt; &lt;/td&gt; &lt;td&gt; &lt;tt&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;br /&gt;&lt;/tt&gt; &lt;tt&gt;| | | | | | | | | | | | | &lt;br /&gt;&lt;/tt&gt; &lt;tt&gt;v v v v v v v v v v v v v &lt;/tt&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;is encoded using the corresponding letter in the key: &lt;/td&gt; &lt;td&gt;&lt;input type="text" id="key" size="26" style="font-family:Courier,Monospace" value="XYZABCDEFGHIJKLMNOPQRSTUVW" onchange="UppercaseKey()" /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr /&gt; &lt;table&gt; &lt;tr&gt;&lt;td&gt;&lt;textarea id="message" rows="8" cols="30" onchange="UppercaseMsg()"&gt;&lt;/textarea&gt; &lt;/td&gt; &lt;td&gt;&lt;input type="button" value="Encode ==&gt;" onclick="document.getElementById('encoded').value= Encode(document.getElementById('message').value, document.getElementById('key').value);"/&gt; &lt;/td&gt; &lt;td&gt;&lt;input type="button" value="&lt;== Decode" onclick="document.getElementById('message').value= Decode(document.getElementById('encoded').value, document.getElementById('alphabet').value);"/&gt; &lt;/td&gt; &lt;td&gt;&lt;textarea id="encoded" rows="8" cols="30" onchange="UppercaseEncoded()"&gt;&lt;/textarea&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt;
* line #4: code is commented (keep your code tidy and use comment blocks for multiple lines) * line #77: there is no such element with id=*"alphabet"* also, read carefully your professor's instructions: "Add another button to the Web page labeled 'Decode &lt;==', immediately **below** the 'Encode ==&gt;' button."
all you had to do was swap the key with the alphabet to decode... if you could not figure that out, ffs how did you come up with all the other stuff?
It's a link jack post. Even the article text is straight from the Raphaël website. Here's the direct link to the site: http://raphaeljs.com/
That's cool Biju--but like highwind says, you're just stealing content without contributing anything worthwhile like a review or tutorial. RaphelJS is amazing--but I'm going to downvote your blogspam.
Most of it was given on that web site with the instructions. I'm not denying in any way that I'm not good at programming. Unfortunately for me this class is a requirement so I can take the IT courses that I am interested in. Yeah after hkr pointed that I out I swapped it with key and ta da it works.
Thank you so much for your help. I replaced "alphabet" in line 77 and voila it works. Thank you so much, I also tossed in two page breaks so the button was below it. Thanks for the heads up!
get a job
Closure wins in almost all 4 tests, and seems to be a better trade off between load time and run time so I don't really see a good argument for using strings. If most users aren't using a feature that requires the Javascript, then why not rethink why you have it there in the first place? Anyways, I just would have liked to see a real-world example.
consider the "settings" screen in gmail or whatever app you have... it's essential to have, but it's a fairly weighty control just from the sheer number of options, but it's probably accessed fewer than 1/100 pageloads- and then almost never at the start of the session.
Ok that example makes sense. Presented in that light this seems like a good solution for the right situations, but only to be used in those right situations.
Exploit released using this function in 3...2...1
Another feature we can never use because the world still happens to browse the web using ie6 and its variants.
So far, two comments: one complaining about portability, and the other about security. Developers have been blinded to what's desirable in web apps by past nightmares. Of _course_ it should be possible to upload files from the browser. Browsers already do it, horribly. Here's a cutting-edge implementation that holds great promise for the future of web development, and all people can do is complain. Sometimes I think it's a wonder that the "img" tag ever made it out of the gate.
I think it's a great idea, but I'm also a huge fan of sandboxing web browsers. I used to do malware cleanup as a job. Not fun.
Also, portability is a perfectly valid complaint. I certainly don't want to return to the world of "Best viewed in Netscape Navigator 4"
I hope I don't sound ungrateful to people to do hard work like you. I freely admit that I'm only an "end user" sort of developer, and I am no security whiz. What bugs me is what seems to me to be ubiquitous pessimism among most developers about anything that seems new, even when it's an obviously necessary extension of tech that people are _already_ using.
New features normally get hammered by crackers first, then they get fixed :)
Me neither... but in this case, Mozilla is programming to an existing standard. Cross-browser CSS support, by way of comparison, isn't perfect by any means, but the situation is in recent browsers is clearly in a better state than it would have been if a standard spec hadn't been hammered out.
*File API* *W3C Working Draft 17 November 2009* The real test is whether Microsoft implements it to spec, then devs can use it without much thought/IE specific hacks.
Actually, we can lock IE out by making killer apps with this. Then they'll rush to upgrade.
A canvas particle system with heavy alpha blending. My CPU just let out a tiny, horrified scream.
If you're looking to shorten the code even more you can replace this lf = lf == undefined ? [] : lf; with this: lf = lf || []; But that's just the beginning of ways in which this could be changed...
I wasn't, but cool :D
Can you explain to me, pretty please, how the scoping works on this? It seems like loadfuncs[] should be out of scope during window.onload but I know from my own experience that it works. I just don't understand why.
 var robLoad = robLoad(); function robLoad(loadfuncs) { Wth? Why don't you just do var robLoad = (function () { ... }()); Also, you are forgetting to check if the page is _already_ loaded, in which you should go ahead and run the function right away. You are also assuming every enumerable property in the array is a function (that also requires no arguments). You should iterate over array items using a for or while loop. Also, you are redefining `window.onload` every time the function is run, which isn't needed. Also, `window.onload` can be changed (and often is) by badly written scripts such as your (no offence) so it can't be used. Just image if every JavaScript library used `window.onload`, only the last one to use it actually gets its onload function fired. Here's a better version (untested, but should work in every browser): var robLoad = (function (self) { var notReady = true, queue = [], doc = self.document, runQueue = function (evt) { evt = evt || self.event; remEvt.call(doc, evt.type, runQueue, false); if (notReady) { notReady = false; var i = queue.length; while (i--) { try { queue.pop()(); } catch (e) {} } } }, addEvt, remEvt; return function (fn) { if (notReady) { queue.unshift(fn); } else { try { fn(); } catch (e) {} } }; if ( doc &amp;&amp; (addEvt = doc.addEventListener) &amp;&amp; (remEvt = doc.removeEventListener) || (addEvt = doc.attachEvent) &amp;&amp; (remEvt = doc.detatchEvent) ) { addEvt.call(doc, "DOMContentLoaded", runQueue, false); addEvt.call(doc, (addEvt === doc.detatchEvent &amp;&amp; "on" || "") + "load", runQueue, false); } }(self));
The length of the variable name won't matter as most minifiers shrink it.
You thought far too much into that. I wasn't going for accuracy, nor was I going for an all case thing. I was simply demonstrating this to my co-worker, who didn't understand why you could just call jquery with a function and it would get called on load.
Holy bejeezus, now that's a proper comment.
I was bored and thought I should help with your implementation in case you were actually going to use it. Why the downvotes?
I wasn't concerning myself with the length of the variable name but more of the syntax. It's shorter to do the double pipe defaulter than a ternary undefined check. Besides, if you were checking for undefined it should be: lf == "undefined" For weird JavaScript syntax reasons make undefined a string. 
You typed what I thought. A+ and a hearty upvote for you, sir or madame.
thats because javascript is the shizzle, and anonymous functions can form a closure over the variables in the 'parent' function, retaining scope long after they have been returned look up 'closure' one of the many reasons javascript is better than most think, imo
Any variable not declared in a function is considered a global variable, then any variable declared in a function only has scope in that function. var pi = 3.1415; function circumference(radius) { return pi * 2 * radius; } That is valid code.
To call a function on load with jquery just do (function () { ... }());
Nope. That's not even correct syntax. You're looking for: $(function() { });
Could also do something like &lt;script type="text/javascript"&gt; var data = {$mydata|json_encode}; {literal} rest_of_your_non_smarty_javascript_here; {/literal} &lt;/script&gt;
There is not a better way, but newer browsers can use window.postMessage() and skip cross-frame scripting entirely.
If you're looking for sneaky ways to communicate with a parent window, I warmly recommend looking at the gadgets.rpc module that ships with shindig. ( http://svn.apache.org/viewvc/incubator/shindig/trunk/features/rpc/rpc.js?pathrev=672433 ) That module is full of severely under-documented ways of getting 2 iframes to talk to each other across various browsers. *edit: apparently, recent commits have split that file into a few smaller ones http://svn.apache.org/viewvc/incubator/shindig/trunk/features/src/main/javascript/features/rpc/ 
Thanks! I'll look at it. About my task. I have nested iframes and need to figure out the outermost one that doesn't have access restrictions to show my dialog window in it. var win = window; while (win.frameElement &amp;&amp; !isAccessToWindowRestricted(win.parent) &amp;&amp; win.parent != win) win = win.parent; 
Yes, I was pretty pleased with that. It seems like there is a slight [bug](http://dean.edwards.name/weblog/2009/12/getelementsbytagname/#comment366610) in the algorithm. It is fixable but stops being a pretty one-line traversal. Oh well.
This was the first question on my Google interview...
That sounds like a crazy fucking interview. I would fail as soon as I said "jQuery".
I would just say "we're not using IE right?"
I just updated it. It's now a two-line traversal instead of a one-liner.
Actually, I said "JQuery" on later questions, and they accepted it as long as I could explain (verbally) what JQuery was doing in the background.
 &gt; as long as I could explain (verbally) what JQuery was doing in the background Would the answer "magic" worked? Honestly I don't see the benefit for me to learn all the nuts and bolts of javascript dom traversal when someone out there has already done that work and created a nice library for me to use. I do think things like prototype, closures, and javascript scoping are important, but not how do you manipulate the dom without using a library...
We can't use JavaScript libraries in websearch because of latency concerns.
ahhh that's why i friended you--
You work for google?
I do.
can I haz a interwieew?
deepends on ur 1337 skillz. (More seriously - if you're good at JavaScript and CS fundamentals, PM me. I don't think referrals where we don't personally know the person count for much, but they might at least get HR to take a closer look. Fairly soon, too...I'm going home on Sunday and won't be taking my corp laptop with me.)
Awesome. What do you do there? Are u a JavaScript master?
I work on Websearch UI, and I dunno if I'd say "JavaScript master", but I do work with a lot of JavaScript.
If not ES5 then how about ES4?
I'm still unable to universally and unconditionally recommend an IDE for javascript that doesn't suck in some fairly major way, let alone for the newer or stillborn dialects of it. I've gotten used to Eclipse over the years, so I have a preference for things like Aptana or JSEclipse. Aptana's JS IDE support is almost a side-thought, and you get a lot of other junk you probably don't care for. JSEclipse is more streamlined, but I haven't seen support for post-ecmascript 1.3 features, like const or let keywords getting highlighted properly and not flagged as syntax errors. So in short, I'm interested in the answer too ;) 
Would someone please make us an eclipse or netbeans addon, or edit an existing one to make this happen! :D I would donate if it was gpl!
Komodo Edit (free version) is positively useful. Highly recommended.
This does look like a neat editor but I don't see anything on ES4+ or JS2+ support, does it have it? edit: after playing with it, it does not appear to support js variable types, at least without an addon, and I looked through the addon list and I didn't see anything that might add that.
Technically, ES4 is an abandoned project, scrapped in favor of ES3.1 which eventually became ES5. It seems that Tamarin is no longer actively developed, since Mozilla has no use for it anymore. And there's no solid ES5 implementations yet, since it only became a standard a few weeks ago. ES5 essentially looks like ES3 with a lot of additional goodies, and is meant to be backwards compatible in many cases.. The next version (working title is Harmony), would be the next big leap and it's probably gonna break a lot of stuff than ES5.
Do you mean ES6 (JavaScript 2.0, very similar to ES4)? [ES5](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf) \[PDF\] has the same syntax as ES3. Edit: To clarify, **all JavaScript IDEs already support ES5 syntax** but you can't use some fancy features like `Object.defineProperty` in all of them yet. [Mozilla is getting close to done with their ES5 implementation](https://bugzilla.mozilla.org/show_bug.cgi?id=489326).
js2-mode in emacs supports ES3 and ES5, iirc
Sure, whatever it is called these days ;). You have not answered the question. What is a good IDE for it?
There is only one ES6 IDE, and that's [Mascara](http://ecmascript4.com/).
I will probably get downvoted for this, but Visual Studio is a pretty nice IDE for JS development. Syntax highlighting, autocomplete on core JS, DOM and even libraries such as jQuery, and the remaining few tidbits in ES5 are easily added with a single .vsdoc file.
Link to vsdoc please.
Not a very good one. Great engine, love the product, but that is NOT a good IDE.
Well it's the only one so you don't really have a choice.
then we have to make one, don't we?
It'd be easier to just use ActionScript 3 highlighting in your favorite IDE and use Mascara to translate in the build process.
call me a dreamer, i want the real deal. we should be able to write something functional for an existing ide.
No, it doesn't. The two are distinct google searches, which is all that matters. If you confuse the two in real life, then you need to understand context better, or stop butting in on awesome programming conversations. From the Closure JS library page: &gt; As you might guess the code that existed was not very consistent and sometimes did not even work in the presence of other code. Closure was an attempt to bring a closure to this mess. The name is also a play on the programming language feature as well as the desire to make our js library be a closure of all the existing js code at Google. No mention of Clojure in there
Please share with me any comments, suggestions or mistakes that you may find in my post and plugin. Thank you for reading and I really appreciate it. Here is also a link to the jQuery plugin page: [jsLaTeX](http://plugins.jquery.com/project/jsLaTeX)
For a second I thought it might be generating LaTeX rendering on a canvas without need to reach out to a server. :(
I have the reddit toolbar on, so I found out all about the reddit developers inner thoughts when it comes to Internet Explorers handling of 404s.
What a horrible waste of bandwidth.
ah hehe, now that would be interesting; although it requires the TeX engine to be written entirely in JavaScript and I don't think that's quite a feasible solution.
paul irish is always really really nice in freenode/#jquery that's all
That's sorta retarded, not sure why Opera went through the trouble to do the fake path thing if all other browsers (except IE) default to just the filename. I guess it won't break anything, but I still don't see why anyone would need to know the full path of a file you uploaded.
I didn't know I could Cmd/Ctrl +/- in source view.
 (function(global,undefined,variables,are,so,hip,these,days)
How recursively insightful of you...
I will also note that the sequence [up, up, down, down, left, right, left, right, b, a] will cornify the page. :-)
Why would you not want to do this with CSS?
and of course, assuming that is a predefined css rule you could just apply it on a case by case basis if you needed to using js.
Can someone let me know what ES6 is? Is this related to the ECMA-262 5th edition that was just published/approved? Or is this something else entirely different?
Yes, exactly. Basically it adds a lot of features and the ability to add strong types to javascript. see http://ecmascript4.com for more info.
nice konami code implementation :D 
Indeed, it has been done, with good results, check out these two projects: http://www.math.union.edu/~dpvc/jsMath/ and http://www.mathjax.org/
to avoid using CSS hacks for it to work on all the browsers.
can this be solved with css resets?
I have created a [timer constructor](http://gist.github.com/186307) that implements a profile function that you might want to use. If it is run under Chrome/Chromium, the timer uses a native constructor to be able to get microsecond-precision. Edit: Here's a usage example (assuming you have a `&lt;div&gt;` with an id of "results" somewhere in the document): var timer1 = new Timer, timer2 = new Timer, iterations = 100000, results = document.getElementById("results"); document.title = "Profiling..."; timer1.profile(function () { // method #1 }, iterations); timer2.profile(function () { // method #2 }, iterations); results.appendChild(document.createElement("div")) .appendChild(document.createTextNode("Timer 1: " + timer1.milliseconds() + "ms")); results.appendChild(document.createElement("div")) .appendChild(document.createTextNode("Timer 2: " + timer2.milliseconds() + "ms")); document.title = "Profiling Complete";
I had to optimise some javascript recently and used firebug's [console.profile()](http://getfirebug.com/logging.html). Also putting some firebug console.time() and console.timeEnd() calls in strategic places will help you identify the slow parts of your function.
I can't upvote this enough. Firebug has an insanely useful profiling functionality built right in. It helped me identify the bottlenecks in one of my crazy applications very quickly :)
I've been working on a benchmarking tool, http://github.com/jakearchibald/woosh. It's more for comparing changes to larger pieces of code but may be useful. Docs at http://www.jakearchibald.com/woosh/docs/writingTests/
Firebug and Webkit (Safari, Chrome) both have profilers built in. I strongly suggest using that in real-world tests. I'm pretty sure IE8's developer tools have a profiler included as well.
Can they help me make software that will build software using a client's indecipherable language?
 &gt; If it is, it does mess with certain webpages on my website It may be better to figure out what it is messing up on your website first before introducing more hacks.
I was able to do it with an Active X object I created in the Sidebar gadget framework for Windows. You can read a registry key that has the information; however, I don't think you have this sort of power / access from within the web browser, just food for thought. 
It depends on the security level: If it is set to "high", in some cases, it even disables javascript completely. And my website does use a lot of regular javascript and asynchronous javascript requests. For this reason, I'd like the users to just use a different machine or a different browser or at least disable ESC.
Well, if it's messing up something on your website, can't you just detect if that thing is messed up?
Browser detection is generally a bad idea and OS detection doubly so. It's much better to detect capabilities. If ESC is messing up your web app, then during initialization of the javascript try something which will be messed up by ESC and if it fails, then display your alert. Or to come at that backwards, as you often need to, display the alert. Then try something which ESC will break, and if it succeeds, take down the alert. For people without ESC, the alert may not even display long enough to be noticed.
Love it. Just love it and want to use it NOW, to document everything. Now, if someone made a cell shaded (ala Wind Waker) to make my work even more childish that would be awesome.
Use object detection to figure out what objects are missing. Use &lt;noscript&gt; to detect.. well, no scripting available.
Please read this article: http://www.quirksmode.org/js/support.html TL;DR: Let's say you want to see if you can use the XMLHttpRequest object. if( window.ActiveXObject || window.XMLHttpRequest ){ // everything went better than expected }else{ document.getElementById("ajax-error").className = "visible"; } edit: downvote? please elaborate.
**IE Comment Conditionals** Well you can certainly do it on IE7+ with Vista+ using the IE "WindowsEdition" conditional. **Java interfacing** If java is enabled, you can also directly access the Packages.java.* object and get it that way. **VBscript** The much under-used and under-documented vbscript could expose this interface. However, for the most part, they just matched netscape. You would probably need to find a circa 1998 or so reference in order to get it. **Font/image rendering difference** IE uses the PNG, SVG, DIB (BMP) etc library of the OS. You may be able to create a number of 'corrupt' images and then do some javascript tests on them, for things like their height, width, on error, etc ... in order to determine the version. Additionally, the glyphs of the fonts have changed throughout the years. The Vector to raster translations have changed to. With the right text in the right font, you may be able to test heights and widths there and determine something. However, I don't have a large enough test bed for it. If anyone wants to give me one, I could probably do it.
It's a li'l complicated ... could involve multiple scenarios but I guess I can put in some effort and look for all possible errors instead of just displaying a generic message based on their operating system.
Yeah, no ... I use the LAMP stack but the things that you're talking about could be possible using IIS and ASP.NET I guess.... Thanks though!
thanks, I'll try that.
that was my next plan but I was trying to see if there was an easy way out :) thanks!
dunno who's downvoting you ... i upvoted you to negate the downvote :) thanks for the advice!
The easy way out turns out to be a path deeper into trouble. It's *always* based on an assumption which often turns out to be wrong. As an example, some time back in the 90's, I was working on an application that needed a particularly fancy input box. At the time, Firefox (Or was it still Netscape?) wouldn't support it. In fact, only one version of IE would support it, so we tested for that version of IE and used the fancy input if it worked. As soon as the customers started upgrading to a newer version of IE, they started complaining that the fancy editor was missing. We had to make an EMERGENCY fix to change our browser detection to use the fancy JS on the newer version of IE. If instead, we'd tested for some of the functions or attributes used by the fancy text editor, we'd have been right more often and had fewer bugs to fix. In this case, you're assuming ESC cannot be installed on any other OS, which might be true right now, and false later. You're also assuming that ESC is always going to interfere with what you're trying to do. A patch might make ESC start playing nice with your app. You don't know unless you specifically test for what you're trying to do.
from your source: // Block scope is avoided whereever possible for an infinitesimal speed boost. // (a &amp;&amp; (b = c)) instead of if (a) { b = c } But doesn't JavaScript not have block scope?
JavaScript does. ECMAScript doesn't. Block scope was introduced in JavaScript 1.7 and can be utilized with the [let statement](https://developer.mozilla.org/en/New_in_javascript_1.7#let_statement). Technically, you could say ECMAScript also supports block scope if you take into account catch blocks. For example: try { throw {}; } catch (obj) { // obj is scoped to this block, not a function }
I'm excited about node.js in particular, but I figure we should have a mod_nodejs for apache httpd.