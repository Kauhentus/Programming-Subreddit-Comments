Learn you good
Wow, yep, never seen this one, really cool.
Well... the title was you think almost no one is aware of. FCC is pretty well known in learning programming circles.
but bootsrap, materialize, bulma and others aren't used only for their grid systems, they also include styling, responsive components, old browser support
The Airbnb guys hate for .. of and recommend a reduce on this. I can't really say which is "better" (and that probably comes down to the overall style and purpose of your code), but the reduce approach is somewhat readable with async functions (which weirdly, those Airbnb guys don't support, so their reduces look silly). myThings.reduce(async (prev, e) =&gt; { await prev; const foo = await somethingAsync (e); return saveToDb(foo); }); Not so bad. Personally I still like for .. of to indicate a loop that is run for the side-effects, but this is a fine way to run asyncs in serial. `Array#reduce` for serial async and `Promise.all` for parallel asyncs. I'm not sure it really offers any advantages apart from placating people with an irrational hatred of the word "for" though. I guess it doesn't require `Symbol.iterator`. 
It would be very interesting to see an explanation of how it works. I notice some of the colours are a bit off occasionally, so I think it might be best suited for situations where you know what image will be used ahead of time.
so about conflicting versions, the ability to have them was one of the refreshing and awesome things that drew me to NPM, it's definitely a feature not a bug and if you don't believe me, try using PIP. Also already has at least one of your features you're suggesting. 
Better locale support, especially for currencies like the rupee, which split numbers into lakhs and crores instead of thousands and millions.
Serial is when you care about the order, and parallel is for when you only care that they all run (but you don't care which thing finishes before which). If I want to recursively create directories over an sftp, every child dir needs its parent created first. Mkdir of foo/bar/baz needs to mkdir foo, then foo/bar, then foo/bar/baz. I need serial run promises. If I'm uploading a bunch of files to that sftp, I don't care what order they're sent, only that they are sent. I upload in parallel. 
It's useful advice when you are just learning another language, but starting out it's bad advice.
For loops are a frequent example of "when all you have is a hammer, every problem looks like a nail". Too many devs have only learned for loops (it's often all that's taught in school), so they're frequently hammering screws in. The number of times you still see `var foo []; for (var i = 0; i &lt; bar.length; i++) if (bar[i] === baz) foo.push(bar[i]);` in codebases you'd hope were above that is pretty surprising. Pretty much every team in the world has had an intern at some point slip that in. 
Hot tip: in `of` loops, the declarations are actually block scoped per loop. The tc39 had a hella lot of debate over this, but since this is where it settled, `const [key, value]` is both possible and preferable. 
I like `for .. of` only for looping with `await`s when need to imply that this loop is for side effects. I consider it bad practice to use the big array methods (map, filter, reduce) for anything but returning something for an expression (ie for functional programming). Eg a map that also updates the state of some closure array is hard to reason about to the point where I consider it an error during code review. You _can_ reduce to run promises in serial, but when I see a reduce I assume I'm doing it to build something. There are times I loop in series with await, eg recursively running mkdir over an sftp connection, and for .. of is easily the most semantic way to represent that I'm looping to _mutate_ or _do_ something. 
I suggest you to choose learning through docs and articles instead learning from courses.
For visual learners: this 7 hours YT video is surprisingly good https://www.youtube.com/watch?v=YMvzfQSI6pQ
Also that he can't in many cases because the free previews are just filler bullshit so he actually has to BUY the courses to see if they are his -- that is pretty bs in my opinion. 
He could just ask for and easily receive a refund after checking out the rest of the videos.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
Thanks, didn't know that!
&gt; a callback that will always get executed. Well, not _always_. Assuming the promises in the chain are all settled it will. But if a promise is stuck in it's pending state, it will never call `finally`. :P Also, I never expected any description of `finally` would require a brief history of JS ;) but good job on incorporating that in there. &gt; In 2004 Google had a crazy idea: use JavaScript to make server calls without reloading the page, and then change the UI with the DOM API based on the results from the server. I believe Microsoft was doing this in the 90's with XHR. And I remember it being fairly common practice to use a hidden frame to do similar things before that.
Note that `arguments
If the behavior is the same no matter how many arguments are there then probably https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply will help. Just apply the arguments object in your inner function. 
So how do I know if only one argument is passed in?
If you're unemployed and looking for income, there's nothing wrong with playing there stupid game. At that point it's about you providing for you and yours.
I tried `func.apply(null, args)` and errors: CreateListFromArrayLike called on non-object
Its hard to debug someone‚Äôs code without seeing it, but my guess would be that it‚Äôs not `args` (the variable you declared), it‚Äôs `arguments` (special object).
(Exploring JS)[http://exploringjs.com/es6/] Really good, gradual run throughs of promises and classes and other concepts.
`arguments.length`, not `func.length`.
https://codesandbox.io/s/8xwoqv0zv9 inside App.js
He said arguments is not available for arrow functions, and it seems function.length is the length of argument array, just googled.
It's a number of arguments that the function *expects*, not the number of arguments the function got called with. ``` const a = (z,x,c) =&gt; {}; // a.length === 3 a(1,2,3,4,5,6); // ??? ```
`fn.length` is how many parameters the function is defined with. `arguments.length` is how many arguments were actually supplied to the function. var fn = function (a, b, c, d) { return arguments } fn.length // 4 (a, b, c, d) f(1, 2).length // 2 (just 2 arguments supplied)
I think this does what you want: const withRequest = (func) =&gt; async () =&gt; { await delay(1000); func.apply(null, arguments); };
`args` is a single argument there. You need to do `(...args)`
True, but then worst case you iterate over the items twice.
I think his code gets transpiled into normal functions, so `arguments` is actually defined.
Using rest parameters: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters const myFunc = (...args) =&gt; { console.log(args.length) } myFunc('a'); // 1 myFunc('a', 'b', 'c'); // 3 myFunc(); // 0
Indeed I was. I don't know what happened to me, I completely forgot `this` and was wondering how mutation was possible! But I didn't know they were called that, thanks!
While I love `.reduce` for more complex operations where performance is vital, it does not clearly communicate intent as well as chaining more explicit methods.
[removed]
Thousand times yes, I've basically learned regex using this site.
Thanks, that's the problem it seems, now I do func(...args), it just works. btw, can you check the code for me, in componentDidMount (line 88) I tried `this.add(2, 3).then(console.log);` it should be a promise but somehow console logs undefined (I log inside add function, and it logs 2 and 3).
Thank you, it works.
You need to return it: `return func(...args);`
Hi, It's showing last commit one year ago ü§î
Think this is an awesome idea. I'm 21 just beginning to learn coding myself and if I was presented with this opportunity in high school I think I would've been all over it. I'm obviously not qualified to be a mentor, just showing some support. Best of luck to you.
Don't use this because one day the arrow function won't be transpiled by `babel-preset-env` and you code will break! Use ...rest.
That‚Äôs an interesting consequence of transpiring against a moving target (‚Äú&gt; 2%‚Äù or ‚Äúlast 2 versions‚Äù). I didn‚Äôt think of this.
Yeah, I haven't had any time to work on it, but it does shows the structure that is explained by https://blog.risingstack.com/node-hero-node-js-project-structure-tutorial/
üòéüòé
I agree with you, when you build something you are forced to look into how to do everything. 
Codefights was good for me. Helps you get good at solving small logic problems quickly. Did 1 a day vs a friend for several months and improved a lot
It's awesome that you are doing this. I was thinking about doing some sort of volunteering lately, or perhaps teaching at a bootcamp after work, but this is probably a better idea. I think I'm gonna sign up.
 Edit: OMG, your site is using jQuery! :'-( Edit2: Also this. https://i.imgur.com/1ImAwuP.png Please fix.
In Swift, this expression would return nil.
I like the design but I definitely would work more on the mobile part, is totally impractical on a cell phone.
You know that because you wrote this ... you're actually the one legally agreeing to all this stuff and now you're on the line for it all.... /s Seriously though that looks pretty cool.
I think browser games are almost entirely bounded by monetization limits, not technology. You could already make some pretty amazing games, maybe on par with last-gen consoles. The problem is recouping the costs. If your target is Steam, mobile app stores or consoles then using Electron doesn't make a whole lot of sense there, except maybe in cases where something starts as a web game and later you decide to package it up for those platforms.
*JavaScript: Understanding the Weird Parts* was huge in helping me really understand what is going on under the hood of JS. It's available as [a single long video on YouTube](https://youtu.be/Bv_5Zv5c-Ts) Or as a [course on udemy ](https://www.udemy.com/understand-javascript/). 
Sounds good!
This was something I had never come across before, and WOW it does fit the bill exactly. Thanks for sharing. After a few hours, I strongly recommend this one.
I'm not sure how much web assembly is gonna be used for day-to-day web apps, but I think it might be the thing that brings the high quality, realistic games to the browser - more so than Html5. 
Modern and jQuery sounds like oxymoron (not intended to be rude here) Maybe you could find something already done in Vue.js, React et al. Have a look at [Element UI](http://element.eleme.io/#/en-US) 
no input validation: 3/10
Seems like another great ‚Äúfree‚Äù product from Google that is really just a way to harvest data from websites/apps. Can it just be used by downloading the js file?
Have you seen Ryan Dahl's [10 Things I Regret About Node.js](https://www.youtube.com/watch?v=M3BM9TB-8yA) &amp; new project, [Deno](https://github.com/ry/deno)? Also - if you end up making something, consider using JSON5/TOML/YAML. A lot of people have [issues](https://github.com/npm/npm/issues/3336) with the current `package.json` implementation.
ECMAScript 2015+ has now function arguments with default values and destructing. I recommend you spend time reading Douglas Crockford: JavaScript The Good Parts, and Exploring JavaScript books [Axel Rauschmayer ](http://exploringjs.com/) and also [Addy Osmani](https://addyosmani.com/) books, even his book about (now getting old) Backbone. His advice on JavaScript and patterns are good.
Indeed. Especially in this case where reassigning `key` or `value` is not necessary or useful.
As far I understanding the issue was: * `parseInt('13')` will always return type **number** not a **string**. * `if (parseInt(numberInput.value) !== '13')` You're trying to **strictly** compare **number !== string (13 !== '13')** this will always evaluate to **true** So, according to your logic, form submit will always get prevented. **Note:** For checking user isn't a bot it's better to use a third-party service like google captcha. [https://www.google.com/recaptcha/intro/v3beta.html](https://www.google.com/recaptcha/intro/v3beta.html)
Nobody would invest millions to create a "close to life graphics" in HTML just to see if it's possible. In modern operating systems, mobile and now desktop, it's just as easier to click a link and open the store at a given app to buy or install.
WebASM has little to no connection with the quality of the graphics. You need a quality GPU API. The effort is called "WebGPU" and it aims to replace WebGL.
Nope. IRL no one will hire you unless yoh can either blow a whiteboard straight out of the interview or have a working portfolio to talk about, VirginWizard69.
[https://blog.lavrton.com/javascript-loops-how-to-handle-async-await-6252dd3c795](https://blog.lavrton.com/javascript-loops-how-to-handle-async-await-6252dd3c795)
Hey thanks for your feedback. Glad you liked the design. I didn't have time to get to the mobile version, not sure if I ever will. Just wanted to create something and move on =) 
FIXED! Thanks for the catch. Haha, using jQuery because as a designer my JS skills are pure crap and I was tasked with designing / building the website while my much more talented cofounder developed the reporting software we're using. 
https://www.javascripture.com It's JavaScript documentation with interactive examples I wrote to help remember and learn the APIs.
W3Schools
 &gt;it also automatically accepts terms and conditions. Uh, is this okay to do? Isn't the terms and conditions only there because the user must accept them and "declare" they are okay with it so they can't complain about it later? If you hijack it, you're making the user not aware... I know nobody reads it in practice but I just always assumed that was a legal requirement.
Try adding the geojson layer to the map after you add the data to the layer. Also you may need the pointToLayer function if you're trying to turn the layer into a marker. 
 const withRequest = func =&gt; async (...args) =&gt; { // whatever here // pass the args to func func(...args) // more after }
Form on the site fails to submit for me :( That‚Äôs a great idea though!
Maybe I struggle to look at it from a beginner's perspective, but I think FCC is the most overrated resource available. It really just gives you a basic overview of the syntax. You won't leave that course with any understanding of how to build a project or having any clue about the environment surrounding modern JS - which in my opinion is a bigger hurdle for beginners. That said, it's free, so you might as well try it out. It also seems like they actually put effort into it.
No, the link was consistently returning a 404, but it seems to be working now.
https://i.imgur.com/jaArMnc.jpg
Not free, but Andrew Mead's "The Complete Node.js Developer Course (2nd Edition)" took me from a total beginner to at least intermediate level. You'll build a few complete projects. Slowly but surely, you'll be introduced to all of the components that make up modern web apps. If you're serious about stepping up your JS game, put a few bucks aside and buy the course on Udemy. I promise you that it's worth it.
If I click on the link in your post it STILL returns a 404 as per the screenshot ...
I'm confused, I thought that's exactly what I was doing but I'm still not getting any results: $.getJSON('https://data.sfgov.org/resource/6ia5-2f8k.json', function(d, error){ var geojsonLayer = new L.GeoJSON(); map.addLayer(geojsonLayer); function style(features) { return { fillColor: getColor(features.name), weight: 2, opacity: 1, color: 'white', dashArray: '3', fillOpacity: 0.7 }; } L.GeoJSON(d, {style: style}).addTo(map);
I‚Äôm learning a lot, have fun with the slower code buddy! 
I agree.. need to work on there..
Fantastic idea, wonderful to see a program oriented towards out of class learning that actually counts towards school credit. Registered
Okay it very simple .. nothing crazy going on here... So i am useing vibrant.js library which returns available colors from the image it also retuens most vibrant color from the image, from that value i am compareing most closest values in array of gradient and whitch ever is closest is defined and as vibrant gradient.. I hope you understand what i am saying because i am terrible explainer.. lol
What day/time each week would these calls typically/ideally be? Asking because I think this is a really cool idea but could not commit to the M-F 9-5 block since I do project management tasks for my job also. 
‚ÄúClose to life like graphics‚Äù is a moving goalpost that will probably never be truly reached. There will always be more realism to add, more detail, more objects on screen, and more, no matter what computer or software you use. Just to get the image to look ‚Äúclose to life like‚Äù such that there are few, if any, improvements to make, you would need, at minimum: * very high resolution rendering (around 32K, around 128 times more pixels than 4K) * highly anti aliased (at least 16x) * real time ray tracing techniques on extremely detailed scenes * running at over 60fps (maximum 1000fps, per eye) You probably cannot do that with the world‚Äôs fastest supercomputer. I doubt all of the world‚Äôs super computers could do it, working together.
Seems like a cool idea, I'm just wondering, what's the business plan? I quickly read through the "become a mentor" page and it didn't say anything about compensation. Are mentors expected to volunteer their time? If that's the case then the entire organization should be presented as a nonprofit. If that's not the case and you expect to earn money off of the project, then you really should disclose the hourly rates, both for being a student as well as being a mentor. 
try this one last time i really don't know what the problem https://kartik1225.github.io/gradient-from-image-demo
The mentor sign up doesn't seem to work, there's an error in the n/w request.
Nice idea, my question is which requirements are put to the mentors to participate? (Experiene, how long deving already, living place etc.)
No they don‚Äôt allow you to use it that way. 
Would a college student with strong fundamentals and internship experience be an adequate mentor? Would love to help out if I can.
Very common mistake amongst English learners, and I can see why. Lots of languages use one word for this. Receiving knowledge = learning. Giving knowledge = teaching.
Before designing your own app structure, try some frameworks and open source projects who‚Äôs been around for a while. Then you can compare cons and pros to implement your own approach 
Same
Are you making money off of this?
One hour is irrelevant to the conversation of whether or not just writing something is the best way to learn. Disagree with the time, whatever, take a day to do the same thing. It doesn‚Äôt matter
Personally I would only set state once all of your processing is finished - yes it would take longer for something to appear on screen but less time overall. Then, you can have your loading spinner visible whilst your state array is empty. If the spinner is animated using CSS only then it will still spin nicely whilst the main thread crunches through your data processing
Thnx 
Wasn‚Äôt this proven to be hyperbole?
Yes, Sean Larkin himself published a clarification on Reddit 17 days ago: https://www.reddit.com/r/programming/comments/8qqhlz/office_365_ms_teams_skype_code_and_the_edge_debug/e0ll1dt/
Obviously 
Is this exclusive to Devs in the USA?
this is just a small part. I find that part where the authors have to get people directly through their link to get more money especially troubling. Hence all the advertisements on Facebook and Reddit as well, which is getting really annoying and desperate. Platform should've provided some other way for authors to earn more. But as the video states, it's the best business for them when authors also promote their page. 
 var result; array.some(value =&gt; { const matches = assert(value, condition); if (matches) result = value; return matches; }); It appears I have proven you wrong.
I'd like more information on these points too.
If those were IPFS URLs count me in.
/sigh last attempt at education: Dev time is more valuable than computing time. Functional patterns allow devs to work faster in numerous areas, so unless your bottleneck (google what this means before you continue to make a fool of yourself) is in a loop, which is almost never the case, patterns which are easier to read, more reusable, and less error prone are universally preferred. *if* you hit the point where computing resources on loops are becoming a cost burden the correct solution is to spend dev resources in optimizing the compiler or transpiling out the slow code, *not* to make devs use a worse pattern in their work.
r/flashback
I only use a forEach if I need async iteration. 
So you have no interest in learning anything. I'm done with you
For sure. But with for each as opposed to a for loop you can still use functional style more easily (e.g. composition of the iterator function) You‚Äôve actually brought up something quite interesting about why forEach, filter and map are preferable to a for loop, in my opinion... I can tell by the name of the function what kind of thing is likely to be happening. With a for loop, I have to actually look at the code to see what is going on. Like ‚Äúoh you‚Äôre only pushing onto that results array when X is true, and you‚Äôre upper casing the name‚Äù rather than a filter and a map. This is what I think is meant by ‚Äúreadability‚Äù which the person I was replying to originally doesn‚Äôt mean by readability. For me, it‚Äôs not to do with the characters or the indentation, it‚Äôs to do with being able to, at a high level, select the important bits from the unimportant bits when grokking a new codebase, or debugging.
I‚Äôve mentioned this in another comment but I‚Äôm putting it here so you get the reply notification! forEach, map, reduce, filter, etc. are more readable than a for loop not because of indentation or actually being able to read the code. They are more readable in a higher level way, in that I know roughly what is going on without having to read and inspect the contents of the for loop. Let‚Äôs say I‚Äôm debugging something where some value is missing from an array, and the code concerned filters, maps and groups some items. Using array methods, I've a good idea that the place to look is at the filtering. If the code uses for loops to do all of those things, I have to look through each individual for loop to see what it does first. And for loops tend to accumulate lots of different logical steps in one which harms readability. So when I say functional programming, I don't mean like some super mathematical perfect version of FP.
jquery is absolutely fine
coding maths on youtube is not well known i use a combination of programiz.com and tutorials points coding ground section to try out simple programs in any language i really like weheartswift for a swift introduction
thought you could use another voice giving the absolute a-ok thumbs up on JQuery. One thing you'll learn quick is that developers love the idea that being crappy to one technology somehow validates their own choices. Everything is a tool, what matters most is how you use it.
Every beginner I've met try to read tutorial on [Medium.com](https://Medium.com). I've observe that the Getting start of any JS framework are worth to read. Especially webpack, It's not that hard and I used to think it's because I've tried many tutorial article and it doesn't work until I try their official Getting Start guide. Same principle apply to React, react-router, vue, vuex ...etc. Note: I'm not saying that tutorial articles are bad but it's just that you should give official document getting start guide a shot first and then use those tutorial articles as the official Document usually cover what beginner need to know in depth.
 for (let thing of things) { ... } things.forEach(thing =&gt; { ... }); For-of is cleaner. The loop starts with one of the loop keywords. There are also less punctuation characters involved. It's quicker to type. `return` , `break`, and `continue` can also be used. If you want to use an imperative loop, there is no point in trying to obfuscate it via forEach. Using forEach in ES5 or at the end of a chain is perfectly fine, though.
The ads on Facebook and reddit are from affiliates and very unlikely to be from the creators themselves. If the content creators don‚Äôt like Udemy‚Äôs terms, the can simply not produce content for Udemy. 
This isn't just a comparison of `for..of` to `forEach`, it's a comparison of linear vs functional programming: things.forEach(log) vs for (let thing of things) { log(thing); } or things .filter(removeIrrelvantThing) .map(alterThing); vs const newThings = []; for (let thing of things) { if (thing.whatever !== 42) { continue; } newThings.push({ ...thing, prop: thing.whatever * 2 }); }
Not really. I‚Äôm a React dev, and while I understand how Webpack works and I could figure out how to set it up from scratch if I needed to, I‚Äôve never actually had to do it. create-react-app, Next, and Gatsby have fulfilled all of my needs thus far. Don‚Äôt waste time on Webpack (or on your own snowflake of a boilerplate) unless you absolutely need to. 
yeah but if you say "here's the deal: if users randomly come across your content, we'll give you 50&amp;#37;. If they have your coupon (or whatever) we'll give you 95&amp;#37;" (something like that). Such business model is firstly reminiscent of some pyramid scheme (I AM NOT SAYING IT IS! I am saying it reminds me - go get your customers alone and you'll get bigger pay cut) and secondly it just creates a world of spam with these courses. I was wondering why is facebook full of this stuff and now after watching this video, I get it. It's just sad, Udemy's business model. Perfect for them, no doubt, you get free advertisement, but harsh on social media.
The topic is for-of vs forEach, though. It's not about the other array methods. Your second example is misleading. By the way, there is nothing FP about repeatedly calling some function with side-effects. Using forEach for that doesn't change that.
I'm not saying that a beginner should spend their time making a snowflake boilerplate. To experience people, It's not worth their time but I'm talking about absolute beginner. I'm also a beginner and so confuse by all these experienced people trying to guide beginner the wrong way. I'm now having more experience in JS and I just want to suggest the beginner the right way to start. Remember that old JS developer might have a really different perspective than I am because they start with knowing JS &amp; jQuery and become so good at it and React, Webpack or similar technology are here to solve the problem they're facing when using jQuery. Beginner this day don't even know why such a thing exist (include me) and tell beginner to learn JS framework because experienced programmer told them is just wrong.
Not always about money dude...
Well you should at least understand what Webpack and Babel are doing at a high level 
Yep. I didn't mean that beginner should dive real deep. I also only understand webpack at high level. 
As the other comment says, only update state once. If you still have issues, break the parsing in smaller chunks (to let the CPU work on other UI udates so the browser doesn‚Äôt ‚Äúfreeze‚Äù). Alternatively move the parsing into a webworker to utilize a different thread for it.
You might want that to be the topic, but it's not. It's `for..of` vs not `for..of`
Yet it's an assertion that will be made in every Javascript discussion for the next five or ten years.
Mailgun, and probably other mail services, offer email tracking and an API. If you send through them you can compare and track who is opened and who isn‚Äôt. From there just suspend the people that don‚Äôt open reports üëç
Your best bet is sending those reports as email links, and then your code can track who clicks them.
Do you seriously believe that content creators aren't aware of how often the courses are $10 and that's considered the standard price ? Udemy is saying if you can trick your customers into paying more for this $10 course, you get more money, this is an option (not a hindrance) for content creators and I've never seen any of them trying to sell courses themselves for more than whatever Udemy is charging for the day. It's been proven in retail that customers prefer a store to have products labeled at a higher price and always be offering (perceived) discounts instead of just having all the items be a lower price all the time without a perceived/advertised discount. Udemy didn't invent affiliate marketing and requires an existing amount of blog hits or mailing list before offering affiliate deals. There are tons of people spamming with affiliate links of every imaginable product, it's not just Udemy. They're just following very common preexisting and widely used marketing trends. Of every form of spam we've seen on the internet affiliate links have been the least intrusive so far. 
I think you're a little confused, of the 3 you mentioned React is the only one with it's own template engine (JSX) and interpretation of CSS, Vue and Angular both use regular HTML and CSS. The reason for React using a template engine is that it's approach is HTML inside Javascript, the others approach it as Javascript inside HTML. You mentioned being OK with Typescript, which happens to be what Angular actually uses.
If you dont like jsx you can use React.createElement directly, it is the same thing. https://reactjs.org/docs/react-without-jsx.html
&gt; I think you're a little confused maybe :D &gt; Vue and Angular both use regular HTML and CSS. Is that really true. Because vue has this example: &lt;div id="app"&gt; {{ message }} &lt;/div&gt; I would call this some kind of HTML-Template. Of course this is just a simple example. 
I was using sweetalert 1.1.1 - seems this is the reason. Going to migrate to sweetalert 2
I don't see how using a view template leads to ugly code. Server rendered web applications have been doing this for decades and it gives you clean separation of your presentation and your business logic. Not to sound snarky, but are you sure you have the experience to justify this opinion?
It‚Äôs still not HTML in it‚Äôs true sense though. That‚Äôs like doing document.createElement, not describing tags. 
Oh, that's interesting. I'll look into that. :)
I have some Django experience. The seperation of presentation and logic is nice, but defing loops and similar in HTML is ugly to me.
WaNnA jOiN mY fReE GiFt CaRd GiVeAwAy?
 {{ message }} // is a Javascript expression Vue is just giving you the ability to use Javascript inside of HTML. Nothing about the HTML itself changes at all, you just have to use the v-html tag sometimes. 
Just want to point out that react doesn't have its own css interpretation, it accepts standardish style and class attributes (className), how you fill in the blanks is up to you. You could just link to a stylesheet like in the olden days. Vue and angular also definitely do use a templating engine, Vue's actually being so close to react that you can use jsx with it. If anything they're all equally not similar to html.
The problem is how best to do it
Webpack is based in node.js and node.js is JavaScript, you can learn JavaScript and don't ever need to deal with webpack. I would suggest to focus before than anything in have a good understanding of JavaScript and then (if you want to or feel it necessary) move to webpack. I know plenty of JavaScript devs that never dealed with webpack. Of course is something nice to learn (and probably at some point necessary) but having so much to learn I don't think webpack should be your priority. I'm working on a project for my company where I have to configure webpack, but I've been working on front end for 8 years and I've never had to configure webpack before.
In JSX you have to use camel case instead of hyphens for CSS expressions. I'm really only used to React, is the templating engine in Vue and Angular the part where you use the ng or v-html tags ? 
What do you mean? This does not work: http://jsfiddle.net/kf2396ou/5/
There's some kind of interpretation layer going on in both angular and vue (I'm not as familiar with angular &gt; 1), Vue allows you to write a template string which are your v-html tags or a render function that is a more low level version of the template string, this is what transpiled vue from .vue files becomes. You can also just write render() directly in your component and that's on par with React.createElement
&gt; I think you're a little confused I think you're a little confused ;) React is the only one _without_ it's own template system. - Vue: https://vuejs.org/v2/guide/syntax.html - Angular: https://angular.io/guide/template-syntax - React: ... https://reactjs.org/docs/introducing-jsx.html ... "JSX may remind you of a template language..." JSX is just syntax that maps to an API.
Angular v2 and above, now v6, uses plain html and css.
OP only talked about for-of and forEach. Your second example compares two different things. An incomplete snippet is of course shorter than a more complete one. Since forEach doesn't return anything, it can only mutate existing stuff or do something via side-effects. A logging function has side-effects. &gt; things.forEach(log) This line repeatedly calls a function with side-effects. This is imperative code with a slightly obfuscated loop construct. You could, for example, obfuscate an `if` in the same manner. Your code would be still as imperative as it was before, however.
At some point you probably want to take values from your JavaScript code and somehow get them into the html, right? That's the point of templates. If you don't want to use templates you would need to directly access the elements like with getElementById or querySelector and then manually write the JavaScript values into the elements that were returned. This is of course possible. But it's hard to scale and comes with a lot of work that needs to be done just to get values from your JavaScript onto the html. That's the reason these templating features exist. They are giving you a way to describe how the values from your js get into the html without writing all the fiddly code between the two parts to make it happen manually. That's not to say you couldn't, or even shouldn't, try doing it the manual way. If nothing else you'll quickly discover why these features exist in frameworks. Right now you seem to be dismissing them out of hand without understanding the problems being solved by them. So if you want to try to make an spa without any sort of templating then go ahead, go nuts. It would be a great learning exercise. But you'll also want to at some point try one of the major frameworks and see how they solved the same problems. And then you'll be in a better place to decide whether you still want to avoid templating or not.
&gt; OP only talked about for-of and forEach. You read the title of this post, right? It's irrelevant what OP mentioned, it's like if he said "Does anyone like fast cars? I drive a Porsche" and you're claiming that Ferraris aren't part of the conversation. &gt; An incomplete snippet is of course shorter than a more complete one. The snippet isn't incomplete, it's implying code re-use &gt; Since forEach doesn't return anything Again, you're limiting the conversation to what you want it to be about for some reason. `map` returns, for instance But whatever, believe what you want since you clearly don't want to have an actual conversation
So are the HTML elements without the v-html tag regular html or are they part of a rendering engine that just uses the same syntax ? 
I‚Äôm not sure if this is possible and if it‚Äôs possible I‚Äôm pretty sure it‚Äôs an inefficient way of rendering HTML. All SPA frameworks/libraries use some from of templating. Otherwise you‚Äôre just doing performance costing DOM manipulation. You could build a ton of pipeline code and create a SPA app with jquery or use es6 js that would constantly change the state of the HTML but aren‚Äôt templates easier and less prone to errors?
It's not an expression in vanilla.js, it's an expression that's granted to you when using a rendering engine like mustache.
Evan you is about to swoop in and tell me I'm wrong- I think the template syntax you can write in your vue components uses the same parser that is used if you typed your v-html in html, meaning when you mount vue to the page the node is read into the parser and vue takes over rendering of the node from there on out
So don't do it. Anything you can do with Django you can do with JSX and javascript. It's your choice how you use it. You don't have to put loops in there just because others do it.
This isn‚Äôt going to be the answer you are looking for but just learn some basic HTML. You are going to need to know it if you want to include script tags to utilise your Javascript anyway. It really isn‚Äôt too hard to learn the very basics and it will go a Long way.
Had the same thought. Jsx and redux was what made me now roll my own using views as strings and js template literals and a state handler with a repository type setup maybe more common in traditional server side languages for handling data layer. Plan on releasing it some time in the future but if you plan on doing your own im happy to share how i solved/did some aspects of the implementation. 
That would be a mistake. HTML is made for documents, and fishing elements out of a div soup with ids and classnames is a terrible way to go about making apps. From the frameworks you listed React is the only one without the added weight of a template, jsx are pure JavaScript functions. Go through eggheads React fundamentals course and you‚Äôll get a different perspective. 
no
JSFiddle.net is great for stuff like that... You can tweak the HTML and CSS there also and view it live in your browser. There's plenty of examples you can find out there using JSFiddle. Honestly though, you will be hard pressed to lean much JavaScript for web without learning some basic HTML and CSS. You can exclusively use JavaScript with NodeJS, if you wanted do something more along the lines of functional programming, and there some really good web compilers out there that use that engine. Brackets is another option - because it has the live preview that allows you to run your code without having to have any idea how to actually run a simple localhost server from a CLI.
- [visual studio code](https://code.visualstudio.com) (free) - [webstorm](https://www.jetbrains.com/webstorm/) (30 days free) I personally prefer webstorm, but visual studio code is also really good.
I think the experience of dragging and dropping an image on an IDE window and having it generate the HTML is ultimately going to be more frustrating than helpful if you don't understand some basic markup for layout. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img
I can agree to that. Knowing the differences between a dynamic function call, call, bind and apply are far more important to know in JS. Yes being aware when you push to your array matters. But changing that for a linked list pattern leads to no optimization. So again its mute. In fact to build the same pattern would lead to more overhead as you change you next points. When people try to apply these pointless patterns doesn't make it run any better. It only helps communicate with those that rely on concepts from languages that don't exist inside JS. My arguement is its conceptual not practical. My knowledge is very practical. I know the ins and outs of JS from resolving animations correctly to the differences in RegExp engines in JS which when those are managed correctly. It just matters so much more than patterns that don't formally exist
Do you know of a website that allows you to learn how to use JavaScript with HTML?
There are libraries for that, like styled components.
that is absolute BS. functional programming is not easier to read. Your example is completely retarded. Why are you using easy to read abstractions "removeIrrelvantThing" and "alterThing" in example 1 but not in example 2? You could easily do For (something of something) { removeThing() alterThing() } It's the same shit, you just purposefully didn't because you have a bias for functional programming. And functional programming is not easier to read. It's objectively harder to reason about. There's not even an argument about that, there's a reason they teach loops before they teach FP.
nice tone
No
No
No, absolutely not. In fact, ideally, you shouldn't need _any_ tools to learn how to use something like React (which is why [the React "Getting Started" docs](https://reactjs.org/docs/getting-started.html) were just revamped to emphasize you can use React with just a couple script tags and no build step). Similarly, the main point of Create-React-App is to give people a solid build setup with good default settings, but keep it all abstracted out and hidden away so that end users don't have to worry about it at all.
Note that JSX gets transformed into `React.createElement()` calls at build time - JSX is just a nicer way to write those calls.
Useful for creative inspiration and learning purposes though. I've not really used before/after, so this is an enlightening demo for me.
Simple answer: no, there isn't. HTML does not, and cannot, do things like looping, injecting data, conditional rendering, etc. This problem has been solved for over 20 years, in various flavors. Not sure your disdain for "ugly code" is justified at all.
&gt; Knowing the differences between a dynamic function call, call, bind and apply are far more important to know in JS. Memorizing the specific difference between call and apply is soooo much less useful than understand what a linked list is and why they are useful. You clearly don't understand the latter.
What you're asking isn't very viable. An alternative to those UI frameworks which may be more your speed is [bunny.is](https://bunnyjs.com). Its more tied in to vanilla JS compared to others. I haven't used it and the docs are a bit sparse but it may be worth considering.
This is probably something you are looking for: [https://webflow.com/](https://webflow.com/)
What you want is called Microsoft Front Page, a **terrible** webpage editor from back in 2003. And even that didn't let you generate HTML from an image, it was just a WYSIWYG editor (what you see is what you get). If you're going to learn (web-based) Javascript you *need* to understand HTML. I say this as a JS team lead, author of a JS book, and developer of an introduction to Javascript online course. There is no reason for you to try and "hide the details" from yourself: if you can understand JS you can learn HTML very quickly. Honestly I think the "code academy" you used did you a disservice by not requiring and introductory HTML course.
I am taking this challenge. By the way, can I add ul i li?
Sure thing. You keep being toxic because I am sure that's working great for you
Why would they ever get rid of them altogether?
return await db.get('......')
 https://developer.mozilla.org/en-US/docs/Learn
Thanks for the help! But I have no idea how to use this! :( Please elaborate? Please give me an example that uses this! Thanks! P.S. Sorry for all the '!'!
Eclipse for JavaScript is pretty great.
For learning purposes I highly encourage you to build this application twice: once using raw DOM calls (or jQuery if you prefer) and once using Angular, Vue, or React. Then come back and decide if your initial feeling about ugly code is correct. This isn‚Äôt meant to be snarky, I actually believe this is a good idea. Many people have negative feelings towards JSX when they first see it but become evangelists after actually using it.
You can wrap the `db.get` in a new promise: const row = await new Promise((resolve, reject) =&gt; { db.get(`SELECT ID FROM USERS ORDER BY ID DESC`, [], (err, row) =&gt; { if (err) { reject(err); } resolve(row); }); });
Oh, I see, this is certainly intriguing.... Thanks for the help!
&gt; Otherwise you‚Äôre just doing performance costing DOM manipulation. Manipulating the DOM costs more then rendering a template? Sure? I thought the template rendering itself is done via JavaScript and DOM-manipulation. &gt; You could build a ton of pipeline code and create a SPA app with jquery or use es6 js that would constantly change the state of the HTML but aren‚Äôt templates easier and less prone to errors? I get your point, but I feel like not. I am unsure.
Sure thing. I am going to assume you are using express and want to return the result to the client. ``` async function getLastId() { try { const db = await open; console.log(await db.get('SELECT ID FROM USERS ORDER BY ID DESC'); } catch (err) { errorHandler(err); } } app.get('resource/lastId', async (req, res) =&gt; { const result = await getLastId(); res.send(result); }) ``` Does that help add some context?
I guess you don't understand what I want to accomplish. Of course I can not loop in pure HTML. What I want to is write HTML/JS once and do the rest via DOM manipulation. And because that is not a very nice way to do, I thought there would be a framework to help me there.
Your closest "framework" is jQuery, or vanilla. Or you could potentially build your own framework. 
What about advanced high schoolers? Even though I'm only a sophomore, I've deployed 2 apps with ~10k users combined (mla formatter and vue-cli-plugin-electron-builder). I'd be happy to help if possible. I've been trying to get all my friends into coding since I started, and I totally agree with your mission statement.
I agree with almost all of your points. Maybe I am running against a wall with full force. ;) My question is now: Is there some framework helping me with my template-less-approach? Or maybe some design patterns?
Er, I'm sorry, I don't know Express, but I can still understand. (I assume the `req/res` are server requests/responses? However: how does `await getLastId()` work? Does it return anything? I read that all returns are wrapped by default in a `Promise.resolve()`, but does this extend to no returns also? Also, not to be that guy, but you forgot to close your parens in the SQL/console.log :) Thanks!
Well ok, if that's the case. On a site note: Why are all of my comments are downvoted? I am trying to be friendly, precise and open-minded. Am I doing something wrong or is my question that stupid?
I am not sure how much time I am going to invest. But if you publish yours I am interested in seeing it. :)
That's correct, `row` will contain the query result. If the promise rejects, await will throw the value that was passed to the reject callback (`err` from the `db.get` callback in this case).
yup saw that. Tried to edit it sneakily. &gt; However: how does await getLastId() work? Does it return anything? I read that all returns are wrapped by default in a Promise.resolve(), but does this extend to no returns also? I don't understand your question. An async function will return a promise. The async await decorators are just syntatic sugar for Promise.resolve. In the example I gave the await resolves the promise so it can be sent back in the response to the http request. 
I'll look into that. Thanks. :)
Oh sorry, I was blind/sleepy/inattentive enough to not notice that word `return` before the `await db.get(...)`
Yes, and the catch handler will do its thing (I checked). Thanks!
OK, I get your point. :)
No, of course not. Webpack didn‚Äôt even exist until a few years ago.
If you just want to start doing something visual in JavaScript you can also use the Canvas API. You only need a tiny bit of HTML to get you started (one `&lt;canvas&gt;` element, though you could also create that through JavaScript) and the rest is code. https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial
seems not
Dead link
It has nothing to do with civility in this case, and I mean no offense by any of this. You are basically shitting on billions of dollars and years of development... because you don't like the syntax. Now making no assumptions about your level of expertise, it seems like you don't have enough experience to make an educated opinion about why the frameworks we have, do what they do. Also, you're in r/javascript. We do almost everything with JavaScript, whether for better or for worse. And most of us do things with frameworks. And by saying &gt;This is an Approach, that I really don't like. In my humble opinion it leads to ugly code. you're saying that the code that all of us write, is ugly. You should try to make an SPA from scratch WITHOUT it becoming super ugly and basically spaghetti code. Hint: it won't stay beautiful for long, no matter your intentions. This is true of any language, with any framework, with any paradigm. But I digress. I would challenge you to take 6 weeks and try each framework for 2 weeks. Build a sample project and really try to understand what each is trying to solve. As a primer, here are the basic approaches for each: * React - unopinionated, uses pure JavaScript and supports JSX (basically HTML) * Angular v2+ - opinionated, uses Typescript and their own templating language * Vue - semi-opinionated, uses pure JavaScript, and supports JSX OR their own templating language
INAL, but from what I understand none of that stuff is legally binding or even enforceable.
Neat, but how is it an optical illusion?
In general one of a frameworks primary features *is* it's templating in whatever form that takes. If you don't want templating your looking for something closer to jquery. Or just plain js. I'm not aware of any framework that doesn't somehow abstract view handling. I'm not even sure what that would look like. Maybe something like [backbone](http://backbonejs.org)? It's mostly fallen out of favor and I don't know what using it in 2018 is like.
I don't think that's the right question to ask. He says "No" and there's a huge thing between readers "who cares it's a good thing" and the "smells fishy" crowd. The better question is "How do the financials work? Where's the money for the giftcards coming from?"
Looked like a maze to me first.
I learned so much using watchandcode than any other javascript tutorials. I learned a lot as an beg-inter js dev.
Use a Worker thread. Pass the data to the Worker thread. Let the Worker thread sort the data. When done, pass the sorted data to the main thread.
That does not in the slightest mean that it's an optical illusion. It's still cool though. Just not as advertised.
I'm sorry. Poor english from my side. I'm not a native speaker. Doing my best to write correctly.
Learn html and css. 
You're missing the illusion. Try relaxing your eyes. The stereoscopic effect is similar to the 3D images that can only be seen when your eyes are crossed, or else when you focus on a point much farther away. Then the time appears as ordinary numerals.
Thanks! I hate it.
&gt; You are basically shitting on billions of dollars and years of development... because you don't like the syntax. Well, if you put it that way ... &gt; Now making no assumptions about your level of expertise, it seems like you don't have enough experience to make an educated opinion about why the frameworks we have, do what they do. That is kind of right. I am asking for what to learn. As there is so many possible things to learn I am trying to figure out what is best for me. I looked at those modern JS frameworks ans thought, that having everything in a single web page and doing the rest in JavaScript looks like a very interesting approach. I wished to load the page only once and do the rest in JavaScript no pesky page reload. So I looked into those frameworks and every tutorial started with something like doing HTMLish but not quit HTML. Be it some kind of HTML-Template language or something that parses HTML and substitude symboles or similar. \*sigh\* This looks to me like the developer wished to addres webdevs and say: ‚ÄúHey look it is as easy as HTML.‚Äù It doesn't look like the right approach. &gt; Also, you're in r/javascript. We do almost everything with JavaScript, whether for better or for worse. And most of us do things with frameworks. I think we are kind of in the same boat. I want to solve things with JavaScript. Writing something (HTML-Templates) that gets parsed by JavaScript techniclly solves things with JavaScript but not the way I ment it. &gt; You should try to make an SPA from scratch WITHOUT it becoming super ugly and basically spaghetti code. I don't want to do it from scratch if possible. &gt; I would challenge you to take 6 weeks and try each framework for 2 weeks. Maybe I will do that. Anyway thanks for your opinion. :)
How the HELL does this work, brain?! If you gloss over it and just look at it, there doesn't seem to be any breaks or anything that 'create' the numbers. Yet, somehow I can see an outline of numbers if I focus on them. Partly, I think knowing ahead of time that it's a clock, and that there should be number, I'm looking for things to form the shape of numbers. This is especially so after seeing the number revealed via the toggle so that my brain could register the "font" of the numbers.
You're going to be super hard pressed to find ANYTHING without making it yourself. Sorry bout ya. Good luck, I guess?
What's the illusion?
I've got a theory that the worse your eyesight is, the easier it is to see it. I've got very good eyesight and it always takes me a long to see these magic eye illusions. 
lol gg
So DOM manipulation via jquery and js like document.findElementBY whatever queries the whole document. That‚Äôs much more expensive then breaking up the doc and using HTML 5 API. Basically the thing is you could create your own SPA framework and make it the way you want but it will be limited either by performance or scope. I don‚Äôt think there is a modern framework/library that does what you‚Äôre wanting. 
So DOM manipulation via jquery and js like document.findElementBY whatever queries the whole document. That‚Äôs much more expensive then breaking up the doc and using HTML 5 API. Basically the thing is you could create your own SPA framework and make it the way you want but it will be limited either by performance or scope. I don‚Äôt think there is a modern framework/library that does what you‚Äôre wanting. 
I found a crucial bug which exposes user information, you might want to PM me.
I can only guess but i think its googles polymer framework. the reason they dont use websockets may be because they have to serve websites for millions of people using almost every browser (and version) which is out there and may not support websockets
The 6 and 8 digits are the same. Cool thing otherwise tho 
Weird, I see it as a font of squares/blocks that are opposite diagonals to the background. I have to force myself to not notice to enjoy the intended effect.
Numbers in a maze
It actually is an optical illusion. He‚Äôs just being a pedantic asshole because Reddit. Specifically, it falls into the category of figure-ground illusions. 
Your reddit post says &gt; Last semester, 60% of the students in our program chose to pursue further coding education. But your website says &gt; students will begin to create a library of work to demonstrate their skill set to potential employers. Your messaging is conflicting. The goal should be first to get high school credit for taking a class, and second to encourage them to pursue higher education. I would not hire a high school graduate who made a cookie-cutter "bowling score tabulator" app in two hours a week for six weeks, or whatever.
https://i.imgur.com/skwlyAY.png In this instance, it's "alumnus", not "alumni".
Feedback post #3: Even just a tiny amount of diversity in your pictures would be nice.
lol I found this too. Giant JSON blob of everyone's contact info. Come on, this is basic shit.
Hey everyone, Really overwhelmed by all of interest and positive responses so far. Thank you! We‚Äôre still in early stage 2-person startup mode, so I appreciate your concerns and wanted to be transparent and address some of the top replies and questions you have. **Do students pay for this?** Our goal is that this program is presented as no cost to the student, but is something that school districts can purchase as an investment for their community. **Are mentors compensated?** The goal for school districts paying for this means that mentors would be compensated in a way that is both cost effective for the school and worthwhile for the mentor to justify the time spent. **Who is paying for the Amazon gift cards?** We are, for now. At this point, we‚Äôre in a Beta stage and are working with a partner school district to test this concept further with 35-50 students across multiple high schools this fall. (We bootstrapped a pilot program this past semester at one high school with great success) We have yet to decide with the district upon a final cost per student, so right now the cost of the Amazon gift cards will be covered by my cofounder and I as an act of good faith with those of you who want to get involved. We do expect to increase mentor compensation further as we finalize conversations with the district and solidify our business plan. **Is this a non-profit?** Nope. We decided not to go the non-profit route so that we can focus entirely on solving this problem in a scalable way and less time trying to secure grants and donations. **What does it take to become a mentor?** Right now, we‚Äôre scoping this to devs within the USA. All that is required is 1) skill as a developer in Git, HTML + CSS, and Javascript 2) Availability to meet over the course of a semester for once a week for 2 hours over video chat 3) provide regular updates on the student‚Äôs progress. If you‚Äôre interested, [fill out the form on the website](http://codeapprentice.tech/mentors.html) and we‚Äôll be in touch with you soon for a follow up conversation. 
I'd go even further and ask you to not bring on StuckOnCoboldLevel as a mentor. We can all see this problem from a mile away: they're going to spend more time putting down a student on technology choices rather than spending time building them up with foundational knowledge.
Great questions. Tried to answer it in [my comment](https://www.reddit.com/r/javascript/comments/8v6vno/mentor_a_high_school_student_who_is_getting/e1m85g2). Lemme know if there's anything else I can answer for you!
Websocket connection needs to remain open, this can have an enormous cost on the server. Sometimes it it preferable to do XHR, especially here since the content is not personalized and completely cached.
Totally understand any concerns about this being legitimate. Hopefully I've been able to address your questions in [my comment](https://www.reddit.com/r/javascript/comments/8v6vno/mentor_a_high_school_student_who_is_getting/e1m85g2). Please let me know if you have any further concerns!
And there is no state that is held, so a stateless protocol has advantages in routing and load-distribution.
Thanks! We have no set requirements for years of experience. As long as you have strong competency in Git, HTML + CSS, and JS you can be a mentor. Mentorships are remote over Slack video chat so your location is not a concern as long as it's in the US. 
Thanks! I was very blessed to have friends who were designers show me the ropes while I was in high school and help me get into the career I have now. That experience is a driving force for this program. 
We ask for availability from both the mentor and student so that we can match you with a student who is able to meet outside of your 9-5. 
Would love for both of you to apply. We'll do an initial phone screen and get a chance to learn more about you. As long as you have proven competency in the areas we're educating students (Git, HTML + CSS, JS) you should be good to go. 
Thanks! We are very fortunate to be partnering with a school district who buys into this vision. 
At this time, yes.
Well huhm, google talk in browser i think uses web sockets, so i don't think that would be the case. Is there any argument why you think they use polymer?
So websocket is heavier to use than XHR? In what sense exactly? thanks for your input!
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: /r/Serendipity/comments/8vcmk7/which_framework_does_google_use_for_fifa_2018/
I know right? If you're running an app to help people code, you should have gone through the basics yourself. I understand it's a startup with only 2 developers at the moment, but come on.
This leaves out one of the most important points: if you want a long-term sustainable ecosystem, people need to be paid with a salary and benefits to cultivate it. Right now npm is largely a byproduct of other projects and those other projects take priority over long-term sustainability concerns. There are one or two popular projects that can raise money (often much more than they actually need) but the long tail gets nothing.
I second Visual Studio Code. It is excellent. There are other excellent options but VS Code makes very good default choices ‚Äúout of the box‚Äù. I highly recommend it for getting started editing code. But yes. You should definitely learn HTML. I‚Äôm on the fence about CSS‚Äîthat depends on what you want to do.
CodePen is definitely worth looking at. See how other people made cool things and get in and tweak them, seeing the effect instantly. 
Oh, am I not supposed to be able to make out the numbers? It‚Äôs a little hard to make out the numbers with all the visual noise around, but I‚Äôm not having to cross my eyes or anything to see them ü§∑üèº‚Äç‚ôÇÔ∏è
LOL, probably better than not caring about linked lists is working for you.
&gt; using HTML 5 API What HTML 5 API are you talking about? 
The way i learnt years ago Cross your eyes. Refocus slowly Then just before it normally focuses, you can see it. Works for me anyway
Why is it surprising? It really would not be a good application of websockets. 
Damn that's cool
Check out javascript.info!
So i published a dirty boilerplate @ npm with a simple demo app handling states. in a new directory 
&gt; Websocket connection needs to remain open, this can have an enormous cost on the server. This is not true at all. The cost of using web sockets is in the amount of traffic transferred over them, not in keeping the connection open.
Mostly vanilla scripting. Google is very speed-focused and prefers to avoid frameworks or heavy runtimes. They have lots of manpower and can afford to do naked DOM manipulation.
We're doing it and love it to bits.
No, I would suggest they use Parcel instead - far simpler and very usually a drop-in replacement. Webpack might not even exist in five years' time.
A lot of what you said sounds overly extreme. For example, the human eye can see at most roughly 250 FPS.
Webstorm
Yes, using an extra object will incur the GC penalties of using an extra object. I'm not sure why this would be surprising.
Why not vscode?
VS Code
Sublime Text
Speak for yourself. I found it very enlightening to discover that allocating, assigning and garbage collecting an object has performance costs comparable with allocating, assigning and garbage collecting one object. He even did a disassembly to reveal that the V8 engine is doing exactly the thing you tell it to. I see a bright future for OP in law enforcement or forensic science: nothing gets past this guy.
in theory I'd prefer websockets over intervals of XHR, since the data does not change all that often (goals are like 1 or 2 per game on average). So why sent XHR every 3 seconds when you can update it just when the updates are required (websockets). I don't know, just my thoughts.
Definitely the best one out there. 
here's some good links Best place to start is Practical Javascript on https://watchandcode.com https://www.theodinproject.com/courses https://www.freecodecamp.org/ https://github.com/P1xt/p1xt-guides/blob/master/job-ready-javascript-edition-2.0.md https://github.com/P1xt/p1xt-guides/blob/master/wd-cs.md https://github.com/getify/You-Dont-Know-JS https://eloquentjavascript.net/Eloquent_JavaScript.pdf https://developer.mozilla.org/en-US/docs/Web/JavaScript https://addyosmani.com/resources/essentialjsdesignpatterns/book/ For the other parts of web development I really liked these 2 Udemy courses https://www.udemy.com/the-complete-web-developer-in-2018 https://www.udemy.com/the-complete-junior-to-senior-web-developer-roadmap and if you want to dive deeper into CSS - https://www.udemy.com/advanced-css-and-sass
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [P1xt/p1xt-guides/.../**wd-cs.md** (master ‚Üí e65cc0d)](https://github.com/P1xt/p1xt-guides/blob/e65cc0d15ff94532ee6d02c48207198c309d67fe/wd-cs.md) * [P1xt/p1xt-guides/.../**job-ready-javascript-edition-2.0.md** (master ‚Üí e65cc0d)](https://github.com/P1xt/p1xt-guides/blob/e65cc0d15ff94532ee6d02c48207198c309d67fe/job-ready-javascript-edition-2.0.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e1mhnoe.)
Swastikas everywhere.
What exactly does this prove?
Probably just a matter of taste, really... Always preferred the concept of working with an IDE than a text editor, and JetBrain IDEs are really great IMHO. I know that vscode is great nowadays but I'm happy with Webstorm...
I use PHPStorm since it includes all the webstorm stuff.
Yes, this link works, thanks. But the original link at the top of the post is still broken. Can you fix that so that others don‚Äôt need to read our exchange ... üòÄ Neat project by the way!
Answered my questions. Well done.
No, he is saying it is similar to stereograms in their appearance. I see what he means - it feels a bit like the numbers are at a different z-index than the rest, which is what stereograms also look like..
Assuming a modern Babel build then... 1. never `var`. 2. `const` by default 3. only `let` if it needs to change.
Not exactly, but very similar.
Don't wrap them all yourself, use the [sqlite library on npm instead](https://npm.im/sqlite); it has the same API as sqlite3, but it's all promises instead of callbacks. To reject from an async function you can just `throw` something and it's the same as `reject()`ing that thing.
I'd go with MEAN stack
55 seconds 
Pretty good. The best I've got is 88 seconds, but I've played the entire afternoon lol.
Wrote a game in canvas, see if you can beat 100 seconds! [http://aperocky.com/particle/](http://aperocky.com/particle/)
Always const. The reason, is that you can't accidentally override it. Const allows you to have some sort of type assurance, so far as the current scope goes. Trying to overwrite it will result in a run time error.
Just use loopback API (has a decent UI) and bootstrap. No point going into Vue. I'm more familiar with django, if you use django everything is practically done for you - although the same is true for loopback. The entire project can be built under 5 hours.
Pretty cool but probably wouldn‚Äôt use this if I need to check the time before my next meeting :).
No, that's great. Thanks for explaining!
if you are looking for it to match the time on your clock or computer, it wont. it's in 24 hour time mode. probably should have stated that first so people would look for the equivalency
The for loop is already looping through the passed in array, so the forEach loop isn't necessary. You just need to compare the array at whatever index you're at, to Dave and return "I found him" if it's equal and if not, continue. 
So, if I understand you correctly, you mean something like function lookingForDave(arr){ for ( var i = 0 ; i &lt; arr.length ; i++ ) { if ( arr.indexOf\[i\] === "Dave" ) ){ return "I found him."; } } }
Yup exactly, except with arrays you don't need to use .indexOf, you can just call arr[I]
Yes, the forEach is redundant. You‚Äôre looking for arr[i]===‚ÄúDave‚Äù The loop will read that as arr[0], arr[1], arr[2], etc. 
What the nut. That's a game changer. I'll play with that and see if it resolves the conflict. Thanks!
No problem! It took my awhile to wrap my head around it. Just have to think of i as a number. 
// Create a function that checks to see if "Dave" is in an array. function lookingForDave(arr){ for(var i = 0;i&lt;arr.length;i++){ if(arr\[i\] == "Dave"){return "I found him.";} } } **IT WORKED! Thanks!** 
No problem, glad I could help!
Ahh the nostalgia... Another option would've been Dreamweaver ( Õ°¬∞ Õú ñ Õ°¬∞)
It looks like it's using Wiz, Google's internal JavaScript framework. There's not much information about it, but the telltale signs are the presence of the `jsname`,`jscontroller`, `jsaction`, etc. HTML attributes. You can see it used in other Google web apps like Photos, Calendar, and Gmail. Source: https://twitter.com/cramforce/status/958696304149868545
I agree with both your statements, thanks! However, what we have to be careful about here is, you have to always wrap your code inside a `try...catch`. Thanks for the help, I'll definitely check it out!
Depending on the target audience, might not even need Babel. Modern browsers and Node versions have support for all of this stuff, thankfully
15 years is a very long time when you're talking about trends in web/mobile technologies.
Well, I didn't know I was feeling sick to my stomach until I clicked through.. good job, but also piss off mate 
I'm honestly curious as to why this would be down voted. 
My best is 56 seconds...holy crap this is harder than it looks. Next challenge...develop a program to beat 100s :)
VSCode is actually an IDE, at least according to the definitions I've found. I think as far as marketing, VSCode was sold as an "editor" simply because a lot of JS devs have an aversion to IDEs. Regardless, Webstorm and VSCode are both great. I use them both.
[https://imageshack.com/a/img924/2213/cTerhz.jpg](https://imageshack.com/a/img924/2213/cTerhz.jpg)
Did you post this same message twice?
That would actually be a very interesting greasemonkey project. 
Also, the reason to use expressions over declarations is to avoid hoisting and running into use before define weirdness. If you use `var` in your assignment, things are still getting hoisted and there's no practical value.
Not sure why I'm getting down voted for this. I just stated what I use, since I do a lot of work with PHP and Node.JS, PHPStorm handles both sides of the house. Meh. Whatever.
&gt;INAL I have added a disclaimer to the store listing for the extensions and from what I can see in the developer guidelines, it should be enough
I've been using VIM. Had to write a little plugin to get compilation working without using YouCompleteMe ([https://github.com/tbranyen/vim-typescript](https://github.com/tbranyen/vim-typescript)), pumps output into the Quickfix window. I use vim-heir to highlight the errors. It's been very nice and the first time I've had support in VIM for a typed language.
Huh, fair enough. Kudos on your release anyway
Precisely. REST can be cached.
How u implemented same password based on parameters like masterpassword + email + .... Hashing? MD5 or SHA1? If yes, how u implemented options Use sums? Use caps? Put these sums or caps after hashing on same position each time? I made like this app but used only hashing same params. Your implementation is intersecting.
NeoVim + Deoplete. No need for a heavy IDE :)
I dont understand how you knew that they are not using Web Socket. I was monitoring the XHR and I don't see them sending request every 3 seconds. AFAIK, polling is not a solution in software engineering, right ?
Why are you adding indexes You need to create a new array element for each not sum them up
Hmm. You make a good point. How would I go about doing that?
 let randomNumbers = [1, 3453, 34, 456, 32, 3, 2, 0]; function indexFinder(array){ // to pass in the array to be evaluated var indexes = []; // the new array to be filled for ( i = 0 ; i &lt; arr.length ; i++ ) { indexes += arr.indexOf[i] } return indexes }; Okay, you've almost got it! 1. I'm not sure what qualifies as "random" but maybe those numbers were provided? To create random numbers, check out `Math.random()`. 2. It looks like your function takes `array` as an input, but the `for` loop uses `arr`. Be careful: `arr` will be `undefined` as it is. 3. `+=` is good for addition and concatenation, but to add elements to the end of an array, use `.push()`. (You can remove them with `.pop()`). (You can also add to the *front* of an array with `.unshift()` and remove from the front with `.shift()`.) 4. `arr.indexOf(i)` doesn't do what you think - this find the position of `i` (whatever number it is at that moment) within the array... for example, if `i` is 0, then this would be 7 for your `randomNumbers` array, while 1 is at index 0 in that array. Instead, just use bracket notation: `arr[i]`.
Read how to extend an array in JavaScript 
Post to StackExchange next time
https://www.agitraining.com/html5/tutorials/html5-api-overview [here is a good entry level explanation ](https://www.smashingmagazine.com/2017/02/designing-html-apis/) 
Hi /u/Lesshjk, For javascript help, please visit /r/LearnJavascript. Thank you!
Couldnt this be achieved with shorter, more readable and more efficient code using nested for loops? Honestly. Map, filter and reduce are great tools for many ocasions but not here. It seems cargo cult programming has taken over the world and people no longer think about which tool to use. It honestly sickens me to see someone PROUDLY showing this piece of code as if it were outstanding. And it is not even the author's fault; they probably don't know any better. It is just all these shitty "ES6" tutorials going around telling beginers that regular for loops are a bad practice and that they should use map, reduce and filter instead, as if those three functions were the perfect solution to all of our problems. If i had to offer a solution i would just say go read some books from people that have been programming for a few years or decades instead of blog posts and articles from some schmoe that went to a javascript bootcamp last summer and thinks he's hot shit. Or maybe just, you know, think about what you are doing before doing it instead of blindly following what some rando on the internet told you to do.
Hi /u/hammer214, For javascript help, please visit /r/LearnJavascript. Thank you!
Yeah but Dave is 45, runs Android Jelly Bean and wants to watch the football. Google talk is more of a utility.
I think the source is convoluted because he‚Äôs trying to handle multiple data types and be more generic. But altho good attempt, it could be a lot simpler. Instead of having to figure out how to get and set the data. Just delegate that to the user providing some sane defaults. Something like const smooth = (data, smoother=movingAverage, sampleProvider=next4, initArray=[]) =&gt; ( data.reduce( (result, value, index) =&gt; { const sample = sampleProvider(data, index); const smoothValues = smoother(sample); result = [...result, ...smoothValues]; return result; }, initArray); ) Now the user can override the smoother function(moving average or other types) and a sample provider(next 4 elements or other functions) and so on. But honestly this can just be a function living in your source. No reason why I would look in npm for this simple function. Also excuse the formatting. In mobile. 
I agree, it's really strange to implement a moving average with map and reduce. All of the disadvantages with none of the advantages.
`window` is the accepted terminology in CS lit. This code is very, very, very difficult to read and maintain. I wrote a blog post about performance in moving-averages: https://joe.framba.ch/blog/moving-average. You might want to consider performance.
I think the source is convoluted because he‚Äôs trying to handle multiple data types and be more generic. But altho good attempt, it could be a lot simpler. Instead of having to figure out how to get and set the data. Just delegate that to the user providing some sane defaults. Something like ```` const smooth = (data, smoother=movingAverage, sampleProvider=next4, initArray=[]) =&gt; ( data.reduce( (result, value, index) =&gt; { const sample = sampleProvider(data, index); const smoothValues = smoother(sample); result = [...result, ...smoothValues]; return result; }, initArray); ) ```` Now the user can override the smoother function(moving average or other types) and a sample provider(next 4 elements or other functions) and so on. Furthermore, user can even add handlers for his object case and export that as separate function which utilizes the above. But honestly this can just be a function living in your source. No reason why I would look in npm for this simple function. Also excuse the formatting. In mobile. 
Never liked forEach but for of is awesome. Much better readability and I'm also using it almost everywhere, unless i need a run-index.
Vs code is a full featured IDE with an excellent debugger for node applications.
using XML as syntax doesn‚Äôt immediately make the language declarative
[removed]
Looking at OP's posting history, they're not going to read your feedback, which is a damn shame.
You can do this like var indexArray = []; var dataArray = [243, 123, 4, 12] dataArray.map((data,index)=&gt;{ // you can add if condition indexArray.push(index); })
You might be interested in d3fc-technical-indicator, it implements moving average, together with a number of other standard financial indicators: https://github.com/d3fc/d3fc-technical-indicator#moving-average
If you wanna rock with your code use VS Code 
 var s = 1;
First of all, Java and Javascript are different languages, and since this is a javascript subreddit I'll answer about it. It's definitely not a dead or dying language, as it's the goto option for web applications, either for their UI only or the whole thing. And with the latest standards in the language it's become more pleasant to write than before imo. So welcome to the javascript world :) 
Hey! Thank you so much for replying! Based on your comment, I conformed my code to let randomNumbers = \[1, 3453, 34, 456, 32, 3, 2, 0\]; var indexes = \[\]; function indexFinder(array){ array.map((data,index)=&gt;{indexes.push(index);}) return indexes; } indexFinder(randomNumbers); I don't fully understand what all is happening, but it works. Thank you for your help. Looks like I've got some more learning to do. 
let nameArray = ["John","Dave","Sam","Ronaldo"]; let dave = nameArray.indexOf("Dave") if(dave !== -1) console.log("Hey Dave is at index"+dave); else console.log("no dave");
Welp, `node-sqlite` uses `node-sqlite3@4.0.0` which throws the end-of-life erroe, so I have to continue using sqlite3 for the time being (until the devs decide to upgrade to sqlite3@4.0.1 on their end).... But there's an easy way to make it forward-compatible, just declare the Promise-wrapped sqlite3 queries as variables and then use async/await!
This was really helpful! The final code I arrived at was let randomNumbers = \[1, 3453, 34, 456, 32, 3, 2, 0\]; var indexes = \[\]; function indexFinder(array){ array.map((data,index)=&gt;{indexes.push(index);}) return indexes; } indexFinder(randomNumbers); The "randomNumbers" variable was a mock set of seemingly random numbers. I haven't learned the Math.ceiling math.floor stuff yet. The array vs arr is sloppy typing on my part. I haven't had much practice with the Array methods so their exact purposes are still vague to me. += was just a guess. Haha. Thank you so much for explaining each of those misunderstandings. Seriously, I feel like I learn more by getting the answer "wrong" and seeking help than getting it correct on the first try. Many thanks. 
Oh. This is News to me! I think ive posted in the wrong subreddit then.. Is Java a simplified version of Javascript or? 
Not really, no, they share some similarities but are fundamentally different. Head over to the r/java subreddit if that's what you're looking for. :) 
Here's a sneak peek of /r/java using the [top posts](https://np.reddit.com/r/java/top/?sort=top&amp;t=year) of the year! \#1: [Finally: Effective Java, 3rd Edition](https://np.reddit.com/r/java/comments/74x9gv/finally_effective_java_3rd_edition/) \#2: [The 3rd edition of ‚ÄúEffective Java‚Äù was published today](https://np.reddit.com/r/java/comments/7mncsz/the_3rd_edition_of_effective_java_was_published/) \#3: [Java 9 Released](http://mail.openjdk.java.net/pipermail/announce/2017-September/000230.html) | [77 comments](https://np.reddit.com/r/java/comments/71lse7/java_9_released/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I did! Thanks. Im a bit more insecure of this now but Ill read more into it. Do you think Java is a good starting point, or perhaps a good way to Base ones career off of? 
Sure not, but the way JSX is conceived makes use of XML in a declarative way
I'm not really a Java developer but many big companies have Java in their codebases somewhere, as it's used quite a lot in the business world. So chances are you'll be writing Java code some time or other if that's what you apply for. It's worth learning if you like it, and it's friendly to beginners I would say. 
This is grate, have been looking for something like this, Thanks
Type and doc tooltips quite sold me out early to VS Code (you can also see them on webstorm but it is quite meh). VScode has been inferior to WS on html/css department for a long time, but now it caught the grip.
Well id be basing two years of college at it. With internships at companies that need Java developers. So it would be what id do for quite some time, not just a part of what ill be doing
[removed]
Webstorm
Oh, yikes. The author seems to be a little confused about immediate and deferred results. For example, in question 3: console.log(Promise.reject(1)) The answer here (that it "throws an error") is wrong. `Promise.resolve` and `Promise.reject` will aways [return a promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject). Full stop. Just like `new Promise(fn)` and `Promise.all`. At this stage, the promise is always pending. Always. It will never throw (except, with a `SyntaxError`). At the start of the next event loop, when the promise is fulfilled, there is nothing to catch the rejected promise. What you see then is not an error (though it sure looks like it in some environments), but a warning. And the warning won't have much to do with that value, `1` (though some environments will provide that, too). Instead, the warning is about *not catching* the rejected promise itself. This is something you should strive to avoid -- just like you try to avoid unhandled exceptions in synchronous code.
lol I thought this is some redditor implying that the subreddit is dead by supplying these three headers.
&gt; transform A function to apply on each value. The function receives the value as its first argument and the column number as its second argument. The return value of the function will replace the value it received. The transform function is applied before dynamicTyping. According to this, you could use a function such as: function trimString(rawValue, columnNumber) { if ( &lt;it's one of the columns you want to trim&gt; ) { return rawValue.trim(); } else { return rawValue; } }
That might be the fastest I had to close a tab
Java forces you to use data types, classes, scope, etc. Learning Java will help you understand fundamental programming concepts that transcend all languages. However, JavaScript is much easier, more fun and used in every web project. Personally, I‚Äôd do Java. Employers will never tell you: ‚ÄúYou only have Java experience. This job requires JavaScript.‚Äù But, they will tell you: ‚ÄúYou only have JavaScript experience. This job requires Java.‚Äù
Hmm, yes! ü§≠
I wrote a bit about Java vs JS below, but I re-read your comment and should actually answer it... :P Javascript is incredibly popular, it's only growing in popularity. More and more businesses are writing JS as it works on both websites and for back-end applications. You'll not go wrong with learning JS and getting jobs in it! In my day job I work on Apex (from Salesforce, a java-like language), Javascript, and Ruby. Once you learn a language to a point (and I think languages like Java can help because I believe they force you to learn the *why*'s, not just the *how*'s of programming - though I'm aware I don't know C and pointers and some people would argue the same thing about me, so I wouldn't worry about it) all languages become similar, and it starts being about syntax. How do I do a loop in Java/JS/Ruby? Oh, JS has a `for x of y` syntax, what's that do? Cool! JS will let you pick it up quickly, and it will teach you excellent concepts you'll need when you learn other languages - I'd say go for it! --- Original Comment --- As /u/Nimor111 said - Java and Javascript (JS) are two different languages. Java came first, and was incredibly popular - IIRC JavaScript was going to be called something else, but they decided to ride Java's coattails and call it JavaScript. Fun times! Java has a higher starting complexity, and the compiler forces you to think about things you don't *need* to in JS, but it's worth pointing out those things are there - they're just hidden from you. It makes getting started much easier, but I feel can lead to tripping you up later down the line. A good example of Java vs JS is how to write a simple HelloWorld app. In js, you just need to crack open the developer tools (F12), go to "console", and type console.log('Hello World') For Java, you'll need to install the Java Development Kit (JDK), crack open an editor of your choice, write the code, compile the code, then run the code. If you pick a text editor, you'll run the compiler yourself, if you pick an IDE (Intellij IDEA Community Edition is what I'd recommend - it's free!) then it'll give you a run button and do it all for you. The hello world app in java looks like this: package com.joint3n.java.helloworld; public class HelloWorld { public static void main(String... args) { System.out.println("Hello World"); } } Now, what the heck is a package, a public, a class, a static, a void, a main, a String..., a System.out, and a println?! The first step to learning java tends to be "Ignore all that for now, let's work on variables". And it's a good approach. If you miss any of those words off, the compiler will tell you "Nah mate, not on." and let you know where the error is. Very handy! In JS, you'll have to execute the code to find that sort of flaw. (Or use a good IDE, like VSCode or WebStorm). 
Good ol websocket fallback activated
Thank you for your reply. In the complete-config, I have to specify that it should apply a function to 'results', like so: complete: function(results) {f(x);} What do I pass to transform?
There‚Äôs no guarantee unless you find traces in the source-code. Google teams can pick up whatever tool they see fit within the limits of their big list of tools.
Grate artikle, verry use and helpfull, thanks
Great info, thank! I'll have to wait until you open to Europe :P Godspeed!
Sitting on VSCode with sublime as a scratchpad. Scrapped webstorm in favor of VSCode cause of performance reasons and because its less distracting by default.
According to the docs quoted, you should be able to just pass that function to transform. ... transform: function trimString(rawValue, columnNumber) { ... }, ... I don't see the relevance of `complete` here. It's unrelated to this.
It seems like it has been updated from a warning to an error in recent versions of, at least, Chrome and Firefox. You could say that this is really unspecified behaviour. According to the specification it isn't even a _warning_, but browser vendors have decided to promote it to a full on error (red colour, ‚ìç symbol) from the warning (orange colour, ‚ö† symbol) they initially used.
My portfolio website shows a depiction of myself ( as close as possible) made through css. [http://ishmeetsinghbindra.com](http://ishmeetsinghbindra.com)
Pretty cool. This stuff has been up on this sub before, taking advantage of the function passed to be used for compiling jsx.
Most demotivating introduction ever... *"What you learn here is shit API designed by incompetents but we're going to do it anyway"*
?
While we're at it, I'd also like to see: { state | prop = value } as an alternative to: { ...state, prop: value}
This did exactly what I needed, thank you so much. I only included the complete-config as an example because I figured both configs would behave the same. The difference, however, is that I call a function in complete that is defined somewhere else, so the syntax is a bit different.
This is very cool! Thanks for the fun. Just made it to 68 seconds, gif proofed! [https://imgur.com/a/JbTM8Jb](https://imgur.com/a/JbTM8Jb)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/jBWeRb4.gifv** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e1ndh7h) 
You can also define the function elsewhere in this case if you prefer: function trimString(rawValue, columnNumber) { ... } // Then later in the config you pass: ... transform: trimString, ...
Because you cannot add number to undefined. Btw WTF is that code?
This is a question that should be asked in /r/LearnJavascript instead. But in any case, when you do `let someVariable;` it is _not_ initialized so it has a value of `undefined`. Then, when you try to do `someVariable += i`, what you're trying to do is sum `undefined + 1` which is not something that can be added.
A clock is intended to be read in a blink of an eye. So this clock totally misses the point. The effect is pretty dawn cool, though.
You could send a HTTP HEAD request: const http = require('http'); const params = {method: 'HEAD', host: 'reddit.com', port: 80, path: '/r/javascript'}; const request = http.request(params, (res) =&gt; { console.log(JSON.stringify(res.headers)); }); request.end(); 
Hm okay so basically what your saying is Java is a lot more complex but at the same time unnescisarily complex? If I understand you cotrectly. Javascript is more straightforward, whilst Java contains a lot more why and how, but nobody really knows why until longer down the line? 
My experimentation has shown the syntax for calling a function defined elsewhere needs to be: transform: function (rawValue, columnNumber) {trimString(rawValue, columnNumber);}, It may just be one of several methods, but it's the only one I could make work.
Exactly what im beginning to think as well. I was afraid it would be the other way around but this is in my favor. Ive already studied C++, html, CSS and Javascript in school, a little Java too and im fairly confident I can learn more once ive gotten into the market. Even if what I did then is long but forgotten and basic, its still not impossible for me. 
That is not necessary. It might be that you're placing `trimString` in the wrong place or something similar, but that is certainly not necessary at all.
Personally, I think Java is a good learning tool. But if you‚Äôre looking for something to master, I think JavaScript is the way to go. Unless you‚Äôre doing something very specific, JS is gonna be the best language by leaps and bounds.
`[243,123,4,12].map((_, idx) =&gt; idx)`
This is really useful - and explains what I need to customize in an easy to read glance.
\+1 for jQuery optional and in a different color. Would be cool to see this taken to a next level where it was written in javascript and interactive (summarizing the data elements on a click or hover) Thanks for the post
It's challenge from FreeCodeCamp. [https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range/](https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range/)
Ok.thanks.
 let sum; // typeof sum === undefined console.log(sum + 3) // undefined + 3 (copy and paste `undefined + 3` into your console and see what happens let initializedSum = 0; console.log(initializedSum + 3); 
Well with Java i get both education, a certificate (i know its not that important) but also internships to get me started. So why not do JS later? 
Because we already have const obj = {age:50, name:"example"} which is also JSON, and what you get when you serialise an object, and how it's printed to the console so you can cut and paste if you want... Why add a second format? What benefit does it actually bring?
i dont know if there are sites that show you specifically how to integration test with javascript. you'll probably have to read over generic sites and apply it to your situation (like this: https://martinfowler.com/articles/practical-test-pyramid.html) these kinds of scenarios, DOM-level integration tests *are* hard to test, which is why fewer of them are written than unit tests: https://martinfowler.com/bliki/TestPyramid.html this is where you want to start thinking about whether you're testing implementation or behavior and plan out your tests that way. what is the actual important behavior of your app? an example: a user clicks a button to add a comment to a blog post. the important behavior there is showing a form that is submittable after the user clicks a button to leave a comment. you can show the form by having a gutter slide down, a popup display, or a comment box just appear under the story for instance. the behavior is showing the form, the implementation is using a modal or a gutter. you want to assert that the behavior is happening. you don't want to assert that it's being implemented in a specific way. but, in general, the way i test that the behavior happened is kind of like this pseudocode situation: assert that the DOM isn't showing the hidden content perform action that triggers hidden content to show assert that hidden content is now visible i usually just inspect the DOM (i use react and enzyme to do that, not sure what the tooling is for angular) itself and make sure that the element isn't visible in my tests. it's going to be up to you (and maybe your product owner) to determine the key behavior of the app / feature you want to test and make sure it's happening. this is why testing is hard: you have to basically apply principles that aren't well explained to your situation on a case by case basis.
sublime + terminal
Very impressive. You might want to check out https://picsum.photos/ for the placeholder images. 
This is great information. I always use [Regex101](https://regex101.com/) to write my regexes. I would be useless at regular expressions without it.
Well yeah, you're thinking in terms of plain JavaScript and how it's worked for decades. The main issue I have with object literals is that commas are annoying when refactoring it. When you need to add a new property, you need to add a comma after the latest one, expecially if the value is large such as a function. Adding a trailing comma doesn't solve this exactly because of properties in the middle of the object - the comma always seems to be deleted when refactoring. Plus it's unsightly. For example using a plain object with Vue, the trailing commas become a clear annoyance over using a class. When refactoring a property in the middle, it's easy to forget a comma. export default { name: 'unclean', data() { return { color: 'pink' } }, computed: {}, methods: {} } vs class Clean extends React.Component { state = { name: 'clean' } render() {} noNeedForPeskyCommas() {} } So, in cases where we want plain data that spans multiple lines, why not have this same cleanliness? export default { name = 'clean' data = () =&gt; ({ color: 'pink' }) computed = {} methods = {} } No need to think about commas when refactoring, it just works. I feel like JS additions always provide utility along with sugar though, whereas this would purely be sugar... 
This isn't Javascript, but DOM. Those are different browser implementations of the same thing that all browsers now implement.
That's pretty much the crux of it. Some people think JS just hides that complexity. For example, in JS you can say Const name = 'peter' If (name) console.log('wat') To write that code is simple, and to run it is fine. You think 'gonna create a variable called name with the value of Peter, and if name has a value, print something. You don't have to think about what type of data is in name, you didn't have to think about what 'if("Peter")' means. In Java you'd have to say String name = "Peter"; If (name != Null &amp;&amp; name != "") System.out.println("eat"); The compiler forces you to care what's in name. It doesn't believe that a string - some text - can have a true/false value. It wants you to provide that translation yourself. I suppose all of this is just stuff to learn and it's no big deal. The main thing to look at is this: https://www.itjobswatch.co.uk/jobs/uk/javascript.do https://www.itjobswatch.co.uk/jobs/uk/java.do
Uhms, I postpone my intervention until today and I am a little disappointed that is limited to people in the US. I would love to participate :) I have mentored other people over discord and it has been an interesting experience. Get to learn new things based on some of their questions. I got a few more questions (in case that is useful to others): - Will some of the topic to cover be plain javascript? or are we talking about ES6 / ES7 / ES8? - Are you thinking on covering more useful libraries such as react, angular or vue? - Are you thinking on getting them to use plain javascript or would the content also cover typescript/flow?
Hey I saw you were downvoted, guessing it‚Äôs because of grammar. Keep commenting though, English isn‚Äôt my first language either so understand the barrier sometimes. Grate -&gt; Great verry -&gt; very helpfull -&gt; helpful If you use reddit on a phone, you can always install a English keyboard and change language when you type in English to get help with autocorrect.
41 seconds, lol.
Ok that makes sense now, although name of the function is misleading - in educational examples it should teach better naming practices.
I'd rather deal with commas and choose how I want to write an object and it rely on newline characters to assign key-value pairs. That's essentially what this is. In your example comment, the last code block where `data` is a function, which if for some reason you need a huge function, or want to pass a function into a function? It's going to look messy. With classes, each 'property' is created as it's added. In your original example, `age` is added as `this.age` as the code is executed on that line and you can call it any point after then. With objects, the properties aren't assigned until AFTER the final closing brace has passed (which is why you can't access other properties inside the same object during creation). I'd love to be able to access properties within an object as it's initialized, but then I just think that we already have 'classes' (not akin to classes in other languages, but still demonstrate what we're looking for this discussion), why would I need to worry about that? You could always take the route of creating classes with the fields you need and using them as object - simply return the singleton of the class (`const singleton = new myClass(); return singleton`) and then you can work with it as though it's an object. This is one design technique used for creating app-state stores and sharing the values around an app (since you're only `newing` once, you're getting the same data back each time - updating values can mess things up if you're not careful but this is another topic entirely). As MrFoo42 said, we already have a format for this, which integrates with JSON really well (a direct-mapping, even). Change that, and then we have just another gotcha that'll trip people up without bringing any real benefit, and 'find the missing semicolon' will become 'find the missing comma' (which as you seem to be aware is already pretty hellish at times). If this is just about missing commas, there's probably an extension/plugin for your editor that fixes them automatically (never had this problem myself so don't have a link to any suggestions, but I'm confident such things exist).
They're NOT the exact same thing; [Imgur](https://i.imgur.com/8JUzkLL.png)
Thanks! And yes, i do believe i will see the difference of it all in time. Ive coded before so and what your saying does make sense to me, or well i can see how it makes sense to the languages ^^
`window.location` and `location` are actually the same object due to how Javascript handles the global namespace.
It's a hard to read clock ... what is the illusion? 
I am sorry, I wasn't too clear as to what I want to achieve. I have a file on a remote url, and I want to get information about this file, both content type and content length. 
Cool. But I really hate when people host non-code stuff on GitHub. It's like, where's the actual content I'm meant to be seeing? Amongst the .gitignore and readme files? That's awful.
This UI is very confusing. I honestly can't figure out how to generate a password
Loved this article. Wish someone showed me this when I started out
Yeah the UI is a bit messed up on mobile, have you tried using media queries? 
Sorry, I couldnt see the data on my phone when I was first looking. It's not in the correct geoJSON format, so you have to change it a little bit. Try this function onEachFeature(feature, layer) { // does this feature have a property named popupContent? if (feature.properties &amp;&amp; feature.properties.popupContent) { layer.bindPopup(feature.properties.popupContent); } } $.getJSON("https://data.sfgov.org/resource/6ia5-2f8k.json", function( data3, error) { data3.map(function(data) { data.type = "Feature"; data.geometry = data.the_geom; data.properties = { name: data.name, popupContent: data.name }; }); var geojsonLayer = new L.GeoJSON(data3, { onEachFeature: onEachFeature }).addTo(map); console.log("here! ", data3); }); 
I've also found myself using it alot for iterating through arrays. But it's not only practical for that but also for iterating through objects. And the syntax looks nice too. Though I don't use them nested as I find .forEach much better to look at :)
Git actually works quite well for text hosting
as far as I know, the only way HTTP allows to know that is doing a request for the file itself
I wouls suggest you to try out some big frameworks like vue, react and angular and see how they force you as a user to structure your app. Then I would take the approaches you like from these and start experimenting around without a framework and see what fits your own style the best. You can also of course read others code or just try experimenting without looking at any framework. Usually you'll find a way instinctly that feels right for you, if that makes sense :)
Thanks! That‚Äôs the kind of feedback I was looking for
Lol that comment with born on ES2018 xD No but seriously, it depends really. Sometimes when I start a new project and move to a problem and feel a bit clueless I try to study about methods etc that might help against that problem. Most of the time after a couple of hours of studying the answer is starting to fly by in my head, because I instantly start to find new ways to tackle the problem and ultimately solve it. But on other occasions I don't study at all because I know what I'm doing and what I need to do. Or I just study out of pure interest in finding new ways to solve a problem. It depends really :) But in the beginning of learning the language I really sat down and studied 2 hours atleast everyday. It really paid off ;)
Came to see a picasso click that worked and written in js and rubbing eyes now instead but pretty cool none the less. I had to click on the thing to eliminate the background to see it the first time.
If you long-press and drag on the red ball, sometimes it will disappear and functionally leave the play area, which can be used to run up the timer indefinitely.
`([a-zA-Z-]+)="(\w+)"` gives you both key/value pairs as capture groups in your example link. I'm currently at work so i couldn't spend a lot of time getting it to find them only inside the `&lt;% include %&gt;` tag, but this might get you started.
Do you perhaps know, how curl can manage to get exact content size of the file, and content type in form of a header?
How about something like this: https://regex101.com/r/BcueTd/4
Google has a ton of open source projects that no one gives a shit about, yet they did not open source a project that could have been very useful for the community. Specially this could have been useful for those backend programmers who maintain existing server side rendered html, and do not want to touch the React/Vue/Angular + Webpack Shitshow (TM).
https://stackoverflow.com/questions/2125714/explanation-of-slice-call-in-javascript
Thanks for the bug report, I've not been able to reproduce it.. are you on mobile? 
You'd use the latter if `array` was actually an array, with the slice method available; you'd use the former if `array` was array-like/iterable, but lacked the Array prototype, which gives the slice method.
May be overkill for your use case, but we use Artifactory.
A more modern way of creating an array from a non-array is `Array.from()` Array.from(arrayLike); https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from Though you may also see spread used a lot since it's pretty terse and works on any iterable (though `Array.from` isn't dependent on iterables making it more compatible). It's also useful in that it can be combined with other values when creating the new array [...arrayLikeIterable] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_array_literals
This is a really interesting solution. It's something I'll mull over and I appreciate the feedback. My initial reaction is that I don't want yet *another* service we have to depend on being up. The goal is to minimize the reliance on external service uptime to ship our code. It looks like from their [status page](http://status.artifactoryonline.com/) that they're based on AWS (and admittedly I'm not super familiar with how it works -- just a quick glance over but appears to be hosted by them) so it will at least have as much server uptime as our stack which also lives entirely on AWS.
This is an amazing project. Do you know about p5.js? It will help you with animation and html canvas stuff. I usually do all my animations in that only.
Exactly. It's for people who don't **want** HTML (in their JS). How people got on board with JSX I'll never understand. Heck, even [HTML in TTL](https://github.com/WebReflection/hyperHTML) seems better. Good luck ever getting rid of babel/transpilers!
This looks a lot like Java. I thought it was better to not use Java patterns in JavaScript?
The above code will return the correct content-type and content-length for all kinds of files, if the web server on which is it hosted is configured to provide them (which most of them should). The command "curl -I" does basically the same as the code above.
We use their on prem version, not cheap, but gets the job done. Also let's us share our own packages internally, handle storage of build artifacts, and handle other package managers too, like nuget, bower, docker, etc.
Yup, Chrome 67 on Android 8.1
Yeah why follow the good practices and proven concepts when you can just wing it? Who cares we're gonna rewrite everything in 3 months anyway...
r/blackmagicfuckery
through the keys of the object.
But this is not a 3d illusion...
As someone who wrote a book on Backbone.js, allow me to be the first to suggests that you abandon it in favor of React (or Angular or Vue). Backbone is a great framework for building your own framework ... but half the point of using a framework is to get best practices "baked in", and with Backbone you instead have to constantly keep best practices in mind or you'll create (say) a circular dependency between two views, or between a model and a view.
I've just tried my iphone. Unfortunately, web support for mobile is bugged to a degree - I'll come back and release this as an app!
You are right, misconfigured and as a result kept sending request to localhost instead. I am a potato, sorry : | Are port and path mandatory? 
C#
Yeah, sounds likes a problem of too many people using it incorrectly, so they updated the behavior. Definitely shouldn't use it like that.
Hi /u/real_trizzaye, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `able.bio`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [able.bio](/search?q=%28and+site%3Aable.bio+author%3Areal_trizzaye+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|55|95%
I really only have backend experience, so I wouldn't really know what is the preferred way these days. While I have know n of Vue.js, I've never explored until now and I am blown away. Your first comment became evident after seeing what it offered. Can't thank you enough for the insight!
&gt; I'll grant that Jeremy Ashkenas ... is a programming god Eh.
Apologies! Will diversify in future.
Yea that's a solution, but only if I'm using two different regex's, I first retrieve the includes and I apply this on the matches to retrieve the attrs, which is working by the way, but I'd like to make it work with one single regex, which is logically something possible I guess and hey, thanks for your reply, much appreciated !
set up a squid HTTP proxy and have npm use it?
I agree it's cleaner.
Yes this works to get the attributes, but what i'm seeking is a way to retrieve the attributes only within the &lt;&amp;#37; include &amp;#37;&gt; template tag
All I see are swastikas.
Also. John Dalton did lodash because underscore was so... underwhelming. 
If you give the parent `overflow: hidden`, the child should no longer be visible when outside its container. If you want to prevent the child from moving outside the parent at all, I think you‚Äôll want to check the new left/top values against the edge of the container in your js and only set new coordinates if it is in-bounds. Something like `if (newTop &gt;= containerTop &amp;&amp; newTop &lt;= containerBottom - childHeight) child.style.top = newTop;`
/r/ATBGE
Ditto. Has saved us over and over again. 
My apologies, I had edited that code block but my internet disconnected and the edit didn't go through. I have amended it to better illustrate early returns.
`overflow: hidden` did not hide the object outside the parent's border.
ATM: - never var - default let - const only if bisnes logic says this value is contant
Beyond my understanding of Regex then. I'd probably end up doing a loop.
Robin you're book is absolute class. You've really outdone yourself and its slow enough for someone who has no clue how certain things work as well as touching up on important concepts that are fundamental to React. You're a G. I'll be purchasing a couple courses in the future, but man you made programming fun again! And brushing up on javascript is so important!! Im a fan!! 
I personally recommend using Yarn's "offline mirror" feature, and committing the package tarballs themselves. I [wrote about this approach in one of my "Practical Redux" posts](https://blog.isquaredsoftware.com/2017/07/practical-redux-part-9-managing-dependencies/). If you do want an actual package proxy service, https://github.com/verdaccio/verdaccio seems like a good option.
Hi /u/kiarash-irandoust, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/tux_warrior, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/xh4ck3r, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/blankpicture, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/van2z, this post has been removed. It's really a CSS question disguised as JS, so perhaps you should ask for help in /r/css or similar.
It's the exact same thing. The difference is that `array.slice()` is called on on the instance of the array you have stored in `array` and `[].slice.call(array)` is passing in your instance as the context for the slice method using `call`. The only difference is that `[].slice.call` can be passed anything that's array-like (has a length property) and will return an array, whereas `array.slice()` will only operate on the array itself. An example usage would be the NodeList that's returned by `document.querySelectorAll`. By default, it doesn't have the methods `map`, `filter`, `find`, etc, etc. But you can easily convert it to an array that does by using `[].slice.call`. Also useful to know, `[].slice.call` is the same as `Array.prototype.slice.call`. The first is used as a shortcut to compress your code and save space, but requires a bit of extra overhead in terms of cpu (to create the array) and memory (to store the empty array). Also, they added a new method for turning things into arrays, `Array.from`. I'd recommend using the new method and polyfilling it where browsers lack support: if(!Array.from){ var slice = Array.prototype.slice; Array.from = function(arr){ return slice.call(arr) }; } It's not a 1-to-1 polyfill, but it fits 90% of your use cases and is succinct. If you find yourself needing a more robust implementation, rewrite the polyfill to spec later on ;-)
Hi /u/michael2ib1989, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/tabure67, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/andrazte, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/bookroom77, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/lucderp, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/YetiWords, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/KredeMexiah, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/DoveLux, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/jalapina, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/rajasegarc, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/YetiWords, For javascript help, please visit /r/LearnJavascript. Thank you!
As u/Doomsauce says, \`overflow: hidden\` should definitely work. If you have a demo somewhere (StackBlitz/JSFiddle/etc) it may be easier for people to help. That being said, I'd also suggest positioning via \`transform\` rather than absolute positioning as it's a bit more performant imo.
This looks really promising. I'm going to try to spin this up now. Thanks!
Here's a simple POC: https://jsfiddle.net/u1r7qwea/12/
NEW WORLD RECORD! 73 seconds, gif proofed! [https://i.imgur.com/RSXkHqj.gifv](https://i.imgur.com/RSXkHqj.gifv) 
Thanks. I'll do that next time :-)
Ex-Googler here, Wiz is one of the more terrible frameworks I've ever worked with (no interesting feature, no virtual dom, no data binding, nothing), and I've worked with a few. The community wouldn't adopt it if the fate of the earth depended on it. It's actually a part of a larger universe of frameworks - boq, wiz, jsaction, mss/pinto, all stuff used inside Google, and all very poorly received at Google itself, citing major interop problems and high complexity, and Angular (not 1.x) is the preferred solution today from what I've heard. Maybe a current Googler working there can offer some present day insights. At the startup I'm at we are using Angular 5 successfully (and some applications were built with Vue).
The dude has made three major, widely-used pieces of software. Even if Docco is niche, and Backbone and Underscore have been supplanted by better tools ... that's still three more than I've ever made :)
&gt;the Array prototype, which gives the slice method. Also, you might see Array.prototype.slice(...), where \[\] is a sort of Correct! Bonus: In es6 there is no need for calling slice from the array prototype for array-like objects. `Array.from` was introduced for this particular case. It also accepts Sets/Maps (New Data Structures).
Does it go down very often? Our issue is NPM doesn't go down super often, but we would like to handle it as an edge case. I'm just not sure relying on yet another third party is the right solution. I kind of wanted something "as reliable as our prod" machines. So self-hosted AWS cache or something.
Because it works with other things than arrays too. 
`Array.from` is definitely useful and is worth using. Just be aware that it is much _much_ *much* slower than `[].slice.call`. If you are iterating a large list (or repeatedly iterating a small list) and transforming an iterable into an array as part of that loop, you should see significant performance gains with the older method. https://jsperf.com/array-from-vs-array-prototype-slice
Honestly what goes down for us is our connection out to the world. I work at a giant Corp so it let's us mitigate their firewall and craziness. It also let's us publish npm internally and point our npm to a single place. We would never be able to upload to npm directly so that has been nice. 
If it's so awful, why does Google keep using it? The new FIFA app is based on it. Honestly, most of the cons you counter can be applied to Closure Library components too, but they power Gmail.
Freecodecamp
So, it's already been mentioned that Array.prototype.slice.call on an array-like turns it into an array, but is that to-spec behavior, i.e., does the JS spec say how the internals of `slice` have to work, in a way that supports array-like objects too, or was it just a happy coincidence that `slice` implementations didn't require an actual array?
Right I follow what you're saying. But if Artifactory is hosting it, how is it on your VPN? Do they have a solution that is self hosted? For me, I'd love to have a proxy that we communicate with directly and it handles any and all caching for us (including various versions).
There are plenty of other people who've written and released just as much software, and they aren't considered "gods." Putting Jeremy on a pedestal is moronic. He and many other developers -- most of whom are white dudes (that's another story) -- are regular people who've released useful software.
Apart from that, I like programmers who don't start working for the large proprietary companies (like Microsoft, Oracle, et al.) after contributing to FOSS. Call me biased, but I somehow feel that it leads to more crony capitalism when you add to the power of the one who is already quite powerful (technologically). Supporting the community of smaller startups and companies creates more balance in the ecosystem.
[removed]
We host it internally and configure the proxy/VPN inside of artifactory. It's pretty easy to get up and running. 
Well that depends.. If you want to keep it a css-only component that is impossible. Otherwise you would need JS.
No problem using Javascript on this. Any thoughts or direction on the JS needed? Thx
While it's implied in many of the responses here, it's not exactly touched on entirely .. if you call array.slice() but array isn't actually an array (or otherwise doesn't have a slice function), you get a runtime error. 
Dalton was a big fan of Underscore and there's no question that it inspired Lodash (although of course the point of Lodash was of course to be a better Underscore). While I'm not sure if this is still true, he used to be heavily active in the Underscore GitHub Issues (I even saw him go as far as to answer questions about Underscore there).
Sorry for misclassing the post, I thought this would be a question / discussion I'd address for JavaScript professionals.
My guess would be inertia, the dev team just came off a project already using it, etc.
Closure doesn't power Gmail - not sure how this misinformation has spread through the years. Gmail front-end is a much bigger ocean than a single framework like Closure. Closure is a base library and is used as such - utility classes, e.g. Promises, Timers, Event utils, Dom utils etc. Google keeps using its unique stack because it enables them to have total control over the entire ecosystem, and it won't put itself at the mercy of third party open-source code and its unpredictable future. (Also, very tight integration with their scm, which a bit difficult to explain here). Wondering if this sub has any current employees who can tell us if Wiz is still holding, or has Angular taken over....
Yes I've done that to fix and get it to work before posting this, cuz logically it should be possible with a well written regex, this would be a good hint to be aware of I guess 
If you manage to figure it out, I'd be curious. I'm drawing a blank how to do it with JS's implementation of Regex. 
I've recently used \[hammerjs\]([https://hammerjs.github.io/](https://hammerjs.github.io/)) -- there are also other libraries. Just google "JS touch event library" and explore the results.
Actually, there is some published libraries[1 and 2] that does something similar, but in this case I decided to introduce looping though the `Map` HOC which is something I was missing from templates days. [1][https://www.npmjs.com/package/react-if](https://www.npmjs.com/package/react-if) [2][https://www.npmjs.com/package/react-controlflow](https://www.npmjs.com/package/react-controlflow)
replace('c','')
replace(/c/g,'')
Can I ask a further question? If I wanted to replace a carriage return with something else, what would I write to represent the carriage return? If you know
&gt; Array.from Chalk that up with arrow functions and other fun stuff that I don't get to use at work because there's no IE support. :(
Array.from also isn't supported by any version of IE.
Yea sure, will reply to this comment once I figure out a way
I have never heard a good word uttered about Wiz.
That's why you use babel :) 
It was a major victory getting them to install a standalone c-port of Sass so that we could stop writing css directly. Someday maybe I'll get them to allow Node...
\^ Note that this will only replace the first instance of "c". To replace them all, use a regular expression, like in u/web_master_89's other post.
Have you tried viewing that codepen on mobile? On my Android phone, it works as-is, without any extra code - when I touch the left and right arrows, the images slide.
Are you a current employee or ex?
I‚Äôm neither, actually, but my brother works for Google and I‚Äôve kind of inserted myself into his circle of work friends lol
On mobile I hide the arrows and want to use the native swipe with fingers to swipe left and right to get the slides to change
I loooove "cheating" in a unique array only with array.from(new set(arraydupes)) ... Smooooooth as fuck.
[removed]
replace(/\n/g,'') Learn basic regex, it's useful. Just avoid using it for html ;]
RUN!!!
Saved! 
Yes, that's about right--he tried to get a few patches and saw no interest in spite of jsperf test cases. And to his credit, lodash always stuck to the design ideas and interface of underscore so it could be used as a drop in replacement, he even tried to instigate a merge at one point but a compromise could not be reached or something 
&gt; not sure how this misinformation has spread through the years. Closure library home page. What exactly is the frontend stack for Gmail? What do they use for the UI? How much of the UI is open source, and if not why not given that Google has been open sourcing all Material Design implementations?
Hi /u/gregsometimes, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/gregsometimes, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). **Last warning about posting off-topic content (like CSS-only articles).**
Closure is pretty much the base library for a lot of web projects at Google, so it's a bit misleading to say that it's the framework Gmail is built with..... NOT. It's the foundational framework for too many apps for that matter. So it's way more complex than that. Front-end Gmail stack is now Wiz and closure templates along with its entire ecosystem of supporting frameworks (there are quite a few btw). Google open sources Material Design component through a pure JS framework and adapters. Wiz cannot be open sourced because on its own, it utterly unremarkable and will die out within weeks of release. However, Wiz has its place when functioning as a piece of the larger set of libraries used to build front-ends at Google, and to open source the whole thing would be a nightmare for Google with no pretty end - the open-source community wouldn't use any of it if Google paid folks to do so.
do we really have to say this in every thread when transpilers are so common now and most people don't have to support IE
Hi /u/menigajoxadef, For javascript help, please visit /r/LearnJavascript. Thank you!
A nice little phrase i like to use to sound like i know what I'm talking about is "the thing I like about react is, it's just JavaScript! If you have a problem you just look up how to solve that problem in JavaScript! Instead of "how to do normal JavaScript thing in Angular..."
Have you looked at something like HyperHTML? It uses ES6 tagged templates which let you specify your HTML, and the tagging function converts it into DOM manipulation code: https://github.com/WebReflection/hyperHTML
&gt; Front-end Gmail stack is now Wiz and closure templates Really? They _moved_ Gmail from Closure UI components to Wiz? I can still see [bits of old Gmail UI components in Closue Library demos graveyard](https://google.github.io/closure-library/source/closure/goog/demos/). I am really confused. Did this happen after Angular was released? Why would the Gmail team pick Wiz if it has the bad reputation that you have pictured among Googlers? Also, isn't Wiz sprinkling javascript on server rendered html? Why would that be a good choice for a SPA like Gmail, and how does it work? Closure templates get rendered on the server side and Wiz brings them to life? If so, why Closure templates, they can use any templates on the server side.
/r/LearnJavascript is the appropriate place for this kind of question.
While Babel helps with arrow functions, it doesn't provide new methods like \`Array.from\`, for that you need to add this shim: [https://github.com/paulmillr/es6-shim](https://github.com/paulmillr/es6-shim)
Great job, I know what you mean. Thanks for the feed back
For `Array.from` you need a shim, not a transpiler: [https://github.com/paulmillr/es6-shim](https://github.com/paulmillr/es6-shim)
You can also use spread (though you'll need to transpile for that), which is nice if you want a consistent way to say "build a new version of this". You can say `{ ...someObj }` to build a new object with the same props as someObj, or `[...someIterable]` to build a new array with the same entries as some iterable thing (often another array). Personally I stick to `Array.from` for the map-callback support, since `[...myIterable].map(({ foo }) =&gt; foo)` means "build a new array by going through the iterable, then go through that array and build a new array with the foo prop of each". `Array.from(myIterable, ({ foo }) =&gt; foo)` means "iterate through myIterable, and build a new array of the foo prop of each". Much simpler/cleaner imho. With `[].slice.call`, `Array.prototype.slice.call`, `Array.from`, `[...someIterable]`, `myArr.slice()`, `myArr.concat()` all as ways to build a new array with the same entries as the old one, it's not surprising that new devs find ecma one hell of a confusing language.
It also doesn't support Netscape Navigator.
Here's the relevant spec: [https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.slice](https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.slice) Looks like it explicitly mentions the use of the `length` property. So any object that has a `length` property should work.
Or just use babels polyfill
Yeah. That first line seals it, I believe: &gt; 1. Let O be ? ToObject(this value).
While that's true now, unless you're writing some heavily-relied-upon performance-heavy lib, and you're going to be running perf tests regularly, I would worry much more about writing for clarity than utmost speed. The usual "it's easier to perf optimize clean code than clean perf-optimized code" spiel is often over/misused, but for the case of Arrays I'd say it's quite applicable. e.g. people used to often write out `for (var i = 0; i &lt; arr.length; i++) { val = arr[i];` instead of a clean `arr.forEach(val =&gt;`, because the former was "faster". Now the v8 engine is smart enough to optimize both into equivalent code, and people who maintain codebases with the for-loop are stuck managing a bunch of weird scopes with variable-hoisting, and the forEach people likely have _better_ perf as a result. `Array.from` and spreads are both pretty new, so I wouldn't be surprised if we'll see some gains there on future engines. It's also rare that you ever simply `[].slice.call` on its own (which itself is less performant than `Array.prototype.slice.call`). So maybe it's a lot faster than running `Array.from` on its own, but I doubt you'd see as big a difference between `[].slice.call(myarr).map(myCb)` and `Array.from(myarr, myCb)`.
not single-spa, just spa.
right, SPA stands for single page application. This library is called single-spa. It's a bit of strange name but what it actually enables is pretty cool.
Hi /u/kenman, thank you for informing me. However, I really appreciate if you let me know exactly which rule of the posting guidelines I've breached. Looking forward to hearing from you. 
I think maybe the idea behind it is that you can write multiple SPAs separately (in different frameworks) or you could write one single-page app that actually has multiple inside of it. So kinda meta, a single-single-page-app! :D
It still needs to be explicitly imported in your applications code.
Ah right, I'm too used to the babel-polyfill package. 
Same here but they use Rhino on sever side so not even Babel is allowed.
I dunno if this solves your issue, but when I develop docker containers and have issues with the NPM registry, I mirror everything with https://www.verdaccio.org/ Then set all my docker images to Python and NPM mirrors like: ENV PIP_INDEX_URL https://registry.example.com:13251/root/pypi/+simple ENV NPM_CONFIG_REGISTRY https://registry.example.com:13253 
As someone who *does* have to support IE at work and *can't* use a transpiler, yes, it's something I'm very cognizant of.
That's a great way to look at it. I will definitely have this in the back of my mind. Thanks man!
Would using this method perform ‚Äúworse‚Äù than lodash or underscore‚Äôs map() or each() methods?
Sure, but it saves you from having to deal with it as more EcmaScript standards gets approved.
IE? I wish it would just fade into obscurity already. 
If you add a global key listener, you can use `.preventDefault()` to make it *not* trigger this particular button on "enter". window.addEventListener("keydown", function(event) { if (event.keyCode == 13 &amp;&amp; event.target.id == "your-button") { event.preventDefault() } }) The `event.keyCode == 13` bit is detecting if the key pressed was "enter", and the `event.target.id == "your-button"` part is just an example of how to target this particular `&lt;button&gt;`.
Use onmousedown instead.
So, pressing enter on a button will cause it to fire the onclick event, though I couldn't find anything in a quick google for the exact reason it does that. Maybe someone else here knows, or as the other commenter said, /r/LearnJavascript can help you there. But, for a solution to your problem, you need to add an event listener for `keydown` (or `keyup`) events on that button, and if the key that triggered that event is the enter key (keyCode 13) prevent the default behavior with `e.preventDefault()`. [Here's a JSFiddle demonstrating that.](https://jsfiddle.net/tyu9s3f6/9/) If you focus the first button and press enter, you'll notice that like you're experiencing the click event will get triggered. But, if you focus the second button and press enter, nothing will happen, as that one has an event listener that checks for enter key presses and prevents the default behavior from occurring.
Yeah, I personally was against the merger purely on the grounds that Underscore code was a thing of beauty, and Lodash was a disgusting mess (and I think being able to see what your library is doing is important, especially for newer folks). But then (again, to Dalton's credit) I looked at Lodash's source code the other day and it was *extremely* well-written, certainly on par with Underscore's code, so now I wouldn't mind seeing Lodash completely replace Underscore.
Really? Against the merger because of his code? He was so far ahead of its time with the modular approach which allowed imports of only the parts you need, and later on, tree shaking. Lodash also pioneered chaining and lazy evaluation, which was a game changer in terms of performance and set the standard again. It probably is the most popular and downloaded npm package. I personally prefer it to ramda etc still. But I guess it's a matter of taste ¬Ø\\_(„ÉÑ)_/¬Ø 
I have retrieved these for you _ _ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¬Ø\\\_(„ÉÑ)_/¬Ø`&amp;#32;or&amp;#32;`¬Ø\\\_(„ÉÑ)\_/¬Ø` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Later on: &gt; We could have better primitives but we are all hostages of TC39 and its incompetent team. Someone has a bone to pick.
So if I understood you correctly, you want to prepend a magic number to a text? const magicNum = Buffer.from([0x00, 0x61, 0x73, 0x6D]); const textBuffer = Buffer.from('Hello there!'); const result = Buffer.concat([magicNum, textBuffer]); I don't really know where you are going with this, but I hope it helped. Above code might not be the most efficient version though
Have you tried adding type=‚Äúbutton‚Äù to your button?
you don't need to bring it up everytime 
Sometimes you want to wait for all promises to resolve, for example if when a user clicks a button you are make an ajax call to some web api, while also reading a file from the filesystem(both things that take long and are often asynchronous/promisified) so that you can compare the data returned from the web api against the filesystem files data. You'd want to use Promise.all(or maybe Promise.props) so that you know both operations have completed and the data is ready to be evaluated/compared/whatever
But Java is a static language and JavaScript is dynamic. You can do a lot more with JavaScript and you aren't constrained like you are in Java.
I still used/preferred Lodash, even then, I just didn't want to lose anything good. Replacing Lodash with Underscore at the time would have meant losing a readable utility library, and there was no harm to having both libraries ... but like I said I'm now in favor of eliminating Underscore.
As far as `==` , it should not be used in JavaScript. Use `===` will do a more strict compare than `==` in JavaScript.
I don't think you need an entire tensorflow just for a shitty linear regression...
I see, but sounds like a nightmare.
Sorry, what are you asking?
TLDR
OP is asking for a good name for a TypeScript enum.
only you can answer this. try both. also try freecodecamp.com. if i were you i'd just do all three at the same time, putting more time into the one you like best. 
Ah, wasn't sure if this was something odd - my initial thought was call as in call a function, and it made no sense. In terms of an enum type name, if this is for words, why not `Pluralization`?
[coutability](https://en.m.wiktionary.org/wiki/countability#English)?
I might be wrong but doesn‚Äôt Babel-Env come with the polyfill?
I think the Array.from will always be significantly slower as you are converting the full array-like to an array before starting the iteration. For large lists, there will always be overhead that you can avoid with the old approach.
There are a few lovely options for you: 1. Webworkers. This is literally what they're for - processing large data sets without killing the UI thread. 2. If you want to do a little magic with promises, you could do a promise reduce, which forces some async behaviour, and it would look like this: bigArray.reduce((promise, itemInArray) =&gt; { return promise.then((matchedItems) =&gt; { if (meetsCondition(itemInArray)) { return matchedItems.concat(itemInArray); } return matchedItems; }); }, Promise.resolve([])); Promises are, by nature, asynchronous, so any processing in each loop iteration will be scheduled instead of executed immediately. Personally, I think webworkers is the way to go, though. Get the data, pass it to the web worker, when it's done, pass that data back to the main thread. If you don't like web workers or don't think it's a fit, that promise solution will work well.
Not wrong there but they brought it to a new level via `_(foo).bar()` etc - if you have not read it, check out http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/ to see exactly how awesome that was 
I also did not like the Odin Project after a while. Luckily my free public library in Louisville has TreeHouse learning for free. It‚Äôs amazing. I think watchabdcode is similar so I would def give it a shot. 
Cool. Add an option to kill the sound.
I had an in person interview today that had a React coding / pairing challenge. It was 20 or 35 minutes to implement a simple todo list that could add and remove items from the list. It was really fun, and totally doable in that amount of time. No need to prepare because it's just writing React. I also had a separate session with JavaScript questions in general that involved iterating over an array and transforming the data in it into a different form (i.e. take the data from an array and put it into an object in a specific format), and a couple of questions about partial application.
&gt;I was getting tired of reddit wasting my time Are you new here?
Hi u/thequargy!, Thanks for the recommendation. I have added that to the top of my javascript code, and that seemed to work great. I really appreciate it! I'm brand new at this stuff (I'm in class for this) and I am thankful for not only the snippet, but also for the explanation. So, with the code you provided, I could technically have a different button that would still allow enter to work, right? If I wanted to make it universal I could just omit "&amp;&amp; [event.target.id](https://event.target.id) == 'my-button' ", right?
Hi u/BrokenPhoneBooth! Thanks for the suggestion! I did try that, but it didn't work. I ended up going with u/thequargy's recommendation which ended up working. 
This doesn't seem like a post that should be in this subreddit. 
i like to mention the reason people like react is the 'finally a framework that got statemgmt, scoping, and components correct' a negative is 'mixing javascript and template html logic together' (also why i dont pick angular). some other things are why use a framework? why not use angular? why use react in some situations and why/why not jquery. other than that have a knowledge of why u would use MVC, components, and datastores (also what are flux: datastores). prot ip you can say things like: also these css frameworks are really good, animate.css, jstween, bootstrap, modernizr.css ETC, or also we can translate half or more of the code to react-native and make a iphone/android native app
Personally I welcome sharing useful JS snippets in this sub!
Why are you creating an anonymous function and immediately calling it with parentheses right after the declaration? Wouldn't it be easier to have the code outside of the function so it executes immediately?
[It‚Äôs an iife ](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) 
I'm not normally against sharing code but I don't agree with sharing code that circumvents parts of reddit itself. Seems like a way to get admin attention here. 
Best practices, indentation, style and compatibility were all ignored while banging this one out.
Yeah but you dont need it
The[ top post](https://www.reddit.com/r/redesign/comments/8gpy1e/i_made_an_extension_that_forces_reddit_to_load/?utm_content=comments&amp;utm_medium=browse&amp;utm_source=reddit&amp;utm_name=redesign) in r/redesign is showing users how to circumvent the redesign. They really couldn't care less lmao
Here's a sneak peek of /r/redesign using the [top posts](https://np.reddit.com/r/redesign/top/?sort=top&amp;t=year) of the year! \#1: [I made an extension that forces reddit to load the old design](https://chrome.google.com/webstore/detail/old-reddit-redirect/dneaehbmnbhcippjikoajpoabadpodje) | [169 comments](https://np.reddit.com/r/redesign/comments/8gpy1e/i_made_an_extension_that_forces_reddit_to_load/) \#2: [This is ridiculous. Please, for the love of God, get rid of the redesign.](https://np.reddit.com/r/redesign/comments/8gqbfi/this_is_ridiculous_please_for_the_love_of_god_get/) \#3: [If it ain't broke, don't fix it.](https://np.reddit.com/r/redesign/comments/8gz7td/if_it_aint_broke_dont_fix_it/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Wrapping the code in the iife keeps things from leaking into the global scope. No you don't need it for the code to work but its good manners not to pollute the global scope.
You wouldnt be polluting the global scope if you assign things to variables. And if this is ran as an extension, I dont believe you would have that problem anyway.
I actually wouldn‚Äôt mind seeing more stuff like this.
this isnt code review bro
Is that supposed to mean we cant make comments on it or something?
but but but, i like complaining about everything online.
and so what, are they going to shut us down because of this one post ?
Most of us do as well!
An IIFE won't pollute the global namespace.
That is the default template for Tamprmonkey. It is common to see that in small scripts.
You might also like r/coolgithubprojects (though it's not specific at all to JS)
Thanks for the feedback I will consider this to improve the code when I have a bit of time :) 
If you wanted it to apply to all buttons, you could use `event.target.tagName == "BUTTON"`. But if you don't have *some* kind of additional condition, you'd effectively be disabling the "enter" key on your entire website. \--- To explain u/WildDebuggerAppeared's suggestion, `==` only checks the value, while `===` checks the value *and* the type. (For example, `1 == "1"` is `true`, but `1 === "1"` is `false`, since the first is a *number* and the second is a *string*.) In your code, I'm not sure it matters, since you're guaranteed to be comparing two strings.
Thanks! I'm just getting started with TensorFlow, so it was mainly an easy project to learn and that I thought others might find useful. 
[Plurality](https://english.stackexchange.com/questions/75135/what-is-the-noun-to-use-when-describing-the-characteristic-of-another-word-being) seems acceptable. 
r/userscripts
Weren't they talking about turning that into a proper process crash, instead of a warning? Or has that changed recently?
Since `getElementsByTagName` returns an **live** `HTMLCollection`, you don't have to call it and turn the return value into an array every second. I just checked the reddit top page and it has 387 span elements. I think it's not a very small computation cost to create an 387-length array every second. I would: const spanElements = document.getElementsByTagName('span'); setInterval(() =&gt; { if (spanTags.length !== tagCount) { tagCount = spanTags.length; for (const span of spanTags) { if (span.innerText.toLowerCase() === 'promoted') { const parentEl = getPromotedParent(span); if (parentEl) parentEl.style.display = 'none'; } } } }, 1000);
Well, you took that surprisingly well. Congrats on being the bigger person. Even when i was so rude.
Tampermonkey scripts just run on the page, this code isn't intended to be used as an extension.
When you scroll down the page it loads more posts and that contains more spans.
oh that's worse :&gt;
Oh I hear you know. Didn‚Äôt understand what you meant at first. I‚Äôm not too worried about that but I feel ya 
Or, you know, just install uBlock Origin.
Updated the code for you ;)
I'm surprised that Adblocker doesn't block Reddit ads. I would consider them intrusive.
Thanks, I just changed my ad blocker to uBlock Origin.
Not sure why you bring that up, considering it's a live collection? 
It may be. The last I heard about it was just the ability to listen for [unhandled rejections](https://github.com/tc39/ecma262/pull/76). I suspect that it would be really difficult to push for a full-on process crash simply because there is already a lot of working code in the wild that would suddenly fail and that is something TC39 really tries not to do. But I'm not sure.
Side-effects as data library built off of \`co\` [https://github.com/neurosnap/sead](https://github.com/neurosnap/sead) Generator tester library: [https://github.com/neurosnap/gen-tester](https://github.com/neurosnap/gen-tester)
Dang, I don't blame you for missing that promotedLink class the first time... styled components sure makes a mess out of the selectors.
A live collection's DOM nodes are live. A live collection doesn't re-query the page.
Lost me at BEM
I wish I could add git to my life üòã
That 90% polyfill is like putting a hidden time bomb into your code. And it will only fail in browsers that need to be run through VirtualBox / browserstack and have shitty devtools so good luck debugging that. Just make it a helper function
Cross-posted from r/reasonml. Hoping to spread some of the Reason love more widely!
Thanks for this! Somehow I totally missed your post. Truly appreciated. 
Or you could use [my adblocker](https://GoDzM4TT3O.js.org/godzadb.html). It has over 54k blocked hosts! Also, uBlock origin, if you prefer less blacklisted hosts, is another option.
I had an interview with a company in Sydney. Fortunately the interviewer was quite patient. Those guys were porting their Angular projects to React and he asked questions on what libraries to use and why would you use them, in short, he was testing my decision skills. Anybody can learn syntaxes but deciding on what library would scale and will work, is a better competence decider. After that he told me to setup an e-commerce website with cart functionality built with React and my choice of libraries. You could see it here: [https://github.com/arshu16/storeFront](https://github.com/arshu16/storeFront) I would love your views on this. P.S. - I was not selected based on my CSS and HTML skills, although in my opinion it was due to Visa sponsorship costs ( I am from India).
It probably has to do with them being hosted by reddit and not from a third party. 
"Just avoid blue balls." https://www.urbandictionary.com/define.php?term=Blue%20Balls
I could've sworn it was... that may have been a node.js implementation detail, though, not a standard. And they may have gone back on it. I'm having a hard time finding any sources, though.
forbidding cross domain requests is not a legal thing, its a security thing.
 Object.assign(window, Synergy); ES5
I actually have a buffer of image, and I never used magic numbers. Maybe I'm just missing a obvious link to patch it in my brain. But I have either img that is in base64 string or hex buffer: \[12,245,135,15,12,4,31\] etc And I need it converted to magic number buffer or whatever its called. But yes final output must be something like : \[0x00, 0x61, 0x73, 0x6D\] etc I need this in order to use npm package FILE-TYPE . See link above. 
Wow...I feel dumb. This would totally work as well, right?
Live collections are automatically updated with new nodes though, 're-query' or not. https://codepen.io/anon/pen/pKYOre 
Got to 103 seconds. IMO it would help a lot easier if you captured the mouse in the playarea ([maybe this api works](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture)). I had issues with playing with my touchpad, since the ball got 'stuck' a lot from me moving out of the game area
I think reddits current ads are better than most other sites. It doesn't seem that intrusive to me.
To do inline img tags, make span tags for the text parts: ``` &lt;p&gt;&lt;span&gt;You used &lt;/span&gt;&lt;img src={img2} /&gt;&lt;span&gt; and also &lt;/span&gt;&lt;img src={img1} /&gt;&lt;/p&gt; ```
 There are various javascript framework and libraries that is developing very fast. Based on the Github ratings **Angular, React.js and Vue.js** is the most popular one. 
Nah, trust me - some of us need this / uBlock or similar. Sometimes the promoted posts are almost /too/ good. The title starts off all sly and unassuming - "TIL" it'll say - and you'll start to one by one parse the words waiting for some juicy factoid to saturate itself into your noggin. Suddenly you're overtaken with a feeling that's equal parts disappointment and the memory of that time you stubbed your toe. For some, this kills the reddit. 
Yeah actually I am happy that someone asked so I could learn from it.
As an honest question: Wouldn't something declared in the local function scope stay there anyway? Why would it pollute the global scope?
You should be able to choose right tools to a given task - and running js code on every reddit.com/\* page is way too much. Old/no-bloatware Stylish fork with simple .promotedlink { display: none !important; } will do the job in much better way :)
Yeah I can see how that might happen. Better than some apps which lock you out on a timed ad lol
If you need to support those browsers or are worried about it failing, then you're the person that needs the full implementation: // Production steps of ECMA-262, Edition 6, 22.1.2.1 if (!Array.from) { Array.from = (function () { var toStr = Object.prototype.toString; var isCallable = function (fn) { return typeof fn === 'function' || toStr.call(fn) === '[object Function]'; }; var toInteger = function (value) { var number = Number(value); if (isNaN(number)) { return 0; } if (number === 0 || !isFinite(number)) { return number; } return (number &gt; 0 ? 1 : -1) * Math.floor(Math.abs(number)); }; var maxSafeInteger = Math.pow(2, 53) - 1; var toLength = function (value) { var len = toInteger(value); return Math.min(Math.max(len, 0), maxSafeInteger); }; // The length property of the from method is 1. return function from(arrayLike/*, mapFn, thisArg */) { // 1. Let C be the this value. var C = this; // 2. Let items be ToObject(arrayLike). var items = Object(arrayLike); // 3. ReturnIfAbrupt(items). if (arrayLike == null) { throw new TypeError('Array.from requires an array-like object - not null or undefined'); } // 4. If mapfn is undefined, then let mapping be false. var mapFn = arguments.length &gt; 1 ? arguments[1] : void undefined; var T; if (typeof mapFn !== 'undefined') { // 5. else // 5. a If IsCallable(mapfn) is false, throw a TypeError exception. if (!isCallable(mapFn)) { throw new TypeError('Array.from: when provided, the second argument must be a function'); } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined. if (arguments.length &gt; 2) { T = arguments[2]; } } // 10. Let lenValue be Get(items, "length"). // 11. Let len be ToLength(lenValue). var len = toLength(items.length); // 13. If IsConstructor(C) is true, then // 13. a. Let A be the result of calling the [[Construct]] internal method // of C with an argument list containing the single item len. // 14. a. Else, Let A be ArrayCreate(len). var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0. var k = 0; // 17. Repeat, while k &lt; len‚Ä¶ (also steps a - h) var kValue; while (k &lt; len) { kValue = items[k]; if (mapFn) { A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k); } else { A[k] = kValue; } k += 1; } // 18. Let putStatus be Put(A, "length", len, true). A.length = len; // 20. Return A. return A; }; }()); } Making a helper function is worse. You're adding a dependency for something that future browsers will support natively, and possible even optimize. You will probably also overlook edge cases in your helper function and end up with those same bugs in all the "off brand" browsers.
BEM? classnames? Nope
Thanks. I'm not on my PC otherwise I would just try instead of asking this but: Does this work with concatenation? The second part of the sentence may not always be needed based on some conditions: let s = &lt;p&gt;&lt;span&gt; you used &lt;/span&gt; &lt;img src={img2} /&gt;&lt;/p&gt; If (someCondition) { s += &lt;p&gt;&lt;span&gt; also &lt;/span&gt;&lt;img src={img1} /&gt;&lt;/p&gt; }
Wow, thank you so much for this reply! It really made my day :) If you like the writing style, maybe some of my blog posts are helpful as well!
By making a helper function I meant wrapping the code you posted above in a helper function instead of using it as if it was a polyfill. Use const arrayFrom = /* your simple polyfill */ Instead of Array.from = /* your simple polyfill */ That way you don't expect it to work exactly like Array.from in all browsers (eg accept a second argument). That was my point, not that you should write your own implementation of Array.from from scratch instead of using the native one. 
I really like this one. Why? It goes hand in hand with WebAssembly (which also runs on Node and Electron btw.)
Okay, so let's get this straight: Your input is an image (what format?) **without** a magic number and it is either base64 encoded or already a buffer? Is the image **really** missing the magic number? Have you tried to retrieve the mime-type+ext via `file-type`? Why is it missing the magic number? If it's missing and you personally don't know the magic number it needs either, then to my knowledge, you cannot really easily tell what type the file is. I don't quite understand the question because if you know the magic number to prepend, you know the mime-type/ext without even executing anything. fyi: converting base64 to buffer: `Buffer.from(string, 'base64')`. 
Well, if you only want to pick out certain parts of the class you could do { Synergy: window.Synergy, Module: window.Module, Component: window.Component, Group: window.Group, Wrapper: window.Wrapper } = Synergy;
This is also good to know, thanks
With Firefox we can mute a tab directly by clicking the icon next to the close tab cross icon.
typo: `spanElements` vs `spanTags`.
Despite its name, const isn't about constant values but constant references to that value. You can change the members of a const variable.
But there are ads I've seen literally hundreds of times. Enough is enough.
This is only for React, right? It'd probably be good to mention that somewherre in the README or the website.
Bear in mind this is ambiguous. Sometimes it's better to repeat a few words to gain readability... especially since you're extending the `window` object. I'd leave it as it is or use the other suggested solution.
setInterval is not really a good solution here. You can listen to dom change events to catch new posts.
Vue integration is on the way - http://feedback.docz.site/roadmap
I completely agree with your premise, but is `Object.assign(window, Synergy);` really unreadable, though? Granted, it's perhaps less transparent, but I think it still appropriately conveys what's happening.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/lssmobtest] [Yxydyd](https://www.reddit.com/r/LssMobTest/comments/8vr7mt/yxydyd/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
[Beginner‚Äôs Guide To FREE Content Syndication](https://www.only-b2b.com/blogs/beginners-guide-to-free-content-syndication/) \- This article has some solid information about where to start content syndication. If your website has a blog and if you produce great content, then syndication is a no brainer marketing strategy that will put your content in front of new and different audiences.
Well maybe I'm just not getting those , mine are pretty clearly ads and are marked as such
&gt; Old/no-bloatware Stylish fork To elaborate on this - https://www.reddit.com/r/programming/comments/8vpqqg/stylish_browser_extension_steals_all_your/ Probably avoid using stylish altogether. I'm sure there are good alternatives, some mentioned in that thread. I'm using safari and I don't have a great need to add a lot of custom styles, so I just use the built-in feature that lets me apply a custom css file to all websites. Will not work for all use-cases since the rules are applied globally, and could lead to unexpected bugs if something is applied to the wrong website, but it works well for me and removes the need for another addon. Don't know if other browsers have similar functionality.
It‚Äôs not syntatically unreadable, it‚Äôs ambiguous in the fact that you cannot see what methods exactly are added to the window object. You‚Äôll have to look up the Synergy object for that first - and you only save like what, 6 lines? Not to mention you‚Äôre essentially giving the library power over the global scope of your page, which is a big enough reason not to do that. So yeah, `Object.assign` on `window` using 3rd party code is a no-no to me.
It‚Äôs not, though. A plurality refers to something having a plural state. A singular value is not plural, so it can‚Äôt be a plurality. 
It‚Äôs not syntatically unreadable, it‚Äôs ambiguous in the fact that you cannot see what methods exactly are added to the window object. You‚Äôll have to look up the Synergy object for that first - and you only save like what, 6 lines? Not to mention you rely on the exports of 3rd party library - what happens when they export a duplicate and override a function you rely on? Just do it explicitly so that you and the next guy know exactly what will be added.
Convincing points, thanks.
I think Meta languages are great and I really hope ReasonML succeeds. That being said I find many people find it hard to justify moving a languages due to a subset of the following 1) 'all languages are the same anyways', 2) the concept of reducing bugs hurts some people's ego because they don't think they introduce many bugs. 3) work is front loaded because you need to take more time getting code to compile. 
Just go into depth in a past task or project solving UI setup that you ve previously done, the iterations, what you finished with and why. Or how you plan a task, usually starting the state and a data structure that makes ssensefor the work to follow it. Usually best to go into depth of what you've already done, they can here the passion in your work and that is often the biggest win in interviews
&gt;Hide promoted posts on Reddit I can really recommend umatrix, it's for chrome and works like a charm :)
just curious, was google news made with boq?
That post also recommends GrammaticalNumber, but that's too long in my opinion. Using Plurality would be sufficient in my opinion. There are plenty of cases where you can use the same word to describe 0, 1, or many of something, like count, length, cardinality, size, etc. This name at least indicates that it might have something to do with "plural", and if I saw a struct Noun { text: string, plurality: Plurality, syllables: int, } It would be pretty clear to me `¬Ø\_(„ÉÑ)_/¬Ø`
This looks really useful for some stuff I'm working on. Can this be used in React?
meh
Ohh uh idk, React? I‚Äôve??
You mention the prerequisites on having express, is there a reason why isn't it a dependency of the package? Otherwise I like the use of decorators for things like controller actions, that's nicely done :). To be honest though, not really feeling like i miss an MVC framework over the simple ness that express offers.
An example from the readme: const jsToHtml = require("@chooie/js_to_html"); const structureToConvert = [ "html", ["head"], [ "body", [ "div", ["h1", { class: "class1" }, ["span", "Hello, world!"]], ["p", { class: "class2" }, ["span", "Goodbye, world!"]], makeListOfNames(["Charlie", "Rachael", "Maddie", "Lilla", "Paul"]) ] ] ]; console.log(jsToHtml.convert(structureToConvert)); function makeListOfNames(names) { return [ "ul", { class: "names-list" }, ...names.map(function(name) { return ["li", { class: "names-list__name" }, name]; }) ]; } ``` outputs &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1 class="class1"&gt; &lt;span&gt; Hello, world! &lt;/span&gt; &lt;/h1&gt; &lt;p class="class2"&gt; &lt;span&gt; Goodbye, world! &lt;/span&gt; &lt;/p&gt; &lt;ul class="names-list"&gt; &lt;li class="names-list__name"&gt; Charlie &lt;/li&gt; &lt;li class="names-list__name"&gt; Rachael &lt;/li&gt; &lt;li class="names-list__name"&gt; Maddie &lt;/li&gt; &lt;li class="names-list__name"&gt; Lilla &lt;/li&gt; &lt;li class="names-list__name"&gt; Paul &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;
ZXing might be a good place to get started, It's a popular barcode scanning library that's been ported to several languages. [https://github.com/zxing-js/library](https://github.com/zxing-js/library) I've never used it in javascript, but I did use the Java/C# libraries. 
I've used this for years and have no complaints
Absolute positioning pulls an element out of the normal document flow, but using \`transform\` seems to work: [https://jsfiddle.net/benjamincharity/qyj2ztLx/](https://jsfiddle.net/benjamincharity/qyj2ztLx/)
Was this a learning project for you? Is this basically just a rehash of [Mithril.js](https://mithril.js.org/), because that's what it looks like? Mithril aside, you can already do this with React SSR, or EJS, or any of the multitudes of other templating engines
CORS security concerns will prevent such a thing from most websites. If the website sets a certain header with a certain value, the browser would be allowed to pull that page. If it doesn't, you can't. I'm pretty sure Reddit doesn't allow it, so your example wouldn't work. (I just checked and didn't see the required header.)
wow, nice! I'm not sure what you mean by capturing the mouse, but I definitely think user should be able to move mouse outside of canvas when they wanted it. 
thanks (\^‚à† \^)
The other HTML template engines all have their ways of doing things. However, I haven't seen one that just uses pure JavaScript data structures - they all have their own special syntax. My aim for this library is to keep things JavaScript and don't introduce new mental models and overhead. As for Mithril.js, it seems to be more concerned with the frontend (DOM manipulation) and being a useful tool for SPAs. I see js_to_html filling a niche in the NodeJS HTML templating space. A similar tool would be https://github.com/weavejester/hiccup for Clojure.
For strings, use `String.split`. There's no reason, at all, to use `Array.slice.call` or `Array.from` on a string. As well, don't worry overly much about backwards compatibility. . If you're worried about it, use a packager like parcel or browserify to transpile down to ES2015 and you're good to go. If you're concerned about Internet Explorer, I wouldn't be. The market share just isn't high enough. IE 11+ has a market share of 2.9% and IE9 has a market share of 1.3%, so again, I wouldn't worry to much. As I said, just package your work and you'll be fine. 
&gt; There is nowhere near as much tutorial info on ActionScript as there is with JS. Maybe, but AS3 is not an obscure language. There are TONS of resources out there.
I‚Äôm inclined to agree with you, it conveys what‚Äôs being represented well enough that. I‚Äôm just being pedantic.
You should probably consider Haxe instead of Adobe Air. Haxe, the language, is an evolved version of AS3. Also, Haxe the toolkit will allow you to compile/transpile to many different targets other than desktop.
&gt; And as an AS3 developer, I'm kinda salty about how things played out, because it was a damn good cross between JS and Java. Preach it brother. AS3 is one of the best languages ever made. https://medium.com/@Pier/ecmascript-4-was-too-ahead-of-its-time-799e59232db0
# Opinion Warning Except, yours introduces a new mental model and a bunch of overhead. You're using arrays for one, which means I have to remember that it goes ["element", {props}, ["children"]] Which, at least to me, is incredibly cumbersome. And even then, the syntax not withstanding, array methods are, in general, a lot slower than function calls and object access, which is what things like React and Mithril use. EJS is basically HTML with `&lt;% %&gt;` tags. React is literally just JavaScript with HTML elements as fancy syntax sugar for React.createElement. Jade/Pug are their own languages. Your approach, while 100&amp;#37; valid and novel, isn't reducing the mental or computational overhead like other frameworks.
statements in for..in and for..of loops only get run once. It's only the 2nd and 3rd parts (condition and final-expression) of a standard for loop that you have to worry about getting called for each iteration of the loop. for ([initialization]; [condition]; [final-expression]) statement With for..in and for..of, you basically only have initialization. Also, for..in loops are not always ideal for arrays since it iterates over all properties of the array, not just indexed, and will skip any indices that aren't assigned. As far as compatibility, Array.from is pretty compatible already, and can easily be polyfilled for environments that don't have it. for..of is a little different because it's syntax (es6) rather than an API. If you want that more compatible, you'll need to transpile your code with Babel or something similar.
&gt; `({...window} = {...Synergy});` I think it might look more like `window = {...window, ...Synergy};`
Hi /u/GroovyAko, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/BFG_9000, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/charlie_hebert, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/pyjava, For javascript help, please visit /r/LearnJavascript. Thank you!
I disagree that the use of arrays is cumbersome. I think it combines the simple, declarative structure of HTML with the facilities of composition that other template languages don't provide. I'll work on documenting some more complex examples which might help highlight the value of this approach. 
Thanks Mate - will do!
What about the mobile app?
This isn't a post for JavaScript help.
The string is just an example in the question. Replace it with a nodelist or arguments and your reply is pretty useless.
What's the difference between this and storybook?
This. 
Hello. While i was writing an example, you removed the topic :( Anyway, i leave it here --- [https://codepen.io/greenya/pen/XYQmYK](https://codepen.io/greenya/pen/XYQmYK) P.S.: its 3 files (but CSS is optional, so can be 2, as you wanted)
The thing I'm wondering is why would I cache at the GraphQL level at all, rather than the domain level.
You can see the curl request is adding some headers. You simply include those headers in your request... Read fetch documentation on how to add headers. [https://developer.mozilla.org/en-US/docs/Web/API/Fetch\_API/Using\_Fetch#Headers](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Headers) `fetch(\``[`https://api.spotify.com/v1/search`](https://api.spotify.com/v1/search)`?q='${this.state.query}'&amp;type=artist\`, {` `headers: {` `Accept: 'application/json',` `'Content-Type': 'application/json',` `Authorization: \`Bearer YOUR_TOKEN_HERE\`` `}` `}`
lol. I'm still happy to be using knockout js, v3.5 is about to drop
I don't think that quite does what the OP wants. The example code given assigns `Synergy` as an individual field on `window`. Your example copies the _fields_ of `Synergy` onto `window`. But, your idea is close. What we need instead is to put `Synergy` and the other variables into an object, and assign that over, and use the ES6 object shorthand syntax to create the object: Object.assign(window, { Synergy, Module, // etc });
Noted, sorry!
Is there any reason to fetch the custom fields for the products everytime? How often does that change? If not, you can save it as cookie in the user browser
Firstly - if you want to wait until All of your requests are finished - then turn your products.forEach into a map, and Return the axios.get.then... With this array of promises you can then do a await Promise.all(calls); Now as for the main question - this sounds like an architecture issue. I'd say you really want to either add the required columns to the api call that you need. Do you need all the custom columns straight away?
Thank you. CSS is so easy to hate. Folks forget it is the right tool for some jobs. 
and uMatrix!
I think thats the solution I need :) Nice, very appreciated :D
1) https://i.redd.it/29c679dlan7z.jpg 2) https://i.redd.it/g7r4mnsok78z.jpg 3) Documentation is like sex. When it's good, it's very good. When it's bad, it's better than nothing. 4) I want to sit outside and work because it's so nice out But then i'd only have one monitor instead of 3 5) Wifi Cable 6) Why do C# and Java developers keep breaking their keyboards? Because they use a strongly typed language 7) Why was the developer unhappy at his job? He wanted arrays. 8) What do you get when you cross a computer monitor and a life guard? A screensaver! 9) A SQL query goes into a bar, walks up to two tables and asks: Can I JOIN you? 10) ["hip","hip"] (hip hip array!) 11) Javascript makes me want to flip a table and say to hell with this sh*t but i can never be sure what "this" refers to. 
Hmm... I never really messed with cookies. So to make sure I understand what youre saying, I can make the request once, grab all the information, save it somewhere cookies, and if the customer uses the wizard again, it can check if the cookies exists and filter from there? Will def look into that.
Yes. Exactly. Assuming the product - custom type doesn't change often ofcourse
ouch, my eyes. pretty neat though!
https://stackoverflow.com/questions/36774227/is-it-possible-to-pass-http-headers-in-the-url-itself I am unable to pass headers with HTTPS
Ahhh cool. Ill change it into a map then. It probably is an architecture issue but its not something I can change. I can't add the custom fields into the first API call because the CMS I am currently using doesn't allow for that. I need the custom fields when the API fires because that has the fields I need to filter through. Thank you for the help!
Another thing. You can also maintain a sort of scheduler. So, let's say you will periodically pull the custom type of all available products in every 5 mints from the server side. Then, whenever user uses the wizard, rather than making api call, you get the value from your locally stored last custom type values
Ahhhh very cool. Thank you!
[Nest.js](https://nestjs.com/) is the forerunner in this space and I don't know why I would use this over Nest.
You are welcome!
Seriously what is this post lol
Not to be a huge dick, but I think you need to do some reading on how requests work.
You can [iterate over strings using for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator).
How would self-closing tags like `&lt;br/&gt;` or `&lt;hr/&gt;` work? 
In order to wait for all of the promise to succeed, you will want to `return Promise.all(products.map((=&gt; { ... }));`
Jw, how come you cant use foreach?
http://regex101.com This is the best site I've found for learning regex.
ok, I tried fetch some common sites like google `var result = fetch('`[`https://google.com`](https://google.com)`')` And I get `TypeError: Failed to fetch` Any chance to make it works?
Off the top of my head I could very easily see being asked (depending upon level): 1) Can you explain what the key prop is and why they are important? 2) Can you explain how the reconciler works? 3) Can you explain context and what problem(s) it solves? 4) Can you explain the difference between Component and Pure Component? 5) Can you explain how you would design a reusable component for maximum flexibility?
Cool, I legit didn't know! ^(But apparently it was standardised only in ES6)
So this is... What, some random out-of-context forum post that seems to be responding to criticism of a book which isn't even named?
I much prefer the [hyperscript approach](https://github.com/hyperhype/hyperscript), and even better with [the helpers](https://github.com/ohanhi/hyperscript-helpers).
If they're all wrapped up in Promise.all, the first one doesn't need to finish before it starts the second one.
I was working on a project where I wanted to do exactly this. What I ended up using was [ZBar](http://zbar.sourceforge.net). They have downloads for both Windows/Linux available. For testing purposes I would grab the original picture and save it, then use PHP to save a copy as grayscale and adjust the contrast and brightness to make it easier for ZBar to read it. There was some trial and error there. After that I would run the command line of it via PHP script and it returned the barcode contents and what type of barcode it was: exec('C:\\"Program Files (x86)"\\ZBar\\bin\\zbarimg -v ' . $pathToImage, $result); If you want my messy testing JS+PHP (it lets you upload a picture or take one from a camera) feel free to PM me.
[https://itnext.io/design-patterns-in-javascript-f533632556c1](https://itnext.io/design-patterns-in-javascript-f533632556c1)
I was thinking more like ` let promises = products.map(product =&gt; { return axios.get(`${CUSTOM_FIELD_URL}${product.id}`) }) Promise.all(promises).then(responses =&gt; { //Responses is an array with all the completed requests to the API. // You can be sure all promises were resolved and are present in the response array. }) `
Interesting. The solution you provided is not representative of what happens with this extension or in the console. I wonder why that is.
That is because some services (like reddit) provides API and in general allows do requests to them from scripts. But its not allowed by default, and most websites is not allowed to load resources from them from scripts. You can load by yourself (from browser address bar), but not from script (that is security feature, otherwise any script from any website could load data without your permission (and permission of that website)). As its already mentioned here below -- its CORS policy. If you need to know more, google for "Access-Control-Allow-Origin". In general, script can load data from website where it was loaded from. If youre writeing website and its [mysite.com](https://mysite.com), than script loaded from that site can freely ask any resource from that site.
Great job! I see a nice performance boost on the client side when querying with the same parameters. I‚Äôll have to experiment more but I can see how useful this can be. 
FYI self-closing tags are important in XHTML. HTML supports unclosed tags `&lt;BR&gt;`, `&lt;HR&gt;`, and `&lt;IMG&gt;`.
I have to agree. I just saw the example you posted and it is _way_ too difficult to grok in a reasonable amount of time. Based on that I don't think I'd ever introduce this into a code base because the mental overhead is just way, way, way too high.
It works just as it does in my console; if I got to reddit.com (new reddit, with 'neverending scroll' enabled), and run it, and then scroll way down and check the `.length`, it's updated. That's the nature of _live_ collections...
I'd start with breaking up the code into smaller parts. By creating an Axios instance for the API host, you can set some sane defaults. There is no need for JSON.parse, since Axios parses JSON by default. However, we want to map the response to the `data` property returned by the API, so we use `transformResponse` to do this. Overriding `transformResponse` will break the default JSON parsing mechanism, so we restore it with `axios.defaults.transformResponse`. The `[].concat` is just in case you use TypeScript, which might complain about an incompatible type. We also use `axios.all` (basically the same as `Promise.all`) instead of a `forEach` to send requests in parallel. const API = axios.createInstance({ baseURL: 'https://api.host.com/v1/', headers: { 'Content-Type': 'application/json' }, transformResponse: [].concat( axios.defaults.transformResponse, // the default JSON serializer function (data) { return data.data; } ) }); async function getProducts() { const response = await API.get('products'); return response.data; } async function getCustomFields(productID) { const response = await API.get('custom_fields'); return response.data; } async function getProductsWithCustomFields() { const products = await getProducts(); return axios.all( products.map(async product =&gt; { product.custom_fields = await getCustomFields(product.id); return product; }) ); } This code is very rudimentary, there's no cancellation, caching, retries or rate-limit handling. Looking to the future, adding that might make this code faaaar more verbose, in which case it is worth looking into RxJS streams which make it a little easier.
Yeah, lazy evaluation is nice :) For what it's worth I was actually pushing that "implicit chaining" syntax (but not lazy evaluation specifically) for Underscore even before jdalton, way back in May 2012: https://github.com/jashkenas/underscore/issues/583.
Wow... this is crazy. Really appreciate your input! Ill take some time to look through everything to understand the code! Thanks again!
That song brings back memories from the old Flash Flash Revolution days. Is that Dimrain47?
Just make solid documentation, and don't change versions like every other week, and you already better then apollo.
I checked out echarts' SGV mode, and it doesn't look great. Apparently they just recently added it and it's still in beta.
I figured out why it wasn't working in my test. The slice killed the updating. If I moved the slice to the interval then it works. Thanks. I learned something.
That's great that you have passion and you are training &amp; *practising. But for such things it might be better to start a Git (GitHub, GitLab, BitBucket) repo and collect things there.* *Github is where collaboration is done, greatly.* I started similar thing [https://github.com/olstenlarck/resources](https://github.com/olstenlarck/resources) \- just a links to articles, tutorials, conference talks, videos and etc. Just from everyday surfing. It's not categorized (yet), but is currently holding 350+ links ‚Äì most of them "MUST READ/WATCH" or at least very useful. I'm thinking to think for some kind of categorization which can be done when made some web app with search or so.
It sounds like you lamda is calling a 3rd party API? If so, and the custom data does not change frequently, I would suggest adding a reddis cache with those custom fields for your lamba to access. Then, you can get away with only a single request from the client.
&gt; Cool idea, but we can't make Underscore's syntax backwards incompatible in this way, at this point. Erm. It's forwards compatible as it's a new syntax... I like how he dismissed it out of hand. 
Updated the code for you.
Do the custom fields change for a given product? If not you could cache them and grab them from memory. Refresh the cache every once in a while.
Updated the code with your suggestion in mind.
I originally learned React (and the related tools) for a work project, but it wasn't forced or even suggested (I was the only dev and this was before React blew up in popularity). To me, it was a natural progression. I had been fighting with two way data binding in Angular, Ember, and Backbone. My gulp tasks were becoming a complex mess of interwoven compile steps. I wanted to use the new and unsupported ES6 features. Then I found Babel (called 6-to-5 at the time) and I got to use ES6 without worrying. Once I was already compiling with Babel, adding JSX compilation was trivial (at the time I think it was just a flag built in to 6-to-5). Later Webpack showed up and was the obvious progression from existing Javascript bundlers (ex. Browserify) because it supported arbitrary loaders, so you could easily integrate images, audio, fonts, SCSS, whatever into your bundle without writing a half-dozen different scripts to convert/optimize/copy them manually. Once the heavy lifting of bundling and compiling was off-loaded to Babel and Webpack, I no longer needed gulp to orchestrate my build/watch, so I just switched to plain npm scripts. I use Babel and Webpack (or Rollup) for most Javascript projects regardless of whether I'm using React.
I'm not sure why you wouldn't just apply http caching. I get that it would be a lot of misses for development. However, for a client, the requests are going to be very similar to each other. No need for special caching libraries or logic, the http standard already has you covered.
And this post looked like a promoted post
Looks sketchy af
Yes. It's Dimrain47's twilight techno - it was the original song of the game and in my opinion 50% of reason why I play it.
Quick, hide it.
Lighten up...
&gt; but I wanted to work with a vanilla framework to understand the inner workings of JavaScript erm... backbone uses jQuery and underscore / lodash, how is that vanilla?
It looks similar to observables from Mobx. Besides you could implement similar patern in pure JavaScript by using getters/setters or Proxy objects. 
Website down? It's not loading at all for me.
I'm looking through the Mobx documentation now. I hadn't heard of Proxy objects before. Thanks! 
You've already got useless overhead by using JavaScript.
Looks like it. Any page with the c-wiz tags and jscontroller attributes can be safely assumed to be a boq page. (Unless things have changed lately - it's been a while I've left so I could be wrong)...
What does uMatrix do that uBlockO doesn‚Äôt?
Don't do this... Reddit deserves to make money.
If they were normal ads I'd have no problem, but they're tricky things disguised as content.
Thank's, I'll have this in mind for the future
I do virtual DOM all the time, but with only native javascrript and native php. This is where peoples should start, because it's all good like that! Hey bro, you are the angular meteor, got it?
Looks amazing. I think Wes and Scott should mention this on the syntaxFM podcast!
What role does native php have to play in your virtual DOM?
This works well for me: ``` const style = document.createElement("style"); document.head.appendChild(style); style.sheet.insertRule(".promotedlink {display: none;}"); ```
`window` is read only. This will throw a TypeError in strict mode, and fail silently otherwise.
IModularity? Using js template literals, in combination of php heredoc/nowdoc to build my js lib server side, in a surrgical/light way. At least, i try to keep it this way. Check out also https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment this √Æs powerful! https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
You're welcome :) 
Hm, I've never made a Windows 7 gadget before, but it seems like data is only stored during your session. Since you're not saving that data to memory, when you shutdown for the night, the cache is cleared and your changes are lost. Maybe [this](https://msdn.microsoft.com/en-us/library/windows/desktop/ff486362(v=vs.85).aspx) or [this](https://msdn.microsoft.com/en-us/library/czxefwt8%28v=vs.85%29.aspx) can help you read from and write to text files, which will be more permanent.
Works great pall! 
Only 8?
If your scraper works, and you are successfully able to `console.log()` the contents of a webpage, then you should be able to feed that same information into another function. You can't `return` out of an async function, but you can feed in the next step (in this case, the Alexa speak function) as a callback. I see the scraper code from your StackOverflow post - what does the Alexa code look like? I'm looking at [the documentation](https://ask-sdk-for-nodejs.readthedocs.io/en/latest/Developing-Your-First-Skill.html) and maybe it's something like this? return handlerInput.responseBuilder .speak(speechText) .reprompt(speechText) .withSimpleCard('Hello World', speechText) .getResponse(); If that's the case, setting `speechText` in one function and then running this won't work, due to typical async timing issues, but maybe you could feed `handlerInput` into the scraper callback?
I can't remember the last time I've seen a bug caused by typing. I do, however, regularly see bugs from people not understanding the standard api. The solution is clearly to introduce another api for them to learn. Web development doesn't need more dependencies. 
Clean, I like it.
Aaaaand it's out of date.
Difference in sessions? Only thing I can think of.
Imagine being off for 10 days, though!
Thanks. Anything that could be improved? Always open to feedback.
 You can look here t.me/hotjs
Are Virtual DOM and Shadow DOM different? I've never heard anyone use "Virtual" DOM before..
This looks like it will take loosely structured Markdown files containing JSX and parse them into documentation pages, which makes it really easy to write the documentation since all you need to know is Markdown and JSX. Storybook is a bit more strict in that it will only recognize stories written with \`storiesOf().add()\` syntax, but it's highly extensible and has an addon system that lets you do cool things with knobs, notes, etc.
Null/undefined references happen all the time and this is because of the type system, the examples only get moee complicated from there. I'm not sure if you have used a language with ADTs and pattern matching before but it goes well beyond a type system like Java. You can define valid states of types and objects and any code that might make those states happen would cause a compile error. So with an ML not understanding the API would just result code that failed to compile. The only errors that would remain would be performance related. When Messenger moved to ReasonML they saw a huge reduction in bugs because of this. You will find similar claims from other companies for like Jane Street has tons of talks on why they use ocaml. 
 You can look here http://t.me/hotjs :)
Yes very different. Shadow DOM is like an encapsulated Lego brick with its underlying content and logic hidden. Like web components. Virtual dom is what react etc keeps outside the rendered DOM to calculate deltas on. Confusing naming though 
–ò
Node is nearing 10 years, React 5, Webpack 5, TS 5, Babel is many years old as well. I‚Äôve seen native platforms go under in that amount of time, thinking of xaml and wpf for instance. And the irony, Microsoft rebuilds its desktop apps now with these very tools above, because they have eclipsed native counterparts left and right.
I am proficient in English, have years of professional experience with both Javascript and PHP and yet I have no fucking clue what you just said.
I‚Äôd love to see an article on this, if you were ever in the writing mood :)
It's possible. I recently published a skill that makes some http requests, and that's all written in Typescript. Source code is [on GitHub](https://github.com/cynicaloptimist/table-genie).
&gt;Ember Data Feature Flag Removal (2 of 4) &gt; &gt;The current feature flags for Ember Data have gone stale, therefore they are all [removed in Ember Data 3.2](https://github.com/emberjs/data/pull/5384). Ember Data is going to attempt to go in a different direction with some of the planned changes for 2018. &gt; &gt;If your app depends on enabling these feature flags to run, please reach out to the Ember Data team by opening a github issue on the [Ember Data repo](https://github.com/emberjs/data/issues) and the Ember Data team will try to assist with the transition. Is this not a breaking change? I think Ember follows SemVer. I don't use Ember anymore, but I do read the releases. I'm interested to know how this can be considered a minor change.
0) I can't use npm package X because no types/bindings.
Ah yes, php can now finally do natively what must other languages have been doing for over a decade. Not a php hater! Just saying... PHP isn't exactly cutting edge in this case...
Xaml/ WFP is far from dead.
Shadow DOM is an actual feature of browsers, it's part of the spec. "Virtual DOM" refers to a technique used by view libraries to efficiently update the DOM, by creating a JS representation of the DOM tree (a "virtual DOM") and then updating the real DOM as necessary by applying a diff.
Readability is very subjective. For me a functional approach is more redable because I just focus on what happens in the function and that's it. But someone that's not used to the functional approach might have trouble following that. In fact, when I learnt about it it was not readable at all for me.
Thanks! I am somewhat describing the native templating capabilities that comes built-in since no more than 1/2 years, we can also use it to template js scripts too.
Well. Can't tell when\^ The key here is nowdoc: &gt;!Nowdocs are to single-quoted strings what heredocs are to double-quoted strings. A nowdoc is specified similarly to a heredoc, but no parsing is done inside a nowdoc. The construct is ideal for embedding PHP code or other large blocks of !&lt;~~text~~&gt;! !&lt;**script**&gt;! without the need for escaping.!&lt; So using nowdoc we can pass js template literal **$(var)** yes that is the dollar sign, but this is native js. They have made this to work combined. The $ sign is of course a php variable. But not inside a nowdoc. There is no need to escape. 
&gt; React Native applies React‚Äôs component based approach to the mobile development, but instead of running JavaScript and allowing it to interact with native code it rather compiles the JavaScript to native code. Wat. 
Are you a Markov bot?
The countless universes, each enveloped in its shell, are compelled by the wheel of time to wander within You, like particles of dust blowing about in the sky.
# React Native applies React‚Äôs component based approach to the mobile development, but instead of running JavaScript and allowing it to interact with native code it rather compiles the JavaScript to native code.
Still not correct. 
First off, thank you for the thoughtful response. What you posted is a good representation of the speech portion of the Alexa code, the rest of it can be found at https://github.com/alexa/skill-sample-nodejs-fact, I didn't make any drastic alternations in my attempt to support the scraper input. I'll take a look at the module for handlerInput and see how I might be able to incorporate it. My current understanding of the issue is that the Alexa code is designed to provide an immediate reaction to the voice input but even after a day on StackOverflow I'm still not sure how I'm supposed to tell those functions to "hold up" and wait for this scraper to come back with its value. 
Hey! We made a client-side cache -- the idea is to save individual clients from having to fetch from the server, rather than a server-side cache, which would save the server from recreating responses already returned. Check out Apollo's inMemoryCache for a comparison -- they tackled the same issue with that module, and in fact, that's the engine that's running beside ours in our demo! :)
interesting... I might try this on my next project, and I'll let you know if I get into any roadblocks!
Thanks! I put it back up.
This sounds like a clusterfuck
Pretty sure this is what Relay is built upon, isn‚Äôt it??
üò¢ too true
Look into using [Sets (MDN docs)] (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) Sets don't allow for duplicate items. You can then convert it back into an array if you need. **(ES5)** new Array(setObject) or **ES6** [...setObject] 
Love how the article goes all the way back....Even talks about Prototype and Backbone. Very good article to show people that started with the new stuff like Vue why and how things evolved to where they are today. 
&gt;avoid blue balls lul
[https://github.com/ridhwaans/homehost](https://github.com/ridhwaans/homehost) react app that streams movies, music collection its pretty stagnant, needs more contributions 
On mobile, forgive the formatting Naive solution would be to create an object that counted all words in all strings. Then you map through your list of strings, and for each string, check the word count of that word and filter accordingly. Something like: ``` const wordCount = {}; my_list.forEach(str =&gt; { str.forEach(word =&gt; { if (word in wordCount) { wordCount[word]++; } else { wordCount[word] = 1; } }) }); return my_list.map(str =&gt; str.split.filter(word =&gt; wordCount[word] === 1).join('")) ``` Not positive if that works out of the box, but should be close 
When will this joke die? Is it just me, or is the JavaScript ecosystem really maturing and stabilizing these days?
I see tons of openings that ask for both. 
Relay does offer client-side caching, for sure. And the way they store data in the cache is the same way we did - by normalizing (or "flattening") the data, mapping each record with a unique ID. We didn't look into Relay that much, but we did look far enough to see that they don't allow for cache hits when parameters change. There's some great info on caching in GraphQL from the Relay team here: [https://facebook.github.io/relay/docs/en/thinking-in-graphql.html](https://facebook.github.io/relay/docs/en/thinking-in-graphql.html)
AFAIK sets would work only if it were single words as elements but it is not the case here
Oh, what else do you use for frontend scripting? WASM? VBScript? *HTMLScript*? Or do you even *do* client-side scripting?
tbh the javascript ecosystem in its current form scares and confuses me
This answers my question (it was mainly about creating a 'temporary' array for `for...of`), and I'm happy that it *doesn't* cause overhead if done with a 'temporary' array, like I've been doing. Thanks! \*\*Also thanks, I dunno why, but I mixed up the `for...in` and `for...of`, loops, hehe, sorry!
Other alternative concepts to RxJS include: * Communicating Sequential Processes (CSP - uses "channels"; queues that "block" when values are put in or taken out of them). The concept was invented in the 70s-80s by Tony Hoare, the same guy that invented the `null` reference. It is used in many languages, most notably Go (with its goroutines) and Clojure via `core.async`. * Libraries: * [js-csp](https://github.com/ubolonton/js-csp) * [async-csp](https://github.com/dvlsg/async-csp) * [medium](https://github.com/bbarr/medium/) * [asynquence](https://github.com/getify/asynquence) * Articles: * http://swannodette.github.io/2013/07/12/communicating-sequential-processes (article uses Clojure, but has live demonstration of the concept). * https://medium.com/@arturkulig/communicating-sequential-processes-in-js-intro-e620688b6175 * http://lucasmreis.github.io/blog/quick-introduction-to-csp-in-javascript/ * The Actor Model. I'm not all too familiar with it's history, but I do know that it is heavily used in languages like Elixir and Erlang. It is also possible in JS. * Libraries: * [redux-saga](https://github.com/redux-saga/redux-saga) - It is not 100% true to the actor model, but it shares many similarities with the actor model. * [akka-js](https://github.com/akka-js/akka.js) - Ported from the Scala version of the same library via Scala.js * [SAM.js](http://sam.js.org) - Not exactly true to the Actor Model, but very close. It's kind of like the best parts of Redux, Elm and the Actor Model combined into one useful library with a tiny footprint. * Articles: * https://www.brianstorti.com/the-actor-model/ * https://monades.roperzh.com/get-to-know-the-actor-model/ * https://www.wikiwand.com/en/Actor_model More alternative libraries that closely mimic RxJS but have simpler APIs include: * [flyd](https://github.com/paldepind/flyd) * [most](https://github.com/cujojs/most) * [kefir.js](https://kefirjs.github.io/kefir/) * [bacon.js](https://github.com/baconjs/bacon.js/) There is also built-in language support coming soon with the addition of the [Asynchronous Iterator Proposal](https://github.com/tc39/proposal-async-iteration). An interesting thing to note is that the majority of these concepts can be built on top of Communicating Sequential Processes, and all of them (aside from the actor model) can easily interface with the Asynchronous Iterator Proposal.
Astroturf
My point is that it's JavaScript, not C.
Not even a little bit correct.
winforms ftw
No idea why you're getting dowmvoted. AFAIK, React Native is still running JavaScript under the hood.
ü§î
`Array.from(new Set(originalArray))`
 const originalList = ['The abominable bride', 'The last man standing', 'Last of us']; // Get a list of all words in lower case const allWords = originalList.reduce((result, item) =&gt; { return all = result.concat(item.split(' ').map(word =&gt; word.toLocaleLowerCase())); }, []); // Get a list of those words that repeat const duplicates = allWords.reduce((result, word, index) =&gt; { if (index+1 &lt; allWords.length &amp;&amp; allWords.includes(word, index+1) &amp;&amp; !result.includes(word)) { return result = result.concat([word]); } return result; }, []); // Create a new list without repeating words const prunedList = originalList.map(phrase =&gt; phrase.split(' ').filter(word =&gt; !duplicates.includes(word.toLocaleLowerCase()) ).join(' ') );
I'm actually collecting everyone's score with ajax, I plan to make a plot about places where people have the highest score! and of course which browser does best!
Hi, I understand it's a client-side cache. But a persistent application of the SPA kind needs to have a cohesive domain-based model of its state somewhere, and when the data is there, it can serve as a cache. This means the application only issues GraphQL requests to fill-in holes in the local state, or to refresh state, and client-side GraphQL cache is not necessary. I understand the appeal of a drop-in solution, but thing is, it's not that drop in. You need to train it to understand the parameters, and in the end it'll be again at best rudimentary compared to how well the application understands its own domain.
``` findKey (obj, value) =&gt; Object.entries(obj).find(el =&gt; el == value) ```
Thank you soooooo much!!!
Null/undefined errors aren't particularly hard to stop. It definitely isn't a problem that requires an entire meta programming to solve. I haven't used a language with ADT's, but I've also never thought to myself "wow I wish I could define a valid state, but can't with Javascripts existing language features". I know that I rarely make type-related bugs. I know this because I just looked at the history of all my bug tickets. I just don't think it's that hard.
Does it sound like hes doing embedded system work? Fuck off. This isn't the 90's. 
You should have been hanging around 3-4 years ago. Every other day saw major releases by both new and stable. The shaking table has filtered out most of the cruft and you're left with the high end, useful, stable, active repos. 
Dude, what's it like seeing the future? We were born in the same year, I'm sad I don't have this power. 
It's good but it's only going to get better.
You make some very good points. However, I think a lot of the anti-JS sentiment lately is exactly because JS got so hyped the last few years, and when it couldn't live up to everything the hype promised, people got disillusioned and started resenting it. At the end of the day, I think JS is a fine language, as long as people temper their expectations of it.
They are mostly hating because they are bitter that we make lots more money than the majority of them.
this is probably one of the most clear walkthroughs of simple design patterns i've read. simple, clear and to the point. thanks for the post, OP. good job.
Heh, that's gotta burn
JQuery is simple to use and easy for some of the entry level green programmers I work with who learned it during their schooling/studies. Path of least resistance for small projects is usually the best choice. For larger projects though you always choose the best option for the task at hand whether that be an existing framework or coming up with your own custom solution (also a point of contention with ‚Äúnot reinventing the wheel‚Äù). But after doing this for almost 25 years it really just comes down to doing the best for the project the best way you know how. 
Hey, I love to use this site [http://jstherightway.org/](http://jstherightway.org/) . It has a lot of good guides. For practice I use [https://www.codewars.com/](https://www.codewars.com/). Hope these sites help as much as they helped me. 
Missing a paragraph for Ember, likely in the MVC section. Or as a component based framework, alongside React, Angular and Vue.
Im pretty novice, but easy ajax mostly.
Ahh, my apologies, didn't read the question thoroughly. But pretty much echoing the other solutions in this thread with a slightly different syntax. const phrases = [ 'The abdominable bride', 'The last man standing', 'Last of us' ] const repeated = phrases .join(' ') .toLowerCase() .split(' ') .reduce( (acc, word) =&gt; ({ ...acc, [word]: (acc[word] || 0) + 1 }), {} ) const removed = phrases.map( phrase =&gt; phrase .split(' ') .filter(word =&gt; repeated[word.toLowerCase()] &lt; 2) .join(' ') ) // Result [ 'abdominable bride', 'man standing', 'of us' ] Using regexs might be faster in the `removed` stage, but my regex game isn't so hot.
It is a little bit correct. The JavaScript related to the UI is transformed to native code. The JavaScript related to business logic is run as-is. The two parts run on two separate threads which communicate through an asynchronous bridge. Only one of them contains a JavaScript engine. [This article explains it.](https://wetalkit.xyz/react-native-what-it-is-and-how-it-works-e2182d008f5e) 
let allStrings = [ "The abominable bride", " The last man standing", "Last of us" ]; let masterStrings = []; let duplicateStrings = []; allStrings.forEach(p =&gt; { p .trim() .split(" ") .forEach(i =&gt; { if (masterStrings.includes(i.toLowerCase())) duplicateStrings.push(i.toLowerCase()); else masterStrings.push(i.toLowerCase()); }); }); let newAllStrings = allStrings.map(p =&gt; { let newStr = []; p .trim() .split(" ") .forEach(s =&gt; { if (!duplicateStrings.includes(s.toLowerCase())) newStr.push(s); }); return newStr.join(" "); }); console.log(newAllStrings); 
This is yet another misguided article that mainly repeats the content of Addy Osmani's misguided book, updating it to ES6. *sigh* And this `new Logger().getInstance();` in the first _ahem_ "pattern" is just ridiculous.
/r/LearnJavascript
It's one of the most hotly contested features of PHP. Mixing templating with regular code is a recipe for disaster and has led to many badly written apps and security holes. Interestingly, PHP also owes most of its popularity to it.
That JS is so inconsistent I've just stopped reading. 
 let allStrings = [ "The abominable bride", " The last man standing", "Last of us" ]; let masterStrings = []; let duplicateStrings = []; allStrings.forEach(p =&gt; { p .trim() .split(" ") .forEach(i =&gt; { if (masterStrings.includes(i.toLowerCase())) duplicateStrings.push(i.toLowerCase()); else masterStrings.push(i.toLowerCase()); }); }); let newAllStrings = allStrings.map(p =&gt; { let newStr = []; p .trim() .split(" ") .forEach(s =&gt; { if (!duplicateStrings.includes(s.toLowerCase())) newStr.push(s); }); return newStr.join(" "); }); console.log(newAllStrings); 
I'm just getting to jQuery now in my study through Udemy and as someone that is still learning it is simpler to use. I like that some of the code snippets is simpler and shorter as opposed to ES6.
Mind explaining why the article is misguided, or why that bit is ridiculous?
I think of them as nested functions with the scoping rules one would expect. Is there anything more to them?
That was my daily bread, when rumors started and clients dropped it, updates didn‚Äôt come, the team was fired it was over, and that was 5 years ago. If you still find a job for WPF it‚Äôs legacy maintenance. Microsoft uses electron and more recently react/react-native for desktop and mobile apps now. It is everything WPF wanted to be anyway so good riddance.
It may not be for you, but one thing which boosted my JavaScript skills massively was getting involved and making basic contributions to open source projects. Possibly find a JavaScript project which interests you and get involved?
Why that is ridiculous should be generally obvious, really. To provide a "unique object" it: * creates a class * creates a second class * exports the second class * you need to instantiate the second class and then ask for the object you want, which will be instantiated from the first class * Bonus: You can in fact instantiate _many_ instances of the class that is actually called _singleton_. The article in general is misguided for the same reasons the original was. It presents a lot of things that are **not** _design patterns_, fails to explain them correctly and just gives out code; code which is far less than a good solution in many cases.
&gt; Dynamic typing nightmare Dynamic typing != weak typing. There are already many articles written about this, so I will just list some examples here: - Static weak typing: C - Static strong typing: C#, Haskell - Dynamic strong typing: Python, Ruby - Dynamic weak typing: JavaScript 
The other transpiler that used to be popular was coffeescript. Other than that, a really great article to read
they are actually objects, functions don't have state, closures have, e.g. ``` function getCounter() { let cur = 0 return function clos() { return cur++; } } ``` Here `clos` has a state field, in fact compilers converts functions into objects using so called Closure Conversion Pass, it is a classical transform, you can google it. 
Oooh, thanks, I didn't know that, I've edited my post accordingly!
I don't use jquery now, but I miss it, succinct code, comparing to browser API DOM manipulation
Very good article. I've been working with JS since 1997 maybe? This article covers most of it in short span.
new day, new Javascript framework. 
No JS code is transformed or compiled... It is through interprocess communication over a (semi)well defined interface, and ViewManager classes that translate those messages into instantiating and updating views programmatically.
Notice how you claim to fit exactly in #2 above? I'd be curious to see the breakdown of bugs that you claim to have as well as the bugs that you introduce.and fix while your are developing but before you check in code. If you truly don't create bugs due to types then you would be able to delete a huge amount of defensive code if you moved to a language like reason. This should be appealing to you. It also ensures that the quality of code is consistent across your team, just because you can do something doesn't mean that your whole team is the samr Calling something that you have never used unnecessary is something that is hard to argue with. How am I supposed to have a discussion when you won't even consider alternatives because you think the way you do things is good enough? I think you would be surprised at how many errors are actually just type errors and would be caught before you even run unit tests. I mean I think the fact that more and more languages are adopting these features as an indicator that they are useful. 
^^ this. Instead of React reconciling its diffs into DOM instructions, React Native turns it into IPC messages (essentially just topic + JSON payload) that gets picked up by the ‚Äúbridge‚Äù which translates those into native function calls.
Good for what? Your question makes no sense without some context.
While some frameworks had more potential than the others, most of the corporations stuck with one or two frameworks and are not rewriting their entire front-end solutions whenever something new comes out. Its why jQuery stuck around for so long (heck, its not even dead yet) and why AngularJS and Angular are still big. I don't see React going away any time soon either. Sure new stuff comes around but most of the time the ideas from those things will be implemented as its never really impossible to do that. Only with new standards (like ES6) big shifts happen and I think we're already past that. And lets not forget that the biggest thing holding Javascript back is legacy at the moment. New solutions often use the latest tech, whether that is feasible or not. Not everybody is able to drop IE9 support for example. Though I must say that lots of companies I've seen lately are down to IE11 now because the rest just isn't safe enough anymore. Especially banks and insurers. I just look forward to the moment when we can also drop IE11 and stick with Edge/Firefox/Chrome/Safari support for 99% of the users. While the difference between IE11 and Edge isn't big, the fact that Edge is being updated with the latest standards helps a lot. Though stuff like CSS Box layout is already possible and so are a number of other cool stuff. But we still have a long way to go for when ShadowDOM or import/export has big enough support to start using without polyfilling it.
The context is the relevant scope. var x is in the global namespace, class.x is inside of a class. Lexical scoping is scoping according to the enclosing calling context. The onClick attribute is a common lexical executor. Syntax parsing, I think that's just another phrase for the interpreter. Someone correct me if I'm wrong.
Why not use jquery(ajax) and es6? Anything im missing here?
Same with me. Android 7.1.2
My guess would be that using non-default values for feature flags were considered "experimental". Feature flags made sure that a new feature, if it broke an existing app, could be turned off. Most people should be find with the default set. Thus this is a non-breaking change if you never meddled with feature flags yourself.
IsPlural?
just because this project uses the word 'framework' doesn't mean it's a front-end component framework like react etc...
meta
Your answer make no sense. Combination could be anything from IP, time stamp ... etc
At my workplace we have lots of legacy code written in jQuery. I like how much easier it is to select siblings etc of an element.
MS is not rewriting desktop office, they're rewriting web office.
Don't do this with cookies - look into local storage instead. Cookies for storing actual information is a hopeless practice.
Javascript is an interpreted language, it is inherently as slow as dogs balls. You use it for what it can do, not for its speed.
At least this article is transparent about it being design patterns in javascript rather than "javascript design patters" as they usually are called. Also what's with all the recent articles about design patterns in Javascript anyway?
If you just want to draw dotted lines on a canvas you can use the setLineDash method of the canvas and give it an array of lengths for the dots/stripes. E.g.: ctx.setLineDash([1,1]) should alternate between a dot and empty space every pixel. For more see the MDN docs... https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash
Why are you asking this when you literally just posted [JavaScript: Understanding the Fundamentals Syntax Parsers, Execution Contexts, and Lexical Environments](https://www.reddit.com/r/javascript/comments/8vx2mi/javascript_understanding_the_fundamentals_syntax/) which, coincidentally, links to an article it looks like you wrote?
I want to collaborate and here other people's persepctive on things. That's why. Next time I will form my questions differently to avoid replies like yours.
You don't have to change how you form questions. All you need to do is post about a topic once ;)
:) thanks for you correction I appreciate it 
Uh. I mean this is /r/JavaScript so I don‚Äôt think you‚Äôll get a lot of non biased feedback :x
I was just looking for something like this. Awesome!
Uh. I mean this is /r/JavaScript so I don‚Äôt think you‚Äôll get a lot of non biased feedback :x
Heh, it's fine. What matters is that people at least listen to what I have to say. If, after recognising JavaScript's benefits, people still want to bemoan it, it's fine &amp;mdash; educated whiners are better than ignorant whiners. P.S. You commented twice by accident (are you using an app?).
What?!
&gt; Did I miss anything? Yes, you missed some things. Some of them, important. Please read the following carefully and with an open mind. _I_ don't mean to offend, but I might say some things you may not like. First of all, you missed the point that user had when he mentioned the fact that ‚Äúit's JavaScript‚Äù. The point may be debatable, of course, but it is a point and it is _not_ simple hate. The fact is you're running a very complex system, with many overheads and many non-obvious optimizations and costs. This produces that a _large_ part of micro-optimizations you might worry about are probably not going to have any relevant effect at all. Some may even work better in one particular engine and worse in others. This doesn't mean you should discount any optimization opportunities, of course. Your original question had _some_ merit, but mainly because the code was bad to start with. What I mean is that you missread that comment and dismissed any merit it might have had and didn't even notice. That's the first thing you missed. The second thing you missed is that not all hate is equal. You may hate me because you don't know me and I might say some uncomfortable things, because I killed your father or because you think, erroneously, that I killed your father when it wasn't me. In the same manner, people may feel either hate or love, towards JavaScript because they just don't know better. But also because they do; they might hate it because they know the language well and know its warts and ugliness. Or they may love it because they don't know those warts. Or they may know and still like it... Or they may simply neither hate it nor love it, because they know better than that, because it's just a tool they use. You seem (less than 3 years of web development; a rant/love-letter-to-a-language) ‚Äúyoung‚Äù. Not necessarily in age, but in experience. I don't mean this in any offensive way, but to ser a perspective. One day you will become disenchanted with, at least, some parts of JS. With a bit of luck, another day you may transcend both that love and the potential hate you may one day harbor, or even that disenchantment. And you'll find yourself simply understanding. Both the good and the bad. And understanding that languages are just tools, and that they, _all_ (or almost all), have some good and some bad, and that the best you can do is just acknowledging all the parts and simply focus on solving whatever problem you need to solve, with the tools that fit better.
&gt; It really is better to have weak typing than have a dozen redundant variables of different types just occupying memory. What causes these redundant variables for you? &gt; If you really knew JS, you wouldn't be whining about this. When you really know JS, you never use == and always use ===. But why introduce this speed bump for new users? &gt; global variables This is not a common complaint I've heard about Javascript. It's certainly not specific to it. &gt; the kind browser decides to not make you go cry in a corner and add it to the global object, instead of fucking breaking your page Yeah, so you can spend a bunch of time trying to figure out where undefined is coming from... &gt; First-class functions I've never heard of people complaining about this. &gt; No multithreading Webworkers give multithreading capabilities. Most Javascript applications are not CPU-bound though, so don't benefit from multiple threads. --- I don't believe you can claim to have a good understanding of a language without hating it at least a little bit. Javascript was certainly not designed to be the workhorse language it has become. Its continued use is purely based on its monopoly of the web browsers.
I feel bad for taking you from 69 updoots to 70, but it‚Äôs deserved... nice work. 
Which has *absolutely* no relation to browsers not understanding any other language, so I'm just going to go with "Okay."
I guess you mean I haven't seen the many ways JavaScript could screw me over like it has done many of the more experienced players? And once I gain enough experience with different languages, I *don't* like/dislike them? &gt;you missread that comment and dismissed any merit it might have had and didn't even notice. Can you enlighten me, then? What else *am* I going to run in a browser? &gt;Not all hate is equal Weeeell, maybe I wasn't thinking straight when I set the title, but this is directed at people who just ride the "JavaScript suxx" train without any idea of who is driving it, or where it's coming from. Not at people that have a substantial reason to hate it. (I thought I made that clear when I wrote the post.)
You can use C in browsers these days. Have a look at WebAssembly. You can also write GPU shaders in WebGL, which is another language.
Thank you for understanding my point and summarising it so well.
Check WebAssembly out, it's designed to *complement* JavaScript, not *supplant* it. The two still have many APIs in common, and you can call WASM APIs from inside JavaScript. Totally doesn't justify blaming JS.
IE11 doesn't support ES6, only ES5. IE11 has no datepicker. It is already loaded into the legacy codebase. It took an hour to get familiar with.
Transparent advertising dressed as an article, this really is becoming super annoying.
The main issue is ie support. Even if I'm not using jQuery I'm not using es6 either.
Perfect, I was just considering rolling my own for a side project!
They have no APIs in common. Communication between JS and WebAssembly is managed by call trampolining between runtimes. You seem to think you have to love your tools, whereas experienced people hate something about everything they select for purpose.
Okay, thanks for enlightening me about JS/WASM. And no, you have to know *why* you hate something, before jumping on the bandwagon.
When all you've learned are classes, every pattern can be implemented with classes. /u/ugwe43to874nf4 points out the clumsiness of the existing code. Something like the following (or the following wrapped up in an extra closure) would work as well. ```const logs = []; const logger = () =&gt; ({ log: (entry) =&gt; { logs.push(entry); }, get: () =&gt; logs, }); module.exports = logger```;
ES6 isn't an alternative to jQuery. I'd love to use ES6, but unfortunately have to support browsers which don't support it and I'd rather not have to add a transpiler to my stack. My current stack is Java based and my JavaScript is fairly vanilla, but I'd rather not have to reinvent the wheel when it comes to DOM manipulation and UI widgets/plugins, so jQuery it is.
There isn't any bandwagon, everyone's been hating Javascript since the day I first installed it 22 years ago.
unfortunately there 
Idk, I like JS and all the quirks.
"Axe-axe" ....How do I pronounce this?
I will concede that less defensive code and quality consistency amongst team members are indeed tangible benefits. I just don't think those benefits are worth having another build step and learning an entire new API that may or may not be around in a couple years. It wasn't long ago that coffee script was all the rage and now nobody talks about it. I would be perfectly glad to use features of those langauges if they are introduced into the core Javascript API, but until then I just don't think it's worth it. The biggest and most confusing bugs are not type errors and it's easy enough to track down and create some defensive code for them. On my current project our biggest bug type are logic errors that stem from poor code semantics on our part and from using MobX improperly. 
This should be named "How to write JavaScript like static language." If someone I knew coded JS like this, I first find the most disappointed face of mine to wear and then I'd go find the first few books of *You don't know JS*.
Javascript is sufficiently fast for most applications because most hardware is sufficiently fast to interpret it quickly enough. You use every language for what they can do. Speed is rarely a requirement for most projects. All that said and done, it still doesn't mean performance shouldn't be a concern. Use your head please.
&gt; Can you enlighten me, then? Ah, I don't think so, no. Shame, I guess, but, well, such is life.
Yes indeed.
Scrollbars don‚Äôt even show up at all for me on most of the demos. Don‚Äôt call something ‚Äúthe best‚Äù if you can‚Äôt deliver on it.
How else? 
Has anyone ever told you that you look like Aaron Paul?
The best way to singleton in javascript is to use ecma script modules. They can do the job for you : ```javascript class Logger { constructor(){ this.logs=[]; } getTotalMessages(){ return this.logs.length; } log(message){ this.logs.push(message); console.log(message); } } export const log = new Logger(); ```
If you use singletons in javascript, you are the definition of a bad programmer.
Nope, but thanks!
https://www.youtube.com/watch?v=dvaja9AE2rs
Let me guess: you haven't read the description, right? There said that mobile devices has the native appearance. It's true for all such components I've used because there is no way to determine the scrollbar width. 
I heard something else, the entire Office 365 Suite is being rewritten in React-native, the react that drives desktop apps, which they forked under the reactXP moniker. Skype is RN as well, VSC electron, I haven‚Äôt heard of any official new WPF app that came out.
Honestly, I'd report it and move on.
You could build it into a Map, then do lookups directly with get: const asMap = new Map(Object.entries(myobj).map(([k, v]) =&gt; [v, k])); const ninetyKey = asMap.get(90); I like the other answer, but you might find this useful if you'll be looking up a bunch of different numbers from the same map. It'll be faster and cleaner for that, since you don't have to search the whole thing every single lookup. It works by building a new Map (which is similar to an Object, except you can use almost anything for a key, not just a string or Symbol), by taking the key and value from your object and flipping them, so the value is the key and the key is the value. You can then do fast lookups based on the number. Don't forget to cast as a number of your input might be a string. 
You never understood scoping*
"Axe-axe... Axaxaxaxaxaxaxaxaxaxax..." I like the sound. Soun-duh. Ack-zuh. Zuh. Zuh zuh zuh. Zzzzz. It vibrates the mouthparts pleasantly. Part-zuh.
Meta af, bruh