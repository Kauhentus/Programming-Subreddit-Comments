Excuse my ignorance, but what problem does this solve? I don't think I quite understand this and the README doesn't contain any information. Just shoots off with the quickstart. Specifically, how is this any different than a regular database and websockets between every client to transfer data in real time? Also, big kudos to that issues list. When i saw the 2 open issues, I thought nobody is using this but then saw the number of stars.
I am new to JavaScript and I worked on this small connect four game this week. Link: [https://preetmishra.github.io/connectfourgame/](https://preetmishra.github.io/connectfourgame/) Github: [https://github.com/preetmishra/connectfourgame](https://github.com/preetmishra/connectfourgame) &amp;#x200B; Screenshot: !\[ssConnectFour\]([https://user-images.githubusercontent.com/43616959/59258576-d975de00-8c55-11e9-88bb-a0e470d16ec5.png](https://user-images.githubusercontent.com/43616959/59258576-d975de00-8c55-11e9-88bb-a0e470d16ec5.png))
Can confirm. Am idiot.
Thanks, as per the clarification I see now... &gt; save data on memory. I imagine it wouldn't be a cache if it didn't save in memory. But "memory" could mean RAM, swap file (if not forced to RAM), GPU RAM, even a NVME ultrafast memory. Specifics are important because without knowing exactly what type of memory does the cashing you're not telling me whether this is useful or useless.
`useReducer` in React is pretty nifty for writing a state machine for a component. Especially if that state machine has minimal API outside. If you need the state to connect several different areas of your application or use side effects (thunks, sagas, observables), then you'll probably want a better state handling with a store. Basically, if the more you need a unified store, you'll find redux more and more useful.
This is a great point! So many times I have found tutorials that are meant to explain one simple concept assuming the reader knows many much more complex ones. I click away from at least half of all online coding tutorials, it is incredible how bad some are from the point of view of a beginner. Programmers seem to have a hard time remembering what it is like to not know something.
I could buy that. I didn't see evidence of it here, but it'd be perfectly acceptable in my mind to do it that way.
It says it has server sync. But if the credentials are handled differently in that scenario, it would explain the confusion.
Do you use code splitting in your application? These could be all small chunks used on your page combined or 3rd party scripts like Analytics.
date-fns or moment.js?
yes, I use code splitting, but only two other small files are loaded. /app...js and /home...js are way larger. And these other small chunks won't take 11sec CPU time, I think. &amp;#x200B; Is there a way to expand that Other part? Or find these numbers somewhere else?
Practically zero.
You can use the Performance tab jn the Chrome DevTools to debug de script execution. You can look in the flame chart which functions are having a long execution time or high cpu.
I'd be inclined to include a version of that benchmark graph with indices that better match of the one above showing generic O(&lt;magnitied&gt;) values, i.e. showing time to complete rather than ops/sec. Otherwise someone scanning the article without properly reading+thinking might look at the end of the current graph and go away thinking "as things get bigger it matters less" when in fact the exact opposite is the case.
You can have a global store with `useReducer` just fine.
As others have said, the problem is small these days. Way back when (the IE4/5 &amp; Netscape 4 era) it was not uncommon for JS to be disabled on some corporate machines due to security concerns, but that has not been the case for many years. Three things to look out for though: * Accessibility: as others have pointed out this could be problem. Modern screen readers can cope with some JS created/modified content, but very far from all. Depending on your target audience and their regulatory profile this could be an issue even if you don't expect it: many large companies impose a blanket requirement for certain accessibility standards even where they may seem utterly irrelevant. Conversely, your idea of when they are irrelevant may be utterly wrong! * Script load failures: make sure you test your site without JS to make sure that if the script fails to load (due to network errors, or someone running noscript) or parse (due to error on your part not caught before deployment, i.e. a change made direct to production, or an error in the deploy process, or a browser specific issue). Make sure that the page/app displays something useful in this circumstance, if only an error message (something along the lines of "it looks like our scripts have failed to load, please report this to...") though preferably where possible the useful content just sans interactivity. This is far better UX than just a blank page. * People who run noscript: be prepared for some complaints if your site/app becomes popular. The refrain "I just won't use it if it doesn't work with noscript" is more truthfully for some "I just won't shut up about it not working with noscript"! I fully understand why people use noscript, I experimented with it myself for a while, but some of its users seem ridiculously entitled to be specifically catered for.
CRA deliberately only includes lint rules that are likely to catch actual bugs. Most of the rules in the `eslint-plugin-react` package actually border on being harmful to end users, _especially_ `jsx-no-lambda`. Defining functions inside of `render()` is totally fine. The only time it's even potentially a problem is if you really are trying to optimize perf, and the child component you're rendering is comparing props by reference (ie, `PureComponent`, `React.memo()`, etc), in which case the new function references will cause the child to always re-render instead of being able to skip re-rendering.
The Map approach should use WeakMap and key off `this`. The approach given causes the properties to be shared among instances const card = new SimCard("444-555-666", "Nano SIM", 1515, 45874589); const anotherCard = new SimCard("444-555-666", "Nano SIM", 0, 0); console.log(card.pinCode); // outputs 0 console.log(anotherCard.pinCode); // outputs 0 see: http://2ality.com/2016/01/private-data-classes.html#keeping-private-data-in-weakmaps Also note private class fields (`#pinCode`) are supported in shipping chrome
You can return larger values from `useSelector()`, just like you would with `mapState` - you may just need to tell it to use shallow equality instead for comparing the result, or alternately pass in a pre-memoized selector (such as those created by Reselect's `createSelector()`). If you want something that's more similar to `mapDispatch`, there's [a copy-pastable version of a `useActions()` hook in the docs](https://react-redux.js.org/api/hooks#recipe-useactions0.
Thanks! I realised you can return more from useSelector (e.g. `createStructuredSelector` is a good shout here) so not fussed about that :) And I found the additional recipes in the docs. It's pretty much what I'd have implemented anyway. Thanks :)
Yup - it's one of those rules that's particularly annoying to me and I've been trying to lobby to remove it. Going forward it's something that's not going to be included in projects. We don't use CRA, we roll our own based on company spec :/
multiply the estimated by PI number. The more digits after the comma - the more precise the calculation will be.
I was super excited to see someone else was working on something similar to what I've been working on, then I saw pouch-db and I got all sad. Anyway, looks interesting, don't really see a huge use for it though.
Ok , I got your point. &amp;#x200B; English is not my native language , so I'm not thinking too much about it before. &amp;#x200B; "Save data on the RAM" should make it more clear. &amp;#x200B; Thanks for the advice.
I'm aware of the given alternative. I wanted to provide a different approach for that particular case and unintentionally introduced a bug, apparently. Thank you for the update. I find \`this\` to be an overkill for a key value. What do you think about an option to create a unique key for each instance and use it as a map key instead of \`this\`?
The readme is not a sales-landing-page. So it is intended to include a quickstart. &amp;#x200B; The difference is that you can subscribe to data which becomes usefull when you do reactive programming which is recommended when you create an UI.
I've also been struggling with the concept of estimates, mostly because I seem to estimate stories as more complex than my co-workers (some of them are afraid to appear incompetent/want to look good for the bosses). A link to the talk: [https://www.youtube.com/watch?v=eisuQefYw\_o](https://www.youtube.com/watch?v=eisuQefYw_o) Imo safest with estimations is to err on the side of caution, stuff like what your colleague said might sound ridiculous (and tbf 2 days -&gt; 40 days is a bit OTT) but there is a cause for these things to exist, as explained in the video. Your sales might not like you for this, but systematically underestimating a project will lead to massive issues down the road, I have seen it and I'm currently in a project that is taking 3x longer than initially expected, in part because the estimations gave an entirely skewed view of the complexity we were dealing with.
Great to read this. Grider's full-stack Node.js course is nearly as awesome as his React course. You develop one app the whole course. One particular epiphany, for me, was the part of how the front-end and the back-end connect (proxy). This course integrates modern credit card payment API (Stripe API), and modern mail service behemoth (SendGrid). With SendGrid, you may bang your head on the wall a few (a lot?) times.... It's just a bit too complicated. But it's no fault of Grider's, but rather SendGrid's. Grider's explanation of Passport OAuth2 authentication, also, seemed to me clearer than from any other instructor. This also would be the first course where you will start understanding that the tech world constantly moves ahead and the packages change. This will be the first time you will start searching for answers on how slightly update the instruction given, like the proxy setup in webpack is different nowadays. (Searching for an answer is a great skill, in its own right). Now moving to the Advanced React and Node.js: Advanced Concepts, this is where this skill gets into high gear. Lots of stuff needs to be updated, and if you would, by this time, have developed a special affinity for Github issues' threads, you might be able to wander through these courses. The tech outdating process is Udemy's instructor's curse. Other instructors insert correction notices, patch their videos and such. Grider doesn't seem to return back to his courses. If he updates, he updates the whole thing (like this React course that is still fresh). (If you move sideways, into one-off Grider's courses, like Elixir, or Go, or Ethereum, the speed of being outdated is a bit slower there).
&gt; What do you think about an option to create a unique key for each instance and use it as a map key instead of this? You can do that, but you need to store that key somewhere at the instance level, and that would likely leave it exposed. The thing is, you already have a unique key: `this`. That's why maps are used, because they're not limited to string keys. Object keys (such as `this`) also work. Also if you use a string key, you're going to have a memory leak since every instance key will be left inside the map even after instance itself is GC'ed. This is why WeakMaps are used.
I do a fair bit of estimation at work. Start with a work break down that is MECE. Try to break down in tasks of maximum 8 hours. I usually go for an average time estimate, but you could do min max or try to classify them with uncerntainties. Now you have you build estimate. I usually clmpare this with an knitial top down estimate. Then add percentages for meetings/clarifications, quality assurance and bug fixing. I usually get a second opinion on my estimate from a collegue When you have started programming you must accept that these are estimates. You may be wrong. The most important is not that you are right for every partial estimate, but instead focus on the average... You can also try to use your estimates as a timebox, if keeping the budget is crucial. At the end find all the tasks you forgot in the work break down and see what estimates were way off. Use this next time you estimate.
1. I never said I liked ..spread reduce, it's unreadable, unusable with typescript and pointless. I don't even use reduce except for some sum functions 2. If you do things like this in your render function, something is probably wrong with your app architecture. Consider normalizing data when it is fetched, for example 3. You said it is a tradeoff. It is, but overall when writing apps (not libraries) you should always consider readability and clean app architecture over performance unless your task is something very specific.
Yes, the idea was to create a key at the instance level, but it will be exposed as you mentioned. Your points are all valid, I was just trying to avoid using `this` as a key. I guess we need to stick with it until private variables are fully supported.
ternary operator, typed arrays, this.
Great stuff! I already fiddled around with the code :D. Is there a reason why you didnt set enumerable to true in the defineProperty lines? I saw that the JSON.stringify of an observable obj is empty atm :). Anyways, I integrated a copy of your code into my lib and changed it in a few places. My plan is now to implement a batch function that will inform the observers only once after multiple mutations - if you're interested I can send you the source when its done.
Give yourself however much time you think you'll need and multiply that by the output of a function f(x) s.t the range of f is between 0 and infinity and x is a aribtrary value that you pick. Or use a constant factor instead of output from f(x), your team should reach an agreement what the constant factor is. Basically just pull a number out of your ass, start high.
Good for you I am not your boss then :-)
that's a really good idea!
Ugly code is better than broken code. Broken code is better than no code. No code is better than solving the wrong problem.
For the object spread operator specifically, most JSVMs are able to just copy the memory of the previous object. Then they don’t need to iterate over the properties, so it’s no longer O(n^2)
This can also be really useful for applications that will have very spotty connectivity, such as a mobile device in an oil field working with plant maintenance type applications on a mobile device.
Don't keep the console.log in your code. Complexity aside, leaving console.log in your code just looks unclean, and God forbid if you're not careful it might expose some vulnerabilities which attackers could trace.
In my opinion, there is no best Javascript framework, only a framework which makes sense to use for the project. Yes, each framework has different advantages and disadvantages to them - but it all depends on how you make use of those to benefit your project goals. A project that works best with React will work differently than a project that uses Angular, Vue or some other sort.
&gt;The readme is not a sales-landing-page &amp;#x200B; That's not really what I was implying, didn't mean to come off that way. But Vue for example has a short explanation on what it is. &amp;#x200B; Thanks, though.
Hi /u/6zlcfndrhf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kreuzerk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Rouu95, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/maikeldotuk, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/neglostyti, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ControlFu_com, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ZestycloseChocolate, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Psyman2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Not sure what rules I broke, but if it's because it's easy to google answer, then it's not. I'm working on this for few days now and I can not find real answer of what that Other line means. Before posting here I was thinking to ask Addy Osmani about it, but that sounded a bit over the line. So next option was to ask community, you know, like on Reddit. &amp;#x200B; But sure, you make the rules, you define, what's easy and what's not.
Yeah I'm quite ok with looking up information about changes in packages etc so that doesn't really bother me. My main reason for taking a course would be the quality of the instructor's explanations and the content - which I've now come to see is where Grider definitely excels. &amp;#x200B; I've used SendGrid quite a bit so that doesn't really bother me either. I've done a couple of Node.js courses and after that also built a traditional MVC project with Node.js and a template engine. I would say I'm fairly comfortable with Node. Considering my background, would you first go for the Advanced React course or the React &amp; Node fullstack course? &amp;#x200B; Thanks mate!
Awesome news! Since I started using hooks, I really like it and to see many modules are adopting it, specially React Redux. But like other folks are saying, sometimes I feel using Redux is over-engineering in case of each projecta. So I love to use `useReducer` with `useContext`. Hence I made a my own module, I named it `hoodux`, and use it for my projects. https://github.com/mattdamon108/hoodux
I never understood why there's a big push for full functional instead of local functional. If I have a loop in a function and it's the only loop with no mutations that manifest outside of it, the local mutation is irrelevant to me currently. Granted the big bottleneck still and always will be the network
I'd recommend the fullstack course first. It's alive, it's exciting, it works, it gives you a final product in the end, and the quality is the usual Grider. If you do the Advanced React, it may dampen your spirit right from the beginning, given that CRA is different, stuff is outdated. I hear you that you are OK with changing packages, I just don't know to which degree. I basically gave up on Advanced course because of that.
I use `useReducer` for managing complex component-level state, but I would not use it to manage global state across an entire app. redux is much better suited for this.
The biggest frustration I had with this post was the assertion that copying m items for each of n iterations, aka n * m, is effectively the same as n * n. That's only approximately true if there's a tendency for m to grow over various problem sets in a similar way to the growth of n. Even if n grows to a million or a billion records, m might only grow (in practice) from 5 to 10 to 25. that's not at all the same kind of growth. I think in practice m will tend to grow much closer to a constant than linear or more. In which case, we are adding a constant of more operations (and maybe "unnecessarily so", tbf) per iteration, but we're not even remotely trending toward adding "n" operations per iteration. This thesis-flaw aside, I did find the discussion at the end about immutability, and the suggestion to make one copy before the reduction, a useful reminder. I just didn't track with the scare tactic of O(n^2) because I don't see that leap justified in the article. Indeed it was a bit hand-wavey with basically "we can just assume..."
Will probably skip the Advanced course. Read some other reviews and the issue with the course being outdated seems quite widespread. &amp;#x200B; So happy with the React course though, and I really like how he so thoroughly goes through basic React before introducing Redux.
What about using `Object.defineProperty`? Does it suffer from the same problem? For instance, I've been doing the following to achieve the same result in a functional way: const reducer = (acc, item) =&gt; { return Object.defineProperty(acc, item.key, { value: item.value }) };
[removed]
I don't deny that the store is doable. However, redux is not only the reducer. When you have a global store, you'll find more value for redux plugins like time travel, rehydration, side effects, etc. Additionally, redux connect handles a lot of memoization for you. Maybe even `useSelect` does that too. `useReducer` definitely made state machines more easy, but redux library itself is tiny and almost any coder could do it. The ecosystem around redux is still very attractive.
Nice
Will take some time to get a deeper look but right off the bat, some things you might want to take care of if you want to build large-scale projects is, - Setup a linter - airbnb has a good one, may be a bit too strict, or use standardjs I say this mainly because I see a lot of inconsistencies in your naming convention - camel Case vs uppercase, single quotes vs double quotes, using a linter/standardjs will help you iron out these issues.
i'll give this one other go: i think i understand both opinions, and i agree that it, again "subjectively" doesn't matter (what's 25ms, right? ask google...). so yeah, it's okay if you choose reduce/spread if the n is small enough. but here's my two reasons why i would avoid it: a) what is "small enough"? b) if you KNOW you should avoid it if n gets too large, why not keep your codebase consistent and avoid it at all so you don't have to decide. makes your whole codebase easier to read because it's the same everywhere
This is not the correct sub for this. Regardless, this is a regular sorting / searching algorithm question. Each algorithm has pros and cons.
`Object.definePropery` doesn't create a new object, so in the end you're again mutating `acc`, thus you'll have `O(n)` again (while the process might be a tiny bit slower than just assigning a property, but this is pure guesswork ;))
I use ESLint, and I really should add style requirements. Thanks! Please tell me if you look deeper and find anything else I should change.
I think people are demonstrating a few things in this thread: 1. Making arguments about readability is really difficult, so much of it is about what you're familiar with. 2. People definitely care about *style*, even in favor of speed and performance. Glad to hear my version doesn't have a big performance issue, because I think it is a happy compromise between style (no reassignment), and performance...
Thanks for the succinct explanation, I had wondered the same thing!
wow, didn't know this is only supported on safari yet, that's actually pretty sad... for whoever wants to look it up too: https://kangax.github.io/compat-table/es6/
All of the ones listed appear to be various flavors of component framework for the most part. The best choice in that particular case is Web Components (built into all modern browsers, including your iOS/Android phone) together with some middleware to make it easy to write components quickly. I personally use LitElement because it's fast and small (&lt; 10k) but there are dozens of different choices and I'm sure we'll see middleware that makes it taste more like React or Angular in the long term to make it an easier transition for people used to older component systems.
I'm another victim of this scam artist DanielB2B, he is a thief plain and simple. I tried to hire him from one of his many Craigslist posting ads he floods this site with as well as the Warrior Forum with and as soon as he receives Bitcoin he's gone. He took me for over $200. Help bring this sleazy guy down and don't let him steal from more people.
In the readme or do you mean this? https://vuejs.org/v2/guide/ But you are right. A short description what rxdb is, is missing.
It's one linting rule that may or may not be controversial -- some swear by it, others say it's an unnecessary premature optimization whose impact is not measurable.
Wow, that's amazing! doubling down on my previous comment, thank you for your contribution and the effort you put into making such a solid offering.
If you use webpack, you can wrap any code you don't want in production in an *if* that checks the current environment. The whole *if*-block will then be removed when you build for production. An example: if (process.NODE_ENV !== "production") { console.log("I'm not included in production mode!"); }
You have a tiny package. Hahahahahaha.
I'm totally new to web dev. What does this do?
Of course you could. But you would be spending quite a bit of time reimplementing a CPU from basic logic gates. You can't, however, use JS booleans interchangeably with real bits, because in most CPU architectures, CPU instructions operate on groups of bits (typically 32 or 64), and JS booleans are represented in memory by a value with a register's width, as opposed to a single electronic 0/1 voltage level in a NAND gate.
Yes, in the sense that you could do it. No, in the sense that it would act like binary native code, because JS is not allowed to run directly on the hardware for security reasons. I believe there are several projects that define their own binary representation of program behavior that is hen run in JS by a custom JS-based runtime thar understands that binary. Glimmer in EmberJS does something like this: https://www.linkedin.com/pulse/glimmers-optimizing-compiler-chad-hietala/
Why did PouchDB make you all sad?
No but you can do this: [http://www.jsfuck.com/](http://www.jsfuck.com/)
Because I thought this as an Rx interface for IndexedDB. So 100% dependent on the client. Instead it was for connecting to an external database
Looks great. Just started a project with this :)
Reading the docs on hooks and I can't help but notice all the gotchas and hard to track bugs that this may cause for newbie devs. Hooks in general seem like they require a higher level of understanding to avoid foot gunning yourself. Otherwise I'm excited to see less boilerplate code in our app and welcome these new additions.
Wow this is really awesome. I'm gonna take a further look at the examples and play around with this a bit!
Most of the listed frameworks are about simulating the idea of creating components in your browser. But the thing is, there's no need to "simulate" or polyfill that capability anymore. Your browser already supports Web Components and even your phone (iOS/Android) handles it super well. It's faster and adds absolutely no size to your app to use it. If you want to make them easier to write, you can add some simple middleware like LitElement (or any of a dozen other libraries) to get Virtual DOM, easier templating, etc. for a few K (&lt;10 for LitElement). &amp;#x200B; Eventually I'm sure we'll see a whole raft of libraries to make it easier for React, Angular, Vue, and Ember users transition to Web Components by making the process of templating or handling data taste more like what they're used to.
basic JS can only run JS. You could write JS encoded as binary and eval it. But you can't run machine code from JS. You could launch a child process that executes machine code from node and feed it the binary code you created in JS.
Hello, Nice first project ! **About the front end** \- It could benefit from a state management system (like redux) instead of nesting properties. \- Why ChatManager is inside ChatList ? Something is wrong in the naming or in the flow. ChatManager should be in /components from what I get out of the logic. \- Why there is a ChatManagerDialog.js ? The other Dialog components are not name that way ? **About the back end** \- The models and the controllers are both in the models folder \- You may want to add some comments for some things that are not that obvious (in SocketEvents.js, handleJoinGroup takes an id parameter. Is it a number, a string?) \- You may want to move the controlling logic for /signup and /login out of the index.js It's mostly the obvious things that I am pointing out but all in all the code is not a total mess and should be easily upgradable. The back end is cleaner than the front. I think you should try to use flow charts or mind maps to visualize your project in term of components or functionalities that would help your naming and folder structure problems. &amp;#x200B; Again, for a first project it's not bad at all ! Congrats :D
Wtfffff
Sure, if you want to miss out on all of the optimization that \`react-redux\` does. Have fun rerendering your entire tree.
Is there anybody here who has used both MobX and React/Redux hooks? How similiar are the techniques? It seems to me like React/Redux is trying to do basically the same as Mobx: managing state by using getter and setter functions to track reads and writes to the state. But React/Redux's hooks seems to be an awful lot more work than just using MobX. Are React hooks seriously just a more manual, explicit form of the reactivity that MobX provides?
It manages state in React programs. Master JS, ES6, html and CSS then only if you start to learn React and understand a good part of it, study this. It is fairly advanced and probably not for a beginner.
I would be very careful about setting up your socket listeners in the component did mount life cycle event. https://github.com/tamirco2003/Orca/blob/master/frontend/src/routes/Chat.js You’ll probably want to move those into the constructor instead to guarantee it’s only registered once. If you don’t, it’s very easy to create bugs here by having duplicated event listeners. As others have mentioned, adopting a state management framework would benefit in many ways and allow your application to grow. If you choose the use web sockets throughout the app, you might need to pass in the socket as props to a component that isn’t in the Chat component inheritance chain for example. While I haven’t personally used any kind of redux middleware, that seems like a popular use case with web sockets
It can be a pain, but there's good guides out there these days. There are definitely some things that just can't be dealt with by a screen reader, but for the most part it's pretty straightforward.
redux works like it always has, it doesn't use observables but plain javascript objects and small reference equality checks to detect changes. hooks just change the way you consume state. what previously used to be @connect((state, ownProps) =&gt; ({ person: state.persons[ownProps.id] })) class Person extends React.Component { render() { return &lt;div&gt;{this.props.person.name}&lt;/div&gt; is now function Person({ id }) { const person = useSelector(state =&gt; state.persons[id]) return &lt;div&gt;{person.name}&lt;/div&gt;
Or even better, let's avoid centralizing the registry anywhere at all: https://github.com/entropic-dev/entropic (full explanation: https://www.youtube.com/watch?v=MO8hZlgK5zc)
It's better to have few huge performance bottlenecks you can address with few tickets of work, rather than have it spread all over the project resulting in death by the thousand cuts. When the only remaining option being refactor pretty much everything bit by bit. Premature optimization isn't good. But neither writing your programs being blissfully ignorant of performance budget.
wat React the redux source and find me any redux specific optimization.
&gt; I just didn't track with the scare tactic of O(n2) because I don't see that leap justified in the article. Indeed it was a bit hand-wavey with basically "we can just assume..." I mean, it wasn't meant as a scare tactic and it's definitely not hand-wavey unless you consider big O notation hand-wavey. Big O by definition is an upper bound of the growth rate; it's an approximation and I think I was pretty forthright about that. It's still a very useful approximation as you can see in the run time benchmarks that the big O predicted growth rate is accurately modeled in the results. That's the point I was hoping to demonstrate: that the ability to quantify and classify your code will help you write better code _before_ you're at the point of running benchmarks to figure out why your code is slow. &gt; Even if n grows to a million or a billion records, m might only grow (in practice) from 5 to 10 to 25. that's not at all the same kind of growth. I think in practice m will tend to grow much closer to a constant than linear or more. That's true but only if the data you were reducing over had collisions from duplicate keys in your result set. I've never seen this pattern used in the manner you describe. I've seen a map used for counting, is that the kind of usage you're thinking of? For examples of the pattern I'm talking about, [look at this example (#3)](https://devinduct.com/blogpost/26/8-useful-javascript-tricks) that was posted to this subreddit a few days ago. That's the kind of usage I see. So you're correct that the performance characteristics are different for non-unique keys, but I don't think it's relevant here because that's a different pattern. It's probably is useful to mention that constraint in my blog post though rather than have the reader assume it, I'll update it to mention it. Thanks.
This is what I really want to read 🤩
IIFEs , closures, guard and default operators semantics, partial application.
Array functions... once you get it and it clicks, you wonder why how didn’t know them earlier.
I've had some fun playing with some boolean algebra functions in JS which I think is what you're talking about, correct me if i'm wrong. I'm actually planning a lesson with them to teach a kid who's been learning python. here's some quickly hashed examples. Booleans are not strictly necessary in all places but I thought it might help illustrate and I like a style that wraps the context around the logic explicitly. I made `and` and `or` variadic for typing convenience, although if you're really trying to simulate hardware limit them to two args. &amp;#x200B; `const and = (...xs) =&gt; Boolean(xs.reduce((y,z) =&gt; y &amp;&amp; z, true));` `const or = (...xs) =&gt; Boolean(xs.reduce((y,z) =&gt; y || z, false));` `const not = (x) =&gt; Boolean(!x);` `const nand = (x, y) =&gt; Boolean(or(and(or(x,y), not(and(x,y))), and(not(x), not(y))));` `const xor = (x,y) =&gt; Boolean( and(or(x,y), not(and(x,y))) )` &amp;#x200B; pasting these into a terminal and stuffing em' with 1s and 0s should give you the ability to create one or many of [these adders](https://www.mikedoesweb.com/2013/full-adders-32-bit-adders-in-javascript/) and you'll be right on your merry way to faking a computer in javascript. &amp;#x200B; It will be slow.
\&gt; or would it be beneficial to eliminate that extra code from the DOM entirely by adding a bit of Javascript to first determine whether the page is being accessed via a mobile device? I imagine the answer likely comes down to the amount of code that I'd avoid Are you sure this will save code overall? Also be careful of using JS for layout, you could be in a position where the code loading/parsing delays the initial display making your site/app look slower even if it isn't really. \&gt; is the idea of an individual resizing their browser to the extent that the "mobile view" would be best reason enough to rely on media queries rather than checking for device type? It certainly happens. Also you may need to consider users with restricted views for other reasons: desktops set to low resolutions or high DPI, or windows sized small and magnified by other software, for accessibility reasons. Furthermore, detecting browser type is fraught with issues - so using media queries is probably safer unless you need to support really ancient browsers that don't support them.
I wish someone told me this - Be better in Javascript and DOM manipulation before even touching react.
I wish somebody told me "Read You Don't Know JS!" before grasping for React
The redux source !== the react-redux source. The react-redux source has _plenty_ of optimization.
Hi /u/ghost20000, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks a lot, man. I sincerely appreciate that. Code would certainly be reduced—there's a lot going on in that "full-sized" sidebar container—but given the potential pitfalls you cited, it sounds like any potential performance gain is going to be comparatively negligible.
Hi /u/AJ_Software_Engineer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bleedsblue2190, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/netpumber, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FormalBumblebee, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
There are thousands (if not millions) of cool libraries out there. Pick a project and stick to it until it's done, because there's always a new shiny thing in the React world.
Hi. I added a description-text here [https://github.com/pubkey/rxdb/commit/e7ebf8c436ceddd357ca4b0cc210dcb50bbc865c](https://github.com/pubkey/rxdb/commit/e7ebf8c436ceddd357ca4b0cc210dcb50bbc865c) It would be cool if you can review it and tell me if it provides enough and understandable information.
Funny how he tries to be so helpful but actually he is a thief and scam artist, robbing people of their hard earned money online. Everyone needs to know that Daniel Bosc (DanielB2B) advertises craigslist posting services and tells people he only accepts Bitcoin as payment and then takes their money and disappears!
I wish I was told how important are props in React. React should be taught as a way of writing a pure function that takes some arguments and uses those to render a UI, and does so efficiently and **idempotently**. Props are the most important thing, but a lot of tutorials or teachers seem to get to class-based components, local state, styling solutions or other topics waay too quickly. A lot of beginners don't realize that you can write an entire app with functional components and .css files, because they learned to rush to Redux and styled-components for whatever reason. No hooks, no class-based components, you just give some props that can change over time to the root component and React reacts accordingly.
You can use RxDB and PouchDB completely as client-side database without ever connecting to a database-server.
[https://spotitude.me/](https://spotitude.me/) &amp;#x200B; I made an app to get your top tracks from Spotify and create playlists which you can share with others. There are some other sites out there that exist which do something similar, but I had some qualms about them for several reasons: * The user is just presented with raw text on their listening habits. No visualizations * The source code isn't available. I don't know what the app *could* be doing without my consent * I can't create a playlist which I can share with others &amp;#x200B; This is my first JavaScript project as I do Python development for a living. Open to some criticisms or suggestions :)
Have you read [Four Futures](https://www.versobooks.com/books/1847-four-futures)? It’s a quick read, I think you’d dig it.
I think the current way of using redux, with `mapStateToProps` and `mapDispatchToProps` is fine. Right now I'm not planning on changing how I write connected components. But the reasons you might want to use the new hooks are: The syntax is a bit more succinct. You can group related redux functionality into its own custom hook, and share that functionality between components. Let's say you have a few components that reference the same 2-3 variables in state, and also dispatches the same 1-2 actions. You could create a custom hook that looks something like this: ``` useSearchQuery = () =&gt; { const dispatch = useDispatch() const query = useSelector(state =&gt; state.query) const updateQuery = query =&gt; dispatch({ type: 'UPDATE_QUERY', payload: query }) const updateSearch = search =&gt; dispatch({ type: 'NEW_SEARCH', payload: search }) return { query, updateQuery, updateSearch } } ``` and share it across components. (I pulled that from a blog post about comparing the two, you can check it out here if you want: [Redux hooks: before &amp; after](https://glennstovall.com/react-hooks-before-and-after/)).
¯\\\_(ツ)_/¯
We had extensive discussions to debate a variety of options. In the end, we concluded that we would have required considerable workarounds and vastly more complicated APIs in order to avoid those issues, and that it's a rare enough set of edge cases that it was worth keeping the APIs simple. However, we did want to document the _potential_ issues so that people are aware of them. If you've got better suggestions, I'm always open to ideas.
No native english speaker here. It would be my first attempt at reading a full english book. Might need a french translation, as I probably lack in technical vocabulary for such a piece of work.
I guess that makes sense, I just worry that once teams go to build larger apps with this new library they are going to have to debug these very tricky transient rendering issues mentioned in the docs and it's going to end up being much more difficult than `connect()`. They'll buy in thinking there's less code, then find out the hard way under deadlines that they're writing more code, of greater complexity that is harder to debug. &amp;#x200B; What should you do? I don't know. This is all way over my head. It seems like React is moving towards more asynchronous batch rendering and it's at odds with Redux. I hope someone figures it out though because Redux is very awesome as it stands now.
I think there are a couple advantages of functional style: 1. Avoids issues with mutating things/side effects 2. Declarative style Loops don't necessarily cause any side effects (outside the loop), but they tend to be imperative, not declarative (i.e., you're not typing out what you want to accomplish, your typing out how to accomplish it). That said, reduce functions often end up being imperative code with a declarative wrapper, so the benefit is sometimes dubious.
Question about a related pattern: Can you recommend a way to flatten an array of arrays (e.g., `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]`) to a single array in a readable and O(n) manner? Before reading this article, I would just have done `[[1, 2, 3], [4, 5, 6], [7, 8, 9]].reduce((all, x) =&gt; [...all, ...x], [])`, but now I'm questioning whether this suffers the same complexity issue as with objects. Perhaps `[[1, 2, 3], [4, 5, 6], [7, 8, 9]].reduce((all, x) =&gt; all.concat(...x), [])` would be preferable, but I'm not sure exactly how `concat` works behind the scenes.
Joke's on you. I can start learning it today so that my knowledge can be out of date in a couple months! Just feel bad for everyone who wrote a react book.
Sigh... I actually know people who code like that :roll_eyes: It adds nothing to let result = items.reduce((acc, item) =&gt; { acc[item.name] = item.value; return acc; }, {}); and if items is very long it's a memory hog
That's probably a bit unfortunate as paywalled publications use this to avoid spilling their content to people outside the wall. It's not used for malicious purposes. If I have to put my conspiracy hat on, the inability of online news media to make paywalls work would make them focus on ads for revenue. Guess who has the biggest ad network in the world! Google.
Here we talk about code. I couldn't see any links to the source code, therefore there is nothing we can talk about. Hence it is a waste of time.
How it was detectable before?
Great job!
 [https://github.com/bcolby45/socketBBS](https://github.com/bcolby45/socketBBS)
What problems does this starter pack solve?
Thanks
Starting?
It isn't used for malicious purposes [that we know of / yet].
IIRC it had to do with local storage access or something like that.
Sure, but I think the likelihood is low. A detection script can only do this: detect incognito mode. It can't bypass it, it can't store state regardless. So normally detection is used to show some message to the user. Think of when browsing a site you've seen this message "don't browse in incognito mode"? I've only seen it on paywalls myself.
The biggest problem with the Gamepad API is that every controller/browser/os combination maps the buttons differently. For example, the same game pad will put the "X" button on index 4 on Chrome/Windows, but be index 9 on Chrome/Mac, and index 5 on Firefox/Windows. It doesn't look like your library solves that problem at all. [I tried to tackle the mappings problem here.](https://github.com/ericlathrop/html5-gamepad/tree/master/mappings), but I eventually stopped making HTML5 games and switched to Unity.
The private paywall blockers are also annoying when there are legitimate use-cases for browsing articles in private mode. Google does a lot of anti-consumer, anti-competitive things, but preventing private browsing detection isn’t one of them.
Classic Chrome: Uses 4GB RAM to render 2 static webpages... Causes problems when you actually need to use RAM.
Here’s a collection of scripts that detect it: https://gist.github.com/kdzwinel/783df9b129ae5c8443dd96c0d4ed9723
I'm not sure I see the relevance of these tips to GitHub stars. A lot of developers use these tips without the same community response. I don't think there's much of a correlation here.
That might be the case for youtube tutorial series, but the paid ones on udemy are really nice.
There may be some escape we're not aware of for it. I'm not trying to say that there is. There may not be.
But it wouldn't scale to as complex an application as redux.
I did watch a course on Udemy after I already knew some React back in 2015 and, as far as I remember, it didn't take this topic seriously, but obviously I can't generalize and there must be some material that does cover it. I'm just suggesting OP to tackle this topic, since many don't.
It *could*. The reason you'd still take redux is the redux ecosystem which helps in all sorts of ways. But you *could* make a very complex system with `useReducer` if you wanted.
Alright, but restri
I can't think of a single paywalled publication with a reputation that isn't completely trash. Hard to feel bad for these people.
Where’s your conspiracy hat?
&gt; That's probably a bit unfortunate as paywalled publications use this to avoid spilling their content to people outside the wall. What? How? Being authenticated (logged in) prevents the paid material from getting out, not being incognito (or not).
Most publications have two allowances to attract readers: - They permit search engines to index the content (obviously). - They have a "trial" where you can read, say, 5 articles per month free. For those, particularly the latter, you need cookies and other identification mechanisms (IP is not enough). If they have an always on paywall basically there's no hook. They can make you register first, then read, but let's face it: would you bother registering to only be told after 5 clicks to *pay up*?
If you want to do a big project with vanilla then you've got to be prepared for it
Honestly you’re right. The reason it actually went viral was for other reasons :)
We're mixing different issues here.
I fully agree
Hi /u/ivanhoe90, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Oh so you're saying that if people use incognito, since these pay sites can't determine how many times you've viewed an article, they will just disable the free articles entirely? I'm struggling to care, to be honest. &gt; but let's face it: would you bother registering to only be told after 5 clicks to pay up? Brutal truth? I'm not going to register *or* pay for any of those sites, no matter what. All of those no-registration-required "X views per day" things are already trivially easy to bypass. Incognito mode isn't making it any easier, it's just doing exactly what it's intended to do -- make it more difficult to identify end users, enhancing privacy. Like it or not, knowing if I've viewed your site 3 times or none this month is information that can help identify me.
It really shouldn't be considered a bad thing to make private browsing undetectable. The fact it was detectable in the first place wasn't intentional. Further, all of the browsers have played this cat and mouse game with private browsing detection. There's been several methods to detect it in different browsers and they're all eventually patched. No need for conspiracy theories when this is business as usual.
Used it to cover my pizza pan....
Are you on Bill Clinton's secret plane as well?
This is actually very similar to how you would construct `Map` from array. new Map(items.map((item) =&gt; [item.key, item.value])) Imperative and mutable approaches are generally faster and use less resources, cause that's what computer has been historically been optimized for.
Delete cookies and refresh? That should do essentially what incognito does, right?
In this case, they're simply checking if a script can access the file system API.
They're doing this, while also removing important plugin API features that enable effective ad-blocking. So you tell me, if they're doing this due to concerns of privacy, how do you explain the discrepancy. If they're doing both for business model reasons, there's no discrepancy. I'm just saying.
Netflix detects incognito mode and stops video playback: [https://i.imgur.com/bgeHuVE.png](https://i.imgur.com/bgeHuVE.png) but y
&gt; they will just disable the free articles entirely? I'm struggling to care, to be honest. No, more likely they'll just offer infinite free articles, as I think on the bottom line this will lose them less subscribers (many people don't understand / know about incognito mode).
Why is it ok for other browsers to have undetectable private browsing but not chrome?
Well, cookies, and local storage, and whatever they come up with next week. For those of us who dabble or live by web design, of course they can't stop us. But this is about the "common man" so to speak.
So the reason console.log is bad is because it a synchronous call. Therefore it blocks the event queue which means nothing else can run while console.log is doing its stuff. In reality, 1 or 2 of them its negligible but a ton of them, say for example in a for loop, will definitly slow down your app. If you don't know what the event queue/loop is, I highly highly recomend you watch this 30min video. https://youtu.be/8aGhZQkoFbQ
I never said it's "not OK". I'm just observing their behavior and trying to find parameters that consistently describe it.
&gt; No, more likely they'll just offer infinite free articles in incognito mode How? They can no longer detect incognito mode.
No, you didn't explicitly say it's not ok. You just jumped through hoops to turn a good change into a conspiracy theory.
Good. I hate when sites block you from seeing their content because you're in incognito mode.
The Telegraph (UK) is OK.
Valid point.
Would you mind listing those legitimate use cases?
This de facto expectation of free content is toxic for news media
The Athletic is quality
Awesome. Now Washington Post can fuck off with their private mode detection
I have modules that just have pure functions or POJOs, and using Redux, like a ton of React projects do, reducers aren’t even dependent on Redux. How does everything have to be a component?
"We noticed you’re browsing in private mode." Fuck you, Washington Post.
Exactly. They'll probably still use cookies, but previously they could detect incognito and force you not to use it (the screenshot in the tweet right), but now they'll just have to allow it since there's no way to detect it. In theory, since they can't rely on IP, you might be able to just clear the cookies in your browser / other site data in a regular session to re-access the articles on the site right, since the main advantage of incognito is that cookies and other site data only stick around for that session of incognito (as long as you keep at least one incognito window open)
They probably made use of the file system API.
Exactly localstorage and sessionstorage are undefined in private browsing.
JS uses 64 bit floats, so the C version should use the `double` type instead of float.
Basically, searching for anything you don't want following you around the web. Health information is a good example of that -- googling for symptoms, checking webmd, etc...
Yeah. And in this example, the C version could be a long because it deals in whole numbers. But the simulation I was working on would not always be whole numbers.
You're absolutely right. I don't know why so many people can't see the connections you're making here. It's really a logical jump and not much of a conspiracy, just an observation of exactly what's going on and the logical conclusion. They're also pushing hard for [web packaging](https://docs.google.com/document/d/1ha00dSGKmjoEh2mRiG8FIA5sJ1KihTuZe-AXX1r8P-8/preview#) which fundamentally changes the way http requests are filled so that they can control distribution and the data that publishers can collect from their articles.
Are you some kind of troll? JS uses 64 bit floats (aka doubles) for numbers. To fix this, change `float` to `double`. As for speed: Literally just turn on your compiler's optimizer, clang will produce optimal code (i.e. just setting a to the end of the loop value and not loop at all) at any optimization level above -O0 for that example
I'd change FixValue to take two arguments, the object and a string denoting desired field. Then if the object exists, check for the field and do whatever (return the value or "None" as appropriate), otherwise return "None". If that isn't a viable solution, I'd assign a temporary variable (eg. tempVar) based on a ternary condition, so something like var tempVar = (consumerData.jarTransactions[0]) ? consumerData.jarTransactions[0].dateTime : ''; And then use tempVar as the argument for FixValue.
Write up the HTML you will need for one table, fill the cells with the data that would come through from your server from one object to mock it up....then loop through in js and create the elements as needed. &amp;#x200B; What does your data structure look like for one "list with a list"?
&gt; Are you some kind of troll? No. I was pretty clear that I didn't know C at all. So ignorant and biased. And I had no idea it couldn't use floats to count to 20 billion. I've used Java a bit. I would assume it handles the situation the same way, according to float specs.
A brainfuck compiler. Was surprisingly simple.
I have that first part working, but I am using id's to populate the table. I saw one method with append statements I am checking now, but will get back on how it works. Its a fairly similar example. &amp;#x200B; For the lists in a list its, I made a mistake. Its dictionaries in a list just like: \[{list1}, {list2}, {list3}\]
I don't think that is accurate? Don't know about session storage but in my experience localstorage always worked in incognito mode. It is just not persisted (which is the point of incognito), otherwise it works fine.
This is sweet 👌
The biggest issue is that the javascript stops executing on TypeError. Though, your suggestion gave me a great idea. I am putting my FixValue in the wrong spot too. I should be putting it where I assign the javascript values to html elements, that way if they are undefined I can fix the value there.
First I'd use Array#flat if possible (like in nodejs), then I'd use _.flatten, the last thing I'd do is write my own. But if I were to do my own it probably wouldn't be pretty, just like _.flatten: https://github.com/lodash/lodash/blob/4.17.11/lodash.js#L2939 When visualizing the complexity of implementing flatten imagine it as a tree. If your tree is unsorted you at the _very least_ have to visit each node, but if you were to visit each node in orer and place it in a new array it would be flattened, right? Therefore that's what we do, either iteratively or recrusively visit each node and put it in a new array. Using ...spread or .concat is essentially re-visting nodes, which means it's not-optimal. I know the optimal flatten isn't pretty either, but it's a utility function. If you're not using a library you write it once, and then treat it as a black box after (assuming you wrote it correctly, hopefully with tests); so it doesn't need to pretty.
Does a similar bug exist when using a double at higher numbers?
I might have actually fixed the class issue. If anyone has more suggestions I am extremely curious. In the meantime, I will vet this and get back.
Am I missing a response of his? All he did was ask you to further explain your comment. What argument did he present?
Yay!
Well, I guess I learned something else, that `flat` exists 😂 And it can easily be used in the browser if you are able to add polyfills, like core-js. Thanks again.
It's interesting code but not very useful as it is because now that I get it and can read through the code i realised is just a map with a bunch of setTimeOuts to delete its own content. This has a few problems: 1. You're hoarding RAM. 2. Each setTimeOut affects performance. 3. There's no guarantee any of it would stay in RAM and not moved to swap file. I suggest the following experimentation: 1. Enforce non-swap usage, otherwise it'll be just as slow as saving values in a file. 2. Try more effective ways than launching a bunch of setTimeOuts one for each value. A bit of async/await here could do wonders. You could have your own expiration checking called from inside the constructor of CacheThat that every x seconds remove expired values, that would be just one instead of so many setTimeOuts. &amp;#x200B; Some random thoughts, cache as a class containing a map of key/value pairs as it is but on the value, an object made of two like { value: thevalue, expirytime: some Date() } Now the loop inside the CacheThat object would just do a simple: deleteExpired() { this.storage = this.storage.filter(valuePair =&gt; valuepair.expiryTime &lt; right now) } the CacheTHat object can also had another value "checkTime" that defines ins econds the frequency the loop running deleteExpired() runs.
Blows my mind how far people can bend over backwards to twist fixing a bug rendering incognito mode useless as a bad thing. It's almost impressive.
&gt; So C can't Don't blame your tools when pebcak lol
Crazy how someone can only focus on only one aspect and can't see the whole picture.
Crazy how someone can ignore the obvious logical conclusion to force something to fit into their preconceived notions.
Firefox and Edge don't even have the API so I doubt they need it.
Then accept lower standards for information/news. To the extent that the only news you read are ideas that have been paid to peddle to you. Paid journalism is the only way to ensure that the journalists who write content actually get paid to report for YOU.
Toxic for democracy in general. No paid journalism means only garbage information gets read
This how I learned it. There was a "react for people who know just enough jQuery to get by" article that existed forever ago that I seem to remember covering it in this way.
Perhaps a browser plug in with a big “clear all cookies and history and reload” button would be a better solution, run two browsers too
HAHA! Wow, this really made my day amigo!
Damn, I think I'm using sessionstorage in production without knowing this, are you sure it doesn't work in private?
I blame my naivety.
I implemented my own algorithm that allows me to paint over pictures and turn them into oil paintings, then extrapolate them to ridiculous sizes (up to about 250 megapixels) and then export paint height data to print them on a physical canvas in 3D. JavaScript is fun. :-)
Good advice. Shit title.
I believe it was in safari that scripts could only access session storage when in private mode.
That would be the logical case.
Public tv and radio have had free news basically since their invention. The expectation of free news is far older than the Internet.
IndexedDB does not work, though.
Preach!
Literally i just wanted to know, because i didnt know. Tried to phrase it respectfully too
I didn't present an argument
Yes, because they're public
Or just use vadalia
I updated the section on calculating complexity with the following to hopefully clarify things &gt; Note: The above assumes no duplicate keys are generated in your target object. For most example cases I've seen of mapping an array of objects to object key-&gt;values that holds true and I think is a fair assumption. However, there are situations (such as a solution meant specifically for counting duplicates [think word count]) where that's obviously not true. The solutions in those situations would still be classified as 𝑂(𝑛2) (as big O notation is an approximation of the upper bound) but actual run times would probably be best reflected by also considering best-case (all duplicates) and average-case complexity as well.
This looks super handy! I’ve been looking for a good excuse to play with vue and I love firebase.
I also like languages I know more than languages I do not know.
Saying it as it is. Thanks for the feedback. Will likely change it
Hi /u/ducatnoida786, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
How about '\u00a5'?
None of that forgives your inconsistencies and your own self-righteousness. But you don't seem to grasp that.
He ridicules people for not using semicolons, claiming they are not optional. He deserves a dose of reality.
- node-image-farmer - smart cropping and image caching server - norman - NodeJS Personal Assistant (still in development) - react-digraph - Uber's directional graphing library - nMotion/motion - a NodeJS security camera app - PM.js - a Postmessage library for easy setup of postmessage requests and responses. - SquirrelsGoneWild - replaces /r/squirrels thumbs with bikini models from Flickr - NSFSquirrels - replaces NSFW thumbnails on reddit with pictures of squirrels. - RUDE - Reddit Uppers and Downers Enhanced. The original upvote/downvote tool for reddit. I sped it up and reinvigorated its life, only to meet its death by reddit admins.
 I hope you use Firefox incognito mode and not Chrome with google sign-in
A synth library called [wavedef](https://wavedef.com/)
Wow
It worked, thanks!
Ok. Cool.
For future reference, a list of all HTML character entities; http://amp-what.com
I don't need help with my Javascript for this. I posted this in order to start a discussion about hypothetical code.
Thanks
const values
Unless it's about overall concepts or an old technology that doesn't change, I don't see the great need for tech books these days.
I have made a flashcard web application. All data being stored in the localStorage. To do so, I built my own library to write HTML as objects in JavaScript.
Let's be fair, firefox is natively in private mode, yet you surprisingly hit very few times the nag.
Looks great, thank you!
Hi /u/SoftwareBrothers, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This thread, however, is a good example of how ever change that Google makes, will make _somebody_ cry out in rage, knuckles white fists raised to the sky, "Google, don't be evil!!!"
Washington Post, New York times, you might disagree with their point of view, but they are not at all trash.
The reason that repo got so many stars was because the guy behind it posted on hackernews/reddit etc that he did it for a client who didn’t pay him and so he opensourced it, and many developers agreed with what he did. Although the code is good, it has little to do with that. Your article is misleading and it seems you are a business just exploiting the free marketing....and the original author it seems.
Oyyy
Way back at the start of my learning-to-love JavaScript phase I did what many do and try to write code as similar to languages I was already familiar with. In this case, C#. I rewrote large parts of the .Net framework in JavaScript, but the thing I liked the most was my reimplementation of WPF which turned XAML into web components, complete with events, dependency properties, layout engine, the works. I was incredibly proud of that, and I'm still surprised I pulled it off. Though I'd never actually use it.
Ip is just one way of tracking views, but is definitely one of the hardest to spoof for regular internet users. Clearing all of the site specific storage systems is goofy easy, even for web layman. Do any of these sites even block incognito? I just tried a few I already knew about and they seem to be using ip and cookie based tracking, incognito is fair game.
"generally faster and use less resources" - source? Because I really would like to see memory usage when you do `Object.assign({..1...}, {..2...}, ..., {..1000000...})`
I'm talking about applications of 300K+ lines of code here with heaps of complex business functionality. You'd be mad to build all of that on useReducer imo.
 [https://github.com/reduxjs/react-redux/blob/master/src/components/connectAdvanced.js#L49](https://github.com/reduxjs/react-redux/blob/master/src/components/connectAdvanced.js#L49) In case anyone is curious.
First of all, I insist that semicolons can't be omitted *in all cases*. Remember that this all started because you claimed they were optional in general, which is not the case. The spec explicitly states this. This is why you follow me around with your puppet accounts. This is what you're so angry about. Secondly, I always try to be as consistent as possible. I put semicolons were they are supposed to go. `'foo'.toUpperCase()` is an expression. Kinda like `3 + 5` or `new Foo()`is an expression. Semicolons aren't part of their syntax. Check the spec. But I'll terminate them with a semicolon if that expression is the entire statement. E.g. `'use strict';` or `x *= -1;`. Kinda like a single word can also be an entire sentence. I'll put a period at the end if that's the case, but I won't put a period after each word.
Will the connect API be phased out at some point in the future?
Great tip, I will definitely use that in the future!
Absolutely not! Just like React still has class components and will keep them indefinitely, we'll keep `connect` in place indefinitely. We're not going to suddenly break everyone's code :)
The detection scripts use per browser strategies. In private mode Safari doesn't provide LocalStorage, and Firefox doesn't have IndexedDB.
Thanks god!
What a brilliant idea
Bounce! garethfield.com/bounce spawns a random number of bouncy balls in the browser that bounce around the window! I wrote it a while back, and it’s not really great, and I haven’t gotten that much better, but I love it anyway! I can just open it in anything and a stupid grin lights up my face: I made this!
Hah, 40$ wouldn’t cover a half hour anyone’s time
I find Medium pretty good.
&gt;You're hoarding RAM. Yes, that is bad but it is what this project intends - cache small files or data , expire then when you don't need it. &amp;#x200B; I know there is lots of packages do the same thing, but I hardly can understand their source code. Most importantly sometimes I only want to demonstration some critical API section , the redis or other session stores would be overkill. &amp;#x200B; What I thought is making a Map object to collect data, remove the data when I don't need it , the black-box of GC work to release them on the RAM. &amp;#x200B; Simple and achievable. &amp;#x200B; &gt;Each setTimeOut affects performance. I was struggled a while between this approach or \`every x seconds checks\` method, the first version \`clear()\` function is design with clean out legacy \`setTimeout\` timer. &amp;#x200B; My first thoughts \`setTimeout\` and clear not triggered timer later would make better performance, but you remind me something about \`serTimeout\` delays. &amp;#x200B; So I search with \`setTimeout performance\` , one of the article claims when create timer will cause about average 4ms delays. &amp;#x200B; In other words , 1000 object with expire date will case average 1 second delay. Performance is not that ideal when save object quantities scale large. &amp;#x200B; The example that you provides is very useful , I will change the data expire mechanism &amp;#x200B; &gt;There's no guarantee any of it would stay in RAM and not moved to swap file. Yes, you are right. &amp;#x200B; This optimize is critical but I'm not experienced with these low level API. &amp;#x200B; Hope someday I could solve this issue with more elegance codes.
I wrote my own [static site generator](https://github.com/astronomersiva/lego/) to power my site.
I do it simply. You block me? I leave you. Bye.
[removed]
Music visualizer with three js B-)
:/ didn’t think it would be a lengthy request for someone’s that’s experienced with React
*Asks for useful criticism* *The password fields are not of type "password"* idontwanttoliveinthisplanetanymore.png
Yes, that's true. Since the Gamepad API is in very early stages, cross-browser support for button mappings and events is not that great. I'll probably have to look into what can be done for better button mappings support in the library.
Log In errors are stacking. Password field is not type="password" Why would i Sign out if I didn't even sign in? You have undefined props. \#HeaderHeaderHeader - what are these?
Bad mod.
Don't know the winner between Progressive Web Apps and Native Apps, but yes PWA is the future of Mobile Web for sure.
&gt; Washington Post, New York times Surely you could find better examples. Fascist warmongers are objectively trash.
Wow. Can I see this?
aha thanks man, forgot to mention to ignore the rubbish UI - just experimenting with Vue functionality
Hi /u/2210nj, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yep a socket-io middleware for redux make things very flexible. And it's very very simple : [https://github.com/czytelny/redux-socket.io-middleware](https://github.com/czytelny/redux-socket.io-middleware)
lol
Lmao
I actually don't think you need a tutorial, I would just try to recreate the functionality in terminal piecewise! &amp;#x200B; Start simple and keep adding functionality, electron has pretty solid file navigation tools, so that should help out a lot with file manipulation and listing what is in a directory. If I were you, I would start with creating a simple electron app that let's you type and hit \`enter\` to receive the "command line arguments", from there you can start trying to parse out key words and writing the logic out for them. &amp;#x200B; Just jump into it!
Cool thank you for the feedback! I guess I just wanted a tutorial to kind of learn the functionality about how terminals work deep down. But hey I guess Ill learn more if I do the research myself haha.
Check the source of hyper, I'm sure you'll find it useful :D
I know, right! Seriously though. Doesn't really have much to do with language, as much as the type system. C, C++, C#, Java and many others must have the same problem. They say that JavaScript can be a little unpredictable. In this case, though, it adds numbers without getting stuck. Which I like.
Oh, I apologize! I think I misunderstood what you were asking! You should google something like... **How do Terminal Emulators work?** &amp;#x200B; That should get you a bit more clarification!
Those languages have different use cases, I wouldn’t call this a “problem”. Yeah, it might be slightly more inconvenient to have to pick out the correct type in a strongly typed language (or even having to define entire data structures before using them), but those rules help code quality, stability, predictability, and performance.
Man, I just don't think they are ready for prime time yet. The native web APIs that enable them are too much in flux. It's frustrating since PWAs are going to be legit amazing once the APIs are finalized, but until then it just seems like a waiting game to me.
If it's not a problem, would you call it a feature? float a = 0; while (true) { a++; if (a &gt; 16777216) break; // Will never break... a stops at 16777216 } That fact that it doesn't break means there's a bug in the program. Not necessarily a fatal flaw of the language, mind you. But there's a problem with this code, a problem that doesn't exist in the JavaScript version. Most 8 year olds know you can always add 1 to a number and the result will be a number 1 higher than the last number. With 32-bit floats, that isn't true at 16,777,216. Do 64 bit floats have that issue with a higher number? FWIW, I am much older than 8 years old, but not much smarter.
How are they facist? I thought WP was considered fairly liberal. [I am a Brit and don't know much about the WP]
\- you change the input type from email to text and still register \- on login you can send the credentials, the frontend will tell you "Login Error" even when the request is sent and the response is 200. Check the Validation first, only if its valid send the request \- Unused Properties \- in contactList.vue in the created lifecycle event: "(document.title = "My Contacts"), this.fetchContacts();" Write it in two lines so it is more readable, unnecessary complicate. \- See other comments for more
But the thing is.. you’re explicitly using “float”, so you, the programmer, should know the maximum value of a float, and even if you didn’t, you can’t complain that you can’t bypass the maximum value of the data type YOU picked. Know what I mean? So yeah, the fact that it adheres to the constraints of the data type that you explicitly set is a feature. It’s a strongly typed language, you wouldn’t want it to start changing the data types of your variables without you knowing, would you? I mean, what if you were writing GPU shader code and you were sending values of an explicit type from the program to the shader? Oops, I sent a double and it expected a float, the program just crashed.
My brain moved the " to after the , - totally cracked me up imagining that as their message to users.
They're not 'generally fascist' in the way that some others are, but when it comes to nationalistic cheerleading for war and security theatre, they have swastika knuckledusters beneath their pompoms. They are considered fairly liberal, because they're often advocating for things like trans drone pilots and environmentally sustainable waterboarding. They're liberal as fuck. But *progressive* is the opposite of conservative, and that they are not.
Hi there! This article talks about writing a code analyser with [r/typescript](https://www.reddit.com/r/typescript/), analysing JavaScript code. In fact, you can ditch the definitions file and everything in the article works with JavaScript as wel. I'm trying out writing long-reads that explain certain subjects in-depth and I'd really like to know what you think and what _other subjects_ you would like elaboration on.
I do the same thing with AdBlock. You show me purposely annoying ads? Boom. Blocked.
A MMOTCG Engine
Hi /u/code_burd, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Most developer unfriendly api I have encountered so far. It takes a huge effort to get everything you need. Some apis are not publicity available if you don’t already have a token for it etc. I gave up on it. Terrible experience.
into it, npm should have gone non profit.
They're very broad concepts/patterns. More the sort of thing that fits into a web article, but not really the kind of thing someone could write a whole book about.
«Should have included a non-compete clause in the contract, damnit»
His essay on the matter: https://github.com/ceejbot/economics-of-package-management/blob/master/essay.md
&gt;developers are encouraged to use something like the GitHub Package Registry if they need to control access to packages. Uh, how is Github *not* centralized?
It is, it's just that entropic's goal is to be open, so if you don't want that - use a centralized repo. I am sure at some point you would be are to put entropic behind a firewall tho
Cause git is distributed, everybody has a full copy so github could stop working today, everybody just updates their origin to some other host and work continuous as normal
*Probably* not a He. But yes, their essay is an interesting read.
Happy to know that I am not alone then! It's seems like a lot of trouble for such a small thing so far. Thanks for the reply!
Oh my bad, fixed.
Hi /u/dennismphil, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
GitHub is centralized but Git isn't
&gt;should A little nitpick, it would be nice if npm went non-profit, npm could have gone non-profit, but I don't think they have / had an obligation to. I count my lucky stars for living in a century where I can work for profit with free will, it is a privilege that we all enjoy. I can choose to profit from some things, and I can choose to give other things away, the point is the "choice" I think. npm is useful, and they have chosen to make money off of it. While that makes me sad (because I like free and useful things) I don't think they had an obligation to do anything.
Key words ‘something like’
Sorry for the troll thing, it was uncalled for
Yes, but im pretty sure it also happens in JS JS has a constant that represents the maximum safe integer, that's where it happens
It is a bad year for the open source community. i recently went to one of the biggest conferences in europe, 80% of the talks were about how the main solution for each company became the enterprise model and the community edition became less prioritized and less supported. Also the big infrastructure providers(google, amazon, me) started cannibalizing open source services such as elastic and forced a eula change.
The obligation is to not get swept away when a better product comes. They're at risk of suffering that fate, when a nonprofit does the exact same thing they do but better
git is decentralized. GitHub (including their package manager) is not
It's the same idea as copyleft. If you want to take advantage of the enormous benefits of building your product on an open software stack, you contribute back by making your product part of that open ecosystem. If you don't want to contribute back, you don't get the benefits.
But that is their problem? They can choose to go for profit but that choice of course has the risk of ruin. If a non-profit alternative can take their place, that is great. I think it is disastrous for the JS community to have their de facto repository to be owned by a private company. So I'm all for alternatives. My point above was that npm inc does not owe anything to anyone. You're probably a developer, suppose you built something very useful. It also costs you money to serve and maintain. Would it sit well with you if people demanded that you shouldn't be able to profit from it? If they demanded you run on donations only? It doesn't sit well with me. That is /r/ChoosingBeggars behaviour. You can choose to do either, but the point is that it is your choice. npm did choose to go private, that is their choice and their choice is ok. It is not good for JS community. Actually it is terrible. Their freedom of choice and their particular choice being terrible for us are different discussion points. I like that they are free to choose what they want and I hate that they made this particular choice back then. Both ideas are compatible.
From the linked essay we get to the actual problem: &gt; The list of shared Javascript packages we all made to share with each other is under private control. I don't get what's so special about NPM that the only solution to this "problem" is to make package management harder. Does Pypi, Maven, RubyGem, CPAN, Composer, Nuget (though this one is Microsoft managed), and whatever else is out there, have these same problems? If not, why not?
Hey /r/javascript, I'm happy to share a project that I've been working for the past couple of months: a terminal based Javascript REPL - Jay. The main distinct feature of this REPL is the smart `require` function, which automatically fetches the specified npm modules (after your approval, of course) if they're not already installed locally. This means that you pretty much have all of the 1m+ npm modules available to play around with almost instantly right within your REPL! I think of it as [RunKit](https://runkit.com), but within the terminal. Some gif's and installation instructions are in the [project's readme](https://github.com/nikersify/jay), check it out! It already made my „programming life” easier in some areas - can't wait to hear what you think of the project or to see some interesting use cases :)
A revamp of a 911 call center's location tracking software.
"a little nitpick", this is an extremely weird take and time for you to tell us all how we are all so privileged to live under capitalism and that we all enjoy it, especially given the nature of the post
Underrated comment.
What is weird about it? We are all developers, we all build things. We interact with entitled people that say "the thing you made is great but it should have been free" weekly at the very least. I find it weird the same sort of entitlement coming from developers themselves. No one is entitled to anything. You are not entitled to npm serving you all those packages for free or with no profit in mind. Not acknowledging the nature of transactions between human beings and groups *is* the flaw that can give rise to something like a private entity like npm being the de-facto package manager for JS. Because no one stops to think that "well this is nice but what is in it for them?" and merrily use it and spread it. Like something that costs that much to maintain, serve and develop being free to use with no strings attached is normal and expected. It is not normal and expected. They do not owe anyone (except their funders) anything. That type of "it **should** have been non-profit" entitlement shows that people, even people who create things (like developers) have a fundamental misunderstanding about how the transaction of value between human beings work. That kind of misunderstanding leads to the unfortunate situation we are dealing with right now. &gt;especially given the nature of the post If you watched the video in full, you'll see that she goes to great lengths to not to demonize npm or their choice in any way. Because doing so doesn't make sense. What npm did is expected. What she (mostly) selflessly does is unexpected and worth a praise.
time and place... and that time and place is probably never since you are presuming quite a bit for everyone in case the point isn't clear, please understand that i don't care to discuss how ridiculous i find your understanding of society because _this isn't the place for it_ unless you want to start a political discussion about labor value when you say dipshit things like &gt; a fundamental misunderstanding about how the transaction of value between human beings work which i am sure nobody wants on a js forum
[removed]
&gt; federated / ˈfedəˌrādəd / adjective &gt; (of a country or organization) set up as a single **centralized** unit within which each state or division keeps some internal autonomy. ok &gt; Former npm CTO launches a **decentralized**, federated alternative to npm wat
&gt;because &gt; &gt;this isn't the place for it Well if saying "npm should have gone non-profit" belongs here, how does saying "they weren't obligated to and that's fine, we can build alternatives instead" not belong here? We are not going to split the atom here, it is an online discussion. Both are relevant. Again, watch the video, half of her speech is about this, how is this not relevant?
&gt;static site generator Niceone, I like it! A bit too many dependencies for my taste, but in general, really nice work dude!
Correct, point I was trying to make is that there is no reason to panic if github goes down, you repository is save
&gt;which i am sure nobody wants on a js forum Except for the announcement at the end, her linked speech about this. It is obvious you haven't watched it, then why are you still commenting? Do you think you are more relevant here?
&gt;A little nitpick, it would be nice if npm went non-profit, npm could have gone non-profit, but I don't think they have / had an obligation to. good and relevant discourse &gt; I count my lucky stars for living in a century where I can work for profit with free will, it is a privilege that we all enjoy yeah no stop there __ i'm assuming you're not the best with the whole "people" thing so i won't break it down any further if it's still not clear since it's becoming equally off topic
Pypi is under a community organisation, but relies heavily on some private businesses (rackspace, aws, fastly) for hosting.
Reddit used to show me ads for a stalking website where you could look people up. I found that infuriating.
Decentralized, because Entropic itself isn't responsible for the storage. Multiple users can choose different repositories for their project. The new Github Pckg manager was proposed, but new ones could also be used. And since in the end, your package will still be managed centrally along with other packages, is federated. This type of decentralization is the best of both worlds because you get one single point of contact (entropic) which itself redirects to your package on the platform of your choice.
&gt;yeah no stop there Well sorry if you'd rather be working in the gulag and are allergic to capitalism. You being triggered is not relevant. It is all relevant, what I said was that we enjoy having the freedom of working for profit and are not demons for having this privilege, so npm can enjoy the same too, can't demonise it for doing so either. We can just choose not to use it and develop alternatives. Sorry if it is triggering you but you are the irrelevant one here.
They might have included it as a dependency, but since they didn't version the contract's dependencies, it may have changed or been unpublished since then.
That particular point I think is more about if you want a private package since "Entropic" is public only. It's like looking for papaya's at your local grocery "We don't have those here. Try El Pino's Market in Riverside."
Your repository/code is safe, but your packages may not be. Most of the time you can build the distributed package from source, but there's nothing stopping someone from using GitHub's package manager and not using git -- thus the original centralization argument against npm still applies.
Got it. So all you're saying is that you don't understand where semicolons are required and you use them out of superstition.
That definition is bunk. I read it over and over for a couple mins trying to make sense of it. It's like something from /r/SubredditSimulator. [Here's a better one.](https://dictionary.cambridge.org/us/dictionary/english/federated) I think the google definition is saying that each unit/node is centralized, but is merely one part of a larger whole. And TBPH, i'm not sure that the word federated needed to be used at all. In your 2nd quote, it seems redundant. But I'm sure this entire thing was ***legally vetted*** . . . which could mean that it's not as decentralized as everyone imagines when they hear the word "decentralized".
I think the issue is that "open-source" is a benefit to the extent that an end user holding that source can inspect it and modify it and know that the version they inspected and modified is the one that they are running. It lets them understand and modify what is happening. That was a model that worked well for locally installed software, but when the practical use of software requires that it is run somewhere else by somebody else due to data size, processing requirements, community, etc., then it stops being relevant that you have the source because you don't know that the source you have is what's being run, you can't run your own changes to it and there may be artificial barriers to use introduced by the middlemen who do. So, it's just that as we move more and more away from local computing to the cloud and to web-based services, open-source doesn't have a great answer to what this looks like. It seems like a retreat to local software is likely impractical in many cases without lots of compromises, so the closest option they have is probably really building out P2P distributed foundations so that services that are impractical for being run on a single local machine can at least still be retained on the user side.
&gt; npm inc does not owe anything to anyone npm owes it's success to the community, both for publishing their modules into the repo, and by adopting the npm cli as a defacto standard. The node project itself embraced npm and bundled it in their release, which greatly helped elevate it to it's current status. Many oss non-profits are funded by multiple companies, and often times they receive a seat on the board for their financial support. This helps spread the risk out and provides opportunity for those who are heavily dependent to help ensure the project sticks around. This feels more robust and healthy than relying on a single small company, but both models have drawbacks.
because it's `parseInt(string, radix)` and `map()`'s callback is `callback(currentValue, index)`.
Aw yiss.
I'd like to interject here a little. I actually mostly agree with /u/pilibitti I just think that maybe the combative "triggered" or language around who is irrelevant (from both sides) isn't going to be conducive for actual conversation. /u/butnotexactly you need to appreciate that people are free to have different philosophies on business and development approach. You're outright dismisal of /u/pilibitti shows a short-sightedness that doesn't imply you care about the conversation but more about pushing your views. /u/pilibitti I can understand being on the defence but when we're attacked is when its most important to hold composure. I agree that many take for granted the opportunity that capitalism brings, that being said, there are also repercussions to an unchecked capitalistic approach. I think its reasonable to think there is a fulcrum between non-profit and for profit that we can balance the industry. I think that its a balance of community (supporting the vaster industry and our fellow developers) while still making sure we value ourselves as professionals and are able to make a living without devaluing or destabilizing profitable work in lue of a blind commitment to non-profit or open source. This is a much deeper conversation and is a per-case basis, but I strongly request that both of you (and others who read) take a second and ask questions about those that have an opposing view and try and understand their stance, and visa versa. We need not have our industry devolve into the chaotic tribalism that so much of the rest of the world is falling. Remember our first words, they should reflect our approach. &gt; "Hello, world!"
Your Weekly /r/javascript Recap **Wednesday, June 05 - Tuesday, June 11** Top 10 Posts | score | comments | --|--|-- [Optional Chaining is now at stage 2!](https://github.com/tc39/proposal-optional-chaining) | 441 | [79 comments](https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/) [Show Reddit: RxDB a realtime database for javascript applications](https://github.com/pubkey/rxdb) | 374 | [43 comments](https://www.reddit.com/r/javascript/comments/byxkef/show_reddit_rxdb_a_realtime_database_for/) [Private Browsing Undetectable in Chrome 76 - Apologies to the "detect private mode" scripts out there](https://twitter.com/paul_irish/status/1138471166115368960) | 293 | [79 comments](https://www.reddit.com/r/javascript/comments/bzha3a/private_browsing_undetectable_in_chrome_76/) [Top level await has made it to stage 3 of tc39](https://github.com/tc39/proposal-top-level-await) | 260 | [64 comments](https://www.reddit.com/r/javascript/comments/bxqiap/top_level_await_has_made_it_to_stage_3_of_tc39/) [Imperative vs Declarative Programming, in 60 Seconds](https://twitter.com/tylermcginnis/status/1136358106751889409) | 228 | [56 comments](https://www.reddit.com/r/javascript/comments/bx6yo8/imperative_vs_declarative_programming_in_60/) [React-Redux v7.1 with hooks is now final!](https://github.com/reduxjs/react-redux/releases/tag/v7.1.0) | 158 | [46 comments](https://www.reddit.com/r/javascript/comments/bz8ag6/reactredux_v71_with_hooks_is_now_final/) [Open Source GraphQL API for Online Show (Netflix, HBO, Hulu, Amazon Prime, etc.)](https://www.reddit.com/r/api/comments/bxzw6j/open_source_graphql_api_for_online_show_netflix/) | 139 | [16 comments](https://www.reddit.com/r/javascript/comments/by7m33/open_source_graphql_api_for_online_show_netflix/) [To Have A Future, Ember Must Kill Its Past](http://andrewcallahan.com/to-have-a-future-ember-must-kill-its-past/) | 128 | [121 comments](https://www.reddit.com/r/javascript/comments/by1jre/to_have_a_future_ember_must_kill_its_past/) [What's going on with npm?](https://www.reddit.com/r/OutOfTheLoop/comments/bysoj3/whats_going_on_with_npm/) | 126 | [65 comments](https://www.reddit.com/r/javascript/comments/bytv4i/whats_going_on_with_npm/) [PracticeJS – Coding exercises in a mobile friendly web app](https://practicejs.com/) | 125 | [16 comments](https://www.reddit.com/r/javascript/comments/byic71/practicejs_coding_exercises_in_a_mobile_friendly/) &amp;nbsp; Top 7 Discussions | score | comments | --|--|-- [A new proposal for const value types (immutable types)](https://github.com/rricard/proposal-const-value-types) | 75 | [56 comments](https://www.reddit.com/r/javascript/comments/bxvst3/a_new_proposal_for_const_value_types_immutable/) [The reduce ({...spread}) anti-pattern](https://www.richsnapp.com/blog/2019/06-09-reduce-spread-anti-pattern) | 61 | [48 comments](https://www.reddit.com/r/javascript/comments/byzfql/the_reduce_spread_antipattern/) [P5JS is a javascript library that aims to make coding accessible for artists, designers, educators, and beginners. Play a game made in p5js here.](https://bhamshu.github.io/flappy-shiffman/) | 61 | [36 comments](https://www.reddit.com/r/javascript/comments/bx1fns/p5js_is_a_javascript_library_that_aims_to_make/) [Why Medium Actually Sucks](https://www.cdevn.com/why-medium-actually-sucks/) | 57 | [30 comments](https://www.reddit.com/r/javascript/comments/bxi9yx/why_medium_actually_sucks/) [Use Google Sheets as your no-hassle database](https://github.com/SteinHQ/Stein) | 59 | [25 comments](https://www.reddit.com/r/javascript/comments/byggfc/use_google_sheets_as_your_nohassle_database/) In light of npm's one millionth package: how big is your node_modules? | 11 | [19 comments](https://www.reddit.com/r/javascript/comments/bxiezw/in_light_of_npms_one_millionth_package_how_big_is/) What are some things you wish you learned early on while learning JavaScript? | 2 | [17 comments](https://www.reddit.com/r/javascript/comments/byygwg/what_are_some_things_you_wish_you_learned_early/) &amp;nbsp; Please let me know if you have suggestions to make this roundup better for /r/javascript. I can search for posts based off keywords in the title, URL and flair. If you would like this roundup sent to your inbox every day send me a message with the subject ['javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript&amp;message=x). Or if you only want a weekly roundup, use the subject ['javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript%20weekly&amp;message=x) However, I can do more.. you can have me search for any keywords you want on any subreddit you want. Send a message with the subject ['set javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript&amp;message=200%0A25%2C%20keyword 1%2C%20another keyphrase%2C%20last example) and in the message: specify a number of upvotes that must be reached, and then an optional list of keywords you want to search for, separated by commas. You can have as many lines as you'd like, as long as they follow this format: 200 50, keyword 1, another keyphrase, last example You can also do ['set javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript%20weekly&amp;message=200%0A25%2C%20keyword 1%2C%20another keyphrase%2C%20last example) And you can replace javascript with any subreddit. See my wiki to learn more: [click here](https://www.reddit.com/r/SubredditSummaryBot/wiki/index)
Everything is infinity payment SaaS the past few years, it's getting really bad.
I am all for this.
&gt; The native web APIs that enable them are too much in flux. How so?
The definition is vague enough that it can mean a lot of things depending on what "some internal autonomy" means. Imagine a shopping mall where the main entrance provides access to the internal hallways and front entrances of the stores, but each store also has its own rear door to the outside world that it can fully control and stylize. In this case, we can say that the mall entrance is federated access to the stores since the stores all committed to have access to the halls that are accessed by the mall's main entrance. However, since we let the stores use their external doors how they'd like, even if their relationship with the mall sours or the mall closes on a holiday that they don't, the store can still let people in through it's own door. So, the federated solution provides one central point of access through the mall entrance, but if there are problems with that, all of the stores can still provide access to customers. In this case, it supports using any log-in type (via oauth), anybody running registries, pointing to anybody's registries and full open-source software end-to-end. So, while they provide a central point of access, they also make it easy for friendly competitors and rivals to emerge and steal the entirety of their work.
Hi /u/TracerBulletX, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I especially like the line `underscores the benefit of aligning your DevOps and CI/CD as tightly as possible to npm tooling` yeah if you could increase your dependence on us that would be great...
Are you sure about these terms? Node normally has no view, unless you mean the shell.
I started learning React about two months ago and I recently finished a personal project to help me learn data visualization and how to consume API data. I call it the Bitcoin Data Visualizer because I am great at naming things. Anyway, I know there is a bunch that could be improved but I'm not sure where to begin (probably need to go back and review fetch API and life cycle hooks at the very least). Interested in feedback, plenty of WTFs to be had. Repo: [https://github.com/git-masi/bitcoin-data-visualizer](https://github.com/git-masi/bitcoin-data-visualizer) Live site: [https://git-masi.github.io/bitcoin-data-visualizer/#/](https://git-masi.github.io/bitcoin-data-visualizer/#/)
Or more simply (with [nullish coalescing](https://github.com/tc39/proposal-nullish-coalescing)) function getWinnerZip(response) { return response?.user?.address?.zipcode ?? null; }
Yeah its annoying. Been looking for various tutorials lately for various topics and like the top 5 tutorials all consume some API that might be free for your little hello world app, but if you are going to do even a bit more you have to pay big time. And if you don't know how it will pay off, its pretty annoying. There's just very little left that you can host yourself. And if they do it has a manual of multiple pages to get up and running, with a 50/50 chance of it actually working when you try it out...
There are a number of ways to do this. Libraries like [dotty](https://www.npmjs.com/package/dotty) are one way, if you don't care about type safety. A similar approach is to use a helper like: const get = (o, f, d) =&gt; {try {return fn(o)} catch (e) {return d}} Which is used like this: var dateTimeJarString = get(consumerData, o =&gt; o.jarTransactions[0].dateTime, '') (the last string is your 'None' value). This one plays nicer with static type checkers such as Typescript. Another approach is to use poor man's optional chaining var dateTimeJarString = (((consumerData || {}).jarTransactions || [])[0] || {}).dateTime || ''; This is not the most readable, but I have seen it used in the wild. Yet another approach is to use destructuring and default values var { jarTransations: [ {dateTime: dateTimeJarString = ''} ] = [{}] } = consumerData;
That's literally what they do at the end of the article
I meant to say JavaScript, Node.js, and MySQL | MongoDB
&gt; callback(currentValue, index, array) FTFY The article goes into this in more depth
I looked through where I was doing this in my code and discovered, wait a second, I was using **this** pattern, not the one you discussed in your article. I broke it into two parts, though: function convertArrayToMonthKeyedObject(values) { const valueObjects = values.map((x, i) =&gt; ({ [monthNames[i]]: x })); return Object.assign({}, ...valueObjects); } It's a little easier to follow perhaps than a one-liner but questionable whether it's as clear as your recommended reduce style.
[Direct link to the presentation](https://www.youtube.com/watch?v=MO8hZlgK5zc)
This is a really cool idea, had fun playing around with it.
&gt; FTFY i omitted `array` intentionally because it's just extra noise in this context.
JS has a backwards-compatible-forever philosophy, so design mistakes never get fixed or removed from the language (e.g. `typeof null`) With that said, this snippet can be useful: x == null // instead of x === null || x === undefined
The pricing model is for companies, not individuals. Very few respect the distinction because it can be hard to enforce.
There are cases in which you would want to compare value and not identity. It's just not usually the case. Any programming language has features that aren't needed often.
Interesting
This is still rather useful "by accident", though, then "by design" - `null` is clearly a different value then `undefined`, it makes no sense "value-equality" shows them as equal. &amp;#x200B; Obviously, it's a good tip in JS as-is, but I'd still prefer to have `==` act as value-equality *always*, just as `===` acts as identity *always,* then I could actually write my code to use it.
When you want to match "3"== 3 because you are lazy I know this is awful and bad practice before I get down voted to Oblivion
Try using requestAnimationFrame, it’s more reliable and more performant.
Most stuff I build, I build for my company. But do you think my boss will be happy if I start using many 3rd party services of which I have no idea how reliable they are or how financially stable? Many come and go so betting on one with a big assignment seems pretty stupid.
I kind of hate this syntax. It seems like this should be the default dot operator behavior, and having it error out should be the opt in behavior with the special operator.
Depending on the required speed of updates, it might be better to use setInterval. You really don't need requestAnimationFrame unless you need realtime high framerate updates. setTimeout and setInterval are perfectly adequate for it in other scenarios.
Martin Fowler's book Patterns of Enterprise Application Architecture may be the place where the Web adaptation of MVC was first described. (Admittedly only a couple chapters of that book talk about MVC.) Here's a brief snip: http://i.imgur.com/V2QyFmx.png And the article [From Flat PHP to Symfony](https://symfony.com/doc/master/introduction/from_flat_php_to_symfony.html) is also a great introduction to MVC.
Entropic is a classic example of a decentralized system if you think of "centralized", "decentralized", and "distributed" as some sort of spectrum. NPM is **centralized** because all clients communicate with one central server that hosts all packages. Many folks make the argument that having one central authority is expensive and risky. Entropic is **decentralized** because each client communicates with one of many servers. A server might be hosted by you, your company, open source org, school, etc. Each server hosts only the packages needed by its clients. If the server doesn't have a package, it can communicate with other servers to find and mirror it. The servers are **federated** because they can work together to make up a global system without one central authority. I don't know of any **decentralized** package managers, but in this architecture, there wouldn't be any servers hosting packages. Clients would communicate with their peers to share packages, much like torrent protocols work.
No timer API in JS has guarantees about drift prevention. setTimeout/setInterval have lower bounds on how frequently they can called, and requestAnimationFrame can drop frames, so if you're assuming each tick takes the amount of time you specified, and you're adding up numbers to an accumulator on each tick based on that assumption, you're going to eventually get a large margin of error. If you're displaying time, it doesn't matter what you use, as long as you read from `Date.now()` in each timer tick to get an actual time value. let time = 0; setInterval(() =&gt; time += 10, 10) // margin of error grows over time proportional to number of ticks let start = Date.now(), time = 0 setInterval(() =&gt; time = Date.now() - start, 10) // margin of error is limited to the precision of Date API
Federated in the same way email and xmpp are federated. That definition is garbage. A federation is a group of equal (in the context of the federation) entities that work together.
PyPI is decentralized. The service running at [pypi.python.org](https://pypi.python.org) is community run with private funding support, but there are quite a few open source pypi implementations, so it's easy to set-up a private repo on an internal network, control how you publish packages to your own PyPIs, or clone the entire public PyPI to use on your own private network.
Today's tweet from Grider: [https://twitter.com/ste\_grider/status/1138846339658240000](https://twitter.com/ste_grider/status/1138846339658240000) TypeScript: must be another exciting course.
And all your logged issues are lost, along with all the documentation from those issues. The value of GitHub is a lot more than just an SFTP-accessible directory for the Git client to dump data into.
But 16777216 isn't the maximum value of a float. Not by a long shot. It's just that when you add 1, it's the same value.
You seem to be arguing against a straw man that NPM shouldn't be ALLOWED to be a private for-profit company. I think we all agree that they should be allowed to do so. It sounds like we all agree that them doing so (which they are totally entitled to do) is definitely bad for the community and also very likely bad for their long term viability. The only thing it MIGHT be good for is any owners in the small chance that a software giant just buys them for a fortune the way MS did Github.
Decentralized or federated - pick one. I this case it's obviously federated. Nothing wrong with that, but don't sell snake oil claiming a decentralized consensus mechanism.
Hi /u/webavail, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ceejay40, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SecretAgentZeroNine, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/_dakota__, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tangerto, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Xelasetahevets, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/blockchain_dev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/regimme, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MetroB00ming, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/563_baked_potatoes, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lucagez, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jjv_1992, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The documentation is also just a repo, just like the github pages... Although I am not really a fan of that, nor the issue tracker. But do feel your concern!
&gt; Capitalism is supposed to reward people like them, but in practice it does not. I suspect capitalism was never under any such obligation. Somehow I feel the author doesn't get what it was like in the early days to create something and watch people use it, express awe, and connect with you through your creation. Without suggesting everyone does this...back then it was very unlike the modern write-a-library, setup-a-domain, promote-on-reddit/HN, give-conference-talks, all geared towards financial reward or fame. A "fair compensation" back then wasn't a donation on opencollective proportionate to how useful my code is, but it was my users attention, willingness to spend time with my code, report bugs or usability issues with the public API, helping me get better. I guess most early contributors were young kids who had their livelihood bills paid by someone else at the time. A fair compensation may not have been a priority. I can imagine some being burnt out because of what it takes to deal with the popularity of their work...they have my deepest gratitude and sympathy.
Are you saying I can download my GitHub issues in their entirety as a repo?
No, I am saying you can download your documentation as a repo, the wiki... Keeping your documation in your issues would be suboptimal imo, it's more a place to have discussions.
The issues should document the decision process, though, as well as details of fixes. I don't generally duplicate all of that in the documentation.
Then you can always export your issues through their API 😉
Reliant on, but not beholden to.
Was ceej fired? Non-competes are super hard to enforce unless they leave of their own accord.
[removed]
that's not the same thing (and fyi, https://github.com/verdaccio/verdaccio and possibly others I'm unaware of if you want to do your own private npm repo) From what I understand of this proposal, is to not have a central repository of any kind, but a collection of repositories that partake in [federated searching](https://en.wikipedia.org/wiki/Federated_search) which in my opinion increases complexity without much value to the end user. The solution is follow in the footsteps of package managers before npm. To be community owned or owned by non-profit organisations that rely on donations, private or corporate, not to completely and unnecessarily reinvent the wheel.
CAVEAT: this applies at algorithm or micro-optimization level, which should not be used for decision of application patterns. You can almost always abstract that away while keep your application functional/immutable. * There are dozens of technique compiler do for loop optimization, most of which are not applied/implemented for the functional version * Most functional variant require allocation/GC, while the imperative version does not * There is no functional version of some the CS data structures (weak map); likewise immutable version of common algorithms (e.g. sorting) are often not as optimal
[To be fair, they are attempting federation.](https://github.com/open-services/open-registry/issues/19)
There are a couple of proposals you might find interesting: [Optional Chaining Operator](https://github.com/tc39/proposal-optional-chaining) and [Nullish Coalescing Operator](https://github.com/tc39/proposal-nullish-coalescing). Both these proposals are at Stage 2, and if you use [Babel](https://babeljs.io/), you can use them now. &amp;#x200B; However, I also quite like lhorie's destructuring with default values approach; I'd give that a try if possible. &amp;#x200B; Another approach would be to use a data structure to abstract away the checks, often called a \`Maybe\` or \`Option\`. Here's an example (relying on nodejs inspect): // Utilities from nodejs const util = require("util"); const isNullOrUndefined = value =&gt; value === null || value === undefined; // Mutable/Stateful Maybe with clone method const Maybe = value =&gt; ({ value, clone() { return Maybe(this.value); }, map(f) { if (!isNullOrUndefined(this.value)) { this.value = f(this.value); } return this; }, flatMap(f) { return this.map(f).value || this; }, [util.inspect.custom]() { return isNullOrUndefined(this.value) ? "None" : `Maybe(${util.inspect(this.value)})`; } }); // Parsed JSON const imaginaryData1 = { foo: { bar: { baz: 1 } } }; const imaginaryData2 = { foo: {} }; // Using it const maybeBaz = Maybe(imaginaryData1.foo.bar).map(bar =&gt; bar.baz); const maybeBazAgain = Maybe(imaginaryData2.foo.bar) .map(bar =&gt; bar.baz); // same code, no special cases console.log("maybeBaz :", maybeBaz); // Maybe(2) console.log("maybeBazAgain :", maybeBazAgain, "\n"); // None // Of course you want to continue operating on the data that may or may not exist const maybeTwo = maybeBaz.map(baz =&gt; baz + 1); const maybeTwoAgain = maybeBazAgain .map(baz =&gt; baz + 1); // same code, no special cases console.log("maybeTwo :", maybeTwo); // Maybe(2) console.log("maybeTwoAgain :", maybeTwoAgain, "\n"); // None // What if the function you're applying with `map` also returns a Maybe? // We'd get nested Maybes. In that case, we can flatMap. // First a demonstration of nested, first cloning the data so we can work on it twice: const maybeThree = maybeTwo .clone() .map(n =&gt; Maybe(n + 1)); const maybeThreeAgain = maybeTwoAgain .clone() .map(n =&gt; Maybe(n + 1)); // same code, no special cases console.log("maybeThree :", maybeThree); // Maybe(Maybe(3)) - nested! console.log("maybeThreeAgain :", maybeThreeAgain, "\n"); // None // Next how to fix it with flatmap: const maybeThree2 = maybeTwo.flatMap(n =&gt; Maybe(n + 1)); const maybeThreeAgain2 = maybeTwoAgain .flatMap(n =&gt; Maybe(n + 1)); // same code, no special cases console.log("maybeThree2 :", maybeThree2); // Maybe(3) - not nested! console.log("maybeThreeAgain2 :", maybeThreeAgain2); // None Obviously there's no type safety, but you get the gist. You might also want an immutable Maybe so you don't have to think about cloning and state, and look for maintained packages instead of rolling your own.
Is this new api still compatible with redux-thunk?
Hi /u/urdoom1824, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Can’t really change the code in millions of existing websites.
Most loved... by people who have deeply nested nulls everywhere in their code?
Lodash's *get* does have the option to supply a default instead of null. Seems safer to me not having to deal with null.
Man, we have already node CLI interpreter :/
Not a repo, but I think this goes here. Today I realized that webpack's `devtool` option doesn't automatically disable when in production mode. I've been serving files bloated with inline source maps to ~8x their actual size for _months_.
Concise, clear. An excellent explanation defining exactly what I meant (literally and in tone) of the difference between the perception and reality of "decentralized". Based on your explanation, it sounds like a company with a number of packages, some in consistent dev, can up a server for their specific packages and attach them to the manager. This could be both a good and bad thing . . . but I'll take the potential high end over the potential bad. Thanks.
Yeah, React-Redux is _completely_ separate from thunks. You'd just do, say,: import {fetchStuffThunk} from "./actions"; // in a component const dispatch = useDispatch(); // in an effect: dispatch(fetchStuffThunk()); Rather than doing: const mapDispatch = {fetchStuffThunk}; this.props.fetchStuffThunk();
The main problem with value equality is defining what “value” means in the case of an object/array/function. Are two arrays equal if they contain an equal number of unequal objects? Are two objects equal if one of them has an extra method added to its prototype? Are two functions equal if they have the same underlying source code? What about if you add a property to the function or somewhere up its prototype chain? (After all, functions are objects too...). The best definition I can think of is a “structural equality” check, where you only check an object’s own enumerable properties. But then we have to decide whether we want a shallow check or a deep check of all nested objects/arrays. It’s legitimately a hard question to answer. You can imagine how difficult it would be to get an entire committee to agree to one specific solution.
Hi /u/angelkosa, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/angelkosa, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Gradually but eventually, yes Ember will need to break backward compatibility in order to evolve. These things have to be done carefully, as a big selling point about Ember is how easy it is to upgrade. I would imagine it would happen as such: 1. Announce a new roadmap after the call for blog posts is over 2. Put out RFCs to depreciate each feature/introduce its replacement 3. Merge in each RFC one by one - this will not be a big bang 4. Once an RFC is merged into Ember, a release blog post will be written to explain it along with a codemod to help people migrate, and a reasonable lag time where the feature is deprecated but still works. 5. Upgrade guides to reflect the new way of coding I think it's 100% doable if done deliberately, which the Core Team has proven capable of in the past.
My apologies, have a great one!
Api's with include options. Like GET /articles?includes=images, suppliers,suppliers.address Sure, you know if those exist, when you call that thing, but what if you have a generic piece of code which takes articles. In that case you might need to check this kind of stuff. In bigger complex applications, this kind of stuff adds up. Sure, it's mostly not as deep as the examples in the article, but when reading complex code, things like this help readability a lot!
&gt;npm owes it's success to the community, both for publishing their modules into the repo, and by adopting the npm cli as a defacto standard. The node project itself embraced npm and bundled it in their release, which greatly helped elevate it to it's current status. So? Doesn't mean they *shouldn't* go for profit if they want to does it? That is my point. If the value proposition isn't there, people will leave. Didn't happen yet so the value proposition is there, but the ground is shaky and they might lose. Their investors might lose. That is a risk they were willing to take. I won't feel sorry for them if it happens. But I don't think they were obligated to be selfless for my benefit either. It would be real sweet if they were, but they weren't obligated to - that's my point. If I build a service and keep it open and free while I iterate on it, and attract lots of people because what I built is useful and valuable to masses... am I morally obligated to *not* profit from it down the road because I have such a large userbase and user support? Because I am successful? Valuable? I find the idea preposterous. It is a choice, I can go for profit and users can leave to alternatives should such exist.
Maybe so. I don't really care about news media, free or otherwise. I only consume it online because it's free, though.
Another thing is that almost all so called "workshops" dealt with proprietary APIs. Some of the talks were NGINX(recently acquired by hardware manufacturer F5) with their API management system and CRATE DB which stated directly that the go for version of their solution is the enterprise one and they would implement it for you if you choose one of the plans. The conference was WEAREDEVELOPERS in Berlin
&gt; Then accept lower standards for information/news. They can't really get any lower. &gt; Paid journalism is the only way to ensure that the journalists who write content actually get paid to report for YOU. That may be true, but even if so, it's not a case to not make a feature like incognito work properly. I couldn't care less if every single online news outlet shut off tomorrow. If the only way they can survive is by abusing something like incognito, they deserve to perish.
It's very easy to answer: pick any answer as long as it is consistent. E.g. it could throw any time one side of comparison is not a primitive value, and it would be way more usable then it is now, because we'd only have to handle one edge case.
ELI5 Federated?
I disagree that open source is only important if you're the one actively managing the server environment. It has many benefits beyond self-hostability and interactivity. Most notably for the discussion around NPM/Node/Javascript, it allows for scrutability of the software/services that your projects depend on and for community members to ultimately leave a given service provider they are in some way insufficient.
We'll see if it gets implemented... a few of the Famous JS Personalities are against it, as you can see in this [twitter thread](https://twitter.com/housecor/status/1088419498846244864). Hopefully they don't have enough of an influence on the decision makers to stop it.
Non-competes are unenforceable in California which is where CJ lives according to their twitter.
&gt; it allows for scrutability of the software/services that your projects depend on To the extent that you believe that the source you are reading is what is actually executing. There are lots of innocent and malicious reasons for that not to be true in fact or in spirit.
Yeah that could work. (I assume by “throw” you mean “return false”... I wouldn’t want it to crash my program, lol...) And then no two objects are ever considered equal by value? Including `null`? Or would you make an exception for that?
Are you saying you'd rather learn other things w/ your limited time, or simply that you're too lazy to learn? If the latter, yeah you're gonna hit a $$$ ceiling sooner. It doesn't have to be design patterns (they aren't even that hard), but you need to keep learning things if you want a career in this industry.
You have a great attitude
I made similar custom hooks for useContext/useReducer patterns that provided the context store data and pure functions to change that data via useReducer. As a result, I found that the context store changes were causing re-renders in components that only needed to worry about dispatching actions. I have a feeling that this hook pattern may suffer the same performance issue if you have components that only need to dispatch actions and not react to that data. Here is an implementation of useContext and useReducer with those concerns separated. It should be fairly easy to adopt a similar pattern with the new redux hooks. `ActionAlertContext.jsx` ```jsx import React, { createContext, useReducer } from 'react' const initState = { alertMsg: '', isSuccess: false, } export const ActionAlertContext = createContext() export const ActionAlertStoreContext = createContext() function reducer(state, action) { const { type } = action switch (type) { case 'set': const { alertMsg, isSuccess } = action return { alertMsg, isSuccess, } case 'clear': return initState default: throw new Error('Invalid alert context action') } } export function ActionAlertProvider({ children }) { const [state, dispatch] = useReducer(reducer, initState) return ( &lt;ActionAlertContext.Provider value={dispatch}&gt; &lt;ActionAlertStoreContext.Provider value={state}&gt; {children} &lt;/ActionAlertStoreContext.Provider&gt; &lt;/ActionAlertContext.Provider&gt; ) } ``` `useActionAlert.js` ```js import { useContext } from 'react' import { ActionAlertContext } from '../contexts' export default function useActionAlert() { const dispatch = useContext(ActionAlertContext) function setActionAlert(alertMsg, isSuccess = false) { return dispatch({ type: 'set', alertMsg, isSuccess }) } function clearActionAlert() { return dispatch({ type: 'clear' }) } return { setActionAlert : (alertMsg, isSuccess) =&gt; setActionAlert(alertMsg, isSuccess), clearActionAlert: clearActionAlert, } } ``` `useActionAlertStore.js` ```js import { useContext } from 'react' import { ActionAlertStoreContext } from '../contexts' export default function useActionAlertStore() { const { alertMsg, isSuccess } = useContext(ActionAlertStoreContext) return { alertMsg, isSuccess, } } ``
I dont think anyone on this sub would be lazy but I prefer math, advanced js, coding, server and design stuff over massive walls of boring text.
Learn it all. All of it.
You'll learn design patterns as you need them to solve problems. That's unavoidable if you want to be a programmer. You could read a book on design patterns and know less than someone that can't name any of them but has the experience to recognize and know when to use them.
Ok. Well, ignoring web dev tutorial sites like codecademy, a lot of things are going to be walls to text to some extent... In any case, it sounds like you have your interests, so you do you. It might simply be that design patterns don't click for you yet, but they might later, so just keep an open mind and don't let a bad experience with one specific resource put you off a topic.
Learn as much as you can of everything related to your field I’d say. Broad knowledge leads to better problem solving. You’ll hopefully get good habits drilled into you in code review but the reasons why your leads might ask you to make changes could be easier to understand if you develop a top down perspective as well as a bottom up one.
You can just use || if truthiness works for you.
Hi /u/experience369, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
heard spook stories about this being abused in Angular and cause massive slowdowns.
Thanks a lot for your share.
Thanks for your question. ZuckerJS was given birth to assist web developers to build SPA web applications in a new way. It's not same as traditional-way. Hopefully it would be useful :)
What code would start failing that wasn't failing already if you changed that overnight?
So, his argument is: "you shouldn't *need* this feature because every object you work with should have a consistent structure" and when asked about the many many cases where you don't have control over the structure of the objects you receive (having to work with APIs made by another developer/team, vendor APIs, working with a huge a API with dozens of classes that would take a lot of work to make consistent) he responds that yeah, that feature would be useful (to centralize every reception of objects from that source in a single place) but because probably some people would use it badly and cause brittle code it is still wrong. What the fuck? This smells more like a very senior developer (or ex developer and current executive) that either never experienced or forgot what the reality is for most developers where a huge part of their environment is neither developed by themselves or has the slightest chance of hearing and accepting your complaints/suggestions than by a developer worried about the brittleness of other's code. It you are so worried the are many more "dangerous" features of JS that cause code brittleness but form the core of JS (like implicit casting or being not typed).
A bit harsh, @housecor does great work... but he's totally wrong this time
Just a reminder before people get excited. These short hand syntax cheats hide a lot of complexity, by that I mean cyclomatic complexity. Every "?" adds an extra branch. Each new branch means more tests to write to keep coverage high. I think if you're writing code like this you need to just ask yourself why would the code could be getting itself into an undefined state, also consider if there are multiple places responsible for writing this data, or could my coffee be executing asynchronously? It would be nice to have more mindfulness when writing code. I've been writing javascript professionally for over ten years, have spent 3 of those heavily on coffeescript projects. I've maintained multiple repositories and always strive to put testing at the forefront of my teams minds with coverage typically above 95%. I find explicit code, simple code and easy to read code the most maintainable and also the clearest way for any team to work effectively and is worth it's weight in salt over flashy syntax or "mathematically" superior algorithms that take longer to debug than gain in efficiency of execution. Think about the next person who'll have to look at this code, and practice code reviews if you don't already. It you've never heard of cyclomatic complexity, have a quick look at https://en.m.wikipedia.org/wiki/Cyclomatic_complexity TL;DR Be explicit. Avoid unexpected side effects. Don't create too many branches in your code. Think about your fellow human co-workers who have to debug your work long after you're gone. Stay hydrated. Be kind. :)
I think it'd be interesting to do a blockchain based decentralized package manager. This is one of those times when a blockchain would be truly useful and not just a buzzword. Basically, publishing a package on it would be sending a transaction with embedded data. How the data is embedded is irrelevant, but in general the larger the package the more it would 'cost' to publish it, since you need to create a transaction with whatever currency the blockchain runs. But, assuming low transaction fees, it should cost very little to publish, and incentivizes smaller packages. You could send a transaction which destroys the coins, and in doing so embeds that data into the blockchain... and then you have a permanent, immutable, decentralized, uncensorable and always available record of the package. Ownership / permissions and stuff could just be handled with an abstraction of normal wallet/coin ownership. Clients could just query the blockchain for transactions that match some criteria flagging them as a package and read/download freely.
Any code that expects the dot operator to throw an exception.
Question: will this be string compatible instead of using hard coded field names? For example... test?.\[var1\]?.\[var2\]
I believe it was clearly stated how much they are motivated by these factors you mention, hence their time investment in this open source project.
Is there a lot of this in the wild? I admittedly don't have my fingers in a ton of different codebases, but I don't think I've ever seen someone try/catch a property access, as opposed to doing the kind of conditional chaining in the example, or using stuff similar to lodash's get. My point was that it seems like the default behavior for access chaining requires a bunch of defensive coding, which stays safe if you changed the behavior, and the changed behavior would be a better fit for most use cases.
[Check this](https://www.reddit.com/r/javascript/comments/bzra53/former_npm_cto_launches_a_decentralized_federated/eqw8sdr/?st=jwtwa6xk&amp;sh=61e724ae)
The codes undefined usually because it's old and not in your control
Probably not intentionally, but with so much code written, there will be tons of affected websites.
That looks absolutely horrible. It's like coding in Swift and getting into the optional hell.
You get a whitelist rule! She gets a whitelist rule! Everybody gets a whitelist rule!
You prefer 4 if-statements checking for null/undefined instead?
Is this late stage capitalism?
They forked a standard non-compete clause but OSI wouldn't recognize it.
Funny you say that since you've demonstrated multiple times that you don't know where semicolons are supposed to go. You also seem to have forgotten that I gave you a few examples a few weeks ago were semicolons can't be omitted. I really wish your skill level would be a little bit higher. Seems like I overestimated you again. I can't think of a way to simplify this even further. Sorry about that.
thank you!
I have avoided “the cloud” because you still pay for development. I would be fine with paying for production, but I don’t have time to fully test my shit to fix 1 thing and worry I will accidentally incure a $10,000 bill! Yes, if that were to happen, that would not go out, and I would test for such things, but that is not my primary goal in “dev”. “Dev” is my sandbox.
Federation is essentially an interface layer.
Essentially a common object model/interface that provides a known set of operations between programs operating at the same level. Think SMTP servers and clients. Anyone can write their own, but each must follow a communications standard. A federation can provide for authentication/membership. The only place I have really seen Federation was with the HLA: https://en.m.wikipedia.org/wiki/High_Level_Architecture
I imagine downloading the massive node_modules folders needed for just a create react app would be extremely slow off a blockchain
yah i heard their culture is completely fucked up right now
I don't see why. Jokes about massive dependency chains aside, most node_modules folders are 10s or 100s of megabytes. A bigger project I just did comes in at 216MB with a crapload of dependencies, including dev dependencies. That's uncompressed. Downloading from a decentralized network isn't any slower than downloading from a central repo usually, and many times is faster (see bittorrent). The only reason it takes a long time to download the bitcoin blockchain is because it's so large.
I recognize beautiful code when I see it: function getWinnerZip(response) { return response &amp;&amp; response.user &amp;&amp; response.user.address &amp;&amp; response.user.adress.zipcode || null; } The ironic part is that this, but probably way worse, is what we'll actually ship for quite some time, thanks to Babel...
Agreed. It would be nice if we knew shit wasn't null, but we can't control everything. And really, is it any different than the example current say solution? It's just (very nice) syntactic sugar after all.
Yeeeeeah, so that's the Babel code: "use strict"; function getWinnerZip(response) { var _ref, _response$user, _response$user$addres; return (_ref = response === null || response === void 0 ? void 0 : (_response$user = response.user) === null || _response$user === void 0 ? void 0 : (_response$user$addres = _response$user.address) === null || _response$user$addres === void 0 ? void 0 : _response$user$addres.zipcode) !== null &amp;&amp; _ref !== void 0 ? _ref : null; }
Holy crap! I'm not the only one who feels this exact shame. I also have a few apps I need to maintain in Ember 1.x. Every time I need to jump into it...I feel like shit. I loved the concept of Ember, but it's flaw is the lack of flexibility. It initially took great foundational concepts from Rails on how to build apps but ultimately fails to provide the flexibility for different types of teams.
if it is **federated** then how is it **decentralized** ?
At least you have tons of karma.
**zero config**™️
This is exactly the kind of exploratory hacking I love. Excellent write up of your process and thinking. Thanks for sharing.
ceej's talk acknowledges this specifically. You should watch it.
I was under the impression that downloading things off of blockchains was inefficient. But I could be mistaken
What's wrong with a lamp stack?
It's Angular. Shitty engineering is part of its charm.
No. The other way around.
It used to be the default behavior. It was changes because it constantly caused silent, hard to find bugs. You will need ?. rarely. When you do need it, it's really nice to have it around, and save you pointless writing and redundancy. But if you actually need this most of the time, to the point you want it as a *default*... then you're doing programming wrong.
Nope, but I can see why you'd come to that conclusion, hearing about how long it can take to download the bitcoin blockchain. It's more than 200GB. With a package-manager-on-blockchain you wouldn't necessarily need to download the whole blockchain, but you do sacrifice some security if you don't. With the whole chain you can mathematically verify that the package is the actual, bit-perfect code that was published in the past. You could sacrifice some of that total trust to a third party that could serve you a piece of the chain (specific packages). That way you don't need to download the whole chain just to install some javascript packages. These services would only need to index the blockchain for packages and basically serve pointers into it back to you (the client)... so they wouldn't even need to handle the bandwidth of you downloading the actual packages. The nodes would send the actual package source. I could imagine commercial companies providing this service in exchange for goodwill/etc, like how some big companies host open source projects and what not. There could also be community / federated versions so you don't need to trust companies. They'd be much cheaper to run than npm because they just need disk space for the chain and bandwidth to return specific pointers into the chain. And in the end you could always just download the whole chain and verify everything yourself, which helps keep everyone honest.
My advice is, don't try to understand when to use the patterns. Just keep them in mind. When you have a problem, go through the short list in your mind (or even keep it on a note) and see if that really improves things somehow or not. It's hard to learn these things in a mechanical, systematic way. Which patterns confuse you the most, as to application? Maybe I can give examples that pop up in my practice.
Wear e-Developers: A conference for Ed Gein impersonators who have a very specific taste for victims that are software engineers who lived through that weird phase in the 90s when all tech startups had "e-" prefixes on their names.
To me the fundamental problem React solves is slighly different: - JSX allows natural combination of JS and nodes without doing string concatenation and operations. - The DOM updates are done by only updating what has changed. I don't use setState and most of the other infrastructure, I use React as an implementation detail, not as a framework. But those two things above can't be explored in a quick sample code, so I understand author's angle.
This might help: https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Your_first_HTML_form
You will sound smarter, but the smartest thing anyone can do is only add these abstractions/patterns/architecture only when its necessary as they incur a complexity cost. I know to many that made the decisions too soon and ended up architecting themselves into the void.
Ultimate CSS allowing to change HTML attributes based on conditions Repo: [https://github.com/ucssjs/ucssjs.github.io](https://github.com/ucssjs/ucssjs.github.io) Site: [https://github.com/ucssjs/ucssjs.github.io](https://github.com/ucssjs/ucssjs.github.io)
You can set up your own nuget package Central and use that as default or along nuget from Microsoft. So they just provide an option not the option.
The non-compete also depended on left-pad
Wow my corporate experience with ember in 2015, was that upgrades could be $100k money pits
Not again... stop it, please.
Stage 2 (or even stage 3) certainly does not necessarily imply "soon" (see decorators, some other proposals).
&gt; I don't think I've ever seen someone try/catch a property access It would also break code that implicitly relied on the exception to halt execution.
Hi /u/b1p0lar_bear, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
bcbcvbcvvvcbc
Thanks for Sharing valuable Information. [JavaScript Training in Velachery](https://www.credosystemz.com/training-in-chennai/javascript-training-in-chennai/)
Looks great! Thanks for sharing!
You need to have a twitter account and be willing to advertise on it
I would have liked it better if it didn't require a '?' *And* the ’.’ I guess the ’?’ by itself could and should be enough.
"This guy". Most of your reddit post history is blog posts by "this guy"
I thought the coffee script died? Didn’t the original developer leave not too long ago?
facebook "free"
No context of how this is different from hundreds of other node resources and crash courses. Am I the only one finding it odd the twitter feed is just full of rando's saying thanks with no specific praise, substantive feedback or asks?
Hi /u/aarif19, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi, nice app but I get white font-color on white background ([https://imgur.com/a/wAiNdpK](https://imgur.com/a/wAiNdpK)). You should specify a background-color on your body-element as a fallback for the background-image. &amp;#x200B; Also it would be nice if the user could enter the number of songs he wants to get :)
Just a simple ToDo-app would be more than enough of a project to fairly implement some design patterns, separate concerns and so on :D
i read the essay and its evident that they are trying to use capitalism skepticism into ditching npm. perhaps their personal bitterness with npm has something to do with it. whether npm's acceptance of VC money (or their choice of VC) was a bad call...is yet to play out. npm still works. they aren't shutting down, are they? betting on their demise or Github leading the registry market is premature. at this point npm is a 'free public utility' for users and enterprises. with that userbase and at that scale, npm still has a good chance for success. i dont need npm to love me or the community. wouldn't be surprised if npm were to retort to this talk/presentation in a dumpster-fire flame war way that is typical of our beloved teenage community.
Not familiar with Osmani's style, but from the TOC, it looks like a javascript centric analysis of the classic "Gang of Four" patterns. &amp;#x200B; While some "low-level" patterns have language specific considerations (e.g. some become superfluous with features present in modern languages, and others become more important to compensate for limitations), I personally have found it most useful to appreciate the pattern and problem being solved, **regardless of the language**. I found the following, even though I to be a pretty sufficient introduction to the major patterns with goofy examples to really help convey the essence of \*why\* they matter, with GoF being a good backup on the more obscure ones. This one uses java for the code, but the examples and conceptual models are quite straightforward for imperative code developers from any mainstream language. [https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124](https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124) &amp;#x200B; I'd caution that using projects beyond toy examples to demonstrate patterns as a goal is a bit awkward/forced, and not very true to how you will apply them in reality. The worst thing is when a colleague finishes reading a design patterns book, gets "pattern fever" and decides to use their shiny new hammer to shoehorn patterns into production code, often in ways it has no place being there. &amp;#x200B; As a counter-example, a software developer doesn't spontaneously say they want to use "the adapter pattern", but rather they find themselves with a code problem where they need a component written to one interface to work with a component which depends on a different interface. Instead of converting one to meet the needs of the other, you factor in an adapter, because this option entails less work, fewer moving parts which can fail, and makes it easier for you to explain your design to competent peers. &amp;#x200B; Areas of codebases with higher bug rates and crazier engineers or abandonment of former maintainers tend to offer good "ore" to scrutinize and reflect on opportunities to recognize problems, refactor with patterns and simplify to breath life back into a busted stack. When some candidates for change come to mind, introduce the pattern and share your idea with peers, and get their impressions on the approach.
&gt; **yours free**, [after retweet.](https://i.imgur.com/qTAhmGV.png)
Just saved the thread to check the answers later XD
Thanks! I need this a lot. I somehow lose the ability to understand new info after a minute lol
With type checking (Flow, Typescript, JSDoc w VSCode, whatever), the compiler can flag the nullables at the public facing layer, and thus removing the need to null check internal methods. This new feature would still be helpful, regardless.
In most practical circumstances you're not going to meet any person who has all those "design patterns" patterns listed out in some book. I've come across maybe one or two books where the authors have described some patterns and then made sure to apply the pattern to a non-trivial problem. Aside from these couple of books, I had read a few miscellaneous blog posts online. Let's be honest, you're probably not going to easily find someone who will provide a complex application which demonstrates proper use of most of the common design patterns. &amp;#x200B; This may be rude to say, but I bet most the people commenting in this thread do not have a solid grasp of a majority of design patterns - at least Not without going through some trouble implementing the solution. Although it may sometimes is hyped up with the many blogs/articles claiming the importance of memorizing some patterns, most these articles will only implement a trivial solution without demonstration of its use in a complex application. In your practical work you're not going to immediately turn to these design patterns to build a solution, and I seriously doubt anybody does this. &amp;#x200B; My advice (though you probably shouldn't listen to me) is to focus on the particular problem at hand and write a solution that is readable and not overly-abstract. See what you come up with. Learn all you want, but if your purpose is just to memorize some stuff that you'll probably forget some weeks/months later, then find something more "purposeful" to do.
Probably the best answer in this thread.
it hurts me to look at this code, dude
I think it would be the most concise decision
&gt;Market value $34.99 For 72 pages?!? I don't think so.
You can take a test to determine the level of your knowledge. There are many websites where you can test your skills. HackerRank and HackerEarth, for example.
The problem is being lucky enough to find supporters with the resources to provide the hosting, that are willing to do so either because "it is a right thing" or "we depend on it so want to support it" *without* imposing any potentially problematical controls (the "beholden to" part). Pypi has had and maintains that luck. That doesn't yet seem to be the case for something that can drop in place of npm. It may happen of course, Pypi has been around somewhat longer IIRC.
Awesome!
This is definitely not a good site to *learn* javascript if you're a newb. But it looks like a nice reference / cheat sheet.
Have you found a recent front-end tutorial that still uses a lamp stack? And does your lamp stack scale, does it include AI, does it include speech recognition, does it include easy front-end testing tools? etc.
Oh come on, you are not fooling anyone with the "this guy" thing, just say you are giving the book for free.
You just need 2 things, the selected index from dropdown 1 and the element to disable in dropdown 2. `document.getElementById("mySelect1").options[document.getElementById("mySelect1").selectedIndex].value;` `document.getElementById("mySelect2").options[0].disabled=true;` &amp;#x200B; You can use Jquery for faster\\shorter options: `$(/* option selector */).prop('disabled', true);`
Is this /r/ChoosingBeggars ? If you can make a decentralised non-profit npm alternative that can sustain itself without any dealbreaker downsides, do it! That is what is being attempted here. If it works great, I'd love to see npm becoming irrelevant. But we are not there yet, npm is not a public utility. It is privately owned, is it morally problematic for you?
Worked for me without retweeting.
Fluency is when you stop thinking about how to express something and become more concerned with what you are trying to express. When the language begins to feel like a tool to solve problems instead of a problem to solve itself. For JavaScript I think this often goes hand in hand with no longer caring about the latest framework of library, because you know that they're just collections of apis and if they're the right tool for the task at hand you can pick them up pretty quick.
&gt; I'd love to see npm becoming irrelevant The person above you just expressed his/her WISH it had gone non-profit so we wouldn't be here today. No need to go full ancap &gt; It is privately owned, is it morally problematic for you? Yes, abolish capitalism
The content honestly isn't worth $1. But this is a very good example of good marketing.
Plenty of things in a virtual dom aren't serialisable- functions, cyclical references. It wouldn't work for a lot of things `JSON.stringify` is an expensive operation, especially for large objects. So yeah, your string comparison is really fast, but it has two massive bottlenecks on either side.
Yup https://github.com/tc39/proposal-optional-chaining/blob/master/README.md#syntax
This would mean that the parser would have to read ahead to differentiate between the ternary operator and this one. No thank you.
The `.` helps to differentiate between ternary https://github.com/tc39/proposal-optional-chaining/blob/master/README.md#faq
It's the top comment.
A beginner would get a stroke reading that code.
A photo sorting electron app for photographers and creators wanting to sort and offload their camera footage and order it automatically. [https://github.com/EdenTurgeman/PhotoOp](https://github.com/EdenTurgeman/PhotoOp)
Hi /u/JewishGenealogy94, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Axgk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/zSacrety, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tnulle, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/born-without-a-name, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jebbfoyer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Pietro_ich, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Rapitfiya, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/amarillo2019, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Especially as a lot are written in shorthand ES6, which I find convoluted to look at, at first glance. And I can see many (including myself) just copying and pasting the code rather than learning what it's doing and why 🤷‍♂️
Haha, no shit. You might want to do a quick ` print hello world` Before moving on to: ``` const all = (arr, fn = Boolean) =&gt; arr.every(fn) ```
I once made this modal window that scrolled down into the screen when it was opened and when closed it scrolled up off screen. Where does it even go??? I even looked behind the monitor when it was moving, checked other pages, it's some real dark arts shit, maybe interdimensional stuff at play. The weird thing is the modal is still in the code, you can see it if you view the source. To this day, I still don't know where that modal is coming from or going to.
&gt;The person above you just expressed his/her WISH it had gone non-profit so we wouldn't be here today. No they said "should" like it was some sort of mistake on someone's part. It isn't, it is a deliberate choice. IT might suck for you but that is what it is. &gt;Yes, abolish capitalism lol
Ah, the embodiment of cargo-cult functional programming. Point-free but also pointless.
It looks like someone made a bunch of helper methods for themselves and then posted them online. Issue is that putting this in any code base would really promote bad coding practices (single letter variables, very code golf style single lines). You'd be better off writing these yourself on a case by case basis, taking the time to understand array methods and making them specific to your application. Of course it is interesting to see how this person wrote them out. Definitely shows the span of what you can do with certain array methods.
It's really useful, thanks! But why is there another 'title' for almost every function? I mean why does it have to be called 'All' when the used javascript array function is called 'every'? Why isn't it the same?
You don't need to spread an array inside concat. Your code could be simplified to this: ``` [].concat(...[[1,2,3],[4,5,6],[7,8,9]]) ```
You bet they are. Check out some real news like Democracy Now
I want to learn how to get my js code to work with my html code and all the different things I could do with my js code to make my site cooler.
https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore/blob/master/README.md#_sortby-and-_orderby
True, unfortunately.
Interesting! So question. If I'm only using one part of say a 100kb application, will it download the whole 100kb, or just the part that I need?
It was a mistake that has hurt the community, even if it was a choice &gt; You're free to build alternatives on your own dime. Why not work together?
&gt; I want to learn how to get my js code to work with my html code This is a bit vague, what do you mean by this? Can you give us an example. And to make your site cooler with JS I'd experiment with different browser API's such as the Canvas. Or I'd recommend taking a swatch of peoples work over on [CodePen.io](https://CodePen.io) for inspiration and ideas.
Constructing a full featured and maintainable node backend following reasonable best practices. Session based auth. Express routing and sub routes. PostgreDb models without using stuff like query builders and/or an ORM until the point it would 100% be of benefit. High frequency CRUD operations. Email signups.
I’m no expert but I think you need to look into building a REST API.
I don't know too much about js but I want to learn how to change the colors of certain texts during certain events and how to animate parts of my site during an event. Things like that
It would be nice if the clock hand in the header was moving counting how many "30 seconds" you've actually spent :) Nice page!
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
As someone that is mostly self taught I feel like I've only gone down the route of knowing how to make elements interactive, and have made some [pretty cool shit](https://lewisshaw.me/) along the way, but when it comes to terminology or explaining technical things, I'm stumped or at least don't feel confident in doing so as it's not something I have the opportunity to practice on a daily basis. Personally I need to change the way I approach coding but it's hard to do when you're so used to your own habits and how you approach things. If anything I would love to find a mentor that I could liaise with to help me get on track to becoming a more technical developer.
You should look more into CSS for animation and changing element properties such as colors. Once you have a grasp on it you can then look at how you would pragmatically apply these changes and animations with JavaScript, e.g. swapping out classes that contain transitions for changing colors etc.
I'd love to see it named 'frozen'. That'd pair nicely with Object.freeze()
[https://github.com/imlinus/lilql](https://github.com/imlinus/lilql) There's 38 lines of inspiration for ya :D
&gt;It was a mistake that has hurt the community, even if it was a choice Mistake done by whom? Maybe by their standards it was not a mistake, a deliberate action that was sucessful. Then you can't call it a mistake, you can call it unfortunate from your POV but unless they themselves now think "we should have been selfless and should have provided this as a public service" then it is not a mistake, period. Though you can say "the eagerness of the javascript community to accept npm readily without question just because it was convenient was a mistake" and I would agree. But if you say "*they* made a mistake by going private" I would not agree - unless they themselves think it was a mistake. If their aim was to provide value while making a profit, and if they succeeded in that, then it is a success, not a mistake. &gt;Why not work together? Of course, that's what I meant when I said "you're free to build alternatives" - by you I mean "us". And that is what is being attempted here which is great.
Could you provide more details? A link isn't really enough...
Seriously. Obviously, if we simply rejected private ownership of the means of production (not clear as to how this applies to things like software), people would cease to be self-interested.
Hello, I'm not really knowledgeable about modern web java, but you can always use the spring framework, which is quite old
GraphQL is a recurring topic I'd like to explore. I am used to leveraging REST API, almost daily, but I think GraphQL may potentially change the way one interacts with a backend stack. My only issue is that I don't want things to end up like SOAP was back in the day. Anyone else interested?
I couldn't get far enough to check. You have to actually have an account.
Awesome site, especially useful to prep you for stupid interview questions!
Next: make a website in 3 seconds
YAY
I thought of that, but it would also be confusing, because Object.freeze is only shallow...
Hi /u/rajajaganathan, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Haven't looked yet but I bet many of these are available in lodash.
people are downvoting people for liking something smh
That's a good point, sure.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
I remember the first time I used jQuery too.
I guess `final`, like in Dart, would probably be the best option
Updated with original url.
TDD in the real world. not TDD with perfect pure code
If it's simple and you're using some sort of web based Java framework/lib like JSP/Servlets you can send an Ajax Post to the route you specified. You can easily find some tutorials on the internet on how to do this with a simple HTML form, you just need to do the same thing with Ajax. The question is: why Java? Edit: If you really need it to be with Java, and you're a beginner, study JSP. If it don't have to be Java, go study something more recent and with focus on the web, like NodeJS or PHP. Either way, you should study HTML and the basics of HTTP request/response and after that, if you have to do the request without reloading the page, study Ajax (nowdays the JS Fetch API).
I guess this replaces lodash.get right
No more npm-things, we only have limited time to create real values for you, or we need time to have nice sex to have more children who use npm-things.
Console.log(“hello world”)
I've spent a lot of time working with (and trying to perfect) similar stacks to what you describe. Here's the stack we've built several servers on: - [Koa](https://koajs.com/) webserver - Basically a trimmed back Express with better support for `async/await`. - [Knex](https://knexjs.org/) - SQL query builder with built-in support for migrations and seeds - [Objection](https://vincit.github.io/objection.js/) - Very light ORM built on Knex. The main reasons I use this are: simple eager loading and schema validation using [json-schema](https://json-schema.org/). You could skip this if you want to learn more about complex joins. - [Jest](https://jestjs.io/) - Test framework And some useful utilities I almost always end up needing - [bcryptjs](https://www.npmjs.com/package/bcryptjs) - For hashing/validating password - [normalize-email](https://www.npmjs.com/package/normalize-email) - For making sure users aren't creating multiple accounts using different variations of the same email. - [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) - Great for sending things like password reset or invitation tokens without having to keep track of their state in your database. - [dotenv](https://www.npmjs.com/package/dotenv) - Lets you load default env variables from a `.env` file. I also recommend reading through the [12 factor app guidelines](https://12factor.net/). I've found these best practices to be very helpful.
That’s very interesting!
Thank you! I will check that out.
It turns out the array “maps” were not coming back empty but instead just can’t have .length called on them... and apparently can’t share console log statements with strings... I still don’t understand WHY they behave like plain ol’ arrays in some places and not in others, but it seems that they work normally in all cases (that I’ve encountered so far) besides these two. Hope this helps someone else if they find themselves in a similar weird situation!
Hi /u/slugname, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 What's nested in what? 🤔 The access token?
Wow thanks for the info, I had actually just replaced jwt, for express-session, simply to give myself an excuse to mess with redis stuff. It didn't occur to me to keep them for the password resets and and invite stuff. Sweet tips :D
&gt;I'm working on a node-less environment I'm just curious, could you expand on that: why?
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
question could not be more vague
included a license
I agree, if you dont need java go for Node and check out the Fetch API
Half the shit I've had to develop at work didn't need to scale and never would. AI is a meme that is hardly ever useful. And unit testing in php with laravel is a dream. You're asking for useless shit that most companies don't actually need.
 // Native const sortBy = (key) =&gt; { return (a, b) =&gt; (a[key] &gt; b[key]) ? 1 : ((b[key] &gt; a[key]) ? -1 : 0); }; I think I'll just use Loadash :)
As a beginner, I can confirm this to be the case.
console.log(‘hello world’);
*with wordpress
Dunning-Kruger called and they said you should look in the mirror. I'm not the superstitious coder, you are. If you had any skill you wouldn't be writing examples of code that don't need semicolons. Over and over and over. Yet you still do it. You're a hack.
Whats in these fucking seats man, cactus?
Yeah, so I'm working on a web app that's meant to be kind of embedded inside a native desktop app and used from within it's own interface. We have a limited JavaScript engine, and we want to have as few dependencies as possible. So node modules are out.
Hasn't this exact site been shared on this subreddit more than a dozen times at this point?
Hi /u/zeke13210, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mrcarasus, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mrcarasus, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/reoji, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/archivedsofa, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rajajaganathan, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
http://www.javascriptteacher.com/node/ Enter any e-mail address, even 10 minute mail or something. Enter any valid Twitter account (even if it isn't yours). Boom, you got it. It's not worth checking out but it works.
Hi /u/Miisterii, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yanina_s, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rwieruch, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hardasspunk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Ahh I didn't think about making something up! I'm always expecting some authorization step. I'll modify my initial comment once I've verified I can get it.
Hi /u/Clay2905, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Nano layout is broken on safari.
Oops sorry 🤦‍♂️😏
As I said in my text, I cannot test it on iOS devices but it would be great to get some more info's so I can fix it :)
Beautiful!
How is this a low effort content?
Thanks :)
That's what the upvote button is for
Blimey, if that's too much for you...
To me there's nothing wrong with taking advantage of the convenience of libraries, *Of course* if I can do `arr.map( x= &gt; {})` I will instead of `_.map(arr, ( x= &gt; {})`, but for other things ... why waste mental energy when a tool can let me focus on the important stuff.
I understand and agree with the sentiment, but we have different ideas of where we draw the line... :-)
Thank you for introducing me to the phrase *code golf.*
Wow I've actually been checking out the latest version 6 of Electron Forge and was very sad to see they no longer had the React/Typescript/Sass template from v5. I will DEFINITELY be taking a look at this because everything else I've found has been outdate or not working... im too noob to understand how to ever put all these parts working together like this. Thank you!
This is actually pretty cool! Are there any customisation options for the readme;
Looks great, nice job
It's too tall and the positioning of the elements breaks as the window is resized [https://imgur.com/a/eomshLp](https://imgur.com/a/eomshLp) I haven't had a chance to review the code on GitHub but Monolith works perfect in Safari. So, whatever you are doing differently between Monolith and Nano is what breaks in Safari.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/PA3unZH.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20er3ctyb)
Probably in the future yes! For now you can change the README source yourself after generation
Changing the final markdown is pretty obvious. Thanks anyway for the effort !
well create-react-app gone a long way.. if you do eject and see all the build scripts youll see a LOT of stuff there, so noob or not, it really dont make any sense to try create it yourself.. also if you dont eject you can be alwase stay updated decause all the scripts are in `node_modules`. I patched it up for a project im doing now for a client its still a bit rough around the adges so ill probabky add some more stuff there as I go.. really love building a desktop app :)
wat
Console.log(“bye world”)
nice code. pretty advanced stuff with ::pseudo elements and a nice, straight-forward js. congrats!
Was working on writing up a comment about how the colors didn't reflect properly, then had a doh moment. had the darker reader extension enabled which was messing with the colors. &amp;#x200B; Looks nice, I like that there are different themes. Would like to see a copy button, maybe a toggle to enable auto copy on color change?
You might like the [code golf stack exchange](https://codegolf.stackexchange.com/).
Hey, I've another doubt which is not so obvious enough to just google. If you do have the time to have another look, kindly help me with it. So I have this app and yes it's functional, I've tried to make each component as reusable as possible but when I try to look at something like the searchBar on top of the app, it still doesn't look that very flexible. Yes, if you just look at the searchBar component, it seems like it has onchange, onkeyup, input as props and it can be hooked anywhere. But it's handlers lifted up much higher into a component which has few other states for searchBar component's siblings. It made sense to liftup state since it's siblings do need some of the results from the state of searchBar. But it still feels like it could be made more reusable where it's easier to use searchBar with it's handlers in say another sibling of where searchBar's current state is lifted into.
Markdown being a superset of HTML, why bother even putting any markdown in the final output? Just use a normal static page builder and rename the `.html` to `.md`.
One reason because GitHub markdown does not support all of HTML tags (thus calling it a superset is not valid although not entirely wrong I suppose)
My initial guess is you need to bind com.Msg.decodeDelimited to `this`. If you use fat arrow instead of `function` to declare decodeDelimited you should get auto-binding going on for ya, saving you the hassle.
I feel less like a Navy SEAL and more like a russian backcountry mechanic. If it fits, works, and has a low probability to explode right away, then it's fine.
In a nutshell, you're doing this: accessor = Msg.decodeDelimited accessor() // `this` is not `Msg` here You want `function decodeDelimited() {}.bind(Msg)`
OK, I dont have access to the decodeDelimited function though, its autogenerated. So I guess theres no way to use implement this pattern with the way the function is.
lol
Thank you so much for making this!
Sure there is const autobind = o =&gt; { for (const k in o) { if (typeof o[k] === 'function') o[k] = o[k].bind(o) } return o } msgIdentity(autobind(com.Msg).decodeDelimited, reader) Or const decode = (...args) =&gt; com.Msg.decodeDelimited(...args) msgIdentity(decode, reader) etc
&gt;autobind(com.Msg) You beauty thanks
Lodash's orderBy is miles ahead of any sorting functions provided by es6.
what the heck, why not just fruits.sort((a, b) =&gt; a.amount - b.amount) fruits.sort((a, b) =&gt; a.name.localeCompare(b.name))
*Fewer* tests. But yeah, types eliminate the need for entire classes of tests. Testing things like "it should throw an error if you pass in anything except \_\_\_" is a waste of time.
Right, It took a minute before I went 'wait what's that. *cough ArraytoCSV*'. Though I did learn about AllEqual and DeepFlatten.
 RemindMe! 35 days
I will be messaging you on [**2019-07-19 00:43:47 UTC**](http://www.wolframalpha.com/input/?i=2019-07-19 00:43:47 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/c0982f/update_after_one_year_pickr_v100beta_is_finally/er3uecn/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/c0982f/update_after_one_year_pickr_v100beta_is_finally/er3uecn/]%0A%0ARemindMe! 35 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I love it! How would you feel about someone using this make an angular library with it?
Being able to use static types for variables (but of course only optionally)
Thanks for much info
Monospace font for article body and sans serif font for the code samples...interesting choice.
I tried it out. Not a bad idea. Pretty neat little project.
This is nice!
Because markdown is designed to be nicer to read/edit in plaintext. Otherwise, it’s basically shortcuts for HTML elements.
This is awesome! Gonna use it for my unnecessary real-time [portfolio color picker](https://jonaskuske.com/connect), which currently uses some other picker library that I manually patched to use a JPG of a color palette... Very hacky the whole thing :D Offering this as a Web Component might also be a good idea :)
console.log(`hello world`)
Seems there's been quite a lot of negative/rude questions being asked. Let's try to keep it civil, folks; we're all programmers here
I think the `SearchBar` itself is as small of a unit as you are going to get and the way you are passing props in this case to make it flexible. You may want to "tighten" up the API a bit and not expose internal details that the SearchBar may be concerned with e.g, cursor seems a bit weird to be living outside of the SearchBar. Im not entirely sure what the use-case there is to track that actually. i.e, Your current "containers / pages" should probably be folders and you'd put in `SearchableSongTable` in the `FetchSong -&gt; Home` folder instead. I would envision your "components" folder to be your "pure/low-level" components similar to how material-ui/core is set up where you have those things as building blocks. In the real world what this ends up being if you use material/antd/react-bootstrap you end up "wrapping" these lib components with your app styling and re-exporting the new components that are basically "branded" to your app, if that makes sense. ``` - components - SearchBar - PageContainer - Title - Header - Footer - LoadingIndicator - Table - StatBar - ...etc nothing specific like `SearchableSongTable` - pages - Home - index.js (export out the home view) - SongTable.js - Details - index.js (export out the details view) - SongDetail.js (should put specific sections of a page here as they are more "contextual" and most likely not even reuseable across other pages potentially ``` It kind of sounds like you are asking how to deal with "prop drilling" and shared state between the SongTable and SearchBar. Without "prop drilling" you'd be forced to step into the world of reusable hooks, Context API, or redux i.e you will need state management to handle these "cross-cutting concerns." Depending on the state management framework you pick there are different approaches but the basic idea is, 1. You have some "global/shared" state (e.g, redux has "store", context api has "Provider", and hooks has useState) 2. You have some "actions" you can do to perform a state update (e.g redux has "dispatch" and "actions creators", context api would need a custom handler added to the provider, and hooks youd need a custom hook to pass back state + update handlers) 3. You have your individual components become "state" aware (e.g redux has "connect", context api has "Consumer", and hooks youd have to have some global hook) Hope this helps?
Using fruits.sort((a, b) =&gt; a.amount - b.amount) Is wrong. The spec says that you need to return -1, 0 or 1. There are browsers (or versions of) where this trick will not work.
Seems nice. Thanks !
This... Is nice. Will give it a star later and try it :) Lot's of tedious parts taken care of!
Great idea!
Hi /u/amana_araragi, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
QCObjects is an open source technology based in JavaScript that allows web developers to code targeting desktop and mobile devices into a runtime components scope. It will be officially introduced in RISEConf 2019 in Hong Kong an I hope to collect as many feedback as possible before that event! Please give a star if you like the code or you can contact me if you want help. Thanks! https://github.com/QuickCorp/QCObjects
Hi /u/amana_araragi, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/dMHQEaZ.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)
why the photo ?
Did you ever prevent bugs with snapshot tests? What kind? I’ve completely stopped writing them. They make my code completely inflexible to simple changes, slow me down and do not provide any guarantees that I care about.
Ops, thanks for pointing that out the mistake in the title! xD &amp;#x200B; Just to understand, would you consider writing tests for invalid inputs as a waste of time in dynamic languages too or were you referring to the typed ones?
The difference is that the left example has the render call inside the tick function. The right example has it outside.
I usually solve this problem from the client side. If you really want a server side approach then you should put a cap on new token requests or you should answer with the valid token.
 Array.prototype.asyncMap = function(callback) { return Promise.all(this.map(callback)); }; function getSquareSync(i) { return i * i; } function getSquareAsync(i) { return new Promise(resolve =&gt; setTimeout(() =&gt; resolve(i * i), 2000)); } async function run() { var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; var result1 = arr.map(getSquareSync); console.log("result1", result1); // result1 is [ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ] var result2 = await arr.asyncMap(getSquareAsync); console.log("After 2 seconds result2", result2); // result2 is [ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ] } run();
I’d combine the request time with the user id. However often this is done with a sessions DB table, where the key is a UUID stored as a primary key. And the time the session was made is a column. Then you can generate your access token in several ways.
How can we solve this on the Client side? My logic is that if the error count reaches 3, we logout. So 1st Function get the token right on the 1st try But the 2nd function which runs parallel will have the old Refresh Token and will call 3 times and it Logs out
Absolutely! I totally understand the inflexibility that you're talking about, and I would hesitate to recommend it for smaller projects (both in scope and in the number of developers). In my (our) case, there are a lot of developers touching many areas of the code, as well as the common "ui library" comprised of generalized elements. This means it's much easier to see any changes affecting other parts of the code when snapshots are a given. An example I've seen is a helpful developer adding a new optional boolean prop and setting a default value to it, in a commonly used component. In these cases with snapshots you can immediately see the places where the new behavior is not desired and fix them. Personally I see it as a "seal" of the wanted output of the component, once you're finished writing it and want stability. Snapshots don't lend themselves well to TDD as you have to have finished writing it for the snapshot to make sense. This is one of the main criticisms of the "against" articles I linked at the end. Also, using snapshots in areas that are under heavy development also feels wrong, as you noted. The main benefit for us is that there is a very explicit step of confirming any changes to other components that use it.
Sounds good to me; only question is why you need an extra node for SSR? I run PostGraphile, Passport and Next SSR all in the same Node process when starting out (can split them later if it makes sense). I recommend using GraphQL persisted queries with this stack to avoid abuse of your API.
[https://gist.github.com/nsisodiya/54e2847f8cef1371b8ac227d27a867cd](https://gist.github.com/nsisodiya/54e2847f8cef1371b8ac227d27a867cd)
Sounds awesome :) Feel free to do so, there's already an [ember-version](https://astronomersiva.github.io/ember-pickr/) of it.
If you link a github page on reddit it will take the creators profile picture as the preview picture.
If you only want a string with integers and commas, why not just replace everything that isn't one of those with a blank string? var input = '1,\n2,3'; alert(input); input = input.replace(/[^\d,]/, ''); alert(input);
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Best javascript date picker libraries](https://www.reddit.com/r/programming/comments/c0i3lc/best_javascript_date_picker_libraries/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I feel personally called out for my half-assed package.json files. Why you gotta do me like this bro? I thought we were friends.
It's just a race condition ... you have to manage some sort of lock so that, even when the client is doing parallel request, it does a single request for a new token ...
You can replace "space symbols" (tabs, \\n, \\r, space) by space. `input = input.replace(/\s+/gm," ");`
Who?
Thanks very much, going to check that out. I was told that splitting the nodes was a good idea, but glad you’ve done it a different way with success - that should reduce complexity and maybe hosting costs somewhat.
That's not the alternative. The alternative is structuring code in a way that null checks wont have to be done. It's unrealistic to get rid of all null checks but if you have to do one 4 levels deep, then something needs to be designed better.
It's a bug in Safari's implementation of css grid - I see this often in my own work too, but I can't remember the solution....
What do you use instead and what do you value?
The guy who choose the name "Pika" certainly doesn't speak Portuguese (it's an ugly slang for "penis").
I'm running a very similar stack right now and I'm loving. I decided to make the switch from .net core and I'm happy I did. I'm using Typescript from end to end, and I'm sharing types between the ends which just feels so clean. Also I'm really loving Emotion's styled components right now. If you haven't tried any css in js it might be fun to play around with. I'm using Objectionjs instead of Postgraphile in my stack. Love the experience, but I'm kind of wishing I knew of Postgraphile now. Looks really powerful. Do you like it so far? Anyways, this stack will work great for you. Easy to use, simple to get started with, scales great. And good call on splitting out your api. In the future it'll make your CI and deployment processes smoother and easier to manage. Git history will be cleaner. Easier to scale. There's so many benefits and really no reason not to. No need to worry about a reverse proxy, just throw CORS into Express and scope the requests to only your client. I'm not sure about load balancing yet, this isn't a problem I've had to face, but I've read it's better to use something like Cloudflare to manage it for you then waist time rolling it yourself.
I'd probably use Canvas instead. /s
Thank you very much. Lots of useful info here to work through. I haven’t actually tried postgraphile yet, this is just based on research.
Is it weird that this makes me more likely to use it?
Hi /u/patrykmaron, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Max_Stern, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/CanadianLemur, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/D10S_1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AkhilxNair, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NThompson_, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NThompson_, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/algeoMA, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/s_o_r_r_o_w, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thewanderingsalmon, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yash__solanki, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I don’t fee like this is a support post, but I’m a new member of the community so I don’t know how it works yet. Sorry for breaking any rules.
npm run: I'm about to end this man's whole career
This looks great, death to legacy module formats!
`test[0].number1` should return `1`
You have an array of a single object. So to get the object you do “test[0]” and to get the value at a specified key you do “.number1”, so it’ll be “test[0].number1”
Genius, thanks!!
Love pika?
Yeah, looks like this is it. Here's a possible solution: [https://stackoverflow.com/a/44773109](https://stackoverflow.com/a/44773109) &amp;#x200B; If no one gets around to it, I'll throw a PR your way
Really? That's not what MDN says: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort &gt; If compareFunction(a, b) is less than 0, sort a to an index lower than b (i.e. a comes first). &gt; If compareFunction(a, b) is greater than 0, sort b to an index lower than a (i.e. b comes first). It even has an example using subtraction. What I do know can cause problems is sort stability (namely, what happens when 0 is returned, which depends on the sorting algorithm that the browser uses and was unstable in some browsers until very recently). Do you have a link for your claim?
Yes, but if you're generating it programmatically, and 90% of it is going to be HTML, surely anyone tweaking it later needs HTML anyway, and so throwing some markdown in actually confuses matters. I am a huge fan of light markup languages. Building a markdown page which is 90% HTML is not using a light markup language.
I built the [fasy library](https://github.com/getify/fasy)to provide async (serial and concurrent) iterators like map, filter, reduce, etc, as well as async function composition and transducing. It may be a more robust way of approaching this and worth a look.
Not everybody is in charge of the APIs they are consuming. If the response you are receiving has 4 level nested objects, then it's out of your control. The "something that needs to be designed better" is the language, nesting objects and classes is common and absolutely fine, especially in many complex models - the language should make dealing with this easy.
What a shitty deal.
Awesome! I started it last night.
pt-br :) &amp;#x200B; we can correlate for example "levas com a minha pica" but we don't use it here (same as your use of "pinto").
Turns out async map is a bit more complex than both the tweet and the follow up code here w/ asyncMapP and asyncMapS (parallel and serial, respectively) There's a third use case that those helpers don't really address: chunked map. Chunking consists of running _some_ items in parallel, then when those are done, running some more until the list is depleted. Chunked async map is especially important if they map over calls to Node's `fs` or `child_process` APIs, since those APIs throw OS errors if there are too many parallel executions at once, but are expensive enough that you don't typically want to run hundreds of them serially.
Switching to yarn lol
That still hits the NPM repository. I mean, it gets you out of the NPM CLI but that's about it. I think it's a matter of time before something else pops up and everyone runs (not walks) to it because of the bad vibes coming from NPM recently.
This is very handy!
You all should check out Entropic
Excellent. Great work.
How can I, as a private individual, somehow contribute to any type of anti-union effort either with monetary donations or some manner of work&amp;?
Like Go?
Link?
https://open-registry.dev/ is already working and mirrors the NPM packages.
You want to contribute to anti-union efforts?
Correct.
It's named after the [animal](https://en.wikipedia.org/wiki/Pika)
Hi /u/webseo8800, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Then dont use their models directly. Map it to an intermediate model.
Really depends what load you're dealing with; adding SSR to the same server that handles your API can increase API latency when your SSR is under load, but often the simplicity of scaling one thing outweighs the benefits of splitting them in two, and many projects don't even get to a point where it's an issue so YMMV.
Corporations don't give a shit about you. I hope you never have to learn that the hard way. Unions in the tech industry are going to be really important. Especially game devs who have to basically give up their lives for a game only to be laid off after a year when the game is done.
The first thing I thought of was Pikachu. I'm also now disturbed that Pikachu refers to his/herself as an ugly penis.
I've been working in this industry for 20 years and I've observed plenty of other industries. Unions are a politically correct way to say "Organized Crime." And yes, the corporations aren't supposed to deeply care about their employees. They are in the business of making money, and the pay and benefits are what they trade for getting useful work out of you. Likewise employees are not supposed to have deep emotional attachment to the corporation. At will employment is the best thing in the world. The moment I don't like something I have an opportunity to walk. And if they don't like me for some reason, they should have every right to fire me.
I've kinda [managed to fix it](https://github.com/Simonwep/pickr/commit/a2c70608840bab18f293e458e5f235bf55536c4c#diff-3ac4ee899d17ec62ff097f2fd4773539L157) in VMWare. Many thanks to [/u/angrydeanerino](https://www.reddit.com/user/angrydeanerino/) for the SO link!
That's an endless source of jokes in Brazil.
A package manager has enough employees to warrant a union? What a world we live in.
https://github.com/entropic-dev/entropic
How does it compare to unpkg?
github is going to have package repos for just about everything. I'm not sure exactly what Microsofts goal is with it, but I'm feeling some worry about that, considering their past. YES I know they are much better now.. but still.
While I agree with everything you say, I still support unions as a necessary evil. Unions are not needed when laws exist to protect an individual. Unfortunately governments no longer work for the people and corporate interests are now eroding our rights.
I don't feel this is a rights issue. We don't have a **right** to the pay and benefits that we think are good. It's something we negotiate based on the value we bring to the company. And if the negotiation fails, then we go our separate ways. A corporation should not owe anything to an individual aside from what they agreed on beforehand and codified in a contract.
And adopt the burden of maintaining a model that evolves independently of theirs?
One suggestion would be for you to go pound sand.
You must be absolutely insufferable to work with.
Aww. Do you always get so mad when you discover someone disagrees with your dogma? Do you need a safe space right now?
Because I don't like unions? Yea, I guess I must.
Bingo.
If you don't like that idea, another one would be to lick your CEO's boots and maybe ask for less pay and additional spankings? Just ideas to help your anti-union efforts.
I used to think the same way. But now in an age of automation and gov'ts allowing foreign temporary workers and outsourcing to replace jobs, I am not sure that the 'market' will balance out to a positive future.
So mad. Are you going to hold your breath?
Buddy I'm helping you out with some ideas.
Thank you, friend, I appreciate your time and effort.
is not stable yet- but should be the PM we all use once it is imo.
Love static types, cant get enough of the integration within modern IDEs as well
I have nothing against outsourcing. If it makes financial sense for a company to hire workers from India or Lithuania for $10 per hour, then that's an excellent business decision and they should absolutely go for it. That said, I've never once seen outsourcing work well in the long term. It saves a bit of money initially, but the business costs of bad code, miscommunication, etc. are always compound. In the end, the outsourced team gets the boot and US based engineers are brought in to try an salvage whatever still might be salvaged or just redo the whole thing altogether. And these engineers are getting paid VERY well.
Every employee deserves the right to collective representation, no matter how few their numbers. Corporations have lobbying groups and trade organizations that advocate for the collective benefit of their membership financed by dues. Their pursue their individual self interest while cooperating with competitors when those interests align. Yet somehow people think this right should not extend to workers.
That 'great pay' still has less purchasing power every day. When gov'ts can declare inflation at an all time low, the actual cost of living has doubled or tripled. Gov'ts just print more money devaluing the pay even more. When pensions are pegged on artificial inflation rates, the end result are employees not getting paid what they are due after a lifetime of work.
Wait so, are you also pro child labor? Or slavery? Because trade-unions were literally at the heart of ending both. BTW.
Awesome, Thanks for Share . [Programming!](https://funaf.net)
you are such a fucking idiot lol, must really like the taste of boot, huh?
Hold on, that's an entirely separate issue altogether. Again, pay is a function of the contract a person negotiates with a company prior to getting hired. If a pension is a part of that contract — great. The details of how it works are outlined before both parties sign the offer. Plus, pensions are mostly a thing of the past now. These days it's personal retirement accounts, which an employee is responsible for. A company may offer a match, but again the amount is known before a hiring occurs. I am not saying that there aren't problems in the lives of people. It's just that a comprehensively corrupt organization (which unions have proven to be) can alleviate these problems by collecting "protection money" from the aforementioned people. Yes, it might be tempting to ask the mafia, yakuza, you name it, for protection, but make no mistake, they are no more your friends than a corporation is.
Your right. I don't deny the corruptness of unions. I am only suggesting unions are my only recourse to protect my own interests against a corporation while being governed by laws ultimately defined by corporations interests.
Oddly enough, I had just watched a very good recap on how we got here. [https://www.youtube.com/watch?v=MO8hZlgK5zc&amp;list=LLvD3zf2cS6na4Cn9FkxT3nA&amp;index=2&amp;t=0s](https://www.youtube.com/watch?v=MO8hZlgK5zc&amp;list=LLvD3zf2cS6na4Cn9FkxT3nA&amp;index=2&amp;t=0s)
Provide some examples from your 20 years of experience observing all these different industries. Curious if your description "Organized Crime" actually fits, or if you're simply exaggerating. I support all efforts to allow workers to have more control over their workplace. Labor movements in several countries had to put up a long fight so that many of us can enjoy the decencies that we have become accustomed with today. Anybody willing contribute to turning back the clock a time where workers were worse off either has no historical outlook on the question, or has an overly-simplistic philosophy which poorly describes the problems you're trying to avoid dealing with.
Hi /u/zlemic21, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
pretty sure Webpack has never advertised itself as being zero config, correct me if im wrong
Whoa, that was neat. The name is kinda confusing, since it really involves HTML, CSS, and JS
Does going up on stage at JSConf Iceland and saying webpack is zero config with a slide that says zero config in a video which describes webpack as representing the “#0CJS movement” count? [https://youtu.be/jUTE7lmrS70?t=908](https://youtu.be/jUTE7lmrS70?t=908)
&gt;replace(/\[\^\\d,\]/, '') Thanks man. I had to make it `input.replace(/[^\d,]/gm, '');` to make sure it deleted multiple items but you saved me. I don't know why replace wasn't working before but worked in this instance but it worked so I won't complain. Thanks again and sorry since I seemed to have posted this in the wrong sub
I worked in a smaller company with a union. Basically unions form when companies treat workers like shit. So it says a lot!
It seems interesting that Firefox is more performant for loading a lot of modules in parallel.
lmao yeah that’d do it
Versus licking the boots of the union leaders? Guess what, I don't lick anyone's boots because I can FIND ANOTHER JOB. Unions had a place 100 years ago. We do not live in that world. If you buy into what unions are selling, you're either stupid or greedy assholes looking for free ride at the expense of everyone else. FUCK UNIONS and FUCK the lazy, greedy assholes who like them. You'll note the ONLY ones who like unions are the useless asshole who just stand around. People who actually work hard hate unions. Unions are run by corrupt assholes who fool people into giving them power. Look at teacher unions if you want to see the ultimate evil. Look at public sector unions if you want to see the ultimate in corruption. I fucking hate unions.
So, I don't agree with you but am honestly curious what you perceive as the benefits of anti-union? I'm not trying to troll but what do you believe are the pros / cons of unions.
But its not yet up to the same standard as NPM. Sure it'll get there but I'm not switching yet.
I'll take your money. Obviously you're stupid enough to give it away
Seems that its fine to make a local repository but you'd still need some source somewhere and they already say that it isn't that stable or fast yet
That's a great talk on the evils of mixing VC capital with open-source ecosystem. I was astounded that npm got series-A funding, but then again sub-prime mortgages were a thing. [https://www.crunchbase.com/organization/npm#section-overview](https://www.crunchbase.com/organization/npm#section-overview)
this company seems to have its fair share of drama. i am curious if unionization talks only started after the new ceo was installed.
I usually Lodash's [`chunk`](https://lodash.com/docs/4.17.11#chunk) function: ``` const results = []; for(const chunkValues of chunk(values)) { results.push(...await Promise.all(chunkValues.map(fn))); } ```
nice find!
The sindresorhus package p-map can be used to do a chunked map (and can also be coaxed to do parallel and serial if you preferred) by passing an object as the last parameter with a concurrency amount set [https://www.npmjs.com/package/p-map](https://www.npmjs.com/package/p-map)
This seems great, can't wait to try it! I would love to see an optional ability to traverse the project folder and use JsDoc blocks for automated documenting api methods that get dropped in the readme
You are right, we don't have a right to a good pay and benefits - and that's why unions exist. They give workers more leverage in negotiations.
Oh look, a 20-year old who read The Fountainhead. lolz
Using javascript libraries hosted by third-parties is a huge security flaw in any modern web site or web app.
Hi /u/maximus77899, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Is it in the realm of possibility that a union can form form within a company where the union leaders erroneously think that their demands are affordable when in reality they would kill the business? If so, then as outsiders without specific knowledge of the demands and the math behind whether or not they are feasible, is it ever possible to pick a side?
Not OP, but I am sure s/he meant that _conceptually_ testing inputs is a waste of time, as it should happen automatically, but with dynamic languages you have no choice but writing them.
 ## It depends on jQuery &amp;#x200B; Very nice.
https://www.nrtw.org/ National right to work defense fund.
It’s possible, as far as the know, but the success of the business is still at least some priority of the union since the union cannot collect dues from laid off employees. If the whole business folds the union goes down with it.
Correct - in my hypothetical, the Union, despite its own interests, erroneously believes that their demands are affordable, when in reality they are not. In such situations, one side makes a claim of unaffordability (the Management), and the other side (the Union), essentially accuses the Management of lying or greed. There is another dimension as well, now that I think about it. Is it also possible for bad actors (perhaps competitors of the business) to make a deal with these Union leaders to mislead the employees and sabotage the negotiations? Is this a crime?
I see a lot of people recommending "You don't know Javascript".
See the entire games industry. "Crunch" is just another word for sweatshop hours that were supposed to have been eradicated 100 years ago with the 40 hour work week.
I don’t. I’m learning. If they want to be assholes... such is the internet. Just hoping someone is willing to help.
I’ll look into it. Thanks!
What's jQuery?
Depends on jQuery? Just use chess.js instead.
Github packages baybe!!!!
No, you should use native code. It's better for developing games. /s
Hi /u/ambersoren91, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks
I think their goal is to lure in Enterprise users to host their packages on the site within private organizations, similar to what NPM does, and market maintainability and security for those packages to the corporations to use. From an Individual user perspective, it's to get developers such as ourselves to use their repository, become acquainted with it, to start crusading for our companies to use Github instead of NPM for whatever reason, which is the same thing that happened with Yarn and NPM when Yarn first came around. It had better features, but people did jump ship. &amp;#x200B; Ultimately, it'll mean that you and I get to reap the benefits of having ALL of our code in one central location, instead of hosted on Github, and then distributed through NPM. It'll cutout the middle man, and retain users on their site.
Important: not trying to sell/promote books here :p. Just felt like it was a cool topic to share :),
Are corporations forbidden from forming unless they join and pay dues? Without right to work legislation, unions are nothing like lobbying and trade groups.
Compulsory membership isn't a requirement of forming a union, that's up to the specifics of the bargaining arrangement reached. Generally though, all employees will benefit from collective bargaining, so it's kinda like taxes in that sense. Sucks to pay them, but it's better than the alternative. Most of the places you'll see arguing against that represent the companies, who have a vested interest in dissuading union membership.
Don't think we can really conclude anything from that for now, network throttling on Chrome might have a bigger impact than expected.
Although you added affiliate links - you should mention that.
That's the kind of thing that'd be sorted out at the bargaining table. "We can't afford that" is the go-to argument and shouldn't be accepted at face value, if it's genuinely unaffordable then it's up. to the company to counter. That said, if a business can only survive by underpaying and overworking people, seems like it'd be a net positive if it stopped operating.
Yup! Good call out. I did add affiliate links. I was wondering if I should or shouldn't. \*shrug\* recommendations accepted.
Ahh I'll remove them. That's not what this is about \*changing this now\*
I didnt suggest to remove them - just mention it :) You build this site, so its totally fine, if you earn a buck
To be clear, I think any time you have a long accessor chain, that's a code smell. I declare variables with descriptive names for every stupid intermediate value. But I don't see why you couldn't just have it log a warning if you try to access a property on undefined. The silence was the problem, keeping you from realizing that you're accessing something incorrectly, or your data is broken, more than the actual behavior.
No throttling. FF 67: 1008/426 Chromium 75: 1064/351 Both have several same standard addons.
What, if anything, does your team have to do with Chakra or ChakraCore?
ES6 is vanilla JavaScript.
Probably both, because you will know which one to choose
wow did not know that lol
[removed]
thanks for the list will check it out
I am wondering if maybe you are thinking of Typescript which can be very handy especially if you are coming from languages like C++, Java, PHP, Python, etc. It gets compiled down to an ECMA Script of your choice (depending on what kind of browser support you want).
These negotiations boil down to two sides arguing about the definition of "affordable." If they strike a bargain that destroys the business, because both sides have agreed, they are equally to blame. Any company that could be brought down by union negotiations isn't likely to be a threat to competitors. Would make a good plot for a silly comedy movie though.
They all seemed appropriate to me.
6/10 of the books are on my shelf I would also like to add the phoenix project/ Clean Code/ Code Complete and a rubber ducky
Right to work isn't anti union... It's anti no choice.
no
Oh yea! those are great. I have the Phoenix project on my shelf too!
Like others have said, ES6 is vanilla JS. And yes, you should learn it.
you should learn typescript too
why
And plain js that you have already "learned" is also vanilla js.
Vuepress it seem integrated via API... however NUXT JS is more interesting
Why do you post about things you are unaware of? "ES6" \_is\_ vanilla ECMAScript.
If you can find a lobbying group that is explicitly anti-union rather than right to work be my guest. I've not found one. Even though i myself wouldn't want much to do with it. I agree with you that RtW is more about ensuring that workers and employers always have the right to negotiate with each other directly than it is anti-union. I've not legislation put forward that seeks to make open-shop unions illegal, even in decidedly red states.
I agree. Keep it on the site. You could tl;dr as a summary here, although it might not convert to clicks.
I honestly find the concept absolutely ridicoulus. If that guy can find other what I can only assume are misguided morons like himself I suppose kudos to him. But I've no intention of helping. I just wanted to note that RTW isn't really anti union though it does have a negative effect on union adoption.
We're in agreement then i think. I find the idea of removing them outright absurd and I'd wager most legal scholars agree.
You should learn to google
I swear I read "ES5 or ES6" lol
It could help you in the future. It’s becoming more popular and some frameworks use typescript. It’s designed to speed up development, but it might be better to spend time in other areas first.
I got the opposite results in Chrome: [https://i.imgur.com/EmJjZ3W.png](https://i.imgur.com/EmJjZ3W.png)
Nice list, but by God is that navigation awkward!
Post doesn't play on my old Firefox. Does anyone have a text version? Do any of the books address backward compatibility?
It's actually very impressive how fast 100 modules load over HTTP2.
This is very interesting, thank you.
\- pragmatic programmer \- design patterns \- javascript the good parts \- async javascript \- functional programming \- lean startup \- high output management \- the coaching habit \- drive \- managing humans
Thanks! I was trying to scroll down this whole time
ES6 is just a revision of the language, like Python 2.7 or Python 3.0. Note that after ES6, new revisions of JavaScript have been published on a yearly basis, and as a result have also taken on a new naming scheme using the release year. ES6 was released in 2015 so it is officially named ES2015. People still use ES6, though, since previous versions were not by year (ES5, ES3...) and it's a little easier to say/type. Plus the specs still say "#th edition" which plays nicely into that format. But you should know if you see ES2015, it also means ES6. ES2017 would mean ES8, or the 8th edition of ECMAScript (which is effectively JavaScript). Vanilla refers to the use of the core APIs without other dependencies like React or jQuery. This generally also includes the Web APIs provided by browsers (DOM and all that). That's an extra layer of functionality on top of the core language that is specific to browsers. Node, similarly has its set of APIs specific to Node. Once you start adding additional libraries or frameworks on top of these you start losing your "vanilla" status.
Hah - nope, but they do talk about pragmatism. 1. Pragmatic programmer 2. Design Patterns 3. JavaScript the Good Parts - sorta - some sort of book that makes you delve deep into a language 4. Async &amp; Performance - You don't know JS series 5. Functional JavaScript 6. Lean Startup 7. High Output Management 8. The Coaching Habit 9. Drive - Daniel Pink 10. Managing Humans
I think this is a great project, but canvas charts all seem to share the same problem: They're not accessible. A screen reader absolutely cannot read these charts. Accessible-friendly charts will usually let the user step through the chart values (or along either axis) with the keyboard and present a screen reader-friendly element with the axis values at that point. Otherwise if accessibility isn't a concern this is a nice library.
I believe it is a JavaScript framework for playing cassette tapes
I'll investigate - there are things that work about it and things that don't. Any commentary is helpful.
Thanks!
the real MVP OP should read a book entitled "how webpages are supposed to work" or "stop sacrificing usability just so you can show off"
OP should read a book entitled "how scrollbars work" or "stop sacrificing usability just so you can show off"
Definitely Vanilla Javascript. Docs and download can be found here: http://vanilla-js.com/
That webpage is shit, lol
Needs an indicator to swipe right on mobile.
I see Clean Code recommended often too. OP have you read that one? If so, is there a reason it’s not on your list?
Agreed, it's a fantastic read
I haven't read Clean Code yet, but I've definitely heard good things. I just read the abstract, and the first few pages - seems like a solid recommendation. I wanted to focus on 2 things in this post. 1) cover the different types of books that you can learn from. 2) highlight some books that aren't about code, but highlight skills/books that aren't overly emphasized in engineering organizations.
When will you be reading the one where it suggests not using horizontal scrolling?
https://www.privacypolicies.com/blog/ftc-affiliate-disclosure/
Ahhh thanks. I removed the links anyways. Never done that whole thing before, but was wanting to try it out. Noted for next time.
This would help but having to instruct the user is a sign of failure. Users already know how to scroll. Use existing know how
No problem! You're new to it and you're learning. Next time will be better. Thank you for the list!
This is a great list. You should probably read some books on fundamental graphic/ux design principles. Followed you on twitter, though. I hope we cross paths cuz you seem like a cool dude.
Oh for sure. I’m not a huge fan of horizontal scrollers. But if you absolutely must, you need to guide the user somehow.
Hi /u/garboooge, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I think you need a UX book now. That site is not intuitive or behaves as expected.
What a terrible f'n website. Thank you so much for listing them here.
Sure thing.
On my phone it became non responsive by the fifth page. Seems like it may have a memory leak, or else it's simply loosing reactivity for me
He should definitely read the "Design of everyday things" and spare use that annoying navigation.
doing the lord's work
No Phoenix project love ?
Someone has to do it. Lol
Clean code is a must read IMHO
Lol. You would think an article about becoming a better software engineer would be hosted on a website with better software engineering 🤪
I bookmarked and kept a note on Google keep for this book, Hope this will be my nest reading list after finishing my JS Series. Speaking JavaScript [http://speakingjs.com/es5/](http://speakingjs.com/es5/) Eloquent JavaScript [https://eloquentjavascript.net/](https://eloquentjavascript.net/) JavaScript Allongé [https://leanpub.com/javascriptallongesix/](https://leanpub.com/javascriptallongesix/) You Don't Know JS [https://github.com/getify/You-Dont-Know-](https://github.com/getify/You-Dont-Know-)
A Chrome extension that lets you do quick in-browser post-render computed style checks without leaving your browser: [https://github.com/hchiam/in-browser-style-linter](https://github.com/hchiam/in-browser-style-linter) It's got a niche use at my workplace. Slightly different use case than headless tests.
An app for the Google Assistant: [https://github.com/hchiam/code-tutor](https://github.com/hchiam/code-tutor)
Would it be cheaper with Digital Ocean instead of EC2?
Yeah what the fuck is up with that website?
So you're saying if I read all 10 of those books, I'll be making websites just like it?...
Can somebody recommend the order in which I should read them ? I wanna try reading them In the next 6 months.
Great article, Well explained
How can you "structure code" in that way without having an entirely flat data model or without maintaining state as global variables? I can't imagine a large application that doesn't have deeply nested data, like user.account.email or session.device.token, etc.
How about a regular page layout?
Secrets of the JavaScript ninja 🙂
Project Page (?): https://github.com/tarekraafat/autoComplete.js *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I fucking love FCC.
It's been a while since FireFox left Chrome behind in terms of technological advancement (close to zero cost web assembly boundary, parallel css rendering and now it appears http2). That may not be permanent but we'll see. We found also that Chrome has more bugs, which FireFox simply does not have. Like Resize Observer issue. People however still use Chrome mostly. And some developer claim that Chrome Dev Tools are better. I personally find that part down to preference.
A better insight to functional programming with JS: https://mostly-adequate.gitbooks.io/mostly-adequate-guide/
Wait.. Is the creator of the site the person who we should be inspired by to read these books?
i'M a WeB dEsIgNeR!
Perhaps start reading some UI/UX books ;)
But then how can they show off their coding prowess?
Everybody recommends Clean Code. Too many people treat it like a bible. I think it goes a little too far with some of its guidelines.
Totally agree. Made a horrible website, put amazon affiliate links and pasted that shit onto reddit
Thanks for mentioning “Speaking JavaScript”! By now “[JavaScript for impatient programmers](https://exploringjs.com/impatient-js/)” (free to read online) is probably a better choice: * SJS is more thorough, but only covers ES1–ES5 * JSFIP covers ES1-ES2019
That's exactly what I was looking for.
Everyone take note on how not to design a website.
It's not rocket science, there's an animation on page load that clearly indicates swipe to the left.
Its great on mobile Android, these moaners just don't like different things other than the mundane crap that they can make.
Back ender that "knows front end". Bane of my existence.
Great! If you have any questions, ideas or feedback please let me know
Hi /u/redditusernamesadf, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
That's another one for the fire.
Web &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; Design &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; For &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; Dummies &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; ?
I suggest **Code Complete** and **Clean Code.** Every programmers should know how to make their own code clean if they wanna improve themself
If you need to explain it, it's bad.
Jesus is this r/javascript or r/whingefest? It's a standard slideshow, have you never seen one before? I wouldn't have done it that way but It works perfectly fine. Stop whinging
Nothing wrong with horizontal scrolling
Nothing. It's a simple, standard slide show. Get a fucking life.
Don't mind them, they are narrow minded unimaginative engineers.
is this the right sub?
Despite the large arrows at the side? How dumb can one be?
Dude wtf
Backend people shouldn't do frontend stuff! Ha ha 😁😁 The whole website is just a short article spread across ten pages? Or am I missing something?
Ironic given the nature of the article
[removed]
.
He thinks that if other people were better well off there would less money for him.
PS it's almost a blank repo right now, i'll get something up soooonnn
No arrows on mobile
dayOfWeek === 'Sunday' || 'Saturday' -&gt; dayOfWeek === 'Sunday' || dayOfWeek === 'Saturday'
Well, I feel a little stupid now! Haha! Thank you for your help!
You're welcome.
Some small swipe indicator would be nice 🙈
So what happens with your code is that the first part of the gets evaluated as you expect it &gt; dayOfWeek === 'Sunday' compare `dayOfWeek` with `'Sunday'` per strict equality, resulting in either `true` or `false`. If `dayOfWeek` is sunday, the evaluation stops there because `true || anything` is always true. Then the expression evaluates `'Saturday'` for truthiness. As far as Strings are concerned, an empty String is falsy, every other string truthy. So in the end, the whole term always evaluates to truthy, a bit faster so if `dayOfWeek` is sunday.
Every time someone makes an article in slideshow format, a UX designer looses their wings
This was very helpful, thank you!!!
I have no idea where to begin coding a graphing calculator (I can barely do a basic one) but I’ll keep an eye on the repo and help where I can.
If the list gets longer, use Array.prototype.includes. &gt; ['foo', 'bar', 'baz'].includes('baz') true
math.js is a great tool for parsing mathematical expressions. JSXGraph is good for making interactive 2D graphs but doesn't have 3D support. There's also some good browser based tools out there already, such as GeoGebra and Desmos. GeoGebra has some nice 3D rendering built in.
On mobile I didn't see the swipe animation until I randomly swiped around and accidentally swiped sideways and scrolled to the next slide. It would be nice to have the animation play earlier, or a more obvious indication like arrows (which are apparently on desktop but not mobile). A more complex but arguably more usable way would be to bind scroll down / swipe up to switch slides. That way even if the user scrolls, they still get the next slide like they would expect.
I couldn’t scroll vertically in the Reddit browser
For future reference there's an entire site dedicated to asking programming questions: www.stackoverflow.com
Union dues more pay for themselves in higher wages and better benefits, and that's a statistical fact. Average union dues are $400/yr while union workers earn more than 13% more than non-union peers on average — do the math. Even non-union workers earn more when union density is high, and the proliferation of "right to work" laws are directly correlated to stagnating wage growth and ballooning inequality between owners and wage-earners.
&gt;I don't think that is accurate? Well, do you?