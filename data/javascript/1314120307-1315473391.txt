If you go that path don't forget: onmouseout="stopdoingstuff()"
Exactly what I was looking for. Thanks!
see my function above? function dostuff? you can use the getElementById to modify the html (or other attributes) of another element (be it div, img, or even anchor) 
good point!
He's already given you the basis. Pretend stufftochange is the id of the div where you want to change the text. He's currently changing the text in that div to some new text. Notice that it takes html, so for your image div you could do something similar with an img tag instead of text.
 &lt;img src="image1.jpg" onmouseover="showImage();" onmouseout="hideImage();" /&gt; function showImage() { document.getElementById('div1').innerHTML = '&lt;img src="somePic.jpg" /&gt;'; document.getElementById('div2').innerHTML = '&lt;p&gt;Some Text.&lt;/p&gt;'; } function hideImage() { document.getElementById('div1').innerHTML = ''; document.getElementById('div2').innerHTML = ''; }
what? edit: do you mean: "compared to the latency introduced by firing hover events, the latency introduced by jQuery is minimal"? If so, true. Else you seem to be saying "using native hover events via the browser will be slower than using hover events via jQuery". Which makes no sense, as jQuery is just a layer on top of the native browser events...
way fly
This is awesome. Thank you so much.
I mean the former, I'll edit to clarify.
Thanks for the link.
Of course. And they were.
No comment.
I have now seen it all. And I want to shoot myself in the head, multiple times.
Completely unrelated, but I love the way python handles `sprintf`, and I wish other languages would copy them. Of course, I wish other languages would copy quite a bit from python...
Use event handlers: &lt;img src="image1.jpg" id="image1" /&gt; var img1 = document.getElementById('image1'), div1 = document.getElementById('div1'), div2 = document.getElementById('div2'); img1.onmouseover = function(){ div1.innerHTML = '&lt;img src="somePic.jpg" /&gt;'; div2.innerHTML = '&lt;p&gt;Some Text.&lt;/p&gt;'; }; img1.onmouseout = function(){ div1.innerHTML = ''; div2.innerHTML = ''; };
I used to have a demo for this, but I can't find it right now. This isn't great, but it turned up in some old files. Hope that helps. &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;script&gt; //Link Description script- © Dynamic Drive (www.dynamicdrive.com) //For full source code and TOS, visit http://www.dynamicdrive.com //change link descriptions to your own. Extend as needed var linktext=new Array() linktext[0]="Visit Dynamic Drive for some great DHTML scripts!" linktext[1]="JavaScript Kit, the JavaScript technology center" linktext[2]="Direct link to hundreds of free java applets online" linktext[3]="Research information, get homework help, chat with educators" linktext[4]="The virtual encyclopedia" linktext[5]="Your online dictionary" var ns6=document.getElementById&amp;&amp;!document.all var ie=document.all function show_text(thetext, whichdiv){ if (ie) eval("document.all."+whichdiv).innerHTML=linktext[thetext] else if (ns6) document.getElementById(whichdiv).innerHTML=linktext[thetext] } function resetit(whichdiv){ if (ie) eval("document.all."+whichdiv).innerHTML=' ' else if (ns6) document.getElementById(whichdiv).innerHTML=' ' } &lt;/script&gt; &lt;!-- show_text(index# of linktext[] to show, ID of div to write to) --&gt; &lt;body&gt; &lt;p&gt; &lt;a href="http://www.dynamicdrive.com" onMouseover="show_text(0,'div1')" onMouseout="resetit('div1')"&gt;Dynamic Drive&lt;/a&gt; | &lt;a href="http://www.javascriptkit.com" onMouseover="show_text(1,'div1')" onMouseout="resetit('div1')"&gt;JavaScript Kit&lt;/a&gt; | &lt;a href="http://www.freewarejava.com" onMouseover="show_text(2,'div1')" onMouseout="resetit('div1')"&gt;Freewarejava&lt;/a&gt; &lt;br&gt; &lt;span id="div1"&gt;&amp;nbsp;&lt;/span&gt; &lt;p&gt; &lt;a href="http://encarta.msn.com/" onMouseover="show_text(3,'div2')" onMouseout="resetit('div2')"&gt;Encarta&lt;/a&gt; | &lt;a href="http://britannica.com/" onMouseover="show_text(4,'div2')" onMouseout="resetit('div2')"&gt;Britannica&lt;/a&gt; | &lt;a href="http://www.dictionary.com" onMouseover="show_text(5,'div2')" onMouseout="resetit('div2')"&gt;Dictionary.com&lt;/a&gt; &lt;br&gt; &lt;i&gt;&lt;span id="div2"&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt; &lt;/body&lt; &lt;/html&gt;
Hey, this looks like [ES5](http://ejohn.org/blog/ecmascript-5-objects-and-properties/)! // "o" o.add(o1,"f","hello world"); // ES5 Object.defineProperty(o1, "f", {value: "hello world"}); 
Cool, I apparently glanced over that major part! Thanks for the clarification.
As I said, the list is not comprehensive. Just people that I've followed and could list off the top of my head.
What is the use case for something like this? Most of the functions are very thin wrappers on the native implementation, and some do really weird things (**o.len() returns a function** ?). Maybe if it did something along the lines of Underscore.js (where you temporarily wrap an object for manipulation), then I could see its use. After all, it is very small.
This is just speculation, but I would assume he means the page load time.
It should be possible to make this pretty damned fast. I mean, C doesn't have magic either, it is going to have to make copies of strings and move them around. If you mean accessing characters in a string is slow in JS and fast in C, well that may be true. But I hardly thing native regex and split, etc, are implemented in JS. Looking at the source of this though, I can see some optimizations that might improve things (compile regular expressions once and reuse them, or better, don't use regular expressions). Either way, with any project it is possible to imagine a scenario where the performance becomes an issue. I doubt the performance of this would likely become an issue in almost any case.
Here is the explanation why: https://github.com/vladocar/o---JS-Library-for-Object-Manipulation/pull/2 It return number. You can download the project and try in the console. Example: var o1 = {a:1, b:"jdlsakjd", c:[1,2,3], d:{a:1,b:2,c:2}} o.len(o1); // 4
This is the most hipster programming article I've ever seen.
the engine works. I just put that there so no one would get angry if some bugs popped up. If you need help just message me. Give it a try, download the package https://github.com/RobertWHurst/Red-Locomotive/zipball/master
&gt; cscript doesn't support ES5 This may be true (for now?), but .... keep in mind that my suggestion here is to use cscript.exe to run jslint-for-wsh.js, which then looks at *your* source code. For the purposes of jslint-ing, it does not matter if your source - the module being analyzed - is ES5. And it does not matter if cscript.exe does not support ES5. As long as cscript.exe can run jslint itself, you're good. And it does. So you're good. ---- &gt; you can make command-line based interfaces for your web services **if they're internal.** ¿why "if they're internal"? You can use XHR from within cscript.exe - it is the same XHR that runs in an ajax session hosted within IE. The XHR can connect with any web resource, anywhere. It need not be "internal" only. 
Well, jsconf and full-frontal were already mentioned and velocity is already over... so... yea... I don't really have anything else to suggest. (I'm not living in North America, I don't know any of the smaller conferences.) Another thing you really should try is to ask your devs. If they are interested in the work they are doing, there should be a few conferences they'd love to visit. I generally recommend to let them chose the conferences by themselves (as long as the conference is somewhat relevant). They should be as interested in the topic as possible and ideally they go there alone. If you are alone, you're forced to talk with other people and this is the part which makes the whole thing worthwhile. Those discussions are the place where you learn exciting new things you couldn't have learned anywhere else. Also, don't forget to give them some business cards. There are always some interesting opportunities.
I couldn't see anything interesting on the "Sample Usage" page. I clicked submit with invalid data and nothing happened. Is it working? Maybe this needs more time cooking. 
It is a namespaced "module", like a jquery plugin or something I wasn't trying to write an article on how to do it, though you can now do it using my "module". But I mostly wanted to see peoples opinions of the code. What do you mean by it being hipster? Because of all the frameworks? Backbone is meant to be used with jQuery/Zepto. Underscore is required. Handlebars/Mustache are recommended. Please explain, what is hipster about this code...
&gt; XHR connections are subject to the same-origin policy. You can't connect to any web resource, anywhere. See here for more details. The SOP does not apply if XHR is run from within cscript.exe. For more information, see your local command prompt. (I mean: Try it!) 
The frameworks are not just frameworks, they are the latest in untested code all mashed together to do something we've been able to do maturely for decades. And that's coming from a Python and Ruby developer.
No, that only works because the native keys exists. It will return a function if there is no Object.keys.
Yeah, I am loading the api code separately, I probably should put that in there. It needs a lot more time cooking. What browser are you using? It should just show a blank form. That form is generated from this: https://github.com/nelson54/FormBuilder/blob/master/Sample/formSettings.js I will work on better documentation tonight.
I work at a University that uses ColdFusion for server side processing, I do a lot of front-end work client side because I could not stay sane writing CF ui's. It is a terrible language and makes managing a website a HUGE pain. I still use ColdFusion a lot, but I would much rather write javascript front-ends than coldfusion front-ends. Anyways despite underscore/backbone being new, they are being used by: LinkedIn, MetaLab, 37Signals (the guys who made rails!), Groupon, SoundCloud, Pandora, and BitTorrent (the company). I think that its all pretty well accepted. Here are some unit tests: http://view.jquery.com/tags/1.3.2/test/ http://documentcloud.github.com/backbone/test/test.html 
I spent a bit of time with Crockford last year, and he was a totally nice, cool dude. Dunno where one would get the impression that he is pompous. He makes an effort at being erudite in his presentations, particularly in the context of programming history and I definitely appreciate it. 
I wish it used a mixture of characters, rather then just O, o and ., as then it would look more ASCII-ish. But otherwise it's very cool.
I've been using cscript/wscript and XHR since the early days (2000), but it never surprises me how ignorant people are about windows + javascript. I've since moved on to JScript.NET which is a lot more powerful, but still runs pretty much all the javascript code I've written for browsers and for wsh without much alteration. I've even got a front-end library that I've adapted to run in wsh and JScript.NET, even the animation/tweening stuff can be useful in WSH believe it or not (typically using the generated tween data for whatever purpose). Comes in handy when I need JSON features, and other things missing from wsh. I generally don't write in wsh any more though, since creating an .exe using jsc.exe to compile javascript is much more interesting, and the exe runs a lot faster than wsh. 
Thank you! You are right. Now the issue is fixed.
I don't know the term "tweeeing". Sounds vaguely scandalous. I'll have to look it up. I've used WSH/Script since those days too, a text editor and cscript.exe is how I learned Javascript. It looks like Windows8's new programmable UI will be based on Javascript, CSS, and HTML5, so the "secret" about Windows and Javascript is likely to be out pretty broadly, soon. 
I've never met him, only seen videos, but in every one of them, he provides useful insight. Maybe people don't like the hard line his jslint tool takes about code formatting and whatnot - like to insist that there be exactly one space between a close paren and open curly - and then assume he is "pompous" to build such a tool. 
Oh sorry, it's not performance related, iTunes won't even let me sync it to my iPod. Just realized how vague I was. You must have the minimum iOS version set above 4.2.1, is what I mean.
In my tests, Chakra runs jslint in less than half the time as required by the JScript 5.8 engine. When using jslint with flymake in emacs, the performance makes a real difference. That's just one micro benchmark. I may do some additional perf testing with real measurements, on this and other stuff, later. As additional candidates for comparison I'm thinking: AES encryption, RFC2898 (PBKDF2) key derivation, maybe Knuth's A-star algorithm, and maybe an Exact Cover solver using "Algorithm X" or a dancing-links (DLX) sudoku solver. 
it's 'tweening', and it is a common term used when talking about animation. [about.com](http://animation.about.com/od/glossaryofterms/g/tween_def.htm)
Here's what I got for the RFC2898 test. C:\dev\js\SlowAES&gt;cscript.exe Test.pbkdf2.js //E:Chakra Javascript PBKDF2. See http://en.wikipedia.org/wiki/PBKDF2 case: 0 pw: 'Albatros1' salt: 115,97,108,116,105,110,101,115 iterations: 1000 expected: 9e8dadb54de680bd690fc0057557f4f6 actual : 9e8dadb54de680bd690fc0057557f4f6 elapsed : 1373ms case: 1 pw: 'Yucat4N' salt: 115,97,108,116,105,110,101,115 iterations: 1000 expected: f526ba693066a59f4ba3962f3ada4023 actual : f526ba693066a59f4ba3962f3ada4023 elapsed : 1264ms C:\dev\js\SlowAES&gt;cscript.exe Test.pbkdf2.js Javascript PBKDF2. See http://en.wikipedia.org/wiki/PBKDF2 case: 0 pw: 'Albatros1' salt: 115,97,108,116,105,110,101,115 iterations: 1000 expected: 9e8dadb54de680bd690fc0057557f4f6 actual : 9e8dadb54de680bd690fc0057557f4f6 elapsed : 2538ms case: 1 pw: 'Yucat4N' salt: 115,97,108,116,105,110,101,115 iterations: 1000 expected: f526ba693066a59f4ba3962f3ada4023 actual : f526ba693066a59f4ba3962f3ada4023 elapsed : 2565ms 
Technically, the parens are literally irrelevant. They don't have to be there. The "golden parens" are a convention simply because they make the programmer's intent (to self-invoke) more explicit. You can really do 'function(){}();' it just looks weird.
The results of testing AES. A significant portion of the time doing AES encryption is spent deriving the key via PBKDF2. C:\dev\js\SlowAES&gt;cscript.exe test.aes.js AES encryption in Javascript. password : Albatros1 salt : saltines (73616c74696e6573) iterations: 1000 key : 172,52,20,51,98,71,49,195,14,31,141,51,129,8,94,66 iv : 212,27,28,156,83,245,0,35,176,157,45,141,209,143,158,248 plaintext : Hello, /r/javascript. ciphertext: fdebac9f1ed1a13bac58f3cc6558e8b0367a94245dbbfe53cacc4979799fc182 decrypted : Hello, /r/javascript. elapsed : 5011ms C:\dev\js\SlowAES&gt;cscript.exe test.aes.js //E:Chakra AES encryption in Javascript. password : Albatros1 salt : saltines (73616c74696e6573) iterations: 1000 key : 172,52,20,51,98,71,49,195,14,31,141,51,129,8,94,66 iv : 212,27,28,156,83,245,0,35,176,157,45,141,209,143,158,248 plaintext : Hello, /r/javascript. ciphertext: fdebac9f1ed1a13bac58f3cc6558e8b0367a94245dbbfe53cacc4979799fc182 decrypted : Hello, /r/javascript. elapsed : 2593ms 
You should look at Ben Alman's BBQ plugin: http://benalman.com/projects/jquery-bbq-plugin/ Definitely look at the hashchange event and see if it'll meet your requirements.
That is amazing! It is pretty much exactly what I was looking for, thank you much!
You actually don't even need the full bbq plugin that iOnline247 mentioned, Ben separated the hash-triggering-specific functionality out into its own plugin called [jQuery HashChange](http://benalman.com/projects/jquery-hashchange-plugin/). From the plugin homepage: &gt; While this functionality was initially tied to the jQuery BBQ plugin, the event.special window.onhashchange functionality has now been broken out into a separate plugin for users who want just the basic event &amp; back button support, without all the extra awesomeness that BBQ provides. Alternatively, there's also the [jQuery Address plugin](http://www.asual.com/jquery/address/docs/), which does basically the same thing. I've used both, and they both work well.
If I might add some constructive criticism: What you've got here is useful in that you have a simple API for generating forms however it could be problematic down the road for a couple of reasons. Here's why I would not use this library: * If people have JS disabled this won't work at all. (I know this is kind of a moot point when dealing with web **applications** instead of web _sites_ but you didn't specify what your intended usage for this lib was). * [Separation of Concerns](http://en.wikipedia.org/wiki/Separation_of_concerns) isn't respected; you have a significant number of dependencies all working to do 1 thing that can be very simply done with a better separation of concerns using HTML, CSS and some basic JS. * Backbone is a framework for building web applications, the fact that it has [validation](http://documentcloud.github.com/backbone/#Model-validate) available as a feature for models doesn't mean it should be used to build a form validation framework (of which there are many in existence). * No **Unit Tests** exist. I can't verify that I can use this library with confidence in all the browsers I need to. * A list of supported browsers does not exist. I'm sure you learned something constructing the lib, but if I might suggest a simpler alternative that will be easier to maintain: * jQuery + [jQuery Validation Plugin](http://jquery.bassistance.de/validate/demo/) * HTML * [CSS, using some nice form styling](http://www.blueprintcss.org/tests/parts/forms.html) If you need ajax submission for forms you can also add the [jQuery Form Plugin](http://jquery.malsup.com/form/) easily.
It's good that the libraries have unit tests but your code doesn't have any tests. If you are going to release a library intended to be used by the public it would be wise to include a test suite of your own.
Thanks! I saw the HashChange plugin on his site and was looking at the extra features in the whole BBQ set to see if I could use them as well. And thanks for the Address plugin, it looks interesting. I'll have to play around with them to see which I prefer. Thanks again!
You are a minor diety for cleverness. Want a job?
I'd like to see something supporting functional programming in JS. Say, myArray.map(o.callMethod('toString')); =&gt; myArray.map(function (x) { return x.toString(); }); myArray.map(o.property('height')); =&gt; myArray.map(function (x) { return x.height; }); Not as heavyweight as Underscore and similar libraries, but with most of its usefulness.
O.o
Just send a message and I'll get back to you, thanks.
If you can suggest a good ascii gradient I'll try it.
I was really surprised by how few lines of code are needed to write a raytracer. Cool stuff!
Benchmarks: Node VS Chakra ? :P
.:coCO8@, perhaps? If the aim is more variation, maybe: .'~:;!&gt;+=icjtJY56SXDQKHNWM Edit: .'-:/+osyhdmNMW might also be interesting. Edit2: Just looked at the sourcecode and realized that your LUT was dark-first, not light-first as the ones listed here. Sorry about that.
This is what I'm curious about. What a powerful feature for MS to bury like that, I guess it shipped before the idea of server-side javascript caught on-- or it's being developed for that and not quite yet.
MS have no incentive unless they try to sell you yet another IDE.. Expect to see Microsoft Visual Studio Chakra 2014 ;)
&gt; I guess it shipped before the idea of server-side javascript caught on... I'm guessing, it's probably more a case of, the IE team developed the engine, and is not interested in supporting its use outside of IE. Don't forget that Server-side Javascript is a "back to the future" kind of idea. Javascript was popular and you could say *dominant* on the server side, before it ever became broadly used in browsers. Just guessing, but I'll bet there is more server-side javascript running on Windows than on any other platform. ASP was introduced in 1996, and unlike Netscape's LiveWire, which was offered around the same time, ASP/Javascript is *still supported* by Microsoft. (In fact: even today on Windows7, you can still use "LiveScript" as a ProgId ; you'll get the JScript v5.8 engine.) Customers are still running ASP/Javascript sites on Windows Server 2008 R2. I would guess the popularity of ASP/Javascript is probably 10x the usage of Node.js today. Seriously. The leading-edge buzz is about Node, but ASP has millions of deployed servers. Exposing the Chakra engine with the JScript ProgId, as if it were a standard upgrade to the Jscript engine on Windows, would mean automatically all those sites would start running on Chakra. I don't know what edge cases they've changed but I'm sure there's a lot of trickiness there. Too many scenarios to test. Lots and lots of old code that they don't want to disrupt. People are happy, why throw this change in, invisibly, and take the risk of disrupting everyone? That doesn't explain why they installed no ProgId at all. But no matter - it's easy to create one. 
Agreed, I was putting the code out to see what people thought of it, because if it is something no one wants, or I get advice on how to do it better I won't be wasting my time. Most of this code was written yesterday, and I am also just learning how to do unit tests (I am reading Refactoring by Martin Fowler). I know I should have done tests first but I still haven't written any tests and wasn't sure the best way to do it. Any advice would be greatly appreciated!
I use all these and it is really easy to do ajax submitting w/o the jQuery Form Plugin, I don't need it. I use the jQuery Validation Plugin and like it very much this in fact was inspired entirely by that plugin. I love the Validation plugin because it makes validation SOOOOOOOOOO easy, but I feel like I am repeating myself by writing a 50 or 60 field form, then repeating it to tell the plugin how to validate it... 90% of the information is already there, why do I have to have it in both places? Handlebars allows me to create html templates so you can format your Fields any way you want w/ html and it knows how to use them. Do you have any suggestions on how to get around the separation of Concerns? As far as the UI goes, you can still do it all yourself... There is no UI code bundled into my code... It doesn't even know how to write to the screen. All it does is give you the text for your forms so you can use jQuery or w/e to display it. I am realizing how much of a bad idea it was to release this w/o any good documentation. **Also I am not using backbones model validation! I first wrote it w/o backbone, then integrated backbone just so I could use model extends. So I could extend my default field object to create the others.
On an unrelated note, I just learned a trick looking at your code. Thanks for that.
Don't worry too much about writing tests first, the important thing is to at least have tests that cover the functionality you built. As for building things no one wants that's a harder thing to tackle. I'd recommend building it for yourself first; if it's something people want then it will most likely take off on its own.
Have you read [Luke Wroblewskis' book on Web Form Design](http://www.lukew.com/resources/articles/web_forms.html)? If not it's an excellent read. If someone has you designing forms with 50 and 60 fields I'd recommend trying to reduce the number of fields.
I work at a University, we have multiple databases and everytime you try to do something we ask for name, age, email, number of pets, pubic hair length/color, mothers maiden name, 10 generations of your family tree on both sides, make/model and color of your vehicle w/ a comprehensive list of rust spots, references, references for your references, race, religion etc.... Goes into a different database each time. It is retarded but I am forced to do it. Just to sign up to visit the campus you have to fill out a giant form w/ all this garbage. I tell people its retarded, they are like "we want as much info as possible so we can SPAM the crap out of them" exact words. To fill out the main form for the University in order to get access to the form you have to fill out like a 30 field form! And it doesn't work in CHROME! They think this is acceptable.
Apparently there's a GitHub repo now. Check out https://github.com/jstat/jstat .
Love to try it but you didn't allow Canadians to download it.
cURL would be a much better choice, java-scipt isn't the best choice for this type of problem.. Id use something like python with pyCurl or URLLib. I know OP is not a programmer but there's really no reason you even need a browser.
Did you figure it out yet?
you 'need' to send them but they don't know what training they 'need'?
Nope.
Because I've never heard of it?
And now I'm debating the strengths of having a main gameloop on the client side vs. letting socket events take care of it.
I'm presuming you mean in regards to a multilayer game? In an ideal world, I think you'd want both. A client side mainloop would allow you to update less often, hide any blips in the network, and help to ensure smooth animation.
[Event.preventDefault()](https://developer.mozilla.org/en/DOM/event.preventDefault)
Warning, as of latest update may cause dizziness.
Can't seem to make it look 'right' with those palettes. Maybe take a stab at it? A non-linear gradient is what is required but it's tricky to get it perfect.
Wouldn't you want it for interpolation? (Assuming the game is real-time)
Yeah sure, I don't mind fiddling about with it a bit. It's getting pretty late local time (GMT+1, 00:59), so it might have to wait until tomorrow. If I manage to come up with something decent looking, I'll PM you a diff.
Thanks! If you or someone else wants to improve the camera system this might even turn into a real engine. I don't have enough time for the necessary fiddling.
Hey guys, happy to take any questions you have about the framework, either here or in IRC. We're on freenode in #batmanjs
NaN-NaN-NaN-NaN-NaN-NaN-NaN-NaN-NaN-NaN-Batman!
Strange, I'm Canadian.
*The App is currently down for maintenence*
It worked for you? My iTunes throws a dialog saying that this app is not available in Canada.
I did a few LUTs, and now I've ended up seeing what can be accomplished when resorting to unicode... Actually, the venerable DOS shade 25%, 50%, 75% and block characters looks best so far. I've tweaked the css, default output size, scene background color, added an additional light source and such, which also helps to make the scene more crisp. It could really do with supersampling though, so I might do a luma-only version to get the speed up to a point where I can do at least 4x rays per glyph. No sense in throwing cycles after computing three color channels for a monochrome output. With less aliasing, having a nuanced LUT would make more sense too ;) I'll get the results to you tomorrow. If you want me to mail the files to you PM me an address, otherwise I'll just upload them to a server and PM you the link.
The Rich Web Experience Conference covers a number of topics related to HTML5/Javascript/CSS3/AJAX and more. One of my coworkers went to this conference and thought it was very well done. http://www.therichwebexperience.com/conference/fort_lauderdale/2011/11/home
It just struck me that it ought to be possible to 'fake' crude supersampling simply by condensing the text to a point where characters partially overlap and increasing the resolution accordingly. It works surprisingly well. Here's a [screenshot](http://imgur.com/F1Dcl) of what it looks like. Er. I haven't got the ratios quite right, but the idea is sound.
Final [screenshot](http://imgur.com/9UjgZ) for today, with fixed ratios and higher resolution.
Hm, yeah -- that was an artifact I was trying to avoid at one point, but I didn't think it could possibly be leveraged to my advantage! Regarding conventional supersampling..I'm not confident we can get a good framerate with even a modest amount of that. But experimenting with this would force me to optimize some areas that really need it, so..why not? I actually made a number of small changes throughout the code about 1.3 hours ago or so, but it shouldn't be too hard to integrate your changes if you don't want to merge with what I have now. Wouldn't it be nice if this were in git? ;) I may do that tomorrow. I'm excited to see what you've done. I know it's possible to get it looking much crisper than what I have now. One thing that bugs me is the rendering differences between firefox and chrome. Do you know the trick to fix that? 
Very pretty. Might want to dim the light a little bit (0.7? 0.8?) to get more shades on the spheres.
Yeah, I was just tweaking the scene background color thinking the same thing. It was 0.8, now it's down to 0.6 and the scene looks much more nuanced. Better dynamic range utilization, basically.
I suspect reducing the pipeline to just luminosity should help a bit. Question is if it'll be enough. Moving the static calculation of the palette length out of the inner loop helped a bit too here. I'm using FF 6.0 here ATM, since that's what I happened to have, but I'll install Chrome tomorrow. As for rendering differences, I'll add a reset style sheet and test in both browsers. I've uploaded my current version to [here](http://www.effekts.dk/transient/ascii-tracer/asciitracer.html) so you can see what I've done so far. Integrate or cherry pick as you like, alternatively I can resolve on my end tomorrow if you can upload your modified files somewhere - or if there's sufficiently few changes, just reply with a diff :) Edit: I'm down with a git repo. Just PM me the details if you set one up.
[Relevant!](http://i.imgur.com/CHKi6.jpg)
Is there a "normal" js version? The framework seems interesting but I don't really like working with cs.
Is there a "normal" js version? The framework seems interesting but I don't really like working with cs.
Do you have any non-CoffeeScript examples/documentation? What's the API like to use with normal JavaScript, as you'd write it, rather than the... stuff CoffeeScript spits out?
If you're handling the 'keyup' event, it's already too late to use preventDefault - of course you can retroactively remove the character, but that's a given.
One reason I chose backbone is because it's small and straightforward enough when I get stuck I can just [scan the source code](http://documentcloud.github.com/backbone/docs/backbone.html) to figure out what's really going on. I turned to backbone after struggling with JSMVC for several days and have never regretted it.
I could see how both would be useful in a graphics-heavy game-- which isn't the kind of game I usually try to create since I'm much better at systems. Client UI data would all go through server -&gt; socket -&gt; client -&gt; canvas buffer -&gt; game loop before being displayed.
A non-JS question.. what the fuck is up with tiny white text on a white background? Some of us are old men here!
Hey, I've gotten a few other reports of this, but can't replicate it. Is it in a specific spot or just the whole site? Thanks!
Woosh....the sound of advice going over my head.
While it's recommended you use the alternate syntax that CoffeeScript provides due to its utility, we do plan on offering more JavaScript examples in the future.
Most of it is pretty straightforward, but CoffeeScript classes are by far the biggest win when it comes to utility and verbosity.
Honestly, even when the text is blue, it's pretty tiny.
It's actually the tiny blue text on the white background that's hard to read. Your main page looks fine, but I'd pick a darker blue and a slightly larger font for those paragraphs of text.
Why would you name it Batman? If this ever gets popular, Warner Legal is going to be friends with your receptionist. Also, it will make SEO all the more difficult.
Great!
All the text is incredibly hard to read. Way too small, and way too little contrast. The contrast ratio of the gray-on-gray body text is less than 50%, and it's only about 1/16" high on my ThinkPad's 145 DPI display.
Looks promising. What's your timeline on push/persistence?
The font is a little small, you are also using a interesting background pattern that doesn't help the contrast. That being said, I really like the font you're using. The todo demo is a great example. You should link to it from the blog post. 
Woah, guess I'm wrong. (EDIT: Not wrong, see below) I was blindly regurgitating Crockford from some lecture http://yuiblog.com/crockford/ I wonder if it's an ECMA vs JS difference? ... Okay screw that I tested it. I was right. You just can't enter it without the parens in your console because it's not a syntactically valid statement, just expression. If, however, you're ever in a position to want to immediately-invoke a function you're defining in an object: x = { blah: function() { console.log(1); }() } Will output '1' to the log, and return an object x where x.blah is undefined (function didn't return anything). 
Do you have things like convenience functions for extending constructors in a standard way when using batman.js instead of having to lug your own `inherits`/`extends`/whatever you need equivalents around, à la Backbone.js `SomeConstructor.extend`, or is the API *currently* based on the assumption that you will be using CoffeeScript, which will be generating certain boilerplate for you? I was asking for non-CoffeeScript examples/docs as I'd like to see, for example, the standard way you'd expect non-CoffeeScript users to declare the following if using batman.js: class Gadget extends Batman.Object constructor: -&gt; @usesLeft = 5 use: @event (times) -&gt; return false unless (@usesLeft - times) &gt;= 0 @usesLeft -= times Which transpiles to: var Gadget; var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; }; Gadget = (function() { __extends(Gadget, Batman.Object); function Gadget() { this.usesLeft = 5; } Gadget.prototype.use = Gadget.event(function(times) { if (!((this.usesLeft - times) &gt;= 0)) { return false; } return this.usesLeft -= times; }); return Gadget; })(); Is step 1 "copy and paste your favourite version of the `inherits` function"? Would you have to wrap every prototype function which uses observable events in a `Gadget.event` call or is there a convenience API through which the library will take care of wrapping th appropriate functions for you, such as declaring a property defining names of prototype functions which should be wrapped? Sure, you can *use* any library written in CoffeeScript in normal JavaScript, but if the API wasn't designed with that in mind and you don't show people how it's supposed to work without CoffeeScript, I think you're reducing your potential audience with CoffeeScript-only docs.
An honest play by play of my experience.... &gt; What you’ll find in this 0.5.0 release is a capable framework that you can use to build dynamic apps without a lot of code. Sounds good! If vague. Ok, I'll keep reading. &gt; There is plenty of cool stuff here to play around with: Hmmm, here come the specifics! All right ! &gt; - a robust system of observable properties uhhhhhhh, ??? observable properties? Wait, I thought there was going to be something specific about what this thing did for me. . . observable properties is the #1 thing? Really? maybe on the next line all will be clearer. &gt; - data and event bindings between pure HTML views and the rest of your app ?? ok, I know what jQuery is, and I think I have some idea about data and event binding. Is batman some sort of replacement for jQuery? &gt; - models with synchronous and asynchronous validations, a state machine for lifecycle events, and arbitrary storage backends Huh? I am in the weeds here. What the ... does batman DO ? &gt; - a flexible route system I don't think I have the problem batman is solving...? I cannot understand what it does, so I probably don't need it. Ok, the bullet-point summary is not productive. Let's try looking at the Examples link. That ought to help. Ok... lesseeee....... Todo list? Really? *That's the app?* ok.... CoffeeScript? I still cannot figure out the problem batman is solving for me. (bail) ---- When I confront something new, I try to fit it into the set of things I know. How does it compare to X? How would I use it with Y? I didn't find any of those guideposts in your prose. As a result, I have no idea if I need batman, or what it would replace in my toolbox, why it is better than the existing alternatives, or how it would make my life simpler, how it would make my apps cooler. ps: the "todo list" for Alfred isn't really a todo list. The first three items are not "todo's" but news items; facts. There's no imperative there. Why am I saying this? It's irrelevant, right? It's just a fake todo list, right? Right? You tell me. Why would I bother to point this out? 
Looks like you grabbed the updated version so there's no need to merge. You really owe it to yourself to try it in Chrome because it's incredibly smooth! Nice work. Once I have my coffee I'll just put this file into git and this can become a proper engine for people to use. With some more optimizations (and more sparing use of shiny surfaces) this thing could be used for simple games like Asteroids, 3d pong etc.
G'morning. I'll be installing Chrome now and having a look at harmonizing the rendering, at least between Chrome and Firefox. I had another idea earlier that might be fun to try out after I get done with that: Keeping the "frame buffer" array around, upping the FB resolution to x2 of the number of rays and do staggered updating of the FB - it should allow a higher 'virtual' resolution with only a modest increase in cycle consumption and should yield (completely fake) "motion blur" ;) A 3D version of asteroids with spheres would be pretty badass, if we can get the resolution high enough that small objects can be accurately resolved despite the aliasing. I wonder how one would go about visualizing the 'shots' in that scenario - maybe an emissive material property would be nice to have for that (moving non-point light sources using luminous spheres could potentially be very cool).
Hah, is that an old graphics gems trick? I don't know if it will be *that* blurry but it will make things a lot smoother, sampling this way. It sounds like you're knee deep in the code so you should make the first commit. I'll set up a blank project on github--will let you know when it's ready.
You know there was a comic before the movie, right?
In one sentence, why do I need this?
You should really use event handler's, like Wtfuxbbq's example. Inlining js is bad practice.
&gt; The font is a little small Yeh, the page looks great zoomed 130%.
 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.addEventListener("DOMContentLoaded", function() { var ta = document.getElementsByTagName("textarea")[0]; var p = document.getElementsByTagName("p")[1]; ta.addEventListener("keydown", function(ev) { ev.preventDefault(); p.textContent = ev.keyCode; }, false); }, false); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;&lt;textarea&gt;&lt;/textarea&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;
Have you verified that the json is valid? Maybe try running the other half?
I'm just here to say +1 for some non-cs examples/tutorials :). Even comming from Ruby, I prefer native JS right now. Also, how would you say it compares to Backbone which seems to be the big kid on the block right now?
I would divide them up into 5MB chunks or even smaller, since you're not likely to change how the JSON parser works—slicing and dicing a 50MB string is crazy-town. If this is a monster array, choke them down with the JSON parser in smaller chunks and use Array.concat to merge. If its a monster object, jQuery.extend.
Mad props. I didn't manage to finish it. Some of the jumps were just a bit too much for me. I wish there was double jump for noobs like me. :) Pro tip: lava hurts!
[smallpt: Global Illumination in 99 lines of C++](http://www.reddit.com/r/tinycode/comments/jq2dn/smallpt_global_illumination_in_99_lines_of_c/)
Do the files have line breaks every now and then?
&gt; Why does 50MB turn into 450 after loading? Probably it doesn't successfully load; 50 MB of JSON is kind of insane; I doubt the Chrome devs had that size of JSON in mind when developing their JSON parser. Can you post the JSON you're using?
No. I generated them to be as small as possible.
Its 50MB total, the chunks are around 10. 
50 MB of JSON : good luck ;)
Thx jangosteve, I didn't know about either of these. Look forward to using them. ;D
It loads and works fine on my workstation. I dont really even care about the memory footprint on this machine. I am trying to get it trimmed to the point of running on a lower end laptop or tablet. The data is GeoJSON, it's loads of numbers really. So picture 200,000 lines of: { "type": "Feature", "geometry": {"type": "LineString","coordinates": [ [2142281, 928403], [2142019, 928607] ] }, "properties": { "id": 60291, "layer": "3OH" }}
Do you really need all 50MB in browser at once? Can you page it into the browser's memory? (Items 0-1000 on page 1, 1001-2000 on page 2, and so on.)
gaiaap and I have been working on a new version. Preview here (looks best in Chrome but is broken in OS X right now) : http://budgetairlines.crabdance.com/demos/AsciiTracer/asciitracer.html I think it can become a proper engine for webgame devs to use if more optimizations are done. The code is here if you would like to contribute: https://github.com/trevlovett/AsciiTracer
I can't and get any performance at all. It is map data, loaded into a quadtree (for drawing only the things that are visible), and layered and drawn to canvas. I can't build the quadtrees without all the data pulled in.
Try adding a line breaks after a reasonable line length. Or first, just to test, add a line break after every ",".
The only other option is to toss what I have done and move the quadtrees to the server and do a request each time the map needs redrawing to pull only the data in that will be visible. I am afraid though that the http requests and processing will be far too slow for panning around.
Make your area/volume of coverage in the quadtrees smaller?
You know that DC is a division of Warner, right?
I think you need to rethink your application design - I would use [Polymaps](http://polymaps.org) to render the GeoJSON as SVG and [Tilestache](http://tilestache.org) to tile the vector dataset and only serve tiles containing the shapes that the user can see. [Here's a very rough-around-the-edges example](http://xrban.com/polymaps_census/) which uses Tilestache to generate vector tiles from a [PostGIS](http://postgis.refractions.net) database. But if you don't want to use a database Tilestache will also generate tiles from GeoJSON files.
Can you map your key names to shorter abbreviations? "c" instead of "coordinates" with your data? (Depends on how often that's being repeated.)
This is exactly what I wanted to do to start with but couldn't find the right software. I even have a python server app that is running behind my code. I am still reading, and not quite sure of the workflow, but this looks perfect so far.
How about loading it as a native object via JSONP, instead of loading as a string which needs to be parsed?
This looks like a knockout competitor without the documentation, tutorials, and examples.
look at all those nested loops, yikes
Would it make sense to store this info using the browsers local storage features? It'll be a hell of a lot more optimized than reading in strings of json and parsing, if you can convert your loading to work with hashed datastores. Just a thought :)
It would only avoid the data transfer, [localStorage](http://hacks.mozilla.org/2009/06/localstorage/) is still a giant string key-value system, so you can't avoid doing all the parsing. Plus, many browsers impose a limit on the size of data stored and the user would need to be prompted to allow a larger amount of data. 
No. Its standard GeoJSON.
It looks like observables for coffeescript. But it's hard to tell... :/
Well, I was much more excited until I actually tried to use Tilestache. The dependencies are crazy. I really dont want to have to install and keep up with 10 different python packages to run one little program. I'm using windows so I despise installing package after package trying to get everything needed. What is so wrong with just keeping everything in one folder so it is easy to get rid of. 
Maybe have your server re-encode it into something like [msgpack](http://msgpack.org/) to speed the data transfer. Parsing will still be a bitch, but maybe it won't be a 50MB string anymore. 
once the data is in local storage then you don't have to parse it before use. But keeping this much data local isn't typically best practices, usually it's server-side with a robust api. edit: I meant as you load the data into local storage you would parse it and figure out a way to store it using appropriate keys, which unfortunately would be a task in itself. Probably not a good solution, just throwing ideas out there. I've used safari's websql, it's not too bad. If only it had remained as part of the html5 localstorage spec...
The server will be on the same machine, so transfer isnt an issue. Its just the size of the actual data once parsed.
Could you store it in a local database instead?
Now you have to figure out how to get out of the browser's sandbox security model. &amp;#3232;\_&amp;#3232; Web clients are fun, NOT. 
On chrome, you can use File API to store the JSON on client-side. Then read it as a Blob and use webkitSlice to get subparts of your JSON text. This article explains how to use this API: http://updates.html5rocks.com/2011/08/Seek-into-local-files-with-the-File-System-API
Are you actually parsing JSON strings or evaluating code which happens to just be array literals?
&gt;{ '50 MB of JSON' : 'good luck ;)' } FTFY
Very nicely done. Tricky at points, but not unbeatable. 
If your using nodejs, check out https://github.com/substack/node-browserify The you can write to nodejs's standard, and export them for the browser - it even supports npm packages
so you finished it? respect! :)
I did finish it. Do you have a writeup of your Ludum Dare experience somewhere? I really enjoyed reading [Shaun Inman's postmortem](http://shauninman.com/archive/2011/08/22/data_entry_sentry_postmortem) on his game and would love to hear more about your experience. I also would've liked to participate, but had to help my fiancee move into her new house all weekend.
ye, right, should add that in all future games.
There's tons of port-mortems @ http://www.ludumdare.com/compo/ .. my blogposts are here: http://www.ludumdare.com/compo/author/ippa/ .. my post-mortem for LD#21 was kind of minimalistic though, aimed for non js ppl almost.
From everything I know you can't load a KML in the same way you manipulate google maps. The KML appears to only be able to be loaded as a file and set as an overlay. It looks like you have three options: 1) You can create an image that is a semi-transparent circle, plot your points and use a custom maker. 2) Save your kml on the network and provide a link to google maps with your kml loaded, in this fashion: http://maps.google.com/maps?q=http:%2F%2Fpath%2Fto%2Fyour.kml 3) You the Google Earth Browser plug-in, and have javascript grab the file and merge it with an existing map in the plug-in, there isn't much about how to do this, but a few basic searches revealed it may be possible, reference: [http://groups.google.com/group/google-earth-browser-plugin/browse_thread/thread/1c4d4b43ba0a0041](http://groups.google.com/group/google-earth-browser-plugin/browse_thread/thread/1c4d4b43ba0a0041)
Python is exceptionally good at letting you just dump all your dependencies into a folder as part of your site.
This is better because it gives you full control of the order of hoisting, where with the other way you are entirely on your own. This way is also far cleaner to read, because you are reading the identifier first opposed to an extremely reused keyword.
&gt; Please don't make such blind suggestions without explaining the reasoning behind each of them and each's drawbacks. I will compromise with you. I will not make blind suggestions if you don't presume your stack tracing tools are the only preferred method of debugging. That said my suggestion is only so blind as your method allows. My advise is to ignore my suggestion or explore other options when troubleshooting. Stack traces are, in my opinion, not necessary if you know what function is responding to what event. I have tools I use for this.
I'm by no means an expert but I was browsing around for a node crc module the other day and ran into [this](https://github.com/alexgorbatchev/node-crc/blob/master/lib/crc.js) Is that a better method?
Thanks, couldnt find any examples of this online.
I got stuck [here](http://i.imgur.com/2DgPx.gif). When she fell in the fire, she would reload to where she is standing in the pic, with no way out.
Hah..didn't you manage to break my last game too? you're the worlds best betatester! :) game tries to autosave position every 5 sec but onky saves if you stand still on the ground. The place you managed to find should be removed. I think it's the only place on a rather big map where one can actually get stuck, good find.
I'm sure it would be fine in the end, but it's definitely annoying to claim only 3 dependencies. Then not work and find out you need gdal, oh and for that you need numpy, etc..... 
The data is somewhat dynamic, so I would still have to load it at some point.
It ends up being the same in this case I think. Its just javascript objects in an included file at this point, but it parses exactly the same (I think).
And profilers?
Where's the "play now" button? Am I missing something?
I would ask this question in /r/node.
Sure I'm just saying thats a consideration in every language and python is on of the least offenders. 
[A related comparison](http://jsperf.com/jquery-dom-insertion-vs-js-templates).
Mind if I throw this into the original, I was going to do a stringed version but got slack lol
Not sure how to do exactly what you're asking, but I belie you can achieve th same effect by using OpenLayers with a google maps layer and load in a kml file ( ex. http://openlayers.org/dev/examples/sundials-spherical-mercator.html )
Good fucking grief, IE is slooooow. . .
TIL there's an /r/node. I just thought it was a subset of /r/javascript.
I do like that. I was hoping for something a bit shorter, perhaps a one-liner, that could gain traction as an "accepted best practice" for this sort of application. What that script has done, now that I look at it, basically mimics what I put above (which apparently doesn't run - so set in my stylistic ways that I forgot things had to be declared before they were referenced!). What I've settled on now is: (function(root){ // code here, attach to root }(typeof exports !== "undefined" ? exports : (window['libraryName'] = {}))); I use `window['libraryName']` instead of `window.libraryName` because the Closure Compiler optimizes it out if you don't reference it by string. Thanks for the link though - definitely learned something reading it :)
One thing I'd like to see from Node.js is an API like [Finagle](http://engineering.twitter.com/2011/08/finagle-protocol-agnostic-rpc-system.html) or [HttpAsyncClient](http://hc.apache.org/httpcomponents-asyncclient-dev/httpasyncclient/apidocs/org/apache/http/nio/client/HttpAsyncClient.html#execute\(org.apache.http.client.methods.HttpUriRequest, org.apache.http.nio.concurrent.FutureCallback\)): var future = httpClient.execute(request, callback); Where you can call future.get() to block, should you wish to use synchronous method call and optionally pass in a callback. This seems to be more useful than having a sync and async version of many of the methods. It can also allow you to pass result of the async call to other functions, perhaps to be consumed at a later time.
not at all
I added another test case: http://jsperf.com/2dom-manipulation-js-templating-vs-programatic-jquery/6
I really like that solution, looks elegant.
Yeah I am trying to figure out best practises to render a heavy table in IE6/7. Not just with optimized code but possibly just a play on human cognitive to do it smoothly
The [method used by Q][1] is pretty comprehensive and succinct: (function (definition, undefined) { // RequireJS if (typeof define === "function") { define(function (require, exports, module) { definition(require, exports, module); }); // CommonJS } else if (typeof exports === "object") { definition(require, exports, module); // &lt;script&gt; } else { YourGlobalName = definition(undefined, { }, { }); } })(function (require, exports, module, undefined) { // Your code here exports.someFunc1 = function(){}; exports.someFunc2 = function(){}; return exports; }); [1]: https://github.com/kriskowal/q/blob/master/q.js#L13
&gt; Without closures both variables count and totalBytes would have to be made global Uhhh, you *made* them global in the asynchronous code. They should be defined inside the calculateByteSize function. You could even move them into the callback function for the readdir call.
weird thing: my friend coded [another library called O](https://github.com/marianoguerra/O) to handle some sort of functional solutions, such as flip, compose and partial
game starts right away.. you should see "Loaded..." on the screen before it starts. Try CTRL+F5 if nothing happens. You'll need a fairly new version of chrome, firefox, safari or IE (IE9). If you got a new version, tried refreshing and it still doesn't work, I would love output of the javascript console. 
Thanks - I was hoping for something a bit shorter, but that is succinct, to the point, and (relatively) easy to read. And it works everywhere!
I see no "play now" button on the [page you linked][1]. [1]: http://www.ludumdare.com/compo/ludum-dare-21/?action=preview&amp;uid=1087
If the problem were simple then you would not be asking for assistance. My advise is to troubleshoot how you are using that plugin or stop using the plugin entirely. One of those will bring you closing to understanding the problem while the other will give an instant solution.
I'd say thank you but you already know how useless that answer was. 
This is merely an article on how to use callbacks for predefined asynchronous functions... it needs to cover how to create your own asynchronous functions with a callback argument for the nodejs noob to truly utitlize nodejs.
Sounds like styles are applied to the items (eg. float left) by the javascript and then the browser redraws the page, giving the redraw effect. Look into how the page is rendered by the browser.
If you want help, I suggest you learn how to ask properly and how to respond politely. With that said, I also suggest you load your custom.js after zoombox.js, because that is where one of the many errors you have is occurring.
You have the ID's incorrect setup. You made each one unique. These are where you are supposed to set the type value, so they should have WEB/PRINT/ETC, not something unique : data-id="id-5" 
ah, it's "Web". It's a gamedev compo so ppl can submit versions for different platforms. Clicking wither "Windows" or "Web" will lead to the game @ http://ippa.se/webgames/the_escape/index.html
+ When you die (by eating your own tail), it says you've scored 0 points, eventhough you scored more. + Other than that, very nice!
Oh nice catch, was resetting the score var before it showed it on the screen. Fixed, and thanks!
The bottom right corner of a maximized browser and the top right corner is occasionally covered by desktop notifications, which make the snake disappear behind them. 
Am I missing something or does this not really have much do to with HTML5, but a lot to do with Javascript?
Uses the canvas tag and draws everything on the screen with HTML5. That does all happen with javascript, hence the reason for posting in the javascript subreddit.
**5**: Sorry. That's not Numberwang.
Thank you. I have tried this, the issue is still occurring. Please inform me what part of my question was not proper. No, I am not being sarcastic, I actually would like to know what I said incorrectly. Not everyone that goes to r/javascript is a javascript programmer. Being a member of the reddit community I (incorrectly) assumed that people would be willing to help, such as antinitro, xopj, and yourself. Mr austincheney was 100% unhelpful and leaving no comment whatsoever would have been just as helpful. But instead he/she decided to "inform" me that I should not bother trying something new because I can not master it on the first try. This is NOT helping anyone but his/her own ego. So no, I will not be polite to a response like that, but I will be polite to a polite response to my initial question.
I tried naming them all the same but it still does not work. [this](http://themes.iki-bir.com/locusv3/locus/dark/1.html) is what I'm trying to reproduce but not having much luck ( or skill)
Now you have the correct animations working with the data-id's but you have conflicting styles causing them to not move when they are supposed to animate. Remove your styles from the objects that force position so they can move with the animations style code.
My string concatenation + Array.join [is faster](http://jsperf.com/2dom-manipulation-js-templating-vs-programatic-jquery/15) then the other Array DOM solution with jQuery, and in less code!
Thank you. I'm starting from scratch because everything is starting to get a bit too messy for my taste. 
16? 32!
Can you make it playable without the keyboard? More specifically for iPhone use.
I was thinking about that a littler earlier. What would you think the best way to implement that would be? Touching the top area of the screen goes up, right side of the screen goes right, etc, or something else?
I thought I had ninja skills, until I noticed that running into the wall didn't kill you :| Plays quite well though! Good job.
Thanks! Maybe I should make a 4th difficulty level where you can't hit the walls as well.
Do eet
How about triangular zones that are relative to the current position of the snake? Picture a box with an x in it, with the snake at the intersection, dynamically adjusting the planes' coordinates as the snake moves.
This. No need to get any fancier.
Pretty good, did you use a framework?
Doesn't look like it - view the source on the page 
I noticed that after you lose a game, start a new one, then try to pause it, it says paused, but also the losing message from the last game you played. EDIT: Forgot to mention that it's a really nice game :) EDIT 2: I would also suggest adding functionality for the WASD keys, I'm pretty sure something like this would work: document.onkeydown = function (evt) { var keyCode; if (!press_keys) { return null; } evt = evt || window.event; keyCode = evt.keyCode; switch (keyCode) { // 'A' and left arrow case 65: case 37: if (dir != 'right') { left(); } break; // 'W' and up arrow case 87: case 38: if (dir != 'down') { up(); } break; // 'D' and right arrow case 68: case 39: if (dir != 'left') { right(); } break; // 'S' and down arrow case 83: case 40: if (dir != 'up') { down(); } break; default: break; } };
Nice. Looks like a good way to have a first play with canvas... I found a potentially unintended 'feature' in that if you hold a key down you can travel a lot faster.
Nice work. On another note, although you're using an HTML5 doctype, you're using a lot of XMLisms even though you're only serving the page as text/html. If you need to serve the page as text/html to some clients and application/xhtml+xml to other clients, you can follow the [Polyglot Markup Guide](http://dev.w3.org/html5/html-xhtml-author-guide/). But, since you're only serving as text/html, you could fix some things with the markup and code to be more in the spirit of HTML5: * Get rid of @xmlns and @xml:lang on the html element. They don't do anything in this case. * Change your one meta element to &amp;lt;meta charset="utf-8"&amp;gt;. * Get rid of @type on the script elements. @type defaults to text/javascript. You can do the same for stylesheets as they default to text/css. * Close void elements with &amp;gt; instead of /&amp;gt;. The latter isn't needed and doesn't make authoring any easier \(as you have to know which elements are void elements either way\). * Get rid of the CDATA comments in the script element's textContent. They're not needed. * Get rid of @language on the script element. * Use &lt;http://validator.nu/&gt; to see if your page validates. * For IE, if you're only targeting IE9+, consider using addEventListener\(\) for your event handler registering. And, also make use of the "DOMContentLoaded" event with window.addEventListener() instead of using the body element's @onload. * Note that setting style.display to an empty string will reset the display for the element back to the default. * A CSS block is made up of a semi-colon-separated list of properties. This means that you don't need a ';' after the last property. * media="screen" limits your css to one mode. Not sure that's what you want. But, I'm not saying that you shouldn't quote your attribute values or that you shouldn't explictly close your elements. Even though HTML5 allows those, those are only meant for advanced situations. It's no biggie though, just some suggestions. An HTML5 app is more impressive when it actually uses clean, HTML5 markup etc. Also, see [HTML5 differences from HTML4](http://dev.w3.org/html5/html4-differences/).
Just an FYI. If you hold down the arrow key, the snake won't go really fast in Opera. This is Opera bug CORE-19753 and is because Opera doesn't repeat the keydown event (only keypress) when you hold down the key.
Why don´t they fix this bug?
They will (and pretty much have to).
No, just good old regular javascript :)
Thanks for the tips! Hard to shake some of those old habits from HTML4 it seems.
Yes, but from what I understand the browser support is still spotty for most codecs.
Thank you, that first bug should be fixed now. I've also added WASD key support per your suggestion as well!
It's really a matter of preference. I, for example, think that self-closing tags and quotes are cleaner rather than messier. I wouldn't worry about explicitly changing it unless you or the people you're working with have a specific style you/they wish to maintain. Nice work on the game! Good, old-fashioned hand-written javascript. It would be interesting to see the Google Analytics results for how long people hung around and played.
Good question, just checked Google Analytics and the average visit length has been 2:08.
You should limit the game dimensions... This game is super-boring @1920x1200 :)
[Immediately-Invoked Function Expression](http://benalman.com/news/2010/11/immediately-invoked-function-expression/) is a better name for this pattern.
Haha yeah that was one of my concerns, but one of my goals when I set out was to make the game full-screen (before I decided on snake), as more of a learning thing.
On another note your JS could do with a bit of a tidy up. Encapsulate those JS functions into an object so you don't pollute the global namespace. Also put the JS in an external file so the browser can cache it. I like the fact that you didn't use jQuery but it really shows how much jQuery improves things, the DOM API is really verbose!
why do developers have the impression that javascript can only be cached if it is an external file? this html file will get cached much in the same way as any other file
canvas is graphics only (with 2d and now 3d with webgl). audio is implemented with the audio tag (as easy as audio src="file.mp3" with mp3 or ogg, browser depending)
Yes, it was somewhat painful using pure JS instead of jQuery. I kept it all in one file so people could easily view the source of the game, otherwise it would have been put in another file, but as the below poster noted, the HTML file will get cached as well. Some of the formatting also looks messed up in view source because of CloudFlare.
Will be watching this later, thanks!
hjkl &gt; wasd
Down voted, because your advise is accurate to HTML5, but it is still bad advice. XHTML is backwards/forwards compatible to HTML5, but the conventions you advise, while valid in HTML5, are not forwards compatible to XHTML. Sloppy markup code that is significantly more complex to parse may be valid, but merely achieving validation is not necessarily an indication of competence and is certainly not an indication of excellence.
I agree with AyeMatey. It takes A LOT of time to properly vet a new framework, so before I decide to start really digging in, I need some sense of what batman has to offer me that is different and unique. I'm comfortable with backbone right now, so you need to tell me what problem you solve better. And it has to be a helluva problem for me to consider solving it in coffeescript ;) That said, good luck!
The easiest way to get up and running would be to generate the KML into a file, then upload that file to a google fusion table. From that it's super easy to incorporate into a google map. (instructions are in the maps API docs, I'd more fully explain but I'm on my iPad. Feel free to msg me if you need more specifics.) Using fusion tables is also awesome because you can change colors and opacity on the fly. Generated KML combined with fusion tables are how I built the map at http://broadband.com/map. The DSL and EOC layers are KML circles just like you are building.
I just (re)wrote my own StateMachine implementation for my game framework, you're welcome to use any of it for inspiration: [gameblocks.js/src/State.js](https://github.com/shazow/gameblocks.js/blob/master/src/State.js)
guy says "whilst" a lot.
This is a great screencast if you've never worked with Backbone or have just been copy-and-pasting. His presentation is very accessible and I'm looking forward to future screencasts of his. (!n00bs take heed, this screencast doesn't progress past Views.) **Not to take anything away from Joey**, but if you're looking learn the ins and outs of Backbone and have $24 dollars to spend, I can't recommend the two [PeepCode](http://peepcode.com/products/backbone-js) episodes enough.
On Safari 5.0.6, your stringed DOM test was still (barely) the fastest. That said, I think your string cat + array join is the most elegant solution.
First you need to understand that austincheney's response was completely appropriate to your question. He didn't hand you any answers, but outlined a method of troubleshooting the problem. You're lack of info in the description of the problem showed that you didn't go through this process. If you learn to troubleshoot and debug your code then you will be well on your way to mastering Javascript (or the jQuery framework). This is something that he, nor anyone else can do for you and it is absolutely necessary to learn. So don't be angry when you don't get people pointing out problems clearly for you, he was doing you the favor of pointing out a problem in your method of troubleshooting. Secondly, even if someone gives you a response that you don't like you should still be polite. You win no ones side by continuing the trend of rude behavior. austincheney didn't tell you to not try. He suggested that you need to troubleshoot the plugin you are using and should you find it's the plugin that is at fault then to stop using it. The response you gave nearly made me not comment at all. I was going to downvote you just for that as I'm sure many actually did. How do you expect to find anyone to help you when you respond like this? Remember that you are the one that is asking for help and it is only you that should be expected to be polite. Lastly, I'm going to assume you are striving to learn programming. Don't give up. Many have been down the road you are about to embark upon, including myself. Learn how to ask without assuming that you will be shown all the answers. Now in the title of this thread you wrote "a small problem with javascript". This is the first issue, You are making the assumption that it is javascript. It could be, but it could be css, the dom, your code, or any number of issues. Now on to your question. In your description you never asked a question. You said "my question is simple" and then proceeded to describe something, but never asked anything. "?"&lt;- this denotes a question. You also need to be direct, we know that you haven't seen anything like this before because you are asking for help. That is useless information that helps no one. And lastly, provide links with proper formatting because we are helping you and don't necessarily want to find everything just to do it. Make it convenient to help you and you will get more answers. ( example: [My site](boctay.com/asaf) that I'm having issues with [Quicksand plugin](http://razorjack.net/quicksand/) and a link to or a direct posting of your code. ) Hopefully you have read though all of this, and hopefully there wasn't to many spelling errors. If you did then I commend you, and offer you assistance should you require it. Just PM me.
&gt; while valid in HTML5, are not forwards compatible to XHTML. There's no need for compat with XHTML here. But, I already gave a link to guidelines if one wants to have compat with XML for use with XML parsers and such. I listed that link before I gave the list of suggestions even. &gt; markup code that is significantly more complex to parse Depends what's parsing it. If you use your browser's HTML parser or [html5lib](http://code.google.com/p/html5lib/) for example, my suggestions don't make it harder to parse. The parser will probably go through less paths with my suggestions.
What are some potential applications for a library like this?
I'm currently working on a plugin for chrome to encrypt/decrypt messages. :)
I see you're using Byte arrays. Does that mean it only works on WebKit/FF i.e. the newest browsers?
The guys over at /r/netsec are very wary of JS client-side crypto libs. Let them have a look at it.
Ah, by byte array in my code, I mean arrays of integers that represent numbers from 0..255. ;)
Thanks, will do.
That's my hope! Edit: I should point out that it's my hope that my project motivates work in that direction, not that my project would be such a solution. :)
Looks very interesting, I'll definitely have to play around with this!
Thank you for making that test. I personally dislike using the += operator but my distaste extends to iterative loops and classes and lots of other things that other programmers like for some reason so my arguments are rarely compelling.
Better to link to the source. The blog post adds nothing. Also, spin.js is cool but it pegs the CPU on older browsers. Even with chrome CPU usage goes way up.
http://ace.ajax.org/!
For all those times when you want to render an animated gif but wished you could, um, render it with javascript.
Nothing to do with JavaScript, but you could try using audio recording software like [Audacity](http://audacity.sourceforge.net/) to record it as it is playing.
Yeah, I want to extract rather than record though...any idea which subreddit I should repost into?
A quick look with [Wireshark](http://www.wireshark.org/) shows that it's being sent via RTMP (Adobe's streaming protocol). The question now is whether it's RTMPE or not (the secure variant). If not, use Firebug and/or Wireshark to figure out the RTMP URL then use `rtmpdump` to rip it (Adobe send cease and desists to whoever hosts this tool, find it yourself. There's windows GUI wrappers for it too) If it is the secure variant, then recording with another audio program is probably your best shot. There's ways to maximize the quality of the recording, that varies according to system. At least ensure line in/mic input is disabled in the mixer. AFAIK in certain configurations/soundcards/OSes if you match sampling rate/bitness with the output stream, you can get an exact digital copy of what's playing. Never had to do it tho Edit; awesome, looks like rtmpdump has a new (and good!) home at http://rtmpdump.mplayerhq.hu/ , and claims to support RTMPE too
how about you .. I dunno ... *buy the song*? It's $0.99 [right here](http://www.amazon.com/Vato-Explicit/dp/B0012CARLM) to have legally instead of going to a bunch of effort to pirate it. If you can't pay $0.99 for this, you're frankly an asshole.
Don't be a fucking idiot. This is an alternate version of the song that was unreleased, this is literally the only place it can be found. If you're buying music on iTunes/Amazon, you don't care enough about music..... I don't want their shit rips.
Amazing, thank you! I will report back
&gt; this is literally the only place it can be found. so what? you're somehow "entitled" to have a copy of it? answer: No. No you're not. You're not entitled to a free copy of it. &gt; this is literally the only place it can be found. I can *guarantee* that this is false. oh, and regarding this: &gt; If you're buying music on iTunes/Amazon, you don't care enough about music..... I don't want their shit rips. you think ripping from that SWF is going to be better quality and not compressed? It's the same damn thing if not even lower quality. more than likely lower quality, in fact... so you're obviously a moron.
Good list! Does anyone have other candidates?
If you guarantee you can find it legally, I would love to see it. Would save me tons of time. You are not an audiophile, and are sounding stupid. 
&gt; You are not an audiophile, and are sounding stupid. Oh, and you are? trying to rip this audio from a SWF? you think that shit's lossless? you're an absolute moron. Quit the internet.
Of course it's not lossless, BUT ITS THE ONLY PLACE IT CAN BE FOUND. omg are you crazy? are you a fed?
God I hate Reddit, I really do. You try to get a song that can only be found in one little pocket of the Internet, get chastised for downloading illegally, and downvoted all the way. Realize that if I could download this song legally, I would. (But actually I wouldn't, because I prefer EAC/LAME over iTunes/Amazon.)
I've stopped using rich editors entirely, unless the client specifically asks for one. The code they output inevitably results in display errors due to the shitty html they produce, riddled with browser specific behaviors. Instead I use Markdown for all CMS driven copy, driven by [my own fork of the WMD editor](https://github.com/ChiperSoft/wmd) that StackOverflow uses. It accomplishes most of the styling that clients need and always produces clean code that wont break the site.
honestbleeps, check your messages.
Cool function, not sure that hoisting is a good behavior to be relying on ;)
I disagree (at least for early returns), but it's all a matter of style, I guess.
May be better to post this on a blog. [Reddit posts are not Google-able][1] directly, and I can see people Googling for this sort of function (and not searching Reddit). [1]: http://www.reddit.com/robots.txt
It's consistent. What's wrong with relying on it if you know how it works?
Agreed! I thought my clients would resist Markdown in favor of these rich text editors, but I've found that they're totally fine with it &amp; as you said it doesn't break the site. I'm using the jQuery plugin [markitup](http://markitup.jaysalvat.com/examples/markdown/) which has a nice interface and is easy to extend.
Just remembered another... sigh.. option.. RealPlayer Gold seems to do this really well. My sister insists on installing it, and as much as I'd love to remove it immediately, seems to be very reliable at ripping content out of Flash movies. Give it a go, maybe?
This article is about as useful as google. There are no reviews, feature comparisons, or anything to make it worth reading.
This 'Jacascript' does sound scary!
Fortunately, this is a subreddit for javascript, amirite? In seriousness, though, title typo not-withstanding, this is a good submission.
Wow. Don't suppose a mod can edit the title? Sorry, I am apparently illiterate.
If I followed the advice in that blog post, I would not lock my doors or roll my car windows up. After all, people can come along and pick my locks or creak my windows. There's nothing wrong with giving yourself more protection if you don't put more faith in it than it warrants.
this mans a genius. some flawless logic is on display here folks.
I'd say it's about as useful as Yahoo! Answers, because the grammar is about equivalent.
http://www.reddit.com/r/programming/comments/jxb8g/javascript_cryptography_considered_harmful/
Hoisting is not some undocumented trick. It's a well defined part of the language that works in all JS environments.
Nope. At least according to the robots.txt this post will be indexed. After a short check, [it is indexed already](http://www.google.com/search?q=The+function+takes+an+x+and+y+in+the+range+of+0+-+1+and+16+values&amp;hl=en&amp;tbo=1&amp;output=search&amp;source=lnt&amp;tbs=qdr:d&amp;sa=X&amp;ei=SSFbTo-xFsSAhQex26ki&amp;ved=0CAgQpwUoAg&amp;biw=1309&amp;bih=708).
! Apparently I read the robots.txt wrong (one extra *...). Thanks for clearing that up.
This is what's known as a "list post" -- a nearly contentless post made of a list of related items that ultimately teaches you nothing. They exist solely to gather page views and ad revenue.
Once again, for the record, JavaScript Crypto is not harmful; Browser side JavaScript Crypto is. 
You have to understand that piracy is a very sensitive issue. If you post in the open, especially in a subreddit whose members (programmers) are in the business of producing products which piracy can affect massively, then you're not going to get a great response. Have a bit more sense foo. &gt;(But actually I wouldn't, because I prefer EAC/LAME over iTunes/Amazon.) EAC is a program for ripping CDs. LAME is an MP3 encoder. iTunes and Amazon are methods of buying digitised music. What? Are you saying you'd rip CDs over buying mp3s or que? If you're truly concerned about audio quality you should be encoding your ripped CDs using a lossless codec. FLAC, ALAC etc.
There are much better sources of info for event delegation out there. Also, he doesn't seem to understand JS in general too well: $(document).ready(function(){ myapp.dashboard.loadEvents() }); Can be simplified to: $(document).ready( myapp.dashboard.loadEvents ); Which can further be simplified to: $( myapp.dashboard.loadEvents );
No, that analogy is flawed, as it does not touch the insecurities involved in client-side code execution environments. This is not about *your* car locks and *your* keys. Consider instead the following idea: You want FedEx to securely ship your packages around. You trust them. But instead of using vans with locks and keys you control, you give FedEx blueprints for locks and every time they pick up a package from you, they first stop at a local garage and have a mechanic build a lock for their truck. If the mechanic makes an extra set of keys, you’re screwed. This analogy, while far less colourful, captures the idea that when you send code to a browser you don’t control, you have no idea whether your code is executed the way you expect it to be executed. This has nothing to do with whether the cryptographic algorithms you implement are secure, this has to do with the *protocol* with which they’re used. The author is pointing out that since there is already a secure package shipping system (SSL), you should use it.
What I meant to say was ...without significant documentation. hoisting is one of the weirder things of JS and someone looking at the code may be confused without more documentation on the reasoning.
 'Considered harmful' is overused. Come up with a better catch phase already. You aren't Dijkstra.
He can't do that because then the functions would not be executed with his app object as the context.
Pretty worthless article devoid of any real information.
You're the only fucking idiot here. Don't ever post to this subreddit again.
Kind of an ugly approach IMO. He's setting the `onclick` handler in the `onclick` handler; e.g. the function get called and sets the `onclick` handler, which when clicked, makes an AJAX call. When complete, the handler calls the same function again (itself) to start all over (and the old `onclick` is never explicitly removed). Seems like a better approach would be to delegate the clicks so that the event handler doesn't have to be readded each time.
Some decent points, but most of these have already been soapboxed here _ad nauseam_.
Which plugin is the page attempting to load?
it's a *new* link every time. or you're talking about `jquery.live()`?
I feel your pain. Too many projects these days like to throw down some craptastic "project" which talks a lot but says nothing. They cover all the buzzwords for the bingo, but fail to actually do anything constructive as far as informing the reader as to wtf their project is. _**The short checklist for Crappy Projects™:**_ * github repo - **CHECK** * generic buzzword bingo homepage - **CHECK** * obtuse and/or irrelevant project name (and/or global identifier in code) - **CHECK** * poor homepage design (tiny invisible gray font anyone?) - **CHECK** * bandwagons some trendy new tech - **CHECK**
They still don't, but they do at least have access to it, he has though lost the even itself. I don't think he has made improved the situation with this pattern.
Well, if I were to need the event object you can easily pass it as a parameter too, so it is really not lost... As for $(document).ready( myapp.dashboard.loadEvents ) and $( myapp.dashboard.loadEvents ); even if that was working, I don't see how it realllllyyyy simplify it, Yay less characters vs readability for others? What I am really trying to pass here is giving ideas how to have better code organization with jquery 
No, I meant what I said. &gt; [Delegate](http://api.jquery.com/delegate/): Attach a handler to one or more events for all elements that match the selector, **now or in the future**, based on a specific set of root elements. Although `live()` can replace `delegate()` at times, `delegate()` is generally preferred and is exactly what I was referring to. 
That is fair, I am all for better organization of the jQueries. I am not a huge fan of your method, but you probably wouldn't like mine. To each his own. As long as you have some method to your madness.
it seems that live and delegate are similar and have similar caveats - like the impossibility to stop propagation. but whatever. I can't see how changing rebinging events to "delegate" affects my approach. the point is just loading the entire page without any extra code on the server, not some jquery event handling shit
Would love to see it in fact, maybe its really better than mine, im all for improving
Was just some constructive criticism, take it or leave it.
You said "Kind of an ugly approach IMO." and proved it with some insignificant detail. Constructive criticism, isn't it?
You fail to grasp the meaning of "constructive criticism". But, perhaps instead of attacking me for trying to help you, you should instead worry about your article writing -- since apparently nobody gives a shit about this one.
ouch! My favorite from your checklist, and my major pet peeve, is the *obtuse and/or irrelevant project name*. This isn't limited to Js projects either. The prime offender here is The "Wix" project for windows installer. Nothing to do with js, but it's my axe I'm grinding here. WIX is an acronym: "Windows Installer in XML" - it defines an XML schema for describing an installation package that could be installed by Windows Installer. That's fine as far as it goes. WIX actually means something. But then some fine enterprising engineers built tools around the WIX schema, and named them with all sorts of cute names, playing off the pun of "Wicks". So we have the Candle tool, Burn, light, Dark, Tallow, Heat. Those are real tool names. Take a guess as to what any of them do. For every one of them, there is no connection between the function of the tool and the name of the tool. There is not a single acronym among the bunch. Worse than useless. You can learn about one of them and then have no idea what the others do. You can learn one of them and then in 3 months you cannot remember what it does, because the name is so irrelevant. CC is C compiler. Fine. Simple. Easy. YACC is yet-another-compiler-compiler. Fine. Pronounceable even. Nothing wrong with that. Bison is a step too far on the cuteness meter in my opinion, but it's just one toolname, right. jQuery I have no problem with - once you understand what it does, the name makes sense. Also there is just a small bit of additional terminology to learn, and it also makes sense. A "selector" is an expression that you use to select items. easy. WIX is none of those things. A cute irrelevant project name, many irrelevantly named tools. And guess what - pop the cover on Wix and try to use it, and there's no surprise that the operation of the thing is as convoluted and senseless as the naming structure. I would abandon it but there is no alternative. ok, rant over. 
Thank you. Truly. I will PM you shall I need assistance. 
Dude, you're not being downvoted for pirating, you're being downvoted for acting like a douchewad.
EAC and Lame / super strict standards / lossless encoding, yes, thats what im talking about copyright law is so obsolete lets not even get into it im done
I'm trying to be as logical as possible, dont understand why people are siding with someone who popped into an html question to wag his finger at me
Ok dude sorry i wont post in the javascript subreddit again.....
no, mods cannot edit titles. They can delete entries, but not change them. if you notice a typo right away, just delete the post yourself. if you don't notice til later, there's nothing to be done. 
? It captures the point. what's the objection? 
Only if the person looking at the code doesn't understand Javascript?
Perfectly fine to rely on the behavior, ... although I prefer to define functions prior to any use, where possible. In this case, it's possible, so why violate it? Makes the code easier to read. 
Realize that honestbleeps didn't call you an asshole; he said you're an asshole if you can't pay $0.99 for it. Since it doesn't sound like money has anything to do with it then that didn't apply to you, but you still replied with "don't be a fucking idiot". I think that's where this thread took a wrong turn...
Looks like a solid book, looking forward to reading it. Congrats :) 
To be honest, unless you're working somewhere that it's legally mandated, I believe that progressive enhancement is dying and requiring Javascript is de rigueur, even though everyone is very enthusiastic about it with their mouths. It's hard to make the business case for it because the percentage of people who browse without JS is small(given the reliance on google analytics in so many small and medium businesses to define the customer base non-js-enabled people are often likely to not get counted as people at all) and because major players like GMail and Mobile Me and whatnot all require it; and because animations and ajax and such are impressive to clients and bosses and 'hey look it works in a screen reader and from lynx' is not; and because sites in this day and age are more likely to expose an API for alternate client writers if you don't like their web interface, to me all point to progressive enhancement being on the way out.
I figured it would be best to just reproduce the title verbatim rather than editorialize. I agree with you.
I use noscript, and so I have to enable JavaScript for every new site I visit. So I find it _very_ annoying when I visit a site which cannot be viewed, at all, without JavaScript. This happens a lot on lots of blogs, and commercial websites. Most of the time this is to fix layout issues, but there is no excuse for it. Even the trickiest of layouts often can be built with HTML and CSS. JavaScript should not be required for just seeing a page! But after they have seen it, make it mandatory, with a warning for non-JS users. In my mind, there are only two reasons why you should care about keeping your site usable for non-JS. First if you have an extremely high volume of traffic, as those niche non-JS users quickly add up. The second is if you expect people to not trust your website, such as if your building one hosting pornography. Most websites don't fit into those two categories, and so there is no real gain in supporting non-JavaScript users. But even the Googlebot runs JS whilst browsing the web.
The thrust behind HTML5 seems to be a pervasive yearning to shoehorn an app framework into what's traditionally been a document consumption platform. The more we move away from static content and towards the app model, the more developers are not going to want to do the work to figure out how to handle graceful degradation - especially when the two most popular aftermarket browsers both silently update to the latest stable version every few weeks.
Should be an awesome book. Both authors are smart dudes.
Why does the "best practice" code do the same class-based element lookup on $(".dashboard") three times (in a small sample), rather than caching the lookup? Assuming you *really* don't want to cache the selector, though... $(".dashboard").delegate("#myButton","click", function() { _this.selectedOption(this) }) $(".dashboard").delegate("#myButton2","click", function() { _this.doSomething(this) }) Could be much more easily chained as: $('.dashboard'). delegate("#myButton","click", function() { _this.selectedOption(this) }). delegate("#myButton2","click", function() { _this.doSomething(this) }); But even beyond that, why are these being executed in an anonymous function to begin with? $('.dashboard'). delegate("#myButton", "click", _this.selectedOption). delegate("#myButton2", "click", _this.doSomething); When those functions are executed, the value of `this` will be the element that triggered the event (in this case, #myButton or #myButton2), and the event handler receives a jQuery event object as the first argument (in case you want to stop propagation or something), so `_this.selectedOption` would be: selectedOption: function (e) { $(this).addClass("selected") } Also, the following is needlessly verbose: $(document).ready(function(){ myapp.dashboard.loadEvents() }); Just my two cents. **Edit**: You may want to fix the first line in your code sample. The following will throw a syntax error: var myapp.dashboard = {
Congrats Ben and Anton! This looks killer. Third party JS has been missing a bible for quite some time. I hope your take on it is a huge success.
Does it have an unbind option?
http://disnetdev.com/contracts.coffee/
ಠ_ಠ
So, you going to pay for my time to implement the hacks necessary to make things work without js?
this makes not much sense.
I guess r/node would appreciate it more.
"so there is no real gain in supporting non-JavaScript users" ... Sorry but : I don't know in what decade you live in but it's probably the 90's It's actually the other way around : JS is gaining popularity due to performance improvements and more and more developers use JS for apps of today. Name a good website that doesn't use JS ? (and please don't reply www.useit.com, which looks like a site made by a kid with MS Word). Not using JS today (especially in a browser like Chrome) would be like having internet at home but not using it, Non-JavaScript users are probably the same frustrated users that said Flash was shit back in the days that will complain about JS today ..., if you don't want technology, don't use it, I mean you can still use IE6, it's probably the best browser for you
This looks incredible, I've been looking for something with types as prescriptive as this. I can see this resulting in far more robust code. 
&gt; " into what's traditionally been a document consumption platform." HTTP and the web were designed from the very beginning for applications and server communications.
It's relatively easy to do in pure javascript. I tried opening some r/javascript minds to the idea but just got bashed for even thinking such a thing. A structural type system, or this contract idea only enhances a language. My crude, first attempt can be found [here](http://www.reddit.com/r/javascript/comments/jnwvb/javascript_am_i_doing_it_right/).
I've done similar things myself :) but I've always wanted it to be apart of types themselves so I wouldn't have to keep repeating myself. 
I got it down to one extra line of code per function or constructor, so in terms of verbosity, there is no difference to Haskell. The type signatures on there are more for my benefit. But I could see a complier that read them and did some magic.
If I understand correctly there is no unbind function but you can give the shortcut *scope* and then switch to another scope to "unbind". This leaves your shortcut functions in place but they no longer get called. Looks pretty good to me, will probably try it out in my current project.
Seems like parent is agreeing with you... JL235 said that unless you have very high volume of traffic or your site is one that people inherently won't trust that it's not worth the time to make the site funcional for those without JS.
In coffeescript, instead of throwing an exception if a parameter is null, its usually better to just provide a default value for it. In similar fashion, instead of failing when a parameters field is not present, you can use null coalescence and the ? operator to provide a default. // if no person or person has no age then use zero age = person?.age ? 0 Your code gains defensibility either way, but this way it retains much more flexibility. Flexibility is the main advantage of loosely typed languages vs strongly typed languages. When you add restrictive type checks you lose the main advantages, without gaining much in return. This is why you're doing it wrong. You asked a question and got an answer, but you don't want to accept it. So go code ten years of javascript and figure it out yourself. 
always quote your attribute selectors; e.g. $('[href$=".jpg"]')
You must quote ".jpg", ".png" and ".gif" : http://api.jquery.com/attribute-ends-with-selector/ $('[href$=".jpg"],[href$=".png"],[href$=".gif"]').each(function(){ &lt;stuff&gt; })
Quick look at the source of this page shows that reddit is currently using [jQuery 1.6.1](http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js).
&gt; and because major players like GMail and Mobile Me and whatnot all require it [GMail does not require it.](https://mail.google.com/mail/h/) You may be correct in your synopsis, however, just because the percentage of our population that is handicapped to the point of needing a special parking space is very small, that doesn't mean that we're going to get rid of handicapped parking spaces.
Hum... yes, I'm a bit old fashioned aren't I?... Thanks!!
Ah no way! Thanks!
Legendary! Thank-you! I noticed they were still working in some circumstances so I (wrongly) guessed they weren't needed. But yes, this was the problem.
This was also [recently submitted to r/programming](http://www.reddit.com/r/programming/comments/jwzus/keymasterjs_painless_keyboard_shortcuts_for/).
Haven't had time to digest it all yet, but it looks like a very good article.
http://jsfiddle.net/Thf2v/ If you implemented something like cURL as suggested above you would be able to programmatically create a CSV or something like this that would require almost no work on your end. The time you'd save might make figuring this out worthwhile for you.
You sir, just blew my mind. That is not an understatement. Thanks!
I'm kinda sleepy and misinterpreted LOC to mean [Library of Congress](http://en.wikipedia.org/wiki/Library_of_Congress#Using_the_Library) and was confused how a 120 terabyte library could be called simple.
I suspect there's a reason we have laws mandating such things, because left to their own devices businesses may decide that building accessibility features are more cost than they are worth. I would be happy to be wrong on this though.
Yup, just like we have [section 508](http://www.section508.gov/) for websites. It's all fine and dandy for you to make your cat's homepage inaccessible, but if you are a government entity then you're required to be accessible. Whether or not that entails graceful degradation is a practice left up to the implementer, but saying that there's no place for accessibility now, or in the future, is a fallacy.
But that's exactly what I said: &gt; unless you're working somewhere that it's legally mandated Whereas the ADA/handicap parking/ramps and such goes beyond government buildings.
Oh, true. Sorry, Monday is still persisted in a stale cache in my head somewhere and is causing issues...
I think you must have misread what I wrote, because I agree, most of the time there is no real gain in not supporting JavaScript.
I presume you mean in regards to building the site layout, because I said that once the user is able to see it, then make JavaScript mandatory. So if you cannot build a layout in HTML and CSS, then I won't pay you at all. I'll hire someone else.
I think it depends if you are creating a "web page" or a "web app" and the intended/desired functionality. Web Pages tend to be basic enough, that I can't see why you wouldn't put a bit of effort into doing progressive enhancement. But if you are building a fairly interactive web-application, that needs to do service calls, calculations, dynamically add/remove/display/hide things, etc, then I think the case for 'progressive enhancement' gets to be pretty small, and not worth the additional time/effort.
my bad, cheers 
Initially, I didn't really get an answer, more of a glib dismissal. I thought it interesting that I would come across a very similar idea from Mozilla in the same week. You seem to have a really closed mind and I fear you are going to hate the language considering where it is already heading. You do realise that for the ECMAScript Harmony specification there are discussions on how to introduce a form of static typing, likely structural typing? &gt; without gaining much in return You couldn't be more wrong. If only having dealt with type systems of the Java kind, this still wouldn't be correct, but the contempt would be understandable. Modern type systems add robustness, while retaining flexibility, especially something like a contractual design which mimics duck-typing. As Javascript is used increasingly by real programmers rather than UI tweakers, this change to a more precise and powerful language seems inevitable.
I don't have an answer but I do have some suggestions. you might wanna try: - asking on [stackoverflow.com](http://stackoverflow.com) - it's a community forum for devs of all kinds, they discuss JS questions like yours commonly. - posting a working example of the problem in jsfiddle.net , so that people can see what the real problem is. jsfiddle is free to use and requires no registration. Just post your example, grab the url, and share. 
Thank you for the suggestions! I'm always glad to learn about new resources for these kinds of things. :)
I am not claiming that there is no type system that "cannot gain much in return". I am saying that your type system hack in javascript will not "gain much in return". A duck-typing system, contract enforcement, validation etc may all be fine and dandy. If you only have a little software based hack though, that cannot be introspected in order to document the contract, and/or enforce it in different layers/languages, then you are not gaining much. Lol. Go see my latest UI tweaking (90% of the app is client side Javascript. incredibly scalable and responsive.): http://members.viewpath3.com (Login using OpenID: Gmail, you'll be in the app instantly.) 
I'm not calling you a UI tweaker, but that up until recently this was the most common usecase for JS and I don't think it is a coincidence that going server side you are getting all the tools that many 'proper' programmers want (a module system, type checking, IDEs, etc). Remember though you all but stomped on the idea of trying to enforce strong typing in Javascript, and if the author of contracts.coffee would have listened to that advice, then he would never have produced something interesting: double :: (Num) -&gt; Num double = (x) -&gt; x + x console.log(double 2) Compiles to: var double; double = guard(fun([Num], Num, {}),function(x) { return x + x; }); console.log(double(2));
Now that func has no flexibility. This is better: double = (a) -&gt; a = Number a a * a double "5" yields 10
Screen readers are OK with javascript.
Good article. I don't agree with every suggestion, but he basically describes what I've been trying (and not entirely succeeding) to accomplish with my own code.
I think having nothing visible is sometimes caused by a site that has a style like "body { visibility:hidden; }", then on page load they make it visible with javascript. This is to fix flash of unstyled content that supposedly scares stupid users or bothers anal designers. The solution is to add the visibility:hidden; with javascript so it won't be there at all when there is no JS. But that is just one of probably many problems.
 Whether or not a given screenreader can fathom JS is by no means any sort of guarantee that the site is accessible. And I believe only current-gen readers are can handle JS, and I'd be surprised if they can handle _all_ JS, and handle it _well_. Quite a few of the places that provide assistance to the handicapped aren't exactly gushing with money, and they typically aren't also early adopters. 
&gt;cannot build a layout in HTML and CSS I can, but it's rarely worthwhile to target anything outside of IE(6/7/8/9), Firefox 3-6, Chrome, and Safari.
I agree, but I don't see how that is relevant. I have seen Wordpress themes, that are totally messed up and unreadable, in Firefox, when JavaScript is not enabled. When going directly to a blog post or an article, JavaScript should not be needed in order to read it. That is what I am mostly getting at.
I'd love to see "crazy" finished to having a gravity that attracts the particles back to their home positions. 
I'm not affiliated with them but I can say that both the people in Amsterdam as well as their office are awesome. Any JS developer would definitely learn a ton working there.
They don't seem to work in Opera.
me gusta
These are some of the coolest implementations of canvas I've seen yet. makes me feel like trapcode should make a particular plugin for html5 development
Thanks!
Hmmm, I'll take a look at that one for you. Thanks for the tip off!
Its funny you say that, I'm working on one that does exactly that - although I think I'm going to use it for an interactive 404 page.
This isn't a JS syntax question, more of a ShortScroll / quicksand question. You may want to post to their mailing lists.
I'm finishing up a gravity simulator of my own.. going really great, except for the fact that my FPS is horrible on every browser except Chrome, when I raise the particle count. I would love to see yours when you get done, I want to see how someone could get something like that to run smoothly for non-Chrome browsers.
I do really like this style of teaching. It's a shame that this particular site so far is only for people who don't know any programming at all (though it seems great for that purpose!). The most useful one of this kind of thing I've found so far is http://try.redis-db.com/
I agree that javascript should not be required for a layout, at most, supplemental to it... other than that I could care less about the non-js users who won't be able to properly use 90% of the web. I care almost as much as the ones who disable cookies.
scumbag internet offers knowledge distracts you with bewbs
Bookmarkin'
I wonder how breastfeeding became associated with jQuery?
So you learned Groovy Programming instead? 
It was probably, originally, an error ... or got off of "spoon feeding" as "related." Of course, now with everyone [commenting about it in the video comments](http://www.youtube.com/watch?v=Hk5oXFtYLwE), it's likely "stuck." LOL
This is why backbone.js is the best. If you code frontend javascript, you must learn it.
Well of course a video is not a good introduction to a library. And it doesn't help to show bewbs on the sidebar either, but that's secondary :P
Heard in the Design Review: "Oh, yeah. right here. Here's the problem right here, Frank. You've got bewbs on the side bar here. See?" 
TIL a new spelling of a favorite old word. 
Because you can work with collections? That's nothing new or specific to backbone.
Too hard:D. I looks really cool, but I think orginal was... more playable. But really nice job! It runs very smoothly! (tested on Firefox)
&gt; Well of course a video is not a good introduction to a library. For a quick overview for someone who isn't interested in diving into code just yet or wading through tomes of documentation, videos and screencasts are a brilliant introduction to any framework or language. Edit: Your [example](http://www.reddit.com/r/javascript/comments/japbn/help_me_understand_returning_a_fuction/c2ajg4u) of a JS closure is one of the easiest examples I've ever seen. Lovely work :)
In your main method you have a pair of nested loops that don't cache the array's size. I'd try replacing this: for(var j = 0; j &lt; _drawOrder.length; j++) with this: var arrayLength = _drawOrder.length; for(var j = 0; j &lt; arrayLength; j++) for each of them. I'm not sure how much improvement that would yield, but I think it's worth a try.
Beginners should learn normal JavaScript anyways.
The benefit is that you can build a full MVC system with very little code. So, you can work with collections, and connect form controls to your models, which change your models and collections, which update your views, which sync with your server via REST, and update your URL via HTML5 History API. Logically. Consistently. Backbone is the only non-crappy JS MVC framework I've used. The fact that it's tiny in size and bloat-free is a nice bonus.
Thanks for the synopsis. Your original post was short and a little on the sensational side, so I wasn't sure if you were trolling, or a fanboy, or what....but now I see that you're just passionate about it. Which is good!
Sometimes there are other players but they just sit there with a timer over their head...
I'm guessing it doesn't realize when people disconnect. I just ran a race all alone. In related news, I'm a winner!
it is a bug we currently have, this was completely done in 48hs and now we cannot touch it until the node.js knockout competition is over next week. it is really fun when there are tons of people playing
Oh, hai! Welcome to teh Interwebz! 
Any workaround? How do I actually get to play with people?
well... you could upvote the post and wait for other redditors to arrive... you can also send the url of the room you are on to other people or even create your own ~ http://playbossman.com/play/radhruin
I think the problem is lack of promotion, huge set of packages and raw, Java style documentation. And goog is much longer than $ or _ ;). It looks like a framework dedicated to huge B2C applications, so "usual" developers omit it. Maybe they don't know it is modular... or maybe just they don't want to know...
Just looking at the documentation, I would say your guesses are all good ones. I have no experience with Closure, but some initial reactions from the tutorial: the goog.dom.createDom api is kind of just uglier than that of jQuery, and looks more like native createElement and appendChild APIs, which I think most people are hoping to leave behind when they start using a library. this line: return new goog.ui.Zippy(this.headerElement, this.contentElement); is doing too much magic for my taste: there is no indication of what type of event is bound ('click'), nor what the call would be to unbind said event. $(element).bind('click', function() { doShit(); }); is both clearer as to what's going on, and gives a good sense of what you would do to unbind that event, should you want to. Sure, more LOC are required to accomplish the same behaviour as you get with goog.ui.Zippy, but that is a trade-off I'm happy to make. Also, FWIW I've tended to avoid closure compiler so far because I've heard of a few cases where its proclivity towards aggressive optimizations (vs. yuicompressor) has caused some serious web dev headaches. 
I wonder the same thing. Right now I can't choose between YUI3 and Google Closure for a next web-application. Google Closure has a nice compiler, a huge UI library and Google in the name.YUI3 has Douglas Crockford (somewhere in Yahoo), MVC and node.js compatibility. 
Ya you may be on to something re: Closure being more fit for (very) large B2C apps. I would imagine the system as a whole really starts humming when used at that scale. A modular js system would help keep developers from stepping on each others toes, a templating solution that can be used client- and server-side (would also help w/ i18n, etc), and a compiler that would shrink it _all_ down to the absolute minimum. There's very few sites that have a real need for any of that stuff. Thanks for your answer. I've subsequently updated my question :)
It's indeed far too hard, but it seems to run just fine in Opera.
Babies are pretty much the most beginner-y of all beginners.
Thanks for your input. I agree that jQuery is by far (!) easier to read and grok w/o having a mastery of the entire library. That certainly may be a reason for why people don't use Closure; they just stop looking after they play with jQuery. Also, valid points re: goog.ui.Zippy. However, I would blame that on Zippy being a part of the ui/component library where it might be ok to limit the amount of options and instead have a "it just works" component. Additionally, the beautiful thing about Closure is that I could extend goog.ui.Zippy with something that has access to some of the Zippy magic, but, might provide more options for customization, or whatever...
It seems by your comments that some of you are criticizing this, when it is in fact a really smart thing: 1) I assume they are sending you the top most popular insecure passwords. 2) They probably have a huge dictionary of passwords server side. 3) They have probably measured the resources required to send that short list (an additional about 1kb of data in a request that is being served) to the resources to check it server side, and it is probably better for them to do it this way. 4) From the user perspective, it is also better. 1kb more of data in the same request takes, for the most of connections, a fraction of a second and far less time than submitting data to be checked server side. So, basically, this is probably less resource expensive for them, and definitely better for the end user... It is smart and it should probably done this way for all websites... 
All other arguments aside, I'm really disappointed in the name. It violates my cognitive namespacing rules. Specifically the rule: "Don't give your library/framework/project the same name as an already existing language construct, you moron." I don't want to ever have a conversation like this: "Hey what do you think about using Closure on this project?" "Of course, closures are really handy." "No I mean the library" "We don't need a library, the language supports them natively" "I don't know, third base! Wupwupwup!"
I guess the big question is how many calculations you are doing, and how often is your main loop running? - These examples update once every 40ms -- also they are using set interval, which isn't really the optimum method for keeping a constant framerate (requestAnimationFrame is the way to go)
Haha, word.
this doesn't change much, but it's a nice bug find. _drawOrder is set at the beginning and generally left untouched after (it sets the order of drawing objects that are taken outside of the loop, think background, overlays etc.). If it was to be shortened during the loop run, the game could crash. Now it won't, thanks!
The difficulty is currently a subject to change, I'd like to add stages and/or levels. I thought it was too hard as well, but all my friends that tested the game beat it on the first run and was like meh. I wondered what's wrong with myself, now I know I'm not the only one :) Also my friends probably play way too many games, it seems.
Closure compiler is great and I know a lot of people using it. Closure library on the other hand... I tried, I just don't like it. It's hard for me to see what kind of project could have a use for it.
awesome!
tried their tutorial, the templates and other library features are awesome, definetly want to use this in my next project 
Relevant link: http://rednuht.org/test/simulator/ Posted a while ago in programming: http://www.reddit.com/r/programming/comments/fm1fb/genetic_car_simulator_jscanvas/
Disclaimer: I'm a heavy closure user and committed a few bug fixes to it. Closure is something for big web apps (like Gmail or Maps), with a lot of experienced developers. It forces you to write modular and maintainable code, that's maybe a bit verbose and does not always look elegant. The library is also big and confusing at the beginning, and the compiler has to be integrated into your build process to work well (but then produces amazing results). Most JavaScript developers don't need these things. If all you want to do is a bit of AJAX and a few fancy effects, it's faster to it with jQuery. Also, a lot of JS developers are coming from scripting languages and don't know / like / want to use the concepts that the Closure people have taken from Java and introduced to JS.
Is that like naming your browser the name of another browser's rendering engine? Firefox Chrome and Chrome Webkit...wtf guys? Edit: I wrote this before bed after a 15 work day. Spent all day in JS land and my brain was fried. Everyone who said I was wrong, is right. 
cool idea. I've written about (and coded) [genetic algorithms in javascript](http://www.puremango.co.uk/2010/12/genetic-algorithm-for-hello-world/) in the past and would be happy to contribute some code. It's something I'm very interested in.
Maybe the fact that the site doesn't display a list of the features of the library isn't helping. I won't follow a tutorial for a new library before I know what are its advantages
The rendering engine of Firefox is [Gecko](https://developer.mozilla.org/en/Gecko), the UI you interact with ([XUL](https://developer.mozilla.org/En/XUL) &amp; JS) is the browser's chrome.
Your bottlenecks: `draw` (in SolN.js) and `explode` (in objects.js). Inside of those you call `getAreaType` and `getFrame` a lot, which are likely culprits. I notice you have a lot of `getX`, `getHeight`, etc. functions. Kill them. It's bad JavaScript style; just use plain properties. Minimize load times by using a sprite sheet and merging JS files together. Bake the CSS into the HTML (`&lt;style&gt;`). Try to reduce canvas state changes. `save` and `restore` only when necessary; minimize use of matrix transformations; clear the screen as little as possible. The hit testing on the player feels off. I'm pretty sure I should have slid by an asteroid a few times, but I died instead. I once got into a weird state where I could control the ship but none of the asteroids were moving (until I destroyed an asteroid, in which case the asteroid split into two and those pieces began moving). Dunno what caused it, but it was after I lost a life. I like the explosion effects. The lower framerate kinda kills the effect, but it's still nice. My suggestion? Screw canvas. This game doesn't need canvas. SVG or DOM elements (`&lt;img&gt;`). Sure, canvas is easier to use, but SVG and DOM are more practical in terms of performance and compatibility[1]. I didn't look at the code much, but it looked pretty messy (though you already mentioned that). Lots of `if` statements is the sign of poor code design. Hope this stream of random notes helps. [1] Well, SVG isn't compatible at *all* if you go after more "advanced" features (like, hell, fonts, filters and animations ... they're broken in different ways in different browsers =|).
I looked into it a couple of months ago. A couple of the demos didn't work and that was enough to turn me away.
This only really helps when dealing with DOM lists. Quite a micro-optimization; there are much lower-hanging fruit in terms of optimizability in the code base.
Can you tell us what exactly they have taken from Java? I've seen only a pseudoclassical inheritance model and declaring types in comments. Is there anything else?
What are you talking about? Chrome in the context of "firefox's chrome" is the non-page part of the browser's UI: http://en.wikipedia.org/wiki/User_interface_chrome#User_interface_and_interaction_design (Chrome has chrome as well, in fact google chrome is named specifically after the UI frame: it's a reference to the browser being only a thin UI veneer over raw unadulterated Google experience): toolbar buttons, tabs, address bar are chrome. Firefox's rendering engine, as pointed out by pitiless, is called Gecko. &gt; Chrome Webkit Chrome is called Chrome (or Google Chrome), and the only "browser" called "Webkit" is not a browser, it's the actual (Cocoa) Webkit engine (trunk version) in the Safari chrome. There's no such thing as Chrome Webkit.
Thanks a lot. I used getX, getHeight etc, because I was reading on OOP in C++ at the time and decided that would be the way to go, but if they are slower, I'll be removing them. (Also, how do you make only certain words display in code? I tried and I can only get a whole line that way) Hit testing is done by bounding rectangles atm, I'll be changing that, but it's quite hard for me to understand some of the math behind collision detection (I'm 16 and the math education is so-so here) - I remember trying to make polygon-polygon collisions for almost a month. There are two types of powerups as of now, the blue S (for speed), which makes you fire more frequently and the grey P (for pause) that stops all existing asteroids for a while. It seems like you hit the pause one. They need to be explained better in-game. I'm trying to get it working with canvas, because that was the initial idea behind the engine. Once it is released, the game will be used as one of the demos of what can be done with it. Another much older game using SloN is [UFO](http://www.slondev.sk/UFO) (Caution! This one is even harder than Spaceship). The code is messy and will require a HUGE cleanup as I said, but you can imagine I'm not too eager on doing it, especially as this is just my side project. It was created through course of about two years now, in small bursts of what I currently needed for a game I was making at the time. Also, streams of random notes often are the most helpful. Again, thank you for that
Well, the type system and all the other annotations add already quite a lot. Of course you don't have to use them if you don't want to run the compiler in advanced mode, but then you're missing out on all of the cool minimizing and compile time error checking features. Because the compiler is so good at reducing the code size, we can also write a lot more verbose code without putting everything into a single magic $ function. We are also very careful with allocating objects and having no memory leaks with closures. We also dispose all objects and unregister any listeners when we don't need them anymore, which I rarely see people doing in jQuery, where it usually matters a lot less because your users don't have a single page open for multiple days like it happens for Gmail.
I think that this was my original inspiration for the idea!
Google closure is not that great except as a compiler...I really don't know why people would ever use it over jquery. I use it as the last step in my optimization process where I take all my code and send it to the compiler to create one big lump.
It told I won even though I didn't...
Why are you comparing binding some function to a click event with a full ui component like the Zippy? If you just want the event, you do a goog.events.listen(element, goog.events.EventType.CLICK, function() { doShit(); }); which in my opinion is a lot less magic than what jQuery does.
Funny story. When I was at Techcrunch years ago we got a tip that Google were working on a web browser (this was probably 6 months before they announced Chrome). The tip said that they had forked webkit and that the browser was going to be called 'Chrome' we didn't publish the story because I said it is ridiculous to call the browser 'Chrome', and the guy was likely getting confused with 'browser chrome' in another project or in Android When they announced 'Chrome' months later (and bragged about how there were no leaks) it was a facepalm moment for me
Well people should look at it because it has more than jQuery for big apps ... I agree that's it harder to user, and not always needed, but when you check "big projects" done with jQuery (for most) it all comes down to sticking the UI intervactivity or event delegation in a $(document).ready( ) call .... which makes it looks like spaghetti code, but those guys call themselves jQuery developers ...(ROFLMAO), jQuery is great but can lead to bad practises and unmaintanable shit if not used properly. 
Why, thank you.
Google strategy 101: name your stuff so outrageously so that no one would believe any of the leaks.
I have a line that runs everything at the end of my script: setInterval(main, 16); Thanks for the tip! I see that I should have been using requestAnimationFrame.
I'm curious as to why they didn't go with the name Browser and instead opted for Chrome
because they are two different things. Jquery is for simple and quick pieces of JS you need. "Select this, attach this click event," or "get this code over ajax". If you're trying to do something much more advanced then that, you'll need something more then jquery. I've rolled my own object oriented setup that sits next to jquery for example.
Did you consider and rule out Dojo? If so, why? It seems to be the 2nd-place library/framework after jQuery, but I've not used it personally (jQuery and YUI 2.x mostly, for me).
It's going to be a huge surprise when they reveal their new mobile network Killfuck.
I looked at it, but was turned off when I saw: var newHeader = goog.dom.createDom('h1', {'style': 'background-color:#EEE'}, 'Hello world!'); goog.dom.appendChild(document.body, newHeader); when I could instead just do: $("body").append("&lt;h1 style='background-color:#EEE'&gt;Hello World&lt;/h1&gt;"); It's not just the length, it's also not having to remember function names, and the arguments you need to send in.
In the closure world you should use [templates](http://code.google.com/closure/templates/) for that.
I was really excited about Closure and I got the excellent Closure book and followed the mailing list for a while, but I don't use it because * using the compiler to its full extent requires you to put big jsdoc annotations all over your code, which combined with the verbosity of the library itself makes me feel like i'm running in cement shoes. * the closure templates, last time i checked, only had a server side implementation for Java and none for Python, which is what I use to write my server side code. * the widget library when i was looking at it wasn't that easy to re-theme so it was awesome if you wanted something that looked 'Googley' but not as awesome if you are implementing a design from your designer and have to pull in their css and so on. * sometimes on the mailing list people ask about things and it's like 'we have an internal tool that does that but it's not open sourced.' this is annoying. * it's 'well' documented in the sense of 'complete' but getting the O'Reilly book is pretty much required for understanding how to piece things together to make an app and while they advertise all the sites they use it for I doubt they are going to open source the code for GMail so it's hard to find existing code to illustrate conceptually how they structure large apps written in Closure * it's hard to find people who know it, and if you do find them they probably worked at Goog and are therefore expensive prima donnas, whereas I can't even ask Javascript questions in interviews anymore without the answer 85% of the time being some version of 'um, why not just use jquery'? Okay so that part isn't so great but the point is it's harder to find people who know Closure than pretty much any other library and existing Javascript skills don't transfer quite as well because in many ways Closure doesn't look a lot like Javascript. All of these things make sense in the context of how Google does engineering, but I tend to work at start up like places and they have more people working on GMail than I've ever had programmers in my department at anywhere I've ever worked, so their problems are not my problems.
How much are the widgets a "necessary" part of Closure? I've been interested in trying the library out, but the look of the widgets was a bit of a turn off. I know it's a bit of a goofy concern, considering how much visual customization you can do with CSS, but I'm just curious.
I don't know why it's not more popular. My guess is that there is so much going on in this space right now and so many tools are small, micro, or mini and really fast and easy to learn. Closure takes more effort - and does more - but maybe people are making fewer large investments in web tech and are instead making fewer but more frequent small investments in these micro tools. One cool thing that has recently sprung up around Closure is a [CoffeeScript to Closure compiler](http://www.bolinfest.com/coffee/). I'm not familiar with Closure but I think this is a fantastic idea in general.
I fought the app/page distinction for a long time, thinking it was mostly an argument made by developers who were too lazy to do progressive enhancement properly. But with the increasing interactivity expected of web apps these days I think it's a reasonable viewpoint to hold. eg. How do you provide a non-JS version of a canvas game?
&gt; declaring types in comments The type system is a big part of it. If you want to get the most out of Closure, you have to give up duck typing and create classes, interfaces, and lots of type annotations. The benefit you get in return (statically finding errors!) is really nice, but that's a big pill to swallow if your codebase is pretty small.
Who uses a video to learn programming?
heh yeah I have had this bookmarked for a while now with the intention of sitting down with it and making something cool.
Pedantic downvotes aside, I knew exactly what you were talking about and share the same frustration. At the end of the day, the point is the same....Google took a piece of jargon from Mozilla and used it on a similar project. When I first heard of the Chrome browser, I instantly thought "oh I guess they are using the internals from Mozilla..."
&gt; I used getX, getHeight etc, because I was reading on OOP in C++ at the time and decided that would be the way to go, but if they are slower, I'll be removing them. Such functions are less of a performance issue (you probably just need to cache results and you'll be fine) and more of a design issue. I mean, it's all personal style, but JS'ers tend to stay away from `getFoo` and `setFoo` methods. &gt; (Also, how do you make only certain words display in code? I tried and I can only get a whole line that way) Use `backticks`. Use `backticks`. &gt; Hit testing is done by bounding rectangles atm, I'll be changing that, but it's quite hard for me to understand some of the math behind collision detection (I'm 16 and the math education is so-so here) - I remember trying to make polygon-polygon collisions for almost a month. Yeah, it's kinda difficult. What you can do is split the ship into multiple bounding boxes (one per 'leg'); that'd greatly increase accuracy at almost no cost (unless you're using an O(N^2) algorithm for collision detection...)
I was debating going the progressive-enhancement route for my next project at work, but after trying to plan it out a bit I realized that it would take too much time, result in a horrible user experience (without JS), for the benefit of pretty much nobody. A lot of the functionality of the screen is reliant on calculations to update other sections - enable/disable portions, creating new line items, validating input, adding/removing projects, adding/removing approvers, etc. (It's a business web-app). I could do it without JavaScript, but when I put on my 'viewing it from a users perspective' - it would be a chore to use. Once you start having applications that go beyond simple "Enter in a form, submit to the server" - I think there can be a case made for not bothering with a progressive-enhancement, or at-least "making it work without JavaScript". I can see taking the perspective "Ensuring it works/looks decent in X browser" like IE6 (ugh), but then adding progressive enhancement to make use of newer/modern browser features - HTML5, CSS, local storage, etc. But for a web-app, I think assuming JS is enabled is fair - just provide a friendly warning to indicate it's required if a user without JS enabled lands on your page.
Takeaway: Do not modify the `arguments` object. **Ever.** It's much better to use `slice`, not `splice`, on `arguments`: var args = Array.prototype.slice.call(arguments, 1); As a side note, the whole function seems a bit silly. Why not return `funcs`?
Also, there was already a relatively popular language called Clojure when Closure came out. Since I use neither Clojure nor Closure, I don't really remember which is which.
I agree that they really should work harder on naming their initiatives: * Closure * Chrome * Go These are all products of Google's which had well-defined existing contexts associated with those names, and which also happen to share a similar role or problem domain as the original contexts, especially in the realm of software developers. To me, this is just as annoying as MS naming everything in an ideological sense, e.g. using terms like _solution_....GAH!!
It's called Chrome because it has a minimalist chrome.
Upvoted. Basically: **DON'T CHANGE THE `arguments` OBJECT. EVER.** Btw, if you return `funcs`, you would do `calculate['add'](1, 2)` (or `calculate.add(1, 2)`) instead of `calculate('add', 1, 2)`. Both ways allow a string.
Great work. I actually really like the control scheme, too (mouse for movement/direction, space to shoot).
None of the widgets are necessary but since they are already written for the Closure Compiler it's really usually better to try to use them if you need any of the functionality they provide.
this is also why I don't do facebook dev.
New programming tools coming soon from google! * google Object * google Run * google That Also try googles new consumer services: * google fancyboy * google flerfulbloar * google touchyouthere
Firefox 3.6.20, doesn't work at all once the loading bar completes.
So when can we chane the arguments object?
Hmm I did try that actually, and it didn't seem to make a difference. I've determined that Firefox's bottle neck is related to the number of particles that I'm simulating, because the lag is reduced when I create less.
&gt; And goog is much longer than $ or _ ;) If anyone ever used that as a real argument, I might consider suicide.
Well, that's a big part of why arguments isn't an Array, because it is tied to the currently running function's arguments. Personally, I feel like they should have just been entirely decoupled and made arguments into a real Array, duplicated references be damned, as the additional "features" here just seem to confuse the heck out of everyone. 
&gt; sitting down with it you mean with my code? I keep meaning to clean it up and make it into a github repo. I'll let you know when I get around to it.
Yeah, your code and tutorial. Ive always been very interested in the subject just never sat down and actually done something related.
It's very cool. Can be difficult to apply to real-world data. Fun though.
I like putting a hidden blank html template in the page then cloning it and putting data into the template from a JSON response from the server, demos at http://servercyde.com/demos/ it cleanly separates presentation from logic and stores them in the right place. &lt;div class="hidden"&gt; &lt;div id="messageItem"&gt; &lt;li class="ui-li ui-li-static ui-body-c"&gt; &lt;p class="ui-li-aside ui-li-desc"&gt;&lt;strong class="time"&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h3 class="name ui-li-heading" rel="12"&gt;&lt;/h3&gt; &lt;div class="message"&gt;&lt;/div&gt; &lt;/li&gt; &lt;/div&gt; &lt;/div&gt; $.each(data.Result, function (i, item) { var li = $("#messageItem li").clone().attr("rel", item.Name); $.each(item.Attributes, function (a, attribute) { switch (attribute.Name.toLowerCase()) { case ("name"): $(".name", li).text(attribute.Value); break; case ("userid"): $(".name", li).attr("rel", attribute.Value); break; case ("message"): $(".message", li).text(attribute.Value); break; case ("time"): $(".time", li).text(new Date(parseInt(attribute.Value)).toRelativeTime()); break; default: break; } }); // add new messages if (messages.find("li[rel=" + item.Name + "]").length == 0) messages.append(li.show()); }); 
coffeescript is lame
Worth noting that the crazy mapping between arguments object and formal parameters is eliminated in strict mode. The spec authors agree with you :)
What's the relation between Closure and GWT?
I attempted to make a game along these lines during a Ludum Dare. It was one of my LD48 failures, but I ended up with quite a cute critter at the end of it all. [This thing](http://i.imgur.com/0UfY0.png) The bones/muscles are white and contract if they receive a signal. the feet are pale blue and grip the floor when they receive a signal. the yellow lines show connections between signal sources and receivers. The beige circle is a signal emitter (of the pattern shown) the green spots emit a signal proportional to their proximity to food. What you see there is all there is. It has no brain whatsoever. [Now watch it gather food](http://fingswotidun.com/ld17/) 
correct.
don't think so heh.
quite an interesting app! May I suggest basic functions like loop and repeat?
Glad you like it! I'd be willing to add those things, but they would rely on the same mechanism skipping works under (that is, the room would have to vote to loop, or repeat). There's a lot of work to be done going forward, no doubt.
Very neat. I think you have something here.
Thx for checking it out!
it would be nice if you added some contact information. I would definitely like to stay in touch with someone who does something as cool as that - twitter, blog, whatever.
Woah, did I just get a fan!? That's way too cool of you to even suggest. Follow me on Github! At least until I add some more stuff to ListeningHall (contact info, blog)
http://listeninghall.com/#/soups and pies EDIT: the rooms don't persist, so that link isn't going to be as random and weird as I wanted it to be now that I've exited. However, this is an awesome little app.
I'm hoping to add that functionality very soon!
That's orthogonal to the question I asked, which in your case would be how you get `data.Result` from the server to the client.
It appears I'm your first Github follower. I've been doing a ton of Backbone development as well (none of it public yet :-\), and your stuff is pretty awesome. Keep up the good work.
Dude. This is awesome. I love it!
There's a lot of little stuff I gotta fix, especially what you mentioned, top of my list.
Thx :)
Thx, let me know if you found anything interesting in particular in the code, or something you'd do different with Backbone.
While I agree with the sentiment, IE6 is not getting any attention.
Run your javascript through JSLint if you haven't already. You'll get a lot of feedback that way.
I've done that for the most part, love jslint.
http://listeninghall.com/#/reddit_dicks wish I could save the room &amp;#3232;\_&amp;#3232; 
Soon! I promise!
It's not working for me.
Very well done!! Keep up the good work!
There's also [jshint](http://jshint.com/) for those of use who ... [are not Douglas Crockford](http://anton.kovalyov.net/2011/02/20/why-i-forked-jslint-to-jshint/) :) I only glanced at the code so don't have any real constructive criticism or anything, but it's well organized and commented. And seems to work well. Congrats on shipping and thanks for sharing the code!
The internet is small. I commented on this video a year ago, back when it was still cool -- If only I had realized the potential karma. &amp;#3232;\_&amp;#3232; http://i.imgur.com/VEdrz.png
This is a simplified example, the original code does some work after `funcs[operation]` is called so `funcs` can't be returned.
slick! great UI design
**NEVER!**
Like it! Can I just say that you should never say a web app is finished? It's NEVER finished :) So.. keep it up!
 -when searching the video title should be clickable and enable you to add to the playlist -each item in the playlist should have a remove icon -in time you should make items in the playlist draggable -exiting the search - I would expect my escape button to work also, i would expect that clicking in the outer margin (the grey bit) would take me out of the search as well. -the volume indicator was on 35% (it looked about there for me) but my volume was much louder. I suspect the volume comes from the flash cookie which the youtube player stores 
-each item in the playlist should have a remove icon -- scrap that i see what you are doing with the voting. -- perhaps for the person who added it, in case he clicked the wrong link, brain fart moments happen
Amazing, love it! Really good work; I've been through the code as well, and it's really readable and well organised. Kudos! ---------- A bit of feedback: The "Search Youtube...." bar; when you focus on this, the placehold text should disappear, and reappear on blur if nothing is entered. Just a slight UX consideration. There should be a "close" button on the search pane. Pressing "enter" on the initial create room/nickname screen should simulate a button press. No way to remove items from the playlist; this would be nice. The social aspect could be more prominent. It would be nice to make more of a feature of the chat/collaboration aspect, and have a separate chat pane at the bottom, or something. Just something to make it feel like a more social environment. ---------- But overall, I love it. Excellent stuff!
forked!
There's no relation between the two. GWT is a completely different approach.
What browser/os?
Thx!
No web app is ever finished - only at a stable release
I have trouble too. The YouTube embed shows up, but is empty. Both the sidebar and the main bar is empty (except the embed). Chrome 13, Linux 64-bit
Maybe you could just use the *placeholder* attribute for that input.
Sounds like you haven't added a video. Click the + bottom right of the sidebar.
Much better now. Perhaps add a tooltip? I had no idea the sidabar was for videos. I imagined it was for users, so I didn't even try to click the + button.
You should do something about spaces in the names of rooms, because it breaks the link. Maybe replace it with underscores in the url or so, like Reddit does. Just a suggestion. :)
I believe there should be something like a welcome text, along the lines of "welcome to listeninghall! You can get started by adding videos to the queue by clicking that + button over there, and don't forget to invite some friends!" It's easy to use once you figure it out, but I find it a bit too empty when you first get in.
This. (by Google)
I agree with what everyone is saying here so far, but I'll restate one comment: great job! This is very cool. I would actually like to learn more about your XMPP and subscribe approach to this web app. I have an idea for a web app that I am currently designing around a polling interval, and a subscribed push event would be much better for it. Could you give me some high level bullet points on the pieces and parts to make that transition? Thanks again for sharing your app, it's fantastic!
Your volume slider doesn't initialise the volume on page load, you need to add: playerAPI.setVolume(30); to wherever it is you're doing initialisation from (haven't gone through all the source yet - it looks nice though!)
The site looks slick and functions well. Good job!
Definitely, and I'm loving all the feedback. Got some work to do this weekend!
"how you get data.Result from the server to the client." there are several AJAX wrappers out there that degrade nicely based on browser capability. I use jQuery. I get the feeling though i'm missing something here, or not understanding the question, help me out.
This is probably because the console and the javascript code are on different threads, when you run the `console.log`, this is sent to the console thread (well, not exactly the console thread, more like the page that contains the development tools) and the javascript continues, by the time the console received the reference, processed the data to show in a pretty way and so on, the javascript thread is already "ages" beyond it (as in some ms). This is the only explanation that comes to mind. No really easy way to fix this besides processing the data in the javascript thread and then send it to the console thread.
I've a little suggestion: Do something when the app is first open. I looks empty, almost non working. Maybe you could show the search box, so one would know how to start using it. Besides that, very cool piece of work
Chrome.
My last jQuery based site had 232 occurances of $ (and it was not a financial application) that saved me 696 keystrokes over using goog. thats only about 6 tweets worth of keystrokes so, yes I'd concur that suicide is indeed warranted in that case.
Thanks for the heads-up! I use Chrome's inspector now. Knowing this may be helpful in the future.
Very cool. Took me a while to figure out there was a chat bar, add send button. Also the design very sexy, who made it for you?
There are a few ways to get around this. The ugly way would be to stop the interpreter with alerts: (function(){ var arr = [1]; console.log("first: ", arr); alert("first: "+ arr); arr.push(2); console.log("second: ", arr); alert("second: "+ arr); arr.push(3); console.log("third: ", arr); alert("third: "+ arr); })(); The slightly less ugly way would be to copy the array and dump it out using the toString method: (function(){ var arr = [1]; console.log("first: ", arr.toString()); arr.push(2); console.log("second: ", arr.toString()); arr.push(3); console.log("third: ", arr.toString()); })(); That doesn't work as well for Objects, however, but if you've loaded a JSON library you can using stringify: (function(){ var obj = { foo1: 1 }; console.log("first: ", JSON.stringify(obj)); obj.foo2 = 2; console.log("second: ", JSON.stringify(obj)); obj.foo3 = 3; console.log("third: ", JSON.stringify(obj)); })();
&gt;Robust cross browser support Care to elaborate this *somewhere*? Also none of the popups worked in Chrome 13.0.782.218
Favicon needs work.
The whole design needs work. It's hard to do both the design/code, something always suffers. 
What popups are you refereeing to?
Great stuff. Your code is immaculate, too. Really good commenting :)
As is, decoratedFib will be assigned the return value of the 'decorate' function. Function.prototype.decorate = function decorate(params) { return 'foo'; }; var decoratedFib = function(n) { return decoratedFib(n-1) + decoratedFib(n-2); }.decorate(); // returns 'foo' typeof decoratedFib; // 'string' I'm not sure what you're trying to accomplish by doing things this way -- could you explain?
The result of executing function decorate. Everything to the right of the equal sign is an expression, and expressions are evaluated left-to-right for the most part. The value of function fib(n) { ... } (eg, a function object) is used as the target for a call to decorate(), whose return value is the ultimate value of the expression and is therefore assigned to decoratedFib.
Nice. I ended up using the debugger in chrome instead.
I encountered this bug 4 days ago and was scratching my head a bit. Thanks for the, heads up, switching from a console.log to an alert showed me exactly what I was looking for.
Thanks for this post. I spent about three hours figuring out this was a bug. I was sending off AJAX requests for data and all of my console.logs(data) were coming back exactly the same. Each request was different and when I peeked into the running code with the debugger it was showing the objects properly. This had me so confused and upside down for a bit it was frustrating. You get that self-doubt in your mind where you *know* you're right, but the results don't match up.
It's also pathetically trivial to assign $ to goog.
i think he means the little green ? icons... they pop up an empty window that just says @ABOUT@ Also, a question since it's not made super obvious: Is this only good for one-time use, or is this "database" stored somewhere like localStorage so that the data is persistently available across page loads?
Ahh, yeah that is the library I'm using. I'll have to see if I can remove the info pops. As for storage it isn't by default. You can use something like persist.js to store it or save it back to the server. It is something I want to tackle but wanted to update the API.
Just FYI, a really, really quick way to do it would just be something like the following in a couple of functions, perhaps .saveDB and .getDB: // save to DB localStorage.setItem('taffyDB',JSON.stringify(myDBObject)); // read from DB myDBObject = JSON.parse(localStorage.getItem('taffyDB')); Of course you might want to throw a try/catch on that just in case the object becomes corrupted, but that's just a few more lines of code.
Thanks for the help. I've been thinking about adding a simple "makeSticky" extension and that looks like the basic code that would need to go into it.
What format do you want today's date in?
Looks pretty cool
For the custom text in the URL, it would need to be in the script itself, with instructions for how to change it for every spam fighter. Example, for me, I want this to go into the URL field... http://www.reddit.com/user/spammer?siaYYYYMMDD In the title, I want it to say... overview for spammer, resubmit YYYY/MM/DD (NOTE: the "overview for spammer" is the automatic page title for a user's overview, per my existing bookmarklet.) (NOTE ALSO: I want to be able to share this with the other spam fighters, so they can change "sia" [that's short for Spam_I_Am] to something unique to themselves ...like "Kylde" or whatever.) So... I guess by "custom text" I just mean something that can be changed from user to user when we share this bookmarklet. Make sense? If not, ask again and I'll try to explain better.
Objects are passed by reference in Javascript. The variable in the console is the same as the one in your script. By the time you inspect the variable in the console, your script has already changed the same object in memory. This is very useful when you need to change the properties of an object, in the console, and have those changes apply to your script. Also, if you pause Javascript during execution, the variables in the current scope are available to you in the console.
javascript:var d=new Date();var str=d.getFullYear()+(d.getMonth()&lt;10?'0':'')+(1+d.getMonth())+(d.getDate()&lt;10?'0':'')+d.getDate();window.location=%22http://www.reddit.com/r/reportthespammers/submit?url=%22+encodeURIComponent(window.location)+'&amp;title='+encodeURIComponent(document.title+', resubmit ' + str);void(0); 
Typically, when you extend the Function prototype, you return a function from the method. Think curry or memoize.
This is very close, but not quite working. It appears that the reason it isn't working (just fry my layman's understanding of this process) is that it isn't appending the "?&lt;stuff with date&gt;" at the end of the URL. I see you wrote all of the code to get it properly (and it does fine for the title), but it's not adding it to the URL (which is crucial for doing a resubmit).
Just guessing, but something else needs to be in here... &gt; (window.location+'?sia' + str) like that? EDIT: Added the plus sign, and it works.
Thank you very, very much. I will edit my post to include the working version.
I just ran across this in a node script yesterday! console.log(object.key); object = null; It kept crashing on the console.log line, even though the object was set to null after the logging was set to occur. Using node util's print function worked fine, so i just switched to that.
I'll just leave this here: http://www.prototypejs.org/
I'm sorry but this really doesn't make much sense to me...
It's because console shows a live version of the object. It's not really a bug as much as it's a powerful feature you need to be wary of.
Please [star this issue](http://code.google.com/p/chromium/issues/detail?id=50316) if you want this to be fixed.
Node uses v8 but console.log is not part of v8, node has [its own console](https://github.com/joyent/node/blob/master/lib/console.js). This is unrelated and you should [open an issue](https://github.com/joyent/node/issues).
If that's true then it's broken. I think that the properties are loaded lazily so you see the value at the time you expand the object and that's it. That's what it looks like to me anyway.
[There Were Significant Performance Issues With Previous Versions](https://docs.google.com/spreadsheet/ccc?key=0Avnke0Xj5rgddDRaaUJZRkNLM0tiVURUc0JiWF9lOVE&amp;hl=en#gid=3) Unless these have been addressed you should look into other ones. [this one is mine](https://github.com/kristopolous/db.js)
It would be difficult for them to be anything other than lazily loaded. Objects can have many properties, and each can be very deep -- even recursive. How much of that object should it 'capture' for display? If you want to see what a particular property is, log that instead of the object it's in.
Thx, I made the design.
Let's join forces, you design, i'll code, ???, profit. ( i made servercyde.com )
Try servercyde.com it gives you comet funtionality in 2 lines.
Well, the question was about whether you use AJAX after page load vs. drop JSON into the page at serve time vs. encode structured data as markup, etc.
i assumed this was gonna be bad but this is actually really cool :D
The "cool" thing about this behaviour is that any objects you log look like they have been leaked in the chrome heap profiler.
Two important techniques: ([]).concat( other ); other.toSource(1); / JSON.encode( other ); All will more or less lock away what you're trying to work with, with the exception that "concat" will still have deep references, just not be the exact same array. --Robert
Why would this be a good thing? If I want something to be full-screen, I'd make it full-screen. Also, what's the cross-browser support like? Has it been submitted to WhatWG?
This. When you log an object in Chrome, it logs only the pointer to the object. When you finally inspect it by clicking the arrow, it goes through all the current properties. I learned this easily when logging from extensions. It would show that there are no values and give me some errors, and it was correct because it passed a pointer and then the object went completely out of scope. It's fixed now but that's the behavior -- it's live. Firebug for Firefox handled this better way before Chrome was even released.
&gt; Why would this be a good thing? If I want something to be full-screen, I'd make it full-screen. Can you show me a video game window that goes fullscreen seamlessly (but which is normally "windowed") without using Flash? (Activating both browser fullscreen AND game fullscreen isn't an acceptable solution.) Also, consider the possible performance benefits (e.g. WebGL context going straight to the screen buffer instead of painting on a browser window). &gt; Also, what's the cross-browser support like? Has it been submitted to WhatWG? Webkit has partial support for a fullscreen API. I'm sure Firefox will be implementing the same API as Webkit.
&gt; Can you show me a video game window that goes fullscreen seamlessly (but which is normally "windowed") without using Flash? (Activating both browser fullscreen AND game fullscreen isn't an acceptable solution.) I'm not a big gamer. If I adjust the size of my browser (such as making it full-screen,) games should resize to use the available space. If a game doesn't, it seems like it would be better to fix the game rather than add a new browser API. &gt; Also, consider the possible performance benefits (e.g. WebGL context going straight to the screen buffer instead of painting on a browser window). Very true. And you can get the performance benefit right now by making your browser full-screen. Adding a new browser API that forces the browser into full-screen mode is unnecessary. But let's say browsers implement it anyway. Of course, users will get pissed off when advertising starts full-screening their browser, so browsers will add a dialog to get user permission. Then we'll have all the problems that the current permission dialogs have, like being modal to the browser and blocking any interaction with the browser until the dialog is dealt with. But why pop a dialog at all, since if the user wanted their browser to be full-screen, they'd make their browser full-screen? The answer is, "Well, users don't even know that they have the option!" So the reason this entire API and the hassles introduced by the permission dialog exist is to let users know about a feature they already have access to. &gt; Webkit has partial support for a fullscreen API. I'm sure Firefox will be implementing the same API as Webkit. There are differences in Webkit's and Firefox's syntax for some CSS elements. So I wouldn't be so sure.
&gt; I'm not a big gamer. If I adjust the size of my browser (such as making it full-screen,) games should resize to use the available space. If a game doesn't, it seems like it would be better to fix the game rather than add a new browser API. Most web games are centred on the page. Think Newgrounds or something. Your technique of utilizing the browser's fullscreen option would only work if the game was already occupying the entire viewport. &gt; Very true. And you can get the performance benefit right now by making your browser full-screen. Sure; you're right. It may even be easy to implement. &gt; But let's say browsers implement it anyway. Of course, users will get pissed off when advertising starts full-screening their browser, so browsers will add a dialog to get user permission. Then we'll have all the problems that the current permission dialogs have, like being modal to the browser and blocking any interaction with the browser until the dialog is dealt with. Do you know how pop-ups were thwarted? One technique is that popups can only be created if the user initiates one of a set of events (e.g. mouse clicks). This allows most "good" popups to be permitted, while most "bad" popups to be discarded. Webkit's proposal has similar annoyance-preventing measures. &gt; But why pop a dialog at all, since if the user wanted their browser to be full-screen, they'd make their browser full-screen? The answer is, "Well, users don't even know that they have the option!" So the reason this entire API and the hassles introduced by the permission dialog exist is to let users know about a feature they already have access to. Users already had the ability to drag-and-drop files into a file dialog box (for a *long* time, at least on Fx/IE on Windows). So why did vendors add drag-and-drop capabilities for web applications? Because it bettered user experience. Think how irritating it would be to watch a Youtube (or whatever) video without the convenient fullscreen button in the player. You'd have to tell Youtube "hey, resize the video to fill my browser window", then you'd have to tell the browser "hey, resize the browser window to fill my screen". This is what people have to do for HTML5 applications right now (without the fullscreen API). &gt; There are differences in Webkit's and Firefox's syntax for some CSS elements. So I wouldn't be so sure. Other than vendor prefixes (which has nothing to do with syntax), I can point out only *one* difference between Webkit and Firefox CSS implementations on the syntax side. So if you would, please identify any "differences in Webkit's and Firefox's syntax for some CSS elements" which make you believe that Firefox will *not* implement the same API as Webkit.
The point is not to make full screen apps possible, that is already possible as you know. Its to give a page the ability use full screen, and request permission to do so. It also allows developers to full screen select elements instead of the hole page.
They should capture everything. If they want to provide a live display, add it as another option, e.g. as another triangle or as another formatting option.
&gt; Your technique of utilizing the browser's fullscreen option would only work if the game was already occupying the entire viewport. ... &gt; Think how irritating it would be to watch a Youtube (or whatever) video without the convenient fullscreen button in the player. Points taken. Thanks. &gt; Do you know how pop-ups were thwarted? One technique is that popups can only be created if the user initiates one of a set of events (e.g. mouse clicks). This allows most "good" popups to be permitted, while most "bad" popups to be discarded. Yes I do. And as you note, it only *mostly* works. So there will still be an (annoying) dialog before going full-screen. &gt; Other than vendor prefixes (which has nothing to do with syntax), I can point out only one difference between Webkit and Firefox CSS implementations on the syntax side. So if you would, please identify any "differences in Webkit's and Firefox's syntax for some CSS elements" which make you believe that Firefox will not implement the same API as Webkit. It doesn't work that way. "There are already differences in browser implementations, but you must list *every* difference to prove that these future APIs will be different." Plus, the burden of proof is mostly on you. Granted, you said, "I'm sure Firefox will be implementing the same API as Webkit" and not "Firefox *will be* implementing the same API as Webkit." But you *know* there are differences in browser implementations (since you said so,) so it stands to reason that there very well could be differences in the implementation of this API. But now we're just splitting hairs. :) Have a good one.
&gt; Yes I do. And as you note, it only mostly works. So there will still be an (annoying) dialog before going full-screen. I really don't think browser vendors will do this, but we'll see how the features behave in the wild. &gt; It doesn't work that way. "There are already differences in browser implementations, but you must list every difference to prove that these future APIs will be different." I wrote "please identify any", not "please list all". If you claim there is *some* difference, but don't provide *any* such difference, the argument is nullified. &gt; Plus, the burden of proof is mostly on you. For the features which are supported (besides SVG...), vendors are converging to a single (even if necessarily *de facto*) standard nowadays. Audio and video (not audio data, which vendors are experimenting with currently) and canvas API's are "advanced" (i.e. can be done in many, many ways), but all vendors implement the same spec (with bugs in each implementation, but that's to be expected). XHR was completely *de facto* (by Microsoft) and look at where it is now (i.e. the basis of (I'd say at least) 90% of JS-enabled web applications (not games)), with a consistent API and everything. `requestAnimationFrame` has a similar story, and is easily shimmed. Workarounds already existed for all the "HTML5" features I mentioned (even XHR, to some extent), but the new features made web applications much better to write and use. I think the Firefox team at Mozilla and Webkit's team are aware of this and will cooperate and provide the same API. For "proof" (which is by no means conclusive; it's all drafted spec work), see [Mozilla's proposal][1] and Mozilla's own list of [implementations of the proposed fullscreen API][2]. &gt; Have a good one. Thanks for encouraging me to do a bit of research to confirm my suspicions and assumptions (with which I was basing parts of my arguments). =] [1]: https://wiki.mozilla.org/Gecko:FullScreenAPI [2]: https://wiki.mozilla.org/Gecko:FullScreenAPI#Implementations 
Nice. I had no idea what an "image spinner" was though, maybe promote it a carousel? Also, I tried the demo on my Android, worked well, but since the page wasn't really set up for mobile browsing, it was hard to see the effect in all its glory (the vertical slider was the only one where it worked well). Maybe sex up the page for mobile devices if one of your USPs is touch device support? Nice work!
The problem with 'with' is that for simple examples it looks good, but then people start using it in large functions where you cant tell if the variable being used in the block is part of the class, local, or associated with the 'with' statement. Don't get me started with nested 'with' statements, it's confusing as hell. VB6/VB.Net has with statements, they are no bueno.
In all my years of javascript, I don't think I've written or seen a single *with* block anywhere. It certainly sounds like a bad idea.
Most important use is &lt;video&gt; . When you click the fullscreen button on a HTML5 video, it won't actually go fullscreen. I just hope we won't be seeing random websites demanding fullscreen access now.
Slow as shit on my ipad2.
What's wrong with writing: ooo.eee.oo.ah_ah.ting.tang.walla.walla = { bing: true, bang: true } ?
That assumes there's not any other property defined in ooo.eee.oo.ah_ah.ting.tang.walla.walla but 'bing' and 'bang'.
&gt; Most important use is &lt;video&gt; . True. I was thinking, "Why have an API when browsers already let you go full-screen?" But as strager pointed out, while browsers let you make the entire page go full-screen, there's no way right now to say, "Just make the video element go full-screen." &gt; I just hope we won't be seeing random websites demanding fullscreen access now. Oh, we will. There's absolutely no doubt that ad providers will use (and abuse) this. So browser vendors will introduce a "Do you really want to go full-screen?" dialog, which will be incredibly obnoxious on those browsers that only support browser-modal dialogs. Just recently I've noticed a lot more pop-up ads both that Chrome doesn't successfully block, and that launch browser-modal "Do you want to navigate away from this page?" dialogs when you try to close them. Once Chrome implements the full-screen API, you'll be forced to deal with two browser-modal dialogs on unsuccessfully blocked pop-ups: one about going full-screen, and another when you try to close it.
Cheers, that's a good point. Regarding the spinner/carousel thing, I guess I hadn't wanted to tread on the jCarousel[Lite] toes too much, but yeah, maybe I need to use the more familiar term.
Thanks. It is a little slow on my iPad 1 as well. I'll try to optimise a bit.
Could it be the high res thumbnails?
Take a look at the iscroll code, i know they use some webkit 3d tags to make scrolling fast.
 foo = ooo.eee.oo.ah_ah.ting.tang.walla.walla; foo.bing = true; foo.bang = true;
Which is exactly why I think they should have added a {}.merge() if they wanted to remove with.
["With violates lexical scope, making program analysis (e.g. for security) hard to infeasible."](https://twitter.com//#!/BrendanEich/status/68001466471817216) - Brendan Eich 
I think it's more to do with there being several carousels on the page. I'll take a look at the code and see if there's anywhere I can shave some cycles though.
Cheers, I'll do that.
It's very simple to get a current snapshot simply by cloning the object before logging it.
Try this... &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;a href="#" onclick="javascript:generateRandomQuote();" alt="Roll the dice again!"&gt; &lt;img src="img/randletter.png" class="center"&gt;&lt;/a&gt; &lt;div id="results"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; function getRandomArrayIndex(source_array) { return Math.floor(Math.random() * source_array.length); } function getRandomArrayEntry(source_array) { var random_index = getRandomArrayIndex(source_array); return source_array[random_index]; } function getRandomQuote() { var quotes = [ ["1"], ["2"], ["3"], ["4"], ["5"], ["6"], ]; var random_quote = getRandomArrayEntry(quotes); return random_quote; } function displayQuote(quote) { const TEXT_ROW = 0; const LINK_ROW = 1; var quote_text = quote[TEXT_ROW]; var quote_link = quote[LINK_ROW]; if (quote_link != null) { document.getElementById("results").innerHTML += '&lt;a href="' + quote_link + '"&gt;' + quote_text + '&lt;/a&gt;'; } else { document.getElementById("results").innerHTML += "&lt;br /&gt;" + quote_text; } } function generateRandomQuote(){ var random_quote = getRandomQuote(); displayQuote(random_quote); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
TL;DR: when dealing with both jQuery.data() and HTML5's data attributes, use jQuery.attr() to get values I'm not sure why you'd mix the two, but maybe I'm missing something there.
The problem is, I don't know what the function call *should be* in the first place! The 'generateRandomQuote' function was just a wild guess. I tried "javascript:displayQuote(random_quote);" which just opens a new page with the next number in the corner.
a href="javascript:displayquote(getrandomquote())" I'm on a mobile phone so please excuse my formatting laziness.
document.write replaces all page content with whatever you're writing (so it looks like it's opened a new page with the number in the corner), so you need to use another method to write the results. I modified your code and have posted it as an edit in my first reply.
Those pages should all have a big "DEMO" button. Nice work by the way. 
Thanks a lot for this. Is there any way to get it to simply replace the previous number, rather than display it below the previous one?
I've established that the problem he's having is that he's using document.write, which seems to replace all page content with whatever it's writing, so it *looks* like the page is being reloaded with a number in the corner. I've replied with a solution that uses **document.getElementById** and **innerHTML** instead of **document.write**
Yep. where the code has **+=** simply remove the plus. It will then replace the number instead of add a new one underneath.. if (quote_link != null) { document.getElementById("results").innerHTML = '&lt;a href="' + quote_link + '"&gt;' + quote_text + '&lt;/a&gt;'; } else { document.getElementById("results").innerHTML = quote_text; } 
Brilliant. Thanks for all your help! This is pretty much my first day ever with Javascript and I'm just tweaking an existing script for my needs. 
And my first time helping someone on reddit :) Glad to help :)
Yeah, look at jQuery's .Watermark() function. If you had used it, you would just need to do: $("#searchText").Watermark("Search Youtube..."); 
One or two levels would be plenty imo, I don't care about \_\_proto\_\_s of \_\_proto\_\_s.
I like your style! Where did you learn to design? Any book recommendations? I've been hacking at HTML since it's early days, but I'm mostly stuck in the old HTML 3.0 days. I can use other peoples templates and understand them for the most part (when it comes to the JS, CSS3, XHTML), but I can't whip out the code myself &amp; I'd like to start.
Yes ... so simple that I'm wondering why you feel the need to tell me :) I was just documenting Chrome's behaviour as I observed it, as I hadn't previously noticed this detail (I just log what I want or expand it immediately I guess). The workarounds are indeed trivial.
Well it would be incredibly easy to preload the object's own properties, just the first level. But I don't really care, I've never even encountered this behaviour in my daily use of the browser.
Cheers! What do you mean about the 'DEMO' button?
On top of that implementations can be faster without `with` so the cost is even greater than the burden on developers.
Everybody has some kind of merge/update/mixin function by now right? So just use `mixin(oo.ee.oo.ah_ah.ting.tang.walla.walla, { bing: true, bang: true })` *edit: Just thought it was worth mentioning that this would be a code smell anyway. If you have incredibly deep object hierarchies that aren't manipulated at a higher level you are doing it wrong!*
I agree, harmony is getting a bit off track. If they add classes I think new comers to JavaScript will use them instead of the closure pattern, thus missing out on the real power of the language. There are some things I really do think are good ideas in harmony though. Things like proxies and removal of the global object.
Well the link to see the demo on your page is not very intuitive. I guessed it because the url ended with demo.html, but still... The first thing i want to see when i visit a page like yours is the demo. I don't want to have to look for it. I want it to be evident. Like a big shiny button. But that's just me.
I'm always up for new projects (to code and design!). If you've got something interesting, hit me up. Otherwise I'll have to think up something else cool for myself to build ;p
This may be the trick tch was referring to: http://cubiq.org/you-shall-not-flicker Cool script, btw.
theme screen loads (with the blaring music) but the gnome and the owl just sit there blinking at me. There's no menu or anything to move forward. This is on Chrome for OS X. Dang.
&gt; but for some sadistic reason we decided that we don't like native extended chains in our code the reason's not that sadistic (or hard to understand) - jQuery chains are *the same statement,* which is syntactically obvious by that each line begins or ends with a dot. a **with** block on the other hand contains all of these apparently global names, which can only be understood by looking up at the with statement containing the block. in other words, **with** violates the [principle of least astonishment](http://en.wikipedia.org/wiki/Principle_of_least_astonishment), especially for blocks longer than a couple of lines.
Works for me on Chrome (version 11.0.696.57) / OS X. 
demo vid: [http://dl.dropbox.com/u/2388316/tilt/beta/0901.webm](http://dl.dropbox.com/u/2388316/tilt/beta/0901.webm) dev blog: [http://blog.mozilla.com/tilt/](http://blog.mozilla.com/tilt/)
Try entering fullscreen (presentation) mode in Chrome, that made it work for me.
I was all like wtf then I read this: &gt; The reason is that these parsers do not consider a with statement as an in-line scope and cannot predict in that moment the accessible outer scope, unless these parsers won't be able to virtually replicate every possible scenario in that scope. .. and my head exploded.
Still a hint of a lag here and there on FF, not on Chrome (same experience as when I tried out Canvas earlier this year and could not get FF to animate as smoothly as Chrome, suspecting GC). But it looks absolutely terrific. =)
Works perfectly on Opera!
Jesus, I need to learn how to do this...
Wow - it's a huge program... One can even see the source code too! It's not obfuscated either! =D &lt;script type="text/javascript" src="src/Common.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Perlin.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/ChaikinCurve.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/render/Render.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/render/RenderCanvas.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/render/RenderWebGL.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/render/Utils.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/render/glMatrix.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/render/webgl-utils.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Audio.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Animation.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Collision.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Movement.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Trigger.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/ParticleSystem.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/DialogueSystem.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/GameObjects.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/HittableObject.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/PlayerCharacter.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Gremlin.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/CaveEntrance.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/House.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Pickup.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Breakables.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/GremlinBasket.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/ResourceClasses.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/ResourceDepot.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Stage.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/StageClasses.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/GUIButtons.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/GUIHeadsUp.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/FSM.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Game.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Input.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/AppStates.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/App.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/GremlinStates.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/PCStates.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Wick.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/TutorialTip.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Villager.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="src/Lamppost.js"&gt;&lt;/script&gt;
Firefox seriously has problems with WebGL... I'm having the same issues you are. =( Chrome worked flawlessly, and fullscreen too (F11), it played like a usual fullscreen platformer DirectX game from the 90's!
I'm seeing a WebGL render class that's used to draw primitives and lines, and probably sprites... I wonder if they'd release their engine? It works better than a plain canvas - using a texture, they can scale the play screen using triliniar filtering, and bicubic filtering for scaling smaller, or larger without pixelation or aliasing!
This is awesome. But am sure it took them fucking weeks what could be accomplished in a Flash game engine in a day :/
The graphics engine can now be re-purposed!
Ah... github..... =D
Is this the same game? http://toucharcade.com/2011/08/09/emberwind-review/ They're charging $.99 and $1.99 for it! o_O EDIT: Ah, it's all the same company: http://my.opera.com/emoller/blog/
Even better, you can clone the repo here.. https://github.com/operasoftware/Emberwind Here's the slides from his WebGL BOF presentation at SIGGRAPH.. http://www.khronos.org/webgl/wiki/Presentations
FF has a problem with the canvas, and the problem is the garbage collector, which kicks in every do often and pauses the JS engine. The same problem occurs with the 2d context
Got stuck on the first level after I killed 3 gnomes...
very cool
I'll have to check out the volume issue, thanks for the insight and feedback.
I agree, adding this to my to-do list.
Thx for the feedback, and I'm definitely tweaking parts of the UI. I'm glad I posted this on /r/javascript and Hackernews before anywhere else, getting a lot of useful feedback from developer-minded people.
Looking into this, thx.
I think so too. I'll probably start with the search pane open, and perhaps some tooltips (maybe) to describe what's going on. It's going to be a challenge, mainly because I don't anyone to feel like it's some kind of complex application. Thx for the feedback.
- http://prosody.im/ (backend) - All xmpp servers implement multi-user chat - I'm basically hooking up a custom module to regular old chatrooms to achieve what I need. So, if someone sends a song, they are in fact sending a special kind of chat message containing song information. - My custom module intercepts these messages and handles syncing on the backend. - The pub/sub stuff you see on the frontend is really just to help with loose-coupling. The different models/views ultimately need to communicate with the Connection object, and I chose a pub/sub approach to achieve that. - Lastly, xmpp supports pub/sub as well. So, you should definitely still investigate if that is what you are looking for: http://xmpp.org/extensions/xep-0060.html 
The fact that it's hosted on github should have tipped you off that the source is available: https://github.com/operasoftware/Emberwind/tree/master/src
This looks awesome, definitely going to have to dig through the code.
I worked as a front-end developer throughout college, sliced a good deal of websites during that time. I think my css is not up to par to some of the other stuff people are doing, but I can achieve what I need to do. Take a look at http://twitter.github.com/bootstrap/ , that is a pretty good example of modern html/css (at least this is what I would study). As far as design. I just wing it. I have some design sense, so I basically just try things until I decide it looks good enough. I think it might be a matter of taste. I've tried the listeninghall design in a few different ways, many of which I just did not like. In fact, I don't even like the current look, I have something else in mind going forward. 
It hangs in Opera. I'm on to you arub. &amp;#3232;\_&amp;#3232; 
he might have a point or two, but the way he writes comes off as very aggressive &amp; angry and at least for me his points get lost in that.
Ouch. Kind of hard to read that font, or is it just me?
just spent the weekend exploring this in detail - the whole toolset that is - and it is awesome. it is how i want to write javascript.
spent the weekend exploring it and it blew my mind.
What version are you using? Based on the fact that the game is created by the Opera Software, it should work. 
Also, TIL myspace has a top quality flash player
As most arguments arrays will contain very few elements, it's typically much faster to iterate over it and manually push them into an array, then use slice. However you'll only notice the speed up is if you _very_ heavily call functions which use arguments. I've also found in some versions of Chrome, if you have to touch the arguments array, it is then faster to use it for all your arguments.
The flash won't show up if javascript isn't enabled. They probably have some other javascript on the site that the flash player expects - maybe an attempt to prevent the flash from being embedded elsewhere. If that's the case, it's kind of a smart hack. But since it's myspace, it's probably trying to prevent myspace from finding out where someone is embedding their player - which is kind of silly, because the referrers are there in the http access log of their media asset server.
Or maybe they just don't want people to steal the content?
Hmm could be. The player also "ignores" my FlashBlock which made me think it was a Javascript or HTML 5 media player (what prompted me to check the page source).
I call them "crockfordisms" - basically bad pieces of advice by the man himself; like avoiding switch statements; not understanding the type system; avoiding the with statement; a bunch of things that he personally finds confusing so he takes his broad paint brush of evil out and lathers it all over his personal problems. **edit**: he says essentially the same thing in a [follow up post](http://webreflection.blogspot.com/2009/12/with-some-good-example.html): &gt; some clever guy decided that since somebody cannot understand closures, then extended closures, the basic principle of the programming language itself has to be removed
Flashblock may not be executed live (I'm not familiar). If it's simply cleaning the source before passing it on to the browser, it won't prevent this kind of thing, unless they want to parse the url-escaping to look for relevant tags.
Sometimes unnecessary escapes are there to hide content from automatic thingies that would screw it up. Like prevent something that looks like an email address from being turned in to a link. Also many spiders will not process any javascript. It is not very pretty but sometimes you don't have the time or control to do it properly so these types of things do get used. In this specific case.. who knows.
Well, it's more about code security (i.e. not screwing up), not performance. Using `slice` is quicker to write (and is a common pattern) and doesn't have weird side effects.
Try this: function countBlogEntries() { return document.getElementById('blog-entries').childNodes.length }
jQuery? $('#blog-entries li').length If I'm guessing right, you have to divide by 4 'cause each li inside #blog-entries have 4 children and those are getting counted too. If my memory doesn't fail, that jQuery selector will only take the ones immediately after #blog-entries, but not those below it (like "#blog-entries li li").
This may not work because text nodes are included in `childNodes`.
If a modern browser can be assumed, you could use: document.querySelectorAll('#blog-entries &gt; li').length querySelectorAll isn't available on IE &lt; 8, however. See http://caniuse.com/queryselector
Doesn't it work like CSS? $('#blog-entries&gt;li').length The &gt; is the direct child only selector, I thought. Apologies if I'm mistaken, I haven't used it in a while.
Try $('#blog-entries &gt; li').size();
 function countBlogEntriesDOM() { var ul = document.getElementById('blog-entries'); var count = 0; var node = ul.firstChild; while (node) { if (/^li$/i.test(node.localName)) ++count; node = node.nextSibling; } return count; } function countBlogEntriesQSA() { return document.querySelectorAll('#blog-entries &gt; li').length; } function countBlogEntriesjQuery() { return $('#blog-entries &gt; li').length; }
Attempt #2 *(edit: and #3, 4)*: function isLiElemnt(el) { return el &amp;&amp; /li/i.test(el.tagName) } function countBlogEntries() { var list = document.getElementById('blog-entries') , entries = [].filter.call(list.childNodes, isLiElement) return entries.length } or if you want to get fancy like: function countBlogEntries() { var list = document.getElementById('blog-entries') return [].reduce.call(list.childNodes, function(n, el) { return isLiElement(el) ? n + 1 : n }, 0) } 
go jQuery. 
Now that explodes if any node is not an element, because `el.tagName` would be `undefined`.
Cool. I can recommend Michael Bolins book, it's what helped me a lot to understand the big picture. Closure is really powerful when all pieces connect together. The official documentation doesn't really explain this IMO. There's also a tech talk of him on [YouTube](http://www.youtube.com/watch?v=M3uWx-fhjUc). Also, feel free to PM me with any questions.
Thanks for the critique. I just saw your comment, eventually I imagine I would end up with what you have there :) Edited (twice) and possibly fixed. Looks like `tagName` is always uppercase.
Now your example won't work with some XHTML documents. ^_^ That's why I opted for `/li/i.test` in my solution.
That's a feature :p
Damn
Hmm... I didn't know this was /r/jquery.... 
You're probably right, sir.
You win.
Thanks for the pointers!
Bootstrap may be just what I need. I'd been using Blueprint for layouts, but this has some editions I think are sorely needed.
Using jQuery... $(ul#someid li).length;
This uses the incredibly handsome and useful Array.filter function. I haven't tested it, use at your own risk. function countBlogEntries() { var ul = document.getElementById('blog-entries'), lis = ul.getElementsByTagName('li'); return lis.filter(function(el) { return el.parentNode === ul; }).length; } And for compatibility with IE8 &amp; below, include: if (!Array.prototype.filter) { Array.prototype.filter = function(fun /*, thisp */) { "use strict"; if (this === void 0 || this === null) throw new TypeError(); var t = Object(this); var len = t.length &gt;&gt;&gt; 0; if (typeof fun !== "function") throw new TypeError(); var res = []; var thisp = arguments[1]; for (var i = 0; i &lt; len; i++) { if (i in t) { var val = t[i]; // in case fun mutates this if (fun.call(thisp, val, i, t)) res.push(val); } } return res; }; } (workaround code from [MDN](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter). Horrible use of hoisted vars abound. Always be wrappin' this code in a closure.) 
Hmmm. espresso-mode for emacs is pretty nice, too.
**edit 3**: This is a refactor of the code based on my adoption of the Crockford/JSLint style of writing Javascript. I think it's the best way to write the code, but a lot of it is subjective, it may not be the best way, just an alternative. I'm being pedantic here, but the first function could be better stylistically, according to the school of Crockford, if written like; var countBlogEntriesDOM = function () { var ul = document.getElementById('blog-entries'), count = 0, node = ul.firstChild; while (node) { if (/li/i.test(node.localName)) { count += 1; } node = node.nextSibling; } return count; }; It doesn't change what's happening in the function, and I'm guessing there is some debate about whether it matters or not, but I'm a big proponent of writing JS consistent with the style suggested by Crockford and [JSLint](http://jslint.com). I did ignore the "use strict" error, I've read that it could cause some issues in browsers that don't support it (I could be completely wrong though) so I'm leaving it alone for a while. edit: Moved node = node.nextSibling out of the if statement because it's wrong: http://www.reddit.com/r/javascript/comments/k4pjf/how_do_you_dynamically_count_the_number_of_li/c2hih8f ** edit 2 ** Changed count = count +=1 to count +=1, that was incorrect and weird as a number of people pointed out.
I think when doing examples for inexperienced developers, it's important to do them in what is generally considered good practice. They're going to be copying your code, so you might as well make it look a way that most people expect.
`node = node.nextSibling;` should be outside the `if` statement, otherwise you'll get stuck in the `while` loop.
Thanks, edited. I should have seen that, but that is a good reason to not use single line if statements, it can be unclear and leaves the door open for mistakes, better to write a few more characters and be explicit.
I [rewrite your tests for jsPerf][1]. Of course, it's a bit harder to adjust values there, but because I use code generation it shouldn't be too tedious. At 50 random lookups for 100 properties, object lookups seem to be the quickest, like your results show (except in the latest Webkit; holy cow). Though I wonder why you'd need to performance test this. Just use whatever looks cleaner. [1]: http://jsperf.com/function-switching
I thought it was clear. The goal was to be more brief (though not terse) with my example, so you could compare the solutions side-by-side easily. In production I'd write the code with a little more whitespace. 
I do believe `var foo = function () {` is *not* a Crockfordism, however. In addition, you have `count = count += 1;`, which I don't think Crockford would like. ;P Please don't cargo-cult like this. Sure, my code could have been written differently, but that doesn't mean it *should*; you even wrote two bugs yourself during the rewrite, which probably means you shouldn't have looked into rewriting the code to begin with (no offense).
`Node.prototype.getElementsByTagName` returns a `NodeList`, not an `Array`. There is no `NodeList.prototype.filter`. Generally, when dealing with the DOM, it's either best to cast to an array (or have a library do it for you) or iterate the linked list (`firstChild` + `nextSibling`; see [my example][1]). [1]: http://www.reddit.com/r/javascript/comments/k4pjf/how_do_you_dynamically_count_the_number_of_li/c2hhnmx
 var foo = function () {} That explicitly declares the function, in your version "foo" would be an implied global, which is frowned upon. So, in the sense that every function is declared explicitly before it is used, as far as I understand it, it would be a Crockfordism. count = count += 1; I can see this one maybe not being the best because of defining "count" using itself, but the goal was to not use "++" because it is bad. Also, that line doesn't throw any errors in JS Lint. What do you dislike about? I don't think I'm "cargo-culting". Can that be a verb? I really think your code *should* be written differently. I'm not saying you're an asshole, I'm just saying I think there could be a better way. Javascript is very forgiving and allows a lot of bad things, but that doesn't mean you should use it in that way. The first bug I introduced, because you wrote unclear, implicit code; the single-line if statement. What was the second bug? I'd like to fix it in the example. 
it's somewhat awkward that the name translates to "broken" in spanish.
The key thing is "I thought it was". That's the problem, instead of writing an explicit if statement, you used a shortcut that, while perfectly valid, can lead to misunderstanding. I work with other developers that would also write that same code in production, and I'd suggest they change it too. In my opinion, terseness is much more important than brevity when writing code that others will need to understand.
&gt; That explicitly declares the function, in your version "foo" would be an implied global, which is frowned upon. So, in the sense that every function is declared explicitly before it is used, as far as I understand it, it would be a Crockfordism. What? I have no clue what you are saying. &gt; I can see this one maybe not being the best because of defining "count" using itself, but the goal was to not use "++" because it is bad. Also, that line doesn't throw any errors in JS Lint. What do you dislike about? Normally you would write `count += 1`, not `count = count += 1`. The latter is effectively `count += 1, count = count`, which is odd to write. &gt; I don't think I'm "cargo-culting". Can that be a verb? I really think your code should be written differently. I'm not saying you're an asshole, I'm just saying I think there could be a better way. Javascript is very forgiving and allows a lot of bad things, but that doesn't mean you should use it in that way. Besides the one-line `if` statement, point out one non-religious issue with my code. &gt; The first bug I introduced, because you wrote unclear, implicit code; the single-line if statement. I agree that it was unclear, but what do you mean by "implicit"? &gt; What was the second bug? I'd like to fix it in the example. As I said, the `count = count += 1;`. In this case, it doesn't introduce a logic error, but it is still (IMO) a bug.
&gt; I can see this one maybe not being the best because of defining "count" using itself, but the goal was to not use "++" because it is bad. Also, that line doesn't throw any errors in JS Lint. What do you dislike about? It's redundant: the RHS already increments the variable, the assignment only repeats it. You'd either want to do count = count + 1; or count += 1;
&gt; The key thing is "I thought it was". That's the problem, instead of writing an explicit if statement, you used a shortcut that, while perfectly valid, can lead to misunderstanding. The use of prototypes "can lead to misunderstanding". Of course all "understanding" is subjective. While writing the code, I thought the line was clear enough yet succinct enough. Plus, indenting in a `&lt;textarea&gt;` isn't that much fun (and I'm too lazy to switch to another editor). &gt; In my opinion, terseness is much more important than brevity when writing code that others will need to understand. So you would prefer I rename all my variables to be one letter?
&gt; What? I have no clue what you are saying. function foo () {} That is effectively writing: var foo = function foo() {} I'm pretty sure that is called an Implied global variable, because even though you don't state that it global it really is. http://oreilly.com/javascript/excerpts/javascript-good-parts/bad-parts.html down the page a bit under "The function Statement versus..." count = count +=1; Yep, you and nemetroid are 100% correct, totally missed that. It should just be count +=1; &gt; I agree that it was unclear, but what do you mean by "implicit"? I one-line if statement implies the brackets, I guess, to say where the condition ends and the code that should be run starts, by leaving off the brackets, you're just implying that they are there. That may be the most unclear sentence written about being clear ever. To sum up, just use the brackets and newlines, you're not saving that much room. &gt; Besides the one-line if statement, point out one non-religious issue with my code. I guess I just don't get the "religious" thing. I just think that Javascript should be written in a particular style, and not "just 'cause", but because writing it in this way is the most clear, most explicit way to do so. If you want to call that religious, that's fine. But, you'd be saying that about other folks that are a lot smarter than I am too: http://vimeo.com/25606006 **edit, formatting** 
No, I used the word terse wrong because I am not smart, and I'm drinking. Shit. How about: "In my opinion, **explicitness** is much more important than brevity"
I agree with your comments on single-line `if` statements in javascript. The other changes are debatable though. Some would argue that explicitly writing `var` in front of each variable declaration is good for clarity. Also, most programmers can parse `++count` very quickly in their heads, much quicker than the verbose alternative you have used. Why are you even using `count = count += 1`? You are assigning count twice, I presume that you meant `count = count + 1` but why not just use `count += 1`?
In this case I wouldn't argue spaces over tabs or vice versa, only that spaces or tabs were used consistently.
Ah, good point- as I said, I hadn't tested it. I still prefer the more functional approach even if it requires a cast, it makes the code more readable and understandable: you're saying what it does instead of how to do it. But, potato potato. Cheers :-)
&gt; I'm pretty sure that is called an Implied global variable, because even though you don't state that it global it really is. You're wrong. &gt; I one-line if statement implies the brackets, I guess, to say where the condition ends and the code that should be run starts, by leaving off the brackets, you're just implying that they are there. That may be the most unclear sentence written about being clear ever. To sum up, just use the brackets and newlines, you're not saving that much room. I would prefer to write something like: ++count if /li/i.test(node.localName) but, of course, that's not legal JavaScript (and the &amp;&amp; alternative would be more trouble than its worth). I thought `if (foo) bar;` was a good compromise. In most cases, I *would* have the `++count` statement on its own line (with brackets). &gt; I guess I just don't get the "religious" thing. I just think that Javascript should be written in a particular style, and not "just 'cause", but because writing it in this way **is the most clear, most explicit way** to do so. (emphasis added) The emphasized part of your quote above is "religious" (in the IT sense). "My way is better than your way. You are not using my way, and you are therefore wrong." I'm not saying that *your* style is wrong, just that it's wrong to say *my* style is wrong. I agree with a lot of what Crockford says, but I also disagree with some of his practices (not using prefix `++` and `--`, for example). I am an individual, and I know what is best for the majority of the code I write. (Note that this does *not* mean "my style is best so I write most of my code in my style"; it means "I can stylize the code I am dealing with appropriately for this task or situation".) (Please note that when I write "your style" I mean "the style you prescribe".)
I definitely agree with you about functional programming, but JavaScript is a hybrid language. In this case, it's (IMO) clearer to use an iterative method, because the "cast" to an array can be avoided and the iterative method isn't *that* ugly. There's something to be said about modifying the DOM while this function is running, but that's an unlikely case and you'd probably be using a DOM library like jQuery by that point anyway.
The count = count +=1 was a mistake on my part, you're right, I'll update the code. The other things, I'm following the Crockford/JSLint lead, which says only a single var statement should be used per block, there is a reason too long for me to write out. And "++" is a similar situation.
Shouldn't that be `$(ul#someid &gt; li).length`? Otherwise it would count child `li` elements inside each `li` element.
Get children of the ul, make sure you filter out text nodes. Most libraries can do this for you.
That's the first I've seen of the test. Do you know where I can find the code? Nice work on your library btw.
 function countChildren(paramParent, tagName) { var children = ((typeof paramParent === "string") ? document.getElementById(paramParent) : paramParent).children, loopKey, x = 0; for (loopKey in children) { if (children.hasOwnProperty(loopKey)) { if (String(children[loopKey].tagName).toUpperCase() === tagName.toUpperCase()) { x += 1; } } } return x; } var count = countChildren('blog-entries', 'li');
Just a weird form of obfuscation. Can't imagine it actually works too well, but that may be the intention.
The performance test is assure my inner micro-optimizer self that everything is ok, and it's totally ok to use this technique pretty much anywhere without worrying about performance.
it would only not work if the html is invaild. [ul's cannot have flow or inline content as children, only li's](http://www.w3.org/TR/html401/struct/lists.html#h-10.2). although, comments may present a problem...
&gt; You're wrong. Which part? Can you expand on that a bit? I just disagree. I follow these style rules because they are the most clear, most complete JS styles rules I've seen written down. The rules also have a tool that you can easily check your code against, either manually or programmatically. I'm sure they will change over time, I've seen JSLint rules change over the last couple years, but at least it is some rules written down and not just a style that is in some single developer's head.
Very interesting!
It's not only stylistic. If you use multiple var statements throughout your code, when the code is interpreted, the interpreter will gather up all the declared variables, move them to the top of the block, and define them with a single var statement. Also, the "anonymous function declaration" is not either. When you write code like this: function foo () { // stuff here that does other stuff } "foo" **is** going to be declared. It will be Global to the scope that you wrote it in. That is pretty black and white. Read: http://www.jslint.com/lint.html
I almost edited it after posting it to say this. Depends on what you want to do, but exactly as you say. The &gt; is great for grabbing only immediate children.
Remember that whitespace may be in the DOM as a text node. See an example of [`childNodes` returning text nodes in a valid `&lt;ul&gt;`][1]. Source below: &lt;!DOCTYPE html&gt; &lt;title&gt;&amp;lt;ul&amp;gt; children test&lt;/title&gt; &lt;ul id="list"&gt; &lt;li&gt;This is &lt;li&gt;A list &lt;/ul&gt; &lt;p&gt;Children are:&lt;/p&gt; &lt;ol id="output"&gt;&lt;/ol&gt; &lt;script&gt; (function () { function nodeTypeToString(nodeType) { var key; for (key in document.body) { // (Check prototype as well) if (/^[A-Z_]+$/.test(key) &amp;&amp; document.body[key] === nodeType) { return key; } } } var list = document.getElementById("list"); var output = document.getElementById("output"); var nodes = list.childNodes; var i; for (i = 0; i &lt; nodes.length; ++i) { var outputItem = document.createElement("li"); outputItem.textContent = nodes[i].nodeType + ' (' + nodeTypeToString(nodes[i].nodeType) + ')'; output.appendChild(outputItem); } }()); &lt;/script&gt; [1]: http://strager.net/b/ul-children.html
&gt; The other things, I'm following the Crockford/JSLint lead, which says only a single var statement should be used per block, there is a reason too long for me to write out. And "++" is a similar situation. Can you state the reason(s) for completeness, please?
&gt;&gt; You're wrong. &gt;Which part? Can you expand on that a bit? The part where you say "I'm pretty sure". Specifically: &gt; I'm pretty sure that is called an Implied global variable, because even though you don't state that it global it really is. Function statements versus function expressions has nothing to do with globals or implicit/explicit. &gt; I just disagree. I follow these style rules because they are the most clear, most complete JS styles rules I've seen written down. The rules also have a tool that you can easily check your code against, either manually or programmatically. I'm sure they will change over time, I've seen JSLint rules change over the last couple years, but at least it is some rules written down and not just a style that is in some single developer's head. Programming for computers versus programming for humans?
&gt; If you use multiple var statements throughout your code, when the code is interpreted, the interpreter will gather up all the declared variables, move them to the top of the block, and define them with a single var statement. What does this have to do with anything? This does not affect code *at all* unless you explicitly write *bad* code (i.e. using a variable before it is declared, usually by mistake). There's really only one argument here, which manually hoisting `var` statements to the top of the function avoids. Two examples: (function () { var x = 42; [ 1, 2, 3 ].forEach(function (num) { console.log(num + x); // x here is undefined! var x = num * num; console.log(num + x); }); }()); (function () { window.setTimeout(function () { // window here is undefined! console.log('Hello, world!'); }); var window = new Widget(); window.text = 'Hello, world!'; window.show(); }()); &gt; Also, the "anonymous function declaration" is not either. When you write code like this: &gt; function foo () { &gt; // stuff here that does other stuff &gt; } &gt; "foo" is going to be declared. It will be Global to the scope that you wrote it in. That is pretty black and white. What? How does this differ from using `var`?
Yeah, was on my phone before. The single var statement, as I understand it: If you use multiple var statements throughout each block, the interpreter will gather all the variables, move them to the top of the block and then declare them with a single var statement, comma separated. In short, if you don't do it, the interpreter will have to do it for you. The "++" is trickier and probably an edge case, but when I'm going full on pedantic, I like to stick with it. It seems that it can lead to errors in a small number of cases and it is not as explicit as "+=". I can't find a good write up of it, but Crockford explains it in this video: http://vimeo.com/25606006. That's a pretty cool talk.
&gt; The single var statement, as I understand it: &gt;If you use multiple var statements throughout each block, the interpreter will gather all the variables, move them to the top of the block and then declare them with a single var statement, comma separated. In short, if you don't do it, the interpreter will have to do it for you. See my [other comment on this issue][1]. &gt; The "++" is trickier and probably an edge case, but when I'm going full on pedantic, I like to stick with it. It seems that it can lead to errors in a small number of cases and it is not as explicit as "+=". I can't find a good write up of it, but Crockford explains it in this video: http://vimeo.com/25606006. That's a pretty cool talk. I mainly asked so I could hear *your* reasoning. I don't want you redirecting me to some third party's opinion; I want help understanding *your* reasoning. [1]: http://www.reddit.com/r/javascript/comments/k4pjf/how_do_you_dynamically_count_the_number_of_li/c2hk2qr
Right, I saw it. I still do not agree with your other comment. One var to rule them all! Ok, KGB calm down. Yeah, Douglas Crockford is just a "third party" when it comes to Javascript. I think using "+=" instead of "++" is more explicit. When you write: foo +=1 The increment is written down right there. "++" is known to us because we've seen it time and again in JS and other languages.
my mistake. the dom created by the browser seems to be invalid based on the html spec. is 1) the spec suggesting that whitespace is, in fact, not allowed within the ul, or 2) would it be preferable for the browser to ignore the text nodes created by the whitespace within the ul in order for the created dom to more accurately reflect the spec? also, i was wondering why nobody had suggested just checking nodeType instead of the node name.
&gt; Ok, KGB calm down. Yeah, Douglas Crockford is just a "third party" when it comes to Javascript. I think using "+=" instead of "++" is more explicit. When you write: &gt; foo +=1 &gt; The increment is written down right there. "++" is known to us because we've seen it time and again in JS and other languages. I don't understand what you mean. We know what `+=` means because we've gotten used to it, and we know what `=` (as an assignment operator) means for the same reason. To me, `++` means "successor". So if it makes sense that the successor of `count` should be the new value of `count`, I'll use `++`. Else, I'll use `+= 1`.
&gt; To me, ++ means "successor". So if it makes sense that the successor of count should be the new value of count, I'll use ++. Else, I'll use += 1. Why not use one of them and be consistent?
&gt; my mistake. the dom created by the browser seems to be invalid based on the html spec. is 1) the spec suggesting that whitespace is, in fact, not allowed within the ul, or 2) would it be preferable for the browser to ignore the text nodes created by the whitespace within the ul in order for the created dom to more accurately reflect the spec? The [HTML5 spec says][1]: &gt; The space characters are always allowed between elements. User agents represent these characters between elements in the source markup as text nodes in the DOM. Empty text nodes and text nodes consisting of just sequences of those characters are considered inter-element whitespace. &gt; &gt; Inter-element whitespace, comment nodes, and processing instruction nodes must be ignored when establishing whether an element's contents match the element's content model or not, and must be ignored when following algorithms that define document and element semantics. [1]: http://www.whatwg.org/specs/web-apps/current-work/multipage/content-models.html#content-models &gt; also, i was wondering why nobody had suggested just checking nodeType instead of the node name. Because the code makes sense more as "count each `&lt;li&gt;`" than as "count each child element".
Because they mean different things. Why use `for` when `while` does the same thing? Because they *mean* different things. Same with `if` versus `switch`, and probably some other commonly-used features of JavaScript and other C-syntax-family languages.
Not that this will make a lick of difference, I tried (but don't use regularly), for Linux Version 11.51 Build 1087 Platform Linux System x86_64, 2.6.38-11-generic FYI It works perfectly with chrome &amp; firefox.
I'm running the same version, just on Windows. Strange...
The last line with `prompt()` (line 27) has no closing quote. Should be: var seven = prompt("You chose East and you are in room seven. Would you like to go (S)outh or (W)est?");
&gt; var seven = prompt("You chose East and you are in room seven. Would you like to go (S)outh or (W)est?); It's missing a close double quote: var seven = prompt("You chose East and you are in room seven. Would you like to go (S)outh or (W)est?**"**);
Awesome! Thanks. I knew it was something stupid but I poured over it and saw nothing. 
Thank you so much! I was worried I would lose my steam and give up (again) learning JavaScript. 
jsFiddle also has JSLint built in (button on the top). It's pretty strict and might be a little overkill for learning in the beginning but it should point out smaller bugs/typos.
&gt; if (/li/i.test(node.localName)) ++count; This will unwittingly catch 'blink' tags too. -_-
You're right, and perhaps future elements. Thanks for noticing this bug. I should have, of course, used `/^li$/i`. I've fixed my example.
It could be because they aren't sure what content is going to be written (in some abstraction) and couldn't be bothered properly escaping backslashes, newlines, and close script tags so they just implement a full escape, which while more verbose is easier and requires less testing.
It makes it harder for idiots to steal it. No other reason, save _maybe_ preventing URL snoopers from scanning the source code for the video URL, even though there are way simpler ways of doing that. They just don't want people stealing it. Lots of sites do this. This method in particular is just fucking retarded, but oh well.
First step after examining the line the runtime is complaining about not not seeing the issue is running your stuff through jslint (or, for the less strict, jshint).
Thanks! It's frustrating but It'll be nice to get a small step in the right direction. 
How do I reset a variable? 
I know, I was just adding more to the discussion. I have one project in particular where switching from slice to manually pushing arguments onto an array gave a _noticeable_ speed increase. But that was because the functions in question were each being called 10's of thousands of times.
I'll keep that in mind if I ever have that bottleneck.
Using jQuery $("#blog-entries li").length
Screenshot in Javascript ... of a WebGL renderer. Not of a page. Sort of misleading, and ultimately not very useful outside of, well, WebGL interfaces.
funny but useless
http://jsfiddle.net/g105b/Z4TFh/
That will still get all children of children. You need to be more specific: $("#blog-entries &gt; li").length
It doesn't compare favourably with dojo or ext in terms of widget functionality and doesn't obviously do anything better than these two. Having said that, the code is an absolute pleasure to read. It's probably the best and most transparent code I've ever read. http://code.google.com/p/closure-library/source/browse/#svn%253Fstate%253Dclosed You should read some. 
Who made this?
why not simply node.localName == 'li'
genetic algorithms, clustering, or even a chatbot?
Here's a few pieces of advice: Get yourself a real editor which decent syntax highlighting. jsFiddle is great for experimenting, but the highlighting is wonky and it's cramped in terms of screen size. A good editor will highlight most syntax errors for you. I recommend [Komodo Edit](http://www.activestate.com/komodo-edit) It's free and runs on Win/Mac/Linux. Note you want **EDIT** not **IDE** the former is free, the latter is not. I also suggest you spend some time getting to know your browser's development tools. If you use Firefox, get firebug. If you use chrome/others the developer tools are built in. Work your way through some tutorials, seriously spend some time on it. Being good with the debugger/console will save you tons of time when it comes to figuring out problems. Lastly, I realize you are just a beginner...but in my opinion you're going about this all wrong. One of the most important things to learn as a programmer is program design. Before you start, you need to think about the problem at hand and spend some time thinking about what sort of program could solve it. You want a **general** solution first, then start to narrow it down to exactly what you want to do. Right now, your program design is basically a giant series of if statements. This is bad in a variety of ways...it's dense, it's unreadable, it's hard to follow...if you want to change it significantly it will be a huge pain. Most importantly, it's not going to teach you anything. I'm sure you already understand the basic idea of an if statement, stringing together hundreds of them is not going to give you any more insight into it. What you want here is a generalized "game engine", where you can create some type of thing that represents a dungeon, and then your program will "read" that and create an internal representation of the dungeon. Then the program needs to figure out the initial state to start in (player starts here, name starts at empty, etc etc) and then have some logic to figure out how to gradually update that state (name, player position, etc). [I've taken the liberty of putting together a "game engine" for you which will play simple text-based dungeon games.](http://jsfiddle.net/YMMng/1/) This game engine takes a simple map made up of characters and some descriptions of room types, and lets you navigate through the map. It may seem really long, but most of it is comments. Take some time to just read through it, until you feel really comfortable understanding what's going on. Play with it a bit. This program is not intended to be a demonstration of the best way to go about this problem...the opposite in fact. There's plenty wrong with it, it's just something I slapped together to hopefully demonstrate some concepts for you. That's your next step, start working on it. Some "homework" you might give yourself: - Clean up the code. - Make things more customizable, i.e. let the "blank space" char be settable, customize other things - Add a score/score keeping - Add monsters - Add items - Make it so the player can face different directions (i.e. describe things as "left, right, front, back") instead of everything always being orientated north/south - Try adding different ways to input the level. - Make a level editor which will read/output the level format for the engine. - Make your own format for levels and repeat the last step. - Make it multiplayer. - Have it use something besides prompt() for input/output. Maybe have it produce simple graphics. ..There's so much more to experiment with. Even if you don't use my example, these are things you could explore yourself. Good luck.
yes, but I need something more precisse
I don't see anything in the spec that says patterns must be portable from one canvas to another, but in my testing ([same reason](http://runestonewisp.appspot.com)), Chrome, Firefox and Opera all behaved nicely. IE wasn't ready yet.
Thanks, I did read the spec as well and decided to ask here because nothing was said on the matter.
Make a game (such as a snake game), and then make an AI which plays the game. Try a few techniques and compare the high scores they get.
Make an AI based ad-blocker. I want something that I can "train" by blocking new sources and types of ads and it will automatically hunt down and block any type of code that is suspiciously similar in origin, technologies, and **event and DOM binding semantics**. For instance, if there is a piece of code that preventDefault on a right-click event it is a huge red flag. Same thing with code that opens a window on a click. Where in the DOM these events are bound is also very important (if they are very close to the top of the DOM == bad). What I am proposing would like an ad-blocker with support for advanced heuristics. http://www.slideshare.net/wpodgorski/artificial-intelligence-methods-in-virus-detection-recognition-introduction-to-heuristic-scanning-presentation
write a fast fuzzy c-means clustering algorithm with visuals and matlab import/export in javascript. It won't be as hard as it sounds actually, I've written non-fuzzy k-means in JS. Use MVC for extra internets.
My Usage: Math.WELL1024 = WELL1024(/* optional seeds */); ..then just call: Math.WELL1024(); ..for some random numbers.
You could do an AI for a board game. Board game with SVG are quite easy to implement, if you need inspiration you could look at a mini project I did few years ago which is a Connect 4 board game with AI computer : http://jsfiddle.net/fkc5R/2/ Note : You should test it on Chrome, the AI is quite expensive in computation.
Javascript is almost the worst possible choice of language for an AI. AI approaches are essentially universally computation and datastructure intensive, two things JS is terrible at, and different browsers implement floats differently, so you're going to get subtly different behavior in anything tuned between browsers. Short version: use a traditional language instead.
Security through obscurity.
Some popular intro AI course is still taught using awk, iirc. And, I'd say js is pretty good at handling json.
If you want to take a screenshot of a page in JS, you have to send the the pages html (after JS runs) to a server and have the server take a screenshot using something like firefox with a plugin. I think that's also the way google is doing their screenshots got the feedback tool found on Google plus.
Very nice. But it could use a better license...
So, after the discussion on this I've been looking around at differing opinions on Crockford/JSLint. I did not realize the number of people that disagree with a lot of what JSLint pushes, I can see it now, it's very opinionated and I can see how trivial some of things can be. Specifically I was looking at JSHint and some of the discussions around it. I get it, I'm not totally unreasonable, I've just be writing JS according to those strict rules for a few years now and have seen it help improve my code and I've turned a number of other devs on my teams onto the rules as well and we've collectively seen improvements. I'm sure the improvements have come not so much from adopting Crockford's proposed style, but just adopting a style. I was trying to pinpoint why my original comment seemed to attract not just disagreement, but also seemed to have made you and a couple others a little angry. I feel like it was because I assumed that the code example you showed didn't follow the style because you were uneducated about it, not that you knew about it and disagreed. I'll have to keep that in mind, I can see how that is not a good way to suggest a code style. I'll probably stick with the strict Crockford style, it makes sense to me, he makes some good arguments for the rules in The Good Parts, and in his talks, but I'll keep in mind that other developers have differing opinions about the rules that make sense as well. Good chat, good chat.
r/coffeescript
it's in his repo for jOrder. Thanks for the compliment. Google seems to be quite fond of you, you should be really happy.
I agree completely!
JSON isn't a datastructure, it's a serialization notation. 
I use xorshift everywhere. It's about as good as Mersenne Twister, but it's slightly faster [1] and the code is also shorter. More useful: http://baagoe.com/en/RandomMusings/javascript/ [1] Not necessarily true with JS. Bitops can be super slow.
no, it's syntax for literal objects, arrays, etc. you don't have to serialize json. you must have next to no significant Javascript experience.
I used to use it often (1998-2004 time-frame). Someone then decided to benchmark it, and found **with** made things much much slower. Add to that the bad press that it's a confusing language construct and should be avoided, and what's a guy to do but shun it's use or get laughed out of a job? 
Because `localName`'s casing depends on the environment. See [MDC's note on `localName`'s casing][1]. [1]: https://developer.mozilla.org/En/DOM/Node.localName#Notes
I think you've got it! Grats. I'd like to add that it's almost always rude to rewrite someone's code, only incorporating *style* changes and not actual logic improvements. In this case, it was very rude, and the defense was even more irritating ("I do it because Crockford said so!"). I encourage you to look at various npm modules on Github and read their source code. Even for an experienced developer, looking at new ways of solving problems and new coding styles is always enlightening!
First things first- Happy Reddit Birthday! Thanks for taking the time to put all this together! Your advice is probably correct, I do get the basic idea of what I'm doing but I wasn't sure what to do. I wanted to do something myself, not copy some "introductory tutorial". Looking over your "game engine" is a little overwhelming. I feel like what I was doing and what you've put together is light years apart. I guess I need to pick up a book or something. 
It's a shame that npm has not been ported to Windows yet, then the workarounds for finding the packages would be much easier..
You are missing the point entirely (and actually, I've been writing Javascript for quite a long time.) This is about datastructures, and JSON is not a datastructure. &gt; you don't have to serialize json. JSON *is* *a* serialization; saying you don't have to serialize it is like saying you don't have to convert a string to a sequence of letters. JSON is a serialization of a series of containers and rudimentary datatypes into a string-available notation which, later, ECMA adopted into the nascent ECMA 262-5 specification as a valid literal specifier. &gt; you must have next to no significant Javascript experience. Says the man who doesn't appear to understand that the position he's taking has only become a valid minor misunderstanding of the truth in the last two years, thereby concretely labelling how long he's been paying attention. Few things are as satisfying as a novice outing themselves thereof by accusing the same of someone else. :) Have fun with not understanding why I brought up datastructures, and prattling on about JSON, champ.
Wow, nice work! You coul put some "tooltips" on the buttons. gona useit a bit, and see what else can i found. Again, great work!
&gt; Listen, I realize that after just over three weeks here, you think you're ready to start talking about how other people don't have a lot of experience. &gt; Take a deep breath. Yes, proggit is mostly overrun with people who confuse the ability to be angry with the ability to take a successful position in a technical argument. &gt; If you learn to actually figure out what's being said before you argue with it, then you won't get discarded as clueless by the people you're trying to talk down to. &gt; I've been writing JavaScript since back when it was called LiveScript, kid, and if you dig deep enough in the old Usenet arguments that led to the specification, and look for my name - John Haugeland - you're going to learn something pretty significant about your ability to correctly identify who's got experience. &gt; So why don't you turn the rage meter down a notch, and consider learning something instead of barking at people about topics you don't understand? &gt; I mean seriously, you really think JSON is a datastructure? Do you know what a datastructure even is? Can you tell me what the difference between a datastructure and a container is without googling, and whether JSON is either, and if so which? &gt; No. &gt; You can't. &gt; Because you're using words you've heard without actually knowing what they mean, and you've trapped yourself in an argument you don't understand by trying to say someone doesn't have experience, when you don't actually know enough of what you're talking about to understand the hilarious error you made. &gt; Settle down, champ. You smell like a college sophomore. &gt; Stop getting delusional. You might learn something if you don't stick your dick out every time you think someone's wrong. Wow, you sound like you raged out so hard that you needed the whole 2 replies to vent. I think you need to take a deep breath, turn the meter down a notch as you say. Javascript has object and array literals, which can make using them very convenient. If that's just a particular 'notation for Javascript objects', and not exactly 'Javascript Object Notation', please accept my humblest apologies for not being so pedantically correct. I would have though someone with ages of experience as you claim to have, would have realized what I was talking about. And why are you talking about dicks? Did you mistake this for your gay chat forum? Do you really think you're going to fool anyone into believing you have so much experience when you immediately start calling someone a sophomore? That's not how experienced, intelligent individuals behave. **EDIT** Are you this John Haugeland? http://philosophy.uchicago.edu/faculty/haugeland-obituary.html Wait, I bet you must be a different, far more impressive John Haugeland. &gt; Can you tell me what the difference between a datastructure and a container Now I'd just be pretty embarrassed if my university had graduated you. 
gist it! thanks
Obviously I dont want to code neural networks in java. I want to do something "client based programming". For example, using gestures navigate through menus.
And ... that's artificial intelligence how, again?
&gt; Wow, you sound like you raged out so hard that you needed the whole 2 replies to vent. Lol. This is an adorable little tantrum. &gt; EDIT Are you this John Haugeland? http://philosophy.uchicago.edu/faculty/haugeland-obituary.html The one that says obituary? Probably not, no. It's hard to tell whether you're actually that stupid, or whether you're gambling on trying to make fun of someone's recently dead relative. &gt; &gt; Can you tell me what the difference between a datastructure and a container &gt; Now I'd just be pretty embarrassed if my university had graduated you. Why? For calling you on being unable to make a distinction? :D The fact of the matter is that no, you can't. In fact, it's a little hard, again, to tell whether you're just trying to pretend that the distinction is super obvious and beneath you, which would be hilarious since if you knew what it was you'd know that it excluded JSON, or whether you are haughtily hanging your education on the delightful premise that they are the same thing. Would you condescend to explain which form of dismissal I'm looking at? &gt; Did you mistake this for your gay chat forum? Have fun freaking out.
The API leaves a bit to be desired. ".add(4).years()" is very awkward. Cant tell from the Readme, does it handle months properly? ".add(4).months()"
Thats what i thought too. Really should be .addYears(4) or something. 
&gt; Lol. This is an adorable little tantrum. Me? That's a good laugh. You're still in such a rage that you are both replying in private and publicly, with different messages. &gt; It's hard to tell whether you're actually that stupid, or whether you're gambling on trying to make fun of someone's recently dead relative. Probably about as hard as it is to tell if you're just lying about who you are, you being the pompous blowhard that you are. You are pathetic. You're kind of like Zed Shaw, except you haven't actually accomplished anything with your life. Way to go, junior.
&gt; Probably about as hard as it is to tell if you're just lying about who you are I am not pretending to be a dead man, sir. &gt; except you haven't actually accomplished anything with your life. Ladies and gentlemen, the psychic has placed his guess. :D
Hello, I am the author. Due to the feedback, I'll change the methods to addYears and similar for given time unit. I appreciate the feedback, thanks! Regarding months, no, the lib does not handle months properly currently. I have a fix that will be committed, where if you have a date `2011-03-30` and you do `.addMonths(-1)`, you will get `2011-02-28`, instead of something weird. Do you think this is the proper way to do it? Personally, I think so.
It's already changed, heh.
Ha! wow. Who knew bitching on Reddit can actually have an effect?
Because you can't be bothered to figure out how to write short, expressive code on your own so you need a compiler to do it for you (often poorly)?
I would love a library that would allow me to throw a variety of date strings at it and it would give me a correct JS Date Object back in every browser. eg. var date = dquery("4/28/11"); var date2 = dquery('2011-04-28 08:05:00'); Some browsers support some of this already but it needs to be cross browser and it also needs to be smart enough to know that by 11 I mean 2011 not 1911 (I'm looking at you FireFox).
There are some ruby extensions that allow specifying times like 4.years and 20.days, which I think is what he's going for (and I really like). Unfortunately the additional required method calls really get in the way of the expressiveness and make for awkwardness.
Uhm, `dquery("04/28/11")` should return `2011-04-28`. &gt; dquery("4/28/11") Thu Apr 28 2011 00:00:00 GMT+0200 (CEST) :)
Ive been working on this recently. Check the site out again. :)
Absolutely. It's a trade-off, similar to how jQuery doesn't attach any methods to any other object than its global object. The reason for this is not to interfere with other libraries, which is a real danger when monkey patching.
Ok I had a quick play and this is actually pretty nice for simple date formatting and parsing and seems to do all of the above.
Cool. There's a bit functionality that isn't covered by the examples, that might come in handy at times. Right now you have to read the source to know what kind of things you can do, but I'm planning on putting up some thorough documentation soon.
That does sound like the proper way to do it unless its a leap year, of course. ;)
Is it localisable? The current standard (Date.js) promises much, but hasn't been updated in years, and many of the localisations are just straight copies of the US version. What about support for timezones?
Ugh, leap years. Ugh, *indeed*. Ah well, lucky enough, the fix actually takes that into account. :)
Very nice!! ;)
Well, you can change month and weekday names. dquery.i8n.weekdays dquery.i8n.months dquery.i8n.ampm Timezones are hairy. Especially since there is no native support for timezone management, i.e. keeping timezone configuration in a Date instance, since all implementations merely transforms a date in string format to the current timezone. Well, this being javascript I suspect there is some implementation that does support it ;) Do you have any suggestions how to solve this? I have a few ideas, but am not sure if they work in practice.
Wow =P It's game's like this that remind me i'm in the right business.
I'm still not drinking the kool-aid. JavaScript isn't that horrible a language.
I agree. Think of the porn!
I am a heavy user of Google Closure. I'll give my list of pros and cons. Pros * Cross platform tools for obfuscation/optimization. * Easy to create libraries that don't depend on JQuery or any other library. I hate forcing other people to use a library. * Great localization tools via Google Templates and &lt;msg&gt; tag. * Google closure templates are simple and super fast. Cons * Poor documentation ( probably my #1 complaint ) * Poor integration with 3rd party libraries when you need em. * Writing down comments slows time of development. * Poor tools for debugging obfuscated code and problems with Advanced mode compilation.
d*query*? What is it querying? jQuery queries the DOM; what does this query?
Great Job. I really love turntable, but I can totally see use for this too!
I needed something at least as good as Mersenne Twister for Monte Carlo sampling techniques. WELL was co-developed by one of the people who developed the MT in order to have better equidistribution and better performance.
Yeah, sadly ES5 has a major copout here. If your date string doesn't conform to ISO8601, "the function may fall back to any **implementation-specific** heuristics or **implementation-specific** date formats." In other words, implementations are allowed to do almost whatever the hell they want and still conform to this specification.
Is letting a compiler do the boilerplate instead of you a problem?
I think so. Since the first programming language, we've used this powerful concept of abstraction to write boilerplate in one place and use it when needed. This process is "making a library", and there are literally thousands of them free to use. Coffeescript decided instead on inventing an entire language based on Javascript, writing a complex compiler, AND making a library. I don't get it. I also don't think boilerplate is a particular problem with Javascript. Usually when people complain about it it's because they're imposing the boilerplate on themselves by trying to implement classes or other constructs found other languages because that's how they think. Coffeescript makes it easy to just coast by without actually thinking how to use the Javascript language itself to achieve your goals.
Libraries are not the only means of abstraction available to us. Compilation is another means of abstraction, and it has been put to good use since the dawn of computer science. Another important issue you're missing is that we use these **different** means of abstraction for **different things**. (though obviously there is *some* overlap) Libraries are useful, but they simply cannot provide many of the things CoffeeScript provides. They also have a run-time penalty where a compiled language does not. This does not mean they are out of the question, it's just a point to consider. Another point to consider is that CS can make it easier to write and use libraries in an expressive way. It's fair enough to argue that you think CS is "unnecessary", but to argue that libraries solve the same problem is just specious. I would also note that CoffeeScript does not have a "library" per se. CoffeeScript almost entirely avoids any sort of run-time manipulation...there are only a few places where some sort of very minor run-time functionality is added and they are the exception by far. I'd also note that the idea of transpiling from one language to another is also a rich tradition in comp sci, and some of the biggest institutions on the planet running hundreds of thousands of lines of code make good use of transpilers which are similar to CoffeeScript for languages that are similarly dynamic to JavaScript...or even actually JavaScript. Another thing I think is important to note is that you cannot use CoffeeScript without having a fairly good understanding of JavaScript. Or rather, you can....but you will only be causing trouble for yourself. One could make precisely the same argument about libraries like jQuery, that they let developers coast by without having to worry about the underlying issues.... I would say that up to a point this is the entire idea of such tools...to take care of the underlying complexity...*but* if developers rely on that too much without being somewhat knowledgeable about this complexity, that is their own failure...not a problem with the tools. &gt;Usually when people complain about it it's because they're imposing the boilerplate on themselves by trying to implement classes or other constructs found other languages because that's how they thin This is true, but I would note that CoffeeScript is a language that is steeped in JavaScript, and semantically tied to it very closely. There is **nothing** in CoffeeScript which is meant to abstract away (what I would consider) the important parts of JavaScript or bolt on other languages in a way that fundamentally changes JavaScript. It doesn't give you a completely new language, it gives you a tweaked version of Javascript with some important helpers and paradigm shifts to make it more expressive, but with the same old familiar core. Classes in CS are built on prototypes and are simply sugar on top of how most JS devs use prototypal inheritance. You must understand the underlying concepts to effectively use CS, and there's nothing preventing you from using other methods of inheritance...in fact the language provides utilities making it easier. There are plenty of very good reasons to either use or not use CoffeeScript, but I think some of your points aren't really solid. 
Thanks. Learning to program is difficult, you have to find the right balance of "doing it yourself" and building on what others have done. Think of it this way, if you wanted to learn guitar...you wouldn't just sit down and start banging away at the guitar trying to "teach yourself". Since you don't know how to play, any song you "wrote" would just be noise. Rather, everyone who learns guitar starts by learning to play someone else's song....or at the very least learns some chords. You have to find the right balance of "stealing" other people's ideas to build up your knowledge and skills, and then "building it yourself" to build up your chops. That's why I strongly advocate a project like the one I proposed....find something that is a simple core and then start modifying and building on top of it. That will give you the best combination of learning from others and learning to build it yourself. Most of the good programmers I know got their start exactly this way, which is why I advocate it so strongly. If you look at the classic programming books, they mostly follow a pattern of "here is some code, now modify it to do this". My example may or may not be for you, but I'd definitely find something like that that you can build up on.
Date objects.
It's a novel twist on the standard "intro to CoffeeScript, *eww* look at the JavaScript it spat out" post, at least - putting the sort of JavaScript it outputs *first*, as if you'd ever write it that way by hand.
he used to do it in flash years ago as well and he wrote the book on moving things. Go check out his old an experiment a day from ye olden days. 
Where on earth would you use this for?
I suggest you to implement also WSAD controls, because on my netbook the page is too big, so arrows move the page with my ship too. &gt;:(
&gt; jQuery, that they let developers coast by without having to worry about the underlying issues jQuery code is still Javascript; Coffeescript code isn't. I'm sure Coffeescript might have it's own niche place but definitely not in a project where a bunch of folks know Coffeescript and others don't. There are *loads* of Javascript/jQuery resources out there, I'm not sure if the same can be said about Coffeescript. Plus the natural pain which comes with debugging problems with your *generated* Javascript... Also, did you read the article. This line is golden: &gt; A couple of shortcuts that enable you to use list comprehensions rather than error prone for statements. Error prone? Wow...
There are no arrow controls Controls: Hold LMB (left mouse button) to move the spaceship towards the cursor Mouse cursor turns the spaceship around Space for shooting nothing else :) 
well assigning the hasOwnProperty function to a variable and referencing it through that is allowing them to assign context to the function with call() and passing in the object. I don't really see a great reason to reassign context here, as they're just iterating through the same object the entire time through the loop. But i could see this being used for looping through several different objects in the same loop and checking their properties. So i don't know, maybe they think this is more expressive? Just seems like flavor to me.
OK, it uses CSS3 transforms and transitions now, where they're supported, so it's smooth as butter on iOS.
That says 'resize' to me ...
Damn that focus group!
the fuck? I was like: "Me and this game be no friends." (improper english on purpose) &lt;3.
A guess: it works around the possibility that 'hasOwnProperty' has been manually set the object, or it's prototype (excluding Object). Otherwise I see no advantage, and would expect it to be more expensive, as well as more code.
the only interesting link that came up on googling was [this](http://jsperf.com/hasownproperty-call-vs-direct). i am not sure how reliable the test results are but they all seem to point that using *call* is slower. 
This was a kick-ass thread. Thanks you two.
Yeah I'm an ex-action scripter and I still have his blog on reader. I'm glad he's venturing into canvas+js
If canvas/svg/webgl on js is going to become the next standard for highly interactive content on the web (as I think it will), we need to go through an experimentation phase where we explore the capabilities of the technology. This already happened with flash in the beginning, people doing experiments, playing around, until one day an art director was impressed and wanted something like that for the next Nike campaign.
The main reason to use the `call` method is for comptability, unsurprisingly IE doesn't add the `hasOwnProperty` method to some objects. I know IE6 doesn't add it to the global `window` or DOM objects, I'm sure there's other instances.
Hes a regular on the stackoverflow JS chat, pretty sure his name is Dave. Such an awesome little demo.
The reason you would do this is because some asshole could write this code: var foo = {bar: 'buzz'}; foo.hasOwnProperty = function() {alert('I BREAK THINGS');} This is perfectly valid, but if you now try to use foo.hasOwnProperty('bar'); Shit be broken.
Yup. Calling `hasOwnProperty` like this works around this flaw in the language. It's less of a problem in "real" code and more of a problem when dealing with JSON/JSONP. 
Button pushers.
I'm extremely interested in using some snippets of the code in a project I'm working on. I'll try to contact him in there, thanks!
One other potential reason not mentioned below is of the way the . operator works. object.something really does a string lookup on object for a child named 'something' (if that fails, it will do the lookup against object.prototype afaik), so having the child variable cached outside the function saves you a couple of string compares deep down. My guess is that most JavaScript interpreters help with this under the covers though, not something to really worry about.
For me, Chrome draws this a lot uglier than other browsers, much more aliased. I wonder why? The code only seems to use basic path drawing, and I'd guess those are pretty well defined in the canvas specs.
Awesome tip! Thank you! I was able to make some changes to speed things up a bit although it is still lagging the indexed DBs at this point. Not sure if I really want to add indexes to it or not. 
We have been using Cucumber as a Ruby BDD framework with Celerity as a Ruby wrapper for HTTP Unit, which is the headless browser. Ideally the tester could specify his tests in "natural language" (given ... When ... Then) with matching Ruby snippets to execute these tests. Problem was that we were writing a JavaScript Frontend (jQuery) and backend (Node.js) application, and at the same time had to write the test steps in Ruby. I found it difficult to work in two languages. If I would have to do it again I ould look for a JavaScript testing framework.
But couldn't some asshole just do: Object.prototype.hasOwnProperty = function () { ... } and you'd still be broken in the same way? What problem does this actually fix?
For sure, but if you have an asshole on your team big enough to be modifying the prototype of Object, you can't be helped. This is safer, but not (gigantic)foolproof.
I guess I'm confused about the difference between modifying foo.hasOwnProperty but not Object.prototype.hasOwnProperty. Is this something that happens often that we should be protecting against?
Speed, that will be why. I've seen Chrome 13 (current) draw fonts which are much more aliased then in Chrome 15 (dev), so it could be the same issue, and so will be fixed.
Well, you would hope that it does not happen, and generally you would not need to write your code like this; however, if you are writing a lib, it is generally a good idea to protect people from themselves as much as possible. You could break your code by having: var foo = {hasOwnProperty: 'bar'}; This is unlikely, but it is a little "gotcha" that most people will never know about. underscore has been nice enough to fix this for you. It is unnecessary 99.9% if the time, but the other 0.1% of the time, they probably saved someone a whole lot of time and frustration.
this is the benefit of func unit I felt, you address elements via selectors, you code it in javascript, you can execute the tests command line (via rhino) or through selenium.
Probably. I changed channels to beta, and now it looks just as neat as the rest.
Calling the ability to override pretty much any object property a "flaw in the language" is like calling "pointer exceptions" a flaw in the C language.
Those sound like arguments against LISP too. Maybe they are. 
The extreme majority of users do not know how to make the browser go full screen. That's why Adobe made it part of Flash.
Depends on which LISP you're talking about. Besides, in the 1950s, choices were limited. I certainly wouldn't use LISP-2, if that's what you mean.
I almost grew up with Bit101, glad to see he's doing Canvas work now. :D
What you call a flaw, I call a feature.
Maybe you misunderstood me, or I miswrote. The fact that `hasOwnProperty` is on `Object.prototype` and not e.g. `Object` is a flaw. Many other methods similar to `hasOwnProperty` (such as `Object.keys`) don't have this problem.
This I have learned: No matter how ridiculous the behavior of a part of the JavaScript language is there are people in the JavaScript community that will cling to it until the end. I'm sure this happens in other languages but JavaScript seems to just have it worse. Crockford started or propelled a movement that made people believe that there were parts of JavaScript language that were good among the many warts. Sometimes I wonder if it will backfire though as people call him over-opinionated about wart X or wart Y and then go on to cling to whatever that is. Eventually people are going to be claiming the entire language is some development panacea.
This is from 2009... Not exactly a new thing :P
Very cool. It's sorta clunky that you can't scroll up or down on the page if you are touching in the carousel area though. Is there some way you can allow the page to scroll vertically if you touch in the horizontal carousel area?
Not a flaw in the language, but a flaw in the standard library.
Does that mean it's not new to you? Would you like a medal? 
I just purchased this series from them for $12 and I'm just going to say that I thought the quality was very good in terms of how the material was presented. Now more about the backbone.js All I can say is that the guy who did this tutorial must have an extremely good understanding if how this whole framework works. Coming from an MVC / Heavy jQuery user w/ HomeBrewed jQuery plugins, this framework is extremely complex. I think that this video needs a little bit more explanation to be even remotely considered basic. Money well spent, but I wish it went more into depth. I guess if you were to actually learn about this material in a real world setting on your own or in a course, it would be 10x the $12 amount atleast or more. If you have used this framework, maybe you could share what you are currently using it on and how long it took for you to digest it etc.
In the case of JavaScript, it's part of the language. This isn't C++.
Agreed. But I think the guy behind the video often mentions that he had spent some time cheking the commented source code for backbone. That's the first thing I did to understand better how things work in BB.
Yeah, I guess you could say that, it's just I wonder how much of his time was he paid to do that, or was he just learning for the fun of it. Anyways, I have a few projects of my own which I wrote primarily with jQuery and it is very app like, however I think it could benefit from a framework like this one. I purchased also the Intermedate video as well. But I think it's going to take me quite some time to digest this first video. Some of my major problems with all these frameworks is they are so incredibly dynamic that when I use Netbeans (My favorite IDE) as the object tree gets deeper it becomes more and more useless. Often times I will use the IDE just to help me move through an object structure if it is supported like it would be in say Java. I think we need possibly a new and Improved js IDE for JS exclusive applications.
Right, I don't use an IDE so I can't say ... but I think you could use Eclipse for JS developers, Aptana, JetBrains WebStorm or Komodo edit, I think they have good completion support, but maybe others can help ... I also find backbone's documentation very helpful when trying to use a new feature
Here's something I wrote as an experiment. It only works for jQuery-powered pages, though. - [github repo](https://github.com/mennovanslooten/UITest/) - [Example/Demo](http://experiments.mennovanslooten.nl/2010/uitest/index.html) - [Example test definitions](https://github.com/mennovanslooten/UITest/blob/master/uitest_tests.js) A test basically consists of 3 types of statements: - Simulating user actions: $('#button-show').click() - Asserting properties of the page: UITest.assertIsVisible('#result'); - Log statements: UITest.log('Show result'); It's not very robust or mature but it has proven very useful for me and the company I work for. Tests can be written in pure JS and can be run by simply reloading a webpage. I'm working on a successor that has a much nicer syntax to write tests so I'm not actively doing anything with it anymore.
You don't have to use patterns. Just create a canvas objects for each sprite or image. When you want to draw the source image to the viewport canvas do this: //Draw the source canvas directly to the viewport canvas var viewportContext = viewportCanvas.getContext('2d'); viewportContext.drawImage(sourceCanvas, xPosition, yPosition); I've noticed a lot of people seam to not be aware of this but drawImage() doesn't just take image objects, it also takes other canvas objects. You'll also find that this is most efficient way to deal with drawing sprites. You don't have to make patterns unless you want to tile your image. This is how I do it in [Red Locomotive](http://robertwhurst.github.com/Red-Locomotive).
I like it, Its quite nice. Have you thought about releasing your code on github?
Tiling and filling non-rectangular polygons is precicely the reason I want to use patterns. But here's a question regarding your method (since I plan on having sprites as well): Is there an advantage to be had if I draw all my sprites to their own canvases and then draw those canvases on the screen? Currently I just store image objects and draw them directly.
Cool man good job :)
Just a note to anyone using a windows machine. Run the test in IE as well, although no one in there sane mind would use it, it is still quite common and it is quite nice to see the performance across all the major browsers.
Base 64 would have been much more compact...
&gt; var FACT = 2.32830643653869628906e-10; For some reason I doubt about how exact the value of this number is...
1. Get a list with `ul.getElementsByTagName('li')` 2. Loop through this list and remove anything that has a parentNode that is not `ul`.
No, it means it's not new content (like almost all other posts in here). Chances are the technology has evolved quite a bit since 2009. I just tried this now and couldn't get it working at all (Windows 7, Internet Explorer 9). It was rendering the web pages but wasn't showing any other information.
Thanks. I think the demo page is a special case, being composed almost entirely of carousels! I can't see this being much of a problem when there's only one or two. I think to do what you're asking I'd have to intercept x or y mousemoves or touchmoves depending on the orientation of the carousel and use those events to scroll the page -- which is probably overkill. But I appreciate the comment.
There's also Drip http://outofhanwell.com/ieleak/index.php?title=Main_Page which I found back in 2008. If I remember right, it only works in IE, though I might be totally remembering that wrong. It was used on an Enterprise app, which was IE-only (of course). Don't know what Drip is up to nowadays, just passing along the info.
Did you read the part where this is only useful for IE6 and IE7? The memory leak issue this detects is mitigated in IE8. So running it on IE9 seems beyond the scope of the OP. 
Works well
Good point. What I wanted to say yesterday which was going to come out retarded because I'm a Javascript fan-boy sometimes, is that Javascript might be an excellent implementation language for some AI projects for the same reason that LISP is. It is relatively easy to express absurdly complicated logic in Javascript. Functional languages and logic languages typically have this advantage. It's true that Javascript is not very memory efficient and not terribly fast if measured in FLOPS, but for an app that has to be delivered to a client for each session, you can't have gigabytes of corpus and model anyway. 
Yeah this calendar is awesome, I chose to use it in the software I work on at work for scheduling radio shows. http://www.sourcefabric.org/en/airtime/
 $.each($('.bar), function (i) { $(this).delay(i * 250).animate(...); }); Well, feel free to create a testcase on jsfiddle or wherever. **Edit:** http://jsfiddle.net/NwpWj/
Very nice, although "something" could use higher dynamic range. I didn't look at the code, so I don't know if it's from some SSS colour lookup table being a little on the small side or if it's some low-bpp buffer, but it's got this 8bit look to it :) 
Thank you! That is exactly what I was looking for! So if you don't mind explaining, where did I go wrong because I tried: $('.bar').each( function (i, obj) { $(this).delay(250).animate(...); }); I have a feeling that, for one, I screwed up the order and that having $('.bar') upfront just automatically did it to all elements?
Unless argument `cb` of `decoratedCallback` is going to change after the function runs (which it could because you're expecting an Object there), you only need to capture the loop variable `x` into the inner function. Same thing with the argument `toCall` -- you can just refer to it from the inner function. I think loop variables are the only time where you would need this pattern of immediately calling an anonymous function, and if you just take care to use the same argument names as loop variable names it's pretty painless.
You're setting the same delay for all the divs.
Hmm... Here's my attempt. function decorateCallback( cb, toCall ) { return Object.keys(cb).reduce(function(obj, x) { obj[x] = function( o ) { console.log( "Decorated: " + x); cb[x]( o ); toCall( o ); console.log( "Done: " + x); }; return obj; }, {}); }
That's a really useful site. Thanks for the valuable addition to my toolbox.
Another thing, I think the reason this looks unnecessarily complex is because the function `decoratedCallback` is doing its thing on an object of functions. That sounds like a pretty specific use case to me. The essence of decorating a function would be something like - function decorate(func1, func2) { return function() { func1(); func2(); }; } Then you could make another function that decorates functions in an object: function decorateCallbacks(obj, toCall) { var result = {}; for (var name in obj) { result[name] = decorate(obj[name], toCall); } return result; } Now you have two easy-to-read functions that don't have to do crazy JS tricks to make it work. A function should do one thing, and do it well.
If you want to try your hand at it... I was having a rough time getting this to work without the closure: var o = { a: function() { alert( 'hello' ); }, b: function() { alert( 'goodbye'); } }; var o2 = decorate( o, function() { alert('world'); } ); o2['a'](); o2['b'](); --Robert
I've pretty sure one of the main reasons to not use "with" instead of just assigning a variable, is assigning the variable produces a lot better performance. I'd rather use a few extra bytes on load time and save run/calculation speed.
Mouse capture please (with a prompt like geolocation)
http://jsfiddle.net/8M9G5/ I didn't know about radhruin's `Object.keys(...)`, which I like better, because `reduce` gives you the closure for free.
The free closure aspect of the ES5 array methods has an unexpectedly large impact on productivity. Plus you get readability wins as well, so I find myself using them *all the time*.
`$('.x').each(function (i) {...});` also works: http://jsfiddle.net/NwpWj/1/ `delay(i * 250)` is the important detail. First one gets a delay of 0, second gets one of 250, thrid gets one of 500, and so forth.
Wow. I admit utter and complete defeat on this one. I have no idea how long it would taken to figure this one out. My train of thought wasn't even in the right place. So if I understand this correctly, jquery will loop through the elements near instantly and assign each one a delay (which is then staggered by increasing it for each subsequent div). Can't thank you all enough for responding, this is huge for me.
I do a lot of Python, and I've always tended to avoid reduce, because it gets a little weird when you try to do too much with it. Then again, in Python reduce is a function taking a function, the list and the initial value, not a method of an array. Being able to chain map, filter and reduce is _much_ better than having to nest them. I think I just won't ask about backwards/IE compatibility... 3:-&gt;
Yes, it's asynchronous. When the code above is executed it doesn't actually do the delay or the animation. Instead it just setups scheduled event triggers and corresponding event listeners which will make that eventually happen.
Which is unfortunate considering I work on the Chakra engine and I'd love to tell you about it. :) Edit: Ok, can't resist. Supported in IE9 and up, but ES5-shim is a drop-in replacement that will work in older versions of IE and other browsers that don't have ES5 yet.
COOL!
Ha, this is my chance to tell a Microsoftie that I honestly like it that I don't have to worry as much about IE9 and that your colleagues should be *much* more brutal in eradicating IE8, IE7 and IE-with-the-version-number-that-will-not-be-named.
Congratulations on the creepiest link I've ever clicked on.
I was terrified it was going to open its eyes 
I kept clicking in the weird hope he'd blink.
&gt; Javascript might be an excellent implementation language for some AI projects for the same reason that LISP is Nope. That has to do with macros and live access to the parse tree, which Javascript does not and cannot have. (I'm sure someone who doesn't understand what they are will claim it's doable with prototypal mutation, and I shall guffaw.) &gt; It is relatively easy to express absurdly complicated logic in Javascript. I think you probably haven't gotten to the absurdly complicated point yet. If you had, you'd know that the sweet spot for that sort of thing is actually declarative languages, such as SQL and CSS, or constraint languages like FormulaONE and Mozart/OZ. &gt; Functional languages and logic languages typically have this advantage. Despite what proggit thinks, Javascript is neither functional nor logical. Functional languages are languages without side effects, like ML and Haskell; having lambdas does not a functional language make. Logical languages are rare, and the term is nearly universally abused. They're languages like Oz, Mercury, Prolog (but *not* Erlang) and Godel. If someone tells you that JavaScript (or SQL is another bullshit such claim I often hear) is logical, just laugh sadly at them. Indeed, it's actually a stupendous pain in the ass to express even relatively simple things in logical programming languages. Whereas toy things from the Prolog P-99 list, like the sparse crossword generator, make Prolog seem like a breeze, once you actually try to use it for something, you're going to learn something about how you seem when you say things like that to people who actually know the languages you're talking about, and also, why it is that the people you've been "learning" from don't actually call you on critical errors like that. Similarly, functional languages do not have any inherent benefit for expression; it's just that the imperative languages people speak are from the 70s, and the functional languages people speak are from 2006, and people don't understand that this doesn't actually lead to a valid comparison of fields. For example, C++ templates are a turing complete fully fledged functional programming language, and yet if you try to express complex logic in them as you so opine must be easy, you're going to collapse in a gibbering heap of madness, for It Doth Take Brass Ones To Seriously Fuck With C++ And Survive (tm). I actually want to come back to this a bit, because I need you to see how completely off on Mars you are about this. &gt; It is relatively easy to express absurdly complicated logic in Javascript. No. Dude, it really isn't. You get much cleaner C++ for anything even slightly complicated, and C++ is not even a little bit known for being straightforward. Look, I'll underscore it for you. Here's erlang permute-over-list from my utility library: permute( [] ) -&gt; [ [] ]; permute(List) -&gt; [ [This]++Rem || This &lt;- List, Rem &lt;- permute(List--[This]) ]. The same thing in Javascript will be 15-20 lines without retard juggling. &gt; but for an app that has to be delivered to a client for each session, you can't have gigabytes of corpus and model anyway What? Where, in your imagination, does being able to do bulk work in parallel rely on delivering gigabytes? What the hell would you be doing corpus work in a browser for, anyway? This is a bunch of phrases you heard, strung together. 
Note, it has to be asynchronous, otherwise no code would be able to run until all the animations finish.
 function detectMemoryLeaks() { return window.navigator.userAgent.match('MSIE'); }
+1 for `Object.keys`. I personally think mutating objects with `Array#forEach` is clearer (though I do use `reduce` when pushing to arrays).
Jesus, I was trapped in my [uncanny valley](http://en.wikipedia.org/wiki/Uncanny_valley) and I couldn't escape. But amazing, nonetheless.
I'd also use a map function that maps all of an object's values: var newObj = objectMap(obj, function(origVal) { return decorate(origVal, toCall); });
I always thought, "Eyelashes are so weird! It's freaking hair on our eye lid?!?!" I guess this reinforces why we should have eyelashes (beyond any functional use)...this dude looks creepy without them.
Here's my modified version of your code to create dynamic sliders: [http://jsfiddle.net/NwpWj/2/](http://jsfiddle.net/NwpWj/2/)
damn this is an awesome framework...
There are two advantages that I've found. In previous versions of my engine I did something similar to how your doing it right now. I'd offer an api for users to upload one or more sprite sheets containing various sprites. Based on the current sprite each element I would pull from a certain part of the sprite sheet's image object. As you know this works but its not very flexible, and it leaves a fair but of complexity to be done during the draw cycle. What I currently do is download the sprite sheet with an image object, then copy each sprite to its own canvas. Now that the sprites are all in there own space, a lot less math has to be done per cycle, you can apply effects of fillers to those individual sprites, and the sprites are available individually at any time with no heavy lifting required. [Go checkout my repositiory](http://github.com/RobertWHurst/Red-Locomotive). Look it the file '/red-locomotive/core.js', in it you'll find a function called draw. This function is what draws my sprites every draw cycle. If you want to see how I generate my sprite sheets have a look at '/red-locomotive/sprites.js' and '/red-locomotive/canvas.js'. My repositiory is BSD licensed so feel free to pull it apart and re-purpose it.
Really cool. Was hard to break away from it until I realized the ears were still lit and I remembered that wasn't going to talk to me, or something.
What? The ears were on fire, and that's why you could stop watching? Also, the ears on fire wouldn't talk to you... I'm having trouble parsing your sentence...
that's just awesome. anyone else thinking of Holly from Red Dwarf :) ?
only slower by a tiny amount. Unless you're contributing to something like jQuery (or underscore), I wouldn't sweat over it.