It already exists in C#... are you trolling?
ER MA GERD! OzCode looks amazing! Thank you!
Rider
Check out the Microsoft Action Pack if you don't have that.
Don't know your specifics but I've seen operations like this due to the comment in the FileSystemWatcher details. &gt;Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several OnChanged and some OnCreated and OnDeleted events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by FileSystemWatcher. You may have an AV that opens/checks/closes the file when you access it.
100% agree
Consider this Java enum: public enum Planet { MERCURY (3.303e+23, 2.4397e6), VENUS (4.869e+24, 6.0518e6), EARTH (5.976e+24, 6.37814e6), MARS (6.421e+23, 3.3972e6), JUPITER (1.9e+27, 7.1492e7), SATURN (5.688e+26, 6.0268e7), URANUS (8.686e+25, 2.5559e7), NEPTUNE (1.024e+26, 2.4746e7); private final double mass; // in kilograms private final double radius; // in meters Planet(double mass, double radius) { this.mass = mass; this.radius = radius; } public static final double G = 6.67300E-11; public double surfaceGravity() { return G * mass / (radius * radius); } public double surfaceWeight(double otherMass) { return otherMass * surfaceGravity(); } public double mass() { return mass; } public double radius() { return radius; } } A comparable C# object would be something like this: public sealed class Planet : IComparable&lt;Planet&gt;, IEquatable&lt;Planet&gt; { public const double G = 6.67300e-11; private static readonly Planet _mercury = new Planet(0, "Mercury", 3.303e23, 2.4397e6); private static readonly Planet _venus = new Planet(1, "Venus", 4.869e24, 6.0518e6); private static readonly Planet _earth = new Planet(2, "Earth", 5.976e24, 6.37814e6); private static readonly Planet _mars = new Planet(3, "Mars", 6.421e23, 3.3972e6); private static readonly Planet _jupiter = new Planet(4, "Jupiter", 1.9e27, 7.1492e7); private static readonly Planet _saturn = new Planet(5, "Saturn", 5.688e26, 6.0268e7); private static readonly Planet _uranus = new Planet(6, "Uranus", 8.686e25, 2.5559e7); private static readonly Planet _neptune = new Planet(7, "Neptune", 1.024e26, 2.4746e7); // required for thread safety private static Planet() {} private Planet(int ordinal, string name, double mass, double radius) { Ordinal = ordinal; Name = name; Mass = mass; Radius = radius; } public static Planet Mercury =&gt; _mercury; public static Planet Venus =&gt; _venus; public static Planet Earth =&gt; _earth; public static Planet Mars =&gt; _mars; public static Planet Jupiter =&gt; _jupiter; public static Planet Saturn =&gt; _saturn; public static Planet Uranus =&gt; _uranus; public static Planet Neptune =&gt; _neptune; public int Ordinal { get; } public string Name { get; } public double Mass { get; } public double Radius { get; } public double SurfaceGravity =&gt; G * Mass / (Radius * Radius); public double SurfaceWeight(double otherMass) =&gt; otherMass * SurfaceGravity; public static IEnumerable&lt;Planet&gt; Values() { ... } // exercises to the reader public static Planet Parse(string value) { ... } public static bool TryParse(string value) { ... } public override string ToString() =&gt; Name; public bool Equals(Planet other) =&gt; Ordinal == other?.Ordinal; public override bool Equals(object other) =&gt; object.ReferenceEquals(this, other); public static bool operator==(Planet a, Planet b) =&gt; a?.Equals(b) ?? b == null; public override int GetHashCode() =&gt; Ordinal; public static implicit operator int(Planet p) =&gt; p.Ordinal; public static explicit operator Planet(int p) { ... } public int CompareTo(Planet other) =&gt; Ordinal.CompareTo(other.Ordinal); } Look at how much boilerplate there is here.
200% agree
I never left you, xml. You're my one and only.
I just moved from two 24” monitors to a single 34” ultra-wide, and I freakin love it! Highly recommend. 
Glad I could help :)
I'm partial to three screens
LinqPad! 100x LinqPad. And resharper if you dont have it already.
On the other hand, MS is such a big company you could spam your resume to all of the departments and hope a couple of them stick :P Ok maybe you shouldn't do that, but I work for a similarly large tech company and when they brought me in for an interview my boss had no idea I'd interned with a different team in the company the year before... so just because you aren't a good fit for one team it doesn't mean you won't find luck in another.
300% agree
* Resharper * If you do anything with SQL Databases I consider Red Gates tools indispensable * CODE Keyboard * Logitech MX Ergo * A 40"+ 4k TV (certain specs are better for this) to use as a monitor. * A new chair * Pre-pay any hosting? Add Digital Ocean credits? Azure credits?
I was a MAPS subscriber for years; till I got into MSDN. MAPS is awesome.
I'm not going to disagree with you. I think though your strategy works better with interns than it does with those for more years under their belt. or maybe not..
I spent $200 on a proper mech keyboard. You type 8 hours a day so it's worth it.
Do they have the same versions of the .net framework installed?
Could it be a 32-bit vs 64-bit issue?
Araxis Merge SQL Examiner Suite (database comparison tool)
All three Excels run on 32 bit, so they don't differ in that regard. And my Addin's Platform Target is set to "Any CPU"
Just looked it up in the registry and both machines have V4.7 installed
Set the Platform Target to 32-bit and try again.
P.S. Good luck. I remember doing Office integration work back around 2010 so I know how frustrating it can be.
I never said anything that contradicts this.
Still the same behavior sadly
Thanks for your condolences, this Microsoft Voodoo is really getting on my nerves...
So, I have no experience with writing C# addons for Excel, and some of this may either be too obvious or entirely impossible, but you seem like you are still working on this, so in case this helps: Can you add any logging, and if so, can you log your addon being activated? If you can't add logging in the usual sense, what about something silly like having the constructors of the classes doing something like writing a value in a cell to indicate that it has fired? For example, the first constructor sets ZZ1 to "Lana" to show it was called, the next constructor sets ZZ2 to "LANA" to show it was called, and the method sets ZZ3 to "LAAAANAAAAAA!!!" to show the method was called? Also, I mostly wanted to comment that I love it when someone else gets a "works on my machine" thing, because it makes me feel less terrible when it happens to me on some branch I've tested 3 times before submitting a pull request.
What about older versions?
4.0 and 4.6 are also present 
Then ZZ4 is "Danger Zone" I guess? Let me try this out and I'll be right back
Next guess. Wrap the code in a try-catch block that displays a message box. Maybe there is an error that's being swallowed.
This is getting stranger by the minute. I added a debug output, that writes into a cell after each step of the code. As it turns out, none of the debug messages appeared. But the Program doesn't crash, since it still executes the code to open a log after the value conversion... Really lost right now
Just tried that and the code didn't throw anything
If you create an environment variable called VSTO_SUPPRESSDISPLAYALERTS and set it to 0 then reopen Excel you should get an error popup for any unhandled errors. Might help point you in the right direction
Thanks for your reply but no errors were shown 
As mentioned previously, Resharper is a bloody good idea. Other than that, subscription to pluralsight for the next 12 or 24 months would be a really good investment.
If you're just trying to replace the formula with a value, you can just try setting a cell's Value to its Value : Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].Value = Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].Value; If you still have problems, try setting the DisplayFormulas and NumberFormat properties: // I'm not positive that this is the right path to the DisplayFormulas property in VSTO Globals.ThisAddIn.Application.ActiveWindow.DisplayFormulas = false; Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].NumberFormat = "General"; 
The thing is that the addin should work with IBM Cognos Controller. When this controller writes a report it generates controller specific formulas that only resolve by communicating with the controller. I want to bypass this by actively not grabbing the cell value (with the controller formula) but the actual text that gets displayed in the cell by Excel. This is why I'm trying to use Range.Text instead of .Value. The whole point of this Addin is that I want to convert these controller formulas to plain strings, so these reports can be shared and opened with Excels that have no access to said controller. 
This would me my choice. So much content. I use it at home and work. 
`return sheeps.Count(s=&gt;{s.age&gt;5});` That would be wrong, since this wont compile. By supplying a function Body {} you force yourself to manually return a bool eg.: x=&gt; { return x.age&gt;5; } Differently: x=&gt; x.age&gt;5
Sounds like a security issue. Excel, Word, powerpoint... I would go into Trust Center (Open any file, click File, Options, Trust Center, Trust Center Settings, Then click MACRO SETTINGS) Choose the Bottom options (Enable all Macros) Click OK Now look under the Add-Ins section and at the bottom click Excel Addins and click GO make sure your addIn is not disabled. Group Policy, windows security, macro security.. it can be a bitch.. 
&gt; grabbing the cell value (with the controller formula) but the actual text that gets displayed in the cell by Excel. I understood that part. Getting the cell's `.Value` captures the calculated value, not the formula. The reason I suggested it is because there is something funky going on when you are grabbing the `.Text`.
excel doesnt show any adding exception. it just silently aborts it. you have to enable them somewhere if i remember correctly. also a wide try catch with Exception can help you find any thrown exceptions if you write it to a file
I would bet on this. Happens to me all the time at work. 
What's your [NotifyFilter](https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.notifyfilter(v=vs.110).aspx) set to?
I wrote a pretty comprehensive add-in for powerpoint. I basically had to have my installer disable ALL security... Then I re-wrote it later after I figured out better ways to do stuff.
"So let's go for MVC [...] I won't be having a niche skill" and "let's go for UWP [...] But, there are not as many jobs" are mutually exclusive. You can't expect a skill to be a niche skill and a lot of jobs available looking for that skill. Otherwise more people would do it and it wouldn't be a niche skill anymore. In my opinion the windows desktop is mostly dead (look at the microsoft store). So you should probably focus on cloud hoasted web applications.
I had problems when people moved the cursor and selected a different cell or range while something is running. Is running in the main thread and blocking excel or is on a different thread? Also, is the same excel file with the same formatting, and UI culture?
If this is all the plugin does then you might as well not use it because that’s already a built in function into Excel, I think it’s Shift-F11 or something
It may have nothing to do with your problem... But are you using the Excel Interop? It has all kinds of weird behavior and results if you don't use (and release) COM objects properly.
I use these NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.Size | NotifyFilters.FileName | NotifyFilters.DirectoryName | NotifyFilters.CreationTime
I'm more a fan of Productivity Power Tools made by Microsoft. It's free and doesn't overload the solution like Resharper. I work with 300k LOC projects and if it's slow without it I can't even imagine how it would be... But I'm gonna investigate this one, didn't know coderush...
Try having the debug code write to a seperate file (txt file). 
Not trolling. Can you link me a source that says the elvis operator exists in C#? I think I found dated material that said it wasn't in and can't find anything definitively that says the `?:` is in C#.
Just off the top of my head, I wouldn’t store settings in the registry. Depending on what type of setting you’ll have, a better solution would be saving them to a database or into the appSettings section of your web.config file.
I think you're on the right path. The SettingsRegistryController object knows about the details of reading/writing to the registry so it would contain whatever registry paths/keys/values are needed to save and load a Settings object. To write to the disk (I'm assuming this means file) you would implement a SettingsFileController class that knows the details of how to read/write a Settings object to a file. Finally, to test the logic that calls Save and Load you could implement a mock/fake/test class that implements ISettingsService but only instantiates a Settings object and doesn't actually modify your system. This way, you can test your code with different settings and/or without having it actually modify the registry or your settings file. 
Thanks! yeah, this has been a long road. I am teaching myself good coding practices.. I dont learn from books, I observed someone elses code and make a mock up. So far so good!
I think none of these arguments are very convincing. [Inserts into dynamic arrays are O(1) amortized](https://www.interviewcake.com/concept/java/dynamic-array-amortized-analysis). Functional languages like F# like *singly* linked, immutable lists not because they have superior performance characteristics, but because they lend themselves to [inductive reasoning](http://www.cs.princeton.edu/~dpw/courses/cos326-12/notes/reasoning.php#list-template). In terms of performance they are way, way worse than dynamic arrays. So much worse in fact, that in F#, you can often make operations [faster by converting to an array, doing your stuff, and then return a List afterwards](https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/list.fs#L505). By the way, I'm not saying that they should *remove* ``LinkedList&lt;T&gt;``, I'm saying that it shouldn't be used almost anywhere, and that nearly everybody who *thinks* that he has found a use case ist most likely wrong if he isn't implementing a lock-free queue. I've seen more legitimate uses of ``goto`` than uses of ``LinkedList&lt;T&gt;`` in C#. That said, the fact that the bcl has ``LinkedList&lt;T&gt;``, but no class that implements a priority queue ADT is a joke, though. 
I noticed weird errors in parsing values in excel with C#. I found that if you're converting values on a spreadsheet that's opened by a user, it converts it differently than if the spreadsheet is closed.
Are the settings contained in the file on the disk the same settings contained in the registry? If so, you should consider simply writing the settings to the file unless there is some business rule that requires using the registry. If at all possible, use a file and avoid the registry. The following code assumes that 1) the same settings are stored in the registry and in a file on a disk and 2) that your application will be reading from the registry OR a file on startup (but not both) and that you have some way to tell your application which settings *repository* you want to read from. Let me know if these assumptions are incorrect. Also, some of the code that follows you may not necessarily need but you should be able to salvage what you need from it. First, we need an interface on the settings file: public interface ISettings { string Foo { get; set; } string Bar { get; set; } void Save(); //saves the data to the data source void Reset(); //resets the data to its previous state void Reload(); //reloads the data from the data source } Anything that needs settings will interact with the `ISettings` interface -- they'll never interact with the concrete implementation directly. Next, we need an interface that is used by the classes actually reading and writing the settings to files, registries, databases, whatever: public interface ISettingsDataSource { void Save(ISettings settings); void Load(ISettings settings); } Now, we need a class that implements `ISettings`. However, I want to use the [Memento Pattern](http://www.dofactory.com/net/memento-design-pattern) so we can restore the settings if/when the user calls `Reset()`. We should also have a little thread-safety, though there might be a better way to achieve what I have done (locks are expensive): public class Settings : ISettings { private object syncLock = new object(); public virtual string Foo { get; set; } public virtual string Bar { get; set; } private ISettingsDataSource DataSource { get; set; } private ISettings Memento { get; set; } public Settings(ISettingsDataSource dataSource) { this.DataSource = dataSource; this.Memento = new Memento(); Reload(); //loads the data initially } public void Save() { lock (syncLock) { this.DataSource.Save(this); this.Memento.Foo = this.Foo; this.Memento.Bar = this.Bar; } } public void Reset() { lock (syncLock) { this.Foo = this.Memento.Foo; this.Bar = this.Memento.Bar; } } public void Reload() { lock (syncLock) { this.DataSource.Load(this); this.Memento.Foo = this.Foo; this.Memento.Bar = this.Bar; } } private class Memento : ISettings { public string Foo { get; set; } public string Bar { get; set; } } } Now we need to implement `ISettingsDataSource` on two classes -- one that reads settings from a file and one that reads settings from the registry: public class SettingsFileDataSource : ISettingsDataSource { private string FilePath { get; set; } public SettingsFileDataSource(string filePath) { this.FilePath = filePath; } public void Save(ISettings settings) { //save the settings to the settings file using the FilePath property } public void Load(ISettings settings) { //load the settings from the settings file using the FilePath property //settings.Foo = &lt;READ_VALUE_FROM_FILE_HERE&gt;; //settings.Bar = &lt;READ_VALUE_FROM_FILE_HERE&gt;; } } .. and then the registry class: public class SettingsRegistryDataSource : ISettingsDataSource { public SettingsRegistryDataSource() { } public void Save(ISettings settings) { //save the settings to the registry using hard-coded paths to the registry values } public void Load(ISettings settings) { //load the settings from the registry using hard-coded paths to the registry values //settings.Foo = &lt;READ_REGISTRY_VALUE_HERE&gt;; //settings.Bar = &lt;READ_REGISTRY_VALUE_HERE&gt;; } } Now, somewhere in your application's startup code, you need to have something like the following: string settingsPath = @"C:\path\to\settings.txt"; bool readSettingsFromRegistry = false; //you need to have some code to determine which settings data source you will be using ISettingsDataSource source = (readSettingsFromRegistry) ? new SettingsRegistryDataSource() : new SettingsFileDataSource(settingsPath); ISettings settings = new Settings(source); If you are familiar with Unity, you can use a `UnityContainer` to resolve your data source for the settings file and register the settings instance: string settingsPath = @"C:\path\to\settings.txt"; bool readSettingsFromRegistry = false; //you need to have some code to determine which settings data source you will be using var container = new UnityContainer(); if (readSettingsFromRegistry) { container.RegisterInstance&lt;ISettingsDataSource&gt;(new SettingsRegistryDataSource()); } else { container.RegisterInstance&lt;ISettingsDataSource&gt;(new SettingsFileDataSource(settingsPath)); } ISettings settings = container.Resolve&lt;ISettings&gt;(); container.RegisterInstance&lt;ISettings&gt;(settings); Now, anything that needs settings can simply do `container.Resolve&lt;ISettings&gt;()` and they will receive the `ISettings` instance. Suppose later on you don't want to read and writes settings to a text file but you want to read and write to an XML file. You'd then presumably implement `ISettingsDataSource` on a new class called `SettingsXmlFileDataSource`, which knows how to read and write to that XML file. Then, the only thing you need to do is remove the line instantiating the `SettingsFileDataSource` class with a line instantiating your `SettingsXmlFileDataSource`. The rest of your program will work as intended since they only ever depended on interfaces. Does any of this help? 
Have a look at [Microsoft's CHESS](https://chesstool.codeplex.com/). It was a research project and doesn't seem to be active anymore, but they did produce a usable .NET compatible prototype.
You obviate this part &gt;"Remember, even though the amortized cost of an append is O(1), the worst case cost is still O(n). Some appends will take a long time." And the point about F# is that linked list are USED in a lot of places not to say they are better or worse for everything. But saying they mostly dont have a place is false since most functional programming languages use them. For a reason or another, but they are heavily used. And you are also forgetting the part where i said they are good "if you don't have to sort" by linking exactly to a sorting example. Please, reference me a link where inserting or removing in the middle of a resizing array is better than on a linked list, because i also talked about how i needed to filter those lists. (and i can filter the lists without allocating more memory or moving the whole array around too). Also, why would i want a lock-free queue to replace a linked list? A queue doesn't allow filtering or inserting anywhere I want. Queues are a different use case, as dictionaries, sets or whatever. Doesn't make sense. And in all those cases where I used LInkedLists in C# i started with lists and then turned them into linked lists because for what i was doing was better, and performance improved. I never had the need to build a tree, still they can be useful for their use cases, as anything. [https://en.wikipedia.org/wiki/Linked_list#Linked_lists_vs._dynamic_arrays](https://en.wikipedia.org/wiki/Linked_list#Linked_lists_vs._dynamic_arrays) Btw, the key in this is **use case**. And from my point of view, probably the people using LinkedLists know more about CS than the typical dude throwing IEnumerable at everything and hoping everything works fine.
If this was the problem how would I test this/ fix it realistically? 
If you aren’t running the code in a different thread, task, etc, you are ok. For example, if he code is directly inside the button event function. I mean, if when running the code Excel freezes the UI until it finishes is safe. Is when you have the option of launching an async task while the users keeps interacting with excel. If that’s the case, just run it synchronously to check. Although is strange that it doesn’t throw any exception. I really don’t have a solution though... I only do addins for internal use in the company and the solution was “don’t click any cell while it runs” because it wasn’t that important... 😅 I don’t know if I explained it well enough... probably not.
If you really don't like Discord.NET, you could also try DSharpPlus. Emzi0767 has made [an F# example](https://github.com/Emzi0767/DSharpPlus-FSharp-Bot) too, for people who prefer that language. but what do I know, I'm just the developer of this library..
Source: Current software engineer at Microsoft. It's important to distinguish what will make you successful once you're at Microsoft and what will get you in to the company. I will address the latter. You need to study and master algorithms and data structures. It will not be possible to pass the interviews without this. There is variability in the interviews based on the team your interview for but they almost all cover this in some way or another. I know a lot of people hate this, but it is what it is. You have two options: argue the efficacy of algorithm interviews, or do whatever it takes to get into the company you want to get in to. Choose wisely :) As far as learning resources, there are a ton out there. Take a look at HackerRank and LeetCode for questions.
http://enterprisecraftsmanship.com/2015/05/11/3-misused-of-operator-in-c-6/
The code snippet I showed you is in the button click event of a windows form, where the user can choose some settings and then click run, which should convert the values and then open a log-windows-form that shows what settings you chose. So if I understand you I should be fine? Also tried not clicking anything, didn't help. Nothing gets converted and the log opnes. No error or crashes.
Since I get the "A1" Range from the ActiveWorksheet it only converts the A1 value of the sheet used by the user
As far as I understand it I'm using no COM Objects: It's really only a basic read cell/write to cell function
You should be fine then in that regard.
Oh, try to do a .Text.ToString() it shouldn’t be keeping a reference to the string inside the cell, but who knows? This is VB in the back 🙃
Yes, I did read that on forums as well. Bought CTCI and DS &amp; Algos by Narsimha Karumanchi. However, my practice has been inconsistent and honestly speaking, I have only solved basic questions on geeksforgeeks and that is my current level, I understand that I need to be able to solve atleast medium level questions to be sure that I am clear with DS &amp; Algos. However, I am failing in practicing and prioritizing what is important and will provide better returns along the way. All the more, afaik, people are expected to know C# and C++ (for memory allocation &amp; low level stuff), even if I would attempt to solve the problems I have an affinity for C# for solving problems, and I cannot seem to divert to learning multiple languages this early when I am also trying to focus on MVC and EF. Then obviously there is Azure. Don't know, what to manage, how to manage, which is why I am trying to figure out whatever works along the way. Thank you for the reply. 
Hmm. That's the null condition operator that I am familiar with. Apparently some people refer to it as the elvis operator in C#, but it actually doesn't perform the same function of one as explained [here](https://en.m.wikipedia.org/wiki/Elvis_operator)
Non-Mobile link: https://en.wikipedia.org/wiki/Elvis_operator *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^132642
&gt; SettingsXmlFileDataSource, which knows how to read and write to that XML file. Then, the only thing you need to do is remove the lin Holy shit. I was not expecting this much help! I was on the right track until you made the settings them self an interface. I like this! I like this a lot. My settings are saved in the registry for now. its 4 simple settings. and having access for a onsite tech to make a on the spot modification (to the user registry hive) would be most simple then having to edit a file. on startup, if the keys do not exist they are re-created with default values. later on I may make this XML driven which is why I wanted to make the data service an interface. thank you so much. I am learning to model code property, little by little. We have no one on staff that truely knows code modeling patterns... small company, most developers are straight out of college) 
Surely, EF is next. However, another question, my current domain is related to audio and video and requires a lot of data retrieval and updates(which I accomplish using timer). The frequency is normal, i.e every few seconds and even the data is minimal (30-40 rows max). Will EF be usable, if all my queries take 0.4s to execute?
Okay, will focus on Azure as well, if that's what you mean. Checked out 70-487 today, is it something what I should be looking at from a learning perspective(Azure)?
I wouldn't consider the solution I provided to be a perfect example of software design but it should be an improvement over what you were attempting to do. It helps to separate the concerns of code and use interface segregation. When in doubt, fall back on S.O.L.I.D programming principles. Google it if you are unfamiliar with those.
Sure, thanks. In the initial days, kept reading and doing stuff for 14-15 hours with gym and 4-5 hours of sleep plus traveling, things turned sore in 2 months. Started showing symptoms of fatigue, insomnia, irritation etc. Changed my routine, right now sleep 6 hours, keeps me going without fatigue, atleast for now.
Learn Docker if you want to go the Microservices route? Didn't knew about microservices, reading about the same. 
For context, I believe that a lot of developers can work at top companies IF they spend the time preparing. It sounds like you really want this so I believe that if you work hard you will get there. Here's the difficulty: it requires sustained, consistent, deep thought about these problems to operate at a level that is high enough to solve a wide enough and deep enough range of questions to have a high % chance of getting in. I think this is what stops people. It takes a lot of grinding to get there. No matter how smart you are. I did all of my interviews in C# and I don't know C++, FWIW. They assume if you're smart enough to pass the interviews you can learn any tech you need on the job. At least generally speaking that is the philosophy. I also didn't know much about Azure when I started and I wasn't asked anything about it during interviews. Again, this is just my experience but I think is generally applicable. I would make sure you are strong in C#, and spend almost all of your time on interview prep, it's going to take a while. Worth noting is that you need to be consistent. Otherwise the learning doesn't click in your brain. There is a set of approaches to problem solving and you will start to see these patterns after you practice enough. Also FWIW, I have no affiliation(no way to prove this since I am doing this anonymously) but I REALLY like https://www.interviewcake.com/ It was much more palpable to me than CTCI. That book is so dry :) I have recommended this site to several friends who also liked it a lot. It can be easy to get overwhelmed, you are not alone. The only way to make it is to pick a few things and focus, otherwise you will both burn out and not be skilled enough at algos to pass interviews. IMO.
Ok I just tried .Value instead of .Text and you're right it works that way too on the "good" server. However the behavior still persists on the "bad" server. Also can you please tell me how to get the string in the formula box? Just asking for further functionalities down the line. Also I noticed the formatting gets lost when I do the value conversion. Do you know a fix for this?
Just did what you suggested and the strange behavior still persists. Still thanks for your tip
can I ask you what you changed exactly when you rewrote your addin? maybe I can apply some of your changes since this is my first more complex addin and coding in c# in general
I merely extraced the function from my code, which serves a bigger purpose in general, which needs this conversion
 I am going to study this bit by bit. Cant thank you enough. And yes its off your original code. I was trying to vend it into sonething more ebcompassing that can deal with different scenarios aside from age.
I think that's explicitly disallowed by JetBrains. Company can't reimburse the employee for buying their product (which would be a loophole for companies of course).
If you are using the Interop, your using COM, even to write to cells. I'm out and about but can detail more when I'm back home. This may (or may not) be a contributing issue.
Thanks a lot, really appreciate it! It's quite possible that I'm not following best practice here since I'm fairly new to this whole thing. 
I was using an old ACTIVEX object. I was embedding a web browser into a powerpoint slide. Instead I used the Web objects of .NET and created a seamless overlay where the slide is on the screen so it appears the web page being loaded is in the slide = when its not. are you creating a VTSO addin? you reeally want to look are more registry hacks as well to disable a lot of excel's security. I had a metric shit-ton of problems... I also generate (with my installer) these Keys during install. you can convert them to excel. HKCU\Software\Microsoft\PowerPoint\Addins\AddInNameAndWhatNot\ Description (String) "MyAddinName" FriendlyName (String) "MyAddInName" LoadBehavior (Dword) 3 Manifest (String) "Path\to\your\addin.vsto vstolocal" 
Do you want the prompt method to return different types? If you want, I can give you an example using *generics* so that you only ever have to call *one* method to get *any* type of input from the user like ints, strings, doubles, or even complex objects that you define like `Person`: public class Person { public int Age { get; set; } public string Name { get; set; } //etc }
CHESS was my first thought too. I used that project back in the day. It will find concurrency issues well, but it's incredibly, incredibly slow. Any sufficiently sized project that isn't a simple unit test will take many hours or sometimes days to complete. Add to that any network operation is assuredly going to time out makes it a bit less useful as well.
&gt;I have instantiated a CancellationTokenSource object Where?
You might want to post your actual code. The code above will not even compile.
Sounds cool, neat idea embeding a browser into a presentation. Yeah I implemented the setup in the same way! I don't know about disabling Excel's security though, since this might not be OK with the consumer...
Add interfaces over any shared/async resources. Mock them such that you can complete them as desired in test. Use message passing models as much as possible to limit contention issues. If you have 10,000 permutations your design is probably bad. 
Fair enough. Here it is in full: using System; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Net.Http; using System.Text; using System.Threading; using System.Threading.Tasks; using Windows.ApplicationModel.Background; using Windows.Devices.Enumeration; using Windows.Devices.SerialCommunication; using Windows.Storage.Streams; // The Background Application template is documented at http://go.microsoft.com/fwlink/?LinkID=533884&amp;clcid=0x409 // This is a proof of concept based on Raymond Chen's theoldnewthing blog // basis source is located at https://github.com/oldnewthing/Windows-universal-samples/blob/master/Samples/SerialArduino/cs/Scenario2_LEDTemp.xaml.cs // I am making this as simple as possible to see if I can get the token mechanics to work on a headless IoT app since my personal project is failing when I try and do so namespace BackgroundApplication1 { public sealed class StartupTask : IBackgroundTask { private CancellationTokenSource ReadCancellationTokenSource; private Object ReadCancelLock = new object(); private CancellationTokenSource WriteCancellationTokenSource; private Object WriteCancelLock = new object(); DataReader DataReaderObject = null; DataWriter DataWriterObject = null; public void Run(IBackgroundTaskInstance taskInstance) { RunTest(); } public async void RunTest() { SerialDevice arduino; Debug.WriteLine("[DEBUG]: Connecting to the arduino for communication"); try { arduino = ConnectToArduino().Result; Debug.WriteLine("[DEBUG]: Writing an identify command to see what we get"); try { DataWriterObject = new DataWriter(arduino.OutputStream); DataWriterObject.WriteString("&lt;IDENTIFY&gt;"); await WriteAsync(WriteCancellationTokenSource.Token); } catch (OperationCanceledException) { Debug.WriteLine("[DEBUG]: Write operation was cancelled."); } catch (Exception e) { Debug.WriteLine("[ERROR]: Caught exception while writing to arduino. Exception was: {0}", e.Message, null); } finally { DataWriterObject.DetachStream(); DataWriterObject = null; } Debug.WriteLine("[DEBUG]: Now looking to read from the read buffer"); try { DataReaderObject = new DataReader(arduino.InputStream); await ReadAsync(ReadCancellationTokenSource.Token); } catch (OperationCanceledException) { Debug.WriteLine("[DEBUG]: Read operation was cancelled."); } catch (Exception e) { Debug.WriteLine("[ERROR]: Caught exception while reading from arduino. Exception was: {0}", e.Message, null); } finally { DataReaderObject.DetachStream(); DataReaderObject = null; } } catch (Exception e) { Debug.WriteLine("[ERROR]: Failed to connect to arduino with exception {0}", e.Message, null); } } public void Dispose() { if (ReadCancellationTokenSource != null) { ReadCancellationTokenSource.Dispose(); ReadCancellationTokenSource = null; } if (WriteCancellationTokenSource != null) { WriteCancellationTokenSource.Dispose(); WriteCancellationTokenSource = null; } } private async Task ReadAsync(CancellationToken cancellationToken) { Task&lt;UInt32&gt; loadAsyncTask; uint ReadBufferLength = 15; lock (ReadCancelLock) { cancellationToken.ThrowIfCancellationRequested(); DataReaderObject.InputStreamOptions = InputStreamOptions.Partial; loadAsyncTask = DataReaderObject.LoadAsync(ReadBufferLength).AsTask(cancellationToken); } UInt32 bytesRead = await loadAsyncTask; if (bytesRead &gt; 0) { String receivedData = DataReaderObject.ReadString(bytesRead); Debug.WriteLine("[DEBUG]: We read a value of {0}", receivedData, null); } else { Debug.WriteLine("[DEBUG]: We didn't received anything."); } } private async Task WriteAsync(CancellationToken cancellationToken) { Task&lt;UInt32&gt; storeAsyncTask; lock (WriteCancelLock) { cancellationToken.ThrowIfCancellationRequested(); storeAsyncTask = DataWriterObject.StoreAsync().AsTask(cancellationToken); } UInt32 bytesWritten = await storeAsyncTask; Debug.WriteLine("[DEBUG]: We wrote {0} bytes.", bytesWritten, null); } private async Task&lt;SerialDevice&gt; ConnectToArduino() { UInt16 vendorID = 0x2341; UInt16 productID = 0x0043; string aqs = SerialDevice.GetDeviceSelectorFromUsbVidPid(vendorID, productID); var myDevices = await DeviceInformation.FindAllAsync(aqs, null); SerialDevice device = await SerialDevice.FromIdAsync(myDevices[0].Id); device.WriteTimeout = TimeSpan.FromMilliseconds(2500); device.ReadTimeout = TimeSpan.FromMilliseconds(2500); device.BaudRate = 9600; device.Parity = SerialParity.None; device.StopBits = SerialStopBitCount.One; device.DataBits = 8; return device; } } }
pm'd you. 
If it's not voo-doo it's an Indian burial ground... I hate going there, but I will.
Welp, that one word made me realize that as I was sifting out all of the forms based stuff in Raymond's example, I didn't write the reset functions he calls initially to instantiate the actual CTS objects and hook them to the cancellation callbacks. Thanks. I'll go do that and see how things go.
I don’t get it. If you are trying to detect that you have a race condition, write a normal unit test that doesn’t touch threads and run it a few thousand times. No faults - no race conditions. If it is externally dependant, randomize response times in your mocks. If you are trying to assert that both threads do the same thing, either refactor Task.Run() calls to be able to pass a synchronous synchronisation context at runtime during unit teat only OR use Microsoft Fakes to run code synchronously OR use Pose framework (on github) to do the same on .net core or if you don’t have vs enterprise.
i've got a 34" 3440x1440 ultrawide in my room and 2 27" 2560x1440 in my office. i definitely prefer the ultrawide, but the 2x27's is nice too :) one thing that's nice on the dual monitor setup is a clear separation between two full screen apps.. but if you just tile the windows on the widescreen it's just as good in most cases
Start actually coding. Reading isn't going to get you far if you never apply what you've learned.
That dofactory.com site explains well with concrete examples. Also, an amzing post.
In my experience, mastery comes from real life application and learning from those who are more experienced. It doesn't really come from books. If you really want to become an expert, you're going to need to get involved in projects with more experienced developers. If you aren't currently employed somehere where this is the case, I'd be looking at github and pick something there. Look for a cool project in the stack you want and start looking at the bugs and open issues. A lot of employers are looking at github profiles now too so this could ultimately help your career in that way too. 
Shotgunning some suggestions: * Check the [fusion log](https://www.hanselman.com/blog/BackToBasicsUsingFusionLogViewerToDebugObscureLoaderErrors.aspx) and see if you're having any problems in the loading stage. I've used this to confirm issues when I wasn't sure if/why things were/weren't loading. * Check the event viewer to see if anything pops up in there related to excel or your addin. Unhandled exceptions can find their way in there, but usually only if it causes the process to exit. * If you're doing COM interop (quite likely if it's Excel), some of this stuff is very sensitive to version differences. Are you running the exact same versions of Excel/Office? Check any other dependencies as well. There are ways to mitigate these things, but you never know if the application developer implemented them correctly. * Look for weird excel features like whether the spreadsheet is "protected" or whatnot. Macros and addins might also have to be enabled on different machines. * User permissions could affect things. Also file attributes. Like how if you download something from a web-site, it gets tagged in the file system metadata as an internet file and gets restricted in various ways until you clear the attribute. I've had this pop up with things like CHM files.
Thanks for the gold, friend :)
If you're stuck on licenses or subscriptions, you can purchase cloud credits or buy a year's subscription to some sort of online server. [Online.net](https://www.online.net/en) sells dedicated boxes without bandwidth limits in Europe, so it's good for all sorts of network testing scenarios. Put Linux on one of those and you've got a good test server for .NET Core x-plat stuff. You could also look at hardware. Buy some components for a simple DIY NAS (like a [starter case](https://www.amazon.com/dp/B01HIUOLZ4/) and use leftover parts to get started. Then you can upgrade it as you have time. This + Amazon Glacier could help you shore up your backup strategy. Many places don't put enough effort into backups. Some other stuff might need upgrades or replacements. Like a router, or display tools if you go on site a lot. You could even look at branching out in other directions with a small investment. Like .NET MF (micro) on embedded devices. STM family chips [got added](https://www.mountaineer.org/netmf-for-stm32/) a while back. So you could do some embedded hardware stuff. Or look at some of the more interesting stuff in the UWP libraries and any hardware you might need for it.
&gt; Haworth Fern That must be some chair! Ranges in price from [9 to 14 hundred dollars](http://store.haworth.com/hs/seating/desk-chairs/fern)!
&gt; They’re needed because .NET 4.6.1 doesn’t really implement .NET Standard 2.0 While that’s true, there is more to it: assemblies that used to be NuGet packages in netstandard &lt; 2 but are now included in netstd 2 with different version numbers are also included here, as well as any other missing netcore shims, since a netstd lib can link against netstd, net framework and net core. It’s pretty messy. 
&gt; Since IL is completely stack-based It also has local variables (instructions ldloc, stloc etc.)
Great suggestions. And [up-for-grabs ](http://up-for-grabs.net/#/tags/C%23) is a good place to start looking for an open source project to contribute to. 
I've been developing commercial Excel add-ins for over 10 years. I'm still capable of making mistakes, but in general I have a pretty good understanding of the issues faced with Excel. Given all that, here are my thoughts: * I do not think it's a security issue, as others have suggested. If it were, your add-in wouldn't even load. * I do not think that it's a CurrentCulture issue, because if you are wrapping these calls in a try / catch, you would be getting an "Old format or invalid type library" exception. * I do not think that releasing COM objects is the issue. I develop add-ins using interop, and I do release COM objects religiously. However, for a multitude of reasons that would require too much writing, I just don't think that is what is causing the problem. * I do think there is something fucky going on that I've only seen when DisplayFormulas is set to true. If the following does not work ... Globals.ThisAddIn.Application.ActiveWindow.DisplayFormulas = false; string nf = Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].NumberFormat != null ? Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].NumberFormat.ToString() : "General"; Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].Value = Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].Value; Globals.ThisAddIn.Application.ActiveSheet.Range["A1"].NumberFormat = nf; Then I would try the slower Copy - PasteSpecial approach: https://stackoverflow.com/questions/30594264/paste-values-in-excel-c-sharp Lastly, you can get the formula from the Range.Formula or Range.FormulaLocal property, whichever is approprate to your use case. 
[Concurrent Programming on Windows](https://www.goodreads.com/book/show/2993353-concurrent-programming-on-windows). It's a deep dive on concurrent coding focusing on Windows API and C#. It provides a lot of insight into how the framework works. 
A book won't take you to expert, you need to **do**. Come up with a complicated idea that you have no idea how to begin, break it down into chunks of what you can do, break those down more, then get started. Head you Stack Overflow once you're stuck (or here, though less so) and continue to build your skillset. There's no wax on, wax off; learn by doing.
As others suggested, start contributing to projects via up for grabs, or at least delve into a few to see real world applications of stuff. When I was first learning OOP, I really found Head First Design Patterns to be incredibly easy to understand and helped set me on a solid founding for OO work. Other than that, it's just a case of writing lots of code. There's always more to learn so the limit is your own desire to keep trying new things. 
Try to do something just a bit beyond your current skill level. In the process you will learn. Stretch yourself.
I agree that practice is key... but he is asking for a book! I don’t see that wrong at all, you can really improve A LOT if you use a good book as a reference WHILE you practice either by contributing to other projects or follow the book’s own exercises. There are lots of abstract concepts a book could really be helpful with. I would recommend C# 6.0 and the .NET 4.6 Framework by Andrew Troelsen, for example. 
A master has failed more times than you have tried. 
I am not sure how they would enforce that policy.
Book: C# in Depth by Jon Skeet But also lots of practice. You could start by setting out to write an application that relies on one of the things you want to learn, e.g. interfaces. Read up on it, think of examples that *need* that feature.
&gt; What book or other source do you recommend to get out of just knowing the basics to really start mastering C#? Write code. Look up online what you want to know more about. Somebody will have explained it in terms you understand. Look, I worked my way up from intern to senior programmer to a VP level technical position on merit alone. One of my major specialties is taking junior level people and turning them into better programmers - in one case I took a guy who was fresh out of college and two years later helped him find another job as a senior programmer. So please listen to this advice: Being a great programmer isn't about knowing every little interface and every advanced topic. It's about learning to apply *very simple* code in very complex ways. A junior C# programmer can read my code. It's not good code because I know every advanced interface - I actually don't, I learn them as I need them and forget them just as fast, or more often I assign someone else to write that code for me. It's good code because I look at the problem, I rearrange the methodology to optimize how the solution will work, I reduce it to as simple terms as possible, I look at what the code will do and figure out what parts of it can be abstracted to create reusable code, I write an outline of how the program will work (pseudocode), and then and only then will I start coding. It's good code because I apply 43 years of programming experience to making it *simple*. A few years ago I worked for a startup out of MIT creating programming languages. We developed the technical concept of *magicality* - so we'd look at code and ask, *how magical is this code?* *Unmagical code* is very low level - the programmer can look at it and see how it works. *Somewhat magical code* is higher level - it does some stuff for the programmer without them having to handle the details, but they can see what that stuff is, it's obvious how it is working. If you look at the code for a somewhat magical library, you'll see unmagical code. *Fairly magical code* is quite high level. (An example: I wrote a thing that you could feed it a data object and a field name and it would output HTML code for a text input box to edit that field, pre-populated with its existing value.) The programmer can write a couple lines of fairly magical code and it does a lot of stuff for them, in ways they can't necessarily guess at, which aren't obvious. If you look at the code for a fairly magical library, you'll see somewhat magical code. *Very magical code* is so high level that you can barely believe it exists. (An example: I wrote a thing that you could give it a class name, and it would build full interfaces to let you do CRUD on objects of that type and edit them, all working with AJAX.) The programmer can write a couple dozen lines of code and have a full program on their hands with complex behaviors that would take an average programmer with average code days or weeks to do. The programmer basically has no idea how it works. If you look at the code for a very magical library, you'll see fairly magical code. You're new in the field, so you're writing unmagical code, and that's normal. Look at how you can start making your code reusable, and soon you'll have a library of slightly magical code. You'll work with that for quite some time, then you'll start to see how that can be automated, and you'll write a somewhat magical library that uses it. Then sooner or later you'll see ways this could do more for you and you'll write a fairly magical library that uses THAT. And eventually you'll be tired of writing the same sorts of things with it over and over and you'll write the very magical library that uses your fairly magical library. And if you're good, you'll incorporate some publicly available libraries (like for example jquery) into your process along the way. By the time you get there, you'll probably have changed languages a couple times, giving you opportunity to rewrite your code and make it better with every iteration, fixing all the deficiencies you've seen so far. 
&gt; What book or other source do you recommend to get out of just knowing the basics to really start mastering C#? **For example interfaces, generics, factories, etc.** [...] I am tired of not understanding these topics and the other more advanced topics. Do you mean these topics *in general*, or specifically how they're implemented or work at a nuts and bolts level of C#? If the former - some are topics more broadly associated with object-oriented programming and aren't "C# only" things. In any event it's like learning any language - be it a computer language or human language. Depends a bit how you learn. As others have said, probably some combination of: * Seeing code/language examples from those who are fluent * Textbooks may be helpful to illustrate fundamental areas and rules * Start writing/using the language, regularly until you get proficient.
I searched for "Roslyn Sandboxing". https://github.com/dotnet/roslyn/issues/10830 https://www.filipekberg.se/2011/12/08/hosted-execution-of-smaller-code-snippets-with-roslyn/ https://github.com/RehanSaeed/Roslyn.Sandbox Things won't be easier with .net core. The safest way would be to run code in containers, but it's not going to be efficient unless you come up with some kind of heuristics to reuse already running containers for concurrent requests. 
Ah - sandboxing is the word I’d missed from my searches. Thanks!
Thank you very much for your inspiring words, I will see how I can be consistent with problem solving, I understand it requires consistency. Maybe I should make notes for revising concepts and try not to do everything at once. I am currently checking the job descriptions for different profiles and will prepare accordingly while focusing on problem solving. Will surely opt for interviewcake, once I am done with 70-483. Thank you once again.
You're welcome :)
You need to fuck up and probably fuck up badly and most importantly you need to pay the price for that fuck up yourself. These patterns will make sense when you make the mistake they solve, or they won't. C# allowing first class functions means a lot of the old patterns don't actually make sense. None of these concepts are particularly hard, but they solve problems you don't know you have yet. 
I’ve also had a chance to skim-read the link you gave me, and it looks like it covers everything I need to know. There are a few gaps, but I’m more than capable of filling those in myself. Now all I need is the time to build a prototype. Thanks once again.
Glad to be of help :)
Let's say for a moment that you wanted to get the value of a cell, and that cell was assigned a Named Range. You might write something like this: string myValue = string.Empty; Excel.Range myRange = null; myRange = myWorksheet.Range[string cellName]; value = myRange.Value.ToString(); This works! And you think you're done. Except, when you close your program, the Excel process is still running in the background. And the next time you go to read or write to Excel, either the program doesn't start at all, or you spawn another process, or any other number of weird things occur. What happens is when you use the Interop and use any Excel object like Excel.Range, you're actually creating a COM object, and that object needs to be released. Marshal.ReleaseComObject(myRange); It's the same thing for writing values. The interop lets you write to individual cells, and also can write a string array to multiple cells all at once. To do this safely, you might do the following: string[,] myArray; // Setup the array here Excel.Worksheet myWorksheet = someMethodThatGetsWorksheet(); Excel.Range myRange = null; try { myRange.set_Value(Excel.XlRangeValueDataType.xlRangeValueDefault, myArray); } finally { Marshal.ReleaseComObject(myRange); Marshal.ReleaseComObject(myWorksheet); } The COM objects you created must be released - in order of most nested to least nested. If you don't release them in order, the release operation may fail. How can we avoid doing all this? Don't use the Excel Interop. Use any of the free or purchasable .NET libraries for writing to Excel files directly out there like ClosedXML, SpreadsheetLight, SpreadsheetGear, or EEPlus. Or use Office.js or some other framework.
Roslyn is a compiler. It doesn’t really run code. 
I’m talking about the [CSharpScript.RunAsync method](http://www.coderesx.com/roslyn/html/DEC718C1.htm) - I thought that was part of Roslyn. If not then fair enough, but that’s what I’m talking about.
Safaribooksonline
This is great! You don't often see programming philosophy in response to 'How do I get better?' questions. I'd add, slightly counter to what /u/themcp suggested at the beginning of his post, is the idea of building an intuition about how you approach problems. I work at a company that almost purely builds prototypes for clients, in teams of 1-3 programmers, and on very short deadlines (1-13 weeks). We joke that we're "professional documentation readers" because every project is in a different language, on a different platform, using someone's proprietary API. The thing that I've noticed in the year and a half since I started is that I've become much better at sitting down with a problem and having several different, language agnostic, solutions to solve it with, without doing much planning or research, and usually those solutions, while not production ready, are robust enough to get to the conclusion that what we're trying is possible. Now, working like this is by necessity because of the structure of our projects, but even in longer term work, having this intuition A) cuts down on the initial research/planning time you'll need to do and B) as you work on smaller parts of the code base, reduces the amount of time you'll spend looking something up. To work this idea into the idea of magical code, as you build this intuition for writing code, you'll start to come across things that you've written before, and will likely have to write again. When you can abstract this intuition into future work, and apply it to things you will likely have to do again, you can start by writing reusable code, with the goal of building towards writing magical code. And I think /u/themcp said it pretty well, but the way to get there is basically to rewrite old code. You'll have plenty of moments of "Oh god why did I write that" and odds are over time, in addition to your code becoming more elegant, you'll learn how to format and document code more effectively as well.
You can't find this answer on SO?
Thank you. I think that what you've said is something that was in my head but didn't end up coming out in my lengthy diatribe. (At some point I figured "oh goodness, I've said so much, I had better shut up.")
Your options are VSCode, Visual Studio for Mac and Rider. I use VSCode the most often because the other two don’t work 100% where VSCode more or less does. I’ve had issues with running unit tests and even opening solutions in the case of Rider.
I'd suggest this: class Bookmark : string name, DateTime timeCreated, bool isFolder, object target Target either holds string (url to page) or Bookmark[] (folder content), you can use [isFolder] to know if it is folder or bookmark
Maybe my point about architecture was misrepresenting the point of wanted to make. It's very little extra work to add the interface and use it appropriately. That's not over engineering. That's being a responsible developer. It's our job to do things right as much as possible, sometimes business needs and doing it right don't line up and you have to do something hacky, like use dynamic in a case like this, but it should not be used out of lazyness. 
tl;dr; HttpClient was badly designed. Pretend that it doesn't have a Dispose method and use a shared instance instead. Pray you don't hit DNS caching issues.
Removed: Rule 4. You'll have to include the code you're trying to use to accomplish this and provide more details about how you're doing it.
I see you don't actually understand Roslyn.
Possibly by using containers in someway? Idk.
To make things worse, I remember reading that using it as a singleton had another weird issue. 
Here is some info about that : https://github.com/dotnet/corefx/issues/11224
I wonder if you use restsharp you don't have this issue?
I would personally implement an IBookmark interface with a string Name property, and then make it be implemented by a LinkBookmark or a DirectoryBookmark. The latter will contain a list of IBookmarks, while the former will have the properties you have described in the OP
I don't really like this approach, relying on a flag to infer the type of an untyped object seems risky to me, also kinda obscure...
Are there any good replacements for HttpClient?
Interesting. I wonder how dotnetfiddle.com does it?
I know, but I don't know, how to do it better. Maybe abstract class BaseBookmark and two child classes, one for folder and one for bookmark, but I'm not sure if it would work
Just a guess, but are you sure you're calling this method from the UI thread? (The [MSDN article](https://msdn.microsoft.com/en-us/library/t81k888y(v=vs.110\).aspx) mentions that this method should be called only from threads in STA mode.) Does a subsequent call of GetText() method return desired string?
You could manually use the HttpRequestMessage and HttpResponseMessage classes I suppose? 
That's the approach I would personally suggest
Why would you want to replace it? Despite *this* confusion that people have about its lifecycle, it is still the best HttpClient for performance, latency and calling REST APIs.
There's RestSharp, although I personally barely used it (just played around)
I understand that but he's clearly not done yet. Question is if he really even needs to instantiate said classes at all If he just needs the address. But to me it seems whatever he needs he has statically mapped at the moment on fixed points in the array rather than checking Keys/properties or some other safer casting. There are more issues than just a new interface. I'm just showing one more solution to a very specific type of implementation. "what can i define a temporary return object to before returning a subproperty of said object knowing that assigning to it can be an unknown element" 
The above comment about STAThread is correct. However, in addition to that, I've found that the methods are also sometimes unreliable when accessing the clipboard. It works best to wrap then in a try/catch and with methods that return bool for TryGet or TrySet.
You're argument makes no sense. How can it be "the best HttpClient for performance" if you haven't actually considered any other options? I guess its technically true, but it would also be true to say that its "the worst HttpClient for performance, latency and calling REST APIs"
You can see enough info to give you the answer about how they do it here: [https://dotnetfiddle.uservoice.com/knowledgebase/articles/282670-restrictions](https://dotnetfiddle.uservoice.com/knowledgebase/articles/282670-restrictions)
Imo rather than being replaced, it needs better abstractions. I had started working on some until I saw the asp team had already created something better https://github.com/aspnet/HttpClientFactory It looks like it will be shipped with asp dot net core 2.1. It's not clear to me why all these generally useful packages are in the asp net repo but presumably this package will be useable outside of asp net core projects like the other Microsoft.Extensions packages.
&gt; This is great! You don't often see programming philosophy in response to 'How do I get better?' questions. I do want to expand on that concept... I think once you are trying to move from being a lower-mid-level programmer to an upper-mid-level programmer or a senior programmer, it's *all about* programming philosophy. By that time you're expected to already have the technical skill and advancement is about understanding what you're doing and how to fit it into a business. As I said I'm skilled at raising people up... and it's *entirely* about teaching them not a programming language, but a philosophy of how to approach the problem and structure the code. One of the proudest moments of my life was standing on a factory floor with my junior programmers, talking to the factory workers about the process of doing their work, the processes they performed, and the motions they went to while doing it... and together we all designed new software for them, on the spot, to make their jobs both easier and more accurate. (*and* we redesigned their workstations and processes to eliminate motions and make it both more accurate and easier for them.) Just seeing that they had learned so well that I could stand back and watch them ask relevant questions, analyze the business process, and translate it into a software design on the spot... that told me every moment I had put into them was all worth it. I talked all about programming magicality. This is an important concept developed quite recently by me and some top people from MIT, and we haven't even published it... but it's only part of life. Being a *great* programmer - not merely good but great - requires understanding of what you're going to need to know so you can ask the right questions to get a good specification, how to describe technical subjects to non-technical people and how to describe fuzzy business processes to technical people, and how to translate design concepts into a large code structure with room for expansion in the future. That's the part I can't tell you how to do, you just have to do it with me for a while and you'll internalize how to do it. And I've taken folks with a degree from MIT and taught them things college never taught them about programming, why sometimes it's best to be verbose and make a loose program you can add to easily instead of a tight program that's concise but when you need to expand you need to rewrite it from scratch.
Because this confusion may add lots of time debugging and teaching onboarded junior devs. If performance was critical, I wouldn't be programming in C# anyway.
Looks nice! I think I'll have a look at it. Thanks!
I've found some anti-virus tools to block this call causing the exceptions
Not sure why cryo's post got down voted. It's correct.
While I haven't looked at your code, I've been using [this](https://github.com/govind-mukundan/WebSiteDownloads/blob/master/C%23/SharpGLWPFPlot/SharpGLWPFPlot/SerialPortAdapter.cs) code for interfacing with serial ports, might be useful to cross check.
One option is to use Steamworks. Steamworks is a free suite of tools developed by Valve to work with Steam. Steamworks includes such features as: Establishing a peer-to-peer connection over Steam's servers; Storing statistics on Steam's servers; Voice chat and text chat. You'll have to use the app id 408. However, using Steamworks has 2 huge drawbacks: 1. The user is required to be running a Steam client and be logged into an account. 2. The Steamworks matchmaking system only matches the user with people who chose the same download region in the Steam client settings(You'll have to develop an external matchmaking system). Steamworks is a C++ api, but it has 2 free bindings to C#. Steamworks.NET is a low-level binding which is identical to the original api. Facepunch.Steamworks is an abstraction built on top of Steamworks.NET. It simplifies a lot of the more complicated parts of Steamworks.
Likely because it's not helpful and doesn't really add anything to the discussion. Possibly also the tone conveyed in the comment. Seems he just wanted to make them feel bad for not knowing rather than actually pointing them to what they are looking for.
I like how you always delete your old posts to repost this link **again**! https://www.reddit.com/r/csharp/comments/77e2h0/a_beautiful_popcorn_client_in_netc/ https://www.reddit.com/r/csharp/comments/6qgcku/popcorn_time_port_in_net_windows_native_app/
Others have suggested you need to practice, and I firmly agree with this. That said, I also believe you need exposure to info from people that are either more knowledgeable or just plain smarter than you are. For that, there are a few: 1. Go read the actual language specification. It's free. I learned a lot by doing exactly this. Several keywords are just simple wrappers over far more simple patterns (lock, using, for each) that are easy to understand, but you may be unfamiliar with. This won't make you a better developer on its own, but will make you a better informed developer, which does have tertiary benefits imo. 2. Get Concurrent Programming on Windows (Joe Duffy). While you should not do a whole lot of the things he talks about in your own code (bc it's easy to do them WRONG), you will better understand the way the platform works, and that's hugely helpful. 3. If you've never seen it, Design Patterns by Gamma et al. This will not make you a better c# developer, but will help you with design and structure. It should also help with testability. 4. For the love of everything, start writing unit tests. If you don't know how to test a component, it probably needs to be refactored. 5. Joe Duffy has a great blog. So does Eric Lippert. Those are good bathroom readers imo, but you may disagree. 6. Functional programming concepts have become popular, and I'd highly recommend getting after familiarizing yourself with them. .NET has a lot of things that are intrinsically monads, like the Task and Nullable&lt;T&gt; types. These aren't terribly hard to gain a basic understanding of, but I think there's some benefit there. 7. At some point, go look at your code in ildasm. This is likely way beyond where you're at now, but I seriously learned more about my code looking at the decompiled output than I ever did looking at c#. One thing you will eventually see is that a lot of the framework uses the patterns found in the Design Patterns book. The lazy type accepts a factory function. Essentially every LINQ anything you ever write is just a builder until it's enumerated (for each, projecting to a list or dictionary, etc). I would recommend keeping your code to book ratio no lower than 70/30 (70 being you writing code). If you're spending more than 30% of your self development time on reading, go find a use for the thing you learned about, or build an implementation, before moving on. You will retain it better if you do that, and it also motivates you to keep your code muscles strong. If you lax in this area, it will be really easy to find yourself in a rut. Also, if you're not using version control, start. Git is free, and doesn't require any server. You can even read the Pro Git book for free on the Git website, in addition to the installed help being pretty awesome for figuring out your most common tasks. Version control will liberate you quite a bit in terms of your ability to experiment and try stuff out. Can't even recommend this enough. Hope this helps. 
You have been putting off learning C# since April because one learning platform does not support it? Have you looked into coding4fun?
[removed]
Holy mother of god, you're the man! It works like a charm! Only thing I changed up, is instead of grabbing .Value, I grabbed .Text since if I put "=1/0" into a cell it was getting replaced with "####" instead of "#DIV/0!" for example. Would you agree with this change? Or is there any better way of accomplishing this? 
Thanks for your input but since my problem got resolved by another user I don't think this was the cause for the strange bahavior. However to counteract future bugs that may come up, I will still implement this, so thanks a lot! :)
Also I noticed that when I run the function while my cursor sits in a cell affected by it, I get the error "Unable to set the DisplayFormulas property of the Window class" Is there any more elegant way of fixing this other than setting the cursor to another cell?
Even though the article mentions explicitly setting the ConnectionLeaseTimeout, it does not mention the DNS cache. I wrote a post a while back discussing the available options: http://www.nimaara.com/2016/11/01/beware-of-the-net-httpclient/
Awesome detailed write up, thank you! The spark for this post was because I began reading a c# unit testing book (The art of unit testing) and had confusion when reading about stubs. I was trying to refactor my code to use a stub and the book was using interfaces but using a slightly different design. Perhaps I should start with the more basic example and let it set more in stone first.
[Thanks for picking up on this.](http://i0.kym-cdn.com/entries/icons/facebook/000/003/194/001.jpg)
Removed: Rule 7.
No problem. Glad you figured it out.
What does Yoda say? "The greatest teacher, failure is."
Oh, very cool, I didn't realize valve had C# bindings for this. Does it require the game to be approved on steam or just that the client is running to leverage the services?
I didn't mean to imply that you shouldn't compare libraries and approaches, just that HttpClient is generally considered to have the best performance (by all means compare and post a benchmark, I'd love to see another) and that this issue linked is hardly a reason to avoid using it.
&gt; Because this confusion may add lots of time debugging and teaching onboarded junior devs. If the difference between a shared and static object and understanding a singleton pattern confuses your new devs, then you are going to have larger problems onboarding than them miss-using HttpClient...assuming they work on anything other than toy projects.
That is just a lifecycle manager for HttpClient. You would still be using HttpClient inside of your client library using that.
Can you give some context for your example? It's likely possible someone on here can help you out with this.
Is this LINQ-to-SQL (or Entity, or some database query), or just a basic LINQ-to-Objects (like on a `List&lt;MyClass&gt;`)?
(optionally for ease) project into a new class which has a minutes and seconds property, along with the other data Group by minute From each group selectby min seconds
Perform a `.GroupBy` to aggregate the records by minute, then `.Select(grp =&gt; grp.First());`
That would work for this data set but not for other possible sets. If there is a fifth entry with a timestamp of 12:02:30, I believe OP would still want to select the 12:02:45 item since it's closer to the next minute, but simply grabbing First would get you 12;02:30 instead.
&gt; Facepunch.Steamworks For anyone else interested, [here](https://github.com/Facepunch/Facepunch.Steamworks) is the link I found.
It is. I have a friend who bought one for a little over $800, but I was having a hard time swallowing the cost. However, I found one on Craigslist for $300 in new condition. I had what I thought was a decent chair, but I realized that it really isn't that good for me. I owed it to my body to get a chair that didn't make me dread having to sit in it all day.
Came here to say this, you'll want to make sure and sort by date before grouping if it's not already sorted 
Don’t have the source code at the moment. But I was trying to use a static function. Where as the book example was using an interface and creating an object to use the member function.
Absolutely. I use XML for updates for my program. Makes a lot of stuff so much easier! :)
Incredibly annoying that your options are either to use ServicePointManager or create a new HttpClient on a regular interval.
Despite the issues, it seems like the best solution is to create a a singleton wrapper instance around httpclient that replaces the httpclient on a regular interval to deal with outdated DNS cache.
Just musing about this, what would happen if the dataset is over several hours ie. 12:02, 12:11, 13:01, 13:10 So we need to group by some composite key then? Possibly include the date of the data is over days? Is that right? Sorry it's a little too close to New Years to be thinking LINQ...
I wonder why they won't at least fix the caching issues internally.
I've been using VS Code lately for my merge conflicts, surprising how good it is. https://code.visualstudio.com/docs/editor/versioncontrol#_merge-conflicts
Also the parenthesis is optional, not even sure why it's included here.
&gt; Haworth I'll keep an eye out, thanks. Is there a web site that will search my local craigslist for "Haworth Fern" and email me when one shows up?
 new (double price, DateTime datetime) [] { (123.45, new DateTime(2018,1, 1, 12, 1, 10)), (89.23, new DateTime(2018, 1, 1, 12, 1, 20)), (66.13, new DateTime(2018, 1, 1, 12, 1, 30)), (75, new DateTime(2018, 1, 1, 12, 2, 45)), } .GroupBy(x =&gt; x.datetime.Ticks / 600_000_000) .Select(g =&gt; g.First());
You don't have to own a game to use Steamworks. Just set the appid to 480, which is used by a game called Spacewar. Steam will think that the user is playing Spacewar, when in reality the user is just using your application. Spacewar is a free C++ game made by Valve that every Steam user owns automatically. It's intended to be an example on how to use Steamworks's primary features. You can find Spacewar's source code on the Steamworks website.
Given that you are doing this on a new year’s eve I hope this is part of a kickass trading algorithm that makes you a lot of money. 
Ok I had a chance to go through your main post. Still connecting the dots but here is a summary of what I think I have a general understanding of. func and action are delegates. One returns a value and other returns void much like a method (static int xxx) would return a value and method (static void yyy(){}) would not return anything. method signatures tell you where the method is located (?) with something like static. I've only done static methods so far as part of c# course I found (c# yellow book) but I know there are others like public, private. The next part (static void...) tells you what it returns if anything (void returns nothing). Then its the name of method (public static MyMethod. Then parameters of method () which will accept a proper argument when called, and then {} codeblock that will get executed. The methods accepts an argument with the parameters stated so the method named UserReturnString accepts a string argument from another method (?). Func has its own parameters. Takes in a string argument, and returns a true or false into validator (something we named). static string UserReturnString(string prompt, Func&lt;string, bool&gt; validator) { .. }: Func (delegate that returns a value) I get invoke (now). It calls the method from within the method. Still trying to connect the dots. I will continue the c# course and yellowbook and get back to this at a later time and actually use it. Just trying to connect the dots atm. 
Probably break something else that other people are depending on. Honestly, the whole thing is over my head. But I did read recently that Linux intentionally violates the TCP/IP standards in order to work around some problem with DOS attacks. The whole thing is bloody complicated.
Even a `Dictionary` of ID to `Movie`. At that point, the `Movie` class probably doesn't even need the `Id` property.
I dunno... I usually make a map that resolves an entity, but the entity it resolves still generally holds the key(s). For example, if I use some combination of two integers, then I'll usually declare the map as `IDictionary&lt;(int, int), T&gt;`. Note that that the TKey type parameter is to the System.ValueTuple&lt;int, int&gt; type.
Yeah, depends on the situation. Here, it looks like the class keeping the ID doesn't really make any of the required operations easier. By the way, C# 6 added read-only properties: class Movie { int MinimumAge {get;} string Name {get;} public Movie(int minimumAge, string name) { MinimumAge = minimumAge; Name = name ?? throw new ArgumentNullException(nameof(name)); } }
Here: age = readInt("Enger your age : ", MIN_AGE, MAX_AGE); if (age &lt; MIN_AGE || age &gt; MAX_AGE) do { Console.WriteLine("You have selected an invalid age "); } while (age &lt; MIN_AGE || age &gt; MAX_AGE); it looks like if age is out of bounds it will loop writing the error message forever with no way out. And here: if (movieNumber == MOVIE_ONE &amp;&amp; age &lt; MOVIE_ONE_AGE) do { Console.WriteLine("Sorry but you are too young to see this movie. Goodbye. "); break; } while (movieNumber == MOVIE_ONE &amp;&amp; age &lt; MOVIE_ONE_AGE); I don't see that you need the do while loop, since it will only run once. Why not just: if (movieNumber == MOVIE_ONE &amp;&amp; age &lt; MOVIE_ONE_AGE) { Console.WriteLine("Sorry but you are too young to see this movie. Goodbye. "); break; } I recommend [LINQPad](https://www.linqpad.net/) as a fast and easy way to test code while you learn, if you don't already use it.
I've been building a neural network library to learn how they work. I'm going to use it to learn multi-threading next because I'm still so green with C# and actual programming.
You don't need to bother with polymorphism or abstract base classes or anything for a simple bookmark system. A bookmark tree has some pretty simple properties: 1. A bookmark contains a URL, title, and other properties. 2. A directory contains a title, a possibly empty list of directories, a possibly empty list of bookmarks, and maybe some other properties. 3. A bookmark list has an nameless root directory built in - usually you don't even see it, since when you open your bookmarks it just lists bookmarks and directories (which are stored in that root directory) All you need to do is create two classes: class Bookmark { string URL { get; set; } string Title { get; set; } } class Directory { string Title { get; set; } List&lt;Directory&gt; Directories { get; set; } List&lt;Bookmark&gt; Bookmarks { get; set; } } Since the structure is recursive, you can handle any number of nested folders.
I'm working on a ticketing (helpdesk) project. Boring I know, but I'm using it to learn about .NET Core, SaaS/Multi-tenancy and Azure SQL sharding. Like I say, while the subject may seem boring, I'm finding learning the technology extremely fulfilling. 
Lots of good other suggestions already... Assuming you don't have knowledge about using arrays or declaring a "movie" class or using dictionaries for some of the logic and only working with what you have available, here are a few issues: 1) At the Main procedure you are passing in 2 parameters 'age' and 'movieNumber' into CustomerInfo but it is never used in the rest of the the Main() procedure again, why have them at all? 2) CustomerInfo: Your readInt function already evaluates to see if the movieNumber is within the range that you pass in (low and high) but you still check it again at line 58, why? Function readInt always returns a valid range, therefore Line 58 to 62 will never run. 3) Lines 79-83 same issue, will always be true, will never run. 4) Lines 85-118 Logic is ... redundant. You are already checking age limit with an if statement but recheck it again using a do..while loop just to break out of it. There is no need for the do.. while loop. 5) Line 122-143 could have logically followed the prior issue with a if..then..else condition if (movieNumber == MOVIE_ONE &amp;&amp; age &lt; MOVIE_ONE_AGE) { Console.WriteLine("Sorry but you are too young to see this movie. Goodbye. "); } else { Console.WriteLine("Here is your ticket. Enjoy the film " + STRING_MOVIE_ONE + "!"); } etc for each of the movies selected... later on I would recommend to rewrite this again when you have learned about arrays, class, dictionary, etc. For example, 'CustomerInfo' could now be express with the following using Arrays: static void CustomerInfo(int[] AgeLimit, string[] MovieTitle) { int movieNumber = readInt("Please select the number of the movie your would like to see : ", MIN_MOVIE_NUMBER, MovieTitle.Length); Console.WriteLine("You have selected the file: {0}", MovieTitle[movieNumber-1]); int age = readInt("Enter your age : ", MIN_AGE, MAX_AGE); if (age &lt; AgeLimit[movieNumber]-1) { Console.WriteLine("Sorry but you are too young to see this movie. Goodbye. "); } else { Console.WriteLine("Here is your ticket. Enjoy the film " + MovieTitle[movieNumber-1] + "!"); } }
Good idea. The only eye-twitcher for me was that you used `=&gt;` for the properties but not the extremely simple function `IsOfAge`... :)
Ah I see, I'll be doing that then. No the display formula button is toggled off in the UI, it really seems kind of strange...
Look into using String.Format(), so you don't have to concatenate long series of alternating strings and variables, making your code easier to read. Instead of: Console.Write("Your first name is " + strFirst + " and your last name is " + strLast + ". Hello there!"); you can write: string msg = String.Format( "Your first name is {0} and your last name is {1}. Hello there!", strFirst, strLast ); Console.Write(msg); or less verbosely: Console.Write(String.Format("Your first name is {0} and your last name is {1}. Hello there!", strFirst, strLast);
also selecting a cell didn't do the job since the text input cursor still sat in in cell and threw the error, so I just send an enter keystroke which now works fine :)
I built a budgeting web app using asp.net MVC, entity framework, C# and SQL server. I’ve been a DBA and bi developer for years and wanted to learn app development. I added a WCF component for future projects but now I’m stuck. I’ve finished the app and have no idea what to work on next. Any help/ideas would be appreciated.
I am working on an open source CQRS library. Would love to hear you feedback! :) https://github.com/jeyjeyemem/Xer.Cqrs
It's not boring. A well done ticketing system (from both the UX and the technical point of view) is a very challenging endeavor. And as you said, you can learn a lot on the way.
Video removed?
Removed: Rule 3, Rule 6, Rule 7.
No it really is not. It's Winforms. It's not 2005 any more, get with the programme. The bits I watched suggested the guy didn't understand basical separation of concerns, but I was going through quite quickly. No MVP/MVC style approach, it's all code behind. No tests. Not one, no mention of unit testing or similar He's using SQL Server, fine, but he's using stored procedures for crap like insert and delete. Again it's not 2005, get with the programme. That's just the big stuff. Some of the code behind code was a joke, other stuff just made me angry. ** Do not watch this video series if you want to learn anything applicable to building C# applications that don't suck. **
Removed: Spam.
Would you have any references to anything that addresses your concerns?
i did that tutorial completely and i must say it helps with the beginning and to understand some fundamentals but yeah it pretty much stops there. To me it felt that there are some episodes missing... I still liked his format and would like to have more of these tutorials, I don't mind paying a few bucks for them. Are there any similar Video Tutorial Series, just with more uptodate content?
I was going to go through [Microsoft's manual on parallel programming](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/).
Removed: Rule 6.
&gt; It's Winforms. It's not 2005 any more, get with the programme. That's because he's selling separate "add-on" courses to convert it to WPF or ASP.NET (for $37 each)
I've been using C# for a couple months now, but Python and VBA for two years before that. Learning proper object-oriented design has been the biggest challenge switching over.
Please do. :)
What's wrong with using procs in sql? I can control my tsql better that way
It's currently just using the natural order of the list, because I forgot about sorting. Throw an OrderBy() in the Select() call: .Select(g =&gt; g.OrderBy(x =&gt; x.datetime).First());
Im making a subnet scanner for a school project. 
In the olden days it was common to create a stored procedure to handle each crud operation. It had its advantages, there's a degree of security as the sql can't be injected or tampered with so easily, and a DBA can be utilised to optimise it. These days none of these concerns are valid. First, scalability. It doesn't. This becomes a huge problem quickly. Second DBA's are more and more becoming low skilled outsourced teams rather than integrated experts. Third ORMS and the plethora of alternative to the bottleneck that is the database render a lot of this stuff moot. The specific question of why not to use stored procs. Actually do use them when they serve a purpose, specific complex SQL stuff. He is using the old school one proc for each crud operation and it's just not efficient in terms of development time, processor time or any other metric. SQL server can optimise an insert generated by an ORM (EF for example) to be as quick as the old stored procedures. In the olden days this was not the case. It's old school. Very very old school.
If the quality is up to the standard of this shite then save your money. Back when winforms was popular (I actually still have a soft spot for it) we worked around its limitations. In WPF you'll have heard of MVVM, in ASP.NET MVC, for Winforms it was usually MVP. He doesn't do any of that. It's a mess. I haven't seen his upgrades, but I'm not investing effort in to them to see.
A medical/nursing device simulator called [Infirmary Integrated](tanjera.com) to simulate cardiac monitors, ventilators, etc for educating doctors, nurses, respiratory therapists, etc. Free and open source software, cardiac monitor simulator complete this far. 
Are you saying that doing .Contains on a hashset with 1450 strings 80 times takes 3 seconds?
Yes. I run it in Debug mode, so it's slower and it takes some time to send request to API I use and receive response, but yes, it's about 2-3 seconds
Whats the difference between MediatR and yours?
All your time is spent using whatever request APIs you are using. Adding into hash sets etc. takes essentially no time compared to that, so forget about it. 
The three seconds include calls to external code? Also check my edit.
Ok, thank you
Nice. 
I hate the query syntax. As someone else said last time this came up it is just different enough from SQL to be confusing. In the end they get compiled to the same byte code. Just use what ever you like best. Unless you are working on a shared project, then i would just use what ever people are already using. 
If you're in change of your own codebase, then go ahead and use whatever you like, there's no meaningful difference in their capacity. However, most people I've worked with seems to have a strong preference for the lambda syntax, so it might still be worth being comfortable with. I personally prefer it because in my opinion it fits better into other C# code. 
No, they produce the same SQL statement. Sometimes it's easier to use lambda operations when you are just using one table and it's visually simpler to use linq queries when you need to use several left outer joins and multiple tables
&gt; The SQL server stuff. Again, you need to know how SQL Server has evolved since back then. One of its big optimisations was in dealing with dynamic sql, i.e. queries sent direct from the app. The reason being, ORMS. That's interesting and I'll have to look into that. I'm the only dev who has embraced abstraction of SQL (Linq to SQL, Entity Framework, etc.) and everyone else uses stored procedures for ever DB interaction called by SQL Connections. I'd be interested in looking into design pros/cons between the two.
It is necessary to know both. That shouldn't be hard. I always emphasize readability. Each syntax has a place where it's readability shines. 
It's never simple to compare the benchmarks, but 90pc of shops (i.e. development teams) avoid stored procedures for a lot of reasons. The biggest is scalability, the db is always the worst bottleneck. Putting business logic in tsql is a disaster waiting to happen again because of scalability. Things it's good at are validating. I've said this a hundred times in these reddits, there is never one correct answer, and if your team has a solution albeit one from over a decade ago that works for them, then working software is preferable to shiny new non working software. I can write probably 20 pages on it but again you need a bit of experience to understand and it's all on the internet now anyway.
I tend to prefer the method syntax for shorter things or when query doesn't have support one or more parts. However, I find the query syntax more readable when there are many parts and it covers everything (though it's worth considering breaking up the query). In addition, there are some things query syntax does much better: var innerGroupJoinQuery = from category in categories join prod in products on category.ID equals prod.CategoryID into prodGroup select new { CategoryName = category.Name, Products = prodGroup }; Care to guess what the equivalent `.GroupJoin` call looks like?
&gt; No, they produce the same SQL statement. ...
A back-end language that was originally started in Python, however we found it was faster in C#, so we've restarted the whole project. C# has forced more code organisation, something which we really rely on.
Could you point me in the right direction on how to create that sort of interface (the cardiac monitor)?
For me is Lambdas for everything except group bys. And sometimes big complex expression that don’t nest well. And in VB.NET no lambdas, the syntax is awful there.
Just looking at the name it feels like the called gives up ownership of the argument and doesn't expect to use it anymore.
I'm creating a library management app with c# and sql server :)
&gt; Care to guess what the equivalent .GroupJoin call looks like? var innerGroupJoinQuery = categories.GroupJoin(products, x =&gt; x.Id, x =&gt; x.CategoryId, (category, prods) =&gt; new { CategoryName = category.Name, Products = prods });
Profile before you make assumptions about what is slow. 
I will try to update it with the code in the ASP NET Core sample later, which should be easier to understand.
My library supports attribute-based routing, just mark methods with [CommandHandler], [QueryHandler], [EventHandler] and register them, the library will take care of the routing. It also supports hosted handlers with the HostedCommandHandler/HostedEventHandler classes. These can be extended to receive messages from a queue/messagebrokers and can be easily integrated with other in-process handlers.
You cannot escape from the lambda syntax. Lambdas are used for non-LINQ things and some of the LINQ methods do not have query syntax support. This is why some people ban the query syntax on their projects. I personally prefer the query syntax whenever possible. I am on the position that code should read like English sentence and lambdas are not very good at that so given the choice I always go for the query syntax. I hope one of the proposals to integrate more LINQ methods as query keywords will make it into C#. I miss Single(OrDefaultAsync) and ToList a lot
Yeah same here, join syntax in lambdas is pretty unreadable IMO
Query makes joins slightly easier, but it only supports a tiny fraction of Linq functionality. For me that's the crux of the decision. You absolutely will have to use the lambda format because it can do things query can't. Given that you may as well remain consistent. 
&gt; For a post coming across as though the author is a total arsehole full of himself I didn't have that impression at all
https://urbigenous.net/library/nine_billion_names_of_god.html
I have to say I slightly agree. What are programming in here anyway, visual basic? Lol
Will string interpolation it also resolve arrays like Console.WriteLine("You've selected: {movieTitle[selected-1]}");
That's not string interpolation.
I find the lambda approach very difficult to read with temporary variables, where the `let` keyword is very clean.
So... string movie = $"You've selected: {movieTitle[selected-1]}"; Console.WriteLine(movie); is not valid? 
That is valid. Before you were missing the `$` character and just had a regular string, not an interpolated string. Sneaky of you to edit your own post to add it, but still asking me whether it's valid or not.
I never use variables inside linq, do you have an example?
Yeah, I noted that I added the $ that I missed. Thank you.
A slightly adjusted example from MSDN: from sentence in sentences let words = sentence.Split(' ') from word in words let firstChar = word.ToLower()[0] where firstChar == 'a' || firstChar == 'e' || firstChar == 'i' || firstChar == 'o' || firstChar == 'u' select sentence + ": " + word The `words` may be superflous, but the `firstChar` is not. If you don't use a temporary variable like this, you have to evaluate `word.ToLower()[0]` five times. But this is actually a poor example, because you'd just move the five checks to a `IsVowel` method. And it's a bit constructed (not a realy world scenario), because I select `sentence` and `word` together. Generally always when you want to use a calculated value multiple times and a method is not an option you should use `let`. Here is the same query in Lambda syntax: sentences .SelectMany(sentence =&gt; sentence.Split(' '), (sentence, word) =&gt; new { sentence, word }) .Select(temp =&gt; new { temp.sentence, temp.word, firstChar = temp.word.ToLower()[0] }) .Where(temp =&gt; temp.firstChar == 'a' || temp.firstChar == 'e' || temp.firstChar == 'i' || temp.firstChar == 'o' || temp.firstChar == 'u') .Select(temp =&gt; temp.sentence + ": " + temp.word) Of course you can change the formatting to make it a bit more readable, but overall `let` is still shorter than the construction of new objects using `new {..}`. It's a powerful tool that can be used to construct readable queries, but should be used with caution as it can also easily lead to too complex queries.
I am used to using new, but I can see is a lot more readable with let. 👍
One thing to be aware of with query syntax is that while it looks like SQL, it very much isn't. The rules aren't the same at all.
So this is a CQRS Event Sourcing library? Is the event sourcing part required?
No, it is not required, they are orthogonal to each other. And this is not an Event Sourcing library. In fact, this library does have any DDD/Event Sourcing components. It only contains CQRS components. ;) I have a separate library for Event Sourcing (still in development) which extends the Xer.Cqrs.EventStack package - this should still allow the Event Sourcing library to easily integrate with the CQRS library.
I mean that I usually create objects but not anonymous. For some reason I haven’t used anonymous objects in years...
Only in entity framework. Linq is so much bigger than that though.
Because the construction of the object is an implementation detail. That's nothing that interfaces should cover. They describe a contract that objects have to adhere, but not how that object should be constructed. If you need what you described, then you should make the caller pass in a creator-functor: `Func&lt;T&gt; creator`.
That's not what I mean, I understand why you cannot construct an interface, I'm talking about the interface having declarations for constructors, so that any class that implements them must have a constructor of that form.
Can you provide your use-case (e.g. in pseudo code), as it's really not apparent, at least to me?
[Here's Eric Lippert on the question I think you are asking.](https://stackoverflow.com/questions/9741211/restricting-a-generic-type-parameters-to-have-a-specific-constructor/9741812#9741812) I don't *entirely* agree here (because this is a feature I have occasionally thought would be useful), but the gist is that the feature would be expensive to implement, and provide fairly limited value. In practice, you do what u/AngularBeginner suggested, and add a factory method as a parameter to the code in question. If/when we get that [shapes proposal](https://github.com/dotnet/csharplang/issues/164), though, you could add the method signature to a shape and constrain on it, that way.
Call me crazy but i usually just do `myConcurrentDic[“key”] = value;`
F# has something resembling this (as mentioned in one of the replies to Eric Lippert's answer). In F#, you can constrain a generic parameter on a static method (or operator) with the restriction that this method must be inlined at all call sites. A constructor is more or less just a "special" static method, so it's not a completely foreign concept to the CLR.
The company I work for strictly adheres to lamda usage in our design.... for whatever thats worth to you.
I personally like RAGE_CAPS for constants and I do name constants that way by habit but I think I am in the minority on this one so I have to agree with you -- constants should use `PascalCase`.
If you get to the point where you think that any implementation of your interface *needs* to have a specific constructor, then take a step back. That's a sign that it's time to evaluate the assumptions you put into the interface. Whether the interface is meant to provide a service to access an external dependency like email or provide some kind of serialization, the way a class goes about it should not matter to the interface. So, there are certainly ways to work around the limitation to get what you desire, but first ask yourself if you really want that.
I think the new() constraint begs the question why there isn't constructor constraints that take parameters.
There are cases where a class MUST have a parameterless constructor (.NET data contract serialization, for one). It seems to me to be arbitrary that can be a constraint, but constructors with parameters aren't allowed as a constraint.
What exactly are you wanting to do? Something like this? public TObj GetMyObj&lt;TObj&gt;(SomeComplexObject constructorParameter) where TObj : IMyObjectInterface { return new TObj(constructorParameter); //pseudo-code } ... but you want the interface to define a constructor? The constructor is only a concern of the implementation since you will only ever use `new` on a concrete implementation -- you'll never do something like `var myObj = new IMyObjectInterface()` unless, of course, you named a class `IMyObjectInterface` (which I hope you haven't). If you need interfaces that require certain contstructors then you need to use abstract classes.
Delegate the construction of the interface to a factory interface or delegate type. You *could*, then, constrain the interface so that the implementing type must implement both interfaces, but that's gross and ugly (so don't).
I don't know if Visual Studio will rename automatically. I use ReSharper (highly recommend) in Visual Studio and it will rename for you.
&gt; It’s also a can of worms, what if you have two interfaces that require different constructors? A mess. Well, it’s supported and works ok in Swift, so it’s not something that can’t be done. It is a bit strange, sure, as it’s kind of adding a factory API to the type. 
In Swift (which has this feature), this allows things like a protocol (Swift name for interface) called ExpressibleByStringLiteral, which means you are guaranteed a constructor which takes a string argument. Arguments are named in Swift, so collisions are not likely as they would be in C#.
You mean this: lock(myConcurrentDic) { myConcurrentDic[“key”] = value; } :)
I would add the new() constraint as well. You can constrain the generic to implement an interface and constrain its implementation must define a default constructor. ``` public class MyGenericClass&lt;T&gt; where T : IComparable, new() { // The following line is not possible without new() constraint: T item = new T(); } ``` From https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/where-generic-type-constraint
I would think twice about having an interface over a class that can be loosely described as a data structure. A better approach would be mapping a rich entity that has data into some type of DTO which can be serialized only just before it must be done. 
I am at work now and tried it out -- VS 2017 without resharper does know to rename variables used in string interpolation. Nice.
I was introduced to interfaces in my second programming course in college. Our instructor had us implement a solution to a problem and create and implement an interface to do it. The instructor told us interfaces were 'to force a certain type of behavior' but couldn't expound much more than that on it and so I did the assignment and made a simple interface but I didn't really understand why. In my professional career, I've since come to see their incredible utility and I'll venture an answer to your question. An interface is a way to specify the behavior of an implementation to keep your code as abstract as can be. So for an interface to allow constructor specifications or limitations might be a bit of an overreach for the intended purpose of an interface. The constructor would have to accept generic parameters or else you're tying the interface to an implementation and thus possibly defeating the intention of the interface. Also, I think interface's were intended to be used to "remote control" an implementation, not get involved in it's implementation in a concrete class which specifying constructor information might do. All that said, I've ran into this issue before and also wondered why this wasn't possible. I admit these aren't great answers but it's what I came up with when I encountered this problem in my own work. 
I know everyone here is suggesting VSCode, but it does not support proper intellisense for razor views. Right now the only way to get that is Rider from Jetbrains. It's been almost 2 years since .net core came to osx and linux and i can't believe there is still no official tooling from microsoft that supports intellisense on razor views.
The rhythm strip is pretty much an Array&lt;Point&gt;, rendered with a line between each pair of points. The points are generated by taking a concatenated set of lines and Bézier curves. So pretty much you just need to generate the points to resemble a cardiac rhythm strip, find out what your framework (eg C# WPF is what I’m using) uses to draw to the screen, and iterate the points and draw them into a control. The code is at https://github.com/tanjera/infirmary-integrated if you want to browse around. If you have a portion you’re looking for, just ask. 
Figured it out. Double clicking the errors in the error list was opening a cached version of the file or something.
Theory: you're just a fucking idiot.
Nice piece of software. Congrats! I'll try it.
I would have to agree. With multiple `from` statements, VS2017 has great automatic indentation to keep things visually tight. Really easy to follow.
https://blogs.msdn.microsoft.com/alazarev/2017/12/29/disposable-finalizers-and-httpclient/
I may be missing something from the implementation you had in mind, but query syntax remains an IQueryable until you iterate over it, i.e., .First(), .ToList(), etc. You can still pass it around. I typically set up a generic repository this way, something like this: return from var element in _db.Get&lt;T&gt;() select element; Then in a service, I apply business logic: var someSet = (from var element in _repo.Get&lt;SomeType&gt;() where element.SomeValue == someCriterion select element).ToList(); The query doesn't execute until `ToList()` gets called.
There has to be an explanation as to why this isn't enabled by default.
Is this related? If so, I'm missing how...
Your code: async Task DownloadAsync(string url) { var httpClient = new HttpClient(); var content = await httpClient.GetStringAsync(url); Console.WriteLine(content); }
If doing it this way then may I suggest this small little change? .GroupBy(x =&gt; x.datetime.Ticks / TimeSpan.TicksPerMinute) --- edit: Actually, what's to stop you from just doing: .GroupBy(x =&gt; x.datetime.Minute) You get the same result.
Oh, it didn't even cross my mind. I was just looking for something async as an example. [I updated the code to use a shared instance](https://github.com/i3arnon/i3arnon.github.io/commit/da5ca3a5a266414d457740c4d301d48e1ce16cea) Thank you.
Maybe not gaps in other tools, but I don't think you will find a single piece of software that does all of these things. I think OP was wanting something that combined all of those features. I can see the usage for it. I had to make something kind of similar for a previous employer.
Personally, I wouldn't use C# for scripting. Powershell is a much better alternative.
Wow. An article about two non-trivial aspects of programming and how they play together, with non-contrived examples that actually showcase their potential usefulness, AND the author calling out that this is niche and not something you should use "all the time" like some sort of evangelist. All in just a few short paragraphs on a single page. If anyone is looking for a case study on what "quality content" is, take a peek. Thanks, OP. This was a great read.
I'm a network admin and we had batch files on our notebook to change ip addresses (to configure switches) and my colleague asked me if i could write a small application to do this. So i created a tool where you can add/edit profiles for different networks (static ips, dns server, dhcp, etc...). This is how it looks now: https://github.com/BornToBeRoot/NETworkManager/blob/master/Documentation/en-US/NetworkInterface.md Since i had written only small tools until now, i thought that would be a cool project to learn c# and wpf (it is my first wpf project). So i wrote an ip scanner next, to detect the switches in the network (i already had one on powershell: https://github.com/BornToBeRoot/PowerShell_IPv4NetworkScanner) Port scanner to show which ports are opened on our server... Then I implemented many tools that I use every day. And yes i know, some tools like ping/tracert/nslookup are already there in cmd/powershell :) I use a lot of tools like RDCMan/VNC/SuperPuTTY and i thought it would be great to have the functionality united in one application. In my remote desktop I can open several sessions as a tab and even drag them out.
Exactly, i want the tools combined in one interface!
Wow, thanks! This really helps.
C# isn't really a great scripting language because you need a build system to generate an executable that you can then execute. Theoretically you could make your own interpreter to call via the #!, load DLLs, then execute the script body. But I wouldn't recommend that (unless the mono project already has a similar tool).
 What? He's correct.
Removed: Rule 5.
Ah ok, guess I'm imagining the C# scripts running via Roslyn's Scripting API I have running in production.
.... once again, roslyn, is not "running in production". Roslyn is a compiler. Period. It has an extension of API's written to use (in various ways), of which the CoreCLR is still what is running it. Roslyn in no way "runs" code.
.NET data contract serialization, though, is built into .NET (see [DataContractSerialier](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractserializer)). It's very useful for simple serialization scenarios, due to implementation ease.
C# scripting can be done with this .net core 2 library https://www.strathweb.com/2017/11/c-script-runner-for-net-core-2-0/. Shell languages will probably be more terse, but it is possible.
Why was these features designed with duck typing, though? Wouldn't it make more sense if it expected an interface - actually requiring IEnumerable&lt;T&gt; for foreach would be perfectly logical.
No looking back there is no tone. I am likely being up voted because it's not a top level comment so it doesn't need to add to the main discussion but it is an answer that people agree with on the separate discussion started by the person I replied to.
I'd stick with python, maybe download an IDE like pycharm or turn whitespace characters on in your editor? https://www.jetbrains.com/pycharm/download/#section=linux
In rare cases, it's desired to dynamically invoke a constructor. The problem is you can't enforce parameter constraints, so you end up doing something more or less like this: public T Foo&lt;T&gt;(SomeParameters parameters) { Type type = typeof(T); try { // Hope this exists. ConstructorInfo constructor = type.GetConstructor(new[] { typeof(SomeParameters) }); return constructor.Invoke(parameters) as T; } catch(Exception exception) { // Oops. } } It would be useful in such cases if you could simply specify `new(SomeParameters)` as a constraint: public void Foo&lt;T&gt;(SomeParameters parameters) where T : new(SomeParameters) { return new T(parameters); } 
Removed: Rule 3. As it stands, it's not a terribly good question to answer. In general, you could write it OOP style and make classes that represent the different aspects of the documents. But other than that, it's a pretty broad description. Especially as you've already written a version before, it's hard to compare/suggest a different or better architecture without being able to see the original you're coming from. Finally, this isn't so much a C# question as a general development question; in that sense, the question may be better suited for /r/learnprogramming.
This is actually very awesome, thank you.
&gt; what if you have two interfaces that require different constructors? Why would that be a problem, though? Constructors are a type of method, and interfaces can already have issues with colliding methods.
&gt; I say that we should either do the whole feature or don't do it at all. If it is important to be able to restrict types to have particular constructors, then let's do the whole feature and restrict types on the basis of members in general and not just constructors. What's curious there is that the feature is already implemented, albeit in a very limited manner (`new()`). And then, if you want to discuss not doing things 'all the way', interfaces allow you to define method signatures for everything but a subset of 'special' methods. It's also interesting that the `new()` constraint includes parentheses, as if the future were left open for parameter lists. Though I guess it could be argued that syntax adds clarity. An alternative to constructor constraints would be allowing them to be defined on interfaces themselves. public interface IFoo { new(SomeParameters $parameters); } But I'd much rather see shapes before any of this.
Is PS ported to linux??
You could not do the extension method thing if it were an interface :) One reason that comes to mind is that foreach existed before IEnumerable&lt;T&gt; and generics in general, so it would require boxing. There are also more occurences of duck typing in c# - eg. the collection initializer syntax just requires something that has a method called Add. Translating query expression linq syntax also involves duck typing, I believe.
The common factor seems to be that they're all things which are compiler syntactic sugar, not things built-in to the .NET runtime at the CLR level.
oOooO that sounds like a fun job. Too bad you aren't in Columbus, Oh.
Yeah, more or less. Powershell Core is built on top of .NET Core and has most functionality you'd expect. [Here's the Github repo](https://github.com/powershell/powershell)
Neato, thanks for the linky.
Because the compiler can bind these features at compile time regardless - it can perform static analysis to look for an implementation of the `GetAwaiter()` method that is relevant to that call site, and the emit IL that invokes that implementation. No part of the design of this feature requires communication to the compiler to happen through an interface. In the end, this is a more flexible implementation - instead of this feature being bound to a specific type (Task), or a specific substitutable type (IAwaitable), this feature is bound to *any* type that defines a specific method. ... I sorta just had an epiphany as I was writing this, about the nature of the compiler, interfaces, and the types of contracts we make with ourselves and with the compiler. I apologize if some of this is wishy washy, but it's a revelation I don't know how to communicate just yet. Anyway: In some senses, the compiler is just the adjudicator - it defines how separate parties are allowed to talk to each other, and provides enforcement. In this sense, every class is a separate party - the compiler doesn't care if the class is yours or if the class came from the some other library like the BCL. It just verifies that classes talk to each other in an agreeable manner. The compiler is a separate, independent entity from classes, even the ones provided by the framework. Interfaces are for defining contracts between classes; they're *not* for defining contracts between classes and the compiler; the compiler only *enforces* these contracts. Interfaces are a shorthand way for you to communicate with the compiler and tell it, *"yes, these substitutions are allowable, thanks"*. Interfaces are, in a way, a mechanism for you to reprogram the compiler into letting you do things that normally aren't allowable. In this sense, interfaces exist as an extensibility mechanism that the compiler provides, to allow you to change its behavior in a limited, specific way. Ok, then, what's that got to do with duck-typing? Well, new compiler features allow you to modify the compiler to do whatever you want - we can choose how you talk to the compiler, and we chose to allow implicit binding of `await` invocation sites to `GetAwaiter()` implementations because that's all we need to do to make this feature's design work. The compiler can figure out how to bind those sites because it can do whatever it wants, and in this case, it'll search the entire set of context around the types involved to find a suitable `GetAwaiter()` implementation. Why would an interface be inappropriate here? Because an interface is supposed to be a contract between your code and some other code, not between you and the compiler. The compiler doesn't need you to talk to it through interfaces, you can be direct with it because it can provide you with whatever language you'd need to communicate with it! I hope that makes some sense.
You needed to know things? I don't get your angle in here. 
Won't the Tasks be run sequentially in an enumerable? That's kinda not cool.
I write my scripts in c# when possible. You put your script in a .csx file, then feed it to a runner, aka csi or dotnet script. This is analogous to the powershell.exe runner for ps1 files. My scripts are used for various purposes; syncing NAV Employees table with Active Directory, pulling alerts out of SCOM and generating IR's in SCSM, syncing UPN's with users' primary email address, etc. This is all doable in posh too, but the availability of LINQ and value tuples, and the clarity of the language make it a joy to work with. Sometimes, posh is a better fit; lots of the cmdlets available for SharePoint Online would be like pulling teeth to replicate in c# script.
I've just started and haven't built a MVP yet but I am planning to have a library for Entity Framework to create audit tables, triggers and jobs for code first approach in the end. Actually I have a good solution already written by Richard Drizin. But he uses T4 templates for creating audit tables. I want to make it a bit more dynamic and extend EF table creation process. I think I will have so many issues with use cases I haven't thought of yet but I'm going on with TDD/ BDD so that I can add them in a proper way as soon as I found. 
It does implement IEnumerable, but in a special way. If your method accepts IEnumerable, it will accept an array. See for example this answer: https://stackoverflow.com/a/2773782
Very true about the extension method, and I hadn't seen that clearly until you mentioned it. I don't really know if I like it though. I think the article might be one of the few scenarios where it makes sense.
Take a look at the methods used for Linq instead of the query syntax. Where, Select, etc all take generic function parameters based upon the underlying object type. The only thing you need to expose to your consumer is that object type and a properly typed generic function which is enforced on the consumer by the type system. Its not about performance (thats a different discussion entirely with linq), its about giving a high degree of query power to the consumer without having to write nearly as much glue code. 
All this is taken care of by Roslyn Scripting API.
I may have misunderstood what saddertadder was saying.
For the code you've demonstrated, wouldn't an extension method on String (or the object that you are inspecting) give you something that can be passed to the where clause.
&gt; Head First Design Patterns I need to dig that out of my backlog and put it back on my TODO list again. (So few hours in the day, so much to learn. And I've been doing this for 25+ years now.)
Are you sure about that? [`System.Array`](https://docs.microsoft.com/en-us/dotnet/api/system.array) is the base class for all arrays. All arrays regardless of the type support: * `System.Collections.IList` * `System.Collections.Collection` * `System.Collections.IEnumerable` Single-dimension arrays also support these at runtime: * `System.Collections.Generic.IList&lt;T&gt;` * `System.Collections.Generic.ICollection&lt;T&gt;` * `System.Collections.Generic.IEnumerable&lt;T&gt;` * `System.Collections.Generic.IReadOnlyList&lt;T&gt;` * `System.Collections.Generic.IReadOnlyCollection&lt;T&gt;` 
Um. Perhaps I'm dense. What is the point of this, exactly? I'm "familiar enough with async/await", and I'm confused.
Getting started has been updated. :)
You can accomplish this with expression trees and containers.
Use a wait handle.. ManualResetEvent and AutoTesetEvent. 
That is pretty cool sounding. Is the engine pretty generic with everything about the game being in the DB?
I don't use it for system maintenance, but I do use it for all my random development related scripts. Linqpad is fantastic.
In case of `await` and it would make something like `ValueTask&lt;T&gt;` impossible... Well, not technically impossible, but at least pointless. `ValueTask&lt;T&gt;` is a struct, but by using an interface you force a virtual call instead of a static call (it's slower performance) and it would force boxing (and the whole point of this type is that it does not produce garbage).
I'd assume that constructor requirement is part of the interface because the objects passed are required to meaningful fulfill the purpose of the other methods of the interface. What else would be the point of the constructor? And with this assumption, if you now have two interfaces with different constructors you suddenly are able to construct the object with constructor of interface A, but it lacks the necessary data to do its job for interface B. Technically it's no problem. But is it practically? Does it make sense?
This is not what he asked about. He wants to specify a requirement for constructors that must match a specific signature. This is not supported, neither by C# nor by the CLR.
What do you exactly mean with configure different switches? The function i described, can change the ip off your windows pc/notebook (with profiles or manually) to be in the same subnet as the switche. The SSH function is not implemented yet. And then it would be hard to test, because i have only a small number of different models and always from the same manufacturer. If you use foundry/brocade, check out this powershell module/script: https://github.com/BornToBeRoot/PowerShell_BrocadeICX
https://github.com/ashmind/Unbreakable is the solution used for sharplab.io, and I remember seeing the author [ashmind](https://twitter.com/ashmind) ask his twitter followers (which include some high and mighty figures in Roslyn / .NET Open Source) to break it. The results of this should be super interesting if you're trying to build a similar thing.
That's exactly the point I was trying to make when I was interviewed on the [Channel9 On .NET show](https://youtu.be/w4BEpUymI-c?t=38m10s). I also usually prefer fluent but I gave what I think is a classic example where if you look at the same problem written with fluent vs. query comprehension, the query style just wins hands down.
Yeah, or instead of rolling your own socket library just use an existing one that is also be used in the industry and save yourself a lot of headache and pain.
&gt; Because the construction of the object is an implementation detail. That's nothing that interfaces should cover. They describe a contract that objects have to adhere, but not how that object should be constructed. This sounds like gatekeeping to me. Your argument is solely on what *you* think an interface should be, which is coincidentally the status quo, and you arbitrarily decide that constructors are implementation details.
Yes sure, but he shows it in detail, I have never found in a video on the internet before!
Hey, I've tried to keep as much of it as generic as possible, but the Logic layer still has to necessarily have a lot of understanding of the model in order to determine the behaviour of the various entities, in terms of actions that can be performed for each entity etc. What is generic are things like definitions of "Races" (i.e. Humans, Klingons, Thargoids, Methanoids, or Cylons!), their tech trees / research available, types of bases they can construct, equipment they can manufacture and designs and types of ships they can produce. You can even customise galaxy generation - frequency of types of stars, the types of planets to be found around what types of stars, numbers of planets, moons, resources available per planet, or gas giant, or asteroid cluster, etc. So in terms of basic mechanics of ships and bases, that's fairly hard-coded, but there's a fair amount of customisation too. I've envisioned creating spin-offs for things like Star-Trek themed versions, or Battlestar Galactica themed versions etc., but the basic gameplay mechanics are the same: mine resources, research technology, build ships, construct space stations, transport resources (including automated trade routes), colonise other habitable planets (if that atmosphere is tolerable to your race), form alliances, destroy enemies :-)
Create a class that contains a "FlagName" and a list of numbers for its pool: class FlaggedNumberSet { public string FlagName; public List&lt;int&gt; Numbers; } You can store a collection of `FlaggedNumberSet` objects (as a `List`, `Dictionary` keyed by `FlagName`, whatever). Then you can iterate on the chosen flags (e.g., "A and C"), and build up a combined number pool: List&lt;int&gt; numberPool = new List&lt;int&gt;(); List&lt;FlaggedNumberSet&gt; includedSets = GetFlaggedNumberSets("A", "C"); foreach(var flaggedSet in includedSets) { foreach(var number in flaggedSet.Numbers) { numberPool.Add(number); } } The above code can be made terser with LINQ: List&lt;int&gt; numberPool = GetFlaggedNumberSets("A", "C").SelectMany(flaggedSet =&gt; flaggedSet.Numbers).ToList();
Re: DateTime.Minute The Minute property of System.DateTime ranges from 0-59, being the minute component of the current date and time value. Consequently `new DateTime(2018, 1, 2, 12, 1, 3, 1729).Minute == new DateTime(2015, 12, 31, 13, 1, 5, 1337).Minute` is true, even though every other component differs. So, it works for this data set, but probably doesn't solve the problem.
Just another article about threading... move on.
Are you open to contributors? I've been looking for an open source project to work on, and this seems like something I could help with. I'm a sysadmin gone full time dev :)
This may sound crazy but possibly go look at some old mud code bases in C. This is where it all started. I can remember playing wow years ago and realising they stole so much fro the original muds.
Interesting! I'm looking forward to trying this out tonight. =)
This is View-&gt;Server Explorer in Visual Studio?
This is amazing! I've been struggling trying to find a solid book on C# for a refresher and to learn new techniques. This is perfect!
Perhaps you entered the wrong credentials or server location in there. Regardless, this sounds more like a Visual Studio or SQL configuration issue, not a C# issue.
I can't build the solution: `Error MC3074: The tag 'AxMsRdpClient9NotSafeForScripting' does not exist in XML namespace 'clr-namespace:AxMSTSCLib;assembly=AxMSTSCLib'. Line 15 Position 14. (15, 14)` Where are you getting the the `AxMSTSCLib` and `MSTSCLib` from? You may want to add them to the solution.
You can start with these extensions: * C# * C# Extensions * C# FixFormat * C# XML Documentation * XML Tools
Just use winsock. Ez. 
If your Linux users will have .NET Core installed then you don't need to do anything special and just build your app for release with dotnet publish --configuration Release If your Linux users do NOT have .NET Core installed then you need to build with dotnet publish --configuration Release -r linux-x64 You can read more details in [my blog post](http://www.michaeliscoding.com/how-can-i-compile-a-console-app-so-i-can-send-it-to-other-linux-users/)
Wow thanks guys! I used to use the C# and Oracle Database notes especially heaps, if you have any suggestions on how I can improve the books, please let me know :)
Hi, the AxMSTSCLib and MSTSCLip should build on every debug / release. I call a powershell script in the pre build event command line in visual studio. The command: PowerShell.exe -ExecutionPolicy Bypass -NoProfile -File "$(ProjectDir)..\..\Scripts\PreBuildEventCommandLine.ps1" "$(TargetDir)" And the script: https://github.com/BornToBeRoot/NETworkManager/blob/master/Scripts/PreBuildEventCommandLine.ps1 When you build the tool, there should be the follwing output in VS: -- Change location to: C:\...\bin\Debug Creating MSTSCLib.dll and AxMSTSCLib.dll ... Generierte Assembly: C:\..\bin\Debug\MSTSCLib.dll Generierte Assembly: C:\..\bin\Debug\AxMSTSCLib.dll -- Which Windows and Visual Studio version are you using? Is there an error in the Build-Output (not Debug)? 
You can assign each string a weight. You can modify the weight of each string based on the flags that are set. Then you just pull a random weighted value. class Opt { int Weight; String Text; Opt(String txt){Text=txt;Weight=0;} } class Thing{ public list&lt;opt&gt; allchoices=new List&lt;opt&gt;(){ new Opt("String1"), new Opt("String2"), new Opt("String3"), new Opt("String4"), new Opt("String5"), new Opt("String6"), new Opt("String7"), new Opt("String8"), new Opt("String9"), new Opt("String10") }; public String Pick(bool boolA, bool boolB, bool boolC) { foreach(var c in allchoices) c.Weight=0; if (A){ allchoices[0]+=100;allchoices[4]+=100;allchoices[7]+=100; } if (B){ allchoices[1]+=100;allchoices[2]+=100;allchoices[4]+=100; } if (C){ allchoices[5]+=100; allchoices[6]+=100;allchoices[7]+=100;allchoices[8]+=100; } int totalWeight=0; foreach(var c in allchoices) totalWeight+=c.Weight; if (totalWeight&lt;=0) throw new exception("No valid choices"); int p=rng.next(totalWeight); int currWeight=0; foreach(var c in allchoices){ currWeight+=c.Weight; if (currWeight&gt;p) return c.Text; } Throw new exception("Getting here should not be possible"); } } You can associate each set of choices with a group that you combine... void init(){ List&lt;List&lt;String&gt;&gt; _allStrings=new List&lt;List&lt;String&gt;&gt;(); _allStrings.Add(new List&lt;String&gt;(){"String1", "String4","String7"}); _allStrings.Add(new List&lt;String&gt;(){"String2","String3",String5"}); _allStrings.Add(new List&lt;String&gt;(){"String6","String7","String8","String9"}); } String pick(bool A, bool B, bool C) { var _validChoices = new List&lt;String&gt;(); if (A) _validChoices.AddRange(_allStrings[0]); if (B) _validChoices.AddRange(_allStrings[1]); if (C) _validChoices.AddRange(_allStrings[2]); if (_validChoices.Count()&lt;=0) Throw new exception("No valid choices"); return _validChoices[rng.Next(_validChoices.Count())]; } 
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/introduction-to-linq-queries
You can do it with reflection. I would agree there is no compile time support though. Ex: T MyMethod(string param1, int param2) where T : IMyInterface { return (T)Activator.CreateInstance(typeof(T), param1, param2); }
Also good suggestions. I especially like the second one, because it has all the strings and the way they are grouped in one place for overview.
Win7, VS 2017, here's the output: ` 1&gt; Change location to: C:\Visual Studio\Projects\NETworkManager\Source\NETworkManager\bin\Debug 1&gt; 1&gt; Creating MSTSCLib.dll and AxMSTSCLib.dll ... 1&gt; Cannot index into a null array. 1&gt; At C:\Visual Studio\Projects\NETworkManager\Scripts\PreBuildEventCommandLine.ps1:46 char:32 1&gt; + Start-Process -FilePath $files[ &lt;&lt;&lt;&lt; $files.Length -1].FullName -ArgumentList "$($Env:windir)\system32\mstscax.dll" - 1&gt; Wait -NoNewWindow 1&gt; + CategoryInfo : InvalidOperation: (-1:Int32) [], RuntimeException 1&gt; + FullyQualifiedErrorId : NullArray 1&gt; `
Linq is great. Here are some examples you can learn from: https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b
In addition to thomaslangston's link, check out the article [Query Syntax and Method Syntax in LINQ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq). If you want to dive deep into a better understanding or implementation details, [Jon Skeet's Edulinq series](https://codeblog.jonskeet.uk/category/edulinq/) is excellent.
The primary reason to not do what you're asking for is * *everything* is already done in bash; *especially* serious system maintenance * and Python, but probably less so * the whole CLI on Linux is made to work with CLI utilities, the way these are made to be used; using something else adds friction; do you want that? (OTOH, if you do not know bash, the friction is on the side of "I don't know bash") Disclaimer: not particularly good at any kind of scripting and think that PowerShell (or other non-text shell) is a godsend compared to "everything is text" shells like bash.
This is what keeps me around, the fact that the IDE is amazing.. compare it to Eclipse.. which is nice and all but it's no VS.
as you can see, I get squigglied to death here as I have 3 major problems: I cannot seem to create an array return type in methods for either string or int, and WelcomeScreen method cant see the other two methods (although I think its because the methods arent currently working). 
&gt; interfaces allow you to define method signatures for everything but a subset of 'special' methods. Interfaces in C# don't allow you to define signatures for static members, at present, and they don't allow you to specify fields of any sort. If they did the former, I'm not sure we'd need the shapes feature (we wouldn't need all of it, anyway). Operators, conversions, and constructors would all be static members, either by necessity (a constructor creates a instance, so it doesn't really seem sensible to call it on an instance that already exists, except in some specialized uses that can be adequately managed through methods) or convention/design (operators and conversions are defined statically so they can be used with nulls, if needed).
Best way to familiarize yourself with LINQ (IMHO obviously)? Write your own. Read up on the following if you're not familiar with the concept: 1. IEnumerable&lt;T&gt; 2. yield keyword (especially deferred execution) 3. extension methods Write Select and Where methods. See if these work (make sure you comment out `using System.Linq;`). Enable LINQ again and check if it's still working. IMHO it's the best way to understand the concept.
&gt; which case, perhaps your method names would be better renamed as something like GetFilmNumbers() and GetFilmNames()? Ok let me try all of the suggestions you mentioned. I think I see what you mean about one of the problems. (Im still doing stupid stuff here). I believe also that I am trying to return a whole array and you can only return one value with a method so this simply wont work.
I very much understand why this would be useful (I've written code like that; it's a pain in the butt). Thing is, the existing `new()` constraint is implemented using reflection, so it comes with some potentially surprising overhead. The trivial extension of that to an arbitrary set of arguments doesn't seem like it takes all that much work, but it puts some extra load on the compiler, and is still going to turn into that same reflection approach at run-time, so it's not going to *perform* better than having the method take a factory delegate, instead. In that light, requiring a factory delegate is probably the correct, general solution, and the pit-of-success philosophy might actually be an argument against extending the `new()` constraint. What I wonder about is why the compiler doesn't make an attempt to resolve the constructor statically, but maybe that was deemed an undesirable optimization in the face of needing to support run-time resolution.
I just realized I misread the question and thought this was about getting a set of numbers. It's no harm done though, just instead of `List&lt;int&gt; Numbers`, you can replace it with `List&lt;string&gt; Strings`. Similarly, the `List&lt;int&gt; numberPool` should be a `List&lt;string&gt; stringPool`. Everything else is the same. Then grabbing a random string becomes: List&lt;string&gt; stringPool = GetFlaggedStringSets("A", "C").SelectMany(flaggedSet =&gt; flaggedSet.Strings).ToList(); Random random = new Random(); //or wherever your instance of `Random` is string randomString = stringPool[random.Next(stringPool.Count)]; If you tweak your class with some helpers: class FlaggedStringSet { public string FlagName { get; } public List&lt;string&gt; Strings { get; } public FlaggedStringSet(string flagName, params string[] strings) { this.FlagName = flagName; this.Strings = new List&lt;string&gt;(strings); } } Setting up your flagged sets might be like: var flaggedSets = new[]{ new FlaggedStringSet("A", "string1", "string4", "string7"), new FlaggedStringSet("B", "string2", "string3", "string5", "string10"), new FlaggedStringSet("C", "string6", "string7", "string8", "string9")}; Dictionary&lt;string, FlaggedStringSet&gt; lookup = new Dictionary&lt;string, FlaggedStringSet&gt;(); foreach(var flaggedSet in flaggedSets) lookup.Add(flaggedSet.FlagName, flaggedSet); //or instead: Dictionary&lt;string, FlaggedStringSet&gt; lookup = flaggedSets.ToDictionary(flaggedSet =&gt; flaggedSet.FlagName); The `GetFlaggedStringSets` method might look like: List&lt;FlaggedNumberSet&gt; GetFlaggedStringSets(params string[] flagNames) { List&lt;FlaggedNumberSet&gt; sets = new List&lt;FlaggedNumberSet&gt;(); foreach(string flagName in flagNames) sets.Add(lookup[flagName]); return sets; } Or more terser: List&lt;FlaggedNumberSet&gt; GetFlaggedStringSets(params string[] flagNames) { return flagNames.Select(flagName =&gt; lookup[flagName]).ToList(); } This gives you some flexibility to add/remove `FlaggedStringSet` sets or tweak the API/methods to make things simpler or easier.
&gt; I believe also that I am trying to return a whole array and you can only return one value with a method so this simply wont work. The "value" you return from the method can be the array itself though. That's one of the things I fixed.
Great. Thank you.
Oh so tell me more about which part of say VC++ has a scripting mode? What about a FORTRAN compiler, where is the scripting mode API? Clearly Roslyn is more than "just" a compiler despite your efforts to shit on it.
You could allow authenticated users to view the profile page and require a "Member" role to access other things. Once the users confirm the address, give them the member role.
&gt; : Good luck putting it altogether! Hopefully it works out for you. Post again if you need help. Try to limit the question though to a particular aspect that's failing, and include the error message. Also try to put all the relevant code in the post submission rather than a separate comment. OK thanks.
Wow. This is going to be the ultimate open world game! 😁 I'd been thinking of using MongoDB to implement a distributed cache for a side project I am using as it sounded simpler that CB (I haven't done with proper databases, SQL or NoSQL). This project sounds very cool!
VC++ isn't a compiler... I'm sorry, it's clear you have no idea what you're talking about. VC++ uses cl.exe to run their proprietary compiler and linker, you would be comparing cl.exe to roslyn, or even csc. VC++ has absolutely nothing to do with any of this. If you can't understand that... this is my last response, please, actually do research before trying to "insult" people. I don't see how I was attempting to "s***" on it. Each part of the system is made to do a certain thing. That's the FIRST principle of SOLID. Roslyn does what it does absolutely fantastically. It does not, however, run code (thankfully).
Alone it isn't even an optimization for value passing parameters if a method or property on the struct is called. given: public struct Thing { public Thing(int id) { Id = id; } public int Id { get; set; } public string SayHello() =&gt; $"Hello from {Id}"; } public class Program { public static void Foo(in Thing thing) { Console.WriteLine(thing.Id); Console.WriteLine(thing.SayHello); } } The method at the end will compile as c#6: public static void Foo([In] ref Thing thing) { var temp = thing; //exactly what you are trying to avoid with the "in" spec... Console.WriteLine(temp.Id); Console.WriteLine(temp.SayHello); } To ensure that doesn't happen, you need to make the struct readonly: public readonly struct Thing { public Thing(int id) { Id = id; } public int Id { get; } public string SayHello() =&gt; $"Hello from {Id}"; } With the obvious implications (You should have readonly structs if you can anyway; mutable structs are annoying) ... --- It is a small micro-optimization for some possible methods when either: 1. the struct in question doesn't have methods / properties that get invoked 2. the struct is `readonly` In other cases the parameter is merely a declaration of intent. I think it is most useful in combination with `Span&lt;T&gt;` dealing with large structs doing things like reinterpreting headers for tcp stack frames and that sort of code.
&gt; Also try to put all the relevant code in the post submission rather than a separate comment. I want to keep this simple as possible and reduce the scope of what Im trying to do here so here goes a new question. I followed your correction of the syntax and now have the array returning a result and no errors. Would it be possible to print this out in console from within the loop? public class Program { const int NUMBER_OF_MOVIES = 5; const int MIN_AGE = 0; const int MAX_AGE = 120; static int[] filmNumber() { int[] filmNumber = new int[NUMBER_OF_MOVIES]; for (int i = 0; i &lt; NUMBER_OF_MOVIES; i++) { filmNumber[i] = ReadInt("Film number : ", 0, NUMBER_OF_MOVIES); } return filmNumber; } //library .ReadInt. ReadString static int ReadInt(string prompt, int low, int high) { int result; do { string intString = Console.ReadLine(); result = int.Parse(intString); } while (result &lt; low || result &gt; high); return result; } static string ReadString(string prompt) { string result; do { Console.Write(prompt); result = Console.ReadLine(); } while (result == ""); return result; } static void Main(string[] args) { Console.WriteLine("Testing"); filmNumber(); string doWeGoRoundAgain; do { Console.Write("Another customer? (Y or N) : "); doWeGoRoundAgain = Console.ReadLine(); } while (doWeGoRoundAgain == "Y" || doWeGoRoundAgain == "y"); Console.ReadLine(); } } } 
I would slightly change your approach. If the numbers of flags are rather short, you could go for an enumeration with Flag Attribute. The such a class could demand a valid flag value und a valid ``ilist`` as ctor args. Make the class immutable, so just provide getter properties and return a copy of the pool. Then provide a nice ``Combine`` operation that *creates* a new instance with the combined flag and the concatenated pool lists. Then you only have one main data structure you can deal with in order to choose a random number from the pools attribute. If the flags has to be dynamically definable, you should consider internally a *set* of chars in order to represent a single flag or combined flags. As an optimization you could check whether a flag is allready included into the instance and return simply *this* instead of creating the same object again. 
So, reading up on C# 7.2's readonly struct feature introduced me to the fact that you can reassign `this` in a mutable struct in C#, which is a) makes sense and b) is a bit unsettling.
Yup, sure. There are definitely many ways that something like this could be accomplished. The declaration of strings, gathering/organization of the pool, and the random retrieval all can be implemented in vastly different ways for a variety of different reasons. The question asked by the OP is pretty vague/broad, and the particular program/development requirements would definitely drive to using one design over another.
For two reasons (as far as IEnumerable goes): .net didn’t have generics when it was introduced and performance. The last bit is because interface calls are more expensive than direct calls. In languages like Swift, which has more powerful generic protocols, this form of duck typing isn’t needed and thus isn’t used. 
Lazy loading is not supported in EF Core, so the whole line can be removed. Initializers are not supported either anymore. Instead you're responsible of initializing the database wherever you consider it fit. For example to execute the migrations, you'd create a context somewhere in your startup file and call `context.Database.Migrate()`.
You've got a long way to go from nothing to passing that exam tbh. I'd suggest studying from other resources also (see sidebar)
https://www.youtube.com/user/jeremybytes/videos I learned LINQ with his videos. If you feel you know the other basics, you can start with his LINQ videos otherwise there are many videos with basics (like generics) that are required to understand LINQ in detail.
Thanks! I will definitely keep working on it... 
It looks as if the "aximp.exe" is missing on your system. Could you open a powershell ise and paste this code: # x86 or x64 $ProgramFiles_Path = ${Env:ProgramFiles(x86)} if([String]::IsNullOrEmpty($ProgramFiles_Path)) { $ProgramFiles_Path = $Env:ProgramFiles } # Get aximp from sdk $files = (Get-ChildItem -Path "$ProgramFiles_Path\Microsoft SDKs\Windows" -Recurse -Filter "aximp.exe" -File) $files if($files.Count -eq 0) { Write-Host "Aximp.exe not found on this system!" return } The aximp.exe should come with the default installation of visual studio... is your installation located outside the program/program(x86) folder? https://docs.microsoft.com/en-us/dotnet/framework/tools/aximp-exe-windows-forms-activex-control-importer
I'm porting Spelunky Classic from GameMaker to OpenGL. I plan to add 60 fps support and peer-to-peer multiplayer. It's been a little tough since GameMaker uses a language similiar to Javascript.
Linq is great especially when you have a properly normalized database in entity framework. Then you can use lazy loading to load an entities related tables. For instance: Dbcontext.Entity1.FirstOrDefault().Entity2.Property; So you don't have to use a join if you database and entities have the proper foreign key relationships defined. (I would suggest using [reverse POCO generator](https://marketplace.visualstudio.com/items?itemName=SimonHughes.EntityFrameworkReversePOCOGenerator) to generate your entity framework classes from a database. Its awesome it save you time writing you code first classes.) Or you can do stuff like var entity= context.Entities.FirstOrDefault(child=&gt;child.Select(i=&gt;i.property).Contains(findThisText)); To do a for loop to loop through all the child elements of an element to find a child element whose property contains some text. So you don't have to use a join if you database and entities have the proper foreign key relationships defined
I find it's a good one to dip in and out of, you can flick through, pick a pattern that you're not familiar or great with and come out 15 minutes laters being a relative expert. I feel you though, my backlog gets bigger with every humble sale.
I think so. 
Linq Pad is an absolutely awesome tool for working with and learning linq: http://www.linqpad.net
Stupid. Look at System.Threading.Timer.
You wouldn't `update-database` your production database. You let the app do it on startup, after it's been successfully deployed.
I want to dig into the idea of magicality in code because this is really interesting, and I have questions/immediate thoughts. To define magical code, is it fair to say that: Magical Code is code that incorporates increasingly less magical layers with the goal of building complex systems/functionality, without sacrificing its general purposeness. (for the rest of this post, I'm assuming that this is a good definition, but let me know if its not) The important part of this definition is the last part: "without sacrificing its general purposeness". As you said, one of the things good programmers do is write reusable code. But as code bases grow, they tend to become more and more domain specific. Therefore, it seems as if the magic arises in a code base's ability to be quite complex but also widely applicable. Based on this, one potential downside I see is bloat. In order to be so widely applicable you'd likely need to include lots of features or outputs that no single use case will utilize all of. Adding flags or options or setup requirements increases the load on the user which in turn decreases how magical the code seems. Have you/your team encountered things like this? If so how'd you solve for them? Im really interested in where you and your team took this idea, and would love to know if there's anything further we can read up on it. Or if there are examples of what you consider particularly magical code floating around to look at? 
I passed 70-483 one month back. I honestly never watched that series from Microsoft. I read the book that Microsoft recommends: [Microsoft Press Store](https://www.microsoftpressstore.com/store/exam-ref-70-483-programming-in-c-sharp-mcsd-9780735676824) It was not a big help. Please note the practice questions at the end of each section are *nothing* like what's on the actual test. The main prep I did for this test was to purchase the 150 question practice test: [70-483 Microsoft Official Practice Test](https://us.mindhub.com/70-483-programming-in-c-microsoft-official/p/MU-70-483?utm_source=microsoft&amp;utm_medium=certpage&amp;utm_campaign=msofficialpractice) For each of the 150 practice questions make sure you have a total and complete understanding of why a given answer is considred correct. For most of the questions, I also put together a working example in Visual Studio.
I was trying to work with the Yahoo sports API to build some stuff to get an advantage in my fantasy baseball league over the summer. It was a nightmare to work with. It's a shame I quit playing fantasy baseball this year.
Removed: Rule 6, spam.
I am familiar with System.Threading.Timer and System.Timers.Timer and timers are not what this accomplishes. I am comparing this to this kind of thing: https://stackoverflow.com/questions/5945533/how-to-execute-the-loop-for-specific-time?rq=1
First I'm going to redefine the term to help you better see how we thought about it, then I'll work on your concern with a real life example. &gt; To define magical code, is it fair to say that: Magical Code is code that incorporates increasingly less magical layers with the goal of building complex systems/functionality, without sacrificing its general purposeness. We defined it more as: Magical code is code that performs a complex task with minimal input from the coder in a way that brings sufficient ease to a specific programming task as to seem magical while making the underlying methodology somewhat opaque to the programmer. The level of magicality is proportional to the opaqueness: very slightly magical methods are relatively transparent and easy to see how the code is doing what it is doing, and in turn do fairly little, while more magical methods are more opaque and harder to see what the code is doing but do more. However, you are caught on the programming with multiple layers of magicality. This is *how we tended to program*, but it was in no way required. I could sit down and, in theory, write a highly magical library from scratch with no underlying layers. Let me give you examples of both. Please take a few minutes to watch this video. It has two minutes of me programming, and two minutes of me yammering at you about it: https://www.youtube.com/watch?v=IT8vVAFXJGw Now let's talk about what you saw. At the beginning of the video I mentioned very quickly that the object would be a subclass of the business ("biz") object. just that one tiny action automagically brought in the interface generating (with AJAX) functionality. So when you later saw me say: &lt;do change_name.&lt;htm_inst _subject/&gt; /&gt; to generate the whole interface, that was all from subclassing biz. This is a *highly magical* function, because it's examining your method, determining what interface elements the method needs, and generating output including the HTML form elements and the Javascript code to make them work with AJAX. You really can't guess from looking at that how it works, right? Underlying that code is the code which looks over the method to determine which interface elements it needs and calls the next layer down, which is separate methods to generate each element type of the form. (Could be any HTML form element type.) One of the things that's not transparent in that is that there is metadata you can place on the method to specify exactly what form element you want used for what, or you can even select a custom subclass of an element if you want one customized. (or you can provide metadata to an existing element code so it can adjust things like appearance, CSS, color, etc.) These individual-element methods include the code which ties them to AJAX. (It's not clear from the video, but as you type in the text box your input is stored on the server *immediately*, and when you press the button it merely sends a message to the server saying "The user pressed this button!" and the server then decides how to react, by sending screen updates with AJAX.) (Part of our philosophy in creating this is that because it's built on layers which are capable of taking metadata for programming, you can write something with highly fast and simple code like shown, then come back later to replace it with less magical code from the underlying layer, or customize it, etc. Ruby on Rails has the idea that it can build everything for you. So can this, but with our system you could later customize to your heart's delight or replace parts entirely.) Below *that* of course is code which generates the text of the form elements and the form tags. Now conversely let's examine the last two things I did, the call to &lt;server/&gt; and the call to &lt;open_browser_window/&gt; . &lt;server/&gt; is a pretty magical element - really, you can't know much about how it works - and there are no layers under it, it directly calls methods written in the language underlying the interpreter. (This happens to be Java.) &lt;open_browser_window/&gt; is similarly close to the underlying layer with nothing really under it, but it has *one* step, which is kinda obvious, so there's really nothing hidden so it's really not magical, even if it is kinda cool. I think you would agree that code which can automatically generate user interfaces or individual elements thereof is pretty spiffy, general purpose code. Because we built this using existing standards (AJAX, HTML, HTTP) it's reasonably lightweight, because it could leverage stuff that was already there.
How do you plan on consuming this? You polling every day for your teammates and performing calculations after you get the data back or are you using it for real time lookups? I am probably going to use your wrapper for a mobile app I have in my head. This is awesome thank you!
I think I get it. The goal is to improve on the StackOverflow answer by getting rid of declaring the stopwatch on a separate line? For what it's worth, I think the while loop with the stopwatch on its own line is easier to read and clearer in its intention at a glance. It's definitely a neat trick, though.
`--cross default` is just going to compile for the current system. Cross-compiling requires specifying the target system and having the appropriate toolchain installed. You can run `mkbundle --local-targets` to see a list of available cross-compilation targets.
You need a method which takes the film array, and the movie number, and returns the corresponding film. I made some changes to your code * renamed `GetFilmName` -&gt; to `GetFilmNames` since it returns an array of film names, not a single name * renamed `doWeGoAroundAgain` to `repeat`... keep variable names short and sweet * simplified the repeat check to a single comparison using `toLower()` (ie `replace.toLower() == 'y'` instead of `replace == 'y' || replace == 'Y'` And the bit you were looking for: * created the method `GetFilmName(string[] films, int movieNum)` which takes the `filmNames` array and selected `movieNum` and returns the corresponding filmName: // params: // films - an array of film names // the film number // // returns: // the corresponding film name from the array static string GetFilmName(string [] films, int movieNum) { // subtract 1 from movie number since array indexes are 0 based int index = movieNum - 1; return films[index]; } You'll call it like this: string filmName = GetFilmName(filmNames, movieNum); **So the full program:** namespace MyArraysReturnMethod { class Program { //***************Methods*********************** const int MIN_NUM_MOVIES = 1; const int MAX_NUM_MOVIES = 5; static void DisplayWelcomeScreen() { Console.WriteLine("Welcome to our Multiplex\n" + "We are presently showing:"); } // renamed GetFilmName -&gt; GetFilmNames static string[] GetFilmNames() { string[] filmNames = new string[MAX_NUM_MOVIES]//; { " 1. Rush (15)", " 2. How I Live Now (15)", " 3. Thor: The Dark World (12A)", " 4. Filth (18)", " 5. Planes (U)" }; return filmNames; } // params: // films - an array of film names // the film number // // returns: // the corresponding film name from the array static string GetFilmName(string [] films, int movieNum) { // subtract 1 from movie number since array indexes are 0 based int index = movieNum - 1; return films[index]; } static void DisplayFilmNameArray(string[] filmName) { foreach (var name in filmName) { Console.WriteLine(name); } } static void CustomerMovieNumber(out int movieNum) { movieNum = ReadInt("Please select a movie ", MIN_NUM_MOVIES, MAX_NUM_MOVIES); } static void CustomerAge(out int age) { age = ReadInt("Please enter your age ", 0, 120); } //library ReadString, ReadInt static string ReadString(string prompt) { string result; do { Console.Write(prompt); result = Console.ReadLine(); } while (result == ""); return result; } static int ReadInt(string prompt, int low, int high) { int result; do { Console.Write(prompt); string intString = Console.ReadLine(); result = int.Parse(intString); if (result &lt; low || result &gt; high) Console.WriteLine("Invalid Range..."); } while (result &lt; low || result &gt; high); return result; } //*************MAIN METHOD****************** static void Main(string[] args) { // rename filmName -&gt; filmNames string[] filmNames = GetFilmNames(); // rename doWeGoAroundAgain -&gt; repeat string repeat; do { int movieNum; int age; DisplayWelcomeScreen(); DisplayFilmNameArray(filmNames); CustomerMovieNumber(out movieNum); CustomerAge(out age); // call new method to get corresponding film name string filmName = GetFilmName(filmNames, movieNum); Console.WriteLine("You have selected : " + filmName); Console.Write("Another Customer? (Y or N) : "); repeat = Console.ReadLine(); // change repeat to lowercase and check once } while (repeat.toLower() == "y"); Console.ReadLine(); } } } 
I suggest string interpolation syntax. Console.Write($"my string contains text and a variable who's value is {variable}, and a float who can have the format defined like this {floatVar:F3}"); I didn't look at the rest of your code.
thank you! One difference between this and a while loop is that you can optionally specify a wait interval, so if you want to just poll a service for 10 seconds and move on, you don't dos them. :)
Reckon you could thread.sleep at the end of the while loop. 
Thanks for that info. I've been google around without much luck. Any thoughts on addin additional system targets? I.e. can I add Linux as a target to my OSX system. As I say I am pretty much positive I did this without issue using mono 2.0, everything seems to have changed with Visual Studio Community and or mono 4.0 etc. Thanks again for your comment, very helpful. 
Weird. Why not just Thread.Sleep(10 * 1000) ?
I should have put the { } in the title, but I thought it would be implied.
Timers accomplish this better in most cases. `Thread.Sleep()` prevents the thread from doing useful work which is inefficient. 
On one hand, it's not particularly smart. One can put whatever they like in the third part of the "for", surely you can't call this realization "genius". On the other, that Sleep is hiding the true intention of the code, which is to wait *after* the {} body of the "for" statement is finished (and before the next iteration). Hiding the intention is just poor style. There should be a big fat reason to do so. tl;dr cute isn't genius, but going overboard to stupid isn't called for either.
EF contexts are not designed to live for long. The absolute longest it should live is for the duration of a web request. Don't only create it once, aka singleton.
Btw. you can just take the two .dll's from my releases... https://github.com/BornToBeRoot/NETworkManager/releases Copy them to "bin/debug" (or "bin/release")
Why?
I have a feeling that you should be using `UseShellExecute = false` - you're starting a shell yourself, you don't need dotnet to do it for you. Then as the SO post mentions, need to `RedirectStandardInput = true` then proxy the keypresses from your C# code to the stdin stream of the process (it won't automatically pick up your keystrokes).
Cool... looks like you've moved on to arrays... Line 9: no longer needs a MAX_NUM_MOVIES, you can use the ".Length" to see how many are in the filmName array. Advantage is you can add, reorder and remove titles without having to renumber the Max_NUM_MOVIES or associate the title to the number. For example, imagine if you needed to put "Planes" at the #1 position, now you have to manually renumber all the titles. Additionally you can use syntactic sugar to initialize the array. Instead of this: string[] filmName = new string[MAX_NUM_MOVIES]//; { " 1. Rush (15)", " 2. How I Live Now (15)", " 3. Thor: The Dark World (12A)", " 4. Filth (18)", " 5. Planes (U)" }; return filmName; Write it this way: static string[] GetFilmName() { string[] filmName = new string[] { "", "Rush (15)", "How I Live Now (15)", "Thor: The Dark World (12A)", "Filth (18)", "Planes (U)" }; return filmName; } This addresses 2 issue. Because arrays are 0 (ZERO) based, if you put an "empty" array there, the numbers should correspond to the movie. Now the DisplayFilmNameArray could be written as: static void DisplayFilmNameArray(string[] filmName) { for (int i = 1; i &lt; filmName.Length; i++) { Console.WriteLine($"\t{i} {filmName[i]}"); } } Lastly, you never used the function ReadString and should remove it.
That I am afraid is not an option, the corporate network doesn't allow the download :-(
.NET assemblies (generally a .dll or .exe is a single assembly) contains any information required to link and define entry points, so there is no need for a header file or link library because the information provided by both of these are baked into the .exe/.dll file. Instead, you just add a compile-time reference to the .dll or .exe file you need. NuGet is actually separate from this. It helps you fetch and install libraries. It's either invoked through `nuget.exe` or via Visual Studio. It should read `Packages.config` and more recently, `&lt;PackageReference&gt;` in the project file. `&lt;PackageReference&gt;` is a better way to do it though since `Packages.config` has some issues.
NuGet is something like Conan.io, if you used it while developing for C++. It's just a way to retrieve dlls easily from a trusted central repository (whether it be Microsoft's or that of your organization). And *packages.config* is simply a file that contains all the information NuGet needs to download the dlls you need. You usually don't need to manually deal with this file, NuGet commands do that for you. Again, if you used Conan, this is the equivalent of *conanfile.txt*. .Net dlls are not the same like the ones you get when you compile C++. They are quite easy to use, in your project you simply add a reference to the needed assembly (in VS right-click the project and select Add-&gt;Reference), and you use it as if the code inside it was a part of your project (if you add a dependency in Visual studio with NuGet it will do all this for you). This is similar to adding headers to include path in C++, because unlike linking in C++ (which is not needed while compiling, only later during the linking, so you can compile the code, but have problems later), it gets resolved in compile time. Overall, in my experience all of this is much easier to understand than controlling dependencies in C++. You have dlls which you reference in your project, and you can use them either by using fully-qualified names, or with *using* statement. NuGet is a neat way for getting dlls other people/organizations have decided to publish (and all dependencies of those dlls).
So basically NuGet is the C# equivalent of npm, I see. Can you elaborate on the role of the app.config? It seems to me like it would simply do the same as the reference manager, but I can insert settings which I can query at runtime.
Then open a VS 2017 developer prompt and generate them. cd C:\temp aximp "C:\Windows\System32\mstscax.dll"
You can look at app.config as configuration at run-time. Packages file is used at build time to fetch external references and add them to your binaries. An app.config is an XML file that your application automatically loads on startup. During the build, app.cofing (merging with specific debug/release version) file is renamed and will reside together with your executable. It'll have the same name as your exe but have .config at the end. You can use this file to store settings you may need during the run time (like connection strings, or anything really) but is also used to reference correct assemblies at runtime. Your deployment machine may have multiple versions of the same dll, config file can tell which version is correct. So app.config gets deployed to production eventually, but packages are only used by nuget manager to download packages at built time.
Thanks for the info!
I updated the pre build script. Can you download the latest code from github and try again?
Failed due to: 1&gt;PreBuildEvent: 1&gt; PowerShell.exe -ExecutionPolicy Bypass -NoProfile -File "C:\Visual Studio\Projects\NETworkManager\Source\NETworkManager\..\..\Scripts\PreBuildEventCommandLine.ps1" "C:\Visual Studio\Projects\NETworkManager\Source\NETworkManager\bin\Debug\" 1&gt; Get-ChildItem : A parameter cannot be found that matches parameter name 'File'. 1&gt; At C:\Visual Studio\Projects\NETworkManager\Scripts\PreBuildEventCommandLine.ps1:32 char:114 1&gt; + $AximpPath = ((Get-ChildItem -Path "$ProgramFiles_Path\Microsoft SDKs\Windows" -Recurse -Filter "aximp.exe" -File &lt;&lt;&lt; 1&gt; &lt; ) | Sort-Object FullName | Select-Object -First 1).FullName 1&gt; + CategoryInfo : InvalidArgument: (:) [Get-ChildItem], ParameterBindingException 1&gt; + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand 1&gt; 1&gt; Aximp.exe not found on this system! 
Thanks to everyone, with that comment I finally got it. The csproj has not left me confused so far, it is very familiar to its C++ counterpart :)
You should update your powershell. Default Windows 7 comes with PSVersion 2.0 and the parameter "-File" is not available. 
High concurrency and load? MariaDB Medium/low concurrency and low-high load? SQLite/MariaDB - Some say SQLite suffers from locking at high concurrency and load
Note that you only need that stuff in app.config when the environment is fucked up in some way (can't use the version you compiled against).
 &gt;&gt;Also are some people too stupid to program? Let's put it this way, getting really good isn't easy. I've been a developer for 11 years and I think I'm starting to get pretty good, but the more you learn the more you realize don't know shit. :) 
45/month? Depending on your expected load and database size, I have a fully featured ASP.NET (which can include a REST API) and MSSQL database running on Azure for ~$5.62 USD/month (before taxes). What are you configuring and what do you need in terms of performance/space/bandwidth/usage requirements?
Thanks for the info. The removal is understandable. 
Azure offers $200 and 1year free trial(B1 vm) for new accounts. It should be enough for small apps without many concurrent connections. Other providers offer similar 'free tier' plans. 
load and db size are literally like maybe 10 clients a day, db size i'd be amazed if it goes over 5000 rows over like 5/6 tables. I was under the impression that Azure was paid on uptime? and this needs to be on 24/7? The price is what I found here: https://azure.microsoft.com/en-us/pricing/details/app-service/ b1 monthly price in eur / west europe region. d1 gives me 240 minutes a day...do they calculate just the time the api is doing something? Heroku free tier calculated listening as uptime for a single js worker.
Shared is $0.013 per minute, that's $9.52 per month. It will not give you the 99.9 % uptime SLA, but with that tiny load it hardly should matter.
Make sure to check if Azure Functions are an option for your devs. That is the cheapest option you can find. With Azure functions you pay while your code is running, so you don't pay for any idle time. &gt; The first 400,000 GB/s of execution and 1,000,000 executions are free. With only 10 clients a day, you will hardly get over that free limit.
I host a bunch of dotnetcore ASP.NET WebAPI side projects on Linode for $10 per month. My Linode server also has the database for the applications. I use the full dot net environment for my day job but always been a fan of Linux.
I found MySql to be easy to work with in the past -- is that an option for you? Also, depending on how you envision the future scale of your app, if it is only going to be a small app, you might consider reading and writing to files instead using XML or JSON. However, I've chosen "overkill" solutions in the past simply for educational purposes.
Thanks for your input. Yeah MySql is option, I have been using it a lot in the past with Java projects. I think you might be right that XML or JSON might be better, probably also faster, but I am not that experienced on storing information to files so I didn't consider it at first. Overkilling for educational purposes isn't bad idea neither, after all this is not serious-business project! 
Thanks for your input. Never used SQLite before, but MariaDB might be better because there might be some concurrency. I gotta dip deeper into this!
I guess it depends on what server requirements you need. If it's a basic REST API, that's basically an input/output wrapper to the SQL database, you might be fine using the F1 Free or D1 Shared. Think the "CPU Minutes" is for when the CPU is actively doing something. If nobody is hitting the REST API, then no CPU time should be used. Depending on the work involved, you can setup your API and deploy it with the free trial on the free tier website, and use the $200 trial credit for the small/low tier database. Then you can use the [Quotas monitor](https://docs.microsoft.com/en-us/azure/app-service/web-sites-monitor) to see how much/little you're using. I think one bit that could be an issue is the "CPU Time (Short) Quota". I believe this could be 3 minutes of CPU usage time per 5 minutes. So plausibly if you have a lot of people using it at once, you may need to use the "Basic B1" tier. (As I understand it, both the F1 and D1 have 3 minutes usage for every 5 minutes.) "B1" tier has unlimited CPU Time (Short). Also, you should note that neither the F1 Free or D1 Shared levels have an SLA. So if you are using it for mission-critical tasks in the company, then yeah, you probably ought to use at least the B1 Basic.
I think it is confusing that sometimes in a simple test loop that code runs 10 times and sometimes it runs 11 times.
If you are using visual studio you can have either an assembly reference or a project reference. An assembly reference works pretty much like c++ libraries. The reference is recorded in the .proj file and when you build your solution the .dll (or .exe) is copied to the output directory. C# resolves references similarly to c++. First it looks for files in the execution directory, then in the system directories. C# doesn't require header files. You just reference the assembly and you have access to the elements within the library. Of course you can use using statements to avoid using the fully qualified namespace for whatever you are accessing. A project reference is for when you are writing both the application and the library. In this case, the reference in the .proj file is pointing to another .proj file. When you build your solution visual studios will automatically build projects referenced to ensure you have the latest version. Sometimes it won't build a project if the project is already built... rebuild-all forces all projects to be rebuilt even if they are already built. The solution can contain an app.config file... this is just an XML configuration file and doesn't really have a whole lot to do with referencing libraries and such... however, some libraries may provide special handlers for "Config sections"... so a logging library may allow you to configure it through the app.config. The library should have documentation indicating what configuration is required. It generally involves adding an xml section that tells the app.config to expect a special xml section, then the special xml section. C# has a configuration namespace that allows you to access and retrieve the values in the app.config. Sometimes, there is not a special section used to configure the library and sometimes you just need to add key value pairs to the appsettings section. Here is an example of an app.config that has a special configuration section for logging. &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; &lt;!-- Here is where you tell the configuration which special sections you are expecting --&gt; &lt;configSections&gt; &lt;!-- The types defined here must be derived from System.Configuration.ConfigurationSection --&gt; &lt;section name="AnyLog" type="AnyLog.Config.AnyLogConfigSection,AnyLog"/&gt; &lt;/configSections&gt; &lt;startup&gt; &lt;!-- This bit will appear in all app.configs --&gt; &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" /&gt; &lt;/startup&gt; &lt;!-- The layout of the XML for this section is determined by the type referenced in the configsections--&gt; &lt;AnyLog&gt; &lt;LogGroups&gt; &lt;LogGroup Name="GameLog"&gt; &lt;Logs&gt; &lt;Log Type="Console"/&gt; &lt;/Logs&gt; &lt;/LogGroup&gt; &lt;/LogGroups&gt; &lt;/AnyLog&gt; &lt;!--This section is always available (I forget if you need to use a different section for web configuration) --&gt; &lt;appSettings&gt; &lt;!-- Here are arbitary name value pairs you can add and access through System.Configuration.ConfigurationManager.AppSettings[&lt;KeyName&gt;] --&gt; &lt;add key="Name" value="value"/&gt; &lt;/appSettings&gt; &lt;/configuration&gt; For package.config I am not 100% certain... but I *THINK* it is used for when a library has multiple builds depending on architecture (64bit version, 32bit version, etc.) the package.config will tell which file to use as the referenced lib based on current environment... NuGet is an optional system for accessing and referencing libraries. NuGet contacts a server which contains a bunch of "pre-packaged" libraries, you can connect to the server, select a pre-packaged library and nuget will automatically add required references to your project and also download and reference dependencies. By default, nuget has access to a couple different public library package sources... the primary one being hosted by microsoft. You can configure a personal or private nuget server if you want to leverage the nuget system without putting your nuget packages onto a public server. 
I'm afraid I don't know the answer to that one. You'll need a cross compilation environment installed that can target Linux/x86_64 but I'm unfamiliar with using Mac OS as a cross-compilation host.
I've used SQLite a lot for small local storage and have had no problems with it. I've used it for 30k products linked to like 70k barcodes with out any issue. This has always been single threaded access so I can't comment on concurrency. I would say if it's small relational data go with that. If it's non relational data you may be better with xml or similar. I have no experience with the other one.
First of all, NuGet is an *optional* system that manages project references for you -- you never *have* to use it but it does provide many solutions to common development issues. More on that later. As a disclaimer, I should add that I have very little C++ experience so I am not too knowledgeable in the development workflow for C++ codebases, so everything I am saying is about what I know from developing .NET managed apps with C# and VB.NET rather than providing contrasts between the two different development environments. The default project types for C#, VB.NET and possibly F# as well (not sure, perhaps someone knows?) have app.configs. This file is where Microsoft wants you to store application-scoped settings (settings that are specific to the application regardless of the user running it) and user-scoped settings (settings specific to the user that runs it). Many libraries and systems will automatically add certain settings in your app.config for you like entity framework, WCF, various logging frameworks, and more. You are free to edit the app.config to modify the various settings (some settings like those provided automatically by WCF require you to modify). During the build process, your app.config is renamed and copied to the output folder, usually located at `&lt;project folder&gt;\bin\debug` (if building in the default debug configuration). The name of your app config is determined by your project's assembly name, so if your assemby is named `FooBar.exe`, your app config will be copied and renamed as `FooBar.exe.config`. As far as I know, the app.config has to be in the same directory as your executable, although this may be by convention and not an actual requirement -- I am unsure. There are many caveats and tricks involving app.config files. For example, I have yet to figure out the best way to update the application-scoped settings in app config files during deployment that have already been deployed to end-users. .NET provides a really easy way to automatically update user-scoped settings so that no settings are lost -- this is likely due to the fact that each end-user of the app have their own copy of their user settings somewhere in the hidden `%appdata%` folder. Your packages.config file is a file used by NuGet -- you won't see this file if your project hasn't imported any NuGet packages yet. This file is basically a directory that tells the nuget system where the nuget packages are that your project requires. That's it, as far as I know. When you use NuGet to add references to your project, a `packages` folder is automatically included at the solution-level. This folder should never be checked into source control (but packages.config should be, of course). The folder contains *versioned* folders for each NuGet package that you have installed. I use the word versioned because if you've installed a nuget package (btw, nuget package files end in .nupkg) and then later updated the package to a higher version, you might see two folders with the nuget package name plus the version of the nuget package. .nupkg files are just zip files that contains all of the required files that the nuget package needs to be able to run (like the assembly itself, other assemblies the target assembly depends on, resource files, etc) plus some manifest information that the nuget system requires so it knows how to add the references to your project. NuGet allows you to specify one or more feeds. The default feed is nuget.org which is where most public developers push their .nupkg files to. However, you can set your nuget source feed to anywhere like at `C:\FooBar\NuGet` or a shared network drive. All you have to do is add nupkg files to those locations and add those feed locations to nuget from within VS. As implied, you can create your own .nupkg files with your own assemblies that you've created. You generally generate .nupkg files from .nuspec files which are XML files that contain information on how to build the .nupkg for any given assembly or project like version info, author, change log, dependent assemblies and resources, etc. You can then push your .nupkg file to nuget.org or any internal feed you may have set up. Then, any project can use the nuget package manager to install the nuget packages you've created. Using nuget is another way to add references to your project, but you can also add a reference to an assembly by browsing for the specific assembly in your file system or by using a project reference. When you add a project reference, that referenced project is built first and VS copies over the files from the output folder (usually bin) of *that* project to *any* project that references it via a project reference. This is *usually* the route you want to go when wanting to use code from a project that is within the same solution. Internal nuget feeds are useful for when development efforts of different assemblies aren't done together. For example, if you habe architectured your code correctly, You should be able to update your homegrown logging framework without also having to update every project that uses it. Since both the previous version and updated versions of nuget packages are managed and made available by nuget, *developers can choose when and if they want to update their nuget package references*. That last part is very important. A small note for project references. You *really* should only use project references for assemblies where development efforts may span the projects in your solution. For example, if I added a new user control to my winform app, I will likely also have to update or add service classes to go with the new feature. Those services should be in their own assemblies, not the front-end winform executable assembly. Project references allow changes I've made a project in the solution to be immediately available to the consuming projects (the projects that have added project refs to the project in question). Hope this helps and if you have any more questions let me know. I may have also explained things that were not requested so I apologize in advance. 
What issues does packages.config have? Genuinely curious.
Oh wow. Thank you for this. I tried this but must have had a syntax and gave up on it. Thank you so much! I was trying to use movieNum in the array and get stuff out of array using user input and this is it. I can build everything off this (such as methods and stuff). Will be looking at your completed program first though. Thanks !
In VS2017, you can edit the project file by right-clicking on the project and clicking on something like "Edit Project File" in the context menus without having to unload the project. This may require the latest VS2017 version.
Thanks for your input! Do you see SQLite as difficult to take to use?
No they use the standard data classes (DbConnection, DbCommand etc.) And also provide bindings for EF and that.
Just to clarify, when you say: &gt; Should I have a base IItem interface and derive from it, i.e. have `IItem : IEdibleItem`, `IItem:IEquippableItem` etc. Do you have `IItem` inherit from both `IEditableItem` and `IEquippableItem`? Or is that a typo and it's just backwards and should be: `IEdibleItem : IItem`, `IEquippableItem : IItem`?
Before implementing anything it's absolutely worth the time to think about your inheritance hierarchy. Interfaces are best used when you need multiple inheritance, whereas abstract base classes (may) contain constructors and data members (as opposed to interfaces). Have a look at [class diagrams](https://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/index.html). Depending on the methods you end up using you may come up with an another inheritance hierarchy. 
Ok I got most of this but I am unclear on line: int index = movieNum -1 return films[index]; What I understand: You create a new method which accepts arguments of an string array value, and a int value. The caller is expecting a string value as a return but you are returning an array? I dont understand how the last line works. I realize this may not be entirely correct but I can wrap my head around this following code code (which works). Are we doing the same exact thing here? string stringResult; stringResult = films[movieNum - 1]; return stringResult; EDIT or simply just this: return films[movieNum - 1]; 
Even less hassle would be to use a embedded nosql db, you just dump objects in it, done. No writing queries etc. I like LiteDB. http://www.litedb.org/
I would actually discourage XML or JSON for something transactional like stats and scores for a handful of reasons stemming from the same issue: you have to operate on the entire file. That means that you either 1) have to read and write the entire file any time something changes or 2) keep the file in memory. Option 1 will eventually end up with performance issues. It also marginally increases the likelihood that you’ll end up with a read or write issue that results in data corruption or inconsistency. Option 2 means you drastically increase the risk of data loss if your app crashes, the box loses power, etc. It could also lead to memory pressure (similar to option 1 causing performance issues) as the dataset grows. Both options are likely to make recovery from corruption or loss of data impossible. Of course you can start adding on journaling and checksumming and such, but at that point you’re recreating SQLite. Setting up a DB server would be overkill for this, but simply including the SQLite package doesn’t feel any different than including a non-native XML parser, and comes with many advantages. I would personally go with it. 
&gt; Do you have `IItem` inherit from both `IEditableItem` and `IEquippableItem`? Or is that a typo and it's just backwards and should be: `IEdibleItem : IItem`, `IEquippableItem : IItem`? Yes, thanks for pointing that out. My bad, and I've updated my post (ref. edit #2). &gt; That being said, you do restrict yourself to particular classes of objects. In this scenario [...] I understand now that the specific `Weapon` example was a bad example. :) One better (?) solution would probably be food, which is edible, but can also go bad. Can I then "override" differently based on type of food? Think meat goes bad faster than a potato; public interface IItem { public string Name; public void OnEat(Player player) { player.Health += this.HealthPoints; } } public interface IEdible : IItem { public int HealthPoints; } public interface IRotting : IEdible // Can/should interfaces be inherited more than once? { public int HealthPointsModifier; } (Consider the code above to be pseudo code...)
This is one of my biggest problems with C#: When to choose class inheritance, and when to choose interfaces. From other languages, I'm used to class inheritance, but I definitely see the benefits of interfaces. My biggest problem, however, is how to understand when to choose what. :)
I'd say as much interfaces as you need, as few as possible. This means if you (plan) to have other dropable items, refactor those methods to IDropable. If you just have weapons and/or only those are dropable, I'd not create an Interface as the is nothing to anything from...
No offence taken! :) I know I'm old (40+), so I know everything about the bad sides of OOP. I won't throw OOP away, though, as I'm trying to learn when to use OOP and when to use interfaces, because those two concepts seems to overlap quite a bit.
&gt; I wouldn't say either way is better/worse than the other. Surely there must be a big difference between injecting behavior like `Item.AddBehaviour(new SomeBehaviour)` and using an interfaced style as you describe?
The term *Interface* is ambiguous within CS and OOP itself! For the latter there are often technical language components that are called so, but within OOP from a language independent pov, they are simply a concept of an abstraction - whatever this *technically* means. So interfaces and OOP aren't orthogonal concepts. Interfaces are part of the OOP world. 
That's pretty neat!
Can you post the code you're using for your current implementation? It might help provide better context and more specific answers or suggestions.
Oh, they're definitely different. But they both can have pros/cons depending on your usage, application design, how objects are defined/configured/used, how the program is maintained, plugin architecture, expansions, modding, headaches, debugging, accessing class members, overriding behaviour, on and on. Could always try implementing both (at a small scale) and see what works or doesn't work for you.
You could, if you wished, do both. Have a class that implements IDropable and implements the drop method that most of your items will use. Then when you're writing 1 of those 80 - just have it inherit from that base class. When you're writing 1 of the other 10, obviously it would not inherit from that base and thus be responsible for implementing IDisposable itself. That's if you plan on having each item be a separate class entirely, which I'm not sure is your plan or correct if it is. However, if each item is simply going to be a unique instantiation of the Item class, I don't see how you'd be replicating code really. 
`films` is an array. If you did `return films` that would return an array. When you do `films[index]` that evaluates to the value of the array at that position. So `return films[index];` returns a string. So yes, the examples you gave do the exact same thing.
I'm not sure if this issue is with NuGet or if its the result of merge conflict resolution, but sometimes I find that the version referenced in the project differs from the version specified in packages.config. This creates a "compiles on my machine" scenario. By only stating the version once this is problem disappears.
I'm not quite sure I understand your question. You can store arbitrary delegates and parameters, the simplest way would just be Delegate foo = ...; object[] arguments = ...; object result = foo.DynamicInvoke(arguments); You can't really store arbitrary delegates with an arbitrary number of parameters in a type-safe manner, however. Perhaps a better option would be to use lambdas to wrap arbitrary selectors, similar to the way LINQ works. Pseudo-code (I have no clue what the Selenium API looks like): Func&lt;IDocument, IWebElement&gt; selector1 = document =&gt; document.GetElementById("foo"); Func&lt;IDocument, IWebElement&gt; selector2 = document =&gt; document.GetElementsByTagName("p").First().GetElementsByTagName("a").First(); I don't know how any of this relates to constructors. 
&gt; Have a class that implements IDropable and implements the drop method that most of your items will use. This is exactly my problem: where should I draw the line between inheritance and interfaces? What if there was 50/50? Or 25, 25, 25 and 25?
So the Official Practice Test is very similar to the actual test?
I am sorry but you haven't grasped yet, that OOP and interfaces are nothing orthogonal. You probably mean inheritance vs composition? 
The questions in the practice test are very similar to what is on the actual test (which is 50 questions). The actual test did not contain any exact duplicate questions from the practice test, but the wording and question style between the two tests was very similar. Good luck!
Composition over inheritance. Do something like this. public interface IDropable { double ItemDetail { get; } } public class DropableImplementationOne : IDropable { public double ItemDetail =&gt; 1; } public class DropableImpementationTwo : IDropable { public double ItemDetail =&gt; 2; } public class Lightsaber : IDropable { private IDropable Dropable { get; } public double ItemDetail =&gt; Dropable.ItemDetail; public Lightsaber() { // You can set Dropable to anything class that implements IDropable. Dropable = new DropableImpementationTwo(); } } You can change Dropable to any class you want, as long as it implements IDropable. Don't use interfaces to change the state of the class; the class should be change its own state. Instead, use interfaces to change the implementation. The class Lightsaber will decide if it wants to use DropableImpementationOne or DropableImpementationTwo, which can be entirely different implementations of IDropable. In this example, I made Dropable a getter-only, so the implementation won't change after construction, but if you want to change it after construction then just add a setter. edit: also, I did a property here, but the same applies for methods: public interface IDropable { double ItemDetail { get; } void ItemAction(); } public class DropableImplementationOne : IDropable { public double ItemDetail =&gt; 1; public void ItemAction() { throw new System.NotImplementedException(); } } public class DropableImpementationTwo : IDropable { public double ItemDetail =&gt; 2; public void ItemAction() { throw new System.NotImplementedException(); } } public class Lightsaber : IDropable { private IDropable Dropable { get; } public double ItemDetail =&gt; Dropable.ItemDetail; public Lightsaber() { // You can set Dropable to anything class that implements IDropable. Dropable = new DropableImpementationTwo(); } public void ItemAction() =&gt; Dropable.ItemAction(); } Visual Studio has an option to implement an interface through a property: just hover over the interface, click the light bulb, and click "Implement interface through [PROPERTYNAME]." You should keep such a property private.
Yes, but as I said: I don't want to discuss the terminology. :) Are you having a problem understanding my problem and/or questions, or are you here to argue about definitions? As I've mentioned before: my problem isn't _what_ technologies there are out there (at least not what they are called). My problem is **when** to use **which** technology. :) I'm not here to argue on definitions, be it inheritance, composition, mixins, roles or whatever.
I am surprised you know more about storing data in databases than you do files lol. Normally, people learn storing data in files before databases. Google `XML Serialization/Deserialization C#` and `XmlWriter/XmlReader C#` for two different ways to read from and write to an XML file.
&gt; where should I draw the line between inheritance and interfaces What does it matter? You use interfaces to define WHAT something can do - so use interfaces when that's what you're trying to encapsulate. When you need to encapsulate HOW an object does something - use inheritance. Whether or not you should be encapsulating a particular piece of logic to begin with is a different question, and highly dependent on actual code. 
&gt; Don't use interfaces to change the state of the class Uhm. Is that even possible? Very good example, btw, but I have a question about this: public Lightsaber() { // You can set Dropable to anything class that implements IDropable. Dropable = new DropableImpementationTwo(); } Wouldn't it make more sense to have this constructor accept a `DropImplementation` from the "thing" dropping it? A person drops a lightsaber differently than a - uhm - dog...?
My very cursory understanding of it is that you would be most impacted by running virtual machines (and containers like Docker), or applications that rely heavily on system calls. Some initial synthetic benchmarks showed some hits with some heavy database usage. Gaming performance seemed relatively unaffected. I would imagine that, more likely than not, if you don't know how you would be affected and don't understand most of the documentation regarding the issue, then you probably won't be significantly affected by the change. That all said, this is me talking out of my butt. I'm sure someone else has a much better understanding (and hopefully not an exaggerated apocalyptic and/or 4chan opinion) on the subject. I also can't comment on what impact it might have on the .NET CLR or typical .NET platforms (e.g., ASP.NET, UWP).
&gt; Uhm. Is that even possible? Ah, confusion. Ignore that - I was reading your posts, and must have misunderstand what you were saying. &gt; Wouldn't it make more sense to have this constructor accept a DropImplementation from the "thing" dropping it? A person drops a lightsaber differently than a - uhm - dog...? Eh, it's an example. I couldn't think of better names that were relevant. You could use dependency injection to accomplish that. For example: public class Lightsaber : IDropable { private IDropable Dropable { get; } public double ItemDetail =&gt; Dropable.ItemDetail; public Lightsaber(IDropable dropable) { Dropable = dropable; } } This way, a human that possesses a Lightsaber can provide its own implementation. Lightsaber won't care what the class is, as long as it implements IDropable. When working with interfaces, you can kinda stop worrying about implementation. For the human, you could have an IWeapon property that the human has (but not necessarily implement), which Lightsaber could implement. For example: public class Lightsaber : IDropable, IWeapon { private IDropable Dropable { get; } public double ItemDetail =&gt; Dropable.ItemDetail; public double Damage { get; } public Lightsaber(IDropable dropable) { Dropable = dropable; } } public interface IWeapon { double Damage { get; } } public class Player { public IWeapon Weapon { get; } public Player() { Weapon = new Lightsaber(new DropableImplementationOne()); } } public class Dog { public IWeapon Weapon { get; } public Dog() { Weapon = new Lightsaber(new DropableImpementationTwo()); } }
You're confusing CAN and HOW. ICharacter is fine - because we want to know an ICharacter CAN eat. IVegetarianCharacter is not fine because we want to know HOW a ICharacter eats. ICharacter { public void Eat(IItem item); } VegetarianCharacter:ICharacter { public void Eat(IItem item) { if(item is Meat) { //bad } else { //good } } } 
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ I googled 'MSDN C# keywords'. First hit.
ANY concurrency and you better evaluate if SQLite is indeed a good option. If go you SQLite and you don't plan it well, it will be your worst nightmare.
An abstract base class is preferably used when you have multiple classes that all share at least some method signatures and data members (but may vary in terms of implementation), i.e. the classes 'Warrior', 'Fairy', 'Orc', ... inherits from the class 'Character' status values such as life points, attack values, ..., the methods attack, move, ... and so on. In other cases it might be more useful to use interfaces instead. All items might have an in-game value property, but different characteristics (is equipable?, inflicts damage?, cures status values?, is tradeable?, can only be used by certain character classes?). An another advantage of interfaces is that you are forced to implement method signatures which actually helps you not to forget about features of an item you intended to implement. In practice, interfaces are used to define what you want to support. A base class, however, resembles more a 'is-a-relationship'. (here: Warrior is a Character.) 
Inheritance is very overused, and we misunderstood how it should be used for a long time. Consequently, most of the books people either read or on which new books were based get it wrong too. Inheritance was pitched as a "code reuse" tool. If two things had similar features, we were told they should inherit from each other. That way the code for that functionality is pushed down into a base class, and if any derived type needs new behavior it can override that base class behavior. I saw a blog post I wish I had saved because it said it all better than I can. This was years ago, I can't find it today. This particular blog post talked about something every OO eventually encounters: what happens when a base class has properties and methods you DON'T want in derived types. This tends to happen later in projects, when you have to extend base classes in ways you didn't consider when they were designed. If you think it sounds stupid, here's a good example greatly simplified from *Head First Design Patterns*. Imagine you're designing a zoo simulation. You have a Bird class with a Fly() method and an extensive number of Bird classes like Finch and Toucan. There's a "party" routine in the zoo that causes all birds to fly, and it was trivial to write: foreach (var bird in _animals.OfType&lt;Bird&gt;()) { bird.Fly(); } But then your boss asks you to implement an Ostrich. They're a Bird that does not Fly(). Your first thought is to make Fly() throw NotSupportedException. But that breaks the party code. You'd have to update it to make sure the Bird you have isn't an Ostrich. Another solution might be to make Ostrich override Fly() such that it does nothing. That's kind of goofy for philosophical reasons. Either way, your code got a little gnarly. Then your boss notices you have a FlyingFish, but they aren't flying during the party. Well, that's a Fish, not a Bird. Fish have Swim(), but not Fly(). You added a Fly() to FlyingFish, but you can't make the party code treat it like a Bird(). Instead, you have to special-case a check for any FlyingFish. This goes on and on. Duck is a Bird that can Swim(). Penguin is a Bird that can't Fly() and can Swim(). Platypus is... a very unique creature. The point here is we have what at first looked like a really good inheritance hierarchy, but as we implement each animal our code accumulates more and more little patches and special cases. Each of those represents a place where the "rules" of the program aren't clear. The problem here is we're trying to share *code*. The base class Bird is less about "being a bird" and more about "things that can fly". This doesn't even work well, because even if the Bird.Fly() implementation is very good, there's no way to share it with FlyingFish, which needs to Fly(). And while Fish.Swim() might be usable for 99% of Fish, you can't easily use it from Duck or Penguin or create a way for the program to know "give me everything that can swim" without saying "give me all Fish and also this list of special, swimming other animals". The parts of Bird that belong in a class, and are shared by all Birds, are the few characteristics of all Birds. They have feathers. They have some form of wings (even if they can't fly!) They have two legs. They have beaks and make noises. That's the stuff that belongs in Bird. But "I can fly" is a trait that is not completely associated with Bird-ness. Squirrels, fish, insects, and probably several other creatures can fly. There's not a good way to connect them all via inheritance without screwing up other aspects of the hierarchy. But we can use interfaces instead. Each individual Bird may or may not implement ICanFly, which comes with the Fly() method. Most birds that fly have two wings and fly in similar ways, so we can define a BirdFlightBehavior that implements IFly that each of these birds delegates its Fly() to. This is called *composition*, and it's far more powerful than single inheritance. We can say "A Finch is a Bird, it also implements ICanFly and requires an ICanFly implementation. We have selected TwoWingedBirdFlight for that implementation." We can also say, "Duck is a Bird that implements ICanSwim and ICanFly, it delegates ICanSwim to a DuckSwim type and delegates ICanFly to TwoWingedBirdFlight." That's how we use interfaces for both "capabilities" and "code reuse". So whereas "make everything fly" with just single inheritance might look like: foreach (var bird in _animals.OfType&lt;Bird&gt;()) { if (bird.CanFly) { bird.Fly() } } foreach (var flyingFish in _animals.OfType&lt;FlyingFish&gt;()) { flyingFish.Fly(); } ... The same thing in an interface-based hierarchy might look like: foreach (var flyer in _animals.OfType&lt;ICanFly&gt;()) { flyer.Fly(); } This isn't really something you master from one project or one article. It takes a lot of projects to get a feel for how it goes. If you practice testable design and use TDD it comes a little more naturally: having lots of granular interfaces tends to help manage test complexity. Books I strongly recommend to get a better feel for this kind of thing: * Head-First Design Patterns * The Art of Unit Testing * Working Effectively with Legacy Code * Agile Principles, Patterns, and Practices in C# 
&gt; Imagine there are 100 different items, and 90 of them are dropable. In addition, 80 of those can be dropped the same way. "Why should I use an interface to contract that behaviour, and still have to implement the same "dropable" behaviour for all of the 80 items?" Here's one solution: Create an interface for items that can be dropped. The interface will have: * A method that is called to drop the item. * The method takes a parameter specifying relevant data and an `Action` parameter defining behavior. * An `Action` property with the same type as the `Action` parameter. Example: public interface IDroppable { Action&lt;DropArgs&gt; OnDrop { get; } void Drop(DropArgs args, Action&lt;DropArgs&gt; dropAction); } public class DropArgs { // Relevant properties. } Then, you'll make an abstract class with static `Action` properties that define shared behavior. Example: public abstract class StandardDropBehaviors { public static Action&lt;DropArgs&gt; SomeStandardDropBehavior = delegate(DropArgs args) { // Do something. } public static Action&lt;DropArgs&gt; SomeOtherStandardDropBehavior = delegate(DropArgs args) { // Do something different. } } You'll then create classes that implement the interface. In their drop method, they will take an `Action` whose default value is null. Example: public class SomeDroppableItem : IDroppable { public Action&lt;DropArgs&gt; OnDrop { get; protected set; } = StandardDropBehaviors.SomeStandardDropBehavior; public void Drop(DropArgs args, Action&lt;DropArgs&gt; dropAction = null) { OnDrop = dropAction ?? OnDrop; OnDrop(args); } } This has a few advantages: * Different shared behaviors can be statically defined in different classes. For example, a `StandardBouncBehaviors` class. * Different behaviors can be used when need be. * It avoids messy inheritance. You could even get fancy with the drop method and specify a list of drop behaviors to call in order: public interface IDroppable { public List&lt;Action&lt;DropArgs&gt;&gt; OnDrop { get; } public Drop(DropArgs args, List&lt;Action&lt;DropArgs&gt;&gt; dropActions); } 
The general practice today is [composition over inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance), so it's tough to say you have "too many" interfaces. If you find yourself having classes with a huge list of interfaces, you could bundle them up into marker interfaces. For example: public interface IEdible : IConsumable, IDroppable, IThrowable, ISellable, IBuyable // etc. { } public class Apple : IEdible { } // Nobody wants to buy a rat to eat. public class Rat : IBarelyEdible { } public interface IBarelyEdible : IConsumable, IDroppable, IThrowable { } Mix &amp; match! The marker interfaces make it easy to do so.
The more you write the more I am sure that you simply cannot handle the problems, as you simply don't know (or you are willingly ignoring?) the precise terminology. This is a serious problem as you simply won't understand articles, books, tutorials or even comments here without. And we other do not understand, what you are talking about. You absolutely have to get familiar with the correct terms and their meanings. This the **the** foundation for understanding and communicating a problem ☺️ And you won't find a solution for your problem if you cannot really describe it. In order to get along with that, I can recommend you the following books: - clean code - head first design patterns - dependency injection (by Mark seaman) They all refer to the core OOP concepts and idioms that statically, class based languages offer. So by reading them you will get a deep understanding what the foundations, principles and patterns are and how to apply them properly. Of course there are many more excellent sources to learn from. To refer again to your problem: you don't need to expose everything as an interface here, even though it make sense for kinds of *behavior* But I would probably not build up an interface hierarchy at all - this makes the usage of those interfaces much harder, as you have to provide more implementation work the deeper the hierarchy gets. As a result you won't gain lot of this; even though you can put any item together into a collection, this will not enable you to *apply* the item in the specific way. So imho it is better to define, which are the basic kind of actions / operations and how they can affect the basic properties of the world. Then better group them together and create behavior abstractions in order stay flexible. Lots of modern games use an even more different approach, called *component based entity systems*. Such a system emphasize the differences of game entities and don't try to find a basic interface for everything at all, but instead define basic components and model the interactions between them. You should find more about it by Google ☺️
I really have to ask where you've got that info from. Source please? 
&gt; The more you write the more I am sure that you simply cannot handle the problems, as you simply don't know (or you are willingly ignoring?) the precise terminology. For me, and for this example alone, terminology isn't important. The important part is which concept to use when. I don't disagree with you on anything, and feel free to attack me for not wanting to going into an discussion about what's called what, but to me what things are _called_ aren't as important as to which _concepts_ I should follow in a real world scenario as I have (probably poorly) tried to describe. But. Let's forget about that. &gt; you don't need to expose everything as an interface here, even though it make sense for kinds of behavior But I would probably not build up an interface hierarchy at all - this makes the usage of those interfaces much harder, as you have to provide more implementation work the deeper the hierarchy gets. This is _one_ of the reasons I ask for help, because I feel exactly the same. :) This is also why I consider moving more of the responsibility to the _using object_, instead of the standalone-ish item objects. &gt; Lots of modern games use an even more different approach, called component based entity systems. I assume you refer to the [entity-component-system](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system) pattern, but - again - that pattern is based on OOP principles. Which leads me back to my original question... :)
Whow. This is an excellent answer!
Ok I figured it out I think. namespace MyQuestionOnArray { class Program { const int MIN_NUM = 0; const int MAX_NUM = 100; static string[] GetFilmNames(int movieCount) { string[] filmNames = new string[movieCount]; for (int i = 0; i &lt; filmNames.Length; i++) { int displayNumber = i + 1; Console.Write("Enter the name of film number " + displayNumber + ": "); filmNames[i] = Console.ReadLine(); } return filmNames; } //library static string ReadString(string prompt) { string result; do { Console.Write(prompt); result = Console.ReadLine(); } while (result == ""); return result; } static int ReadInt(string prompt, int low, int high) { int result; do { string intString = ReadString(prompt); result = int.Parse(intString); if (result &lt; low || result &gt; high) Console.WriteLine("Invalid Range..."); } while (result &lt; low || result &gt; high); return result; } static void Main(string[] args) { int movieCount = ReadInt("How many ? ", MIN_NUM, MAX_NUM); GetFilmNames(movieCount); } } } 
Here is the final program with alot of stuff I learned from you guys incorporated! Not entirely perfect, completely useless, and 100% satisfying to finish! namespace MyArraysReturnMethod { class Program { //***************Methods*********************** const int MIN_NUM_MOVIES = 0;//min movies the theater can show const int MAX_NUM_MOVIES = 30;//max movies theater can show static void DisplayWelcomeScreen() { Console.WriteLine("Welcome to our Multiplex\n" + "We are presently showing:"); } static string[] GetFilmNames(int movieCount) { string[] filmNames = new string[movieCount]; for (int i = 0; i &lt; filmNames.Length; i++) { int displayNumber = i + 1; Console.Write("Enter the name of film number " + displayNumber + ": "); filmNames[i] = Console.ReadLine(); } return filmNames; } static string GetFilmName(string [] films, int movieNum) { return films[movieNum - 1]; } static void DisplayFilmNamesArray(string[] filmNames) { foreach (var name in filmNames) { Console.WriteLine(name); } } static void CustomerMovieNumber(out int movieNum) { movieNum = ReadInt("Please select a movie: ", MIN_NUM_MOVIES, MAX_NUM_MOVIES); } static int MovieCounter(out int movieCount) { movieCount = ReadInt("How many movies are showing ?",MIN_NUM_MOVIES,MAX_NUM_MOVIES); return movieCount; } static void CustomerAge(out int age) { age = ReadInt("Please enter your age: ", 0, 120); } static void ValidateAge(string filmName, int age) { if (filmName.EndsWith("(12A)") &amp;&amp; age &lt; 12) { Console.WriteLine("Sorry. This movie is rated 12A and up. \nHave a nice day!"); }else if (filmName.EndsWith("(12A)") &amp;&amp; age &gt; 11) { Console.WriteLine("Enjoy your film!"); } if (filmName.EndsWith("(15)") &amp;&amp; age &lt; 15) { Console.WriteLine("Sorry. This movie is rated 15 and up. \nHave a nice day!"); }else if (filmName.EndsWith("(15)") &amp;&amp; age &gt; 14) { Console.WriteLine("Enjoy your film!"); } if (filmName.EndsWith("(18)") &amp;&amp; age &lt; 18) { Console.WriteLine("Sorry. This movie is rated 18 and up. \nHave a nice day!"); }else if ((filmName.EndsWith("(18)") &amp;&amp; age &gt; 17)) { Console.WriteLine("Enjoy your film!"); } if (filmName.EndsWith("(U)") &amp;&amp; age &lt;= 1) { Console.WriteLine("Enjoy your film!"); } } //method library ReadString, ReadInt static string ReadString(string prompt) { string result; do { Console.Write(prompt); result = Console.ReadLine(); } while (result == ""); return result; } static int ReadInt(string prompt, int low, int high) { int result; do { string intString = ReadString(prompt); result = int.Parse(intString); if (result &lt; low || result &gt; high) Console.WriteLine("Invalid Range..."); } while (result &lt; low || result &gt; high); return result; } //*************MAIN METHOD****************** static void Main(string[] args) { int movieCount = ReadInt("How many movies are playing ? ", MIN_NUM_MOVIES, MAX_NUM_MOVIES); string[] filmNamesMain = GetFilmNames(movieCount); string repeat; do { int movieNum; int age; //Methods to call in order: DisplayWelcomeScreen(); DisplayFilmNamesArray(filmNamesMain); CustomerMovieNumber(out movieNum); CustomerAge(out age); string filmName = GetFilmName(filmNamesMain, movieNum); ValidateAge(filmName, age); Console.Write("Another Customer? (Y or N) : "); repeat = Console.ReadLine(); } while (repeat.ToUpper()== "Y"); Console.ReadLine(); } } }
App.config is a config file for your program and .net has library support to read that. XML. .net core abandons that XML config in favor of a more developed configuration system where you can read options from a file (default format is JSON), but cmdline or other "configuration providers" are possible and can be plugged in. Seeing this, .net config is just... pfffffftttt... poor.
I thought that may be the case, but just wanted to check :)
These are some thoughts I've had for a while. The language change proposal is really something I certainly should've spent more time thinking of, but it is not the main purpose of the article. I'll gladly accept comments and opinions!
Using Visual studios just put your cursor on a keyword and hit F1
Thanks for this! I had to find an example of using an interface and delegating something like BirdFlightBehavior. I found this https://www.reddit.com/r/Unity3D/comments/4ebxsq/how_does_using_an_interface_in_c_make_code_more/d1yqtgq/
If it's just for internal use and you're not publishing it to the world, you can use any directory as a Nuget repo, in which case a SMB share works perfectly well.
I'm not aware of something quite like that for C# but the official docs have a pretty neat in-browser interactive tutorial: https://www.microsoft.com/net/learn/in-browser-tutorial/1
I think that's a good solution for smaller teams getting started. But it's much easier to use an actual server. Especially when working remotely as I often do.
From what I have read on the subject it is more related to Kernel level programming and predictive algorithms regarding the scheduling of tasks. That said; I am inclined to agree that .net is too removed from the issue. Now if you are a C or C++ developer then you definitely have a bit more to worry about. Stack calls, and all that fun stuff are a huge concern for those folks 
I've seen them get mismatched before during upgrades of different libraries, especially if part of the upgrade fails. Another problem with packages.config is that it requires you to list every dependency, even if that dependency isn't one you directly take (you take a dependency on A, which takes a dependency on B, so packages.config lists A and B). The new project file references only list direct dependencies, which help trim the list down and limits merge conflicts, in my experience.
We have 3com, HP, Dell, Cisco, Huawei and some other models of switches in the campus and it's a pain in the ass to configure them. We have a laptop dedicated to configure switches including documentation we made for each brand and model with so many different software for them. I'm looking for a generic solution and I thought this would be a good candidate. That's what I intended. I'll give it a try. Thanks. 
 filmNames[i] = Console.ReadLine().Trim();
Had you take a look at NUKE (http://www.nuke.build/)? It's an emerging C# build system and seems to support all your tasks using NUKE C# tasks. Just for the specflow runner you need to start the executable manually, or code-generate a wrapper (which you can do based on a JSON "description language").
You mean to trim each string within an array? return filmNames.Select(f =&gt; f.Trim()).ToArray() 
Yes thats it. Thank you. I will try it as soon as i can.
Not sure what you mean - COM components depend on the registry because that's where stuff like their directory location and CLSID are stored. 
I've used emails separate from work and personal to have 2 separate accounts. Honestly, if you have Google you can use the same email, with something random appended to it. As an example: let's say my email is Nugsly@gmail.com. I can create a new account with the email Nugsly+Azure@gmail.com, and it will still come to the same inbox, yet is a completely different email address. This is also just a good general tip for filtering, or figuring out what sites you signed up for that have shared your info and caused spam.
There was a feature in XP called registry-free com . You used än xml file to represent your registry info
In addition, cross platform mobile development (iOS, Android, UWP) with Xamarin is also exceptionally attractive if you have no interest in ASP.NET.
interesting that you were able to learn all that stuff later. Thats what I would like to do if the time comes then learn ASP.NET do u have any advice or curriculum you could give me for someone who wants do be a c# developer? 
One thing that confuses me with this approach, is where would you actually put the implementation? If you put Fly() in a Bird base class, then you only have to implement it once. But if it's just an interface, then that just dictates a rule that this object is required to have a Fly() method. But then you're stuck implementing a Fly() method in every "child" class. So if you're sticking strictly to interfaces, where would you put the shared implementations of the interfaces' requirements?
Hey can you please suggest a track for being a c# software engineer that doesn't involve ASP.NET I dont know what else is out there that works together.
Still works, yes.
He just did.
~~Removed: Rule 4.~~ Next time make an attempt and post what code you have that is/isn't working. From the sounds of it, simplest might be to check for the highest value first, then all descending values: if (speed &gt;= 75) deductionPoints = 2; else if (speed &gt;= 65) deductionPoints = 1; else deductionPoints = 0; By chaining `if/elseif/elseif/elseif/else` blocks like this, you can check each speed segment. You can also easily add checks for different speeds (say, 85 or 70) that result in different deductions. EDIT: I just realized there's more to the question. Just tweak it to check how much over the limit they are: int limit = 60; int speed = 65; int speedingAmount = speed - limit; if (speedingAmount &gt;= 10) deductionPoints = 2; else if (speedingAmount &gt;= 5) deductionPoints = 1; else deductionPoints = 0; EDITx2: And if you needed it more dynamic, where each 5 mph over the limit constitutes an extra deduction, you can just divide the speeding amount by 5: int speedingAmount = speed - limit; int numberOfFiveMphOver = speedingAmount / 5; int deductionPoints = numberOfFiveMphOver; You may want to do a check though if they are under the speed limit.
Ok thanks, yeah I just editted right before posted this and added the code, but I appreciate the help.
Yup, I made some edits too. Hopefully they'll get you going! Good luck! EDIT: Undeleted/restored the post by the way.
So you make an IFlightType interface, implement it as JetpoweredFlight, WingedFlight, GliderFlight etc and you store within the object itself. Then the objects Fly() method ends up being something like: this.FlyingType.MakeFly(this); If you really want some headaches try to figure out how to deal with a Penguin that can fly temporarily because he was thrown! And yes, the overhead of this becomes hefty quickly enough. Look at https://en.wikipedia.org/wiki/Composition_over_inheritance for some examples. Animal examples make good examples because the hierarchies are so messy, having to manually go through this in code and add a specific implementation for potentially hundreds of different animal types in your world doing it this way would be pretty nasty as it is prone to combinatorial explosion. In more standard computery examples with restricted scope for example having documents some of which can be saved to disk, some of which can be emailed and some of which can be rendered in 3d these sort of hierearchies end up much more practical to use. I don't think anyone but a masochist would seriously advocate using a system like this in a game world where you might have hundreds of different animal types to deal with. It just gets too unwieldy.
This is a neat exercise. I'm pretty newish to C# as well and would love to give this a bash, but I had a few questions for clarification: 1. Do you only want to remove a point for every full 5 miles over the speed limit? (for example, if the limit is 65, would going 76 cost you 2 or 3 points?) 2. Is there a maximum number of points that someone can lose? My first thought is to start by calculating the gap between the limit and the actual speed. -&gt; If the gap is negative, the user is going slower than the limit, so you remove 0 points. -&gt; If the gap is positive, you calculate the number of points to remove. ---&gt; If you only want to remove a point for every full 5 miles over the limit, you can simply divide the gap value by 5 and remove that many points. ---&gt; If you want to remove a point for every 5 MPH block, you can do the following: ------&gt; Divide by 5 and store the value. ------&gt; Modulo by 5. If the value is 0, do nothing. If the value is not 0, add one more to the previously stored value and removed that many points. If you do it this way, it should scale no matter how far above the the speed limit the user was actually driving. Additionally, this makes it easy to write a message to the console that tells the user exactly how many points they lost without having to do a bunch of different "if" statements to test for how far over the limit they are.
Thanks for your reply and also for input and questions. To answer your first question, yes it 5 mph blocks. So if the speed limit is 65 and the user is going 69 no points will be taken off but if the user is going 70 then 1 point. For question two, they did not specify if there should be any maximum allowed. I'm a very visual learner and so if you wouldn't mind could you post or pm me what that would look like to do what you are talking about so that I could actually see it and try to understand? I am very new and there are a lot of things that I do not understand but this could help me.
Wow thank you. Very informative and I really appreciate the help
I'll do my best (I'm not super used to posting formatted text on Reddit, so I apologize in advance if this is terrible to read). First, I declared 4 int variables: int speedLimit = 0; //allowed speed int speed = 0; //user's speed int speedGap = 0; //gap between speed limit and user speed int pointsToDeduct = 0; //the number of points being deducted Next I get the user provided values: // Get the speed limit and user speed values from the user. Console.Write( "Please enter the speed limit: " ); speedLimit = int.Parse( Console.ReadLine() ); Console.WriteLine(); Console.Write( "Please enter your speed: " ); speed = int.Parse( Console.ReadLine() ); Console.WriteLine(); After that, I calculate the gap between the user's actual speed and the limit. The math is done so that the value is negative if the user is going below the limit: // If the user drove below the speed limit, the gap will be negative. speedGap = speed - speedLimit; Then I calculate the number of points to remove IF the gap is at least 5 MPH: // If the gap is at least 5, calculate the number of points to deduct if ( speedGap &gt;= 5 ) { pointsToDeduct = speedGap / 5; } Since the number of points to deduct is declared with a value of 0, it will only have a positive value if the user was in violation of the speed limit. This means we can use it to determine if the user was going too fast or not AND use it to tell the user exactly how many points they lost if they were going too fast: // If at least one point is being deducted, let the user know if ( pointsToDeduct &gt;= 1 ) { Console.WriteLine( "{0} points have been deducted.", pointsToDeduct ); } else { Console.WriteLine( "You're ok." ); } I'm not sure if you know how "{0}" works in strings, but it functions as a placeholder. When the string is displayed, the "{0}" is replaced with the first value after the comma. If you want to have more than 1 placeholder in the string, you can do something like this: Console.WriteLine("{0} is way cooler than {1}", myName, yourName); 
Good question! Up-front: to 100% buy this, you have to want to follow "testable design", use TDD, and practice Dependency Injection (or Inversion of Control, different names for the same thing, really.) For small, simple projects this almost always ends up looking like a lot of dumb work to accomplish nothing. On larger projects, the costs of *not* following these kinds of practices dwarf the overhead! Code's easier than paragraphs. Let's say the zoo simulator is a console application, for ease. Let's start fleshing out the files. We have ICanFly.cs: public interface ICanFly { void Fly(); } Now let's write out Bird and a Sparrow class that uses both Bird and ICanFly: public abstract class Bird : Animal { // Imagine some Bird properties... } public class Sparrow : Bird, ICanFly { public void Fly() { Console.WriteLine($"A sparrow is flying!"); } } OK. This is what you're thinking of and yes, there is no code reuse here. Let's use composition to fix that. A lot of birds will probably use this flight behavior, so we do want to reuse it. Now, there's two ways I can go about generalizing it. As I pointed out, this is going to take some work and feel like architecture astronomy. It makes a lot more sense when you have 50 classes than when you have 5. First, we definitely need something that implments this kind of flight behavior. It needs a species name to do its work. So we need *another* interface here: public interface IFlightBehavior { void Fly(string speciesName); } Now I can implement that with the generalized code: public class DefaultFlightBehavior : IFlightBehavior { public void Fly(string speciesName) { Console.WriteLine($"A {speciesName} is flying!"); } } Sparrow can now delegate to this. If we aren't using Inversion of Control: public class Sparrow : Bird, ICanFly { private IFlightBehavior _flightBehavior; public Sparrow() { _flightBehavior = new DefaultFlightBehavior(); } public void Fly() { _flightBehavior.Fly("Sparrow"); } } Ahh, but that's tedious to do per species. One way we can handle this uses inheritance: public class FlyingBird : Bird, ICanFly { private IFlightBehavior _flightBehavior; public string Species { get; private set; } public FlyingBird(string species) { this.Species = species; _flightBehavior = new DefaultFlightBehavior(); } public virtual void Fly() { _flightBehavior.Fly(Species); } } Now we can dramatically simplify Sparrow and a mess of other birds: public class Sparrow : FlyingBird { public Sparrow() : base("Sparrow") { } } This sort of makes one wonder why I made the interface for IFlightBehavior. Well, suppose we end up with some flight behavior that does something special, and it gets used for other birds. We can update FlyingBird: public class FlyingBird : Bird, ICanFly { private IFlightBehavior _flightBehavior; public string Species { get; private set; } public FlyingBird(string species) { Species = species; _flightBehavior = new DefaultFlightBehavior(); } public FlyingBird(string species, IFlightBehavior flightBehavior) { this.Species = species; _flightBehavior = flightBehavior; } public virtual void Fly() { _flightBehavior.Fly(Species); } } Now if we have a bird with a special flight behavior: public class Chicken : FlyingBird { public Chicken() : base("Chicken", new WeakFlightBehavior()) { } } This is *basically polymorphism*. Instead of using virtual methods, we're using different classes to change how the base Fly() method behaves. It is powerful magic. Every FlyingBird can potentially have a different implementation of Fly(). Some purists would argue having FlyingBird at all is an abomination. There are definitely some problems with it, like "What if not every flight behavior wants a species?" I don't tend to get too upset about having some helper classes like it, because I find in hierarchies like this "Birds that can fly" or even "Animals that can fly" can be useful abstractions. The main thing you want to avoid is when you can't make, say, "a duck" because there's no way to reuse swimming and flying code. This implementation passes the Duck test: public class Duck : FlyingBird, ICanSwim { public Duck() : base("Duck") { } public void Swim() { Console.WriteLine("Splash! A duck is swimming!"); } } Why didn't I have an ISwimmingBehavior? \*shrug\*. I probably would have it, and it probably would have an implementation like FishSwimBehavior for Fish. Ducks, geese, and swans would probably share an implementation too. But Penguins are weird: they swim very differently than those birds. What I wanted to highlight here is I can *opt* to use an Interface-based behavior OR just implement the method directly. You find out which one is wrong when you have to add features three months later ;) What I've learned over the last 17 years is if I think I shouldn't make some reusable behavior representable by an interface, I'm wrong. It usually takes less than a week for me to get backed into a corner and find the neatest solution is to go back and make more interfaces. Again, it makes more sense with a DI container, where you can be free to have a nasty-looking constructor like: public Duck( IFeedingBehavior feedingBehavior, IPoopingBehavior poopingBehavior, IEggLayingBehavior eggBehavior, INestingBehavior, nestingBehavior, ... // 10 other behaviors ) { // set a lot of fields, I wish we had sugar for this! } Hoo boy. Who wants to pass 14 parameters every time you create a Duck? Well, with a good DI container, at some layers of my app I'd do this: var newDuck = ioc.Resolve&lt;Duck&gt;(); The *ioc* variable here is a special class that is like a factory for every type in my program. At startup, I tell it how to construct every type I might use in my program. So that Resolve&lt;Duck&gt;() call causes it to look at Duck, find the Constructor, then try to create a value for each parameter to the constructor. Magic. Better programs abandon their "IoC container" and instead pass around classes that use the Factory pattern. Instead of explaining that I'm just going to say it's basically the same thing but helps you sidestep some big problems when testing because this post is already long enough. 
This is a really good write up. Thanks for posting. &gt; Another solution might be to make Ostrich override Fly() such that it does nothing. That's kind of goofy for philosophical reasons. I could definitely see myself doing that. Now that I think about it, wouldn't this actually cause problems in your example? foreach (var flyer in _animals.OfType&lt;ICanFly&gt;()) { flyer.Fly(); } If ```Ostrich``` had an empty ```Fly``` function, it would be included in this loop, despite the fact that ostriches can't actually fly. If I wanted to count how many animals can fly, it can potentially be inaccurate because of the presence of ostriches. That would be a difficult bug to solve down the line. You have opened my eyes.
&gt; Are these books in any particular order? Not *really* but if you had to pick just one I'd go with *Working Effectively with Legacy Code*. It's probably the most generally applicable and acts as a good introduction to just about any other software engineering book from the past few years.
Yeah! Basically this is the "L" in a set of principles for good OOP code that spell out SOLID. It stands for "Liskov Substitution Principle". All it means is everything that implements an interface should meet the same promises as every other implementor. Fun fact: for the purposes of software engineering discussions, "a base class" and "an interface" are more or less considered the same thing. Overriding a virtual method is congruent to implementing an interface member. When every Bird has Fly(), the promise of the Bird API is "every one of these things can fly". But that's not true for Ostrich. So for many scenarios like the one you listed, you're wrong if you assume every Bird can fly. For some programs, that might not matter. But in general it's a good thing to worry about. 
TeamCity has a built in nuget and symbol server too, automatically sucks in any nuget packages. Also worth checking out is using GitVersion to auto compute new versions with each commit and get version number concerns out of your src.
This.
Interesting with GitVersion. We are essentially doing the same thing because we use Gitflow, and when we cut the release branch of 1.x.x, we then bump the version inside the props folder to match anyway. 
How did I miss that? I’m running a teamcity instance and nuget repo on the same vm for my team. :facepalm:
&gt; I'm too stupid to fully understand what this performance hit is caused by, but I'm guessing it will not have a very large impact on most relatively simple applications. From what I've understood, it just causes more clock cycles to be used for each system call. That's the fix, from my understanding. The way the attack works is using speculative execution to give away the location of kernel memory by abusing page caching. It's probably a bit degenerate to call it a timing attack, but the OS level fix sounds like how you'd fix any timing attack: just wait as long as the worst case would take. The specifics are a bit beyond me, but that seems to be the core of the issue. But I might also be wrong. 
Literally anything in software development.
Yeah, the company I work for pays for a Pluralsight subscription for me, so if I'm learning something new I can fire it up and watch a few courses at home. It's pricey if you're paying on your own, but it has good content. One thing that has really helped me in learning new languages is having to transfer my Visual Basic knowledge to C#. Now as I learn Typescript, I can use what I know in C# to help lead me toward a solution in Typescript.
what did you have on your resume? When applying out of school?
Your code does not trim each string within an array. It creates a new array with each string trimmed. **Huge** difference.
&gt; Proposed breaking change: We could make the == operator non overridable and make its implementation always use the Equals instance method of its left-most non null argument (after proper null checks). Uhh, no. We can't. This would just be pure madness and beyond any level of reason. The great thing about C# and the .NET eco-system is the backwards compatibility that is almost all the time retained. Now changing a fundamental concept of the language that will cause huge breaking changes in nearly every code base is just nuts.
I do the same thing with Bitbucket pipelines - run tests, build project, publish nupkg all automatically on commit..
Yes, the manifest still works.
thanks
I agree with you that breaking things is unacceptable. The proposed breaking change is much more in the field of ideas than something that could be done. It could be, however, that we could opt in for this behavior with some compiler flag (although I believe my proposed change is ugly, to say the least, and that we could probably do better). At least for new projects, this could be useful. Of course, we could also introduce some new equality operator and block usage of == with a compiler flag. This would not break silently but would steer us away from our beloved ==.
&gt; I'm sure someone else has a much better understanding (and hopefully not an exaggerated apocalyptic and/or 4chan opinion) on the subject. (*putting on my college computer science hat*) I think you have summarized it as well as is possible given what information has been released. From what I can tell, if you're not running virtual machines or databases, you're just going to have to wait and see how you're impacted. From what I understand about the problem, I'm kinda angry they didn't think of this exact problem when they designed the chips. It's not like I necessarily think they should have been designed differently, but it's definitely something they should have notified the OS manufacturers about so they could have built this "fix" in a long time ago.
Meh... not a *huge* difference. It get's the job done modulo minor differences. OP never indicated that it was imperative that this was done in-place.
Do you know if it works with path filtering as well? I got a repo with many libraries... It would be cool to be able to use it without giving the same version to all libraries.
Yes, the equality situation in C#/.NET is a big mess, unfortunately. It's hard to fix at this point, though. The approach in Swift is much more clear: no equality unless you implement Equatable (similar to IEquatable&lt;T&gt;), in which case you get == only. Reference types additionally get === for pure reference equality. It's unfortunate that .NET has Equals and GetHashCode in Object.
Removed: Rule 4. You already have this question posted: https://www.reddit.com/r/csharp/comments/7o7nt7/question_about_taking_a_number_from_user_and/
(*puts on my hiring manager hat*) On one hand, as /u/lewisj489 outlined in their message, there are plenty of jobs as a C# programmer that don't involve ASP. And, if for some reason you want to learn *web* programming without ASP, I recommend you learn MVC. On the other hand, there are not only a lot of jobs out there that want ASP (so you'd be limiting your job choices without it), but there is a lot of ASP code out there and a lot of programming jobs - particularly junior programmer jobs - are all about maintaining existing code, so again, not knowing ASP would really cut down on opportunities. On the gripping hand, as a manager when I have hired programmers I expect them to do not only the specific task I hire them for, but to be able to pick up additional skills after they're working for me, to bring themselves onto other projects. In my last job we had three major applications we worked on, one was Visual Basic 6.0, one was MVC, and one was ASP. I was actually hired to do MVC, but over time about 50% of my work became ASP. Before that I was technical director for a team which made a large software suite. We had some 30 applications. Three were WinForms front end apps, three were ASP, and the rest were back end server apps. One or two apps were specific to one programmer, but the rest, we all floated between them. None of these programmers had done C# before, so we all picked up skills as needed. So, if I was hiring a C# programmer to build back end server applications and a candidate told me they were unwilling to write ASP (which wasn't needed for the task for which I was hiring), I wouldn't hire them. I would hire someone I felt would be willing to pick up whatever task I gave them when they finished what they were hired for, and if it was ASP and they didn't know ASP, I would expect them to learn it. Part of being a programmer is flexibility: whatever you're hired to write, you will presumably eventually finish it, and unless it's a giant company that will just assign you to start on the next version, you will be given something else to do... or you will be let go, if you've made it so there's nothing else there for them to give you. Web sites need constant maintenance, updates, and new pages, so it's a lasting job. And I don't understand your ASP aversion: it's stupidly easy to learn. You learn HTML (I taught myself HTML in 45 minutes and built a 20 year career on that knowledge) and C# and you're 99% of the way there. After the HTML templates are built most of the work is just writing C#. 
When I'm hiring programmers fresh out of school, I don't expect to see much on the resume. A little about their degree or certificates, some general description of their coursework and skills, maybe some slight details about jobs they've had - which I don't expect to have been programming jobs - maybe a line or two about interests (most of which I expect to be non-work things like "dogs" or "surfing"). When I want someone that junior I'm going to be most focused on is this a smart person, will they take an interest in what we're doing, and will they be a good personality fit for the team. With a very junior person I generally assume I'm going to need to mold their skill set to my needs and teach them to be a better programmer. I expect that coming in the door their biggest asset is that they have learned how to learn. If they know (even vaguely) the language I'm using, all the better. (Usually the company makes that a requirement, but I don't necessarily.) You should write a code sample - a little program that does something you find interesting, or even just a little useful library. (My code sample is a library, written in Javascript.) Not huge, I should be able to read and comprehend your code sample in 20 minutes or less. Including the code sample with your resume may get you some notice as a junior programmer. When you are a mid level programmer it's best to keep it until/unless asked for it.
I don't think the article you link and the method he describes are talking about the same thing. The article is talking about empty interfaces (which are called Marker Interfaces in the article), but in the example public interface IEdible : IConsumable, IDroppable, IThrowable, ISellable, IBuyable // etc. { } I'm assuming all the inherited interfaces have some sort of "body" to them, i.e. IDroppable could include a method for Drop and IThrowable for Throw, etc. So the example is more of a bundle of interfaces, to simplify or shorten the declaration. Whatever implements IEdible would need to implement these inherited methods. Calling them Marker Interfaces may be confusing, at least I don't think they are the same thing as the article describes. 
Cant recommend this book enough.
I agree. Making every type hashable and equatable is not the way to go.
I may be too late to the party, but I would recommend that you read this short series: https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/
I'd like to mention Inedo's ProGet which is a great tool for hosting all sorts of things like Nuget, Visual Studio Gallery, NPM, Bower, Chocolatey, and others. It has a very clean UI and very easy to use. I also believe free version can be used commercially so unless you need the advance features it's free for everyone.
Where are you stuck exactly? What is the problem you're having?
A string basically behaves like am array of characters, so you can access each character by its index in the string, e.g. if the string begins with 'a', you can get that 'a' like this: "inputString[0]". So to reverse the input string, you could make a for-loop that starts at the last character of the input string and then for each iteration adds that character to a new string. Hope that helps, if not I'll try to explain it in more detail :)
I get what you mean but I don't understand how to start with the last char in the first place. For example, if I type "Joshua", how do I start with "a" from it? Also, I don't get how this works --&gt; name.length = i, so as long as i &lt; 0, iterate. Afterwards, I want to take the array which contains the char of name(?) --&gt; array[name.Length - i]. I also don't get this part where it = name[i - 1]; So I take the name, which is "Joshua" then take the length of the name and minus it by one for every iteration? I'm sorry for my bad English but this is my simplest understanding of the program. It would be much easier if I just put the Reverse array but I tried it and didn't seem possible. 
&gt; The problem is OP assumes interfaces and OOP are mutually exclusive and are interchangeable practices, when in fact this is not the case. I don't assume that those two practices aren't interchangeable; I wonder when to use which practice, and also when to use both of them. Thanks to this thread, though, I'm a lot smarter (I like to think) than before I started it. :)
Yea, your edit seems like you've grasped it! So basically you could read the input string, declare an empty string, and then add one character at a time to that string, starting from the end of your input :) Your code could look something like this: char[] reverseName = new char[name.Length]; for (int i = 0; i &lt; name.Length; i++) { reverseName[(name.Length - 1) - i] = name[i]; } string result = new string(reverseName); So basically: First, we declare an empty char-array, the same length as the input name. The for-loop then iterates over every number from 0 to the last element in the name, e.g. if it was "Joshua", it iterates over 0, 1, 2, 3, 4, 5. For each of these numbers, we put the character at the corresponding index at the index that it should have in the reverse order, so for example, when i = 0, we take the 'J', and put it at the last index of the array containing the reversed name (reverseName[name.Length - 1). Then, when this loop is done, and we have an array of characters in the reverse order than the input, we use this array to create a new string, in this case named result. Your english is fine by the way :) EDIT: I see that I have done this slightly different than what I proposed in my first comment. We could just as well have done it in reverse order, starting at the last index of the input and inserting that at the first index of the reverseName array, but the concept is the same :)
You need to learn how to debug. The simplest way to do this would be to insert some debug statements and watch your programs execution. The error in your code is obvious just by looking. But let's just imagine that I wanted to debug this genuinely. Console.Write("What's your name? "); var name = Console.ReadLine(); Debug.Print(name); var array = new char[name.Length]; for (var i = name.Length; i &lt; 0; i--) { Debug.Write(name[i-1]); array[name.Length - i] = name[i - 1]; } So I added 2 statements. 1) print the string I received and 2) print each character I am writing. What I expect is to print the string I just typed and then see each character in reverse. When you do this you'll see there is no output of the characters in reverse. Why? Because your for loop is never executed. Why? Because your condition check is always false. You initialize i to the .Length of the array and then test whether i&lt;0. This is always false. 
But it is a huge difference. Modifying the array means all references refer to updated data. Creating new data doesn't do that. Sure if the array isn't shared then it doesn't matter. But there is a huge difference. Arrays in C# aren't immutable objects and shared is often implied. Obviously OPs array isn't shared, what OP wants is probably `Console.ReadLine().Trim()`. Not to allocate 2 arrays and discard one immediately. But modifying a reference vs constructing a new object are fundamentally different. 
Thanks for the advice, but I have yet to learn debugging since it's the last part of the tutorial I'm learning on--Udemy. I'll keep that in mind :)
yep! That was it... namespaces missing in web.config! thank you!
Can you post a [Minimal, Complete, and Verifiable](https://stackoverflow.com/help/mcve)? The code as you've posted it I don't see how it would work. The only place I can see `m_mainAccessory` assigned is in the `CraneState()` constructor, which in turn just instantiates a default `TagInfo`. In this case, the `m_mainAccessory.Value` would be `null`. Otherwise, all we see is the `CraneState.MainAccessory` setter, but nowhere do you show where it's set. Furthermore, your `Crane.MainAccessory` getter is a bit confusing to me. I don't know why you're working with a few extra redundant variables here; I assume this is from trying to debug it. As it stands, all I can assume is that your PLC library or wherever you're calling `Crane.MainAccessory = ...` is passing in an `AccessoryType` and not the integer you're expecting it too. Try running the debugger and set a breakpoint in the `Crane.MainAccessory` setter and verify that you are setting the values you expect. And if they're not, then you can start looking up the call stack to see where things have gone wrong.
A string is an array of `char`. Example: string foobar = "123"; Console.Write(foobar[2]); //prints 3 Console.Write(foobar[1]); //prints 2 Console.Write(foobar[0]); //prints 1 Resulting console output: 321 All indexed collections in C# and **most** other languages *start its index at zero*. You can google as to why that's the case. So, our "123" string has three `char` *elements*. In other words, `foobar.Length` will return 3. Semi-visually, when you create a string like `string foobar = "123";`, a `char` array is being created sort of like the following: char[] chars = new char[3]; //create array with fixed length of 3 chars[0] = '1'; chars[1] = '2'; chars[2] = '3'; So, how do you retrieve the *last* character of a string (which is a char[] underneathe the hood), you *could* do this: string foobar = "123"; char lastChar = foobar[foobar.Length]; ... but you'll get an index out of range exception. Why? Because `foobar.Length` returned 3 but there is no element at *index* 3. To correct for that, you'll commonly see this: string foobar = "123"; char lastChar = foobar[foobar.Length - 1]; //note the minus 1 Since we subtract 1 from the length (accounting for the fact that the array starts its index at 0), we retrieve the `char` element at *index 2* which, for our `"123"` string, is 3. Now, loops. A `for` loop has 4 components. Assume the following: string foobar = "123"; for (int i = 0; i &lt; foobar.Length - 1; i++) //note the -1 from foobar.Length { Console.Write(foobar[i]); } The `int i = 0` is where you initialize your variable you'll be using to count with whatever value you want. The ` i &lt; foobar.Length - 1` is the *condition* that must be true in order for the loop to *interate*, and the `i++` is how we want the counter to resolve its new value after every iteration (i.e its step behavior). `i++` is just syntax sugar or shorthand for `i = i + 1`, thus incrementing `i` by 1 every loop iteration. The 4th component of the `for` loop is code you want to execute every iteration which, in our example, is `Console.Write(foobar[i]);` Now, the result of that loop is as follows: 123 We are using the value in `i` as the index for the `char` array -- this is why we must include that -1 in the condition. Without it, you'll get that index out of range exception. The `i++` doesn't occur until after every iteration, so for the first iteration, `i` will equal 0. The 2nd iteration it will equal 1. The 3rd, 2 -- but on the *4th* iteration, it will equal 3, and our loop condition will now be false, so the loop's logic is never executed and the loop *breaks* out. We need to *reverse* the string, though, to solve your issue. We can do this by adjusting the loop's components: string foobar = "123"; for (int i = foobar.Length - 1; i &gt;=0; i--) { Console.Write(foobar[i]); } We initialize `i` equal to `foobar.Length - 1` (so, 2). Our loop condition now requires `i` to be greater than or equal to 0. Our step behavior is to decrement `i` by 1 which can be done with the shorthand syntax `i--`. Our `Console.Write` call is the same. This time, however, we are counting *backwards*, starting at the last element first and ending on the first element at index 0. Result: 321 Hope this helps.
Thanks very much for taking the time to reply. The problem is that a complete example would require anyone trying to replicate the issue to have an OPC server and the PLC library I am using. I was hoping (without much actual hope) that someone would see something dumb I'm doing that would explain this. One of the things I didn't show was that the CraneState class has a Tags property that returns a dictionary of the TagInfo objects in this class. A method in the Crane class, which I didn't show, reads all of the PLC tags and writes into the TagInfo objects. 
Yup, I understand the challenge. I didn't notice anything obvious in the code you had that would be causing it. I think the best course of action for your right now is to attach the debugger in the `Crane.MainAccessory` setter and the `TagInfo.Value` setter. Break the program when an `AccessoryType` is assigned and work up the call stack to see why.
No problem, glad I could help :)
Awesome, I'll give this a shot. Thanks!
So if I'm using a C++ library that uses templates, there's no way I can use it in C#?
Ahh. You can leverage native C++ libraries by using the [`DLLImport`](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.dllimportattribute%28v=vs.110%29.aspx) attribute. For specifics of doing so with Unity, they have some information and some additional links in their documentation: https://docs.unity3d.com/Manual/NativePlugins.html
O.o shouldn't it be "if i &gt; 0" ?
I mean dude its 50 euros for a fantastic reference that has lots of stuff to learn from, that'd cost hundreds of dollars in "lesson time" or you'd have to watch several pluralsight videos. not a bad deal. 
Would it work with templates?
Ultimately the biggest hits are going to be to areas of code known as "speculative execution." When a modern processor runs machine code it does so in a pipeline where it starts a second instruction before the first one finishes... This is pretty straightforward in code that doesn't have `if` statements or virtual method calls (method calls on interfaces or lambda functions or virtual methods and their overrides in non-`sealed` classes), but if there are any of these, the processor has to guess which branch gets to fill the pipeline. If it is right, everything continues at full speed, but if it is wrong the pipeline needs to be cleared and started over. The core of the bugs are that side effects of failed branch predictions are measurable: // arr is int[0], arr2 is int[10000], others are int if (index &lt; arr.Length) { result = arr[index]; index2 = (result &amp; 1)*1024 + 2048; // numbers are chosen to be larger than CPU cache size if (index2 &lt; arr2.Length) { // so all of arr2 cannot be in cache at the same time result2 = arr2[index2]; } } Due to branch prediction, it can happen that everything inside those if statements gets to run and get mostly through the pipeline before the first branch fails and discards the pipeline. At least, the page containing either `arr2[2048]` or `arr2[3096]` gets into cache. At this point it is possible to measure if it is faster to access `arr2[2048]` or `arr2[3096]` and doing so lets you infer which one was in cpu cache, which lets you know if the bit `result &amp; 1` is set. The big problem there is that it lets code read memory outside the boundary of a sandbox. For example, JS/Lua/etc can read the memory of the host process. Or a virtual machine can read memory of the host system. Effectively if you allow the execution of untrusted code without protecting against this, you are unable to prevent that code from reading outside of the boundaries you set. On some architectures the problem is even worse in that the untrusted code can read kernel values (as opposed to merely other memory in the same process). --- The nasty bit is that the above code is one of nearly infinitely many possible gadgets that could happen to exist in elevated processes... If for example a kernel has that code in an accessible function and you have a handle to `arr2` as well as the ability to supply `index` to the function, you can get the kernel to run the code and fill cache for you with data for you to make inferences about its process. This revelation has triggered something of a "nuke it from orbit" impact level. The fix suggested from intel is to prevent speculative execution on any branch testing untrusted data. To do this in C# you would use a memory barrier (aka a `fence`; if the current .NET or a future one doesn't do a `fence` already for array accesses): if (index &lt; arr.Length) { Thread.MemoryBarrier(); result = arr[index]; // now this would never be read speculatively index2 = (result &amp; 1)*1024 + 2048; if (index2 &lt; arr2.Length) { result2 = arr2[index2]; } } --- # Why care? If you are running some sort of sandbox with your own security boundaries between things (for example you were writing a web browser) you would need to ensure that either this memory fencing took place and/or that you cannot measure the latency difference between something being in various different memory locations. If you are writing the untrusted code, you have to be aware that there is a performance impact for this fencing (and potentially that you might be impact by the loss of high precision timers) by the sandbox environment. You can avoid it somewhat by not writing code that branches or does virtual calls (though that may sometimes be more slow). If you are writing code that runs at a higher than normal user privilege level, you need to worry about not providing accessible gadgets to malicious parties. Most compilers are offering flags to go pretty overboard on fencing so a immediate solution would be to enable them; a long term solution would be to write code with a better eye for what the side effects of out of order execution might be and manually add fences where necessary. I think we can probably expect the CLR and compiler to do the work for us on these because these issues are specified not to happen already. The sorts of things that would be countermeasures are already optimizations considered in high performance code for us writing C#. 
What are you trying to achieve?
Thank you for your comments! Let's address them: - I'm not arguing Equals should be exempt from null-checking and I didn't say == throws for null arguments. What I propose is that a truly useful equality operator - one that does not exist in C# yet - should not throw for nulls. == is like that, except that it compares references, a problem in my view, one which is debated over the next points I make. - I believe you've simply stated how overload resolution works. What you've said is absolutely true, but my point is something else: that the same values can be compared in different and unexpected ways according to being boxed or not (I understand that in memory they are no longer the same, but semantically they are), and so that we must watch out. Of course, many of us know this well and won't make these mistakes - we'll null-check everything and use Equals in generic code, for instance -, but new users certainly will and it is not even close to being a feature; rather, it is much more like a consequence of language design decisions. - When you say that ==(object, object) testing for reference or value equality according to the types is something we must know of and not a problem, you're once again just stating a fact. What I mean here is that it would be much better if we didn't have to know what type we are operating on. It would be much better if == had the same semantics no matter what types we are invoking it on. Just for a quick comparison, I could state that we don't need static types because developers need to know what types they are dealing with. Obviously this completely ignores how limited our brains are on the necessary bookkeeping. Also, I understand that the distinction between references and values is important, but I try to argue that we should only use reference equality to implement one single kind of equality, which would then be used throughout all our code. I even mention that Haskell has only one kind of equality and that it works just fine. Thanks for the comments and hope I've explained myself more clearly now!
I'm trying to implement some math stuff in C#, and what I've described above almost perfectly mimics how it works in math. Ultimately I think I will have to go the more convoluted and messy route, or use specialist math software.
Where is the method `SetType` coming from in your `AccessoryType(int)` constructor? Your `TagInfo` class can be reduced to: public class TagInfo { public object Value { get; set; } } Use the shorthand syntax above if all you need is to set and get some value. You don't need to declare a private member variable with the shorthand syntax -- it is done for you "under the hood". This can also be done for your `AccessoryType.Type` property. Instead of `Convert.ToInt32(accessoryValue);` you can do `(int) accessoryValue;`. Your enum shouldn't have the `Enum` suffix. Furthermore, your `AccessoryType` class doesn't appear to be useful at all. Your code model is kinda screwed up here. The `CraneState.AccessoryType` property should be backed by an `AccessoryType` *enum*, assuming you rename the enum and delete the class with the same name. You aren't separating the concerns of the `CraneState` very well. Delete the `AccessoryType` class, rename the enum to `AccessoryType`, remove the `TagInfo` from the `CraneState` class, and change the `CraneState.MainAccessory` property to get and set the `AccessoryType` enum. TagInfo.cs: public class TagInfo { public object Value { get; set; } } AccessoryType.cs: public enum AccessoryType { None, //etc. } CraneState.cs: public class CraneState { public AccessoryType MainAccessory { get; set; } } Convert the integer to an `AccessoryType` outside of the `CraneState` class. You can do this with casting: int accTypeInt = 3; AccessoryType accType = (AccessoryType) accTypeInt; The result of that cast will be `AccessoryType.Magnet` since enums start at 0 by default.
 from f in film join i in inventory on f.film_id equals i.film_id group new { i.store_id, f.rating, f.film_id } by new { i.store_id, f.rating } into g select new { g.Key.store_id, g.Key.rating, Anzahl = g.Select(x =&gt; x.film_id).Distinct().Count() }; * If you are grouping by multiple keys in LINQ you need to form a single value via something like an anonymous type new { x = y, ... } or (in C# 7.0 you can use a tuple instead). * There is no Count(xxx) operator in LINQ.. (There is but the xxx argument is a predicate not a value) So you have to simulate it using another query over the group. I'm not sure you actually need to use the Distinct() operator. That depends on if there are repeats of different ratings for the same film id, or if the film is listed by the store more than once, etc. 
Within the type system if you can define `x &gt;= y` to be X extends Y you can do: class MyClass&lt;T&gt; where T : Y But you cannot do: class MyClass&lt;T&gt; : MyClass&lt;Y&gt; where T : Y 
Many thanks for taking the time to reply. The code I showed was by necessity very incomplete, and many of the questions you ask might be answered if you saw the complete code. (Then again, you might just be more appalled than you are now.) The problem was solved by changing the AccessoryType setter to convert the value to an integer that is a valid value for the enum. The excess code in the getter was merely for debugging.
works perfectly without the Distinct() operator. THANK YOU VERY MUCH!
As I said, apprenticeship. It's not a matter of not *wanting* to buy it :P
&gt; It would be much better if == had the same semantics no matter what types we are invoking it on. I think this the source of our disagreement. I believe operator== does have the same semantics. You believe it doesn't. A variable with a reference type holds a value, that value has semantic meaning as the identity of some object. Testing a pair of reference type variables is a test for whether those identities are equal. This has the same semantic meaning as testing a pair of ints. The value of a reference is the identity of the object not the structure of the object. I just think we disagree on the purpose of == and the purpose of types. Types are information, and if you want to write code ignoring types then use a dynamic language. 
Just launched in December a charity calendar buying App.. Used intergrations. *stripe *Facebook auth *sparkpost *bootswatch *google analytics * let's encrypt *A few more... Using asp.net core 2... A one time unpaid gig... This month I've moved the whole thing from azure app service to an azure linux vm... To save on costs as it's a charity.
The stack trade should give you this information. Resharper has a stack trace explorer which creates links on that information that will pull up the source file where the exception was thrown.
Maybe I just don't understand your question well enough but if you have Visual Studio open and its debugger attached to your running application (or just start it in debug mode), the debugger will break and bring up the line it was thrown on. If this doesn't happen to you, you might not have the VS debugger attached or might need to check your exception settings that control this behaviour (the settings determine what types of exceptions are handled this way).
Check out F# and discriminated unions. 
What math things are you trying to do? There's probably a way to do it that doesn't involve class inheritance. Why do you need extension?
I don't intend to push this much further, but == is not always reference equality. Strings are reference types with == overriden for value equality but IPAddress, another reference type, has == for comparing references. There is no pattern to be found here, == will behave differently on a type by type basis. Given this, the only way to use == safely is to know exactly how each type is defined, much like keeping a small dictionary in your head. The point is that this is, in my opinion, a bad thing.
If I have a catch block, execution breaks inside it, and I don't see where the exception was originally thrown. I'll look at the exception settings. Thanks for the suggestion.
I believe the default settings are to break on unhandled exceptions only. There is an option to break whenever one of a certain type is thrown, though, try looking into it.
What does that even mean? what country are you from? I just bought a few Udemy courses for myself, even though I have a full time job that probably would pay for it, just because I want it and will use it now. Dont want to wait 10 days for human resource request shit.
I tried looking for that clsid, seems there are multiple instances of that key. It was always pointing to some dll file which is already present on the disk. Anyway, thanks for the help. I decided to bite the bullet and learn some VBA, although I hate its syntax. The embedded VBA scripts seems to work all the time without any issues. 
Thanks for the pointer, I decided I already spent too much time on this so I ended up writing it in VBA directly in the embedded VBA editor. So far it works OK.
Sure thing. Strings are quite special though, the operator==(string,string) is defined in the C# spec. Strings are also an immutable type which implies a different semantics. Strings are very special in .NET. But I see your point. However class IPAddress doesn't define operator==(IPAddress, IPAddress) so it uses operator==(object,object). This isn't ambiguous. I can't even think of a single class that does define operator==. I can think of many structs ArraySegment, ConsoleKeyInfo, DateTime, Guid, all the integral types. Having an implementation of operator== usually goes hand in hand with being a value type or if defined on a class having value type semantics. If you don't know what operator== is going to do either check the documentation for your type or call .Equals, if you can't call .Equals because you don't want to perform a null check then call Object.Equals. I don't see what is to be gained by defaulting to value semantics. References aren't values. I guess my main idea is that == and .Equals aren't the same thing. It's ok that different constructs have different semantics. Being different doesn't mean inconsistent or confusing. 
For most common scenarios, just press Ctrl+Alt+E to open the Exception Settings window, then tick the second box labelled 'Common Language Runtime Exceptions'. Now you will break on the line that causes any exception rather than hitting the catch. To change it back, check the box twice more until it is a white square again.
We generally structure our data operations into various "services" (just C# classes that encapsulate related logic). These services inherit from a BaseService that has something like this defined: public abstract class BaseService { protected IServiceResponse Execute(Action func, bool rethrowException = false) { var serviceResponse = new ServiceResponse(); try { func(); serviceResponse.IsSucess = true; } catch (Exception ex) { serviceResponse.IsSuccess = false; serviceResponse.Exceptions.Add(ex); serviceResponse.Messages.Add(ex.Message); Logger.LogError(ex.Message, ex); if (rethrowException) { throw; } } return serviceResponse; } } The `IServiceResponse` object looks something like this: public interface IServiceResponse { bool IsSuccess { get; set; } List&lt;Exception&gt; Exceptions { get; set; } List&lt;string&gt; Messages { get; set; } } Then you wrap your actual logic inside the `Execute` method from your service that implements `BaseService`: public SomeService : BaseService { public IServiceResponse SomeMethod() { return Execute(() =&gt; { //do your logic here - it's automatically wrapped in Execute's try/catch } } } 
As a senior software engineer that interviews candidates on a weekly basis, there is zero opportunity for someone who doesn't want to learn something new.
just reverse iterate. { int j = 0; for (int i = name.Length; i &gt; 0; i--) { array[j] = name[i]; j++; } }
I did some unit tests and found I was basing the size of hashIntMap off of the size of a small string, instead of the constant hashSize. I changed it and everything is working perfectly. Thank you! 
Ah, that'd do it! Glad it worked out.
https://www.jetbrains.com/help/resharper/Navigation_and_Search__Navigating_to_Exception.html
Thank you for the reply. I am fairly new to WPF and C#, not really sure how or where to put what you suggested. &gt;.&lt;
That's how we use it, the new "mainline" mode is especially useful. No more futzing with XML or property pages or whatever black magic was needed to set the version number on all the assemblies and nuget spec files prior to build/package/deploy.
My situation was a bit strange because programming was a career change for me when I realized my liberal arts degree was a ticket to nowhere. I had a good number of years in the corporate world, which was valuable to me in that I knew how to act in a corporate office setting. I just put my degree and Github link on my resume. One thing that my current boss told me that help me more than anything else was that he knew I'd be professional. I was the only person that they interviewed that wore a suit to the interview.
As many classes as there are ints? So, for the sake of understanding you, a total class count of `Math.Abs(Int32.MinValue) + Int32.MaxValue` defined during *compilation* or you want to generate these types during runtime?
Speaking to your 4th bullet point: Your .cake file will typically share patterns across solutions, but each .cake file for a solution will ultimately end up somewhat unique per solution. So don't try to build a cake file that can handle all scenarios at once. Fortunately, the cake syntax is cleaner than MSBuild XML files and handles a good bit of the yak shaving you had to do with MSBuild. On the flip side, your build.ps1 script will be common across all solutions and deals with the vagaries of the build server. The rest of that should be easy (we use AppVeyor, GitHub hooks, Azure and MyGet). When a PR gets merged into development / master (not all repos need a development branch), AppVeyor notices the new PR and starts the build. That includes building the solution, running all the tests, packaging up artifacts for deployment to Azure and packaging up NuGet artifacts for deployment to MyGet.
It’s not much, but I saw a “penny challenge” on Facebook and wanted to check the math. I decided to test my new, developing skill.
Have a public portfolio, github repository, or some other way for them to verify your skills. Have a pleasant, but no bullshit resume. Apply for every entry level job you see and go through the interviews. Don't lie about skills or abilities, just be honest. Some company will be willing to take you on, but don't expect to make bank on your first job. You may get lucky with a company paying you a normal salary, but I would take even a crap paying job for the first 6 months to a year, then jump ship with your working experience. Don't stay at the first company unless they recognize the skills and pay accordingly to your area and level, and ultimately if you like working there. You may have to put up with some crap until you get some decent experience on the resume. Where are you located (generally speaking)?
Post your code so we can take a look.
I just applied to C# jobs saying I had extensive experience with it from private projects. 
[Here](https://imgur.com/a/Rob4i)
Two things: The format of your `if` statements is not correct. Should be: if(choice == "Hamburger" || choice == "Hotdog") You're adding too many parentheses. Second, `elif` isn't valid. Should be `else if`.
Should be "else if" not "elif". The second "else if" needs a condition. Also, conditions have to be surrounded by parentheses. Look at the red squigglies. VS is telling you where the problems are.
Real talk.
Thanks
That's great! Keep at it, take lots of courses and make lots of sample apps. Don't focus on Unity. The jobs in C# that you will land will all be business apps and probably focusing a lot of ASP.Net/JavaScript.
You're right. Good call. Trimming each string as it is read is a better option. Returning a new array probably isn't a huge issue in this case but it's definitely not the best practice.
To be fair, strings are also immutable. So whatever way you do this you are still ultimately creating a new reference to the string when you call Trim(). But I do agree that creating a completely new array is not the most efficient solution.
Really glad you got it sorted :)
It's true. The remote façade is invoked on the client. You'll be interacting with a distinct method on the server whether that's a controller method of a Web API or something else. I'm not too fond of the example here, so I'll give you another one that is a real world example of something I happened to be editing today (so it's fresh in my mind). I have an employee that has a quite complex object graph. The employee has all kinds of details like name, department, status, and title, but it also has nested types like email addresses, phone numbers, special properties (for determining things like overtime eligibility), ratings for equipment, schedule, et al. It's a lot, but although complex that's how it's maintained and each of these should be updated as an employee not as the individual items. You could have an interface for updating that had SetEmployeeName(), AddPhoneNumber(), EditPhoneNumber(), etc. and save them. And you might do that if you needed to save properties as they were changed. But that's very inefficient over the network and makes for a very chatty application. In my case, the employee is treated like a document. You make a bunch of changes and then save it. Therefore, my remote façade method becomes SaveEmployee(). I've never called my classes that do this a remote façade per se, but the pattern fits.
Suggestions: - Use List&lt;T&gt; instead of arrays. It's easier. - Use interpolated strings - Make a Movie class with separate fields for name and rating. Store it as a List&lt;Movie&gt;. That way you don't have to take apart strings to find the rating. - What happens if the user doesn't enter a number when asked to enter one? How could you handle that scenario? 
Can you give an example of the code you'd want to write with it? Like an actual calculation/deduction that relies on it?
Make an account at hackthissite.org and do the programming missions a lot of good experience there, requiring you develop your analytical skills. My path wasn’t typical; I’ve been asked to help out our in house dev team (I was already, and still am, a Systems Engineer with the company) because they have a lot of work on their plate. Had a little in house interview and it was those programming missions that got me the job.
/u/thecodemonk's advice is great, but if you can't get that to work for you, it might also be a good alternative to try and get a QA or tech support job in the mean time. Those jobs often give you the opportunity to demonstrate some technical proficiency in the workspace, which can help to leverage a programming job (either by moving in that company or applying elsewhere).
This is true, but there are also still a lot of jobs maintaining legacy crap from the early 2000's. (And or course well before that, but those wont be in C#).
You won't get jobs making "spreadsheet programs". Companies generally want a lot of programmers to write boring business applications, usually with either a Windows interface like WinForms or a web interface in either ASP or MVC (either one with Javascript in a lot of cases). Usually there's a back end running on a database (if they're a microsoft shop it'll likely be SQL Server) and often there's an ORM, usually either Entity Framework or nHibernate. In general I find companies want stupid boring apps which have one or more forms to enter data, one or more forms to search the data, and one or more (usually several) forms to view the data / edit it / delete it / add to it. (In a lot of cases if they'd just be clear about their needs up front and you were allowed to start from scratch, MVC can build the entire app for you, then you add on a login screen and you're done. However, companies almost always demand something stupid which makes it a major custom job.) You're going to find yourself writing boring business app after boring business app, almost all of them doing basic database tasks like I just outlined. So learn SQL really really well, then learn an ORM (you need both because sometimes you will need to submit direct SQL to get what you want through the ORM and sometimes you will need it to create views etc), learn HTML and a little javascript (you don't need a lot to be able to use JQuery and then you'll look like a hero), and learn both ASP and MVC. (You'll like MVC better but a lot of companies demand ASP and it's easy.) Then prepare to write similar boring database applications over and over. Your career will get more interesting if you are good enough to advance a bit, but understand you will need to prove yourself first. (Hint: you're expected to become proficient at programming. Advancement comes from showing good skills at customer service and business. If you can soothe an upset business person, listen to their needs in plain english, translate those needs into a technical design the programmers can use, then eduicate the business person in plain english how to use it, your value will instantly go up about $20,000 a year.) 
This is perfectly valid if you can cite them, show web sites about them, demonstrate an app during an interview, and show a code sample. I have in fact interviewed such programmers. One didn't get hired because there was a better candidate, the other submitted a code sample which turned out to be open source written by someone else, so they got taken out of consideration.
Good tip!
You build a portfolio and get involved with open source projects, also attend local developer meet ups. You'll get a job. If worse comes to worse then work as an intern until you prove your worth. That's how I started back in 2000, I worked for free for 2 months then got a full time great salary offer once I proved my worth.
That's good to hear! It's worth noting that abstraction is one of the four principles of object oriented programming (inheritance, encapsulation, and polymorphism being the other three), and interfaces are the epitome of abstraction. Therefore when you choose to use interfaces, you are following the principles of (or "using") OOP. It is a good idea to always implement interfaces at a base level, as this better enables things such as dependency injection, unit testing, and generics. It also enables you to cast objects to a partial abstract interface rather than a concrete class which may contain a lot of properties and methods that you don't need in the context you're using it for. Example: if(yourObject is IEdible edible) { edible.Sell(); } 
Exactly my experience. There will more than likely be a lot of CRUD before you're doing anything too interesting.
&gt;As a result any object that's intended to be used as a remote object needs a coarse-grained interface that minimizes the number of calls needed to get something done. &gt; This is the key point of a remote facade. The general point of the facade pattern is to hide complex (fine-grained) operations behind a single, simple (course-grained) operation. A remote facade is used to combine multiple cross-process operations into a single operation (multiplexing). Consider a web API that needs to fetch a user's profile. Rather than making several, seperate calls such as getEmail, getUsername, getAddress (all of which require a separate TCP connection to be established), the API can implement a method to getUserProfile which returns all of the data needed for the profile page. Given the above example, it's obvious this facade method needs to be implemented on the remote server, however, it also needs to be called by the client to be of any benefit otherwise the client will continue to make the multiple calls to get the data it needs.
Your explanation is crystal clear, so thanks so much! I was a bit confused at the iteration part and you really helped me on this, especially about the elements and index. It got me a bit confused since elements start at 1 and index at 0 but it's all good now, just need to get used to it. :)
I'm trying to model a certain class of function spaces, and these spaces naturally extend each other in the way I would like my classes to. It can be done without, I know, it just makes the code messier.
I've only got one calculation at the moment and it's several thousand lines of code, I could cut down the code length (and more importantly the clutter and improve readability) by implementing what I wrote in the OP.
During runtime, the actual type I want to index by can have as many values as I have memory to store them, so generating them at compilation would be impossible.
Apply for jobs.
Since you’re starting out, consider skipping straight to .net core. I’m migrating a hobby project to it right now and it’s slightly different in the libraries you have access to. Ive read that most stuff is going to go that way especially web development and cloud applications so you may as well skip the regular .net. It has some advantages. For asp.net (web development) switching to core gives some crazy performance increases like ninety thousand per cent or something.
Yes, I was able to talk about my projects and answer technical questions.
&gt; conditions have to be surrounded by parenthes Are you sure?
What's the difference between a delegate and an event? (Don't Google it!)
I would rather test people on their logic and problem solving, and not every corner of the language. If they have the first then they can learn the last.
Ok, a Person class looks like this: int ID, string Name, int Age, Gender Gender. Given a random IEnumerable&lt;Person&gt; how would you calculate the average age of the people, by gender? (So I'm after the Gender.Male average age and Gender.Female average age)
&gt;is there any package manager in C# That would be [nuget](https://www.nuget.org/) but I don't know how it works with Unity.
If you're doing Unity then the Unity Asset Store could be considered the package manager. Most commonly C# uses NuGet which is built into Visual Studio. Right click on the Solution in tree to manage NuGet packages.
Lol I am not on interview here, but I like this one. foreach (Gender gender in Enum.GetValues(typeof(Gender))) { double average = people .Where(p =&gt; p.Gender == gender) .Average(p =&gt; p.Age); } I guess I could also do something with GroupBy()
I would have gone with GroupBy, yes, but that shows at least a basic understanding of LINQ so that's good. Last question before I hire you: What does "Tell, dont ask" mean and how do you fix code that violates it? 
So just to confirm, on the server the getUserProfile method would call getEmail, getUsername and getAddress, but since those calls are made locally on the server they're not using any network traffic at all and only the getUserProfile method is called over the network by the client, instead of the client calling all 3 over the network, which results in faster response times because less traffic and overhead is being transferred over the network?
I don’t think this is great advice, reasons being.. 1) due to his lack of skills it’s unlikely they’d set him off on his own on a greenfield project which would largely be where .net core development is 2) there’s nearly 2 decades of legacy .net code out in the wild, most of the time he’ll be working with legacy projects By all means learn .net core but that should be secondary to learning the last prior non-core version if trying to cast a wide net for landing a job
I disagree, I think it's important programmers know, if not the definition of "Tell, dont ask", at least an understanding of why you should tell and not ask. It applies to all object oriented code, not just C#. I have no formal education in programming either but knowing the difference between a delegate and an event is something that would really set apart a good candiate from a great candiate, because it shows something you say you have: _extensive experience_. If I asked what the difference between a string and an int was, you'd know right away. This is the _next level_. Knowing what common code smells are and how to avoid them is something else that's very important, and one problem with many code bases is too many public getters and setters, so that nothing is immutable and the codebase turns into a dependency nightmare of things updating properties on other classes in huge spawling methods (usually static). I would say from this you had an excellent understanding of the basics of programming and a good undertanding of intermidate programming skills but lacked knowledge of advanced concepts and good coding practises, so saying _extensive experience_ was probably an exaggeration.
You could have googled the definition of tell don't ask. I'm more interested in if it makes sense as a principle to you and how you would apply it, not if you can give me a textbook definition. Same with the difference between a delegate and event. If you knew what both were you'd be able to give me a vague description of the differences between them, but if you'd never used them you'd not be able to answer the question.
&gt; saying extensive experience was probably an exaggeration. I knew enough to become tech lead within the first year at my first C# job. Yes, there are a lot of things I still don't know, but I know enough to - Solve problems and provide real value to the business - Write readable and maintainable code For all the things I don't know, I know how to find the answer when I need it. And that is all a business ever cares about.
I did google it and as many times before it turns out that it is a term I didn't know, but for a concept I have been using for 10+ years. I think we are looking for the same thing, but when I interview candidates I will ask them to solve a problem while I am watching, because people who can solve problems and write good code is someone who will be of great value to the business.
Germany. It means I get paid shit for three years and visit school 1-2 a week, but afterwards I have a degree (not quite as valueable as university degree but I'm told for developers it doesn't matter as much as for other professions) and most likely my company will hire me as a fully paid developer. Bought it anyways today. Had some savings left that I meant to use for a new GPU but I figured this is more important.
Could I possibly ask a similar follow up question here? Similar question with a twist. What if you have business schooling and an MBA (but not a top school one), does that stuff help in this world at all? I'd love to make a career change, but I make a good salary in management and I can't take a major cut (~$80k, Detroit area). 
That's correct. While the response will be larger, the round-trip time (RTT) will effectively be reduced by about 65-70%.
An if in C# requires **one** condition, `true` or `false`. And that one condition must be wrapped in parentheses. But of course the expression that results in `true` or `false` can consist of many logic branches, which do not need to be surrounded by parentheses.
I would challenge "Someone who knows the terms is obviously more likely to be better than someone who doesn't know the terms". At least for this term. For other more common ones like inheritance and encapsulation, sure. But this is just a description of a way of doing things that I would speculate most people haven't heard of. It's not a common thing, at least in my experience. It also seems crazy to me that because he didn't know the difference between a delegate and an event you can immediately assume he doesn't understand "advanced concepts and good coding practices". From that 1 data point.
I think you have an error here. Should be `Age &gt;= 1` if (filmName.EndsWith("(U)") &amp;&amp; age &lt;= 1) { Console.WriteLine("Enjoy your film!"); } Look at logic for the `&amp;&amp;` diagram [here](https://msdn.microsoft.com/en-us/library/fw15c9s2\(v=vs.100\).aspx) and pay attention to the results. There is only ONE case that holds true (when both are true) and the rest are false. How do you think you might rewrite these type of statements? if (filmName.EndsWith("(12A)") &amp;&amp; age &lt; 12) { Console.WriteLine("Sorry. This movie is rated 12A and up. \nHave a nice day!"); } else if (filmName.EndsWith("(12A)") &amp;&amp; age &gt; 11) { Console.WriteLine("Enjoy your film!"); }
Good job! however, some things to keep in mind Your movie data requires that all movie titles ends with their rating, so what if a movie don't? what if a movie has some other sort of rating that your if-statements don't catch, or what if somebody just spelled it wrong or added another space at the end? Generally, storing data in strings that are not actually "text" in its purest form is bad practice. It requires you to create some sort of format specification and a bunch of methods to properly parse the strings to handle bad formatting (which can be pretty tricky sometimes), at which point you might as well use a well know strictly defined data format like JSON or XML. However, for this program, it might be kind of overkill, so look into creating a Class for the movies instead where they can store multiple variables like "Title", "Rating", "Release date" and so on independently. Then you can also enforce that the values are valid when the movie is "created" (in the constructor) instead of when the data is accessed! Also, for sets of constant "exclusive" values (like age rating, or the names of suits of cards, or the days of the week), look into creating a Enum for them. If you then only allow an Enum as the age rating when creating, or initialising a movie you can further ensure that movies only have "valid" defined age ratings (instead of using strings that could be anything).
Where are the cmdlets for Sharepoint online? I've been pulling my teeth in c# writing programs to deal with sharepoint.
Be wary of "that's how I got started" stories. It certainly verifies it's possible, but if it's any longer ago than say *last year* then the industry changes very quickly and it may no longer be relevant. Anyway so I got started as a self-taught C# programmer about 10 years ago by applying to jobs, showing my "portfolio" and experience, excelling at the interview and code test, and taking rubbish pay for a few years. Come to think of it that would probably still work.
Not sure about php oop, but C# has a bunch of great features. Generics are at the top of that list. Interfaces and class inheritance are good to make sure you understand. Funcs, Actions, and delegates are things to get familiar with as well.
You can always just make your code faster generally, to offset the damage. Minimize use of virtual functions, only use Linq when it either offers a performance advantage, or if it massively simplifies the code, don't just use it by default every where. Don't use foreach on List&lt;T&gt; (it is slower than a for loop and not substantively simper), upgrade to the latest runtimes and .net frameworks. Generally abuse the CPU caches less since they are going to get abused more now by other things. 
Most honest response about programming I've ever seen.
Apologies for poor formatting
You made a string with the query but never did anything with it, like associate it with the adapter.
Unbelievable, thank you so much. Mistakes like that are what long nights working get you. Thanks again.
You'd be better served doing this with an SqlCommand object like so: SqlCommand command = new SqlCommand(query, connection); command.CommandType = CommandType.Text; int rowsAffected = command.ExecuteNonQuery(); You should also consider using a parameterized query. Concatenating the user input directly into the query is an SQL injection risk. Imagine what would happened if txtID.Text contained "'; drop table Bug;".
[removed]
I totally agree with this frustration - I think it becomes even more annoying when you have multiple inner exceptions and have you to drill into them to actually find where the exception came from. That's why I made the [OzCode Exception Trail](https://www.youtube.com/watch?v=6tWS4v71FOU) it adds both an interactive stack trace you can click on, and a single button that just does what you usually want - "Go to where exception was thrown".
In WebForms you would use a GridView. Link: https://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.gridview(v=vs.110).aspx You can simply bind your data to it and allow it to generate columns and edit controls. When an edit is saved it "automagically" updates the DB. Here is an example: http://www.dotnetspark.com/kb/643-how-to-editupdatedelete-gridview.aspx Also to add, WebForms isn't the preferred method and you should really look into ASP.NET MVC. 
I don't know for your error, but your code is prone to [SQL Injection] (https://en.m.wikipedia.org/wiki/SQL_injection). 
Because your query lacks a WHERE condition, it will attempt to update all records with the new values. As records in the `Bug` table cannot all contain the same values, you get the "duplicate value" error. (The WHERE condition dictates what records must be affected by your UPDATE operation.)
Make sure you dispose your objects too.
Youre right that is a error. Thank you. Next time around I was planning on bool values. Havent really worked with them directly. 
For future reference: depending exactly how your code was running (e.g. console application, debug mode, etc... ), you almost certainly would have got a lot more information in the exception message than just what you reproduced here. This would include the exact line on which the exception occurred. This may have been enough for you to study that line, and see what object was "null" (since that’s what the exception is telling you -*something* is null). From there, you may have been able to spot the bug. If that’s not enough, then set a breakpoint on the line that’s giving the exception, then hover the mouse over each part of the line to see if you can find which bit is null. Debugging is skill which needs to be practiced and learnt!
Debatable - I just got my first job (first semester at uni) doing C# work. So far I have found the work extremely interesting, fwiw I also used to manage a business in a similar field and I'm solving problems I used to face in my previous job. That said, given my lack of degree and no prior experiences with C#, my understanding of business and the issues it faces likely made me more valuable. I know someone who just went from C# dev to business analyst. There is an understated fact which is if you have a grasp on coding such as design patterns, interfaces, abstract classes, functional v oop paradigms, you can learn a lot on the job really quickly. What you can't really learn is how to understand business needs and if you aren't the business, ie you company doesnt produce software, they use it to improve the business then only understanding software is a downfall. If headed the c# route learn how software and business work together. It'll make you stand out a lot. Or it did in my case. 
Yes it is for complete beginners. It does not assume any prior programming experience.
Thank you for this! Yeah, I would have gone with MVC but I'm working on an existing project which uses webforms :(
I'm going to do something odd and actually answer the question. What you've described (a *type* which depends on *values*) is possible with a [dependent type system](https://en.wikipedia.org/wiki/Dependent_type). In particular, a family of types indexed by values of a type constitutes a *pi type* or *dependent product type*. In a dependently-typed language, say Idris, you can implement something like what you described more-or-less directly (I'm calling the mystery operation *blarfing*, and defining it as subtraction --- we don't have classes with inheritance in Idris, but rather interfaces which describe sets of possible operations): -- a type indexed by values (in this case, natural numbers) data TypeNat : Nat -&gt; Type where TyNat : (n: Nat) -&gt; TypeNat n -- an interface for the "blarf" operation interface Blarfable m n where blarf : m -&gt; n -&gt; Nat -- define "blarf m n" as subtraction, only where m &gt;= n ... Blarfable (TypeNat n) (TypeNat n) where blarf _ _ = 0 -- ... by induction on the natural numbers Blarfable (TypeNat m) (TypeNat n) =&gt; Blarfable (TypeNat (S m)) (TypeNat n) where blarf (TyNat (S m)) n = 1 + blarf (TyNat m) n main : IO () main = do printLn $ blarf (TyNat 7) (TyNat 3) -- prints 4 {-- fails with: Can't find implementation for Blarfable (TypeNat 3) (TypeNat 7) printLn $ blarf (TyNat 3) (TyNat 7) --} There aren't many dependently-typed languages out there though. Sometimes you can get a more limited form of dependent typing that lets you achieve what you want; for instance, C++ has "non-type template arguments" which let types depend on compile-type constant values of various numeric types (this is the closest thing you'll see to your literal description, where we have a class hierarchy tied to an order on natural numbers): #include &lt;iostream&gt; template&lt;unsigned N&gt; class blarfable : public blarfable&lt;N - 1&gt; { public: // ... I don't know, we'll make the operation factorial this time static unsigned factorial() { return N * blarfable&lt;N - 1&gt;::factorial(); } }; // use template specialization to provide base case for recursive inheritance template&lt;&gt; class blarfable&lt;0&gt; { public: static unsigned factorial() { return 1; } }; int main() { std::cout &lt;&lt; blarfable&lt;5&gt;::factorial() &lt;&lt; '\n'; blarfable&lt;7&gt; seven; // ok: treat as "lower" type blarfable&lt;3&gt; *as_three = &amp;seven; // compiler error: attempt to treat as "higher" type // blarfable&lt;17&gt; *as_seventeen = &amp;seven; } Ok, but back to C#. Is there any way we could model this? We can start by building type-level natural numbers via [Peano arithmetic] (https://wiki.haskell.org/Peano_numbers), just like we used in Idris to construct our inductive definitions. However, we quickly hit a stumbling block: I don't have any way to write a "type-level function" when trying to create my inheritance hierarchy. I *want* to be able to say that `Blarfable&lt;M&gt;` subclasses `Blarfable&lt;M - 1&gt;`, but I don't have a way to get from `M` to `M - 1`: it's an opaque type variable. In other languages I might use an "associated type", "type family", "template specialization", etc. to inspect `M`, but as far as I can tell, C# leaves me with no good choices here. In other words: using System; interface INat { uint AsUnsigned(); } class Z : INat { public Z() { } public uint AsUnsigned() =&gt; 0; } class S&lt;N&gt;: INat where N : INat, new() { public S() { } public uint AsUnsigned() =&gt; (new N()).AsUnsigned() + 1; } // what goes in the ??? class Blarfable&lt;M&gt;: Blarfable&lt;???&gt; where M : INat { // ... } static class DepClass { static void Main() { // just to illustrate Peano numbers var seven = new S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;S&lt;Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;(); Console.WriteLine("7 == {0}", seven.AsUnsigned()); } } 
Sign up for pluralsight.com they should still give you a free month tho try it and is predominantly c# videos. It will require a credit card so just cancel before the month is over. However, I find the $30 a month worth it due to the number of topics covered. For instance they have most all the design patterns you'll see explained in detail as well as courses on ddd. 
It does if you are going into a place that writes business apps, especially accounting based ones. You will still need experience to make what you are now. However, the Detroit area is a hot market, so you may get lucky.
Lol. It still blows my mind that people love new PHP because they're trying to make you take an OOP approach. 
I'm just getting blank forms and not the main form of my application 
Not sure what I'm doing wrong here
You can still use javascript and ajax. I would highly recommend using https://datatables.net/ and ajax.
Make sure you're using the name of the form (class) and not the name of the .cs file. There's no requirement that they match (but they really should).
Last time I used it you had to set the correct framework in VS so NuGet would only work with compatible libs, but yes, NuGet is still the answer. Unity has a built in manager as well but that's primarily for their plugin store.
This is the bumpy road any self taught professional takes. 
I've changed it to FormMain main = new FormMain(); main.ShowDialogue(); Error message under .ShowDialogue() now saying it does not contain a defintion for ShowDialogue and same if I just put Show
E book is fine. There are a ton of things .Net can do. So coding practice is required to learn and remember most of it. For practice you can use visual studio community edition, which is free.
Use free trial account on pluralsight to get some c# courses.
 static void Main(string[] args) { MyMethod(new[] { 3.0, 7.0, 6.0 }); } static void MyMethod(double[] numbers) { var idArr = numbers; // This is redundant; you could just use numbers instead. } 
&gt; a scripting language trying to be an oo language lol Typescript, JavaScript - ES6, Coffee Script (not so hot now, but it had its time), Python, PHP, PowerShell, Cold Fusion (arguable), Ruby, Smalltalk, Apple Script, Groovy, and Perl could all be considered scripting languages and are either OOP or multi-paradigm with OOP capabilities. Five of these have regularly been in and out of the top 10 most popular programming languages (JavaScript, Python, PHP, Perl and Ruby). The concept of OOP scripting is pretty prevalent in the industry, so it isn't worth deriding. If you don't like it, just mumble under your breath about it like the rest of us do when we get asked to work on VBA scripts to glue some Excel macros together 'because we know programming stuffs' ;)
It's ShowDialog, not ShowDialouge. Spelling counts.
so wheres the note?
Just to note that you don't need to use sprocs to be secure against injection, you can still use parameters in standard queries
Intellisense has saved me so many times... OP - Intellisense is the small pop-up that happens as you type. Visual Studio will fill it with properties/methods that it thinks you're likely to want, but you can scroll through it to find stuff. A true life-saver if you're a poor speller.
Still says does not contain a definition for ShowDialog
Post your code.
Very bumpy.
Removed: Rule 4.
*all starts slowly chanting "post your code"*
If you want a truck, buy a truck, not an el camino.
** Login Form ** using System; using System.Windows.Forms; namespace WindowsFormsApp1 { public partial class LoginForm : Form { public LoginForm() { InitializeComponent(); } private void btnLogin_Click(object sender, EventArgs e) { // Assuming the credentials were good... Program.LoginGood = true; Close(); } } } ** Program.cs ** using System; using System.Windows.Forms; namespace WindowsFormsApp1 { static class Program { [STAThread] static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); LoginForm frmLogin = new LoginForm(); DialogResult result = frmLogin.ShowDialog(); if (LoginGood) { frmLogin.Close(); MainForm frmMain = new MainForm(); Application.Run(frmMain); } } public static bool LoginGood { get; set; } } } 
why did you even try elif? the bloody red underlines should have been a clue
What's the format of the text file? As long as it's reasonably structured, I would read the data into a collection then use LINQ to find whatever data I wanted.
I think both approaches are valid. Now if you're more interested in architectural longevity or you're a pedant then MVC is the only way to go. For very small, very simple projects WebForms is completely acceptable, just make sure you're design is forward thinking, "If I die tonight, will the next guy be able to sit down understand my code, and pick up where I left off."
Show us what u tried. If you're not making an effort, we can't help you
Homework? This is one of the interview questions I ask people.
Do you do anything that doesn't involve low-effort posts? Like, this is Programming 101 and in other posts, you market yourself as a "growth hacker" but this is ridiculously simple. You are the precise reason that companies give hackerrank and leetcode challenges to applicants before they will schedule a phone call. I'm legitimately surprised, considering how many of your posts end up getting removed here, that you haven't been banned.
Have you tried spawning the login form from the main form while the main form starts hidden?
When you say beginner? I mean that’s some subject. 
Not sure you need a c# specific tutorial. GAs are conceptually simple. Start your initial population with random variables. Run each candidate against the fitness problem. Select your promotion candidates and mate them using crossover and mutation to make your next generation population set. 
Hi, I'm tester `0'; DROP TABLE Bug; --`, nice to meet you!
They're a lot of fun to write. You can probably find more help at /r/genetic_algorithms/
&gt; Items[0]
Very nice! The concept of reusing code by packaging it in libraries is essential in Software development. I was definitely not clever enough to do something like while at school, so you’re on the right track. 
It's temporary for now - I'm planning on adding more types as they become necessary for my projects. Also, I personally prefer having one or two methods that do a specific task. It feels more organized in my mind.
You're probably right, as it stands now it is a bit clunky, though I plan on working on it a bit more as I define more types that need to be read from input, so I'll see how that works out. Also, in my mind it feels more clean to have one method that does one specific task instead of having to look through the entire library to find what you're looking for. Granted, with proper naming that wouldn't be necessary, though then I wouldn't get to use generics, which isn't as fun.
Nice! I'll preface the remainder of this post by saying that there is a curve you will find yourself on as you learn programming, and discerning what is a "good idea" versus a "bad idea" can be difficult, so please try not to take anything I say personally. I'm certainly not always right, and am terribly opinionated, and (being strongly opinionated) am of the opinion that we all make some design decisions that our future selves would shudder at if we'd been presented with them later on. One of the things you'll find as you progress in programming (whether it's in C#, C, F#, or any other language) is the notion of the single responsibility principle. Also, as others have said, I would drop the generics, as you're not supporting anything "generic" (such as a queue, stack, or other collection type, as a good example), and I would also remove all of the calls in to the `System.Console` API. These methods would likely be better structured as accepting string input for the thing to parse, and returning `T? ReadThing&lt;T&gt;(string) where T: struct` (note: I'm using `T` to refer to any struct, but I wouldn't recommend making an API with this signature for built-in types: use `int? ReadInt(string s)` instead, if you choose to do this, but then, you'd be better off just using `int.TryParse(string, out bool)`). I feel an API like the one you've presented may be a bit of indirection that is not terribly valuable, personally. For personal projects, it makes a lot of sense to have something to support a common case, but consider the following scenario: you're working as a developer, on a team with 9 other people, and you introduce this API. Not only does it not parse all potential types of `T` from the caller, but it's also a non-functional API (by functional, I mean [this](https://en.wikipedia.org/wiki/Functional_programming)), and the indirection of this API doesn't afford any prospective benefit over the methods you're invoking (for primitive data types). While this is not necessarily a problem, as a rule of thumb, I consider it good practice to: 1. Ensure static APIs (of which these are) do not contain any internal state 2. Make static APIs 100% functional If I were doing a code review on this, I would scrutinize the use of this API, and most likely ask you to remove references to it in our shared code base (along with offering assistance to help with solving the problem you originally started solving). Others may disagree with me, but when you get to testing your code, you'll find any place where state is intrinsically _shared_ to be a (testing) reliability problem, because it makes proving your code more difficult. Similarly, any method that performs any form of internal I/O also inhibits your ability to test it (in a unit testing context). Anyway, good on you for doing this. I cannot count the number of things I've done over the years in programming that I regret (and to be sure, I'm still making mistakes, as all of us do), but with every mistake I've made, I've also learned a lesson. I hope you continue working at programming, as there's always something that you don't know, and there's always a way you can make your work better. Learning to program was honestly the best decision I ever made, because even when I'm working on non-programming tasks, it is a skill I _frequently_ use to help me solve other problems I'm working on.
If you create a base class and have subclasses for each type, you could either have a base class with a method taking object and have each subclass taking a more specific argument, or have a generic base class and have each subclass inheriting from the base class using the relevant generic type parameter. (so like class SubFoo : BaseFoo&lt;String&gt;) It would also help to serve separating the logic specific to each type being handled in a simple and intuitive way.
I could be mistaken, but I believe the following assumptions are true: 1. A lot of your acquisition can be done in an asynchronous context, and marshaled to your UI thread (ahieved using the `Dispatcher` object, which has a message-queue based `SynchronizationContext`) 2. You ought to be able to use the async nature of the device I/O to perform the unsafe work, then marshal the results to a safe context (via the `Dispatcher`) 3. It may be possible to use a form of buffer pool for re-use (not sure on the performance implication of this), so that you can minimize GC cycles (which would impede performance) I haven't had much need for branching into an unsafe context, because most of what I do is using existing async clients (files, sockets, HTTP abstractions, etc), but from what I have read (and believe I understand about this), what I've described should be possible. In the worst case, it may be possible (not sure) to write your own managed adapter to the device (though this is likely not a track you want to go down). I was reading something a few months ago (and I'm certain I will screw this up) about how Windows treats basically all I/O devices (except sockets) as files, including things like USB devices. There's a relevant example [here](https://msdn.microsoft.com/en-us/library/windows/hardware/dn303342(v=vs.85).aspx). Note: the above rests on the assumption that a USB device (and in your case, the vendor library) supports async I/O. I know there's a lot of great info. on the web about this particular topic (in C#).
You should have multiple threads going on. A background thread fetching the data from the C++ lib, puting into a concurrent queue, which gets consumed from another thread on the WPF side. There is of course the issue of fine tuning the queue size so that both threads can keep up with each other. Or do some kind of average with dropped values, in case it is an option. Another way to use to C++ API would be to create a safe .NET API via C++/CLI, which would allow you to have a fine grained control how to do the mapping.
I've recently got an implementation of Java style enums for C# to feature complete status. It's not built for serious use, I made it just to see if it was possible, though I think it's still fairly robust. I ended up learning quite a few new things to make it, such as the Caller Info API, how to get info from stacktraces, and how/when C# intialises static members. The source is [available on Github](https://github.com/Leviathan143/JavalikeEnums).
I mean beginner at this subject
&gt; LoginForm frmLogin = new LoginForm(); Why not name it loginForm instead of that awfull frmLogin ?
I don't have any issue. Running RTSS version 7.0.2 and MSI version 4.4.2 at the moment. Do you have to close both programs? Or is it enough to close RTSS? 
mind showing some marshaling you did ?
Was curious what the question was so I formatted the code a bit. Might be helpful to get more people to have proper look at your question. Example 1: var q7 = from f in Films join i in Inventories on f.Film_id equals i.Film_id group new { i.Store_id, f.Rating, f.Film_id } by new { i.Store_id, f.Rating } into g select new {StoreID = g.Key.Store_id, g.Key.Rating, Anzahl = g.Select(x =&gt; x.Film_id).Count() }; q7.Dump(); Example 2: var q7 = from i in Inventories group new { i.Store_id, i.Film.Rating, i.Film.Film_id } by new {i.Store_id, i.Film.Rating} into g select new {StoreID = g.Key.Store_id, g.Key.Rating, Anzahl = g.Select(x =&gt; x.Film_id).Count() }; q7.Dump();
Sorry I was high, I read this and broke out in fits untill I reread it just now.. 
Oh I‘m sorry if my question wasn‘t really clear. The question is: How can I achieve the same results like in the first query without using a join (and using navigation properties instead). Thank you.
No worries, the question was clear. It's just that a couple of newlines in a long Linq query help me digest what's going on.
In the first example you group over a join, using every combination of `(film, inventory)` that satisfies the join criterium. In the second example you group over all Inventory items. 
I don't think you can. I'm a bit unsure about the group operator in Linq but in SQL I couldn't see how you can get the required list of combinations to apply the grouping you desire without a join. Perhaps compare `select f.Film_id, i.Store_id from Films f inner join Inventories i on f.Film_id = i.Film_iD` to: `select Store_id from Inventories` 
In the first example there result of grouping is a compression of your initial selection, `f.Rating` and `f.Film_id` are singular values. In the second example `i.Film.Rating` and `i.Film.Film_id` are collections. So the result of grouping is an expansion of your initial selection.
I appreciate your help. Is there a way to convert these collections to singular values in a easy way?
Use `join` :)
There's no reason to ever use WebForms for a new project. It isn't even supported on .NET Core. Stop encouraging people to adopt this terrible technology.
I think it was actually RTSS, but I have just closed both down each time I install. It seems odd, but I think it has something to do with the RTSS feature of displaying while applications are running. Do you not use the overlay? Initially I was just closing programs to see what worked, but I believe at some point I did find someone with install issues related to the programs.
Removed: Rule 4.
Unfortunately, the whole datatables editable field is a paid extra :(
True, I havent used that due to that, however, its pretty trivial to do it yourself. Click event, make the cell contents a text box (if not already), and save the state. Use a little pencil icon beside the cell if you dont want it to look always editable. Jquery is great for that. Straight up web forms youll most likely get this done faster, but it has a lot of intricacies/quirks itself, and once you know how to do this its pretty easy.
Brilliant, thanks for that. I'm quite new to JQuery/JS and all that stuff, but my new job requires me to. Guess its all practice!
Seems like a good use case for the Rx libraries (known as the Reactive Extensions last time I worked with .NET). I believe there’s enough throttling and flow control knobs in there to manage the incoming stream of data.
I'm not fully aware of all the ins and outs, but it stems largely from how VS compiles, then hosts the resulting application. On the compile side, everything is set up so that it follows the code exactly as written (i.e. no inlining or optimizations). So with the IL and the debug symbols it allows VS to run the code in such a way that it can step through everything line by line. As far as editing code while debugging, there are a lot of things that you can't do. Basically, if there's a level of isolation where certain aspects of the code don't change (i.e. classes, method signatures, certain types), then VS will allow it. Overall, .Net does have the ability to dynamically generate and run IL, so I imagine that VS is simply compiling a second version of the method, and diverting calls from the original method to the new one based on the debug symbols that I mentioned above. In general, since VS is hosting the process, it has the ability to put in a lot of hooks into the debug process that likely facilitate this as well. If you want to learn more about this kind of stuff, I'd suggest you look up Roslyn. It's .Net's Compiler-as-a-service and its got a ton of really cool features that it does.
[Java can do this too](https://www.ibm.com/developerworks/library/os-ecbug/#N1011F)
Iirc, there are still some compile time optimizations that the c# compiler will make, such as deleting unreachable code that can be statically proven to be unreachable. The same thing for branch removal when an expression is proven to be true at compile time (such as `if (true) //`). I could be mistaken about this, but I could have sworn I saw this in debug build IL. 
Thanks for the answer. I'll start playing with threading in that case. And yeah I came across the C++ CLI option but the syntax seemed quite confusing.. I also read an article comparing benchmarks of marshalling vs C++ CLI vs unsafe and the unsafe was the fastest so I stuck with that. 
Thanks for the information. I just wanted to hear other opinions so that I don't go down the wrong path. I have to read a bit more about how the Dispatcher works but that makes sense. Yes the DLL exposes GetSyncData and GetAsyncData so I should be able to let it work asynchronously. 
Wait until you discover that the IDE now allows you to step *backwards* in execution :) Edit and Continue is so ingrained in my development process now that I find it hard to move to platforms/places where it is not available.
Unfortunately I seem to have lost the implementation with marshaling :( guess I forgot to commit that lol. I do agree with you though, that the speed cut that I saw with marshaling is quite a lot, indicating that I was probably doing something inefficiently. Ideally if I could get the marshaling working at a decent speed then everything will be in a managed context and I'll feel better about potential memory leaks that I might have not accounted for. Unfortunately I don't have access to my device at the moment to quickly re-code the marshaling so I'll make another thread later.
Maybe I'll show what the API looks like and if someone has suggestions they can reply. The device has 8 kinematic sensors and it returns 6 positions: x, y, z, azimuth, elavation, and roll angles. The DLL has a function: GetASynchronousRecord(ushort sensorID, Q_RECORD* pRecord, int recordSize); If I set the sensorID to 0xffff I can get all 8 sensor data at the same time. Q_Record is a struct that contains variables to hold double x, y, z, a, e, r, and time. So with the unsafe code my code looks like this: Q_RECORD[] record = new Q_RECORD[32]; fixed (Q_RECORD* pRecord = record) { errorCode = GetASynchronousRecord(0xffff, pRecord, Marshal.SizeOf(record[0]) * tracker.numberSensors); if (errorCode != (int)BIRD_ERROR_CODES.BIRD_ERROR_SUCCESS) { errorHandler(errorCode); } } Essentially the managed version of this code, I would need a way to pass the function an array of structs by reference and the function will fill in the values for me. My research showed that as long as the struct has only blittable types, then I should be able to do this via the 'out' keyword (if i remember correctly). 
Wait... it *what*?
https://blogs.msdn.microsoft.com/visualstudio/2017/10/12/step-back-while-debugging-with-intellitrace/
Does that work in Android Studio? 
You can do this easily with a little bit of LINQ: var names = new List&lt;string&gt; { "Will", "Mike", "Dustin", "Lucas", "Steve", "Jim", "Bob"}; var numberOfGroups = 3; var groups = names // First, select the name and index of the element .Select((name, index) =&gt; new {name, index}) // Then group by the remainder of the index / numberOfGroups. With the list of names above, this will be either 0, 1, or 2 .GroupBy(g =&gt; g.index % numberOfGroups) // Finally, select the list of names for each group .Select(g =&gt; g.Select(l =&gt; l.name).ToList()) .ToList();
Am I correct in reading that this is only available in VS Enterprise? Because wow, but this could be *seriously* helpful for students. 
With MSDNAA you can get a Enterprise Student License
have you tried the 'ref' keyword
Sorry I edited my response while you were replying :) So.. something like this? Q_RECORD[] record = new Q_RECORD[32]; GetSynchronousRecord(0xffff, ref record, Marshal.SizeOf(record[0]) * tracker.numberSensors); 
yeah I think that should work, ref is like a c/c++ pointer
Also I saw a lot of stuff about IntPtr and how it acts like a void pointer. But yeah like I said the device is in my lab so I'll give it another shot during the week. Thanks for the help.
anytime.
I'm looking forward to when someone releases a nuget package or optional rule for Stylecop.Analyzers to result in using lets-make abstract-classes-useless-and-fuck-everything-you've-ever-learnt-about-oop feature a build error.
Well, you could choose an employer which provides you with an MSDN account ;-)
Who said anything about core, shill?
Why are you using ADO.Net (which is obsolete) instead of using LINQ to query data?
Thank you I'll look into this!
Unless you work in higher education and then your employer gets all Microsoft products for dirt cheap!
ADO.Net is not obsolete.
I remember there were issues with RTSS v.6 and some applications would crash in Windows 10. I have my overlay enabled, but it does not show up in the Visual Studio Installer and it loads fine for me. There might be something with your global config in RTSS? These are my global [settings](https://i.imgur.com/bSipeHO.jpg) if that helps.
Make an account.
Does that even compile? What u need to do: - set the groupnumber to 1 - for each item in the list - add it to the correct group - increase groupnumber - if groupnumber &gt; maximum then set it back to 1
You're starting with groups, and then trying to manipulate an existing list by removing items. Instead, start with people, and try to figure out how you would insert them into groups without modifying the existing list. That's going to give you much better performance. ```csharp List&lt;string&gt; names = new List&lt;string&gt;{ "Ann", "Bob", "Carl", "Dennis", "Emily", "Frank", "George", "Harry", "Isabella" }; int numberOfGroups = 5; // Create an empty collection for all the groupings Dictionary&lt;int, List&lt;string&gt;&gt; groups = new Dictionary&lt;int, List&lt;string&gt;&gt;(); for (int i = 0; i &lt; names.Count; i++) { // Check to see if the group already exists; if so, add the name to it if (groups.TryGetValue(i % numberOfGroups, out List&lt;string&gt; list)) { list.Add(names[i]); } else { // If the group doesn't exist, create it and add the name to it groups[i % numberOfGroups] = new List&lt;string&gt; { names[i] }; } } ``` Of course, the answer posted earlier about doing this in LINQ is perfectly valid, but I find that the procedural version usually makes me think more and achieve a better understanding of the program.
well I just can't win! tough crowd! I got shot down when I asked, so no-one answered with anything positive - a barrage of negative abuse, now this! fine! i'll use LINQ! thank you!
seems to be mostly about C# 7.x and only touches on the plans for 8
IIRC, it is free but you need to make a Microsoft account. Shouldn't need a credit card or anything though.
OK thanks. All seems to be working atm.
what if you drag the current executing line arrow to a branch that is never reachable?
I believe it makes enough information to be able to reach the bench, but won't execute unreachable branches. I could be mistaken about this. My accumulated knowledge is from observed compiler output in the form if IL, not from any analysis of how the compiler source (which is of course open source now)
&gt; t prompt you to renew your license every now and again, but maybe that was for the older versions. Are you sure you have the Community Edition Im positive I installed Community edition. It seems to be working fine after signing in to an existing account so its all good I think!
It's functionally obsolete. That is in most of the situations where it was originally used it is no longer the most appropriate thing to use and things like EF have taken its place.
If my post received a 'barrage of negative abuse', I'd ask myself, "Is it me? Could I be the problem?" I've read your post 3 times and I'm still not sure if you're asking a question, providing a sample to help others or requesting feedback. Try rereading it from another persons perspective and ask yourself if it's clear. Other people don't share your internal monologue. People will generally be helpful when it looks like somebody has made a genuine effort to solve their own problem and tried to make it easier to understand what help they need, as opposed to spewing their fleeting thoughts into a post. You get out what you put in!
So clearly the SQL translation is not correct. The GROUP BY is using t4.payment_date, that's the whole date and not just the month.
The optimization is just a setting. It is turned off by default for debug and on for release, but there isn't a built-in function that prevents you from changing it unless I am mistaken. It is possible that the setting was turned on for debug but there still might be some optimizations made even in debug.
[SPO PnP Cmdlets](https://github.com/SharePoint/PnP-PowerShell)
Here is something to get you started: var randomizer = new Random(); Enumerable .Range(1, 1000) .Select(item =&gt; new { Amount = randomizer.NextDouble() * 1000, Date = new DateTime(2018, randomizer.Next(1, 12), randomizer.Next(1, 29)) }) .GroupBy(item =&gt; item.Date.Month) .Select(item =&gt; new { Month = item.Key, Total = item.Sum(data =&gt; data.Amount) }) .OrderBy(item =&gt; item.Month) .Select(item =&gt; new { Month = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(item.Month), Amount = item.Total, }) .Dump(); You basically need to group by month then aggregate using Sum on the amount. LinqPad script here: [http://share.linqpad.net/ikn238.linq](http://share.linqpad.net/ikn238.linq)
Just for reference, it'll show if you're running Community (or another version) in Help-&gt;About. But yea, signing into an account fixes a lot of things so I'm glad it's resolved for you!
&gt; If you hit a breakpoint you can very easily just drag the yellow arrow on the left side of the editor from the breakpoint to the line of code previous you want to look into, confirmed to work on VS Professional. You can also step over code using F10 and step into method calls with F11. 
Sign with your ms account 
Hmm, will have to check this out - have been using CppSharp to do something similar with ChakraCore headers, but this looks quite nice
That's not quite the same as stepping backwards, though. Dragging the arrow in VS just changes the next line of execution, so you'll reexecute that previous statement, with the current state of the program. Rewinding requires you to undo any state changes between the start point and the new point of execution, it's a much more involved process than changing the next line of execution (which is effectively just updating a pointer).
you're an angel! thank you
There will always be people that abuse great language features to make unreadable code, for example I'm sure there is more than one analyzer that enforces to use `var` absolutely everywhere.
`var` is a great thing if you have reasonable variable names imo. `var l = new List&lt;string&gt;()` isn't much worse than `List&lt;string&gt; l = new List&lt;string&gt;()`, while `var names = new List&lt;string&gt;()` is a lot easier on the eyes compared to `List&lt;string&gt; names = new List&lt;string&gt;()`
`var` is a great thing when the type is obvious from the assignment, like your example. `var` is a poor thing if the type is not clear from the assignment, e.g. `var result = SomeMethodInvocationWithMostLikelyAShittyName();`.
To each his own. I, and some of my coworkers, mostly use var everywhere. I don’t need the type to be obvious for that, because I find that I don’t need the exact type very much. Now, all this is of course a bit problematic if you don’t have access to an IDE, but we do. 
My employer bought 2013 licenses last year...
The parent of the comment you replied to is an MSDN blog post on how this works and where to find it.
Make an account and sign in and you will never see the prompt again. I've been through this process several times as I reformat and reinstall computers. Doesn't need credit card or anything. 
Gotta push for that subscription man. You get all of them then. Even Visual Studio .NET 2002. Depending on how your employer pays for licenses, e.g. software assurance, the subscription ends up being cheaper.
Selftaught usually means you dont know the taught fundamentals. Prove that you master analysis, design, implementation and test and you will find an employer eventually. You have to be able to work with those who took an education without having to be brought up to speed on all terms. That is your main drawback. It doesnt matter if you are a coding genius, if none of your code plays well with others, so to speak. 
Just write a generic Crud. Repository pattern with unit of work, and you will only really need the one Crud. Will work for almost all applications you write. 
I'm a self taught C# dev and got a job offer on it. I got some open source projects but I doubt they looked into it. They were primarily interested in Azure and Unity. Unity is probably a less marketable skill unless they have a hololense setup.
An el camino is classified as a truck. Also, it ran for 25 years and is a well known model, even if the general opinion is that the concept is kind of gaudy. I don't think its a great example of a failure concept, though maybe it is pretty apt as a metaphor for features tacked onto scripting languages post initial design (the el camino models based on the Chevelle sold better than the original designs, according to wikipedia).
I can tell you how I did it... and this is highly irregular. Know PHP get a job as a junior college as web portal admin/dev College switches from PHP based ERP to C# Watch Bob Taber vids on C# Kinda know C# develop custom apps for college in C# accept job offer from software dev company where everyone is better at c# than you work with a great group of people who are patient and willing to lend their first-hand knowledge Buy a smart watch because everyone else here has one...
I think the most important part is being likable and somewhat knowledgeable in an interview... 
Ah well I suppose I've been writing idempotent code for so long that this never causes me an issue; ie my functions never change objects they always return new objects with the changes applied to those which are assigned to a new variable.
Probably there is a method that exposes `_repo` or it's methods publicly so it can be used from outside the `SomeController` object. This might be called the encapsulation pattern, it is private because fields are usually declared private. They are usually declared private because the object (`SomeController`) might want to control how the `_field` variable is used instead of letting anyone directly use it. The value of `_repo` will be a reference to whatever concrete object it is initialized with e.g., in instance of `FooRepository` or `TestRepository` if these implement the interface. This is the dependency injection part: whoever constructs the `SomeController` object can choose the object (and the type! as long as it satisfies the interface) that will be the `_repo` for the controller.
_repo is a variable to a pointer to the concrete implementation of the repository. The interface of IRepository says that the implementation will be guaranteed to have some functionality. It's declared private because it should only be accessed with in the context of the class. 
The point isn't failure concept? Also, why are you comparing el camino numbers to a Chevelle? That's great and all, but my original comparison was to a truck so why you would point out that the el camino outsold the Chevelle is hardly relevant. The point is your taking something that was fundamentally designed a certain way to accomplish certain things. If talking about a truck, we're talking about hauling and load capacities. Compare those features and number to an el camino. Will it work for certain hauls or loads? Sure. Will it be as effective as an actual truck? Depending on the truck, possibly, but probably not. Applying this same concept to programming languages, you can absolutely get a nice programming language that will "work" like a "truck". Moreover, in some cases, it may even be the better option. However, at the end of the day, you don't have a truck, you still have an el camino. Now, if you wanted to get into the detailed differences about comparing the two languages, we absolutely can. I'm just simply pointing out that your taking this thing or scripting language and moving it away from it's original purpose. If you want OOP concepts, just switch to actual OO language that's designed that way. I could be wrong, but I'm never buying an el camino to haul my boat.
I'm not sure this is the best explanation. IRepository isn't in there because it should be exposed per se, it's because it's instrumental to whatever the controller is doing - now granted that's going to involve data access, but it seems like a worthwhile distinction to make.
It seems like you are asking two different questions: * Why does _repo have a private access modifier? http://csharp.net-informations.com/language/csharp-access-specifiers.htm . SomeController does require IRepository functionality, but does not want to expose the object to an outer context. * Why is it an Interface (instead of an object)? https://dzone.com/articles/c-interfaces-what-are-they-and 
This is a form of dependency Injection. Code outside of the Controller does not care about how it utilizes a repository. The code utilizing the controller only cares that it HAS a repository. This code allows the developer to supply any Repository implementation to the controller without effecting any other code. So you can switch from a Database back repository to a mockup repository (for testing perhaps) without changing any code other then where you instantiate the object. Also, this design can allow a collection of controllers that all have different IReporsitory implementations with a pretty normal/standard list or collection.. imagine the IRepository had a property Desc{get;} You could have a DBRepository:IRepository, FileRepository:IRepository, MockRepository:IRepository which implemented Desc as return "DB"; | return "File"; | return "Mock"; respectively. and the SomeController had a function PrintDesc(){ Console.WriteLine(_repo.Desc);} then you'd be able to List&lt;SomeController&gt; controllers=new List&lt;SomeController&gt;(); controllers.Add(new SomeController(IDBRepository)); controllers.Add(new SomeController(FileRepositroy)); controllers.Add(new SomeController(MockRepository)); foreach(var c in controllers) c.PrintDesc(); //Output: DB File Mock
thanks for the analogy
The interface is used instead of the concrete type to allow different implementations to be substituted as needed. This may only be necessary for testing, but it tends to solve a bunch of headaches around coupling. The field is declared private to prevent other objects from using it. This, also, prevents inappropriate coupling of types. They could also declare `_repo` as `readonly` to show that the value doesn't change over the life of the object.
Ah, little Bobby Tables!
This happens because of local variable closure rules in C#. Essentially the lambda function is capturing the variable i, which is evaluated to 4 because that is the value of i when you fire the event. What you need is to capture the value of i during the loop, not the variable itself. I believe you can do this by copying i into a local variable inside the loop before passing that local variable to the function which previously took i. I am a bit rusty on closure rules, so here’s a link to learn more: http://csharpindepth.com/Articles/Chapter5/Closures.aspx
thanks, this helps me understand.
thanks, it helps.
I've built a Neural Network library for .NET Standard 2.0 using C# 7.2, it runs on anything from UWP to Xamarin and .NET Core, and it includes CUDA/cuDNN acceleration on some desktop platforms. There's a thread [here](https://www.reddit.com/r/csharp/comments/7p06zd/ive_built_a_neural_network_library_during_my/), and [here](https://github.com/Sergio0694/NeuralNetwork.NET) is the GitHub repo, feel free to leave any feedback!
Are you saying your anti-virus software is detecting this as a false-positive "trojan"? If so, maybe you should include what anti-virus software you're using. Otherwise, maybe try running in administrator mode (not sure if that helps) or adding a rule to your anti-virus to whitelist/allow your program.
It's Windows Defender. I also released app on GitHub and I can't download it (using Google Chrome) because of error, which caused by virus.
Hey everyone, I'm a computer engineering student, and this last semester I started working on a little side project while attending a machine learning class at university. The library is written in C# 7.2 and it runs on both CPU and GPU (on supported platforms). There aren't any other deep learning references other than the cuDNN library, so all the code running on CPU is self-contained in the library, the idea was to take the opportunity to understand how to implement the different network layers (fully connected, convolution, pooling etc) from scratch. The APIs are meant to be as easy to use as possible, and they are inspired by the APIs in the Keras library, which is far easier to setup than TensorFlow. Other features include: * Native memory management to reduce GC usage and get better performances * APIs to serialize/deserialize a network to disk/stream * Different training algorithms (classic SGD, Adadelta) * Support for validation/test datasets during training I'd like to get some feedbacks as I'm sure there are a lot of things that could be improved there, and some first impressions on the actual library usage from other devs. Cheers!
That's not even close to the only scenario that that happens. Take a simple example of: List&lt;string&gt; myStrings = new List&lt;string&gt;(); myStrings.Add("tempstring"); if you run past myStrings.Add, then pull the arrow back to myStrings.Add, you'll have 2 strings. Going back instead will only have 1. There are thousands of cases that have nothing to do with a simple modifying of an object. I am curious, however. How would this attempt to revert a Thread.Start()? will it go before the thread was executed, setting the state of the thread to be un-started? It couldn't cancel everything the thread has already done... So curious how that'll work. Also, you have to write extremely inefficient code if you're constantly copying entire objects to change single fields.
Can you link to the GitHub repo?
Last I checked, VS support for NUnit was broken in the IDE for NUnit. xUnit worked just fine. That's a few months back now, so this may have changed, and it is possible I missed something, but one worked "out-of-the-box", and I didn't get the other working at all properly.
The have licence expiry logic in there, but they have the community edition down as a licence price of 0 dollars so no purchase is required and it renews for you then.
https://github.com/Tarasovych/CaptureSave BTW there is no last release there, I deleted it because of virus
Try String.Format(“{0}”, CPU.nextvalue);
Removed: Rule 4. Please include the _actual_ verbatim code you're trying to use. When you tried adding ".tostring", what error did you get? Did you put literally ".tostring"? Because that wouldn't work; it's a method and case sensitive. Try `.ToString()`.
C# is case-sensitive, and the name of the function is `ToString`. Additionally, C# treats methods as first-class objects, so `cpu.NextValue.ToString` is not a string, but a method that can be invoked to produce a string value from `cpu.NextValue`. To invoke a method with no arguments, you must use parentheses. It sounds as though your line of code should look like txtout.Text = cpu.NextValue.ToString(); You could also use `String.Format` or string interpolation to get the same or similar results.
I put "ToString()" it has it does not come with any errors but just does nothing.
Depending on what your shop is doing a Silver/Gold-Partnership could help.
if you do the focus transition on a vc++ and then use it as an extern no antivirus will track it
As someone who have converted from C++ developer I was waiting for feature like that for a long long time ;) P.S. not entirely converted, at work about 10% of the code is still in C++. (Performance critical bits). 
A reference is to an object. A pointer is to a memory address. [Pointers exist in C#, so the difference is not immaterial.](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/unsafe-code-pointers/pointer-types)
IL may look bare-bones from an ease of use perspective, but compared to actual assembly it's a very high level language. You don't have access to any specific CPU instructions (like vectorization), memory safety is still enforced and the JIT will compile it into something entirely different, so IL isn't typically used to hand-write high performance code like asm might be. A main reason for writing IL is that the CLR plays by slightly different rules than the language compilers, so in some cases you can use features or do things in IL that are not exposed or allowed in C#. One example is [`CompilerServices.Unsafe`](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il), a package that allows you to use generic types in unsafe code, which wouldn't otherwise be possible in C#. The second common use case is runtime code generation or modification of compiled code. E.g. using `Reflection.Emit`, `Mono.Cecil` or stuff like Fody. Writing IL is certainly not something you'd want to do all the time. Most people will never touch it, and if you do it'll probably be for a specialized library.
Ok than, can you provide an example or link to it? Thank you! (I've not learn c++)
Take a look at unsafe c# code for the performance parts, work directly with pointers. 
 Most of that post wasn't needed, but anyway, yes, I learned IL, but it was before it was easily possible to convert from IL to C# (ILDasm or dnSpy), and wanted to manually modify .Net binaries. Reverse engineering is nearly the only applicable use for it. Some people will argue "but you know how it works better!" but you don't. It's still a level up from being fully compiled (JIT'd), so the instructions that get generated in IL aren't even necessarily what will actually be executed. I think it's definitely fun, and there are some cool features that you could learn (since this is c-sharp, for example, we don't have tail-recursion, even though IL allows it), but they in no way will help you in your every-day programming. Even performance critical loops are usually better to keep in C# since unless you know IL VERY well, the compiler will probably still do it better than you. My personal opinion, at least.
I'm not talking about pointers. I was missing this: void someMethod(const double&amp; a, const uint64&amp; b) { ... } Edit: formatting
You should have bench marked a more relevant example like was used in the [documentation](https://docs.microsoft.com/en-us/dotnet/csharp/reference-semantics-with-value-types). The performance gains are going to increase the more that you avoid copying. The difference between not copying 8 bytes vs not copying 48 bytes is substantial. On the defensive copying: there are actually code analysis warnings that will direct you to use extension methods so that you can avoid the defensive copies. You should run with the MS recommended static analysis.
Previously, when I learned that C# auto inline functions, properties and var accesses, I thought this is already built into the compiler.
Their example used for the "in" example is wrong. It will create a defensive copy because the X,Y,Z on a Point3D are properties. That's why further down in the article, they create a readonly struct example to avoid it. But I do take your note that the larger the struct, the more performance gains you will see. 
&gt; So what IS the current best practice for cloning objects? Roll a cloning method/interface yourself, with appropriately named "Deep" or "Shallow" if it makes sense. Or use a third party library (if applicable) that does the cloning automagically. I suppose nothing was "built in" because you can have potential issues here and there. For example, what if you have circular references? Should it go on deep-cloning indefinitely or should the runtime detect this? Or is it a feature that has potential for abuse with performance/memory impacts? What about event handlers/listeners? Should those get cloned over as well? Use of `ICloneable` is generally discouraged because the interface doesn't do enough to describe the _type_ of cloning involved. It also doesn't have much usability throughout the .NET ecosystem (unlike say, `IEnumerable`, `IList`, or `IDisposable`). It's basically vestigal and IIRC, Microsoft recommends _not_ using/implementing `ICloneable` at all.
Yeah we're big enough to be enterprise, cheap enough to not act like it
You should show an example LINQ query that fails.
For sure give me a second! Edit: Added.
A pointer to a memory address... of on a object. z500 is right, it's just a nice semantic. `ref` is allowed to be moved by GC (unless fixed, of course), while a fixed pointer can not. Other than that, they are literally the same thing. int t1 = 5; unsafe { int* t2 = &amp;t1; Test(t2); unsafe void Test(int* temp) { *temp = 10; } } int t = 5; Test2(ref t); void Test2(ref int temp) { temp = 10; } Console.WriteLine($"{t1}-{t}");` it's just a nicer way of writing it. EDIT: Found a nicer write up https://stackoverflow.com/questions/16207455/c-sharp-ref-is-it-like-a-pointer-in-c-c-or-a-reference-in-c "In C#, when you see something referring to a reference type (that is, a type declared with class instead of struct), then you're essentially always dealing with the object through a pointer. In C++, everything is a value type by default, whereas in C# everything is a reference type by default."
what provider are you using? LinqtoSQL?
I'm using the IQ Driver in LinqPad. Querying functionality is almost on par with LINQ to SQL.
Can any mod let me know if this is a safe download?
So what did you have on Github lol must have had some projects? But yea thanks for the advice I'm definitely planning on wearing a suit.
I definitely understand this my main point was that I dont want to have to learn everything before getting a job. If I have a job I will of course learn anything I need to but, there has to be some entry lvl limit that I can get into before having to learn EVERYTHING
 I did the same thing as you, created a table with E-Mail as a column and ran it, var query = from u in Temps orderby u.E_Mail descending select new { u.E_Mail }; query.Dump(); works fine for me, selected what i inserted. EDIT: Missread, I thought you said you were using Linq to SQL. This appears to be a problem with IQ Driver, are you using it against a MySQL, SQLite or Oracle DB? It doesn't say it supports MSSQL.
what if Im not right out of college? like 4 years removed and looking for a career change? and what do u mean by keep it until asked for if you're a mid level programmer?
It does not for me :( MySqlException: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '-nutzer AS t0 ORDER BY t0.E-Mail DESC' at line 2
no, they in no way have different implications. They mean the EXACT same thing, `ref` does the exact same thing as a pointer, internally, it literally is just a pointer. Since it's C#: class Pointer { } class Ref : Pointer { } Ref rr = new Ref(); (rr is Pointer) Hopefully that will make it easier for you to understand. You said a reference is not a pointer. Yes, yes it is. It just has some extra parts built into it, but it is 100% a pointer. To end the arguement: ref literally compiles into a pointer. private static void Test(ref int temp) { temp = 10; } becomes .method private hidebysig static void Test ( int32&amp; temp ) cil managed 
I'm using MariaDB so it should work as MySQL.
exactly this :)
Deference a C# reference.
That’s pretty much the way I saw it too - thanks for your thoughts!
Interesting. They seem like very niche uses, but good to know. Funnily enough, one of the things that triggered the question was a response to another question I posted last week, where someone pointed me to a github repo that used `Reflection.Emit`, which was one of your examples. But it was doing some very niche stuff, certainly not everyday application development.
MemberwiseClone does provide some basic cloning if thats all you need https://msdn.microsoft.com/en-us/library/system.object.memberwiseclone(v=vs.110).aspx 
What's the reason to use const references of register-sized values?
Why isn't this already done automatically by the compiler? Of all the optimisations it makes this seems like a fairly simple one. Also am I right in thinking that this is just there for performance? It doesn't seem to change the logic in any way.
Can you rename the field in the database? I didn't even know field names allowed special characters.
Had the same reaction but unfortunately without const methods this is fairly useless (as explained at the end of the article).. For example, I'd really like to use "in" instead of "ref" for vectors and matrices but I don't want to trigger an hidden copy when I call ComputeLength() on a vector...
&gt; The problem is, C# has no way of knowing when it calls a method (or a getter) on a struct whether that will also modify the values/state of it. What it instead does is create what’s called a “defensive copy”. When you run a method/getter on a struct, it creates a clone of the struct that was passed in and runs the method instead on the clone. I was wondering about this. If I use "in" on a Customer, this would also prevent the method from changing the Name property of that customer because it does a deep copy. Not sure if this requires you to implement ICloneable on Customer to facilitate this, or if it's via runtime-magic. 
I'm replying to the above user when he said. &gt; You should have bench marked a more relevant example like was used in the documentation. The performance gains are going to increase the more that you avoid copying. The difference between not copying 8 bytes vs not copying 48 bytes is substantial. In the example given, there will not be any performance gain because it does a defensive copy. In the MS Documentation, for that example it says : &gt;By specifying the in modifier, you pass 4-byte or 8-byte reference to those arguments, depending on the architecture of the machine. The difference in size is small, but it can quickly add up when your application calls this method in a tight loop using many different values. This is the part I am calling wrong. There will be no performance gain in their example. 
There are too many situations where the compiler can not know how you will modify the state of the object being referenced. This is why it cannot be done automatically. It's a deliberate design choice which minimizes the side effects of using the `in` syntax. If the compiler tried to guess then you would end up with situations where the developer thinks the method is being optimized when in reality it is just defensively copying the ref value.
Why not just readonly?!
There's also warnings that direct you to mark struct members as readonly.
They aren't register-sized if you're running on a 32-bit OS or if you've explicitly set the .NET compile target to 32-bit only.
The `in` parameter can lead to changes in logic if the variable that is passed in by reference is modified elsewhere. 
&gt;This is the part I am calling wrong. There will be no performance gain in their example. But their example used a `ref readonly` type. This removes the defensive copy behavior.
Just finishing up a very simple package tracking app. It's a sandbox app I'm using as an intro to. Net Core and Razer pages. 
Try this instead: int[] loops = new int[4]; foreach (string button in loops.Select(loop =&gt; _addbuts[loop].Click += (s, e) =&gt; AddAcvtivity(loop))) 
Thanks, looking forward to hearing your take on it! 😄
Removed: Rule 6, Rule 2. Virus check does pick up on a dll. Could be a false-positive, but it's not easy to tell because (AFAIK) no source is available. While the tool is free, the submissions and the account are encroaching on Rule 6 also.
I'm pretty sure FPU registers are 64-bit even on regular x86?
I like a wireless mouse, but I don't have anything special, just a Logitech M705. It has a bunch of buttons I never use - I use the normal 2 plus there's a thumb button that I use for "back" navigation a lot. I don't run the Logitech software that would allow me to use the rest of the buttons, macros, etc. I have a wired mouse at work and every time I use it it reminds me how much I prefer wireless mice.
Huh. I'm using an m705 too. There's three buttons on the thumb. The flat 'grip' bit can be clicked, and then there's the small and large rail buttons. I've set those to be Back/Forward, and I turned off the grip button, since it jammed incessantly. Best part of this mouse is the infinite scroll wheel tho.
Hmm, I might look into a wireless one. I have a wired one at my desk, and then a mini wireless one for when I travel. I was just wondering if all the extra buttons are worth it. A couple guys I work with have giant monstrosities with the rolly ball thing, and they swear by them, but I just can't see myself liking one like that. 
Different generation maybe. Mine doesn't have a grip button that I can find (or maybe it's just jammed). Just the two rail buttons (new terminology to me). I only use the back one. Those buttons seem to be automatically used for back/forward in at least some software (visual studio and chrome at least). There are also buttons on the scroll wheel - if you push it from either side you also get a button click. I'm pretty sure you need the Logitech software to make those do anything. I thought I would use the infinite scroll wheel a lot but I almost never do.
Yeah, there are huge religious movements around mice. And even more fanatical ones around track balls. And then there are the keyboard fanatics. You don't want to get them talking... I appreciate that some people can find uses for all the features and buttons but I'm a simple man. I just want to be able to scroll and click. The nice thing about being simple is that if you have to live without your special mouse you can. I imagine those guys have all kinds of macros and tasks assigned to various clicks (and click combinations) and they can't do them any other way. Since I don't, I can use any PC I have to sit in front of :)
It's pointless to use in for classes.
Which database are you using? My guess would be that theres a re-map of underscore to dash *before* it gets to the database, in an attribute or other setting, but it could be the driver/database doing it as well.
This. This snippet shows it. Simply adding a local variable, like int iCopy = i; before the funcList Add solves it. var funcList = new List&lt;Func&lt;int&gt;&gt;(); for (int i = 0; i &lt; 4; i++) funcList.Add(() =&gt; i); foreach(Func&lt;int&gt; func in funcList) Console.WriteLine(func());
Try the solution outlined here: http://www.mindscapehq.com/forums/thread/4249 &gt; Set LightSpeedContext.QuoteIdentifiers to true in code or configuration.
First, what do you even mean by "scripting" language? That it's interpreted, weakly typed or what? Anyway all these concepts are totally orthogonal.
I really think you are confused or we are crossing wires here somewhere. The original poster is saying that I should have used a bigger object in the example to make the performance impact bigger. My object was only 32 bytes big, whereas it was implied that the examples for IN were 48 bytes big. I replied that the example for IN actually wouldn't work anyway (As seen in the screenshot), because it would do a defensive clone, but I take the point that I could have used a bigger object to show the performance gains a bit more. Now, ref readonly is a *completely* different concept to in. It refers to a readonly **return** object, it's not about using a reference as a parameter. &gt;You may also want to return a value type by reference, but disallow the caller from modifying that value. Use the ref readonly modifier to express that design intent. They are completely different concepts. The code around ref readonly and avoiding the defensive clone is about how to expose a property, with only a getter (So it can't be modified), and setting it as ref so that it's a reference to the internal value not a clone. If you are still sure, throw up a Github gist of you using a ref readonly value type as an input parameter. 
I wasn't aware it was a standard practice to do math on `uint64`s on the FPU instead of the ALU. Wouldn't that result in a loss of precision?
&gt;You may also want to return a value type by reference, but disallow the caller from modifying that value. Use the ref readonly modifier to express that design intent. &gt;That practice removes the defensive copies that take place when you access methods of a struct used as an in parameter. They change the struct to readonly in the example to show how you can prevent defensive copying while using the `in` keyword. That is what I'm talking about.
Nice work, I'll use this in a side project!
Nifty! As an amateur, I've been working on something similar to better my understanding of NNs. Newbie question: what are the advantages of using JSON serialization over [Serializable]? How hard was it to implement the CUDA side of things? I'm running on one thread right now, and I can tell that it's not going to scale well once I start building layers as you have here.
Why? It communicates &amp; enforces the intent that the instance is immutable. 
I was referring to the `const double&amp;` in the example. The `uint64` may or may not end up in a register depending on the arch it's running on (if it's designed well, the 32-bit CLR should still use 64-bit integer registers when they're available)
For reference types it doesn't. The only thing `in` prohibits for a reference type parameter is reassignment of the reference itself, but of course that's mostly useless because that's already the behavior of non-`ref` arguments.
I like my logitech G403. I had one of those overengineered gaming mice that I never used 75% of the buttons on it. The G403 is just a nice high performance mouse with a simple design.
Why are they overloading the usage of this keyword? I realize it's only used previously for foreach statements, but this syntax is wonky. Declaring some as "in int value" makes no sense immediately. Ref and out do, but "in" meaning a constant reference more or less? Maybe someone can enlighten me why as to this isn't a silly name.
I use Microsoft's Bluetooth surface mouse (not the crappy Arc one). I like having fewer buttons, Bluetooth connection, and it feels good to me. That said, others have commented on that one Logitech mouse that's supposed to be the bee's knees. I haven't tried it, but by all accounts it's the best.
I also use one of those at work. extra buttons are pretty nice for keyboard shortcut bindings
Yeah readonly would have been a better keyword
Probably because in is also used by other languages in the Algol family for the same purpose.
There are Roslyn analyzers to validate allocations.
Because it is used for the same purpose by languages in the Algol family. They adopted a common idiom.
Yeah, I was thinking `readonly ref` wouldn't be a terrible mix of keywords...
Use Postsharp to write your own IsCloneableAttribute and then decorate anything you want to clone with [IsCloneable]. 
Was this recent? Could you check your Event Viewer under the "Application" tab to see if any errors came from vs_installer.exe or vs_installershell.exe?
I mean, it's the opposite of `out`, seems fairly obvious to me. The `in` keyword is already being used in contravariant interfaces as well in the same vein. 
Readonly means that only the constructor can modify it. Also there's probably a shit ton of existing functions that take a bool argument named "readonly" and they maybe didn't want to break or muddle that code. Also, "In" has always been a reserved keyword at all scopes (foreach var dick in bagOfDicks). Not in front of a computer to check but pretty sure readonly is only a reserved word during a member declaration.
`readonly` is a universally reserved keyword as well.
There is also the `InAttribute`. This attribute tells the runtime that it should not marshal a reference back to managed code effectively indicating a read-only reference.
It's not that bad with SQLite. You just need to properly set synchronization when operating on SQLite also don't spawn multiple instances of it (locking issues) SQLite can easily handle (low, ex.: 1000 users) Concurrency. We've had it running as the Background database for our website for a while. After we grew, we started to move towards SqlDb (Microsoft affiliate...)
Get used to keyboard shortcuts. Is not just more efficient, but healthier for your hands and eyes. Then you won't mind much about the mouse, as you'll use it very little :)
Having curly braces in filenames is something fairly odd. Just saying.
Look for a mouse with big eyes. After all it has to C#
How can it be modified elsewhere? I would have thought that if passed with in then it could not be modified by functions called by the original either.
Simple (if contrived) example that demonstrates a difference: static int source; static void Main() { source = 0; M1(source); source = 0; M2(source); } static void M1(int arg) { source++; Console.WriteLine(arg); } static void M2(in int arg) { source++; Console.WriteLine(arg); } The main concern is probably multithreading, which could cause race conditions and struct tearing in places where you wouldn't normally expect it.
razer deathadder is best for c#, if you are coding in java as well you may look at steelseries mice
Surely that second one won't compile though?
How in keyword will change produced IL?
Yeah it's the first time I do that, it was more like a test. I've seen it in other repos and after all, the official XML syntax for C# comments uses curly braces for generic types as well (like `Span{T}`), so I thought it wouldn't be too bad. The downside is that it's more intuitive when to look at, it conveys the fact that file is some sort of "specialization" for the name before the braces (whereas using an underscore for example would put both parts at the same level), the downside is that it looks a bit weird. 🤔
A few years ago I hired a guy in his mid 30s, as the first job of his new career as a programmer. A year later I had turned him from a junior programmer into a senior programmer, and two years later I helped him get a new job with a $40,000 pay raise. (Not kidding.) 5 years later we're good friends. However, he had *gone back to college* to prep for his second career. You will need to either show some additional education - maybe a course or certificate program - or a *good* code sample to show me you care about programming and you have learned something. &gt; and what do u mean by keep it until asked for if you're a mid level programmer? I just looked over my above posting to you and don't see where I said that, so perhaps you want to quote me? (Sorry, my memory isn't what it used to be.)
Same here, not a C++ guy but I love the const reference arguments. 
&gt; I see now. Gotta keep it on one line so I can use method lambda syntax!!!1 Even then: Guid.NewGuid().ToString("n") .Substring(0, len &gt; 0 ? len : 32 /* "guid string" length */ ); OP's code? Either someone was fooling around, or that person has a strange notion of job security...
I generally navigate with the keyboard. Not even just in vs.
If you pass an int with in will it still pass by reference?
(Meta) While that is some unclean code, I don't think we should downvote OP for asking about it. 
I'd say the down votes are for taking a picture of the screen with a camera with the flash on..... Rather than just using print screen or whatever
You would probably get more answers in Unity3d reddit but here goes my thinking. Why not put this to LateUpdate() method of some object where you handle that, and simply say: float speed = 1; if(player.y &gt; maxHeight &amp;&amp; player.y &lt; Screen.height) { cam.fieldOfView += Time.deltaTime * speed; } That way you update camera FOV every update called (every frame), might even feel better to user than jumping it "uncontrollably". It's hard to quess more without knowing more details about the code and where this is attached etc. LateUpdate() because this happens after Update() where player has moved (hopefully) and all other stuff is done. (see this: https://docs.unity3d.com/Manual/ExecutionOrder.html)
Did you just assume the GUID's length? You should make it more dynamic and future proof to changes in the GUID implementation: Guid.NewGuid().ToString("n") .Substring(0, len &gt; 0 ? len : Guid.NewGuid().ToString("n").Length);
 $"{Guid.NewGuid():n}" is string x &amp;&amp; len == 0 ? x : x.Substring(0, len) would also work, if they're in C# 7. My guess is that they come from a functional background or were recently bit by the functional bug. 
This is actually a unit test that tests whether or not you if know how to take a screenshot.
Removed: Rule 6, spam.
No.
Yes.
Please tell me you've dropped your /s
Yirks... well, there are many ways to write stuff like this, I suppose :p. This wouldn't be one I'd use.
I think that one's slightly *more* readable, actually, than switching on the arg in the call to `Substring()`, but YMMV (obviously). It also only calls `Substring()` if `len` is non-zero, which better reproduces the original method's behavior. (It *is* terse, though.) I mean, if you want a *bad* version, let's try $"{BigInteger.Parse($"{Guid.NewGuid():n}", NumberStyles.AllowHexSpecifier) / BigInteger.Pow(new BigInteger(16), len == 0 ? 0 : 32 - len):x}" But, maybe that's too obviously silly. Nobody reasonable would pull in BigInteger just to format a string. Maybe new string($"{Guid.NewGuid():n}".Take(len == 0 ? 32 : len)); which is bad *and* short.
Since I'm a moderator here, I'm always serious. I never joke around.
You're going to branch either way, so it ought to at least avoid the jump down the call stack. It's not likely to be a huge difference, but I'd be surprised if there was *no* difference, absent inlining by the JIT or something.
Wired mouse with Left/Right middle and scroll and preferably at least two additional thumb buttons for me. I am using a Razor Hex Naga... it has about four extra buttons I can't use because they are positioned badly (for me). I don't like anything wireless because I'm on a desktop and don't want to worry about batteries or charging.
Interesting :) In addition to ",nse", there's also ",ac", which automatically refreshes the watch expression every time the debugger is paused, even if the expression causes side effects. I suppose you could combine the two together?
There is one very important technique not mentioned in this article, which is using [Debugger.Launch](https://tinyurl.com/y96c77r3) This is particular useful in debugging services,web processes, multi-threaded and conditional debugging where stopping in a breakpoint may not be as easy as it may seem.
happy with my cheap logitech m185 wireless. About £10 on amazon Tried bluetooth wireless before, and they are a bit jerky and chomp through AAA cells really quickly. This one takes one AA and claims to last a year.