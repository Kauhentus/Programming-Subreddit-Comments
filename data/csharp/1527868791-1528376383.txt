&gt; Singleton is about how many instances can be created, not how many are created. So if I use HttpClient as a Singleton in my application, it's not actually a Singleton because someone else could new up another instance somewhere else? No, the private constructor is an *implementation detail*, not the important bits of the pattern. Design Patterns are just patterns, not religion, and not enforced by the compiler. &gt; To claim otherwise would imply that an integer is a Singleton if your application only instantiates one of them. That's just wrong. It's about re-using a single instance (most) everywhere an instance of that class is needed. We don't call it the "Singleton + 1" pattern when you need to use 1 extra instance in an ultra special case. Bad uses of the Singleton pattern are when you don't really need to, like "I'm told that static methods with mutable state are bad, so I'll just use a Singleton and pretend that magically solves multi-threading problems." Or, "I have no evidence that this constructor actually takes a long time to initialize a new instance of this class, but I think I can micro-optimize my performance by making this a Singleton." Good uses are "I need multiple threads to access a shared resource, so I'll wrap that access in a Singleton that properly handles the multi-threading issues" and "I have an implementation that relies on global static stuff out of my control, but that wouldn't let me unit test, so I'll wrap it in a Singleton."
Personally I'd always prefer to have a data model do it's thing in the DAL. The BL should receive only what it needs to keep things running as quickly as possible. So if you have a User Model, but there are a multitude of states the User Model might be in, it's absolutely worth splitting those out into separate models. Let the SQL server do what SQL does best. So, if your User Model was complicated, I'd suggest having a User Model that was nothing more than an ID and a verification token. This way you can pass it about with a minimal memory footprint, gather the information required about said User as it's required. More SQL queries, sure, but a smaller footprint on the web server. Although of course this'll depend on your infrastructure setup.
Almost every single advice in this thread is complete ass, this is a Unity question which enforces certain design patterns. Boilerplate advice isn't going to suffice, ask the question in /r/Unity3d or /r/gamedev
Design Patterns are *all* solutions to problems that the language itself doesn't provide a solution for. The fact that using someone else's class as a Singleton doesn't mean that there is literally only possibly one instance of the class doesn't change the fact that it's being used as a Singleton. A Singleton is a Singleton if it's used as a Singleton, period. There's no compiler assistance for any design pattern. A Factory is a Factory even if the class doesn't have "Factory" in the name. Etc.
are we not doing phrasing anymore?
&gt; Ok, you don't understand the difference between a reference and an instance at all then. Or the difference between the Stack and the Heap, apparently. ValueTypes are on the Stack, not the Heap (mostly) and there is no reference to them at all. There are copies on every stack frame where they are used.
If your class allows more than one instance to be created, then you have not properly implemented the [singleton pattern](https://en.m.wikipedia.org/wiki/Singleton_pattern?wprov=sfla1). The entire purpose of the pattern is to ensure that only a single instance can be created. That's why it's called a "Singleton".
Attributes still mean you need to modify the source of the code you want to extend. If you don't have the source then that is not really an option.
Non-Mobile link: https://en.wikipedia.org/wiki/Singleton_pattern?wprov=sfla1 *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^188188
Dude. If you can't trust then for that, then why trust them with the source code at all?
&gt; When you type 1 in your code, it is always the same instance of 1. No, it isn't. It's a value type. Every "1" is a *copy* of the *value* 1 *on the stack* in the current stack frame. There is no reference. There is no instance. &gt; That was my point. It is (in part) why you can't execute 1++ or other mutating operators on an integer. ??? You can execute ++ on an integer.
&gt;ValueTypes are on the Stack, not the Heap (mostly) and there is no reference to them at all. Unless the value-type is boxed. &gt;There are copies on every stack frame where they are used. Unless they are passed by reference.
&gt; If you're mixing static and Singleton, then you never really needed Singleton Wrong, the Unity serialization engine doesn't support serializing static members of a class. If you want to configure your game manager with serialized objects you need to create at least one instance of the manager. This is a drawback of the engine. &gt; you don't really understand the purpose behind either of them It's more like you don't understand the environment in which this code is integrated.
True.
Basic concepts don't get outdated. Looping and decision making don't change, it's the tools that change. Sometimes a new paradigm will try to make a splash, but they rarely succeed.
But the point is that you can only create one of them. Just creating 1 instance doesn't mean it is a singleton. It just means you have 1 instance. The limiting it to 1 instance(ever) is what makes it a singleton.
Again, it depends *why* you are using a Singleton. If you are protecting a shared resource that will blow up if it's accessed by multiple different instances, then you need to protect your constructor. If you're using a Singleton to avoid the performance impact of creating multiple instances, then there's no need to protect that constructor (and you often can't, if you're using something like `HttpClient` as a Singleton).
I didn't mean Singleton can't call static things, I meant you shouldn't be mixing access to those static things with the Singleton and without. An instance wrapper around safe static members doesn't need to be a constructor-enforced Singleton in the first place. If you new up 5 instances, they're all still wrapping the same safe static members. If the static members are *not* safe, then you can use a Singleton, but *you don't mix access via the Singleton and via the static members*. All of the static access goes through the Singleton, because the Singleton can't provide safety if the static members are being twiddled by other things.
https://dotnetfiddle.net/BuTsNB Someone needs their very own "Clarity Clarence" moment, it seems.
Honestly, I haven't looked into a new OS because it just hasn't been necessary until now. At various points, I've used jGrasp, Eclipse, NetBeans, Atom and Sublime. I don't really know whether my machine can run a newer OS, I'll have to look into it.
Yeah, I used VirtualBox for a computer security class in college (mostly for stuff like Metasploitable), and I recall it being pretty clunky. I can't really imagine trying to build and debug a project inside an IDE inside a VM.
And? It says you have to assign the result to a variable, not that you can't call ++ on 1. 
Read what I wrote, guy. I said you can't do `1++`. 
&gt; Strive to better organize your code and to avoid redundancy. I would put this one above everything else, especially optimization. Code that is well organized is easy to read. Code that is easy to read is code that is easy to modify. Code that is easy to modify is code that is easy to optimize.
*Using it as a Singleton* means it's a Singleton. It's a pattern, not a language feature. Whether or not you need to protect the constructor depends on why you are using a Singleton, but it doesn't define whether you're using the Singleton pattern.
Sure, pedantic win. It still doesn't support your argument that "there is only one 1". The compiler prevents it like it prevents mutability on anything defined as constant or readonly. 
Do you even realise you're really, _really_, late to the argument? I conceded long before you started arguing against me. Also did you have a shitty day or something? I was even backing up your initial point, and now you reply with a zealous overuse of punctuation marks. 
I find that knowledge about older technology is more useful in hobby projects than professional jobs depending on whether your job has you maintaining existing systems or developing new ones.
You're right that it doesn't rely on an instanced property. I'm not sure what you mean by macro but if you mean a purely static class that acts as a facade to other static properties then I agree. However, the designer has chosen GameIsPaused to be part of a class that is instanced, which will contain other instanced variables. In that case, the standard way of accessing parameter is through the singleton. Don't make the developer think! Make all the properties act in the same way for consistency. This has the added bonus as to make maintenance easier as the calling class doesn't need to know anything of the property or its implementation, just that it is there. The calling class doesn't care that it is static internally. If the designer wishes to make the domain logic of game pause rely on more than static items then there is less risk of change with a singleton.
it is a general purpose language, Microsoft's marketing angle on it is "data science" because they don't want to say "it is good for everything C# is good for" 
I absolutely agree with you, just wanted to make clear that using a static property would not be unsafe or something
In addition to what others have written here, attributes use reflection, which is a whole can of worms - not least because it's not checked by the compiler (indeed, can't be checked by the compiler). It's also much less type-safe. If you can use extension methods instead, I'd strongly recommend them!
WPF
Much of programming is about preventing users from doing something with the software in unexpected or incorrect ways. Why do you think that concept only applies to users? It applies to developers as well and it applies to them **more so**. The idea of "coding to a contract/interface" exists specifically to "lock" developers into interfacing with something in a specific way. Code as if you can't trust anyone to maintain it properly, even yourself.
Reflection absolutely is checked by the compiler - just magic strings you use to hunt for things aren't. Expression of func of t of object is your friend to remove that noise. If you're implementing conventions using reflection - to back you up here really - you absolutely need excellent test coverage around that code.
Yes, and that can be done with a DI container. It would be equally hard for me to make a constructor private, as it is to register a class as transient rather than singleton. Paranoia doesn't help anyone, it just makes the code harder to maintain. Make sure APIs are intelligent instead, and devs will do the right thing.
I meant making the constructor public.
You're right. I should have done that in the first place. This is my first time posting on Reddit and I didn't even know they had a subreddit for Unity. This was my mistake.
They are not related. Attributes and extension methods provide different functionality. An Attribute does nothing more then add meta-data information about the element. Attributes on properties may be used by serialization libraries to find properties to serialize but it isn't the attribute that is doing this work... it is the serialization class that is doing the work and following a different logic path because it found particular attributes attached to the elements. An extention method is a member of a static class with special handling to allow an object to 'look' like it has a specific member, but in reality it is simply calling a block of code unrelated to the class it is extending and the object 'calling' the extention method is implicity passed as the first argument. static class myExt{ static int Invert(parm this int){ return -this; } } void main(){ Console.WriteLine( (4).Invert()); //Equivalent to Console.WriteLine(myExt.Invert(4)); }
Can you please show the compilable code that has the line public IDictionary&lt;String,int&gt; foo{} As far as I can tell, that is not valid syntax. If that were a property as mtVessel mentions It would require either a getter or setter specified (else error 'Property or indexer must have at least one accessor'). You can't initialize an interface in that manner because an interface doesn't have a constructor... an interface says, the variable that goes here will be able to perform the following operations ... but, it doesn't specify the type that the object will be, so you have to assign an instantiated object that is a class that implements the interface. public IDictionary&lt;String,int&gt; foo=new Dictionary&lt;String,Int&gt;{{"bar",0},{"baz",0}} this will work because while IDicitionary is not a specific class that can be instantiated Dictionary Is and Dictionarys act as IDicitionarys 
The singleton pattern tells developers that only one instance of the class should be created at most. You are advocating that a class that **should** be a singleton should not be a singleton and that "singleton behavior" should be controlled by DI and IoC. This increases the likelihood of bugs because a developer has to *know* that some particular class *should* only have a single instance and there is nothing preventing them from creating more than one instance. The **best** place to implement singleton behavior will always be the class that *is* a singleton. IoC and DI provide **optional** singleton behavior on types that aren't traditional singletons. You are literally advocating that making it possible to insantiate a **single**ton more than once is better than making it **impossible** simply because IoC and DI allows singleton-like behavior. Bottom line -- if a class implementation requires that it be instantiated only once, then it **must** be a singleton. If a class *can* be used *like* a singleton, DI and IoC can handle it. Actual singletons can still be used with DI and IoC. This nonsense about intelligent APIs is a poor argument because an intelligent API will ensure that singletons are, in fact, **singletons**. Making a singleton class non-singleton means a dev can mistakenly assume more than 1 instance can be created and voila, now you have bugs. Not a very intelligent API, is it?
After a decade, truisms for software I write meets: * Composition over inheritance * No static * Constructor, not property based dependency injection * Throwing exceptions is not logic. It's better to have some bool Method(out var returnValue) than throw an exception. Then I can have my debugger halt on all thrown exceptions. * Immutable objects whose constructors do null checking * A philosophy of "check out and build", not "check out, install this shit, then try to build"
Sorry my fault, I meant what you explained, manual labor jobs
I'm not used to setting up bindings in code, I usually prefer to do it in the xaml file. Have you checked the direction of the binding? Making it two way ensures you can modify the variable from the GUI, as well as modifying the selected value from code.
I have never worked with closed- nor openxml, but it seems your question is more about displaying your boolean in another way than true or false. Please correct me if I am wrong. If that is the case, you can use a simple function to determine the whether write yes or no: string BoolToString(bool value) { return value ? "Yes" : "No"; } And use this anywhere you need, for example: worksheet.Cell("S3").Value = dr[16] = BoolToString( sysRec.ReturnsBool );
I am at a very large very established company. They still have *classic* asp here. As in pre .net. I suspect there is still some stuff older than that. Plenty of webforms. Last place I was at (about a year ago) was fairly cutting edge and they still had lots of mvc and were just getting into angular. I'd say the rock in the over a decade I've done this has been sql server. New features get added but it doesn't change that much. C# is also fairly solid. Java. And good knowledge if standard JavaScript is also good. I'm trying to catch up myself. Its kind of overwhelming 
Hmm would handjobs for a living pay the same? Because really I don't think those change much over time. Put on a nice audio book and do the thing. And think of the forearm muscles. 
I have never touched MVC or Core and I don't have any problem finding great work on C# projects I enjoy and which challenge me. The fundamental abilities and skills that make someone a good programmer have not changed for the 20 years I've been doing this. If you learn to program, which is primarily about figuring out what the customer really needs rather than what they say they want, and thinking logically about their needs and designing an elegant solution with whatever tools you have, then the languages and frameworks you know don't matter all that much and you can always pick up new ones. For me, the biggest leg up I got was simply getting a job actually working on a real system that was designed well, so I could see how it was done. After a few years of that, I could immediately see any design flaws in any other project. Also, simply the knowledge that my boss was a great programmer but that his education was an MBA shifted what I considered to be important. Yes, you have to know how to code efficiently, but the ability to understand your customer's business and suggest good solutions will always set you apart from even the most advanced coders who talk to computers better than they talk to people.
I agree with that entire first paragraph. I'm working in EF now and can't stand it, but Linq in general is a joy to work with, something I'd been dreaming about having for many years.
everything gets more or less outdated in 5 years. welcome to the field! you will always be learning!
Dependency injection and IoC maybe?
This is the real struggle. I'll pitch in: once, a new fling started texting me. However, I was very busy in dull meetings for a while. So I didnt get to read/text back for 3 hours. Queue drama. "Work can't be that important to ignore me! I felt like you were ignoring me!" - me: layout the meeting structure and how bad it'd look if I was reading my phone/texting when higher up suits are there. wewlad
Set the worksheet value to x = (value) ? “Yes” : “no”; Or change your database query to return yes/no instead of 1/0. Keep in mind this causes de-serialization issues. 
Can you share a stack trace?
Dotnet really picked up its pace. When I was at uni 15 years ago nothing changed until MVC4... all of a sudden Run in Linux , native SQL on Linux , Windows on Pi , fit net core 1, 2. Blazor... it’s mental. I can’t keep up 
I'm curious why you say no static.
VirtualBox runs great for me. I use it all the time to test out my Windows apps on clean machines. Really great software. 
I've been in this racket for more than 30 years and the best things I can say are: * Algorithms and Data Structures are always useful and can be implemented in any language. * Everything is just the old stuff, tossed in a blender, repackaged and sold as new stuff * Learn what you need for what you'e doing now. Don't expect it to be worth anything in 10 years.
I suppose that I can. At its heart, its a networked graph of key/value pairs, with relationships encoded as XML linkbases. Its sweet spot is to \-\- well, report \-\- on items and their values. If you can encode an order using a system based on key/value pairs, and can define relationships between the keys in a linkbase, then I would think that you'd be good to go. XBRL's beginnings were in the accounting world, for things like quarterly financial reports, but other industries, such as healthcare, have begun to look at it as well.
&gt; The set of programming jobs in the world is huge. Jobs that use ASP.NET related website frameworks represent probably less than 1% of them. I'd bet blindly that it is at least 3%
In most cases I think having a reference of a given type injected through a constructor helps self-document dependencies. 
Yeah. That's a better way to do it
I think at a certain point you have to rely on convention. "Use the DI container for all dependencies" is a reasonable standard that people can uphold. 
Except the singleton still has all the issues in the article and the DI approach does not
This comment perfectly illustrates my biggest issue with Microsoft development. Everything has a stupid name and they are all so similar yet marginally different and those entrenched in that world treat it like a religion. ASP? No not the terrible technology from 1995 with VBScript (you dummy), not the old framework from 2001 (you moron), as everyone knows, you ignorantly meant to say asp dot net core mvc two point one running on dot net core two point one. Never get it wrong again, or I shall taunt you a second time. Puh-lease.
Frameworks come and go. Focus on your fundamentals and your skills will always be in demand.
yeah the naming drives me crazy and I'm off to learn Rust 
This guy performance tunes.
Thank you for your feedback. The reason why I decided to log into a file is because when the app is compiled as a windows app target, the stdout is lost. And also thanks for the `ReadStream.CopyTo`, shaved several lines.
This is exactly what I am looking for, thanks
Just use LINQ, yo. It's more readable. 
Dude are you posting this in every fucking subreddit? I'm reporting your posts. This is blatant solicitation.
I'm trying to sell it ;) What do you expect me to do? I don't post it on the same subreddit twice to annoy people. I only post it on programming subreddits, not just "any" subreddit. It's one post on your whole feed, scroll pass it if you are not interested
I know you're trying to sell it, that's why I reported your posts. You literally just came here to spam your little money making scheme with 0 intention of using this site in a productive capacity. There are other places to sell shit.
The idea of going all-in on DI is that your container manages all life cycles that need managing. Whether it's properly called a singleton or not (I'd say probably not), it's accomplishing the same goal in a way that gives you much more flexibility. 
Ugh linq. 
Ugh linq. 
Ugh linq. 
You're not giving us enough context here to answer properly. If you're using ints, then why not just do `Array.Sort(yourarray)`? Also, you for each has a bug in it, you'll always be missing the last element, you either need to do this: `for (int i = 0; i &lt; arraylength; i++)` or this `for (int i = 0; i &lt;= arraylength -1; i++)`
How about `booltrue = false;` did that ever cross your mind
You need to write your question coherently, and even then, I doubt you're going to find anybody to do your homework for you.
Sorry I couldn't post my code. I'm on the mobile app. It's not home work tho
Yeah I have that in mind. I can just write a for loop that does it 100 times and it sorts perfectly. I just wanted to stop it when its sorted to save resources. 
Sorry haha yeah typo . I was typing on my phone. 
I am just about done with an integration into Milestone's surveillance video management software which detects barcodes using the ZXing.net library. It can read barcodes and QR codes from live surveillance video and trigger actions or alarms based on a recognized or unrecognized code.
Is it not possible to serialize the xml and then sort by timestamps?
Try Select() or Where() with Linq
Use XPath engine to query xml - much more efficient than doing it in LINQ. It's almost as old as Xml but this doesn't mean it wont work. Most of the websites prob got rid of all old xml documentation, quick googling brought this article which is valid https://support.microsoft.com/en-us/help/308333/how-to-query-xml-with-an-xpath-expression-by-using-visual-c
Can you define fundamentals? Do you mean in general or C#? 
you could do as u/karaverse, but if you want to create a manual sorting algorithm it could look a little something like this: for (int i = 0; i &lt; arr.Length; i++) { int bigI = int.MinValue; for (int j = i; j &lt; arr.Length; j++) { int n = arr[j]; if (n &gt; bigI) { bigI = j; } } int tmp = arr[i]; arr[i] = arr[bigI]; arr[bigI] = tmp; }
I'd say complete knowledge of vanilla JS. Say what you will about the language, but more and more things are using it, and I doubt they're going to move away from it any time soon. 
if you want a manual sorting algorithm \(this is just if you want to look cool, i would prefer to do what u/karaverse said\), you could use this non\-efficient one: for (int i = 0; i &lt; arr.Length; i++) { int bigI = -1; int bigN = int.MinValue; for (int j = i; j &lt; arr.Length; j++) { int n = arr[j]; if (n &lt;= bigN) continue; bigI = j; bigN = n; } if (bigI == -1) continue; int tmp = arr[i]; arr[i] = arr[bigI]; arr[bigI] = tmp; }
One and the same. C# is a great language; good fundamentals in C# will transfer well to any OO language.
I did implement what he posted prior , really wish I could post what I have. I was just thinking about it while away from my computer. Quick run down on what it does. It takes the array position, checks it with array the array position +1. And if its greater than the position +1 . They switch positions. Until it reaches array.length -1. So if I just used what karaverse suggested . There would be some integers out of order. I was just asking how would I write it so it figures it out and stops instead of me using a for loop to iterate it a hundred times. Lol . Sorry long comment 
Does the array.sort put ints in order of greatest to least?
there’s array.Reverse(); too and you seem to hate linq for some reason, but trust me, god is it useful. The Array.Sort(); method automatically chooses what is the most efficient sorting algorithm given what you put in and you have a load of other features where you’d just be writing messy code without. 
Lol I dont hate linq
What was the “ugh linq” comment about then? 
I hate to break it to you, but moving each number one step at a time is the slowest possible way to sort. Just google "sorting algorithms" and you'll find loads of ways to do it. The built in functions are very optimized and uses different algorithms based on your sample size, so that should always be your first choice.
This is very unethical and you should be ashamed. The usergroups and meetups get the license for the community to use them, not to sell them.
Maybe you're just doing this for an educational reason, but if not this already exists in a way better way than you could ever build alone: https://www.elastic.co/products/logstash
I disagree, the half-life of a developer is probably around 4 years so employers need disposable developers. You need to be able to come in to an environment knowing all of their frameworks and hit the ground running after they hire you, so you can leave in 3-4 years with some actual contributions. Being able to work with your employer's frameworks is the most important thing to them, your CS degree is just a minor checkbox to them if even.
&gt;A good programmer can get a job doing almost anything What about a mysterious, indefinitely powered black box with a single pin in and pin out and nothing else?
You also need to store the salt.
How would I do that without compromising the database though? Surely I can't save it in the same database at least, where a potential hijacker could find it? 
You store the hashed password and the salt used for that password. When you need to verify if it is the correct password, all you need to do is get the salt and hash the input. Compare the result to the hashed password. If it was the same initial input it will result in the same hash. If you are wondering why/how is this secure, the hash function that you used is also called a one way function. I suggest you look for the meaning of it as I am not the best to explain it. I hope my answer resolves your issue. 
When the user logs in with their username and password, you hash the password they entered, retrieve their salt from the database and append/prepend that to the hashed password. Now you can compare that to the hashed password that you store in your database :)
The real benefit of a salt is preventing rainbow tables and making hashes limited to one account. It's usually stored with the passwords, though you could have it in a separate database if you wish and load both. Remember, these hash algorithms are slow. If I'm using bcrypt with a decent work factor, I can give you my hash and salt and you won't be able to crack it because it takes so long. The salt isn't used to prevent cracking the hash, it's used to prevent trying a password for every single account at the same speed as for one account.
To complete my answer a little, storing the salt and hash is secure because even with both the hashed password and the salt, it would take very long time and computational power to ‘unhash’ because of the one way function.
I found this article to be pretty good at explaining the concepts of why hashing and salting is needed: https://crackstation.net/hashing-security.htm 
Can you show us what the XML looks like?
You need to do it the other way around: append the salt to the password first and then hash the combination. Otherwise the salt is useless.
Oops, you're right, my mistake. I'll edit my comment to reflect that :)
OK cool. I've used that web tool, and: using System; using System.Threading.Tasks; public class Program { public static void Main() { int a = 1; int b = 1; Console.WriteLine(object.ReferenceEquals(a, b)); } } Mister "there is no reference to be had" and "same instance, every time", why does this return `true` rather than `false` or throw `NoReferenceToBeHadException`?
In the past anything using reflection tended to be a lot less performant than normal code - not sure if this is still true.
I dont really understand. is it for performance? Cause gameplay wise everything works great so far. characters appear as they should
A good programmer can get up to speed on a framework in a couple weeks. Good companies know that, for the ones that don't you can study up before applying! When I hire, I don't care at all if you know our frameworks. 
Lots of Unity 3D devs out there.
You still want to protect the salt.
Please provide a sample of your xml structure. I think I don't understand your problem correctly, but it sounds like you can use [XDocument] (https://stackoverflow.com/questions/566167/query-an-xdocument-for-elements-by-name-at-any-depth) and LINQ to achive your goal. Parse your XML file to XDocument and the query it with LINQ.
I'll expand that to, I don't care at all if you know our primary language.
Try to find a static member initialization or a static constructor with potential issues 
Not really. That's the whole point of a salt: not having to worry about it getting found out. Now I'm not saying you should show the salts on your website's banner, but the idea is that a complex salt AND a strong hashing algorithm will keep you as safe as possible.
You'd probably fit into the Enterprise or windows buckets best given your knowledge.
You just described [https://en.wikipedia.org/wiki/Bubble\_sort](https://en.wikipedia.org/wiki/Bubble_sort)
Oh look, someone else piling onto an already won argument. Gosh. And yeah, except it doesn't do that at all. Maybe you should be a bit more attentive? https://dotnetfiddle.net/qzllZS
Um, so, an unsalted hash is bad....a salted hash is good, but a compromised salt is not a big deal even though it basically gives the attacker the same scenario as an unsalted hash.
Removed: Rule 4.
No it does smallest to largest, that's why i added reverse right after
Salts add entropy/randomness to passwords. A hashing algorithm had to output the same value every time for the same input. So if you just hash the password, any user in your system with the same password would also have the same hash. Crack one of those users passwords? You now have all the others as well. The salt value fixes this. If you hash the same password but with different sale values for each, the resulting hashes are all different. So when a user logs in you'll take whatever they entered for their username and see if you have a record for that username. Pull out the salt and password hash values, hash the password the user entered with the salt from the record in your database, then compare the hashed value you just made to the one stored for that user. If they match you're (very likely) good to go. 
Only if the attacker can precalculate the hashes of all possible strings PLUS the specific salt for each individual user. Have a long enough salt and rainbow tables are no longer feasible. 
I’m talking about a compromised salt. Assume the attacker has the salt of the users. It all comes down to....protect your salts
Every user should have a different salt. That way an attacker would have to build a rainbow table per user. 
Yes, they should....if you don’t worry about protecting the salts of the users though then an attacker will get them.
Having the salt really doesn't matter the only purpose of it is to make it hard to generate a rainbow table. Look at any salted hash implementaion its never protected. As pointed out above you wouldn't want to advertise it. But if any attacker had them they still do their job in that it ensures that even if two users share the same password they will have different hashes. 
No, salts are used under the assumption that your database will be stolen eventually. With a per-user salt, your users' passwords are relatively secure because an attacker with your database has to expend vast resources per user, even if they know the salt to work out what the plaintext is. 
We use salts not because they're a secret value, but because a unique salt means that the hashed password + salt combination produces a different value than the same password with a different salt. Let's say that user A and user B both have the same password, but you're correctly using unique salts for each user. Now when your database is stolen, the attacker has no way to know that both users have the same password without doing the same work twice. 
To be honest, XML Serialization wasn't a thought I had. I don't have a schema for the XML files and it seems like they have a space somewhere in the &lt;? xml statement that the XMLReader doesn't like.
I've tried using Where() with LINQ but I'm not sure how to say where timestamp &lt;= begintime &amp;&amp; timestamp &gt;= endtime in the correct way.
I updated the post with an example.
I updated the post with an example.
Alright, I would consider these two and prepare accordingly. Do you have any ideas about the core topics on the resume that would help me better get my foot inside the door?
And if a user’s salt is compromised they are vulnerable to rainbow table attacks....something that is still super effective for most users of the web.
Have a look at [this post](https://www.reddit.com/r/csharp/comments/351hk4/using_linq_to_extract_attributes_from_xml/)
I would also follow the XPath approach if your file is not too big. You can use the XmlDocument class for that. https://msdn.microsoft.com/en-us/library/hcebdtae(v=vs.110).aspx
What does xsd.exe output? 
The power of rainbow tables is in pre-computing them for when you find passwords that are stored with weak hashing algorithms and no salt. With unique salts and a slow hash, a rainbow table is worthless. At that point you're brute forcing for each user individually - you cannot use the computed hashes for one user to identify the password of another user. It is a non-issue for the salt to be known when you consider all the other information likely to be compromised by a breach. 
When you interview with MS, you will be applying for a position in a product team within one of these groups. The particular position will have a list of skills and prerequisites that you should have, regardless of the group. The group itself does not really matter that much, it's just a giant organisational umbrella that has a structured management hierarchy. The product teams are really diverse within the groups. For example, I work in the C\+E group and have worked on three different product teams in the last 3 years. Also, these groups tend to get realigned once in a while so the whole concept is fluid. The list you have is just the current iteration. If you get the job you can internally apply for any other job on any product team or group. There is a lot of horizontal movement like this as people spend a few years in a position and want to try something new.
There was a recent reorg, so that isn't accurate anymore. That said, there is room for c# developers in every group
I don’t know why I wrote true. It returns false, which is my point. You have two different references to the same int value.
Set your regex to be case sensitive, then use this pattern&gt; [^a-z0-9]
Set your regex to be case sensitive. Then use this pattern where the caret sym means not `[^a-z0-9]`
Yeah it is. Heh. Was just writing my own. 
Yeah you're right. But I was just writing my own. So I could better understand. 
That's comforting :-)
I'm trying to follow what you're trying to do here... so I might be on the wrong track... But from what I understand, you have a class that you want to turn into an XML file, right? But your class is different than the XML file you want to create? Sounds like you need 2 classes then. You're already existing one and then another one representing what you want your finished XML file to look like. You can take your XML schema, copy it, create a class and then in Visual Studio choose Edit -&gt; Paste Special -&gt; Paste XML as classes. Now you have your XML Output Class created. From there you want to do some mapping between your existing class and to you XML output class. You can do this manually or use something like automapper to do it. From there you just simply use XML Serializer to output your XML from your XML output class.
Salts are meant to thwart precomputed attacks. Not brute force attacks.
very wholesome would encourage again. now if only I felt like this with my memory leak in my long running windows service app
Hey coding-buddy, I've had to deal with memory leaks a long time ago with Win CE. Keep at it! Develop your own workaround. 
My main concern with that idea was flexibility. I figured, if we later want to make slight adjustments to the XML output, we'd just have to change a few things in the .xsd file, and so the changes remain contained. If I have to describe everything to the software by applying tonnes of attributes to classes and their members, then the smallest changes could end up snowballing into a lot of work on the source code - which, as far as I know, should not have anything to do with what the serialized version of the class should look like. Separation of concerns, and all that. I had a lot of trouble with the attributes earlier, but I've managed to resolve them for now, so this will be the way I'm going. Thanks for the input.
Well, you know what they say: if at first you don't succeed, give up and mod programming subreddits instead.
Damn. Foe hilarity, i giveth thee the upvote thou hast earned. Yay! 
Sounds like you need to be using XML attributes in this class to match your expected output.
Oh I see, if that's the case you probably want to use reflection to read the schema you created and then output your object based on that. [Something similar to this](https://stackoverflow.com/a/3269081).
Have you tried Json.NET instead? Newtonsoft in other words.
Yes, same error that can't parse a matrix or something like that (the error is in my native language).
What I would do: Create a dto layer. Simply put, your classes but having more or less information about the serialization etc. And you will have a domain layer. Classes that transcribe the most your business. And a mapping layer between the business layer and the dtos (think of automapper) That way you will isolate your business layer from all technical aspects related to the serialization. Changing the serialization format and adding or removing new properties will be contained. Finally, I would say that it depends on your use case. 
If they appear then everything is OK. I may have used different version a long time ago. 
Here's my thoughts, from someone who was the normal .NET Dev Interviewer at my last job: - Know Javascript. Learn ONE of the more popular frameworks like Knockout or Angular. When I interviewed people for front-end I didn't worry too much about *which* they knew so much as that they knew *one*. If you really do know one, you can probably learn the other. For whatever it's worth, I think Knockout is most prevalent in the .NET world at this point, but React is the new hotness, for better or worse. - Typescript wouldn't be a bad idea either. It's popular, even outside the .NET world. Plus it does seem to be what people are slowly shifting towards; the type-safety provides a lot of value to the writers of these ever-larger web frameworks. - Good Fundamentals. Some would consider these to be the GoF Design Patterns, but I'd suggest trying to actually *use* some of them, and learn where and when they should be used. - Understand how certain things work or should work. Queues-as-folders for background jobs/processing, Queue Tables in a Database for background processing. Despite the fact there are more 'modern' ways to do these things, you'll still see these methods used quite often; each has certain practical advantages. Consider Cancelling an As-yet Unprocessed entry in a Database queue is trivial unless the design is completely wrong. There's also a number of other scenarios such as that are easier to implement under these paradigms. I bring this up because it's amazing how many people I've seen who can't get these basic things down despite being amazing at knowing the MVC Stack. - Learn about Message passing and Distributed systems. Implement something with Akka.NET or RabbitMQ to get the concepts down. (I see job offers all the time in my area if you're a .NET dev who understands RabbitMQ). The message-passing paradigm has been around long enough that we can be fairly certain it is not going away, so it's good knowledge to have. - Learn how to use tooling. I don't mean Resharper. Can you make Nuget Packages? Or even better, make scripts to build and deploy your work? Can you give me tooling that can make my job easier? (Example: Something that gives me a POCO from a SELECT statement. Or Generates Dapper calls to a stored procedure/function for me.) - The rest of the app ecosystem. Can you configure IIS? Generate/configure SSL Certificates? Set up Scheduled Tasks? Can you write powershell scripts? (Leaving services out because Topshelf handles this so well) - Make sure you can do SQL. Not just the simple stuff. Things like Joins, `APPLY` (or how to do the equivalent thereof, even if it's ugly as sin like Oracle Pre-R12), How to make tables, *WHEN* to make indexes. (To those who say that's the DBA's job: Unless you are at a big enough shop where the DBA handles literally every aspect of your data model for you, they will appreciate that thought was put into your structure.) - Know how to structure your data. This goes for both Code-Wise and DB Wise, especially since they tend to bleed together at certain points. - Understand Dependency Injection. Yes, it's a pattern, but everyone seems to think that it means to learn a DI Framework. Sure, that can help. But if you don't actually understand the concept, you're putting the cart before the horse, and may well wind up with a design where the DI is worthless. Or, even more concerning, where the DI is doing things that it shouldn't, because the design was wrong. When you do want to learn a framework, I'm partial to Simple Injector since it leads people away from most bad practices and DI Abuse. Also the [documentation is top notch](http://simpleinjector.readthedocs.io/en/latest/quickstart.html) and was helpful in learning DI Concepts that I hadn't learned elsewhere. No, many of these don't come up in the interview. But they are things that I notice the people who thrive are capable of.
I imagine that the error message is saying that it can't parse an array. They have this arrangement in the JSON: [ {pagination-details}, [ {record}, {record}, ... ] ] Which is not valid JSON. This would be valid: { "paginationDetails": {pagination-details}, "records": [ {record}, {record}, ... ] } As would just chopping off everything before the second [ and remove the trailing ]: [ {record}, {record}, ... ] It could just be a bug - perhaps write to them and let them know that the JSON they're producing is unparseable? Otherwise if you want to work around it then extract a substring of their JSON starting at the second instance of [ and finishing before the last instance of ] and then parse that. Alternatively change the URL to ask for XML instead. I just tried that and it works fine, I imagine they're expecting their users to fetch XML and the JSON format is an afterthought. Aside from the nested array issue they're also sending floating point values as strings, which isn't illegal but at the same time it's a pain in the backside if you need to parse them before you can use them. 
The key you're failing to explain clearly is the password and salt need to get combined before hashing. At least I think that's how it should work.
Hmm. Your structure looks a bit off. That said, looking at the JSON Structure there's not a good way to do this without custom code, at least as far as I'm aware. In JSON.NET, I'd do the following: var myObj = Newtonsoft.Json.JsonConvert.DeserializeObject(myJson) as Newtonsoft.Json.Linq.JArray; Paginacion pageData = myObj[0].ToObject&lt;Paginacion&gt;(); List&lt;RootData&gt; myData = myObj[1].ToObject&lt;List&lt;RootData&gt;&gt;(); 
https://gist.github.com/Zonnex/fe3da03eb3705b695c38e432ccce253b This code gets me 10 items in the array in the end. I omitted the classes but my Data matches your RootData object.
It translates it's own when it renders the code to IL. You don't have to worry about it.
It's a form of Lowering. The compiler sees what you've done, and generates the backing field automagically. [Here's an Example to illustrate, if you have Linqpad.](http://share.linqpad.net/af37hg.linq) There's other forms of lowering; for example, `await` in an `async` method will cause a whole state machine to be created under-the-hood and your function to be split in pieces. String Interpolation does some interesting things under the hood. Sorry, I suppose I didn't actually answer your main question. It's just a matter of the compiler generating a name for the backing field. The compiler is basically a lexical parser; when it sees an auto-property it says 'Oh, I guess I should make a field for this' and then holds on to it long enough to then write the code to just read/write the field in the getter/setter. I can't find where in Roslyn Auto-Properties are handled, but [here are some other examples of lowering, at least. Many far more complex than auto-properties.](https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter)
Thanks for this. I'm six months into my career and some days I really, really feel like I'm in over my head and am destined for failure. It's nice to know that even after almost four decades, I'll still be feeling the same way sometimes.
Like others have said, there is so much more to learn than just the coding. Git is definitely something you want to start learning before you need it on a job. My team made the switch about 18 months ago and we are still learning it. These are developers ranging from 1 to 15 years experience all struggling equally with a new source control process. Build and deploy is another area that you could spend some time on. I mainly use TFS/VSTS, but there are a number of options out there for you to look at. You can do so more than just C# with it. I run webpack for the UI project and powershell for a number of utilities, all from TFS. Speaking of powershell, it's a handy skill to have. For me, I use it to install windows features, set up IIS, deploying dacpacs, deploying SSRS reports, stop and start app pools and so much more. Like u/forlasanto said, learn to estimate. With all the knowledge on my team, we still under estimate time for most of our work. [Funny, but true.](https://i.redditmedia.com/oDBEiQysUJQTrzxnsQdwNwdBIEnPLYzjrm2_oG3gqgU.jpg?s=7e1bb7a65c5719fb5653f1c38d1a4cac)
&gt;How does the property know what variable to use as a backing field? The compiler generates a backing field. You mostly don't have to worry about that. Specifically, your code would result in a backing field called `&lt;NumerOfHours&gt;k__BackingField`. As a result, it would get lowered to something like: private int &lt;NumerOfHours&gt;k__BackingField; public int NumerOfHours { get { return &lt;NumerOfHours&gt;k__BackingField; } set { &lt;NumerOfHours&gt;k__BackingField = value; } } 
Don't reinvent the wheel: [https://github.com/aspnet/AspNetIdentity/blob/master/src/Microsoft.AspNet.Identity.Core/PasswordHasher.cs](https://github.com/aspnet/AspNetIdentity/blob/master/src/Microsoft.AspNet.Identity.Core/PasswordHasher.cs) Just use this already written and tested code. The salt is an implementation detail of your password hashing strategy and this PasswordHasher hides that complexity from you and just gives you back a HashedPassword \(so you don't need a separate salt column\).
VS 2017 feels slower than older versions. Something I really do hope they fix. That said, try some of the [suggestions here](https://docs.microsoft.com/en-us/visualstudio/ide/visual-studio-performance-tips-and-tricks). Or some of these [suggestions to tweak Roslyn analysis](https://github.com/dotnet/roslyn/wiki/Performance-considerations-for-large-solutions). They've helped me out.
Okay, so I get that it does stuff in the background. My confusion lies with where you tell the getter what variable to get. My book uses the example of: "public int HoursWorked {get; set;} and it says that it is the same as: "private int hWorked; public int HoursWorked { get { return hWorked; } set { hWorked = value; } } So you tell it to grab the value of hWorked, but I don't see where you do that in the auto version. How does it know to grab the value of hWorked if it just creates it's own backing field but is never told what value to put in that field?
But how does the property know which value you want it to get? In the normal version of the property, you're supposed to use the getter to grab a variable, but in the auto version, you never tell it what variable to get.
There's nothing invalid about their JSON.
You just assign right to the property. Like: Number of hours =5; That's it. You use it just like any variable. 
Okay I understand it a little better now. It creates it's own variable based on the property. But then, how to I store a value into that? If I had a variable "int totalHours = 10;" how can I get the auto\-implemented property to get that value as it's backing field?
The property knows which field's value to get because the compiler created the field in the first place and associated it with the property behind the scenes.
You may still feel the same way in 4 decades, however, i do not and suspect you also will feel differently then. Knowledge and success breed confidence over time and, in time, problems will learn to fear you as you see the solutions from a higher level. You will be able to solve greater problems. 
Is [this](http://rextester.com/XMWR37721) what you are looking for?
So if I have int totalHoursWorked = 25; public int HoursWorked { get; set; } HoursWorked will know to get the value of totalHoursWorked?
The unique thing about our field is that when something new comes out, even if it's just a framework for a language, in some ways everyone is a junior again. More so with new languages than frameworks, but it means someone in their twenties can be a more "senior" dev than someone in their forties if the dev in their forties stagnates/doesn't keep learning new stuff.
Okay, so if I have int totalHoursWorked = 25; public int HoursWorked { get; set; } HoursWorked won't get totalHoursWorked right? I would have to assign it to the property like: HoursWorked = totalHoursWorked Then it will get and set the value of totalHoursWorked correct?
Totally agree 100%. It is a BITCH to keep up. But, like most things, learning gets much easier with practice. 
I don't think so; someone in another comment said that the names of the generated fields are different.
It's simpler than you seem to think. `totalHoursWorked` is irrelevant and pointless in this example. Use the property on it's own, you do not declare or use a matching variable at all in this case.
Yes. I'm guessing you might be thinking, "Then why not just use variables?" Because I asked the same question. But the real power comes with classes. So if you had a class with an zhoursWorked property, you could use . syntax to access it (if it has the right access modifier of course) Say I have a class called Employee. I instantiate it with: Employee emp1 = new Employee (); Assuming that the Employee class has an HoursWorked property then I can access with: emp1.HoursWorked 
&gt; "int totalHours = 10;" how can I get the auto-implemented property to get that value as it's backing field? If it has _your variable_ as as the backing field then by definition it is not an auto-implemented property. 
&gt;But then, how to I store a value into that? You don't. You only interact with the property, not with the field. &gt;If I had a variable "int totalHours = 10;" how can I get the auto-implemented property to get that value as it's backing field? I don't really understand. The point of auto-implemented properties is that the value of the backing field is always effectively in sync with the value of the property, because all the property does is set or get it.
Are you trying to set an initial default value? (You can do that in recent C# versions. Just write `public int HoursWorked { get; set; } = 25`!)
Yeah, forgot about that. Though someone else said you just assign it. HoursWorked = totalHoursWorked; So I think that might be it.
Thank you so much! This did the work. Is not the "best way" but i think is the only "easy way". 
Click [here](https://sharplab.io/#v2:CYLg1APgAgDABFAjAbgLACgoGYECY4DCcA3hnOXGRdnAJYB2ALnAKIAeAhgLYAOANgFMScAOYDGyOAGdxkgL4Y5QA===) to see how it works behind the scenes.
Keep at it, buddy. We all feel like an imposter sometimes. I'm on year 6, and although I feel much more comfortable with my capabilities I still get overwhelmed from time to time. I've learned to love the struggle though. I like knowing I'm being stretched to learn and grow. 
**I don't use LINQ yet because** **~~I'm stubborn~~** **I don't know How yet.** 
Sometimes Easy is better than elegant. Anyone can look at that and with at most a helpful comment as to why you are doing it this way, and will know what is actually being done. Best balance of Elegance/Easy would be to put that snippet into it's own method. That way if someone comes up with a better way, it's nice, localized, and testable.
@chucker23n I guess my book might be wrong. It says that: public int NumberOfHours { get; set; } is the same as \(using your example\): private int totalHours; public int NumerOfHours { get { return totalHours; } set { totalHours = value; } } So if they're equivalent, and one has a declared variable as the backer field, I expected the auto\-version to be given one as well. I was thinking "why itsn't totalHours being declared and how does NumberOfHours know that it needs to get it." But instead, totalHours isn't needed at all. So with the auto\-version, because you don't need to perform any extra logical steps, you are using the property in its most basic form, only getting and setting a variable, but you use the property, such as: ClassName.NumberOfHours Am I on the right track here?
Random is random. You will get odd distributions. Sometimes tweaking or adding small delays between randoms may help. Something about the sort algorithm looks odd, but I can't put my finger on it. In linq, it would be a matter of `var mySortedArray = myUnsortedArray.OrderBy(q=&gt;q);` (or `OrderByDescending`)
I'm not sure if you can @ users on here like you can on Twitter, so in case you can't, I replied to you as well in a reply to SideburnsOfDoom. Hopefully I'm understanding it more now.
Solid advice, but I'll throw in that Static ConcurrentDictionaries are a great poor man's Caching. That said, they should almost always be private *fields*, not properties as this should be implementation specific (i.e. if you ever move to something like Redis)
Hmm, when I make the array random it doesn't work. When I manually write out an array the sort works perfect. LINQ looks very readable. I just need to read and try it.
Are you assuming that there's a single salt for everyone? Best practice is to have a separate, randomly generated salt per user. The problems salts solve is attackers being able to use pre-calculated tables to reverse hashes to passwords. If there's no salting, they can just download one. If there's a single salt, they can hash the commonly used password list once and compromise a lot of accounts. If there are unique hashes, they need to do the same, but for every user.
Yes, you have it now and I can see where your confusion came from. The book just means that the end goal is the same, you'll have a property that you can assign to and retrieve the value of (get and set) but the internals of c# take care of the backing field for you and you won't have access to it or even know it's there.
ExpandoObject is my go-to in a pinch like this
I used to get quite disheartened looking at code on GitHub, or wherever, and thinking "I'm never going to be able to so something like that!" Then it hit me, quite recently actually. Despite the code being here, in front of me, in it's entirety, the code I'm looking at wasn't all written in one go, probably far from it in fact, it would be fascinating. and eyeopening, to see how many extremely long pauses, completely wrong code, Googling, even thoughts of "I'm never going to get this!" etc it took to get to code I'm looking at. Chances are the person who wrote this code went through the same emotional roller coaster too. But they carried on...and they did it. You know they did, you're looking at their code.
now its going to be my go-to too :p
Whoo! Finally!! Programming has always been one of my weaker areas so it takes me longer than others to understand things. Thank you everyone for your help and patience!
That's really useful. I can see the generated backing field. Thanks.
Exactly. Sometimes i have so many tabs open to SO, i just use one machine for research and the other to dev. It's truly that intense sometimes. I often binge-code. Days of obsessive and intense problem solving, lack of sleep (code till 4, start again at 7) and all with two machines which don't get restarted for weeks because it would take too long to setup my current scenario every time. Then i play vid games obsessively for days at a time while i churn new features and build ideas in my subconscious. And those are the ones i do for fun...
Design patterns. Your should consider learning about the different types of patterns out there. What they are and when to use them. Any senior developer worth their salt can look at a problem and know what pattern(s) will work. Added bonus: lots of patterns are applicable across different languages. http://www.dofactory.com/net/design-patterns https://www.dotnettricks.com/learn/designpatterns/gang-of-four-gof-design-patterns-in-net 
Thank you for this. Getting a little discouraged with my progress lately and It's good to hear someone with that much experience still feels a little of what I'm feeling.
It would be fun to see a professional go through and comment their code with how long it took them to figure out this or that so beginners can see how much a pro still uses google and second guesses themself or feels over their head.
Any good progression reaches plateaus. It is a wise person who recognizes them and continues through them. Keep coding! You don't learn how to swim by sitting on the edge of the pool!
Line 38 arrayhigh\[counthigh\] = i; Should read arrayhigh\[counthigh\] = arrayor\[i\]; The same will apply to line 43 for arraylow, because you are just assigning "i" which is the iterator, not the value you're trying to split on. arrayor\[i\] is the actual value. Considerations * Your method of filling arrayor with pseudo\-random values is correct, as long as you understand each time you execute the application you will get new values because you're not explicitly supplying a seed to the generator. * Try using List\&lt;int\&gt; instead of a fixed array of integers. It will show you some inefficiencies in your sorting loop. * LINQ isn't that difficult to use. sum = arrayor.Sum\(\); works just as well as your for { } loop does, but using Sum makes it clearer as to what your intent is. Remember LINQ is just a library which extends classes implementing the IEnumerable interface. It's good to practice these hand\-written sorts and loops to get you to understand the basics before moving on to pre\-written frameworks and libraries. Keep at it; you'll get there.
I've been putting off coding today, and it's time to stop watching freaking youtube videos and start. Starting now.
To tag users here, you use /u/. Such as: /u/gameangel147 
No, I am not assuming that. But if you lose control of the individual salts for the users, an attacker can use a pre calculated table. Sure, it’s more work because you have to do it for each password but that just slows down a mass brute force attack. A targeted attack wouldn’t suffer from that problem. Protect the salt, which was my original point because salted hash algorithms are not magic fairy dust. 
Thank you, for your information and kind words:D
That may just be it! Let me give it a go and see what I can do with it. Thanks!
If you dont explicitly implement your getter and setter it defaults to the property name on the object. 
I would put a repository in place between your viewmodels and your table adapters. The repository would do all of the implementation of the CRUD operations. This abastracts all of the implementation logic of where and how you store your data. I wold also recommend that this repository implements an interface. So if in the future you migrate to an ORM (Dapper, EF, nHibernate), as long as that new implementation implements the same interface, all of the implementation logic is abstracted from your VMs as well as your views. With this approach you can inject the repository or new up an instance in your VM, and your VM has no knowledge of how its getting its data, just that its getting its data. 
Great, also if I want to be a technical evangelist. I can do that from any product team or group? What skill sets out products would help me better to go in that direction?
Those who can't do... mod.
This is how the datagridcheckbox is... you can do this instead: &lt;DataGridTemplateColumn.CellTemplate&gt; &lt;DataTemplate&gt; &lt;CheckBox IsChecked="{Binding Path=IsSelected, UpdateSourceTrigger=PropertyChanged}" /&gt; &lt;/DataTemplate&gt; &lt;/DataGridTemplateColumn.CellTemplate&gt;
I tried doing a cell template but I didn't do the updatesourcetrigger. I'm not by my computer but I'll bet that's why it's not working. Thank you kind sir/mam!
Just an FYI, never use `JavaScriptSerializer`. Microsoft’s own documentation tells you to use Json.NET for serializing/deserializing. 
I see, thanks.
Ah, simple enough. Much appreciated.
If the other answer doesn't work out for you, you could also just implement an event handler on the row that will check the box in the clicked row, no matter which column was clicked. Implement the method: private void SelectRowItem(object sender, MouseButtonEventArgs e) { if (sender is DataGridRow row) { row.Focusable = true; row.Focus(); if (row.Item is Thing selectedThing) { selectedThing.IsSelected = !selectedThing.IsSelected; } } } Your actual implementation of knowing how the item is selected will probably be different, but the idea is the same. Then you can add the EventSetter to your grid: &lt;DataGrid.RowStyle&gt; &lt;Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}"&gt; &lt;EventSetter Event="PreviewMouseLeftButtonDown" Handler="SelectRowItem"/&gt; &lt;/Style&gt; &lt;/DataGrid.RowStyle&gt;
Ty for that! i'll do it.
In visual studio you can copy your JSON object, create a new class, and then go to edit -&gt; paste special -&gt; paste JSON as classes. There is no need to go to a 3rd party tool, Visual Studio does it for you.
Before I look too much deeper into it, 3 things: 1. I don't see an implementation of `OnPropertyChanged()`, but I'm hoping you have it set up properly. As a side-note, I would have that set up in a base class and then you could just inherit it instead of making a new INPC implementation for every class you have. 2. Can you confirm that your `CollectionChanged` handler is actually firing? `ObservableCollections` will only fire that event when an item is added or removed, not when the collection is set by the setter. 3. Are there any xaml binding errors popping up in your output window?
https://stackoverflow.com/questions/32376622/turning-mysql-select-query-output-as-html-format That took me the best part of 12 seconds to Google. Please learn how to use Google. It's a large part of a developers job for finding out if people already have solutions to your problems, and it 's a skill you should develop. 
Couldn't be more specific , thanks 
&gt; So if they're equivalent, and one has a declared variable as the backer field, I expected the auto-version to be given one as well. You're on the right track, and they are *equivalent* but not *identical*. Use the auto version in cases where you don't want to worry about the backing field, as it is auto-generated for you.
Hi! I am working on an experimental cross-platform chat (Telegram client) for Desktop: screenshot I am using .NET Core and Avalonia: https://github.com/x2bool/egram.tel 
I've just released the first version of an internationalization code generator called [Lingui](https://github.com/senselogic/LINGUI). It's a minimalistic scripting language targeting professional translators. It allows them to provide their static and parametric translations in a very simple way. The scripts are then converted into compilable code which can be directly integrated into the localized application :\)
Personally I would get rid of the DataSets and use List&lt;T&gt; or Observable Collections. DataSets are cumbersome and bloated, before generics they were the best thing to use but this has changed. Generic Collections allow you to create strongly typed objects which can be loaded from a database use any ORM and/or IDataReader. Most ORMs have change tracking which will fulfill the role that the DataSet currently does to keep track of changes made to objects. This forms part of your Data Layer, you can have your models in a separate assembly which can in turn be referenced by both Data and UI layers. You want to keep CRUD operations in your Data layer away from the UI. Repositories are great for this.
haha, way too close to being true
TIL
I actually use Observable Collections of the objects I want to manipulate and then load back into my DB, but I'll admit... they're loaded by looping through DataRowsViews.............. which ORM do you recommend?
Entity Framework is my ORM of choice, however if you want super quick reads, dapper or massive is a good way to go
That syntax of putting the name of the method into tags &lt; &gt; looks like declaring a type when creating a Java ArrayList. What does it do here?
I use virtual Windows machine and run VS. It is sloooow. That being said, PC are so cheap (compared to macs) I often think of just getting a PC for C#. 
Entity Framework, Dapper or Auto mapper have served me well.
Get developer pack: https://www.microsoft.com/net/download/visual-studio-sdks 
`input1.LongLength` is giving you the `LongLength` property of your `input1` array. ([Array.LongLength](https://msdn.microsoft.com/en-us/library/system.array.longlength%28v=vs.110%29.aspx)) This is just the length of the array, returned as an Int64 value (instead of `.Length` which is returned as Int32 value). To find the longest of any string in your array, you need to check the length of each string the array contains: int len = 0; foreach(string word in input1) { if(word.Length &gt; len) { len = word.Length; } } --- Since `string[]` type implements the `IEnumerable&lt;&gt;` interface, you can also use `System.Linq.Max()` function to do this without writing the loop yourself: `var longestWord = input1.Max(word =&gt; word.Length);`
It does nothing; it simply isn’t allowed for the developer. These identifiers are reserved for use by the compiler, this preventing any collisions.
I'm afraid your code doesn't even do that (except by accident). It's really showing you the number of words in your sentence. Whenever you get stuck on a problem like this, take a step back from the computer and solve the problem like a human. How do you know which word is longest? You probably start at the first letter and count the number of characters until you see a space. The first word is the longest, so you save that off somewhere. Then you go to the second word and do the same thing. It's not longer than the first, so you move on to third. Rinse and repeat until you hit the end of the sentence. You can implement that algorithm in code pretty easily. It may not be the best solution by any measure, and I wouldn't write it that way at first glance, but it solves the problem. As you become more familiar with C# and programming in general, you'll begin to identify patterns that you can use to simplify this (LINQ, for example, works well over your Split() code example).
No wonder I hadn't seen it before then, thanks.
If you want to rip pdf to image, I recommend to iditect .NET pdf to image converter [http://www.iditect.com/tutorial/pdf\-to\-image/](http://www.iditect.com/tutorial/pdf-to-image/)
But can it rip individual images embedded in pdf files? Sounds like it just converts pdf pages to images.
Thank you, that solve my problem.
Thanks for the response! 1. Yeah, I had it set up in the base class and was inheriting the functionality. I don't know why I was implementing the interface in the child classes. When I took that out, still no dice. I also tried giving them their own implemention of INotifyPropertyChanged. Also no dice. Since I'm using Prism, which gives you this BindableBase class that makes raisingpropertychanged much easier, I even tried using that in my base class. All to no avail. 2. Yes, CollectionChanged was firing every time I inserted a new folder, which is when I care about updating the trigger. And the OnPropertyChanged/RaisePropertyChanged inside that event handler was also being called. 3. No xaml binding errors in the output. The proof is in the pudding. Maybe I overlooked something, but here are my findings. https://imgur.com/a/NyQcHej Photos 1 and 2 are where I removed the INotifyPropertyChanged implementation snippet. The event / eventhandler were always in the base class but after removing the implementation from the child classes, I still had no look. Photos 1 and 2 also show CollectionChanged being fired everytime I create a folder and that it's being fired on the correct object. Also, I don't think I show it, but the property I'm calling changed on was "Items" in the breakpoint. Photo 3 is where I changed things up and instead of implementing INotifyPropertyChanged, I inherit from BindableBase in my NPBase class. This is a part of Prism which will call OnPropertyChanged on any property where you call SetProperty() in the setter or where you insert the property name into a RaisePropertyChanged("NAMEHERE") statement. I tried this too. I see everything being called/raised at the appropriate time but still, no luck. 
So a for each statement might be a good thing to use? if so how do i use it?
didn't know that, thank you!!
Opt-Out for newsletters. Interesting, I thought those would be gone in the post-GDRP world, but I guess they decided on wait and see what happens. I'll still take the free ebook ;)
Great answer 
 namespace Foo { internal static class Bar { private static void Main(string[] args) =&gt; System.Console.WriteLine($"Number of arguments: {args.Length}"); } }
Yes, a for loop would be perfect. Simply write "foreach (string s in arrayName){ code_here; }" The code inside the curly brackets will run over and over, once for each string in your array. The string variable will be named "s". hint: You can get a string's length using s.Length, where s is the name of the string variable.
Okay... I have EF in my solution now, and I adjusted the code to generate ObservableCollection items. I assume I reference those in my ViewModels, right?
Is this how it works, or would I have to: Form: private void oneButton_Click(object sender, Eventargs e) { string variableNane = oneButtonText; Class.appendNumber(variableNane); }
Thanks man but what i want to do is access a a variable (an integer) with the number of arguments, because i want to enter numbers in a line of command : 9, 12, 46, 99. And make an int array from them. In C i would do something like : while (i &lt; argc) { tab[i] = atoi(argv[i]) i++; } Do you see what i mean ?
Correct. Build Repositories that do the CRUD routines using methods that will allow your ViewModel to pass in the changed objects as parameters, if you allow edit and continue just return the object instead of void and rebind
You know you could have just put `args.Length` and get right to the point.
Something like: while (i &lt; args.Length) { var x = args[i]; }
var tab = args.Select(x =&gt; int.Parse(x)).ToArray();
 foreach (var number in args) { Console.WriteLine(number); }
Thanks pal.
Thanks mate.
More advanced question, is Split().GroupBy().Max(); preferred over Split().OrderBy().First(); in terms of performance? Omitted arguments for simplicity.
Thanks dude.
Skills or products don't matter. Find something you feel passionate about. Work with it. Blog about it. Contribute to it. Produce demos and tutorials about it. Become a subject matter expert in it. **Be able to demonstrate these things to a potential hiring manager**. If it's not something you're already working with, do it in your spare time. Basically, become the evangelist you want to be. The job will find you.
I figured I would benchmark this, but when you do Max(wordGroup =&gt; wordGroup.Key), you get that there is a group with words of a certain length, you don't get the group actually..
What does the 's' stand for?
In short, easiest way to do this (not including what you do if you have multiple words of the same length) var longestWord = input.Split(" ").OrderByDescending(s =&gt; s.Length).First(); 
Do you have a quick \(supersimple!\) example I can go with? Article, etc?
 var tab = Array.ConvertAll(args, int.Parse); A more verbose approach that would mirror the C code would look like var tab = new int[args.Length]; for (var i = 0; i &lt; args.Length; i++) { tab[i] = int.Parse(args[i]); } You could rephrase that as a while loop, but I don't really know why you would. u/whocouldwinaportal has a solution that probably is less trouble, though I might recommend ToList() over ToArray(), at least in the general case.
Thanks, totally missed that. I updated the answer to use .Aggregate() instead of .Max() to return the actual group's words instead of the group length. My guess is doing an order on the words array would take longer since you're performing more comparisons instead of just grouping the results and comparing the group keys. Seems like a tradeoff of cpu vs RAM when dealing with large word arrays. Interested in what a benchmark would produce though.
It's a mouthful, but will give you a very clear of the objective. https://www.c-sharpcorner.com/article/building-entity-framework-disconnected-generic-repository/
I did this using System; public class Exercise24 { public static void Main() { Console.WriteLine("Enter a sentence: "); string input = Console.ReadLine(); string[] input1 = input.Split(' '); var longestWord = input1.OrderByDescending(s =&gt; s.Length).First(); } } But it says it doesn't recognise the "OrderByDescending" bit? 
Many Thanks!
Glad to help
I got stuck with some other stuff but I'll return a bit later with some results. If you have an alternative to my Split.OrderByDescending.First, let me know :)
So lets forget the code for a minute. How would you solve this? Sketch it on paper. Then if you understand the problem/solution. Write code. Or use TDD and see your design evolve. Pretty neat experience.
~~Stay silent, Snicket~~ It stands for "string". input.Split() produces a list(technically it's an array) of strings. The foreach loop lets us do something with each string in that list. Another way of doing the same thing would look like this. Forgive my formatting, I'm on mobile.: int i = 0; while (i &lt; arrayName.Length) { string s = arrayName[i]; i += 1; // insert your code here } This is equivalent to the foreach loop I showed you earlier. The compiler translates it to something like this for you. 
Using visual studio? Place the text cursor on the red line under OrderByDescending and hit `Ctrl` + `.` It will give you some suggestions. In this case the OrderByDescending method requires the namespace to be included: `using System.Linq;`
You can do just .Select(int.Parse) btw
What Kildon said. I didn't mention the using System.Linq, my bad.
So I've done some benchmarking, and I have some initial interesting (but expected) results. I did 3 implementations as follows: public static string GroupByOrderByFirstFirst(string sentence) { return sentence.Split(" ") .GroupBy(s =&gt; s.Length) .OrderByDescending(s =&gt; s.Key) .First() .First(); } public static string OrderByFirst(string sentence) { return sentence.Split(" ") .OrderByDescending(s =&gt; s.Length) .First(); } public static string MaxBy(string sentence) { return sentence.Split(" ") .MaxBy(s =&gt; s.Length); } The third one is based on the library MoreLinq which has a fantastic method just for what we want. Benchmarking these methods with BenchmarkDotNet with the input: "this is a test sentence that should return the fifth word", we get the following: BenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134 Intel Core i5-6400 CPU 2.70GHz (Skylake), 1 CPU, 4 logical and 4 physical cores Frequency=2648439 Hz, Resolution=377.5809 ns, Timer=TSC .NET Core SDK=2.1.300-rc1-008673 [Host] : .NET Core 2.0.7 (CoreCLR 4.6.26328.01, CoreFX 4.6.26403.03), 64bit RyuJIT DefaultJob : .NET Core 2.0.7 (CoreCLR 4.6.26328.01, CoreFX 4.6.26403.03), 64bit RyuJIT Method | Mean | Error | StdDev | ------------- |-----------:|----------:|----------:| OrderByFirst | 1,301.2 ns | 11.538 ns | 10.792 ns | GroupByMax | 592.2 ns | 4.500 ns | 3.989 ns | MaxBy | 438.7 ns | 3.294 ns | 3.082 ns |
Interesting, thanks for sharing!
It would help to know why you’re trying to do this. For example, if you want to create a plug-in system, you can define interfaces and then use `Assembly.Load()` to dynamically load assemblies at runtime that contain classes implementing those interfaces.
Why not do it old school :) A string is a class with a build in array of chars that the class can modify in different ways. But there is no fun in that, so instead lets take out all the chars in the string class by converting it to a char array and then check all the chars :) Here is how you do it :P class Program { static void Main(string[] args) { Console.Write ("input string : "); string Inp=Console.ReadLine(); int bestCount=0; int currentCount=0; int currentIndex=0; int bestIndex=0; char[] Inp1; Inp1=Inp.ToCharArray(); for (int c=0;c&lt;Inp1.Length;c++) { Console.Write ($"{Inp1[c]}"); if (!char.IsLetter(Inp1[c])) { currentCount=0; continue; } currentCount++; if (currentCount==1) currentIndex=c; if (currentCount&gt;bestCount) { bestCount=currentCount; bestIndex=currentIndex; } } Console.Write ($"\nbest count is {bestCount}\n"); for (int c=bestIndex;c&lt;Inp1.Length;c++) { if (!char.IsLetter(Inp1[c])) break; Console.Write ($"{Inp1[c]}"); } Console.Write ("\n"); } } Since you're at Exercise24, i think you're better off not trying to take any shortcuts by trying to use LINQ or any other advanced stuff. And hey arrays are fun :)
It’s hard to know what `Class` is for, but your problem here is that buttontext is not a string buttontext.Text is. Either change the method to accept a TextBox (or whatever the real type of buttontext may be), or change its contents to handle a string.
Try out "The Art of Unit Testing" by Roy Osherove. It's quite good and explains the basics of unit testing in .Net applications. He also suggests NUnit as testing framework which I would recommend aswell. 
Thanks I will do just that. Do you know if there is much difference between the first and second editions? First is significantly cheaper :-) 
Just got on today and your solution works. Thanks a bunch for the help!!!
Thanks for the comment! I'll keep this in mind for the future, but I just got to my computer and the other comment did it for me. Thanks again for the idea!
I've only read the second edition. He makes a few comments about the changes, which is mainly about how he has changed his opinion. And these changes don't make any difference to you as a reader, so I would definitely go for the cheapest one. 
Yes you're right. You can use an address only for spams... That's what I did...
actually you would't do this in C, you would check the return value for atoi (ascii to integer as i recall) you won't use int.parse either because if the string you're trying to pass aren't an integer you will get an exception. Here is a small example you can use, i didn't bother to use methods, but you get the idea. static void Main(string[] args) { int[] myInts; bool error=false; myInts= new int[args.Length]; int myAdvanceFormula=0; if (args.Length&gt;0) { Console.WriteLine ($"number of args {args.Length}"); for (int c=0;c&lt;args.Length;c++) { int b; if (!int.TryParse(args[c] ,out b)) // do we have an int ? { error=true; break; } myInts[c]=b; } } else { Console.Write ("Not enough arguments :P \n"); System.Environment.Exit(1); } if (error) { Console.Write ("You didnt type only ints did you ??\n"); System.Environment.Exit(2); } foreach (int c in myInts) { Console.Write ($"{c} "); // display ints and calculate the sum. myAdvanceFormula+=c; } Console.Write ("\nSum of inputs are {0}\n",myAdvanceFormula); } 
Have you considered using T4 Templates?
Use visual studio, and just remove the inner windows you don't like, change the color scheme, change the font and what else you need for it to look minimal enough. Then add in Windows, when you encounter a reason for and get used to the beauty of have all that information available when debugging, building, coding, packaging, upgrading and so on
Visual Studio Code is very minimal IDE. [Just need the .NET Core SDK to run compile and run your code](https://docs.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code)
Is there any good resource out there about unit testing an asp.net mvc application ? :)
Thanks for the input I'll give it another shot then, your point about having the information for larger projects makes a lot of sense. I've read on other sites that there are third party plug ins for Visual studios that make it less finicky compared to the vanilla version, are there any you would suggest to look into?
I would recommend xUnit over NUnit. A bit different and newer, easy to get started with.
Definitely, vscode, the c# plugin and the dotnet core sdk makes for quite a nice coding environment. 
Unit testing an MVC app is not any different than testing any other app. You'll want to consider JavaScript tests as well e.g. with Mocha,but that's a separate issue. 
https://10minutemail.com
What's falling down for you? I am looking to start heading that way this week.
Not everyone believes in unit testing and TDD
In principle you could load the assembly produced by the compiler, reflect over it, and then use \`System.Reflection.Emit\` to modify the methods. You can then save the results using \`AssemblyBuilder.Save\`. That said, this seems like an incredibly bad idea in 99.9&amp;#37; of use cases. What are you trying to do, exactly?
Which part of EF sucks the most? I payed with it only a bit so no strong opinion. Just curious.
MonoDevelop is pretty much dead since Microsoft bought it. I'm still on 5.10.3 because 6 was slow/unstable and the syntax highlighting has been crippled in 7.
There is a dev kit for switch for the unity engine but you need to get approval from Nintendo at the moment and need a prototype etc. I know because I asked Nintendo. This may open up to the general public in the future, like the NDS and WiiU.
Not .NET Core 2.\*
I'm not a TDD zealot (I think it has its time and its place), but I'd never discourage a programmer to start unit testing. I've caught a number of bugs--in production code--while adding unit tests to projects that were shipped without them. Those same projects used to go untouched because everyone was afraid they'd break something core. Now, we release continually. Unit tests I've added for those releases have caught oversights, edge cases, and just bad implementations. I'm not saying unit testing is the end-all (and there are circumstances where I avoid it), but all decent programmers need to write tests. I was arrogant once (some would say I still am), but I've been bitten enough times to appreciate good tests.
Well, you got any recommendations for a C# IDE for Linux that would be any better? 
I want to do two things. The first one is custom obfuscation, but I want to do it at AST level instead of MSIL/Metadata level. The second one is method generation based on some XML templates.
https://www.jetbrains.com/rider/ I even gave up visual studio on windows because of rider.
Jetbrains Rider (paid though) Vim with omnisharp
The evangelist and SDE roles are pretty different in reality. If you are looking for a hybrid them PM in a relatively technical/developer product may be a good fit as the PMs often have 'evangelist' style duties in addition to shipping.
[AvalonStudio](https://github.com/VitalElement/AvalonStudio) is a thing but it's not ready for prime-time yet.
Any opinions about this book?
It looks good. Is it currently better than MonoDevelop, even though it's not exactly ready?
+1 for VS Code, it doesn't hold a candle to full blown visual studio, but it's your best option
Do any of these make graphical user interfaces on Linux?
Thanks, you read my mind.
I'm confused as hell with the code above.
The application itself is undergoing heavy development while the framework is in beta. This said, you could use the [Avalonia framework on its own](https://www.youtube.com/watch?v=rho26Ik30D4) to develop a cross platform app in VS.
Rider and Vscode
I prefer Practical Test Driven Development in C# 7 and xUnit. Both are a lot newer and xUnit is pretty nice. Also the .NET Core team's unit tests use xUnit I believe.
Practical Test Driven Development Using C# 7 is pretty new and covers testing MVC apps. What I've went through is pretty nice.
Oh nice. I have VS Code. I didn't know it does that.
You should believe in testing your code. That's part of being a professional in our field. You don't have to do TDD, but if you're not doing automated tests in your code when someone else is paying your salary, you're almost stealing from them.
It's strange that MonoDevelop went from Linux to Apple. I'm going to give this a try. 
Maybe that's true but its a skill I don't have, and one I can see being quiet useful. For example changing a data access layer in a web app could benefit from testing, especially if you haven't seen it before and have to change it extensively, having tests to hand to run against the code to ensure its behaving correctly afterwards just makes a lot of sense. 
I got to this answer. namespace ConsoleApp24 { class Program { static void Main() { string largest = ""; string input = "write a c# sharp program to display the following pattern using the alphabet"; string[] array = input.Split(' '); for (int i = 0; i &lt; array.Length; i++) { if (array[i].Length &gt; largest.Length) { largest = array[i]; } } Console.WriteLine("Largest sentence is: " + largest); } } } This is a bit more simpler but the for loop is getting to me and whats the string largest for? I tried debugging but i'm still confused. 
Ooh, you mean a preview window to see what the UI is going to look like? I thought you meant which of those 3 had a GUI, my bad. Only Rider has that as far as I know.
The current version, Visual Studio 2017, is very good in its vanilla version, and the installer makes it easy to only install the parts you need. I would start with that, follow the advice of stripping down the open windows to what you need, and then consider plugins only after you identify what you really need.
If it’s not .NET Core 2, as another commenter stated, avoid it.
Since you mentioned .NET framework apps, what kind of app are we talking about here? For .NET Core 2.0 apps, all you need to do is write a Docker file and you're good to go. I think VS even has some integration for it. If you run multiple services, I recommend checking out Docker Compose. If you need scaling, backup or multiple environments, you should check out Docker Swarm or Kubernetes. I don't think one can provide a generic yes/no answer, as it is still new technology and it won't fit every possible use case or some use cases require more effort than others. It's also a bigger topic, while it's easy to get a docker image ready and running, it takes a lot more to fully understand and properly implement a service.
Chiming in with support for Rider here, first game the Jetbrains IDE a try when colleagues at my old games job reccomended I try IntelliJ. I loved it and ended up getting the Suite, I use IntelliJ Idea, Rider and Clion at home, IntelliJ and (currently in) PyCharm at work and will be using Webstore in my new job next month. I know I sound like a walking billboard for them right now, I ended up ditching the Eclipse, MonoDevelop and VS community IDEs for it, it costs, but for me, the feature set, incremental discounts over 3 years (sadly limited to 2 drops) and perpetual fall-back license were enough to sweeten the whole appearance of SaaS model. (I f***ing DESPISE the SaaS model that Unity, Microsoft and Autodesk are pushing in their products!) 
This works for small data but it's very inefficient. Instead of Split I would loop through original string looking for space and just keep index of the beginning of current string, last longest string and that longest string length. 
"string largest = ""; is simply setting the string to empty. largest is then length 0, So the very first string it finds will be bigger and it will set largest to the new string.
for loop has 3 parts: * The indexer variable `int i = 0`. * Loop condition that is checked every step `i &lt; array.Length` * And the increment `i++` shorthand for `i = i + 1`. So, for every word compare if the current word length is bigger than the largest word till now. If the current word has a larger length than our stored `largest` word then we store the current word as our new `largest` word. We do this until we have looped through all the words `i &lt; array.Length`. The loop ends when `i &lt; array.Length` evaluates to `false`.
The string largest is to hold the string with the biggest length from the string array named array, witch is created from the split function (input.split (' '). you should note that the example breaks if you use numbers, special chars like !#"' etc etc So if input = "123 hi he ho" it will return 123, because the string "123" has the largest length.
the loop is to go trough the string array 1 element at the time. then compare the length of the 2 strings, largest, and the one from the string array.
Not really, Miguel has expressed quite clearly back in 2012, how disappointed he was with the Linux desktop efforts. [What Killed the Linux Desktop](http://tirania.org/blog/archive/2012/Aug-29.html)
As he mentioned ".NET framework" and also "Windows Container" I'd say he's talking about applications using the .NET Framework.
What is the purpose of the indexer variable?
It's just a place to easily create a variable that can keep track of how many steps the loop has gone through. You can also declare it outside the `for ()` line if you really wanted to but it's not recommended because variables declared outside of the for loop block (between the `{` and `}`) can be accessed after the loop and it muddies the intent of your code.
2 days, 2 posts about the same thing. Finding longest word in a sentence
&gt; like they’re meant to be used Unfortunately this is incorrect and it pretty much invalidates the rest of your logic. In fact, to use something purely as a template, interfaces are a much better option. Abstract classes are just classes that you don't want instantiated, because e.g. they don't contain the whole logic required to perform some task; otherwise, they perform like any other type in your class inheritance structure. In fact, `abstract class A{...} class B : A{...} A a = new B():` is pretty much the inheritance 101, not really a tricky question (though I appreciate why you might have considered this to be a curveball, without understanding abstract classes).
Yeah you can use variables with abstract types, same as interfaces, you can't new them up though, the compiler will complain. Also remember polymorphism.
This is one of the basics of Object Oriented Programming. I’m sure this is covered in the book. On a side note, knowing your OOP concepts is very important, it’s usually the first thing you’ll be asked about in an interview if you’re aiming to be a SWE. 
Is this supposed to be hard for a beginner or am I just retarded?
What encoding does it find on your problem file? 
Just a nitpick point here, you may want to use abstract classes instead of interfaces if you also wanted some **behavior** \(implemented at abstract class layer\) to come along for the ride. Forcing the inheriting class to implement all behavior is where interfaces would be better.
UTF\-8 \(With BOM i think\) 
The reason for this is so you can pass an instance of B into a method that only cares about the base implementation, but doesn't care what specific subclass of A you're dealing with. This means you can pass in an instance of B into a method like void foo \(A argument\) {...} \-\- and you can also pass in an instance of C or D or E \(provided C/D/E implement the A abstract base class.
 they don’t contain the whole logic required to perform a task; But this pretty much invalidates the rest of your logic, no? Why would you ever want to create an object out of a class that doesn’t “contain the whole logic required for a task”. I understand it’s possible, but it seems like pretty poor design if you start using abstract classes to store data. What if in the middle of developing an app you decide this object also needs to do method C, but the other classes that inherit from the abstract class don’t need C. If you’ve been using an abstract class u’d have to rearrange the code, when you could’ve just been using a normal class that inherited the abstract class from the start, and had no problems. Also, it could get pretty confusing if for example, a colleague see’s you’re using class A to store a certain set of data, but then can’t create a new object of class A when they need to store the same data. Wouldn’t the most straight forward approach to be to create a separate class that inherits from the abstract class, and use that? So my question now is, what benefits does using an abstract class over a normal class have for storing data, apart from the time you might save by not having to create another normal class that inherits that abstract class? 
Sure, might be my understanding of the term "template" - I would assume a "template" has no logic, hence an interface would be better. If you consider a "template" to include behaviour, abstract class is an option (extension methods might also apply). Also, a counter-nitpick (/jk) - this will soon change with interfaces getting implementations in C# 8.
&gt; Why would you ever want to create an object out of a class that doesn’t “contain the whole logic required for a task”. You can't, that's the point of abstract. You often know a lot of stuff will be common among all different versions, so you place those in an abstract class. The specific parts are implemented in the derived classes. This saves those derived classes to all having to implement the common stuff again and again. &gt; What if in the middle of developing an app you decide this object also needs to do method C, but the other classes that inherit from the abstract class don’t need C. Either don't have C in the base class, or just.. ignore the presence of the method from the deriving class.
Hi. I have decided to make a blog containing my \(personal\) most interesting projects which I want to set public. I upload when I'm done with a project. Feel free to have a look: [C# Software Blog](https://csharpsoftwareza.blogspot.com/)
1.1 it was significantly slow. Obviously it's still slower - but mostly you're still down in microseconds of performance difference. That said, repeatedly enumerating your entire appdomain is probably not a great idea ;) Matt Warren has an excellent post on performance and reflection here - http://mattwarren.org/2016/12/14/Why-is-Reflection-slow/ with real numbers for reference.
Isn't it Xamarin Studio now?
Having to just ignore new methods and attributes popping up on random objects because you needed them on your ‘C’ object is just bad planning/design though. Cmon you gotta agree on that. Just implement a new class at the beginning of a project that inherits from the abstract class, even if you never end up having to add any new attributes/methods I still feel like that’s a better choice than using the actual abstract class to store data. I updated the post with a better(?) explanation of why I thought the code snippet was strange. 
So, his problem with Linux, is that it's Linux. The problems he pointed out, don't seem like problems at all to me. Well, I guess C# will just get better on Linux without him. 
Thanks, going to read now.
haha yeah, that's what I meant. I was afraid that maybe that is what you thought I meant, because I wasn't seeing what I meant in VS Code.
It shouldn't be too difficult for anyone, who had the basic principles explained to him. If you tried to understand it without any \(or very little\) help, it can be very difficult, depending on your current knowledge.
The file isn't in UTF-8 BOM, as UTF-8 uses two bytes to represent character values so 0x9b, 0x91, or 0x86 by themselves are not valid UTF-8 Characters. In fact, the Zebra Printer control language doesn't even support UTF-8. Those 3 characters correspond to the Zebra Code Page 850 - Latin Character Set, which you can find in more detail [here](https://www.zebra.com/content/dam/zebra/manuals/printers/common/zpl-zbi2-pm-en.pdf) on page 1319.
Programming is hard and in most cases is a new way of thinking about problems. We all struggled and we all continue to struggle even as professionals. In case all these explanations were diving too deep, here's the eli5: * A loop performs a set of actions over and over until a condition is met. * The variable **int i** is used to keep track of how many times the loop has happened. * If you're working on a list like the one called array in this example, then the variable i is a neat way to access each item in the list one by one by doing array[i] to access the item at i position. * **i++** means increase i by one every time the the loop completes. So if it starts at 0, once the loop completes once, i will be equal to 1. Next time the loop runs, it will check the length of array[1], then it will do array[2] and so on. * **i &lt; array.Length** is the condition for when the loop should stop. It can be interpreted as saying "Do this loop while this condition is true". In this example, it means keep going until you get to the last item in the list (called array). To summarize: a for loop let's you do a set of actions over and over while a condition is met (i &lt; array[i].Length). It conveniently lets you set what to change after each loop completes (i++). It also gives you access to i within the loop so you can access each item in a list at the i position. Let me know if you have any other questions.
Ironically testing a data acess layer is a pain in the arse. There is much better low hanging fruit with unit tests.
Could be. I'm a little confused now. But, it's still not on Linux.
[Apparently the preview window in Rider is only for XAML / WPF.](https://blog.jetbrains.com/dotnet/2018/03/29/xaml-preview-tool-window-wpf-rider/) Unfortunately WPF is currently Window only, so I guess Rider isn't what you're looking for. If you really want to develop with C# you might consider running a virtual machine.
&gt; we are studying MVC 5, which I didn't like at all, I feel like it's already outdated now with introducing to .Net core 2.1 You'd be amazed, there are probably still .NET 1.1 apps out there that need ported. We have plenty of traditional Web Forms applications still running. The Lifespan of the average "system" at a company is ~ 10 years. Old stuff that "works"; usually sticks around. It costs money to replace.
So, I have tried to port a monolith .net framework app into containers per service recently. It was not a pleasant experience. Main issue I was running into was the windows docker layering bug which is a blocker on any large windows images, I have tried varying build memory and default storage size, but it didn't help. There is also the bug with windows containers where the system time in the container gets out of sync with the host, which can cause a multitude of other issues. My approach was to make a image that would build the monolith app, then make images that use that in a multistage build and copy services that can be isolated into their own images. Then referencing those images inside a compose file, with the appropriate links to each service being provided. If you can use Linux containers, use Linux containers, even if you need to port some stuff first. They cause a lot less headache.
Thank you for clarifying that. But I still fail to see, how I can make changes to a .zpl file and then print it, without losing any of the Latin characters. When as soon as I read the text file, the text gets messed up and the printer can't recognize any of the Latin characters. 
If you worked for me and put all of your logic into a controller; I'd be furious with you. The controller is just there to pass data between model and view. If you put all of that logic in the controller you can't (easily) use it somewhere else in the application. It does get a bit sticky; you have to differentiate between application logic and "business"/domain logic. In general the controller (speaking about web stuff) is just doing things that a web application needs to function with the domain logic/model data. https://softwareengineering.stackexchange.com/questions/176639/why-put-the-business-logic-in-the-model-what-happens-when-i-have-multiple-types
I disagree with most of the thread on another reply here; Forget what happens if you go to an ecosystem that has multiple applications. Instead think about it just from the application itself. If all of your logic is in the controller; it is hard to use it somewhere ELSE in the application. So as soon as you need to do the same thing to an object in multiple places (and you will; complex models / objects are too common to consider the "simple" case that most demos take on) -- if your "save" logic is in the controller you have a problem. You either call the controller method (ew) or you copy and paste (ew). If your ".Save()" method, whatever that looks like, is in the model -- you can just call it. I subscribe to the [MVC concept of skinny controllers and fat models](https://softwareengineering.stackexchange.com/questions/165444/where-to-put-business-logic-in-mvc-design/165446#165446).
You're not retarded. For me programming is ali about breaking something complex into smaller steps. You'll have to understand each line of code, avoid rushing through the code. Take tour time, use google for help and it will start making sense at some point. Programming is hard sometimes but with some initial effort it will become challenging and fun.
Basically, you can't read the file like you have, you have to use Streams and read it as binary and then convert it back and forth. See pastebin [here](https://pastebin.com/5zQFfYg8) which correctly reads in the file and the outputs again, and it will show up the same in Notepad++.
VSCode + plugin isn't bad
I didn't fully read the comments and just started looking for the bug. Spent too much time doing that.
THANK YOU! :\) I've been struggling with this for days. Now I just need to rewrite a whole bunch code. And I just tested your code, just to see if I could make any changes to the text, and it worked flawlessly :\)
&gt; Why would you ever want to create an object out of a class that doesn’t “contain the whole logic required for a task”. Your new to OOP, right? You're creating an object hierarchy, from most generic to most specific. At some point in your design (and I'm not claiming that's the only possible approach), your objects might become too generic to have a real-life application. Welcome to planet abstract. :)
"Xamarin Studio" has been canceled a year ago. You can read more about it here: https://developer.xamarin.com/releases/studio/xamarin.studio_6.3/xamarin.studio_6.3/ It was based on MonoDevelop.
You really seem to have difficulty grasping the concepts and differences between "class", "object" and "type". Abstract class is just an incomplete blueprint, as opposed to a regular class. That is why you can't instantiate abstract class, this blueprint needs to be finished later. Object is a finished thing, and that can be created only from complete blueprint. Type is the way we look at an already created object. Imagine you have an abstract class File, and a regular class Executable File. You implement method for reading file size in the abstract class, after all, it is the same for every file. This saves a lot of writing and can be used anywhere. But what happens when you double click a File? You don't know, but you know what happens when you double click Executable File, or Image File. So you have an abstract method DoubleClick\(\) in abstract class File, and implement it in subclasses. Now, when you create an Image File, you asign it to a variable of some type. The type is what you want to see \- You can say "Hey, this is a File." or you can say "Hey, this is an Executable File." Then in your own FileManager program, you have a part where you create objects like Image File or Executable File. But in another part, which displays file info, you get those same objects, but you look at them as Files, because that part does not care about their double click behavior, only about their file size. This makes it easy to add a new supported file type later without breaking the part which displays their info \- you don't have to change anything there!
I don’t think you quite understand what I’m getting at. An abstract class has the limitation of not being able to be instantiated as an object. By creating a new class, inheriting the abstract class, then instantiating an object of that new class and storing it in an abstract class, you may as well just be allowed to an instantiate object of the abstract class. That’s my whole dilemma with the fact that abstracted classes can be used as objects.
&gt; you may as well just be allowed to an instantiate object of the abstract class. No, please read up on abstract members on an abstract class and I'll happily resume this discussion.
On your edit: I feel you're missing the point that the abstract class can combine both the common functionality (which is why it's a parent class in the first place) and some contract for the derived classes to follow (similar to interfaces, though interfaces (as of now, i.e. before C# 8) can't provide common functionality outside extension methods). Why would you ever have a member/variable/parameter of an abstract class? For the same reason you would want a member/variable/parameter of an interface - you're not interested in a specific implementation, only that the objects exposes some API to you (and the specific, non-abstract classes provides the functionality). It's really pretty similar to interfaces and the choice of your poison (i.e. abstract class vs interface) is not obvious in all cases (and often is based on preference). And hopefully you understand the need for interfaces themselves - if not, please read up on SOLID patterns (and in C#'s specific case you can in a lot of cases replace interface with abstract class).
&gt; Using get set like this really doesnt serve its purpose right? What you wrote is syntactically incorrect. But I'll answer the spirit of what you were asking: You're right; but there's more to it. Having a property that literally just gets/sets a private field is pointless as far as encapsulation goes, yes (also there's a shorthand in C# for that: `public string Name { get; set; }`, but that's besides the point). In reality though, creating properties rather than fields even when the properties do nothing more than get/set the field value allows us to change the get/set logic later on without breaking the public interface of the class. For example, if later on I wanted to enforce that `name` can never be `null`, I can add that check to the setter and users of my class will see no difference to the interface of my class: `Name` was a property before, and it's a property now (whereas if it was a field, I'd have to change it from a field to a property). This becomes more important when you're maintaining a public lib that other developers use. On the flipside, a lot of people think that just writing properties instead of fields everywhere means they're encapsulating property; where that is not the case at all. Private state of your class is separate to the public interface. Sometimes they're the same, but just spamming `{ get; set; }` on the end of every field is not a good practice. Also, I personally think people strongly overstate the need for only ever using public properties. The main reason given is that you can't change a field to a property without requiring downstream users of your lib to recompile. But I've never actually been in the situation where I update a library but don't recompile my code. Perhaps it's just me. Nonetheless, using properties instead of fields just 'feels' right and so you should probably do it. Fields should only be for actual state, and actual state should never be public/exposed.
No, that's fair. I guess here we have an "aims dispute". I feel if you're going to learn MVC, you'll be looking at barebones applications. If we're discussing enterprise applications then hooo boy you're so very correct. Chicken &amp; The Egg. I'd want a developer to be familiar with MVC before writing an enterprise-level application. I feel if you were to start anywhere, you'd start at Model-View-Controller set up only. From there you'd look at a DAL, a series of injectable business logic libraries, and perhaps some ViewModels. Any developer looking to get into MVC should probably be aware of both patterns. Learning versus deploying I suppose.
This makes sense. Thanks for a good explaination :) 
It's not the same because in your second example there is no way of setting `name` outside of your class. This makes the name attribute read\-only from the outside world. If you also define the set, you are also able to update the name variable from another class. Think of it as permissions. If you add a `get` method, then you can read the attribute from another class If you add a `set` method, then you can update the attribute from another class You can use either or both. As for this statement, "Isnt using get and set all about controlling the output?", no not at all. These are attributes, you use them read or write information related to that object. Some of them can be public such as `username` or `gender` while others could be private such as `password` or `age`
*1. Hidden fields, not very secure *2. Good good documentation *3. Input and Output Models - cleanest solution
Your second snippet is invalid code. A property is a pair of methods behind the scenes. One of which gets the value of the underlying field, the other sets it. The language simply wraps it into something nicer. The first snippet can be written as follows as well: public string Name { get; set; } You typically add a body to the getter and setter if you need some logic to them, like so (not a great example): public int MyNumber { get { return this._num * 2; } set { this._num = value / 2; } } private int _num; You can also have a property without a getter or a setter. Or one public and the other private. Even if your second snippet was valid, it returns the value of the underlying field, rather than reference to it, so you wouldn't be able to do much of anything with it.
* 1. Hidden fields, not very secure * 2. Good good documentation * 3. Input and Output Models - cleanest solution
Yes, there is no point in using a public property that just directly gets and sets a private value. The only exception is keeping binary compatibility, but that's irrelevant 99% of the time. 
I agree - but that's not what OP is asking at all. OP is clearly trying to learn the absolute basics, and this answer does not help further his understanding one little bit.
I don't consider property getters/setters to be methods. I mean they can call methods, but I just never look at them that way.
Getters and setters are syntactic sugar for Name_get() { return this.name; } and Name_set(value) { this.name = value; } You should use them because it allows you to change the backing field while staying source compatible with interfacing code. If that is to verbose to you, you can use so called Auto Properties since C# 6: public class Stuff { public string Name {get;set;} } which will generate an anonymous backing field as well as the get and set code for you.
You're right that it's not required, but using it allows you to add additional functionality to occur when you "get" or "set" a value. 
&gt; These are attributes No, they're not. They're properties.
A small question: Is there a way to find the correct encoding ? \(Like the 850 in your code example\) The program I'm writing needs to be able to handle a few languages. \(Danish, English, and I think Russian, maybe a few more later on\) 
They *are* methods, they just have a custom syntax. They also came from Java's `getXYZ()` and `setXYZ()` convention, which are definitely methods.
Thanks! Where can I read more on Input/Output models? Their usage is not immediately obvious to me, because e.g. in Razor there is just one `@model` annotation, so it seems like it doesn't work well with two different types of models out-of-the-box.
&gt; So my question now is, what benefits does using an abstract class over a normal class have for storing data, apart from the time you might save by not having to create another normal class that inherits that abstract class? There have been lots of answers, but none of them have given actual code samples that show why we need this. So, here goes: abstract class A { public void X() {} public abstract void Y(); } class B : A { public override void Y() {} } class C : A { public override void Y() {} } class Test { public void Main() { List&lt;A&gt; objects = new List&lt;A&gt;(); // Note that you can add any class to this list, so long as it inherits from A A.Add(new B()); A.Add(new C()); foreach (A a in objects) // Declare a variable, a, of type A { a.Y(); // Call the appropriate implementation of Y() } } }
That seems to be in line with how I've viewed the MVP, MVVM and MVC architectural patterns. The "middle man" of each of those patterns (presenter, view model, controller) is nearly always tied to the UI framework being used. In other words, you won't be able to use a controller from a webapp in a winforms app without doing some hacky shit. The model, however, can be a consistently reusable piece, especially if you consider the model to be a "business model" or "service model" and not simply a container full of data (like a DTO). Even if it is a presentation model (which means it is limely coupled to the UI framework just like the middle man), your middle man can still be injected with services in order to retrieve data or perform other business-related operations. Those services are most certainly reusable in other apps. To summarize, I feel as though I should be able to take the **M**odel and/or services from any app (winforms MVP, wpf MVVM, webapp MVC) and use it in another app that uses an entirely different UI framework. For example, if this was done "right", I should be able to "convert" my desktop winforms MVP app into an MVC5 webapp simply by setting up the views and controllers to use the relevant models (obviously other work would still need to be done like how auth is handled, IIS/other hosting considerations, etc). If we couple our controllers with business and/or data access logic, we end up re-writing such stuff in other applications and makes it more difficult to maintain. It doesn't follow the Single-Responsibility principle (nor the spirit of the interface segregation principle) and changes to the requirements of the business model or data access layer will likely require extensive changes in many apps as a result. These best practices have been validated in my own experience at work since making a single change to an EF entity requires several of our webapps to be updated (instead of just the DAL) since our presentation, business and DAL are all tightly coupled in the controllers.
It isn't being "stored in the abstract class". The object is an object of type B. It can be used as an A, since B is a subclass of A, but that doesn't affect the object itself. It just means that when used as an A, it can only be used in ways defined for A. It is still a B, and if anything in B overrides something in A, it is the B version that will happen. Have a look at [this example](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties) and see the output generated when the array of the abstract Shape class is iterated and each of its element's ToString() method is called.
A field is a variable that is accessed directly, a property is a value that is accessed through getters and setters (The value may not be explicitly stored at a particular location, but may be an aggregate of other values). public class foo{ int myField; int myProp{get;set;} String Title ="Dr."; String FName="Awk" String LName="ward" //Aggragate property public String FullName{get{return $"{Title} {FName} {LName}";}} } The advantages a property can provide is value validation public class foo{ private int _age; int age{ get {return _age;} set{if (_age&lt;0) throw new exception "Invalid age"; _age=value;} } Another advantage is databinding, or even triggers on value changes public class foo { private int _age; set {if (value == _age) return; _age=value; OnAgeChanged(this, _age);} get {return _age;} } Security public class foo { private int _age; int age {get {if (!user.hasReadPermission) then throw new exception("Invalid user"); return _age;} set{if (!user.hasWritePermission) then throw new exception("Invalid user");} } But, Overall... the original reason they were created... and the non-property behavior that they were designed to make easier is separating object state from object interaction. The Idea (is/was) that the state of an object should be entirely controlled by the object it's self. I.E, the only class that should be allowed to modify the state of the class is the class it's self. and to that purpose, instead of having a variable available for any other class to modify... there should be a function that all other classes call to request a modification of the class. This allows the class to have much better control over what is a valid state for a given variable and what is not. It will make sure that ALL Access to those values pass through that specific function which makes it much easier to track down where that value is used. 
If you find yourself in such a situation, don't use inheritance. It is not a hammer. Don't use it for everything. Use it only when you need basic functionality across multiple classes combined into a single space, and *all* of that functionality is required (and always will be required) across child objects. https://en.wikipedia.org/wiki/Liskov_substitution_principle
Ok, I think I understand. So you would store an object as an abstract class Type when you knew you only wanted to use the API shared between the abstract class and the derived class. Which explains why you shouldn’t (can’t) instantiate an object of an abstract class, since they aren’t meant to provide functionality, and the objects you do store in abstract class types are complete objects, where you want to use their specific functionality. (And don’t want objects without that functionality to be able to be stored there). Uhh does that make sense? I guess I just didn’t really see the use cases for needing just the abstract classes functionality, and how using an abstract class instead of a normal class derived from the abstract class had no disadvantages (and can be advantageous), which in hindsight is a bit naive. Cheers. 
Not really, not automatically and without context. There are some common signs of multibyte encodings that one can look for (that's what the code you found does), but even those are just guesses that can go wrong. For single byte encodings like those used by that printer, there is no deterministic way to tell them apart. They assign different meanings to the same bytes and you need to know the meaning to interpret them. The best you could do is try to guess baseon character combinations common in certain languages. There are some tools that do this, but I don't know any that support these ancient DOS encodings. If you have a large enough sample set of files containing known languages/encodings, you could try to build your own. Do you actually *need* to decode the file correctly, i.e. do you have to display the text? If you're just doing a replacement of a few ASCII chars and want to leave everything the same, correctly decoding the foreign language characters doesn't actually matter as long as they are unchanged in the resulting file.
There are some practical reasons to prefer a property over a field for publicly exposing internal object state, mainly because autoproperties don't incur (much) overhead in performance or code, and offer advantages for future-proofing and abstraction. The latter are just not a big deal in 90+% of situations, but it's difficult to predict when your code falls into the remaining &lt;=10% *and* the cost is, in most systems, too minuscule to make the decision worth thinking about. So, in this case, you'd usually just write public string Name { get; set; } and roll from there unless or until you run into a situation where the overhead of the property creates a *quantifiable* problem that outweighs its benefits.
The ModelBinder doenst really care for classes, its working with a naming convention, so input field name = property name from the class //Example Model - Output public class IndexModelOutput { public int CostumerId {get;set;} public int CrmId {get;set;} public bool Payed {get;set;} public List&lt;Order&gt; Orders {get;set;} } //Example Get - Orders is in this case view only [HttpGet] public ActionResult Index(){ return View(new IndexModelOutput() {/*Setting many properties*/}); } //Example Model - Output public class IndexModelInput { public int CostumerId {get;set;} public int CrmId {get;set;} public bool Payed {get;set;} } [HttpPost] public ActionResult Index(IndexModelInput model) { .... }
&gt; Uhh does that make sense? Yes! :) &gt; which in hindsight is a bit naive Hindsight tends to be 20/20, we've all been there. Cheers!
Wish I could upvote this more. Thanks for an actual use case.
What I’ve done in the past is pretty similar to what you’ve just said, where I purposefully do not render certain fields, so they would be assigned default values on the POST action of the controller. You seem concerned that other developers may try to use the values without realizing they’ve been included in the form. While I understand the concern, and myself do not like using models that contain more fields than have meaning, it only takes a basic level of understanding for any developer to put two and two together and realize that the value he wants is not being included on the form, where he can go add it if he desires (or acquire it by other means). Remember that even if you _had_ included the fields, the developer would have to make sure you did anyway. Either way, in other words, another developer would need to ensure that the data he needs is being populated and fix it if it isn’t. Something that I feel is helpful in this case is to use all nullable types on your model. In my opinion, it is way easier to spot missing fields if the DateTimes and Ints show up as null instead of the default values for datetime and int. Usually allowing nulls to propagate where null isn’t expected will lead to runtime exceptions if they are used where a value is expected, which is good in this case, because it’ll make it more obvious to other devs that something is missing. 
My bad, i meant properties
&gt;turns out they just can’t be instantiated, but using them as a type is fine? This still feels like a bad approach to me. It is not a bad approach. It is leveraging polymorphism. Think of it like this... I could create an abstract 'Animal' class and assign some general 'animal' functionality to them... then I could create a Dog Concrete class inheriting from Animal, and I could create a Cat Concrete class inheriting from Animal... I could then create functionality that works with 'Animals', and since both dogs and cats are animals that functionality would work for instances of Dog Objects and Cat Objects... 
So this turned out to be some sort of access issue. If i try to the process as myself i get the error but if I run with a specific admin user on our VM it works as expected. 
It was, but not anymore. And that was the name for Mac only too, I believe.
You can also pass an `Encoding` to a `StreamReader` like in the OP. You just have to make sure you specify `detectEncodingFromByteOrderMarks: false` so that it doesn't mess with the BOM.
Yeah; It isn't a religious war to me (I am more of the mind of programming motherfucker). There are 100 different ways to name these things; MVC and derivatives are all just variants of n-tier architecture that try to define the tiers. In my eyes; if that is what "MVC" means, it is pretty much pointless beyond a teaching tool; which I think might be what you are getting at anyway. So I think we agree there. I tend to look at this 'flow' as kind of a base and then you modify as needed: Datastore =&gt; Model =&gt; "Logic" =&gt; ViewModel =&gt; Controller =&gt; View In this situation; Model is just a bunch of POCOs. Logic is a bit of a weird thing; since that encompasses things like data access , Business rules, etc. It gets pretty unweildly pretty fast. Still should focus on manipulating model objects. View Model is more closely linked to what shows up on a "screen" to a user; it is the complex object. An Order viewmodel might be made up of a header, collection of lines, billing/shipping address, requester, etc. where each of those is a model object. Controller goes and gets whatever viewmodel is expected to be show in in the view. So I think we are on the same page.
Right. I gotcha
This will compile src into a dll. var parameters = new CompilerParameters(AppDomain.CurrentDomain.GetAssemblies().ToList&lt;Assembly&gt;().Select(a =&gt; GetFile(a)).ToArray(), "foo.exe", true); AppDomainSetup domainSetup = new AppDomainSetup(); domainSetup.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory; AppDomain domain = AppDomain.CreateDomain("SomeDomain", null, domainSetup); ICodeCompiler compiler = new CSharpCodeProvider().CreateCompiler(); parameters.GenerateInMemory = true; parameters.OutputAssembly = "SomeDomain.dll"; parameters.IncludeDebugInformation = false; CompilerResults results = compiler.CompileAssemblyFromSource(parameters, src); if (results.Errors.HasErrors) { foreach (var v in results.Errors) Configuration.output.Log(v.ToString()); return null; } This will load an assembly public static Assembly LoadAssembly(string name) { if (_activeAssemblies.ContainsKey(name)) return _activeAssemblies[name]; if (name.Length &lt;= 0) return null; string assemblyFileName = name; if (Path.GetExtension(assemblyFileName).Length &lt;= 0) assemblyFileName += ".dll"; else name = name.Substring(0, assemblyFileName.Length - Path.GetExtension(assemblyFileName).Length); if (!Path.IsPathRooted(assemblyFileName) &amp;&amp; !assemblyFileName.StartsWith("Plugins/")) { assemblyFileName = "Plugins/" + assemblyFileName; } if (_activeAssemblies.ContainsKey(name)) { /*Console.WriteLine("Assembly " + name + " was already loaded");*/ return _activeAssemblies[name]; } //if (!File.Exists(assemblyFileName)) System.Windows.Forms.MessageBox.Show("Assembly file: " + assemblyFileName + " does not exist"); Assembly a = null; try { a = Assembly.LoadFrom(assemblyFileName); } catch (Exception e) { String s = e.Message; } if (a != null) { if (!_activeAssemblies.ContainsKey(a.GetName().Name)) _activeAssemblies.Add(a.GetName().Name, a); return a; } // System.Windows.Forms.MessageBox.Show("Unable to load " + name + " from (existing) file " + assemblyFileName); return null; } This will instantiate an object defined within an assembly /// &lt;summary&gt; /// Instantiate a class given a classname and assembly, Initialized by parameters. /// &lt;/summary&gt; /// &lt;param name="className"&gt;Class name to instantiate&lt;/param&gt; /// &lt;param name="assemblyName"&gt;Assembly class can be found in&lt;/param&gt; /// &lt;param name="parameters"&gt;Semicolon (;) deliminated list of parameters to populate properties and arguments to send to constructor.&lt;/param&gt; /// &lt;returns&gt;Object of type className&lt;/returns&gt; public static Object Instantiate(String className, String assemblyName, string parameters) { if (String.IsNullOrEmpty(className)) throw new ArgumentOutOfRangeException("className", "Must provide class name to instantiate"); if (String.IsNullOrEmpty(assemblyName)) throw new ArgumentOutOfRangeException("assemblyName", "Must provide assembly name for class to instantiate"); Assembly assem = LoadAssembly(assemblyName); if (assem == null) throw new ArgumentOutOfRangeException("assemblyName", String.Format("Provided assembly [{0}] not loaded.",assemblyName)); Type T = assem.GetType(className, false, true); if (T == null) throw new ArgumentOutOfRangeException("className", String.Format("Provided class [{0}] not found in assembly requested.",className)); //Object o = Activator.CreateInstance(T); Object o = System.Runtime.Serialization.FormatterServices.GetUninitializedObject(T); if (o == null) throw new Exception("Could not instantiate class."); Dictionary&lt;String, String&gt; parms = new Dictionary&lt;string, string&gt;(); if (!String.IsNullOrEmpty(parameters)) { foreach (String s in parameters.Split(';')) { String[] kvp = s.Split('='); parms.Add(kvp[0], kvp.Length == 2 ? kvp[1] : ""); } } String[] parr = new String[parms.Keys.Count]; parms.Keys.CopyTo(parr, 0); foreach (String s in parr) { PropertyInfo prop = T.GetProperty(s, BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.IgnoreCase); if (prop != null &amp;&amp; prop.CanWrite) { if (prop.PropertyType == typeof(String)) prop.SetValue(o, parms[s], null); else { try { if (prop.PropertyType.BaseType == typeof(Enum)) prop.SetValue(o, Enum.Parse(prop.PropertyType, parms[s], true), null); else prop.SetValue(o, Convert.ChangeType(parms[s], prop.PropertyType), null); } catch { throw new NotImplementedException(String.Format("Can not convert string {0} to type {1}", parms[s], prop.PropertyType.AssemblyQualifiedName)); } } parms.Remove(s); } } ConstructorInfo bestMatchConstructor = null; //Allows for constructors with no arguments int mostMatchedArgsCount = -1; foreach (ConstructorInfo ci in o.GetType().GetConstructors()) { int matchedArgsCount = 0; bool isMatch = true; foreach (ParameterInfo pi in ci.GetParameters()) { if (parms.ContainsKey(pi.Name)) { matchedArgsCount++; } else { isMatch = false; } } if (isMatch &amp;&amp; matchedArgsCount &gt; mostMatchedArgsCount) { if (Attribute.GetCustomAttribute(ci, typeof(isIgnoredAttribute)) == null) { bestMatchConstructor = ci; mostMatchedArgsCount = matchedArgsCount; } } } //Call the best matched constructor if (bestMatchConstructor != null) { List&lt;object&gt; args = new List&lt;object&gt;(); foreach (ParameterInfo pi in bestMatchConstructor.GetParameters()) { if (pi.ParameterType == typeof(String)) args.Add(parms[pi.Name]); else { try { if (pi.ParameterType.BaseType == typeof(Enum)) args.Add(Enum.Parse(pi.ParameterType, parms[pi.Name], true)); else args.Add(Convert.ChangeType(parms[pi.Name], pi.ParameterType)); } catch { throw new NotImplementedException(String.Format("Can not convert string {0} to type {1}", parms[pi.Name], pi.ParameterType.AssemblyQualifiedName)); } } parms.Remove(pi.Name); } bestMatchConstructor.Invoke(o, args.ToArray()); } return o; }
Can you explain how changing a field to a property can affect somebody later? If you had a public field Name, and changed it to a public property Name, whats different to somebody using it? I'm new. Maybe explain what each are and how they differ too. From my reading online it just says the difference is using the get;set; method. It doesn't explain more than that. 
Fields and properties aren't compatible at the binary level. If I have a public field and change it to a property, anybody that had code built against the version with the field would have to, at least, rebuild their code if/when they want to use my updated version. As mentioned, this is not usually an issue in practice, as changes to libraries tend to come with recompiles of the whole system, anyway. Additionally, a property cannot be used as an out or ref parameter. If they've used the field in that way, they would actually need to make changes to their code.
So if I'm getting this correctly; I use a person's API and call a field in that API. My code has been running fine as is. The API gets updated, and I update just the API in my code but not the rest, I could get an error when trying to run the program? But normally if I were to update the API, I would rebuild my code anyways? The out and ref makes a lot of sense too. Thank you!
The last question.
I'd sticky this if i could!
When accessing a field, compiler translates train.Number = 3159; to something like this: Write integer 3159 to address of instance of "train" + offset of field "Number" But when accessing a property, the same statement looks more like: Call method train.Number_set(3159); The important thing is, that this is something that compiler needs to do when building your code. If you then change the field for a property or vice versa, you get an error that "Field Number doesn't exist" or "Method Number_set(int)" doesn't exist. You can then say that it's somehow wrong that the same statement can be translated to such different code and that it should do "something" that would be insensitive to whether target is a field or a property. But then if you think about it, you'll end up with a system where *everything* behaves like a property. PS: the names and "translated code" used are just my pseudo-code. It almost certainly looks different, but that's irrelevant to my point.
You mean "Is this supposed to be easier than i'm making it out to be?" I interpret that as OP asking if loops and variable initialisation is supposed to be easier, not if this particular exercise is supposed to be easier (since he's already given what the exercise guide suggests as a model answer, so he's not looking for alternatives to the model answer). But fair enough, I can see how your answer is trying to help now. I had downvoted it as being unhelpful, but I've removed my downvote.
Well, easiest would be Split.OrderByDescending.FirstOrDefault
Thank you! I didn't realize it had to do with compiling and how the code gets translated. 
Add this method to your `Program` class: static string GetLongestWord(string input) { //we could have used LINQ's Aggregate function //but I purposefully avoided it for simplicity. var tokens = input.Split(' '); var longestWord = ""; foreach (string s in tokens) { if (s.Length &gt; longestWord.Length) { longestWord = s; } } return longestWord; } Usage: public static void Main() { Console.WriteLine("Enter sentence:"); string input = Console.ReadLine(); string longestWord = GetLongestWord(input); Console.WriteLine($"The longest word is {longestWord} with a length of {longestWord.Length}."); Console.ReadKey(true); //this keeps the console window open until user presses a key }
Hey, sorry for the delayed response! In the end I gave up on the Mapbox idea and went back to Google Maps, mainly because of the lack of support. Though I wish you all the luck I couldn't find!
Also, even if you re-compile, it's a potential breaking change. For instance: * Properties cannot be used as `ref` parameters, but fields can. * Properties cannot be declared as `volatile` but fields can. * Properties *can* be declared as { get; protected set; }, but there's no corresponding access modifier declaration for fields. * Properties can be used for data binding, but fields can't. * and more.
Touché!
A lot of people making good points, but let me take a COBTRARY view. Properties are a code smell. It's important to understand what they are - they are methods. That's it. I use them all the time myself but they are usually an indication that something is wrong. Either I have attached some side effect to setting a value so it's not really a value anymore (a good use is when getting a value has some invisible side effect like updating a cache or such ) and I should just use a method, or I really just meant to make it a field anyway. I try to design classes to have no public fields or properties at all. I especially hate hiding side effects from client code, and in client code a field and a property are indistinguishable.
More or less. If you update the DLL by just copying it into wherever your code has been deployed (replacing $version-with-field with $version-with-property), you'll probably get a runtime error the next time you try to load and run your service (or whatever it is). This is because assigning to or reading from a field is a different type of operation than calling the get or set methods that are used to implement a property. That said, you're probably going to update the library by pulling it down from Nuget, and part of your deployment process probably includes rebuilding the solution, anyway, so this isn't likely to be an issue unless you're looking at skipping some steps in a manually managed deployment of some sort. For the same reasons that properties and fields aren't binary compatible, properties aren't usable as out and ref parameters because those must be actual locations in memory, and a property getter is actually a method. (This gets a little more complicated with ref properties, but that's a newer feature *and* comes with some (slightly) different syntax, so replacing a field with a ref property is *still* binary incompatible *and* is source incompatible in most usages.)
Imagine you have a project with two libraries A and B where library A depends on B. If library B changes a public field to a public property then you can't use the new version of B without a new (recompiled) of library A.
You can shorten the code a lot by using this method: [System.IO.ReadAllText]( https://msdn.microsoft.com/de-de/library/ms143369(v=vs.110).aspx) For writing there is also a corresponding method: [WriteAllText](https://msdn.microsoft.com/de-de/library/ms143376(v=vs.110).aspx) In general the default encoding is always UTF8. But there are always overloaded methods that accept an encoding parameter if one has to deal with another encoding. @OP: You should read the famous article by [Joel Solsky](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/) And on top for a nice definition and explanations about the various terms: [UTF8 everywhere](http://utf8everywhere.org) 
Removed: Rule 7.
Thank you. This is a valuable data point and I appreciate it.
bprsnfclrrwmn 
I'm so much not looking for yes/no answers but actual production experiences (not theory) that folks are able to share. AngularBeginner got it right -- we're buiding .NET framework (not .NET core, due to a Win32 dependency) Windows apps, which is anything from an ETL program to an ASP.Net MVC app. Kubernetes/AKS currently does not support Windows containers. Docker Swarm isn't technology that we're looking to bet on for various reasons. Azure support for Windows Containers seems half-hearted from what I can gather from MS devs... most people in this space are running Linux containers so understandably it's more important to spend dev resources get that working right. (I'm a Linux person but the rest of the company is not). Server 2016 supports containers but a lot of the important container development seems to only be on the semi-channel update (1709, 1803) which is a completely separate product. (I'm hoping those will be backported to 2016) Just wanted to know what folks are doing to containerize their Windows apps and confirm my observations. The landscape doesn't look that promising and was just wondering what other folks are experiencing. 
See my reply above. Thanks.
Excellent addition of info. Thanks!!
The "in" keyword doesn't pin the object, it only passes the argument via reference (essentially a pointer on the stack) rather than value. For classes, this doesn't make much sense to do, since they're already passed by reference anyway.
Loops can be a bit tricky for a beginner to understand, but as others pointed out: if you haven't had the basic parts of a for loop explained to you before, then it's not unreasonable for you to not understand how they work. Besides that, if you're completely new to programming then it's *completely okay* to not feel like you understand something and ask for help. That doesn't make you dumb, that doesn't make you bad at programming, that makes you a newbie who's still learning and looking to get better. I mentored the son of one of my church's associate pastors last year and really learned a lot about actually teaching programming. Really had to remind myself that I was in his position once and found loops and other things to be a bit difficult to grasp. That doesn't make him bad or dumb, because I wasn't bad or dumb, I was just inexperienced.
I know, I pass the object with the **in** keyword and inside the list I pin it. But I want to check if the object is already pinned to memory.
I don't know of any way to do this within the framework. What are you actually trying to do?
I can't think of any time in the past five years I've used manual instead of auto properties. It made sense with notifying bindings that a change has occurred in the winforms days but I'm APIs and services it would seem insane to me. Then again I assume things such as the EF change tracker makes use of that method. 
Keeping a local variable reference to something does not pin it. This seems like a bad idea all around, because you need to free the GCHandles for objects added that weren't pinned when removing them from the list, so you're going to need to keep track of which ones were pinned anyway, because you DEFINITELY don't want to free GCHandles for objects that were pinned outside your collection.
There is a benchmark results at Dapper repository. Comparing dapper among other solutions include SqlDataReader and EF
If you are building a desktop based app, you could just use the WebBrowser class. You might get away with using geckosharp or something similar in console mode. For Windows Services you would need some sort of impersonation since Session 0 would cause it to default to Local System. I had to use impersonation with a Windows Service just to print, it's awful.
To be sure, Structs are never touched by GC, right? So are pinned or there is some magic behind? For what you are saying, I think I have the perfect workaround, each time an object that need to be pinned is added to the list I store the GCHandle, so I can Free the memory when not needed.
I want to store unmanaged objects references in a Custom List. The List contain an array of pointers, when I add an object to the list, a pointer to that object is create so I can retrieve and/or manipulate the original object because I have a pointer to it. Because that I need to know if the object to add is already pinned in memory otherwise the object will be allocated twice when using GCHandle.Alloc(). I don't know if I'm wrong in something.
Why do you have to store pointers instead of actual references? Regardless, you can and should allocate your own `GCHandle` if you do this, otherwise you have no control over the lifetime of the pinning. What happens if someone passes a pinned object to your list, but releases their own pin before you are done with it?
Yes, absolutely helps. The language is the language, regardless of whether things are going to a console, or WinForms \(why not WPF??\) or whatever. Up to you, but personally I think it's best practice to separate things out: * The core language * UI development * Services or whatever else I think starting with console apps is good \- you strip out a lot of the other stuff and get to focus on one thing, rather than taking on too much at once.
Structs in local variables (on the stack) won't be moved by the GC. Structs in fields of classes may be moved when the GC compacts the heap, however. This only matters if you pass those structs by reference, though.
Yes, console apps let you focus on the logic you are trying to accomplish without worrying about a UI layer. You will 100% be able to transfer knowledge from console tutorials to other types of applications.
I'm planning on reading this first: https://www.amazon.co.uk/Programming-easy-steps-Mike-McGrath-ebook/dp/B01MXXGZAJ/ref=sr_1_2?s=digital-text&amp;ie=UTF8&amp;qid=1528135544&amp;sr=1-2&amp;keywords=c%23 Is that enough to grasp the fundamentals before I move onto other templates &amp; learn from the really difficult manuals?
https://weblogs.asp.net/fbouma/net-micro-orm-fetch-benchmark-results-and-the-fine-details I don't remember his reddit tag but Franz Bouma has a pretty detailed set of benchmarks comparing several ORMs (he owns LLBLGEN). 
All that really changes is that in Winforms you get your inputs and show outputs in a different way. There isn't much different in terms of how the code works.
Why can't you use Selenium, and with a modern browser too?
What else do you use the GCHandle for? Are you only trying to guarantee that the objects in your list are not being finalized by the GC, or do you access objects in your list by address?
So a Struct in a local variable can be considered pinned in memory? For what I show there is a difference between: Person p = new Person(); CustomList.Add(p); and CustomLis.Add(p); To clarify my list don't store the object, only store a pointer that points to the added object. But when an object that is not store in a local variable is added for example: CustomList(new Person()) that object reference is overrided if I store others, is remove by GC so need to be pinned.
&gt;Side-note: I personally think people sometimes strongly overstate the need for only ever using public properties instead of public fields. The main reason given is that you can't change a field to a property without requiring downstream users of your lib to recompile. But I've never actually been in the situation where I update a library but don't recompile my code. Perhaps it's just me. Still, I like the idea that fields are only ever for private state, so it's a moot point. Good point. What's more, I've wasted many an hour chasing subtle bugs because somebody got fancy in a set and didn't actually assign the value under certain conditions. So yeah, not really sure what to recommend here. Of course you could try to throw an exception but then you get a slap over your wrists when doing static code analysis because (and they're right) you're throwing an exception from an unexpected place or some such stuff. One other possible use is when you want a property to be readable from the outside but not settable by using ```private set```. It helps a little those inclined more towards a functional programming/immutable stuff style. 
I need to store the pointers because all the objects I add are Structs, so are only passed by value, to avoid the struct copy that C# does I store a pointer to them. &gt;What would happen if someone passed a pinned object to your list, but released their own pin before you are done with it? That's what I'm trying to solve, I don't know how check is the passed object is pinned or not.
C# does not have the `final` keyword, but it does have `sealed`, which can be applied to both types and methods. A sealed type cannot be derived from. A sealed method cannot be overridden by a derived type, but it may be shadowed using the `new` keyword.
This explains some of the consequences of non-virtual default. But not the "why". There would need to be some evidence from the design process. None is given. I mean, it seems pretty obvious that part of the reason would have been the performance difference of compile time method resolution vs virtual dispatch. But, since it's obvious, it doesn't seem very insightful unless there's some evidence provided from the design process. That would have been interesting to me.
Both. I don't want my object to be touched by the GC and also I want to retrieve those objects by their address that's why I store a pointer to the added object. My List is basically: public void Add(in T item) { AddItemToPointerArray(void** array, in T item); } public ref T Get(int index) { return ref *GetItemPointerInArray(void** array, int index); }
&gt;To be sure, Structs are never touched by GC, right? No. It must be struct and **local variable** to be allocated on stack.
Even if you confirm that a passed struct is pinned when you add it to your list, you have no way of guaranteeing that whatever code pinned the struct won't free the struct *after* you have added it to the list.
You can only allocate a GCHandle for a heap object. You **cannot** store or pin a reference to a struct that way. At best you can allocate a GCHandle for a boxed struct, but that will already be a copy. &gt;That's what I'm trying to solve, I don't know how check is the passed object is pinned or not. What I'm trying to explain is that this check, even if it were possible, is not enough. Imagine this code: var object = new Foo(); var handle = GCHandle.Alloc(foo, GCHandleType.Pinned); CustomList.Add(foo); // CustomList somehow detects that foo is pinned and doesn't pin it itself handle.Free(); // now the object can be moved/GC'ed and CustomList doesn't know it
Why? Because Java was made earlier and at that time this kind of runtime polymorphism was seen with a much friendlier eye.
I asked myself the same when I started out. Like you, I was not interested in console apps but ended up practicing with them. As others pointed out, the language is the same wether you do TUI or GUI. So ... I'd say, take the one which is more fun to you, probably GUI. You should ignore any thought about beauty and layout though and focus to get your output right (some numbers or text I guess which you display in a few labels). GUIs can be really tricky if you want them to behave exactly like intended. Leave that part out for the first few months. 
The reason they aren't virtual by default is that leads to poorly design APIs. If everything is virtual, the subclass doesn't know what to override. And chances are none of the methods were actually designed to be overridable. Look at the collection classes in .NET and you'll see that the virtual functions are usually not public. They're carefully designed so you know exactly what to override. 
A struct in a local variable will not be moved by the GC, and can thus be safely accessed via pointer *without* pinning **for the duration of the method**. This does not mean that the struct is permanently "pinned". A pointer to that struct will still become invalid once the method which allocated the struct returns and its stack memory is reclaimed.
What's the point of declaring a method sealed when it's already unable to be overridden if you don't declare it virtual?
the compiler is usually picky about this sort of thing. I'd be surprised if it let you declare a non virtual method as sealed.
&gt;I don't want my object to be touched by the GC and also I want to retrieve those objects by their address This is the default behavior of arrays in C# when storing objects. Box your structs rather than trying to get around type safety.
So, there is not a way to make a struct life even after exit from where was declare? For example allocated it on the heap.
Here you can read a lot of good reason for using properties instead of fields: https://stackoverflow.com/questions/2374416/why-use-simple-properties-instead-of-fields-in-c
You cannot make a piece of stack memory survive independently of the method using that stack space, because it's going to be reused. You can of course simply keep a copy of that struct in your list.
Yes, but for what I test when you add and struct to an array and they get it back you are getting a different struct because in both cases is stored and returned by value so the reference to the original is lost.
Thanks for clarify, for what I read here and others places make that struct live indefinitely is no possible or at least not recommend because the stack memory always will be reused/reclaimed.
Anders Hejlsberg's comments on it are linked in the article. https://www.artima.com/intv/nonvirtual.html
&gt; For example allocated it on the heap. Sure, you could allocate your data on the *unmanaged heap* (as opposed to the "GC Heap"): MyStruct* a = (MyStruct*)Marshal.AllocHGlobal(Unsafe.SizeOf&lt;MyStruct&gt;()); Now this pointer to your struct will persist and never be relocated. But it's also your responsibility to free it yourself (`Marshal.FreeHGlobal`). In practice there is little difference between doing the above, and creating a byte[] array yourself, pinning it (with a GCHandle), and then freeing the GCHandle later. Note: you almost certainly don't want to do this -- it's very easy to messy up, leak memory, get the size/alignment of something wrong, or otherwise corrupt your data.
You cannot. Per [MSDN](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed): &gt; You can also use the sealed modifier on a method or property that overrides a virtual method or property in a base class.
Try catching the exception in the controller method during debugging to see the stack trace. 
Good design separates business logic from presentation logic, further presentation logic should be a simple as possible. The majority of your effort is often directed toward the implementation of logic that has no relation to display. Additionally, by seperating business logic from presentation you can easily port applications from one presentation strategy to another fairly easily. For example, if you wanted to write a calculator application... I'd recommend creating a Calculator object which performs all calculator functionality through an 'API'. This would then allow me to access that API via Console, Winform, WPF, webpage, etc. 
So why do these structs need to be value types if you want to treat them as reference types? Why not use a class instead, or box the value types in an object?
Z 
Short version: We know from experience that if a developer did not *carefully* design a method to be overridden, then it is probably not safe to be overridden. 
You use the sealed modifier on methods in a child class stop grand children from further overriding the method .
&gt; Sometimes they're the same, but just spamming { get; set; } on the end of every field is not a good practice. I've found that in my current project { get; private set; } feels like it's correct for 99% of my variables - I tend to type it by reflex at this point. I'm a newbie, though, so I might be doing something kind of dumb here. Is this poor practice? If yes, why, and how do I do it better? Thanks. 
unless theyve improved it lately, most of the generated classes are pretty ugly (weird name casing, a lot of getters and setters implementing a single backing field also with weird casing that doesnt do anything instead of an auto property, namespace collisions i dont think were even handled or just appended an ugly 2, etc) with none of that being configurable If you never have to touch any of that and are okay with the_Weird_naming_rules2 then i guess it's fine 
A possible solution is force all my objects to be reference types, but how using ValueTypes is better because there is not GC I trying to find a workaround. I will try with box, but I think the same will happen, an struct copy will be create and I don't want work over copy only over the original.
&gt; but how using ValueTypes is better because there is not GC I trying to find a workaround. Are you running a production workload where GC is causing performance degradation? If not, trying to get around the GC is premature optimization.
&gt; Kubernetes currently does not support Windows containers. Docker Swarm isn't technology that we're looking to bet on for various reasons. whats up with swarm?
These seems like an extreme micro-optimization, of sorts. Are you sure you should not be using/learning C instead? This is (from these responses alone) not what C# was designed for.
And in Java circles (and my opinion) it still is. 
I haven't had any of those issues
Maybe its fine now then, that was just my previous experience with it with i think as recent as vs2015
You should always use public properties with getters and setters accessing a private field. Just get in that habit because, at least in my experience, I've only ever RARELY needed to give access to a piece of data without some behind the scenes validation logic. The only exception would be DTO type classes purely for transferring data. It's a little bit of extra code but you can cheat in VS by creating your class then defining all your private fields and then right clicking them and generating the public properties automagically. Now I will offer one word of caution for the future. DO NOT litter your getters and setters with a ton of code that does all manner of different things that someone using your work wouldn't know should happen just by simply trying to access something. C# comes with great ability but it's up to you to use it responsibly. :)
probably because OP works at a large enterprise
It's 2018
&gt; script editing is this for Unity? Why not just use Visual Studio?
In the Zebra Language you can look for a ^CI instruction which changes the character encoding, in your file it's ^CI0 which is Latin set, and I think ^CI27 is UTF-8, but that doesn't work on every printer. Check out the documentation pdf I linked in my other comment.
The method generation based on XML Templates sounds like a great job for T4 templates. I have no idea where to begin with the AST Obfuscation. That just sounds messy.
Personal preference honestly, also N\+\+ is more lightweight unless something drastically changed in Visual Studio since I last used it. And yeah it's for Unity.
I mean, unless you are an experienced programmer with the .NET framework with C#... I'd never use notepad over Visual Studio. Instant API help, etc within Visual Studio is superior to spamming internet browser tabs with API definitions IMO.
It's better than not using properties at all. But one of the points of OOP is that your class should expose operations and controls, whereas the state (your fields) are usually just used internally. Sometimes 'state' can be public (usually in plain-old-data classes, like `UserData` or something), but more often than not this is wrong. For example, it might make sense to have a public settable `UserName`, `Gender` etc property so that people can set `UserData` values; but actually a more robust solution down-the-line might be something like an `UpdateUser()` method that sets all values at once; in order to reduce database calls. ...Or not. It depends really on the exact scenario. But what I can say is that it's a lot easier to expose something than to un-expose it. If you add public setters/getters to all your internal state then you'll start to rely on them; and it can leave things hard to change in the future when you need to change how something works in your class but all your codebase is getting/setting the variables manually. For more information, google [Encapsulation](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)).
&gt; Unsafe.SizeOf&lt;MyStruct&gt;() No need for this if `MyStruct` is a known type at compile-time; just use `sizeof(MyStruct)`. &gt; In practice there is little difference between doing the above, and creating a byte[] array yourself, pinning it (with a GCHandle), and then freeing the GCHandle later. The former is far superior in terms of performance though; as you're not likely to leave giant holes in the heap where compaction has to work around your pinned array.
Tbh inheritance itself is pretty outmoded these days. I can probably count on one hand the number of times I've used it in the past couple of years. We need traits/mixins already. The world is leaving C# behind on this aspect.
Maybe but in the end it's up to each person which one they're more comfortable with, I also feel like this is straying off\-topic a bit since it's not related to actually answering my question. No offense meant of course but there's tons of threads all over the net about why to use one editor over another, and such a discussion was not my goal with this post.
No, this isn't poor practice unless you are publicly exposing properties that should be private. One of the main functions of properties is to allow for data to be exposed to other objects without allowing those objects to manipulate that data.
read up on the notepad++ language customization styles and keep on trying then.
Just try F# ;)
Personally, I use monodevelop 7.5 on linux to do monogame development without any issues that I can notice at all. And it has seen various improvements for linux since 7.0 that I have quite enjoyed. Microsoft appear to me to have actually reinvigorated it somewhat. I have to compile it myself from source, but that is about the biggest problem. I'm looking forward to 7.6 where I have seen it supports collapsing regions etc. 
Swarm is much easier to get started with and easier to manage, so it may still be a sweet spot for many uses cases (as Nomad is). But as of writing, K8S seems to be the clear winner (even Docker Inc. is supporting it as an official technology). All 3 major cloud platforms support (or will support; EKS is in private preview) it as a managed service, there's a huge active community around it, which means there's a good amount of tooling and industry support surrounding it. The downside of K8S is that it is a bit complex [1], but it's the type of complexity that looks like it will pay off to learn. One could start with Swarm/Nomad and move to K8S later, but in our case, we think it might be worth it to just bite the bullet and start with K8S. [1] Incidentally, Nigel Foulton's Intro to Kubernetes video course on PluralSight (not free) is an excellent way to get started.
I believe in testing and if and individual likes to test his code with some say unit tests, that's fine. Running automated tests every build usually ends up wasting time. I think David Hansson said it best in this article http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html
It's good for job interviews. You for sure should test your code and if doing it in unit test format is the easiest for you personally that's fine. Check out the article I also mention above from David Hansson the creator of Ruby on Rails. It also has another great PDF at the bottom that explains why unit testing is a waste. http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html
For sure I believe in testing your code, just not tdd or forced unit testing. I'll run some unit tests during development or use postman at times, but I don't make it part of the build process. Automated tests get stale and end up being a waste of time trying to maintain.
I was giving a presentation on TypeScript to my company the other day and got to the section on Classes, and I suddenly realised "I have literally not used inheritance in at least 5 years". I didn't even realise it until now. 
You try VS code? Kind of best of both worlds. Can’t really hell ya on the N++ route as I’ve never even heard anyone desiring to do that. 
Performance\- sure. Supercomputers in every phone and we're still worried about running up looking up a few things in some tables. Someone tell the COM guys.
From what I've read, I assume you're looking for a visual UI designer with drag and drop like functionality of Win Forms . I think you'd be hard pressed to find something like that. You'll have to code your UI with something like Avalonia or Eto Forms. Not really sure , but thats where I'd investigate first. Miguel from Xamarin wrote a cool cross platform terminal UI framework if you want something simple. Apparently there are unoffical ways to setup Xamarin on Linux. You will probably have to rely on compiling with command line.
Right but I thought it WAS monodevelop, not just based on...
Okay, becoming an evangelist is a mid term goal. SDE would be the first goal then. 
correct, consider that its 2018 and microsoft left ie11 in win10 even though they made edge. 
How about a *minimal* code example? What you describe seems to be impossible - so probably you are doing it wrong or have wrong expectations about your code. So we cannot answer this without an example aside with your description of what is going on if you run it. 
like, it’ll be if ( a = 1) { system.console.writeline(“correct”) } else { system.console.writeline(“incorrect”) } //then would continue prompting more questions etc. however after this it just send press any key to continue . . . and then closes instead continuing the code 
Use == instead of =
You should use the '==' operator to compare two values. Using just '=' makes is so the value on the right gets assigned to the variable on the left, and it gets evaluated to true for the if statement.
You shouldn't think of it as text. Think of it as compiled code. The instructions and data payload are mixed together and you can only tell for sure what things mean by the instructions that preceded it. Always consider the data to be raw binary unless the manual states specifically that it can be encoded as text. Otherwise it might get tampered with somewhere along the pipeline.
I'm surprised VS didn't warn about this. 
Possibly because 1 is equivalent to true? On train currently and can't test 
It did. In fact it won't even compile. The condition for an if-block must evaluate to boolean. The onlly way this would compile is `a` is a custom type with implicit conversions from `int` and to `boolean`, which is very unlikely.
If I remember correctly they added a few things other than the name. It essentially still is MonoDevelop of course.
I'm sure the latest MonoDevelop is pretty decent if syntax highlighting isn't that important for you. Very much doubt Microsoft is responsible for it though. On Windows compiling from source is a massive pain that took me 6+ hours to get working. It's clear that Microsoft does not want anyone to use MonoDevelop.
Only Interfaces and extenders?
There is no way that's an actual code example. The `=` is probably wrong as others have pointed out, and won't compile unless `a` is a `bool`, but also it's missing some `;`s and has capital letters in the wrong place. Please post an actual code sample, copied out of Visual Studio, complete with variable declarations, which is as short as possible while still demonstrating what the problem is.
&gt; Use == instead of = I doubt thats the problem. That's a typo that's been made when copying from Visual Studio to Reddit. He's also missed out semi-colons and got the capitalisation of System.Console.WriteLine wrong, so there's no way he's copied+pasted code that compiles and runs - and I'd bet he's got a == in his original code too. I have no idea what the problem is, but I don't think the code sample he's typed out here demonstrates it.
I must say I haven't noticed the syntax highlighting issue, but perhaps it's a windows thing.
What kind of project? MVC, WPF and WinForms all rely on inheritance, as do many other frameworks.
Older MonoDevelop versions had by far the best syntax highlighting out of any C# IDE. Now it is worse than Visual Studio and much worse than Rider, but overall still average.
`int` is a value-type. `ReferenceEquals` compares references. A value type is not a reference, but it will be "boxed" in a reference when casted to `object`. So in this case each `int` gets boxed individually, and each box is a different reference.
I know that but can you explain why this test returns true? As if it was the same reference but it's not.
The first int is placed in box A, the second int is placed in box B. The ints may be the same, but the boxes are not. ReferenceEquals compares the references (the boxes).
The `Assert` class does not have a `ReferenceEquals()` method. What's happening here is that you are actually calling `Object.ReferenceEquals()`. Since that's not designed for asserting, it doesn't throw exceptions - what it does instead is return a `bool`. In your case, the `bool` it returns will obviously be `false` because they are not equal, but you're not doing anything with this `bool`. You can prove this quite easily by just hovering the mouse over the word `ReferenceEquals` and looking at what Intellisense shows you.
Someone who actually read your problem here (increasingly rare these days) and I would suggest making sure that the code you're running is compiled from the source you're examining. It seems to me like this shouldn't happen, so you should do a clean compile first. I'll try to reproduce the issue in the mean time and get back to you if I have any insights.
What you say is true, but is not the answer. Based on what you've said, the test should fail. OP expected the test to fail. In fact,t though, the test passed - which is not explained by your post. See my post fro the correct reason.
It reproduces fine! I also read the question, and reproduced it - and my post explains why this happens. I agree, though - people answering a different question to the one asked is becoming more and more common.
Thanks that was the thing!
Ohh... Completely missed that! It could very well be that the assert ReferenceEquals method is performing magic to identify boxed value types and does not actually compare references.
Yup, you beat me to it. I figured out the issue after reproduction. At the time of commenting there was only one other comment and it was from someone who clearly didn't read the question, and assumed that OP wanted to know why the test case was throwing - rather than the actual question, which was why the test case was *not* throwing.
Need to share your code dude. My guess is the program is simply getting to the end and closing. Add a Console.Readline to the end and it won't exit until you press enter.
++x [Mind Blown](http://www.reactiongifs.com/r/2013/10/tim-and-eric-mind-blown.gif)
&gt; Rule 7: Submitted links to be made with effort and quality 
Dictionaries.
; }
That guys sees sharp! I'll see myself out...
thanks I’m stupid lol
Glad it was picked up 
This was original content that I made to give people some giggles 
thanks.
How could I forget? 
&gt; **and quality**
Removed: Rule 4. Please include the actual code you used so that we can copy/paste it and reproduce the problem.
Real quality would have included `Interlocked.Increment` and emitting OpCodes.
[Meme++](https://i.imgflip.com/2bn32i.jpg)
Never heard of that before, but i'm selftaught, what do i know. How would you implement something like this with attributes public static int ToInt(this string s) =&gt; int.Parse(s); ?
Why is the width so slim? There's like room for 5 words before new line.
[`X = unchecked((int)((uint)X - uint.MaxValue));`](https://i.imgur.com/Hh3jICE.png)
Better run DOS then by that logic
[Meme++++](https://i.imgflip.com/2bn52q.jpg)
Not stupid just inexperienced :)
My head explodes every time I look into node_modules. Thanks for writing this. 
Sorry didn't get that. Which width?
Welcome!
My screen is 1920px wide, but the entire content column is squeezed into a 648px channel. It's a little parsimonious.
This is a useful article but I'm not sure why it's in the csharp sub.
Windows and all :)
Thumbs up for the word of the day "parsimonious" :) You can zoom in :) 
I think this is a very childish discussion. The logic does not dictate that, no. Big companies have a huge amount of applications that are used for business processes. Making big changes to these is slow because its usually not worth it to do it very often from an economical perspective, since each change needs to be thoroughly tested for use by hundreds of thousands of people and it needs to be tested for interoperability with other applications.
I was just explaining /u/HydrA-. The width didn't particularly bother me.
doesn't vs code work in linux? \- I usually only do mac / windows stuff but I am pretty sure it has linux support.
A little copy editing: &gt;Your worries ~~we’re~~ **would have been** justified**,** though**,** if Microsoft hadn’t embraced open-source. &gt;With .net core running on Linux it also means that you never have to touch a Windows server ever again, unles**s** you want to. &gt;~~It’s~~ **Its** future is bright and ~~it’s~~ **its** cross**-**platform features will appeal to a whole new generation of developers.
Awesome. Thanks. Just made the updates. I'm not a native speaker although I should have caught these ones...
The value of #8 is too often underestimated
On the hotspot repeater, I'm curious why you didn't wrap the HNetCfg.HNetShare.1 object. As it stands, the code needs to be written mostly with dynamics. I also thought you'd be interested to know that you can start a process with its arguments directly rather than using a command line (which can fail in unexpected ways). It's as easy as: var process = new Process(); process.Start(app_path, arg_list); Or, since you're never actually doing anything with the process object, you can just replace the entire Command(_sArguments) method with: private void Command(string _sArguments, string path = "netsh") =&gt; new Process().Start(path, _sArguments).WaitForExit(); And the only other change you'd have to make is removing netsh from the different command calls. Hope some of that proves useful. Good luck!
No worries :)
For me it's not a problem of being able to see the text, I can read the letters just fine. It's just a waste of screen real estate to have the content column so skinny on wider screens. That aside, as someone who just started working with docker, I would have saved myself a headache or two if I had been able to read this article a week ago. Great tutorial especially for someone who knows nothing about the potential gotchas of running it on Windows 10.
thanks buddy!
MonoDevelop was the foundation of Xamarin Studio. When Xamarin was acquired, it became Visual Studio for Mac. So the bits you see in https://github.com/mono/monodevelop is actually the basis for Visual Studio for Mac. 
MonoDevelop was the foundation of Xamarin Studio. When Xamarin was acquired by Microsoft, Xamarin Studio became Visual Studio for Mac. The bits you see in https://github.com/mono/monodevelop is actually the basis for Visual Studio for Mac which, as of now, is still using a lot of gtk apis.
Hipster JavaScript Friends Pick one
Looks like you're not using the correct \[ “ \] characters. When changed to \[ " \] your code works fine. Console.Title = “Variables”; // is wrong Console.Title = "Variables"; // is correct
And experienced progammers with the .NET Framework with C# know better than to use notepad\+\+ over Visual Studio. ;\)
Wow. I feel like an idiot now :(
You'd get a compilation error, I believe -- I don't believe it emits just a warning.
Liar. Everything inherits from `object`. BOOM. :-D
[Code: The Hidden Language of Computer Hardware and Software](https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319) This is a great read and is full of really helpful fundamental information. It's really got it all.
No need to feel like an idiot at all - I've seen lots of people make this mistake. Nearly always, it means you've copied+pasted the code from a Word document or similar (Word likes re-formatting quotes to a format that doesn't work in code). The problem with this, if this is in fact what you're doing, is that apart from breaking your quotes, it also means you're not learning as you go. When you actually type out the code, thinking about each line as you type it, seeing what Intellisense does to help you, making and fixing typos, you will learn a whole lot more than if you just copy+paste the code.
Can't you just call the method without doing a return, and then let the calling method return what it normally does?
If you don't run your tests as part of the build process, then you're not running your tests when they need to be run. One of the major selling points of tests is that they are gates to bad code getting into production. Not using them that way causes loads of problems, including your assessment that they get "stale". If you write bad tests and run them infrequently, they will get stale, people will stop using them, and they'll cause more grief than they are worth. I absolutely agree. If you've ever opened up a project where half of the unit tests fail because they use the database, haven't been touched in years, and are generally a rat's nest, you'd feel the same way. Good unit tests, however, can't get stale. For one thing, they're designed to limit the impact of any code changes. Maybe you're a mockist, maybe you're a classicist. Whatever you decide, keep it short and to the point. If you build out two dozens mocks and assert behavior/number of calls at every level, someone will rip their hair out when they have to maintain that test \(as I did when one refactoring broke an entire project's worth of tests because someone got mock crazy\). I rarely change unit tests unless I'm changing the external API \(which is, also, rare\). I add more unit tests as I find bugs or find a particular area of the system too brittle. And then I run those tests on every single build. It takes a couple of seconds. If the tests don't pass, I have to make them pass. Since the failures are related to the changes I made, they should be relatively easy for me to fix. If I don't fix them, I can't complete the pull request to merge into master. For some projects, I even run end\-to\-end integration tests on every build. My crowning achievement takes 60\-90 seconds to run from start to finish and proves out what used to take about an hour of manual configuration and analysis. It spins up Docker containers with everything the application needs, asserts behavior, and fails the build if the tests don't pass. I've been there when bugs in the system caused downtime. It robs me of hours spent triaging, fixing, and performing after\-the\-fact data corrections. There's not just an economic impact to our customers, but a financial impact to our bottom line. It's negligent of me not to run these tests against every releasable artifact and keep track of the test results. Testing isn't something that just happens at development time, it's a continuous process. Running the some tests once locally and calling it good, very simply put, isn't.
Please include the code you're talking about. 
Jump? You can call any method from any method (that is accessible etc. etc.). I think you need to type out an example?
For what it's worth, you could do sort of the reverse of this in C#7 with [ref returns](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns). Instead of passing a reference to a stack-allocated struct into the list, you store the struct in an array in the list and pass references to that struct out of the list. That solves the lifetime issues and works completely without unsafe code/pointers.
Right click the article text, click inspect, find the article tag `&lt;article class="ph3 pt0 pb4 article"&gt;` Set the width to 50em: .measure-wide, .article { max-width: 50em; } Not the best solution, but if you still want to read it then it's a quick solution.
Holy Sh\*t, I feel so stupid that I've not thought of just calling the method... Sorry guys I'm pretty new to all of this. Thank you all for your responses!
I'm annotating the screen-shot of the code in powerpoint so I can understand it when I look back. Is this as good as typing it out? I don't have time to type out the code but I am thinking about it.
&gt;And to be fair, until not long ago that was kind off true. Kind of. &gt;C# ranked 8th in their list of most popular technologies. In 2017 C# was **4rd**. 4th. 
How does one design carefully with overriding in mind - what should one be considering?
That sounds worthwhile *in addition* to typing out the code, but not instead of. It’s not helping build muscle memory of all the ways Visual Studio helps you. It’s not going to help recognise the difference between, for example, a class called Person (capital P) and a variable called person (lower case p). It’s not letting you make mistakes, or getting you to write code from scratch. I’m not saying it won’t help, but you’d have to be amazingly natural at programming to learn only by doing this.
Fixed. Thanks.
meme+=++meme++
You can also use string interpolation: For example your first output line can accomplish the same as following. No need for manual concatenation. Console.WriteLine($"char letter:\t{letter}");
&gt; meme+=++meme++ The operand of an increment or decrement operator must be a variable, property or indexer
Short version: You have to consider that a) the overriding class has access to all your protected and public members b) the overriding class can access all of those members in any order c) the overriding class may or *may not* call base.VirtualMethod() d) the consumer of your class doesn't (or at least shouldn't need to) know whether they're calling a method on the base class or the child class, or you've violated the is-a principle of OOP. e) the consumer of your class can call any of your public methods and properties in any order Therefore, *protected* mutable fields are basically the enemy, for one. If the overriding class can modify state of the base class directly, then there is no way to guarantee correctness without the author of the overriding class intimately understanding the source code of the base class and changing both classes' source code if either changes. Also consider that the overriding class can call any protected or public methods/properties in any order and what this does to your mutable state. e.g. if they Add() an item to a list and then trigger something that re-initializes the list, they just wiped out the Add(). Can calling `base.VirtualMethod()` trigger an infinite loop or stack overflow? It can, in some circumstances. * base class A() is virtual * base class method B() calls A() internally * child class A() override calls method B() Finally, you have the devil's bargain of exposing state or not. If you don't expose private state, the child class may have to duplicate work the base class already did. If you do expose state, the child class may use it inappropriately. After all of that (and more problems I didn't describe), you have to ask yourself the question you should always be asking yourself in OOP, "would this have been less problematic to solve with composition rather than inheritance?"
What kind of answer are you even hoping for, here? Go read a motivational book or something.
Yes, I'm more geared towards key integration tests vs unit tests. I've been on projects where for every change you made in the code you had to make 3x the changes in the unit tests.
Wicked breakdown, thank you very much.
frustration / negative emotion is a natural part of learning everything! It's where you've gone from unknown incompetence (don't know what you're not good at) to known incompetence (learned what you're not good at). The next step up from here is competence :) Everyone goes through these phases while learning anything, it's not just programming. What's important is to stay calm and work your way through it all and eventually come out on the other side. In this age of information, it is easier than ever before to learn anything. What is it that you're struggling with specifically? Maybe ask around on stack overflow? check out the c# discord group? (right hand side of this subreddit) There are always people willing to help, you just need to ask.
I wouldn’t worry too much, I can’t speak for all developers but I’ve hit this wall often. You’re trying to grasp a new concept and a mental fog descends which you can’t see past. I find often at that point it is best to stop, go away, do something else and then come back to problem at hand. If a concept still isn’t sticking then try looking at different resources, there is an absolute plethora of resources, YouTube, StackOverflow, CodeProject, Udemy, blogs etc that will attempt to explain the theory. Perhaps you learn better by doing, so find examples that work through a real life problems rather than a contrived idea. This way you might find you are able more easily tackle complex subjects. Be prepared that the learning never stops, well unless you do because technology is changing all the time. However there are basic concepts which you should get yourself a good foundation. Ive personally found this guys courses to be excellent: https://programmingwithmosh.com They’re often for sale on Udemy and you can pick them up £15-20. Good luck, keep at it and it will get easier. 
Okay catch #1 Some people are good at programming from very start. Some people suck. Catch #2 Programmers have lag (like in games) in learning. When you learn a new concept it takes time to truly grasp it (sometimes up to 1 year). It is true even if you stop learning. Catch #3 Programming can be taught in many ways. You should study it the right way. So take 1 week off. Come back and see what has changed.
I feel your pain. I'm trying to wrap my head around things like Access Modifiers (public, private, internal, protected, protected internal and Private protected) and then accessing them. It's not complicated but it is. It's all about practice. Something that has really worked well for me is practicing everything you learn 5 or 6 times until you don't need to reference how to do it any more, before moving on to the next lesson, then do the same on the next lesson, but incorporate your previous lessons into your practice to keep those lesson learned sharp in your mind. 
Learning something new to me is tough sometimes. Like for example, the first time I used a new front end Javascript framework I hated it. Why do it this way? That doesn't many sense. Etc. After a while, something clicks. Some things come quicker than others. Some of the troubles you'll have eventually are trying to solve the same problems you've already solved with X but with Y this time. Why should I use React.js when I can do the same thing in Knockout.js and I already know how? These things, at least for me, take time to overcome. 
&gt; If you don't need a variable to know how many steps you've done then you should use a while loop instead. It only has the loop condition part. Or a *foreach* in this case would be appropriate (though I'm sure the example used a *for* loop strictly for educational purposes) foreach(string word in array) { ... }
On what concepts do you struggle.
Well easiest sure, but then you have to sort the list unnecessarily. I'll take an Split.Aggregate based solution for efficiency even if it's ugly as hell. :)
Just think of the text as its own docker container, not interferring with the rest of the website ;)
Did you try the code yourself? That's always the first step when investigating syntax. 
Also, I honestly don't know because the vast majority of code users arrays of arrays (`int[x][y]`) instead of multi-dimensional arrays (`int[x,y]`). I no longer remember the reason but it had something to do with performance. 
Step by step Microsoft Visual C# 2013 is very help full and Code Complete is great for software construction. I've been programming for about a year now and these two books have been a solid foundation for me, I'm not much of a reader but I realized early that if i wanted to learn I would have to start reading and try to understand what I read. Hopefully these books help you out!
No I didn't as I'm new to C#. Also, I have no idea what you're talking about in your 2nd post.
lol did you just complete your first week of CS 101?
I so rarely work directly with arrays so I often don't recall the syntax, but I suspect you're correct based on the following quick expirement in LinqPad void Main() { int[,] foo = new int[2, 3]; int[,] bar = new int[2, 3] {{1, 2, 3}, {4, 5, 6}}; int[,] fizz = new int[2] {{1, 2, 3}, {4, 5, 6}}; } The last line has a syntax error.
https://www.youtube.com/watch?v=3UcJGikWJxs
If you utilize the nifty search bar on the right over there, you'll find [plenty of answers to this exact question](https://www.reddit.com/r/csharp/search?q=tutorial&amp;restrict_sr=on) (because it's been asked before). &gt; The more the ~~marior~~ merrier FTFY
Abstract is perfect for certain use cases, especially where other people are going to use your code. You're thinking about using your own code in which case you want to make it as easy for yourself as possible. But once others get hold of it it's not that simple anymore and you have to design it so that they don't accidentally use it in ways not intended. Abstract works well in things that are actually abstract concepts, despite definable. Encoding is a good example. Encoding is just a concept. Which encoding? Of what? Well, System.Text.Encoding provides static properties that instantiates specific encodings for you. You could be specific yourself in the instantiation and say new System.Text.UTF8Encoding, but unless there's a special use\-case, you wouldn't because the abstract Encoding type already provides all the necessary functions you'd want to call. Encoding implements basic functionality for all encoding classes, but you'd never want to let someone instantiate it by itself as there's no context in which that would make any sense to use an undefined encoding.
Yes, ref returns allow me get the struct without copy but at the moment to add the struct I dont find a way to avoid that, the only solution still pointers. Here a sample code of what I'm trying to do: https://pastebin.com/d0w0ne61 If you add an Array to my UnsafeArray any change made in the elements of the UnsafeArray also happens in the array that is pointing to, but as the name says is something really unsafe.
It's not ready for "any\-time" yet. I just tried creating a solution. It took like 40 seconds to create it. UI is a complete mess and I can't even add a project due to some bug. I would say it's unusable.
that fixed it and was the problem lol, thanks
Haha, fair enough! Glad you got it sorted!
This is not an error in the code or a shortcut. What's happening in the second example is, rather than defining the dimensions of the array in the \`new data\-type\` call you define the dimensions of the array with the way you structure the data you are pre\-populating. in the above example lets say that Size == 2. With that being said we can look at the line of code like this data\-type \[ , \] array\-name = new data\-type\[2\] {{value, value, value}, {value, value, value}}; which is the same as data\-type \[ , \] array\-name = new data\-type\[2,3\]{{value, value, value}, {value, value, value}}; and also the same as data\-type \[ , \] array\-name = new data\-type\[,\]{{value, value, value}, {value, value, value}}; The point is, you can declare the dimensions of an array, without actually declaring its size, simply by supplying the data in the appropriate format. Sources: [https://docs.microsoft.com/en\-us/dotnet/csharp/programming\-guide/arrays/multidimensional\-arrays](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays)
Maybe this will make you feel better. I took java programming in high school. About half way through the lessons stoped telling me exactly what to type and I fell behind because I barely understood any of it. I cheated off the guy next to me to get my C and buried my dreams of being a computer programmer. Fast forward 10 years. I decide I'm going to try learn Unity and C#. The first two times I tried the beginner tutorial I gave up because I was copying without comprehension. The third time I pushed through. Not much clicked but on to the next tutorial. On the second tutorial I spent 8 hours researching an error code only to find out I was missing a () at the end of a line. There were a few other painful learning experiences where I spent hours or days trying to trouble shoot compile errors. I was about a month in before I really understood the way . worked. It paid off though. I understand code syntax now. I can read the documentation API and actually understand how to use it even if the classes and methods don't always work the way I'm expecting. Everyone has their own learning experience. Self teaching is hard because when you get stuck you probably don't even know why your stuck. At some point a lot or stuff will all start to click and your learning speed will go from crawling in mud to walking on sand. Its not running but its 10x faster.
Don’t worry man, we all went through it. For the first 6 months I didn’t know what the hell was going but then it all just clicked in my head. You mind just needs time to start thinking like a programmer. Constant practice and learning is key. Keep at it, you’ll do it
Learning takes time, it's not something you can rush. Setting aside some time each day is a good idea, but in all fairness i don't think anyone can read for 2 hours in a text book, and then understand everything. Most people learn by doing, and when doing they make mistakes, and the mistakes turns into frustrations. The good news is that we learn most from our mistakes. And when we finally solve the hard problem whatever it might be, the reward is great we start to feel better, and that's what makes us keep going. When we get stuck at whatever issue there might be, there are various way you can deal with this, i for example like to draw on a piece of paper how i wan't to solve the issue, then i explain to myself how to solve it, and if it dosen't work i either leave it and do something else, or i resolve to my googl-fu and see how others deal with whatever issue i might have.
You are correct there is an issue with the ENGLISH SYNTAX of that example. It should be data\-type \[ , \] array\-name = new data\-type\*\*\[size, size\]\*\* {{value, value, value}, {value, value, value}}; however as an additional note you can define a multidimensional array without defining its size like this: data\-type \[ , \] array\-name = new data\-type\[ , \] {{value, value, value}, {value, value, value}}; this second syntax is correct because you are defining the size of the array with the elements you provide.
What, that quote describes exactly the case he wrote. They even have the code snippet with the x, y and z classes
I was suggesting to make it so that the struct originates from the list, instead of being passed into the list. So instead of var foo = new Foo(); foo.A = 123; list.Add(in foo); you'd have ref var foo = ref list.AddNew(); foo.A = 123; This is less flexible, of course, and may not be useful in all situations. It's also a rather error prone because you get no warning if you ever forget to specify the `ref`. I'm having trouble mapping what's been discussed in this thread to your pastebin code, though. You're not passing in a struct, you're passing in an array which is a reference type anyway. There's no issue with pinning arrays. There's also no benefit to using `in` on reference types and &lt;= pointer sized value types. I'm also not sure what the benefit of making it a `T**` instead of a `T*` is, if the goal is performance that indirection seems counterproductive.
I can vouch for mr. hamedani’s quality as well. Got me through college when the lecturer’s didn’t teach me anything.
jagged arrays (``[][]``) are faster because the JIT can eliminate bounds checking in most circumstances, multidimensional arrays are continuous in memory though, so it's not like they are worse in absolutely every situation. 
Then those tests either were: - Tied too closely to the implementation - At too low of a level - Needed to be changed because the behavior changed Writing tests is an art form (requires judgement calls): - Don't go for 100% code coverage - Focus on the methods with complex or intricate logic - Test method behavior (input vs output) not whether method A calls method B (implementation) - Refactor tests periodically, but prefer clarity over DRY - If a bug made it to production, consider whether a unit test would have caught the bug (or similar bugs) 
Learning to deal with hitting a wall is something that developers have to work through all the time. When I find myself stuck on something and convinced I'll never quite figure it out I just take a break, work on something else and approach the issue later with a different perspective. Don't be discouraged! And like someone else mentioned, Google and StackOverflow are immensely helpful in solving specific scenarios.
Our physics teacher always implored us to make a drawing with all the relevant facts and formulas when solving a problem. "You can't expect your head to do all the work, you have to use your hands as well!" I've since learned that it applies to much more than just physics. So maybe when you're struggling with nested loops, write out a table of all the values for each iteration. With colleagues, many of them with years of experience, we use a whiteboard as soon as it gets complicated. So no, it doesn't get easier, but you do get better at it. TLDR: pen and paper
I third Mosh's courses. He is great!
I have a ComSci degree and years of experience on projects of all sizes. I still come across new concepts that make my head hurt till I get used to them. It's less often with each passing year, but still happens. My latest one was LanguageExt library. A lot of awesome stuff in it and the way it structures your code when done right is amazing, but my god how painful it was to get used to it... the fact that C# type inference isn't that good (like F# for example) doesn't help either, but still worth it. I'd say don't try this stuff until you get comfortable with the basics.
What I did to start was use an app called solo learn. The reason I liked this for starting to learn c# was the bite sized lessons you could do. And each page had an area where you can see comments of people asking , probably, similar questions to you. It doesnt go super in depth but once you got through the course you had abasic understanding. After I did that I downloaded a pdf on my phone. Saved it to my google drive and I read though it slowly. Practicing and writing my own program while following the book. Gl. Its rewarding. Keep going . 
Commiseration? Empathy? Reassurance that this is a normal step in the learning process? Y'know, the kinds of answers that well-adjusted humans would give, like every other one in this thread.
'It's' is a *very* common mistake, even for native speakers.
Yes totally normal no matter how long you are already programming.
Removed: Rule 4.
It's very common for people to look at one lesson, think they understand it, and then get stuck on the next one because they didn't "do" the first lesson enough. Go slower and you'll speed right up! (Slow is smooth. Smooth is fast.)
Saving this cuz reasons
Interesting. Do you know if Visual Studio for mac has the same issues with syntax highlighting? I use it too on occasion and must say hadn't noticed that it was any different to monodevelop. I would have thought they would be the same in this regard.
As long as it's consistent, it's not an error to declare the size in this case.
Is he still very active in C# language development? 
#10 is not accurate. C# is not a compiled language.
I'm working on a console application that will function similar to Habitica. Essentially, it'll let you set up daily challenges and you get xp and levels for completing them. I'm super new and don't understand Windows forms or anything yet, but I'm hoping to learn a lot!
I'm currently going through a beginner course right now on C# as well, and that wall comes far too often for comfort. It's normal whenever you learn any new skill to feel like that. When I feel like that, I turn on some music and just create a console app that I know I can do. Even if it's just a few "Console.WriteLine"s, it restores confidence and it's a lot better than most people will ever do. Good learning my friend! The hard times get better, and you and I both will soon be programming stuff the world has never seen before :)
If you're into or would like to get into PoEAA, then there are a few books which you can read and which will be very useful to your career. https://www.google.com.np/search?q=Patterns+of+Enterprise+Application+Architecture&amp;stick=H4sIAAAAAAAAAONgFuLQz9U3MDWqTFPiArHMUkzLio21BBxLSzLyi0LynfLzs_3zcioB7lj5OyoAAAA&amp;sa=X&amp;ved=0ahUKEwip8fOv_L3bAhXRbSsKHQd-BR8QxA0I5QEwGw&amp;biw=1920&amp;bih=974
You should check out dotnetfiddle, and play around with c# there
The only way to "remove" something drawn is to draw something else over it. Typically by invalidating the desired region.
The Studio application was working for me but the latest snapshot appears to have a few issues. As I said, the framework is much further developed and ready for use in its beta form now.
C# is on Linux as well.
Nice
There is a good explanation here: [https://practicaltypography.com/line\-length.html](https://practicaltypography.com/line-length.html) [https://practicaltypography.com/page\-margins.html](https://practicaltypography.com/page-margins.html)
Sure it is. It’s just typically (but not always, see Xamarin on iOS) JITC rather than AOTC.
C# in depth + Microsoft's C# docs. It's a good next step after the yellow book I reckon. Along with a book on design patterns.
Its different from high school classes (thank God!). My experience is that once you get over the initial wall, you start to realize that there is a direct practical application for what you're learning. It's not just an abstract set of interesting concepts. You start looking at other projects, data and web APIs out there and imagine the kinds of things you can create; tools and projects to make your life, or someone else's better. Interesting ways you can interact with the world. It's really the closest thing to magic! And like say, Harry Potter magic or something, there's many different domains you can choose to get into once you've got passed the basics - web, mobile, games, robotics, AI etc. You just have to explore and learn more. The more you learn the easier it is to make rapid prototypes for fun ideas you come up with. And the crazy thing is that when you get to the level of being employable as a junior dev, you get payed to learn more! Get to the next level and you'll have more freedom to choose what you want to work on and be payed to learn. Once your code reading, writing and comprehension skill improves to a certain level, things you found difficult, your nested loops for example, become easy. And you look back on old code you wrote with a feeling that approximates a sense achievement with a dash of embarrassment. You think to yourself: "I can to better now". And you go out and do it. You discover how to right write good reusable code that automates the boring stuff. You start interacting with other people's code in interesting ways and the world opens up as you spot connections. You attend fun conventions and meet awesome super smart people. You begin to contribute to awesome community projects and you feel a sense of fulfillment for being a part of something important. One stratedgy that has helped motivate me is to relate everything I'm learning to a project I want to build or contribute to. I keep journals of ideas, code snippets and concepts I could potentially use. I reflect on my learning regularly. I measure my learning progress by reading other people's code. It's normal to feel lost and overwhelmed. People will tell you that the feeling never goes away, even as you get better. What they fail to mention is that YOU change. You get really damn good at learning how to research and learn. I hope my positive rant helps! 
*Immediatly Follows*
Sorry, can’t upvote; private.
I haven't come across code contracts very much. What benefit do they give you here?
I did use that method in the beginning, but it changed the content (Æ Ø Å) to those weird question marks (�) Even when i specified the encoding.
Does your algorithm work outside of the switch? enum SearchMethod { Linear, Binary, } public int Search(List&lt;int&gt; list, SearchMethod method, int item) { switch(method) { case SearchMethod.Linear: return list.IndexOf(item) ; case SearchMethod.Binary: return list.BinarySearch; default: throw new ArgumentException();
Yes it does, that's why I got confused.
I updated my answer, sent it before i was finished because I'm an idiot. 
Here's my code for the binary search { int min = 0; int max = inputArray.Length \- 1; while (min \&lt;= max) { int mid = (min \+ max) / 2; if (target \&lt; inputArray\[mid\]) { min = mid \+ 1; } if (target \&gt; inputArray\[mid\]) { max = mid \- 1; } else { Console.WriteLine(target \+ " was found at index " \+ mid); break; } } } I know I did it the long way, but that's what was asked for.
As far as I know he's active on Typescript development. Though he might still be checking out on C#, but that we cannot verify sadly.
Your method doesn't return an int, but just prints it in the console, but you should be able to "use" it in your switch. Show the code that causes the problem (method headers are helpful as well). 
All the other code is working fine, it's only the binary search. I'll show you anyway. I should point out that I am very knew at this. The code is incomplete. static void Main(string\[\] args) { int\[\] prime\_numbers = new int\[\] { 2, 3, 5, 7, 11, 12 }; string\[\] fruits = new string\[\] { "apple", "banana", "watermelon", "grapefruit", "grapes", "orange", "mango", "pear", "pineapple", "strawberry" }; string\[\] countries = new string\[\] { "France", "Spain", "China", "Italy", "Turkey", "Germany", "Mexico", "Thailand", "Australia", "Croatia", "Greece", "Singapore" }; { Console.WriteLine(" Select the array you wish to search. Type p for prime numbers, f for fruits or c for countries and then press enter"); string chosenarray = Console.ReadLine().ToLower(); switch (chosenarray) { case "p": Console.WriteLine(" You have selected prime numbers, please enter the number you wish to find in the array"); int usersearch = Convert.ToInt32(Console.ReadLine()); int target = usersearch; int min = 0; int max = prime\_numbers.Length \- 1; while (min \&lt;= max) { int mid = (min \+ max) / 2; if (target \&lt; prime\_numbers\[mid\]) { min = mid \+ 1; } if (target \&gt; prime\_numbers\[mid\]) { max = mid \- 1; } else { Console.WriteLine(target \+ " was found at index " \+ mid); break; } } break; case "f": Console.WriteLine(" You have selected fruits, please enter the fruit you wish to find in the array"); break; case "c": Console.WriteLine(" You have selected countries, please enter the country you wish to find in the array"); break; } } Console.ReadLine(); }
Ahh, you're not calling a method, but copy pasting it in the switch itself, thus the missing method header.. ok, i guess. Well what doesn't work, does it print anything into the console when you input p? 
Yes, it spits out the message of "you have selected prime numbers, please enter the number you wish to find in the array". What should I put as the method header?
It may be a dump question, but did you enter a number after that? 
No question is dumb if it helps the situation. Yes I did enter a number from the array, 7.
Are you familiar with debugging? You could create a breakpoint on the console output line, by clicking left to the line number and see if it even reaches that point
I've created the breakpoint, now what do I do?
Start the program, it should break right before that line is reached.
I've never used "Visual Studio" for Mac but I assume a core feature like this is probably taken from MonoDevelop without any changes. 
Hasn't this been around for a little while now?, or was it just not ready for use until now?
Depends what you mean by "a little while". It's been uploaded to nuget less than 10 days ago.
It doesn't break, what does that mean?
I recalling finding a github for some VLC wrapper after they posted an issue on .net core github, may have been a different on.
You're probably referring to https://github.com/ZeBobo5/Vlc.DotNet/ :)
If anyone has any questions, [u/mtz94](https://www.reddit.com/user/mtz94) and me can help you :)
Roger that :) Still too bad I have to define the encoding, it would have been a lot easier without it. Also I have managed to read the file correctly, using your code and it works just fine. And I can also print the file from within my program (At least to a 'fake' printer). This however is done in a kinda roundabout way, after I've made all the changes to the file, I then save it as a temporary file in the root directory. Then I send the temporary file to the printer using [RawPrinterHelper](https://github.com/andyyou/SendToPrinter/blob/master/Printer/RawPrinterHelper.cs).
Can you confirm that libVLC no longer supports changing the vout and the the vmem video output seems to be broken since version 3? I'm using some other libVLC bindings but will consider switching to yours next time I work on my media player.
Does GNU Lesser General Public License allow me to use this in closed-source commercial application without copyleft?
Ah yes that was the one I was thinking of, my mistake.
Are you sure your binary search is correct? 
You have an infinite loop in your binary search. You're lucky i found this comment, it isn't in my thread :D
Where's the infinite loop?
Yes. https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License
Your while loop is the only candidate here
Should a break stop that? I just tried a break and it didn't change anything 
Can you confirm that libVLC no longer supports changing the vout and that the vmem video output seems to be broken since version 3? Absolutely not. Vmem works fine and you can still change the vout, but it is more complex, because you need to match hw\-decoder and vout.
Did you write that algorithm yourself or did you use something like [this](https://stackoverflow.com/questions/8067643/binary-search-of-a-sorted-array) 
Yes. The tl;dr: of LGPL is "give back what you modify on VLC, libVLC and libVLC# but keep your code closed."
What's the plan for bringing this to all desktop operating systems? There seems to be a lack of cross-platform UI frameworks for C# right now, what are you planning to use? /u/mtz94
For Windows, I'm planning to support mostly UWP https://github.com/mfkl/libvlc-nuget/issues/8 for now. Maybe WPF/WinForms later if there's demand, but the focus is on crossplaform support first. Use Vlc.DotNet if you absolutely need older UI toolkit support on Windows. For Mac, Xamarin.Mac I guess. Packaging is ongoing. For Linux, I was thinking GTK as that's what Xamarin.Forms currently supports and the GTK# binding is somewhat popular. Note that the official VLC desktop app uses Qt.
I used that without the descending values bit
I don't understand 
I've never used Contracts, but couldn't you use [this overload(https://msdn.microsoft.com/en-us/library/dd990900(v=vs.110).aspx) to write that more efficently as: Contract.Requires&lt;ArgumentOutOfRangeException&gt;(!String.IsNullOrEmpty(aParameter), nameof(aParameter));
Removed: Rule 4. You'll have to make an attempt and post relevant code about specific issues. Break down the tasks you have to do. Figure out how to connect to the cameras first (just connect, don't have to read or show images yet). Then go from there. Tackle the simplest problem first and that might help get you familiar with the SDKs.
Can't you make a derived (Server) class that will contain server properties and methods? It would be more manageable. Share a common class between client and server and derive from there.
Oh my bad! I already figured out the connecting cameras part already, I just need help with the recording footage and saving into a folder. Sorry I forgot to mention that. 
I didn't read all the code, but it seems like you have a block statement surrounding your're logic. string[] countries = new string[] { "France", "Spain", "China", "Italy", "Turkey", "Germany", "Mexico", "Thailand", "Australia", "Croatia", "Greece", "Singapore" }; { ^^R emoving that block after the string, and you're code will run fine.. My guess is that you're while loop does indeed break, but it breaks out of the block, and not out of the while, as you desire. Also remember that binary search only works on sorted arrays.
Good to hear. Doubt anyone can really help you though. You'll have to dive in and make an attempt.
Then you did something wrong 😉
Did you try that and it worked? 
Okay, that is usable for the methods that I dont want to see in client (or server), but how this would solve my ID problem? My idea is that each ID is unique in whole server, so player, itemX and ideaY all derive from HasID on serverside, but on clientside they are derived from SetID. So, without multiple inheritance how could I solve this: class HasID { } class SetID { } class Item { } class ServerItem : HasID, Item { // on serverside - but cannot be done in C# } class ClientItem : SetID, Item { // on clientside } So should I use somekind of decorator pattern here or ... ? It feels clumsy.
Nvm, just tried it again. string testContent = File.ReadAllText(Directory.GetCurrentDirectory() + "/test.zpl", Encoding.GetEncoding(850)); Works fine, maybe I used a wrong encoding ;)
I would go for separate files. Server.cs, Client.cs, and common.cs or something like that. Imagine changing some code at a later point in time, and the code breaks, then you will have to remember all the 3000 #if #else stuff and witch #define that does what, and then you properly end up rewriting all the code :)
What?
Huh?
What makes you say it's not compiled?
I understand what you mean. Just keep in mind that I'm only a second year student and I'm still learning all the do's and don'ts. I know I should have added the CfrmRepeat me (logic) code to a separate class and will probably do that whenever my exams end. Nonetheless I had to google some code due to the fact that we have not yet touched this subject at my university, therefore it's not always sufficient (in my perspective). I will also update the Command method to look like yours. Thank you, I really appreciate your feedback.
Check out "CLR via C#", it has a metric ton of information on what is going on under the hood.
It's often the case for people, who try to learn programming by themselves. Tutorials are written for anyone, but given explanation might not suit some people. It's always easier when you can ask someone to explain the principles you have difficulty understanding. When such an explanation is given in a different way, maybe using a differnt example, it often helps. People who already have some experience with programming generally know where to look for additional information to help them understand new concepts, but anyone can hit a block. When that happens, I recommend asking someon with the required knwoledge to explain it to you. If you don't know anyone who could, ask online or try googling for different sources on the topic you are interested in.
worked and worked, i tested it shortly and the program could find the number i put in, and it exited nicely after. The switch statement is a mess btw.
Yeah well we all crapped the main method at the beginning, didn't we? 
\*furiously starring the repo\*
I've been up all night (my brain's a bit fuzzy), but I believe that the problem lies in this section: if (target &lt; prime_numbers[mid]) { min = mid + 1; } if (target &gt; prime_numbers[mid]) { max = mid - 1; } I think the comparisons need to be changed to: if (target &gt; prime_numbers[mid]) { min = mid + 1; } else if (target &lt; prime_numbers[mid]) { max = mid - 1; } 
Nice, thanks!!
Instead of Directory.GetCurrentDirectory() + "/test.zpl" you better use the static factory method ``Path.Combine()``: Path.Combine(Directory.GetCurrentDirectory(), "test.zpl") 
Avalonia?
Except you are redirected to a page that isn't a paywall, but I'll characterize as a [whine-wall] (https://practicaltypography.com/graylist.html) telling you to type the domain name into the browser and without any easy means to get at the originally linked info. No thanks. 
Good info. The one suggestion I'd make is to either quickly explain or link to an explanation of what Docker and Kubernetes are, and how they fit together. People "getting started" won't always know.
&gt; Use Vlc.DotNet if you absolutely need older UI toolkit support on Windows. What's the chance of going UI agnostic, so we could grab the frames ourselves or something? Pinvoke, memory copies, anything. 
Thanks for the feedback :) Good p0int(s) I'm hoping readers will either have some basic understanding of what Docker and K8s are or they would google them up. We'll see. If needs are, I'll update the article. Thanks once again for pointing something which I didn't preassume. Meanwhile, why not subscribe...there a lot more fun to come :)
There is a $60 Unity VLC plugin on Unity's asset store. I'd love to use this instead, but is there a sample for how to integrate it with Unity? I see the readme mentions game engines. 
/u/mtz94
We will publish soon a new Unity VLC Plugin, that will use libVLC# But it will probably be dual-licensed: open-source GPL and commercial.
Didnt have a look at xamarin for a long time but the last time I used it it looked like a bad version of Android Studio. And Android Studio supports only java. I dont think Microsoft will work a lot on Xamarin, wheres the point in making software for android / IOS if it isnt in the hands of microsoft?
Does this support streaming protocols like rtsp and hls?
Yeah that was my thought, too. His implementation searches in arrays with descending values
Thanks, I will. This was just to test it out, it's not in the actual project.
*starring intensifies* 
Does this work without having to load the DLL from an existing VLC installation? Last time I used libvlc this way, it had issues if the full VLC install wasn't present, and it had to be loaded from its install path. That was probably a 2.2.x version, a few years ago, though.
You are using the same class for domain objects and bussines logic. Decouple them. Use POCO objects (only properties, no methods) and create server side services to handle these objects. class ServerItem : **IServerItem**, Item { // on serverside \- but cannot be done in C# ===\&gt; But you can use Interfaces
Of course.
We will have a libvc-nuget package, so you just ship the VLC libraries you need.
You can, of course.
Awesome. That's what I was hoping for. Thanks!
Having EF generate observables kind-of removed the "M" (Model) out of MVVM. Ideally, your VM will have properties and collections, and when needed, move the data from the Models to VM and from VM into the Models. It does mean duplicating some properties, because a lot of times your VM will have many of the same properties as your Model, but over time you'll really start to see value in having your Models separated from your VMs. For one, being about to make properties strings in your VM then parse and/or validate them before moving them over to their integer counter parts on the Model is really easy to do in the VM, without having to get super complex writing binding converters for your xaml bindings. Try to keep your VM limited to the presentation properties it needs, and let your VM have properties that represent what you need to show, not necessarily what needs to be stored. Imagine a VM that is for a read only view of an Employee, and they want to show the employee's full name and the employee's manager's name. in your Models, maybe employee has a First name and Last Name, and an FK to the manager record. On your VM you would just have EmployeeFullName and ManagerFullName as observable properties. When you load up your VM, you just assign EmployeeName to FirstName + LastName and assign ManagerFullName to the First+Last of the Manager record. Again, the goal being that you make your VM as UI friendly as you can, while your Model stays Data store friendly. So my advice is to not bind your UI directly to collections/objects returned by your EF, allow those Model-&gt;ViewModel layers to be separate. I hope this helps.
I am not sure if this pattern is useful in this example, though I must admit I am ignorant in the ways of static code analysis. If static code analysis is ran, does it emit compiler errors or does it throw errors during runtime? I am assuming the former or both. If my assumption is true, then static code analysis in *this* example would be redundant. What static code analysis *should* do, I think, is to emit compiler erros when it detects a certain condition about the code itself. For example, in your example, a unit test can test to make sure an exception is thrown during runtime, but static analysis can make sure that we are validating the input in a method (by checking to see if each parameter is checked appropriately and that, upon failure, the code throws an exception). It is basically testing as if it has to parse the actual code file first (which I think is mostly true about static analysis) in order to detect unfavorable conditions about the quality of the code. Unit tests detect the functional quality of the code. Again, all of this is my opinion and it is likely couched in ignorance of static code analysis.
I'm not binding my UI directly to EF, but rather I want my VM to get an ObservableCollection out of EF to be bound to my View. Normally I would use TableAdapters' DefaultViews and loop through those records to generate an ObservableCollection in my VM, but EF already has those Objects, I just want to load them into an observable collection
Sure why not, ReactiveUI, Elmish.XamarinForms... anything is possible.
Some code has been done in the past to integrate libvlc with unity https://github.com/nimag42/UnityVLCIntegration. That's on the roadmap, PRs welcome :)
i completely agree with @atokamak. Use POCOs with services/engines/helpers that do the "real work". 
Yeah so, I'm packaging the native VLC libs (dlls/dylib/so) for each platform on nuget in the form of VideoLAN.LibVLC.{Platform} here: https://www.nuget.org/profiles/videolan Directory tree of what it contains: https://github.com/mfkl/libvlc-nuget/blob/master/tree.md Cherry pick plugins with MSBuild in your .csproj: https://github.com/mfkl/libvlc-nuget/blob/master/cherry-picking.md
You may have a look at https://github.com/ZeBobo5/Vlc.DotNet/blob/develop/src/Vlc.DotNet.Wpf/VlcVideoSourceProvider.cs Though it causes performance issues sometimes to go this way.
 var items = ef.Things.Where(t =&gt; t.IsWanted).ToList(); var collection = new ObservableCollection(items);
That seems easier than what MSDN wanted me to do lol. They wanted me to go into the generated code and change a lot of lines to ObservableCollection and whatnot. 
that msdn article was probably trying to show you how to bind directly to the datasource so that changes to your database would get automatically propagated out via EF. this is what /u/dumpsterninja was talking about. my code above just makes a new observablecollection from a particular set of results. you'll have to modify the collection on your own. it's not tied to EF or your database at all.
My advice: If you come against a wall, try using the concept in a meaningful way. For programming, usually this means opening up an empty project, and _only_ using that concept. On loops, this means opening a new project, and using loops using concepts you completely understand. **DO NOT** use arrays - that's an extra concept you have to keep in mind. **Good experiment for beginners** Put this in your code. Use different numbers in the loop. Do different things with i. &gt; for (int i=0; i&lt;20 ; i++) &gt; Console.WriteLine(i); **Bad experiment** This experiment has a few bugs in it. The important takeaway is that you should mix the fewest concepts as possible. &gt; int[] data=new int[37]; &gt; for(int i=0;i&lt;data.Length+1;i++) &gt; Console.WriteLine(data[i]); 
Have you tried this? https://stackoverflow.com/questions/2889392/adding-c-dlls-to-a-c-sharp-project 
I've been digging up stack overflow for the past hour, unfortunately everyone seems to be dealing with simpler cases than mine where their structs only include "normal" fields without any function pointer.
If you have an MSDN account, you can probably reach out to MS for guidance for this niche case. Something else to consider, you can write a small C++ dll that hides the behavior of the pointers and reference that dll. 
; )
Not sure if I understand it correctly but you could do it like this interface IId { public ID { get; private set; } public GetId(); } abstract class Entity { public abstract IId Identity {get; set;} } and then public class ServerSide : Entity { public IId Identity {get;set;}= new ServerId(); ... } public class ClientSide: Entity { public IId Identity {get;set;}= new ClientId(); ... } 
If `void*` is an unknown type, you can replace it with an `IntPtr`. If it is one of multiple types, you may then use the `Marshal` class to manually marshal its contents (e.g. `PtrToStructure`). You can automatically marshal directly to a `string` if it's ANSI (local code page) or UTF16, unfortunately UTF8 (and anything else) needs to be manually marshaled and decoded. The marshaler can also automatically marshal native function pointers to and from managed delegates. The only thing you need to take care of is prevent the delegate from being garbage collected by keeping it referenced somewhere. https://docs.microsoft.com/en-us/dotnet/framework/interop/default-marshaling-behavior https://docs.microsoft.com/en-us/dotnet/framework/interop/marshaling-data-with-platform-invoke https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.unmanagedtype
What's the difference between working and not working? You haven't mentioned what the difference in behavior is.
Good point, my bad. Working, it draws rectangles to the drawing area. As said, this only happens when I set a breakpoint on the line that does the actual drawing. Not working, which is whenever it's run without a BP, no rectangles are drawn. 
My suspicion would be that there's something relating to the thread that somehow doesn't have time to start when running normally
The thread itself runs fine, the drawing code is the fourth or fifth instruction run, about 20 seconds after the program starts. 
Hmm, in your MainForm constructor you attach a Clear event to the Paint eventhandler. I wonder if that's running after the handler you add in Draw() and clearing out your rectangles, so you only see them if you have a breakpoint, since they'd be cleared immediately after the loop ends and the next handler attached to Paint (the Clear handler) is called.
Every frame you're subscribing another event handler to the Paint event, so you're going to end up with hundreds of handlers on that event if this runs for a while. I don't see anything actually forcing the _drawable to redraw either, you're just adding handlers? 
Invalidating will result in other drawings also removed.
What's the basic procedure for getting individual frames out of a video? I maintain a [portable graphics library](https://github.com/mellinoe/Veldrid) for .NET, and it'd be interesting to load up data with libvlc, send it over to a GPU texture, and play it in a portable manner. Is that level of info exposed from libvlc?
Drawing on a form/control is always temporary. You should redraw everything in the `OnPaint` event.
Assuming that the variable _drawable in the MainForm constructor is the same _drawable as in the Draw method, I'm 99% certain the problem is that event handlers are run in the reverse order in which they're registered (by convention only so not 100% guaranteed). This means that the event handler that draws the rectangles in the Draw method gets executed and draws the rectangles but the last handler to run is the one setup in the constructor and that erases everything again. That said, everything /u/Ravek said applies as well.
More details to the question are here [https://stackoverflow.com/questions/50690023/graphics\-drawstring\-how\-to\-remove\-undo\-redo\-it\-after\-drawing\-it](https://stackoverflow.com/questions/50690023/graphics-drawstring-how-to-remove-undo-redo-it-after-drawing-it) 
Yup, This was it. I misunderstood how the drawing worked, I thought I had to do the event code for each draw. This combined with /u/Ravek's answer solved it for me. I moved the event code from Draw() into the constructor, and I found a method in _drawable that forces a redraw(Which annoyingly isnt in the API docs, I should file an issue on that). Making those changes and things work as expected. Thanks to both you, /u/Enlogen and Ravek!
Removed: Rule 4, Rule 7.
Time to download it and never use it for 2 years!
Explains why they wanted to buy git now...
[Official blog post](https://blogs.msdn.microsoft.com/visualstudio/2018/06/06/whats-next-for-visual-studio/)
If you want to target IOS you have to have a mac. If you want to use visual studio you have to have a PC. Jet Brains has a nice C# ide now though so visual studio maybe isn't all that important. Just get enough RAM (16gb is plenty) and a fast SSD. 
Yay 
Imagine you have a list of strings, and you want to count the total number of letters in all the strings. Imagine you have a bunch of rows of a grid, and each row has 10 columns. Imagine you want to visit each cell in the grid. 
Is a good processor important as well?
kinda, but a machine with a fast SSD is gonna hve one that is fine, i5 or i7 will be fine. Quad core is better than 2. But you don't have to have the latest and greatest. Not a big difference. 
What would that code look like?
Can anyone break down the reasoning behind releasing a new IDE every 1-2 years?
lets say you wanted to count how many 'x' characters are in a list of strings. Approximate pseudocode: int cout = 0; foreach (var s in stringlist) { foreach (var c in s) { if (c == 'x') count++; } } 
The ways that we develop things and the technology we use (outside of the IDE) evolve very quickly. The IDE is a bridge between the developer and these methods and must be updated to allow developers to capitalize on new methods and processes.
So you think if I get a quadcore i7 macbook pro, with 16gb of ram and apple's ssd, it's going to perform well? Would you advice that choice, rather than an i9 Asus Zenbook Pro? I'm actually hesitating between a macbook pro and a good asus zenbook or a dell xps...
Millions of users.
Visual Studio for Mac is a thing, but it's really just a rebadged Xamarin Studio. Trying it out for work and it's definitely not got feature parity with Windows. Here I come Git command line...
Yes it will perform well, and saves you the trouble of having to find a used mac to do ios builds. The only downside is whether you can find an editor/ide setup you like. I'm not familiar with the best non windows options there. 
I’m struggling not to feel cynical about this. VS 2017 still has performance issues. 
Will it take up even more space than before?
Don't tick packages in the setup you will never need. 
&gt;Because I could have made that triangle without the need of nested for loop. The fact that there's a different way of doing something has no significance whatsoever. There are always dozens of ways of accomplishing a complex task in most languages. Different methods have different benefits and drawbacks, and there will never be a solution that's the *best* for *all* situations. If you ever catch yourself thinking that you don't need to learn something because you already know a different way to do it, remind yourself not to fall into that trap; it's valuable to know many different ways of doing the exact same thing. &gt;However, where would I apply this? How do I know when to use it? Or is it just intuitive? You use a loop when you can slice a function into a smaller function applied to each element in a given set. If you can divide that set into smaller sets, nested loops can be useful. Think about the pixels in a screen; they can be divided into rows or columns, so a function applied to each pixel on a screen can be thought of in terms of applying that function to each pixel in each row on a screen. Think about the students in a country; to apply a function to each student, you might have an outer loop that iterates over each school district in the country and an inner loop that iterates over each student in the current school district. The nested loop is especially useful in cases where some part of the logic is applied for each element of the outer loop and some part of the logic is applied for each element on the inner loop. Consider drawing horizontal stripes in alternating colors on a computer screen. If your outer loop is iterating over the rows and your inner loop is iterating over the pixels in the row, you can have the code that chooses the color in the outer loop, and have identical code in the inner loop regardless of the color of stripe you're drawing. This is complete pseudocode, but: public void AlternatingStripes(Screen screen) { var color = "Blue"; for(i = 0; i &lt; screen.Rows.Count; i++) { if(color == "Blue) { color = "Red" } else { color = "Blue" } for(j = 0; j &lt; screen.Rows[i].Pixels.Count; j++) { screen.Rows[i].Pixels[j].Color = color; } } Now consider how different this code would need to be if Screen had a Columns property with columns of pixels instead of rows; the color would have to be different in each iteration of the inner loop. The order of nested loops is a critical part of their performance.
I would like to see incremental update model. Imho, they need to move faster. 
&gt; The IDE is a bridge between the developer and these methods and must be updated to allow developers to capitalize on new methods and processes. In simpler words.....money. 
What? Most of VS users use subscription so MS doesn't get any more money from new VS releases.
In my experience, it has performance issues on lousy hardware. Any U series Intel core processor, even the i7-7700U, runs VS like shit 
It's what they already do with VS 2017 (there's a new patch update every couple of weeks, and a new minor version every two months or so), and I expect them to continue that update model with VS 2019. I could even see them release a "Visual Studio One" down the line that does away with the biennial major upgrade, much like they did with Windows 10.
$500 per copy?
That is somewhat false my dude. Depending on which language, framework and project size it can lag on a ridiculously strong machine as well. Example: I now have a threadripper 1950x, 32gb ddr4 ram, an m.2 disk and two ssd's and can still lag a lot when just setting up basic structure for a .net core system. However, older projects (targetting .net framework 4.6.1) seems to work really well no matter how large the solution is 
But I'm totally going to get into nokia app development this year after I finally build that game I've been dreaming about in Unity. Better grab two years worth of Android sdks while i'm at it.
That‘s easier said than done. There is a whole bunch of dependencies. I recently was forced to switch from java ( IntelliJ I still miss you) to C# and Visual Studio 2017. IntelliJ and one JDK did not consume 1 GB Space, VS2017 and .net 4,6 the up at least 5 to 8 GB. There are so many features: - to complicated to be comfortable - hidden behind a uncommon wordings and submenues The API documentations web pages changed several times during the past years so googling often brings up old / outdated pages. Some of these pages automatically translate to my native language which is nice and funny but not helpful. Na, I don’t like it 
The default installation for 2017 was really small for an ide. You just install the stack you're working on and then it leaves most of the rest out. If you never use f#, it won't install any of its tooling. If you don't use azure, it won't install any of its tooling etc. 
It is Wednesday, my Casablanca dude! I’ve not had sluggishness in VS since the VS2012 days when VS sucked massive monkey balls 
[removed]
I wanna be able to not install on the C drive
What, besides your old habits, do you actually miss from IDEA?
Use [ Dependency Walker 2.2](http://www.dependencywalker.com/) to locate the entry point within the DLL of the method that you wish to call. Then use [DllImport ](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.dllimportattribute.entrypoint(v=vs.110).aspx)to load the DLL and call the method.
its either free or already paid for. This is not the reason.
they already get the money or its free. so no.
Sure it‘s got a lot to do with habits. I liked and miss: To query SQL server AND Oracle Databases from my IDE. Easy XSD verifications and validation. Creating a diff of two commits of one document that don’t follow up on each other is quite a pain. I‘ m not a full time developer. Coding takes up 10 to 30% of my daily worktime. VS may have it‘s advantages but it‘s also, as many things from MS, packed with all kind of stuff one might need, so one does not always see what’s really needed. 
Via what other method would the world provide us with nice things outside of the use of this 'money' you disdainful speak of?
And it's still relatively buggy. I'd rather they perfect the prior release before giving something new. 
If this is only reason we wouldn't have all of the 'Community' free editions.
I don't think you're listing anything beyond the realm of possibility for VS. I feel you though, getting used to a new IDE takes time.
I am quite happy with the way they rolled out Visual Studio 2017 with the quick updates (others don't like it so much and prefer a more stable environment). Personally, I expected them to just drop the number and call the next release Visual Studio for Windows or something like that.
Will i be able to port my win forms apps from vs 2017?
i'd really like to be able to install vs on a drive that isn't my os. kinda takes up most of my ssd.
I mean, VSCode gets an update every 1-2 months. It's rather nice to have a much quicker update pace, that way one gigantic update doesn't break everything anymore. 
It contains general explanation on ASP.NET Core and EF Core. Easy to read but if you already know these technologies, you probably won't learn a lot...
I thought so too. I don't get why they're doing continuous releases like that when rolling releases seems to be the latest craze.
I agree. I just feel like driving a bus but all I needed was a car. 
Because of better earning money 😉
Doubt it. Just look at Adobe and their creative suite. 
If you're interested in game development, look for games written with Unity with an active modding community; many games implement mods as scripts written in C#.
Don't you think that if the reason would be a technical one, that they would explain that? (would also be some strange problem that arrives every two years 😂) But honestly I don't care - my company pays for it! Personally I wouldn't go with MS but give Rider a chance... 
Where do you declare/initialize `inputData`?
I've always hated that about VS, but for my use that's really the only problem I have with it so I can't complain too much.
I declare it up top above the form initialization. It is done as so: protected int[] inputData;
For formatting, make sure each line has 4 spaces in front of it. You need to initialize `inputData` to a new instance of an array. For example: protected int[] inputData = new int[1]; That will make it an array that has 1 element. You may need to make it bigger if you expect to have more entries in it.
They do deliver incremental updates....lots of them. These 'productized' releases are *major* releases. So personally, I think they're moving pretty damn fast considering the scope of VS. The ASP.NET Core stuff is pretty hot shit, and so is real time AI on your code. But I agree with you on the model as a whole. Can't we just get to Visual Studio....period? Like VS Code. No more separate releases, just constantly update Visual Studio.
Thank you for your help. 
Eeh. I like VisualStudio. When I want a lighter application I use VSCode. Don't see the need for Rider. 
I don't think Rider is supposed to be lighter alternative to VS. It is full blown IDE, not just a text editor. As to why would we need two different IDEs, they are just competing products. For me personally the fact you can use Rider on Linux is reason enough.
I hope this one starts even slower!
The most recent update actually gives more control for this. A lot can be installed on another drive.
Live Share sounds really interesting, although I’m not sure how useful it’ll be.
You running resharper?
They are constantly update Visual Studio as well.
I used it today to work with a remote coworker. It performs very well and is a lot faster than a screen sharing app. He shared a visual studio session and I joined using vs code.
The first example doesn't take a nested loop. `var total = 0; foreach (string str in my list) { total += str.Length; } return total;`
Why do you need a Mac? I thought the beauty of xmarian was you can do it all from one OS
Sounds promising. Might be useful for speeding up programming, presuming all involved agree on some things.
Why would you not be able to???????????????
I actually just got a P52s with an i7 8520U in it and it runs a lot better then my 7 series did
You could have an extension method on the entity class. public Entity OrNullIfDestroyed(this Entity @this) { return @this != null ? @this : null; } Then do ent.OrNullIfDestroyed()?.Debug_Print("Test"); That's probably not better than just doing normal if statements though. 
64 bit, please.
But Rider is written in Java and that is such a turn off.
That is actually what they do with updates. I think that having a new version every year allows them to make the sweeping/breaking changes needed to fix or improve fundamental issues.
I still don't get the whole UWP world. I mean that whole ecosystem seems so massively sandboxed that I have no interest in it. I'm also a C++ guy, so that whole C++/CX, C++/WinRT just confuses me. 
It might be great for pair programming, but the last thing I want is 2 or 3 other developers up in my business while I'm trying to code. FFS
I want to develop native c++ GUI applications! I would love to ditch Qt!
 &gt;I still don't get the whole UWP world. I mean that whole ecosystem seems so massively sandboxed that I have no interest in it. Access a file in a directory. Do I need to open a dialog to ask the user? I think there's ways to not need to do so. Adobe XD is a UWP app and it doesn't require those dialogs. &gt;I'm also a C++ guy, so that whole C++/CLI, C++/CX, C++/WinRT just pisses me off. Agreed, it's probably easier to just pick up C# 
There are situations where you need C/C++. 
This. As the OP suspects it's a timing thing but it'a also likely an event thing as u/Ravek points out.
It's quite clever what they're doing. Using the 80/20 principle, if you abandon all your software once it's 80% finished, you can maximize your productivity. 
I have no perf issues. But then I don't have resharper installed either like a lot of people with performance issues.
I use .net core all day long without any issues at all. Something unique to your setup is fucking you.
The null conditional operator is using reference equality to check for null. You are not going to be able to convince it to use your custom rules for null equality. The same will be true of the new ‘is null’ variant of the is operator.
you can do all of them without loops! 
the final build for ios requires a mac. because apple
Do you need project ideas?
C++/cli is perfect for melding between the c# world and the native world. Often much easier to write translation layers that way, especially for large systems.
Sadly Microsoft stopped supporting it.
So stupid...
The Samsung Series 7? Which processor did it have?
They keep chipping away at this, it's been 20 years almost, and they're never clear on wtf the issue is.
Hi Eric, You may want to have a look at the WPF control of Vlc.DotNet which does exactly that: https://github.com/ZeBobo5/Vlc.DotNet/blob/develop/src/Vlc.DotNet.Wpf/VlcVideoSourceProvider.cs From libvlc, that means [libvlc_video_set_callbacks](https://www.videolan.org/developers/vlc/doc/doxygen/html/group__libvlc__media__player.html#ga612605f2e5c638d9f4ed59021d714bf0) and [libvlc_video_set_format_callbacks](https://www.videolan.org/developers/vlc/doc/doxygen/html/group__libvlc__media__player.html#gafbeef69fb76b4c4d6cb25145aee1ad99)
How are you converting? Check out JSON.NET as it makes things super simple.
&gt; I still don't get the whole UWP world. What's so hard to understand about it? The fundamental idea is that users should have control of what resources are available to applications. To that end, the Windows Runtime implements a sandbox that abstracts away hardware, the registry, and the filesystem, among other things, and only allows the application to access them if permission is given. This is a *good* thing. However, these days UWP also supports traditional desktop (non-WinRT) applications and APIs. Anything you can do in a normal Windows application, you can do in a UWP-bundled desktop application. Many WinRT APIs are also available to desktop applications.
No 7 series i7. 7700HQ I believe. Was in an xps 9560
 I'm not sure, is it effective using a many cores CPU in IDEs like VS?
So you went from a quad core i7 with 8 threads to a dual-core i7 with 4 threads and I’m supposed to believe VS runs better because you have an i7-7700U?
I have a Trello board that's full of half cocked ideas that should probably never see the light of day
Get community edition silly. Unless you're developing something you plan to sell. Then just get professional. Yeah its several hundred dollars, but it's a business expense.
Hell to the no! As much as I like resharper, it most of the times affect how the overhaul experience is. However, I do sometimes activate it for general syntax restructuring
Yes, please! :)
I don't think so. I'm experiencing this on three different machines. It may (however) be something to do with intellisense (specifically for .net core)
Do you use the same extensions on those 3 machines? Which extensions?
In general I do feel a boot in development workflow (since IDEs can spawn an amount of worker processes). But I do think you benefit from having ~4+ cores and a tad bit higher clockspeed then a lot of cores
I do build stuff for sale. Business expense or not, that's $500 I have to pay every time there is an update. Generally, there isn't that much new with each release that justifies the price. Years ago, Microsoft used to offer pretty reasonable upgrade pricing and had pretty reasonable pricing in general, because there was competition. They really have no competition on the Windows desktop anymore, so they got rid of upgrade pricing and just charge $500 with each release. I could be dishonest and use the community edition, but since I do use it for commercial purposes... I get hit with the $500 charge each time. Wouldn't $150 be a more reasonable upgrade price?
I hear ya! I was around when the first version of .net was released (I've just started programming back then). And all VS versions have been sluggish, depending on the machine you were using as well as which frameworks etc. I think VS2015 is the only version which wasn't that slow. For me at least
Fair enough. It's fairly cheap in contrast to some other IDEs. My company still uses Delphi and for some reason upgrades every license when they do. Its several thousand dollars a license. VS looks like a bargain compared to the monstrosity that RAD studio is.
Shit sorry no, 8650U. Quad core. So the 7th Gen HQ vs an 8th Gen U series. Some of that could also be new windows install and the fact the 9560 had terrible thermal scaling though.
Yepp! I only have resharper installed, but it is mostly deactivated due to some indexing issues (that however is related to a single project). Other then that, nothing, just plain and simple VS.
I would completely disable resharper honestly. I disabled resharper completely about a month ago and haven't looked back, performance for me has been so much better without it it's ridiculous. 
2017 was a significant break from 2015. Their plug-ins management was notably different.
Wow. I had no idea Delphi was that high. The last time I used that was, ahem, 1996. It was fairly cheap back then. I guess they have a captive audience and are sucking out as much money as they can. Are people building new projects using Delphi? To be fair, one reason I feel the price is high is that most of my work is on Linux these days, so VS is fairly under-utilized. Still, I have some Windows code I have to build, with one project utilizing DLLs from several different projects. To build that project and dependencies, I need three different VS versions.
The ultimate dream would be for it to work stand alone. VS install are messy. Compared to every other OS, Apps on Windows requires way too much "installation" and you can't never uninstall them cleanly. 
We have a core program that is built in Delphi. I convinced my boss to let me use a modern language to build a modern app. We have a few in house utilities built in it, but I'm going to strongly argue that any future PC apps should not be done in Delphi. My way of getting us to phase Delphi out. It simply isnt keeping up with the times like they should if they want to survive.
Seriously!
- Which line in particular is failing? - Variable names for collections/lists/arrays should be plural (`numbers` instead of `number`). - Your code makes the assumption that it always gets at least two elements on each line of the file. If you have a blank line in the file or a line with only a single value, that assumption does not hold true and you'll get an error when trying to reference `number[1]` - Arrays have to be initialized, just like C# lists. Having just `protected int[] inputData;` means that you've said `inputData` will eventually be an array, but right now the value of `inputData` is just `null` and it has no actual storage space. - TryParse is a good idea when reading input and converting to a specific type. - While building your list of values from the file, doing it as a List&lt;T&gt; will feel more natural than Array&lt;T&gt;. So possibly: var inputData = new List&lt;int&gt;(); while((var line = sr.ReadLine()) != null) { var lineElements = line.Split(','); if (lineElements.Count &gt; 1) { Console.WriteLine(lineElements[1]); if (int.TryParse(lineElements[1], var out parsedValue)) { inputData.Add(parsedValue); } } } (Some of this may require C# 6, like `var out parsedValue`. There's probably some other changes I would make in a code review regarding variable names.)
Assuming that the client software communicates with the server software using some over-the-wire format like HTTP request/response. You will need a minimum of three C# projects in your solution. One for the consumer of the API, one for the server of the API, and one project to hold the classes / extension methods used to communicate. Let's call those "Client", "Server" and "Core". The "Client" project is allowed to reference "Core". The "Sever" project is allowed to reference "Core". But neither "Server" or "Client" are allowed to reference each other. By having three separate projects in your solution, the Client project could eventually get spun off and the Core project could start generating a Nuget file to be imported by the Client project. The classes in Core should only be what is actually being transmitted over the wire. So you have PlayerRepresentation and then PlayerResponse (what server sends to client) and PlayerRequest (what client sends to server) that inherit from PlayerRepresentation. Doing it this way helps clarify how the client/server will communicate and what information they will send. The Client project can probably work directly with PlayerResponse. But it may also need to copy that information into a PlayerViewModel for presentation to the UI. And then construct a PlayerRequest to send back to the server. In Server, your database model will be called Player and inherit from PlayerRepresentation. In most cases, you will just let the database manage the IDs (which get populated after a call to .SaveChanges if you use entity framework). If you must generate IDs in code, Guid.NewGuid() is preferred over just incrementing a counter variable. 
Not that, I downloaded two years ago the 2017 version to learn c#. Never got to fully understand it.
I doubt the rolling release iterations will be as frequent as Visual Studio Code due to the sheer size of the Visual Studio, but Microsoft really seem to be making this release strategy work.
People gave you a lot of good answers about learning programming so I won't repeat that. Instead I like to point out an observation I found out in some study and verified on my life many times. Imagine a scale that has logic / system thinking on one end and empathy / emotions on the other. People tend to be closer to one side of that or the other. What this means is that some get stuff like programming, math, or learning complicated rules of a board game easy and in one go. The do not spend a lot of energy and get fun in the process. They do not however get fun from stuff like being likable by a lot of people or trying to understand other person mood and what makes them tick. And they spend a lot of energy to do that. They feel themselves bad in a situation when they need to interact with a lot of people as part of the job. I am one of these people. But there are people closer to the other side. They are great in being nice to people, great on roles that require a lot of communication like teaching, psychology, sales, management etc. They do not spend a lot of energy on that and get fun from this process. But when we gather to play a board game it rakse significantly longer to explane game mechanic and rules to these people. And most of the time they score lower than all the players from first category. Stuff like programming math and physics was difficult for them on school and consumed a lot of energy to at least keep up. But that excelled in stuff like art, history, essay writing etc. Now this doesn't mean that some people can't do some stuff. But it does mean that people find different aspects of life very energy consuming. And whlile anyone can excell in anything given time it is a lot more efficient and fun to grow in the field that is more suited for the way your mind works.
Maybe learn Java and then compare? 
I could use some 
I'd like a modern C++ library in which we can write cross platform UI that doesn't rely on macros and other holdovers.
I have to admit this is the path I selected now. When I progressed, I noticed that there is very little similarity with client and server objects, only data is similar, and even that is bit different as I want to load on demand. So many times objects with references are just ID's until they are fetched.
Yes, this is good idea. In that case I would not use interface at all, they would add very little in this case (thats why I didnt even mention it). Atm my implementation is so that even data of object is different (eventually), so I went with different code for both. I hope I wont I get trouble with this. If I do I have to change.
Thank you for your response. I am not sure if I am quite following. Is later example valid C#? public IId Identity {get;set;}= new ServerId(); Never seen that notation. Not sure if that goes through from Unity version C#. Anyhow it does not solve the multiple inheritance problem, but thats okay for now as I am planning to go with separate files, due data reasons.
As C++ guy you should be happy, even with language extensions, Windows is the only consumer OS where C++ still has a relevant place regarding support for writing applications on their native GUI frameworks.
They changed their mind due to pressure, C++/CLI might be coming to .NET Core as well. On UWP it is not required, given how it is built around COM.
That is what UWP is for.
Yes, thank you for your response. Actually I am using TCP/UDP protocol, no HTTP or WebSockets, its too heavy and useless for this as I am planning this to be real launchable program (windows/apple/linux). The idea itself of core, server and client is good. Along with dataobjects (or I think you also refer them as PlayerRepresentation) given in different response this I think it is correct way to go. Have to admit I have chosen another one :) due few reasons, explained above. There is no DB it's too slow, game is about 1\-2 hours game, more like RTS game. If there will be something I will be using something like in memory dictionary like Redis. Guid.NewGuid() implementation is pretty much same as mine (just static member generating id numbers), however with mine I have bit more control over the numbers as I want. Also Guid is [pretty heavy](https://referencesource.microsoft.com/#mscorlib/system/guid.cs,b622ef5f6b76c10a) thing for this where I just want id for game and it needs to be unique all that 1\-2 hours. Good thing to keep in mind. I tend to forget things, thanks for reminder.
I really wish they’d extract more of this stuff into NuGet packages instead, or to allow us to multi-target more easily. It’s great that they’re still providing bug fixes for ClickOnce and WinForms, but they’ll take years to reach a broad enough customer base to justify retargeting to a newer framework. Some of our enterprise customers still aren’t even on 4.6, much less 4.7.
I agree with /u/usefulshrimp use [Json.NET](https://www.newtonsoft.com/json). Here is the 2 save examples: * [https://www.newtonsoft.com/json/help/html/SerializeWithJsonSerializerToFile.htm](https://www.newtonsoft.com/json/help/html/SerializeWithJsonSerializerToFile.htm) * [https://www.newtonsoft.com/json/help/html/WriteToJsonFile.htm](https://www.newtonsoft.com/json/help/html/WriteToJsonFile.htm)
Thanks, unfortunately my most specific problem right now is how to map that C++ struct containing function points to (I guess) a struct containing delegates. Is that even what I have to do?
Thanks, I'll give it a shot.
Android - VS on Windows, iOS - VS on Mac + Xcode IB. If you want to run it all on one machine, look into running a Mac in a VM. Make sure you have at least 1TB SSD if you do though. Other than that, more RAM/faster CPU would def help but it is not critical. Source: experience
Your code doesn’t work because `null` will never be of your type, so your type-specific overrides can never apply to `null`.
256 is plenty
I'm curious: what kind of projects do you build that would benefit from a 64 bits version of VStudio ? 
Maybe a solution for you : you can install VStudio on a VM and store that VM on an any drive, including an external one. Some drawbacks though : I didn't figure out yet how to publish a web app to azure from inside a VM...
Mac VM + Win? You can do it with even less, but would you want to? You will end up spending a lot of time resolving storage issues instead of code. 
Well, it isn't just a newer version, it's basically fully new program, im pretty sure that they will allow to upgrade projects, but if they don't i think im okay with vs 2017
Before you look at code structures, look at what you're doing and try to view it in simplified English. So, when you have "I have a number of things and I need to do the same process (P1) to each thing," that's a loop over the things (we'll call the list L1 and the individual thing T), calling a function (we'll call it F1) on each thing. Then, if each of those things (each T) is composed of a number of sub\-things (S), and you need to do some process (P2) on each sub thing, then P1 should \*also\* have a loop (P2) to work over each S. That's a nested loop. L is a list or other enumerated type. P1 and P2 are functions. T and S are objects. Now, if it's a tree structure with an unknown depth of items all with the same structure, then T=S and P1=P2, and that's recursion. In either case, whenever you make a loop, pay attention to the end condition so you don't accidentally make an infinite loop. When designing your loop, create the end condition first so you know there is one, then write the rest of the loop. (Think "First I will make sure this will not loop forever. How does it know when it ends?" then worry about what it \*does\*.) 
There is also Newtonsoft.Json. Which seems to be the most popular json library in dotnet
No not drag and drop functionality. I don't mind if it does, but I am only interested in having a preview of the UI while I work on the UI. If it uses xml, or something, then that's great. I know MonoDevelop was Drag and drop for the UI, and that's ok. I just prefer having a live preview of the GUI so that I can make it look how I want, without having to run the program a lot more to make sure it looks how I want.
To be honest, I don't think most of the people screaming "64\-bit" even know (which is probably your point when you asked). They just assume 64\-bit equals faster. The dev team have put out a number of blog posts over the years that explains how this does't necessarily hold true. There are some arguments in favor, but I strongly suspect most devs wouldn't see a huge difference.
Solutions with 150 projects, and heavy use of SSDT. Constant out of memory errors.
It does, and I have it too. But, does it allow me to design a graphical user interface for my software applications? If it does, then is there a way for me to have a live preview of the GUI that I write, for the software that I write? 
plugin? Is that the name of the plugin? The four words you just used confused me.
Which distribution of Linux are you using?
Finaly the've launched a real tuple!
What do you mean?
A lot of beginner programming courses teach Java and I know both languages and they are very similar in syntax and structure. I thought maybe if C# wasn't working out for you, maybe try learning Java and then apply that knowledge to learning C#. It's kind of a silly idea but it's how I learned and just wanted to suggest it. 
Yeah, I am surprised they did not force everyone to compile their locally developed code in the cloud. “Visual Studio As A Service”. To better serve you and require a constant on and surveillable connection! Maybe there are still developers out their running things and do not want an extra 3 seconds of delay to get shit done. The cloud is not the answer.
How do I automate things for the user? Can I turn that shit off selectively for a single executable?
That's a large solution. 
It's not nearly unheard of in bigger shops, though. 
I'll try it this summer
Automate what, exactly?
Cool. I wish you good luck. My recommendation is to read a book about it and read the accompanying documentation. Try to do something with each thing you learn to retain it. 
Firstly I'd like to say that this comment is amazing. The line failing was the inputData[x] = Convert.toInt32(number[1]); Got it. I'll change that variable to numbers Should I put another try/catch for that part that thinks there's only 2 values per line or should I make an if/else? Thank you for this comment. It truly is really helpful. 
Your right, I have read some of these blog posts and it seems that most projects would not benefit a lot (or not at all). But some would. 
No 2018?
That's the same library
Removed: Rule 4. Maybe repost it but include examples of the classes you're having trouble with and the code you're using to serialize and the errors you receive.
I think I made it, your answer was really helpful. I posted the (alleged) solution under [my stackoverflow question](https://stackoverflow.com/questions/50723937/how-do-i-load-a-struct-containing-function-pointers-from-an-external-dll/50739449#50739449). Thanks!
Maybe you should not apply your experience to others? I have vs constantly near 2gb
It is a lot, but can definitely be reached with liberal use of microservices.
Maybe you should not apply your experience to others? I for example have vs constantly near 2gb
I just tried using vs without r#. Fuck it. And by the way VS still has hangs with us/TS projects even without r#
Same. I offset your downvote but this is hostile ground
&gt; `if (lineElements.Count &gt; 1)` I did the check with this `if` because it looked like you only care about the 2nd element on each line.
If the return type of `GetServerPluginInterface` is always the same, there's no need to go through an `IntPtr` and manually marshal it to a struct. Just declare the method as returning an `RemoteServerPluginI` and the marshaler will do that automatically. However, the marshaler will not be able to translate `void*` to `object` in the `caller` parameter. You'll probably have to use an `IntPtr` there.
&gt; But there will be a time where it's the only viable solution and I won't notice it. Not likely. When you will need to process every pixel in an image you **will** foreach row foreach column ....
It’s the dual core to quad core move. Quad core runs VS great. In my experience, the U series can maintain turbo clock speeds under sustained loads (probably because they are only dual-core).
If you are building software for sale, then $500 is a small business expense considering it's most likely your primary work tool and it can be written off as a business expense anyway
Yes. Lots of fanboys who aren't capable of thinking and reasoning about things. Occam's razor - a company is basically driven by money, so are their decisions... 
&gt; Just declare the method as returning an RemoteServerPluginI and the marshaler will do that automatically. Unfortunately I get a `System.Runtime.InteropServices.MarshalDirectiveException`saying that the signature is not compatible with PInvoke if I do that. &gt; However, the marshaler will not be able to translate void* to object in the caller parameter. You'll probably have to use an IntPtr there. Thanks for the heads-up. I'm about to try to connect to the actual service, I'll update the answer with my findings :)
Those blogs were 100% bullshit even back when they wrote them. They seem to have no problem making a 64-bit version of VSCode. If they started writing VS from scratch today would it be a 32-bit EXE? No, they'd make it 64-bit. So there is no reason why the current VS wouldn't benefit from 32-bit. We understand it is coded like shit and I think their real fear is the uncontrollable memory leaks will take down a computer if it has access to all the RAM. So they are taking advantage of the 32-bit "limit" to avoid having to fix the memory leaks. The leaks still have to be fixed. But I'd rather let it use 16GB if it means I can get through a working day without crashing every hour and restarting my entire process.
Good thing I didn't then.
That is what .NET Core 3.0 is for.
Any idea why a textbox may only be accepting one character and it disappears if you try to put another one in there?
There was no 2014 or 2016, along with some other years.
It just gives the option to efficiently share a session. For those 'hey, let me ask you something quick' from a remote co-worker. Not, to code together all day. Debugging is the intended purpose, I think.
i hope they're coming out with a battle royale mode.