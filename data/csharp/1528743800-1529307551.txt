I was only given this about the modulus operator: https://i.imgur.com/krUUwEd.png That explains it then lol
I find that every once in a while, writing it out can make code more readable, especially when you’re checking if something is false. I’d prefer code like if(player.CanPerformThisSpecificAction == false) over the short version, because that line actually reads like an English sentence, while the one with ‘!’ doesn’t at all. When they are long variable names or expressions, it feels more pleasant to read it this way I think. 
Yeah, I misread that, sorry. Hmm. Are these watchers getting garbage collected when the method completes? I don't see anything that would keep them alive outside the iteration of the for loop they're created in. If GC is the issue, adding each FSWList to a List&lt;List&lt;FileSystemWatcher&gt;&gt; would prevent that (as long as that List&lt;List&lt;&gt;&gt; remains alive as a local in the Main method, as a static field, or through some other GC handle).
Why use multiple watchers for the same directory? A single watcher will raise any of the events you are subscribing to. Also, watcher.Filter = Path.GetFileName(path) will ensure you're only looking for that one file, which seems kinda strange. I'd filter the events raised, looking for items of interest in one watcher rather than create n watchers in a nested loop.
I have not incorporated any garbage collection. As a reference, this is what my code looked like when I was only working with searching for one file, which does work and the filewatchers are kept alive. [https://ibb.co/fdfFq8](https://ibb.co/fdfFq8)
Who do I make a service call to in order to receive a puzzle?
All your variables in your example seem to be locally scoped. Is that the case in your codebase? If so, they're going out of scope and probably getting collected. It also seems strange that you're creating multiple watchers for each distinct file. Another person pointed that out as well. 
I only recently discovered that I can have one watcher do onchanged, oncreated, and onrenamed, so I'll fix that later for the sake of code simplification. As for watcher.Filter = Path.GetFileName(path), my app watches a folder, and if a file with a specific name (configured by the user in the app.config file) appears in the folder, it emails that file (the person receiving the email is also configurable in the app.config file) and then deletes it. So it's specifically intended to look for a certain file name.
To not be overwhelming but answer the question: 1: Does what you want and .NET handles async stuff. 2: This is actually starting a new async context and blocking inside that new context (which might be a new thread, it might not...). This "appears" async (like you said, it "takes 1 sec"), but isn't because you just blocked another thread/context. You are just waiting for that synchronous response asynchronously... This is called "sync over async". You've just made the situation worse by now handling 2 contexts instead of one! And the second IS blocking! 3: You just said, "Fire a new async context but don't wait for it". The "don't wait for it" part is what "await" is for -&gt; to tell the current context to wait for async stuff to finish. So, if you did (as others mentioned) #3 but added await: await Task.Run(() =&gt; { await Task.Delay(1000); }); This is just causing unnecessary overhead. I.e. "Wait async [1] for something that is waiting async [2]. At the end of the day, just never use Task.Run(). This is what await is for: so you never have to deal with manually running Tasks. If you ever need to run an async Task synchronously (for whatever reason) use: someTask.GetAwaiter().GetResult(); Why? Because GetResult() preserves the original error message. If you use Task.Result and an error occurs, you'll get error messages that are harder to read. Task.Result is also not as explicit and obvious. If a dev who's lacking knowledge about async comes around and sees Task.Result, they'll start using that (not really knowing what they are doing). But using GetAwaiter().GetResult() is more explicit and is more-or-less a defensive way to try and avoid that issue.
bang b all day, baby.
[ayo hold on](https://dotnetfiddle.net/s3k0aY) bool? b = true; if (b.Value) { Console.WriteLine("lel"); } 
Pukes when `b` is `null`: Nullable object must have a value. + System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource) + Nullable&lt;T&gt;.get_Value() + &lt;Initialize&gt;.MoveNext()
Can you customize it to add buttons? My boss is wanting Win10 notifications in the action center, and the notifications have context specific buttons (like the "read" and "archive" buttons for email notifications).
What exactly do you mean by that? That await calls inside an async action delegate won't block? Isn't that the whole point on Async/await? Or am I missing something obvious about how you could shoot yourself in the foot? Or do you mean that if you create a task, pass it an async delegate, it won't block the calling thread? In that case I get what you mean and see how it could be misused..
&gt; I have not incorporated any garbage collection. Well, you're using C#, so you have garbage collection whether you want it or not. The garbage collector can free your objects anytime after their last use, if no stack roots, gc handles, or static objects reference them. Is the rest of your OnStart method some sort of main while loop?
I just added the edited code to reflect the changes on the multiple watchers, and I also included the entire OnStart method in case. Does that answer your question about if they are locally scoped or not?
I was wondering when someone would mention the ThreadPool. It’s important and most people just forget about it :) 
I just edited the original post to include the entire OnStart method, along with the changes others recommended regarding having multiple watchers.
If you want to rule out garbage collection as a contributing factor, this code should ensure that the watchers will not be inadvertently GC'd. If it still doesn't work, your problem is probably unrelated to GC. protected static List&lt;FileSystemWatcher&gt; FSWList { get; set; } = new List&lt;FileSystemWatcher&gt;(); protected override void OnStart(string[] args) { string filePath = FileChecker.FilePath(); List&lt;string&gt; filePaths = filePath.Split(',').ToList(); foreach (string path in filePaths) { FileSystemWatcher watcher = new FileSystemWatcher(); watcher.Path = Path.GetDirectoryName(path); watcher.Filter = Path.GetFileName(path); watcher.EnableRaisingEvents = true; watcher.NotifyFilter = NotifyFilters.LastWrite; watcher.Changed += new FileSystemEventHandler(OnChanged); watcher.Created += new FileSystemEventHandler(OnCreated); watcher.Renamed += new RenamedEventHandler(OnRenamed); FSWList.Add(watcher); } } (Though if you're doing anything on parallel threads you'll want to use a thread safe collection instead of List) 
Better in what way? I frequently miss the `!`. Do you regularly misread `== false` as `== true`?
FileSystemWatchers are not 100% reliable. If this is a toy app or an assignment for a class they will be fine but I wouldn't recommend using them for real work.
Sounds like it's not garbage collection. OnChanged, OnCreated, and OnRenamed still don't get triggered.
What do you recommend for real work?
Documents can't lie. They can be incorrect.
Maybe it's cause I'm used to it, but I don't really miss the `!`. Having the `== false` just feels wrong, but maybe that's because I took up a lot of my code formatting practices from resharper suggestions.
It's the former, whoever designed `static class` at the time didn't think there's any good reason to use these types as types in variables, and most instances where someone would use them are usually wrong. .NET doesn't restrict you from having that type, you can even construct a *value* of type `List&lt;Void&gt;` through reflection in C#. However in .NET `null` is still a valid value of type `Void` (so you can add a `null` to that `List&lt;Void&gt;` through reflection, and no runtime errors will be thrown)
if b.HasValue then if b.Value :)
Due to the return type of void, you can't await on it inside the caller. Depends on which overloads are accepted by the method. Some accept Func\&lt;Task\&gt; which will work correctly with async await [Task.Run](https://Task.Run)(async ()=\&gt; { await Task.Delay(1000)}); This would would block because the action can be awaited because it accepts a Func\&lt;Task\&gt; A scenario I shot myself in the foot with was with a CancellationToken's Register method for [asp.net](https://asp.net) core's (IApplicationLifetime).ApplicationStopped.Register(...) CancellationToken.Register(async ()=\&gt; await Stuff()); Would not block which may cause some issues if you are doing some operations that require a certain state after the cancel. Usually you can check the overloads on the method, if it doesn't accept Func\&lt;\&gt; with return type Task, then you should NEVER use async on it. A lot of .net delegate parameters are actions, which can cause these issues. Takeaway Parameter == Action, don't async! Parameter == Func\&lt;Task\&gt;, async! 
&gt; At the end of the day, just never use Task.Run(). That's the key takeaway. Task.Run is almost never what you want to do
In the version where you had 3 watchers, you overrode the default NotifyFilter with NotifyFilters.LastWrite on only the first watcher, the one listening for OnChanged. By default, NotifyFilters is NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName. [According to this person](http://benhall.io/notifyfilters-enumeration-explained-filesystemwatcher/), onCreated and onRenamed can only be triggered by NotifyFilters.FileName and NotifyFilters.DirectoryName events. The watchers you had listening for create and rename events used the defaults, which included FileName and DirectoryName filters. So you should get OnCreated and OnRenamed events if you *don't* set a value for watcher.NotifyFilter. 
You may be able to tinker with the buffer sizes and event handlers to get it to the reliability you need, but I ended up just going with a simple poll in a loop which met my needs. It's hard to make it robust since the directories you are monitoring are not typically completely under your control so you may have little idea what kind of buffer you are going to need. If someone suddenly deletes a large number of files or does some bulk operation in your monitored directories, the FSW can just break and start leaking events. Give it a try and see if you can get it working in your situation but keep in mind that if things aren't working right, it may be that your code is fine but the FSW is failing and needs some tweaking. 
&gt;Weird. asLong is actually in the function / outer scope. But not the other variables. Must be the way the compiler chooses to modify the code. This does allow you to write code like if (!(value is string str)) throw new ArgumentException(); // Use str in the rest of the method which wouldn't make sense with multiple different possible patterns. &gt;If you read closely, the boolean variables are actually being set to an int first and then assigned to a boolean. Must be some optimized way of assigning booleans? No idea. I would assume that this is more a side effect of the decompiler trying to express IL in C#, rather than an intentional choice by the compiler. 
Rule 4?
What information is still needed ? 
Unless you're dynamically building expressions to run.
Put at task in a task in a task in a task
This is the only comment that actually solves the issue.
What results do you expect from this code? What results are you getting? If you're just trying to save a BMP in the Clipboard, why do you have the png-related lines, which seem to have nothing to do with that goal? Did you read the documentation at https://msdn.microsoft.com/en-us/library/system.windows.forms.clipboard(v=vs.110).aspx ? If so, was there any part you didn't understand, or any results you're getting that aren't consistent with the definition? Is this code part of a larger method? What information can you give about how that method is run? You don't necessarily have to provide everything, but the more context you can give, the easier it will be for people to help you. The things that cause your program to fail are not necessarily contained in the few lines of your critical path.
Note that the reason the second one even works is that await unwraps multiple layers of tasks (or rather, the task awaited does).
I will edit the post. I am loading an .obj file via Button click ony my viewport in WPF. This loaded 3D Model I want to have as an Bitmap in my image box of my GUI. I actually don´t know how to realize that and I use the code from here [https://ericsink.com/wpf3d/3\_Bitmap.html](https://ericsink.com/wpf3d/3_Bitmap.html)
[SICP](https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs) (kidding here) Serious: Well I'd say design pattern books but that might be way to much for a beginner or even a moderate programmer. Sidebar: https://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep might be a good intro into OOP. I mainly learned OOP from two courses in college years ago, so I dunno how decent this sidebar ref is.
Agreeing with /u/druidjc here. I wrote a simple program to make backups with FileSystemWatcher... but you get some nasty-ish errors every know and then. Also, events being raised twice on the OnChanged? event. So I had to toggle a boolean to only allow my method that subscribed to that event to trigger once. Anyways, I went with a polling option like /u/druidjc. Every 5 minutes or so to backup a file.
&gt; RenderTargetBitmap bmp = new RenderTargetBitmap(100, 100, 96, 96, PixelFormats.Pbgra32); &gt; bmp.Render(myView); This captures the current state of myView as a bitmap object; you seem to want to do the opposite: to render a bitmap to myView. Also, are you declaring a private method (imageload_Loaded) within another method? I don't think I'm familiar enough with WPF or Unity to know what's going on here.
I wonder if anyone can or want. . .
You're onto something. I thought that LastWrite would prevent the file from being grabbed before it's completed. Since my app sends out an email when the file is created, but I don't want to grab the file unless the file is 100&amp;#37; complete. After removing the filter, if the text document that is being created into the folder triggers the event, will it wait for it to be completely created or is there a chance it'll start immediately when it detects the file?
It depends. Task.Run(...).Result lets you avoid certain deadlock scenarios due to it by default running with no context, so it's great as a "synchronous wrapper" if you are forced to do so, especially if you are forced to follow use an interface that doesn't allow tasks. It also lets you run stuff in the background (fire and forget) as a replacement for ThreadPool.QueueUserWorkItem.
Do you have any personal experience using Selenium? If so, how does that automation work? Do you preload websites and keywords that you want and it spits out the information?? I'm very intrigued by this lol
So I was watching requests come in on craigslist and a search came in as: Request URL: https://www.craigslist.org/js/search-concat.min.js?v=c9fa94548a136143f2b7cd5c0247e0ce with a Request Method: GET attached to it... This would be the type of request i would need to perform my searches for this particular website..... I hope i understood that right lol
&gt; After removing the filter, if the text document that is being created into the folder triggers the event, will it wait for it to be completely created or is there a chance it'll start immediately when it detects the file? That I do not know. Depending on your constraints, you may be able to use the OnCreated event to register the newly-created file for a revisiting worker of some kind that waits a few minutes and then sends if the file hasn't been written to recently. 
So I'm a little embarrassed, but I figured out what was mostly causing my issue for the sake of others that might find the thread in the future. When I was testing to see if the events were triggered, I had a breakpoint on OnChanged, and OnCreated, but not on OnRenamed. I was testing to see if it was working by creating a txt document in the folder and renaming it to hello.txt or goodbye.txt. In doing so, since it starts out as "New Text Document.txt" for a split second, this means OnRenamed was on the one getting triggered, which I didn't have my breakpoint on. Thank you everyone that was helping me.
I have a lot of experience with Selenium. Selenium is used to open the browser and then interact with it. You identify elements on a page using IDs, class names, xpath, css selectors, etc. And then you can click, send keys, get text, etc. You can also execute little bits of JavaScript, take screenshots, download stuff... basically anything you can do normally.
Btw, let me know if you need any help or run into any issues. I'm finishing creating my first application and I've ran into a lot of problems that I spend hours debugging just to realize I made a simple mistake or that I could have been doing it differently within the scope of ASP.NET MVC -- so everything is still fresh on my mind and I might be able to guide you in the right direction pretty easily.
It's because booleans (and other smaller then int types) don't exist in CIL. 
&gt;In Core, how do I query another schema's tables at the repository level in Linq queries? I would not be surprised if this was unsupported. Do you use two different connection strings for the two different DBContexts? If so, the ChildApplicationContext will always use the ChildApplicationContext connection string, even when trying to access the MainApplicationContext tables.
have a 3 bits to determine/set identity \s at anyrate, how come the the you just dont have a RoleID, and join on that? perhaps a diagram of your database and UI would help us understand what you want. are you new to programming in C# / ASP MVC?
1
2 does not block. It creates a `Task` that will asynchronously complete when the `Task` returned from `Task.Delay(1000)` completes. It's unnecessarily complicated and inefficient, but it does not block any thread.
`Task.Run` does not directly create threads, it uses the `ThreadPool`, which is much more efficient.
OP thinks making a test project takes too long, it takes like 3 seconds, maybe another 10-15 to add a second unit test project and ref xUnit, a template might reduce that back to 3. https://msdn.microsoft.com/en-us/library/xkh1wxd8.aspx "Easier than adding consolexxxx project" is what I'm resolving for OP. 
&gt; That await calls inside an async action delegate won't block? Not if you don't await on them. OP doesn't have the await keyword before the inner async call (because it's not possible to use it there in this particular situation).
You said it was better, did you mean to say it was your preference? Otherwise, could you articulate what's better about it?
Yes it does. As soon as OnStart finishes your watchers are out of scope and they can be garbage collected.
Holy crap I've been having issues figuring out the "best" way to implement a count down timer from 3 after I press a space bar and the different answers I found didn't really explain it, and I was stuck...UNTIL NOW!
That can still result in a thread being created. And if we consider overloads, it doesn't necessarily use the thread pool.
The FileSystemWatcher is backed by an 8KB buffer which records the watched events as they trigger. If you have either a single directory with lots of change events, or a deeply nested directory structure you might be overrunning the buffer. In the past I've used multiple watchers to avoid hitting the limit.
If both tables are in same db with different schema just give it the schema on the setup and put both in the same dbcontext.
&gt; That can still result in a thread being created. Yes, but I think the distinction between "can" and "does" is important here. &gt; And if we consider overloads, it doesn't necessarily use the thread pool. I don't see any overloads of `Task.Run()` like that. Are you perhaps thinking of `Task.Factory.StartNew()`? &gt; But none of that is necessary information for understanding the original question. Maybe, but in the process of explaining one thing, you introduced inaccuracy about another thing. That's one of the ways misunderstandings are born. I think it's important to strive to be accurate, especially when it comes to things that are as complicated as asynchrony and threading.
Can you run profiler to see if the query is even hitting SQL Server? If it is, then that might help you see what database it's actually hitting.
Sorry, you're correct. 2 doesn't not block. I was thinking of Task.Wait \- but this code is Task.Delay. As a note, my original post would be correct if we were using Task.Wait OR cpu intensive work. Since people who spin up a new Task via [Task.Run](https://Task.Run) are usually doing cpu intensive work \-\&gt; my comments would apply. You are spinning up a new synchronisation context (via [Task.Run](https://Task.Run) \- which may be a new thread from an IIS thread pool or .NET core process thread). In a web app, this would be terrible since your web app only has a limited number of threads that you want to keep free as often as possible (so your app can handle lots of traffic). CPU intensive work should be offloaded to some other service or process. So you would still be using one of your precious threads.... In a desktop app however, this may be fine. You can do some cpu intensive work in the background and allow the UI thread to continue on. 
https://youtu.be/LE3y5a0G4JA
How would I pass this? Any docs/links showing how to do this? If I can “filter” by schema then my problem is effectively solved.
Same connection string in appsettings.json is used for both contexts in the application.
Yes, login is successful , execution runs right up until the Location table is constructed. 
That's about as good as you are going to get. A delegate will always be as slow or slower than a normal function calls.
Is there no way I can do something like this: private void Iterate (Function refFunc) { for (int i = 0; i &lt; Players.Length; i++) { if (i != TurnOrder) { Players[i].refFunc(TurnOrder); } } } I know this wouldn't work, but something like this is what I want. I just don't know if it's possible. Because I have a few for-loops like this that call methods with the same function signature.
Oh, that's easy. Just two minor changes: private void Iterate (Action&lt;Player, i&gt; refFunc) refFunc(Players[i], TurnOrder); 
To use it, Iterate( (p, i) =&gt; p.MyMethod(i) ); It knows from the context that p and i are a Payer and int respectively. But you can be explicit: Iterate( (Player p, int i) =&gt; p.MyMethod(i) ); 
A backup plan. I always have a timer that manually checks the folder in addition to the FSW. 
Oh that would work! Thank you. Would you recommend me use this or to remain using my for-loops?
Is performance a problem? If no, then I would use this to make the code easier to read. Just find a better name than "Iterate" for the function.
I just follow pg's naming convention and use ColumnAttribute to map between the two. It keeps things simple and I don't have to worry about quoting column names.
Turns out the repository for Fedora that MonoDevelop provides, is missing dependencies for 7.5. When I open a project, the program closes a few moments later. Some dependencies are not listed on the web either. One of them for Fedora, is too new. I'm surprised I couldn't find the older version. It was called glib\-something. It was last night, I forgot the full name of it. So, I have to compile a lot of other pieces to make monodevelop work right. 
My personal understanding is that partial classes are a C# language feature, and not something that is in any way supported by the Run-time itself, and they are a way of organizing code bujt are not reflected in any of the compiled result. When compiling an assembly the C# compiler will combine partial classes in the same namespace into one class. Defining a partial class in one assembly or namespace and using the same name for a partial class in another assembly or namespace won't combine those two when both assemblies are referenced.
Great, just propose another pointless question for interviews. :)
Anything that implements `IDisposable` should really be within a `Using(){}` statement. And if anything doesn’t implement `IDisposable`, why not? There should be a compelling reason why anything you call does not implement `IDisposable`, because otherwise the garbage collector is working extra-hard, and you have wasted memory and resources. For example: using(var bmp = new RenderTargetBitmap(100, 100, 96, 96, PixelFormats.Pbgra32){ bmp.Render(myView); Clipboard.SetImage(bmp); using(var png = new PngBitmapEncoder()){ png.Frames.Add(BitmapFrame.Create(bmp)); } } But that would only work if both `RenderTargetBitmap()` and `PngBitmapEncoder()` implemented `IDisposable`.
Is performance a problem? If yes, then run your code through a profile and measure the effects of changes. Don’t assume changes will improve performance without actually measuring and testing.
The word you are probably looking for is 'refactor' btw
You're right, thank you. The terminology is lost on me sometimes. 
Sorry to hear that. It would be nice to have it included with the distribution, but I guess not many people use it?
Not at all. This is a minified JavaScript file. There might be the request you are looking for in it but that is not a good way to retrieve it. One way to catch the request in the network tool is to go to the search engine. Prepare everything. Clear network request in the developer tools. Then execute the search. You won't see too much request at this moment.
Well it is my preference, maybe I could have expressed that better. But I think it's better because it doesn't clutter the code with redundant information. I could see it work fine with a single condition, but if it's two conditions it already looks a bit too much. 
it would be as efficient as a struct with 8 things in it. but yes, once you are reaching for more than 4 things in a tuple, it might be a sign that a class or struct would be a better idea, but not always. If it is a one off thing, then why bother making a struct and naming everything? 
You can think of adding extension methods to your class, or even inhertance, if it suits you
Clean Code: A Handbook of Agile Software Craftsmanship (Robert C. Martin)
I recommend you use typing for compiler checks and naming for readability: Iterate( (player, integer) =&gt; player.MyMethod(integer) );
What’s the difference from that vs thread.sleep(1000)?
Partial classes just let you spread let you spread class definitions over multiple files. Their only real use is supporting tooling for compile-time code generation, and is used in WPF, WinForms, and probably other frameworks. It has *nothing* to do with runtime type extension or mixins or whatever it is you're trying to do. That's handled by the DLR.
Yes, that’s spot on. 
&gt; once you are reaching for more than 4 things in a tuple, it might be a sign that a class or struct would be a better idea In most cases this is already true for 3 or 2 elements.
As you noticed the host returns you a permanently redirected response. Instead of trying to programmatically follow that redirect I have another crazy idea for you: Just use the correct URL. The current URL you use is clearly not the suggested anymore, otherwise the server wouldn't return a 308.
I particularly liked *Learning C# 3.0* from Liberty &amp; MacDonald. It's an old book, but still actual and discusses programming in C# very well. If you're more a visual learner, Stellman &amp; Greene's *Head First C#: A Brain-Friendly Guide* is good too. The layout of the book is more like a comic than a standard book, but that makes it more engaging and interesting way to thing about things.
The database I was given was built with the tables and stored procedures necessary for implementing ASP Membership so I'm using that although to be honest, I'm more familiar with [ASP.NET](https://ASP.NET) Identity 2 which would have been my preference...
&gt;perhaps a diagram of your database and UI would help us understand what you want. Unfortunately the database is proprietary; if my boss found out I'd shared any part of it, I could lose my job. So what I've shared in the form of the Claims and Patients table is purposefully non\-specific to preserve that confidentiality. I know it makes this confusing and I'm sorry about that. &gt; are you new to programming in C# / ASP MVC? No I've been teaching myself for a long time. I have nearly 15 years of professional experience, but that experience has, despite the time, been severely limited. I've never felt any need to explore the use of interfaces and generics... Until now. So I'm pretty much just making it up as I go. Sadly, this project is using ASP Web Forms instead of MVC... boss prefers it this way...
Am i gonna have problems in the future for sticking to c# (sql server's) convention?
I've never used Tuple beyond 2 values, it's a lazy way to return n results from a method without needing to create a new type. It was never a particularly great solution. We also had anonymous types, which is what LINQ uses extensively: var a = new {Cat = "hi"}; Downside, you can't really pass them about. Then in C# 7 we have ValueTuple which can be returned: public (string Cat, string Mouse) Test() { var a = ("Tiddles", "Peep"); return a; } You need to include System.ValueTuple from Nuget to make that work. But you can use this method in a totally different assembly through a reference: [Test] public void TestTest() { var test = new ClassLibrary1.Class1().Test(); Assert.AreEqual("Tiddles",test.Cat); } For the 8 way tuple, if you're including a Tuple type for 2, 3 or 4 items, you might as well make it cover ALL eventualities. With the 8 tuple, the 8th element is of type Tuple&lt;T8&gt; which is so you can add another Tuple of up to 7 items + one extension element. I wouldn't use that personally, but Tuples are an important concept in Functional programming and over the years, more Functional paradigms have been brought into C#. You don';t have to use ALL the different features of C#, but it's nice that they're there if you do.
Yes, totally - if the pg driver, for some reason, kills support for [ColumnAttribute] But usually **NO**, since you can give them separate Names from what they are called in C# Properties, like /u/ninjaneer implied
Then why do you use two contexts, if they are "the same"? As far as i understand you got ``` public class ContextA { public DbSet&lt;ModelA&gt; TableA { get; set; } } public class ContextB { public DbSet&lt;ModelB&gt; TableB { get; set; } } ``` which could be combined as followed (since they use the exact same `ConnectionString` and reside in the same database) ``` public class ContextA { public DbSet&lt;ModelA&gt; TableA { get; set; } public DbSet&lt;ModelB&gt; TableB { get; set; } } ```
It still boggles my mind they haven't implemented a bunch of obvious mathematical constraints like is_numerical, is_floating_point, etc. And where are variadics? These new constraints are useless for me until the type system is actually upgraded to something from the last decade.
It's similar in concept to an if statement, but there are a few important differences: If we take: x = a ? b : c and compare it to: if (a) x = b; else x = c; In the 'if' statement, the compiler attempts to find an implicit cast (if required) between the type of b and the type of x, and between the type of c and the type of x; by contrast the type of the Ternary expression is determined by the types of b and c alone (by finding an implicit case, if required, between the type of b and the type of c or vice-versa). Thus there are cases where an if statement would compile but a Ternary operator would fail; for example: int? x = a ? 34 : null object y = a ? 45 : "Foo" Secondly, a Ternary operator is an expression (not a statement) and must therefore evaluate to a value; if you try making b and c calls to methods that return void then it will not compile. 'If' statements (not being expressions) obviously don't have this restriction.
Here's my take on enum casting: https://gist.github.com/LordJZ/702f76bc26c64aad3b37c323cf3cb3e8 Allocation-free, beats everything by a huge margin on benchmarks, but requires S.R.CS.Unsafe to run.
I think `!b` is better too, but I would like it if we could say `if not (b)`
Of course, when you have a bool?, then it makes sense to use `== true`. The if\-statement takes a bool, not a bool?. There are several other ways, but all of them are ugly imho: if (b.HasValue &amp;&amp; b.Value) if (b ?? false) if (b.GetValueOrDefault()) I would prefer `if (b == true)` in case of nullable booleans.
Thread sleep stops one thread from doing anything. It waits. While `await Task.Delay(1000)` will allow that thread to do something else. It's not a huge performance difference but the less total threads the OS has the better for both resources and performance.
AutoMapper would likely not give you better performance, unless you're really doing something wrong yourself. Did you actually try to profile your application and try to find what exactly is slow? That should be the first step. Blindly switching to AutoMapper believing it could lead to better performance while not knowing what your performance problems are is just silly.
Delete everything, create a new empty solution with the same name, commit the changes. This is easier if you're using Git, but you did not specify what source control system you use. But if you're actually interested in learning and improving yourself, then the best option is: Don't do it. Instead gradually refactor, clean up and improve your existing solution.
My TFS is Visual Studio Online, sorry. Ok I was just thinking that starting from the beginning would be better, since my old project was started quite some time ago, as an Windows Form applikation. With an added Windows Phone project. And my plan was to move the whole thing to Cross-Platform using Xamarin Forms.
Yup, you’re absolutely right. I was hoping there was something I was missing to make this work and that’d be it. I messed around with it some more and did more a base class and the script inherited from it and it worked. So it is sort of possible but not quite as I had hoped. Oh well, best laid plans and all that. Thank you very much.
Try setting the AllowAutoredirect property on the request to true. 
Have you tried to leverage .Select method vs the foreach? I found out that the former is much faster.
If you're CPU bound and you've got a large set of objects to convert, try using parallelism to do multiple at once. One way would be Parallel.ForEach: https://msdn.microsoft.com/en-us/library/system.threading.tasks.parallel.foreach(v=vs.110).aspx
I'm not 100% sure what you are trying to achieve but Linq has a Last() method like so closers.Last(x =&gt; x.CloseDate.Value == DateTime.Today &amp;&amp; ...); 
Thanks for the reply, CloseHour is time field in SQL i'm trying to get the record with the highest time. 
If you are trying to get one value from a list then you could just use Linq Max to get the highest closer.Max(x =&gt; x.CloseHour) ?
it's several closers, each one has several rows.
If the input is a list of lists where each list is only for one closer, then something like your second approach would work and you wouldn't even need the group by. If the input sub lists are all over the place though, then you'd probably want to do your "find the latest close" filter *after* grouping by the closer. I.e. .groupby.select(lambda which selects the max close from a single group)
Thanks, went for a loop after getting the first result then getting the last/first one closed.
Visual Studio Online supports both Git and TFVC.
I am using TFVC
Do you need all fields in json? If no create reduced model. If you need more performance you may consider creating Jon reader which will skip on bytes level fields which name just start from wrong characters. Also if you need only ascii range characters it should be faster to use ascii decoder.
Thanks, I start a new job at the end of this month and I am trying to cram in as much c# mvc knowledge as possible before then! I'm really nervous about starting as it doesn't say Junior in the job title but I'm definetly at a Junior level. Never lied on my CV or in the interview though and I done a code test so meh! :)
The Enum constraint is particular will be really nice for me. In the past, I've written a LOT of methods that look like this: public static string DoEnumThing&lt;T&gt;(this T enum) where T: struct { //since we can't do a generic type constraint if (!typeof(T).IsEnum) { throw new ArgumentException("Generic Type 'T' must be an Enum"); } //now that we know we have an enum... DoTheThing(); } C# is a feel-good language for me, so it hurts to have to do things like that to get around limitations of the language.
`Select` is not faster than `foreach`. It's almost always slower. Did you perhaps get confused by the fact that `Select` is executed deferred?
You shouldn't, but if you're on a team project or a consulting project, it's best to stick with the Lingua Franca of any platform. Onboarding new team members is much easier. A PGSQL DBA will walk out of an interview over a small deviation like naming since they are in such short supply.
Mapping is too slow ??? That sounds really really wrong because smth like that takes &lt;1ns per object. Perhaps you mean your sql processing is too slow, EF is not a good choice to bulk insert, use raw SQL or if you want to go full power use [SqlBulkCopy](https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlbulkcopy(v=vs.110).aspx)
It is correct, though... The same URL works just fine in Postman, just not programmatically. In the web hosts API documentation they explain how you need to take the redirect into account when sending DELETE. It's not a wrong URL, it's just how this provider has their API written.
I tried this as well (before posting this) and it did not work.
It works in Postman because it automatically follows the redirect. It's a comfort feature that you **could** add, but it's not a feature that you **should** add. You access the resource `A`, and the server tells you that this resource is now **permanently** available under the name `B`. Instead of always asking for `A` again and again, always getting the answer "dude, check `B` instead", you should just ask for `B` directly and skip the first step.
That's a lot of mental gymnastics to justify a preference developed through a reliance on Resharper! Admit it, you never even thought about it beyond what Resharper told you until I pressed you for your reasoning. Then you got all defensive and made a bunch of shit up. Or don't admit it, it's obvious anyway.
They are two separate solutions. The MainApp provides common administrative control panel-type functionality to all child applications which are domain/business specific.
Linq2Db has bulk copy. And Linq2Db is really fast 
How many objects are you talking about inserting? If you are talking around hundreds/thousands of objects, then a performance optimization you can do is after every Nth item (let's say, 500 or 1000 something reasonable), create a new db context. If you don't do that, then you are keeping the original context with all the new object in memory. If you've already saved, let's say, 500 items (which are still held in memory by the db context) \- you don't need them anymore. Just create a new context. Something like this? if(count == 500) { var dbContext = new SomeDbContext(); count = 0; } Hopefully I understood what you are looking to do :)
Pardon for my ignorance. I didn't get the chance to examine what Select actually does in the background. I said it purely from experience in a case I had in the past. I'll try to explain it simply. It might be useful. I needed to populate a list of Answers coming from the database and map them to a model class and send it to the client. I had a method called ToModel(Answer dbAnswer) which was doing the mapping. I first implemented it like this: var answerModelList = new List\&lt;AnswerModel\&gt;() foreach(var answer in DbContext.Answers.Where(x =\&gt; x.QuestionId = questionId).ToList()) { var answerModel = ToModel(answer); answerModelList.Add(answerModel); } when used on more than 10k entries it was a bit slow, say few seconds, not sure about the actual number. Then I changed it to this code: var answerModelList = DbContext.Answers.Where(x =\&gt; x.QuestionId = questionId).ToList().Select(x =\&gt; ToModel(x)).ToList(); and it was significantly faster. Maybe you better understand the reason why and I would like to understand better what happened. Thanks.
So you try to query "two different" databases for similar items? Does your administrative stuff depend on the child stuff, or vice versa? Doesn't sound necessary to me to "split concerns" if both parts are dependant on each other. (Sounds that way, if you need to query another table, then they most likely are dependant on each other, and belong in the same context)
With the non-working pseudo-code you provided here it would definitely not be faster, so no idea what exactly you saw. But neither would it be much slower in this case. Code could be optimized if you store the result of your db query (the first `.Where().ToList()`) in a variable first, then initialize your `answerModelList`-List with the correct size based on the query-result. That would reduce internal resizes within your result list.
Ah, yeah, didn't see this was a DELETE request. HTTP spec for 301 specifies that clients must not automatically redirect delete requests: &gt;If the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued. https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html And the RFC for 308 says its considerations are semantically the same as 301 with one exception: &gt; Note: This status code is similar to 301 (Moved Permanently) ([RFC7231], Section 6.4.2), except that it does not allow changing the request method from POST to GET. https://tools.ietf.org/html/rfc7538#section-3
I got this to work by programmatically following the redirect!! Thank you for your input and help!
I got this to work by programmatically following the redirect!! Thank you for your input and help!
This is still the **wrong** approach. Objectively.
I disagree with you (not the OP). If you have a list of millions of URLs you're sending requests to, you don't want the whole thing to break because one just happens to start redirecting. Your client should know to follow URLs, "change the data" isn't scalable. 
Automatically sending a delete request to a potentially different resource (from the one known to you) is not a good practice. Automatically continuing with an unexpected state is a gamble. Follow URLs is fine for something like GET. But definitely not for a DELETE.
Kind of a 'blanket statement', don't you think? Doesn't it all really depend on how the public API is written? In their documentation they tell you 'no action (in regards to redirection) will be taken by the host issuing the redirct..' - which means they want YOU to programmatically follow it... A screenshot from the API documentation: https://i.imgur.com/cwVCHzX.jpg 
This has to do with this particular API. If I set HttpWebRequest.AllowAutoRedirect = true; I get an exception thrown (because this API does not auto redirect you). After setting HttpWebRequest.AllowAutoRedirect = true; to false and manually following the redirection I was able to get this to work. What a crappy API.
I doubt that your foreach is the bottleneck. It is probably EF and .Savechanges() When do you do .Savechanges? Remember that it stores changetracking. One call for each insert is insane. A call for a massive change tree too. I am almost sure that your bottleneck is EF. You should profile at Sql Server as (\+1 for AngularBeginner) If you have a Sql Server you could try building a large datatable and inserting it with BulkInsert. Pretty easy in .Net.
Yeah, it's a blanket statement. And I admit that for this API I'm wrong. But I have to say that this API is pretty bad for expecting this behaviour (and for returning different status codes depending on the client in-use).
I think this API is just crap to be honest. Logistically, I had the same train of thought. Why would I send a DELETE request to some redirected URL that I am not familiar with? Feels so fragile to me. Thank you for your input!
The API is good, because (as stated by the other user) following a redirect on a DELETE request is forbidden by the HTTP spec. It's a good general purpose approach, it's just that with your obscure API it's not working out for you.
All tables for both apps are in the same DB. Just different schemas, like I said earlier. Child stuff depends on administrative. Administrative has entities/tables to manage modules, job roles, etc. So at the application level, yes they are completely discrete solutions. At the DB level, it's all one database containing all tables for both apps.
I couldn't agree more with your logic as well as ideals. I have never experienced an API that expects the user to follow redirects. I have essentially 0 DELETE request experience, so I wasn't sure if it were me or the API (again, I had the same train of thought as you - what a crappy API)
Thank you! I hate this API!!!
Haha, got me there. I did think about it a bit after your pressed for it though. My initial comment was half joking, king of like tabs vs spaces argument type of thing, but I'm glad you challenged me.
I have a really hard time trying to understand what you want to do. Can you post the types of closers?
CalThroat is a function, not a property. You have to call a function to get its result. Try "CalThroat().ToString()".
Basically `CalThroat` is the identifier of your method, just as `ToString` is. What you can do with passing a method as an argument/variable might be a bit complicated at this point (and would be an elaborate post), so for now let's just say you want to call your method instead - `CalThroat()` (just as you're calling `ToString()` on its result.
Branch your code so you have a release copy and start refactoring in the main (Trunk) branch. Like AngularBeginner said, don't start from scratch, rather refactor your code gradually into something which resembles more closely what you want. At this point you can branch again and refine your refactoring. This way you retain history and will be able to fix bugs in your current version and merge it back to your development (trunk) version. You also have the benefit of hindsight since you can compare with older versions of code, in the event of mistakes during refactoring.
Great thanks that worked
Thanks for the explanation, have it working now.
Thanks for your reply, already "solved" it but because I asked for help I should explain. Closers represent a table from SQL database grouped by closer, each closer has his incidents. `var closers = db.Incidents.GroupBy(i =&gt; i.Closer);` Then I want closed incidents from today *closeDate* and from that i want the last one closed by *closeHour* Couldn't do it in one query for some reason, something in my logic... 
I wonder, you say this is in the DB, why dont you use DB and SQL to solve this problem? Fetching lot of rows and creating new objects slows down you program, and it's useless, unless you use these values elsewhere.
I see your point, working on changing the first line of getting the data to be more specific. Thanks
Try CodeFights if you are looking for some challenges. They have an arcade of ~600 challenges with new ones added frequently. It will give you a worded problem with some constraints and tests that you have solve. After you solve it, you can see how others solved the problem as well.
Just FYI, some of the links from MSDN don't play well with reddit because of the `( )` characters. When you post a link with parenthesis, you have to escape each parenthesis with the `\` character. As of right now, the link you sharef is a dead link. Anyway, tuples are only useful when you want to return 2 or more types from a method without creating a class or struct to hold the data. So, a tuple that allows for 8 members means that it can cover scenarios where you need a function to return 8 values. However, doing so seems messy and a class/struct would better encapsulate what is going on (and, IMHO, make it easier to read). Value tuples are at their best when used with [deconstruction](https://docs.microsoft.com/en-us/dotnet/csharp/deconstruct). Also, I usually use them as values in **private** dictionaries where I don't want to create a class just to hold 2 values (I usually create a private nested class for anything more than 2, however). The fact that those dictionaries are private is important, though, because I don't want the public API of that class to show a dictionary with tuple values since it is hard to document what the tuple actually models and makes it more cumbersome to consume. With that said, one of the upcoming features of C# are light-weight classes called `records`. Hopefully, it'll come out with C# 8.0. You would declare a record class like this: public class Person (string FirstName, string LastName, DateTime DateOfBirth) That's it. It automatically implements `IEquatable` as well (and I am hoping it automatically implements `INotifyPropertyChanged` as well... Microsoft plz). The compiler will expand it as a class of type `Person` with the 'FirstName', 'LastName' and 'DateOfBirth' properties of types `string`, `string` and `DateTime`, respectively. This will pretty much make many tuple use-cases obsolete, I believe, since we can basically declare full-blown DTOs with one line.
Congrats! You’ll do great.
Simply the key here is what does Task.Delay(1000) Do? It creates a Task that will finish in 1 second. It does not wait itself which can be slightly misleading since your calling a method called Delay you assume it will delay the current execution but no it won't. Its creating a Task that is all. If you got rid of the await from the first example and just did public void RunDelay() { Task.Delay(1000) } This function would return immediately. The await keyword is what is causing your execution to be delayed. Change the last line to Task.Delay(1000).Result and now it will delay for 1 second because it is waiting to get the result of the created task for 1 second.
I think they're aiming to cover that with Shapes: [https://github.com/dotnet/csharplang/issues/164](https://github.com/dotnet/csharplang/issues/164)
Yes, but it's complicated and you have to pinvoke various user32 functions.
The problem with shapes is that it's a feature that doesn't exist. They aren't even working on it. Half the problems anyone have with the language gets shot down by "shapes already solves this" but they are nowhere to be found thus effectively they are useless
Needs more of authors face: https://imgur.com/4lADJYE
lol and don't forget the pop that greets you with more author face. https://imgur.com/a/qDUGuP8
Agreed, I have a general rule that the second you are doing more than 1 just go ahead and do it right. Way to easy to end up in comment hell in order for things to make sense with just a couple long tuples. 
so you want to get the last closer by hour? \`\`\` from closer in closer.SelectMany( your conditions) group by closer.CloseDate.Hour into g select g.MaxBy(c =\&gt; c.CloseDate) \`\`\` there's a nuget extension method for this: MoreLinq.MaxBy. There's a lot more: [https://github.com/morelinq/MoreLINQ](https://github.com/morelinq/MoreLINQ)
I didn't say "Shapes already solves this", I said Shapes are intended to solve this, and you can see the ongoing design discussion at that link. The language feature from that proposal (variously called Extension Everything, Type Classes &amp; Structural Generic Constraints) is in the C# 8 milestone, and if you're interested you can see its progress here: [https://github.com/dotnet/csharplang/milestone/8](https://github.com/dotnet/csharplang/milestone/8)
if you have a lot of objects that you are adding to a context, like many thousands, the change tracker/object graph in EF can get overloaded and it takes progressively longer to detect changes. In that case, it's best to use a new context every x items. for example: ``` int index = 0; foreach (var item in items) { context.Items.Attach(item); index++; if (index % 200 == 0) context = new MyDbContext(); } ```
And then of course the whole page just embeds a YouTube video anyway and doesn’t offer substantial content beyond that. Sigh. 
Many thanks, I will test it tomorrow :)
No really, EF mapping is stupid slow. The amount of time it takes to add a single item to the collection is O(x) where x is the number of records already in the collection. This means that mapping the entire collection of n records is almost 1+2+3+4...+n or roughly O(n^2). 
Many thanks, I will test it tomorrow :)
Unfortunately that won't help much. The problem is usually in the EF data context itself, not copying the properties. 
That's not strictly true. It depends on which interface you're using because `IEnumerable&lt;T&gt;` is slower than `List&lt;T&gt;`. https://www.infoq.com/articles/For-Each-Performance
ITT: People making suggestions other than "Profile your application to see where the bottleneck actually is"
&gt; The language feature from that proposal (variously called Extension Everything, Type Classes &amp; Structural Generic Constraints) is in the C# 8 milestone No it isn't. You linked the **8.0 _candidate_** milestone. There is no actual 8.0 milestone yet. Also, while Shapes and Type Classes are related, Extension Everything is a completely different feature.
afaik records are immutable, so INotifyPropertyChanged would be useless.
LOL! Warning: in_array() expects parameter 2 to be array, null given in /home/andreaa9/public_html/wp-content/themes/graphene/inc/plugins.php on line 92
The title lead me to believe that Blazor had been promoted to an officially supported project. Was disappointed...
You should use Automapper anyway, just for ease of maintenance. Saves you from having to screw around with forward-backward conversion code every time you modify your entity/dto.
If it's inserts only probably best to turn off Entity Framework change tracking all together. 
Senior developer at RedGate software. Can't make a website without Wordpress that doesn't look like absolute shit. 
&gt; AngularBeginner Ok it sounds like this is the way I should go. But I have not really worked with branches in TFVC, any good tips on a good tutorial?
Clearly they don’t eat their own dogfood.
Developer != designer. The two are often mutually exclusive. However, using Wordpress on a site about a C# technology/tool that is the core of your business *is* the dictionary definition of falling down on the job. As well as a *very visible problem* when it’s obvious you don’t eat your own dog food. It’s OK if you have to run with a pre-made tool - Orchard can work well as a CMS - but at least try to stay on the same type of tech that you are flogging in the first place.
So I skipped around a bit and its just a rehash of the Blazor weather example. Whats the point?
Branching is pretty straight foward, just read the docs on msdn and you are good to go
Right there with you amigo.
You can create proxies with castle active proxy: http://www.castleproject.org/ What problem are you trying to solve? The solution you provided may have alternative approaches.
In my experience with EF and my limited knowledge of the requirements of trading apps, I would simply recommend against using EF at all due to its overhead. Trading apps need to be optimized to the extreme and EF can be pretty good but you'll want to be writing every database interaction as directly as possible to ensure that it is only ever doing exactly what you want it to.
Check out the SQL that gets "rendered" via EF or your LINQ. I think the other users covered to make sure you do one bulk insert for many items, not constantly doing insert after each object is created.
Thanks for the great explanation!
CalThroat is a method, not a function.
Thanks for the link to deconstruction! I'll into that. I shared the link via the new Reddit interface and it seems to work fine on my end. I used the Markdown editor to write posts now.
&gt; The three types of polymorphism are overloading, parametric, and inclusion. Polymorphism helps to promote flexibility in designs by allowing the same method to have different implementations. In essence, you can leverage polymorphism to separate interface from implementation Source: https://www.infoworld.com/article/3024718/application-development/how-to-implement-polymorphism-in-c.html
Y'all feel free to tell me if my example is bullshit. i'm kinda spitballing here. when you play a zelda game, the main character, link, has a backpack with different items. Sometimes the game refers to the different kinds of items (bombs, staff, sword, etc.) not as their item type, such as bombs, but rather by saying, "hey we got a backpack-item here, well it turns out it's an item of the bomb class, but it doesn't matter, because we don't need it to explode, we just want to move it to a different slot in the backpack-inventory" In this case, we use a parent reference (backpack-inventory) to refer to a child object (bomb) because we aren't concerned with bomb-specific properties, we're only concerned with properties that correspond to all items that can go in the backpack-inventory... or in this case, we just want to re-arrange where the bombs go in our inventory. In this case, the ability for the child object to be moved about the inventory is a property of the parent class. That way, sword, bombs, and staff can all be moved about in the inventory in this way. And if anyone is wondering which zelda game i'm thinking of, it's the Gameboy Color Zelda games (such as oracle of ages/seasons), where the bombs, sword, shield, staff, etc. can all be placed in any inventory slot within the inventory screen.
Wow, you know some crazy smart 5 year olds.
Maybe if they weren't feeding their developers dog food, they wouldn't have this problem.
I had a crazy idea and if I solved this problem I'd create a couple of more problems that would have to be creatively dealt with (I realize this is somewhat of a rabbit hole, but this is also partially just experimenting and learning too). Idea was to extend the Code First models of an EntityFramework implementation when a database adds fields on fresh startup. Detect if there are new fields added for a Person, or Employee or what have you, create an extension on the EF Models and then create those new objects to work with all while not having to recompile the base application to incorporate these new fields. 
True
I do love blazor. This video didn't teach me anything new other than I don't need the Preview edition of VS anymore :) Tempted to write a blog site in blazor. Need to write one anyway so why not?
\&gt; reading descriptions online \&gt; posts about asking people to explain it... online 🤔🤔🤔
Definitely read this as "amiibo" and wondered where I could get the Microsoft Amiibo's. I hear Hanselman turns Mario into a comedian.
A baseball, an American football, and a basketball are all balls. They can all be thrown, but each one is thrown in a different way; you wouldn't throw a football like a baseball pitch and you wouldn't throw a baseball with a football spin. If I handed you a box with all three balls in it and told you to throw them all, you wouldn't pick up a basketball and ask whether to throw it like a basketball, a football, or a baseball, you'd just throw it like a basketball because you know how basketballs are thrown. Each different *type* of ball has a specific *implementation* of the 'throw' function, but they can all be treated similarly in that they are all throwable.
When it comes to reddit, it seems easier as i am asking them to explain like i'm 5, whereas on articles online, they arent being told to answer it like a 5 year old 
ah this helps a lot, thanks :) 
this is great, cheers lad 
Cat based examples are always best ;)
Are you calling `context.SaveChanges()` inside of the loop? If so, don't do that. You're literally calling the DB for each record. How many records are we talking about, and how quick is "quick enough?" As others have mentioned, EF isn't really the best at doing bulk inserts. For raw speed, you're going to want to go with something outside of EF (stored procedure, SQL bulk copy, etc.). However, before doing that, you can try tweaking your EF code: - Split your result set into batches - Loop each batch, and process the results (create your EF objects), but only call `SaveChanges()` once per batch. For example: var results = GetResults(); //get your dataset here var batches = GetBatches(results); //batch the results (probably need to play with batch sizes for your use case) using(var context = new MyContext()) { foreach (var batch in batches) { var entities = batch.Select(x =&gt; new MyEntity { Id = x.Id, SomeProp = x.SomeProp, //continue your mapping here }); context.SaveChanges(); } }
I was attempting to be funny. I know a forum related discussion is a lot different than a blog or textbook description.
&gt; `Select` is not faster than `foreach`. It's always slower. Be careful with claiming anything is "always" something. My guess is that /u/b100dit probably used `.Select` to get data from the DB into EF objects. By leveraging LINQ to SQL, using `Select` to create your EF objects will *definitely* be *much* faster than simply `foreach`-ing over the whole set.
&gt; and it was significantly faster Using `Select` like that leverages LINQ to SQL. It basically tells EF to generate SQL that selects exactly the data that is needed, rather than selecting every column in the table (and any child object relations).
Whats the point of optimizing this unless you can provably show that your program crawls when iterating? Sounds like pointless micro-optimization to me.
Even better, just allow to constraint to list of any types (not only reference one) and you are golden.
Actually it wasn't that hard, here is what I managed to scavenge: 1. Found out this TrayHelper library on VB, compiled it and included the DLL in my project: [https://transfer.sh/HUSIP/GetTheTray.zip](https://transfer.sh/HUSIP/GetTheTray.zip) 2. Modified and fixed some VB code from some forum to C#: [https://pastebin.com/kYc4JtVZ](https://pastebin.com/kYc4JtVZ) 3. Created this nice function for easy usage \- just pass the tray icon text (it finds the correct icon with that) to it: [https://pastebin.com/vpxHbyGU](https://pastebin.com/vpxHbyGU) And it will delete it (not hide it though). If anyone has easier method, I would be happy to see it.
Don't manage threads directly, let .NET do it via TPL and the Async/Await keywords.
Yeah, blogs and textbooks don't have mods shitposting.
As others have mentioned, polling. If you're lazy, [there is a polling watcher in the CoreFX lab Repo](https://github.com/dotnet/corefxlab).
WPF and most Windows UI frameworks have something called "Thread affinity". This means you can't chance UI stuff on any thread that isn't the main UI thread. So here you probably want something like (and I'm not going to remember the exact syntax) Dispatcher. Invoke(()=&gt;ControlHandler.AppendText(data)); The idea here is the Dispatcher is the WPF class that handles all the management of thread stuff between the UI and the rest of the application. It works on a queue, much like Node, Winforms and everything that came before. So Invoke tucks the request onto the top of the queue and it will be dealt with shortly. As Manitcor below says, it's worth looking at async await. It will take out all the old fashioned (this is old fashioned code) stuff and make your life easier once you get the constructs and patterns. That's not immediately obvious, so get this working and on the side start figuring out async await. 
Oh, I might have missed the actual error. Your handler inside Dispatcher.Invoke creates a new thread. You want to call Dispatcher.Invoke from WITHIN the new thread. So Dispatcher.Invoke(()=&gt;TextArea.AppendText(text + "\n"); inside Appendtext method.
Imagine other kids. They like to play, eat, and sleep. Every kids have its own way to play, eat and sleep. That is polymorphism.
So if I understood correctly, I need to keep what I have and on top of that use dispatcher on the appending function inside the GetPrice() function?
Thanks, I'll try it tomorrow! Out of curiosity, what's the difference between making a Task instead of a Thread? I'm assuming Task does most of the work for you where as in Threads you'd need to do it manually?
A Task is representative of a unity of work the CLR needs to execute, how it gets executed and if it gets a thread or not are up to the CLR using the meta-data you provide. In general it executes things as threads when it needs to but avoids it when it can as the cost of marshaling a new thread is often higher than needed for the operation in question. In you case I believe it ends up spawning a new thread simply because that is the only way to do anything without blocking the UI operations. Be sure to mark your task as long running so CLR is aware the code may block other operations.
Wonderful explanation :)
&gt;"System.InvalidOperationException: 'The calling thread cannot access this object because a different thread owns it.' ". WPF has a rule: Only the UI thread can update the UI. You can do work on other threads, but to show the result of that work on the UI, you need a continuation on the UI thread. This has nothing to do with which class the functions are in, it has to do with what thread the work is running on. What you can do is change the call to: private void UserInputBox_KeyDown(object sender, KeyEventArgs e) { if (e.Key == Key.Enter) { Task.Factory.StartNew(() =&gt; { GetPrice(UserInputBox.Text); }, CancellationToken.None, TaskContinuationOptions.None, TaskScheduler.Current); UserInputBox.Text = ""; } } But that will block the UI thread while the task is executing. A better method is to split the GetPrice function into two functions: one that does all the calculation work unrelated to the UI, and another that does the actual updating. The calculation / API call task is executed in a background worker thread, and when that thread completes, a continuation is run on the main thread that *only* updates the UI based on the results of the other task. That would look more like: private void UserInputBox_KeyDown(object sender, KeyEventArgs e) { if (e.Key == Key.Enter) { UserInputBox.Text = ""; List&lt;PriceInfo&gt; prices; // closure used to pass information from the first task to the second var t_processing = Task.Factory.StartNew(() =&gt; { prices = GetPrices(UserInputBox.Text); }); t_processing.ContinueWith(() =&gt; { DisplayPrices(prices) }, CancellationToken.None, TaskContinuationOptions.None, TaskScheduler.Current); } } private List&lt;PriceInfo&gt; GetPrices(string itemName) { if (itemName.Length &lt; 3) { return; } SetText(""); //Not sure what's going on here; if it touches the UI, it will need to be moved List&lt;PriceInfo&gt; PriceInfos = OsbuddyAPIHandler.GetItems(itemName) .Select(item =&gt; item.Split(new[]{''}, 2); .SelectMany(idAndName =&gt; OwnOSRSCheck.IsChecked.Value ? OsrsAPIHandler.GetPriceInfo(itemName) : OsbuddyAPIHandler.GetPriceInfo(idAndName[0], idAndName[1])) .ToList(); } private void DisplayPrices(List&lt;PriceInfo&gt; prices) { ControlHandler.TextArea = this.TextArea; foreach (var data in PriceInfo) { ControlHandler.AppendText(data); } }
I'm actually not looking forward to this, I kind of hope it doesn't take off. We've seen the clusterfuck ASP.NET MVC and mixing state management across server side and client side all while keeping it in sync with jQuery spaghetti, form posted hidden fields, and Javascript written so poorly it just needs deleting. And now somehow it's magically going to be better because it's running in WebAssembly client side? Give me a solid API written will and a decent front end setup any day of the week. Fight me.
Perfect, thank you! :)
Consider two people, Bob and Jim. Bob and Jim may be very different people who do things very differently, but they both can take out the trash. You tell Bob and Jim to take out the trash. Bob may simply walk out to the dumpster in the back and place the trash bag inside, while Jim tries to yeet the bag into the dumpster from the third-floor window. He might not even make it in the dumpster, in which case you need to make sure to handle `ShitAimException`. Bob and Jim take out the trash in very different ways, but the trash still gets taken out. 
Thanks for he great explanation! It’s often humorous how many things in programming that I feel like I don’t know what they are (like his topic) then realize that it’s something I already use. Sometimes I just need a good low level/real world example to flip the switch.
Coin sorting machines are a good analogy. You have different types of inputs and they are all meant to fall into their own slots. Let's say the coin changer has five functions each called `Sort()`. The sort will be different based on if it's a `Quarter` or if it's a `Dime`. So now we have `Sort(Dime)` and `Sort(Quarter)`, allowing you to call `Sort(object)` and have the correct sorter picked based on the type of the object.
Now since you should have ELI5 answers, here’s an example. Assume you have an interface called Person with a void method Move(). A baby can implement that class, and then define the method as some crawling mechanism. An adult can implement that class, and then define the method as some walking mechanism. An Adult and Baby are both a Person, so you can store any object of those types inside an array of Persons. A Baby and Adult can both be in the same array together, as long as the array is of Persons. You can even iterate over the array and call the Walk method on each object. Some of them may crawl and some may walk. 
I was thinking of something similar, but using a penis and a vagina. You win!
Firstly, break the work down so we know what we are taking about. "Poly" meaning many and "morph" meaning shape or form, so Polymorphic means "many forms" Think "America's got talent". *Performers* all walk onto the stage and *perform* however they all interpretation *perform* differently Singer, Dancer, Magician, Comedian, something completely original, etc... America's got talent creates the structure and the performers all work within that that structure.
thanks so much ! 
Flavored popsicles. You can eat them all, but they each taste slightly different.
Actually, unless he's dealing with tens of thousands of records you don't really gain much with Parallel.ForEach. In fact you'll most likely incur a "spin up" penalty and the call could take longer!
No problem. Now you should know why every object you have ever worked with had a ToString method; every class extends the class “object” even if you don’t see it in the definition of the class. Also, you should now know why you were able to put any object into List&lt;object&gt; even though it’s a beginner move.
Lets say you have an object called car. A car can be a coupe or a sedan. Coupe and sedan would both inherit from the class car, meaning they are both cars. A coupe could not be a sedan however.
I like your interpretation of reality. Now I want a popsicle.
Fair enough. That's why I asked how many records he's dealing with. I've had mixed results with parallel-ing through data sets. Depending what you're doing, the improvements can be huge, or, as you said, make things slower.
Actually extension everything was merged into the type classes proposal to form what is now called the shapes and extensions proposal (that you got a downvote or two for because you didn't click on the issue /u/FacticiusVir linked to above). The rough idea is that you can define a shape: public shape SGroup&lt;T&gt; { static T operator +(T t1, T t2); static T Zero { get; } } with an implementation where necessary: public extension IntGroup of int : SGroup&lt;int&gt; { public static int Zero =&gt; 0; } or an extension: public extension IntGroup of int { public static int Zero =&gt; 0; } and wherever you use it, either via generics explicitly: public static T AddAll&lt;T&gt;(T[] ts) where T : SGroup&lt;T&gt; // shape used as constraint { var result = T.Zero; // Making use of the shape's Zero property foreach (var t in ts) { result += t; } // Making use of the shape's + operator return result; } or implicitly as an extension method (you have the extension type in scope): public static int AddAll2(int[] ts) { var result = int.Zero; // making use of "static extension property" foreach (var i in ts) { result += i; } return result; } it lowers to public struct IntGroup // extension version { public int Zero =&gt; 0; } public static int AddAll2(int[] ts) { IntGroup __shape = default; var result = __shape.Zero; foreach (var t in ts) { result += t; } return result; } public interface SGroup&lt;T&gt; // shape version { public T op_addition(T left, T right); public T Zero { get; } } public struct IntGroup : SGroup&lt;int&gt; { public int op_addition(int left, int right) =&gt; left + right; public int Zero =&gt; 0; } public static T AddAll&lt;T, TIntGroup&gt;(T[] ts) where TIntGroup: struct, SGroup&lt;T&gt; { TIntGroup __shape = default; var result = __shape.Zero; foreach (var t in ts) { result = __shape.op_addition(t, result); } return result; } // and all callers get lowered appropriately by specifying the generic type details
I meant refactor sorry.
What did you not like about the Rosyln API? I found it particularly easy to use once you understood the basics of it, the tree does get a bit big over time though.
Sure, that's even better and more complete, but I can't ask for too much at once can I? :p
Oh wow that looks promising and neat as well, hopefully the proposal makes some progress in the near future.
It'd be cool if we could constrain to a built\-in numeric type instead of only structs.
Have you looked at reflection emit? Here is a SO post that goes over runtime class generation https://stackoverflow.com/a/3862241 and more on .net core https://stackoverflow.com/a/41785168 There is also System.Dynamic, but it is a very leaky abstraction. https://www.nuget.org/packages/System.Dynamic.Runtime/
I hope not :(.
Imagine 2 parrots on a branch polly a normal parrot and morph another parrot who has an extra wing. polly is the real parrot, and morph is the freak parrot.
IntelliCode doesn't cover all methods and properties - only those it has learnt from the public repos it has learnt across. If you try reproducing the example shown in the gif, using a string type, do you see the stars appear? If you don't, please report a problem via the Visual Studio Report a Problem feature (https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017) , and mention IntelliCode in your report. Or drop me a line at mark.wilson-thomas@microsoft.com. Thanks for trying IntelliCode! Mark Wilson-Thomas Program Manager, Visual Studio IntelliCode
Thanks for the bug report Dispersia - we're working on the watch window star problem - sorry about that. Thanks for the feedback too - do you find that it gets in your way when you already know what you're looking to type? Mark Wilson-Thomas Program Manager, Visual Studio IntelliCode
This is a really good visual way to see the difference but I would like to make one more addition since OP seems a bit technical. In your example the person throwing the balls knowingly performs a different throw type for each ball. In polymorphism the code calling the function doesn’t know anything about the different details of the throwing. 
Hi Mark, I just wanted to let you know the issue was due to using the incorrect version of VS2017. I've had the opportunity to play with IntelliCode now and it's absolutely splendid. You all are doing great work! I'll be sure to check in any bugs or feedback as I run into them.
 object myObj = "FooBar"; This works because of polymorphism -- all types inherit from the `object` type. Since everything inherits from `object`, every object has a `ToString()` method, which is why we can take advantage of polymorphism like this: class Program { private int Value { get; } public Program(int value) { Value = value; } static void Main(string[] args) { var text = "FooBar"; var prog = new Program(42); Write(text); Write(prog); } static void Write(object obj) { Console.WriteLine(obj.ToString()); } public override string ToString() { return Value.ToString(); } } Output: FooBar 42 
Damn, this is one of the best analogies I've seen. Much better than the bus/car/bike example because I feel like throwing a ball is a more illustrative example of an instance method than "drive" or "park" or whatever, since the "implementations" are much better differentiated. Thanks.
[https://www.reddit.com/r/learnprogramming/comments/2l1zrs/eli5\_the\_3\_pillars\_of\_objectoriented\_programming/](https://www.reddit.com/r/learnprogramming/comments/2l1zrs/eli5_the_3_pillars_of_objectoriented_programming/)
Look into Bulk inserting your data. You can do that with entity framework. Here's one of the many articles to give you a head start: https://www.djamseed.com/2015/08/31/improving-bulk-insert-performance-with-entity-framework/
Using a data annotation (attribute), on top of your entity, you can do: [Table("TableName", Schema = "mySuperSchema")]
It’s always the language that gets me. Polymorphism? Like ... what?? Why not instead of truncating the phenomenon into one word actually stretching it out into a descriptive phrase. So in this case I’d call it, dynamic data handling or some shit. That way I know it changes based on the data it’s handling. 
A cat and a dog are both animals.
&gt; and call the Walk You meant and call the move
Lol yeah...The first time I ran into the term I assumed it had something to do with shapeshifting plastic or X-amen
Whoops. Edited. Thanks. 
Polymorphism is basically the bare minimum of what something can do but not what it is. 
When naming parrots, it is mandatory to name at least one of them Iago.
Not sure why someone downvoting you. Pretty common to turn off EF change tracking for bulk changes when it is not needed.
I think in static polymorphism or overloading it knows details before hand. 
This is good for explaining things in an class hierarchy. For interfaces, I like to use dancing. Humans are only kind of like bears, and they're entirely unlike robots, but all three can be trained to dance. When you tell a dancing human, bear, or robot, they will all dance in their own way. In your example, ball would be like an abstract class with an abstract method "throw" (technically that would belong to the thrower, but we'll ignore that detail). In this, though, there would be an interface -- say, IDances -- with a single method, Dance(). Human, Bear, and Robot would be three separate classes in different hierarchies, the first two maybe deriving from abstract class Animal, where Robot derives from abstract class Machine or Circuit or something. Each of the classes then implements the IDances interface rather than providing a concretion of an abstract method it inherited. Returning to ELI5 mode, I find that usually interfaces are things that you train something to do, where inheritance is something that an object has by its nature. Gets a little weird when you start talking about services and stuff and you create interfaces for all your classes... still, kinda works.
I don't know any library. But as I remember, the easiest way is to parse html from mobile version of twitter with the use of standard webbrowser.
From my experience with another language, you spend as much time learning the library as you would just simply writing the API calls. And Twitter docs are far superior to anything else. Once you have the auth worked out it's virtually no extra work over using an api wrapper. https://developer.twitter.com/en/docs 
Oh one thing here, the `SetText("")` sets the TextArea's text to blank, aka clears it every time a new price is searched for. Should I move it to `UserInputBox_KeyDown` instead, call it before the `GetPrice()` is called?
&gt;Actually extension everything was merged into the type classes proposal to form what is now called the shapes and extensions proposal (that you got a downvote or two for because you didn't click on the issue /u/FacticiusVir linked to above). Not sure why we're splitting hair like that, but: * /u/FacticiusVir linked a milestone, not an issue * the term "Extension" doesn't even appear in that milestone * the Type Classes proposal _does_ appear as a champion: [Champion "Type Classes (aka Concepts, Structural Generic Constraints)"](https://github.com/dotnet/csharplang/issues/110) * a merged approach exists, as an exploration: [Exploration: Shapes and Extensions](https://github.com/dotnet/csharplang/issues/164). It does not have any milestone, and is still open. I haven't read the comments in their entirety, but merging the two doesn't sound at all like a done deal to me. * in Aug 2017, Extension Everything is shown in a ["A Preview of C# 8" video](https://channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen). This prototype isn't merged with shapes. * at Build in May 2018, Extension Everything is _not shown_ (nor are shapes) to a much bigger crowd as part of a ["The future of C#" video](https://www.youtube.com/watch?v=QZ0rWLaMZeI). So to me: * it doesn't look at all like a done deal that Extension Everything and/or shapes will make it to C# 8. Instead, the one big one that _will_ is nullable reference types (for which there have existed working end user-installable prototypes for almost a year). Other stuff like the new `switch` patterns and the ranges are very nice, too. * the merge of the two features doesn't seem definite to me yet * if it does happen, surely it will further delay the feature and thus make it less likely to make it to C# 8. Which in the long run — waiting to get it right — is exactly the right thing to do, of course.
Poly = many Morphism = forms Polymorphism is using many forms of one thing to achieve a result.
Can you identify the race conditions and fix them? https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions https://docs.microsoft.com/en-us/dotnet/standard/threading/synchronizing-data-for-multithreading#synchronized-code-regions
Essentially yes. Make sure any code that touches the UI elements is invoked by the Dispatcher. There's a pattern which goes something like check Dispatcher.CheckAccess, if true you need to use Dispatcher.Invoke, if not you can just call the code without using Dispatcher.Invoke. You can wrap all that code up easily enough. You've added a continuation now I see which might fix your problem. It will make error handling a bit fiddly. It would all look much cleaner with async await. 
&gt; public GitHubClient(HttpClient &lt;span class="hiddenGrammarError" pre=""&gt;&lt;span class="hiddenGrammarError" pre=""&gt;client) I'm pretty sure that is not legal C#.
Probably copy\-paste issue.
Yea it's all about feeling smrt. I got a dip in project management and I was shocked at how all the terms are just meant to confuse people and make the work sound more complicated than it actually is (dependent upon the scope and size of the project) Most terms used are there to slightly confuse management and reassure them you know more than them and you have it under control. Same in many thought based jobs.
I don’t use vs code but I know the c# plugin helps a great deal with it, it will highlight your syntax error - it sounds like you have 1 too many closing curly braces. The inconsistent line endings warning is because you’re on a Mac and you’ve probably pasted in some code that uses windows line endings. It shouldn’t matter but I may be wrong. 
The first isn't an error in your code. Unix (including OSX) type system mark the end of a line of text with an LF character, and Windows type systems do it with a CR followed by an LF. You've managed to get a mix of the two in your file. It won't effect your code, but it may lead to you getting the wrong line number in error messages or debugging info. To fix it you need to convert them all to be consistent, Visual Studio Code probably has a way of doing it, try googleing something like: visual studio code fix line endings The second error is in your code. It found a '}' character where it doesn't allow one. Have a look at the line number it gives (keeping in mind the other error means its possible this is off by a bit) and see if you can find the mistake.
Its actually a pretty common word. There is mathematical polymorphism where two sets behave the same regardless of the elements within. And there is a biological polymorphism where animals have similar working processes. I think there is a version in chemistry and several others. OOP came later and merely adopted the word, not to confuse you, but because it was established in other disciplines.
Thank you. You are correct! I have added some very basic profiling at (the visual studio level)info to the original post. Two things are slowing the loop: Saving, and adding something to the context via my UOW. I am now looking into bulkinsters. Thank you kindly! 
Thank you. You are right. I am pretty knew at all this, so profiling is new to me. I have done a rudimentery one and added it to the original post which pretty much gives me an answer. Thank you heaps.
Hi Guys, thanks heaps for your code example. Very helpful. I am in the early stages, but I expect to have approximatly 250 records every 200milliseconds....I actually have a nested loop, and was context.savechanges in the parent loop.....What I did find was just adding it to the context without saving was pretty slow... but I just received my 'concurrency in c# cookbook' today and I think I'll have to give Parallel.Foreach a try and see what happens..well..after I read it :)
I'd do exactly that. Make one project that will be a start up project, and then a bunch of class libraries for other application layers (repo, service, dtos, what have you). If you have to have more than one project per layer, also group them into folders like so: 00. XXXXXXXX 10. YYYYYYYYY 20. ZZZZZZZZ ... 99. TESTS
What would you prefer we call polymorphism so that it's easier for management to understand?
I have been contemplating this. I will play with bulk inserts first I think, but I suspect you are right and I may have do everything direct in memory. Then maybe save things to the database as an afterthought...Hmm...that means I've made a lot of architectural mistakes tho! waaaah :(
Thank you! Good link. Looking into it now.
Thanks guys, sounds like the consensus. really appreciate your input. Looks like I have some learning to do. :|
What about public class GitHubClient : HttpClient { public GitHubClient() { BaseAddress = new Uri("https://api.github.com/"); DefaultRequestHeaders.Add("Accept", "application/vnd.github.v3+json"); DefaultRequestHeaders.Add("User-Agent", "HttpClientFactory-Sample"); }
That is what I have done. I starting thinking today "Am I doing this right" when I hit a snag, where a new project I created used a "Setting" DTO that was only specific to that project. I said to myself, I said "Self, should I put this very specific DTO into the Common DTO projects, otherwise I will need to give my Repo service access to this particular project which I have yet to do..." Then I said, Hmm, well, if I ever wanted to change something down the road it would be best to have it be accessible. I got confused, and reached out. I also have a ProjectionService that will transform Entitys into DTO's" so stay the course it is. thanks!
Yeah, I had a .NET internship recently where we had to do an internal app for the company in teams. That was exactly what we had - a common folder with all the projects that any layer could access (DTO included), and then folders with projects for the database core and repo, service layer, presentation layer, etc. That structure was suggested by our mentors (and this was one of the few things they all fully agreed on), so I assume it's kind of a convention to do it this way. Very clean-looking, too, I have to admit.
&gt; There are inconsistent line endings in the 'NewBehaviour.cs' script. Some are Mac OS X (UNIX) and some are windows. This might lead to incorrect line numbers in stacktraces and compiler errors. Unitron and other text editors can fix this using Convert Line Endings menu commands I had this issue when working with Unity and creating scripts for my game objects. I found [this handy extension](https://marketplace.visualstudio.com/items?itemName=JakubBielawa.LineEndingsUnifier) for Visual Studio that could be of some help.
yup, domain driven design
Oh no, someone who writes code in one thing uses a thing written in another thing.
Its new syntax
OK, here is one to think about. my DTO is just that. BUT, I would like to be able do something like this. class queuedItem { int id {get; set;} string Name {get;set;} string someStuff {get;set;} } class SomeClass() { public void DoSomething() var queuedItem = BusinessLogic.GetNextQueuedItem(); queuedItem.MarkAsRunning(); }
Hmmm, what exactly is the process that you want to do? In order to mark a queuedItem object as running, it would have to have that property (something like public bool Running {get;set;}). Then you don't have to have a method for it. Simply write queuedItem.Running = true; Could you elaborate on what it is exactly that you're trying to achieve?
C# 7.4
Thank you! I’m using the extension~~ 😇
Thank you for your help!
Long story short, I am re-designing a webservice (It was a desktop application that was poorly written) Here is a bit of overview so you can see the hell I am working in.. I am working for a company that is slowly... S L O W LLLLY transistioning from ASP classic (blah) to .NET. I am writing a lot of repository services we will use again and again later, and trying to lay out this beginning application to lay at least some of the framework needed. This particular application will pull a row from a database (put there by classic ASP) the row will contain information about an uploaded file. Then ASP Classic will call my .NET endpoint to say "Hey! wake up") The endpoint will pull the row of settings from the database. this will be with the QueueProcessor. The queueprocessor will kick off the PresentationEngine. what is uploaded are powerpoint files, PDF file, word file, excel, and other file formats, I have interfaces built for each one. These files are then broken into individual images based on each page, slide, region, etc. These images are all memory streams that get set to either a cloud service, server share, etc. (interfaced built for everything) Once a row is pulled from the database, the first thing I need to happen is for it to be marked as Running. I want my code to be as clean as possible, and single use principals all the way through. so I figured, rather than have something like this DocumentSettings settings = BizService.GetNextQueuedItem(); bizServices.MarkItemAsRunning(settings) // I could just do settings.MarkAsRunning(); Both do the same job, but I like giving control to the object being used rather than passing that object as a property. 
What have you done so far, and what is your level of experience? Personally, I would start by working out what classes you need to model this scenario. A class represents a type of entity, or thing - for example, there might be a class called Plane. You need to decide what information each Plane needs to store about itself, for example the point at which it is currently located. Another class might represent Atc, and an Atc object can send messages to the Plane objects to tell them to move. Then, i'd write unit tests for these classes to make sure they all work as intended. Next, get a WCF service up and running, with those classes within it. And then build a GUI. But without knowing what your experience is and what you've done so far, I have no idea if I've pitched this reply at the right level for you. This sounds like a relatively advanced school project (advanced as in it includes lots of things, which suggests you've been learning programming for a while), so hopefully you already know how to do each of the things I've suggested. 
Thanks!
elegent
Single use principle? Do you mean the Single Responsibility Principle (SRP)? If so, SRP is about ensuring a type has only one reason to change and not necessarily about ensuring that all states *related* to an object is controlled and encapsulated by said object. For example, you could wrap your settings class in a type that manages the "Running" state (not that I am suggesting you do this -- I don't know the requirements like you do).
Requirements... There are none. The company I work for is fairly nill on coding requirements. I write the requirements, I write the code, I test, I do everything... so, I try to do the best I can to stick to good practices.
We use singular words to describe more complex topics all the time. It's so that people who are familiar with a given topic can speak succinctly to each other.
Yes, agree with LondonPilot: an object / class would seem to make sense. In addition, it seems to me, there would also be many other classes and interfaces that would be a part of the overall "airplane" class, such as engine management. In order to display the status of the forces acting on the airplane object, you can google-search for WPF Gauges, there are some nice instrumentation gauges other programmers have made. 
Removed: Rule 4. You'll have to dive in rather than provide project requirements to us. Divide and conquer. Figure out the components needed (GUI/grid, EntityFramework, WCF, etc.), figure out the requirements needed. Break down the tasks into smaller chunks and just work on one bit at a time. If you try to figure out the whole thing from the top-down at once, you may get overwhelmed.
There are three things in that statement. Let’s drill down: Poly = many Morphism = forms ?? = to achieve a result. You left out the last part. The combination word is insufficient to properly define the phenomenon. It’s also not so common. I’m definitely the dumbest out of all my coworkers but I tend to understand them well. 
One day someone will write a programming language that follows human language in syntax instead of the hyper shorthand that math majors preferred. Then we can combine confusion over gerunds and prepositions with confusion over instantiation and concurrency and have the best times ever.
Obviously it's the Razor equivalent of JSX.
Well, at least he points to steve gordons blog who seems to have contributed to the official docs here: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-2.1 Can't understand why they are duplicating posts with less value than the original^^ 
See also: [COBOL](https://en.wikipedia.org/wiki/COBOL).
Named registrations in DI always bother me. One of those problems we keep delaying to runtime what could be solved at/before compile time :)
I believe .ForEach has worse performance. I cant link it right now. Google your question and im sure you'll find an answer
foreach is a lot faster than Array.ForEach() if working with arrays, a plain for loop performs the same as foreach, when working with collections list List&lt;T&gt;, foreach is a little slower than an explicit for loop. Array.ForEach() is very much slower though. Only use it if it somehow simplifies your code a lot. Which is probably never. 
Thanks!
I prefer car engines, because it's more accurate. But not everyone knows cars well enough to get it. There are many different kinds of car engines. You have a big V12, a tiny little 3-cylinder economy car disappointment lump, a turbo-charged 6-cylinder boxer, diesel engines, and even Wankle rotary engines like in the Mazda RX series. But for all of these engines, they connect to a Transmission. There are Automatic transmissions, manual transmissions, dual-clutch transmissions, etc. Ignoring size differences and manufacturer differences, you can mix and match engines and transmissions, because it doesn't matter how the engine is implemented or how the transmission is implemented. The *interface* between them is the same. The output on the engine fits into the input on the transmission. The output on the engine spins, and the transmission turns that into spinning wheels later on down the line. Interfaces in C# are the same thing. I don't care how it's implemented or what it's doing or what it is underneath, but you can sort a List of these things because it implements `IComparable`. The only thing you need to implement a sorting algorithm is the ability to compare A to B and get back a result that is -something, 0, or +something.
Look at https://referencesource.microsoft.com/#mscorlib/system/array.cs,156e066ecc4ccedf The Array version is implemented using a for loop, so it won't use an enumerator to step through the array. The Foreach statement will call GetEnumerator, which for an Array will initialize an ArrayEnumerator which is implemented [here](https://referencesource.microsoft.com/#mscorlib/system/array.cs,4f49b6bfd66eb1e5) and seems to have a lot more overhead. Array.ForEach() will likely be more performant.
I know this is old, and my knowledge is limited regarding the matter, but I hope this helps. Before I begin, remember some thing important. Every problem has exactly one solution. Said solution, is what I call the reduced solution. Without reduction, you can claim a problem has more than one solution. A reduced solution solves the problem in full, without one iota more, nor one iota less. Needless to say, it also has to be well defined, otherwise you can not speak logic. By this, I define over engineering as generalizing one step too many, and under engineering as generalizing one step too little. Back to the topic, and also by what I said earlier, always travel from the problem to the solution. MVVM is the solution, and hence to understand MVVM, which is important before asking any further questions about it, you need to unravel the problem to which MVVM, and I am talking about the one in WPF, is the reduced solution for. Claim: MVVM in WPF and C# is the reduced solution to the problem that is the set of the following problems: 1- I want to have more than one UI (view), where it is possible to continue using C# and all other C# technologies for each UI, aside from the UI technologies themselves. 2- I want my designers to write the UI without C# knowledge, while keeping all algorithm in C#. When I say C#, try to think abstractly. Simple Prove: Begin a new UI needing project. You have a view, both the XML and the code behind. Define the class of the code behind as 'V'. Naturally, you start writing event handlers on 'V', and you also start calling on other classes, which you would have written to eliminate redundancy, and keep thing well defined, and perhaps adding to and modifying the UI through the code. The XML in this case is simply the initial state of the UI. So far there is nothing wrong with this. If you say there is, you are over engineering. Now, you are told that you need to develop a new view to target a different platform, where the technology that the first view was built on is not available. It is still C#, and you can continue using the rest of your code. Re define the first view as 'V1', and define the second view as 'V2'. After implementing 'V2', chances are, you will now have redundancy. You remove the redundancy of 'V1' and 'V2' to a new class, or code, which I shall call 'C', for common. If you think about it, 'C' is going to be the one talking to the rest of the classes, and 'V1' and 'V2' will end up talking to 'C' only, because otherwise you will have redundancy again. 'C', suspiciously resembles the view model, and the implied thinning of 'V1' and 'V2' suspiciously resembles the principle in MVVM of keeping the code behind as empty as possible, which is a principle that is by itself meaningless, ill defined. Now, you are asked to support a designer, who does not speak C#, but only XML (AXML). Think about the implication. 'V1' and 'V2' can no longer listen to events from the UI because the designer is designing the UI, and they might change what exact events leads to something. For example, a text box might have been where a user entered a map location, then the designer changed it to a gps map. So now you have to abstract the UI events, and make up 'designer' events, which the designer herself triggers in the XML. Further more, you can no longer in 'V1' and 'V2' add to the UI yourself, in raw, because that would make your code dictate design, and so we have tempates. So after you address these, such as adding those designer events that the designer triggers using the XML, for example, you notice 'V1' and 'V2' now have redundancy again. Where before they each listened to events from different elements, they are now listening to custom events triggered on the XML by the designer, available in both technologies. So you move all of this to 'C'. In 'C' is now where you have those designer events, which are essentially the ICommands. So where does "two way data binding" come in. Given that I am correct about the problem that uniquely defines MVVM in C#, then data binding is redundant, and hence an error, because using a generalized ICommands would do the job of passing data from UI to 'C'. At the same time, ICommands are ill defined because they do not map fully to a function call, they do not map fully to the abstract mechanism that they define. This ofcourse does not contribute to the prove, however, the current ICommands can still replace that part of the two way data binding, and so a reduced solution would only require one way binding. Point is, WPF's MVVM can not be the reduced solution to any problem. We then remove from it the most minimum such as it does become a possible reduced solution, and there is no full number less than one. And this concludes this very simplistic proof. So now, always ask yourself, am I aiming to solve for these two problems mentioned earlier? And if yes, then ask yourself whether you want to use the explicit VM mechanism in WPF or not. If not, ask yourself does my own approach still solves the two problems mentioned earlier, and in a reduced manner? And if yes, that is only what matters. As for the 'testing' requirement, and I state this if you are wondering, is ill defined. Solving for '2', does lead to easier methods for testing, but 'testing' does not necessitate that we solve for '2'. Hence 'testing' is not part of the problems that define MVVM.
when you use foreach on arrays, the compiler special cases it. there is no overhead. 
In your Main: Application.Run(form1); Application.Run(form3); Once your form1 closes the application will be passed to form3 instead of exiting.
&gt;In a published dissent to Dijkstra's remarks, the computer scientist Howard E. Tompkins claimed that unstructured COBOL tended to be "written by programmers that have never had the benefit of structured COBOL taught well", arguing that the issue was primarily one of training. Man, where have I heard that before...
You will have to build out a bit of infrastructure in your own code to get this working if you are not going with a fully baked solution/sdk. It helps to visualize the problem. When you are app starts up on your device it generates a token which your push notification center keeps track of. You need an additional layer on top of this where you keep track of all tokens related to a specific user token (1to1) Device+App (Manyto1) User The web/mobile implementations don't necessarily have to be the same but by keeping track of the active tokens for a user you can push the notifications down. On the web service you just need to keep track of the logged in user
First of all if you close first form (main one) app gonna close or you can use threading So you can hide it make an if statement and close first form when it get hidden open second one or third one So chexk this video gonna be helpful https://youtu.be/T06aHrAqfRw
another bonus is that using foreach on arrays guarantees you get array bounds checks elided, while with a for loop you can screw that up. 
Yeah, seems like the only case when you'd want to use a for loop with arrays is when you're only iterating over part of the array.
I really like DDD and don't want my ORM to mix with my models. EF has never really gotten this. Nice to see it's making progress, though I mostly agree with the article, it will likely never catch up to NH. NH Version 5.x is pretty great. The only features EF really had over NH was async, and async in 5.x works well. 5.1+ targets .Net Standard 2.0 too.
Are you pulling rows from the DB and process them one by one? In this case, why do you need to mark the only row you have in as running? What exactly would the MarkAsRunning() method do? What will it change?
Not a DDD expert however I agree with author's suggestion to use NHibernate for writes and Dapper for reads. Really best of both worlds of the ORM world. Of course you can replace Dapper with any other Micro-ORM as well.
The reason is simple. Lets say 2 users upload a file in our legacy code system within a few seconds/minutes of each other. a large file can take up to 5 minutes to process. When that row is added to the DB it has no status. There will be a reporting/view where we can see, and interact with the processes. Let's say something happens and a thread times out, or anything, a presentation is not finished. If another one is running, when it completed what it is working on it will check the queue, if something is sitting Idle it will process it. ALSO. Lets say we have a rather large even taking place and multiple files are being uploaded. lets say 500+ (this is NOT uncommon for our business) I do not want 500 of these files being processed at the same time. So I will have a monitor allowing only for X processes to run at the same time. this is noted by the "Status" column. If something gets sent up, and then the user deleted it before it is finished processing the status would get updated so before the processing finishes it knows what to do. This is the only what I am able to tie a legacy system together with new code.
Since below you said Refactor. I always turn to LINQ expressions. However in this case, the for loop is almost easier to read... Players .Where( (p, idx) =&gt; idx != TurnOrder ) .ForEach( p =&gt; p.OnOtherDrawFromDiscard( TurnOrder );
It used to be true, in pre\-release. The change in scoping for the declared variables happened late in the cycle. It looks like those docs never got updated.
I understand what you want to do now, but I can't really say what the best way of handling it is. Maybe someone else can help. 
Usually you would use something called a tile atlas or similar and use a tool that generates them. This CocosSharp tutorial might help you understanding how it all works. https://docs.microsoft.com/en-us/xamarin/graphics-games/cocossharp/tiled It makes use of [Tiled](https://www.mapeditor.org/).
I wrote some guidance on this today. There are a half dozen ways you can architect this sort of solution. I'm going with the fact you're talking DTO's and Repositories. You want a hierarchy of projects. Lowest layer deals with composition (DI, MEF (dynamically loading DLL's is useful, you can also have .NET standard (or Portable if you're supporting older tech) libraries which contain common enums and stuff like that. Really really low level and common stuff that EVERYONE can benefit from. Some of the stuff from the next layer can go here if it's compatible. Depends on tech's used. Next layer deals with interfaces and entities and perhaps structural types; things like priority queues, safe event helpers, network helpers (framework only, so http, wcf, etc) that sort of thing. You can reference REALLY common stuff, your logging framework if you don't use an abstraction, JSON.NET always seems to be there. Just be careful. I consider things like JSON.NET to basically be framework classes now. The interfaces are your service interfaces. They use Framework types only. Further up the stack this means we'll be translating stuff, but you will thank me in about 18 months. Next layer is a bit of a mix. You've got services implementing the interfaces defined above, and more importantly consuming interfaces injected by your composition layer. Then you have assemblies isolating specific technologies. These also implement the interfaces from the above layer. Our composition layer will handle loading and consuming these concrete implementations. So that's really abstract, so let me give you an example. I have an enterprise bus. Over the years it has run on about 3 separate technologies. The types exposed look like BusClient&lt;ICatMessage&gt;(...) because the technology is abstracted behind the interfaces exposed above. It doesn't matter if I'm using Tibco, Rabbit, or Berkeley Sockets, the consuming code doesn't give a damn. MEF works well here to assemble stuff. Don't reference the assemblies directly, config the app to find and consume them via MEF and then have your DI container configure itself from the types exposed. Above that are the actual executing environments. For me, for the project where we do this, that's Windows services, IIS web sites and simple executables. These reference the lower tiers except for the isolated technology assemblies. They get imported via MEF. So I'll add a note on repositories. EF is an implementation of the Repository, UoW and some other related patterns. So wrapping it up in yet another repository is kinda pointless. It's an abstraction too far. Better to isolate that entire layer through a facade rather than reimplementing the whole Repo pattern. Some people are rolling their eyes going "Event sourcing is not a good solution here". I'm not suggesting that, I'm but you can still define a facade which doesn't rely on the repository semantics, merely enforces them. I should probably also note that applications are not object oriented at their boundaries. They are message based. If you take that on board and don't go overboard (yay pun), you'll start to understand how data translates across these boundaries. I can expand on that, I'm sort of chucking it in now as a seedling that will grow. Finally, don't repeat yourself. It's so important they named it "DRY". I say this now at the risk of being patronising because your UI will be asked to "Do stuff" and a common mistake is to let the client do that. There are some patterns here that will help once you get the hang of them, CQRS being important (it's often blogged about with Event Sourcing, it's totally separate). The one take away is if your UI executes an action and resolves on the result, while other parts of the UI resolve on a notification, you've got problems. Make them all resolve on the notification and you're golden. 
Thank you fast reply! I'm going to check it out ;)
Thanks a lot for letting me know! I'm glad you're enjoying IntelliCode; please do reach out with any feedback you have as you use it - or indeed any general feedback you have about what would make IntelliSense in Visual Studio a more productive experience for you.
Depends on quite a bit. In the old days when I was learning directdraw you really didn’t actually separate them and instead you would tell the renderer to only draw the rect location of your intended sprite. Maybe we can assist more if we knew the technologies you chose. 
Thanks for the insight Matt! I didn't know that. I considered issuing a change to the docs before posting the article, but really it's such an insignificant thing... but was fun to play around with :)
Never use `Array.ForEach`. It goes against expected immutability of LINQ expressions: https://blogs.msdn.microsoft.com/ericlippert/2009/05/18/foreach-vs-foreach/ &gt; The first reason is that doing so violates the functional programming principles that all the other sequence operators are based upon. Clearly the sole purpose of a call to this method is to cause side effects. The purpose of an expression is to compute a value, not to cause a side effect.
Just whipped up a simple program and ran it. Created a new int[50000000] and then ran the foreach five times in a row. .NET Framework 4.7.1: Array.Foreach : 4.425890 Foreach: 1.2276354 .Net Code 2.0: Array.Foreach : 1.3330049 Foreach: 1.3594567 .Net Core 1 and 1.1 don't have Array.Foreach 
Or using the index for multiple things, or iterating by something other than 1 (which is a case of "only iterating over part of the array").
ForEach is not LINQ at all tho
I would only use .ForEach on void things that dont mutate data/state like People.ForEach(p =&gt; Console.WriteLine(p.Name));
Why is there a huge performance inconsistency between framework and core? Aren't they basically compiling code the same way?
To get blog hits.
That is still whats done currently... more\-so even since now they have to be on the same texture for shaderers to get to them. 
If I dont want others seeing my code, then yes. I'd recommend ConfuserEx, free, has a lot of decent features, open source, etc. Sure there are better alternatives but this seems to be the best FREE solution (other than coding your own).
... I'm somewhat curious as to *why*. If you're dealing with Dynamic Database stuff like that (and depending on how CRUD-y your app is) you may have less layers to fight with if you did your own ORM-ish solution, maybe built on a micro-orm. `GetSchema` and `ExecuteReader(CommandBehavior.SchemaOnly)` would be my friends here, as I could assemble metadata classes between the two of them. Heck, a Datatable would potentially be a more tenable solution for that sort of dynamic shenanigans.
Outputing is considered state mutation --but I got your point.
It looks a lot like it but you're right. It's a public method on `List&lt;T&gt;` and not a static extension method. 
Lots of new C# to even moderate C# devs think anything that does Lambda is "LINQ". Its just that mainly people learn the lamda syntax via LINQ until later in their careers.
&gt; Aren't they basically compiling code the same way? NET Core has better algorithms under the hood so it's way faster in many scenarios. https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/
dogshit game
We did it once on V1 of a product, by V3, it wasn't being done anymore. I'm curious, what are your motivations for obfuscation? 
I suppose you could try compiling it natively. But really, there's no effective way to obfuscate the code for more than the most casual of attacker. If you really must protect your code, run it on a server.
Have you tried the official getting started docs?
https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.1
I just watched this yesterday: [https://www.youtube.com/watch?v=vN9NRqv7xmY](https://www.youtube.com/watch?v=vN9NRqv7xmY)
Eh? How is outputting something going to mutate it's state? It doesn't change
&gt; if working with arrays, a plain for loop performs the same as foreach Are you certain about this? A foreach will *enumerate* over each element, whereas a good ol' for loop will simply increase the index.
I've always kinda thought that anyone sufficiently motivated to decompile my code, will probably spend the extra few days unpicking the obfuscation. I guess it depends on what you're doing, but I've never bothered. Seems like extra hassle for me with very little gain. 
There are hardcoded compiler shortcuts for these cases.
go grab a free coupon on pluralsight from visual studio(3 months if remember correctly). Then you go for some fundamentals. I've seen Shawn Wildermuth did a new course on ASP.NET CORE 2. I'd start from that, maybe then Kevin Dockx Web API, then Professional ASP.NET Core 2 book written by Adam Freeman.
go grab a free coupon on pluralsight from visual studio(3 months if remember correctly). Then you go for some fundamentals. I've seen Shawn Wildermuth did a new course on ASP.NET CORE 2. I'd start from that, maybe then Kevin Dockx Web API, then Professional ASP.NET Core 2 book written by Adam Freeman.
&gt; Want to learn ASP.NET Core, need a starting point. Here you go: `static void Main()`
try it out and view the assembler it is special cased by the compiler. 
The program's output is part of its state. If you call a pure function 10 times, you get the very same result every time and nothing changes. If you print something 10 times, you change the state (in this case, the output) 10 times. Writing to disc, sending something through the network, opening doors etc are state mutations. As a simple rule, if a function is `void` (i.e. doesn't return anything) it's either useless or impure. There is no "void f(x)" in mathematics. And yes, a 100% pure (stateless) program is pretty much like a sealed black box, it has no practical use because it cannot interact with the outside world. See this answer: https://softwareengineering.stackexchange.com/a/317249/246099 
Do you have a (semi?) objectively good tutorial on DDD? I've never quite understood it. :/ Personally, I'd prefer video tutorials, but as long as the text isn't blobby/wordy, I can handle text tutorials. :)
yuck, not public! inferred internal! nasty!
That's an extremely "computer-science" definition of immutable for academics to argue over, and entirely outside the scope of this discussion... we're talking about an immutable *object* not an immutable *program* For the purposes of this discussion, outputting the state of an object does not change its state. Anything else is just academic Schrodinger's Cat nonsense about "observable states" and whether observing it changes the state blah blah, and entirely inapplicable to the real world. An immutable object means that the properties of the object do not change. Outputting the value of the properties does not change the value.
No. The most sophisticated drm solutions get hacked within months. If some wanted to crack your program it wouldn't slow them down that much.
Well you have to output somewhere, so you chsnge the global state
As per my comment below, that's rather an academic "Schrodinger's cat" question of whether viewing the state changes the state. Either way, it's entirely outside the scope of a question about **object** immutability
Agree! 
If you close your main form the application will close. What you could do is from Form2 call a method on Form1 that closes Form2 hides itself and then launches Form3.
That’s super impressive that dotnet core can optimize that down to a normal foreach. Unless it just hardcodes the method call I suppose.
&gt; That's an extremely "computer-science" definition Good. &gt; entirely outside the scope of this discussion I just pointed out that the strict definitions of "immutable" and "pure" don't allow _any_ state mutation, just it. If you read my first comment carefully (very slowly, calmly) you'll note that I said "but I got your point", because I understand that these strict definitions aren't used outside formal contexts. Let me know if you need some help understanding what I said it. &gt; For the purposes of this discussion, outputting the state of an object does not change its state. You have no authority do decide "the purposes of this discussion". I pointed out _a known fact_ and you got triggered because of... whatever (?). &gt; and entirely inapplicable to the real world. If you read my previous comment extremely carefully, you'll see "a 100% pure (stateless) program is pretty much like a sealed black box, it has no practical use", which asserts exactly what you just said. Do you want me to draw red circles around key points on my comments? You seem to get lost and I'd like to help you. &gt; An immutable object means that the properties of the object do not change. [Really?](https://cdnstatic8.com/inglesnoteclado.com.br/wp-content/uploads/2017/08/O-Que-Signfica-You-Dont-Say-Em-Ingl%C3%AAs.jpg) &gt; Outputting the value of the properties does not change the value. [Really?](https://cdnstatic8.com/inglesnoteclado.com.br/wp-content/uploads/2017/08/O-Que-Signfica-You-Dont-Say-Em-Ingl%C3%AAs.jpg) --- tldr: You're triggered for no reason.
I don't bother - mostly for the reasons others have mentioned. I've been writing and selling desktop software for over 10 years, and all the cracked versions of my software that I've seen contain viruses / malware. IMO, only an idiot would install pirated software. It's just too risky.
Microsoft Virtual Academy (MVA) has a series on .NET Core 2.0. MVA's internal search sucks, so here are the direct links: * Beginner: https://mva.microsoft.com/en-US/training-courses/aspnet-core-beginner-18153?l=VM5gy36dE_6611787171 * Intermediate: https://mva.microsoft.com/en-us/training-courses/aspnet-core-intermediate-18154?l=Lr2Zz0beE_7111787171 * Advanced: https://mva.microsoft.com/en-US/training-courses/aspnet-core-advanced-18155?l=Rw9sqs7dE_7011787171 * Jeff Fritz (who is also in the above videos) did an 8 hour Twitch stream building a beginner level app. It's on YT as well: https://www.youtube.com/watch?v=--lYHxrsLsc
Oh I see. You’re one of *those* I’ve no interest in getting into an unnecessary academic discussion - I’m sure you’ll find someone to argue with you, but I’m only interested in the discussion relevant to this thread, not a game of intellectual willy-waving 
`Array.ForEach()` could be slower but it is composable so you can append it to an existing expression and dynamically build lambda expressions with it. When you need that you can use ForEeach, otherwise stick to `foreach`.
In 20 years of programming, just having a project with at least 5 people on it over 5 years will sufficiently obfuscify your code so that even seasoned developers have no idea how it works.
BTW, if you write a "simple program" for microbenchmarking, there's a pretty good chance you'll get something wrong, because it's not trivial. Instead, a better option is to use [BenchmarkDotNet](https://benchmarkdotnet.org/).
I don't think .Net Core actually can do that (at least not yet). Though I can't explain those results.
Blogspam with random affiliate links in the middle of the text.
There isnt really any solid method of stopping someone determined enough. ConfuserEx on default settings will stop people who only know the basics. If you customize a few of the obfuscation routines you raise the bar a little higher, but at the end of the day anyone determined will be able to get at least readable MSIL out as the CLR has to read it at some point.
This sub must be getting really popular to have shitposts like this showing up.
instead of e.KeyChar == 13 e.KeyChar == Keys.Enter if this is a winforms app: https://msdn.microsoft.com/en-us/library/system.windows.forms.keys(v=vs.110).aspx
Look into [https://msdn.microsoft.com/en\-us/library/system.windows.forms.control.controls(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.windows.forms.control.controls(v=vs.110).aspx) It'll help clean up your code if you just group all your controls (labels and such) and just run a 'foreach\-loop' to set them to empty or to change their values.
This so much. I almost always see calls to ForEach in the middle of a long LINQ pipeline. And of course a call to ToList is necessary prior to to calling ForEach which has performance and memory implications. I always direct people to the above link. If you want to iterate an array/enumerable and modify it, just use a foreach. Its built in to the language.
The official getting started docs are your best bet. Source: Pro .NET Core guy who started on them.
I work in a grey market industry(software sweepstakes) where we have to worry about people decompiling our software to learn how to steal money from the company, as well as keep our clients from using our software without paying the percentage of their net. I can tell you I’ve seen many other companies in the same industry that do little to nothing, normally absolutely nothing to protect their software from it but I my self do a number of things to stop complete morons and crack heads from stealing it. If someone ever does actually crack it and gain from it I’d honestly like to know so I could hire them on to help as I’m the only programmer in our company and it’s hard to find people to trust in an industry where a simple mssql update can give the lowest paid employee endless funds. We use obfuscation, usually different programs some paid some free. Then we follow up with virtual box (especially on unity game builds) to make it a single executable and so if they simply drop it in a decompiler it gives an error and hopefully that will stop some. Then when ever possible we run from the server. I also do a lot of other things to try to help for various reasons but not related to actually stopping them if they get the app and try to decompile it. Like others are saying if they really want to they’ll find away, but I like to at least make them work for it in hopes that I can weed out the masses that have no idea what their doing.
&gt; [https://msdn.microsoft.com/en-us/library/system.windows.forms.control.controls\(v=vs.110\).aspx](https://msdn.microsoft.com/en-us/library/system.windows.forms.control.controls(v=vs.110).aspx) 
I don't know if it would be quicker, but if you are trying to convert Json to an Entity model - you could just get the Newtonsoft.Json dll and do something like this: var jsonData = APICallToGetJSON(); var entityModels = JsonConvert.DeserializeObject&lt;YourEntityModel&gt;(jsonData); Then you can bulk insert the entityModels if need be or add additional values (such as the GUID). One thing to note is that in order for your conversion to work properly the Entity Object's Properties have to have the exact same name as the JSON models.
Author here. I recommend my Pluralsight course: https://app.pluralsight.com/library/courses/domain-driven-design-in-practice/table-of-contents Full disclosure: it's behind a pay wall. They have a trial period, though. I can also send you a trial code with a 30 days unlimited access, DM me.
fucking msdn REEEEEEEEEEEEEE
&gt; is considered Does bear the question "by whom" By programmers, probably not.
Link displays and redirects fine for me, but I'm on the new Reddit Beta.
The only reason for them to be separated is for streaming purposes, maybe you want to support idk, 1 million + tile types, then you might need to only keep some resident, basically a virtual tile atlas. But that’s kind of extreme for 32x32 tiles, which you can fit 262k on the max texture size of 16k on directx, plus you can have a texture array or multiple bound textures.
Ah, the joys. I inherited a codebase written over the last 8 years by now more than 4 contracting companies, and 4 solo devs one after another. I am the only dev working on it. There are no docs, no comments, 1/2 the code is commented out, nothing good is followed through, no one at the company even know what it was supposed to do most of the time. The cherry on top is the CEO likes to be directly involved and thinks that it's best to provide me a solution to a problem he has with the application, rather than telling me what the problem is so I can craft a solution.....
EJECT! EJECT! EJECT! If you are able to get the CEO out of the way, you have a great learning environment for creative coding. I would be worried you will never be able to even consider moving it to another language...so your skills will rot. :(
Interesting. Thank you. For the moment, it seems like I definitly need to bulk insert it and skip entity framework. Once I have done that, if I need further optimisation I will do it this way also. Really appreciate your thoughts, it helps immensly.
Except for people who have a legitimate reason to decompile your code. For example, if your documentation is bad, I might decompile your code to understand how to use it. If I can't do that, there's a good chance I won't use your code.
I feel like it should be possible and very beneficial to do. Most lambda functions never leave the scope of the method they're passed in to. It should be possible to either inline the call and the delegate or just inline the call to the delegate without even having to allocate for a closure.
No, nobody cares. Really, they don't. And if they did, which they don't, obfuscating it does very little. If you have some kind of security critical code or something, your best bet is sticking it on a server and using an api to interact with it. Try reflecting that.
What UI framework are you using? WPF? UWP? Asp.net MVC?
I've never done it, but I have deobfuscated a few projects. Is there one that exists that you cannot deobfuscate?
C sharp
WPF
Thanks for the links.. I checked it and used the 'preferred' methods for locks. It remained unchanged.. as I am expecting about ~30000 bytes, and from Teststand I found that i was off by 2-50 bytes every 10-40 runs. Running it again would get me all the bytes.. so i have a check now to see and to rerun the command only once (max two times before returning a failure). Seems to be working fine.. did over 1k runs :). This behaviour puzzling to me! Maybe I'll try to fix it another time!
No, it's a waste of time to do so.
I haven’t seen that before and I’ve used VS2017 with WPF frequently. Do you know how to use the Live Visual Tree? There might be something rendering on top of the text box. Or the Live Property Explorer? Maybe you have a template applying styles to your XamL.
Sadly, I don't. I'm not all too familiar (although I do have a little knowledge) with programming (just started because of work). The only thing that I touched with regards to it is the properties section. That's why I'm confused why it happened all of a sudden. It was not like that before.
What did you change in the properties?
`Console.ReadLine()` will read an input from the user. You can store the returned string in your array or list. To get the user to choose from the array you'll probably want to print out all the current values first: Google `foreach` loops; and combine that with `Console.WriteLine()`. Finally, to get the user to select a value based on a number you might want `Int32.Parse()` (Google is your friend here again). I'm going to bed now so hopefully that's enough to get you started; if not I'm sure someone else will be able to follow up on any more questions you might have.
Can you provide the XAML of the controls and their C# code behind?
Borders, Font, the common things to edit with it. My other text boxes are fine.
If they all have the same properties then it sounds more like something is rendered on top. Try using the middle button in your xaml toolbar (the little rectangle that renders on top of your app). The middle button should be “enable selection.” It will highlight an element making it easy to see where its boundaries are. Try using that tool to select the text box in question and see if there is anything else in the same space that might be causing the issue. Here is some [more info on xaml tools](https://dailydotnettips.com/xaml-inspection-tool-bar-inspecting-xaml-for-live-debugging-from-the-apps/) 
Quick question, How do I view the XAML files? When it comes to the C# code, I don't really have any specific ones 'cause I'm using functions and the text boxes are containers for saving in the database. But yeah I remembered, it appeared when I changed my constructors. My previous approach was using temporary text boxes to store data from the listview and transfer those data to another form. Currently modified it, instead of storing it on text boxes, I stored them in variables. After that, I think where the problem began.
I literally was just talking to a guy in work today, we had to do it in order meet pci. I will get back you tomorrow if I can track him down. 
I prefer linq2db for both, for writes and reads. It can be as fast as dapper, with linq support for queries, etc.
Motivations are simple - to protect app of being cracked and copied
&gt; If you close your main form the application will close Closing the main form does not cause the application to close- it merely causes the call to Application.Run() to return. 
I considered it one time with a WPF app I write at my company. It didn't start anymore and I only spent a little time before giving up (only software engineer ). I used an open source Obsfuscator (Obfuscar iirc)
Sadly this is a client of the company I work for, and one of the few ones that are actually loyal. so it's a tough spot.
There is no legitimate reason to decompile my code. If you don't understand it, yo should either be able to phone me and ask for help, or you have no right to be using it. 
After you have your array set you could do something like For(int I =0; I &lt; Name.length; i++) { console.writeline("{0} : {1}", I , Name[i]) } Output: 0: joe (Im texting so im not going to type out the entire array) Ask the user to type the number associated with the name and then simply store it or write it (Ex) they enter 1 (assuming its console write and read are there ) Int userinput = console.read(); Console.writeLine(Name[userinput]); NOW : after you get that consider try catch except and finally. To avoid the silly user to crash your program . Gl 
But id go to r/learncsharp for questions like this next time. 
you just wrote to video memory, it is a side effecting operation. this is why you put stuff to the console in the IO monad in languages like haskell. 
30 years ago I worked out ways to obfuscate code so the code itself couldn't be read and understood by a human, but none of that applies to code that has been compiled and decompiled, which at that point could eliminate all the methods I worked out. 1. Break your code into multiple files with as few functions as possible in each. In each file (and when possible in each class and function), reuse the same variable names, but for utterly different meanings. So, for example, in the first file, N may refer to the number of wheels on the car, while in the second N refers to the number of airplanes that fit in the hangar, while in the third N is the patient's gender, while in the fourth N is a boolean referring to whether the film is in theaters right now. The programmer trying to figure this out will get very confused determining the relationship between variables in every function and file. 2. Use words with strong meanings as variable and function names, so the programmer has a hard time thinking about the actual meaning of your code instead of the variable names you've chosen. Make sure to use words with no conceptual relationship for variables that are highly related. So instead of: NumberOfWheels = NumberOfFrontWheels \+ NumberOfRearWheels you should instead use something like: MaryPoppins = Popsicle \+ SpanishInquisition Use this method on filenames too, so for example instead of calling the file with the functions related to parts of the car "CarPartFunctions.ext", call it "Elephant.ext" instead. Whenever possible, use absurd names, because if the programmer can't stop laughing at your code they don't have the concentration to figure out what it does. 3. Don't put your API calls directly in your code. Put them all in a separate file and wrap them in function names following rule 2, so in your function NiceRedUniforms(Boolean TapDancing) don't say top.document.location.href = ZipLine but instead make function function Xanadu(string Weebl) { top.document.location.href=Weebl; } and then you can Xanadu(ZipLine) instead. 4. Use long variables, function names, and filenames filled with lots and lots of zeroes, letter capital O's, ones, letter lower case L's, letter capital I's, exclamation points, and letter lower case I's, because these all look kinda similar in a lot of fonts. Make them similar too, and reuse the variables internally in functions. When the programmer can't figure out from sight if they're looking at variable II00I11IIOO0OOI!II1Ii!I or variable II00I11IIOOO0OI!II1Ii!I they won't be able to figure out the code without a search and replace, and this won't help much if the variables are reused a lot. 5. Find a special character that's hard to type but which the language will accept in variable, class, or function names. (Obviously this will not work in all languages but will work in some.) Use it a lot. (Preferably more than one if possible.) This makes is very hard for a programmer to come in and start typing code to use yours because they have to cut and paste names all the time. Obviously, these methods are best applied with a search\-and\-replace on your code, before you walk away from it. This is a way of leaving behind perfect working code that the company won't be able to cope with after your departure. 
Use string.IsNullOrEmpty(txtLocal.Text) instead of txtLocal.Text != "". Another thing, when an if statement has more than 3 possibilities of the same type, rather use a case statement. It is much easier to manage and much more readable. Also look into databinding winforms controls instead of setting values on edit controls. One more thing, do your validation on objects instead of control values.
I can see the CEO now. 'OKAY SO LETS CAPTURE CUSTOMERS DATA, BUT I DONT KNOW WHAT DATA SO CREATE A TABLE CALLED CUST\_DAT AND THEN A PRIMARY KEY OF THE FIRST TWO CHARACTERS AND A NUMBER IN CASE WE GET DUPLICATES AND THEN JUST HAVE A STRING FOR THE VALUE, SO WE CAN STORE A LOT OF DIFFERENT DATA VALUES. LIKE 'BU00000000001', 'Green, $1203202, 19\-02\-02'
Absolutely, that is a good habit to develop. Always try to use a IsNullOrWhitespace or IsNullOrEmpty instead of trying to compare with an empty string constant. And another comment I usually give on my reviews is using a String.Empty instead of a "" 
&gt; .Net Code 2.0-&gt; Sorry, do you mean .Net Co**r**e 2.0-&gt; 
Hey! Could you elaborate on the virtual box thing with unity builds, or kindly point me in the direction to learn about it? I'm a bit new to this stuff and am doing quite a bit of unity development so this interests me quite a bit. Thanks! 
Give it a bit of time and then even you wouldn't be able to recognise it ;-;
Yeah your right there. Generally you don't call run twice. But there is nothing stopping you from doing that.
Strings are Immutable, so "" is very bad memory wise since it creates a new string every time you assign a value, hence String.Empty being the best option to use since it is a constant. Well caught. Good answer to the difference between mutable and immutable objects [here](https://stackoverflow.com/questions/4274193/what-is-the-difference-between-a-mutable-and-immutable-string-in-c/4274260)
LOL. How long have you been a programmer? You're going to stay in one job, maintaining one codebase, *forever*? You want to take a phone call at 3:00am on a holiday because someone in another country had a question? 
Basically impossible without tying it to an online service that is actually needed for proper operation. Using an obfuscator may make it take a few hours or even a few days longer to be cracked, but it'll get cracked if it's worth cracking. Look at BluRay. Most complicated anti-piracy mechanism ever devised. Each BluRay can run its own brand new copy protection mechanism that's never been cracked before. And yet ripped blu rays show up on the pirate sites within hours or days of being released.
I haven't had the chance to use linq2db for any projects yet, but it looks interesting, thanks. It even supports analytic functions and CTEs! Very cool.
Make a website for renting movies!
&gt; I work in a grey market industry(software sweepstakes) where we have to worry about people decompiling our software to learn how to steal money from the company, as well as keep our clients from using our software without paying the percentage of their net. If either of those things are possible, your design is shit. &gt; If someone ever does actually crack it and gain from it I’d honestly like to know Well, if cracking your software means they can print free money (as long as they do it at a low-enough level not be noticed), then you won't find out about it because it's more profitable for them to just keep the crack a secret and milk money of the suckers using the legitimate version of your software.
&gt;where we have to worry about people decompiling our software to learn how to steal money from the company, as well as keep our clients from using our software without paying the percentage of their net. So why do you not have an authoritative server that would make this impossible in the first place?
These are all suggestions that will make your own life significantly more difficult, and wouldn't take very much time at all to work around. Every time you run into a weird name you simply use the built in refactoring tools in VS (and not search and replace) to correctly replace all occurrences of that specific name with a more sane one.
a) Doesn't matter. With the exception of static variables with the ThreadStatic attribute instances are not tied to a thread. Thread affinity means there is some resource that is tied to a single thread and you can only, safely access it from that thread. Instances don't remember which thread created them. b) only if you marshal the call back to the UI thread using Dispatcher.Invoke (Dispatcher.CheckAccess will tell you if this is needed). c) No. Same as a). objects don't know what thread created them. In fact the Concurrent* classes are so named because multiple threads can add and remove stuff at the same time (near enough). Simple operations are atomic (adding and removing), there are AddOrUpdate methods which take a delegate to make checking if it's there before getting it atomic too. PropertyChanged event handlers will be invoked on whatever thread they were raised on. UNLESS you specifically invoke them on the correct thread, but generally this isn't the way to go about it. If you do, you can get the invocationList from the event and invoke each through Dispatcher.Invoke. But as mentioned, this isn't really the best way of going about this. What I'm not clear about is what is raising your PropertyChanged event. So it's hard to tell what's going on. That block of code where you're checking for myGuidToFind is a bit risky actually. First, is it supposed to be getting runnerGuid, and is there some code missing between the { } of that block, and why is it in a while loop? The first problem here is that your ContainsKey call then the TryGetValue call will not be atomic. ContainsKey may be true at the time of the check, but false by the time it reaches the while loop. I don't know if that's a problem. The other problems I mention above as I don't get what the while loop is supposed to do. [This article is a bit old but a great primer on where thread access should happen in MVVM](https://msdn.microsoft.com/en-gb/magazine/dn605875.aspx) I actually use a similar style to the article's author and it works for me. I'm not familiar with the DevExpress MVVM framework unfortunately so I don't know what facilities it provides.
&gt; Instances don't remember which thread created them. Slightly pedantic, but there are a handful of exceptions that capture the thread (or more precisely the synchronization context) they're created on. `Progress&lt;T&gt;` is such an example: if it's created on the UI thread it'll raise it's events there so you can safely update GUI controls, if not it'll just use random thread pool threads.
https://docs.microsoft.com/en-us/dotnet/csharp/codedoc
Which section are you addressing? There shouldn't be any part of those guidelines that even suggests relying on anything as unreliable as obfuscation. If anything, that will just make it more time-consuming to certify.
It should not - since any "word" is a compile time constant. Also String.Empty is not a `const` but a `static readonly string` 
While not technically the same, a const and static readonly string will have the same effect on memory since neither can be changed and will remain the same for the life of the application. Not too sure about the compile time constant, looks like I get to learn something new today.
It compiles down to `ldstr ""` which is a constant iirc Basic Programm: using System; namespace EmptyConsole { class Program { public static string mystring = "abc"; static void Main(string[] args) { if (mystring == "") Console.WriteLine("Hello World!"); } } } IL: /* (9,9)-(9,10) C:\Projekte\DotNetCore\EmptyConsole\Program.cs */ IL_0000: nop /* (10,4)-(10,23) C:\Projekte\DotNetCore\EmptyConsole\Program.cs */ IL_0001: ldsfld string EmptyConsole.Program::mystring IL_0006: ldstr "" IL_000B: call bool [System.Runtime]System.String::op_Equality(string, string) IL_0010: stloc.0 /* (hidden)-(hidden) C:\Projekte\DotNetCore\EmptyConsole\Program.cs */ IL_0011: ldloc.0 IL_0012: brfalse.s IL_001F /* (11,5)-(11,39) C:\Projekte\DotNetCore\EmptyConsole\Program.cs */ IL_0014: ldstr "Hello World!" IL_0019: call void [System.Console]System.Console::WriteLine(string) IL_001E: nop /* (12,9)-(12,10) C:\Projekte\DotNetCore\EmptyConsole\Program.cs */
Thanks a lot for those last 2 links. Very helpful!
It's hard to `break;` from an `Array.ForEach()`
Use English names for everything except you're own name/address and stuff like that. Avançar() is a bad name, because most of the viewers on reddit, has 0 idea what it means (me included) Adding a description on what the program is, what the methods does, is also a good idea. You're code is very redundant, and this is not what you're teacher want's to see. Group you're controls, and manage them via for statements. Look into how object sender works, and also look at how strings work. .Split() is you're friend, use it 
My advice would be to go and build something. Try to learn how to build something with the C#, not just the dry language. You can start with ASP.NET(my pick) or WPF.
[removed]
Note that this content is old, but it is still relevant. C# is now currently closer to C# Light than it was when the slide deck was created.
I really enjoyed [The Little ASP.NET Core Book](https://www.recaffeinate.co/book/)! 
And they've improved it even further with 2.1. https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/
It can now. https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/
As I understand it, .Net Core can do devirtualization in some limited situations, but not for delegates.
And there is a lot of things that capture the execution context, which also transfers some information (such as AsyncLocal fields) from the creating or calling thread.
Read [this thread on SO](https://stackoverflow.com/questions/46721414/pure-functions-and-i-o). If you want to work with purity in its most strict sense, you'll be doing maths; however with --real-- computers we have to perform state mutations (writing to disk, allocating memory etc). There are state mutations we don't want to avoid (and even cannot, like memory allocation). That's ok, mutating state is *not* a bad thing; we're going to do it in our everyday programming anyway. So, saying a function is impure is not like saying it's bad, at all. An entirely pure program is useless because it's pretty much hypothetical (it would be lambda calculus or math, as I already said). We just need to be careful to be *explicit* in these mutations, so our programs won't become hard to reason about.
// * Summary * BenchmarkDotNet=v0.10.14, OS=Windows 10.0.14393.2189 (1607/AnniversaryUpdate/Redstone1) Intel Core i7-6820HQ CPU 2.70GHz (Skylake), 1 CPU, 8 logical and 4 physical cores Frequency=2648432 Hz, Resolution=377.5819 ns, Timer=TSC [Host] : .NET Framework 4.7.1 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2558.0 [AttachedDebugger] DefaultJob : .NET Framework 4.7.1 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2558.0 Method | Mean | Error | StdDev | ----------------- |---------: |---------: |---------:| ArrayForEachLoop | 66.11 ms | 1.256 ms | 2.063 ms | ForEachLoop | 60.77 ms | 1.205 ms | 1.480 ms |
But a lambda is still a function, right? Couldn't you use `return;` to break out of the `.ForEach();`, or would that terminate the enclosing method as well? &gt;on mobile, hundreds of miles from my computer so I can't test it :|
Maybe for additional information, I now have this: function newFunction(evente, id) { evente = new MessageEvent('jsCall', { 'view': window, 'bubbles': false, 'cancelable': false, 'data': id }); return evente; } Thinking it would make it easier to call it, but when I click the marker theres no response in dgv. If nedded here his the c# code: int rowindex = -1; dataGridView1.SelectionMode = DataGridViewSelectionMode.FullRowSelect; foreach (DataGridViewRow row in dataGridView1.Rows) { if (row.Cells["Edificio_cad"].Value.ToString().Equals(id)) { rowindex = row.Index; dataGridView1.Rows[rowindex].Selected = true; dataGridView1.FirstDisplayedScrollingRowIndex = rowindex; //MessageBox.Show(edificios); //Console.WriteLine(edificios); MessageBox.Show(lat); return; } else { //dataGridView1.ClearSelection(); } } The whole point is to when i click on the marker it changes the respective row in dgv Windows form.
So you just invented Kotlin from C#? Personally I like C# the way it is. Simple, readable no bullshit "make it smaller and totally unreadable". I don't really mind another 2\-5 or 10 lines of code if I can easily navigate and understand in my codes even after a long brake.
The compiler translates foreach in plain array to a for loop. EXCEPT: In a for loop, the code is "untrustable" so the compiler insers an index bound check for every array access. With a foreach in a plain array, the compiler generates the array access by index so there is no need for that extra check.
A return in a lambda will end the current lambda and move on the the next item in the list. That's like the [continue keyword](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/continue). A [break statement](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/break) terminates the loop, no further items will be processed.
Hince why we do so much to keep it semi safe. I work for a very small company less than 6 employees. Over 200 game rooms, 5 different systems. Our in store servers have multiple points of communication to our main server which give us options to kill a server we don’t know or remotely install teamviewer to connect but nothings perfect and I’m not saying the way we do things is great and perfect because believe me it’s not I was just explaining the type of software we write and what we do to protect it as best as I can with the resources I have. Which isn’t much
http://enigmaprotector.com/en/downloads.html Enigma Virtual Box. Download it. Add your main EXE to the input file name Drag your _data folder into the files box use files options to "compress files" and or "delete extracted on exit" this is FAR from a solution to protect a unity build, but its one thing i do for many reasons its much easier to distribute a single EXE than the exe and data folder, when someone goes browsing they dont see the assembly-cSharp.dll staring them in the face. On large games we have cut down from 1.57gb to a 192mb file to push out. 
We do have activation servers and reporting servers that our in room servers rely on to stay up and running for periods of time (3days cuts off server, 5 days makes game terminals unusable, 10 days erases services used for games to connect to in house server, 30 days erases everything on server) but we cant do anything that requires maintaining internet 100&amp;#37; because dealing in a market like this a lot of our places are out in the middle of no where running on hotspot internet connections. I think were getting off topic of OP's original concerns at this point. My companies systems while we do a lot more than other companies in the same field are far from perfect, i know that. I also know I have no way of changing it I am the sole developer for all 5 systems our company produces which includes server, games, point of sale systems, reporting site, every thing and under the budget I am allotted I do the best I can. I have worked for other 'industry leaders' in this industry and they were terrible about security, I have seen developers that created a dll JUST for the database user id, password, and database name no protection just plain text. I am not perfect I am still learning I have only been developing for 5\-6 years and only 3 of that professionally.
Pedantic is good. I included Controls and touched on the SynchronizationContext, but didn't want to go too far down the rabbit hole. I didn't think of Progress&lt;T&gt; actually, it's a really good example and useful to OP :) Pedant away good sir, pedant away :)
The "C# Light" the presenter was describing is basically F#, FWIW.
This wouldnt work on so many levels. S/he's describing a class definition revamp not a revamp to the language. He's covered like 5% of CSharp and broke the remaining 95%.
&gt;Quick question, How do I view the XAML files? what are you using to design the wpf UI? In visual studio a double click on the .xaml file in your solution should automatically open a split view of the designer and actual xaml. or you can use any text editor to open them.
Correction: I'm using a winform. I was confused for a bit. And there are no XAML files in my solution explorer.
I don't think that it was the presenter's intent to describe something practical, but rather something ideal. If you like the sound of the ideal that the presenter is describing, you might consider branching out from C#.
Ugh no. How old is this?? Too much horror for one presentation. All the vaguely good points have been adopted already, albeit in a non breaking way that is parsable. The rest are horrid. Look, just add a new language called G# (Is G free? I just did F++. H#?) make it compile to CLS compliant IL and then you can do whatever the heck you want. It looks hard to parse to be honest, but that's never been something I can claim to be expert in. My initial concern was that every page has been about "saving space". To what end? If you're writing huge classes with lengthy methods, you're doing it wrong anyway (some exceptions as always). Short code is good code, compact code is not short code. Functionally (pun intended) though it offers me nothing. I've never hated something so much since yesterday at least. 
It won't create a new string in memory because it gets [interned](https://www.c-sharpcorner.com/UploadFile/d551d3/what-is-string-interning/).
&gt;People who don't use generics lower than slime mould This made me laugh.
 .net standard 2.0 is the correct choice. You need to add the system.data.sqlclient nuget package. [https://www.nuget.org/packages/System.Data.SqlClient/](https://www.nuget.org/packages/System.Data.SqlClient/)
I swear to god I'm going to write a 5000 word medium article on if statements. Want to have your code do different things depending on variables? Check out these "if conditionals!"
Links to a &gt;We're sorry, the page you requested cannot be found. Page on desktop
My company got bought recently and the new company is really big on having developers wrote blogs that we can put the company name on. I wonder if this is why medium exists.
I know you're poking fun, but C# has a ton of very extensible and useful functionality for relatively mundane things. Equality is the first one that comes to mind and IIRC there's a whole course on pluralsight just on equality in C#.
&gt; Every time you run into a weird name you simply use the built in refactoring tools in VS (and not search and replace) to correctly replace all occurrences of that specific name with a more sane one. Yeah, I thought of that in 1991. That's why you reuse the same name in multiple places. This both makes it much harder for the tool, it also makes it nearly impossible for you to figure out what a more sane and appropriate name would be in the first place.
&gt; You want to take a phone call at 3:00am on a holiday because someone in another country using binaries from your old company had a question? You take calls at 3am? You take calls on holidays? You take calls for customer service for a product from a *former* employer? I learned 25 years ago to turn the phone off on holidays and at night, and never *ever* take a call for a former employer. 
If you're going to do that to the code, you need to be washing your hands of it and walking away, so given a bit of time - like 30 seconds - you wouldn't *care* if you can recognize it.
I would just integrate a 3rd party library that does this for me because I am paid to work on new problems. But if you are looking to do this from scratch for whatever reason you may want to go [a bit acdemic](https://www.cs.dartmouth.edu/~doug/diff.pdf) for this one.
Woah woah woah, slow down man, you can't just skip ahead to something that advanced without *at least* 3000 words on these "variables" you just mentioned. And remember, the more nonsensical analogies, the better the quality.
The modulus operator in C# satisfies this equation. Since you are using integers, don't forget to do integer division. a % b = a - (a / b) * b 2 % 10 = 2 - (2 / 10) * 10 2 % 10 = 2 - 0 * 10 2 % 10 = 2 - 0 2 % 10 = 2 Or you can do long division to get the answer. I'm not sure how to format long division on Reddit. But when you do step 1 (how many times does 10 go into 2), you get zero. The remainder is 2 - 0 = 2.
I'd like to thank everyone with their tips. ^^
Copy the sample from MSDN and call it a day.
Hey thanks for your reaction, but you said I'm using integers but I'm using decimals. Even when adding some zero's to be sure, I still got unexpected values. 1,000 / 3,000 = 0,3333333333333333333333333333 1,000 % 3,000 = 1,000 
Make sure you put a long comment in your code which is in suspiciously perfect English. Then, include a link to the MSDN page where you copied your code and your perfect-English comment from.
If the compiler can understand it (which it must, otherwise your program wouldn't work in the first place) the refactoring tool can too. You can simply start by de-duplicating all the names to make it easier on yourself. I work a lot with (decompiled) code that has obfuscated/meaningless names and it doesn't really matter all that much.
err different depending on pretty much the nature of the information and the structure of the file format used. The naive and shit way is to make a byte by byte comparison of the whole file till you spot a difference then try and find the next x bytes of file a in file b to resume comparison if you don't find em go back and repeat for the next x chunk etc. what you really need is intimate knowledge of the actual type of information represented AND the file format used. Take plain english text + knowledge about ascii byte structure. Suddenly we can improve the naive "algorythm" above to pattern match words, scentences etc. Now we hire a linguist and suddenly we can tell you that the 6 letter difference in sentence 14 changes the gramatical meaning of that chunk by 100%. So in short: 99% of the time use stuff like hashes or bitwise comparison. The other 1% apply for a research grant or be part of a well paid large team.
[https://www.youtube.com/watch?v=zT2luRSwSVM&amp;feature=youtu.be](https://www.youtube.com/watch?v=zT2luRSwSVM&amp;feature=youtu.be) Once again, Reddit Beta is so much better than old Reddit.
SPOILER!
&gt; sqlclient Ahh ok nice thanks. So I was able to move my sql load method to my Library project. But when I call the method from my Console project I get this error. System.IO.FileNotFoundException HResult=0x80070002 Message=Could not load file or assembly 'System.Data.SqlClient, Version=4.4.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. Source=DevTask.Data StackTrace: at DevTask.Data.Librarys.SQLHandlerLibrary.LoadFromSQLDatabase[T](String tableName) in Do I have to add the nuget package to me entire solution or just the .net standard 2.0 project?
[https://www.youtube.com/watch?v=94xH1\_Kwy8Q&amp;feature=youtu.be](https://www.youtube.com/watch?v=94xH1_Kwy8Q&amp;feature=youtu.be) Reddit beta is so much nicer, especially with formatting and linking.
&gt; Simple, readable, no bullshit "make it smaller and totally unreadable". This. What is the obsession with how many lines or characters it takes to express a concept? Code is a document for humans first, computers second.
Thanks that did the trick
Of course I don't. Which is why the "if you have a question about my code, call me instead of decompiling it" is silly. No, don't fucking call me. If you don't have access to the source, then decompile that shit and figure it out for yourself. If you want support on something I no longer get paid to work on, I may be convinced to contract out at $250/hr with a 4 hour minimum.
&gt;So since 2 divided by 10 is 0,2 exactly there shouldn't be a rest. But the rest is 2. If that's what you want, you should do `10 % 2` for "2 goes into 10 `x` amount of times with `result` leftover". `2 % 10` is "10 goes into 2 how many entire times: 0, with how many left over? 2" Basically `%` in C# isn't the modulo, it's the "remainder operator" /r/csharp/comments/7sgd8a/modulo_or_not_modulo/
You're not using Array.Sort; chars is a List, so you're using [List.Sort()](https://msdn.microsoft.com/en-us/library/w56d4y5z(v=vs.110\).aspx). This takes a Comparer&lt;T&gt;, which is just a delegate method that accepts two elements and returns a positive integer if a comes first in the order, returns a negative integer if b comes first in the order, and returns 0 if the two elements are tied. a and b are values in the list, more specifically, they're any pair of values in the list (so the Comparer&lt;T&gt; must work for all instances of T in the list).
[Other Linux platform support info](https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x) 
(a, b) are parameters for lambda expression. If you don't know what that is, read [this](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions) And here is how it ties into sorting: [msdn](https://msdn.microsoft.com/ru-ru/library/234b841s(v=vs.110).aspx) 
How much control do you have over TEntity? How often do the schemas for TEntity change, and are they written by your team or provided by external teams? Doing reflection as part of your query is usually not where you want to be. If TEntity classes can be implemented with methods that return values based on string property names (like an ExpandoObject or Dictionary), that may be your best bet for arbitrary search.
Some of the stuff are very similar to TypeScript.
&gt; .NET Core is the open-source, cross-platform .NET platform for building microservices. I think it's a little bit more than that....
Full control. TEntity are our EF models, TViewModel are my JSON VMs that get serialized/desearialized. They shouldn't change TOO much, maybe once a month as the customer asks for an additional column or feature. Yeah I realize I am "abstracting my ORM" and id like to get myself away from this but I don't know a better strategy to stay DRY. Could you tell me more about building methods that return values based on string property names? That sounds like what I need.
This is very awesome!
% gives you the remainder. So 3 goes into 1 0 times with a remainder of 1.
I don't speak Spanish(?) but at a quick glance, all of the "else if flag == x" could be replaced with a big "switch" statement. Also, since you do flag++ in every case, you might as well move it outside the control statements and make the code more compact.
Your passing in a delegate. When it wants to compare two items it calls your delegate with them. So a and b are the items being compared. This is actually a lambda expression the equivalent would be a function like int Compare(char a, char b)
Looks like a pretty big rabbit hole from the newbie stand :|
Here is a solution using reflection: foreach (var column in dataTableRequest.columns.Where(x =&gt; x.searchable &amp;&amp; !string.IsNullOrWhiteSpace(x.search.value))) { var property = typeof(TEntity).GetProperty(dataTableRequest.columns[i].name); if (property is null) { // Property doesn't exist continue; } projectedQuery = projectedQuery .Search(entity =&gt; property.GetValue(entity).ToString()) .Containing(column.search.value); }
&gt; Basically % in C# isn't the modulo, it's the "remainder operator" Ah I see, thank you now I get it.
not at the moment. main purpose is to be able to deploy .NET micro-services onto linux machines/vms/containers.
Thank you. Super helpful reply. Thats a very good link and my brain is now exploading :).... Coincedently, my Stephen Curry - Concurrency in C# cookbook arrived in the mail yesterday. Seems I badly need to read that before I get too excited about architecturing things. Many concepts to understand... **The block of code:** I had that looped in the event of fail to a blocked retrieve. I.e. Keep trying until we get it. I presume that's not a good idea? **Dispatcher:** From the article, I get the impression I should never need to use a dispatcher if I am using async all the way? and you say that async/await's the alternative. Do you mind expanding on why?
Obviously containerisation is one of the biggest design goals of .net core and that's why RHEL is investing in it, but I don't think it's fair to say that .net core is *only* for microservices.
My friend you come at the right time! I'm about to embark on 7 full days of DDD/ES training and will also give your course a go. Any suggestions on other resources too?
As has been mentioned you can simplify the original class a lot already. Like using read only properties. This also only makes sense for simple classes. Constructor arguments don't always equal fields. There is already the record proposal that covers most of this. Shortening xml tags would only work in certain cases and leave you with two different ways of doing it. Indentation instead of curly bois? GTFO 
Aw thanks :) Ah ok, you're polling, and that's not necessary. You'll get some really good guidance from Stephen (Cleary) which will make it, ... dammit I want to say clear, but that's a pun :) If you think about it, the idea of concurrent code is to let something happen on another thread and then notify you when it's done. If you're sat there going "You done? no You done? no You done??? no YOU DONE?????? no" you're expending a lot of effort. So we have lots of constructs that allow for notifications. Skipping most of history, Tasks for example can run some code once they complete and you can tell it which thread to run it on. The more modern alternative is to let async await just magic the details away. The dispatcher is just a helper class that makes it easier to deal with the SynchronizationContext. async await takes out the need for a specific helper, which means your code will be portable to Xamarin, Winforms, UWP and others. They all use slightly different Dispatcher-like classes and in Winforms case, a slightly different Paradigm generally (related to its age, bless). There's nothing wrong with it, but async await, once you get your head around it (took me longer than I wish to admit) is elegant and complete. I know that's really wishy washy, I was going to write a little code example, but honestly, until you get the concepts of async await down, you will sort of look at it and go "..." and then, if you're like me, there will be a million unanswered questions :D You'll be fine, write code, ask questions and there will always be someone to help :) 
We can get almost 2 GigaRabbits down it synchronously and 8 asynchronously with some GC pressure ;) I'm old, I just got an email from StackOverflow telling me someone replied to an answer I posted in 2010 on something concurrency related!
Bla bla bla "M$FT doesn't care about OSS and bought GitHub to mine my shitty repos /sarcasm
That worked. How did you arrive at `property.GetValue(entity).ToString()`?
What’s the difference between this “Red Hat version” and .net core 2.1 for Linux ?
Oh okay. Thank you for replying
XmlTextWriter is found in System.Xml Also the recommendation is to use XmlWriter if you are using .NET 2.0 or higher. See documentation [https://docs.microsoft.com/en\-us/dotnet/api/system.xml.xmltextwriter?view=netframework\-4.7.1](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmltextwriter?view=netframework-4.7.1)
On software I worked on 15 years ago, we jokingly considered adding: “Congratulations! You have built Boardwalk! If you are not a Parker Brothers employee, consider sending your resume to ProjectSquirrell@pb.com. Seriously, if you managed to get ahold of this code and figured out how to compike it, something that takes an average new developer 6 months, we want to negotiate!” No, not at Parker Brothers or any program called Boardwalk. I needed a readable illustrative example.
 XmlTextWriter writer = new XmlTextWriter(daPath, Encoding.UTF8); and so on... Providing that you already have using System.Xml; And on a side note, you should use Path.Combine, so instead of: path + "\\Booking\\settings.xml" use Path.Combine(path, "Booking", "settings.xml")
I have using System.Xml; at the start of the program which is what's confusing me
`typeof(TEntity).GetProperty(column.name)` returns a PropertyInfo object, which describes the public property of TEntity with the specified name. The [PropertyInfo.GetValue method](https://msdn.microsoft.com/en-us/library/hh194385(v=vs.110\).aspx) returns the property value of the specified instance of TEntity (named `entity` in the lambda expression). I used `.ToString()` since `.Search` requires the Func to return a string or a struct. You could also use `(string)property.GetValue(entity)` if you know all the properties of TEntity are strings.
Thanks for that, if you don't mind another question - what would be the best way to "close" the program? (not sure if that's the right word) as from my understanding for the program to write into the file it must be closed and not ended via the debugging mode
considering this is a .net sub I highly doubt you'll see that here...
You need to call the System.Alt.F4() function... Ok sorry could't help my self..trololol.. Seriously try. System.Diagnostics.Process.GetCurrentProcess().Kill(); or Application.Exit() &lt;-- this one might not always work thou, it only message the program to shutdown, but thread can still be stalling the process..
Analog hole is a bit of a problem when trying to protect things like this. Where even if you had a perfect uncrackable DRM device, with a camera that's high quality enough, you can simply record the screen from as close as possible after having calibrated your camera with some test images so it gets a pretty much 1:1 copy of what's playing on screen.
Cheers the System.Diagnostics.Process.GetCurrentProcess().Kill(); one worked, still not writing to the XML file but I think that's something else I've done wrong.
These kind of expressions are lambdas. they're like in-line functions. You can write them lots of ways, so I'll show you the same lambda expression in different styles: (int a, int b) =&gt; { return a + b; } (int a, int b) =&gt; a + b (a, b) =&gt; a + b Functionally, these are similar to writing: int foo(int a, int b) { return a + b; } So when you see this statement: chars.Sort((a, b) =&gt; t.IndexOf(a) - t.IndexOf(b)); it's calling the list's Sort method which takes a single Comparison&lt;T&gt; delegate[0] parameter. This parameter is something like a function which takes two T (char) and return an int. Like something with the signature: int foo(char a, char b) You can satisfy this with a lambda. In this case, the lambda takes two characters (a and b) and returns an int by subtracting the two IndexOf calls. 0: https://msdn.microsoft.com/en-us/library/tfakywbh(v=vs.110).aspx
They're not using the Analog hole, though.
Killing the process is not the correct way to exit the application. You are in a form, so just call Close().
The author deleted this story
That worked, also got it to write to the XML file. Thanks for that!
So, * some of this has made it to C# by now * some of it won't (making whitespace significant hopefully will never happen) * some can be found in proposals like Records Given the original code (I left out the XML comments because those haven't improved): public class Person { public Person(string name, DateTime birthday) { _name = name; _birthday = birthday; } private readonly string _name; private readonly DateTime _birthday; public string Name { get { return _name; } } public DateTime Birthday { get { return _birthday; } } } We can do this in C# 7: public class Person { public Person(string name, DateTime birthday) { Name = name; Birthday = birthday; } public string Name { get; } public DateTime Birthday { get; } } We could also, if we were so inclined, use fat-arrow notation, but this yields no benefit here: private readonly DateTime _birthday; public DateTime Birthday =&gt; _birthday; Beyond that, we're left with two problems: * the constructor is still quite redundant, * despite all this code, we don't even have basic stuff like `GetHashCode()` implemented Records aims to solve that. You could get all of the above and more (such as equality) using: public class Person(string Name, DateTime Birthday); But we're not there yet.
but but - my god! who well tell us about all the different ways we can use ToString()? 
&gt;Which is why the "if you have a question about my code, call me instead of decompiling it" is silly. Go back and read what I wrote again, because clearly you didn't.
RH specializes in stable versions for their corporate customers. So expect all the MSFT security patches to be rolled into it while the version number stays the same. 
There's some important nuance missing here. XmlTextWriter is a Streaming Writer, and as such *really should* be disposed as soon as you are done doing your thing. ``` using (XmlTextWriter writer = new XmlTextWriter(yourPath, Encoding.UTF8);) { //Use the writer } ``` This will ensure that the file is written to as soon as the block of code is done. Otherwise you could wind up in odd scenarios where the file doesn't write, or perhaps is 'locked' when you don't expect it to be.
One flaw I am struggling with is that GetValue stuff is causing my queries to all be evaluated locally, any way around that?
Still waiting on .NET Core for Fedora.
A good source of these images may be meme websites that supply template images. One example of such a site is https://imgflip.com/memetemplates You can parse each page's HTML for the names of all the memes listed and then substitute each name it into the source image URL format: `https://imgflip.com/s/meme/NAMEHERE.jpg` So for the first page you would have https://imgflip.com/s/meme/Distracted-Boyfriend.jpg https://imgflip.com/s/meme/Expanding-Brain.jpg https://imgflip.com/s/meme/Two-Buttons.jpg etc. You could make an ISource&lt;T&gt; interface that has a method that returns an IEnumerable&lt;T&gt;. You would then make a class for Imgflip that implements ISource&lt;IFunnyImage&gt; and gets funny images using the way I detailed above. You could make other classes for other meme websites that implement ISource&lt;IFunnyImage&gt; to get images from other sites. IFunnyImage could have properties for the name and image URL for the image. Then to get a random image from all the sources, you can .Concat() all the IEnumerable&lt;IFunnyImage&gt; objects returned from all the sources, make a List&lt;IFunnyImage&gt; out of it, and use .Count and the indexer to get a random IFunnyImage.
 return string.Join("", s.OrderBy(t.IndexOf)); Linq is great :)
Thanks for the help, you really dig me out of a ditch here 
Index out of bounds of array means exactly that: you're telling it to reference index 'x' in an array that doesn't have an index 'x' (like saying reference position 5 in an array that only has 4 members). Step through the code in debug line by line and determine which line of code is throwing the array index error. It's in one of the lines where you're assigning values to your variables. I'm going to ignore the issue of unnecessary array variables and hard coded indexes, but give some thought to this: if you only ever use the first value in a result set, why store the whole set and refer to the first value as opposed to returning and storing just the result you need?
I actually have several courses on the topic of DDD, definitely recommend this one in addition to the one I mentioned: https://app.pluralsight.com/library/courses/refactoring-anemic-domain-model/table-of-contents There's also an introductory one from Steve Smith and Julie Lerman, it's a good watch too: https://app.pluralsight.com/library/courses/domain-driven-design-fundamentals/table-of-contents
Thank you. I am going to try to debug this line by line. I'm also new to VS so it's information overload for me right now. That being said, I see your point. I'll rewrite this with string vars instead of arrays. That makes more sense. My hope was to pull the entire result into an array, then assign variables to each index of the array. Haven't figured that part out yet. Ideally, each array equals one row in the destination SQL table. And this should be inserted one row per loop of the for each. 
I'm going to be very busy by the looks of it! Thanks
&gt; Could you tell me more about building methods that return values based on string property names? That sounds like what I need. I'm not sure what the best way to implement this is, and there are some ways that will do the work on the server and others that will do it on your client. It might be worthwhile to return the expression rather than the string, so the database just receives an Expression&lt;Func&lt;T, string&gt;&gt; rather than receiving a string and doing some sort of lookup. That might look like: public abstract class EntityBase&lt;T&gt; { public abstract Expression&lt;Func&lt;T, string&gt;&gt; PropertySearchDelegate(string propertyName); } public class EfModelA : EntityBase&lt;EfModelA&gt; { public string Prop1 { get; set; } public string Prop2 { get; set; } public string Prop3 { get; set; } public override Expression&lt;Func&lt;EfModelA, string&gt;&gt; PropertySearchDelegate(string propertyName) { switch (propertyName) { case nameof(Prop1): return (model) =&gt; model.Prop1; case nameof(Prop2): return (model) =&gt; model.Prop2; case nameof(Prop3): return (model) =&gt; model.Prop3; default: throw new Exception("you can't search that"); // Something that creates an http 400 response. // Alternatively, return (model) =&gt; string.Empty; } } } This gives you control over which properties are searchable (searching varchar max fields may hurt your performance more than you want) and is completely transparent to the framework you're using; it just receives an Expression&lt;Func&lt;T, string&gt;&gt; like it expects. The cost is that you have to add each searchable field manually to each class and you have to instantiate an empty TEntity to call the PropertySearchDelegate method, since abstract methods can't be static. This would likely be more performant than reflection but more difficult to implement and maintain.
&gt; Ugh no. How old is this?? 4 years (slideshow was posted in 2014)
One thing you might want to look into "Longest Common Subsequence","Levenshtein difference", and "shortest middle snake" algorithms and related literature. About 6 years ago that was the starting point I used when I was hired to pretty much try to "clone" a basic Beyond compare implementation to be added to some kind of database tool. I recall the Levenshtein distance algorithm was also useful for making the diff "semantic" and properly recognizing certain differences as replacements, removals, or additions when code is shuffled around for example. about 6 years ago I was hired to create an implementation that was similar to "beyond compare" for integration into some kind of database utility. As I recall, it applies the longest common subsequence between both lines themselves and then digs into the lines and performs the same algorithm on the letters to isolate how specific lines are changed.
I dont think so, and it's not the best seq2seq model. But i have to say, in my opinion it's hard to find good ML Libarys for C#. 
Especially since the latest release added global tool support, which makes it a breeze to install .net core console apps globally.
[Is this not it?](https://developer.fedoraproject.org/tech/languages/csharp/dotnet-installation.html). It's not official yet because it requires .net to build .net and there's no bootstrapping compiler, but that shouldn't stop it from working right?
The language itself is easy to learn but it takes a bit of time to grasp the more advanced concepts. There is a wealth of information in documentation/blog posts &amp; other sources, if you're good at googling you'll almost always be able to find the thing that you need. I don't mean to sound rude but it seems that you have the attitude of not wanting to learn the language. Fyi async/await != threading.
&gt;but am currently working at a Windows shop (ughh...) and have to routinely work on .NET applications. I fucking hate it Sorry man, if you're gonna be all whiny and pissy, people probability won't want to help you. 
I think of myself as pretty good at googling, but finding the source you need for the specific version of .NET is remarkably difficult.
Why do you use a shit language on top of a proprietary OS?
Ok, specific version of .NET have loose relation to language features. C# 4.0 - 7.3 are all part of the .NET 4.x framework
^ found the guy that discovered linux 5 minutes and can't shut the fuck up about it!
^ found the guy that discovered linux 5 minutes ago and can't shut the fuck up about it!
I'm pretty sure you must just be trolling now, the language isn't shit. Windows is a proprietary OS though. C# is not exclusive to windows. 
Thanks for your answer, this is what I was assuming but it is good to hear from another programmer that they would prefer this approach.
I deleted the original post but at this point I just want to point out how awful .NET + C# is. Kudos if you use it standalone (even though C++ has more features and only a slightly worse syntax and is understood by everyone) but developing shit on Windows with C# is truly the worst programming experience I've had.
JS has plenty of great things going for it, but it lacks many more. Try to do a single RSA encryption using JS and then try it with a compiled or byte coded language. You will notice that the difference is abysmal. JS is only fast when u actually mix it with another language that implements the methods closer to the metal that’s gets acceded through an API or FFI. So, JS is actually costing many development hours to companies since they still have to maintain multiple languages if they want performance. This is because JS simply can ever ever come to have the performance that a native of byte codes language can. Then we have the fact that JS is single threaded and parallelizing is extremely tedious, ineffective and expensive... did I mentioned slower? The reality is that, JS is reaching the limit and browsers will have to keep adding tweaks and improvements to the browser to make the language more responsive. This can keep eternally and in the end it will still never be really performant or predictable. WASM was designed to fix all these issues and to allow any other type-safe language to run in the browser. This does not mean that JS will die, it just means that other languages can now tackle the front end and one can choose what to use for the right task. One I’m sure, the days of JS dominance in the frontend are counted.
Removed: Rule 4.
Thanks for your response, will look at the documentation you great people have linked tomorrow! Right, this is my understanding of it now, so (a,b) is every possible combination of the values in the array. In the example “good” it would be something like a = g, b = g a = g, b = o a = g, b = o a = g, b = d a = o, b = g ...and so on Then it loops over, subtracting the index of the both characters where they appear in “odg”. So if index(a) - index(b) = 0 it’s a match, records the position it was found in the comparison string, then orders them? Really do appreciate the help! :) 
Thanks for your reply! I use lambdas for work but never to this extent! I’ll be sure to read up on these tomorrow :) Cheers! 
&gt; We just need to be careful to be explicit in these mutations, so our programs won't become hard to reason about. Sure, but advocating care when "Console.WriteLine()" is... Well, it's the sort of pedantry which will get coworkers angry at you for wasting brain cycles. To say "Reading memory modifies CPU caching state, and it's important to be careful about modifying state" is essentially equivalent.
&gt; it's the sort of pedantry which will get coworkers angry at you My coworkers wouldn't get angry for this, that's for sure. Also, you and me aren't working, we're on an internet forum with plenty of time to waste. &gt; To say "Reading memory modifies CPU caching state, and remember that modifying state can be bad!" is essentially equivalent. Not really, it sounds like a warning, and what I originally said was simply a "side note" just in case someone didn't know that _technically_ output is state mutation. &gt; let's be real: this is a subreddit dedicated to a programming language, which is already five abstractions beyond "purity in its most strict sense... doing maths" And I fully agree; but it doesn't stop me from dropping a little "FYI". You guys are making way too much of my comment, really!
Is there any reason you need it to be .NET Core specifically? (Since you are targetting Windows) If not, you can either use Winforms/WPF with [32Feet](https://github.com/inthehand/32feet/wiki) or just use UWP which has built-in support for BT/BLE. If you really want to build desktop application with .Net core you may have to wait till late 2019 when it will support desktop applications (which you need for your system tray) on Windows. 
Yeah, that's fair. (It's something of a faux-pas to correct people with pedantry, though :P)
&gt; Shawn Wildermuth Have you done any of Wildermuth's courses? I've started a couple and found them ponderously slow, and the guy just irritates me, so I look elsewhere.
1%3 = 3
Feel like answering an off topic question? How come char.stuff is not just put on ch? Like "if (ch.IsLower() || ch.IsNumber())" ? Just curious, if you know.
If you're talking about creating an alias with "using" such as `using foo = MyNamespace.Bar` then no, you're not creating a variable. Variables live in memory while the code executes. Aliases are used as shorthand to indicate to the compiler "where I write foo I want you to use MyNamespace.Bar" (going by the example above). They don't exist once the code is compiled.
I figure you mean the newer `ref` stuff. Simple example: int[] arr = {1, 2, 3, 4, 5}; int elem = arr[2]; // copies ref int elemRef = arr[2]; // aliases elem = 0; // arr = {1, 2, 3, 4, 5} elemRef = 0; // arr = {1, 2, 0, 4, 5} This isn't some legacy thing that should rarely be used anymore. Rather, it's actually pretty new in C# and can avoid the cost of copying large structs around in addition to a couple of convenience things. It shouldn't be super common, but it fills an area that was otherwise missing.
Could you farm the long running task out to an Azure function?
Load them into a queue and process them outside of your main API?
Also, I'd argue that async is better for things NOT cpu bound like waiting for IO or web calls. Your thread is sitting there with nothing to do. The context switch is worth the overhead to allow another thread to execute until your sms call is done.
You mean Microsoft won’t be applying security patches to .NET Core Linux? Do you have a source? Also what security patches? As far as I recall, they’re all just patches and updates from the .NET core got repo.
&gt; faux-pas r/todayilearned
Ah, so if we create a reference to the address the correct term is 'ailasing'. Whereas if we create a variable we 'declare' it?
That's a real good distinction to make. I think I've heard that before but when you are learning to code there is so much to remember. Thanks for the refresher!
From your api, instead of sending an SMS, queue up a "send SMS" job somewhere (such as making a row in a database that both projects can access). Then make a windows service project that polls for queued jobs and executes them. Hangfire is one tool that makes this easy.
I've used [Hangfire](https://www.hangfire.io/) before in a similar environment (webapi2 in app service) for similar reasons (don't want to wait around for a synchronous library to finish up, especially if the API it talks to is unavailable for some reason; the library call isn't depended upon further down the request). No complaints. Our usage and environment aren't particularly demanding though.
Well not really, I originally wanted to make a really small Program in Python. But unfortunatly there is no BLE library that supports Windows. I think I go with the Winform 32Feet route. Thank you!!
I think you mis-understood. 
In C# terminology, a ref return/ref local references a *variable*. `ref int x = ref y;` then can be said to create the symbol 'x' as an alias for the variable 'y'. It doesn't declare a variable – there is still only one location that can hold a value.
I came here to make this exact suggestion. Hangfire is brilliant for this kind of thing, super easy to implement and just as easy to manage after the fact.
Modulus*
Ah, so a alias is a different name given to a variable (other than it's declared name). Thanks for clearing that up, wonder if I'll ever have a requirement to use an alias but it's good to keep in the back of my head. 
32 feet does not support BLE, or at least it didn't last time I checked. But you can use the windows store api's they do have support for BLE, and you can use them in a normal desktop app
Looks really good from my inexperienced viewpoint. Question for you, I sort of skipped MongoDB. By the time I had a project that might have used it, every article was about it's lack of atomicity and how it was being used in every project and causing problems when those were the wrong projects. So what are the GOOD use cases, and just as important to me are the BAD use cases. Thanks 
It's indeed not often all that useful to reference a variable in the same scope as the original variable. But you can pass a ref as a method argument, so that the method you call can access the variable through this alias, even though the original variable isn't in scope. For instance, this method swaps the values of any two variables: static void Swap(ref int x, ref int y) { int temp = x; x = y; y = temp; } Then if you had an `int[] array` and an `int z`, you could do things like: Swap(ref array[0], ref array[1]); // x aliases array[0], y aliases array[1] Swap(ref array[5], ref z) // x aliases array[5], y aliases z
Yup and I know what you mean, for me it was kind of mesmerizing, but when I got bored I would set the speed to 1.25x
Task.Factory.StartNew with TaskCreationOptions.LongRunning and not awaiting will work fine, if you are afraid of thread starvation then use a Queue and let 1 thread handle the processing. If you need retry policies or other high level stuff then use HangFire or similar projects.
Hey, hope I'm not too late answering this for you. So, when you use `Application.Run(new Form())` to start your application, it's implicitly using an `ApplicationContext` to manage your application lifecycle. `Application.Run` also has an override that takes an `ApplicationContext` instance, so you can pass in your own implementation. You can then make your own implementation of `ApplicationContext` that doesn't have a main form, and instead just tracks an arbitrary number of forms, and terminates when all open forms have been closed. Each form you open should be registered with the application context so that it can track when the form has been closed. I'm not great at explaining this, but I hope the example below makes things clear. I've just used a singleton instance of AppContext, but you could also inject it into each form, or abstract it behind an interface. public static class Program { [STAThread] public static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); AppContext.Current.ShowForm(new Form1()); Application.Run(AppContext.Current); } } public class AppContext : ApplicationContext { private static Lazy&lt;AppContext&gt; Lazy = new Lazy&lt;AppContext&gt;(() =&gt; new AppContext()); public static AppContext Current =&gt; Lazy.Value; public AppContext() { } public void ShowForm(Form form) { form.FormClosed += OnFormClosed; form.Show(); } private void OnFormClosed(object sender, EventArgs e) { if (Application.OpenForms.Count == 0) { ExitThread(); } } } public partial class Form1 : Form { public Form1() { InitializeComponent(); } private void btnLaunchForm2_Click(object sender, EventArgs e) { var form2 = new Form2(this); AppContext.Current.ShowForm(form2); } } public partial class Form2 : Form { private readonly Form1 _form1; public Form2(Form1 form1) { _form1 = form1; InitializeComponent(); } private void btnLaunchForm3_Click(object sender, EventArgs e) { var form3 = new Form3(); AppContext.Current.ShowForm(form3); _form1.Close(); Close(); } } public partial class Form3 : Form { public Form3() { InitializeComponent(); } } Hope this helps. Cheers.
You should start with giving the controls meaningful names
No, it's the remainder operator.
C# does not have a modulus operator. In most cases it returns the same result, but it's not a true mod operator.
MongoDB, in my opinion, is best used for small projects. For instance, I use it to store information for all my Twitter and Reddit bots.
One could argue that a variable contains a name alias as opposed to using the minimum viable information needed to identify the variable.
I don't agree. Use it when you don't need relational data or your data can be stored in a non-relational way. For example, none of these are "small projects": &gt; Baidu started out with MongoDB in 2012, initially migrating its user address book service from MySQL after hitting performance and scalability limits. Now over 100 different products and services are powered by MongoDB running on a 650 node cluster, deployed across multiple data centers, storing over 1PB of data. The scalability of MongoDB’s distributed design and developer productivity from the flexible document data model is unmatched by MySQL. &gt; Experian Health selected MongoDB over MySQL and other relational databases to power its Universal Identification Manager, a new application the company uses to uniquely identify healthcare customers. MongoDB was chosen because of its flexible data model, scalability, strong performance, and overall cost. Developing the Universal Identity Manager on a relational database would have meant that Experian Health developers would need to execute up to 10 SQL joins to positively match a patient's identity. Using MongoDB allowed the company to simplify its schema to remove that complexity; drastically reduce the number of queries; improve performance; and simplify growth as the data volume increases. https://www.mongodb.com/compare/mongodb-mysql
That's fair. I was just saying what I've used it for. I don't necessarily know enough about it to trust it with a big project of mine. I'd really need to learn more about it. Hence why I use it as a super quick and easy solution. Thank you for the info!! 
RedHat distro is geared towards corporate customers who pay a premium for long term stability. So they have a history of only taking security patches and rolling them into their releases. Aka no new features until they do a major release. 
I agree. Also want to point out that just because your data _can_ be stored relationally doesn't mean it has to be. But of course, you're the only one who can make that decision.
IMO it's awesome that C# is moving as fast as it is, but it's never going to be F#, regardless of how many of [these](https://msdn.microsoft.com/en-us/magazine/mt829270.aspx) we see. This isn't a bad thing; they're different languages for different people, different purposes, and, *-ehem-* different existing sprawly enterprise solutions. But if you're excited by features like "nullable reference types", pattern matching, and auto-implemented equality comparison, then you might give "C# Light" a try, which has had them from the start.
Many here people are explaining/giving examples of inheritance instead of polymorphism.
Use the web browser control in conjunction with an image classifier such as IBM's Watson. You can create a free account there. 
We use it heavily in production. I have yet to see a single thing it's good at that another database couldn't do better. * Relational data: use a relational database * key/value storage: Redis is better * blob storage: Azure Storage and S3 are better * searchable documents: Elastic is better * distributed data: I don't have experience here, but Mongo replicas are unreliable. From my experience, Mongo has been all marketing with no substance. Maybe someone else has a success story, but we've been quite unhappy with it.
Are you on the latest .NET Core? In 2.1 they just released abstractions and patterns for running background services hosted in the same web application, but with a different async root. David Fowler tweeted about this after .NET Core 2.1 was released. With that you could create a background process to process a queue in a synchronous manner where the reference to the queue itself is injected into the background service from IoC and then your web api can get the same reference via IoC. The WebAPI writes to the queue and the background services processes it. It would probably need to take advantage of a ConcurrentStack or some other simple method of concurrent protection, but it wouldn't be that hard to do.
While you're waiting, you can try [ValueOf]([https://github.com/mcintyre321/ValueOf). `public class Person: ValueOf&lt;(string Name, DateTime Birthday), Person&gt;{}` 
&gt; you'll start to underst Wow... I was not expecting a writeup like this, but I will take most of it to the bank! (some I will use as blow money) And if I remember I might thank you in 18 months...
Yep 1000%. Often people think "oh well stored data MUST be relational" even if that's going to cause problems.
Just like F# will never be considered for many of the deployment scenarios where only VB.NET and C# developers are allowed to play.
Lol, yeah I get a bit carried away :) Honestly, read it, some stuff will seep in without you noticing and then you'll just "know stuff" later. It's a weird learning trick that "the experts don't want you to know" or some such rubbish :) You'll be fine :)
Really appreciated. Redis and Elastic I know (And relational DBs of course) and I can see how that would be the case. I think I'm going with the comment in this thread that suggests it's good for small projects. As all my work projects are mid scale or above makes it a no go. Thank you :) 
It's alright as it is for a school project, but in the future i'd suggest you use WPF and Databinding. Also your classes have lots of fields but not really any properties. Doesn't bother me, but might bother others. Also you mash functions and data classes together. Try to seperate them. Although that's high level of critique, since i mostly work with MVVM. Bottom line for a school project it's alright!
High level is critique is what I needed :) I'm in my first year and I'll definitely look into proper naming of Classes / Variables, the project is due on Friday so if I've got the time to do so I might rewrite the classes and apply propper databinding &amp; use of properties too. Thanks for your time and the help
&gt; IMO it's awesome that C# is moving as fast as it is, but it's never going to be F# Could you elaborate on this? I've looked into F# and the ML variants before and found them interesting (syntactically), but wasn't sure I could make good use of them in my LOB programming.
It indeed is "it" and with cool url: http://fedoraloves.net There is active work towards resolving source-build issues, sooner or later it will be in Fedora-proper, but until then you're all welcome to use our packages in copr. They're as close as you can get :] --- ^(cc /u/redditthinks )
Out of curiousity, how does the source build stuff get resolved? I'm not familiar with Fedora or it's rules for source builds but does it mean a bootstrapping compiler is required?
Looks nice!
Fedora has requirements that not only the product / package has to be built from source, but also all the tools used in the process to build it. There is a number of pre-built tools used right now. The [source-build](https://github.com/dotnet/source-build) repo deviated from what is Microsoft using, and there is some work going towards "fixing that." _(I don't know how specific I can be so I will be vague x.x )_
Pretty sure it uses quicksort, which doesn't need to compare every possible pair, but *could* compare *any* pair. Sorting algorithms generally focus on finding ways to reduce the number of comparisons needed, but you need at least n - 1 comparisons to verify that an array of n elements is already sorted. Most of the good sorting algorithms have average-case computational complexity of O(n * log(n)). Here's a demonstration of quicksort: https://www.youtube.com/watch?v=ywWBy6J5gz8 
According to the current roadmap, the plan is to release .Net Core 3.0 in Q1 2019. https://github.com/dotnet/core/blob/master/roadmap.md
Is it a "has to be built from source" or a "could be built from source" thing? Like is the issue that some of the tools to build aren't open source? Or does it actually mean that when you compile the tool you need to use a bootstrapping compiler? Is there a non-roslyn C# compiler to compile roslyn (and then presumably roslyn recompiles itself)? 
This is much appreciated
Any time you have code that isn't doing what you think it should be doing, the debugger is your friend. Step through the code. Maybe it's not even entering the foreach loop: maybe you got the selector wrong. It's almost always something obvious; the debugger is always your best option. It tells you what your code is doing, which is often different from what you THINK it's doing. You make assumptions based on what you want your code to do. The debugger tells you if those assumptions are correct or not.
As someone who comes from a Haskell background, I certainly feel that algebraic data types are much nicer to work with than classes. And I very often make small C# classes immutable. I'm sure that F# is much more expressive and easy to write code in than C#, but I haven't tried F# yet. However there are some things about functional programming that aren't so great, that nobody seems to mention. Yes there are lots of old-school imperative programmers who see FP as scary and confusing and could hugely benefit from learning a functional language, but there are also a lot of people who are experienced with FP but who still prefer imperative styles (I'm one of them). The main issue for me is that languages like lisp / haskell / F# internally use linked lists for their "default" list type, and on large datasets you can quickly hit a brick wall with linked lists because of their poor memory locality. (Imperative languages can have this problem too, IIRC Python lists are internally arrays of pointers which have great locality, and an array of pointers would be just as slow in C/C++ - the dereferencing is the cost). The first "wall" happens when your dataset becomes large enough to involve lots of L2 misses (L3 access ~30 times slower than L1), and this can happen sooner than you might think. In Haskell, you can have mutable IO arrays of values using monads, but you're essentially writing code that looks imperative -&gt; is syntactic sugar for functional code -&gt; is implemented imperatively behind the scenes, which feels like going full circle twice. In F#, I'm sure you can easily just create an instance of List&lt;T&gt; or similar but then why not just do that in C#? (Same thought process for mutable B trees / hash tables / any other "fast" structure etc). I also love recursion, but not all functions can be made tail-recursive (F# does support tail recursion, which is great). So to avoid a possible stack overflow with non-tail recursion you have to write a loop anyway, same as in an imperative language, storing some kind of continuation in your own Stack&lt;T&gt; (unless F# has a much larger call stack?). Discriminated Unions / Algebraic data types are extremely good, and again I wish C# had something like them, they make writing a context-free grammar parser extremely easy. However, again, for large datasets they involve a lot of branching. So instead of having a PaymentMethod which can be a Cash, Cheque, or Card, it would be more performant to have three large collections of CashPayment, CardPayment, ChequePayment etc to reduce the cost of branching. So although I think algebraic datatypes &gt; classes, there's also the third way of "existence based processing" which shouldn't be forgotten about. ("If it exists in this location, we already know what it is...") I will definitely get round to learning F# at some point, but there are pros and cons to everything, and I don't think it's totally right to say that C# *should* become like F# as they serve different purposes.
Your application uses string concatenation for building queries and is thus vulnerable to sql injection attacks. For example: https://github.com/Uccino/FietsverhuurElstar/blob/master/Elstar/Classes/dbCommands.cs#L43 imagine someone enters `'+Username--` as the username... The proper way to do write an ado.net sql command would be something like this (ignoring the problem of what this code is actually doing for the moment...): string Command = $"SELECT * FROM dbo.Customers WHERE Username = @Username AND Password = @Password"; using (SqlConnection loginConnection = dataConnection.GetConnection("Enter", "Connection", "String", "Here")) { // Defining a new instance of the login command using (SqlCommand loginCommand = new SqlCommand()) { loginCommand.CommandText = Command; loginCommand.Connection = loginConnection; var userName = loginCommand.CreateParameter(); userName.Name = "@UserName"; userName.Value = UserName; var password = ... loginCommand.Parameters.Add(userName); loginCommand.Parameters.Add(password); ... Also you shouldn't have this GetConnection method all over the place, it should be internalized in the `dbConnect` class like this: public partial class dbConnect { public MyConnection GetConnection() =&gt; return new MyConnection(GetConnection(...)); } public class MyConnection : IDisposable { private readonly DbConnection connection; private bool disposed; public DbCommand Command { get; private set; } public MyConnection(DbConnection c) { connection = c; //could be better because you shouldn't really do any work inside a constructor; //alternatively you would have the getter lazily return an open command and some logic in the dispose method Command = connection.CreateCommand(); Command.Open(); } public void Dispose() { if(disposed) return; connection.Dispose(); Command.Dispose(); disposed = true; } } This would reduce the login method to: public User Login(string Username, string Password) { string Command = $"SELECT * FROM dbo.Customers WHERE Username = @Username AND Password = @Password"; using (var connection = dataConnection.GetConnection()) { connection.Command.CommandText = Command; var username = connection.Command.CreateParameter(); ... All of this boilerplate is the reason people have built ORM frameworks. The entire method written with dapper would be: public User Login(string Username, string Password) { string Command = "SELECT * FROM dbo.Customers WHERE Username = @Username AND Password = @Password"; using (var connection = dataConnection.GetConnection()) { return connection.Command.Query&lt;User&gt;(Command, new { Username = Username, Password = Password }); } } --- Now down to the meat of the other problem with this particular method: plain text passwords. Your method should really look something more like this (could be fancier with `async`, but a synchronous version is here): public User Login(string Username, string Password) { string user = "SELECT Id, Username, HashedPassword FROM dbo.Users WHERE Username = @Username"; string customer = "SELECT * FROM dbo.Customers WHERE Id = @id"; using (var connection = dataConnection.GetConnection()) { using (var tokenSource = new CancellationTokenSource()) { var delay = Task.Delay(1000); //must be significantly more than any possible validation var validator = Task.Run(() =&gt; { var record = connection.Command.Query&lt;LoginRecord&gt;(user, new {Username = Username}); if (record == null) return null; if (!PasswordHasher.Check(record.HashedPassword, Password)) return null; return connection.Command.Query&lt;User&gt;(Command, new { Id = record.Id }); }, tokenSource.Token); delay.Wait(); if (!validator.IsComplete) { tokenSource.Cancel(); return null; } tokenSource.Cancel(); return validator.Result; } } } https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet https://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes(v=vs.110).aspx The use of Task.Delay here prevents possible timing attacks against this method because the method would otherwise leak the reason for failure being either the user doesn't exist or the password is wrong. One might even implement an exponential backoff on it to prevent dictionary attacks from the same caller, but in a windows app that is pretty meaningless (in fact the whole method is because you have access to the database anyway).
And it doesn't need to be F#. F# is a niche programming language while C# is a general purpose programming language.
Aren't open source, or just do not build for some other technical reasons on Linux... no real difference in the end - and it "has to be" built from source, on Fedora. Basically there should be only source on one side, and product on the other side... no outside/prebuilt tools or binaries.
&gt; F# is a niche programming language What makes you say this? As a hobbyist, I've been using F# [front-end](http://fable.io) lately, myself. But I have also used F# as [a programming scratch pad/math notebook](https://notebooks.azure.com/), and done some web-scraping and automation with [canopy](https://lefthandedgoat.github.io/canopy/) and [the HTML type provider](http://fsharp.github.io/FSharp.Data/library/HtmlProvider.html). I'll also prefer F# to Powershell for scripting, when given the choice.
[removed]
F# has an extremely passionate community that been created some real gems. I'm not sure what kind of programming you're doing, but here are some potential perks off-the-cuff for professional F# development: * A "full-stack" F# developer can write and debug *all* of their code in F#, including code that will execute in the browser. This means that the same validation logic (if you really need it) that runs on the server will run on the client. You only need to write it once. (See [the SAFE stack](https://github.com/SAFE-Stack/SAFE-BookStore)) * F# is supported by Jupyter notebooks, including those that are hosted in Azure. If you're not familiar with them, they're handy for quick modeling, data visualization, and as a scratch pad. * Actually writing code in F# tends to be a more interactive experience, allowing some developers to code faster. It was a REPL-friendly language from the start, where the C# had scripting and its REPL tacked on later. A flow where you write interactive code (with REPL) to develop a function, and then "crystallize" it as a unit test for posterity feels like TDD on speed. * [Type providers](https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/) continue the interactive theme. This was the first feature of F# that just made my drop. If you are not familiar with these, here is the gist: in your code, you connect to (e.g.) a web page, a database, or a flat file. Behind the scenes, the "type provider" will immediately and automatically generate representative object structures and instances for you. You don't need to define a class to represent the contents of the page/database/file, because it just magically happens. * With discriminated unions and pattern matching, your domain model can be much more expressive in F# than in a language like C#. The typical slogan here is that if you know what you're doing in F#, it is impossible to represent invalid state. This translates well to just about any LOB -- you represent business rules structurally (i.e with a rich type system) rather than procedurally (i.e. with validation methods). * [Railway-oriented programming](https://fsharpforfunandprofit.com/rop/) provides a paradigm case of how clear and easy-to-reason-about F# code can be. The closest that C# comes (I think) is with fluent interfaces. 
You can build an expression like this: Expression&lt;Func&lt;T, string&gt;&gt; BuildStringPropertyExpression&lt;T&gt;(string propertyName) { var props = typeof(T).GetProperties(); var propertyInfo = props.FirstOrDefault(p =&gt; string.Equals(p.Name, propertyName, StringComparison.OrdinalIgnoreCase)); if (propertyInfo == null || propertyInfo.PropertyType != typeof(string)) throw new Exception("invalid property"); var param = Expression.Parameter(typeof(T), string.Empty); var property = Expression.Property(param, propertyInfo); return Expression.Lambda&lt;Func&lt;T, string&gt;&gt;(property, param); } Probably want to cache stuff though.
Find a good JSON API, spin up a simple WebClient, use `DownloadStringTaskAsync(url)` to scoop up an image link, then deserialize with Newtonsoft.Json and output. Simple.
You are in denial 
If the conversion from full class to dto stub only happens client side i don't see the difficulty? It sounds like you've mixed responsibilities or maybe i don't understand your problem correctly. 
&gt;What makes you say this? That's hardly a controversial statement. The reality is that almost nobody uses functional programming. Every few years, a cool new kid comes to town, be it Lisp, OCaml, Haskell, or now F#, but as much as functional programming offers a lot of _inspiration_, few people want it as their main syntax. Thus, instead of F# becoming the main language Microsoft gets behind, they find ways for some specific features to be more compatible with the mainstream, and the end result ends up in C#.
UWP is the only way, I don't think any other APIs support BLE. 
32feet does not support BLE. See [this](https://github.com/inthehand/32feet/wiki/Bluetooth-Low-Energy) link. 
Nobody would disagree with the fact that F# isn't used as much C#, while some people would disagree with what's usually meant by the term "niche." Whatever the case, I appreciate your points about "cool new kids," and inspiration. Learning Clojure made me a better C#/JavaScript developer. There is also something to be said here about finding joy in novelty. These are good points. I've heard it said that while many people appreciate what Haskell brings, they wouldn't want it to be their primary day-to-day language, and I can understand why. F#, however, aims to be a practical language first, and an "ideal/pure" language (like the Lisps and Haskell, I think) second. [Here is a great talk from F#'s creator on the topic.](https://skillsmatter.com/skillscasts/11439-keynote-f-sharp-code-i-love) This distinction has actually caused some contention among F# developers.
Meh! learning. yuck. 
Beware of .Net Standard 2.0's fancy new ADO.Net stuff. [It's broken.](https://weblog.west-wind.com/posts/2017/Nov/27/Working-around-the-lack-of-dynamic-DbProviderFactory-loading-in-NET-Core)
Are the list all the same size?
In no way is it broken. There is a few things still missing from the standard, but it's not broken.
Yes. Basically, I'm creating a shitty report out of an XML dump. Basically automating an interns job that they used to do (we dont have an intern anymore)
Try it with [this](https://stackoverflow.com/questions/14639481/merge-multiple-lists-into-one-list-with-linq/14639523#14639523)
Thanks, that works nicely!
Uh... wow, I think I need to go learn some F# now. You sold the usefulness of it quite nicely.
F# isn't a niche language itself. It just exists in a niche class of languages, that every dev should try to dive into imo.
You need the `&lt;x:Panes&gt;&lt;/x:Panes&gt;` tag and gridlines should be toggled on http://blogs.lessthandot.com/index.php/webdev/serverprogramming/aspnet/export-table-to-excel-with-grid-lines/
&gt; but as much as functional programming offers a lot of inspiration, few people want it as their main syntax Is functional programming a syntax? What the hell i'm reading? &gt; a cool new kid comes to town, be it Lisp, OCaml OCaml is pretty old and well-established. Lisp, from 1959 and still state-of-the-art. 
&gt;Is functional programming a syntax? What the hell i'm reading? I don't know what you're reading, but surely functional programming informs syntax, just like structured programming informs it differently. &gt;OCaml is pretty old and well-established. Lisp, from 1959 and still state-of-the-art. That's really besides the point, but if you want to make a different one for me, do be my guest: yes, functional programming has existed for decades and _despite that_ hasn't entered the mainstream.
Yes.
You're at the class level. Try placing that code in a method.
It depends
Well, you're missing a semicolon, for one thing. It's hard to tell whether this is a troll. If it isn't, you probably should check out [C# Fundamentals: Development for Absolute Beginners](https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949).
What are your goals? Xamarin is pretty good if you want to develop some native apps and have a good c# background. 
If you want to make cross platform apps in C#, then yes. If you want to do machine learning on a raspberry pi, then probably not. Any tool is worth learning if you want to use it.
Maybe: https://trends.google.com/trends/explore?date=today%205-y&amp;geo=US&amp;q=Xamarin
F# is not niche at all, the biggest software company in my city uses it extensively. I'm not sure what you mean by "functional syntax", but the functional paradigm is used in all kinds of languages. Javascript could almost be considered a functional language, and it certainly follows the functional paradigm. It uses prototypal inheritance, and every object is made via closures. Every modern scripting language uses lambdas, a lot use pattern matching, immutable data types, etc. The functional paradigm is extremely common.
I wholeheartedly disagree with your assertion that ADO support in .Net Standard 2.0 is not broken and that it's a sign of "bad code" to expect it to work correctly. There's nothing bad about code using configuration data to retrieve both the connection details and the connection type metadata when establishing a connection. "Bad code" is when you *don't* do those things. There's simply no reasonable excuse for the lack of DbProviderFactories in .Net Standard 2.0, especially when everybody and their dog is harping on dependency injection these days. *It's like a case study for DI!* There are three components: the abstraction, the implementation, and the configuration. The base abstraction is the stuff in System.Data and System.Data.Common. You write your code to use that, never specifying an implementation. There is also a factory provided by the abstraction layer (DbProviderFactories) to allow you to dynamically decide which implementation to use. But not until runtime. The implementation bridges the gap between the abstraction and the actual database. This is the stuff in System.Data.SqlClient or the like. It implements the common foundational stuff in the abstraction layer. Never refer to it directly. *Ever.* This is an absolute rule that is safe to adhere to and needs no exceptions. The configuration is how your app tells the abstraction layer's factory to activate an instance of the correct implementation. If you have an app that aggregates data from 10 different databases, and they're all different types of databases, *you need this*. If you have 3 MSSQL servers, 2 Oracle servers, 4 Excel files maintained by bureaucratic plebs on a network share, and a legacy Access file on a network share, you should have *one and only one* database access library and *ten* connection strings in a configuration file. And, beyond saying "this is from connection string Foo", your code should not give two shits what type of database is used for that data. So if you're keeping hard references to System.Data.SqlClient (or any other implementation library) in your project, *you're doing it wrong*. Here is a set of constructors for an (example) object that can be used to manage multiple database connections for you: public ConnectionManager(string connectionString) : this(connectionString, DEFAULT_PROVIDER_NAME) { } public ConnectionManager(string connectionString, string providerName) { this.ConnectionString = ConfigurationManager.ConnectionStrings[connectionString]; if(this.ConnectionString == null) { this.ConnectionString = new ConnectionStringSettings("GENERATED", connectionString, providerName); } this.Factory = DbProviderFactories.GetFactory(this.ConnectionString.ProviderName); } Most of the magic is visible here. You can see that it looks up the config entry, and falls back to a connection string literal if it isn't found. It uses the connection string configuration entry's providerName value to get a DbProviderFactory, using the default if none is provided or found. Now you have an object that can use DbProviderFactory.Create{Thing} methods to instantiate ADO objects for you. I would recommend embedding this into further abstractions for truly simple database access code. To use this, save a connection string like `&lt;add name="Foo" providerName="System.Data.SqlClient" connectionString="blahblahblah"&gt;` and you can simply call `new ConnectionManager("Foo");` in your code. Save another connection string like `&lt;add name="Bar" providerName="System.Data.Odbc" connectionString="whatever"&gt;` and you can use `new ConnectionManager("Bar");` for a connection to a different database using a different provider. And none of your client code has to change when using it, since all it sees is a DbConnection or a DbCommand. Obviously, this technique can be used with JSON configs too, with a little tweaking. And you can rid yourself of the dependency on System.Configuration.ConnectionStringSettings with a little work. But the lack of support for DbProviderFactories in .Net Standard 2.0 makes me consider .Net Standard 2.0 to be **broken** for database access. It simply doesn't work correctly anymore. And it can't be worked around with good code, but instead you have to resort to fragile, janky hacks to almost, kinda, sorta, half-way fix it. (As shown in the link I provided before.) **TL;DR:** DbProviderFactories is **the keystone** in the architecture of ADO.Net, and since the .Net Standard version is missing that, it falls flat. I know it's a long post, but I figured it would be more worthwhile to provide some detail as to why I said what I said, rather than just "lol no ur wrong".
...Why?
to share future plans of VS or c#, show off some things, interactive steam for newcommers. i think its pretty nice
Good to know it's there I suppose. Thanks.
Are they really as native as swift and java? I like xamarin and have used it before but I still hear about how Java and Swift are still better performance wise. 
If you know c#, it's probably worth just jumping to swift. It'll make you a better programmer.
You need a static void main method.
I was doing Xamarin and then discovered Ionic...my HTML/JavaScript skills were stronger than C# and I really like it.
&gt; the idea of concurrent code is to let something happen on another thread and then notify you when it's done. That should be stapled to my forehead. Thank you kindly for your help. Really do appreciate it. I'm half way through a cram of Stephen Clearys book now. It's quiet good except that I need to rewrite my whole app now. lol... :) 
There are some examples in the official docs if you scroll down a bit: https://msdn.microsoft.com/en-us/library/system.random(v=vs.110).aspx 
:) for old man, you still contain much wit. The small amount of that I had, left me as soon as I began programming with MVVM...now when people expect me to tell a joke, I just tell them I'm confused....
&gt;functional programming has existed for decades and despite that hasn't entered the mainstream. depends on what your definition of "mainstream" is, because Lisp has been mainstream for years in fields like CAD/CAM, symbolic computing and AI, and OCaml has been mainstream for finance and compiler writing for years. 
I wouldn't mind seeing tutorial and how-to videos on there where people in the chat can ask questions. Then the streams can be archived, and you can watch them whenever you want.
Can we trust someone named. Hell Gate? 💫
But he was born in 94. So yeah I guess he’s pretty trust worthy. 
never! its just my master plan to consume you all
&gt;Because its syntax is clunkier, it will requires more overhead in general. This makes it a bad fit (IMO) for REPL and Jupyter. Because its datatypes are not primarily immutable and algebraic, sophisticated features like type providers are more difficult to add. (I guess -- I haven't tried to write a type provider in C#, but it makes sense.) "Clunkier" syntax is your opinion. I don't see how C# is a bad language because you can't use it in Jupyter (I use Jupyter daily with Python)?
https://www.altexsoft.com/blog/engineering/performance-comparison-xamarin-forms-xamarin-ios-xamarin-android-vs-android-and-ios-native-applications/
&gt; Perhaps you mean "mainstream" as "web/frontend" programming,, but that's a narrow view. Yes. Also Desktop. What is CAD/CAM and AI? :S
/r/fellowkids
So for each employee, they have a list of paylines Are you trying to insert 1 record per payline? Or 1 record per employee? Also, small tip on formatting strings with variables, you can use string (interpolation) \[[https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated)\] $ - Insert variables into a string: $"Format a {variable}" $"VALUES( {empWGDescr\[0\]} {empDate\[0\]} {empHoursHund\[0\]} "
&gt; "Clunkier" syntax is your opinion. I don't see how C# is a bad language because you can't use it in Jupyter (I use Jupyter daily with Python)? I don't think that C# is a bad language. I do think that there's a reason why it's not often used (as far as I know) in fluid, interactive contexts like REPL or Jupyter. To get at that reason, you can ask what languages like F# and Python -- REPL- and Jupyter-friendly languages -- have in common. You see the difference just by looking a source file. "Clunky" is obviously a loaded term, here; I meant it as shorthand for something more nuanced. If you're a Python developer, you probably know what I mean. If not, [check out Scott W's original presentation](https://www.slideshare.net/ScottWlaschin/c-light).
Hi /u/saddertadder, CAD/CAM is a russian movement.It means "Comrades Against Docker / Comrades Against Microservices" "AI" stands for Artificial Intellisense. 
C# is definitely not suitable for "interactive environments" and that is fine. Every language has its purpose; that is why I use C# for web development, Python for data analytics and Javascript for desktop development. Just because one language is more suitable for something, doesn't make it better or worse than some other language.
Yes, if you're already comfortable with the .NET ecosystem
Very close
No. Nim and Ada have a feature like that, but keep in mind they can only check things like at at compile time some of the time, so they *also* wrap such types with runtime checks. Idris on the other hand, will actually enforce it at compile time, which is pretty interseting (but compile times are slow!) You could build a class that approximates such a thing with getter/setter properties that enforce the range, but that would be runtime only. 
Code Contracts for .NET can, but it never ot out of the prototype phase.
I see. Well according to the results, the author says cross platform is still the most balanced. I think I will listen to his advice. I don't know Swift, it would be nice to learn but I have other priorities. As for Java I don't really like that language, it feels too old to me, even older than C and C++.
Do you know what the formal name is of the thing I'm asking? I can't seem to find it in the Idris documentation exactly.
While this isn't something you can have the compiler do, this is something that you could potentially leverage Roslyn to do some static analysis to catch some of these while developing, rather than at runtime.
No.
I made a Xamarin.Android app as a companion to a WPF app I made. That was pretty cool. Concerning UI, you I made it the native way, with Activities and Layouts, which in my opinion is a convoluted procedure. I wanted to expand to macOS and potentially iOS, and at this point, I didn't want to have to add two new versions of UI for these platforms. Handling UI and events between WPF and Android was taking me long enough already. I decided to try Xamarin.Forms. Xamarin.Forms allows you to take a WPF/UWP approach to creating UI for all of your target platforms. I used UWP and Android as debugging targets and replicated my existing UI for Xamarin.Forms. I was quite impressed when I loaded up the mac and ios projects and they just worked. Pretty cool. I like it a lot. It still uses the native control for each platform, but Xamarin.Forms only exposes controls that have equivalents on all platforms - so no floating action button for Android. However, you can use Xamarin.Android within your Forms app to draw one of these on the screen, because you have all of the native APIs available. I think the most difficult thing about Xamarin.Forms is when you're targeting macOS and iOS and need to convert some obj-c to C#. My god, what a painful language. 
if you want it guaranteed at compile time you are wanting dependent types, which is sort of an area of research. See Idris, F* If compile/runtime is ok, Nim calls them range types. Ada calls them range declarations I think. 
people are using the word native in a lot of weird ways these days, so which way are you using it? =) If you are only making an app for iphone or only for android, then using one of their first class languages will probably be a nicer time overall. If you want to make one app that runs on both, xamarin will probably be a nicer time overall. But, it depends! 
Either do this or implement your own queue for sending these messages on its own thread asynchronously, outside of the ASP.NET request context.
Which way am I using it? When I say native I'm talking about performance mostly, it's cleaf that Swift and Java are best for that but not by much at least as far as that comparison showed. I need to make apps for both. To be honest I don't think it makes sense only use one platform. 
Привет, как дела. Сегодня я занимаюсь программированием на C#. До свидания.
Thank you!
What is your city?
Bellingham, WA. The company is called Faithlife (ugh).
[It looks like you're looking for IDebugProcess2::Attach](https://docs.microsoft.com/en-us/visualstudio/extensibility/debugger/reference/idebugprocess2) Note: I don't do these things at all; 5min of MSDN browsing took me there. It could be that your code needs to be an extension (run inside of Visual Studio for this to be doable).
Pretty sure they saw the success Jeff Fritz ([twitch.tv/csharpfritz ](https;//www.twitch.tv/csharpfritz)) has on his "private" channel and they saw the marketing potential and as a program manager at MS he has the power to push for it. https://twitter.com/csharpfritz/status/1007700680465842178 
Xamarin compiles to native executables on IOS, it does not on android. I don't know if the net result is that xamarin apps are closer to swift than they are to Java in performance or not. But the mono compiler is pretty good these days, so it is probably fine. Pokemon Go used it for instance, a really old slower version! 
What format is the ".obj" file?
Kotlin is the way forward on Android, specially as Google most likely won't update Java beyond version 8. Java on Android is like C on UNIX, you have to know it, but it doesn't mean it should be your daily programming language.
It was possible in Delphi, another of the languages made Anders. Ask him nicely to make it happen in C#
I don‘t know what you mean by that its an file.obj
(jk) Because twitch has search sort and filters that work... Ever tried using channel9 what a heap of shit.
Oracle is killing Java and the JVM is a nightmare. Swift is for Apple. C# is becoming a bigger and better replacement for C# for multiplatform. Take this from a long time developer (over 14 years) in both Java and C# as well as other languages. Take your "better programmer" bullshit and wise yourself up first.
Take this from a long time developer (over 14 years) in both Java and C# as well as other languages. Take your "better programmer" bullshit and knock it off.
And what format is the content? An ".obj" file could be anything. Is it even an image format?
Lol, I can understand that. I've always had a hand in UI's of some sort, and when I started doing MVVM, it wasn't that WPF was complicated (It is quite complicated because it's opinionated) but it was how badly MVVM was communicated. You'd have people going to extraordinary lengths just to avoid a line of code behind, and countless other oddities. After I tracked down a few of these people and buried their hearts at crossroads at midnight, it started to make more sense. Plus I've got snacks stashed everywhere now ;)
He's an excellent communicator and you learn fast, so you will do fine :) 
I wouldn’t say so. The tooling is bad and horrifically behind Xcode and Android Studio. There’s little hope of them ever catching up. 
is a file format created for import and export geomgrd from different 3d applications to create a obj , number of points in 3d space , information how these points connect each lther to form triangles and information how to draw the 3d model so obj contains vertices faced and referenced to materials from the text file
My difficulties with MVVM is that, everyone has a different opinion on how to do it (as you say opinionated :)).....some say, nah you stick you're whole application in you're viewmodel, others are like, nah man, stick it all in your model, some in your viewmodel, then others are like, nah they're doin it wrong, it's gotta be a service layer and ya model should be anemic. Then ya get people going, well, wtf man, services have gotta be stateless...you can't jam a mvvm in there! .... However my confusion could be due to in/excessive googling rather than owning a good book on MVVM, as for some reason cannot seem to find one.
&gt; witch I was genuinely confused, and reread the title like 5 times before understanding
Though not common, each employee can have multiple paylines per day (overtime, PTO, etc..) I found that was my issue. I'd have to split the array in this case because each sql record is only one payline. Trying to figure that one out. Thank you for the tips, I will look at these today and try to impliment. Very new to c#. This is my first project that's outside of SQL. 
I don't think one exists honestly. I've read a couple and they always miss bits, or don't scale or have an approach I think is stupid :) There are a few good MVVM frameworks, which go from the "YOU WILL DO IT ALL THIS WAY!!!" of Prism, down to "Hey, here's some helpful stuff, now you're on your own" of MVVMLight, with various stuff in between. The trick is to know when to believe the person who is selling an approach and when to shout "Snake oil!" and hit them (Don't hit them, but do shout "Snake oil!". I followed bad advice at the beginning. I use messengers extensively. Pretty much every time a ViewModel wants to talk to another ViewModel, or a ViewModel wants to create a View (Think dialog box for example) or when a ViewModel should be notified that a new Sale/Twitter/Goal has been made/vomited/scored, I use a Messenger. This is often the glue that a lot of tutorials miss because it makes the size of the tutorial bigger and more complicated. Models can be a real domain model if you need that, or just DTOs. ViewModels without actual data might not even have a model but just convert clicks into messages or calls to services. Services are essential pretty much. Even if it's just a service that knows how to respond to certain messages from the messenger(s). "Hey I just got a request to show a dialog box, get the result and send it back to this ViewModel's private messenger. I can do this!". One of the key take aways is that MVVM is about reducing coupling. So if you have a View with lots of code behind and that code behind is doing stuff like calculating the tax of something, then when the tax rate changes, you have to find all the places in the code where that tax rate calculation is made. So first you move that tax calculation into a new class and then the View is still doing maths but at least the maths is in one place. The next problem is then you want to change the view so that the tax is calculated as a slider is moved indicating a change in price. That's fairly simple, although now you've got the max and min information in the View too. Then someone wants it to be a text box so they can change the price, but they might type a letter, which isn't taxable using real maths, so you either have validation to prevent bad entries, or validation to not calculate if the text is wrong. So anyway, that's why we have ViewModels, to decouple the pretty from the brains. That's where traditional tutorials tend to stop, so they don't cope well with scenarios like "What happens when I close my app but there's a view/viewmodel with unsaved changes?" or "If this ViewModel saves a value to the Database using EF, It gets a result immediately, but how do I notify the other viewmodels that might be interested?" Or my favourite "This View is made of 5 child views and 5 child viewmodels, how the fuck do I wire them together???" (Give them a private messenger is my approach, there are others). And then you've seen the fun that Async brings with it in this thread :) So it is confusing, I'd write a tutorial myself but I'm quite lazy. I might try and put together a reference application for work soon to train our juniors with, I'll publish that if I go that route for sure as this question comes up a lot :) 
Code Contracts were part of Visual Studio 1020 Enterprise, they just left it stagnate since 2015. 
Delphi inherited that feature from Pascal though.
I look forward to less type provider demos about World Bank and more WinForms/WPF/UWP (with UI designer) and EF ones why I should still bother with F# for enterprise LOB apps.
Seeking direct hire at $70k+ in any midwest metro area, PM for resume.
Mono/xamarin use .NET core anyway as their base since they were bought by Microsoft, I recommend using core since its more up to date than the old monodevelop libs. 
As an ex-Haskell programmer who currently uses C# I have a couple of questions on F#, which I want to try but haven't got round to yet: - From here: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/lists - "Lists in F# are implemented as singly linked lists" - is it easy and just as elegant to use contiguous arrays of value types in F# instead of linked lists? The current thing I'm working on would have unacceptable performance with linked lists due to memory locality (L2 cache misses are 30x slower!) - From looking at any arbitrary F# code, is it easy to tell when a new object is being created on the heap behind the scenes vs not? Eg in C# I know when new objects are being created because I'm either doing new Constructor() or I'm using Linq which creates lots of IEnumerator&lt;T&gt; or I'm calling a function which I know uses object creation to calculate something. The reason I ask this is that there are sections of my C# code where I avoid creating objects so that GC is never triggered. - I'm a huge fan of algebraic data types from haskell, and I think F# has the same thing but they are called something different. However, for performance, I tend to not use this approach as involves too much branching internally when algebraic data types are processed en masse. Is it equally as elegant to do existence based processing in F#? (Eg "we know this is a cheque payment because it exists inside the collection of cheque payments, we don't need to check what type it is")
Just use Core
Non graphical? DotNet Core. Just does not make any sense to use Mono, when you can self deploy a Core application
The framework I am using is DevExpress'. Although I have not used others (other than a stab at caliburn.micro of which I am glad I got out of there). I feel that it is quiet good, I like it, but architectural advice is beyond their service and theres not that many people around that use it I think.... I too have had that exact how do I wire these bastards together thing. I currently use devexpress' parameter method to glue my viewmodels together, but there are a few instances where I have used a messenger. (I would presume other frameworks do things similarly) They have a scaffolding wizard which generates a full application based off an EF context. Which is how I got started. (I was a complete noob at that stage, as opposed to a partial noob). While it did help me get started and I learn a lot quickly. It ends in complications because I still have to learn whats happening underneath the hood (I still don't fully know). Now that I am dealing with performance issues and looking to deal with them using parallelism/asychronously and probably outside of entity framework (cause its slow)... its another layer of complexity... Possibly my confusion is related to what exactly happens in tiers 'below' the mvvm stuff and how to integrate them. Nowhere I have I found people giving examples of that, because I suppose it is very specific to domain/app type. If I was starting again, I do think however I would be having a hard look at MVVMLight, but I could well have just ended in a different difficulty...so who knows :) But..I'll get there...hopefully one day in the future....in this life :) Thank you heaps for your advice. I know I would look with great pleasure on a reference application. After the initial difficulty, in finding time, energy, and desire, the next difficulty becomes noise in a noisy environment. You gotta yell real loud...then that'll just get ya more work :)
Why would you delete this after asking, and less than an hour after as well? Did you not want people's help /u/jonpv?
I've used it and I have to say it really didn't work for me. It is full of bugs and tooling is bad. Better option is React Native.
That is exactly the opposite of when it should be used. If you aren't writing massive amounts of data to the database and don't have to scale constantly - don't use it.
Sorry, I realised it was a really dumb question that I asked after not getting much sleep and I thought that the /r/csharp subreddit would be better without it as I don't think it would help anyone else. I had essentially completely forgotten obvious things that I already knew about Mono / Xamarin
Native usually means that it compiles to binary and has access to all(most) of the platform's API's. Xamarin is considered native because it compiles to binary for iOS, and I believe for Android it compiles to Java intermediate code that can run on the JVM. Xamarin also gives you access to the data types and API's of each OS. If you have the desire to learn Xamarin and need to make both iOS and Android versions of an app, then yeah Xamarin is a great choice.
And it's not the only growing C# and .NET channel, https://www.twitch.tv/DevChatter also has plenty of followers and growth. I think there's definitely potential for them here.
So it's noto just an .obj file, it's a Wavefront OBJ file.
Many objs files from the shapenetcore
No
&gt; or java (android). make it Kotlin
Pleeeease tell me why? Please be a good one....
read http://www.albahari.com/threading/ 
I haven't used DevExpress. I used to use their Winforms controls almost a decade ago, but never any of their infrastructure stuff. You hit a performance wall pretty quickly with EF in the client, especially if you have little control over it, although it is great for really small LOB apps. Until they grow, but you know, sometimes it's just better to get something out there working for the users rather than piss about arguing about the unknowns :) And you're spot on with the few and far between examples of how it happens behind the ViewModel. It's complicated, even when it's simple and can be domain specific. Even then I think you can abstract a few common use cases which is what I do when I'm teaching and I'd like to put in the reference app. For the noisy environment, I use [Bose QC 35](https://www.amazon.co.uk/Bose-QuietComfort-Wireless-Headphones-Cancelling/dp/B01E3SNO1G). I think there are at least a dozen pairs in my big open plan office. The I use [These](https://www.amazon.co.uk/Bose-QuietComfort-Acoustic-Cancelling-Headphones/dp/B00X9KVVQK) for places where I don't want to look like a cyberman. Seriously, over ear with noise cancelling is just magical. MVVMLight is nice for me because it just handles a few things that look really simple but are actually quite complicated to implement. For example, in MVVM your VM and V life cycles may not be directly under your control, so if you have a Messenger to which you are subscribed, how do you make sure you don't leak memory through event subscriptions? MVVMLight deals with this neatly using WeakReferences. It doesn't give you a whole lot of guidance though, but this might help you in the long run as you'll start to rely on yourself and not DevExpress. Trust me you'll be fine. The learning curve is always flat at the start and gets exponentially steeper (assuming time is X and knowledge is Y). 
No. React native is way to go for multiplatform mobile apps.
Yeah, but even then I like C better. Kotlin looked and felt a lot like Java. However, I understand what you mean. 
Do you know about any other popular apps created with Xamarin? I have always wanted to know who's using it. 
https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach
While it's not specific to your code, you will want to get the visual studio .gitignore file and add it to your local repository. It will prevent git from tracking and uploading your .vs, bin and obj folders. It's not a big deal as a student working alone on projects, but as part of a team, it will make things a bit easier since each team member will have slight differences in those folders, and many other files. You can search for visual studio gitignore and find a really good file. Drop it in the base folder of your repository. Doing it for this project may be more work than it's worth unless you really know git, but use it going forward to help keep your repositories clean. 
I'm 3 months late, can you give me some notion or order to watch his videos? I watched the playlist "C#" and it was great, but then I'm completely lost, because there is like no sucession between it and his other C# videos. 
Why
&gt; SQL alone can sign your paycheck. C# at least isn't torture, though. Can you explain how SQL work is torture?
It’s really painful, the toolchain is a bit crap, and it feels like programming in the dark, but once you get it working it really is cool. Until you have to deal with Apple’s provisioning profiles. 
Even if you're capable, I don't recommend it. You'll learn a LOT from working closely with senior devs that you wouldn't get working remote. You might learn over time, but having someone else there to point out mistakes and offer better solutions that you don't have to come up with on your own will save you a lot of time and accelerate your skills. Assuming your senior devs are actually good at their job, of course. 
I agree. I'm 19 years old and i program since i was 14. Two weeks ago i started working at a local company and the amount of stuff i learned throughout those two weeks is immense. I definitely recommend you to work in a professional environment at least once. Teamwork is incredibly important in IT (even more than i thought so) and you not only learn new things, but also gain experience in working in a professional team which you most likely also have to do working from home later on. And tbh i highly doubt a company would hire someone for remote work that has no experience working professionally so far and is only self taught. And if they do their standards are probably pretty low. Just saying.
I did it. However, I am not happy for a ton of reasons. I highly don’t recommend this. My situation may be different as I am a lone wolf. You may be able to add value to a team remotely and still grow professionally through critique and code reviews. I’ve heard that you aren’t really a programmer if you like the code you wrote 6 months ago. I hate my 6 month old code and my 14 month is horrendous. It compiles, runs and is a valid prototype. However, production level code really is engineered. Getting there on your own would be tough. Get a good mentor at a minimum. I have worn out the play button on Pluralsight.
The entire article focuses on working around "new Thread" which is an antipattern in itself. I don't think this is a good article. Read this instead: https://www.amazon.com/Concurrency-Cookbook-Asynchronous-Multithreaded-Programming/dp/1449367569
Id avoid it if you can. I've just joined a company that putting together a team, after having a "lone wolf" dev by themselves for over 4 years .. I can see from the production code that there been no peer review, and a lot of the thinking is very old school. 
+1 agree, I've read that book. I only use Threads when I don't have access to Tasks (which, thankfully, is almost never).
The original code contracts never shipped. They had additional C# syntax, not method calls.
This article is on thread synchronization and not just on threading or tasks. Discussed points in the article can be applied to shared resources in Tasks pattern.
It’s an excellent one and I sorely miss that ability. Business requirements that clearly state compile time-enforceable constraints happen all the time.
There are other resources that handle this better. 
The best, **by far** (to my opinion) is the awesome **Aggregation-FW** MongoDB has to offer! Even tough, Elastic also offer something similar with their **Aggregation API**, but their API is simply cumbersome (used it only with NodeJS). &gt;!Disclaimer!&lt; :I'm the author of the blog-post "How to MongoDB in C#"
I hate the code I wrote last month. I’m learning at such an exponential rate that I don’t even recognize my own shit code. 
I think that most remote workers are giving up a lot to avoid a commute. If you have great skills and a proven track record, it can work out fine. Otherwise, I'd advise a regular office job for most people. 
I realized why the other day; 5.8 is the stable version. Fedora has everything for 5.8. I'm pretty sure it's a popular program. The good news, is that there is a flatpak available, and it's a later 7.3 version. I debugged a program, it worked fine. I think they're shifting they're Linux distributioning to flatpak. New versions of Gnome Builder is distributed through flatpak from the devs now. I guess it's a lot less work to do it once through flatpak, instead of once per distribution.
Another way to make it a little easier to understand would be to create an object with properties that match the columns of the table you're inserting records into. public class EmployeeHoursEntry { public string Department { get; set; } public DateTime WorkDate { get; set; } public decimal Hours { get; set; } public string IDNumber { get; set; } public string PayDesignation { get; set; } pulbic string BadgeNumber { get; set; } public string Name { get; set; } public string Shift { get; set; } public string Tier { get; set; } } Then for each payline, you'd create a new EmployeeHoursEntry object: foreach (var line in paylines) { var hourEntry = new EmployeeHoursEntry(); hourEntry.Department = ...; hourEntry.WorkDate = ...; ... ... } Then have another method that takes an EmployeeHoursEntry that does the insert logic. public void Insert(EmployeeHOursEntry entry) { using (var connection = new sqlConnection()) { ... } } Also, try to keep the string split and other logic separated so you can see the result of each step before you use the values.
As others said, you're going to miss out on alot of experience. I started off working remotely and then later chose to work on site because alot of the code I was working on all had a much different style than mine. I ended up learning alot of things over that I thought I already knew. 
Been a long time since I’ve seen his videos, but IIRC it would be best to next watch the C# Containers playlist. Then probably C# Generics. After that you should have learned enough to watch in order. I didn’t mention it in this thread, but Jamie is a Professor at the University of Utah at Salt Lake. These videos are meant to be supplements to his lectures (well, I think they started that way. Then he started getting views from other people, but either way these videos are SUPPOSED to be supplemental. Only thing about that is; Jamie knows how to teach this stuff so well he only needs supplements ;) )
I’ve been in dev for 20 years learned more from 2 years in office than 5 at home years 
Why not? It covers almost every topic, is well formatted and from a very respected C# developer. 
Thank you!!!
Huh, thanks for the video, I respect the effort involved. I see what you mean now. 
I wouldn't recommend it. There is enormous benefit from working in close proximity with a team. You'd be stunting your own development considerably if you choose this option. If for some reason you can't control (medical or something), you simply *can't* work in an office, then do whatever you can, and work hard to create opportunities for collaboration from a distance. It can be done. But you'll be at a disadvantage, and shouldn't choose this path unless you're forced to.
I worked remotely (non video games) before working in a game studio. Hacking all hours of the day was fine but it's hard to self teach productivity skills. Working with a good lead programmer changed everything, the way I looked at problems the way i build things. Now I'm back to remote work I'm so much better equipped (also much older)
What are they giving up?
Professional networking and mentoring opportunities. It's uncommon for people to stick their neck out for people they only know from email and Slack. You're never part of ad-hoc hallway conversations and break room chat. You have to work twice as hard to promote your work, because you never know what people are saying about you or your project when you aren't around.
I'm hoping that in the upcoming zombie apocalypse they want brains and anything made by Apple :) 
what is your monitor setup like? wpf can make things blurry sometimes if you have heterogenous dpis. 
You can’t and shouldn’t do it. Are you asking because you want to find work when there are no jobs around you? If so I highly recommending moving where the jobs are to start learning.
I did shortly after college. Being young will hurt you on finding clients. I would recommend the office job for your resume . When I went to apply for development jobs they basically saw no experience as none of it was under someone
In what environment are you learning? 
One minor things I saw while skipping over it: generally follow the C# guidelines (specifically PascalCase and properties) This makes it for instance easier for others to understand your code. :-)
Don't. lol
* Java as a language is similar (but worse) than C# so dont worry much about that. You can easily google or even guess your way through most things if you've done .NET. * I'd spent a few hours learning the Java ecosystem : Maven, Jenkins/Bamboo, IntelliJ. You don't need to know it inside out just enough to get you through the first day/week. * The rest of your time go through the Spring docs. The worst part of Spring is there's five ways to do everything and you'll likely see all ways. 
We should start a support group. 
To answer your question more specifically, you can. We just hired a junior programmer for remote work. I did a pretty tough interview, and theirs a 3 months probation. But it's working out. You have to be pretty sharp, juniors are already a big risk.
I do asp.net mvc4/MSSQL server. 
Another vote for going into the office. I find the social aspects of office work to be vitally important, if only to prevent feeling isolated and alone. 
Hah, bad choice of words on my part. I meant to ask how you are learning (on the job, school, etc). 
I have no idea what do you mean by 1959 "Lisp" being state of the art. Do you really believe the state of the art is not having closure, module, continuation, reference via cesk, any kind of abstract machine, numeric hierarchy, metaobject protocol, macro, much less reader macro, hygenic macro, type system as macro, and whatnot? And let's not forget the classic lambda the ultimate paper, where we realize most of the feature can be simulated using lambda with ease.
Who downvoted you? What a sick. For the future, not many people call it ms SQL. Also you could just say mvc. However I do wonder why you are specifically using 4. I think I remember using 5 a few years back. Isnt it on 6 by now? Also are you using an ORM, and what are you doing for frontend.
Oh, I’m learning on the job. I have a bachelors that taught me how to learn, and how to understand concepts, but I didn’t learn shit about real development. And at home, I’d like to learn more, but I get bored. I have nothing I want to do, and getting into open source applications seems a tad daunting with no guidance whatsoever(maybe I’m not looking hard enough, I’ll take that blame). I landed an entry level position, and my boss seems impressed I have come as far as I have in seven months with no real experience. I don’t even need to be babysat anymore. Any suggestions for open source projects? Although I work in C# and TSQL I have nothing against working in other languages. I pick up syntax relatively quick, I understand it’s about logic and problem solving. 
eh, I understand your bias, but you can't just say worse.
- Don't listen to the "language haters" most of the time they don't know what they are talking about - Java eco-system is huge, there isn't just Spring, you aren't forced to use a specific stack (*cough* ASP.NET..) - Try kotlin or Scala if you prefer a more modern and less verbose language - Read about what's next for Java, pretty exciting stuff (Valhalla/Amber) - Give GraalVM a try, especially the native image tool, wich is able to produce small and fast native executable 
\&gt; problem one public \*\*static\*\* MyClass Factory(int i, int j) \&gt; problem two var ob = MyClass.Factory(5, 6); You should also make your constructor private if this is how you wish to create it. 
Simple advise - DON'T. Demand for good C# developers is going up in many areas and industries. 
&gt; programming in the dark JavaScript would like to have a word with you. 
The definitely just need to add that semicolon and their problems will go away...
I do remote coding part time on the weekends. Almost entirely self taught. But it's basically a hobby that makes me a little bit of petty cash, rather then a dedicated full time position. I have a regular non coding day job that pays the rent. 
I grew from a junior to senior developer working remotely. The key to my success was that _all_ the developers were remote too. If you're serious about wanting to find this sort of work, look for a company that knows how to grow remote developers and be prepared to pass a programming test to prove you can do the job.
If you want to get involved with open source, your best bet is to find a piece of software that you like, and follow it's primary development channels(github, irc, etc.). Get acquainted with the code and the community. Every project has its own little culture, and there are all sorts of interesting politics and ideologies out there. Another option is to find a dead project and fork it, and try to get it back on its feet. What OS are you primarily on? I'm a Linux user, and I tinker heavily. There are tons of little Linux programs for people who like tinkering with their computers, and they are a really good way to get started with open source. Lots of amateur projects, lots of redundant programs written in different languages with various little quirks, lots of dead projects with multiple dead forks. It's sort of like a massive grave yard/garbage dump with lots of interesting things, and lots of people picking through the garbage to figure out how things work. Or do all of the above! Most importantly, have fun with it. 
For short ranges you can hack it with an enum. 
Self taught dev, went full remote a while ago but now spend half the week in the office. Good to keep my ear to the ground, collaborate with other devs and generally keep myself around. I usually only work from home on days I know I'm going to be really deep into coding that day and make sure it doesn't clash with any meetings
Looked back at a winform project i did 3 years ago last week. Never again
I was thinking the same thing. Roslyn Diagnostic Analyzers. You will still need runtime checks as the analyzer errors can be turned off, but you can throw a non-adversarial user into the [pit of success](https://blog.codinghorror.com/falling-into-the-pit-of-success/) by guiding them at compile time.
I'd also add from my personal experience, remote workers who don't spend much or any time in the office dont feel as much a "part of the team" as people who are physically present. Especially in standups and meeting etc. This is a major thing when it comes to career growth.
&gt; However I do wonder why you are specifically using 4. Legacy support maybe?
My good sir, Java doesn't have tuples.
I mean, I genuinely do database work and do a lot of stored procedures. I do work in older systems, because it’s a fuck ton of work to upgrade. I’m not in cutting edge development, I do corporate work. We use mvc4 for front end. 
I use windows 10 mostly, and play around in a Linux VM. I’ll look into it, I was considering trying to see if I can work on developing a language(like joining a current one with open source development cycle) cause that seems fun. I just am mostly intimidated by those in it that are better than me. I would use Linux, but on my home PC I play a lot of games that I don’t care to figure out how to get on wine(classic rpgs like baldurs gate and planescape torment as of recently), and my work laptop is required to have windows on it. Thanks for your input! Ima look into what I can. 
Senior guy here. Been afraid to take remote jobs because I don't know how secure my job will be. Would think it would be easier to let someone go if you never see them. Basically just asking about volatility. I am very confident my skills but I always keep it in the back of my mind. Would be interested in your feedback 
Sure he can. Its a subjective statement. You don't have to agree with him. Plus this is a sub for C#, the people here are obviously going to prefer it to Java.
Why didn't you put the question in the title so someone would actually help you?
That is possible. I dont remember the breaking changes from 4 to 5.
I agree, this does seem possible.
Gotcha. That makes sense. Disregard part of my response then.
To be honest I've only ever used Spring for APIs in the past and only a bit with the templates. My experience is that it's not too terribly different from ASP.NET MVC. There are controllers, views, etc. The naming is different on some things but overall it's not that difficult to pick up. The conventions are a bit odd in a couple of situations but overall it's not that bad.
I've been working with docker on and off the last few days, watching Pluralsights on it.. It seems legit, like definitely the efficient alternative to VMs, but until it becomes as user-friendly as a VirtualBox or a VMWare, I don't know if I'll use it. Technically I don't \*need\* the efficiency, and it seems like it's Nodejs's twin, changing all the time to the point where the Pluralsights and StackOverflows are out of date.
You’re good. I don’t get to talk about my job much and it gives me perspective. Besides my coworkers, I only have one friend who does any development, and she’s mostly in marketing. 
No UWP experience here but just general .NET: A timer would do. Start it up on button down. Disable it on button up. In the `tick` event on the timer run your code and disable the timer.
Agree the documentation is a pita, especially on the windows side. It's never going to be an alternative to VMware, and I don't think it's trying to be. I've been using docker to upgrade my continuous delivery pipeline, I have a large number of builds that I have to manage spinning up a docker container with *just* the tools needed to build that application, and then discarding the container, has made my life a million times easier. Once I stopped thinking about docker as a replacement for VM's it sort of clicked for me, here's a good article on the topic: https://blog.docker.com/2016/03/containers-are-not-vms/ 
Go search on dice.com or monster.com
So I take it both are outdated frameworks?
In ASP.NET ecosystem, you only have ASP.NET MVC, which includes both Web Services and traditional MVC. WCF is pretty outdated. Almost all new projects are now built in ASP.NET WebAPI. There are middleware frameworks like ASP.NET Identity for authentication/authorization stuff. Since you are coming from Java, **.NET Core** will be fairly easy for you to understand and get started due to similarities in tooling. It is not about framework. .NET Core is more about the tooling like Maven, and how you compile &amp; deploy apps. 
WCF is mostly just a communication/data transfer API (in the same vein as REST): https://en.wikipedia.org/wiki/Windows_Communication_Foundation (There's a lot more there than REST of course, but that's the primary purpose: supply a server/client API for communication. Nothing much in terms of dictating application development, GUI, platforms, etc.) MVC is a framework for serving server-generated web pages. MVC should be more useful for you. You can always learn WCF on the side if you wanted. It might depend on the flavour of MVC (there have been various versions and updates), but it's still going strong and has some significant presence with .NET Core and Linux versions now. WCF isn't developed much (at all?) but probably because it's fairly mature and there isn't much more to do with it (I suppose); it's a tool, it works, it's done. Are you sure your tech director said "WCF" and not "WPF"? [WPF](https://en.wikipedia.org/wiki/Windows_Presentation_Foundation) is one of the current standards for Windows desktop application development.
The way it right now, is extremely hard to implement unless you are using .net core and little to now extras. I prefer TC + OD , and deploy to a VM server hosting Dev and qa. Once they get to a point where you can have a container spin up per build and have them automatically available with their own url then yeah maybe. 
Thank you for the detailed response, I really appreciate it! I’ll definitely look into the tooling, although our applications are compiled and deployed by DevOps with their source control management and integration tools that we don’t have access to. Is that what you’re talking about? I’ll definitely check out those libraries too. 
It depends. Go search on Dice.com and Monster.com and you'll see exactly how many employers are looking for what skills and frameworks. It also varies by location: .Net is popular in big corporations on the East coast, but much less in silicon valley where node.js seems to be popular.
Just carefully compare both pieces of code line by line. I'm sure you can figure it out.
Oh god because I used WriteLine instead of Write. Oh my god... Well, thanks a lot for the insight haha. I'm really sorry for the stupid question.
\&gt; It's never going to be an alternative to VMware, and I don't think it's trying to be. It may not be trying to replace virtual machines, but that's where I see the potential. All of the PluralSight courses I've gone through compare Docker containers with VMs and basically say "here's why Docker containers are better". Right now it does seem to be primarily a shipping/deployment tool, but I really like the idea of going from 4 VMs, each taking disk space, RAM and CPU power for their OSes to 4 containers that are each running Linux, but are remarkably close to bare metal for resource usage. Thanks for the article though, it does help sway me away from using Docker to replace VMs (at least for now). 
Gotcha, thanks for the advice, I never thought of doing that! So it definitely sounds like MVC is the project I need to get on. I don’t really want to be on a project that’s already outdated while still in development. 
Correction, it's a winform not a wpf. I've confused the two. My monitor is a bundle from Dell so I don't really know. 
That's great to know, thanks!
Remote doesn't always mean contract but it usually does. And remote doesn't always mean small company looking to save money but it usually does. I know a couple remote centric studios that are well funded and stable but I've done my research and they're rare. Also they only have senior developers on staff. (Just realizing this is not a game Dev sub). Probably a little more common in not gaming. Honestly I don't consider job security a big issue new jobs has been the path to promotions for most people I know. when an employer looks at your past work, remote or not barely factors it's the company and the product that matters.
This is the .NET Core CLI tooling I am referring to. Similar to Maven, you can do * \`dotnet new\` to generate a project scaffold * \`dotnet restore\` to download and restore package dependencies (especially NuGet) like Maven packages * \`dotnet build\` to compile * \`dotnet run\` to run your app locally * \`dotnet publish\` to compile and generate deployable artifacts. Using \`--self-contained\` flag gives you a completely independent output. It contains ALL the .NET Core \`.dll\` files so the server you'll be deploying to does NOT need to have a specific .NET Core Framework version installed on it. Think of it like a \`.war\` or \`.ear\` file, but includes ALL your Java SDK and JavaEE dependencies in it. 
Don’t even do that. I would dynamically create a timer and an event for it. More code but less controls which improves memory allocation. Then when you’re done with it you simply destroy it or wait for GC to pick it up.
In a more general sense I would always be looking for better work, that can mean anything, pays more, better suited to your needs, etc. Loyalty is not that important, it's important to make it clear in an interview you found a job that was better suited to your skills and make it clear that's also why you applied for their role. A lot of people get promoted faster by switching companies. Start at one company get a better job at another company then go back to the first company. As far as risky remote work, you don't want to get on a sinking ship but if they have at least a year runway and the work is better, the environment is better, then go for it. Just try not to settle for less money or a lower role, you shouldn't need to.
Removed: Rule 4.
Sure, you can get by with literally any text editor or IDE. But you'll just need to become a master of that environment. There's all.
I've been using it for months now at work as my primary IDE. If your team is working on an [ASP.NET](https://ASP.NET) Core project, then VS Code works just fine. If you are working on an [ASP.NET](https://ASP.NET) MVC 5/6 web application though...then you might run into some issues occasionally. Our designer uses VS Code on Mac and has had better success than with VS for Mac.
Docker is implemented as a virtual machine, but that isn't really the point. Docker installs applications on your server and lets them run in complete isolation. This allows you to set up and test the deployment on your development machine without actually deploying.
If you don't say "I'm an idiot" to yourself at least once a week, you aren't programming.
Just reserve a Genius Bar spot and take your laptop down. They're bound to be able to sort it for you :)
I don't know to be honest. To me it looks like just an oversight that whoever designed the char struct didn't follow the better practice of the string class and made the methods non-static. Of course if you use the char methods frequently it's fairly trivial to make several extension methods which solve that problem.
Probably too late on this but you might want to look into the List&lt;T&gt; type. So much nicer than regular arrays.
Java is ok. You will probably get better advice in the Java subreddit as they know the ecosystem. Speaking of which, the ecosystem is both years ahead of .NET's and years behind. Figure out what it is you want to do in Java and then define the simplest PoC you can and do it. It's the best way of getting started without drowning in choice.
On your very first day of programming, every solution is something you wouldn't have thought of doing to solve a problem. Don't worry too much that you can't see when to use nested loops right now, more practice creating them, and seeing them used will help build this understanding naturally. Try the next set of questions anyway, then come back to the for loop ones afterwards.
If you're stuck on a loop, take a `break`! Jokes aside, you probably just need more practice. It's impossible to learn to program properly from endless disjoint exercises. Take some time out from the exercises and try creating a practice program that puts it all together (like a console app that takes names from the user and can list them, or similar).
Not sure what you're talking about, can you give a concrete example? I suspect you're talking about recursion. It takes a bit of time and mind twisting to feel comfortable with it as you need to see it in reverse order. Don't worry about being slow or not getting it, in my opinion this will make you much better writing clean understandable code on the long run as compared to someone who "gets it" right away. Good luck and give us more info on where you're stuck.
make sure you have at least 6-8 close people or friends if you are really serious into doing that.
I use Visual Studio Code for some light editing or small front end changes. For larger project work, I tend to use [Rider](https://www.jetbrains.com/rider/) which I find a bit closer to the full VS experience on Mac. FYI not affiliated in any way. Just passing on a recommendation I haven't seen mentioned here.
I was just struggle with this the other day definitely saving this
Hello, great to see that it was helpful. Check out my channel if you want to learn more about .NET (www.youtube.com/c/dotnethow)
https://www.w3resource.com/csharp-exercises/for-loop/ I've been doing these questions, specifcally questions 10 and beyond has been the most struggle. I look at the solutions after not being able to figure out. I debug the solutions to understand the solution and I do. But once I move on to the next question I'm puzzled on that one too. And it keeps on happening. I feel like I should be understanding this more as I keep getting through the questions if anything I feel more puzzled. 
Can't say I disagree.
 &gt; Seriously, over ear with noise cancelling is just magical. Finally! Something that'll keep children out. My cramped little garden shed with my computer in didn't come with a lock...(I work from home because no-one will hire me or my wife gets paid more than I do, not sure which) That learning curve thing....I'll pretend you didn't tell me about that, I need ignorance to maintain foolish optimism :) Thanks so much for your helpful help. I am indebted to you.
Yeah, but 2 to 3 hour Twitch streams aren't that useful to find questions. It would be nicer if, after a live session, they cut up the videos in specific ones that each address a question.
I think that a lot of internal business apps are made in xamarin. (From a guy who has experienced the pain of maintenanibg such apps)
Java doesn't have: * Real generics * Properties * LINQ (although recently it got the stream API) * dynamic keyword * var keyword (although it just very recently got it) * async and await * Unchecked exceptions * Null coalescing and null conditional operators * Value type structs * as keyword * yield keyword * Lazy&lt;T&gt; instantiation class * Extention methods
Another option would be to run Windows via Bootcamp, Parallels or VMWare and then run full Visual Studio 2017.
Just use .net framework that comes in with Windows. Dotnet core is for console applications and server applications. Pick the right tools for your problem/goal. Don't hammer on a screw. I think you are best of using winforms or wpf
The way they wrote the solution is not how I would go on about it. When going through the same steps as a beginner I ended up doing it my way and which made sense. What you have to do here is 1) define the limit to the amount of rows or lines you want, limit = 10 rows as an example. 2) each line/row has a limit of the row number starting from 1. row/line 3 will not go over 3. Not sure that makes sense but if you start from 1 line and on to 3 you'll grasp the idea better. When you understand it with 3 rows/line you'll get it for 10. Don't give up, you'll get it eventually. 
Xamarin.Android and Xamarin.iOS are just fancy wrappers/bindings around the Android and iOS libraries that allow you to use them in C# so you will get performance that is very very close to what you will get with developing them in thier respective languages.
The curve is good, it just feels crappy each time you start on a new thing, but it gets better with time and better faster :D Seriously, those headphones rock and I've worn them for 5 or 6 hours at a time :) No debt btw, if it works out, pay it forward :)
So I guess you are saying he should ‘continue’
i dont understand where did i must add semicolon?
if you haven't already, might be worth checking in within your company? A few people in my office work remotely, as in the rest of their team are in offices elsewhere. Sometimes they come into the office, other times they don't bother. Myself and one other guy are the only two based in our office working on our product, the other 10 are on the other side of the country. Not quite fully working from home, but we're left to our own devices for the most part and coupled with working from home it really is best of both. 
You might find the [list of implicit conversions](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/implicit-numeric-conversions-table) useful too, then.
Tried that, the performance goes down significantly and the heat scares me
Two days into programming and you've already got for loops mostly understood? That's fantastic progress. Learning a programming language is just like learning any language: you learn new ways to express yourself such that someone who understands the language (the compiler, in this case) gets what you're trying to say. Learning a new problem-solving technique (be it nested loops in code, dovetail joints in woodworking, or anything else) is always eye-opening and often humbling ("how did someone even come up with that??"). Most new techniques weren't created in a day. Now combine those two (learning a language and learning a new problem-solving technique) and you've got yourself a hell of a steep learning curve. I can't imagine trying learn woodworking in Japanese after only 2 days of reading about the language. Now, a programming language is, by design, much simpler than a spoken language, but you get my point. In the end, go easy on yourself. You're doing great, and even though some of these concepts might be "basic programming concepts" that doesn't mean they're intuitive or that there won't be challenges. Good luck, and keep asking questions.
Thanks, But what do I do now just keep bashing my head into these problems until i "get it". 
Partly, yes, but the best way to understand a solution (in my experience) is first to understand the problem. As an example with nested for loops, let's use displaying an arbitrary number of bowling pins
Partly, yes, but the best way to understand a solution (in my experience) is first to understand the problem. As an example with nested for loops, let's say you have a list of university courses and each course has a list of enrolled students. You don't know until runtime how many courses exist or how many students are in a given course, but you know you'll have to print them out like: Physics: John Doe Jane Smith Alex Rogers Math: Clark Kent Jane Smith Sally Sanders Ryan Sanchez You get the idea. So how do you do it? Forget about the code for a second. You've just been handed the info on paper organized into stacks: one stack per course, one paper per student. How do you write out a list of all students that are in each course? I'm sure it's obvious: grab a stack, write the name of the course, then go through all the papers and write the name of each student. Repeat for the next stack. That is a nested loop. The outer loop is the course level. If you only wanted to list the course names you'd _only_ have to look at each stack, not the individual papers. The inner loop is the student papers. If you only wanted to list the students for one course, you'd _only_ look at each paper in that stack and ignore the other stacks. When we combine them, they nest. You are going through each stack one at a time (outer loop), and _for each_ stack, you are going through all the papers (inner loop). Nested for loops weren't invented before the need arose, they're just a representation in code of what we do in real life. That's how most, if not all, coding solutions actually come to be.
Could also be VS for Mac
Ok! Someone somewhere will unknowingly benefit from your help :) I have not owned any Bose before, but they are a respected brand here in Australia. I utilise a Grado SR225e to deafen myself but that's not quite the same thing. Apart from the chunky cord they're comfy. I have an ill purchased seinheiser wireless headphone but I gripe the lack of tactile feedback for the on/off switch (seems to be common). I can't see the switch on that one, but the Bose next to it looks like a well designed switch...
Well, not and stay true to your username...
Check out Microsoft's documentation: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/ https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/
Removed: Rule 4.
I've been programing professionally for a number of years. I make and maintain, what I jokingly call a database skin. There is still complexity that gets out of the db that I'll have to deal with. Loops were hard for me at the start. Today sometimes the algorithm I need to implement can make it hard all over again. The following is some rules/tools for making loops easier. Always start with the form for(int i = 0; i &lt; limit; i++) {`//code goes here \`} C# and other languages support many different forms of loops: for, while, do while, foreach, etc. Starting with the same form every time will make it more familiar, and help concrete the model for how it works in your mind. Familiar models enable experts to be experts. They'll come whether or not you're aware of them. In the code block above there are some things to point out. * i starts at zero, just like array indexes. * i &lt; limit, by using the same condition in most of your loops, it's much easier to avoid the off by one error. If you want to stop at the last element in a array or list Array.Count fits nicely for the limit. * don't use i != limit in the conditional, if something jumps i past the endpoint the loop would never end The following is a system for debugging loops. On a sheet of paper write the code on the left, on the right write down the initial state just underneath a horizontal line. Walk through the loop's code writing down all the state changes as they happen. When you reach the end of the iteration through the loop draw a new horizontal line, and write down the new state just underneath the line. Repeat until you've run the loop all the way through by hand. The code is probably a lot shorter than the loop iterations, so the paper under the code can be used for the output, or bigger picture state. This probably feels like overkill for simple loops. But for nested loops it may really clear things up. You can use a double horizontal line to mark the outer loop's iteration and a single horizontal line to mark the inner.
It's funny 'cause it's `while (true)`.
I had some sens noise cancelling on ear ones about a decade ago. They were amazing then but someone stole them :/ I still use their 30 quid in ear ones as my back ups. I'm weird and have back ups for this stuff :) The Bose are expensive, so do try them first if you can :) One of my first jobs a very very long time ago involved typing product details from printed lists into terminals in a noisy, icy, RAT INFESTED warehouse. I was happy enough :) I know this is dumbass psychology, but find happiness where you are, because you'll alway be there.
I just used it last weekend for a small .NET Core app. Wasn't impressed - the intelisense module kept crashing and every text prediction felt like it was treating the file as JavaScript with normal English mixed in. That said, my app had no ASP in it, so it might be a little better for you. 
You totally can get by with using VSCode. As a Mac user myself, I've made the switch and ponied up for JetBrains Rider. I'm very happy with that switch and while nothing is as first class as Visual Studio on Windows, Rider is pretty darn close and has all of the R# goodness you've come to expect.
Not really, it depends on the operating system and it’s support for docker . We run dev and qa on the 1803 build of windows server 2016 with container support with no issues . We’re running running a swarm that has multiple windows nodes and deploy a 10 year old legacy webforms/wcf app along with a custom sql server per environment. As part of this we also do on demand envs, a user enters a branch for code and db and we spin up the legacy site / api with a custom built db in minutes . We can run up to 40 services (what we call a unique instance of the app/api/db ) on a 6 node swarm. Our swarm is 4 windows servers and two Linux boxes and we’re running a combination of windows containers AND Linux containers for ancillary services like smtp and a sql viewer. 
We used docker for a while on one of my bigger projects. It's neat for deployment of shards and stuff, but for most development it's note hastle than it's worth imo.
That doesn't sound good. I've been working this way for about 5 years on my 2013 MacBook Pro. What spec is your machine?
Agreed. I spent a lot of time trying to open incoming port 22 so I could ssh into one of the containers (I know you can pass commands in with docker CLI..).
&gt; The Bose are expensive, so do try them first if you can :) haha, that's wisdom right there... &gt; You hit a performance wall pretty quickly with EF in the client, especially if you have little control over it, although it is great for really small LOB apps. Just getting back to this. How quickly would you say? :) I just spent 2 hours trying to figure out why some of my views were slow as.....deleted my database and yoink. Fast again..... My database had grown to 1.25GB with just a week or so of data (its a trading app)....(that can be reduced, but.....) I know you can't tell, but would you guess that that problem is an SqlServer.LocalDB database too big problem, or a Entity framework problem? or should I just turf them both? But hopefully neither... Now I know why that russian guy I talked to 6 months ago didn't use entity framework! lol At this rate. It sounds like I'm always going to be here :) 
I would not use 'alias' at all. Mostly because 'reference' is a very specific technical word and has a very good defined meaning that anyone understands. If you talk to someone and you explain that something is a reference of an object in C#, he will know what you are talking about. If you say that the same thing is an alias of a object, the following questions will automatically come up if he doesn't go strictly by the books: Is it a clone? Is it an actual reference? If you have the actual reference of a object and you mutate it, you know that its going to change everywhere, but if you have the *alias,* you really don't know for sure. Its not really clear. A alias has close to no meaning IMHO. Its at the same level of a 'identifier' token when you are writing a [lexer](https://en.wikipedia.org/wiki/Lexical_analysis) for a compiler in this case. Even [wikipedia points this problem out](https://en.wikipedia.org/wiki/Aliasing_(computing)#Conflicts_with_optimization). In C# there are is only [namespace aliasing](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive) and the [extern alias](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/extern-alias) keyword for external assemblies. You better call it what it is in that scope you are looking at. A argument/parameter, property, object, reference or just variable as the broadest term of all.
i7 cpu with the touch bar, 2017 model. Forgot to mentioned, I also have 3 external monitors.
For what it’s worth, we all feel like this at some point. I have been programming for ~4 years and am learning how to use AngularJS to populate data from an API. I got pretty far, and then was completely stuck. After 2 hours of helping me, my husband (also a programmer), found the solution, which was NOTHING that I would have come up with on my own. It can be disheartening, because I felt like “I’ll never get to that point, because I don’t understand how you thought of that answer.” However, I will eventually get there. Now I have that answer for next time. And sometimes you have to accept that an answer works, even when you don’t understand it yet, because eventually it will click after you’ve learned more. Keep going! You’ll get it :-)
You are still stuck with a singular site. We are building a site per branch or build with a unique url or sub domain. Instead of just dev.x over and over. Docker has yet to fix that.
While Java has some features C# lacks, such as more powerful enums and bounded wildcard/supertype constraints, C# feels for the most part a decade ahead of Java. It didn't even have streams and type inference until quite recently, and still doesn't have properties.
You should ```goto``` anywhere but this thread.
Given the version number, that's certainly what they mean.
I think you're looking for: Visual Studio → Preferences… → Source Code → Code Formatting → C# source code → C# Format → Edit → Category: New Lines
Measure twice, cut once padawan. I'm pretty sure I just fucked two references in one there :) The performance wall is with concurrent users. You can smash a DB with a very small number of users over and over and it will hold up. You can swap in Dapper, MyDb, My unreleased KittenDB, but you're going to hit a wall because you're scaling vertically. We lazy people who have suffered through all this in the past now scale horizontally. Vertically is within the constraints of the system. Usually the database and the limits of its hardware storage and the amount of ram you can shove down its throat. So we design to scale outwards, across machines. It has its own costs. Mostly up front. The second project will be a butt load faster, you'll just intuitively know where to scale. So it's not a problem with EF or even LocalDB, it's the way you're hammering them. You want to serialise access which requires a bit of middleware. You already get this bit. We put a service in the middle and let it be the arbiter of truth. It can use the fastest method possible to record what just happened and then EF, or whatever manages the really complicated task of peristing related data, can just get on with it :) Because this is tech, we've already named this stuff; ES (Event Store) CQRS (Command Query Responsibility Separation) and more close to the problem here, transaction logging and serialisation. CQRS will help here, ES won't because, as far as I can see you're mostly doing CRUD stuff. I really wanted to drop it in to draw out what's going on and coat you in consultant proof coating :) As always it's not that simple, but in broad strokes it gives you an idea of where to think. I'm prone to prose (and alliteration apparently) so talk shit endlessly. I quite enjoy it and if it helps I'll prattle on, but if you have a specific problem and I've gone all Owl on you, give me a slap and I'll focus :) I'm back at work tomorrow so will be missing for the normal UK work bit :) You're in Oz? You're my surrogate people. I thank you for the 90's :) 
I think you're looking for: Visual Studio → Preferences… → Source Code → Code Formatting → C# source code → C# Format → Edit → Category: New Lines
If you are SSHing into the containers, you're doing it wrong.
I know. The idea was to treat containers like VPS instances, which I normally SSH and SFTP into. I do the same with VMs. (obligatory "Docker is not a VM replacement")
Why are you asking it twice? Spam much? https://www.removeddit.com/r/csharp/comments/8rl469/i_need_help_using_visual_studio_752_and_mac/e0tup71/?context=3
I did not see the option to add images when i attempt to edit the old post. So I thought people would understand better if I reposted with a picture demonstrating the problem. So **NO** not spam much.
No actually I'm not doing a singluar site, sorry maybe I didn't explain it well. I'm hosting several different sites per branch with a unique url. On our single swarm cluster we have (fake urls but you get the idea) site1-dev.domain1.com site1-qa.domain1.com site2-dev.domain.com site2-qa.domain.com branch123.domain1.com branch222.domain1.com some_random_name.domain1.com (built from a specified branch) and so forth. &gt;We are building a site per branch or build with a unique url or sub domain. Instead of just dev.x over and over. Docker has yet to fix that. This IS EXACTLY what we are doing, we are allowing a user to specify a branch and name and we build 5 sites, 2 apis and a unique db. All the web apps have a unique domain based on the name specified. We have anywhere between 20-40 unique instances (each with their own dns names). I don't even know all the names on there since they are specified by the users through a jenkins job. In terms of DNS, we are using [Traefik](https://traefik.io/) to dynamically route subdomain for a specific root domain. All you have to do is label a container in the docker-compose file with the sub domain you want and poof routing happens automatically. I don't have to make any further dns changes since *.domain1.com and *.domain2.com all forward traefik.- I'm not sure what's left to fix, but the ability to select a branch , unique DNS name spin up multiple sites is already here. We do it several times a day. 
You can edit posts and post a link.
Stop using Mac?
Sorry about how mean everyone is being to you, I looked but couldn’t see anything related to this setting 
You can't edit titles though. Stop being such a dick and move on.
https://docs.microsoft.com/en-us/dotnet/api/?view=netframework-4.7&amp;term=dictionary%3C https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/
r/learncsharp would be a better choice. So might r/learnprogramming.
Testing frameworks. Any will work on your Mac with Mono or .NET Core. Any can be used with any type of application you write. I prefer xUnit, followed by NUnit. I wouldn't go near MsTest with a 10 meter pole because it's a POS and always has been. xUnit is pretty good, it's used for testing .NET Core/ASP.NET Core itself.
I’ve used both VS for Windows and VS for Mac and I’ve not seen this extension for the Mac version. On Windows, I got this trough the productivity power tools pack for 2017. They broke them up into individual extensions and I found them by searching productivity power tools. It’s been quite some time since I did anything with the Mac version, but maybe this will get you further down the road. 
Why xUnit over NUnit?
Thanks bro at least I now, know this is a issue on the MAC platform, I ain't even mad, haters gonna hate.
Probably because a fair number of the MS open source projects use xUnit (and I think it’s in more active development). Either choice is fine, just stay clear of MsTest - again, the fact that MS projects don’t use it should tell you all you need to know. 
Yeah pretty much this. Both N and X are under development, but N seems to be not as nice to use. I've used it a lot though.
It seems to be an old text if it doesn't advice you to write `var dict = new Dictionary&lt;typea, typeb&gt;` instead.
The key word in the author's text is "can". While you "can" do this, a dictionary's reason for existing is fast lookup of values via the key. Iterating over all of the values in one -- while you "can" -- there's a good indication that doing so says you've done something wrong in your design. 
Please, please, please, use the Yellow Book if you're only starting out with C#. Thank me later.
&gt;So out of those 3, which one am I supposed to use for web applications? The one that makes you happiest. &gt;Is it just preference? Totally. I use NUnit, but the other two are fine as well.
That's a lot of things at once. 1) you do _not_ need a dictionary for `foreach`. For example, here's an array that you can iterate over with foreach: int[] numbers = new[] { 1, 2, 5, 8, 10 }; foreach (int i in numbers) { // i will be 1 the first time, and 10 the last time } But the book also isn't _saying_ that you need a dictionary: it's saying it can **also** be used with dictionaries 2) a dictionary is a container containing key-value pairs. You use it to associate one value (the key) with another (the value). Unlike an array or a list, it doesn't usually have a defined order. Its keys are unique. Dictionary&lt;int, string&gt; familyNamesByStreetNumber = new Dictionary&lt;int, string&gt;(); familyNamesByStreetNumber[13] = "Miller"; familyNamesByStreetNumber[22] = "Johnson"; familyNamesByStreetNumber[884] = "Perry"; Here, I did the following: * I said the dictionary's keys are ints, and its values are strings. That's what the `&lt;&gt;` are for: they are type parameters. This is called generics, and it's a whole other topic. Suffice to say that because of it, you can also initialize a dictionary with _different_ type parameters, and then the compiler will make sure all keys and values match those types, or else complain with an error. You can also think of `int[]` as a Array&lt;int&gt; instead. For historical reasons, that's not quite true, but it's close enough: you can create arrays of different types, and they share behavior, except their elements are constrained to a certain type. * I gave that dictionary three values. Who lives at number 22? return familyNamesByStreetNumber[22]; // this will return "Johnson" What about _all_ street numbers? foreach (int streetNumber in familyNamesByStreetNumber.Keys) { } OK, what if I want all, but each time, I want to know _both_ the street number _and_ the family? foreach (var pair in familyNamesByStreetNumber) { int streetNumber = pair.Key; string familyName = pair.Value; } 
Is it the dual core 13" or the quad core 15" ? If it's the former, I can see it running a little slow with only one physical core per OS. The 15" should be pretty reasonable though, especially if you've got a 16GB model.
I'm on windows but their called indent guides (search for this) and there used to be an extension, I'll look when I get home.
Think of a dictionary as an array which can use data types other than `int` for the index. Example: You have a system where you store the name (`string`) and roll number (`int` )of a student (only). You would use a loop like this: var students = Database.GetStudents(); // students will be string[] for(int i = 1; i &lt; students.Length; i++) { Console.WriteLine($"Name: {students[i]}, Roll Number: {i}"); } 
nunit syntax seems better but tooling is probably not as nice
&gt; Measure twice, cut once padawan. Damn you old man! Cut twice. Measure once. It's been like this since the dawn of time! Now where's my mobile phone...I gotta do some important txting with one thumb....really fast! Ok, so I panicked. Maybe I don't have to throw out SqlServer and EntityFramework. Phew....KittenDB did look promising tho... Currently, I am basically going from Entity Framework Models onto my ViewModels with some half assed confused stuff in between. It seems to me the optimium thing to do is having an entirely in memory sort of middleware as you call it (im not even close to that yet). Then using EF to persist it at its own rate.... This is partly the delemma that spawned the concurrent dictionery question....I am trying to load my pricing data straight to a concurrent dictionery rather than going through entity framework (I need to throw some intensive calculations at the pricing data). I don't want to be retrieving or calculating those intensive calculations more than once. Its just too much work for Mr CPU.. I haven't really run into transaction logging and serialisation in terms of a way to solve these issues. CQRS (Command Query Responsibility Separation) seems like a good idea, but I haven't got my head around that. Ideally I don't want to be going to multiple computers to get things done. I've had a look at things like Akka.Net and Orleans, and they look real fun, but my wife would kill me :) ... In retrospect, if I was starting again, I would probably just do the whole thing in memory, then worry about persisting it as an after thought. I got into EntityFramework, because the internet told me so! If it helps any understandings, my application is for my own use, it's not for sale or for use by other people as such (well, obviously, I'll sell it if it doesn't work...)... In terms of specific problems. ~~Really what I want to know is, how to make my application awesome? (Ok, that's just asking for more prose and alliteration)~~...Do you have any suggestions on good books that might describe vertical integration. How to go from messy middle, to super neat middle in 2 days? Yeps, Cairns, Australia. This is the real reason no one will hire me. :) I think I'm going to have to help a lot of people after this one... 
thanks ;)
Syntax? They both have the same.
Think of a `Dictionary&lt;Key, Value&gt;` as an array which can use data types other than `int` for the index. Example: You have a very simple system for student management where you store the `string name` and `int rollNumber` of a student. You would use a loop like this: var students = new string[] { "", "Anders H", "Scott H", "Troy H"}; // keeping the first element empty, because roll numbers start from 1 in our system for(int i = 1; i &lt; students.Length; i++) { Console.WriteLine($", Roll Number: {i}, Name: {students[i]}"); } Example 2: You have a simple setup like Example 1, but the roll number of a student uses letters now (like "B_2018/1"), so you need `rollNumber` to be a `string` now. You would use a foreach loop like this: var students = new Dictionary&lt;string, string&gt; { { "CS_001/B", "Anders H"}, { "CS_002/M", "Scott H"}, { "CS_003/B", "Troy H"} }; foreach(var kvp in students) { Console.WriteLine($"Roll Number: {kvp.Key}, Name: {kvp.Value}"); }
I don't think Blazor's goal is to repeat the mistakes of the past (WebForms…), it is a framework for building SPAs in C#, just like React or Angular are in Javascript today. Using Blazor on the front doesn't mean you'll give up your nice REST APIs for some shared state bullshit, you don't even have to use a C# backend with it. It's just a new option (as if we didn't have enough already) to write client-side code. Personally I don't have any problem writing JS on the front with the quality frameworks and tools we have today, but if somehow Blazor can match them in the future (ease of use and features mostly), I'll probably jump ship.
I use MSTest V2 for convenience (Visual Studio picks it often as a default in non-.net core projects), but have had great experiences with xUnit. MSTest works fine. I've got lots of tests written in it. The biggest advantage of xUnit that I found was that it's easy to separate your tests from your input data. An example is say you're looking to test a method takes two integers and adds them together. You have a contract defined about what happens in certain cases. xUnit makes it pretty easy to test things in the domain of the function and at the periphery of the domain, whereas with MSTest, you'll be writing either a for loop (which you shouldn't do), or you'll be writing a bunch of individual tests which all do the same thing. The biggest thing is there are smells iin your tests no matter which one you use. After selecting a framework, I'd commit to using it for your entire solution for consistency. Once you've selected a framework and a runner, really think about how you're creating your tests. It's easy to make poor decisions, so try to catch those. 
That extension is for Visual Studio, but not for Visual Studio for Mac.
That's unfortunate I assumed they used the same extensions. Well at least you now know what to look for.
To expand upon what was said above, Postgres is case-sensitive and autoconverts everything unquoted to lowercase. You won't see it if you only interact with the DB through EF (which is unlikely at best), but if you have a column named `StudentId`, you will forever be forced to query it with quotes and proper casing like `select "StudentId" from table`, because neither `select StudentId` or `select studentid` will work. I actually tried it for a couple of weeks before it drove me crazy and found a way to override EF Core in order not to quote anything (I actually used column attributes but I preferred to write my table and column names in uppercase).
Yeah I can see that... but I just can't imagine trusting the same people that created some of the typical ASP.NET MVC codebases to be able to competently use Blazor and not screw that up and make MVC Mark 2...
I don't think the problem would be much different if you gave a typical modern JS client codebase to these people. And I'm not sure that writing shitty C# to do some WebForms/MVC wizardry instead of JS is going to be more practical, since you know it's harder to write shitty C#... In any case, I think your worries are misplaced, this is definitely different from the old days and is simply a way to write a client that consumes an API. This is mostly an answer to the "fullstack JS" trend which justifies using node.js on the server because it is the same language that is used on the front, "one less language to learn". Here, you can do "fullstack C#" just the same, and it does look better :)
Here's a specific question; Stephen Cleary says a Blocking Queue is the way to deal with a data conduit from one thread to another. In the past I have been looping to download data from an API and raising a message from another thread to deal with said data. That works, but the advantage of a blocking queue is that I can throttle it if more data is coming in than can be processed. Does that sound accurate? Would I be best off having one thread adding to a queue, then one or more threads taking from the blockqueue, rather than using a messenger? i.e. Dont use a messenger for such a feat? 
I would recommend NUnit as a first choice, maybe xUnit, but definitely not MSTest
No they don't
Did some digging... [Maybe?](https://stackoverflow.com/questions/42763074/remove-vertical-dotted-indentation-lines-in-visual-studio-2017) 
...and I have spent my morning fighting with Visio. This would be my blocking queue implementation.... https://john-gmail-25.tinytake.com/media/7b4bd1?filename=1529283598827_18-06-2018-10-59-57.png&amp;sub_type=thumbnail_preview&amp;type=attachment&amp;width=699&amp;height=493 ...but still so many questions!
&gt;not having closure, module, continuation, reference via cesk, any kind of abstract machine, numeric hierarchy, metaobject protocol, macro, much less reader macro, hygenic macro, Silly Haskaller doesn't know Lisp supports all the above before Haskell wasn't even released. &gt;And yes, I love smug classic lisp weenies not being able to argue about it, but has to downvote in silent. Not much to argue, really. 
Bonus question. For a mocking, stubbing. Would people recommend NSubstitute? 
Just one sentence. On 1959, what Lisp has closure?
VS for Mac is missing the vast majority of the productivity helpers on Pc. Currently using one for iOS debug and I didn't realise how many extensions I live on until I had them all removed. 
No, you can't. enum TestEnum { OnlyAllowedValue = 1 } class Test { TestEnum InvalidValue = (TestEnum)2; } This code compiles just fine. You can of course always put a check in a property setter, but if you're doing that there's no point to using enums anyway.
I've been using Moq.
Was the beginning of the end for Digg 
throwing and catching. Where is the exception?
OOT the greatest game of all time, but I'll take any Zelda game any time
I used to use MS visual studio on a windows 10 machine, then i swapped to linux to give monodevelop a try witch kept crashing for some strange reason. Then i gave VS code a try, and for C# it works really well. VS code for html/CSS do kinda suck, i have a huge battle with intelisense every time i have to use it :( VS code does take some time to get used to, the debugger works really well.
I thought VS 2017 had this by default? Weird that Mac version doesn't. I know for a fact the power productivity extension has this though. I used it in VS 2015.
What is the .net core version of a Windows service that is cross platform? I have a .net core web api project that could use a legit background service. Right now I just have a console application that gets launched with parameters based on the api request. It works wonderfully but feels dirty.
Well its not the end of the world, I only have mac computer at the moment and things can still get done without this. Just that it would have been neat if this little feature was included. 
Removed: Rule 4. One typical way is to use [LINQ's `OrderBy` method.](https://msdn.microsoft.com/en-us/library/bb534966%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) var orderedShips = ships.OrderBy(ship =&gt; ship.Power).ToList(); Or you can still use the `List&lt;T&gt;.Sort` method, but maybe use the [`Sort(Comparison&lt;T&gt;)` overload:](https://msdn.microsoft.com/en-us/library/w56d4y5z%28v=vs.110%29.aspx) ships.Sort((Ship x, Ship y) =&gt; x.Power.CompareTo(y.Power)); Note the first `OrderBy` version will create a new ordered list and keep the original list intact. The second `Sort` version will reorder the original list in-place.
This is a good question. I have no idea. A windows service is just a program with some daemon-like api where windows can call start and stop. I don't know if there's a well-tread path for this cross-platform, or if you have to roll your own solution like you've done. I don't think a console application is a bad solution though.
You could try Rider. It also works on Mac, and it has most of the productivity features from VS on Windows, and then some. 
I use jetbrains rider for dot net development on the Mac
This is the happiest I've been to have a post removed. I've even been banned from /r/modabuse So I made /r/modabuseabuse
Yeah messenger does something different, it's specifically about decoupling components by using messages. A blocking queue is a way of taking incoming data and processing it. I have a class which I used to use a lot which did exactly this. You simply instantiate it with the number of threads that will process the incoming data and it will round robin through the threads and raise one event on each until it has no more stuff to work on. It's designed to accept incoming data from any thread, and can pump the data back out on 1..n threads. So it can either aggregate data inwards, or fan it outwards if that makes sense. There's a Microsoft library called Rx (Reactive eXtensions) which handles a lot of this stuff for you now. It's like the opposite of Linq in that instead of pulling values out of an IEnumerable, it pushes values out of an IObservable. It has a lot of functionality for things like throttling/rate limiting, etc and some very fine grained control over which threads it uses, so you can configure it to work in things like WPF where you have thread affinity :)
&gt; Real generics There's no such thing as "real generics". &gt; Properties Fancy name for getter/setter generators. [Lombok provides a similar feature](https://projectlombok.org/features/GetterSetter). &gt; LINQ (*although recently it got the stream API*) That was 4 years ago. &gt; dynamic keyword The value of that is questionable because it would just obfuscate the code. Though, you can use the "invokedynamic" instruction from the jvm through methodhandles. &gt; var keyword (although it just very recently got it) It's [available in lombok](https://projectlombok.org/features/var) for a long time. &gt; async and await [This library can help](https://github.com/electronicarts/ea-async). &gt; Unchecked exceptions Those are the "default" in java. &gt; as keyword That's just type casting which hides the error. &gt; yield keyword There's [a library](https://github.com/benjiman/yield-java) which can help. &gt; Lazy&lt;T&gt; instantiation class Lombok implemented [a lazy getter](https://projectlombok.org/features/GetterLazy) too. &gt; Extention methods A similar feature is available through [lombok](https://projectlombok.org/features/experimental/ExtensionMethod)
Productivity Tools power pack ? 
I got them when I recently upgraded to vs2017 from 2015. Don't know if they were an optional toggle / available via add-on in previous versions.