.Net Framework is the past and a lot of the present. You'll find it in a lot of legacy applications and several green field projects as well. It's not going to get many more updates but Microsoft will still fully support it as it's so widely used. .Net Core is the future. It's designed to run on an platform such as a Linux server. It's also a lot slimmer and has optimizations that framework will never get. .Net Standard is a bridge between the two. Standard is good to use when you want to write a library that can be used for either core or framework projects. A lot of people avoided core at first because there weren't many nuget packages that supported it, but the tide has pretty much turned and a lot of current libraries have dropped support for framework. Core and Framework share a lot of the same functionality and features. You won't notice much difference when it comes to the nitty gritty of coding. But when it comes to configuration and bootstrapping you'll find a lot of differences between the two.
It never worked like that. Seriously I've had to do this multiple times; first you use rename on the class and it changes in your source code, then you have to change the filename yourself.
I didn't want to get too far from the sizes that I was seeing in production. The goal was simply to prove that List&lt;T&gt; could be responsible for the exception. Once I got that far, I didn't push it to see what effect altering the upper bound would have.
&gt; The next obvious question is "why isn't there a thread-safe List&lt;T&gt;". Yea, that's one that has frustrated me many times over the years. Especially when I invariably realize that I don't really want a List in the first place.
Here you go. *** Hey old man, production is blowing up. Sigh, send me the stack trace. Ok, but it doesn't make any sense. WTF is Enumerable.Any throwing this exception. Damned if I know, let me look at the code. *** Happy?
I just fell into it because it's what the company that hired me uses, but I really like C# and .NET is pretty good too.
ConcurrentBag?
Thanks for the response, my good chum
Why no XML literals? Also, [here is With...End With](https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/with-end-with-statement) For C#, `with` could be something like this: public void Run(MyObject obj) { with (obj) { .DoStuff(); .DoMoreStuff(); } }
Never found a use for that one.
first time I've ever down-voted something on this sub
I think this might be what you're looking for? Honestly I've never seen it used so I'm not even sure myself. [System.Collections.Generic.SynchronizedCollection&lt;T&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.synchronizedcollection-1) They didn't make a concurrent list class because random access doesn't really play nice in concurrency minded scenarios, so most actual cases don't do much better than just a naively locked list. So instead they steer people towards something different where concurrency works much better, like a queue, bag, dictionary, stack, etc. Or you could use these, which work extremely well in certain kinds of concurrency situations: [System.Collections.Immutable.ImmutableList&lt;T&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1) with [System.Collections.Immutable.ImmutableInterlocked](https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutableinterlocked)
Resharper **is** most of the bloat of visual studio. Without it, VS is actually pretty fast and has been since 2017.
&gt; Why no XML literals? XML is complicated and there's nothing gained from including it in the language standard. When the XML spec gets updated, your current compiler won't be able to deal with and you'll install a compiler plugin and you're no better off than doing what you wanted in a different way. &gt; Also, here is With...End With Oh God, that looks like JavaScript's with. No please, that's a rabbit hole I'd rather not go down.
first 35 minutes are general asp.net "community update" type material, ~25min - starts Blazor "community" material. some may have noticed my mild obsession with getting the blazor vs razor components terminology right... this post by Dan spells it out pretty well: https://github.com/aspnet/AspNetCore/issues/8931#issuecomment-478151056 hell, even the title of that issue can be confusing to newcomers, given his followup. anyhoo, Dan demos what i'm on about in my mini-rants here: https://www.youtube.com/watch?v=ap60h3eQE5Y&amp;t=57m44s So, Razor Components won't be limited to Blazor apps. (And then Jon goes on to use the term "blazor component"... smh... 🙄) He also shows including Components in Razor Class Libraries to share between other project types.
Yep, classic mutable list in a static field. Spent the next hour looking for other places where they did that. Thankfully this was the only one.
I have this same problem, yet I have implemented locks whenever I do any operations or .FirstOrDefault() to the lists, and still get this exception. Not sure where to go from here because it's a pretty important project.
Could you say a bit about what you mean by runtime? I only have the vaguest definition of a "runtime" in my head.
&gt; I'd spent a whole day trying to track what was causing only one of our connection instances to not get garbage collected Is this more-or-less what happened? 1. You noticed something non-specific behaving badly in production, and then 2. You tried to recreate the situation in Debug mode with a debugger attached, and noticed this behavior. As others have said, [the garbage collector will behave differently](https://stackoverflow.com/a/7165380/1083771). I'm **guessing** that the original problem that triggered your research is unrelated to this, because in theory you should be building in Release mode and deploying without having a debugger attached ;-). You've had a few responses at this point... I can try to put them all together and add something of my own. See this: https://gist.github.com/airbreather/227e942a2b0d07e3b358c81b57963b9c -- I've isolated your `// problematic portion` and then rewritten it a few different ways to try to help explain what I think is going on and why. Comments throughout go into detail about the exact rewrites, which I won't repeat here. &gt; I mainly want to check I'm not just doing something dumb and assuming it's weird behaviour. The important thing is, do these "leaks" actually cause observable problems in production? I'm not talking about "`taskmgr.exe` reports that my process is using more memory than it should be at this point", as that kind of "problem" (in my experience) could just mean that the rest of the system has plenty of memory to spare, and so there's no reason to spend your process's CPU time running a full GC. What I'm talking about here is, in production, your process needs to allocate more memory, and it's constantly running gen2 GC to pick up whatever scraps it can find because stale connection objects are hogging more memory than the system is designed for. If (and, I advise, **only** if) there **is** an observable problem in a production environment regarding "Connection" object lifetimes, and you've unambiguously determined that it's because of "Connection" objects that you're basically done with but which are still "alive" according to the GC, then you may want to look into implementing `IDisposable` in your "Connection" to free up the heavy state and eagerly trigger `Dispose` as soon as you determine that it's possible. This gives you more control of your situation. It also opens you up to what are essentially "use-after-free" errors that developers aren't used to having to deal with in .NET, which is why I opened this paragraph by advising to **only** do this if you're reasonably sure that this is causing a problem.
I started doing web development in 2000 when it was obscenely easy for anyone to get a job just by knowing HTML. I started learning Classic ASP because that's what was needed. I already knew Visual Basic so it wasn't difficult to adapt. Eventually, I realized .NET was far better then the mess that Classic ASP was and started doing WebForms. I had taken some C and C++ classes in college so migrating to C# wasn't a big deal. A few years after that I moved on to MVC and found it much more elegant to deal with.
Yeah it is
Cool
Is your machine overclocked or using tweaked memory timings or something? The only time I ran into VS issues was with extremely large SSDT projects.
I think you’ll be hard pressed to be more productive than Visual Studio.
Are you sure you added all of the locks correctly? It only takes one missing lock to break the whole mess. Which is why I prefer ConcurrentDictionary or ConcurentQueue instead. They are nearly foolproof.
Yeah. VS no suffix is fine too.
I'm going to have to triple check but I'm fairly sure my locks are set for the specific lists. I'll look into those Concurrents as well!
It's great that you lock when you do operations on it - but does everyone else?
If you're familiar with Java, a rough equivalent would be the JVM. When you compile C# code, you produce intermediate language, or IL. This is similar to assembly. This then executed by core code called the runtime, which turns IL into actual processor commands.
Thank you, I just could not think of it as this way. I solved it using your method. Thank you
I used to hate everything related to microsoft but i gave it a chance with .net core and now i love it and microsoft is doing a great job with the open source community that gives me more confidence to use the microsoft stack *but i still hate VB*
ConcurrentQueue&lt;T&gt; is really useful.
Concurrent reads and writes on an unordered set.
Agreed. My comment was mostly around this part: &gt; or simply lock your list any time you need access to it. Sometimes, that's a perfectly well-reasoned approach, but locking in general isn't the best for anything with a high degree of contention (that is, there are better ways).
The F# syntax is from an alien world
Rider, and never missed Visual Studio anymore.
I use Rider &amp; VS2019. But VS only because some old webforms projects refuse to publish on Rider (there is probably a fix, somewhere) ;) The why is that I really love many ReSharper features, but it slows VS down by a lot, so Rider gives me almost everything VS gives me but the extra R# stuff as well while being faster than VS without.
Nope, can't think of a single time I needed that.
You literally proved my point. Generics are for removing the need to manually write out the code needed for every type you want to or don't want to support. You literally told me to write the type version of something like this: int i, j, k; i += 4; i *= 5; Console.WriteLine(i); j += 4; j *= 5; Console.WriteLine(j); k += 4; k *= 5; Console.WriteLine(k); When any sane person would abstract those away into a single method. I'd suggest you read up on what abstraction is in OOP and learn at least the basics of it before showing us that you are the one who has no idea what they are doing.
That would require dirty nasty shared state. Surely no member of this sub would do such a thing.
I’ve been programming since I was 16. I spent several years programming in VB but then I got into game design. My engine of choice, Unity. C# looked a little daunting at first, and more people were using JavaScript over C#, and there were more resources at the time so I chose to learn JavaScript. It only took me a week and I got really good at it. Years later Unity dropped JavaScript supporting order to push C# so all the years I spent avoiding C# like the plague were wasted. I remember getting the news that morning, I sat down with my coffee and thought “well fuck”. I gave it a couple days for Unity to push their next update and sure enough, they removed JavaScript support and Boo support. So now C# was the only option available. I told myself that if I want to continue making games, I have to learn C#, I was kind of forced into it. I hated Unity for a short time, but today I thank them. It only took me a day to understand C#, after that day I was already rewriting complex systems in my game and speeding through other scripts. After a week, I began enjoying C# even more. Today, I no longer program in VB, I was an expert damn near in it. I now strictly program and make games using C#. C# is the best language I’ve ever used, seriously feature rich, you can’t pry it from my dead hands. I thank Unity for pushing C# as it’s favored programming language because outside of making games, I now have VB and C# both under my belt which looks great in a resume and if I’m not working on games, I can make desktop software or iOS apps in C# instead of VB, which looks better on a resume or portfolio too. I really wish I would have learned C# sooner instead of being arrogant. But at least I know VB, JS, and C#, for whatever it’s worth... TL:DR Unity forced me to learn C#, my most hated language has now become my number one favorite language of all time.
Good to know! Also, I think that ~ is tilde and ` is called a backtick maybe?
I would be careful saying set as that implies unique values only.
I have a solution with 450+ projects and VS 2019 loads it in about 10 seconds (when Reshaper is disabled).
And I hope it never does.
VB is my first language. Even though I only use C# now and love it even more, VB will always have a place in my heart, it got me into programming, and placing first in professional competitions across the state in high school. I was a member of BPA. We love you VB.
I mainly like it for 3 reasons &gt; Language is easy to understand and work with &gt; Standard library feels intuitive to use most of the time, I came from c/c++/js background and C# was heaven &gt; How everything just works, open project press F5 - boom it works, you get desktop application, F5 - boom it runs, no need to write any scripts, look for weird linking or what not errors on the internet, it just works.
&gt; That problem is fairly trivially solved by making members of the list immutable Which is not what people expect from `List&lt;T&gt;`. That's the whole point. The semantics of `List&lt;T&gt;` are not conducive to being thread-safe without locking.
Think of it like a queue where you don't care about the order. Lots of threads tossing stuff in. Lots of threads pulling stuff out.
Yeah, planet ML. :)
IMHO my personal projects at home mostly not get finished anyway. Thus, improving your own skills on a very cool project like this is a cool way to endure as long as possible. You can even advance into ai, cloud based api, or web sockets for a pvp mode. Kind regards
https://github.com/filipw/dotnet-script/ Better than having to deal with bash.
if i set nextTurnId to -2, it means that something logical happend, that shouldn't be possible. it will enter the default case, which all it does is print and return
about part 1: the weird thing is, that yesterday, it worked flawlessly, but today, i changed some of the logic(case -1 stayed the same), and then this error happend
Exactly what polymorphic behavior do you think you're going to write in your method that can take an int, a char, or a bool?
SO are doing SQL server upgrades right now and last I read Nick Carvers twitter he was shutting down various services (not search related from what I saw). Might be that.
Supposedly it works in the new reddit UI but not the old one.
Well, I started my career as a developer in 2003. C# and .NET were the new kid on the block and a lot of companies were hiring .NET developers. Also the salary was pretty good (compared to Delphi and PHP, even C/C++ which I liked). &amp;#x200B; Even though I was a big fan of Linux and open source I couldn't resist the money... so I ended up being a .NET developer on Windows. Luckily for me Microsoft seems to embrace open source lately and with .NET Core I can combine the best of both worlds... so there are times I actually enjoy being a .NET developer nowadays. &amp;#x200B; Before .NET Core arrived, I seriously considered switching to Java because of the open source community and Linux.
Joined
You should listen more and try to prove yourself right less. There's good reason no one in this thread can figure out what it is your trying to accomplish. They are very different type systems (surprise). Your comparing apples to cutting boards and declaring one better. It's silly. &gt; You literally told me to write the type version of something like this: No, what I told you type was more like this int i; double j; decimal k; Calculate(i); Console.WriteLine(i); Calculate(j); Console.WriteLine(j); Calculate(k); Console.WriteLine(k); For that matter, why don't you go look at how Console.WriteLine handles that. What you seem to want is something like this public TNum Calculate&lt;TNum&gt;(TNum number) where TNum : int|double|decimal { number += number; number *= number; } Or along these lines, specifying only the presence of the operators rather than concrete types public TNum Calculate&lt;TNum&gt;(TNum number) where TNum : operator+(TNum), operator*(TNum) { number += number; number *= number; } Or just specifying nothing and expecting compiler magic to just make it work, because C++ did. .Net does not support this. The reason C++ does is because it's simple template expansion. The compiler does not need to be able to resolve types and signatures prior to expanding templates. It doesn't need to know if TNum has a `+` or `*` operator. It's distinctly not OOP to use templates this way. .Net does need to resolve the generic types and you can not use any members of a type that aren't statically known.
Yep it doesn't work in 2019 and it was in 2017.
Your spec isn’t really of help as long as Visual Studio is only 32 bit, which can allocate roughly 3GB of memory. If you like ReSharper in all other ways, I can recommend you to check out JetBrains Rider.
Thanks for your advice guys! I feel I have a much better sense of direction now.
Probably the SNI interfering
Building an OSS message board with Blazor [https://github.com/RemiBou/Toss.Blazor](https://github.com/RemiBou/Toss.Blazor) , trying to create the new concept of online media.
LoadCSV(csvFile); Console.WriteLine("csv loaded"); CleanData(); Console.WriteLine("data cleaned");
I have VsVim only. :(
In my case we have a WPF app that has some pretty big business logic (that is shared with a Web server) and that bit is written in F#. The point is that this code needs to be as bug free as possible because that's where we handle VAT for clients. The advantages of F# are many for this case. 1) Immutability and Single Source of Truth. It's easier to debug cause you don't get the mutable object passed to everyone in the code. Also it's harder to write side-effect-full code. 2) Discriminated Unions. Enums on Steroid. When I rewrote this logic I showed my colleagues how they could avoid the marvelous anti pattern that is "the object with properties that are always null except in some niche cases". And my codebase was made by people who don't know what that anti pattern is so we actually had a class where 40-50% of properties were null or empty depending on the state of the object. F# Discriminated Unions solve this problem by allowing an easy way to work with objects that have some source in common but different properties and behaviors.
Yep you got the flow of how I found it right :), there was a genuine leak of connection objects being reported so I grabbed the latest debug build and pointed dotMemory at it. Fixed the leaks mostly caused by undisposed observaable subscriptions, but there was one last leak being reported by the memory analyser which just showed as "Local Variable", I figured it was some lambda somewhere that did an implicit capture but never got stuck since it's a very task heavy program but I couldn't find it. Commenting out half the connection handling code and reading it later, I isolate it to that function. I then tried it in release on a hunch and found it wasn't reported there. Just to avoid it tricking another dev in the same way in the future I moved the body of that thread into a different method, away from the while (!cancelled).
Exactly. Lists are commonly used for iteration. Iteration is not thread safe even on the thread safe collections, so a lock or use of an alternative thread access construct such as the ReaderWriterLockSlim should be used. Once you're at the point of locking around a list or concurrent collection, you might as well stick with the non concurrent version anyway.
ConcurrentBag isn’t order preserving across threads, though, so may not always be appropriate.
No, it can do far too much, that’s the problem. But locks perform pretty well as long as contention isn’t too high.
Curious. Works fine in Firefox on Android Pie here. Is there any way to make it tell you what the error is? (Bad certificate, bad ciphers, something else?) &amp;#x200B; The only issue I can come up with is that I hadn't set up IPv6; fixed that now, but that really should give a "Connection refused" kind of error instead of what you were seeing.
The nature of the beast. You are correct, it's simply a thread-safe collection. While there is not perfect alternative, ConcurrentBag works if you simply need to add/remove and iterate through a collection. The only thread-safe alternatives (available in the .NET Fx/Core) are Queues, Stacks and Dictionaries as far as I know ( https://docs.microsoft.com/en-us/dotnet/standard/collections/thread-safe/ ) So, either that, or browse Nuget or build your own
Yeah, I’ve used ConcurrentBag a few times myself. In very low contention scenarios, a locked list might perform as good or better, depending on circumstances. I used the bag to collect stuff on multiple threads and then consume it afterwards on a single thread.
&gt; They're likely closed every day Me: *having 30 Chrome tabs opened since forever, because I only put my PC to sleep and never close Chrome* If your desktop app has memory leaks and you ignore it with "it's gonna be closed often anyway" you should immediately be struck by a lightning.
Needed general purpose language, and Java has been lacking in recent years. With .Net Core, C# became a much more reasonable option
When I wanted to learn a back-end web technology I didn't know which one to choose, so I searched online and I remember Microsoft had so many haters and on most forums php and Ruby were popular so I decided to learn Ruby. But fortunately before I started to learn I checked the market for hiring and suddenly I realized in my country there is no job for Ruby, just ASP.NET and php (and a few Java). So I went back to W3Schools website where I learned HTML CSS and JS, and started php but it didn't feel right. So I was left with ASP.NET. I got two books Pro C# 6 and Pro ASP.NET Core and it took me about 6 month to read and understand them (I read Pro C# 6 twice). Then I got my first job and day by day I got better. When I realized I can do web, desktop, mobile, IoT and gaming with C# and there many great frameworks for this language I was so happy with my choice. So job market was the reason I chose .NET.
That really shouldn't be an issue on a modern browser such as theirs (assuming they're using the most recent one from the Google Play Store).
Personally, Visual Studio always feels more snappy to me than JetBrains IDEs for some reason.
Make sure to change the class/variable names and vary the structure slightly if it's for a project ;)
WinForms can somewhat be run by Mono cross platform. Considering they don’t advertise full WinForms support, I’m guessing there’s a limit somewhere, but I’ve been able to run quite a few old apps with no trouble at all using Mono.
VSCode w/ extensions if I have no money and want cross-platform. JetBrains Rider if I can afford the license (I can) and want cross-platform. (I use all three environments, Linux/Windows/macOS, on a weekly basis. Cross-platform support is important to me.)
At this point, if your company is not willing to give developers 16 or 32 GB of RAM, it's time to job-hunt. Between the WinVM (legacy .NET solutions), Slack, Firefox, Chrome, MS Teams, MS Outlook, a git GUI (running in both Windows and macOS), Docker containers, plus a few IDE windows -- I run at about 20-25GB in use most days. Fortunately, the 2018 macBook Pro 15" line finally came with 32GB of RAM. I keep a screenshot folder with my memory usage statistics... it helps when asking for a new machine. Fortunately, our company has reasonably loose purse strings, so I didn't have to push too hard for a 32GB unit.
Sure it can but we're discussing learning here not multi-platform options.
The big advantage is Resharper is built-in, so it's a lot faster compared to VS+Resharper. VSCode does not yet have Resharper, so refactoring is just more difficult in VSCode. Plus it's cross-platform (macOS, Windows, Linux).
I thought it worked at some point. Disappointing that it is gone
Similar, I still fire up VS-Pro on occasion. Mostly because I want to look for Nuget packages in the solution where the version differs between projects. Rider still has some work to do on the Nuget package tooling.
&gt; It just gets things done. This in combination with Vim sounds wrong. &amp;#x200B; Should be more like: &gt; It ~~just~~ gets things done if configured properly and added all necessery plugins to do so if you don't want to miss things like Intellisense-like code completion, method annotations and other very useful stuff.
You said WinForms was just for Windows. And I can bring up errors in what you say regardless of your supposed topic.
Why do people always use this argument? It's plain bs. The time to open a project stands in no relation to how much time it saves by offering all the help it does. &amp;#x200B; Sure, first start costs you about 5s, but afterwards you save hundreds of hours by NOT going to [docs.microsoft.com](https://docs.microsoft.com) to look up function definitions and do straight "go do definition, yes i want to decompile" &amp;#x200B; For a simple Program.cs with Hello World - any texteditor would be ok. But as soon as you do multiple classes, deeper project structures, you will miss the included CTRL+T search and other very useful stuff.
I recommend [RoslynPad](https://github.com/aelij/RoslynPad), got like 60 scripts that i almost use on a daily basis. Supports .NET FX and .NET Core runtimes, aswell as NuGet and reference assemblies. &amp;#x200B; Also can #load "myOther.csx" into different scripts
If I can, you shouldn’t have said that WinForms was for Windows. Part of learning is deciding what is worth your time and what isn’t. Today, if it isn’t cross platform, it’s not worth learning really. It’s incredibly stupid to think the cross platform options aren’t a massive factor is deciding what to learn.
I don't see why I would use it, when I can just use VS Code. It would just me nice to use Visual Studio as well.
I would use vs code but my asp.net core apps cant run on my linux machine so rip c# ;D
The code listing style in that article are so annoying I stopped reading after about 5 lines of code.
It is relevant when the class is using explicit interface implementation and has provided a custom `Dispose` method. void Main() { var fubar = new Fubar(); ((IDisposable)fubar).Dispose(); fubar.Dispose(); } class Fubar : IDisposable { void IDisposable.Dispose() =&gt; Console.WriteLine("IDisposable.Dispose"); public void Dispose() =&gt; Console.WriteLine("Dispose"); } This will print: IDisposable.Dispose Dispose
i have not seen that before. but even there is no option for that. there is a way u can make some window always-on-top. some tools are there.
[Technically it is possible](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation) for an interface member either be not exposed publicly on the type at all, or to do something different than a public member of the same name. In those cases the first example might be necessary. However, this is fairly uncommon, and I can't think of any `IDisposable` implementation where this is the case off the top of my hat. In most cases, the second example is equivalent and preferable.
You can get a lot from the semi-standard INFORMATION_SCHEMA tables. Or the more provider-specific SYS.TABLES. There are other tables within those schemas that provide column level detail. `select COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'tablename'`
You can probably verify this, but why is this of interest?
 reader?.Dispose() One line.
Windows Forms is a great way to learn OOP and produce a GUI program to show to people. Learning Windows Forms itself is not very useful. Building a gui program is important because it gives you a sense of accomplishment that you can in fact build real useful software. What I told my students when I was teaching a course was that they want to build programs that people would in fact use if there were not better programs of the kind already. A perfect example is a calculator. At one point you know that you have built useful software. Yeah maybe there are millions like it but people are using this exact kind of program. In my opinion non-GUI software would hardly produce similar motivation
i like it because it is very clutter-free and allows for fast prototyping and is ~~not written on electron~~ fast. My scripts often do stuff with Json/Webpages/just testing what works on NET Core but not on NET FX really do love my fast prototyping / scripting. &amp;#x200B; But as soon as the script reaches reusability-level it gets promoted to Visual Studio and becomes a NuGet
Was thinking about that. I love this but i see a lot of people that are not as much into C# don’t know about it. A shame for a so nice feature.
And related: `(reader as IDisposable)?.Dispose()`. They do different things.
You can create you own String with any amount of void methods.
[Find out yourself.](https://docs.microsoft.com/en-us/dotnet/api/system.string#methods) Spoiler: yes
There much better ways to teach OOP than through WinForms. A simple example with cars or animals is enough. I’d say that if you aren’t motivated to make a command line program, you’re not motivated enough to do much of anything in the industry. A GUI is a small after thought compared to the logic
It works now. Weird.
&gt; There much better ways to teach OOP than through WinForms. A simple example with cars or animals is enough. Disagree. Especially on the second part. I mean you can explain it with cars but in practice you don't see OOP modeling the real world you see it more in things like Control having a List&lt;Controls&gt; which have Paint method which polymorphically draws the specific type of control.
thanks, all of you. AngularBeginner, thanks, now i see difference;
Okay, thanks for checking. So, some chance that it was related to IPv6, even if that seems like it should give rise to a different error message.
You are presumably not getting out of the while(true) loop - Unity runs the editor in the same thread as your code, so Unity itself freezing is a good sign that you're stuck in a loop. I assume you've missed a path through that loop over your switch statement that doesn't get to a return. If you step through the code you should be able to find out where it is getting stuck. (Set a breakpoint in Visual Studio at the start of the switch, and choose Attach to Unity and Play from Visual Studio's the top menu, then do whatever you need to do in game to get to the switch).
will try it, thx
ConcurrentBag&lt;T&gt; FTW
Better skip to minute 38 or even further - https://www.youtube.com/watch?v=ap60h3eQE5Y&amp;t=38m
Removed: Rule 3. No, there is no built-in setting. There are various third-party tools that can help you though.
Removed: Rule 4. Most (all?) of the manipulation methods will return a new string. But not _all_ of the methods must, some can indeed be `void` especially if they're modifying the parameter inputs. For example: https://docs.microsoft.com/en-us/dotnet/api/system.string.copyto?view=netframework-4.7.2#System_String_CopyTo_System_Int32_System_Char___System_Int32_System_Int32_
&gt;Nope, can't think of a single time I needed that. I almost wound up using it as part of the implementation of a crappy thread pool (the default thread pool has MTA threads, but I needed STA threads for certain WPF things). Ultimately, I decided against it (creating a new thread per call wasn't outrageous enough), but it would have been a decent fit for holding the threads in the pool since there's no inherent ordering to the threads. I do tend to use `ConcurrentQueue&lt;T&gt;` a lot more, though, via `BlockingCollection&lt;T&gt;`.
I recently build an api that uses jwt myself. Jwt "access" token should be given to you by the api via an api call, in my case it expires in 20 minutes. After the"expired token" the client needs to use "refresh token" to get a new "access token". In my case the refresh token is provided by the login api call. For the security purposes the jwt token has to be created by the api itself with a secret key, you shouldn't create it.
This is a thing that is _technically possible_ but should not be done, should not pass code review.
Mine doesn't expire but thanks for the knowledge
...yes but please don't do this if at all possible. &amp;#x200B; Implementing `IDisposable` and having two methods called `Dispose`, only one of which is actually used by the disposable pattern will generate confusion for other developers and lead to bugs.
Well the logic you changed causes an endless loop hence your program is freezing. I recommend back tracing your changes ! And sorry I didn't help that much. &amp;#x200B; Hope you find it and good luck
The comments are the best lines
Well it is not simple task. Problem 1: You would need to visit all pages. But you would also need storage for storing which pages you already visited. Eg. 2 pages might link to the same page and you don't want to run around in circle. Problem 2: Some sites don't like you snooping around. They will block you if you try to fetch all their pages at once. Because you fetching lot's of pages would put load on their site. &amp;#x200B; Problem 3: Some sites load dynamically. So page you get is just an empty shell before javascript is run. There are plenty of other issue you most likely would run into. Good luck :D
So this is cool, I'd never heard of SQLKata. Does it handle result object mapping too, like Dapper? I'm about to embark on a project at work where we're redoing our custom reporting engine and something like this could certainly cut down on the amount of query building we're doing.
I'm still astounded they picked "SqlKata" as a name. Kata is already an established term in the developer world and just saying "SQLKata" to someone sounds like you're talking about a practice exercise for developing SQL.
Mate 30 trillion is not a number to fuck with. If you can do 10000 pages per seconds (and you can't unless even with the best proxy bank of all time) that's still hundreds of years to execute...
One thing that worries me a bit with Blazor is that we're not hearing anything about improvements to the Web Assembly compiler. They are improving the components but what about the hardcore stuff? What about precompiling to wasm (we've heard that the size of the bundle grows but is this problem solvable?), what about pruning? What about some performance comparison with say React?
Yes, actually it uses Dapper for that. I used it for the same reason also, custom reporting and dashboard, You can use https://github.com/ahmad-moussawi/vertex (I built it also) that can help you in this case, to generate reports like https://imgur.com/rdDiuD4
To further put this into perspective, to be able to crawl 30 trillion pages in 1 day (86 400 seconds), you would need to process ~3.5*10^8 pages per second. That is 350 million pages per second!
I don't see how this line which is harder to read is better than the line with if.
It's mostly a matter of how much time you've got. Now, as much as I hate to say it, 10 medium PCs is beneath laughable. Estimates put Google's server farm between 200,000 and 500,000 servers. So, 30 trillion pages. Let's say you have one year to index the whole web. That's 3 trillion pages per computer per year. This means each computer would have to index over 95.000 pages per second. Do you see your medium spec'd computers capable of doing the following things in one second: launch 95.000 threads, read the responses, parse the responses (you want the text only, so you'd need to strip the html) and then save to the database. Them moving on to the next page. Now, back in 2016, the average size of the HTML (since this is what you're interested in) was 67KB. In order to fetch 95.000 pages, this means you'll need each computer to have a 6.35GB/s (or 50Gbps) connection. Per computer. This also means each computer would need to be able to process 6.35GB of information per second. So get the data, parse it and then apply your algorithm. And save it. Now, this is for a one year time frame. Extrapolate as needed. P.S.: some say google has 100 trillion pages indexed.
No it's not acceptable; but in Chrome's defense try using it without extensions...they tend to be the top offenders (nowadays, Chrome has been getting better in it's memory hog behavior recently). But you PROBABLY shut down your PC every day &amp;/ restart it at least once so they are less of an issue. Same goes with 'foreground apps' vs background services; as you \*see\* performance degradation you're more likely to kill &amp; restart.
Isn't that what namespaces are for? And why excessive use of "using" statements to import names into the local namespace is frowned on? (but, of course, I do it anyway.)
Running on what kind of hardware? I have probably a dozen extensions installed on an i5 machine with 16gb of ram and it probably takes 10 seconds to load.
Quota has functionality to merge duplicate questions into one and it's an unallayed nightmare with zero upside. Every remotely common question gets merged with, and subsequently submerged from, everything remotely related or even containing a few of the same words. The site's own bots then go in and undo a lot of these changes, even when the questions are verbatim identical.
After successful login your api returns jwt which is then being used by ur program to ask api To every request that requires being auth' dyou just add ``Authorization: Bearer &lt;Token&gt;``
&gt;The bad part here about EF is that you can’t access the full power of your database, and you are always searching huh? ain't there RawSql?
My code is already in its own name space. The problem is that people will probably want to use both my name space and the System.Collections.Generic namespace together in the same file. That is where they will most likely have some naming conflicts if I name my types the same. and I'm not saying anything is wrong with a bunch of using... But I'm also trying to make the code is easy to use as possible. Having to write all those extra using statements for alias is not user-friendly and beginner programmers often don't even know about alias.
[removed]
The thing is, if I don't care about order then a queue still works. Or I just use TPL Dataflow.
&gt; Mine doesn't expire Expiration adds an additional layer of security, as you are required to re-authenticate when it expires. &gt; I can just hard code my token in but then the program would only work on my current IP Help us understand why this would be, because that is pretty abnormal functionality, and has potential impacts on scalability of your application.
Go straight to https://github.com/sqlkata/querybuilder because examples in that blog posts are(actually is) terrible in compare to those on gh.
&gt; btw for whatever reason reddit doesnt do the real markdown for code with three tildes ``` That reason being that three tildes isn’t part of the original Markdown spec. Four spaces is.
 using Stack2&lt;T&gt; = Some.NameSpace.Stack&lt;T&gt;;
That doesn't appear to work. Alias does not support generic types.
Until you said this, I was going to spend the rest of the day thinking that’s exactly what it was. Not a great name choice
I get the token from the website, to get the token you need to give a public ip (so i gave myown). as far as i understand you need to get a new key for each IP adress, and since im doing client host (its a small school project) I wont know what the IP will be for the user
thats what i found online but Im not doing a login of any sort im using the COC game api ( [https://developer.clashofclans.com/#/](https://developer.clashofclans.com/#/) ) and you cant run get request without being autherized. I need to add the bearer token somewhere but I have no idea where I can read about this. I looked online but either I dont understand what I read or I cant find a clear example
I mean.. the first paragraph says it all. 🍏 != 🥧 and the title is click bait at best. This is more about writing more fluent (but not 100% fluent) queries. So at best its just a Dapper Helper. It is interesting but would be rather awesome if it used strongly typed bindings instead of magic string. Probably not the best product for an ever evolving business domain. EF - when used concisely (and for queries only) is rather great. The complexity only comes from SQL syntax being crap at handling complex queries.. compared to Cipher for example.
Is only harder to read until you see it a few times. This pattern will quickly begins 2nd nature. It's useful everywhere.
Get the token from the website (which you already did) and throw that in your app.config (or some other configuration that you have setup). Your service will just add "Authorize: Bearer &lt;Token&gt;" to every request. You do not request a JWT token through your service. You will literally be replicating the requests you do in postman but through C#.
can you give me a code line example?
No it is always harder because it is punctuation (instead of actual words) shoved between words and it is actually 2 symbols of punctuation and you can easily miss it.
Why do your versions of Stack, List, etc exist and how do they differ from System.Collections.Generic? Perhaps you could name them to reflect that difference? Like the Concurrent and Immutable versions of various collections.
I must be out of the loop, for like a decade then. I've never heard of the term kata
``` var httpClient = new HttpClient(); var myToken = "a;slkdfj12al;dk"; var request = new HttpRequestMessage(HttpMethod.Get, "http://www.example.com/endpoint"); request.Headers.Add("Authorization", $"Bearer {myToken}"); var response = await httpClient.SendAsync(request).ConfigureAwait(false); ```
Maintaining order don't come for free. Basically, Bag is better when order doesn't matter and Add() performance is really important.
You got a few answers her that will help you solve this. I'm just here to tell you:. The verb is "to authorize", with an o in the middle. Therefore the noun is "authorization".
They are intended to have the same functionality as the System.Collections.Generic counterparts. The reason they exist is to have a version of them that inherits from my interfaces. I have a base interface "IDataStructure" that I want all my data bases to inherit from. There are other interfaces such as "Data structure.IHashing" that can be used for further abstraction. Besides the interfacing, the main difference is that my structures use delegates. For example, my "Avltree" takes a delegate for comparing the generic type (so it knows how to sort the items. My "Omnitree" takes multiple delegates for locating items along multiple dimensions and subdividing and stuff. My List takes a delegate for equality comparisons of the generic type. My "Set" and "Map" take hashing functions for how to compute hash codes. All those delegates allow you to have multiple data structures of the same type that allow for different sorting techniques. You can have an AVL tree that sorts from least-to-greatest, greatest-to-least, distance-from-X, etc and the only thing you have to change is the delegate you pass in. You can have multiple Maps that use different hashing functions. I do plan on adding immutable and concurrent versions too, but I don't have those done yet.
Make that two decades :) https://en.wikipedia.org/wiki/Kata_(programming) &gt; A code kata is an exercise in programming which helps programmers hone their skills through practice and repetition. &gt; In ***1999***, the term was used by Dave Thomas, co-author of the book The Pragmatic Programmer,[1] in a bow to the Japanese concept of kata in the martial arts. The concept was implemented by Laurent Bossavit and Emmanuel Gaillot who talked about it at XP2005 in Sheffield (UK).[2] Following this conference, Robert C. Martin described the concept and initial usages in his article "The Programming Dojo".[3]
If you were going to have one or two implementations, maybe just List and Stack, then I’d say rename them to better show their intended differences between them and the originals. Based on what you said here, I’d name the namespace they live in to reflect those differences instead. I’m not quite sure on the intention behind passing delegates for the various functions but perhaps DeferredList or something like that?
`Posts.ToList()` is equivalent to `db.Query("Posts").Get()`, as you've said the point here is that you have more control over the generated SQL queries
In that case, you could just give your classes a prefix, like MyStack, MyList, etc.
https://flurl.io/ is your friend
"Deferred" wouldn't be the correct term in my case. But I do like your thinking. As for the delegates... The delegates just allow further customization of a data structure upon creation. For example... You can pass in a "capacity" into System.Collections.Generic.List&lt;T&gt;. That is a customization of the data structure on construction to change functionality (in that case improve performance). My data structures take it a step further. Not only does my List have a constructor with a "capacity" parameter but it also contains a "equate" parameter to allow customization of the equality check when you want to remove an item. My "Set" and "Map" do a similar thing with hashing. Their constructors allow you to pass in custom delegates so that you can modify the hashing function each structure is using. Customizing hashing functions can often lead to substantial performance improvements. The only way to alter hashing or equality checks done on the System.Collections.Generic data structures is to use a completely different type that has different overrides on the relative functions. That is incredibly slow to wrap types for different functionality (especially when wrapping primitive types).
I have definitely considered that. I don't like it, but it might be the best approach. The library is called "Towel" :) Any prefix sugguestions? :D I could just use "T" for Towel: ITStack, TStackArray, TStackLinked, ITSet, ITAvltree, TAvltreeLinked, etc. Not ideal, but possible the best compromise
So what does this do that Dapper doesn’t?
I agree. Maybe CustomList or EqualityList or something more along those lines. I like the concept, especially for the equality predicate. But I feel like there are existing ways to achieve this functionality that would be clearer to other developers. For example, using LINQ’s First(predicate) and Remove that? Or simply List.RemoveAll? This all depends on your code base tbh. Is this intended to be used in the hot path? Is it an enterprise application that others have to maintain and so on?
&gt; Immutability and Single Source of Truth. This is a good reason. No doubt. Is there a reason why you can't declare something `readonly` in C#? That has the same effect, yeah? &gt; Discriminated Unions. Ok, I'll give you this. Discriminated Unions should probably already be in C#. Not sure why they're not. I see that there are some packages in NuGet which can enable this is C# as an add-on. &gt; my codebase was made by people who don't know what that anti pattern is Oh, well, that's a completely different problem... :) &gt; Re: F# So I spent a bunch of time brushing up on F# last night and it really rubbed me the wrong way while I was reading it. And it took me a really long time to figure out what bothered me about the language. Finally a couple things clicked -- these are pain points for me: * Non-obvious sigils: `|&gt;`, `;` (instead of `,`), `@`, `| x -&gt; y`,`[]` (for list), `::`, `'a`, etc. * Brevity (to a fault) The "non-obvious" sigils bother me. They don't read like English. I can't remember what Perl's sigils mean. I code in Python3 every day and I still confuse the few sigils that Python has. F#'s sigils are just plain un-obvious. In contrast, C# has almost zero non-obvious sigils. In fact, well-written C# reads distinctly like English. Well-written F# does not really read like English. It reads... well, it's hard to read... Which leads to "brevity". F# seems too concise for me. (which some seem to think is an advantage.) Or rather a lot of things are implied in the language. So you have to know and have faith that things are really happening the way they should be. C# is appropriately verbose in contrast. Things are more explicit, but you can still fall back to more implicit if you need to. Some argue that shorter code is better code and arguably, it makes sense. But sometimes code that is too short can be tough to understand. And now you're making mistakes because your code is unclear because it is too short. Anyway, those are the 2 pain points for me with F#. The article I was reading about kept pointing out "curly braces" `{` `}` as being `noisy` which I agree with mildly. I don't miss them one bit in Python. Still, I sat for a minute and thought why they don't really bother me in C#. And then I realized again that I like them because it is abundantly clear where the scope starts and ends. That just isn't obvious to me in F#. Well, that's it for me. I doubt I'll ever pick up F#. It seems that I'll just trip over the language more than it will help me. And that's just how it is. What's helpful to one programmer can be a mild annoyance to another and a major hindrance to the next. Anyway, I see why you like F#. It clearly saves you from certain C# pains. Maybe one day I'll pick up F#... :)
Wait, iOS only allows you to build web browsers that only inherit from Safari. How did you make your own? Do you mean that you implemented the web browser and have a cloud sync wrapper? So, there are a ton of things to take into consideration. But let's start at the very top and work towards the bottom. 1. The map of the internet. You are going to either need to borrow a sitemap database or build your own. 2. Then we need to access each of these websites, and it needs to be questioned if you are going to let your bots render javascript or not. Many websites dont load unless js is enabled and without it you will not get context of what the website is. But this will increase load times. 3. Talking about load times, how long do you plan to let each page load for before you move on? 5-10 seconds? If at 10 seconds (and assuming all sites take 10 seconds) you are looking at ~3.5 billion days to process (atleast on a single thread) 4. How big of a farm can you utilize. I imagine Youll want to spider for changes every 24 hours. So lets assume that timeframe to figure out needs. Lets build out this system so each system can run 2 threads. Currently you would need 72,337,962 VM's to process all of this data in 24 hours (Obviously this can be optimized greatly, but I still imagine the cost would be upwards of $50,000 a day minimum) 5. Now that you've processed the data, that data needs to be stored. 6. Then when the data gets stored you need a way to access it quickly, so... NoSQL? Hadoop? Google Big Table/Big Query. Overall, I think you can handle storing the data. But not processing it or accessing it once it is processed. And I dont mean to dash your dreams or anything, but the meaning of the website is easy. That's meta information and there are a ton of AI systems that can gather that info, and both google and bing utilize them to customize search to context. What are you going to gain by doing this?
May also be of interest: https://github.com/vivainio/SqlFrags (the project formerly known as Fapper)
https://marketplace.visualstudio.com/items?itemName=DimitriDering.Funnel
It's a kinda-fluent query builder API.
Cool!
What you’re looking to do is so far beyond the scope of a Reddit post it’s near laughable. 10 medium spec’d PCs is nothing. You’ll need a server farm of 50k to get started? Otherwise you’re looking at years.
You don't need to understand the types being passed around as explicitly in javascript, and inspecting types is typically easier since they are usually simple objects. It is also less ceremony with javascript. Not everything needs to be a class, and functional first styles are fluidly supported, and encouraged by the community. As big as the js ecosystem is, you usually only need to know a handful of libraries, and if you ever find one to your disliking, it's not as big a deal to use another one unlike deciding to bring in a third party dep over using .Net, since for most things you are already using a third party dep. I like both C# and javascript for different reasons, but C# is usually bringing additional complexity to the table compared to javascript. That complexity can be appropriate or not for the project, and with typscript, a lot of that benefit that I would have ascribed to C# is available in javascript.
Most likely not, but have you *tried* it?
I would argue that you need MORE understanding of the types in JS since there is nobody to guide you if you get them wrong. Certainly my work with JS takes more time precisely because I have to go and read actual docs to do anything. However this and the ceremony do not affect the learning curve of the ecosystem which was the thing discussed here.
Yeah, I was just mentioning because I feel it is related. :)
The punctuation is twice the height of a lowercase character, so its pretty easy to see imo
It looks psychotic in this isolated example, but there are cases where it could make sense. There could be multiple interfaces that require very different methods which happen to have the same name. In that case, the only way to implement that properly is explicit interface implementation.
What a good write-up. I wish we could see more posts like this in here.
That's like the people that complain about tertiary operators. If that's hard to read, find a new job.
Certainly not as easy as an if block and still punctuation. I only prefer this syntax when chaining things.
&gt; If that's hard to read, find a new job. Why? I produce software people find value in so they pay me. Also how about this - if the if statement is hard to read you find a new job :)
Towel? I think each of your collections should be named after something from the Hitchhiker's Guide To The Galaxy.
Why would you change the name? 🤣
Nope, comments are not kept when compiling code in IL
&gt; Problem 1: You would need to visit all pages. But you would also need storage for storing which pages you already visited. ***Partial solution to the problem.*** Crawling will happen in cycles. Every cycle will index the same part of the web (as far as it can reach from the same starting locations) It will never visit the same page twice. &gt;Problem 1a All visited URLs will be grouped in hosts so it doesn't take too much time to check if a web page has been visited before. For example, if the new URL to crawl is "[reddit.com/something](https://reddit.com/r/csharp/something)" it will only look inside the group of "[reddit.com](https://reddit.com/r/csharp/something)". Crawling will prioritize discovering new hosts ("[reddit.com](https://reddit.com)", "[youtube.com](https://youtube.com)", ...) over indexing their sub-pages. This means eventually I will have the fronts pages of the entire web indexed and I will only need to index a hundred sub-pages for every host. &gt;Problem 1b This implies that all URLs need to be stored and processed with a program like LMDB. u/mtranda &gt;some say google has 100 trillion pages indexed. 100 trillion URLs with an average of 128 characters per URL is: 100\*10\^12\*128 bytes = \~12 pettabytes of data. 100 trillion pages is: 100\*10\^12\*1KB = \~91 pettabytes of data. \~103 pettabytes overall. If I only need a hundred pages out of every host and there are 332.4M available hosts: 100 \* 332.4M = 33.24 billion pages 33.24 billion URLs with an average of 128 characters per URL is: 33.24\*10\^9\*128 bytes = \~4 terrabytes of data. 33.24 billion pages is: 33.24\*10\^9\*1KB = \~31 terrabytes of data. \~35 terrabytes overall. \- - - - - - - - - - - - - - - - - &gt;Problem 2: Some sites don't like you snooping around. They will block you if you try to fetch all their pages at once. Because you fetching lot's of pages would put load on their site. ***Complete solution to the problem.*** These websites might be other search engines (like product price comparison engines) that aren't needed or valid websites with valid content. If I'm denied access to the content of a host like "[pricespy.co.uk](https://bestprice.co.uk)" I will at least be able to know and store the *meaning* of its front page (and other sub-pages until I'm banned) from which I can extract the meaning of what this website is about. This applies to both wanted and unwanted websites. The fact I will not know the content of [pricespy.co.uk](https://pricespy.co.uk) is desirable. What is undesirable is that I will not know the content of all the servers that have explicitly asked (by preventing crawling) to stay unknown. I can view this as a rule to follow rather than a problem to solve. \- - - - - - - - - - - - - - - - - &gt;Problem 3: Some sites load dynamically. So page you get is just an empty shell before javascript is run. ***Complete solution to the problem.*** I will only store text so I will only lose the text javascript will reveal. The text might be a lot less than other hidden components like graphics and video. I'm sure the relationships contained within the lost text (the *meaning* of the text) will be in some other website on the web. I will lose some text eventually but not a lot of *meaning*. \- - - - - - - - - - - - - - - - - u/cakeofzerg &gt;Problem 4: If you can do 10000 pages per seconds (and you can't unless even with the best proxy bank of all time) that's still hundreds of years to execute... ***Partial solution to the problem.*** I will only index 100 pages of every server out of 332.4M servers. 33.24 billion pages. 10,000 pages per second. 33.24\*10\^9 /10\*10\^3 = 3.324\*10\^6 seconds for all indexing to finish. 3.324\*10\^6 seconds = \~39 days which is \~6 weeks. u/mtranda **How many pages per second can I fetch with this machine?** * R5 2600 6C/12T @ 4.0Ghz * 2x8GB DDR4-3000Mhz RAM * Crucial 500GB SSD (\~550Mb/s read/write) * 200Mbps (25Mb/s) fiber internet connection.
It's not hard to read it's just more verbose than needed. It's also introduces avenues for potential later bugs during a refactor due to the conditional.
So you're saying it's possible? ;)
Exactly. I expect instant.
My rule is to not put anything that needs to be disposed into the DI system. Instead, inject thread safe factories and employ `using` blocks as God and Anderson intended. Benefits: * Easier to test, because you don't have to drag your DI into the test project to manage object life cycles * Better performance by more efficiently sharing resources instead of holding them for the duration of the call * More reliable, because now your static analysis tools can detect objects that were not disposed. * Easier to reason about because you can just see when objects acquire and release resources. As opposed to trying to figure out what the DI framework is doing behind the scenes.
Even though nothing fires up instantly?
Well I’m currently sitting in a body shop getting my car looked at so I’m not in front of a computer, but the question has been bothering me. Sorry to take up 30 seconds of your valuable time
Thank you!
If you are only looking at the "source code" of a url (Im assuming you are meaning the source code of the webpage behind the url...) then you will likely miss a significant amount of information from websites, we live in a js time. (I've built a ton of scrappers in the past years, and even have a web series on them) Looking at your specs, lets assuming your computer can endlessly stream website data. 25Mb/s. Let's even assume all websites are somehow 10kb. You can stream 25,600 kb per second. 2,560 pages per second. At 100 trillion pages, 452,112 days to process.
Well there is a very useful thing with F# that a c# readonly field can't do. That is, in F# we use records to represent State. A record has the With operator that allows you to copy it while only changing that one field. The important part is that it's an edited copy. C# has no support for this, you'd have to be careful and it would be painful to implement this pattern. With F# records you get the Object programming with members of an object with the added immutability from the fact that every change to that object is made on basically a new instance of that object.
Interesting note, just because I saw something about a price comparison engine. I'm the creator of Textbookly.com, (a textbook price comparison engine), and my countermeasure towards scrapers is to allow them... But when I detect them I randomize my prices completely to give them horrifically bad data. And start mixing in swear words.
Because the conditional operator doesn't have a conditional in it :)
or ~5 months for 0.03324 trillion pages which is my current goal.
As for the sigils part, maybe you find them weird, but at the same time they are somewhat unique to functional programming. The [ ] for lists thing is the same as python. And well, in a sense it behaves a lot more like the C# arrays than you might realise. The list in F# is immutable, of fixed length, which is a lot closer to a C# array than to a list. The Pipe operator |&gt; and Composition operator &gt;&gt; is a pretty radical thing to see if you've never done functional programming. But trust me they are pretty common to anyone who has done functional programming. It's there to save on Parenthese clutter and on let x = declarations. You know how in Linq you get this nice flow of chaining functions together to represent clearly what you're doing? Like list.Select().Where().OrderBy(). Imagine instead you had to write OrderBy( Where(Select ( list))). You break the flow of reading. The first operation is rightmost, contrary to how we read and write. Pipe operators allow you to do just that: preserve order of operation and order of writing.
Writing code at all introduces avenues for later bugs. If a refactor creates bugs, that a *regression* caused by the person refactoring.
Jeebus I weep for your employer
If I come across a link to your website "http://textbookly.com/..." initially I will enter from the front page "textbookly.com" as I should. This happens for every URL to a new host. The fact that you describe with text that you can "Search for your textbook..." will be understood and "textbookly.com" will be indexed as a search engine. I will not crawl any other page but the products you have on your front page which are correctly labeled but they won't have much of a value. The fact that "textbookly.com" is a "textbook by title, ISBN, other" search engine will have the most value.
.Shit like this has had numerous studies. If blocks without braces are a HUGE source of mistakes in refactors. Some people have actually put thought into this.
Better weep for the poor programmers who I indoctrinate in using words instead of punctuation by being the one to choose the coding standards on the projects they work on :)
Would this be an issue if you used .AddScoped()?
Depending on your needs that could be sufficient. However I will say that I have over 500,000 pages indexed with google and bing that they find contextually relevant based on over 750,000 keywords. Granted if your goal is just to get the index of each website, that might be fine.
Whats your current data processing rate on each page? If you dont have that yet, any chance you could get HTMLAgilityPack up then run your code against a single websites source so we can get a base?
Yeah happened both with AddScoped and AddTransient with no singletons.
Just a T makes it look like a generic type parameter. I would prefix them all with Towel - that’s how other libraries I’ve used have handled this. And the code creating a TowelStack&lt;&gt; looks fine.
Um PEOPLE are the largest source of mistakes period. Also unnecessary refactoring is practically a sin.
Deliberately obtuse. Got it
Deliberately *obnoxious*. Got it. Unless you take the people out of it bugs are almost a guarantee and *readability* is crucial for humans. I'm not intrinsically against tertiary operators, but replacing every if statement with them is a bad idea.
Absolutely true and it's a scenario worth mentioning, but generally if you see a `Dispose` method in C# then you're expecting the class to also implement `IDisposable` so it conforms to the pattern. If it's not using that pattern then it's good advice to stay away from naming your method `Dispose` as it'll just cause unnecessary confusion.
You keep I misrepresenting what I’ve said and done nothing but spew uneducated nonsense so yeah I’m gonna get obnoxious with you.
I feel stupid after reading this post
We all had to learn this stuff at some point. What parts are losing you?
Why is it a good write up? OP never determined what their actual problem was and just threw some tangentially related stuff at the wall until something stuck enough for things to not break constantly. "I had a memory leak so I tried changing IoC container libraries." That's not very insightful or helpful.
In 2008, I was tasked with standardising a desktop software application that had an excel front-end. The goal was to make it professional enough to sell to a second customer. I took three weeks to build three prototypes, one week each: C++ with Qt, Java with Swing and C# with WPF. Despite having experience in Java and C++, the WPF application was the furthest along at the end of the week. Since we were targeting windows, there was no incentive to go x-play with Java. So I made the call to go with WPF/C# and took another 2 months to finish and polish the application. The base code is still running over 10 years later and we have gained a dominant position in our small market with the program. No regrets there. I do like C#. I’d be fine going back to another language if I was asked to, though. Programming and software architecture is more about a way of thought and expression than about the language used to express it.
yeah, I meant doing that _and_ calling the method "Dispose". I would insist on a rename.
We have an old application written in C# using Visual Studio 2008 that uses [Spring.Net](https://Spring.Net) for dependency injection. Most of our projects are small enough that it's not critical that we don't use DI, but it's something we should know about. A search for the Microsoft package led me to the NuGet page, but it has no documentation Could you point me to a good modern article on DI, why it is helpful, and how to use Microsoft.Extensions.DependencyInjection?
Agreed. Either that or use scoping. Otherwise how should the DI know when to dispose?
No need to remove 2017, they both can work side-by-side. You can download VS2019 from https://visualstudio.microsoft.com/downloads/
I can mistake but when object injected as transient or scoped it should implement idisposable so di can take care of it when its lifecycle ends
There are tons of good articles online, some detailing that package specifically. I don't have any good references off hand, but the most important aspect of DI is that, when used with interfaces, it forces you to structure your code in a testable fashion. This means you can easily write unit tests that inject mocks, which let's you isolate the code under test and ensure your testing is focused on the code you mean to test and that bugs in dependencies don't make your tests fail incorrectly. It also makes it easier to write functional/integration tests, where you can mock out 3rd party services you may consume but keep the rest of your code working.
Completely agree with this. Find it rather longwinded and not very specific at all.
* If you want something disposed after a request, use `RegisterForDispose`. * I’m not sure what injecting `HttpContext` was supposed to accomplish. You already get that for free, and it sounds like you were holding on to it in a context where it didn’t really apply. Anyway, without code (particularly on how your routing to WordPress worked, which you say isn’t important, but sounds central to the issue), it’s hard to comment.
Just wondering, so the problem is 100% caused by the 404 thing with Application_EndRequest? Is your website served over http**s**? We use nginx to serve our https content and it reaches our asp.net server using proxy_pass. It's pretty easy to say if the result is 404 try looking elsewhere. It was a bit of a surprise to me to hear you're doing it in asp.net
Not sure if you caught that I'm not using .NET core so no, you don't get IHttpContextAccessor for free, and unless I'm missing it you don't get RegisterForDispose with Microsoft.Extensions.DependencyInjection
you don't need to actually see the **?** because it doesn't really change the code behaviour. So it can't be harder to read, because you just don't read. &amp;#x200B; if on the other hand requires you to look at the condition just in case there is some custom logic. So now you have to read more with 0 profit
You must be fun at parties. I had a hard time finding a lot of documentation on Microsoft.Extensions.DependencyInjection since most google searches lead to .net core DI. So even if this isn't the silver bullet maybe this post gets indexed and someone in my position doing something similar finds it somewhat useful. Or maybe someone with a similar experience replies with how they solved it.
They mention it a bit [toward the end](https://www.youtube.com/watch?v=ap60h3eQE5Y&amp;t=1h17m48s). basically, their recent work on AOT include compiling parts of the framework to wasm rather than IL, and a "mixed mode" able to work with both AOT wasm &amp; "raw" IL. I agree though, it's been a bit hush-hush... Can't wait for Build to get a better idea where things are.
Sublime text does.
I use it daily and it does not load instantly.
I made this tool for our game [Logic World](https://logicworld.net/). We use it to store user settings, save file information, localization data, and game data (i.e. the list of the building blocks is SUCC).
It's hard to say because I made both fixes at once. What I could have done was get all that stuff out of EndRequest and into a controller action before bringing in autofac to see if that fixed it. Just read about proxy_pass it sounds interesting. We are using https only and redirecting non SSL traffic to it. To explain the wordpress stuff a little bit more, we have the same header/footer/css/js/etc. on both sites. If a request comes in that would normally serve a 404, in endrequest make a request to the wordpress site using the same url with a querystring param to disable the header and footer. If it comes back as a 404, then serve a 404, otherwise cache it (both in memory and in our database in case the WP site goes down or something) and serve it. Since we have the urls in our database from the WP sitemap I changed it to just add those urls to the routes and sort of whitelist the urls. Makes serving 404 pages a lot more efficient, the only drawback is the sitemap has to be refreshed more often to get new content.
No. Comments are stripped during the compilation process. Comments are just added waste. If you want to retain information on par with comments then look into attributes and defining your own.
It's supposed to, but there are complications such as the order linked objects are disposed.
No, not by today’s standards at least. Sounds like you packed all of your code inside of a single executable which for me, I don’t recommend. I recommend breaking up the code by splitting up certain things into DLL’s which makes updating easier for larger applications. And instead of embedded information, use a DLL or create a type of JAR/cache like file, it can be as easy as an encrypted ZIP file. Or just put your resources into a separate folder like Microsoft does.
i would suggest installing visual studio 2019 and opening your favorite solution on it. At a later point in time you may or may not choose to uninstall visual studio 2017.
Is this XML with extra steps?
pretty much
Aight. You do you, you crazy thang!
Nice, but *way* too many magic strings...
Perhaps he meant HttpContext.Current (see https://docs.microsoft.com/en-us/dotnet/api/system.web.httpcontext.current?view=netframework-4.7.2) which gives you the HttpContext for the current request in .NET Framework?
Wait until the bleeding edge dulls a bit. . .
If you use a library like RestSharp it'll be easy to add the JWT to the header.
Keep in mind that finding a script != understanding the script. Critical when you want to combine or keep your systems extensible! You'll also start running into "google didn't have my answer" problems less often, because you will understand the problem on a deeper level, and be able to use appropriate search terms to find what you're looking for. Good luck, and glad you solved your issue.
I don't want to be the "stop wanting to do that" guy, but I'd be interested to know what your ultimate aim is - there are a lot of ways to skin this particular cat.
Seems like JSON would work just as well, as it doesn't have all the decorations of XML and there are libraries and serialize and deserialize into typed objects already
&gt; Why do people always use this argument? It's plain bs. start time is a relevant thing, especially if an IDE can be buggy and prone to crash. I've had several build systems that crashed under VS2015 or even Jetbrains. &gt; The time to open a project stands in no relation to how much time it saves by offering all the help it does. Depends on where the help is. If it's formatting and documentation, there are other ways to get it- plugins exist for both sublimetext and vim. &gt; Sure, first start costs you about 5s, but afterwards you save hundreds of hours by NOT going to docs.microsoft.com to look up function definitions and do straight "go do definition, yes i want to decompile" It's a lot more than 5s (and happens more than once) and there are many things that aren't handled in an IDE that could be handled in, say, a virtual machine or subsystem command line. In fact, I can use normal text editors to handle dependencies as well. Lastly, the complexity of most IDE's can have them be prone to crashing. &gt; For a simple Program.cs with Hello World - any texteditor would be ok. But as soon as you do multiple classes, deeper project structures, you will miss the included CTRL+T search and other very useful stuff. Perhaps it is an inevitability on some projects, but for almost everything I build it's easier to use command line/build server/linux/some doped up text editor. Sublime Text pops up instantly, it looks good and it has all the plug ins I need. It does even have autocomplete and search functions- as does linux subsystem. Even at work, where we license VS2017 I use notepad when I can.
Core is the cross platform, beautified version of framework. And to harp on what pretty much everyone else is saying, Framework from here on out will be used in legacy applications. The two entities are crazy similar to one another, so things will make sense to you if you get into anything that utilizes Framework. But, I strongly suggest that you stick with Core, for most applications will be updated in some way to Core, if not already, in the near future.
I do not like how JSON is formatted using curly brackets and commas. It is very, very easy to forget to add one of those things and then end up with a parsing error. In contrast, SUCC is formatted using line breaks and whitespace. This is much nicer because the formatting of the file is very visual. It is obvious from a glance how the data of the file is laid out, and it is obvious from a glance if there are any formatting errors. Furthermore, JSON does not have support for comments.
I've been using it since release with no problems yet.
Same. Except I had to go back to 2017 to modify a Crystal Report.
If it didn't need reading it wouldn't be in the code.
how the hell does a 'ConsoleApp5' make it into "production", with this kind of mistake
it's no surprise you got downvoted and removed on SO. this is a dumb SO post and reddit post. how a "ConsoleApp5" made into production is insane to begin with.
What about YAML, TOML, INI, etc? Why did we [xkcd](https://xkcd.com/927/) ourselves into another config file format?
i know right. a fucking "ConsoleApp5" is in "Production". with a dumb mistake he want's us to figure out, with very little information. who the hell upvotes this shit? must be students b/c this is so retarded. at least its neg voted on SO.
Don’t worry I understand de script
you almost never read every single piece of code to understand it. also don't forget my "last point", as it is not opinion based.
I tried about half a dozen YAML libraries for C#, but none of them had an API as simple as I wanted one. Initially I actually planned to make my own YAML library, but then I looked at the [YAML spec](https://yaml.org/spec/1.2/spec.html). I don't even have time to *read* a document that long, much less implement each and every standard in it. I just don't like TOML that much, deeply nested data structures look very confusing and are hard to write/edit. Same deal with INI. I would agree with you about competing standards if this was a tightly-standardized markup language that was meant to be used by many different programs, each sharing text data with one another. But SUCC is not intended to be used for that; it is purely for local configuration files. Furthermore, SUCC contains many specialized features that no other markup language does. The most notable of these is [shortcuts](https://github.com/JimmyCushnie/SUCC/wiki/Complex-Type-Shortcuts).
I feel like I like this approach the best. OP is taking commonly used classes and slightly altering them for compatibility with his/her application. So in that case TowelStack and TowelList both convey the meaning that both classes are application specific variants.
Try (manually) walking through your program withthe code 112, and guess 123. Especially this bit: Array.Sort(code); Array.Sort(guessCode); for (int i= 0; i&lt;code.Length-1;i++){ if (guessCode[i] == code[i]){ numberCounter++; code[i] = 10; } }
As for problem 1: check for a robots.txt file so you don’t piss off anyone.
It's a Stack. What does your stack offer over the .Net Stack? &amp;#x200B; If it offers nothing, use the built in stack. Otherwise figure out a type name that extends Stack to explain why it's better. &amp;#x200B; Remember Dictionary? There's a ConcurrentDictionary. &amp;#x200B; They didn't just use Dictionary twice but in two different namespaces.
I should have read the comments before going on my usual rant about conflicting type names :) Well said.
It didn't. That was just a tool to prove that List could throw that particular exception. Are you really so stupid that you can't tell the difference between production code and a sample designed to fail?
No. They're not there to correct the bad decisions made by imbeciles. &amp;#x200B; ;) &amp;#x200B; The trouble with using namespaces is that at some point you're going to end up with code that uses both types. So you have to use aliases or fully qualify the name. Code conventions are already hard to enforce, and this is one of the harder ones to enforce. It's way too easy to end up with code that won't compile in this situation. It's an avoidable time cost. &amp;#x200B; Tests will catch it, but why are you spending dev time figuring out a problem that could have been avoided by naming the type something related to the domain?
Hey idiot, that means **your** reputation on stack overflow is too low to allow **your** votes to count. The question only has a - 3 and the answer is at +6.
Well presumably we're discussing the case where the code has the same effect. Otherwise what is the point of comparing?
If not solved before tomorrow evening , im able to help ! :D
I'm a C# beginner that's building an API for a side project in dotnet core. Do you have any simple examples of this kinda setup in a controller?
one codestyle covers both usecases, the other doesn't. Why bother mixing both if you can use just one?
Why complicate things if writing SQL is the purpose? Writing a SQL like this Query&lt;T&gt;("SELECT A, B, C FROM Table"); for me is much more in control over this. new Query("Table").Select("A", "B", "C"); So, I personally rather choose the MethodCall(s) over fluent builder like this. But overall, it is still a good stuff and keep it up!
This is a good point. I'll think about changing my habits for this reason although I don't think I ever encounter the multithreaded issue probably because I program mostly web.
When I use my own ORM, Tortuga Chain, the "data source" is inherently thread safe so I just create one scoped for the lifetime of the application. For EF, just create a "factory" class that has a method that returns a new DBContext.
Another approach if you need it to be more dynamic is rather than registering all the landing page routes on startup you can create and add a RouteConstraint to your final route (that would normally point to 404 action. Within the constraint you could access a cached list of URLs and determine if the match is valid on every request.
I am pretty sure you should use dot net core di moving forward. Just like entity framework core is now recommended no matter if you use .net framework or core.
You ask the user for input. Convert input to int. Use a for loop to run as many times as the user said. Add up the 2 dice numbers and write it out.
Fixed.
If you are allowed to use higher level libraries, I would suggest looking at what [HashSet](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=netframework-4.7.2) can do for you.
ONE?
To be fair I can't think of anything that makes delegates superior to Java's approach of using SAM types. Granted that Java started doing this more than half a decade after C# got LINQ
Yeah. I don't see a scenario where you should be able to access the current HttpContext but can't, no matter whether this is Core or Classic.
Yeah, that's a slightly dated assertion.
&gt; The [ ] for lists thing is the same as python. And well, in a sense it behaves a lot more like the C# arrays than you might realise. The list in F# is immutable, of fixed length, which is a lot closer to a C# array than to a list. This is exactly what I mean by lots of implicit wizardry with F#. You tell me first it's a List, but then later, say, oh, It's really an Array. I guess there's just a learning curve to any language. But it's the implied stuff that's non-obvious that bothers me. In C# there's Array, ArrayList, and List. Array, obvious that it is immutable. List, obvious that it is mutable. And the `[]` are for one purpose: denoting index. Operator overloading is great for something like, say, the plus sign `+`. Whether float, or int, or sets, or concatenation. It kinda means the same. `[0]` means `List` containing a zero in one context and `[0]` means first index of something in another context? Whoa. Confusing. (I'm complaining about Python in this situation.) &gt; if you've never done functional programming. Lisp (well, Scheme). ML-variants are all much nicer to look at than anything Lisp. Don't get me wrong, I'm always grateful I learned a Functional language early on in my career. &gt; like list.Select().Where().OrderBy(). Imagine instead you had to write OrderBy( Where(Select ( list))) Oh yeah, that would suck. Agreed. I still prefer this syntax: var query = from x in list where x == foo orderby select x; Easily readable. Easily understandable. (and no curly braces) ^^^Wish ^^^everyday ^^^that ^^^Python ^^^had ^^^this ^^^native ^^^syntax Well, anyway, thanks for your reply. I'll keep your points in mind. I'm still thinking about Indiscriminate Unions. That's super useful.
&gt; You must be fun at parties. That's really not the point. You made several poor design decisions, find out that there's a memory leak, and then wonder if the framework is to blame. It's certainly _possible_ that something about Microsoft.Extensions.DependencyInjection wasn't cleaning up properly (in which case the move to Autofac would've presumably fixed it), but it's also possible that you holding on to HttpContext instances for too long (for reasons you aren't explaining), or you doing weird stuff with the WordPress interop (which you aren't getting into either) are to blame. Or a combination of those. Either way, we don't know, because there's just not a lot of info to go on.
This is the correct answer. Just install it side by side with 17.
They say that the only programming languages people bitch about are the ones that actually get used. By that metric, Java is king. Being real, most of the success of .Net is based off of cribbing what Java did right, and then being more agile about fixing what they were doing wrong. Even among programming languages, both are essentially the same tool, and can 100% do the same job. But, .Net is the Oxo Good Grip version: somebody gave a crap about the ergonomics for the user, rather than just the job the tool was meant to do.
If life there are two choices: 1. Belittle OP 2. Move on The internet has let me see how many people really like belittling their fellow humans.
&gt;By that metric, Java is king. Script
By default in VS 2017 and VS 2019 you can use CTRL RR (double tab the 'r' key twice) To rename a property or variable throughout the entire project. I too am having an issue with VS 2019 renaming. It is trying to change like .g sub-files associated with my files. I had to go into VS 2017 rename there and then it worked fine.
 public int Add(int x, int y) { return x + y; } vs. let add x y = x + y Which one do you think looks more alien to the average person?
&gt; It’s days like today where I am so grateful that .NET programming is relatively easy to setup and get going with ONE FRAMEWORK. Oh *that’s* where the name **Mono** comes from. (There was never really a time with just one framework, since Mono appeared rather early. Then offshoots like Silverlight did. And now, of course, we have Core. Which can’t quite do it all yet, nor can Framework, nor can Mono. So until Core does WPF and WinForms — coming relatively soon — and Xamarin and WASM — barely even in the plans, best as I can tell — and whatever else, we’ll be stuck with not… exactly one.)
It's hard to take this kind of thing seriously unless you make some attempt to acknowledge the basic psychological reality we all operate in - we tend to have knee-jerk reactions to new things and then rationalize our conclusions after the fact. Why should we assume anything other than that is going on here?
Rust belongs to a different niche, yes, but C# and F# are fighting over exactly the same territory.
/r/TIHI too many magic strings. Why not just write sql?
The advantage of doing this is that you can have specific configurations that aren't bound to the default initialization. If you, for example, had to do some work in the background that required lazy loading, you could just put that into a factory method, and turn it off for your API controllers in the DI factory. I've done this with great success in the past. It kept all the initialization logic neatly in a single place.
You can use a list for guess code. For each code[i] check if code[i] is inside the list if it is, remove code[i] from list and increase the count. Or you can count the number of 1, 2, ... , 5 for code and guess code, take the absolute difference between each, sum them up and subtract it from the length of the code
The big kid on the block seems to be AutoFac. I've used Ninject as well, but I don't think it's receiving additional support or updates.
Ah I see what you're saying. Yeah it was just to avoid having HttpContext.Current hard-coded everywhere.
Yes this is exactly what I tried at first but for some reason I couldn't get a catch all route working, but this sounds like a perfectly reasonable solution.
Why do so many c# web projects I see need to be recycled so much and leak memory like no tomorrow, are there some broken api that everyone gets it wrong so much?
&gt; It's days like today where I am so grateful that .NET programming is relatively easy to setup and get going with ONE FRAMEWORK. Yes, the one *true* framework. .NET Core
I've also recently gone back to Java, in particular for Android. The one feature that Android Studio has that I'd love in VS is a "tip of the day" that tells you about a random IDE feature or shortcut.
I hope my post didn't come across like I was blaming the framework, I'm almost positive it was the bad design of accessing dependencies in EndRequest directly through the resolver which probably was throwing a wrench into whatever teardown would normally go on automatically at that part in the request pipeline. I just really appreciate the documentation and error messages that Autofac gives. And that they have a good solution for the traditional static bad actors like HttpContext.Current that don't normally play well with DI. I mean a huge part of .net core takes away this kind of ambiguity by having DI/middleware set up by default and facilities like IHttpClientFactory and IHttpContextAccessor where in MVC5 I feel like there's more opportunity to shoot yourself in the foot like I did here.
Something I learned about just today is that C# 8.0 will get `using` declarations. A `using` declaration keeps the object alive while it is still in scope. Once the object goes out of scope, it is automatically disposed, so you could rewrite it as: `using var reader = new Foo();` That’s pretty nifty, I would say.
&gt; .NET programming is relatively easy to setup and get going with ONE FRAMEWORK. Are you talking about .Net Framework, .Net Core, CoreRT, UWP, Mono, Xamarin or Unity?
Ahh thanks for the new shortcut. I always used f2 which has been around since the original visual studio (vb6) days
&gt; They say that the only programming languages people bitch about are the ones that actually get used. This is nonsense. How much people complain about a language is a function of its popularity, but also a function of how bad it is. For example, I think complain much more about PHP than about Python, even though Python is more popular. &gt; can 100% do the same job Which major game engine is based on Java?
If you're writing a reporting engine, you either mix your business logic and your SQL query writing in together, or you come up with some abstraction around columns, where clauses, extra joins, etc. This is an off-the-shelf abstraction.
Huh, I thought it came from the Spanish word for monkey, because it mimics .NET like a monkey mimics a human...
It sounds in the video like they are ready for blazor 1.0 rc with improvements to webassembly and it upgraded to an actual project.
Removed: Rule 3.
Removed: Rule 4.
Just tell us what it does
One is all and all is one
Removed: Rule 4. Please include a description of the issue and the current vs desired behaviour.
I wasn’t being serious :)
console.writeline()
Ironic to me. The thing I miss most about java is the eco system around it.
It’s not clear to me why you didn’t go with YAML, given how similar it looks. &gt; SUCC is not intended to be used for that; it is purely for local configuration files. Right, and now, when you open one of those in your favorite text editor, there won’t be any language recognition. No syntax highlighting; no syntax error warnings. I think you should reconsider and not reinvent this wheel.
&gt; The installer/updater from VS 2017 doesn’t seem to be picking up 2019 Are you sure you’re not seeing it in a tab labeled **Available**?
After filling an internal issue with the Xamarin team, they advised doing the following \&gt; adding \*\*--linksdkonly\*\* to the Additional mtouch arguments on the iOS Build settings page As it seems that \*\*Visual Studio\*\* ignores the settings in GUI &amp;#x200B; I have tested it and now get my build accepted by Apple without the above error
How do you determine if it's no longer in scope? Currently we have Using(var X = new myDisposable()){ X.doStuff(); } In that, it's easy to understand X should be disposed after doing stuff. If I just do: Using var X = new myDisposable(); X.doStuff(); Var y = myOtherObject(); y.someOperation(); How does the code know it should dispose X right after doStuff instead of after y.someOperation?
Could you go into how you're using WordPress? I haven't heard of an architecture like that. How are you binding the HTML you're getting back from WP into a viewmodel?
Just wanted to say A) I never seen \` ((IDisposable)reader).Dispose();\` ever, or \`((SomeClass)class).something\` ever (although I do see \`if (thing is SomeClass thingClass)\` B) The using keyword is better for handling objects that should dispose C) What ign1fy said. reader?.Dispose() would be better if you did have to call it yourself
You very rarely "need" HttpContext.Current in code, it's just people think they do because they don't realize how to invert the usage and only have it at the top of the stack. Or, use other techniques like local storage and such.
&gt;Which major game engine is based on Java? Which consumer operating system is made by Oracle?
I'm not sure your point here. The *vast* majority of Windows is C/C++.
I'm not misrepresenting anything. I don't live in your head, so the words you type are all I have to work with. I am also neither uneducated or spewing nonsense. Bugs occur because people aren't perfect and code readability is important any time more than one person has to work on the same code.
&gt; Which major game engine is based on Java? Not an ”engine” as such, but Minecraft is built in Java. Very popular game.
Does it support polymorphism?
My point is that Microsoft is in a much better position than Oracle to create a major gaming engine that is widely adopted because they have an intuitive understanding of the operating system on which it runs on account of the fact that they wrote it. Indeed if there is any issue with said gaming engine, they can always just update the underlying operating system to accommodate. Oracle has no such luxury, so it's not surprising that there is no major gaming engine written in java.
Passwords should only ever be stored securely. Check out secure storage or Xamarin essential nuget packages.
Aight, I Will do that lager. Thanks for the tip.
Thanks, Will look into it.
I Tried to do that before aswell, got an out of exception error or something when i checked for right number. What i did was when i checked for the right place i incremented both counters and removed [i] from both lists. Then i sorted the list and did the same on the remaining elements
Oh I see... but it’s not a password string like “paasword123” it’s a variable defined as CognitoAWSCredential like [this](http://docs.aws.amazon.com/sdkfornet/v3/apidocs/index.html?page=TCognitoAWSCredentials.html&amp;tocid=Amazon_CognitoIdentity_CognitoAWSCredentials) I’ll see if it works, thank you 😊
You need a double loop or use Contains You can't depend on position for this. for i { if(guessList.Contains(code[i])) { guessList.Remove(code[i]); } }
Think I got you, will try it out later. Ty!
If I am a developer that is very fluent in SQL, what is the reason to use this over lower level library that supports direct SQL? I could write a SQL in few secs without thinking any abstration, and that eliminates the additional analysis and thinking, which could slow down the development. And most is, the developers that would take over the code. So, what is really the reason?
&gt; Why shouldn't we assume that's what's going on here? Because that's what I used to think, too. But now I know better. Also, because I slept on it before I replied. (6 hours between /u/Pyrophexx 's reply and mine) -- Hardly knee-jerk. How many times have I mentioned the word "pain" in my post? That's the real psychological reality: pain. I have many fellow developers whom I code with regularly. We all talk about our pain points when we develop frameworks and systems. And we accommodate each other and have built frameworks that we all are proud of and are happy to work in. Minimal pain. So think about it... Is mental pain a reason to not like a programming language?
Actually reading carefully I’ll try this “CacheCredentials” and see if it works :)
i get i t thanks
Are you drunk or high?
I want to appreciate IQueryable and OData. Thanks for being there!
Java’s goal to not align tightly with its operating system; I think that plays a part in why there’s no game engine. Btw oracle do have an operating system.
Ah; programmer used to one system; has trouble with another decided it’s the other language fault and the one he’s used to is superior as a result. It’s a classic tale born throughout the decades.
Fuck yeah
&gt;Can I refactor every switch-case into a strategy design pattern? &gt;Yes. You can. But, it’s not worth to apply this strategy design pattern when you have only 2-3 different concrete strategies/algorithms. If you have many rules/strategies, the strategy pattern is worth the design. I'd rather avoid saying that this is about amount of cases. If your cases are longer than 1-2 lines then maybe you should consider strategy cuz otherwise it's pointless. 30 one liners can be done without strategy and without switch.
&gt;Can I refactor every switch-case into a strategy design pattern? &gt; &gt;Yes. You can. But, it’s not worth to apply this strategy design pattern when you have only 2-3 different concrete strategies/algorithms. If you have many rules/strategies, the strategy pattern is worth the design. I don’t think it’s about how many cases there are. It’s about how much code each case contains (or, in other words, how much the cases *differ*).
Oh, thought I worte a description too, sorry So I am using VS for mac 2019. And when you run the program it displays the message from catch right after the first message, if you enter a wrong value, but I want to be able to enter a second value too before getting the error message
you dont know what you're talking about. Microsoft has no bespoke .net game engine. Yea XNA existed for a while but it is dead. The game engine in the .net world is unity, which is not a microsoft thing. It originated on mono way before microsoft bought xamarin and therefore Miguel de Icazza and therefore mono. unity really is barely even a .net as it is not a general purpose environment. The only thing that MS has for gaming is directx, which is very much not .net.
praise be to our lord and savior, .net core.
He clearly says preview not rc.
.net standard is the saving grace here. there can be many compatible implementations, but as long as they are (for example) .net standard 2.0 compliant, your code runs everywhere. That's the reason why net standard doesn't include things like the windows registry.
if you think the java ecosystem is lacking the i think you must be drunk or high. the .net ecosystem is getting better. but it is nowhere as rich as java. just browse the apache projects. its all java.
\&gt; one scoped for the lifetime of the application. not to be confused with the "scoped" lifetime of DI instances. What you're talking about sounds more like a "singleton" lifetime. a "scoped" lifetime lasts for the duration of the request.
Its logo kinda looks like a monkey/ape, so you might be onto something here...
It's a little late for that, lol. I acknowledge that I am biased, but after using SUCC I could never go back. Shortcuts alone make it worth it, but there are many, many details about how it works that I've tuned to exactly how I want it.
To be honest, I don't know, I've never tried.
The real question is - what if I want to remove 2017 and only have 2019 :)
I had developed an ORM library for our company that could support a builder like this, which I think a much more fluent and solid. var builder = new QueryBuilder(); var commandText = builder.Select() .FieldsFrom(Field.From("Id", "Name", "CreatedDate")) .From() .TableNameFrom("Person") .End() .ToString(); using (var connection = new SqlConnection("ConnectionString")) { var people = connection.ExecuteQuery(commandText); } or with generic type: var builder = new QueryBuilder(); var commandText = builder.Select() .FieldsFrom&lt;Person&gt;() .From() .TableNameFrom&lt;Person&gt;() .End() .ToString(); using (var connection = new SqlConnection("ConnectionString")) { var people = connection.ExecuteQuery(commandText); } But **this is not** my selling point, I have never put this on my documentation because it could complicate things up. IMHO Link: https://github.com/mikependon/RepoDb/blob/master/RepoDb/RepoDb/QueryBuilder.cs My selling point is simplicity, cleanliness, efficiency and performance. But this project SqlKata is awesome as well, as long as it make change to this **human** planet.
The complaint isn't that the ecosystem doesn't exist, it is that every single part of the ecosystem needs some configuring to work with each other. Want to create a project with a database and a web server? All you need is visual studio in .net, because it comes with iisexpress and sqlexpress. Just create your project and hit f5 and it's all running and debugging instantly. With java you'll need your ide and then install mysql or whatever db you use, then install tomcat, then configure those to work on your computer, and with each other, and with your ide, and if you want to debug it also requires extra configuration. All of these steps have you manually adding environment variables and other nonsense that isn't necessary with .net.
You're not insane. (Well, you might be, but it would be unrelated to VS.) When this has happened to me, the first thing I do is a Ctrl + KD to format the document, and then I look for the area where the indentation gets all wonky. Also, look at the syntax coloring as a clue for missing end quotes, etc.
This is what i came up with: https://pastebin.com/t8rS6AX5 It works, even if the code starts with a 0, for example '03948' Also makes sure the user enters a valid number, of valid length. Length of the code can be adjusted by changing the static int 'CodeLength' at the top. Use it as you please, best would be to compare to your code and understand how my code works :) Best of luck!
`Tools -&gt; Code Snippets Manager`
The Owned&lt;T&gt; class in autofac is great. T is your root object. When you dispose the owned it clears the entire dependency graph.
This maps 1 to 1 as exact alternatives JVM -&gt; CLR Bytecode -&gt; MSIL or CIL (different words that refer to same thing) C#, F#, VB.Net, C++\CLI -&gt; Java, Scala, Kotlin Jar -&gt; DLL or EXE aka Assembly So basically .NET Framework (or .NET Core) is a collection of assemblies containing some basic functionality, don’t know exact alternative, but AFAIK you can thing of it like Java EE/SE alternative.
&gt;3 That's heavily dependent on what kind of application you're writing.
The problem with a library like this is you end up with lots of magic strings, it will become very hard to maintain over time.
This is a fun one to try and answer, even if it may be a little above my expertise :). C# is just a language that compiles to something called the [Common Intermediate Language](https://en.wikipedia.org/wiki/Common_Intermediate_Language)(CIL) that in turn adheres to the [Common Language Infrastructure](https://en.wikipedia.org/wiki/List_of_CLI_languages)(CLI). Looking at the CLI Wikipedia page you can see there's lots of languages you can write .Net in, you will also see the CLR (common language run time) mentioned which is what all this runs on just like the JVM. `System` is a library in the same way `AutoMapper`, `Dapper` or something you make yourself are, it's possible to have C# without System, [here's an example without a system at all](https://github.com/MichalStrehovsky/zerosharp/tree/master/efi-no-runtime). Java is no different and yes, System.dll sits somewhere on your machine. as for the framework question, a framework is **defined as** &gt; A structure for supporting or enclosing something else, especially a skeletal support used as the basis for something being constructed. I feel the literal definition makes more sense, "The .Net Framework is a collection of libraries that provide a structure for supporting or...." The stack overflow answer makes more sense when you think of something like; ASP.Net, rails, spring or express that handle all the web servery stuff for you and allow you to just plug in your logic.
I mean I wanted to open that file quickly, cuz I have a lot of Views + folder to go thru
What does step by step mean? Sounds like you should flush the stream? I used named pipes like 5 years ago and was really happy about stability and performance. I used two way communication. IMO better than most TCP/HTTP approaches but always keep some test code around to spot regressions because it’s quite hard to debug issues.
If I'm right, that is just Reddit's formatting, and inline code appears as such everywhere. If you want to suggest a change, you could probably make a post about it in reddit-related subreddits (I found r/ideasfortheadmins with a google search). Though I agree, pink on white-red on a grey background is quite annoying to read.
I'll have a poke around the other code related subs and see what's going on and report back :)
Yep, it's everywhere. And also, we have a much nicer community than some I've just stumbled into! &amp;#x200B; I'll pop a post on the above :)
Well, who's gonna have a better community, a subreddit infested with snakes, or people who don't even need glasses because they can see sharp? ^((nah just kidding python is alright))
Your examples don't actually remove the switch statement. Also you have used "colling" instead of "cooling" in at least two of your variable names.
Regular comments will not be in the DLL -- but if you are talking about XML `&lt;summary&gt;&lt;/summary&gt;` block comments on methods / properties then you can package things up in a way that users of your Nuget package will have that information available. https://stackoverflow.com/questions/32994598/how-to-include-documentation-in-dll-to-show-method-summary-in-unity3d
lol :)
That's far from "100% do the same job". Minecraft, with its low-poly style, is quite different than most other popular games.
which major game engine is based on c#? runtimes is what you're actually talking about here.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/introduction
i think that android has got an old version of java, like 6
Are you paid by lines of code? More code, less readable and you still have a switch statement.
If I recall there is a WaitForConnection method (or something like that) on the client wrapper. Try calling that after _client.Start() and before you do PushMessage.
Just a quick question, why are you not handling this in middleware instead?
&gt; you have to refactor everything to a different DI library. This should not be needed. DI should be an implementation detail. Your application should not depend on an DI Framework to do stuff. if you have a controller that directly uses IServiceProvider/IContainer/whatever, you're doing things wrong.
For what it's worth, `System.Out` isn't a class in Java; `System.out` is a public variable in the `System` class, specifically a `PrintStream`.
System. Out is also NOT part of the java language. A language does not have an api or classes. The issue is that evering thing in java is called java so it can be confusing. So you could says java.lang package is equivelant to system dll in .net. They both have console/system classes, they both have the object class. These are part of the framework.
Same problem with CS files for me, I have see people have same issue with previous VS versions, but this is the first time for me.
Actually Dan on the video said that they're close to having Blazor (wasm / client-side) as a commited product (preview 1) along with Blazor (server-side) but not in time for the .net core 3 release.
Unity is. A lot of its implementation is currently written in C++, though [that is gradually changing](https://blogs.unity3d.com/2019/02/26/on-dots-c-c/). But even if it was implemented 100 % in C++, it does show C# can do things that Java can't.
These are all standard functions in .NET
Then use the VS installer, which manages multiple VS instances, and remove 17?
Strange, i have never seen a function for stuff like removing a number of characters from the ends of a string, or compiling a dictionary, although the dictionary thing has a limited use case I admit
The .net framework(and .net core) consists out of 2 parts: 1) A runtime that converts intermediate language(the output of the compiler) in to machine code and runs it. 2) A standard library that contains a lot of the basic things that you might need. e.g. System.Console This is similar to java. If you install the JRE you get 2 things. A JVM to convert and run the code, and the java standard library so to answer your questions: 1) Yes(the standard library). But it also has the runtime. Most of the standard library is indeed written in C#. https://referencesource.microsoft.com/ 2) The runtime calls your code, so following that definition that would make it a framework. The framework also includes a lot of libraries(the standard library) that you can call from your code.
[https://i.stack.imgur.com/MrTWw.png](https://i.stack.imgur.com/MrTWw.png) (Picture I just googled showing the Step I ment as "Step into") This is what I ment with the Step-By-Step Debugging, I had no Idea how to correctly translate it :)
so he says preview, not rc
I'll give that a try later, that actually sounds pretty reasonable. I messed with WaitForDisconnection() and other Methods earlier but didnt even think about that option.. I feel kinda dumb now :D
uhhh okay i was in the same boat of "hmm looks nice, but why not use YAML", but reading a bit into shortcuts, that is a really neat feature.
Using MVC5
I see 😃
Option two is the approach I would both take and prefer. I already have libraries I have this problem with (Random comes up a lot) and it's really not hard to use the fully qualified namespace. That's is exactly what it's there for: to remove ambiguity when using types. This isn't really an annoyance if you are using an IDE with autocomplete. In VS the quick actions will fix most of these problems with a few keystrokes. When reading the code, it's often much clearer to understand when using the namespace anyway. These may be personal preference but I think it's clear the tools exist for handling this exact case.
If you want to know what belongs to what, remove all the `using` blocks in your code and check what to can still call
You have to load your files onto different audio channels and cue/layer them as needed, which may need a library such as naudio to accomplish. Aside from that you would have to load your audio files into a Digital Audio Workstation and create custom sounds by layering them on top another.
Yes, that was my point. It's not a widely used consumer operating system so nobody is gonna write a game engine for it and very few Java users are going to be using it so it makes sense that they aren't focused on integration.
Well Solaris is a unix operating system used in high end enterprise setups. So yeah not games; but plenty of other permanent critical systems. Although; I’m intrigued, what in the operating system would you expect to be changed to facilitate language features. I’m drawing a blank.
Thanks for the input. The only issue for me is the fact that the types in question have generic parameter. "System.Random" doesn't have any generic parameters, so alias is a very good solution. Once you add generic parameters... It ruins everything... You have to do stuff like this: using Towel.DataStructures; // my library using ListInt = System.Collections.Generic.List&lt;int&gt;; using StackString = System.Collections.Generic.Stack&lt;string&gt;; using ListFloat = System.Collections.Generic.List&lt;float&gt;; It is really frustrating that alias doesn't support generics, but I understand why they designed it that way. However, I can imagine that one day they might actually add support for generic alias or another feature to accomplish the same thing. All that said... Yeah... I'm still tempted to agree with your preference. :)
think of a case where you have to build the SQL query dynamically, according to the user input, a quick example can be, conditionally joining with a table, building "where" conditions, group by... ```cs var query = db.Query("Books"); if(Request.Has("category.name")) { query.Join("Categories", "Categories.Id", "Books.CategoryId") .Where("Categories.Name", "=", Request.Get("category.name")); } return query.Get&lt;Book&gt;(); ```
I'm not aware of any specific examples but it is something that they have the ability to do. I'd be very surprised if the Windows OS has never been updated to provide better .NET integration though.
One way to do this is not parsing to a int right away. Read it as string, use the Int32.TryParse method to see if it can be parsed to an integer string input = Console.ReadLine(); int number; Int32.TryParse(input, out number); Int32.TryParse() return a bool value, which will be false if someone has '1A' as input for example. So you can add a if statement like this: if (Int32.TryParse(input, out number)) { Console.WriteLine("Wrong input, try again"); // .. ask new input } This allows the user to re-enter a number, but only once. You can wrap a while statement around it for example, which loops untill TryParse returns true.
Scope is the correct general term. Singleton is the correct DI term.
Just remove 2017 and install 2019... That's a real answer.
Just a few extensions and tools that need to be ported, but everything works fine for all my solutions.
Nice! I am also an ORM developer, so I am interested on this topics. This is supported by LinqToDb as well. Hmmmmm. Did you supported the IQueryable? It could make this one more powerful.
"Hello World".Length Or .Substring Or .Trim Or Split(' ').GroupBy string.IsNullOrEmpty()
Your question gives out that you are confused about what System.out is in Java. Java being the name of a programming language, a runtime and a standard library. With .NET the language has its own name and the runtime and the standard library (and even some other tools) are known as .NET (the runtime is called Common Language Runtime (CLR) and the library is called Base Class Library (BCL) if you must know)
Instead of just setting those two properties (name and size), can you set Font to a new Font object?
Thanks! Actually, with IQueryable you can't express low-level SQL, like Union, CTE, Window function and so on, so I've decided to stick with a lower level right now, later on, it could be possible. do you mind sharing your project?
C# does define a few types. `object`, `string`, etc. have to exist. The spec says: &gt;A conforming implementation of C# must provide and support all the types, values, objects, properties, methods, and program syntax and semantics described in this ECMA Standard. Normally the implementation of these is provided by the .NET Framework or .NET Core. But you could create a conforming C# implementation that has no connection to .NET whatsoever.
I am the creator of RepoDb, the current fastest and most efficient .NET ORM as per RawDataAccessBencher of FransBouma. As of the moment, my company uses it, until I finish all the core features, then I may ask fellow developers and architects to share this to the groups of developers (as well). FYI: I used this group as well to gather some feedbacks. In anyway, keep it up in SqlKata, I love developers who help change this world and good luck to both of us. Here what I did in the underlying implementation of my library. I developed it like this: // var queryGroup = new QueryGroup(new QueryField("Id", 10045)); // Default is 'Equal' var queryGroup = new QueryGroup(new QueryField("Id", Operation.GreaterThanOrEqual, 10045)); var commandText = new QueryBuilder() .Select() .FieldsFrom(Field.From("Id", "Name", "CreatedDate")) .From() .TableNameFrom("Person") .WhereFrom(queryGroup) .End() .ToString(); using (var connection = new SqlConnection("ConnectionString")) { var people = connection.ExecuteQuery(commandText, queryGroup); } or with generic type: var queryGroup = QueryGroup.Parse&lt;Person&gt;(p =&gt; p.Id &gt;= 10045); var commandText = new QueryBuilder() .Select() .FieldsFrom&lt;Person&gt;() .From() .TableNameFrom&lt;Person&gt;() .WhereFrom(queryGroup) .End() .ToString(); using (var connection = new SqlConnection("ConnectionString")) { var people = connection.ExecuteQuery&lt;Person&gt;(commandText, queryGroup); } Link: https://github.com/mikependon/RepoDb/blob/master/RepoDb/RepoDb/QueryBuilder.cs But my `QueryBuilder` is just a shit when compared to my features. It is not my selling point. I focused more on Fluency, Performance, Solidity and efficiency.
&gt;I'm confused on what the .NET framework is. So, ".NET Framework" in particular refers to an implementation of .NET. It used to be the prevalent implementation, such that when people said ".NET" for short, they really meant that. It typically comes with Windows and gets updated as part of it, and contains, among other stuff: * a set of libraries typically known collectively as the "BCL" (Base Class Library), which range from basic stuff like System.String to specific/advanced implementations such as the entire WPF stack. * compilers for VB and C# * a runtime/JIT These days, Microsoft also maintains Mono, which is setup similarly (it mostly tries to mimic .NET Framework), but lacks some stuff (such as WPF) and, in turn, has some other stuff .NET Framework does not (such as support for AOT compilation, which makes it suitable for mobile development). And then there's .NET Core, which will probably replace usage of .NET Framework and Mono step-by-step. Unlike .NET Framework, it doesn't ship with Windows by default, and is more modular such that your app can ship the portions actually needed (at the exact respective versions you'd like). Unlike .NET Framework and like Mono, it runs on multiple platforms. (There's also .NET Standard, a specification that defines a subset that all three of the above implement, such that you can make a library that will work on all of them. For example, while .NET Framework has the Windows-specific concept of the registry, .NET Standard by design does not, because that wouldn't work if using Mono to build a Xamarin mobile app.) &gt;Is it a set of DLL files sitting in a folder somewhere that C# program's simply reference? That's definitely part of it, and in _my_ typical understanding/usage of the word "framework", it essentially means "a bunch of libraries". For example, WPF is a UI framework. &gt;Or are the .NET libraries written in C# or something? Mostly, yes (some low-level portions are written in C++; for example, System.String is not purely C#). Regarding your title: yes, System.Console is written in C#, but no, C# does _not_ provide the API for it. .NET does. And in fact, the console may work differently depending on whether your C# code runs on macOS, Windows, Linux, iOS, etc. (In fact, if you use Mono/WASM to run your C# in the browser, the console is actually the browser's console. Which is quite different than, say, a command-line prompt.) &gt;Stack Overflow on libraries vs. frameworks: "To summarize: your code calls a library but a framework calls your code." I've never heard that bizarre distinction. To me, and in the way Apple and Microsoft use the term, I would argue a framework is simply a larger set of libraries. &gt;3.) Suggestions for non-trivial-but-also-non-massive c# projects that I could examine to help me get a grip on how these things are structured? Please clarify your question.
&gt; A language does not have an api or classes. This is not true. C# itself defines the string class and object class and several other classes. A conforming compiler for c# must implement these classes. A language can do whatever it wants.
Interesting!, what are you using for the execution layer? or you wrote your own?
IL and Compiled Expressions.
I am planning to ask some developers to integrate SqlKata to RepoDb soon, for those who loved SqlKata. It is nice to give the developers a lot of option.
Not quite. C# defines the `string` primitive, and Framework / Core map the primitive to the class `String` which actually does the work. The string primitive is a standard that all frameworks (`String` in Framework, `String` in Core) have to implement to be compatible with C#. The compiler doesn't implement anything on its own.
Very nice! keep it up
Btw, how do you measure the performance and memory usage of SqlKata? And, are you caching the "already" generated SQL Statements as well? (some thing that you might be interested)
Btw, how do you measure the performance and memory usage of SqlKata? And, are you caching the "already" generated SQL Statements as well? (some thing that you might be interested)
Open up a new project, remove every single reference, what you get is raw C# with no dependency. Every DLL you add as a reference is part of the .NET Framework and is installed on your PC. However there are several "fade" between C#, the Compiler and the DLLs. For example to call a function in a native (C, C++) DLL, you need the DllImport attribute, which is part of the System.Runtime.InteropServices namespace (System.DLL). Altough it "should be" a language feature, it is kinda locked to the framework.
Uhm, wow... So.. - Why do you target .NET Core 2.2? .NET Standard should be enough for what you have. - Why do you remove a file named `Class1.cs~`? Remove that line from your csproj file. - There's no inline documentation at all. - Having a public class named `Length` is really not good. That class does not even represent a length, all it does is provide length related methods. - `GetLength` accepts a `string`, but.. it does not return the strings length. It returns the amount of bytes using ASCII encoding. And in a case of no string it just returns `0` as well, because YOLO. - `IsLength` what does that even mean? It accepts an input and a length. Sure, by looking at the code I can see what you mean, but the naming is still.. - Having parameter names starting with upper-case is really uncommon. The usual convention is camelCase. - Code like `var istrue = false; if (condition) istrue = true; return istrue;` is really unneccessary. Just write `return condition;`. - Your method `IsNullorEmpty` exists already in .NET: `string.IsNullOrEmpty`. - Having public nested classes is usually pretty bad code smell as well, unless those nested classes are only ever used in conjunction with the parent class. This is not the case here, as all classes are static. - Your `Start` method is highly inefficient. Why are you not just using `string.Substring`? - Same with your `End` method. - Your first `ToDictionary` method can just use the second `ToDictionary` method: `return ToDictionary(keys.Split(delimiter), values.Split(delimiter));` - What does `CompileString` even mean? You probably mean concatenate strings. And your code is **very** inefficient, as strings are immutable. Use `StringBuilder` instead. Or.. you know.. just `string.Concat`.
Ah, sorry I meant inline in code, not as a using statement. I avoid polluting namespaces if I only need a couple types in any particular script. So for the random example, I have no issues explicitly typing System.Random rand = new System.Random(); This should work with any type, iirc, regardless of generic. I could be wrong about this though (not at my computer at the moment to check). I know when reading my own (and others) code exact what is happening without scrolling back to the top. Even if you do have both as using statements and you still need to do this anyway for the compiler to work, that is the purpose for including the full name in the body of your code. Again, VS auto suggests this with quick actions and you only need to qualify it when declaring the variable, so it's not really adding a lot of overhead and I like the explicit nature of it.
"java MyProgram" "Could not find or load main class MyProgram" It's in the current folder. Two senior level developers with 40 years of experience between them are looking at this and scratching their heads. It's that kind of fuckmuppetry that makes me hate Java in general. Yes, it's gotten better with Netbeans and such, but the Java ecosystem has such a sordid history of being seemingly designed by a bunch of monkeys at typewriters. The biggest thing that MS did for programmers is that they created an ecosystem with developers in mind.
I did quick profiling, but currently not focusing on that at this stage
A hashset will not allow duplicate values and given the inputs it looks like that is a requirement.
Great! In anyway, have a look on this great bencher. I already CR(ed) this one, so you can CR on your own. Have yours register here! Link: [https://github.com/FransBouma/RawDataAccessBencher](https://github.com/FransBouma/RawDataAccessBencher) Good job!
The difference is that recent changes aside, if you want to learn .NET there is one simple way to learn it and you don't generally have to worry about an online tutorial mashup of ant, gradle, and maven, axis, axis2, JAX, and whatever other soup du jour of made up names.
This is exactly what I'm getting at. It took me 2 days of configuring my machine to get a SOAP service and client up and running. That's ridiculous.
O yeah... I use full qualifications often in my code too. And I especially hate acronyms in code. :D I always write out full names such as... Matrix&lt;T&gt;.DecomposeLowerUpper(...) Compute.LinearRegression2D&lt;T&gt;(...) Compute.SineTaylorSeries&lt;T&gt;(...) Acronyms are a major pet peeves of mine. But I know most people tend to hate fully qualifying type names (hence getting some Reddit feedback).
&gt; https://github.com/FransBouma/RawDataAccessBencher Thanks for mentioning, I will take a look at it for sure!
\&gt; Is it a set of DLL files sitting in a folder somewhere that C# program's simply reference? &amp;#x200B; yes \&gt;Or are the .NET libraries **written** in C# or something? &amp;#x200B; Mostly, yes.
Create a class with no usings at the top. Whatever you can implement is c#. Rest is .net libraries.
&gt; DI should be an implementation detail. Yeah but containers don’t have the same features. Autofac has a number of dynamic liftings, for instance, which are used for automatic factories among other things.
To give an example. We have a framework that every dev uses for back-end services. It covers all the boilerplate including the resolver. The issue is, each service still has its own types that need to be setup with the resolver (whether it be transient or a singleton, or scoped, or even a custom factory method). When we went from Ninject to Autofac, all that had to change.
A fun tidbit is there are numerous classes that were simply wrappers around 40 year old Windows dlls that are called through Interop. Especially when it comes to graphics. That stymied attempts at porting .NET to other operating systems. This seems to finally be getting addressed in .NET Core.
Given you’ve not specified the class path no wonder it doesn’t work. Meh. I use both Java and C#. Sure C# standard library is huge in comparison, but then java is huge compared to C. IDE wise IntelliJ is way better than Netbeans and Eclipse. But then if you rely on the IDE plain Visual studio is pretty crap compared to reshaper enhanced version. Fact is (as you’re demonstrating) programmers have a strong attraction to the language they know the best; and things which work differently become frustrating and infuriating. In the grand scheme of things they aren’t necessarily wrong - but often designed with different goals in mind. Seen it hundreds of times; done it myself.
it seems custom reporting is a niche for libs like SQLKata. I'm developer of product for embedded BI functionality and it also uses similar library (this is https://github.com/nreco/data) for SQL-compatible data sources.
I did use the namespace. I've tried a dozen different ways of typing the command. The point is that starting a program shouldn't require arcane knowledge to utter the specific magic incantation. Having the Java runtime just shrug at you and act like there's nothing there is beyond the pale, even for developers who take it for granted that computers can be a bit obtuse sometimes.
You can't really. If you're using git it is repo-centric for any tool you try to use. You're going to have to split out into multiple repos and for each repo you'll need to add its dependencies as a submodule (if your repos depend on shared code). Technically you can modify the code in the submodules and commit back to their source repo, but it's ugly.
Can you please use github gist or any othet code hosting service for better readability Thanks :) for sharing your work
Sure, just a minute
classpath... Like I say; it's a different design goal. The same output can be a library or a program; you can have multiple entry points within it etc. You can also...run the same thing on different systems. For C# you get an exe file, nice for windows. Honestly though if you try and start a C# program when the GAC is incorrect. It pretty much just gives you the same sort of shrug. Java 9's module system would address your particular concern here.
So... &amp;#x200B; Did anyone else just click on the link and wait a few minutes while it loaded? ... &amp;#x200B; ... :/ &amp;#x200B; ...
The Java equivalent of the .NET Framework (or .NET Core) is the Java Class Library. It's just that - a library of classes and methods that can be used in any language that compiles to IL (C#, F#, VB.NET, etc.)
Are there JVM languages that have unmanaged components like C++ does in .NET?
It is most similar to go's defer statement, except that it is block scoped instead of function scoped. It is supposed to reduce nesting and used like this: ``` if(someCondition) { // a bunch of code... using var x = new MyDisposable(); // a bit more code using var y = new MySecondDisposable(); // more code // y.Dispose(), followed by x.Dispose() called here, at the end of the block. } ``` Traditional using blocks would cause `// more code` to be nested two additional levels. Personally, I think it is unnecessary. If you hate nesting that much, there are other ways to handle it.
Here you go https://github.com/joao7yt/XamlYoutubeLoadingSpinner/blob/master/XamlYoutubeLoadingSpinner/MainWindow.xaml
The real question is why are you wanting to do this? This will help give a better answer. What you want to do is possible, but I would question why you want to do it. If the projects will only ever be used for 1 application, they should all be in the same repository. If the projects will be shared between applications, the distinct shared project(s) should be in their own repositories and referenced via NuGet packages (after all, that's the whole point of packages).
Are you talking about the gif? Here it's ok...
System.out is part of Java the runtime and not Java the language. You can use System.out from Kotlin or Scala, just like you can use System.Console from VB.NET or F#.
Line 11, 17, 25: Ooof Input.Equals(""), use string.Empty more importantly that whole line could be replaced with: 11: if(string.IsNullOrEmpty(Input)) return 0; 17: if(string.IsNullOrEmpty(Input)) return false; 25: if(string.IsNullOrEmpty(Input)) return true;
 public static int GetLength(string Input) { if ((Input.Equals(null) || (Input.Equals("")))) return 0; byte[] temp = Encoding.ASCII.GetBytes(Input); return temp.Length; } Did you actually try testing this with null? It should be pretty obvious just from glancing at the code what will happen if you pass null into this.
Removed: Rule 4.
Removed: Rule 4.
You can just google search for free edu email and you can have one generated if you wish.
I'm still waiting :)
Check if the read line is empty and stop if it is?
Hahaha it’s exactly like the loading animation when a youtube video is loading
No it is not because .NET Framework is a term that includes the CLR, the BCL and even the C# and VB.NET compilers. The .NET Framework is the runtime, the libraries and a bunch of related tools.
Post your code at least...
That should work. Not sure how to add that though... N00b.
After the splitting: `if (Line.Length == 0) break;`
A "for" loop in C# requires 3 parameters. You have omitted the starting condition.
The pattern is for(int c=0; c &lt; 100; c++)
I'm still pretty new to the language but 'for' takes 3 statements of which you only have 2. "for (initializer; condition; iterator)" So you could write that as: for (int ctr = 0; ctr &lt;= 100; ctr++) { //code until ctr = 100 } I don't believe ctr != 100 would ever run the for statement?
Maybe this is like beginner's exercise to learn how to make useful libraries. However, as others have said, there are 1) A lot of missing best practices 2) Pretty much all of the functionality can be done with the framework already with a single method call or a couple lines of code. 3) Some places where parameter validation is not done properly, esp. "Input.Equals(null)" is gonna throw an exception if "Input" is actually null.
ctr != 100 is the same as ctr &lt; 100 if counting up by 1's.
Look harder.
The C# standard defines `string` as "simply an alias" for the `System.String` class, which is "the string type of the C# language". So yes, `System.String` is part of the C# language, although it doesn't specify the whole implementation in detail. Likewise for many other members of the `System` namespace.
Gotcha, thanks for the clarification. That makes sense.
did it load? [https://i.redd.it/b74yn8fhq1t21.gif](https://i.redd.it/b74yn8fhq1t21.gif)
It depends on what you're trying to do. If you want to make [extension methods](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods), you don't actually use inheritance. Before you try to inherit from, or extend, the classes you'll want to understand how they work to begin with. [StreamReader](https://docs.microsoft.com/en-us/dotnet/api/system.io.streamreader?view=netframework-4.8) On that page, you can see what methods exist currently and how to use them. You can then try to model your own methods using those as examples.
&gt; But you could create a conforming C# implementation that has no connection to .NET whatsoever. Yeah, but the language does dictate a lot of the object model that has to exist.
Well, if both compile, they better not do different things in practice :p
But that code should of course not exist.
I'm not sure what you mean formClosed didn't work or your public function doesn't work. What do you mean?
Of course.
Fun fact: the CLR allows this for overriding virtual methods as well, but C# doesn’t expose it. Also, if you manually write it in IL, .NET reflection can’t even discover it (since `GetInterfaceMap` only works for interfaces, not base classes).
You know how different languages can produce an exe? (ex: c, cpp, rust, d, C#, vb, etc). There's a bunch of .NET languages like [VB.NET](https://VB.NET), F#, Boo (which is not made by MS, [https://github.com/boo-lang/boo](https://github.com/boo-lang/boo)), etc. They get processed into "Common Intermediate Language (*CIL*), formerly called *Microsoft* Intermediate Language (MSIL)" which then tools make an exe out of it. .NET is a framework with these tools (compilers, JIT, etc) with a library so all .NET languages can use them. You can write code in any of these languages and use it in another via dll/reference.
For homework questions you should ask your fellow students, your TA or your professor.
I would never use a != in a for loop. All you have to do is have one erroneous cntr ++ and you’ve entered infinite loop territory. Convention is always to use &lt; (or &lt;=) when called for
nodejs - can use the same language front end and back end net core - higher performance ceiling, better languages arguably
Pros: people who are proficient in JS can use that language to write backend code Cons: backend code written in JS
you have to update the installer. the new installer updates it self as well. the 2017 version does not..
An alternative, though maybe not optimal, you can do for(;ctrl!=99;ctrl++) to fix it. Using &lt; is probably better but is not necessarily an issue, just looks better and is more standard
.net core is a curated library of features Node is a Wild West mishmash of extensions, some of which are great and some of which are crap.
Maybe Blazor will change that as well. :)
Cons: Devs thinking they are proficient in JS in the first place. (before the downvotes come along, it's just a joke)
you can make websites in F# both ends really nicely right now with Fable too
&gt; C# itself defines the string class and object class and several other classes. It defines vague interfaces that are ultimately ducktyped (for example, foreach isn’t actually hardcoded to `IEnumerable`, but to any object that happens to *look like* what `IEnumerable` offers). &gt; A conforming compiler for c# must implement these classes. The C# compiler *doesn’t* implement them. It just knows to expect them to exist.
Well, the type aliases (`string`, `int`, …) work without `using`s even though C# doesn’t implement them.
Try visibility changed events. Also, paste the code to pastebin
ah yeah that's true. I went to a meet up recently where they showed some demos for this. Pretty cool!
Inside `&lt;&gt;` can be any type which satifies constraints of generic type (or method). In your example, go to definition of UseStartup -- it is likely that it is something like `UseStartup&lt;T&gt;`. If it does not have `where T : class` clause after it, `T` can be any type. It does not have to be abstract. To use `Startup` in that method, it has to be either passed as a parameter `T startupObject`, or it may even create it (if it has constraint `where T : new()`)... `IName ClassName { }` is not valid C#... Give us a wider context on that one...
&gt;Cons: backend code written in JS I've never tried backend js but why it is actually that bad? weak debugging tools?
And how UseStartup will use Startup class? What will it do with it? Create a new instance by run time or what? I come from JS and PHP languages and this stuff just blows my mind. Never seen anything like that.
the type inside of the `&lt;&gt;` is the type you're specifying to the generic method. it doesn't mean the method has to implement anything, but the method will use that type information for its functionality. you really should read over all of the documentation about generics because you obviously aren't understanding something. `IName ClassName {}` isn't a valid class declaration so i'm not sure what you're talking about here. `ClassName : IName {}` means that `ClassName` implements the `IName` interface.
If performance is an issue, you should always prefer a statically typed language over one that resolves types at runtime. Tooling is also vastly better for .NET than for Node. Also, NPM is a disaster compared to NuGet. ...in my opinion, of course.
So those angle brackets used in that way denote *generics*, as you mention the docs describe. Generics are basically a way of defining that a particular type will be used in some way by that method (or class when used as part of a class definition). Quite typically when you create a method or class definition in this way you'll define *generic constraints*, those are restrictions that will apply to that type which are in some way needed by the class or method being defined. As an example: public interface ISettings { } public class HomeControllerSettings { public bool ShowAllDashboardPanels { get; set; } } public class UserControllerSettings { public bool AllowUserEdit { get; set; } } public abstract class BaseController&lt;TSettings&gt; where TSettings : ISettings { protected TSettings Settings { get; } protected BaseController(TSettings settings) { this.Settings = settings; } } public class HomeController : BaseController&lt;HomeControllerSettings&gt; { public HomeController() : base(new HomeControllerSettings()) { } } public class UserController : BaseController&lt;UserControllerSettings&gt; { public UserController() : base(new UserControllerSettings()) { } } In the example above we have two classes that represent settings for different controllers. They're unrelated to each other, they share no common properties, all we've done is say that they both implement the interface `ISettings`. We then have a base class for controllers which is generic, it defines a property of type `TSettings`. When we derive from that class we know that `TSettings` will be a particular type defined by the derived class. So, when we then define `HomeController` and say that `TSettings` is actually type `HomeControllerSettings`, the Settings property is exposed as `HomeControllerSettings`. Similarly, `UserController` makes the Settings property be exposed as type `UserControllerSettings`. In that way we've been able to define a base class - `BaseController` \- which we've said must have a settings property but that the type of that property is left to the deriving classes to specify. The only constraint we place on it is that the types they choose must be types that implement `ISettings`. &amp;#x200B; It can be quite a complicated topic but it's **very** powerful once you get your head around it. Especially once you get into advanced topics like dependency injection and defining/resolving open generic services. For now, it's best just to think of it as a way for a class to define that there'll be a type used somewhere but that it's up to some other bit of code to define what that type is (within reason).
&gt;you should always prefer a statically typed language over one that resolves types at runtime. Cannot it be solved by using TS?
That last bit may not be clear to everyone...DevOps will let you host your own private nuget feed. This article is a good place to get you started: https://medium.com/medialesson/get-started-with-private-nuget-feeds-in-azure-devops-8c7b5f022a68
I understand that &lt;&gt; is the type you are defining for &lt;T&gt; and you can give it a boolean which is a type. But class and interface are not types, so that made me wonder what is the idea of that. What is that supposed to help me to do if I will pass class name there? Will I be able to access methods and other members of that class or what?
It helps with the tooling, but you're still transpiling to a language that resolves types at runtime - which incurs a fairly substantial performance hit. Tooling will be better with TS, though.
As I said, it may be passed as an argument (in which case, it is likely constraint requiring implementation of an interface): public interface IStartable { void Start(); } public void UseStartup&lt;T&gt;(T startupObject) where T : IStartable { startupObject.Start(); } It also may require that it has default constructor, and then create it: public interface IStartable { void Start(); } public void UseStartup&lt;T&gt;() where T : new(), IStartable { var startupObject = new T(); startupObject.Start(); }
classes and interfaces are types. sure, you can check what type is being used by your generic and cast to it to access members of that type. you can also constrain you generics so you can only use them with classes that implement a certain interface, for example. that would guarantee you can cast the thing to that interface type and access the defined members of that interface.
Another interesting one is IDisposable must be defined.
Yeah the whole .NET Framework includes a bunch of components, one of which is the class library https://en.wikipedia.org/wiki/Framework_Class_Library
&gt; The C# compiler doesn’t implement them. It just knows to expect them to exist. Egh, I stand by my statement. A conforming compiler must implement them; /how/ it implements them is a different question. Microsoft's compiler can just use .Net's string type, because Microsoft's compiler only supports .Net [Framework or Core), but if AntiduhC#Compiler were to compile against .Antiduh instead of .Net, it is responsible for implementing the string type, just as it is responsible for implementing the int type.
Firstly, I would seriously suggest you look up naming standards. It'll help you in future coding. Secondly, here's the following from MSDN on StreamReader.ReadLine: "Returns The next line from the input stream, or null if the end of the input stream is reached." I'm curious to know where you're getting an out of bounds exception. All signs indicate you'd get a null reference exception. For the null reference, store the output of ReadLine in a variable, and check it for null before trying to split it. If it's null, simply return. If you're starting out, I'd also recommend grabbing ReSharper and running it on a trial. It'll help you by suggesting other ways of writing code, and can help teach you more cleaner ways of writing code.
So it all depends on the constraint of the generic method. Thanks
I'll say the same thing I said to the other guy - I stand by my statement, a conforming compiler is responsible for implementing string. How it chooses to implement string is a different question. Yes, Microsoft's implementation just maps to .Net's String type, but that's not required. A conforming compiler must implement the string type. How it chooses to do so is up to the compiler. A conforming C# compiler could exist that does not depend on .Net.
You _could_ design a C# compiler that comes with its own type system, in which case it could also include its own string type. The C# compilers in .NET Framework, Mono, .NET Core, etc., though, don't work that way. .NET provides the type system, and .NET provides the concrete type implementation. The C# compiler isn't really involved in that. The JITter / IL compiler is.
The .NET Framework is a particular implementation of the Common Language Infrastructure which is basically a specification for a software runtime (the CLR) and a set of standard libraries https://en.wikipedia.org/wiki/Standard_Libraries_(CLI). So add this to your mappings Common Language Infrastructure -&gt; Java Platform .NET Framework, dotnet core, mono -&gt; OpenJDK, JDK, Apache Harmony
Just as an reference for everyone passing by this thread - this sadly did not resolve the issue :( I resorted to use another wrapper "[pipe.net](https://pipe.net)" which is plain simple and works very well for now!
Thanks. I inherited this code. I was just trying to modify it to prevent the error.
You either do int nameOfYourCounter = 0; for( ; nameOfYourCounter != 100; nameOfYourCounter++) {} Or for(int nameOfYourCounter = 0; nameOfYourCounter != 100; nameOfYourCounter++) {} So there should be three parameters in for()
If you're on the latest C# that has null propagation, you could do it very simply with: string[] Line = sr.ReadLine()?.Replace("\""").Split,'); if (Line == null) return; studentsFile.Add (Line); If you've not yet seen if, have a read. It's a really useful feature. I'm saying return, but you may want to break. It all depends on if there's any more code in that method that needs to run.
Right, but we're talking about where C# ends and .Net begins - thats literally the point of this whole post. Keep in mind that there was a time when there was a conformant Java compiler that compiled against the .Net VM and class lib. There could be a conformant C# compiler that compiles against the Java VM and Java class lib. There could be a conformant C# compiler that compiles/transpiles to Javascript. The C# compiler has an interface it is required to implement, which is the whole point of this discussion - where that interface begins and ends, and where the implementation takes over. Implementations can be swapped out.
Yeah, it's pretty restrictive. I think it would not be unreasonable if someone were to port C# to a non-.NET platform if they chose to not be conforming in this sense.
String.remove does exactly that.
Going off the fact they have published this to NuGet suggests they are expecting people to actually use it... So I don't think it's just a beginner's exercise...
I think that's because it's shorthand for the fully-qualified `System.Int32`.
C# is the language. .NET is the Framework/ code libraries being used.
Yes
* Set a breakpoint at line 21. * Click the mouse. * Check the value of gameController1 (you can mouse over it in Visual Studio). What value does Visual Studio say gameController1 has?
Right, but the implication was that this wouldn’t be “.NET libraries”. It still is; it’s just hidden as a convenience.
I use it for processing rle encoded bitmaps to send to plotting hardware. It's lightweight enough to avoid unsafe code and, in contrast to List, ArrayList maintains insertion order.
The only place it could come from is gameController1 being null, or from within RestartGame() Make sure you call SetGameControllerReference with a non-null value and make sure you don't destroy it before calling RestartGame(). If the problem is not there, look at RestartGame() and see if you don't access a null reference there. A debug stack trace would be useful, as it shows exactly where something went wrong (double-clicking the error message in the console in Unity also works). Also, why do you have SetGameControllerReference()? Are you swapping between multiple controllers during the game? If not, I'd highly recommend adding \[SerializeField\] before the gameController1 field (`[SerializeField] private GameController gameController1;`) and assigning the reference from within the Unity Editor. \[SerializeField\] exposes any field (even private ones) in the editor and allows you to assign values to it in the inspector. &amp;#x200B; I'd strongly suggest naming all classes in CamelCase (like MonoBehaviour), it's just a general convention.
well based on the instructions, does it matter if I use extension methods or inheritance? I'm leaning more towards inheritance, but in my thinking, method extension is a lot easier for who's using it?
I think you are both wrong, there are certain classes which are extremely tied to the runtime details and are therefor implemented by the runtime rather then the compiler or standard class library. For example all of these classes are implemented in the dotnet core runtime rather the corefx which is the standard (foundational) class library implementation being shared now by mono and dotnet core. https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib/src/System
Thank you for your answer, (and everyone else's) I definitely understand what .NET is a lot better now. Do you happen to know of a class in the .NET implementation that only uses C# to implement itself? I mean **just** C# w/ no references to other parts of .NET? I'd really like to get a look at what "pure" c# looks like and how it was used to build up the more complex .NET classes.
Yeah, you are right. I was trying to simplify.
I can't say what the intention of the exercise is, but making an extension method is very different from creating a new class that inherits. When you create an extension method, the method is used as though it's part of the class you extended. Using StreamReader and your ReadBool() method as an example. If you make it an extension method, it would be used like this: StreamReader sr = new StreamReader(); sr.ReadBool(); On the other hand, if you made new class that inherited from StreamReader, you'd have to create an instance of your new class: CustomStreamReader csr = new CustomStringReader(); csr.ReadBool(); The big thing is that in the second case you aren't extending StreamReader, you're inheriting from it in a whole new class. My instinct is to think they want you to extend the classes, not make new ones, but only your teacher or TA could tell you for sure.
im switchign between controllers yea, its a tictactoe game. i jus twant the goddamn button to do the function "Reset()" which is written in anotehr script. and i want to put it in this script.
[In the distant future of May 2018](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters#unmanaged-constraint)
What do you mean List doesn’t maintain insertion order?!
You know how arrays work, where you create an array of say strings but really you can create an array of **any type** without the array having to know about the type of object it stores. So that's generics in action (the syntax just looks different for legacy reasons). A similar concept is List&lt;T&gt; where you can create a list of objects of any specified type without having to know the specific type in advance, just like an array. Make sense? This was the easiest way for me to understand them when I started. From here you can do plenty of now advanced stuff but as long as you understand how it works in the basic sense it'll cover must use cases.
However, they are still written in IL (and backed through native code in all major current runtimes). It's just that Rosyln, the C# compiler, will not compile programs without certain types being provided
What calls SetGameControllerReference()?
nothign iguess? i can put it in the mousedown function but that doesnt help
While I understand what you're saying, the compiler exists beyond where c# ends and before .net begins. C# does not have APIs and C# does not have classes. C# is only a language, defining things like Syntax and Grammar. It tells you _how you can define class types_ (in a framework, or a compiler if you insist on writing one this way). &gt; C# itself defines the string class and object class Incorrect, because neither of these things are classes. They are primitive types that define the types of characters that can precede and succeed them in the c# language and where they can be used. They are a language construct which stands for something that will be implemented by a framework (or the compiler, if you're still insisting). &gt; A conforming compiler for c# must implement these classes. Incorrect, as these are still not classes. Additionally, a conforming compiler for c# does not have to compile these primitives into anything, it must only understand these primitives in the context of a c# document. A conforming compiler for .NET Standard _must_ alias these types according to the .NET Standard specifications. Other specifications may have different requirements. The language, on the other hand, does not have any requirements as to what implementations you create for a primitive like `double`. `double.ToString()`, for example, doesn't exist in C#, but .NET Standard and .NET Framework. Now, once you start talking about framework specifications, it becomes clear that you've muddied the answer because this question is in regard to a .NET framework specification, and a .NET-compliant compiler will never "implement" these primitive types, the compiler will alias these primitive types to classes that exist in a .NET Standard compatible framework, and compile those classes into intermediate language. &gt; A conforming C# compiler could exist that does not depend on .Net, however. You're correct, but at this point it is quite irrelevant, as we found out that a c# conforming compiler only need understand the text that makes up a c# document, and without a further specification such as .NET standard there are no other requirements.
You need to assign gameController1. Either in the Unity Editor Inspector like u/KuboSOS said, or by calling it from somewhere (i.e. an Awake() function in a MonoComponent on the GameController GameObject). &amp;#x200B; You cannot call a function on something that does not exist, which is what you're trying to do right now.
i dotn udnerstand anything..wtf
I guess you just needed to flush the buffer. Something like pipe.Flush();
Thank you, it was just confusing to me, I'll ask them, I just get some bad anxiety talking to professors and stuff
Welcome to programming; welcome to game development. You seem to have jumped into the deep end of the pool. You may want some 'intro to object-orientated programming' tutorials (or intro to C# specifically). There are Unity tutorials for little demo games to do, but if you don't know what the code they tell you to write is doing, it can be intimidating and unhelpful.
TS is a lot better than JS, but it brings it's own set of warts with it, too, and mixing it into a JS ecosystem often isn't smooth (on the other hand, it often is smooth enough). Fun fact: TypeScript and C# were both primarily designed by Anders Hejlsberg. You can get plenty done in either, but .Net/C# is better designed, more cohesive, mature, and performant. I agree with the poster above that said the primary benefit to Node is when your experience lies primarily in JS.
man im following the tictactoe tutorial, and i know what all codes do, but the guy in the tutorial is using "On Click" thing in the unity and just asigns the function, but that thing isnt working for me for fucks sake, so i decided to try it by scripting, and it worked on one of my scripts, but now when want to take the functions from another script and put it into this one, it doesn work, but if i have he function in he script from which i want to call the function, then it works
I totally understand; I'd just hate to recommend one thing and then have you not get credit because it wasn't what they wanted.
If you want to use C and C++ (or any language that compiles to LLVM) on the JVM you will want to look at GraalVM. The project adds on top of the regular JVM a number of technologies to allow for better language interop.
You are comparing Java of 2 decades ago with .NET of today, that isn't a fair comparison. You can easily build a REST Java app in seconds with Spring Boot these days. Java has changed, just like .NET.
All Classes, Interfaces, Enums, Structs and Delegates are types.
If anyone was previously wary of investing time into learning Blazor because it was experimental and Microsoft could pull the plug, this should allay those concerns: &gt;Blazor is no longer experimental and we are committing to ship it as a supported web UI framework including support for running client-side in the browser on WebAssembly.
We've done it! We're finally free of Javascript!
List always maintains order if you insert at the end..
Nice, I knew server-side would be shipped with .NET Core 3, but awesome to see client-side in official preview too!
I hate to throw the book at you mate [https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-334.pdf) &amp;#x200B; &gt; 9.2.2 &gt; &gt;Class types &gt; &gt;A class type defines a data structure that contains data members (constants and fields), function members (methods, properties, events, indexers, operators, instance constructors, finalizers, and static constructors), and nested types. Class types support inheritance, a mechanism whereby derived classes can extend and specialize base classes. Instances of class types are created using object-creation-expressions(§[12.7.11.2](https://12.7.11.2)). &gt; &gt;Class types are described in§15. &gt; &gt;Certain predefined class types have special meaning in the C#language, as described in the table below &gt; &gt; Class type Description &gt; &gt;System.Object The ultimate base class of all other types. See §9.2.3. &gt; &gt;System.String The string type of the C# language. See §9.2.5. &gt; &gt;... &gt; &gt; &gt; &gt; 9.2.5 &gt; &gt;The string type &gt; &gt;The string type is a sealed class type that inherits directly from object. Instances of the string class represent Unicode character strings. Values of the string type can be written as string literals (§7.4.5.6). The keyword string is simply an alias for the predefined class System.String.
This is so big. This is my entry into web technologies.
You're reading the words "class type" and saying that it means "class". "The keyword string is an alias for System.String." You presented my argument? &gt; "Certain predefined class types have special meaning in the C# language." All it means is that this class type name is reserved, as it is an alias to an implementation that doesn't exist in C#, but it's reserved so don't write a System.String unless you are the framework (or compiler, if you insist).
Not quite, still a lot of work to do for more then basic scenarios, but this does get damn close.
On Easter Friday, with 4 days of side project time already set aside. Microsoft you rock.
wow! this is great
You just need to put an asterix before your var name in your template, something like template: "{*path}", constraints: new { path = new MyConstraint() }
And the crowd goes wild 🤯
Silverlight wasn't experimental either.
Sure, this doesn't *guarantee* that Blazor will stick around for the long haul and gain widespread adoption. But there's at least some reason for greater confidence in this technology's prospects.
“*Free at last*, *Free at last*, Thank God almighty we are *free at last*.”
I think you are asking a classical compiler question: Can I write a compiler for a language in that language itself? How? For this, there are many key ideas, many of them pioneered by compiler writer Andrew Appel. In the following paper he tries to explain SOME of the things to think about. http://www.cs.princeton.edu/research/techreps/TR-451-94 In terms of an example, probably the simple C# C# compiler is the following function: public static class Expr { public static readonly Expression&lt;Func&lt;bool, bool&gt;&gt; Not = x =&gt; !x; public static Expression&lt;Func&lt;T, R&gt;&gt; Create&lt;T, R&gt;( Expression&lt;Func&lt;T, R&gt;&gt; e ) { return e; } }
touchee.
Nobody has to install anything beforehand with blazor. That's was the biggest issue with silverlight.
That's a good point.
You're getting downvotes but you're not wrong. &amp;#x200B; Difference here being, there is widespread support for webassembly, and that's all that is required for Blazor to be a success.
I was really just expressing a jaded attitude towards the technologies that sound promising and then are abandoned. Silverlight, Lightswitch, WWF etc... I'd certainly rather use Blazor than a JavaScript framework, but I also could have been using Typescript this whole time too. Nowadays I don't do much of any web programming so admittedly I'm pretty far behind.
I HIGHLY recommend reading the newest (4th) edition of Jon Skeet's C# In Depth. I'm currently reading through it for the first time and it's great!
Sonofabitch, I just got done upgrading everything to 4.7.2
I wrote a simple app with Blazor last year. It seems like a cool technology. As it was just an experiment, it is not a competitor to frameworks like Angular, but I'm excited to see what's new. I think that down the line, the WASM people might be able to work out the quirks with it and Blazor could be a viable competitor. Maybe front-end frameworks like Angular and React will remain, but certain modules will be written in WAMS, in which Blazor would be a natural choice for a .NET/Angular dev.
Well, learn something new every day I guess. Surprised I missed that.
It's insane the extent to which we've tried to make Javascript usuable and maintanable because it was our only option, and enough people are now invested in Javascript and Typescript that they spawned their own server side environment. It won't go calmly.
I also 'member XBAP.
Well it lived for 11 years, enough time to write a site and rewrite it thrice in the current speed of web trends development. So I dont really see a point here pointing out silverlight as a failure.
Which doesn't mean it can't be killed.
Silverlight OK but I've yet to meet someone who didn't work for Microsoft and invested time in Lightswitch or WWF because they thought it sounded promising.
And by "God almighty" you mean Steve Sanderson?
uh... no. I mean maybe yes but if somebody wanted to write heavy computation to compile it to wasm and then pair it with JS they will probably do it with C++. The results will be far better and the toolchain for that type of work is much more mature. Blazor is something specifically targeted as an alternative to Angular/React/etc. I mean it contains UI framework with databinding and all other bells and whistles not just a .NET to wasm compiler
What are the differences between blazor and razor
If it stays around then yea. Thank God. I always hated javascript.
Literally anything can be cancelled at any point in time, there's no law of the universe preventing anything. The point is when something is labelled experimental it's far more likely to be cancelled, and you're almost certainly not getting production support (which Blazor didn't).
That’s true. 🤔. I just read on the blazer site that the interoperability with JavaScript libraries is much better now. At the time I played with it, there were only a couple of UI events. I’ll check it out soon to see what’s new. Overall I like Blazor.
Lucky you. My company is still at 4.5...
We're comparing with Silverlight here.
Why are you switching between controllers at runtime? What does the other do? Because if I assume that GameController handles the game behaviour etc., it's unusual to have more than exactly one. Anyway, try this class body: ```csharp public Button button1; public Text text1; [SerializeField] private GameController gameController1; public void SetGameControllerReference(GameController controller) { gameController1 = controller; } private void OnMouseDown() { if (gameController1) // Null check { gameController1.RestartGame(); } else { Debug.LogWarning("gameController1 is null!") } } ``` The SetGameControllerReference() doesn't need to be called at the start now, because you can open the GameObject with this script in the inspector and set the gameController1 value manually. It's usually better than doing *everything* from code. Also, if gameController is null when you click, it will print a warning message instead of an exception. Use these null checks frequently wherever you think a value could be null. A null check on Unity objects (like GameObjects or Components/scripts) is done with `if (gameObject)`, and on other C# objects with `if (obj != null)`.
I'm not sure of the c# code but the logic is populate a table, find out the number of rows in the table. Loop through the tableRowCoubt, while its doing the loop through the rowCount, compare if the cell is = xValue, if it does then change the value of the cell to what ever text you want it to be
Just a side note: C# has generics. It does not have templates.
Websites that hijack the scrolling behavior are immediately closed. Shitty UX, why do people add that?!
My compagny: "What? There is something after 3.5?"
So because silver light was killed this is going to be killed? Sound logic.
Go read the readme. Blazor is not an alternative to razor.
Take note that only 90,000 developers participated in the survey.
1) Well, .NET Core exists and it generally speaking runs pretty fine on non Windows systems. If you do want to switch to JVM instead, I would suggest you use Kotlin instead of Java. Java will piss you off a lot if you come from C# backgroud. 2) I've never done ML stuff neither in Java nor C#. Obviously there should exist some good libraries for that. But still you may want to try Python or Julia instead, maybe you will like it more.
yessssss!!!
That's what they said.
Of course not but it means that you should evaluate the technology on its own merits not on what Microsoft says or wants. Specifically you should do your own research on the progress of wasm in mobile Safari
“Only.” It’s quite a good sample size. For example, using statistics to determine a sample size for a population of 10 *million*, with 1% error rate and 99% confidence level for a binary question would require only 16560 responses. A population of a *billion* would still require less than 17000. So 90k, even if it were skewed, would represent a great sample of the population for most, if not al, of the questions in the survey. http://www.raosoft.com/samplesize.html
r/iamverysmart
Still waiting. I should probably blink or something :/
 https://gfycat.com/AgileMetallicCormorant
Oh god. I can accept to work for 4.5 because the most importance features are already there. But 3.5? CLR v2 (old GC and old ThreadPool), no Task or async/await, buggy WPF implementation (prior to 4.0), no native zip support. It's just torture!
You don't say...
No one has said that this shouldn't be evaluated on its own merits. It's in preview now, so time spent doing that won't be wasted as it's got Microsoft's backing that it won't be killed off. You're the one who evaluated the project based on silverlights downfall, rather than on the projects own merits.
The global comparison of salaries is pointless.
It shouldn't, when does it happen?
... When scrolling.
Yeah it's pretty useless without frequency data. If wealthier countries just so happen to use C# more than Java, then that would skew the salary data very easily. The only comparison that is remotely meaningful is to compare salaries of C# and Java developers *within the same region*.
I am not going to deal with you again. Nothing on my site, hijacks your scrollbars.
Yes it is. The "hueman" theme you use adds JavaScript that listens to the mouse scroll event and adjusts the scroll behavior. The code is: function e(a) { H || b(); var c = a.target , e = j(c); if (!e || a.defaultPrevented || a.ctrlKey) return !0; if (p(y, "embed") || p(c, "embed") &amp;&amp; /\.pdf/i.test(c.src) || p(y, "object")) return !0; var f = -a.wheelDeltaX || a.deltaX || 0 , g = -a.wheelDeltaY || a.deltaY || 0; return K &amp;&amp; (a.wheelDeltaX &amp;&amp; s(a.wheelDeltaX, 120) &amp;&amp; (f = -120 * (a.wheelDeltaX / Math.abs(a.wheelDeltaX))), a.wheelDeltaY &amp;&amp; s(a.wheelDeltaY, 120) &amp;&amp; (g = -120 * (a.wheelDeltaY / Math.abs(a.wheelDeltaY)))), f || g || (g = -a.wheelDelta || 0), 1 === a.deltaMode &amp;&amp; (f *= 40, g *= 40), !(D.touchpadSupport || !r(g)) || (Math.abs(f) &gt; 1.2 &amp;&amp; (f *= D.stepSize / 120), Math.abs(g) &gt; 1.2 &amp;&amp; (g *= D.stepSize / 120), d(e, f, g), a.preventDefault(), void h()) } Seriously, you don't need to be an expert to notice that your page scrolls different than all other pages.
Could you tell me your IP? Then I can block you from the site and relieve you of the pains of every single blog post I make. It obviously brings you pain, let me help you.
Contains will check if the substring you pass in exists within the string. An equal comparison will check for an exact match.
Considering that you were either lying or blissfully ignorant about your own website I would not trust you to securely handle my ip-address. :-)
Made me giggle a bit
My main target with the bigger Blazor app I’m working on is in fact an iPad. There was a problem last summer, but Apple fixed it.
11 years is quite misleading. Silverlight launched in ‘07 and didn’t work on iOS. Steve Jobs’s Thoughts on Flash was published in 2010. That day, Silverlight was dead. It was never truly alive, because it completely missed the smartphone age. It found some niche apps, but not much else. Had it launched a few years earlier, it could’ve taken a slice away from the Flash pie.
I know it might be shocking, but the fact it didn't work on apples OSes does make it dead, just not usable on those shitty devices.
`string.Contains()` and `List&lt;T&gt;.Contains(T item)` are two different things. As /u/xMorgaan mentioned, `string.Contains()` will try to match substrings, but `List.Contains()` will try to match based on `T`'s `Equals()` method. The docs give a better explanation: https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.contains?view=netframework-4.8
You are really bad at communicating with other people. I have to see through all your toxic bullshit, to see that you are actually trying to provide some feedback. &amp;#x200B; You should consider, some training in communication. Because if you word your comments a bit better, we might actually listen to your comments. It seems you are correct, that there are some scripts affecting the scroll speed of the website. It does however not affect Chrome which is why I didn't notice it. As you can imagine, this is a hobby website, so yes I use a free theme and not everything is perfect, but I try to share some valuable insights with the community, that hopefully provides some value to someone. I have noted it down and will look into it at some point, but since I am a small business owner, and I need to run the business, I cannot set that much time aside for fiddling with this site. So I guess you will just have to live with it for now, or not visit the site at all. That is all up to you. But you seriously have to understand, that we are not put in this world to serve you and make you happy. And if you truly want to change something, you should consider how you approach people. No one, will EVER, follow your lead if you are just some screaming cunt. Consider writing the same comment this way instead: &amp;#x200B; \&gt; I really like your post, but while reading through I noticed that something is up with the scrollbar, I narrow it down to this script, maybe you want to take a look at that? Let me know if you need any more information about this. That way, the conversation starts at with a way better tone, and we can achieve rapport faster. Ultimately it comes down to, what you want to say, and how do you make the other end receive the way you intended it. It is basic psychology and is basically what this blog post is about. So if you had read the blog post before commenting, you would have been better off. The biggest issue in code reviews, are people on the team that act the way you do. It is often very junior developers, that feel like they need to prove something, and the only way they know how is to throw their own poop at everything they disagree with. This changes nothing because no one wants to listen to a guy like that. So part of my job is to stop this, and create a culture in the team that removes this toxicity.
It not running on one of the two major smartphone platforms is a non-starter to the original promise of “everywhere”. Silverlight wasn’t better enough to compete with Flash on the desktop, and was never viable on mobile.
&gt;Windows is the 2nd most popular platform (1st in developers' primary OS) while having 50% I don't think it is that great cuz on desktop he has around 80%.
awesome!
I think it was meant to be sarcastic.
I am not the one who originally mentioned Silverlight. I just point out that having Microsoft backing does not make a risky new tech a sure thing.
Maybe look into either CsvHelper or FileHelper library? Both, I think, have options to ignore things like that when reading a CSV. [Example for CsvHelper, note the configuration object](https://github.com/JoshClose/CsvHelper/issues/913#issuecomment-365651237)
&gt; move some of these projects into their own repo so I can use them on multiple different projects That's a key indication that those projects should be producing a Nuget package (i.e. a packaged up DLL) which other projects can pull in as a package reference. For open-source stuff, you can push straight to Nuget. For closed-source stuff, you typically opt-in to a service like MyGet which provides a private Nuget repository experience. We generally have one repo for every DLL that is created, unless there are two or more DLLs that have heavy interdependency and you'd never use the one DLL without also using the parent DLL.
Agreed. They could qualify it by giving median wages by country as comparison, wouldn't have taken that much time to do.
What point are you even trying to make. That products die if they aren't good? Congratulations. That's what products do. I think you're confusing a successful product with a supported product. No one here is saying blazor won't die. What we are saying is that it has less chance of dying now Microsoft has moved it into preview. No technology lives forever. Ps at no point did I claim that a products own merits are the only thing that affects it's lifecycle. Silver light was superceded by open web standards like HTML5. its merits had gone by that point.
/r/woosh
So in case you missed it the conversation went like this OP says "If anyone was previously wary of investing time into learning Blazor" Some guy brings up Silverlight as a counterpoint which is perfectly valid counterpoint. Some guy says &gt; Nobody has to install anything beforehand with blazor. That's was the biggest issue with silverlight. Which is 100% not true. The biggest problem with Silverlight and what killed it is that Steve Jobs decided he didn't want it on iPhone and iPad. You are also doing wrong claims that open web standards have anything to do with the death of Silverlight. The death of Silverlight was the doing of Steve Jobs, period. Apple are not as powerful today as they were back in the day but if wasm had existed back then and Steve Jobs decided to kill it he would have succeeded and it wouldn't matter one bit if it is an open web standard. Say Google decide tomorrow that they don't like wasm anymore I guarantee that this is the end of Blazor. The things needed to make it truly fast like GC integration, reference types and direct access to the DOM will never happen in the engine used by 80% of the users. Good luck with your "open standards" at this point. This thing is a Game of Thrones. It doesn't matter who has the birthright only who manages to kill the others.
The pack URI refers to the image through the file system, which is problematic because the IDE and the application have different file system layouts. This results in the picture being displayed correctly in the designer but not in the actual application. The usual way to refer to images (or any resource in general) is through `pack://application` URIs which instructs the IDE to embed the image into the application so that the app can find it without being affected by any changes in the file system layout. I think all you need is change `siteoforigin` to `application` within the URI, click the image file within the Solution Explorer, open the Properties panel and set Build Action to `Resource`.
Agreed, the move that they have made to invest in open source is paying dividends as they have and continue to strongly positioning themselves in this space.
The reason I would want to do this is because the code in these shared projects are not complete yet. I want to have all the code available in a single solution so that I can make edits to the shared projects without having to open up another instance of VS
Yeah, net core is getting more popular. Even companies with older software slowly tries to move some parts on Linux using Core, some "microservices" for beginning. I really like C# language improvements and with additional Core development it will be great to use for developing various types of projects.
They are doing frighteningly well. Where are their big competitors? I wonder why Google and Facebook aren't trying to do the same, or what Microsoft benefit from making all these tools.
Right, the problem with saying "Steve jobs decided he didn't want it " and "SIlverlight required an install" go hand in hand. If Silverlight didn't require an install (let's say it ran using javascript) then Jobs could not have killed it, because it would just work on a browser. do you not see how your argument goes hand in hand with that comment? SIlverlight needed an install that jobs didnt want, ergo silverlight is dead. ITS LITERALLY THE SAME POINT. &amp;#x200B; Your last paragraph is exactly what we have been saying. ANY TECHNOLOGY CAN DIE. LITERALLY ALL OF THEM. Saying not to learn Blazor because it can die is a ridiculous statement. For the 107th time, no one here is saying Blazor will live forever. It just now has the actual backing of Microsoft. A company with a lot of sway over the client side tech world, especially now they're invested in Chromium. When it was experimental Microsoft could have pulled the plug at any moment. Now it is preview, it only matters if WASM dissapears. WASM being killed is much less likely than Microsoft pulling the plug on Blazor. Hence it being preview means it has more chance of staying around.
Since Oracle 'poisioned' Java to be the next annoying Cobol thing only large conglomerates will use, C#/.net Core is the next hottest thing. Microsoft knows how to throw lots of people on stuff. .net Core has lots of drive in the industry right now. Also because people are tired of some of newer languages antics. Go, Rust, Swift and others being more or less special purpose languages pushed for limited usecases. While C# is more and more becoming the new Java, that runs everywhere. Already 10000 games run on multiple platforms in C#, plus having a robust IDE helps a lot. I'm a Java programmer at heart and it will probably finance my retirement, but hell, it just fun to run C# in a Linux environment and it just works. The only missing thing is a good non-Windows gui framework.
I'm not sure what you mean. Can you give us a rundown of your application structure? What different projects do you have? s are all part of the same application (for example a website may have a business layer project and a data layer project) ?
It is obviously not the same point first of all Steve Jobs could have decided that he wanted it and then it would be alive despite the fact that it requires install but more importantly Steve Jobs could decide to kill whatever standard Silverlight relies on in mobile Safari and thus prevent Silverlight from working.
Facebook is in constant survival mode. They have to change, because most of the kids are on Twitter/Instagram now and its much harder to monetize there. They have no interest in pushing an own programming language. Google has created the Go language for backend work; they are pushing Kotlin as Java replacement, and created Flutter that uses Javascript on mobiles to create apps. They have their hands full. C/C++ is still running and funded strong in many industries and the global 10000 will stick with Java/PHP for a long time. Microsoft is pushing C#, because it gives them an edge in the landscape. Everybody is constantly talking about the strides .net Core does. With Unity and Mono, many games are already written in C#. They want to make it ubiquitous, the next Java, if you will. When C# is runnin' on Linux, where will most of the Linux VMs run? In the cloud. Microsoft made 5 billion last year with the Azure cloud. Windows 10 will - sooner or later - become a subscription service. There will a large chunk of C# apps run on. No other player is looking for that. Google tries to build the next gen Android ("Fuchsia") that gives them the same data streams they have now, but you can be very sure that C# will run there too.
Thanks, your answer and example really helped me understand this better. I just have a question what does it mean when we put T generic in front of the method? Does it mean it will have to return the type of that generic or what? Like: static T ProduceA&lt;T&gt;() {}
Resource files. It's super simple and built in
A one point everywhere reported 4.8 was going to be the last version of [Asp.net](https://Asp.net) framework outside of security fixes. So there is that also...
It's the same with the wage gap. When you come to salaries, you need a more multi varied analysis
Oh, nevermind, realised that it’s just type of method like it would be int or void instead. I’m not used to strictly typed languages
Oh, nevermind, realised that it’s just type of method like it would be int or void instead. I’m not used to strictly typed languages
Observables is better to push information to subscribers and should be used when the receiver is relatively fast compared to the producer. IAsyncEnumerable should be used for pulling data when the producer is fast but the receiver is slow.
This is the best advice here. CSV is a tricky beast. It's deceptively simple in concept, but there are so many weird scenarios that a proper CSV parser has to handle that it can get *very* problematic, *very* quickly. First off, OP's code is inflexible because it doesn't handle different delimiters. Contrary to popular opinion, "CSV" doesn't stand for "Comma Separated Values". It's "*Character* Separated Values", and using a pipe character is a pretty common occurrence, especially for data that is likely to contain commas. But even with that, there's a way to have separators inside of field data. And that's by wrapping the field data in an encapsulator. And then, you have to handle a double-encapsulator value to allow *that* character literal to be contained in the data as well. So a decent CSV parser needs a line *terminator*, a field *separator*, and a field data *encapsulator*. It needs to test for all sorts of edge and corner cases, and it needs to be able to stitch fields back together if it does a first-pass split only to find out later that there was an encapsulated data field holding a given delimiter (which can be a separator *or even a terminator*). I speak from experience. I wrote a CSV parser that handles all of this stuff properly. (And it has been in production use for *years*, having correctly processed several terabytes of CSV files by now.) Don't write your own if you can help it.
Demand drives salaries. There are more Java developers, so they make less on average. If there were 5 c# devs for every job posting, c# salaries would fall.
Exactly. It just denotes what type that method will return, in this case the definition says it'll return whatever type is passed as the generic argument.
I just find it weird when they put interface in front of a method or a parameter of method, like in this example I found inside Startup.cs of asp.net core app: public IConfiguration Configuration {get;} and that’s the end of the method. Or public void ConfigureServices (IserviceCollection services) {services.AddDbContext.....} So in this case if I put interface name in front of a parameter that means I will be able to access those methods that interface defines using that parameter?
For a moment I forgot that Google has Go and Flutter and that Facebook has React but even then, Microsoft definitely seems to be the most powerful of the them when it comes to developer tools. My recent projects have all been created with VS Code and exclusive in TypeScript and of course I use Github as my Git hoster. And they're all fantastic tools—I truly love TypeScript.
This is not a support forum stop garbage
My solution has 3 projects. A UI project, a business layer project, data access project. The business layer and the data access layer I would like to eventually use on other UI projects. My issue is, that right now I have these 3 projects in a single solution, also in the same repository. While working on the UI project, I can easily go into the Data Access project to make changes. But if I move the Data Access project to another repository, then use it as a Nuget or just from a DLL, then when I am working on my UI project, I wont be able to easily access the Data Access code inside my current solution. If I clicked "go to definition" on a Data Access object, I would only see the metadata file of what that class has, but not the implementation. Hope thats easier to understand lol
Yeah I get it now. My next question is, why do you think they belong in separate repositories? &amp;#x200B; A typical application will have 1 solution, 1 business layer (could be multiple projects), 1 data access layer (again, could be multiple projects or just 1), and many presentation layers (Website, API, Android App, whatever). These all belong in the same repository. Why do you want to move your business layer into a separate repository?
&gt; IAsyncEnumerable should be used for pulling data when the producer is fast but the receiver is slow so it doesn’t tie up the receiver’s main thread for too long. You mean when the producer is slow. That’s why it frees up the thread while waiting for the next element to be produced.
In what way isn’t it? More than half the posts in this forum are newbie questions.
That's not how I understand it. When the producer is fast you use the observable as the producer can constantly update the observable data without affecting the receiver very much. When the receiver is slow you don't want a fast producer to be constantly bombarding it with data, so instead the receiver uses the IEnumerable and only asks for data from the receiver as it becomes ready for it.
Just because others are garbage it doesn't mean you have to post garbage too.
ObserveableCollection is used when the UI is changing a databound collection. IAsyncEnumerable is used when reading from a source with latency like a database or web service. So generally speaking you read from a IAsyncEnumerable and shove that into a ObserveableCollection, which is databound to the UI.
My problem comes when trying to reuse the Data Access project in a new project. I would want to project to be in the new solution, but also be able to be committed to its original repository. Maybe I am thinking about this wrong. If I was to create a new project where I would want to use the Data Access project, would I just add a new UI layer to my original solution?
They are trying to solve two different issues. \`ObservableCollection\` is \`OnPropertyChanged\` on steroids. When ever the collection changes it will fire an event that can be listened to and GUI applications can hook this event to update the UI through a binding so you don't have to manually update the UI at some point. &amp;#x200B; IAsyncEnumerable give us the ability to have an async enumeration. If you have a data generator where it makes sense to have an async (File access, web call etc) then you can use the IAsyncEnumerable to process the results as they come in using async await to free up the thread while waiting. &amp;#x200B; They may be used together but its not an either or situation more of a use both if it makes sense situation.
After some research, I found out that just like integers or strings have built in methods in the language that we can use on them, for example if we put some int in parameters as arguments, so can we do the same by putting interface in front of the argument and then use those methods on the argument variables because they have a type of that interface, right?
Welcome to the wonderful world of HL7 , the wild west of standards. What is happening here is that some EMR decided that they were going to either appropriate a different message and just retype it or ignore the message structure all the way around. &amp;#x200B; So, you basically just need to do the same thing. Likely, they are using the ADT message format. You should just do the same thing, but change the MSH headers to just day that the message is a SIU. Just make sure to update the MessageType and TriggerEvent in the MSH and any other potential references to the TriggerEvent that could be somewhere in the EVN segments. Alternatively, just create a custom message format based on AbstractMessage and toss in whatever segments you want there. &amp;#x200B; Either way you go down, be prepared for this to be a common practice, so choose a tactic that will work best for you over time.
I get that I made a mistake posting here, but it doesn't mean you have to call my post garbage. I'm asking because I don't understand.
I am creating the message not parsing it.
Actually, reading your comment history, your reply makes sense.
As a .NET dev myself I'd be happy for it to get more popular in the future but I don't really see it standing against Python. It's super popular nowadays and they're adding static type checking to it. If that takes of, the future will look... interesting for .NET. But hey, .NET seems to be in a fairly okay shape nowadays, .NET Core saved it from oblivion.
So much better than fumbling with returning an IEnumerable&lt;Task&lt;T&gt;&gt;
The main con imo is that the frameworks arent that good. Express is outdated and sucks, but all the tutorials are on it. If you are building a damn rest API I want an opinionated framework dammit
&gt;me thing, but change the MSH headers to just say that the message is a SIU. Just make sure to update the MessageType and TriggerEvent in the MSH and any other potential references to the TriggerEvent that could be somewhere in the EVN segments. Alternatively, just create a custom message format based on AbstractMessage and toss in whatever segments you want there. I understand that. This tactic will be the same whether you are parsing it or creating it yourself. &amp;#x200B; If you know that you need to send this SIU to EPIC or Allscripts, then create a custom SIU based off of the AbstractMessage type. So, start with [this message](https://github.com/duaneedwards/nHapi/blob/master/NHapi20/NHapi.Model.V281/Message/SIU_S12.cs) and just call it Epic\_SIU\_S12 and pop in whatever additional segments you need.
A real application has many projects, many UI layers etc. They are all part of the same application, so they all live in the same solution, so they all live in the same repository. Think of your application as your business logic, not your UI. If you were a Shop in real life, your business is not the store front. It is not the warehouse where you store your goods. Its the bit where you take a product and sell it to a customer. You could sell it to someone in the store front. You could sell it to someone online. You could store some products in a warehouse. You could buy some products as they are ordered (i.e. talk to another service and get the product). Your business is still the same, it's a shop. The "implementation details" (product storage, where the sales happen) are just that, details. Not the core of your business. In this analogy, your "Solution" would be the name of your business. Everything under that name is all part of the same business. All working towards the same goal. &amp;#x200B; In terms of software development: Your "Application" is not a website, it is not a database. It is the layer that does all the work, the business layer. You could have 4 different database providers and 16 different UI layers in one application, it doesn't matter. What matters is the business layer. &amp;#x200B; Your solution should contain your Application (your business layer, which can consist of many projects) and everything required to make it work. That means all your UI projects and data layers should be part of that solution. &amp;#x200B; Your git repository should contain this solution and all of it's projects.
Java devs make (slightly) more than C# devs on average. The worldwide comparison is totally meaningless. It simply means that there are more Java devs in countries where salaries are in general lower. Probably removing Brazil from the survey would put Java ahead of C#.
Just a point of clarity: Flutter is written in Dart and doesn't have anything to do with JavaScript. Dart is another language that Google made. Another Dart primary is AngularDart an alternative to the current Angular written in TypeScript (Microsoft's).
I used resource files with Infralution.Localization.WPF library. The library allow you to change the locale on the fly. [https://www.codeproject.com/Articles/35159/WPF-Localization-Using-RESX-Files](https://www.codeproject.com/Articles/35159/WPF-Localization-Using-RESX-Files) But there are other libraries you can use.
Dart compiles to JavaScript in the end. So what Flutter truly runs is JS.
Hm... these interfaces are used to *pull* data, right? Not push. I’m not sure producer/consumer is the best description, but if we call it that, the one invoking MoveNext etc. would be the consumer. The consumer being fast or slow doesn’t affect the producer, but the reverse does, which is why you might want to use async.
Thanks this explanation really helped me
Events (ObserveableCollection) versus on-demand iteration (IAsyncEnumerable) where the contents need await to access.
Thank you, so I guess I should be using observable collection between the frontend and backend and async enumerable between the backend and the data layer?
Thanks :)
Can you use the get-credential cmdlet instead of trying to do your password retrieval through c#?
Oh! I didn't know this was possible. I thought there would have to be no user input in the power she'll script itself if it was being run from the application. I'll try this out. Thanks!
Is the Observable technically not "pushing" data? The receiver is passive, it just sits there watching, therefore the data is "pushed" when the producer updates.
I think 4.7.2 is the big one to hit since it comes with the latest .net standard compatibility updates. 4.8 looks more like some minor bug fixes and performance optimizations.
You can also use yarn, which is vastly superior to nuget, however. There are options in the JavaScript universe, something I wish we had more of for package manages in .net. We really have Nuget, that's the only main supported one. &amp;#x200B; Otherwise, yes, C# is much better than JS.
I do know the difference, I know observeable collection uses events and IEnumerable are on demand iterations, I just wanted to understand what is better to use for WPF app
`IObservable&lt;T&gt;` does push individual items to an `IObserver&lt;T&gt;`. `ObservableCollection&lt;T&gt;`which OP asked about is actually yet another thing altogether though. While it does "push" change notifications by raising events, it can/must be read and modified like any other `IList&lt;T&gt;`. `IAsyncEnumerable&lt;T&gt;` doesn't fit perfectly into either category, I suppose. It is modeled after `IEnumerable&lt;T&gt;` which is a pull model, but at the same time each pull gives you a `Task` which will arguably "push" the result value to the continuation callback(s) whenever the task is completed.
Removed: Rule 5.
Flutter/Dart supports ahead-of-time compilation on Android and iOS. For iOS it's mandatory.
.net and Python do different things. Python is rather backend oriented, while net is more application oriented. People coming from the server side of things might prefer Python because they are used to it, while people coming from application/desktop side (and Windows) start with C#. With [ASP.net](https://ASP.net) Core, they can now do most of the thing Python does well; and the deployment env and results might be a little bit cleaner and more performant than Python. Plus you don't have the dependency hell.
That makes sense, thanks for a little clarification!
Yup, what the method is doing is specifying the type of each parameter which in turn tells you what methods/properties you can access on the parameter passed in. It also tells you when you're calling that method what type(s) you can pass in to it. So, as you say, just like when you specify int or string you can also specify a class or interface name and you'll then only be able to pass in classes of that type, that derive from that type, or implement that interface. Inside the method you'll be able to access methods and properties that belong to that type. If it helps, don't think of int, string, etc as something special that the language gives you methods for, they're just another type like any class you write, they even have their own class definitions (`Int32`, `String`), it's just the language gives you some syntactic sugar in the form of keywords that most people use when they're referring to them (`int`, `string`).
 I mean, it does change the code behavior, that's the point. However, there is a (small) difference between ?. and != null, != null can be overriden (take for instance Unity overrides it so that it can return true, even if it's actually false if the native resources are disposed but the C# object still exists), while ?. can't.
That makes a lot of sense. I was definitely thinking of the UI as the main part of the program but I think I understand now. This is very helpful, thank you for your time.
Pretty much. Started with Java, but the overall lack of continued features and Oracle’s obsession with enterprise lead me to C#. Loved it, as I could pretty much write C# without looking at any documentation. Given an IDE with predictive typing, the transition is near seamless.
Incorrect, Dart compiles down to a JIT engine and uses Skia for rendering (written in C). * [See: https://en.wikipedia.org/wiki/Flutter_(software) ] * [See: https://skia.org/dev/flutter ]
Python is more templating and data science orientated than backend...
I've gotten the impression that the kind of code people have to write to make python robust are quite a few anti-patterns and runtime error exceptions that the C# compiler catches, leading to a lot of technical debt when done on larger scale.
Also, to clarify, I was only ever taking about the enumerate interface, not the observable collection. Those two aren’t really comparable.
Not sure what you mean exactly mean by "server side" or "application oriented", these are such vague statements but modern .NET is all about web with ASP.NET Core being it's flagship framework whereas Python is an all-rounder with a substantial stronghold in web but also in scripting, AI or as an academic language. A huge advantage of C# over Python is static type checking which makes C# suitable for large-scale projects and if (or rather when) Python gets that feature it's prone to enter .NET's terrritory. With its massive popularity and universality, the possible scenario is companies might start switching, to a slow .NET's demise. Of course it won't die, it'll be out there for a long time with Microsoft backing just not as popular - but so is VB.NET.
Then I see why React Native is way more popular.
Not sure what you mean exactly mean by "server side" or "application oriented", these are such vague statements but modern .NET is all about web with ASP.NET Core being its flagship framework whereas Python is an all-rounder with a substantial stronghold in web but also in scripting, AI, as an academic language and whatnot. A huge advantage of C# over Python is static type checking which makes C# suitable for large-scale projects and with that feature available in Python it's prone to enter .NET's terrritory. With its massive popularity and universality, the possible scenario is companies might start switching to a slow .NET's demise. Of course it won't die, it'll be out there for a long time with Microsoft's backing just not as popular - but so is VB.NET.
This! Very good news
Fuck yeah boys. We are kicking ass all over the place. When Microsoft puts their weight behind something this is the result.
A Java developer that can see sharp O.O
Sounds like you need a book on object oriented programming before a book on c#
Yeah, so far. Look at PEPs mentioned [here](https://github.com/Microsoft/pyright#type-checking-features). Python's getting serious with types. It's a bit of a paradigm shift, yes, but it's beneficial and the community might follow.
Udemy has a couple of inexpensive courses, and I've been happy with everything I've purchased from them. [https://www.udemy.com/csharp-tutorial-for-beginners/](https://www.udemy.com/csharp-tutorial-for-beginners/) [https://www.udemy.com/course/csharp-intermediate-classes-interfaces-and-oop/](https://www.udemy.com/course/csharp-intermediate-classes-interfaces-and-oop/) &amp;#x200B; That said, knowing when to break your code out into a class is a not a hard science. It takes a lot of experience and even then it's an iterative process. I'll start breaking the code out into what I think is the logical way to organize it, but sometimes classes will get cumbersome or difficult to test and I'll break parts of those out into other classes. Essentially, you want to a class to have one responsibility (System.Console does one thing - manages console input and output) and it has to be something that is not trivial (you're not going to create a class that only does for loops). Ideally, the code will be reusable, but that's more of a class design thing than deciding when to make a class.
There is huge selection bias: * Devs in 3rd world country don't use FOO because FOO is too expensive to deploy in production. * Devs on Wall Street use BAR because they can afford it, so BAR garners insane salary. * Everyone needs BAZ, so you can see the price/pay for BAZ to have large ranges.
The only real solution is to make key functionality only available on a web server or maybe burned into a hardware dongle. Aside from that it's a question of effort to break any security scheme. That said, Azure websites are free for low traffic work. And you don't need much to host a license key check.
Also consider the Windows Store to manage this all for you.
Okay, your constraints are too tight. If you are interested in selling software, you need to invest in something that enforces that license. If you roll your own, it will absolutely have bugs and be trivial to circumvent. Even phoning home to ensure that "this installation is paid for" is trivial, because you can MiTM that request, unless you enact countermeasures there too. Anti-piracy and DRM are hard problems that pretty much everyone gets wrong. You've also mentioned that there's a platform, but you haven't really detailed what that platform is. That's also going to make it hard to answer your question. Here's what everyone else does - They host their application over the web (yeah, it costs money) and they charge a subscription fee to access those features. Every month you're using the tool, you pay a dollar or 10 or 15. If you're using a standard cloud provider, this shouldn't cost a lot of money, so long as you **actually scale your app down**. If, at the end of the day, the application isn't making enough money to maintain, then you can just shut it down. Even then, you'd have to deal with account sharing, but that's easily circumvented by banning common proxy IP's and maxing out at N concurrent IP addresses per subscription.
Here's some general advice about security - don't build a perfect solution, build an adequate solution. Ask yourself this: what is the monetary gain for breaking your security? You need to make it more expensive for pirates than its worth. Money and time are the same here. Here's a personal example. A pirate could conceivably distribute a tool that generates a special file to crack my game [ChessCraft](http://www.chesscraft.ca/). The full version is free, but you can spend 3$ to stop unskippable 10 second popups. I write to a local file to store whether the player has paid 3$ (now I can worry less about the Play Store). The file is a hash of the unique device ID, and a plaintext string somewhere in the executable. If it exists, I figure they paid. This is a bad security model. However, if someone wants to reverse all that to save 3$ on an otherwise full version free to play game... I'm not going to stop them.
Mr. Rodgers is the only hero of mine that doesn't show up on the [ASP.NET](https://ASP.NET) Core community standup.
One way to do it is to have a text file called Registration.txt. In it is simply their name and email address along with the hash at the bottom. If they change a single letter the hash won't match up and the software won't work. The hash can be total shit, because anyone can just modify the exe if they really want to circumvent your software.
Did they end up not doing the planned improvements to media controls and webview as they mentioned in this blog post? https://devblogs.microsoft.com/dotnet/update-on-net-core-3-0-and-net-framework-4-8/
Sorry, I strongly disagree with you. There's no silver bullet, so there's no competition. *Standing against* any language isn't the actual purpose of any programming language, rather *solving problems*. Python and C# both are damn good at solving problems, especially in their *dominant* niches. Python is like the **English** language, universal, everyone knows it or at least desires to learn it. However, C# is like the **Spanish** language, beautiful in its own way, loved by a lot of users, and they highly prefer it over English. What you are saying is, Spanish wouldn't stand against English. No, that's not the case. There's no competition between these; we *falsely think* there's competition, but there isn't. Static typing isn't just coming to Python; it's coming to **PHP** too. And PHP owns around 80% of the back-end. Does that imply now PHP will have the 100% back-end because it's widely used, a great number of PHP developers are there, it's very cheap, or static types are coming?! NO WAY! Some solutions are more convenient in PHP, some are in Python, some are in C#, some are in Java, etc. **These old languages are time-tested, not going anywhere, anytime soon.** I personally think, the strongest niche of Python is **academia**. And C# is a rock-solid solution for the giant **enterprises**. I'm not saying Python isn't used by enterprises or C# isn't used in academia, but these aren't their strongest niches. Researchers prefer a language that offers relevant libraries and an easier syntax (as many of these researchers aren't from CS background). Python is a better fit for that. Microsoft knows enterprises very well, dominating this business from the last couple of decades. MS offers hundreds of solutions to huge corporations. From OS to IDEs, programming languages to frameworks, database to cloud service; a whole ecosystem they've built and nurturing it from last around **40 years**, by spending billions of dollars, with the help of millions of competent developers. It's not going to fall just because of the rise of a language, Python.
How would that not get copied?
thanks for the info!
That number is not a problem. A bias in who responded might be.
I haven't used WinForms in a few years, but if I remember correctly keys like this are filtered out by default and you have to override some method to be able to receive them in your regular keyboard events. Unfortunately I can't remember what the method was called.
It would get copied but then everyone who has a copy has the email address of the guy who leaked it Or op can try to get some hardware ID (like hmac or drive uuid) and do the SHA there but that would require an exe to run before payment.
Remember, I think the Stardock CEO said something like this at one time, who was again copy protection of their software: \- Don't punish the legitimate consumers of your software by making user and activation a "pain in the ass" \- Pirates weren't going to buy your software anyways, so why do you care if they have it - make it easier for your legitimate customers.
Z
Sure, but unless OP is gonna send that email address back to a centralized server, which they said they already didn't want to do, the fact that there's an email address doesn't matter.
&gt; IAsyncEnumerable is used when reading from a source with latency like a database or web service. Specifically, a *streaming* source. No benefit when you are sucking the entire results of a web-request into memory first, then iterating over the json/xml in the body.
A friend who worked in licensing told me, "we're helping the good people stay good."
Hi, thank you for your answer! It didn't helpt, so I tried to delete the Image and then simply just drag&amp;dropped the original file from the desktrop, and it is working now. I think I just give up trying to understand those glitches(?) and just continuing on programming. Thanks! &lt;3
It may depend on what you mean by *streaming*. IAsyncEnumerable is very useful in cases where your web request returns a paged resource. You would still suck the entire results of your web request into memory first, and iterate over the json/xml in the body, but you would simultaneously start a new request to get the next page.
Just charge a low price. I used to pirate anything and everything back in the day, but now, where most apps i buy are android apps for 3 to 10 quid a pop, it's not worth the effort of pirating the apks, the play store price is low enough to be value for money to be able to easily install across my devices Do people really still download and run .exe files from wares sites these days ? Surely there is a 96 percent chance of malware strike.
So your current revenue is \~$0, damages so far have been $0 and your budget for DRM is $0. I'd say you are wasting your time worrying about this. Work on your actual product instead. One idea though: A cheap way to discourage illegal sharing is some kind of watermark personalized to the buyer.
... and the static typing is coming to Ruby as well. Not sure what kind of metric you're using with these stats for 80% of backend being PHP, as for developer mind share it definitely isn't the case. Also I don't agree that Python's strongest niche is academia, it's such a versatile and popular language. Even the survey you've linked [states](https://insights.stackoverflow.com/survey/2019/#technology) it's more popular than C# amongst professional developers. In comparision with PHP and Ruby, Python is in an unique position being so extremely popular. Once it starts competing directly with .NET things might get a bit sour for the latter. [PYPL](https://pypl.github.io/PYPL.html) (compare it on the logarythmic scale) ranking already shows how much traction it gets at the cost of the other languages year by year. Companies vested in .NET will keep using it but the developer mind share might start to slowly shift, just as frontend shifted so much towards JavaScript that it was able to even take over the desktop development. I'd love to see some up to date stats for GitHub but couldn't find any. I think that would be quite telling. Well a quite rudimentary way of comparing is to go to trending pages, for [C#](https://github.com/trending/c%23) and [Python](https://github.com/trending/python) and comparing the amount of stars. This shows how much more popular Python is, at least on GitHub and (in some way) by extension in the open source community. Of course I'd like for .NET platform to fare well, it's what I do for living. I would definitely not trust Microsoft blindly and wouldn't rely solely on their brand or position to keep C# going well. When the time comes .NET platform better have enough to show for itself aside from being backed by Microsoft, it's not 90s anymore. Developer mind share, open source projects and community is what's essential. Well, best of luck both to .NET and to Python. But for now it's entirely hypotetical and pessimistic (especially for .NET developers such as me), viable however, scenario (the first step has already been taken) and even if it happens it would take a significant amount of time because of how much .NET is entrenched already. It won't fall, no, but might take a direct noticeable hit in a long time scale. Well, I hope it won't happen.
... and the static typing is coming to Ruby as well. Not sure what kind of metric you're using with these stats for 80% of backend being PHP, as for developer mind share it definitely isn't the case. Also I don't agree that Python's strongest niche is academia, it's such a versatile and popular language. Even the survey you've linked [states](https://insights.stackoverflow.com/survey/2019/#technology) it's more popular than C# amongst professional developers. In comparision with PHP and Ruby, Python is in an unique position being so extremely popular. Once it starts competing directly with .NET things might get a bit sour for the latter. [PYPL](https://pypl.github.io/PYPL.html) (compare it on the logarythmic scale) ranking already shows how much traction it gets at the cost of the other languages year by year. Companies vested in .NET will keep using it but the developer mind share might start to slowly shift, just as frontend shifted so much towards JavaScript that it was able to even take over the desktop app development. I'd love to see some up to date stats for GitHub but couldn't find any. I think that would be quite telling. Well a quite rudimentary way of comparing is to go to trending pages, for [C#](https://github.com/trending/c%23) and [Python](https://github.com/trending/python) and comparing the amount of stars. This shows how much more popular Python is, at least on GitHub and (in some way) by extension in the open source community. Of course I'd like for .NET platform to fare well, it's what I do for living. I would definitely not trust Microsoft blindly and wouldn't rely solely on their brand or position to keep C# going well. When the time comes .NET platform better have enough to show for itself aside from being backed by Microsoft, it's not 90s anymore. Developer mind share, open source projects and community is what's essential. Well, best of luck both to .NET and to Python. But for now it's entirely hypotetical and pessimistic (especially for .NET developers such as me), viable however, scenario (the first step has already been taken) and even if it happens it would take a significant amount of time because of how much .NET is entrenched already. It won't fall, no, but might take a direct noticeable hit in a long time scale. Well, I hope it won't happen.
"Application oriented" is more forms, packaging, giving things to customers they install on their desktops. "Server side" is more stuff for websites, scripting, templating, blogs, starting servers, this kind of stuff. I know there are few "real" gui applications written in python and then using some pySomething framework to show guis, but these are rarely used and not the to go frameworks to start with. Its rather Python programmers tasked writing gui programs. Allowing asp net to run on core is a small revolution, because this opens now the backend/cloud to lots of .net devs, which is a space occupied by Python and Java in the Enterprise that is set on Linux as server os.
I have seen tutorials how to 'secure' your PHP app, and it looks like a nightmare if you not start with that. When I talk to serious cloud devs and admins, they praise Golang and drop some shade on Python for a while now. This explains it a little: [https://www.quora.com/Why-did-Google-develop-Go](https://www.quora.com/Why-did-Google-develop-Go) I like having lots of options in the toolbox, but I never ever got into Python. With .net core, the whole microservice stuff is just a couple of line of code and it just end up as an .executable that runs at the target platform. Thats the same goodness that Go has, without their strange userbase ;)
Good point.
I've never heard of the approach to commit the version that was updated by the CI server. This essentially doubles the commits in the repository. I totally agree that this blows up the commit history. What advantages do your colleages expect with this behaviour? The version is only useful if a customer reports an issue to identify which exact version they have. So do your coworkers search through the svn history to find the right revision? Personally I prefer your way by looking up the revision through the CI build number.
&gt; It may depend on what you mean by streaming. I think it's fairly obvious in this context that streaming means more than one asynchronous operation may be required to completely iterate the source. If you know you will never need more than one asynchronous operation to fully iterate the source, there is no point to using IAsyncEnumerable.
I was hoping for a performance comparison. It is high time someone does one including with React &amp; Friends.
You can use a (git) tag instead of commit, increment it based on last tag number. This keeps it in version control without extra per build commits.
i was referring to creating local copy of tested variable, which is often forgotten by programmer in regular **if** case
If your branching strategy can support it, use GitVersion to automate this away. https://gitversion.readthedocs.io/en/latest/
Wish people would get over that . Its 2019. Yeah I got burned as well but that was pre open source committed MS, it was a plugin and was a separate product. I was leary of Blazor with the experimental label but MS has now made the best commitment I could see them making - they are rolling it into [asp.net](https://asp.net) core as part of the product. Time to move into the future and stop being paranoid because of the past.
This is for desktop software now apps :P
Or a Task&lt;IEnumerable&lt;T&gt;&gt;
I find it super annoying that people think the death of Silverlight came because it was not open source or standard. It was because Jobs didn't want it. How is the open source ogg doing for HTML audio?
.NET core can run on linux, Mac, or Windows. .NET framework has existed longer, but isn't getting as active development that Core is and doesn't run on the other platforms. You can always start with wikipedia https://en.wikipedia.org/wiki/.NET_Core Versus https://en.wikipedia.org/wiki/.NET_Framework By default, you should start with .NET core, but use .NET framework only if absolutely necessary. If you don't know enough to read and understand the wikipedia articles, then don't sweat about making the decision, as it's not going to affect you for a while. The big thing is that if you want to make a GUI on windows, you will probably need .NET framework.
https://devblogs.microsoft.com/cesardelatorre/net-core-1-0-net-framework-xamarin-the-whatand-when-to-use-it/
.NET Core is much faster. .NET Framework can do things that .NET Core cannot. Many libraries were not ported to Core and may never be. For example, if you want to use geo-spatial data in SQL Server, you have to use .NET Framework.
But same point applies. If you make it cost an easy 2 quid payment, and provide a hash of email address plus salt, it's not worth anyone's while to crack or pirate it.
who cares? not getting into a long back and forth with you regarding tech from 7 years ago. No plugin system in the browser has survived bedsides adobe's PDF. Blazor is built on web standards webassembly -different beasts than plugins want to whine and live in the past? Here go knock yourself out https://www.microsoft.com/silverlight/
.Net framework was there first. It's a big monolithic framework you can think of it like a huge block with all the features. Because .net framework was originally developed for windows it's not a simple task to port it for other operating systems (mono ported a big chunk of it, but not all) So .net core was invented. A framework that is built out of many tiny blocks. This architecture allows the framework authors to ship updates/fixes faster because they are not tied to a big block (like in .net framework) and many such small block can be reused on many operating systems. There is also something called .net standard. You can think of it as an interface or set of features that must be available on a particular framework, this allows you to reuse code on different frameworks (.net framework, core, xamarin, etc.) TL;DR: * **.net framework**: Monolithic, Windows centric Framework * **.net core:** modular, multi-plattform framework * **.net standard:** defines a set of features, classes, methods that must be available (frameworks basically implement a standard)
I'd love to, I even suggested that very thing. The problem is what the developers are insisting, that the version in the properties file has the build number. Only way for that to happen is with another commit.
In the case of ASP.NET Core [UseStartup](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.webhostbuilderextensions.usestartup?view=aspnetcore-2.2), the ASP.NET Core will use some [reflection trickery](https://www.stevejgordon.co.uk/aspnet-core-anatomy-how-does-usestartup-work) to magically figure out which constructor to use, inject any required dependencies into that constructor, then call methods on the produced instance based on convention.
Perhaps it is just me, but I always think of streaming and paging as two very different types of operations.
They haven't really given me a good answer other than, that's how we want it. If I need to trouble shoot an issue with a specific release, what I would do is just create a branch off the tag for that release. Having the build number in a property file doesn't help me at all. I think this is what I'm having trouble articulating to the team, and I'm the odd man out.
Heres my article: Do you want SEO? Use serverside.
Same here, .net 3.5 and .net 3.5 compact.
Gitversion is a great tool and supports many different versioning schemes (CI, CD, GithubFlow + a lot of custom options) but don't get your hopes up - if I didn't misread the other comments the developer in charge already made up his mind.
There are games and other software products that have no copy protection at all and earn good money. Minecraft for example only uses a very primitive obfuscator and that's it, no copy protection. Focus on building a great product instead of wasting weeks on a system that can be cracked in hours anyways.
.Net Core is Microsoft’s way to combat Python, Node and obviously Java. I don’t see Python going anywhere for hacking, network administration and scientific tools. I personally have an easier time finding .net devs than python devs for web development and that’s one of my concerns is that not too many developers are adopting python for the web. .Net core for web development is beating academic web frameworks in multiple categories while still being an almost production ready framework. Most of the stuff we did back in the day required you to download a program that ran locally. We are heading at light speed to make every application possible run in a browser. Sure intensive stuff will still need something local like Python. Just look at how big the JavaScript community is thanks to web development. Now imagine gaining millions of developers to help with feedback, testing, optimizations and so much more to .net core. If we take an adoption % from php the amount of stuff people will make will be ridiculous.
.net core beat just about every single benchmark of even academic python backends. I agree python is more for science / academics oriented programming.
I once interviewed for a job at a bank. The manager told me to my face: “we are not interested in the latest tech, we want to see what our people can achieve with the old tech”
And the web comes full circle (ASP WebForms AJAX)
https://docs.microsoft.com/en-us/dotnet/api/system.threading.countdownevent
I started a project with client side Blazor the other day, but ended up having to port it over to server side because of some incompatibility with common libraries. Specifically, incompatibility with sqlclient.
I don't understand this statement - could you explain it?
Server side Blazor is useful for the same reasons [Angular SSR](https://angular.io/guide/universal) and React SSR is useful: Browser indexing. This enabled better search engine optimization for your site. Google spiders cant render and index your whole SPA.
Ideally you would separate your client side Blazor app and your back-end via an MVC Core API. Use a C# [HttpClientFactory](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests) and something like [RestEase](https://github.com/canton7/RestEase), and [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle). [Heres a good template i use personally for APIs](https://github.com/Dotnet-Boxed/Templates).
Python is less about benchmarking though, and more about the environment and ease of use. It’s incredibly easy to jump into as a high-level language, and the tooling is excellent. Modules for all that you could ever want.
For community-driven projects Python is great. I like .net for business-driven projects since they are easier to maintain but that's just my personal opinion.
You use observable collection when you want some piece of code to be notified about changes in collection. 99% of uses of ObservableCollection is in Data Binding in UWP/WPF. It has no use on the server. In MVVM terminology ObservableCollection is the View Model layer. What to use depends entirely on your use case and may differ. Also AFAIK WPF doesn't know about IAsynEnumerable at all.
It's basically the same, but in a nicer abstraction. Also in C# 8 you'll be able to use `await foreach` and `yield` in async methods into `IAsyncEnumerable`.
NSFW
Why can’t google spiders run JavaScript?
Looks good thank you.
*Core *3.0 FTFY
*cough* *cough* Core *cough*
To keep it simple, .NET Core is cross-platform and .NET Core will be supported far into the future while .NET Framework is going into maintenance mode. Go with .NET Core unless you have a reason to stick with the windows only legacy .NET Framework.
Its an image utilizing vaporware aesthetics. They are making the comment that the .NET Framework 4.8 is new, but its also really old and possibly irrelevant, with maybe a twinge of whimsy and nostaligia. At least thats my interpretation. A picture might be worth a 1000 words, but we all seem to pick a different 1000 when looking at an image ;)
OP is trying to start powershell running under another user (that's what the password is for). Using get-credential would require OP to launch *another* PS session under runas which kind of defeats the purpose. /u/piorarua when the button is clicked, prompt for a password: https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/how-to-create-a-password-text-box-with-the-windows-forms-textbox-control Then turn the textbox value into a securestring for the StartInfo property.
Because spiders are small and ultra fast, it takes an entire JavaScript engine and more to run enough JS to parse the output and store it. You could make your own with headless Chrome or [PhantomJS](http://phantomjs.org/) as a learning experience.
This is more r/outrun than r/vaporwaveaesthetic.
here's an aggregation of related links that I have learned a TON from. unfortunately I have not figured out the magic solution to this challenge. [https://stackoverflow.com/questions/17322048/send-postback-and-read-content-in-asp-net](https://stackoverflow.com/questions/17322048/send-postback-and-read-content-in-asp-net) [https://stackoverflow.com/questions/31543566/c-sharp-screen-scraping-an-asp-net-web-forms-page-post-request-not-completely](https://stackoverflow.com/questions/31543566/c-sharp-screen-scraping-an-asp-net-web-forms-page-post-request-not-completely) [https://stackoverflow.com/questions/2449328/how-do-i-scrape-information-off-asp-net-websites-when-paging-and-javascript-link](https://stackoverflow.com/questions/2449328/how-do-i-scrape-information-off-asp-net-websites-when-paging-and-javascript-link) [https://stackoverflow.com/questions/14768302/scraping-data-from-all-asp-net-pages-with-ajax-pagination-implemented](https://stackoverflow.com/questions/14768302/scraping-data-from-all-asp-net-pages-with-ajax-pagination-implemented) [https://www.hanselman.com/blog/HTTPPOSTsAndHTTPGETsWithWebClientAndCAndFakingAPostBack.aspx](https://www.hanselman.com/blog/HTTPPOSTsAndHTTPGETsWithWebClientAndCAndFakingAPostBack.aspx) [https://stackoverflow.com/questions/29727462/scrape-asp-net-website-with-paging](https://stackoverflow.com/questions/29727462/scrape-asp-net-website-with-paging) [https://stackoverflow.com/questions/36928770/web-scraping-paginated-page-using-htmlagilitypack?rq=1](https://stackoverflow.com/questions/36928770/web-scraping-paginated-page-using-htmlagilitypack?rq=1) [https://kaijento.github.io/2017/05/04/web-scraping-requests-eventtarget-viewstate/](https://kaijento.github.io/2017/05/04/web-scraping-requests-eventtarget-viewstate/) [https://odetocode.com/articles/162.aspx](https://odetocode.com/articles/162.aspx)
You run powershell, call get-credential, then call the original powershell on that "target" powershell with enter-psssession
Using Fiddler, look at the **entire** request (not just the POST data) when you navigate to the next page from a browser. You may need to pass along a proper user agent, referrer, cookies, or any number of other headers. The site is likely checking for bots like you and blocking them when they catch a bad request.
I had manually added all of the headers at one point. maybe I'm adding in the cookies wrong or something
Why the negative votes?
I've rather enjoyed .NET Core 3.0 because I **really** want it to replace Java. I'm hoping Blazer picks up as well. But I wonder when my host will run .NET Core... or if I should just get my own virtual server and do some kind of container / docker thing.
&gt;To be clear, server side here is not the same as Asp.net server side approaches like Webforms or MVC razor views. Instead it refers to a server side execution model for Blazor. The application still feels like a SPA, but instead of executing .Net code in the browser, the code actually runs on a server. How is it different than WebForms? Wasn't the whole point of WebForms exactly same as Blazor server-side? To have backend code executed in .NET on the server?
Yeah, good days are coming... 😉 [https://devblogs.microsoft.com/aspnet/blazor-now-in-official-preview/](https://devblogs.microsoft.com/aspnet/blazor-now-in-official-preview/)
Yeah but this image with .net core 3 would be badass
&gt;who cares? Wait what? It's good to know the facts. It is as /u/Eirenarch said: Jobs killed plugins in the browser. It was irrelevant that Silverlight and Flash were not open source.
Cool picture! .Net Framework should become irrelevant and they should migrate WPF and UWP to Core somehow..
All three of your suggestions are on their way already. 4.8 not implementing netstandard 2.1 and c#8 means it will die as soon as companies let it. Wpf and Winforms are available for preview with core 3.0. Before long, Uwp will be ported too.
&gt; MongoEntity In German "mongo" is a rude word for people with the down-syndrome. :-(
Totally agree there.
is core 3 in use now? what's different, im still using 2.2
Contains will not always use a linear search. Example: hashset hashset.contains() Will perform an O(1) search Contains also has an overlord to specify an EqualityComparer
What does it mean they're not implementing netstandard in 4.8? I'm a bit unsure about the framework/standard separation info..
.NET Core 3.0 -- probably another few months until release.
Possible ideas:not sure what your software does but let assume it does something really valuable - maybe you can convert it to SaaS model that the users would pay on perpetual basis. Let’s assume for illustration your software is a running app. And you store all my runs in the cloud. It is Valuable to me to keep the backups from my preferences and through SaaS model I can track the usage and collect the revenue. Btw have you looked at the native licensing services. Say it is Windows app - have you had a look at windows store? I would assume the store must have solved the billing and licensing part of the process? Just a suggestions
I'm guessing WPF/WinForms on core is a windows only feature. Would love to see the GUI part become cross platform, GUI design on linux is a pain in the ass.
 I'd just like to interject for a moment. What you're referring to as Linux, is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux. Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX. Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called "Linux", and many of its users are not aware that it is basically the GNU system, developed by the GNU Project. There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine's resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called "Linux" distributions are really distributions of GNU/Linux.
Thanks
Dig through the programming subreddit. The node.js ecosystem (via NPM) is really a dumpster fire. Almost every package pulls in dozens of other packages, which each pull in another dozen packages. Turtles all the way down. The nuget ecosystem, OTOH, seems to be more professional and taking dependencies on other projects is far less of a think. Some of that is the bigger surface area of the .NET Standard where most of the nuts and bolts are provided instead of being provided via 3rd party libraries. Static-typed languages (generally) make it harder for the developer to shoot themselves in the foot. A better choice for a back-end system where you might have large code bases.
From a practical standpoint it means you can't use netsandard2.1 assemblies in net Framework projects yet. Imho this is bad for everyone and reverses a lot of the good ideas of netstandard. If you're consuming packages, you need to make sure they are netstandard2.0 or also have net framework targets, then likely sprawl #ifdefs though your code. If you're making a net Framework application then there will be packages that haven't done this and you will need to try to convince the author to do it, or at least let you do it for them. I wouldn't mind if we could all move to net core yet and netfx was completely dead, but it isn't. Even the things like WPF in net core 3 aren't really true. It won't be cross platform for example, it just means you can make a Windows app target net core 3 *on Windows*, but since Windows ships with the full Framework, which has more in it, there isn't much point IMHO.
Google particularly has become quite adept at rendering client side SPAs to index them. I don't remember where I read about it, but it sounded like a logical step, but technically challenging for sure. I can't imagine that would obviate the need for SSR, but interesting :)
Yes, it's Windows only. They have also open sourced them but that's it.
Apparently people care enough to falsely claim that something that is open and/or standards based cannot be murdered by a powerful company or simply by shift in the industry. I care about false claims
Thanks for clearing that up
There's a **lot** different but it's not out yet
Only no made any such false claim . You just made it up in your head. Anything can be killed. Nothing lives forever. However trying to connect one piece of tech that was killed many years ago that was not a part of web standards in a niche (plugins) where almost no other prodyc survived (plugins) is jsu nonsense. and yes open source matters. Its embarrassing to have to point out to a developer but thats the wkole point of open source. One man cannot kill any project. At any rate you have too much time on your hands. Code something instead of arguing about tech from nearly a decade ago. It will help on your resume and actually mean something
You literally made that claim again. Open standards and plugins had NOTHING to do with the death of Silverlight.
&gt;Wait what? It's good to know the facts. Nope. depends on the facts. Thats why we call some facts trivia from the word trivial. they don't make a rotten kiwi of a difference to anything. &gt;Jobs killed plugins in the browser. and Jobs had good reason to hate flash. So what? &gt;It was irrelevant that Silverlight and Flash were not open source. Now that is a DUMB statement. One of the main points regarding open source is no one person can kill it. Being open source allow for any project to develop without one entities say so. Would being open source make people want to install plugins? nope but to say if silverlight had a large open source community it would have automatically dies when MS abandoned it i to not even understand what open source means. Anyway like I told your partner in having too much time on your hands. Worthless argument to pursue further. Go code . I am sure three years from now when an employer asks you why you don;t know blazor very well they will be mightily impressed with your explanation "because MS discontinued silverlight a decade ago and its good to know the facts"
Yawn. I know after awhile when I am discussing something with someone who has no sense. Are you like 12? People didn't like installing plugins so to say that had nothing to do with it is just stupid. &gt;One man can of course kill a project if they have enough power. Like control of iOS. Totally dumb. Go educate yourself. The market is still full of software that doesn't run on ios. Again go code. you have too much time on your hands.
UWP works under Core already while WPF wil come in few months
Excellent summation but the dude will never get it.
I find it very ironic that someone who believes that open standards matter and powerful industry players can't just shit on them as they see fit claims that I am 12. BTW Santa Claus is not real either.
I'd recommend Qml.Net. https://github.com/qmlnet/qmlnet Disclaimer: I'm the author. It's fully featured and production ready (it's used [here](https://medxchange.com/4klear-all-in-one-camera-recorder/)). It works on Windows/Linux/OSX very well, and has everything you'd need to be a beautiful app. Come [chat](https://gitter.im/qmlnet/Lobby) if your interested.
Why would you want to use JS libraries if you have the whole C# . NET ecosystem at your disposal on the client side? Blazor being non-JS is the whole point of that project. I personally am very happy there is some serious work being done to go away from that terrible JS abomination completely and not only as a transpilation.
&gt;BTW Santa Claus is not real either. Mom just told you?
There are plenty of libraries that are still stuck in .NET Framework and probably never will be ported to .NET Core. Microsoft is creating a Python 2/3 to many of us.
&gt; and removing rubbish ones (unless you remove blurry photos before import they will just get sorted and stored with the rest of the good photos) Have you done any research towards automation of removing blurry photos or are you planning on manually tagging?
Linq2Sql, for example. That will never be ported, but lots of folks took a dependency on it years ago that's often fairly difficult to remove.
Web forms work by creating Windows forms components that are translated into HTML components. so you press a button, send a form and some C# code is executed on the server. so note you don't actually execute C# locally, you just tell the server that you pressed a HTML button and the server has logic what to do when it gets the action. Blazor is primarily a JavaScript replacement where you can have client-side code like "calculate the number of items in my shopping basket" that is written on the client (var basketItems = _basketService.CalculateItems(basket)) but the actual method runs remotely on the server using SignalR. This has the benefit of cutting down on the requirements of the client, but downside of latency when something is executed and the added complexity of the SignalR implementation.
Windows had a share of **35.4%** in the [2018 survey,](https://insights.stackoverflow.com/survey/2018/#technology-_-platforms) while the [2019 survey](https://insights.stackoverflow.com/survey/2019/#technology-_-platforms) shows it has gained a share of **50.7%**. On the other hand, Android, one of the most popular OSs, *has lost shares* \- **29.0%** in 2018, but **27.0%** in 2019. So the good ol' Windows is doing just fine, in my opinion *fantastic*, nothing to worry about!
Does it give you any error messages? Have you tried updating it? Also, which version are you using Visual Studio 2015, 2017 or 2019?
Linq2Sql -&gt; efcore seems like one 9f the easier migration paths though.
Unless someone thought it was a good idea to use joe blows orm from their blog post 13 years ago that happened to depend on L2S..
[Dev essentials](https://visualstudio.microsoft.com/dev-essentials/) and [MS Learn](https://docs.microsoft.com/en-us/learn/) which should already be mentioned in Dev essentials. &amp;#x200B; They even give you free credits to play with actual Azure.
I think that no one can intellectually honestly argue that .NET framework is irrelevant, unless they are ignorant.
.Net Core 3: Blood Dragon
&gt; 4.8 not implementing netstandard 2.1 and c#8 means it will die as soon as companies let it. So not for a good while. Also, WCF isn’t available on .net core and plenty of companies use it.
Which is the course for the begineers ?
I have used Avalonia for a bit and kept running into smaller bugs that i had to workaround for or switch to nightly builds. The xaml features are not quiet the same as WPF and the docs are very lacking so you have to dig into their source to find out how to do certain things. I have also noticed that Avalonia apps seem to have issues on certain end user computers which forced me to switch back to WPF for now. Its overall nice to use when you are familiar with WPF but expect bugs and instability.
It depends. It might be, it might not. Need more context. It's probably not, though, just assuming based on your apparent inexperience.
WebForms was meant to look like and be used like Windows Forms. Not that it is in any way related to it. What I'm asking is what is difference between WebForms post-back mechanism and Blazor's use of SignalR? And how they solve need to either keep the state of each client on the server, or round-trip the state as WinForms does with it's ViewState.
If I call the president a cheeto, I'm not making an honest intellectual argument. Of course the .NET Framework is still relevant (especially for a huge world of existing desktop, web, and entpeprise systems), but that doesn't mean we can poke fun at it being 'nearly old enough to vote'.
You'd just make a core app for cross platform usage, and make a wpf project for only the UI on Windows, and another for UI on Linux. Or a web API and frontend on top, which may of course invalidate the other UIs, but might be good to not have to use Xamarin.
Been working on a logging library. It's getting into shape, slowly but surely. The ultimate goal is to make it extremely customizable and quite performant. Right now, basic functionality like logging to a file, csv, xml or json and the windows event viewer are already available. [https://github.com/CodeDead/Logger](https://github.com/CodeDead/Logger)
Perhaps CSRF causing you problems?
In fact they started that wpf for Linux is not planned. It's in some wpf GitHub issue asking for a Linux port.
The survey you've linked [states](https://insights.stackoverflow.com/survey/2019/#technology) it's more popular than C# amongst professional developers. Once it starts competing directly with .NET things might get a bit sour for the latter. [PYPL ranking](https://pypl.github.io/PYPL.html) (compare it on the logarythmic scale) already shows how much traction it gets at the cost of the other languages year by year. Companies vested in .NET will keep using it but the developer mind share might start to slowly shift, just as frontend shifted so much towards JavaScript that it was able to take over even the desktop app development. I'd love to see some up to date stats for GitHub but didn't come across any recent ones. I think that would be quite telling. Well a quite rudimentary way of comparing is to go to trending pages, for [C#](https://github.com/trending/c%23) and [Python](https://github.com/trending/python) and comparing the amount of stars. This shows how much more popular Python is, at least on GitHub and (in some way) by extension in the open source community. What's also noticeable is there's a lot of AI-related projects dominating the Python's chart. Maybe that's where the spike comes from, AI and, as you mentioned, academia use. One thing that's in favor of .NET is the very same survey shows ASP.NET is much more popular than Python's leading web framework, Django. This again points to other uses of Python. I'm playing a bit of a devil's advocate considering possibilty of Python taking a slice of .NET's market. It's a speculation based on some premises, one worth considering. Time will tell and best of luck to both.
The survey you've linked [states](https://insights.stackoverflow.com/survey/2019/#technology) Python's already more popular than C# amongst professional developers. Once it starts competing directly with .NET things might get a bit sour for the latter. [PYPL ranking](https://pypl.github.io/PYPL.html) (compare the most popular languages on the logarythmic scale) already shows how much traction it gets at the cost of the other languages, year by year. Companies vested in .NET will keep using it but the developer mind share might start to slowly shift, just as frontend shifted so much towards JavaScript that it was able to take over even the desktop app development. I'd love to see some up to date stats for GitHub but didn't come across any recent ones. I think that would be quite telling. Well a quite rudimentary way of comparing is to go to trending pages, for [C#](https://github.com/trending/c%23) and [Python](https://github.com/trending/python) and comparing the amount of stars. This shows how much more popular Python is, at least on GitHub and (in some way) by extension in the open source community. What's also noticeable is there's a lot of AI-related projects dominating the Python's chart. Maybe that's where the interest comes from, AI and, as you mentioned, academia use but it's present elsewhere for sure. One thing that's in favor of .NET is the very same survey shows ASP.NET is much more popular than Python's leading web framework, Django. This again points to other uses of Python. I'm playing a bit of a devil's advocate considering possibilty of Python taking a slice of .NET's market. It's a speculation based on some premises, one worth considering. Time will tell and best of luck to both.
Sure :)
&gt; Specifically, incompatibility with sqlclient. Opening a database connection from the client isn’t a good idea anyway.
&gt; Web forms work by creating Windows forms components that are translated into HTML components. Other than name and rough purpose (and obviously both being .NET), the two have nothing to do with each other. WebForms user controls are web-specific code; they don’t wrap Win32 and GDI at all. No translation going on either.
Blazor is still very much in its infancy and still requires a lot of JS for basic browser API access like window.alert. Also, JS has been around for a very long time now, and its battle tested. Countless libraries and places to go for learning resources and support.
SSR for the most part is only partial. Meaning you can get the content out there first for the spiderbois and then let the client fire up the rest of your JS for interacting with your app.
Nice project, I hadn't seen it before thanks for making me aware of it's existence!
Or Avalonia for "native" cross platform
Damn dude, initially it can be done, but must be changed in the way you code. What you described is what is called a "bad smell", a "Bloater" of the type "Message Chain" Bad practise in general. https://refactoring.guru this web site has ways to deal with it, by identifying smells, drawing fixes and also teaches you about design patterns and refactoring code. https://refactoring.guru/smells/message-chains Here is an in detail look at your specific case :)
Right? I've banned so many absolutely useless bots from here.
Removed: Rule 3.
I'm a fan of ETO - You can either use a variant of XAML or completely define your UI in code, and it builds it for WinForms, WPF, GTK (Linux), Whatever MacOS uses, and apparently it can do iOS now. https://github.com/picoe/Eto
Not S.O. relevant but... Unlimited free private repos @ GitHub is a thing now, more great stuff.
Win forms are new from what I remember. LDAP support and a bunch of other windows feature developers are calling to be made. I can't migrate over until [ODP.NET](https://ODP.NET) and .Net Core gets their shit together.
I have used Xwt (http://github.com/mono/xwt) in a project for my former employer. It's very straightforward, specially if you know a little GTK) but it has no visual designer (at least when I was working with it). The thing I like the most is that it can be used inside a native application, so it's great to create components. If you want to use it for a complete app, the only caveat is that it only have widgets that are common to it's implementations, but that may be enough for a small project.
probably. how is CSRF being bypassed in all of the other instances though?
I recommend just resource files and a utility like Resx manager extension for visual studio to help handle them easily.
Following.... I've noticed that every once in a while, kestrel will throw an internal error (no error code, just says it stopped) and then when I try to restart, it says the port is already in use. I tried finding the service that was causing it in activity monitor but can't find it. Restarting VS doesn't help...I have to reboot the entire system.
Ta :)
Started huge xamarin / framework mvc / framework app project before I knew better and it's too late to migrate. Halp!
Applying the SOLID principals is crucial to writing maintainable software. Get a copy of Clean Code by Bob Martin and after that, try the gang of four book Design Patterns: Elements of Reusable Object-Oriented Software. Pluralsight also has some good courses on SOLID with examples in c#
Blood Eagle Note: am .NET core dev
A couple of terminology clarifications: 1. Implicit conversions are just any conversions that do not require an explicit cast. The conversion between `int` and `long`, for example, is an implicit conversion. 2. What this article talks about are _user-defined_ conversions. User-defined conversions can be either implicit or explicit, as defined in the conversion.
This is not normal. I would write it as var a = Class2.Method3(...); var b = Class2.Method2(a); var c = Class1.Method1(b);
[Yup.](https://github.com/dotnet/wpf/blob/master/Documentation/contributing.md) &gt; We also do not intend to accept contributions that provide cross-platform implementations for Windows Forms or WPF.
netstandard promises writing a library once and letting any .net application consume it. Net core promises writing an application once and running it on any platform on which net core is implemented. Until now every release has moved closer towards these goals (bugs aside), but net48 and net core 3 move further away. Given that the net48 release is almost entirely bug fixes, they probably should have just called it net473. Calling it net48 raises expectations.
wonderful! can I use qt creator with it?
Yup. https://qmlnet.github.io/setup/unmanaged-hosting/ You can debug QML/C++/C# easily.
Removed: Rule 7, shitposting/trolling.
in web forms you do an action like press a button that in turn sends data to a server that executes C# code. so HTML/JS -&gt; HTTP request -&gt; C# code in Blazor you can literally do a method call in your frontend C# code like _myService.MyMethod() and it will run remote on the server. so C# -&gt; C# that's the difference.
So, Blazor somehow makes the latency disappear? And same with the problem of keeping the state? Nice! Good to know C# devs learned to break laws of physics. /s
I appreciate your enthusiasm for sarcasm, but to become a master you mustn't use /s. *I'm a human being, and this action was performed manually.*
That's an interesting site. I'm either going to love it or hate it, but it has a racoon so currently I'm, thumbs up :)
Its an essential tool :) design patterns are there to help us code in better ways and it also guides you on refactoring your code, while pointing out what can be wrong, its awesome! (was forced to use it at uni :p)
Yeah, I called them custom instead of user defined
Maybe my experience is anecdotal but when I had to do some things with python it felt like a mess. First it is "which version?" there is version 2 and there is version 3. Somewhat compatible but not really. Then you have to get something called pip. Sometimes it is installed automatically and other times you have to go dig around and steal bits from different places. Some packages are for version 2 and some for version 3. Some package dependencies do not work and just show messages that are not helpful. Eventually I got the piece that I was interested in working but the entire experience was pretty sad. The whole environment felt somewhat amateurish and not easy and polished as I expected. I heard that MacOS comes with python pre-installed so it may work great on that OS but my experience both on Windows and naked Ubuntu was pretty bad. &amp;#x200B; With .net core on the other hand even on MacOS developer with zero previous .net experience was able to install the .net core without any help and run my piece of software in less than 20 minutes.
Thanks for the input. I tried this and updated the add-in. I'm just playing the waiting game now to see if it fixes the issue as it was intermittent for about ~5% of the users.
But more importantly it has a racoon :) &amp;#x200B; I had a little poke about. I like it. They do a better job gluing GoF with Fowler with... other stuff than a lot of other sites. I like the cartoons, the examples are good (I've only read a few, so ymmv). I haven't pushed enough to see where the commercial bit kicks in, but I do like it :)
are you always this snarky when someone is taking their time of day to help you? I literally told you the downside of Blazor server-side is latency, I can't help that you don't read what I write. besides that - most HTTP requests are by default stateless. SignalR is no exception. if you want state you simply persist the state on the server. I do not understand why keeping state is an issue at all for you.
"See sharper"
Our it curiosity, how many users go for the ad-free version?
Hehehe, ya I havent checked what they "offer" but it does help out quite abit, and as far as I noticed they didnt seem to have critical info, that i was looking for, locked behind payment.
&gt;depends on the facts. True. &gt;and Jobs had good reason to hate flash. So what? It is relevant because it shows how the "it wasn't open source" was not the issue. That's a lie. &gt;Now that is a DUMB statement. OK. Let's see. &gt;One of the main points regarding open source is no one person can kill it. That's not true. Just check the graveyard that SourceForge is. &gt;Being open source allow for any project to develop without one entities say so. It allows the option to do it, not that development will happen. Evidence: SourceForge graveyard. &gt;Would being open source make people want to install plugins? nope... 100% true. &gt;... but to say if silverlight had a large open source community it would have automatically died when MS abandoned it i to not even understand what open source means. No. It's understanding that Jobs killing plugins made Silverlight and Flash not an option for web app development. &gt;You could just as well say Jobs was irrelevant because apps have been built for decades that never ran on any apple product. That changed with the iPhone. That's the point. You want to discuss the past. &gt;Silverlight could easily have survived for years in several niches if not in wide usage. Just as those projects in SourceForge are surviving easily for years thanks to being open source. &gt;However it was always going to die as a propietary product. Web standards was always going to be the future. There were other open source plugins that died too. Web standards have nothing to do with open source. &gt;Anyway like I told your partner... What partner? &gt;... in having too much time on your hands You have a lot of time too as we can clearly see. &gt;Worthless argument to pursue further. You are right. Your argument was worthless from the very beginning. &gt;Go code. Nah. I'm enjoying my free time. &gt; I am sure three years from now when an employer asks you why you don;t know blazor very well they will be mightily impressed with your explanation "because MS discontinued silverlight a decade ago and its good to know the facts" I fact that you need to know is that Blazor is not a plugin like Silverlight or Flash were. But I guess knowing the facts is not something you can handle.
Nothing is stopping you from doing that now, if your WPF project is targeting NET framework
Are you using web forms in .NET? Message me, I'de be happy to help if I just understood the question better.
The code for connecting should be in Form1, eg Main. The code for receiving should be an event. If you double-click on a button you can assign code to a button press.
&gt; That changed with the iPhone. That's the point. You want to discuss the past.. That just by itself marks you as forever dumb and not worth talking to. There are TODAY not yesterday still programs that do not run on IOS. &gt;That's not true. Just check the graveyard that SourceForge is. Sans any real proof that it or anything on it was killed by one person ignoring its still very much around. &gt;But of course we already saw you can't get your facts straight. No we see that you are a dunce as to what facts even are.
Client-Side Blazor badly needs intelligent IL tree-shaking.
This is terrible, sad news. It’s kind of impacted me more than I would expect. I’m not close to Erlang, but Erlang was my first introduction to functional programming and I think both the language and more specifically the whole Erlang platform are just superb concepts and extremely well implemented. The way that lightweight threads underpin the very nature of the language is still quite unique even today and is a really eye opening way to view programming. Erlang aside I think his contributions to the community (e.g. some fantastic talks/presentations and some great concepts) are huge and perhaps underrated. He also seems to be very well liked and very well respected universally. RIP Joe.
Yeah it's battle tested. Through all those bitter battles with it's stupid behavior, quickly stitched together workarounds to emulate some solid concepts and principles. Single thread parallelisms, callback hell, etc. Allover one bad language.
Blazor is one of the first serious attempts to end this JS madness.
It amazes me what is available for free these days and how it's monetised effectively. If I joined that sort of project I'd be, up front, pushing for the best content possible, so the value add was added value.
So, what is your question? Would you like us to do it for you?
I'll give you a hint String GetVerse(String animal, String sound){ return $"Something {animal} somthing {sound}"; }
You are too good.
What have you tried? &gt; Please provide two solutions if you can, one using polymorphysm and one with data-driven approach! I’ve been developing software for decades and I have no idea what “data-driven approach” means in this context. I can only assume it’s an obtuse way of saying “passing different arguments to the same method”.
You can create interface with two properties, one is animal, other the animal's sound. Then your acctual animal classes can inherit that interface. After that you can use dynamic polymorphysm to make your job really easy
If someone is asking for help with something as simple as the problem they're describing in this post, interfaces aren't going to be something they'll easily grasp.
I heard McDonald's is hiring!
You really should show what you've tried so far. We aren't here to do your assignments for you.
Maybe, but it gives him a direction what to google.
Hi UMadBreaux, Sorry for the late reply. You are absolutely correct about the weird CMS environment in .NET, it has always been like that, that is the whole reason for me to build my own CMS. I have updated the documentation for the CMS ( [https://github.com/MacdonaldRobinson/FlexDotnetCMS](https://github.com/MacdonaldRobinson/FlexDotnetCMS) ), please have a look and let me know if that answers some of the questions. I have started adding an API to the CMS which will allow you to use the CMS as a Headless CMS, you can have both the CMS and the React / Vue Front end running on the same server / site. Also I updated my Single Page App Library ( [https://github.com/MacdonaldRobinson/jquery-ajax-loader](https://github.com/MacdonaldRobinson/jquery-ajax-loader) ), which is installed by default in the CMS, which provides a Single Page App Experience along with Server Side Rendering capabilities making it really good for SEO ( works similar to how NuxtJS works ) The CMS is also a Static File Generator, and generates these static files dynamically based on the changes in the CMS, and loads these static files on page requests, making the page load extremely fast Thanks!
Biginteger
Here ya go: static void Main() { var p = "Old MacDonald had a farm, E I E I O,\nAnd on his farm he had a 0, E I E I O.\nWith a 1 1 here and a 1 1 there,\nHere a 1, there a 1, ev'rywhere a 1 1.\nOld MacDonald had a farm, E I E I O.\n"; var a = "\\\u0081BIK\u008143v9:G:D27E\u0085:E83\u008An&lt;B&gt;2L`\u008A=H8wAB\u0084&gt;I@?H8NJsC\u008434{S2NB:JT{;:\u0086u&gt;?\u008AY9\u007F54&gt;K}\u009Bx7@P2cBHI&gt;B\u009BtP\u0081G2LB\u0086=9\u007FGM&lt;EJwxL&lt;3\u0082"; var b = System.Runtime.InteropServices.GCHandle.Alloc(a, System.Runtime.InteropServices.GCHandleType.Pinned); var c = b.AddrOfPinnedObject(); for (int i = 0; i &lt; a.Length; i++) System.Runtime.InteropServices.Marshal.WriteInt16(c + i * 2, (short)(System.Runtime.InteropServices.Marshal.ReadInt16(c, i &lt;&lt; 1) - 50 ^ "I got my homework from Reddit"[i % 29])); var d = System.Text.RegularExpressions.Regex.Split(a, "x"); var e = String.Join("\n", System.Linq.Enumerable.Range(0, (int)Math.Ceiling(1d / 3 * 15)).Select(i =&gt; String.Format(System.Text.RegularExpressions.Regex.Replace(p, "\\d", m =&gt; "{{{" + m.Captures[0].Value + "}}}"), i &lt;&lt; 1, i * 2 + 1))); Console.WriteLine(e, d); Console.Read(); }
Thank you for suggestiom. I figured out a potential solution.
https://en.wikipedia.org/wiki/SQL_injection
Yikes, seriously.
Interesting. I wonder what would be an appropriate way to produce SQL in this case?
What is your goal? Are you trying to write a chat application that others will use, or are you trying to learn about chat applications, or WinForms, or ? If I were writing it, I’d separate the chat mechanics (sending and receiving messages, for example) into one or more components that don’t know what UI components are used for input and output.
&gt; Saving that GUID in the file’s metadata. You cannot do this in a way that works across file systems *and* file formats. Since you said Mac app, maybe you’re expecting this to always be APFS (I.e., never on a network volume or other volume with limited metadata). In that case, put your GUID in an extended attribute.
I prefer the first written as... (reader as IDisposable)?.dispose()
Is this code web scale?
He did say use polymorphism though
😭
It doesn't use JOINs, but unfortunately it doesn't support sharding.
What happens if you await the task, or do Task.Run({ *your code*}).ConfigureAwait(false).GetAwaiter().GetResult();
Loving the 80s synthwave vibe, I listen to this type of music while programming and gaming
Or [Qml.Net](https://github.com/qmlnet/qmlnet).
'nvm I got it' yikes
I managed to add TaskCreationOptions.LongRunning on many other longer running tasks and it seemed to have helped.
"possibly irrelevant" There are still dozens of us working on enterprise software which may never be upgraded to Core. Dozens, I say!
Ah, dang, I have been doing this a long time now. I thought that people my age having teenagers made me feel old...
I discovered Tom Cruise when listening to the Tron Remix album and it was like I had finally come home, musically speaking. I listen to Retrowave/Synthwave all the time, but especially when programming. It just puts me in the perfect zone mentally.
Could you provide which line you are getting it on?
Removed: Rule 4.
The code checks to see that the numbers which came out of verticesIndex are less than the size of the vertices array - so the exception can't be because your index is too large for the bounds of the array. But there's no check for the other side of the array - are the indexes you're getting out of verticesIndex negative?
That’s awful advice. The guy is obviously new, trying to figure out how to do hints. He’ll never learn if he just jumps straight to using libraries.
Your AddItemsToObj parameter is student, but you're assigning to myStudent. Also, don't use SelectedText: https://stackoverflow.com/questions/5071193/winforms-combobox-text-vs-selectedtext
You're right, I overlooked that. I don't even need a parameter. I fixed both of those issues, and now I'm able to fill the Student field. But the query still isn't working properly. I queried the results in the database and got the correct results, yet when I do it in the code, I'm not able to get the right results to display in the listbox.
I have a project with generic mathematics (including some combinatorics) here: https://github.com/ZacharyPatten/Towel But as mentioned in another comment, you need a data type that can store a value large enough for your computation (hence the BigInteger sugguestion). With my code, you can swap out the type easy (since the code is generic).
Again, you're heading towards the wrong direction mate. I'm not saying Python isn't booming, no need to provide references, we all know that. Python is very beginner-friendly and offers a huge number of libraries, so academics have adopted it. It's also dominant in the open-source world, and one of the most futuristic techs out there. What I'm saying is the applicability of C# and Python; they are from two completely different worlds. There's a huge cultural difference between them, their niches and target clients (from the business perspective). Just a side note, Comparing C# and Java would have made more sense than comparing Python and C#. &amp;#x200B; Python is open-sourced from the very beginning, but C# has got into the open-source world just a couple of years ago. Science then, MS has made almost everything open-source they have built. So the Python community is by default open-source friendly, and like other open-source communities, they've built many interesting things in the last couple of decades. The C# ecosystem has many well-engineered and innovative things too, but most of them aren't developed by its community. Now the whole .NET ecosystem is open-sourced and its developers are adopting this new culture; we hope to see a better future and more contribution from the community. The Django framework was released in **2005**, but MS released ASP.NET Core in **2016**, almost **11 years** later. It is the successor of a very mature and popular framework ASP.NET that has been in the game since 2002. Django, even comparatively faster Node/Express are [completely outperformed](https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=fortune&amp;l=zijz7h-1&amp;f=zik0yv-zik0zj-zik0zj-zik0zj-zik0zj-ziimf3-qmx0qn-zik0zj-e7) by this new kid ASP.NET Core. Hardwares matter, so cost is still an issue. Beginners look for these 'stats' while trying to develop a career, but managers of corporations usually have meetings with old farts, and look for the most heavy-weight, performant and reliable tech that's backed by large corporations so it can outlive all of them. C#.NET is backed by the world's second most valuable company Microsoft, worth of a trillion dollar. Would you build the back-end of a very serious system like the banking system with Python?! I wouldn't do that! .NET or even Java is a better fit for that. C# is for hardcore development, large and complex systems that may live for decades; it just works! Python is a better fit for small to medium-sized projects (it's not you can't develop complex systems with it, but you better not), prototyping, scripting, research, etc. So C# and Python have a very different kind of usability, so anyone won't bite out another's market share as vastly they aren't on the same track. Yes, C# and Java target similar types of systems, and there's a direct competition. The recent act of Oracle is giving C# a fair advantage. Being the leader of the open-source world and continuous innovation, Microsoft has earned this place. Hoping for a better future with this new MS, cheers!
Awaiting the task as no influence on when the task scheduler will start it.
Exponential backoffs are great. There's no reason to roll your own though when [Polly](https://github.com/App-vNext/Polly) exists. This kind of exponential backoff can be handled with a [`WaitAndRetry` policy](https://github.com/App-vNext/Polly#wait-and-retry).
So, first step is to identify where the bug is. Put break points in the code and inspect the values. Do they match what you expect? `Student _student = new Student();` This likely shouldn't be initialized this way. Since you only ever want it to be the value passed into the constructor, it should probably be `private readonly Student _student;` This ensures that if you try to access the value without initializing it in the constructor, you will get a compile error and that no code outside the constructor can overwrite it (though the properties of the object can be changed).
You would need to post the relevant code.
Do you have other `Task`s / thread pool usage going on in your application at the same time that might be getting in the way? &gt; You have tasks that cause the thread to block for long periods of time. The thread pool has a maximum number of threads, so a large number of blocked thread pool threads might prevent tasks from starting. https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool#when-not-to-use-thread-pool-threads
 side1 = vertices[index2].Position - vertices[index1].Position;
 side1 = vertices[index2].Position - vertices[index1].Position;
Make a conditional break point in that line and check if any of the index-variables is larger thatn the collection, you are checking from. I bet it is index2, but I'm on the phone and the whole code formatting messed up.
Hi Andera, I consider a membership, but be with my family for the holidays. How long will your Easter offer be available?
Or a Task&lt;IEnumerable&lt;Task&lt;T&gt;&gt;&gt; if your overall source is also async e.g. list blobs async then yield the contents of each blob asynchronously. It was possible before but required splitting every await and every yield into separate methods, and then awaiting the outer task and then each of the inner tasks in the caller
I know, right? Sounds like OP wasn't paying attention in class...
The thread pool isn't exactly deterministic, but 10s is high. It might be hardware specific - have you tried it on another PC? I've run it here: https://dotnetfiddle.net/VyqyVn And got 0 ms. Can you run that on your PC and see what you get? What's the full context of the code surrounding the task running?
Hi! It will be available for a week. Just drop me a mail or private message if you are out longer. Enjoy the holidays. Cheers. Andrea
Ok, well it's not bad. It difficult to say what to change because I'm not sure what your restrictions are but here is what I suggest. The whole first part is (I assume) just setting up two objects that are identical, then simulating a change? Fine, so we'll start the review at the // tracking changes string updateStatement = string.Empty; First, that should probably be a `StringBuilder` when concatenating multiple times: https://stackoverflow.com/a/1825808/1830205 var properties = typeof(Brand).GetProperties(); foreach (PropertyInfo propertyInfo in properties) You don't use the variable `properties` again and it's fairly small, maybe just: foreach (var propertyInfo in typeof(Brand).GetProperties()) Consider inverting this `if`: if (propertyInfo.CanRead) { // ... } becomes if (!propertyInfo.CanRead) continue; This means everything isn't so indented. The same can be said for the next `if` statement. if (!updateStatement.Contains("UPDATE")) I don't like this. I would prefer it if you knew when you needed to say `UPDATE` and when you didn't. `typeof(Brand).Name` could be `nameof(Brand)` I believe. if (!string.IsNullOrEmpty(updateStatement)) { updateStatement += $" WHERE Id = {oldBrand.Id}"; } Again, I would prefer you to know if you need to append this, not just check if it's empty, there are too many if statements in such a short piece for my liking.
If you're using SQL for storage, keeping a GUID as a key can cause index fragmentation, which can result in a performance hit when the data gets larger.
Lol
I am a newbie especially in c# so I do not know all the functions and everything you can do in it. I figured out a formula which involves only (n-k)!. I'm pretty proud of it haha.
I am using 2019. Yes, I have tried updating it.
.NET is used in plenty of mid size companies and they're more open to change than the traditionally technologically ultra-conservative banking sector. I think especially the mid size companies is where the change might be happening. Python is good for small to medium size projects, yes. That's what the cloud is all about, cloud being the present and the future of IT. We have to be wary the landscape is changing and it's changed already. I think to look at it objectively it's perfectly good language, getting even better over time and it's not going away anytime soon. Similarly to .NET it's been around for a long time and it has proven itself in the web development area. It's got no Microsoft backing, I agree this is an added value for some businesses, enterprises in particular, but lack of it is not necessarily a deal breaker. I see your point and I agree with it for the most part but what I wouldn't want to do is to simply dismiss Python especially that it's easy and tempting to do so from the viewpoint of .NET engineer (and vice versa). It's nice to read a well composed defense of .NET you've made. The race is on though, static type checking might be a substantial gain for Python. Better to keep an eye open. We'll see how it fares.
Metadata storage seems weird. Why not store the file paths in the database?
// creates an index of vertices for (int i = 0; i &lt; verticesIndex.Length; i += 2) { verticesIndex\[i\] = (short)(i / 2); verticesIndex\[i + 1\] = (short)((i / 2) + terrainHeight); }
 // creates an index of vertices for (int i = 0; i &lt; verticesIndex.Length; i += 2) { verticesIndex[i] = (short)(i / 2); verticesIndex[i + 1] = (short)((i / 2) + terrainHeight); } Are you sure this part of the code is fine? It seems like you are trying to create something like a 3D Matrix according to... index1 = verticesIndex[i * 3]; index2 = verticesIndex[i * 3 + 1]; index3 = verticesIndex[i * 3 + 2]; And it looks like you are only setting up 2 values? And the size of the array is also only times 2 rather than times 3 as index1,2,3 would imply. Maybe that's the issue? Although do what /u/MaxPlay says [here](https://www.reddit.com/r/csharp/comments/bfjxqt/indexoutofrangeexception_help/eleq1q1) Also maybe verify the values of TerrainWidth and TerrainHeight just in case?
Do you mean GUID storage in metadata? I don’t want to store paths because I want it to be able to handle files moving without the application being told about it.
What is it about a GUID key that would cause fragmentation?
I don't know what special features you're talking about, but constructor injection is in every DI Framework i ever used. Injecting factories to be able to `using(var instance = factory.Create())`is no magic work either. Sure, their mappings and functions might be different per Framework, but normally, *for me*, all of this is handled using a Method that is specifically designed for **that particular** DI Framework initialization. (couple of lines, sometimes multiple methods called by a "main" ininitializer) So if i have to change all of it, i would just have to replace a single Method in my Main. But again, this only works because i don't use weird Framework magic like property injection and self-handling disposables, proxy generation and other stuff.
Are they all directly interacting with the db? Normally you'd have a databaseService in front of the db who handles all db queries. And all clients connect to the dbService instead of directly to the db. This way you can handle everything at one place.
in the Settings view: Editor: Line Height or in json format: "editor.lineHeight": 20
Your solution sounds fine. You'll also need to understand how to update the clients with whichever updates "win" when they reconnect.
This is for VSCode isn't it? He said VS2019
ah you’re right. too early in the morning for me
There's plenty of reason to roll your own, you just probably shouldn't use it in production.
Have you looked into [NSURL](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/AccessingFilesandDirectories/AccessingFilesandDirectories.html)? Or maybe store the file checksum?
I don't understand this question. I use vs code at work almost exclusively and for anything that implements IDisposable I wrap it in a using statement.
We need to see the rest of the code I think
I mean the ones, which add references. Like using System.Collections.Generic for example.
[Here's](https://www.mssqltips.com/sqlservertip/4331/sql-server-index-fragmentation-overview/) where you can learn about index fragmentation and [here's](https://www.sqlshack.com/designing-effective-sql-server-clustered-indexes/) an article which explains how Guids affect index fragmentation. I've highlighted the key part here: &gt; The main challenge [with GUIDS] that affects the clustered index key sorting performance is the nature of the GUID value that is larger than the integer data types, with 16 bytes size, and that it is generated in random manner, different from the IDENTITY integer values that are increasing continuously. The large size and randomness generation of the GUID values will always lead to the page splitting and index fragmentation problems, which negatively affect the clustered index usage performance. We had pretty big performance problems at some point because our product was using a guid as the clustered index. To resolve it, we switched to an auto-incrementing primary key, and went with using set other characteristics as indexes so that we could identify it. The choice of the characteristics really depends on how the users use your system. In cases where the only way to search for it was the guid, we'd require filters to scope the search such as the dateTime of the event, so that the search for the Guid was on a smaller dataset.
Yeah. It’s a game server. So each play field has its own long running task that maintains the heartbeat of the play field. There can be many playfields. (Dozens). Also each player has its own long running pair of tasks that manage the inbound and outbound messaging queues.