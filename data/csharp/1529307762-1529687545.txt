The only potential problem with having all the operations in memory is that you run the risk of not persisting something that you should have. So your persistence engine (EF currently) has to be able to maintain an adequate flow, or you can have a temporary persistence destination like writing to a file and then letting a separate process read from the file and persist it. It's more work for the computer, but can help in specific cases where the db is the bottleneck, more normally in multi user scenarios because that's where the congestion happens. I'm not too sure about books. There was an interesting one called "Busniess Objects 2008" by Rockford Lochte. But as you can tell it's very old. I say interesting, in that it mapped out a complete framework for applications. A lot of the techniques are still useful, although it's a bit heavyweight for most purposes and some of the advice looks iffy from the vantage point of 2018. CQRS is worth getting your head around. At it's simplest, it's simply saying "I have one class which sends commands (Write this to a db, turn off nan's life support) and I have one class which I can query data from (get this from the db, see if nan is still breathing)". The benefit is that you get rid of code that looks like "Write this to the db and if it succeeds, close the form". That sounds logical but you then need some way of notifying other things that the write to the db happened so they can update. And the class with the above code in should also get notifications in case other bits of code made that db write, so you then have code that says "If I wrote to the DB, then notify everyone else, but ignore that notification when it comes back in, because I sent it". Akka.Net I recommend, it's a good way of thinking about things. Vertical scaling is simply anything that you can do without buying a second computer. That can mean put in bigger faster discs, more memory, a new CPU, or it can mean write faster code, Either way it's considered vertical because you only go so far upwards before you hit the top of the computer. So we tend to optimise for horizontal scaling across machines because three potato computers might be faster than one ultimate specced computer. I do trading stuff too. It's funny but our app was a lot like yours, and a lot of the work I've done is addressing exactly the problems you have. So building in-memory caches for data that we used to read from the DB, putting all the trades in memory and only reading from there. More importantly it supports notifications when trades change or are added, so it means we don't have to poll the database to see if there's any new stuff (Sounds obvious, but we had a lot of code that just polled the database every 5 seconds :/ So I did all that without breaking the app (much). You can hook into the EF Context and have it do "stuff" when it saves things for example. In my case, if anyone saves a trade, the context sends a message (rabbitmq) to the trade cache, the trade cache puls the new or updated trade from the db and then notifies anyone who's listening that there's a new trade. It's a bit hacky, but it saved me changing a 100 places in the code base where it was saving or updating trade data. A lot of this code is a bit old now, and if I did it again I'd have just used Redis for a lot of stuff. It is good for kvp data and has a built in pubsub messaging system to notify people when data changes. Did I mention Event Sourcing (ES) a while back? I can't remember. It's a good solution to some problems, not so good for CRUD style operations. This goes hand in hand with CQRS in that instead of just saying "Hey, write this record to the DB" you have a bunch of fine grained messages like "Create a new swap, set it's price to 10, apply risk data". Getting the right level of granularity is difficult. BUT It does mean I can recommend some books. IF you have a look at anything about DDD (Domain Driven Design). I think there are three which are colloquially known as the blue book, white book and the I forgot book. I think the white book is red... Again, there's no single answer to any architectural problem, but DDD will enhance your toolkit. Final thing before I go to work: TDD/BDD. This is something of a contentious subject because there are different approaches to it and some people get a bit zealous about it. But one advantage of writing tests is that you learn to write code that isn't coupled to collaborators (if you do it right). I won't go too far into how I think it should be done because one of those zealots will be scanning the subreddits looking for someone to smack down. Essentially though your options are mockist style or classical style. Mockist tends to be better for people starting out and is often the one taught because it's easy to write a tutorial about. Classical style is better imo for people that know how code works. It's harder to teach because it isn't proscriptive so much as intuitive. Check out Fowler's blog post called "Mocks are not stubs" for a short intro to both approaches. It's quite old, but it has aged well. Either way I would recommend writing tests if you don't already. Ok, I have to go work :)
&gt;itely just need to add that semicolon they think you're a troll
It's the 2nd best IDE imo. The best is visual studio 2017 for Windows. 
Have used both NSubstitute, Moq. I would definitely prefer NSubstitute any given day. 
You're uhh welcome? If you run into issues using those sorting methods, feel free to post. But include the code you're using and the errors you're getting. Ideally, try to create a [Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve) with which we can reproduce your issue and offer suggestions.
&gt; The one that makes you happiest. That's how I choose a dev language. And an IDE. And spaces v tabs. 
&gt; There's a library which can help. &gt; &gt; Lombok So you said that Java does not have those things. It has to rely on 3rd party additions to offer similar funcionality.
&gt; So you said that Java does not have those things. I didn't say that. I was merely offering alternatives and clarifying some points. &gt; It has to rely on 3rd party additions to offer similar funcionality. Which means that the language is flexible enough to offer those features without altering the compiler.
I disagree. C# has null conditional operator, but it didn't have it before. The VM has always offered that funcionality, but the language did not until C# 6.0. Same with Java and the originally discussed features. Its VM has the capabilities, but the language itself does not offer those possibilities (yet).
Why not MSTest?
What are you even talking about or disagree with? There are some features which are present in java and some which can be used through libraries. VM capabilities has nothing to do with them.
Here is the actual answer: Visual Studio &gt; Preferences &gt; Text Editor &gt; Markers and Rulers &gt; Show Indentation Guides. VS4Mac has a ton of built-in productivity stuff that only comes via plugins in VS2017.
Not exactly an IDE but maybe a step up from a notebook, have you tried [dotnetfiddle](https://dotnetfiddle.net/)?
SQL isn't torture. C# isn't torture. *Javascript* is torture.
Dcoder works OK
I usually use [repl.it](https://repl.it/) for multi-language support but dotnetfiddle seems much, much better on mobile.
WOW. Nice, thank you.
vim and omnisharp?
&gt;`foreach (var pair in familyNamesByStreetNumber)` If you don't like using `var` or if you want to know what it gets expanded to, that would be `KeyValuePair&lt;int,string&gt;`. Using `var` is fine in everyday code, but if you're trying to teach someone what's going on behind the scenes, `var` is unhelpful. Newbies need to learn *why* things happen or else they turn into cargo-cult programmers.
You can use one of the MSTest attributes (can't remember which one) to provide a data source to a test. It can be an XML file, database, or even a Team Services Test task. The test will run for each record in the data source and will fail/pass each iteration individually. It is pretty nifty but I always had concerns about keeping the data source coupled with the tests such that devs know that a change to that data source may affect existing tests.
What is wrong with MSTest specifically? I've always had success with it.
I could never get the intellisense for omnisharp working (with YouCompleteMe) which is a huge trade off for me. Worse of all, the fanbase is full of elitist know it alls who doesn't explain at all on how to set it up and are an ass hole to literally every a post I see asking how to set it up. So, if intellisense is something you need then this is not the way to go.
It is painful. When I was developing a Xamarin app about a year ago, about half of my build/compilations issues would be resolved just by restarting the IDE (Xamarin Studio at the time) and deleting the bin/obj folder. It was pretty annoying.
Another vote for NUnit + Moq. 
Not an expert so take this as a grain of salt... Do you want to build iOS apps? If so, do you have a powerful mac? Otherwise, building/testing the app is going to be dog slow. If you're building a simple app (ie: not a game) and don't mind JS, I would try React Native or Ionic. You won't need a mac and because the way how it works, you don't need to actually compile in the same sense you have the compile a Xamarin app. The JS code is built/compiled on the fly by the JS engine.
Viasfora does that IIRC
You can try SharpDevelop and see if it fits your needs. http://www.icsharpcode.net/opensource/sd/Default.aspx
you could try Microsoft's RDP client for Android and use your office machine remotely
Here is one for iOS. Never used it myself so let me know if you do and how it goes. Continuous .NET C# and F# IDE by Krueger Systems, Inc.https://itunes.apple.com/us/app/continuous-net-c-and-f-ide/id1095213378?mt=8
You should use a List&lt;string&gt; instead of an array because you won't know how many values the user will be inputting. Console.Readline() should be called with no args. It will return a string that you can add to your list. Run it in a while(true) loop prompting for user inputs. Include a message to the user about what value they can enter to signal they are done. Maybe a blank entry or some value like END or DONE. After your readline is called, if the entered value matches your termination condition, break from the loop, otherwise add it to your list.
Yeah, I tried to avoid `var` in my examples, but missed that one. I wasn't at a computer that had a C# compiler, so I wrote all that by hand. You're absolutely correct that `var` isn't beginner-friendly.
&gt; It's available in lombok ... &gt; ... through lombok &gt; Lombok implemented ... &gt; This library ... &gt; Lombok ... Libraries =/= Language features
Am I understanding correctly that you are trying to assert that the ID number displayed in your webpage matches the ID number returned by the query?
Are you getting any errors? If yes what are they? What's your connection string? You've not given much to work with.
Whenever I am in the Application file and I go to Server Explorer to find a SQL server I am unable to find anything I have created. I do right click &gt; Add Connection and then I am completely lost. Do I need to create the SQL server (like in the third video I posted) and then create the form from that? 
But what do you suggest I do now? My brain is telling me, this is not yielding results. Stop doing this. My heart is telling me to not give in and keep running into the wall?
The things you've outlined are essentially my concerns. At that point, you're no longer doing unit tests. I haven't graduated beyond unit tests yet, because it turns out that developer workstations are horrendously inconsistent. I've been trying to get my team on the right track to be able to support those sorts of scenarios, but it's hard to do. Data sources in particular seem to be painful for test purposes. 
&gt; I don't need to bodge C# to feel like I'm using a modern language. Well, I'd need a few things in java and c# before I would declare them "modern" languages. They have a few syntactic sugars but that's it. &gt; But we don't need 3rd party libraries to features that you would expect in a nice language. You see, I can enumerate quite a few *nice* languages which have more interesting features than c#. But it wouldn't mean anything because extensibility+stability &gt; kitchen sink design. &gt; I could open an issue on the csharplang GitHub and have the language feature/syntatic sugar standardized, professionally implemented and be used by majority of the language users (2 million) in the future. That's not how language development works... &gt; TL;DR: Java does not have an equivalent feature and the closest solution involves bodge. Better TL;DR: the features sucks and there's an alternative which can be used for other things.
Does your app run if you start it from a cmdline like `dotnet MyApp.dll` ?
If the page is just returning you a general 500 error code and a sad face, try adding this to your `Startup` class `Configure()` method: app.UseDeveloperExceptionPage(); app.UseDatabaseErrorPage(); The other thing is that you probably need to set the security on your log folders, so after making them, just right click them and go to Properties. Make sure your IIS_IUSRS has full permissions and run the app again 
Link to info? Sounds interesting
I love sharp develop for throwing together a quick app
Historically is was better suited for integration testing than unit testing and had performance issues and interoperability issues. Some of the issues were resolved (or improved), but as a result it has less third-party libraries support...
 String value = "This,is,an,array"; Char delimiter = ','; String[] substrings = value.Split(delimiter); foreach (var substring in substrings) Console.WriteLine(substring); 
&gt; Sorry I'm trying to learn and practice by writing code into a book That's how I learned, but programming was much simpler back then. 
What's args? And I thought arrays were used to store values My teacher for python told me arrays are lists used to store a set amount of information starting at 0
Any resources in mind? w3resources is a little bland. 
It has helped me learn better I will say that but being I have a writing disorder it's a pain in the ass to read my writing Much less to write clearly
It doesn't work with VS code either. Well sometimes, right after restart of omnisharp
I've heard the C# Yellow Book is good, it's in the sidebar for this sub.
Horrible assertion syntax, stupid excel and xml files were the only supported way to give tests parameters for a long time maybe still the case, and Microsoft don’t even use it
I just had an issue with intellisense not working with vscode but I fixed it after like a week of troubleshooting lol. I'll link it when I get home
https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/how-to-implement-a-producer-consumer-dataflow-pattern Alternatively, if all instances of smsSender and innerAtSmsReceiver can share a reference to the same underlying AT interface object, you can use locks around that object to ensure that only one thread is accessing it at a time.
Sender and receiver have separate functionality and AT commands because receiver is Event which waiting for new sms and sender just sends
So it's okay for one thread to be sending and another to be receiving? It's not clear what level of concurrency is acceptable. This set of locks should prevent more than one thread at a time from sending and prevent more than one thread at a time from receiving: private static object _sendGate = new Object(); private static object _receiveGate = new Object(); [HttpPost(Name = "add-message")] public async Task&lt;IActionResult&gt; PostMessage([FromBody] MessengerViewModel messengerViewModel) { AtSmsSender smsSender = new AtSmsSender(); InnerAtSmsReceiver innerAtSmsReceiver = new InnerAtSmsReceiver(_receivedMessagesService); lock (_sendGate) { await smsSender.SendSms(messengerViewModel.PhoneNr, messengerViewModel.MessageBody); } lock (_receiveGate) { await innerAtSmsReceiver.ReceiveSms(); } //Logic of saving message using service } 
Sadly not it, coz i need whole Httpost work as one unit in queue. e.g. There is 20 users and they clicked send button almost in one time, so methods stacking in queue and first user message is sent and response received, after second third and so on. Users wont chat with other people but with device which response is pretty fast
Args = arguements. Arrays are used to store information, and so are Lists, but Lists dont have a set length. List&lt;String&gt; simply means a List that contains Strings. List&lt;Int&gt; would contain Integers instead of Strings, and so on.
I forgot to say, there's a good .NET threading guide on Albahari's site. He wrote the excellent .NET in a Netshell series. There's a link on the page to a PDF version which covers most of the fundamental types we use to make threading work. I'm pretty sure I put my ProducerConsumer (Blocking queue) together from that guide. It's like 40 pages instead of 400, but as you can read it in a sitting it will hopefully all gel together nicely. Oh forgot the damn link [the link](http://www.albahari.com/threading/)
At least the way you do it with a MySQL database is you create the database completely independent of your application, and then connect to that server with a MySQL connection. The C# program and MySQL database are two completely different things. Have you installed MySQL or another type of SQL server, and created a database to it? If so, look up 'how to connect to MySQL database C#' or similiar.
Then just private static object _modemGate = new Object(); [HttpPost(Name = "add-message")] public async Task&lt;IActionResult&gt; PostMessage([FromBody] MessengerViewModel messengerViewModel) { AtSmsSender smsSender = new AtSmsSender(); InnerAtSmsReceiver innerAtSmsReceiver = new InnerAtSmsReceiver(_receivedMessagesService); lock (_modemGate) { await smsSender.SendSms(messengerViewModel.PhoneNr, messengerViewModel.MessageBody); await innerAtSmsReceiver.ReceiveSms(); } //Logic of saving message using service } This will produce behavior similar to what you describe (though I don't think it guarantees that users will have their SMSes sent in the order they push the button, just that only one request at a time will be processed).
Yeah it does but not under IIS
Eventlog? Also make sure there is really no permissions problem on the logs (sub) folder - e.g. set full permissions for everyone as a test.
If it was that error w/ the sadface that would indicate that the problem somewhere in the app/runtime but I don't even think it's getting that far because I get an instant https://imgur.com/a/fl8N2NO Generic, classic asp iis 500 error. I'll try playing with the permissions more
I think this is close to what you are looking for. The question I have is how do you determine which ID you want to search for? Your SQL query returns up to 10 items, I assume that means you could set the values on 10 text boxes? public void Validate() { using (SqlConnection connection = new SqlConnection("connection string")) { connection.Open(); using (SqlCommand command = new SqlCommand("select top 10 * from table", connection)) { using (SqlDataReader reader = command.ExecuteReader()) { while (reader.Read()) { for (int i = 0; i &lt; reader.FieldCount; i++) { SetNumber(reader.GetFieldValue&lt;int&gt;(i), "id12"); } Console.WriteLine(); } } } } } private void SetNumber(int number, string idToSearchFor) { try { var elmC = web_Browser.Document.GetElementsByTagName("t1"); foreach (HtmlElement elm in elmC) { if (elm.Id == idToSearchFor) { elm.InnerText = number; } } } catch (Exception) { Wait(1); //FYI, this is a terrible, terrible idea. If you encounter an error condition you will recurse //until you blow the stack SetNumber(number, idToSearchFor); } } 
Will try this option, to check if will work as i want, will write if it will work
Yea, doesn't look good for Java...
As Zecuel said you need to have the SQL Server installed. For Microsoft SQL Server: https://www.microsoft.com/en-ie/sql-server/sql-server-downloads Other options like MySQL or Sqlite exists too. After you have installed you can manage the databases from VS (I wouldn't recommend) or through SQL Server management studio.
&gt; So you said that Java does not have those things. &gt; I didn't say that. I was merely offering alternatives and clarifying some points. Yes you did. [I've highlighted the parts where you did](https://i.imgur.com/fex7BPM.png)
Try the LINQ Intersects method
Throwing error: It can't await in body of lock statement So I guess it wont work
You first problem is that each array contains a single string with all of the students' names in it. If you break that into separate strings for each name, it may be more straightforward. From there, you can loop through the first array, searching for entries in the second, and printing if they're found: var MathClass = new [] { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" }; var ChemistryClass = new string[] { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" }; for (var i = 0; i &lt; MathClass.Length; i++) { for (var j = 0; j &lt; ChemistryClass.Length; j++) { if (MathClass[i] == ChemistryClass[j]) { Console.WriteLine(MathClass[i]); break; } } } Or, you can use LINQ: foreach (var x in MathClass.Intersect(ChemistryClass)) { Console.WriteLine(x); }
Your arrays actually only contain one long string. You need do "Mark"', "John" etc. Look into LINQ intersects method once you've fixed that 
&gt; What's args? The things inside the parentheses of your function call. You have console.Readline ([]). It should be Console.Readline(). &gt; And I thought arrays were used to store values Maybe I misunderstood your question. If you are prompting the user for input, you may not know how many elements will be in the array. In that case, you would want to use a List. It's similar to an array, but it has a lot of extra functionality, including the ability to add/remove items without resizing. I mentioned that you would want a list instead of an array if you didn't know the size. /u/grauenwolf solution does use an array because in that version he knows the length when the array is created (all items are in one Readline). I interpreted your question differently since you mentioned a loop to read the values. List&lt;string&gt; inputs = new List&lt;string&gt;(); while (true) { Console.WriteLine("Enter your value. Enter END when all values have been entered: "); string input = Console.ReadLine(); if (input == "END") { break; } inputs.Add(input); } // loop through List like an array for (int i = 0; i &lt; inputs.Count; i++) { Console.WriteLine(inputs[i]); } // loop through List with foreach foreach (string s in inputs) { Console.WriteLine(s); } 
 var mathClass = new[] { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" }; var chemistryClass = new [] { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" }; foreach(var person in mathClass.Intersect(chemistryClass)) { Console.WriteLine(person); } Console.WriteLine("-------------------"); var mathClass2 = from mp in "Bob, Samantha, Zack, Jill, Tyrone, Iyad, Mark, Eric, Jean, Liz".Split(',') select mp.Trim().ToLower(); var chemistryClass2 = from cp in "Max, Zack, Margo, Baron, Charles, Tasleem, John, Jean, Eric, Liz".Split(',') select cp.Trim().ToLower(); foreach(var person in mathClass2.Intersect(chemistryClass2)) { Console.WriteLine(person); } The top version I fixed all the arrays manually. The second I fix them with code and do a ToLower just in case you try and compare "Sam" with "sam". 
How are you starting your window? You will not receive window messages if you don't have a window loop.
Hah you got there first. I was trying out LinqPad. I've owned it for a bazillion years and rarely use it, but it's really good :)
Try this: [https://twitter.com/davidfowl/status/1004232622845804544](https://twitter.com/davidfowl/status/1004232622845804544) As I mentioned, they are abstractions and patterns, they don't help much with the implementation. I imagine someone may make libraries to build on these that will make the process smoother.
Thank you, will take a look at it.
Fun fact: casting is an "operator" and you can overload it. You just have to overload the operator like so: `public static implicit operator YourClassName(FromAnotherClassName blah)`. (Obviously, that method needs a body to do the actual changes.) That "implicit" operator can be used either implicitly or explicitly, like this: FromAnotherClassName bar = new FromAnotherClassName(); YourClassName foo = bar; or like this: FromAnotherClassName bar = new FromAnotherClassName(); YourClassName foo = (YourClassName)bar; But if you do an `explicit` overload like this, `public static explicit operator YourClassName(FromAnotherClassName blah)`, then you can only cast like this: FromAnotherClassName bar = new FromAnotherClassName(); YourClassName foo = (YourClassName)bar; Because this will give an error: FromAnotherClassName bar = new FromAnotherClassName(); YourClassName foo = bar; As with any other operator overload, be careful. If you're using the `operator` keyword, think about what you're doing. Then think about it some more. There are very few reasons to do this sort of thing. When it actually is warranted, it will usually be a field/property mapping from your software's native objects into some kind of integration object for an external system.
I don't recommend using LINQ intersect, I recommend understanding character and string equality operators, and then deciding on something like intersect.
I would expect a different error for this one, but try this anyway. When you run the site locally, you probably have your special resources such as files with database strings and things like that available. When you publish the site, these files are not copied over and would prevent the site from starting. Go check the filesystem and make sure those files exist on the web server and check back here. If that fixes the problem, we can add some includes to the .csproj
I mean, this is almost certainly your homework.
So do arrays work differently in Python than that of C sharp In Python I made a program that stores items into an array in the user can keep adding items to an array until they wish to stop 
This post was just a follow up to my last one on understanding C# nested loops. After the useful advice of this wonderful community I made this (with help) using System; public class Exercise12 { public static void Main() { var MathClass = new[] { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" }; var ChemistryClass = new string[] { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" }; Console.WriteLine("Math Class :"); for (int j = 0; j &lt; MathClass.Length; j++) { Console.WriteLine(MathClass[j]); } Console.WriteLine("Chemistry Class :"); for (var j = 0; j &lt; ChemistryClass.Length; j++) { Console.WriteLine(ChemistryClass[j]); } Console.WriteLine("Students in both Chemistry and Mathmatics"); for (var i = 0; i &lt; MathClass.Length; i++) { for (var j = 0; j &lt; ChemistryClass.Length; j++) { if (MathClass[i] == ChemistryClass[j]) { Console.WriteLine(MathClass[i]); break; } } } } } Any tips on how to improve? 
Does this look good or can I simplify it : using System; public class Exercise12 { public static void Main() { var MathClass = new[] { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" }; var ChemistryClass = new string[] { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" }; Console.WriteLine("Math Class :"); for (int j = 0; j &lt; MathClass.Length; j++) { Console.WriteLine(MathClass[j]); } Console.WriteLine("Chemistry Class :"); for (var j = 0; j &lt; ChemistryClass.Length; j++) { Console.WriteLine(ChemistryClass[j]); } Console.WriteLine("Students in both Chemistry and Mathmatics"); for (var i = 0; i &lt; MathClass.Length; i++) { for (var j = 0; j &lt; ChemistryClass.Length; j++) { if (MathClass[i] == ChemistryClass[j]) { Console.WriteLine(MathClass[i]); break; } } } } } 
For a start, naming your Class "Exercise12" makes it seem like it's definitely your homework. I'm not saying there's anything wrong with seeking help from the internet but it did seem like you tried to frame this as "totally not my homework". You've had some pretty good recommendations on how to solve your pretty simple problem already, as well.
You just highlighted the parts where I mention libraries. Btw, OP said "So you said that Java does *not* have those things" - this sentence is wrong with or without the "not". Java has some of the "required" features and there are libraries which can help if you miss something.
I'm a self taught programmer, I use college resources to learn.
That would print twice for each match. You could do it that way if you wanted to create a third list, and add matches to that list, but make sure the third list doesn't already contain the match before adding it. But using LINQ would be your best option in terms of readability and ease of use.
Also, just because I feel like being an ass. Here it is in one line. `Console.WriteLine($"Math class: {String.Join(", ", MathClass)} {Environment.NewLine} Chemistry Class: { String.Join(", ", ChemistryClass)} {Environment.NewLine} Both: {String.Join(", ", MathClass.Intersect(ChemistryClass))}");`
yh but i gotta use the loop for exercise sake.
No, where you said Java doesn't has those features.
Worked like a charm!!! I won't be adding caching at this time because my content changes a LOT and people need the latest data. Out of curiosity, why did you mention caching in regards to this expression builder? Would this hinder possible future caching needs? 
&gt;So I have been making this application to make a roll for Math and Chemistry classes. Then say that, instead of this.
Ahhh now I know what you mean. But let me explain what I wanted to say: @XXISerenaIXX stated that java doesn't have certain features. I said that no, java has *some* of those features and there are other features which are only available through libraries. The sub is too fixated on 1st-class support.
1. Check out some information on standard naming conventions, particularly for local variable. It would be idiomatic for your arrays to be named `mathClass` and `chemistryClass`. 2. Using `foreach()` instead of `for()` will simplify *your* code. It may be slightly less efficient, however. 3. Using `Enumerable.Intersect()` instead of doing the comparison yourself in a nested loop will also simplify *your* code, at the potential expense of being slightly more expensive in terms of CPU resources. *It is not a* ***significant*** *difference in the code you are presenting, though.* 4. Go easy on the blank lines. One blank line is really plenty to set off related hunks of code from each other. Here's your code with `foreach()` replacing `for()` and using `Intersect()` to do the comparing and filtering: using System; public class Exercise12 { public static void Main() { var mathClass = new[] { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" }; var ChemistryClass = new string[] { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" }; Console.WriteLine("Math Class :"); foreach (var x in mathClass) { Console.WriteLine(x); } Console.WriteLine("Chemistry Class :"); foreach (var x in chemistryClass) { Console.WriteLine(x); } Console.WriteLine("Students in both Chemistry and Mathmatics"); foreach (var x in mathClass.Intersect(chemistryClass)) { Console.WriteLine(x); } } } (Also renamed the arrays to match normal conventions, removed leading and trailing blank lines, and collapsed consecutive blank lines.) In addition to being *physically* shorter, this also makes clear that there are fewer *logical* operations, which means that it should be easier for other programmers to understand.
is you want to just try some small code pieces https://try.dot.net/ is pretty nice
Ok then make a third array
 it's starting to sound like a python array is more similar to a C sharp list
Short answer: yes. An array in C# is a very simple structure that needs to allocate as much memory it needs when it is created. Adding items past the initial size of the array requires you to potentially make a new, bigger array, and copy all of the old items over before adding new items. List&lt;T&gt; in C# handles this type of logic for you, making all of the internals of what’s going on invisible to you, similar to the array structures of other higher level languages. In C#, I recommend always using List&lt;T&gt;, and never an Array. The only real reason you would prefer using an array is if performance is extremely critical or if you simply want a better understanding of what’s going on under the hood. In all other situations, I would treat List&lt;T&gt; as your default container for multiple items.
Just to make things simple I tried doing a File &gt; New MVC app with no db/auth etc.
Why not specify the type in both arrays (or neither), while you're at it?
It is possible if you use implicit operator like: `struct xint { public int Value { get; set; } public static implicit operator xint(int i) { if(i &lt;= 10 || i &gt;= 20) throw new Exception("Value must be between 10 and 20") return new xint { Value = i }; } }`
Sorry for no indentation 😅
Because I literally had not noticed.
Sorry I meant Window Handle, which is what is used by RegisterHotKey to send out the HotKey Message which triggers WndProc. And it does work, since the handle is just an empty native window, I am still seeing what is going on, as it's working now without me doing a squirrel build.
Thanks
If you don't mind me asking when would you use a array in programming 
LOVED IT! :)
In a sense C# isn't really suitable to be a first language. It makes some things so easy to do people don't learn problem solving or programming. Having said that, a for-each would certainly be more readable OP ;) 
TBH I'm not sure why a test suite needs third-party library support. All I need in a test suite is a way to pass a test or fail a test, the rest is my code.
That's my preference as well. 1-3 days off-site (working from my home office) and the rest of the days in the office for face-to-face and ad-hoc meetings. It helps that the whole team is that way and we have an office on the other coast (so we have good-to-strong video conferencing / pair programming software). There's just a lot of informal meetings you'll miss out on if you are 100% remote. Especially if some of your team is in the office most days. You do get forgotten about and end up like a mushroom if you're not careful. Sure, working in an open-office sucks (ours is a mixed bag right now because there are a handful of phone users, and we're over-stuffed into a room that was designed for 2/3 the current desk count). But I don't count on office days for high productivity, I count on them for collaboration. 
Well if that's the required datasets are not allowed to be changed he could also use string.split(",") https://msdn.microsoft.com/en-us/library/system.string.split(v=vs.110).aspx
AspectJ can (or used to) be able to add things like extension methods and generating automatic getters and setters. I jumped out of Java around version 6, so not 100% up to date on what is in version 9 (and soon 10). Some things in Java are just different. Other things don't have the syntactic sugar that C# has. It's catching up a bit.
Getting .NET Core to run on older Windows Servers is a bit of a pain in the ass, it took me half a day to get everything running a few weeks ago. If your application has problems starting up, maybe the IIS process doesn't know yet about the addition to the PATH variable. So restart the whole IIS or better the server if possible. Other than that it's most likely a IIS configuration error or folder permissions. (It still can be a good idea to try using a very basic .NET Core app without any fancy configuration to make sure it's not your apps fault, e.g. using a wrong production configuration on startup) Also take a look at the MS Troubleshoot page if you haven't: [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/troubleshoot?view=aspnetcore-2.1](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/troubleshoot?view=aspnetcore-2.1)
In that case, restart IIS. And by restart I mean actually pressing stop, then start. The restart function doesn't seem to re-init everything properly. You can usually find this at the top-right of the IIS manager GUI
So maybe that’s not the right question to ask? An array is a certain type of data structure that may me modeled in different ways depending on the programming language. Fundamentally, an array structure is the backbone of a ton of what goes on in programming. In C# specifically, like I said, there is rarely a reason to use an Array over a List. Note though that a List is really just an abstraction over an array. So even though you’re not working with an array directly, in the end what you’re doing all boils down to usage of the array structure anyway.
Sooner or later you're going to realize that you want to integrate your unit tests into Continuous Integration and run them automatically on the server (with rich output, statistics and flow control). Or you will want to integrate them with BDD framework like Specflow. If you only test very primitive classes and only do this ad-hoc, then yeah, you don't need third-party library support.
You can listen to both: Take a break, but come back to it. I usually start with a 15 min break. I'll take a walk, surf the web, watch TV, etc. Anything to take my mind off of it for a moment. If after that I'm not successful, I move on to something else and return to it after a few hours, essentially increasing the time away from actively thinking about it, giving my mind a rest and the opportunity to work it out in the background. If I'm still not understanding it or getting it to work, I leave it for the day and try the next day. Getting rest helps recharge the mind.
Considering .NET Core 2.1 supports ARM32 natively, do you contacted the Microsoft .net crypto team if they will accept a pull request?
&gt;Right now in our EF 6 database-first world, we just update the DB, update the EDMX/model and all instances of both apps versions are happy. So why wouldn't this still be the case with code-first? Clearly two different logical models can operate against a single database version (that's consistent with both the logical models). Have you tested whether updating the database schema actually kills v1 instances?
I mean cache this method because it is running reflection, scanning for a single property and building an expression tree every time you run it. You could either add a concurrent dictionary memoization wrapper around that method or perhaps build a dictionary of all possible properties once like this: public static class PropertyExpressions&lt;T&gt; { private static readonly Lazy&lt;Dictionary&lt;string, Expression&lt;Func&lt;T, string&gt;&gt;&gt;&gt; Dictionary = new Lazy&lt;Dictionary&lt;string, Expression&lt;Func&lt;T, string&gt;&gt;&gt;&gt;(ValueFactory); public static Expression&lt;Func&lt;T, string&gt;&gt; FromString(string propertyName) { if (!Dictionary.Value.TryGetValue(propertyName, out var result)) throw new Exception("invalid property"); return result; } private static Dictionary&lt;string, Expression&lt;Func&lt;T, string&gt;&gt;&gt; ValueFactory() =&gt; typeof(T).GetProperties().Where(p =&gt; p.PropertyType == typeof(string)).ToDictionary(p =&gt; p.Name, BuildPropertyLambdaExpression); private static Expression&lt;Func&lt;T, string&gt;&gt; BuildPropertyLambdaExpression(PropertyInfo p) { var param = Expression.Parameter(typeof(T), string.Empty); var property = Expression.Property(param, p); return Expression.Lambda&lt;Func&lt;T, string&gt;&gt;(property, param); } } or leave it without any caching. Each of these options would have benefits and drawbacks: ### No Cache: pros: lowest standing memory usage (nothing is cached); simplest code cons: allocations/gc every call; `O(n)` where `n` is number of properties; probably slowest version when under load (I am not your profiler) ### Memoized (not shown) pros: only caches results when first call for a particular property is accessed; amortized constant time runtime cons: correct data type choices necessary to find best way to do it in order to see an improvement over "no cache" method; profiling will be necessary; more profiling necessary to compare to generated dictionary standing memory also ### generated dictionary cache on first access (above) pros: should be fastest way after the first call cons: relatively expensive first call (time), possibly most standing memory --- Another approach would be something like a T4 template to do compile time generation of a method similar to the one /u/enlogen suggested. As always with various optimization strategies I'd recommend going with the simplest form today (which is either the way I provided or the way /u/enlogen did, depending on how complex your model is and how much you expect to change it) and optimize based on profile data. I merely think it is useful to understand that there are various strategies here and ways around runtime restrictions even that you might find yourself up against. I doubt this method is in a poor profile position compared to the db query, but you never know until you sit there with some hard data.
Since you said you do the three loops for exercise sake, I would still suggest you to merge them in a single loop with a nested loop. You don’t have to print out things directly, use StringBuilder to store each name in a string: //simplified, without Stringbuilder, cuz mobile string mathNames = “”, chemNames = “”, doubleNames = “”; foreach(var math in mathClass) { mathNames += (math + “/n”); foreach(var chem in chemClass) { chemNames += (chem + “/n”); if(math == chem) doubleNames += (math +”\n”); } } //printout all three string variables the way you want them
I'd advise against static-anything. Look up Dependency Injection in ASP.NET Core. You'll be needing a Singleton dependency where to store your incoming messages. You can use a ConcurrentQueue. You shouldn't really register a ConcurrentQueue as-is in your web app services but let's pretend it's fine. Look up IHostedService. You're going to need something to take those messages you just enqueued in the controller action. hth 
Great write-up and comparison of the different options. I appreciate the explanations in detail. I definitely prefer the simplest approach. I actually decided to re-think even using the SearchExpressions library and instead pulled the logic up to the caller and made it non-generic so each caller needs to configure the properties they want to be searchable with regular IQueryable members. In the grand scheme of things performance won't be a factor (with this particular use-case) since our daily usage will be internal and very low. I could see myself agonizing over optimizing functions like these when call counts approached hundreds of thousands per minute but then id have bigger issues in my pipeline I am sure, like the DB.
I'd try to open the site from the server itself. Usually IIS will show more verbose error page by default. Like open localhost from the server itself.
&gt; .NET threading guide on Albahari's site. I've skim read that one. And it's awesome. Id go back and fully digested it but it doesnt really get into asynch... Mr Stephen Cleary says that as soon as you use Thread...you probably doing it wrong (or something along those lines, don't quote me) Cleary guy also talks about ReactiveExtensions in his book, but I glossed over those parts because I have to walk first. The other thing he mentions is TPL Dataflow. I again glossed over that, but that is probably something I should understand.
Oddly enough, I only just grasped what Horizontal/Vertical meant. Thank you for explaining that. It seems obvious now :) Like a derp moment.... &gt; Akka.Net I recommend, it's a good way of thinking about things. I don't want to scale horizontally, unless I have to. Well. I will do whatever is easier :) ... would you suggest I might be better off focusing my energies going horizontal from the beginning? (that is a business/domain question of which you don't know the parameters, but a discussion might be nice). I am not in a big way as such. I am just a guy working on my own trying to make enough money to eat beans without having to socialise with people :) Some guy once quoted a baseball guy from somewhere saying something remotly like this: "Jimmy baseball guy was so good because he would always swing the bat where the ball was going to be. Not where it currently was" I sort of figure if I go vertical, A) It's easier. B) In the next 5 years, maybe they'll have computers with a gazzillion cores in them or something... What do you think?
&gt; CQRS is worth getting your head around. Fowler man seems pretty wary of it; https://martinfowler.com/bliki/CQRS.html I remember reading this a few months back and that stopped my research dead :) Time permitting I will have to get back and understand it, I'm still a bit scared tho.
&gt; TDD/BDD. I do rudementary TDD. It requires great discipline to do corretly I believe. I have no idea how code works :) Damn it. So many things to learn...I'll read Mocks are not stubs, before I learn to code though. At least that way I'll know what to learn next.
list.ForEach() is NOT LINQ.
yuk, C# string interpolation, GONE WILD
I never said anything about that?
How about this: `string[] MathClass = { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" };` `string[] ChemistryClass = { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" };` `var x = MathClass.Intersect(ChemistryClass);` `foreach (var u in x)` `{` `Console.WriteLine(u);` `}` Using LINQ is so relaxing.
whoops nvm, i think i got confused with other posts
I'm only familiar with Moq. Any reason why you prefer NSubstitute?
 using System; using System.Text; using System.Collections.Generic; public class Program { public static void Main() { var MathClass = new[] { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" }; var ChemistryClass = new string[] { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" }; var mathClassHash = new HashSet&lt;string&gt;(); var bothClassesString = new StringBuilder(); Console.WriteLine("Math Class :"); foreach (var student in MathClass) { Console.WriteLine(student); mathClassHash.Add(student); } Console.WriteLine("Chemistry Class :"); foreach (var student in ChemistryClass) { Console.WriteLine(student); if (mathClassHash.Contains(student)) { bothClassesString.AppendLine(student); } } Console.WriteLine("Students in both Chemistry and Mathmatics"); Console.WriteLine(bothClassesString); } } 
CodeLens is first thing I disable after installing Visual Studio :)
It's milliseconds. What were you going to do with the code during those milliseconds?
I would say syntax is a main point. It is quite intutive and easy to learn. 
You can put a tag in the web config to not error if a newer migration is deployed
We haven’t assigned someone to actually experiment this (yet). So the database’s migration table can concurrently hold multiple model version values and all app versions are happy? If so, I might be able to justify spending experimentation time!
That's pretty typical of EF. You could do the research to find the right setting/magic flag that causes it to not error out. But it takes less effort to just learn how to use database projects and take full control of your database.
Look at the guy with a fancy kick ass computer/tiny projects for work. Some of us are using a computer that’s several years old and full of security bloatware. CodeLens can take 10-20 seconds to appear on some of my larger projects. 
It's actually not the time I'm concerned about. I just find the jumpiness of the code as it loads visually distracting. It throws me off.
I actually don't mind it in Visual Studio. I don't remember ever seeing the "jumping" phenomenon there. It's with Visual Studio Code that it's a problem.
The jumping issue doesn't bother me- I just hate the vertical screen real estate that the feature takes up.
Fair enough. Good thing we have the option to disable it. Myself, I also work on TypeScript projects, and I just discovered the setting. If they fix this, I'd love to enable it on any language I use.
It's always cool seeing someone diving into the deep dark corners of C#! 
The 2nd thing I do is disable newlines like God intended. 
Since C# sub doesnt get much job traffic in these, any ideas for job finding site? I've been using Indeed with spotty results. For what its worth I'm looking for a job in NW Rural-ish USA (no big cities - biggest would be like Boise, ID - 300k people) 
I'm running an i5 that's a few years old. I have a solution with 46 projects in it. Still doesn't take long to load.
Are we allowed to post about freelance/consultancy work too?
Use a SemaphoreSlim of size 1 instead of a lock statement
You need to set `e.Cancel = true;` on the `else` branch when opening the save dialog: if (saveFileDialog1.ShowDialog() == DialogResult.OK) { richTextBox1.SaveFile(saveFileDialog1.FileName, RichTextBoxStreamType.PlainText); GC.Collect(); } else { e.Cancel = true; } 
Thats perfect, thanks a lot :)
oof
Thanks I’ll try some of these. And yeah that always seems to be the answer for hosting asp.net on IIS, a half day of fiddling 
It's mildly frustrating on my team because they have a "space between every method" standard, and code lens provides that space already but some people have turned it off and now need that space. 
Wow, 10-20 seconds is way too much. If you still don't have an SSD disk you should make it a priority.
He's not talking about "a SQL server", he's talking about "SQL Server" (capital S in Server), the Microsoft product.
There's a SQL Server Instance, and a SQL Server database. You need to first connect to the correct instance, then to the database you created. You can use the server explorer in Visual Studio or SQL Server Management Studio, a separate program, to connect to them. An instance can have multiple databases, and a database can have multiple tables and other data objets, is pretty much how it breaks down.
Like others said, there's a combination of settings that will cause EF to not do model checking, allowing the older version to try to use the DB despite differences. You should test thoroughly in a preproduction environment to ensure your changes truly don't break anything, preferably combined with automated tests to exercise all your queries using data representative of production. I never use EF migrations. I use SSDT database projects and use the schema compare to generate my DB change scripts. I update local dev DB and regenerate my code first models. Develop against the updated EF model. It's basically a form of database first approach, but instead of generating edmx, you generate the entity models. It sounds strange but alot of people are doing it. It allows you to develop your database in SQL, the best language for it, but still get the ease of use of code first models. You just regenerate your code first models whenever you change your DB. 
I don't see the problem with the original version. But unless I'm missing something, you could also do virtual public T FirstOrDefault(Expression&lt;Func&lt;T, bool&gt;&gt; predicate) =&gt; _ctx.Set&lt;T&gt;().AsNoTracking().FirstOrDefault(predicate); As a general comment about the repository, I don't see the point. It doesn't seem to add anything of value; you could just call the DbContext methods directly.
Extended functionality a bit. Should work. public abstract class SubjectClass { protected readonly string subject; protected readonly IList&lt;string&gt; students; public IList&lt;string&gt; Students { get { return students; } } public string Subject { get { return subject; } } public SubjectClass(string subjectName, IList&lt;string&gt; roster) { subject = subjectName; students = roster; } public override string ToString() { return $"{subject} class"; } } public class MathClass : SubjectClass { public MathClass(IList&lt;string&gt; students) : base("Math", students) { } } public class ChemistryClass : SubjectClass { public ChemistryClass(IList&lt;string&gt; students) : base("Math", students) { } } public class ClassEvaluator { public IList&lt;string&gt; Intersection(SubjectClass left, SubjectClass right) =&gt; left.Students.Intersect(right.Students).ToList(); } } 
Did you turn on the option to contract empty lines?
Good for you. We're not all so fortunate.
While certainly a help, security bloatware still overwhelms it.
First of all the basic data structure just sucks! One should not continue with such a mess, just define the structure differently! That said, just use *sets* to store the class mates. Then you could easily use one of the classic set operations to determine the common members to both sets. 
`string json = JsonConvert.SerializeObject(list);` I believe this would work. Please put this using statement. `using Newtonsoft.Json;`
This will help you out : https://www.newtonsoft.com/json/help/html/SerializingJSON.htm It's a library that will do the serializing for you. 
OMG ! This was overlooked, finally got what i wanted many thanks.
I did not. First, making the production-ready implementation requires much more effort (key expansion, handling incomplete blocks and buffering data, implementing modes of operation). Also, the whole .NET Core crypto library is just a proxy to whatever underlying crypto provider is available, and I don't think there are going to be exceptions to that rule.
Ah, that's unfortunate. If you don't mind I'm curious to know which is the bloatware you have to use.
Third party drive encryption, two forms of end point encryption, scanners to detect messaging programs, auto encryption of any USB drives. There's more, but that's the ones I can think of at the moment.
Thanks. Wow, it seems you work on pretty confidential projects. 
Agreed. And exactly for that reason. You’d be in the PAL layer as a hardware accelerated provider. IMHO you could at least message them on GitHub saying you know this half, they know the rest, what’s a good way to combine. This can reach way more people that way!
I think I understand. And if I’m right it’s great because you can use real SQL tools to maintain the database instead of some migration applet. 👍
I’m trying to make more complex classes but I don’t understand how to make them unique without a lot of if statements. Seems like there should be a clever way to do it though 
Not really, but some of our employees do. There would be huge SEC violations if the financial data they touch is revealed. 
Give [this](http://www.selectbs.com/process-maturity/what-is-object-oriented-design) a good ol' read. Then [here](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/inheritance) and [here](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract). Hopefully this clears a bit up for you. I see what you're going for but you do not need tons of if statements. Some good old object oriented work will help you. Exactly what C# is made for/
Yea, I never said it was pretty.
Also: dont use strings as ids. They are expensive. Use integers instead
Btw, what tool do you use to re-generate the class files if there is no EDMX file?
Yea, you call `addstockmenu()` etc. in the loop. Instead of break, you probably want to call `return`, which exits the function, rather than just breaking the loop. Then, you'll want to take the body of the `else` statement, and put out of the for loop. As a result, it will iterate over all the items in the row, then show the message box, and exit the function if it finds an invalid item. Then, it will call the `addstockmenu()`. Like this: private void StockReqItemAdd_Click(object sender, EventArgs e) { if (StockReqItemDataChosen.Items.Count == 0) { MessageBox.Show("Please add item/s before proceeding!"); } else { for (int i = 0; i &lt; StockReqItemDataSelect.Item.Count; i++) { if (StockReqItemDataSelect.Items[i].SubItems[3].ToString() == "0") { MessageBox.Show("Don't leave empty quantities on the items!"); return; } } addstockmenu(); delall(); loaddata(); } } Some other suggestions: Instead of for every mistake in the entered data, see if you can resolve it first in your code, such as removing the items yourself. It can mean the difference between a intuitive and annoying program. Also, this subreddit really isn't the place for asking basic questions, try /r/learncsharp or /r/learnprogramming instead.
I'm sorry for posting this here. I don't really know where to ask. Thanks for suggesting the two subreddits.
While that is the way of doing it "according to the book", that is not the most maintenable nor readable way of doing it. If all the weapons act the same, they should belong to the same class with different instance values such as name, cost, damage, etc. Moreover, all the possible weapons could be kept in a config file / database and adding new ones would not require a code change. The same applies to characters' classes, spells, etc.
You spelt strength wrong
I don't see why inheritance is not maintainable or readable here. This is a perfect example of where you should use inheritance.
Since this looks like you're using unity, I'd suggest learning the basics of ScriptableObject since you can use it to create a neat little database that sit in asset files.
It annoyed me at first. You're reading it and it shifts slightly. I found it all a bit cluttered too. It doesn't bother me any more. I guess they could fix the jolt by preallocating space for areas that will load codelens data, but it wouldn't be my priority now.
With TDD, I always say keep it simple. The test and mocking libraries have a lot of features, you should never need 95% of them :)
It's like everything, there's no silver bullet. It's like ES (Event Sourcing). Google "Event Sourcing sucks" or something like that and you will get a lot of hits. It works well in some financial situations, but will bite you in a bunch of other use cases. CQRS is no different. Although it has a little brother called CQS which is the separation of Command and Query without some of the bells and whistles. But you're right, be wary of any advice which suggests anything will definitely make your life better :)
It is actually not as the only things changing is the data, not the behaviour. For instance, all swords behave the same, they only have a different damage factor and name, which are just instance variables. Moreover, you would start using virtual methods, with their associated cost, for no benefit. The code using the inheritance will be less readable and maintenable because more difficult to navigate (as it has a larger amount of files / classes / types). If a sword would behave, as for game's mechanics, i.e. code, differently from a spear then it would make sense to have a different class
It's almost certainly a good idea to think horizontally as physical scaling is either code optimisation which you can do regardless and hardware, which you can also change regardless. This doesn't mean you have to actually scale out, or write everything as Microservices. Again, I've worked on Monolithic applications and selectively extracted areas of functionality later to run elsewhere. What makes that an easier process is, even in the monolith, keep related code in the same service and expose it with an interface. Do use DI, AutoFac, SimpleInjector or Unity for example. Once you get the hang of that you never want to go back, even for simple stuff. My guess is that in the next five years you'll get the same or moderately improved performance and better energy use. The Intels and AMDs have been finding it harder and harder to increase performance. If you're doing a lot of calculations, you could look at CUDA too. I don't use it, I read a book on it once. So your baseball analogy is pretty much correct. I've never seen a successful app that didn't grow beyond all expectations (I've seen prently of unsuccessful app's not grow at all, but that's a different story ;) ) See how it goes, as I said, if you have, for example, option pricing code, keep it all together, expose the functionality through a specific interface, then if you need to in the future, you can pull that code out, host it in a service on a different box and just wrap it in a (for example) WCF wrapper. Your app would barely have to change. That sort of isolation also makes it easier to test. If you've got option pricing code all over the shop, it's hard to keep it consistent. This way you can write simple tests that prove it behaves as you expect.
Make an interface or an abstract class "Weapon" which defines the signature of a weapon. What categories can it have? It may have * a name * a damage * durability * price * rarity * abilities, effects * buffs, debuffs Next, make a class for each weapon type "Broad Sword", "Staff", which inherit from "Weapon". This time, you put in values: * name = "Broad Sword" * damage = 5 Basically working with object orientation and polymorphism.
He's not wrong, although it still helps to understand terms like blocking and non blocking synchronization and some of the signalling components like *ResetEventSlim. You're right though, you may never need them, I imagine when you do you'll have enough experience to go looking :) I don't really know how my car works, but that doesn't stop me on the track :) Rx is great, it's worth reading about. TPL Dataflow I don't use at all as it's a bit like Akka.Net :) 
Without more details it's hard to tell really. What does each project do?
Disclaimer: I very much a hobbyist, not a professional programmer. But I've been messing around in Unity and came across essentially the same question as this. The below is how I approached it, but I don't have the experience to claim its the best way. I think u/leaningtoweravenger makes some very good points. The config file/database thing is key IMO. Having this sort of thing hardcoded means you'll need to fiddle with the code in order to add new weapons, if you can code a way that the weapons are defined in a config file, you can add/edit weapons just by editing that file - makes the game potentially modable, as well as more convenient for you. So you would want to avoid hardcoding things like: if (name === "BroadSword") Damage = 5; Rather you have something like a Dictionary&lt;string, WeaponStats&gt; (which can be hardcoded to start with, but ultimately can be populated from a config file easily) and then when initialising a Weapon do something like: WeaponsStats stats; if (WeaponsStatsDict.TryGetValue(name, out stats)) { Damage = stats.Damage; //etc } else { throw new ArgumentException(nameof(name)); } That isn't to say that you don't have multiple classes handling your weapons, but you don't need different classes for weapons that only differ in the values they have for things like damage. Those should just be different instances of the same class. Where you may want different classes would be for weapons that are mechanically different. Eg: WeaponThatDamagesTarget and WepaonThatDoesAOE. These broad classes would obviously be hardcoded, and the weapon definition config file would need to specify which was to be used. Whether these should inherit from a single Weapon class as an implementation detail - does it make sense in terms of them sharing code. I would have an IWeapon interface which they all implement, and always code to that. You can decide whether to make them inherit from a base class or not depending on what makes sense to you, and change it around, or use different methods for different implementing classes, without having to alter the rest of your code.
A variety of things, namely handling EF contexts and updating or performing database actions. One in particular seems to handle pricing and order placing for the various projects. 
Objects incapsulate different states and classes incapsulate different behaviours: if all your weapons behave the same but they just have different stats, you do not need inheritance
You might know more about it than I do so feel free to correct me. With class inheritance, it enables you to do cool things like: * have a character with a general field of type *Weapon*, which can be "equipped" with any instance of a specific weapon * ask if something is typeof *Weapon* * have a shop or chest with a List&lt;Weapon&gt;, which can hold any kind of weapon You could also nest this inheritance and have *Staff* and *Sword* derive from *Weapon*, and have *Broad Sword* derive from *Sword* and *Quarterstaff* derive from *Staff* and so on. Is that possible without classes?
As long as all your weapons behave the same, you can have a single Weapon class with all the fields that you need. Specialising classes in sub-classes only to change the value of instance variables is shooting flies with a anti-tank cannon. Notice that using typeof is a very bad practice in object orientation!
But how to get that functionality without classes?
Is it good practice to make queue with javascript to queue onClick method which calls this HttpPost?
Start with some basic sanity checks and add some debug output. Are you actually starting as many threads are you think you are? Are your threads covering the full range of your array? Also, [read this](https://jeremybytes.blogspot.com/2015/03/lambda-expressions-captured-variables.html).
A few things... for (int i = 0; i &lt; numberOfProcessors - 1; i++) { this shouldnt have the -1; also, when using =&gt; in a for loop, funny things happen when the compiler figures out what i is equal to. If you put a breakpoint in the SumOfEachPortionInDataset method, you will see the threadIndex is always 4. To fix, create a local int in the for loop that takes the value of i: int id = i; threads[i] = new Thread(() =&gt; SumOfEachPortionInDataset(id, arrayDataToCheck, datasetPortionLength)); finally... your lock statement shouldnt lock on the array, it should lock on a separate object in the multithreadedsummation class: class MultiThreadedSummation { object mylock = new object(); .... lock (mylock) { 
Thank you for the resource. I'll have a good read.
Removed: Rule 4.
It worked! Thank you kind stranger :). I'll have to read more on lambda expressions and locking correctly. I've been scratching my head over this the whole day.
np. you might want to adjust it slightly so that the method takes a start index and a count. Currently, you'll get an incorrect result if the array length is not a multiple of the thread count. You should make sure the full array is processed. eg. array is 10 long. there are 4 threads. 10/4 = 2 (integer division) each thread will count 2 elements of the array, so a total of 8 elements. 
Print screen.
Yes this is certainly something that I've been meaning to adjust. For ease of my own understanding I've purposely omitted this temporarily. Good spot though!
You have only one class, called Weapon, which contains how weapons should behave. Each object has different values for damage, etc. In practice, you do not need a base class because you have only one class to represent all the possible weapons as long as they use the same logic.
Unfortunately, if I am not wrong, executing `_ctx.Set&lt;T&gt;().AsNoTracking()` would actually load all the records onto the memory. That would be intensely resource-heavy. Doing something like `_ctx.Set&lt;T&gt;().FirstOrDefault(predicate)` would mean that an optimised query is executed and isn't as resource-intensive. I am wary of exposing `DbContext` to the ViewModels. Repository Pattern does come with a bit of technical debt but if ever, I want to swap out EF for something a bit more platform-agnostic, it'd be easier to do.
Are those your actual credentials?
woops lmao. i'll change all that now both here and irl. And good point, i'll add that in and see how it goes
Assume you have a single class called `Weapon` which defines the behavior of a weapon (be that a sword or a staff, etc.). You create instances of this class to represent an instance of a weapon. For example: a sword is an instance of a weapon; a staff is an instance of a weapon; a breastplate is an instance of armor. Your character can still equip any instance of a weapon; perhaps `myCharacter.Equip(myWeapon);`. To equip something is a behavior of a character, so the class defining a character would contain a method with the signature `void Equip (Weapon w)` which defines that behavior. In this case it may just set a field to the new weapon. You can still check to see something is a weapon using `typeof(Weapon)`; but I'm not sure that you really understand what is going on when you use `typeof` and you should probably avoid it, as you very likely don't need it. You can still create a collection of weapons by using `List&lt;Weapon&gt;`. The purpose of a class is to assert that an object has specific features and expose those features. It is not to define those features. To follow this up I'll give a short example of when you *should* use inheritance: when the behavior is different. Let's make `Weapon` our base class. It asserts that a weapon has a name and does a certain amount of damage. However, I would also like to store information about how long a sword is or how long my staff is! I could just add another field to `Weapon`, but I don't care how long bows or throwing knives are. On the other hand, I need to store the range for a bow or a throwing knife, but don't need a range for the sword. Therefore, I create two subclasses: `MeleeWeapon` and `RangedWeapon` which inherit from `Weapon`. Each one provides space for more specific properties weapons that don't apply universally. Virtual methods (such as `ToString`) allow us to use these specifics when necessary, but behavior that is independent of each instance, such as dealing damage, doesn't need to be redefined. It is universal for each class. If swords and staffs have sufficiently different behavior, then a class could be defined for each. This depends upon the mechanics of your game. For a full example of code, see here: [https://repl.it/repls/IdealDeepskyblueAbstracttype](https://repl.it/repls/IdealDeepskyblueAbstracttype)
This did the trick. Ended up leading me here https://stackoverflow.com/questions/37948865/iis-server-asp-net-core-page-cannot-be-accessed-because-the-related-configur I ended up having to install the web hosting package explicitly. Even though on this page it says it's included with the SDK, which i already installed https://www.microsoft.com/net/download/windows Maddening
The issue at play here is actually not really related to threading and is described well in [this SO post](https://stackoverflow.com/questions/235455/access-to-modified-closure). The compiler is turning your lambda into something like this: [CompilerGenerated] private sealed class ClosureClass { public int i; public MultiThreadedSummation summation; public int[] arrayDataToCheck; public int datasetPortionLength; internal void ThreadStart() { summation.SumOfEachPortionInDataset(i, arrayDataToCheck, datasetPortionLength); } } public long SumDataset(int[] arrayDataToCheck) { int datasetPortionLength = arrayDataToCheck.Length / numberOfProcessors; Thread[] threads = new Thread[numberOfProcessors]; var closure = new ClosureClass(); closure.i = 0; closure.summation = this; closure.arrayDataToCheck = arrayDataToCheck; closure.datasetPortionLength = datasetPortionLength; while (closure.i &lt; numberOfProcessors - 1) { threads[closure.i] = new Thread(new ThreadStart(closure.ThreadStart)); threads[closure.i].Start(); closure.i++; } for (int i = 0; i &lt; numberOfProcessors - 1; i++) { threads[i].Join(); } return SumAllPortionResults(); } As you can see now, when the ThreadStart method is actually called, the value of i will probably not be what you were expecting. The C# compiler uses a technique called "lowering" to convert your lambda method into a class. You can see this compiler generated code if you decompile your implementation with ilspy and turn off the option "Decompile anonymous methods/labmdas". I prettied it up for this post, but looking at the transformations that the compiler makes can be helpful at times.
Yep, that was it! Forest through the tree's scenario there. Cheers!
When you change the datasource of a datagrid you have to call the refresh method of the grid, to refresh the grid. var linqData = from someotherdata select differentdata; someDataGrid.DataSource = linqData; someDataGrid.refresh(); 
Yeah I know. I had a similar issue where even the verbose error page was not really helpful. Actually I think it was the same as you: error while loading the config 500.19 Mine was because some config item was relevant to some module/handler that was not installed on the IIS.
I fixed it sadly the way was ways more difficult
I had to lock the on change event cuz it was called multiple times. Clear the list - give parameters to the method and filter the new id by the change event
Still thanks I appreciate it
I recommend not making any assumptions about how EF translates queries. (Especially with EF Core 1.x, talking from experience). Try this SO answer to log what EF is actually doing: https://stackoverflow.com/a/20751723 , or use SQL Server Profiler if you want to analyze the entire query plan.
If the list is sorted, just walk through the list until you find the first entry that is larger than your number. That and the previous entry are the values you want. for (var i = 0; i &lt; list.Length; i++) { if (list[i] &gt; myInt) { Console.WriteLine($"{list[i - 1]}, {list[i]}"); break; } } If the list is unsorted, you'll need to walk through the list and maintain variables containing the largest entry less than your number and the smallest entry larger than your number. var lowerBound = list.Min(); var upperBound = list.Max(); foreach (var x in list) { if (x &gt; myInt &amp;&amp; x &lt; upperBound) { upperBound = x; } else if (x &lt; myInt &amp;&amp; x &gt; lowerBound) { lowerBound = x; } } Console.WriteLine($"{lowerBound}, {upperBound}"); You could reduce this one to a couple LINQ method calls, though var lowerBound = list.Where(x =&gt; x &lt; myInt).Max(); var upperBound = list.Where(x =&gt; x &gt; myInt).Min(); You will probably also need to add some handling around the case where your number is outside the bounds of your list. That is, what to do when it's 5, or 500. Consider asking questions like this in r/learnprogramming or r/learncsharp, though.
 public class AxeWeaponType : Weapon, IMeleAttack public class BowWeaponType : Weapon, IMissileAttck Weapon should be really small, maybe just a name. Possibly how many hands it takes to use, but I might hold off that even. You don’t need a special class for an Orcish BattleAxe, just use the AxeWeaponType and let your data populate into it. 
Get a cheap ReSharper license, it will warn you about things like this. This "access to a modified closure" problem you encountered is one of the few reply counter intuitive things that you will encounter time and time again. 
I think u/leaningtoweravenger makes good points too. For what is being asked for one class is all that is needed for now. However this smells of a future refactor as the idea that all weapons (bows and swords) function the same is a design mistake waiting to happen.
Sounds about right for me. I’ve got HIPPA on my back. 
Sounds like they should remain separate.... remember the SOLID principles.
Viewing this post on my phone is annoying -- I am only seeing the first 20 or so characters of each line and it isn't word wrapping. I don't know enough about WPF to give a good opinion on MEF + WPF, but I did come across some cool stuff you can do with MEF as of .NET 4.5. You don't need to use the MEF attributes like `ExportAttribute`. Instead, you can use a `RegistrationBuilder` along with a `ComposablePartCatalog` (i.e `AssemblyCatalog`, `DirectoryCatalog` or `AggregateCatalog`) to define, during runtime, your imports and exports. A good example can be found [here](https://visualstudiomagazine.com/articles/2013/02/12/mef-convention-model.aspx?m=1) and it is even using WPF too so that example might be good for your question outside of just the neat MEF tricks it shows.
Any reason why you don't use the .dacpac and the DACFx to deploy the database?
Excellent opportunity to apply the Strategy Pattern. Please watch this video and you'll save yourself a lot of code and maintenance: https://www.youtube.com/watch?v=v9ejT8FO-7I&amp;t=5s In non-Unity C# you would have a `Weapon` class with a constructor that has an `IAttackBehaviour` (`void Weapon(IAttackBehaviour attack) {}`). The `Weapon` class has a method like so: public void Attack() { attackBehaviour.Attack(this); } And the `IAttackBehaviour` interface (the pattern) would look like this (`IWeaponData` is some interface that holds properties like WeaponDamage/Range/Size and whatever else you want): public interface IAttackBehaviour { void Attack(IWeaponData data); } And an implementation of `IAttackBehaviour.Attack()`: public class MeleeAttackBehaviour : IAttackBehaviour { public void Attack(IWeaponData data) { // .. code to create hitbox .. foreach (Collision c in hitbox.GetCollisions()) { c.collider.GetComponent&lt;IActor&gt;().Health -= data.WeaponDamage; } } } Btw, this is just pseudo code. Also note what /u/talemon said about `ScriptableObject`. These objects are the preferred way to store Design-Time data like weapon stats (the `IWeaponData` in my example). With that, you can use Unity's Inspector to create new weapon stats without hardcoding it in C#.
Have fun! Ive always found multithreading very fun to work with.
I'm glad you got this figured out. Understanding multi-threading is difficult. You should look at the Task Parallel Library (TPL) for .NET. It greatly simplifies threading in that you don't create threads directly. It solves the really hard problems so that you can take advantage of parallelism without having to make all the mistakes that come with doing it yourself. 
Just as a heads up, if you have a telerik licence their internal support team is often very good and will provide code samples. If you provide them with a sample project with the issue that they can load up on their end they will sometimes even correct your code.
The line input = Console.ReadLine(); should wait for user input. If it's not, this suggests that you have something sitting in the buffer still that is not flushed, but calling ReadLine reads from the buffer. Do you perhaps have a call to Console.Read() anywhere else?
 private static void timer1_Tick() { fIsTestMode = true; DSFIDAndUIDList = ""; totalCardNumber = 0; NewInventoryScanNoAFI(); if (!Console.KeyAvailable &amp;&amp; checkIfPortOpen(currentSelection)) { if ((fIsTestMode == true) &amp;&amp; (!fIsAppClosed)) timer1_Tick(); } else { return; } } This function is running before the problem. I have it setup so this function spams the console (on purpose) and when i hit enter it stops the spamming and breaks out of the function, then going to secondPrompt(). the line if(!Console.KeyAvailable &amp;&amp; checkIfPortOpen(currentSelection)) I believe is what is causing that problem. I am just unaware how to "flush" the buffer or whatever you mean by that.
The problem is that you are pressing enter which puts a newline in the input buffer, but you never consume (read) the contents of the buffer. Therefore the next call to ReadLine (in your original function) will read whatever is in the buffer (a newline, basically an empty string) and that's why you're seeing the "skip". I think the following addition would solve this: else { Console.ReadKey(); // consumes the newline you have entered return; }
I don’t have the internet on my desktop haha
https://msdn.microsoft.com/en-us/library/system.console.clear(v=vs.110).aspx however, you will lose all text on screen.
Are you saying put this in the else statement in the first function? I need the readline in order to return a certain int. by having readkey that simply wont work.
No, I meant for it to be added to the else statement in the second function from your comment. After you check !Console.KeyAvailable. if (!Console.KeyAvailable &amp;&amp; checkIfPortOpen(currentSelection)) { if ((fIsTestMode == true) &amp;&amp; (!fIsAppClosed)) timer1_Tick(); } else { Console.ReadKey(); // consumes the newline you have entered return; }
Bro! You're the man! It works perfectly! 
I wont use this particularity in this problem, but i know where I can use it. Thanks! 
No problem! Btw, if all you're doing in "secondPrompt()" is returning a valid int, you could make this much cleaner and a bit less error prone. Instead of: if (input == "1" ) return Convert.ToInt32(input); if (input == "2") return Convert.ToInt32(input); if (input == "3") return Convert.ToInt32(input); if (input == "4") return Convert.ToInt32(input); if (input == "5") return Convert.ToInt32(input); else { Console.WriteLine("Your Input was invalid. Please re-enter."); return 0; } You could simply write: if (int.TryParse(input, out int result) &amp;&amp; result &gt;= 1 &amp;&amp; result &lt;= 5) { return result; } else { Console.WriteLine("Your Input was invalid. Please re-enter."); return 0; } That is, at least to me, a lot cleaner and handles a few more edge cases that would have previously gone unhandled. What if there is a space entered before or after the number? For example: " 1" == "1" // False int.TryParse(" 1", out int result) // True, result == 1
Oh it is for sure unclean to me. I was just trying to get a working prototype, my next phase is cleaning everything up. I will definitely use this way. I had to teach myself C# in about a week so still getting a hang of it. Baptism by fire!
That makes so much sense now. I had no idea about capture variables until today. Thank you. Your decomposition really helped!
I have set up MEF the way he has. But he has polluted the XML code behind with VM logic. Also, every example of implementation, including that one is very simplistic, to say the least. The problem arises when I start working with multiple ViewModels and I need to jump between ViewModels.
You need to add a constructor and initialize an instance of eventlog as outlined in that msdn article. If you're not familiar with constructors, think of them as a way to set properties on initialization of your class. BTW I never really liked windows services, but that eventlog is extremely useful for understanding when exceptions are thrown. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors
It's a bit easier to help if you post some text version of your code instead of a screenshot, so that we can copy/paste pieces. Basically, the walkthrough is saying that you should use the constructor (`public MyNewService()`) to create your custom event log. After the call to `InitializeComponent()`, you can define the source and log for your custom Event Log. However, there are quite a few other problems here that you should probably look at first. For example, you have defined your private class members inside the constructor, which means you will never be able to access them from the other methods. public MyNewService() { InitializeComponent(); private IContainer components; private EventLog eventLog1; } should be: private IContainer components; private EventLog eventLog1; public MyNewService() { InitializeComponent(); } Similarly, you have a method defined within another method. `OnTimer` cannot be within the same method as `OnStart`. Can I ask how much experience you have with programming? Is there a reason you decided to start with this walkthrough?
You need to have the following two lines outside of your constructor, traditionally above it: private System.ComponentModel.IContainer components; private System.Diagnostics.EventLog eventLog1; public MyNewService() { InitializeComponent(); eventLog1 = new System.Diagnostics.EventLog(); if (!System.Diagnostics.EventLog.SourceExists("MySource")) { System.Diagnostics.EventLog.CreateEventSource( "MySource","MyNewLog"); } eventLog1.Source = "MySource"; eventLog1.Log = "MyNewLog"; } You had your member data definitions inside the constructor. The constructor is where you will set up the internal state to make use of your object. In this case (step #5), you are setting up your event log, which will allow you to make use of it in the OnStart and OnStop methods.
I spent about 1 week learning the C# basics so I can follow the guidelines for Windows service apps but I'm still struggling.
Which bit was confusing. It's all confusing at first, so ask for help on the bit that's confusing you and you will make progress. Trust me, that's how it is regardless of your level of experience. Break it down into little problems you can work on.
What are you confused about?
https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf Page 18 he starts to explain the code that he wrote this is where it starts to get confusing does he explain it later in depth or do i have to under stand it now? 
&gt; https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf &gt; &gt; Page 18 &gt; &gt; he starts to explain the code that he wrote this is where it starts to get confusing does he explain it later in depth or do i have to under stand it now? 
Last sentence on page 18 talks about breaking it down line by line. Page 19 on is that process.
i am mainly confused on what the use of double and using system; is used for 
For hosting ASP.NET on Azure, the F1 level of app service is free (1GB memory, 60 minutes of computing per day). For SQL Server, there's also tiers around $5/month.
It's really hard to fully see the process from your description, but is this something where you can log the request to a db and then run an hourly process to complete them. Something like your hourly process would check the last time a group of items was logged where not processed and time is greater than X?
I had a similar use case. You definitely need a queuing service/mechanism. If you are in a windows environment, MSMQ is your friend. I’m using a simple library called “Minibus” to put and retrieve items in MSMQ (raw MSMQ is ugly and hard to use). If you really detest MSMQ try setting up ActiveMQ or RabbitMQ servers and spin up your queue. Or go for AWS SQS if you want s cloud based approach. Bottomline is, don’t try to recreate a queuing functionality by yourself, for instance, by polling a database. I learnt this the hard way. Use a queueing service.
Are you trying to change screens or trying to swap out a VM with a new VM for one screen?
Swapping one viewmodel for another in one screen. But it shouldn't change the implementation, because the viewmodels are truly view-agnostic.
No, more like 200 web requests come flooding all in at once. They are added to a queue. When 1 minute passes without more flooding in, the process empties the queue and processes them all.
My company frequently work with public entities and getting anything done on their servers is painful. A few have approval chains miles long just to add an app to IIS. RabbitMQ looks like a good option though, thanks! I'll play around with it a bit.
Checkout asphostportal dot com for their pricing tiers. Not nearly as sexy as Azure, but for side projects it’s pretty affordable. 
’using system;’ When putting together your code into an actual application, you need to tell where the compiler should find the ingredients. In this case, it’ll find the ingredients in the ‘system’-toolbox. ’double.Parse(...)’ Normally ’double’ would mean that you are setting aside some memory to hold a floating point value. But here they are using a tool to parser a piece of text and return a floating point value from it. 
Or instead of using asp.net, use [asp.net core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1) and host on Linux.
Let me see if my ELI5 explanation works for you: Using System; When using any program language, you often use a bunch of code the designers or someone else wrote. This allows you to do things without having to "reinvent the wheel", so to speak. These are called "libraries". Now, each programming language has sets of code so commonly used that it is included with the language. These libraries are generally called the "standard library", among other names. What the above line of code does, is tell the compiler that you are going to use code contained within the section (Namespace is the correct term, as Rob Miles uses) of the C# standard library (really, the .NET framework, but semantics...) called "System". Double In a strongly-typed language, which C# is, you have to tell the compiler what kind (referred to as type) of variable you are using. Right here we are telling the computer to use the type of variable called a double. A double (in C#) is a variable that contains a decimal: 3.14 for example. Hopefully this helps a bit. You said you have no coding experience before so all of this might be very foreign to you but go slowly in the beginning and try to understand everything the book is teaching you. That first chapter really forms a foundation you need to understand.
It's a slightly mechanical explanation of what's going on with waaay too much detail. It's how I probably explained this stuff to people before I noticed the baffled look. Let me have a scan through. Processing... I've just scanned through the whole thing, it's very dated material (2003 is calling), so you'll struggle to read code from the last decade, let alone write it. The writing style is somewhere between reference and tutorial, but as it neither teaches, nor references anything current, who cares. Ditch it. I can't recommend a better alternative as I don't read these books, but literally anything has to be better. If you're ok with videos, I know people recommend Youtube series often, and PluralSight which is often free with Microsoft Developer Essentials for a few months. Look at MS Dev Essentials as it also includes Microsoft Academy which has lots of cheery tutorials at beginner to medium level. For books, I'd just search this subreddit as people ask for recommendations all the time :) In case Rob pops in, a long time ago this would have actually been a kick ass, tight little reference, but it needs putting down now mate. Good luck :) 
I think the explanation seems pretty thorough. I doubt he will explain these concepts again. What I’ll suggest is to read the chapter twice. Make sure you know what he says, even if you do not understand it. Then read on and see if it suddenly ‘clicks’ when you see how it is used in other contexts. You should also go back and reread this part later to see if you have gotten more knowledge and understanding making this section more clear for you at that point. 
no i understood Double is used to tell the compiler that there are decimals in the code while using system; tells the compiler you are using commonly used code with the use of a name space? im i correct? 
uhh... dumb question - why not just use the bulk endpoint? seems like you're creating an artificially throttled queue to avoid using the bulk endpoint.
You are correct on your understanding of Using.
It's a great explanation, but none of this information is useful to a beginner. That's not a criticism of you, but of the source material. Too much too soon. Download Linqpad, type Console.WriteLine("Hi!"); Then hit F5. "Hi!" appears. Start there. Namespaces? Even VS just imports them for you these days (I assume, I use Resharper still, but I'm sure I heard someone say :) ) The path is always: Make something happen (WriteLine) Read a string (ReadLine) Introduce numbers (var a = 1;) Make it loop (do while, while, for) Introduce booleans ( var b = true; ) Make it conditional ( if(b) ) Put it together ( Draw the rest of the fucking owl ) Put it in a method (owl(s)) Profit. owl$ 
This is good as a learning exercise, but [Parallel.For](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/how-to-write-a-simple-parallel-for-loop) will make this a lot easier.
just about anything is possible via reflection. try taking a look at https://stackoverflow.com/questions/14663763/how-to-add-an-attribute-to-a-property-at-runtime and https://stackoverflow.com/questions/1799370/getting-attributes-of-enums-value although i would question why you're trying to do this. seems like indicating a default value that you want to change is something that should existing in configuration and not something that's hard-coded via attributes.
To be exact, this is how the view displays the ViewModel: &lt;DockPanel&gt; &lt;Controls:TransitioningContentControl Transition="LeftReplace" x:Name="ActiveItem" Content="{Binding ActiveItem}"/&gt; &lt;/DockPanel&gt;
The code base which I am currently working on doesn't support an easy change in configurations
This is my project for this weekend. I am going to host my app on a raspberry pi.
Console.ReadLine(); is a blocking calling. The program shouldn't continue until a user enters a line of input. sometimes the input buffer can have data that wasn't meant to be recorded and never got flushed... I'd recommend two things. 1) Where it says Your Input was Invalid ... replace it with {input} is not a valid choice... (That way you can see what is actually happening). 2) Just before Calling Console.ReadLine try adding while (Console.KeyAvailable) Console.ReadKey(); which will get rid of any unexpeected data in the input stream.
This. You can get a Linux vps pretty cheap.
I don't have time to give a full explanation but look into hash tables. They allow you to provide a key in order to retrieve stored values by reference instead of having to specify an index. You can also use linq to search a list but this will be less efficient afaik.
im still a noob i feel like everytime i ask a question 4 more take its place i cant tell if this is a good or bad thing lol. that asside i will take a look at them tonight when i get home Ty for the suggestion 
You need 2 threads and a queue protected by a semaphore. Thread 1: While(true) Sleep (some amount of time.. You will need to tune according to your needs) Pop (all or top x) entries from the queue Write entries to the file //Wend Thread 2 OnLogMessage Event handler Push message to queue You could have multiple instances of thread 2 if needed. 
I should have mentioned that you could still overflow buffers this way. The queueing method works as long as there are occasional quiet times in the system when it can catch up. Also, open/closing file handles is a relatively expensive operation. Don't do it on every sleep unless you have to. You may want to keep track of the file size and every so often close The file and start a new one. If you still overflow your writes after tuning your sleeps and buffer sizes (i.e. trying different times and size combos and measuring the results), then you will want to divide your logging into multiple segments/loggers with separate files. Or log less stuff.
What everyone else said. But also... I'll throw out there that You don't *have* to use Azure or SQL server by any means. My first programming job had Oracle and SQL server. My second, which was the first time I was even explicitly a .NET developer, I spent 4 years with Oracle as our RDBMS.
Here's a quick explanation of `using System;` in addition to the other ones. I say "quick", but it will seem sort of long. A lot of concepts in programming require you to understand 3 or 4 things at the same time. Things in C# have names, obviously. But every C# name has at least two parts. There is the *namespace* and the *type name*. Normally we just want to talk about the type name, but sometimes we need the namespace name to help us understand what we're talking about. When you have both names, it's called the *fully-qualified name*. Example: "Double" is the type name of a type. It is in the "System" namespace. So it's fully-qualified name is `System.Double`. If we were to see its code file, it would look something like this near the top: namespace System { public struct Double { ... ^\(Don't ^worry, ^if ^you ^are ^worrying, ^about ^the ^use ^of ^`struct` ^instead ^of ^`class` ^here, ^the ^difference ^is ^not ^important ^for ^this ^topic.) This is sort of complicated, but it has a purpose. One day, you might have some reason to make your own customized Double type. If we didn't have namespaces, you wouldn't be able to, because Microsoft has already made a type named Double. You'd have to pick a name like MyDouble. Because we have namespaces, you can make your type named Double but put it in a different namespace. namespace MyTypes { public struct Double { Now the fully-qualified name of your type is `MyTypes.Double`. It turns out the compiler ONLY cares about fully-qualified names, so now as far as it is concerned your Double is not the same as Microsoft's Double. But it's a pain to always use fully-qualified names everywhere, so we have a shortcut. The `using` statements at the top of a file represent that shortcut. When the compiler sees a type name like `Double`, it tries to figure out what the fully-qualified name is by looking at your `using` statements. All it does is try sticking each `using` namespace in front of each type name. So when you're working with Microsoft's Double type, you have `using System` at the top of the file. That means the compiler tries `System.Double`. Since that exists, the compiler is happy and moves on. This also shows us a danger in my example. Try to figure out what happens in this file: using System; using MyTypes; namespace MyApplication { public class Program { public void Main() { Double myValue = 10.3; Double anotherValue = 11.3; } } } If you try this, it won't compile. The compiler realizes that both `System.Double` and `MyTypes.Double` exist. It can't tell which one you want. So you have to make some tough choices. You can choose to not use `using System`, or you can choose to not use `using MyTypes`, or you can choose to not use BOTH. If you do that, then you MUST use the fully-qualified names for all types from the namespace that doesn't have a `using` statement. For example, all three of these files compile: using System; namespace MyApplication { public class Program { public void Main() { Double myValue = 10.3; System.Double anotherValue = 11.3; } } } using System; namespace MyApplication { public class Program { public void Main() { MyTypes.Double myValue = 10.3; Double anotherValue = 11.3; } } } namespace MyApplication { public class Program { public void Main() { MyTypes.Double myValue = 10.3; System.Double anotherValue = 11.3; } } } ^\(Note: ^don't ^actually ^try ^to ^compile ^these ^files, ^there ^are ^many ^reasons ^why ^this ^syntax ^won't ^work. ^It's ^more ^important ^to ^understand ^the ^concept ^than ^why ^these ^samples ^don't ^compile.) So, in short, using statements let us take shortcuts and not have to write fully-qualified names everywhere. Sometimes it is a bad idea to pick certain names because if it's the same as a REALLY common type (like Double), you're going to clash with other namespaces and have to fully-qualify it anyway. There's one more trick you can do in that case, it's called "type aliasing". It looks like this: using System; using MyDouble = MyTypes.Double; namespace MyApplication { public class Program { public void Main() { MyDouble myValue = 10.3; Double anotherValue = 11.3; } } } See how the second line is a little different? In English, it means, "Hey, if I use 'MyDouble' in a place where you expect a type, please use the type with the fully-qualified name 'MyTypes.Double'." This is one way to deal with situations where you need to use two things with the same name but not fully-qualify them. It happens sometimes. So, in summary: * `Double` is the name of a type. * Every type has a *fully-qualified* name that includes a namespace in front of the type name. * `System.Double` is the fully-qualified name for the Double type we usually use. * `using` statements let us take shortcuts and use type names instead of fully-qualified names. * If `using &lt;namespace&gt;` is at the top of a file, the compiler will look in that namespace if it sees a type name. * If two namespaces have a type with the same name, it will generate a compiler error. To solve it: * You may choose to omit one of the `using` statements and fully qualify some types. * You may choose to omit BOTH of the `using` statements and fully qualify both types. * You may choose to create an alias for one or both of the types. This isn't a "fun" topic. Learning it doesn't help you write a new kind of program or do something exciting. But it's a basic part of C# files you have to know about in order to learn the more fun things. 
lost you when u said draw the rest of the fucking owl 
You should make a class that describes a Person (name, birthdate, whatever you need). Then you can store those Person objects in a list, or better yet a Dictionary. 
I did that a couple weeks ago, its fun. Builds on a raspberry pi are incredibly slow, though. Just deploy your assemblies, don't build on the pi itself.
Sorry, I went off on a pun roll there. For the reference it's a famous meme that spawned its own [subreddit](https://www.reddit.com/r/restofthefuckingowl/) Basically it takes the piss of those old art books which would say "First draw and oval, then another oval, and now complete your owl". Click the link, they've got the picture in their side bar. Sorry to be misleading, I know you''re learning :) The one after draw the owl is a pun too. and the final Profit one is another reference to a meme :) But the set before that are literally the same steps that you start people with who are just starting out. I think it's hard to relate for people who live and breath this stuff what it felt like before they started. I know I do. 
Use the language, Luke. List&lt;int&gt; listOne = new List&lt;int&gt; { 0x00, 0x03, 0x06, 0x08, 0x09 }; List&lt;int&gt; listTwo = new List&lt;int&gt; { 0x00, 0x05, 0x06, 0x07, 0x0a }; List&lt;int&gt; listThree = new List&lt;int&gt; { 0x00, 0x02, 0x03, 0x05, 0x09 }; var result = from a in listOne from b in listTwo from c in listThree select (a, b, c)/* &lt;- format however you want */;
&gt; There's no such thing as "real generics". I think 'real generics' requires some definition to say whether C# has it or not, but even if it doesn't I'd argue that C# has a more real implementation of generics. Java does it via Type erasure and that leads to certain limitations in overloading. C# does have certain limitations (i.e. I can't easily have a constructor take a generic type, unless the class is marked with a generic) but still, Java has more limitations still. RE most of your replies that involved the word: &gt; Lombok Maybe I didn't have my IDE configured well enough for it, but Lombok works primarily by Sleight-of-hand; Attributes are used during compilation to auto-create properties; these didn't seem to work in the IDE as cleanly as C# auto-props did. Re Dynamic: &gt; The value of that is questionable because it would just obfuscate the code. Though, you can use the "invokedynamic" instruction from the jvm through methodhandles. Yeah, you have some dynamicness in java too. My nitpick here is you are going on about about 'obfuscating the code' while repeatedly touting a tool that modifies your code at compile time based on attributes in a way an IDE can't easily discern. Unless something has changed in the Java sphere since I last dabbled, Lombok is just as bad for static analysis as `dynamic` is. &gt; That's just type casting which hides the error. I'll go ahead and be pedantic; `as` doesn't hide any error. It just does the type check for you: `safeCasted = myObject as TargetObject` is equivilent to `safeCasted = myObject is TargetObject ? (TargetObject)myObject : null`. RE Extension methods: &gt; A similar feature is available through lombok Jesus H, you took the one thing where Java has something that I [*genuinely wish we had in .NET and ignored it*](https://dzone.com/articles/interface-default-methods-java). Default Interface methods are arguably way freaking cooler than extension methods while having a similar enough surface area. In .NET the feature would be arguably 'as good as' Extension methods (if not a little better). In the Java world (Where static classes are bad!) it's clearly a superior solution. 
ok thx (also then for showing me that subreddit)
its all confusing at first, especially for the first few months for sure. dont give up! just keep doing the examples. try maybe verbally talkinga bout the problem if you get stuck
Right click Project explorer&gt;references Then select add reference Now you should see all referenced assemblies and add new ones 
You shouldn’t write your own log framework; use [Log4Net with a `BufferingForwarder`](http://www.nimaara.com/2016/01/01/high-performance-logging-log4net/)
Consumer/producer architecture. Classic CS multi-threaded example.
That's the point. I want to use the bulk endpoint but the requests come in one at a time. So I need a way to collect them so they can all be processed together. 
Does anyone have experience how much of a difference RyuJIT makes for a mixed WinForms/WPF app? Is it perceivable?
&gt; AsyncBufferingForwardingAppender this. 
... does the queue need to be durable and persistent?
given the other constraints, you could try to do something with a backpressure queue. Warning: this was Aircoded. But you could use an implementation of something similar to provide backpressure, so long as you also included some sort of timer to pulse the queues. Also note this was slammed out in a short time, so I can't say the API surface is perfect. public abstract class BackPressureQueue&lt;TItem&gt; { private static object _mainUserDictionaryLock = new object(); private static Dictionary&lt;string,object&gt; _userDictionaryLock = new Dictionary&lt;string, object&gt;(); private static Dictionary&lt;string,List&lt;TItem&gt;&gt; _backPressureSet = new Dictionary&lt;string, List&lt;TItem&gt;&gt;(); private int _pushSize; public BackPressureQueue(int pushSize) { _pushSize = pushSize; } public void PushItem(string userKey,TItem item) { EnsureDictionaryKeyExists(userKey); lock (_userDictionaryLock[userKey]) { _backPressureSet[userKey].Add(item); if (_backPressureSet[userKey].Count &gt;= _pushSize) { OnQueueFull(_backPressureSet[userKey].ToList()); } } } public void PurgeQueue(string userKey) { EnsureDictionaryKeyExists(userKey); lock (_userDictionaryLock[userKey]) { var newSet = OnQueuePurge(_backPressureSet[userKey].ToList()); _backPressureSet[userKey] = newSet; } } public abstract void OnQueueFull(IList&lt;TItem&gt; items); public abstract List&lt;TItem&gt; OnQueuePurge(List&lt;TItem&gt; items); private static void EnsureDictionaryKeyExists(string userKey) { if (_userDictionaryLock.ContainsKey(userKey) == false) { lock (_mainUserDictionaryLock) { if (_userDictionaryLock.ContainsKey(userKey) == false) { _userDictionaryLock.Add(userKey, new object()); } } } } } 
&gt; EDIT: Also for the TryParse no need for the int result, just out result `out int result` is something you can do in C# 7 or later. You declare a new variable and assign the output it all inline. It's a more compact way than writing: int result; int.TryParse(input, out result);
The problem is that C# is a pretty strongly typed language. So you can't have an array or list of mixed types (unless you did something like convert all the data to strings first). So you'd typically create a class with properties/members to represent everything about a client. public class Client { public string Name; public string Phone; public string EmailAddr; public int Age; } Client myClient = new Client(); myClient.Name = "James"; // or get this from a form myClient.Age = 35; // etc. And then pass that around. 
You wouldn't build on the web server you were hosting either!
I think it's little too early to say anything definitive on real world performance improvements. *RyuJIT generally takes longer to compile than JIT32, but its optimizer can generate faster code. The performance difference may not be significant, depending on the application. In initial testing with ASP.NET, we found that the difference didn't matter. Please help us make RyuJIT faster! We will continue investing in RyuJIT performance (which often helps all architectures). If you notice performance regressions, we’re very interested to hear your results. Please contact us.* https://github.com/dotnet/announcements/issues/10 The above note is associated with .net core, but if you are compiling into x32 this above quote could be considered. If you are compiling into x64 there might be performance improvement as RyuJIT is better suited for x64 processors. The performance of RyuJIT might have improved from when they made that note an year ago. But in general it might be better if you upgrade from 4.0 regardless, since 4.0 is not supported anymore. 
What kind of app? Is it a graphical/gaming, front office trading (ie heavily threaded) app? Maybe? On the other hand, If it's a data driven/LOB app that talks to a bunch of web services, I would suspect there's other low hanging fruit. Having said that, upgrading from 4 to 4.6 is probably worth it if you plan on owning the app for any extended period of time. That will leave you in a better spot to move to .net core 3. 
There are worksloads where it is much much faster, whether your application has any of those, or has any workloads where things aren't already happening instantly, I cannot say.
&gt; How does one handle EF code-first migrations when multiple versions of code with non-conflicting schema need to access to the same database (i.e. single migration table) ? What are the dev/ops steps to take to allow co-existence? That's usually past the point where I ditch EF's migrations and move to something saner like FluentMigrator. It uses a VersionInfo table to keep track of which migrations have been run against the database. We have multiple applications hitting a single SQL server database. Each application has its own database schema, and inside each schema is a VersionInfo table for that application. So '[productA].[VersionInfo]' is used by ProductA application. And product B would be in the '[productB]' schema (with its own VersionInfo table). FluentMigrator handles database schemas easily.
&gt; `_ctx.Set&lt;T&gt;().AsNoTracking()` At this point what you have is an `IQueryable&lt;T&gt;`, it has not yet hit the database. And you won't hit the database until you do a .ToList()/.ToArray() or something else that materializes the query. You can even build up queries: var query = _ctx.People; query = query.AsNoTracking() query = query.Where(x =&gt; x.Identifier == identifier) query = query.Select(x =&gt; x.Identifier) ; var result = query.FirstOrDefault(); (I think that's all valid C#/LINQ.) Until we hit that last line, it's not hitting the database yet. 
&gt; Does my project really need all those DLL's included in it? Is there an easy way to check other than removing one and seeing what goes red lol? :( Why do you care so much about having so many files in the install folder? Anyway, an explanation for the DLLS: They are needed. When install a particular Nuget package (VideoLibrary in this case), you can see the dependencies. See VideoLibrary's [Nuget page](https://www.nuget.org/packages/VideoLibrary/). It references the .NET Standard Library. You can click on it again, and see its dependencies based on your platform (seems to be .NET 4.6) and so on. 
xUnit. It's more recent, has slightly better semantics than MSTest or NUnit. (I believe that most of the Microsoft open-source uses xUnit, but that's hearsay.)
I use Moq, with a few caveats. Using mocks ties you to implementation of the SUT (system under test). You have to inject the correct mocks into the SUT and mock out (`.Setup()`) the methods that your SUT uses from the injected class. So you end up with (more) fragile tests. Also, Moq has the `Validate()` method which should (almos) never be used IMO. Unless you *really* want to tie your test to the implementation of the SUT. Making the test even more fragile as the SUT undergoes changes in how it behaves. These days, I look for ways to extract the logic in a class with lots of injected dependencies (e.g. a controller class in MVC) into a simpler service class (or even a public static method / extension method). Then I unit test the simpler service class or the public static method. 
For .NET Core development? VSCode works just fine (I use it on multiple platforms, including macOS and Linux). Combined with GitKraken, which is also cross-platform across Win/Linux/macOS. For traditional .NET development? Visual Studio running in a Windows VM. It sucks, but Parallels Coherence mode keeps it feeling somewhat macOS. I wish Apple would release a 32GB RAM MacBook Pro. Naturally, I'm looking forward to migrating all our code to .NET Core over the next 2-3 years. I'm also strongly considering JetBrains Rider as I lean heavily on Resharper for quick little refactorings.
Generation 0, 1, and 2 all compact memory at various times depending on memory pressure. When it's bad, you'll see a pause even in server side. The danger is the Large Object Head. This is where anything over 85 KB goes. There LOH doesn't compact so allocating large objects repeatedly will eventually cause an out of memory even if you have enough due to fragmentation. In general, you are usually okay as long as you avoid large allocations. However, there are since you can't easily about in various network and XML parsing calls. Later CLRs have a call to trigger a LOH compaction, but it isn't effecient or recommended.
*Why* they're there is for one of two reasons: 1. They were "default" references in the new project that you didn't need (and didn't remove) 2. One of the libraries you referenced depends on another library and a copy of that DLL was placed in the output with the other components during build.
I read the whole thing I promise. But can someone ELIM5?
I see, I didn't know that thanks. It's really interesting to me because if I were writing a runtime like this compaction would be the first solution I would think of but the last one I'd wanna implement. It really seems like there should be a better way of handling fragmentation, but I guess not. All of the other solutions I can think of off hand involve making the memory system more like a file system, with blocks and etc, but the more I think about that the more I realize that would be a lot worse than compaction because it wouldn't just be slow and pause the program every once and a while, but rather just be slow every single time you access memory, which would suck.
It is in blocks but the clr requires a single allocation to be contiguous otherwise it would double the memory needed to handle the fragmentation table. If you want to learn more, understanding how the FAT filesystem, which is simple, or how zip archived are laid out night give more insight. Because I deal with large datasets in the last three of my projects, I've had to learn a lot. I also ask low level questions in interviews because not understanding how memory works crashes the types of applications I work on.
Not super sharp on internals, but here's my understanding of things, which may be quite flawed. The .Net runtime will request chunks of memory from the OS based on the program's memory needs, but it doesn't do it object by object, as that would be much more costly, so it does it in these larger chunks. Similarly, it doesn't relinquish control of that memory object by object either, it does so in these larger chunks. So as the runtime begins to see that objects can be garbage collected, it will keep track of the memory that those GC'd objects used and put newly allocated objects in their places. This helps minimize the requests for more memory from the OS. After a certain number of objects are GC'd, the runtime may realize there's sufficient enough empty space in memory and deallocate chunks back to the OS. This is when there's most likely compaction steps with longer lived options allocated together and shorter ones that might quickly be dereferenced together. &gt;Does it have to remember where each "empty space" is so that it can use it later? I believe so, to a certain degree. &gt; How does it work? Way beyond my pay grade Its perfectly fine to be inquisitive and wonder how the runtime does its thing, but hopefully this is something that you really shouldn't ever have to worry about as a .Net programmer. Memory allocation is not something to take light-heartedly, which is why C++ programs are more prone to memory leaks and why so many programmers hand over their memory management to frameworks and runtimes everyday. Dealing with this stuff is complex, and I'm glad MS handles it for me so I don't have to worry about it. Dealing with memory management in .Net is far more focused on classes vs structs and boxing/unboxing. Outside of those concerns, the only time I ever have to explicitly think about memory is when dealing with something that calls outside the framework like to COM components or something (damn you Excel interop &lt;shakes fist/&gt;) 
I'd take a look at [TopShelf](https://github.com/Topshelf/Topshelf) Basically, getting windows services installed kinda sucks. You're trying to directly make the Win32 calls, but there are classes in the .Net Framework that will wrap them for you. Yes, using those would help, but it's still more of a hassle than its worth. That's where TopShelf comes in. It wraps things to make it much easier and quicker to get a service installed, then you can get on with important things like having the service actually do stuff.
well that's good to know...at the moment I'm using about 1%...that gives me 4% to move :)
haha, when I'm frustrated, I usually type in whatever I'm frustrated with followed by sucks....validating ones frustration is probably not a good idea tho.
&gt; The Intels and AMDs have been finding it harder and harder to increase performance. Yeah I was a bit suss on moore's law....CUDA looks interesting. Will add it to the list...I think all the bitcoin people are into that or something.... I'm thinking maybe one of those AMD threadrippers jobbies might do the job for me... DI, I struggled with for a bit. DevExpress Scaffold Wizard stuff and Dependency Injection dont go well together...I was using simple injector. Back when I was messing with it I was also messing with Automapper too. Found it difficult having it all work together... I *think* in the long term I will have to rip the scaffold wizard stuff out. But that's all more work.... ..and in terms of programming work and cost....It is cheaper just to throw a big computer at it.....or a bunch of computers :) But one computer is simpler.....and I got enough complexity for the next 6 months :)
Getting windows services installed is actually extremely easy and .Net has a built in installer for it called InstallUtil.exe. One simple command InstallUtil.exe MyService.exe and you're done. You can even update the service by just replacing the exe as long as the service has stopped. Can't be easier. Really. Even writing an MSI to do it.
Oh yeah, definitely LOB with web services. Not a lot of low-hanging fruit I’m afraid — lots of architectural cruft. I _may_ gain some perf simply by moving, step by step, away from SOAP/WSE to Web API, but even with some kind of translation layer, that’ll probably be a huge effort. I can try to move some stuff towards MVVM or similar (lots of tight coupling currently), but that’s definitely a big job. As for moving to a newer framework anyways, yes, of course. However, some customers only have 4.5.2 so far, so it’ll be a bit of a transition. And as for .NET Core 3, MS has explicitly yet to commit to that shipping on Windows 7, and even if they do, there’s plenty of third-party dependencies that might break.
You're overcomplicating your service quite a bit. You don't need interop calls or anything like that to change your service state. Setting up eventlogs is also easily done through the property of the service class itself. When I get a chance, I can share my project so you can see the setup.
Your C# code (typically*) first gets compiled to IL (short for intermediate language) by the C# compiler. In Java’a world, the equivalent is known as Bytecode. This first step is done by Roslyn these days, and typically happens while you’re in VS. Simply put, it turns your `.cs` into a `.dll` or `.exe`. But IL doesn’t actually run on your CPU. When executing the code, an additional step of compiling from IL to machine code is required. This happens just-in-time, or JIT, which is a bit similar (but not the same) as how interpreted “scripting” languages work: as a section of code needs to be executed, the JIT compiler Sees if it already has a cached machine code version for that, and if not, generates that. Again, this happens as your code is running, which can lead to some performance issues but these days is pretty smart (and can in some cases even be faster than the traditional approach). Now to the article. Because it’s machine code, it matters which architecture we’re talking about, including whether it’s 32-bit or 64-bit, and .NET currently cares about x86 and ARM. That leaves us with a grid of four targets: x86, x64, ARM32, ARM64. For historical reasons, there used to be *different* JIT compilers for the two x86 variants, and they started trying to unify that nine years ago. That effort is finally coming to its end, which means a much simpler codebase as more stuff gets shared, and more optimizations can get used across architectures. Or, in a nut: .NET tooling is getting a bit faster, leaner, cleaner, more unified, more able to grow in the future. *) There are exceptions. For example, .NET Native directly runs natively. Also, when using Xamarin with an iOS app, native code also gets created in what they call AOT, for ahead-of-time compilation.
There is plenty of reasons to **lose** performance by going from WCF to a WebAPI though. Last time I looked, [it was like this](https://www.erikheemskerk.nl/benchmark-wcf-webapi-aspnetcore-mvc/), and this guy didn't even look at using a faster WCF transport, he only did HTTP (IIRC). No amount of JIT improvement can help that.
I really appreciate this explanation, thanks!
Hi Techies, Can u please help me with one of powershell cmdlet command to add 500 users to in-place hold.... The below cmdlet is working fine for active mailboxes, but how can I skip/ignore the mailboxes which are on our server ending with @disabled.domain.com Since this is huge requirement to place almost 30,000 users its hard to check each and every user's email address is correct or not.... $search=Get-MailboxSearch -Identity "hold name" [$search.sourcemailboxes+="user1@domain.com](mailto:$search.sourcemailboxes+="user1@domain.com)" [$search.sourcemailboxes+="user2@domain.com](mailto:$search.sourcemailboxes+="user2@domain.com)" [$search.sourcemailboxes+="user3@domain.com](mailto:$search.sourcemailboxes+="user3@domain.com)" [$search.sourcemailboxes+="user3@domain.com](mailto:$search.sourcemailboxes+="user3@domain.com)" Set-MailboxSearch -Identity "hold name" -SourceMailboxes $search.sourcemailboxes In the beginning I also tried to create new hold by adding multiple source mailboxes but it is saying can not be found New-MailboxSearch "searchname" -SourceMailboxes ["user1@domain.com](mailto:"user1@domain.com)[,user2@domain.com](mailto:,user2@domain.com)[,user3@domain.com](mailto:,user3@domain.com)" -InPlaceHoldEnabled $true So what is the best way in my case??? I appreciate your time and thanks in advance for your reply.... I researched many place online but I dont see any related help online Thx \- Sam
I'm going to second topshelf and suggest you avoid anything else. We've been using it in production for years and it makes life incredibly easy. Why deal with sc or rely on installutil, let your application install itself.
In order to install my services I always just user WiX (http://wixtoolset.org). It's free, xml based, and has great documentation. There are lots of templates you can use for UI as well.
Yes, Azure is costly if you are using MSSQL. If you dont have database, you can host your site for free. Just go with shared hosting that support .net core. I personally use ASPhostportal for .net hosting. They are pretty good, support is responsive, and price around $4-$8/month depends on the hosting plan that you register
Large object hea**p** 😁
Everything is a performance trade off. If you have unlimited memory you’ll never compact, realistically you’ll never even clean up. Just use what you need and move on with an ever increasing pointer. When you realize you don’t have unlimited memory you do the best you can to always move forward but also fill in whatever gaps you’ve created. That also has flaws (what if you start with 9 byte allocs and then fillin with 8 byte ones? You waste 1 byte each time. Ok, time to compact. Perfect now no wasted memory. But how do you quickly alloc and compact. You straight up can’t. You have to pause the whole program and do it. Computers are FAST so maybe that’s fine. And for most it is. But what if you are doing a real-time telemetry system with over a billion events coming in a second (this is what I do for work :)) you need to manage memory much better even in a managed environment. We have object pools for everything. We have a custom string class. We have custom network stacks. Everything becomes alloc, use immediately, release as fast as possible and grab the next one. Don’t grab the next one fast enough and it pops up a generation and becomes a bit harder to deal with.
Thanks for taking the time to explain this!
I see your point, but that is also part of my concern. The data layers, business logic and more are all mixed into one another and cross referencing each other. I think I am gonna attempt to in pick and re write so that these projects do what they are supposed to do. 
&gt; I think 'real generics' requires some definition to say whether C# has it or not, but even if it doesn't I'd argue that C# has a more real implementation of generics. Java does it via Type erasure and that leads to certain limitations in overloading. Haskell and some FP languages do it via type erasure too and they're arguably better. The most problematic thing with java's generics is reflection. &gt; Maybe I didn't have my IDE configured well enough for it, but Lombok works primarily by Sleight-of-hand; Attributes are used during compilation to auto-create properties; these didn't seem to work in the IDE as cleanly as C# auto-props did. They worked for me in eclipse a few years ago and I guess the jetbrains plugin can help too. &gt; I'll go ahead and be pedantic; as doesn't hide any error. Yes it does because if it can't cast the thing it'll just give you a null. &gt; My nitpick here is you are going on about about 'obfuscating the code' while repeatedly touting a tool that modifies your code at compile time based on attributes in a way an IDE can't easily discern. That's metaprogramming for you but you can have good IDE support for it anyway. IDEs might not support it out of the box but there are plugins which could help. &gt; Unless something has changed in the Java sphere since I last dabbled, Lombok is just as bad for static analysis as dynamic is. Do not compare them because it doesn't make any sense. 
This is good news but I'm more excited about CoreRT progress
I thought was pretty good given that I wrote the entire thing one handed while holding a toddler with a 99 F temperature. :P I fixed it higher.
I don't know about licenses. Bossman gives me a Telerik.Web.UI.dll and says "here use this."
Well, that's far more complicated than it needs to be. [Blazor](https://github.com/aspnet/Blazor) can't come soon enough in my opinion.
I'm not sure what the best practices are, but I recently learned of AsParallel for IEnumerables. With it you can do stuff like: `Enumerable.Range(0, numEntries).AsParallel().Select(i =&gt; { /* Do something and return the value */ }}.ToList()` Which means you don't have to manually put the result of each iteration inside a list because te ToList() will do it for you.
Haha, I never like the control suite frameworks, or the older MS technologies that generate a lot of stuff for you (Well some are ok, EF is easy to migrate from edmx to hand rolled for example). They tend to include some form of vendor lock in, even if it's just the cost of figuring out what it really does and then doing that, so if you can escape from their clutches you will be better off in the long term. You'll be fine with one computer until it's working properly. A lot of enterprise apps start off as one server solutions whether that's just a DB or some actual services too. Just keep that modular concept in your head. It's an extension of DRY (Don't Repeat Yourself) so Don't Repeat Yourself AND keep stuff that isolated. Also avoid big classes (As always there are exceptions) as they tend to abuse the SRP of SOLID. 
Oh, it's still tricky. It's like Z80 assembly. There are only about a dozen commands, but it takes a while to figure out how to make them work for you. Writing good tests is hard, but they shouldn't be complicated (which is also hard)!
Just asking, wouldn’t a static queue object in resting on a web service make it too heavy, memory wise?
Cheers Silound, how can i determine what isn't needed when i'm creating a new project? I have checked the ones i have at work and they also include the references etc, however when i am building the solution they are all included in the .exe? Or aren't being copied.. i'm not sure. 
Cheers Prajaybasu. I have checked my other project which contains a large number of references and a few "using **" however instead of filling the folder with DLL's, i presume they are included in the .exe? however it is only 427kb.. And i don't know how i would have included them within the .exe when building it.. o.0 I have all these: using System; using System.DirectoryServices; using System.DirectoryServices.AccountManagement; using System.Diagnostics; using System.Text; using System.Windows.Forms; using System.Management; using System.IO; Is this because the DLL's already bundled with Windows/.NET etc so aren't needed to be copied to the same directory as the .exe and are instead referenced through the "GAC"? (after googling i think this is what i'm talking about haha!) 
For most people it's not going to have a massive impact, but for games or individual algorithms it can be as much as 20 times faster. But only for certain workloads. 
Apologies, to answer the first point of why do i care.. I'm not sure!! haha I didn't know whether i was doing something wrong as everything i have created before has always been a single .exe file in the output folder and not required anything else within the folder to be able to run so it has been easily transferable to other users. I would much prefer to have just a single .exe for this program as it's going to be relatively simplistic in what it does so having all the clutter wasn't my plan! 
Wow. WinForms. Innovative. Youtube link? High quality. /s Why not use WPF which literally has this kind of functionality already available?
Short answer: \`\\\[.+?\\\]\` Long answer: [https://www.regular-expressions.info/possessive.html](https://www.regular-expressions.info/possessive.html)
Thanks! i was getting close myself with: \[[A-Z0-9]*\] but both solutions seems not to remove the [] how do i do that?
With [lookahead/lookbehind](https://www.regular-expressions.info/lookaround.html): `(?&lt;=\[).+?(?=\])`
Are you serious?
Second this - TopShelf takes all the pain out of windows service dev, it allows you to run the service as a plain .exe (ie, not as an installed service) for debugging, it takes care of installing / uninstalling the service for you (using command line arguments). I was able to bring up my latest service in about half a day (having never used TopShelf before), and its worked perfectly for me in production. Its on NuGet
If it is always between square brackets you can use basic string functions
a big thanks!
Stop reinventing the wheel and use Log4Net, NLog or one of the other fourthousand alternatives.
Sadly yes...
No. Attributes are meta data that are applied at build time. The other linked article applies one by creating a proxy class but I don't think that will work here. You need to programmatically determine the default somehow.
Have you ever used C# or done any programming before? If so, this doesn't seem like a very difficult problem. If not, you're basically asking how to write the whole program.
i have, but im just lost here :P, and i know it's easy, that is why im just asking if anyone could help quickly
Bummer. Hope RabbitMQ helps you out!
Ok. What are you actually trying to do? Do you want this to be a web app? Desktop app? Do you want to store these images/videos (I assume you're not planning to do any of the animation yourself) locally, or will you be getting them from an existing location? As far as selecting a random picture, just assign each one an id and generate a random number: https://msdn.microsoft.com/en-us/library/zd1bc8e5(v=vs.110).aspx
Oh... the plague has spread here too.
https://www.hanselman.com/blog/PennyPinchingInTheCloudWhenDoAzureWebsitesMakeSense.aspx A bit outdated but probably a good place to start. Azure makes sense once you start needing to MinMax or scale. If you're running one site with minimal traffic, it probably doesn't make too much sense.
Those layers are always going to interact. You can minimize the disruption between them by using dependency injection. Again... SOLID.
Got an answer here, so will leave it here to those who are interested. [Answer](https://stackoverflow.com/questions/50907958/queuing-method-execution-in-asp-net-solved)
[Answer](https://stackoverflow.com/questions/50599862/how-to-parse-sms-from-gsm-modem-in-c-sharp)
I don't even understand the question, "Is C# still worth learning today?" C# is not used for everything, but it's the best choice for a lot of things. I wouldn't recommend any other language for OOP.
The article makes it sound like C# is a dying language that is still worth learning for a good while, I know that's not the point but still, the click-bait wording makes it sound like that. C# is a growing language, although not the fastest growing, but never the less a growing language. 
Enums should be compile time constants. Whatever problem your trying to solve, this is not the way to do it.
A safe answer is that if you don't know, don't worry about it. You could remove them one by one, and re-add the ones that you find you need, or simply remove them all and add as necessary. Various add-ons to VS will determine the dependency graph for you and can remove unused references. You could even read Microsoft's documentation to know what namespaces and components are in which files. In truth, you will learn over time what is part of what DLL. I'd recommend when you start a new project that you remove *all* references and add them one by one as needed. This will make for a steeper but much faster learning curve though 
Removed: Rule 4.
If you are building small hobby projects, ASP .NET Core 2.1 (the newest release) has a built-in SQL Lite option that can be used seamlessly with Entity Framework. I.E. You host your web app and your database is just a file. No need for a DB server.
Why store it persisted nested at all? Think of simple data structures as in a database. Have a bunch of "objects" in a table with Ids and then another table that manages the relationships in another table. The tables are then your two files. When you re-hydrate the data model you recreate the linked list in memory. Assuming I understood the question correctly.
There's a certain "sector" of developers who like to constantly be on the cutting edge of technology at every given moment, as though you can't be innovating unless you're using a beta build of something nobody's ever heard of. At the end of the day, C# is huge in enterprise development and is going nowhere in that field. It's also big in game development. Two of the main sectors that C# aren't as big in (hobbyist, startup) are simply two of those where people are most vocal in online communities: professionals tend not to get into the tribalism, because they have a job to do. I've never subscribed to tribalism at the best of times, because I've never believed there's such thing as a one-size-fits-all tool for the job. I'd never use C# for a realtime embedded system, the same as I'd never make a web system in Assembly.
I hate MEF, as it pollutes my source with those shitty attributes. Been using SimpleInjector with Caliburn, and never looked back. It's faster too, when you compare the benchmarks.
I just started using Quartz and it works great as it's reliable and flexible. The biggest problem i had is if you use a "*" in the seconds place for the cron expression it fires the job initially and repeatedly and maxes out it's allotted threads. In the wrapper that i wrote for it, i now forbid this scenario. What are their complaints?
Yeah haha! Already my intentions to remove them from the start next time! Might even start over again with them removed. Too much clutter. 
Hey out of that job. Asap.
Get out of that job ASAP
The most important counterargument is/was that .NET is closed and Microsoft Windows only... Since .NET Core it is no longer valid, but there is still a lot to be done for .NET Core to catch up with Java. 
I love WiX, but it should be mentioned that it has a *steep* learning curve.
That's fair, but there are some things out there on stackoverflow and codeproject that can get you up and running relatively quickly.
Its not that simple... Bills to pay etc...
Because sometimes you're stuck with winform and you don't want random strangers on the internet to shit on you just because you propose some way to do stuff. Fucking grow up.
I get it, if you are in the US the market is hot, use it, dont jump till you have something but be actively looking. A place that treats software licences like crap will treat their employees worse.
Well, the main reason for using json is so I can one-click save the state of the objects. If there is a better solution, I'm all ears :D The main purpose of the save and load would be so the users could define as broad or fine grained the linked-list and their targets as they want to, and the system then fills out all remaining variables.
Very much this. It is about time to go native.
Yes our 64-bit perf was *significantly* improved. Load times for our quite data heavy app reduced around 40% iirc. It basically brought 64-bit perf inline with 32-bit.
True, but I've ran into information that was incorrect or outdated (and no longer correct). For example, using the `HeatDirectory` task in your .wixproj file. The information I found said to put it in the "BeforeBuild" target, but this causes an issue -- HeatDirectory can be ran **before** a referenced project (like the project that builds the target binaries) is built so it will fail if it can't find any binaries. Furthermore, if you are building locally and didn't do a rebuild, this means thay your wixproj could actually harvest *old* files from a previous build which could be disasterous. The way to fix this is to change the target from "BeforeBuild" to "AfterResolveReferences".
Check out https://projecteuler.net/ A bunch of computation problems to solve. It helped me practice when I was learning the ropes.
Sure, but the same can be said for anything.
Make sure if you install 4.6 that you apply patches because vanilla 4.6 has a critical functionality bug.
I am keeping feelers out :) Remote positions work better for me because I don't really have transport to get to and from work, and jobs on stackoverflow have a few remote positions there... If I can land any one of those, it'd even be a huge increase in my earnings too.
&gt; .NET is closed and Microsoft Windows only Not sure what you're talking about. [Mono](https://github.com/mono/mono) ("an open source ECMA CLI, C# and .NET implementation") is a Microsoft project and installs on my Gentoo workstation just fine. The link is to Mono's Github repo. Microsoft open sourced PowerShell for Linux, as well as a lot of tooling.
I installed TopShelf but what part of the instructions do I now follow from the Windows Service manual? I deleted all the code &amp; now have a [new](https://i.imgur.com/m4kn8Y9.png) Windows service project opened. My aim is to just create a simple service that automatically copies a certain file if I don't press a chosen key every 20-30 minutes (preferably with some sort of schedule so I don't have to run the program everyday).
That's true, and that can be useful especially when you're encapsulating some object and you want your class to react as would react the object you're encapsulating. Say you have a dictionnary. You encapsulate it in a class because you want to do some extra stuff with it (add a debuggerdisplay and that sort of thing). This is a good case to overload the \[\] operator i think. 
His comment was saying that *used* to be the counterargument, but that is no longer the case due to .NET Core being a thing. Not sure if you're aware, but the Mono project recently evolved into .NET Core, which is an official Microsoft run .NET implementation designed from the ground up to be cross platform and open source. We use it at my company so that we can be flexible with our environments. Mono still exists in it's original form, but it is being overtaken by .NET Core, which is growing quickly.
.NET Core, .NET Standard (formerly PBC), and even .NET Framework are all open source now. There is no closed version anymore. The latter version, .NET Framework, is still Windows specific (let's exclude Mono for now). But .NET Core and .NET Standard are xplat.
I don't think json or javascript supports linked lists, however as I stated this is just a form of a simple data structure that can be recreated in an Array format referencing the indexes. The primary reason why we used linked lists in CS is the linked list can be easily shrunk, expanded, and deleted nodes at any point. An array is a fixed length adding items would cause a new array to be created and the items copied. Storing the linked list in code is Fine and then persisting it as an array to a file is an appropriate implementation as this would be similar to the approach used if you had a database.
How do you switch from one ViewModel to another? Do you use something like the Service Locator pattern?
I don't get the title at all. It makes it sound like the language is dying or something. But anywhere I look, I get exactly the opposite impression. Wtf?
Remove the file from your project, and re add the other copy. Crack open the .csproj and manually change the path if you have to.
I think this kind of thing is the exact opposite of what op is asking for. I think a lot if beginners know how to write basic code for the most part (as in, make a function that does a thing) but the big blocker is how to make an actual application. Something simple though, like OP is saying.
Have you updated the namespace? Usually it resembles the folder structure, but it does not have to
&gt; I've never believed there's such thing as a one-size-fits-all tool for the job. I'd never use C# for a realtime embedded system Banned: Rule 9.
I know if I just want a quick project and aren't bothered about the UI then I'll use WinForms instead of having to fuck around with XAML.
Always carry a knife?
Hi. I don't think a service has access to the keyboard, since it runs under a different windows account.
Can't get passed question two without my brain feeling like it's gonna explode. 
This seems to be the best answer 
I would expect C# to actually begin to gain traction in the hobbyist market, maybe not as a leader, but an uptick nonetheless. All of the open sourcing, multiplatform work being done makes it much more hobbyist friendly than in the past. 
I haven't used it myself but you could always look at this system for linking json [https://json-ld.org/](https://json-ld.org/)
Rule 8: Something something Java. Rule 9: Never imply that C# isn't the end-all-and-be-all, best language that is applicable to any and all use case scenarios.
So basically "Always carry your C# all-purpose-utility-knife"
So what do I do?
It already is showing an uptick due to .NET Core allowing Linux hosting, which means that a lot of us who develop in .NET at work can now stick to one language/platform rather than switching for hobby projects due to cost. SQL Server is going to remain a barrier to .NET/C# for hobby projects though IMO. While you can obviously use other databases, .NET and SQL Server go hand in hand, so without a Linux based community SQL Server variant (and no, SQL Express doesn't really fit IMO), I'm still always tempted elsewhere. Once I use MySQL for my database, I default away from .NET for the application side of things. Still, I'd agree that it's improving, and if you can be bothered getting MySQL connectivity set up in .NET Core, you can replace a LAMP stack with... LMDNC? (Linux, MySQL, Dot Net Core)
Perhaps. Still, I know for me at least I wanted to practice solving problems, creating algorithms etc, it taught me to approach problems differently. Knowing syntax is nothing if you can't apply it. Especially starting formal studies. I still think this is exactly the kind of small, bite sized task you can benefit from. We all learn differently though. For actually getting things up and running, seeing a result. Check out TheNewBoston maybe? I remember learning a lot from him(/them?) back in school. Since this is the c# sub, Unity isn't a bad option if you want to see results quickly with your new skills. Plenty of tutorials on Unity out there :)
Did you try inheriting them all from a base ViewModel, and then using Conductor IScreen Collection to switch between them?
This post is really confusing; what is it that you did that's surprising you?
Perhaps I missed the point of your question sorry. They are challenging. But I stand by that they're good practice for people looking to push their skills. I said in my other comment that unity isn't a bad way to put your c# to use, it's quick and easy to iterate and see results. Just make a silly game, or recreate a classic arcade games. IMO a pretty rewarding exercise.
Yes. That is what I am doing. But instead of `new`ing up a viewmodel, the IoC framework (in my case MEF) should do the work of creating an instance with the dependencies injected. The problem is that, I keep the container in the composition root, and I pass down an VMExportFactory to the Conductor. Not the neatest implementation.
I guess I could convert the whole thing to a list in a manager class (it already exists, the manager class), and the blocks don't really need to know about each other any longer, so I guess that would solve that issue. But how could I "mark" the targets list so they are references inside another file?
This is great but it looks like it's mostly for web-dev? I'm not sure if I can use it locally. And if I could, how could I create a "template" for my json so that the targets list is referenced to a specific file? (Didn't really dig into the documentation since it looks pretty deep)
You have to update the namespace of the class you moved. For example, suppose I am moving `MyClass` from "Folder1/Folder2" to "Folder1" in my project called "MyApplication". Here is the original class: namespace MyApplication.Folder1.Folder2 { class MyClass { ... } } I moved the MyClass.cs file to Folder2. I need to update the namespace as well if I want to syncronize folder structure with namespaces (which is a best practice). Here is the updated `MyClass` with the new namespace: namespace MyApplication.Folder1 { class MyClass { ... } } Now, anything that referenced `MyClass` using the **old** namespace needs to reference the class at the new namespace **unless** 1) they already have a `using MyApplication.Folder1` statement or 2) the class referencing `MyClass` exists in the *same* namespace as `MyClass` -- that is, the class referencing `MyClass` has a namespace of "MyApplication.Folder1" as well.
I don't know if there is a clean solution, it seems that no matter what you do you'll end up either newing it up, or using a locator pattern.
I mean, it's currently the only language you can use with Untiy3d and there are a lot of Unity games out there. So pretty far from dead.
I usually start with console Rock, Paper, Scissors and work my way from there.
There are Roslyn Code Analyzers that integrate directly with the compiler and produce warning when best practices aren't followed. I'm not sure the community has agreed on a 'standard' suite of analyzers. There used to be a tool called StyleCop that performed static checking and I believe most of its rules have been implemented as analyzers in a Nuget package somewhere. 
https://github.com/DotNetAnalyzers/StyleCopAnalyzers is an option for Roslyn-based inspections, and it covers quite a few cases. ReSharper, as you mentioned, is the go-to option, but since you don't want to use VS, what about https://www.jetbrains.com/rider/? It's like resharper, but its own IDE.
Services don't have a GUI. If you are running a Windows app anyway to detect key presses, I don't see any point in also having a service. One answer might be to use autohotkey to detect the key press and update a file somewhere and for the service to check the last update of that file to do or not do whatever you are trying to achieve... I'm also a little curious about what you are trying to hide with your dead man's handle :)
you can make any function return a task. so i'm not really sure what "encourage me to use async whenever possible" would actually mean. for example: `public Task&lt;bool&gt; GetTrueAsync() =&gt; Task.FromResult(true);` also, why don't you want to use VS? anyway, code analyzers are the way forward, here are the stylecop ones that /u/icsharppeople talks about: https://github.com/DotNetAnalyzers/StyleCopAnalyzers
I have used PVS-Studio in the past, but they wouldn't sell us a license (seriously, what company sells a product then doesn't want to sell it) so the free version was okay but annoying
Could somebody explain how null conditions are better in C# than in Java?
Exactly. I guess using the locator pattern is better than newing up, because that way, I can at least unit test my code.
Did you move the file around in the solution explorer or the files+folders view? I solved it by moving the file back to its original location in the files+folders view, then moving it to its intended location within the solution explorer.
I couldn't reply to every new comment as I was afk so I hided the thread. I want to run it as a service so it can work in the background from multiple computers.
Like this: File 1: [{OccupationId:1},{OccupationId:3},{OccupationId:1}] File 2(Occupations):[{Id:1,Name:"dsfadf"},{Id:2,Name:"adfasdfsdf"},{Id:3,Name:"dfadddffff"}] You could just store everything in one file if it follows this highly simplified object model: class File{ Public People[] MyPeople{get;set;} Public Occupations[] AllOccupations {get;set;} } class People{ public int OccupationId {get;set;} } class Occupation { Public int OccupationId {get;set;} } Not really sure what your next block and previous block is intended to do. But that is no different than array. Your next is +1 and previous is -1 of the current index.
Convention in .NET Core 2 appears to be that everything that delivers content to the browser should be asynchronous unless you have a compelling reason for it not to be. It seems entirely too easy to miss an opportunity for something to be asynchronous, so I was hoping I could get my IDE to yell at me. I don't want to use Visual Studio because of the bloat, terrible UI, and the general sense of dread that I get when when the Visual Studio splash screen comes up and I have to wait for it to open up maybe a dozen of 100kb files. Does StyleCop work outside of Visual Studio? It seems to primarily be a Visual Studio plugin.
I'm willing to give Rider another shot. Thanks!
Looks like that required Visual Studio. Thanks though!
What's the story behind them not selling? Did they think you were sketchy, or too small, or something?
My company is only 3 large, but we work on large projects, so having to put their free comment header in every file and header was just a hassle. We made a script for it for awhile before dropping it all together because of this restriction.
Oh, they have the standalone version, I thought that would have worked, sorry!
Oh there are a myriad of fun little projects you could do. If this is your first real step into programming: After a basic intro(which you've got) you'll want something you know how to start but are unsure you know how to finish. I'll list some very basic things you might not be too comfortable with yet but will be essential in 99% of actual programming jobs later. You don't have to know this stuff by heart (ever) but you do have to know all of this well enough to provide google with meaningful questions and to know how to structure things and spot pitfalls. parsing strings. reading and writing text files. Dealing with the concept of time. (scheduling, recording, formatting, cross culture differences, point in time versus recurring etc) Custom data structures. Interacting with your runtime environment outside the scope of your gui. (starting other programs, drawing straight onto the screen, detecting wether another process is running etc.) So ideally i'd suggest think of something you feel within your grasp but slightly scary that interests you that involves some of the above as a learning project. You'll learn to google the missing knowledge right quick if you are good at picking the right learning project. Here are some examples tho: Basic (!) calculator that can save every step of a calculation to a text file and read back text files in the same basic format and error check them. Program that lets the user pick actions to occur (e.g. write file x to disc) at a specific date and time and/or with a specific user set interval (hourly, daily etc.) . Assume that the program gets closed frequently and the user gets fired and the action has to be picked up by someone in a different timezone and culture the day after. If you own office: Write 10 strings with differing font sizes to 10 cells in excel. Bonus: You'll have to find those cells by parsing a column of dates to find a row and a row of arbitrary headings to find the column (Lets hope you'll never have to do this kinda thing in your working life but it'll be kinda the ideal learning experience to deal with weird API's and working in enterprise.)
I have literally heard of nobody who think C# is dead. It's growing, and actually got a nice bump with Unity Game Engine.
Imho, this idea that C# is dying, comes from new development outside of Windows. While much of .NET is open source, most new development is done on *nix and targets web services using other toolchains (NODE.js is here to stay, I'm sorry). C# will always be there for Windows development, and maintaining existing legacy code bases.
Azure, with the exception of Azure functions, is overall fairly expensive. You can get your own "VM" on Digitalocean, with the overhead that entails... or go with the odd man out, www.binero.se I don't have a true idea of how much binero costs, a friend of mine has some kind of cheap plan that lets him create a gazillion users, made me a few, one of which has ASP.net
Holy guacamole, this is hard to read on mobile...
Intermediate C# dev here. I had the same problem when I started C#. While other resources mentioned in this thread can be very helpful, I found that the best projects for me were the ones that helped me throughout the day. For instance, I am student and so i frequently have various formulas that I have to used. So I created an app on visual studio where all you have to do is input the data and it calculates it for you without putting it into a calculator. And once you do that you start to find lots of situations that could be easier or more efficient with a program. But everyone is different! It also made working on the project more enjoyable for they could have immediate real world benefits. You do need to have a fair understanding of the basics though. However, this worked for me and won’t work for everyone. Hope this helped! 
Yeah, unfortunately I don’t know how to change that. Is there another option oth r than using the “code block” option (using the new Reddit)
Do you know if there are plans do go fully native on Android, just like iOS?
One thing I notice is that you seem to have a few variables that you may have been testing or something? So, like, for 18, 19 or 20 on the d20, you’ll need the if (d20 &gt;0) to be set to 17 instead of 0, as it is now you will ALWAYS have an encounter. I also noticed you had the dayList “var index” set to 2. You need this set to “enc” like the night list, or you will always get the Raven swarm encounter when using “day”. Sorry I don’t have any efficiency or critique responses, I’m also pretty new, but the DND title caught my eye ;)
I don't know. On iOS, it's sort of a requirement, as Apple doesn't want you shipping your own JIT compiler in an App Store binary (because it would let you essentially dynamically run any code they wouldn't be able to previously vet).
You could have a look at ml.net https://www.microsoft.com/net/learn/apps/machine-learning-and-ai It's the machine learning module, and could come in really handy as it's also in the list of what the cool kids are learning now. 
Yeah, sorry! Like you said, that was for testing. I wanted to have the specific message I pasted show up. I didn’t want to run it forever until I got it lol. I will edit that now!
Does it work with other kinds of clients or with Swagger?
How/what are they in java? 
You might be able to run .Core on the Pi. &gt;I can't justify to my employer, or even to myself, time spent on something that will have no appreciable value to my future development endeavors. Is there an internal push to get training and you need to find something? 
Apparently there is a kicksarter for a new ZX Spectrum. I didn't read it....just a quick google...not sure how well that'd go commercially.....that was my first computer, I was very young, but I have fond memory of a game called Stonkers. The only programming I knew on that was 10 Print .... *I think* ... 
You may find this class to be useful. * https://github.com/Grauenwolf/SavageTools/blob/master/SavageTools/SavageTools.Shared/Dice.cs * https://github.com/docevaad/Anchor/blob/master/Tortuga.Anchor/Tortuga.Anchor.source/shared/RandomExtended.cs It allows you to write things like `var roll = dice.D("3D6+1D12-4")`. 
I only have one api consumer at the moment but when deployed to server I had no problem bringing up swagger and testing end points. Even though It seems like I've done everything on consuming end to send the windows authenticated user I don't think it's happening. I noticed through Fiddler that it sends 2 requests for 1 post? Maybe it does a "Preflight" check before sending the request?
I wouldn't call it a push, but I'm the only dedicated .NET guy here. I have a lot of freedom, and that comes with the ability to learn and develop new skills. It's good for me, because I get to stretch my legs. However, no boss in the world is going to let you sit around learning things that aren't going to provide benefit for the company. Granted, the employer part of that statement only really referred to the UWP platform, of the things I mentioned. Even so, if I'm going to take time out of my free hours at home, I want it to be on something that I'm going to get some use out of.
&gt;that runs in the browser Gross
I'll also sometimes use Winforms if I don't have 3 years to wait for the fucking designer to load.
they will sell to anyone its just expensive
I misread op's comment, thanks for clarifying.
I would say it's already pretty big for hobbyists, especially game developers. Unity and MonoGame are C# first. It was so heavily demanded that Godot is adding C# support (it's not fully working yet, but it is there). When Unreal Engine 4 launched open source, one of the first things I saw was unofficial C# support pop up. It's cool stuff.
That's how I started with EF, edmx, now just code it. Same with XAML, can't stand the designer... I suppose they are a good place to start when you are totally clueless (like I was/am)...but perhaps its the long way around....Then again one needs to know whats happening either way you go in the long run....but is a useful start to have something show you its working... Back to some of the other stuff, I've been reading ES and CQRS and that makes sense now I can see how they are useful for trading apps (I'm doing sports trading on Betfair, ES perhaps not as much). Will keep them in mind. Not going to rush out to do em just yet. Gotta fight with other stuff. Thank you heaps for all your wisdom, you're the most helpful person I've ever run accross....(well...except for maybe my mum and dad and my grade 2 football coach and stuff) I feel a whole lot better about it all this week than I did last week. I'm now due to payback and go spend some time helping other people now :)
OK have fun using WinForms forever and pushing low quality shitty youtube videos. Fucking grow up.
What is your problem? Like they both said, it's for quick projects, not some worldwide super software that's installed on ever PC. And wtf is the big deal about low quality YouTube videos? You sound fucking offended, like "oh my gosh 480p, this is an insult to my culture!" Why does it matter so much to you?
have you looked into deploying asp.net core services to linux environments inside of docker containers? figuring out all of the container madness and building very easily scaled services is pretty much all of the hotness right now. assuming you ever want to get into cloud hosting anything, it would also be relevant to that. i think you should stop looking at stuff that's directly tied to .net and more of the stuff associated to it. deploying, testing, and managing your applications. are you familiar with travis ci or jenkins or circle or whatever? do you use octopus or anything like that to manage application deploys?
put it in pastebin and post a link
I know how you feel. Part of the reason why I started picking up C++. The dotnet ecosystem, while is robust and is still considered the goto solution for enterprise development, there is very little or no new and exciting things coming up.
Looks like you can now externally see comments in the doc by using "///" inside your code and not just at the declaration (see the second image with the comment in the function, it shows up on the mouse over). I agree that it was not 100% clear. Good information though.
Its been a long time so I'm not certain. I think the first request could be for the challenge-response that establishes the auth. There is probably something in the response that you will need to pass to subsequent requests 
Some places, employers need to spend a minimum on employee training per year, so if you can't find something interesting, you end up in some sort of seminar. 
if only I knew.. :D
I'm glad I helped. Hold on to the previous advice, there's no such thing as a one size fits all solution, the devil is always in the detail. ES is pretty cool, but it will ruin your life if you haven't had a few goes at it first. I feel like your parents sending you off to battle, but you'll do fine :) Go have fun with it :)
&gt; Stonkers Haha, yeah, I was pretty young at the time. I took a z80 book as one of my holiday reads to Greece. This was back when kids were invited up to the cockpit to look around and press things :)
Ahhh, right. That's neat.
&gt; you can't be innovating unless you're using a beta build of something You could use preview build of C# 8.0 on a preview build of .Net Core 2.2. Is that good enough?
LinkedIn Jobs, Indeed, Monster, find the company (that has offices near you) and manually apply via their careers section.
I'm gonna say yes
I've never had much luck. My understanding is that to even have a hope of this working... The Application making the request has to be running under a user name that is in a Domain or AD, that both machines are connected to. That said, NTLM isn't a great option for API-API communication. It's windows only, and can lead to fun issues like this when your network configuration deviates too far from a given standard. Consider something like IdentityServer, or even a basic JWT implementation.
Doesn't VS Code do this out of the box?
Why create a .net ML library without employing OOP throughout? Why create tutorials in the console instead of the IDE? In short, why make a poor man’s version that has the exact same limitations as all of the other ML frameworks out there? C# machine learning could be something beautiful. This is not it. 
I still think this is a bad idea.
 int d6x3 = rnd.Next(1,7); int d6x2 = rnd.Next(1, 7); int d4x2 = rnd.Next(1, 5); This should be: int d6x3 = rnd.Next(3,19); int d6x2 = rnd.Next(2, 13); int d4x2 = rnd.Next(2, 9); d6x3 = three rolls of 6, the minimum value is a 1 and the maximum is an 18, therefore, the low limit of 3 roles is value 3, the high is 18, so, (3, 19).
I suggest you spend some time updating yourself with the BUILD 2018 sessions, specially the .NET Core 3.0 roadmap, XAML Islands, MSIX and application containers. Microsoft is incrementally merging the UWP and Win32 worlds. If the apps don't come to the store, the store will come to the apps. 
Maybe running a `Console.WriteLine(result);` for each step will help. Initial Values: result = 0 and x = 6 Loop 1 Run 1: result = 0 + 6 (x = 5) Loop 1 Run 2: result = 6 + 5 = 11 ( x is now 4 ) Loop 1 Run 3: result = 11 + 4 = 15 ( x is now 3, and3 &gt; 3 = false and the first loop ends) Loop 2 Run 1: result = 15 + 1 = 16 (z = 1) Loop 2 Run 2: result = 16 + 2 = 18 (z = 2, after this run z = 3 and 3 &lt; 3 is false, so the loop stops) int result = 0; int x = 6; while (x &gt; 3) { result = result + x; x = x - 1; Console.WriteLine(result); } for (int z = 1; z &lt; 3; z = z + 1) { result = result + z; Console.WriteLine(result); } Console.WriteLine(result); Output: 6 11 15 16 18 18
Well for the ide comment. It's a .core dll, so meant to be used in all os, and in Linux that is console. So why do 2 guides when one will work, the ide is just running those commands for you. 
 int result = 0; int x = 6; while (x &gt; 3) { result = result + x; x = x - 1; } for (int z = 1; z &lt; 3; z = z + 1) { result = result + z; } While loops and for loops are very similar in that they will execute whatever is in the body (between the curly braces) until a condition is no longer true. In the first while loop, the following lines will be executed until x is no longer greater than 3: result = result + x; x = x - 1; At this point, `result` is going to be `15` because we added kept adding `x` to it. Note that the line `x = x - 1;` means that on each iteration of the loop, we are subtracting 1 from x. Here's a breakdown of what's happening: 1. On the first iteration, result is 0 and x is 6, so result is going to become 0 + 6 == 6. 1. On the second iteration, result is 6 and x is 5, so result is going to become 6 + 5 == 11. 1. On the third iteration, result is 11 and x is 4, so result is going to become 11 + 4 == 15. 1. Finally, x is 3 so the body does not get executed - remember, we are only running that stuff `while x &gt; 3` Now, the `for` loop is exactly the same, except we have compacted all of the initialization, condition checking, and incrementing into one little statement: `for (int z = 1; z &lt; 3; z = z + 1)`. This just means that we are creating `z` with an initial value of `1`, executing the body as long as `z &lt; 3`, and after every iteration we do `z = z + 1`. So, this loop will run twice (when z == 1 and when z == 2) and each time we will execute the line `result = result + z`. So, result will end up being 15 + 1 == 16 and then, finally, 16 + 2 == 18. Let me know if anything isn't clear!
Based on my conversations with them it was a few things: - Quartz (at least the version we are using) doesn't play nicely with removed/deleted jobs from our config. This may or may not be an issue with the abstraction we have but I haven't had the opportunity. - You get tied to the `IJob` interface. In a way that itself isn't a big drawback to me. A little extra boilerplate - What *is* a pain point for me (and them!) is the way that data gets passed to jobs. `JobDataMap` is flexible but leads to a lot of extra boilerplate code, and since you're dealing with essentially a string-dictionary, boilerplate on boilerplate. - Job Storage In Quartz is meant to be 'hands-off'. IOW the tables are not intended to be poked at. While I can appreciate the value in this philosophy, many would rather be able to throw update statements around and I can understand why some want that (i.e. oh crap, these queued jobs are now failing in production and killing X). The table design I went with was meant to be a bit closer to 'human-readable'. None of this is a huge rag against Quartz (This project was more inspired by Hangfire's faults.) We plan on sticking with it for our 'recurring' jobs since the API around that scenario is easy enough and we have it in place. Also, Quartz is a bit 'monolithic'. That's not to say that you can't enhance it with plugins or your own modules, but the process isn't meant to be super-friendly. Heck, they tell you right in the docs to not touch an instance of `JobStore` yourself. In this design, everything is modular to the library level. The Job Queues are meant to be usable outside the Execution Engine, just as they are inside. If someone thinks they can write a better Execution Engine using something other than Akka.NET (I used it primarily because it was a good balance between ease-of-implementation and desired performance characteristics), they can do so. If they can write a Jobstore that works over REDIS or RabbitMQ, awesome.
Microsoft didn't used to have any official GUI framework for cross platform so probably just a few should be using any... Xamarin can target Linux and MacOs now, but considering how new this is, probably just a few company's are using it. Another one is Avalonia Ui, also xaml based, so should be really easy to get used for someone coming from wpf or xamarin and it runs on .net core, but not officially supported.
0 0+6 6+5 11+4 ------ result at the end of while(x &gt; 3) loop = 15 ----- 15 + 1 16+2 ----- result at end of for loop is 18 Loops loop, and there are 3 main types before you get to some special cases: do { ...things } while (something is true); while(something is true) { ...things } for(One off set up ; condition to stop ; something to do at the end of each loop) { ...things } You have two of them here. So first things first. we have an int (integer) called result which starts at 0. There are two other variables, x and z. The important bit I think you're missing is what { } do. They create a block of instructions all of which will be considered under the care of the loop. It's actually a bit more complicated than that, but worry about that another day. So the only difference between your one statement loop and a many statement loop is that everything between { and } is considered the work of the loop. So the numbers I posted at the top show you the progression of the calculation the while loop is counting backwards. There are times you want to do this, just remember it's possible. The for loop, in case you don't know the syntax is what I described above: for(int c = 0 ; c &lt; 10 ; c++) { ... stuff to do (any number of statements } so you can see two ; in there. There are three bits to a for. You can actually leave some out, but don't worry about that for the moment (just remember it for the future). int c=0 is executed at the beginning. It's supposed to set the initial condition. c &lt; 10 is the condition. This (after the first ; and before the second ; ) is run at the beginning of each loop and will exit if the condition is true. It's important you know it happens at the start of each time around the loop and not at the end. This means the for loop may loop 0 (zero) times. c++ is shorthand for c=c+1. This bit of the for for (after the second ; ) is run at the end of each iteration (run through the loop). What they're trying to teach is that anything you can do with a while loop or a do while loop, you can do with a for loop. The reason we have while loops and do while loops is that it makes it easier to understand what the programmer intended to happen. do { All the statements in here will always happen at least once (1..n times) } while (condition) or while(condition) { All the statements in here will run may never happen (0..n times) } for(int i=n; i&lt;5;i++) { All the statements in here will run least once if n &lt; 5 or zero times if n is 5 or above. } See? Same effect, but the while loops are a bit clearer in what they are telling you. Next they'll be teaching you that you can put loops inside loops for(int i = 1; i&lt;= 10;i++) { for(int j=1;j&lt;=10;j++) { Console.WriteLine(i*j); } } This will loop 10 times for i and 10 times for j, but it will loop 10 times for j each time it loops once for i. It's output will be (the bit after the -): i=1, j=1 - 1 i=1, j=2 - 2 ... i=1, j=10 - 10 i=2, j=1 - 2 i=2, j=2 - 4 ... i=10, j=10 - 100 the ... means I've left out all the steps. So what you're seeing is two loops touching every square in a grid that is 10 along each side. Notice also that I started the loop at 1 and the condition was &lt;= (less than or equal to) 10. You don't always have to start at 0. Hope that helps.
I don't think it offers suggestions to the degree that I was hoping for. I was hoping there was a tool that would provide something more like this: https://github.com/koalaman/shellcheck/wiki/SC2031 or https://palantir.github.io/tslint/rules/forin/ 
&gt; All of the open sourcing, multiplatform work being done Combined with Oracle helping out by, well, being Oracle and suing people for using Java in a way they don't like.
Fashion driven industry as Alan Kay puts it.
Use Oauth, create your own authenticator class, pass credentials to AD, if success, send back token over SSL. I’m mobile right now, but I will attach code later. Avoid the NTLM anythjng, it’s a nightmare and it will only work with Windows objects limiting your ability to future proof a project.
for creating a desktop application do most companies use Avalonia and not the standard WPF or UWP?
"You can continue working while the designer loads" No I fucking can't 
I mean, there's always SonarQube. That thing is like a garbage disposal when it comes to static analysis. It will gladly take C#. But the Roslyn Analyzers and StyleCop are both good options. Also, `async` should always be weighed against the realistic cost of a call. To put it to an extreme, if I'm calling a Localhost K/V service to get data, the cost of the async machinery is probably worse than the wait of a synchronous call. A linter probably won't know that.
Fair enough- and, I r fr t that part of my comment. I’m editing it out my comment because I believe (until corrected) that the other points are valid. 
Be aware that taking rnd.Next(3,19) would get you a linear distribution on 3d6, which is an incorrect implementation. You still need to generate each die roll as a separate random number.
 You can use C#, Boo, or a dialect of JavaScript. Boo is a CLI language with very similar syntax to Python; it is, however, statically typed at has a few other differences. It's not "really" Python; it just looks similar.
Learn some new Paradigms. Something that reinvigorated my motivation as a developer was Akka.NET. It taught me a lot about message passing paradigms (also useful in understanding Service Busses and Message Queues!), Distributed Computing, and some good application design. Maybe that's not the library for you. Maybe you are a database guy and want to learn EF, and SQL. But in general, I'd suggest thinking about a library that you think would be useful in the sort of work you really want to be involved in, and learning about that. My interest in distributed computing lead me to Akka, but maybe your interest is different. Maybe you want to be closer to the LOB side of things, in which case you should consider learning about one of the CMS libraries out there. tl;dr - Think about what you want to learn or work in. Find a library. Start exploring!
They use WPF or forms, but those aren't cross platforms, only windows.
Just wait until Blazor/Mono/Wasm becomes mainstream.
Stylecop is what you are looking for. 
There is also Accord...
I have not used DevExpress scaffolding, but in my opinion, scaffolding is not suited to rich UI. It's best when you have simple UI with predictable rules and interactions.
A senior developer should really know better than to make play button that causes a modal pop up requesting personal information. 
Unless we get a new type that is intended to be a pure contract (like shapes/concepts/typeclasses), I think this is a bad idea as well. 
Boo was dropped awhile ago and UnityScript (JavaScript) is no longer supported. Documentation still exists for UnityScript, however.
I haven't, though I can't seem to stop hearing about Docker. Seems like a really influential platform the more time goes on. Could you perhaps give me a quick-and-dirty rundown of what working with Docker looks like? With regards to your other point, that's a valid suggestion. I guess the way I'm looking at it is that I'm on the .NET stack, so I'd like to leverage the benefits that confers. As much as you can do a lot with *any* language, I also don't want to create a square peg-round hole situation (sort of like what I mentioned with RPi above). Maybe that's the wrong approach. I've not heard of Octopus. I'd love to, though.
SonarQube looks awesome, I'll check it out. Also, I appreciate your tip about async. I'm sure once I get a better idea of how it works in C# I'll feel more comfortable knowing when and when not to use it. It's strange coming back from the everything-is-async world I've come to expect.
&gt;I suggest you spend some time updating yourself with the BUILD 2018 sessions This is great. Thank you for the advice. I will definitely book some chair-time with these sessions. &gt;If the apps don't come to the store, the store will come to the apps. This is very interesting. Part of what attracted me to UWP as a valid avenue was the fact that Microsoft seems to be working it into its certification tracks (or so I've heard). Could you expand more on this point?
&gt; Boo Nobody used that, that's why they killed it.
WinForms by far. 
It would still be a uniform distribution regardless. Adding more random to something random does not make it more random. This is sufficient. Rolling a dice is psudeo random as well unless you have a perfectly balanced dice. Regardless it is uniformly distributed. 
Did not know they were dropped... cannot be that long surely. I imagine many users will be put out by that..
Use the debugger its made for stuff like this, and its very easy to use.
the quick and dirty is that you write a file that defines how your image is built. your image is somewhat like a nuget package. you can then use docker to retrieve the image and run it inside of a container. a container is an isolated environment sort of like a vm with none of the virtualization (things are isolated, not virtualized). you can compose environments of multiple containers with them all networked to each other and such. if things are done correctly, i can spin up a full local dev environment of my 30-micro-service app with a database and whatever else via one command line operation. you have various other bits of tech to do orchestration and such like https://kubernetes.io/ it's a lot to understand and i don't understand most of it yet, but it's neat.
"going nowhere" I just realized that phrase can be used in both positive and negative connotations.
I will. Have fun...well most of the time....:) Thanks heaps!!!
Rolling multiple dice does not give you a uniform distribution because there aren't an equal number of ways to get each result. Ever played craps? The possible ways to get each result on 2d6; 2 = 1+1 3 = 1+2, 2+1 4 = 1+3, 2+2, 3+1 5 = 1+4, 2+3, 3+2, 4+1 6 = 1+5, 2+4, 3+3, 4+2, 5+1 7 = 1+6, 2+5, 3+4, 4+3, 5+2, 6+1 etc... It goes back down from there till you get back to 1 way to make 12. You can play with the [distributions on Wolfram Alpha](https://www.wolframalpha.com/input/?i=3d6). The simplest way to get this distribution is to simply simulate the multiple rolls and add them together.
Good ol' C makes an argument as an embedded OOPL and there's probably other languages for certain environments I'm not aware of, but yeah, C# is definitely a great go-to for 90% of applications.
Indeed - depending on the context of whether “here” is somewhere you want to be If “here” is living with your mother and having no job, you definitely want to go somewhere else If “here” is “one of the industry leaders”, why would you want to leave?
I think I'm just used to hearing it as "isn't going anywhere" when used in a positive context.
Out of the very few things that I am tribal to, C# / .NET is one of them. Its just so easy to get shit done with .NET and Visual Studio!
Not a criticism by any means, but you could use [this syntax](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers) for your list initialization to make your list deceleration a bit terser. Also why perfectly correct logically, this looks funny `if (day == true)` `{...}` `if(day == false) {...}` Just do `if(day){...}` `else{...}` Since you mentioned you were doing this as a practical learning exercise here is a suggestion for your next iteration. Modify the code to read the encounters from a file. That will be good practice, and add flexibility to your program. And if you really wanted to get fancy with the next step, encapsulate all of the logic for reading a file in a new class that has a method to return a day list and a method to return a night list.
Your program has to be running for it to capture the key press. So task scheduler won't work. You can just do a console app that minimizes to the app tray so it is less noticeable. As for the schedule code, you can just use the Timer class. 
Xamarin Forms is actually really nice once you get it up and running, and I expect it to just keep improving. It's an easy sell to management that might be interested in mobile development. 
Can you show me how the code looks like? I can't find an example online.
No, but maybe someone who has more time or is much nicer may help with that. Try googling C# timers. If you can't understand them from that, you need to go back and improve your fundamentals. 
Can the console app be disabled in anyway? I'm planning to run this in an enterprise environment where users don't have admin privileges.
To even infer that C# is dying is ridiculous when even cobalt writers are still sought after. 
One of the main benefits of UWP is that it is, well, universal, meaning apps targeting the framework will run on any device that runs Windows 10. As such, there are many device-specific features that have been left out of the core framework. If you are looking for a device-specific libraries, you may be able to take advantage of the various [Extension SDKs](https://docs.microsoft.com/en-us/uwp/extension-sdks/device-families-overview#extension-sdks) that are provided by Microsoft.
Ah, guess I was wrong. @OP do what he said lol.
Such click bait if you spend any time on any developer site that has a career portal you should be seeing all kinds of .NET job postings. Yeah they might not be glamorous, but the enterprise sector has many opening, especially since core brought cross platform development to this framework.
Not device specific. Today I was looking for TextInfo.ToTitleCase and it's apparently not there.
What problem are you trying to solve?
I'm trying to figure out how to automatically copy a file if I don't press a certain key within a given time interval.
Why?
The same can be said about many other environments, though
It's part of an enterprise environment related to calculating the heart-rate &amp; mouse-cursor movement of a user in addition to their keyboard use, it sounds counter-intuitive until you know what it's used for.
Why do you need the clipboard? Also, what is considered an "on-time" click? Down to the millisecond? Second? Minute? Does 9:00:59AM count?
The on-time click doesn't really matter. The clipboard use is a bit more complex as it links in with some other macros, but can you help me or not?
I'm not sure I understand the purpose of this, but some tips: You want a Windows application, not a console application. A console app will have an annoying console window that your user might accidentally close and will definitely be annoyed by. You might consider adding a notification tray icon to the app for accepting control commands and knowing if it is running. You should look into async tasks, timers, and synchronization tools like cancellationtokensource and manualresetevent. Also, if admin rights are needed for part of the program, you might need two parts - a windows service for doing the file management, and the windows app for interactions with the user session. PM me if you need someone to write this for you.
Well I don't really want it to be that complex but I sent you a PM
I keep my C *very* sharp
I could, but your attitude says I won't.
Mono supports winforms actually.
Yeah, the framework is pretty thin. That said, [TextInfo.ToTitleCase is available in .NET Standard 2.0](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.textinfo.totitlecase?view=netframework-4.7.2#applies-to), which is [available to UWP apps ](https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/)that target at least Windows 10 Fall Creators Update.
...ok
Thank you to all of the responses! I took a look at each one and it finally just clicked in my head. I tried replacing the values throughout the loops and doing the math before seeing the solution when I hit the button, and I was right on each one. In reference to the debugger comment, the book did let me know on another problem I can use the debugger to add a breakpoint and watch for the variables.
It's a great language to get started. It typically will NOT allow you to form bad habits but I'm certain it can be done. Get a Step-By-Step book, preferably the MS one (a new edition is coming out in a couple of months on Amazon). They will walk you through the basics of coding, allowing you to cumulatively build your knowledge and confidence. Do not let your frustrations get in the way of learning a new skill. When you are frustrated, do it again, read it again, and again, until it sinks in. I still have to learn new things after coding for \~40 years. Stick with it, learn how to find the answers, how to teach yourself, how to incorporate those answers into your solutions, learn what the possibilities are. Happy Coding!
Thanks I'll take a look at Identity Server. I was already considering some sort of jwt implementation. 
Avoiding NTLM seems to be the consensus. I'll take a look at OAuth as well.
UWP is the dead end with no real reason to exist. It made sense when we had Windows desktop, tablets and Windows Phone. Now it is just a restricted security app model with nicer install/update functionality and slightly different APIs that were implemented from scratch. UWP just reminds me of wasted billions and abandoned work of hundreds of developers. It just makes me sad. 
Awesome first go. I remember writing something very much like this when I was learning. If you want want to pull detailed descriptions from a directory you should look into a text template system as this will make formatting the text **much** easier. I use [T4](https://msdn.microsoft.com/en-us/library/bb126445.aspx) for this sort of thing all the time. But if you are so inclined there is also open source projects like [mustachio](https://github.com/wildbit/mustachio) or [scriban](https://github.com/lunet-io/scriban) or [dotliquid](http://dotliquidmarkup.org/). 
Ignore UWP. Look at .net core. It runs on windows and linux and is great for cloud services. 
Ever tried .net core? Quite exciting. C++ on the other hand is the opposite of new and exciting. 
Go check out WPF. Later versions of .Net are bringing i
Yeah, but it isn't officially supported and have some limitations. See the FAQ: https://www.mono-project.com/docs/faq/winforms/ Mostly should be okay, but forms is considered as "legacy" and no new features will come for it, only bug fix, if any is found. If you are doing basic tasks than forms should be more than enough, but xaml GUI s are the mainstream, either by WPF, UWP, Xamarin and AvaloniaUI. I highly recommend one of those, especially Xamarin as it can also run on Mobile, so it's an plus. AvaloniaUI should also run on mobile, but never seen any project using it for mobile (I would love to see an sample 😁😁)
You should check out Microsoft virtual academy. Free, and well done. Use Visual Studio 2017 to code in, also free and it is what the ''big boys" use. Don't forget that small bites help make a large meal go down well. In other words take it one day at a time, and have fun!
WinForms, WPF and UWP are windows-only. 
best advice i have is to start with simple useful applications. the first thing i made was a simple auto-clicker, so i wouldn't need to click so much in a video game i was playing at the time. the second program i made would log when ever my internet went offline, so i could show my isp that there was a problem with my internet when they wouldn't believe me. basically if it's practical and useful for you then you will have a lot easier time figuring out what you want it to do, and sticking with it to completion. don't worry about the bells and whistles just focus on the core of the program. feature creep was a real problem for me when i started. it's hard to not try and add a million different features that you don't really need.
Just read another thread that said .Net Core 2.0 end of life is September 2018 so use 2.1 instead.
I would absolutely recommend learning C# as your first language. C# has a very rich feature set and also has access to a plethora of libraries/packages that can enable you to do so much more once you're ready. There are a number of other reasons it's a great starter language too including: C# is called a "Strongly Typed" language, which means that you always[1] have to declare your data types. For a beginner is great because it forces you to learn and understand the basic data types you'll find in almost every language. In addition to that, as somebody else said, the core concepts of the language should teach you good habits and hopefully prevent some bad ones. C# is also an "Object Oriented Programming (OOP)" language. Seeing as your a beginner it's best you leave this leave this concept alone for now and just acknowledge its presence. OOP is a very powerful and important part of C# and once you've figured out what it is and how it works, you won't ever want to be without it. I'm not too familiar with the Mimo platform to be honest, but my recommendation would be that you download a copy of Visual Studio[2], and get your hands on a copy of [Murachs C#](https://www.amazon.com/Murachs-C-2015-Anne-Boehm/dp/1890774944/ref=mp_s_a_1_1?ie=UTF8&amp;qid=1529553109&amp;sr=8-1&amp;pi=AC_SX236_SY340_FMwebp_QL65&amp;keywords=Murach+C%23&amp;dpPl=1&amp;dpID=51SoucnILLL&amp;ref=plSrch) and work your way through that. [1] there are ways around this but as a beginner pretend you didn't see this. [2] for windows Visual Studio Community for mac/Linux VS Code. But you really should get a windows machine. 
a very small portion of it can be installed on another drive, but ya it's basically still limited to the c-drive. even with the bare minimum studio still takes up a ton of space. i read about one work around that involved cloning a directory to basically trick windows into installing it on another drive, but thats meh at best.
*Beep boop* I am a bot that sniffs out spammers, and this smells like spam. At least 100.0% out of the 4 submissions from /u/Leonardorxs appear to be for Udemy affiliate links. Don't let spam take over Reddit! Throw it out! *Bee bop*
A default install of Visual Studio "proper" for C# with only ".NET Desktop development" shows up as 1.41GB for me after deselecting a couple options: https://i.imgur.com/QZ90GEz.png However, that could be closer to 2GB after adding other options that may interest you, and there are a LOT: https://i.imgur.com/qDJSV42.png The new installer is pretty granular, letting you install only what you want (noting that some options may depend on others.) I notice there is an option to install in a different location, but i'm not sure if that installs everything elsewhere, or just the base editor. I don't have any experience with that, but IIRC it's still not a "good" experience. --- Another option would be Visual Studio Code - https://code.visualstudio.com/. It is more lightweight (about 250MB), open source, but not a "full" IDE like Visual Studio. You'll still have intellisense and debugger and familiar keyboard shortcuts etc (after all, it's still got "Visual Studio" in the title) - so it's worth a peek at least. If you go this route, you'll also want to install .NET Core 2.1 (https://www.microsoft.com/net/download/windows) and the C# Extension: https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp Hope this helps ! 
*Beep boop* I am a bot that sniffs out spammers, and this smells like spam. At least 100.0% out of the 4 submissions from /u/Leonardorxs appear to be for Udemy affiliate links. Don't let spam take over Reddit! Throw it out! *Bee bop*
.Net Core and .Net Standard are two different things. Core is the cross platform framework/runtime. Standard is a set of shared APIs that basically replaces the PCL concept. I.e. if you want to write a library that can be used in .NET Framework 4.* and .Net Core 1.* then you can look up what version of .NET Standard encompasses those versions, target that version of .Net Standard and your code will work across them all. There isn’t really an “end of life” concept for .Net Standard
If both drives are NTFS, junctions are your friend here.
You can actually totally install visual studio on another drive! [](https://social.msdn.microsoft.com/Forums/getfile/1017088) However, this will not relocate shared libraries for things that need to be installed in specific locations like .net and other tools. Howet, the IDE itself is located wherever you want. If you want to get a little physical, you can relocate literally anything with the "mklink /j" command, but fair warning: this could cause weird crashes of one drive goes offline.
I know how you feel, and this has been my issue with .NET and Microsoft in general the last decade. Forms was widely adopted, then they brought out WPF, only to change directions shortly after with UWP, and it's hard to imagine this being THE thing Microsoft commits to, for reasons mentioned above. Personally wouldn't invest myself in UWP, but Xamarin's seemingly is showing the most (immediate) promise imo.
This bot is snitching
Not a course, but I‘d like to recommend this book: https://www.manning.com/books/asp-net-core-in-action Use the code “aspdotnetcore” for 42% off. (From the author’s website.)
UWP is much more than Windows Phone, rather the replacement of Win32, one W10 release at a time. Win16 eventually was dropped.
Like it or not, UWP is the replacement of the legacy Win32. And in case you haven't been following Windows development news, Win32 will get its own sandbox with MSIX. 
[https://github.com/okhosting/OKHOSTING.UI](https://github.com/okhosting/OKHOSTING.UI)
Microsoft is building on the field knowledge that they gathered with Project Centipede and is adding the container model from UWP to Win32 applications. For that, in the long term MSI and APPX are getting replaced with MSIX, which is a merge of those package formats, while at the same time they are re-architecting the store model to be based on MSIX, thus applying to both Win32 and UWP based apps. https://blogs.msdn.microsoft.com/sgern/2018/06/18/a-closer-look-at-msix/ https://techcommunity.microsoft.com/t5/MSIX-Blog/MSIX-support-introduced-in-Insider-Build-17682/ba-p/202376 
you can develop windows application with xamarin ? 
There's also a lot of developers firmly on platforms other than windows. Except in the case of Unity, those developers have been apathetic towards adopting C# even after it was open sourced because it doesn't solve a problem that they have had. Use case wise, .net core is a subset of what a JVM stack is capable of and even though C# is nicer than Java, there's a lot of breadth in the JVM solution space for picking a language that fits the job better (Scala, Kotlin, Clojure). The only differentiator is the developer experience, but expecting adoption from a group that has better IDEs for JVM languages on their platform than they do for C# is a tough sell. There's very little reason to use a .net stack on Linux if you're not already using a .net stack on Windows.
https://www.windowscentral.com/upcoming-microsoft-hardware-watch-out-over-next-year-or-so
https://www.windowscentral.com/upcoming-microsoft-hardware-watch-out-over-next-year-or-so
The quality of the machine code it generates is *much* better. Whether this is noticeable in a UI application is hard to say.
Most development work is abandoned as soon as it’s finished anyway. 
Make sure the oil is at 300 degrees and your chicken is fully defrosted
Rule of thumb for async is/was "anything that is I/O bound should be async, as well as anything that takes more than 30(?)ms to complete" Whats happens when your localhost server suddenly shuts down - you block a whole thread, now 100 people try to access your site, you get 100 blocked threads that time-out after a few seconds/minutes. Async would not block the threads in this case.
No, I think MSIX is purely an installer format that uses some UWP functionality to support the MS App Store. It's a cross platform, open source solution which will also package WPF and other Win32 applications. They don't even need to be hosted on the MS App Store, they can be distributed through Steam for example, or the Apple iStore. The fun thing is it will be quite potent if you combine it with cross platform .NET Core, and Next year we get XAML support in .NET Core (probably, you know how things slip).
Use visual studio code and install netCore. Don’t install visual studio at all. Another alternative is to use remote instances of visual studio and RDP into the machine. You could theoretically code using anything as a thin client
Because you are doing it incorrectly. If nothing produces the Result then Result will never return. public async void Button1_Click(...) { var jsonTask = await GetJsonAsync(...); 
I will vouch for vscode. Great ide.
Awesome find!
We have had UWP support for a while now, Xamarin recently introduced GTK and WPF support in Xamarin.Forms 3.0. Xamarin.Mac has been around for a while.
Well, your proposed solution not only solved the problem of thread deadlock in C#, but in all possible instances of the issue. I guess the only reason it wasn't implemented is because there's no way for a piece of code to signal that it's ready to execute if it's not executing - but it might be me...
What should I use for breading? 
One thing that doesn't matter for this program, but might if you do something similar in the future - you have this line: Random rnd = new Random(); inside your loop. What this is doing is generating creating a new random number generator each time the loop is run, taking its seed from your computer's clock. This is fine here, since you're pausing after each iteration of the loop for user input - therefore each time the loop is run the clock will be different, and therefore your RNG's seed, will be different. So you'll get random outputs. But it will cause a problem if you ever do something that does this quickly in succession. Say you make a program that pre-generates a whole bunch of these encounters - it will run so quickly that the clock, and therefore each new RNG's seed, will be the same in repeated iterations. The result will be you'll get a series of identical results - ie the dice rolls will be the same for a bunch of pre-generated encounters, until the system clock ticks over, then you'll get another series of identical results until it ticks over again. You should create the Random instance first, then start your loop. I'd actually move the while(true) line all the way down to be after: nightList.Add("1 revenant/Vladamir!"); Since you don't need to create and populate those Lists each iteration either - but that isn't something with the potential to cause unexpected output.
&gt; Like it or not, UWP is the replacement of the legacy Win32. Maybe. We still seem _years_ away from stuff like Explorer, Word, Visual Studio running in UWP. And MS is so poorly coordinated, they built Honolulu not on UWP but as a web app. Not confidence-inspiring.
UWP is useful for Xamarin.Forms apps as well as for developing UI for Windows IoT (e.g. on a RaspberryPi); it's definitely not a dead end. I wouldn't necessarily suggest someone expect to do ONLY uwp, but it's still a useful tool in your tooolbelt
They arguably made design mistakes by making it blocking, and exposing it as a property (rather than a method `GetResult()`, which would also have enabled an overload with a timeout). Properties are generally expected not to be slow, and this one can be quite slow the first time it's accessed. However, they can't change the behavior now, as it's documented that way: &gt;Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the Wait method. &gt; &gt;Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the Result property. Changing the behavior would break the contract and thus cause incompatibilities with tons of legacy code.
The next Office will be store only on Windows 10.
Software installed via MSIX makes use of Windows containers. UWP applications also don't need to be installed via the store.
&gt; They don't even need to be hosted on the MS App Store, they can be distributed through Steam for example, or the Apple iStore. That's also true for appx UWP apps.
K. Scott Allen (and many others) have some good courses on pluralsight
Well, they finally fixed wpf text rendering when they started using it in visual studio. Hope they will make uwp viable when they start more dogfooding.
For desktop apps, WPF is the way to go. I’d suggest WPF + MVVM. Fast, no-nonsense development. I’d also advise you to look into the prism framework. I don’t have much experience with it, but from what I saw, it looked solid for desktop apps. Also, master the async await pattern. 
WPF and desktop apps are definitely past their glory years. All the hype now is Xamarin, web technologies and Microsoft trying to push UWP. Having said that, UWP sucks and web technologies are not nearly good enough to replace a WPF desktop app on Windows. I'm talking about tech like Electron where you can build a desktop App with HTML/CSS/JS. The best tech to build a desktop App on Windows is still WPF. As far as jobs go, there aren't too many startups doing desktop development. But, last time I looked (I live in Israel) there are still plenty of WPF jobs in the market in mature products.
As a WPF developer I whole heartedly agree...and that + MVVM part is particularly crucial. It's way too easy to start wiring up view events and forming really really bad habits. I know this because that happened to me in my earlier days and it took forever to unlearn that.
Unfortunately, it's a big project and not my call to change versions . . . 
My starting ground was Web Development so i don't dislike it i really like it i have just been out of the loop the past few years, specially since hitting university. What im wondering is.. as a C# developer what job oportunities will have in this case? Even as a Software Developer?
Seems like the new buzz is really Electron and HTML/CSS/JS for developing applications. What about Softwares in general? Do no companies work with C# for their software development ? I'm quite confused wher eeverything sits. What specific tools should a Software Developer have nowadays to get a job ? :D 
The basic and traditional "Console Applications" are used quite often. You can make Executables, Windows Services, self host a WCF Service etc etc. If you mean "Desktop Applications" with a GUI, I'm not aware if there's many companies using those, but I do know the "backend" stuff still relies a lot on Console Applications
Yeah i was talking about with GUI and all, but im glad that old Console Apps is still a thing. I guess im just kinda trying to see where C# dev can take me as a Software Dev and what job opportunities to look for in the future.
I have a couple of job alerts for "WPF" set (East coast, US) and sadly they are very very quiet. Every once in a while somebody makes a typo while writing "WCF". Desktop dev skills are still fairly transferable though. Just make sure to focus on being able to pick up new technologies whenever at the drop of a hat.
Any specific skills you recommend me to pick? What would benefit a software dev?
There's still a lot of jobs available in enterprise application development where desktop applications and services are still widely used. You'll be fine, but don't limit yourself - continue to develop your skills in other areas and languages.
Well you have jobs in about every field, so no worries there. Sure, C# is used quite a lot but it's not the most popular language for any dev area. It's maybe 4th most popular after Java, Python and Go. Not the most popular, but definitely the best though:)
Other people have already mentioned the main ones. JavaScript really is everything still. I always get bit by SQL because I don't take it seriously enough, but I think it's slowly going by the wayside too for big data management systems. I'm not really sure what's emerging as the next de facto option there.
Could you give an example of why you think this is a bad idea?
Hi, I've been working as a developer for .net for 6 years now. And my advice to you is not to teach WPF, but to learn [ASP.NET](https://ASP.NET) MVC, [Core.NET](https://Core.NET). For this technologies there are a lot of jobs offers. Apps for PC are less and less in demand. But web services are increasingly popular. [Core.net](https://Core.net) is a very cool thing. 1) Teach C# and design patterns. 2) Read somthing about functionall programming langueges. For example, F#, try to write in this language. 3) And ofcourse, something about ML. 
Almost all of the C# jobs I've seen or interviewed for over the past 10 years have been web. Very few businesses have applications that require native development. They want to be cross platform and accessible from everywhere, so web is where they go. I'm sure there are WPF jobs on the market, but the subset is small and there's no reason to severely limit yourself as a junior developer.
As to your point 2: why a Windows machine? To my knowledge, you can do pretty much anything besides classical ASP.NET and Windows desktop apps on Mac or Linux, too.
For most of your projects skip Array (System.Array), ArrayList, and go strait to List&lt;&gt;. Don't be scared of generics.
Currently interning at a tech company and my team makes in-house products for another larger team. Seems like they use WPF-MVVM quite a bit. My project displays and edits SQL records and tables using WPF-MVVM.
I am gonna just sneak in here. Is there a book you can point me to that is good for learning WPF + MVVM. A Google search makes it easy to find some, but I'd appreciate a pro pointing me in the right direction. If it matters, I am familiar with making Windows forms using Visual Studio, and I am pretty good at T-SQL. I don't know anything about XAML (XML?)
Thanks. Its good to gear fresh info not only from you buy everybody! 
Thanks a lot for the input. I should really broaden my specter and start looking into different frameworks
Yeah its pretty cool. But learning some extra stuff nevr hurts :)
Thanks a lot. And yes i was kind if referring to enterprise app joba in a way. Glad its still a thing
Blazor uses WebAssembly. There is the Unity WebGL engine exported to WebAssembly (without Blazor) [Game Demo](https://webassembly.org/demo/). Blazor have a [ JavaScript interop](http://learn-blazor.com/architecture/interop/). So, it looks like blazor should be able to communicate with the Unity at least though javascript interop.
That old thing should be forgotten.
I work in the security industry and most enterprise access control and video management/surveillance software is Windows based. Lots of growth in this industry and I'm sure there are many others with similar opportunity. 
&gt; I’d suggest WPF + MVVM. Fast, no-nonsense development. I’d also advise you to look into the prism framework. Totally agree, and take a look at async/await too. If you want a good MVVM framework and to read some good MVVM code check out LBugnion's [MVVMLight](https://github.com/lbugnion/mvvmlight).
I know a lot of developers are worring about a lot of C# new features, but please read the comments in the article and give me a concret example what you are worrying about?
I use it in a slightly different way. I have a UI that is used to schedule the jobs. In the UI I use reflection to query all of the assemblies that implement IJob and you choose from one of them. This way it's really easy to quickly add and remove the jobs. The IJob interface is fairly light weight as I am able to easily write unit tests for my jobs. Any data required by the job is not passed in via Quartz, but obtained via other methods such as database queries or web calls. I would recommend keeping quartz, but change how you use it. It does support clustering and you can even chain jobs, so it would behave similar to Queuing. If you have any specific questions feel free to PM me.
[This blog post](https://rachel53461.wordpress.com/2011/05/08/simplemvvmexample/) covers the very basics (binding to a ViewModel, Commands) with a simple to understand example. From there you can learn about [DI, containers](https://msdn.microsoft.com/en-us/magazine/jj991965.aspx), [message relays](https://msdn.microsoft.com/en-us/magazine/jj694937.aspx) and so on. 
The answers are helpful in this case, but the best answer is to learn to use debugger. This is a perfect problem to learn how to use breakpoints, view values in the memory and step through code. Learning these things will make solving many problems trivial, and it can help you understand more things faster and without help.
[removed]
Been there, and unfortunately, that's one of the trade-offs when you target the early versions of any API. There are bound to be new features and breaking changes that necessitate updates. 
You may want to consider adding a more explicit "NSFW" tag beside the "link!" hyperlink.
this is what i would've done (may not compile) public void button1_Click(object sender, EventArgs e) { try { TAeEmployeeBasic[] employees = ws.getActiveEmployeesList(); foreach(var employee in employees) { TDateRangeEnum dateRange = TDateRangeEnum.drCustom; string beginDate = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd"); string endDate = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd"); TAePayLine[] paylines = ws.extractEmployeeSummsByIDNum(employee.empID, dateRange, beginDate, endDate); var empWGDescr = paylines.Select(o =&gt; o.WGDescr.Substring(0, o.WGDescr.IndexOf("-") + 0)).FirstOrDefault(); var empDate = paylines.Select(o =&gt; o.Date).FirstOrDefault(); var empHoursHund = paylines.Select(o =&gt; o.HoursHund).FirstOrDefault(); var empEmpID = paylines.Select(o =&gt; o.EmpID).FirstOrDefault(); var empPayDesName = paylines.Select(o =&gt; o.PayDesName.Trim()).FirstOrDefault(); var empBadge = paylines.Select(o =&gt; o.Badge.ToString()).FirstOrDefault(); var empEmpName = paylines.Select(o =&gt; o.EmpName).FirstOrDefault(); var empShift = paylines.Select(o =&gt; o.WGDescr.Split('-', ‘-‘)[1]).FirstOrDefault(); var empTier = paylines.Select(o =&gt; o.WGDescr.Split('-', ‘-‘)[2]).FirstOrDefault(); using (SqlConnection connection = new SqlConnection(Program1.Properties.Settings.Default.ConnectionString.ToString())) { connection.Open(); SqlCommand myCommand = new SqlCommand(@“INSERT INTO EmpHours(Department, WorkDate, Hours, IDNumber, PayDesignation, BadgeNumber, Name, Shift, Tier) VALUES(@empWGDescr, @empDate, @empHoursHund, @empEmpID, @empPayDesName, @empBadge, @empEmpName, @empShift, @empTier)", connection); myCommand.Parameters.Add("@empWGDescr", empWGDescr); myCommand.Parameters.Add("@empDate", empDate); myCommand.Parameters.Add("@empHoursHund", empHoursHund); myCommand.Parameters.Add("@empEmpID", empEmpID); myCommand.Parameters.Add("@empPayDesName", empPayDesName); myCommand.Parameters.Add("@empBadge", empBadge); myCommand.Parameters.Add("@empEmpName", empEmpName); myCommand.Parameters.Add("@empShift", empShift); myCommand.Parameters.Add("@empTier", empTier); myCommand.ExecuteNonQuery(); connection.Close(); } } } catch (Exception ex) { MessageBox.Show(ex.Message); } } 
Oh sorry, I thought that post tag is enough :/
I actually created this project about a year ago, but recently got back to up keeping and developing it again. Anyway, I know I missed the WPF hype by about 8 years but this project is pretty awesome in my opinion, so hope it gains some traction.
I like to listen to podcasts focused on other development areas to keep a high-level view on what's going on. For example, I like [Embedded](https://www.embedded.fm) for embedded engineering and [Syntax](https://syntax.fm) for web development. I'll probably never be an embedded programmer... but it's nice to know what tools and languages are popular in different areas. Then if it comes up in a job post or interview at least you know what they're talking about and can relate it to what you do know!
Thanks a lot for the links and info. Great will see them for sure ! :) 
shouldn't be too difficult to write a small function to do that. Right? I mean it's supposed to take "random text that's SENT TO IT" and transform it to "Random Text That's Sent To It". I'll look into the string API, it shouldn't be that hard to replicate.
&gt; supposed to take "random text that's SENT TO IT" and transform it to "Random Text That's Sent To It" Actually, no. Title casing does not modify words that are entirely uppercase. `void Main()` `{` `string title = "random text that's SENT TO IT";` `TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;` `title = textInfo.ToTitleCase(title);` `Console.WriteLine(title);` `}` `&gt; Random Text That's SENT TO IT`
I totally agree with this. WPF jobs do exist but mainly at places too big for their own britches. Web is the way to go for sure.
I think its a bit like a goto. Most of us should never use it but there are reasons for it to exist. 
Okay, so ignore anything that's entirely upper case. That's an interesting caveat. I guess if you really wanted it all to be title case you would want it to be piped through a lower case filter, then title case?
Technically yes, you are correct in that you can you can write and work with C# in Mac or Linux. However C# was originally created and intended for use as Microsoft Desktop and GUI applications. Additionally, Visual Studio, the primary IDE for C# development, was also designed specifically for windows. In the last 2 years or so, MS has been making an effort to "Open Source" themselves a bit. As such they created the .Net Core Framework, and Visual Studio Code. .Net Core allows you to write C# code for Mac or Linux, however it's important to note that this framework does not have access to all the same namespace C# on windows would. VS Code from what I've told is designed to give you the power of the Visual Studio IDE, outside of windows, but without all the bells and whistles. It's also free and has many great features. Even before the creation of .Net Core however, there was still technically a way to run C# code on Mac and Linux using a special framework called Mono. I'm going to be honest with you and say that I've never worked with Mono in my life. What I do know about it though is that, like .Net Core, it doesn't have access to all the same language features that you would have for a windows machine. One final thing I want to touch on is the power of C# and Xamerin. Nowadays everyone is glued to their smartphone, whether it's an Android or an IPhone. Because of that obviously there is a huge demand for mobile apps. With C# and Xamerin, you can build a single app that can be deployed to both iOS and Android, meaning less time programming, and fewer differences between the apps on each platform. TL;DR: Yes you can write and run C# applications on platforms other than windows, however you won't have the same feature set and they aren't as robust or mature as they would be in windows. 
The pragmatic reason is because anyplace that will hire you for C# development in the next 5 years is more likely to give you a Windows machine to develop on, and most of the tutorials, books, and articles explaining C# and .NET workings will assume you are using Windows. This may change in the future, but there are just many more Windows desktop users than Linux ones today. Personally I would recommend learning the .NET CLI (its simpler than understanding MSBuild tasks) and use Visual Studio code together with VS. Visual Studio Code loads faster and has nicer support for git, TypeScript, gets updated more often, and has a better user experience...but VS is necessary when you work for a company that uses extensions for VS, its tooling support, and it has better a slightly better C# editing experience (especially so with ReSharper).
NSFW tags are very rare in the programming subreddits. Its definitely better to be...uh...as explicit as possible with NSFW content.
I'm so happy people are finally talking about this. I posted a couple questions a month ago on StackOverflow when I was trying to learn UWP. I got downvoted into oblivion. I wanted to do the simplest things in UWP and none of them worked: * Programmatically move a window to another screen * Hide the window close button * Get a list of how many monitors someone has on their machine and the bounds of each. None of these things are supported. I banged my head against UWP for 3 days trying to migrate a kiosk application I have in WPF. I briefly looked into what it would take to migrate some of the hardware code I have, then quickly gave up. 
You’re getting hung up on the example. The desire is to have a bridge between synchronous code and asynchronous code that has no pitfalls: no deadlocks possible, and thus no need to impose the use of `ConfigureAwait(false)` on EVERY async method call.
I have no idea why you're getting downvoted. I ran into the same thing asking why something simple wasn't in UWP on on StackOverflow. People really dislike other people bad mouthing UWP for some reason and I really don't get it. I had a horrible experience trying to migrate a WPF app to UWP. Between Visual Studio not letting me add .net standard references even though its supported, right down to the simplest of things, like how to make a chromeless window. Nothing worked, the documentation is shotty at best, and it feels really incomplete. 
There is still a metric asston of enterprise WinForm code out there and a whole lot of it is still being actively developed. This isn't necessarily what I'd focus on if I were coming out of school- but if you end up some enterprise position doing desktop C# there is a good chance it won't be WPF
LOL... Downvotes for the *truth*... I like it so much. So here is the really simple and *idiomatic* solution - reflecting the language and the domain problem itself: &gt; var mathClass = new HashSet&lt;string&gt; { "Bob", "Samantha", "Zack", "Jill", "Tyrone", "Iyad", "Mark", "Eric", "Jean", "Liz" }; &gt; var chemnistryClass = new HashSet&lt;string&gt; { "Max", "Zack", "Margo", "Baron", "Charles", "Tasleem", "John", "Jean", "Eric", "Liz" }; &gt; mathClass.IntersectWith(chemnistryClass); &gt; mathClass HashSet&lt;string&gt;(Count = 4) { "Zack", "Eric", "Jean", "Liz" } If you really have rather some ``IEnumerable`` instead of hardcoding the HasSets, you can easily build them with the ``IEnumerable`` as Ctor parameter!
I only worry about the abuse * People using it as though it were a general purpose mechanism * People using it to get multiple inheritance. 
All of the MS devs at Build 2018 were saying the opposite. I asked them if I should be considering the move to UWP from WPF and their answer was always "depends". I told them I was worried WPF was out the door and the answer was usually "WPF is going nowhere, do you honestly think we're ever planning on rewriting Visual Studio in UWP? It can't be done."
Yeah im starting to plan to look i to other stuff like MVC and broaden my knowledge to web too. Thank you and to everyone else too.
Good bot
WPF and Win32 are not the same thing. WPF runs on .NET, and .NET Core 3.0 will support WPF, regardless of what happens to Win32. UWP uses the .NET Core toolchain for .NET Native. 
Most of the opportunities are not in "desktop gui" apps. They're in UI-less server code and web applications mostly.
There's no way go is used more than C# for... anything really.
It's cheap and easy to write electron apps. The downside is that they are extremely demanding. And the word extreme is not an exaggeration.
Blocking is appropriate when you are in a synchronous context and are waiting for a set of parallel operations to complete. It really only becomes a problem when people don't write their async libraries correctly.
Yea, and I want my code to magically write itself, be free from bugs, and anticipate any possible requirement change for the next ten years. We already have an easy solution, use CA-F. Yes it's an annoying bit of boilerplate code, but that beats trying to redefine Task to know about message pumps that don't actually exist.
Check out [JetBrain's developer survey](https://www.jetbrains.com/research/devecosystem-2018/). You're right, Go is used less but... really gaining
Can you offer an example of why it's a good idea? Every one that I've seen so far were utterly contrived or easily handled with an extension method and matching optional interface (e.g. .Count and ICollection.Count).
Sorry, ended up passing out yesterday before I could post the code. I am placing code from Paste-Bin, with a link to the original tutorial I had followed, and it has been working flawlessly since deployment. Good news is the code will work in DotNet and also in DotNet-core. https://pastebin.com/Sm0wdpSc 
The point of interfaces is that we could rely on them to be stable. Now they are going to bloat over time. Which means that in v1, class A may be able to correctly implement IX but in v2 it no longer can. Microsoft's own example illustrates this when they wanted to add IEnumerable.Count despite the fact that not all enumerables are reasonably countable. And for what? We don't actually gain anything here. The current patterns already solve the problem and do it better.
Such as?
Yeah, right. Have you done any UWP development at all? I did. I had a few apps in the app store and also watched windows phone die. With .net core MSFT figured out how to move forward and it is awesome. UWP on the other hand is what a dead end looks like. 
Well, it works as intended and is more complicated then "Hello world". I think this is pretty good for a beginner. The biggest issue is that this is one long segment of code... there is no organization or code re usability. Example if (day == true) { Console.WriteLine(); var index = enc; if (index != -1) Console.WriteLine($"---------- You encounter {dayList\[index\]} ----------"); Console.WriteLine(); Console.WriteLine(); } if (day == false) { Console.WriteLine(); var index = enc; if (index != -1) Console.WriteLine($"---------- You encounter {nightList\[index\]} ----------"); Console.WriteLine(); Console.WriteLine(); } Could be easier to read/less code as void main(){ ... String encounterString = day?dayList[Index]:nightList[index]; DisplayEncounter(encounterString); ... } void DisplayEncounter(encounterString) { Console.WriteLine($"---------- You encounter {encounterString} ----------"); Console.WriteLine(); Console.WriteLine(); } You could remove excess variables by replacing Random rnd = new Random(); int d20 = rnd.Next(1, 21); int d12 = rnd.Next(1, 13); int d8 = rnd.Next(1, 9); int d6 = rnd.Next(1, 7); int d4 = rnd.Next(1, 5); int enc = (d8 + d12); int d6x3 = rnd.Next(1,7); int d6x2 = rnd.Next(1, 7); int d4x2 = rnd.Next(1, 5); with something like Random rnd=new Random(); //Initialized once/ not per function call. int Roll(int count, int sides) { int tot=0; for(int i=0;i&lt;count;i++) tot+=rnd.Next(sides)+1; return tot; } 
I think at least the first two of the issues might be because UWP has a higher level of isolation, which prevents the app from accessing some of the system features by design
The initial motivation: So MS can add things to collection interfaces without breaking tons of code. 
Entity Framework for managing database.
I'm by no means convinced its a good thing, has anyone interviewed Anders about it?
I'm currently writing a go service at work in mostly a C# shop :) It's the right mix of something still hip, but already serious and mature (if we ignore dependency management), and I can absolutely see it grow a lot in certain areas.
Again, LINQ already demonstrated the solution to that "problem". And I put that in quotes because it isn't really a problem. The collection interfaces are already well factored. There is no reason to add stuff to them.
I already wrote it, I was just annoyed that I needed to, since it's right in the docs.
&gt;The next Office will be store only on Windows 10. That doesn't mean it's UWP. &gt;Web apps on Windows have access to UWP APIs, provided they are properly authenticated. Sounds like the story continues to be: do as we say, not as we do. It's great that I can access some APIs from a web app, and that I can put my app in the store using Bridge, but either Microsoft wants us using UWP-the-UI-framework or it doesn't. Them not using it for their very own shiny new admin panel is a confusing message, and we need more dogfooding from them to take UWP seriously. If they don't even bother themselves, why would a third party?
&gt; The desire is to have a bridge between synchronous code and asynchronous code that has no pitfalls Microsoft didn't make this hard because they're jerks, but because this is actually, well, hard.
&gt; Do no companies work with C# for their software development ? I'm quite confused wher eeverything sits. Desktop development just isn't a thing anymore, for the most part. Enterprise applications are better as web apps. Even local applications can be written as web apps. Unless company specifically needs it, there just aren't good reasons to write WPF/WinForms apps anymore. ASP.Net is better for almost everything. Obviously GPU-intensive apps are the exception here.
I don’t doubt it, but knowing that doesn’t satisfy my curiosity :)
My only question is why? Why is there such a departure from the standard way of doing things? I get the need for more security, especially with the way things are going nowadays. But what does moving a window programmatically have to do with making things more secure? What does having a chromeless window have to do with making things more secure? These just seem like oversights to me. I can understand the elevated restrictions on file system access, and even hardware for that matter. But why cant I do simple things that I've always been able to do? Don't tell me "this is the way things are going, get on board" and still not give me the most basic of tools I need to get my job done. 
Gotcha. Glad to see so many inputs. Really feel like i can go towards a more prospective and correct direction now :) Thanks ! 
If UWP is really the tits Microsoft is making it out to be, why can't we have an option to build a UWP app, that only targets a couple of the platforms it's supposed to? Why cant I say "I appreciate that building a UWP app is the way you're going, but I have no intentions on running this app on an Xbox"? I mean shit, even iOS development does that. Target these devices, and show a warning in the app store saying it only does these guys. Also, why is there such a push to put shit in the MS app store? I write internal applications for the company I work for. I would love to have access to all the cool new controls and design patterns they're porting. I also have no intention to release these apps as things people can download outside my company. Everything in this field screams "we're not ready yet, but please, back us on this". 
Yes! This exactly! My experience was, "holy shit, for real? You guys don't have this simple fucking thing I'm looking to do?" It's very reminiscent of javascript development. Here are the few things you can do, fuck off and write you're own if you want more. This has never been the way things are in the .NET platform. That shit does way more than I would ever need, or want it to do. Now Microsoft is backpedaling by dumbing down their own frameworks in the guise of making it cross compatible. 
Depends
Do UWP. It’s going to be here a while
&gt; Short of ReSharper (because I do not want to use Visual Studio) are there any similar tools out there Ever tried [Roslynator](https://github.com/JosefPihrt/Roslynator) ?
You could look up past coursework briefs for computing A levels, which would also prepare you for your actual course.
Yes, my comments were only related to MSIX :) We have a work app store, but I've never used it. I did do a feasibility study on UWP for my team, but it was junk. I'm quite interested to see what comes of XAML in .NET Core next year (or whenever it gets done).
Desktop apps still exist, they are mostly legacy apps at this point, or there is some particular reason they want desktop (government, control panels for industrial equipment, etc.) Web and mobile is where it's at. Which is good because c# is all over that shit. 
This question. Isn't really a C# question, it's more a iOS/xamarin question. I can't help as I don't know iOS device very well at all (just enough to recognise the class names, basically) and I expect lots of people here won't. I'd ask over in /r/xamarin, I expect you'll have more luck there.
It's not "Windows Containers" as that would require Hyper-V right? And Hyper-V cannot be a requirement to use MSIX Containers. MSIX I know is separate from its containers, but honestly I'm just reading up now as it would solve a butt load of problems for us (depending on Win32 API/.NET4.x footprint supported). 
There is a kiosk mode built into Windows now iirc - boots into that app and it's unclosable. Maybe helpful for you?
Glad its all over it then. Brings a lot of opportunities :) Also i was quite out of the loop about Web stuff, glad its actually that popular now.
I always wish this kind of stuff had location data with it. 
I may be wrong, I don't think that is why this deadlocks. It's because the UI thread is blocked waiting for that result to come back, but the continuation can never be run after ` client.GetStringAsync(uri)` because it can't post back to the UI thread because it is blocked waiting on the result. If you use `client.GetStringAsync(uri).ConfigureAwait(false)` it won't deadlock because it won't run the continuation on the ui thread.
Yeah, I do some IT work for my dad. One of their software providers recently replaced their old software with something new they built from scratch. I was shocked when I saw it was using Forms just like their old software. I would have thought they would have used WPF instead, but nope the new software required a WinForms installation to run.
Thank You very much and yes I am really just starting thank you very much anyways, I'll check in xamarin. thank you!
Are you referring to WPF and Windows.UI.Xaml? They'll be available only on windows desktop. If you want cross-platform gui then you might look into Avalonia 
I agree, do both. WPF will get you a job now, and UWP will prepare you for the future.
You can use Unity 3d to emulate shake and bake for blender chicken
Just add the sp using the connection from the Server Explorer. It will warn you the connection is different. Just say ok. Then after you've added the sp to the dbml right click in the design surface and go to properties. You'll see the Connection option. Select the connection from the web.config.
So everyone suggests WPF... as a WPF developer the last 6 years I will say USE SOMETHING ELSE. It is the framework that was the fastest to prototype, easiest to develop anything with and customize controls, and most fun, but, there was no development in it for a really long time, as Microsoft went UWP route. XAML that WPF uses is very different from UWP, so it will be just confusing to switch later. And WPF rendering is slow, so any transition, animation, even scrolling the listview is slow and a horrible user experience, but it is fine unless program is complex, but once in that stage you will spend 80&amp;#37; of time just making it run a bit smoother, and optimize slow layout. In addition it suffers from random rendering framework crashes, and is impossible to debug, as sure enough it will never happen to you but to your clients.
I'd say this field is really hard to judge. The technology MS supports the most for Desktop apps right now is UWP. WPF hasn't received major attention in as long as WinForms hadn't received it when WPF released. That said, the fundamentals of WPF are the fundamentals of UWP, so if you gain skill in one you'll find the other familiar. These kinds of "markup + code" framework are becoming very popular, so learning how to handle that's pretty good for your career. Where WinForms is alive and kicking is in the same space that VB6 is alive and kicking: internal enterprise apps no one talks about or gets excited about. I'm sure there are plenty of prospects there, but they aren't fun ones. What I hear from friends who still do VB6/WinForms development is that the world is starting to demand either web or mobile apps in place of what they've been used to doing. Many of them have started either considering retirement or studying frameworks like Electron and Cordova. On that front, MS is pushing Xamarin Forms pretty hard, which is an offshoot of WPF and more like UWP. However, as a Xamarin Forms developer, I think you might be happier if you focus on UWP or WPF for now. I'm not sold that MS believes in Xamarin Forms. I know for sure Visual Studio for Mac is hot garbage. It's not really "free" to be a Xamarin dev anyway. So if you believe in the MS stack, your best bet right now is to look at WPF and UWP and *stay current*. Things are changing very quickly and the people who keep up will be the most well-rewarded.
Removed: Duplicate.
I guess you missed the memo that Web UIs are a subset of UWP. To educate yourself https://blogs.msdn.microsoft.com/microsoft_press/2012/10/29/free-ebook-programming-windows-8-apps-with-html-css-and-javascript/
Removed: Bad bot. The user is asking for courses, for both Udemy and Pluralsight, not submitting affiliate links. And only really asked twice (one duplicate submission, one crossposted between /r/csharp and /r/dotnet) with a 2.5 month spread. I assume the bot is just looking for the term "Udemy".
Thanks for the big information on this matter. So i see many people say go mobile focused frameworks. Does that include most of the Software Dev field? Im quite surprised more universities don't teach then web-frameworks rather then keep old simple hard coding. At least the palces i studied at never included web frameworks for software dev ;/
I do. You are mixing phone with Windows eco-system. All new Windows 10 APIs are UWP only and they are merging both worlds. In a couple of Windows releases there won't be any distinction anymore. Win32 apps will run just as Win16 ones did in the past.
actually it says, "The objects you are adding to the designer use a different data connection than the designer is currently using. Do you want to replace the connection used by the designer?" So I'm assuming its going to get rid of my connection, no? 
&gt; why can't we have an option to build a UWP app, that only targets a couple of the platforms it's supposed to [In fact, you can do just that.](https://docs.microsoft.com/en-us/uwp/extension-sdks/device-families-overview#writing-code)
It's hard for universities to teach application development because it changes rapidly. For example, MS went from "Silverlight is new and interesting" to "Silverlight is the future of Windows development" to "HTML is the future of Windows development" to "use UWP" in about 2 years. Several Silverlight 5 books were mid-development when they discontinued it. There's not a way for the education infrastructure to keep up. So colleges and universities teach what hasn't changed: the fundamentals of computer science. Learning how to stick a GUI on top of that might get touched on in a few classes, but it isn't a focus because it's too unstable. That's the part students have to sort of do on their own. I am very uncomfortable telling you "yes, definitely go to a mobile-focused framework". The real answer is, nobody has any damn idea what the next 5 years are going to be like. That's why people like web frameworks: they work everywhere, so no matter how the dust settles they'll be functional. Mobile frameworks are "also safe", because we're all reasonably certain phones/tablets aren't going away. As for desktop tech, MS has created and abandoned a framework almost every other year for the past 5 or 6 years. It's a mess, and if you asked me to describe what platform targets which things I'd spend a page on it. What I don't want is for you to fully invest in something, on my advice alone, and find out I was wrong. But it is true that if I had a month to train so I could interview for new jobs with no resume, I would be most interested in learning as much about as many of the JS frameworks as I could cram in that time. Today, it feels like "marketable" devs can cover many bases. Perhaps we'll settle soon. If you can do HTML/JS, then XAML/C# feels very much like it. Try looking at both at the same time, I think you'll be surprised.
Right. Just say Ok. It'll change the connection. But then you can change it back.
Not sure what's up with the condescending tone, and also, that article is about Windows 8. Yes, UWP is sort of an evolution about WinRT, but that's really besides the point.
I feel ya. Ive done web dev in the past its something that has always interested me. So i will give that another approach check a few frameworks etc. I guess my best bet is to try and widen my scope of tools and skills and just try and keep with the trends :)
WPF + XAML + C# + MVVM is my bread and butter and i make well over the 6 figures mark. that being said its moving to xamarin and web which is too bad IMO
I've done that (remoting) but I don't have access to a remote machine to install studio onto at the moment.
A GUI library that is suited for use in real-time applications like video games is one i haven't seen before.
I think that did the trick, Thank you! 
This is awesome, thanks so much! Could you explain the simplification of the rolls you provided? I was looking all over for something simple that let me do this, and I think I found some things that were similar, though I didn't understand them so I didn't use them.
Thanks, i'll know for future :V
Yeah I actually noticed this. Before I was trying to do 3d6 as (d6+d6+d6) and it was giving me triplets of the number it generated, so I had to make the new variables to get different numbers. So I can pull "Random rnd = new Random();" out of the "while" string? But I assume it also stays under the "Main" function, correct?
Hey this is awesome, thanks! Yeah I think I will work on simplifying this a bit more, then I am definitely moving onto something like that - so this is super helpful!
That sounds all well and good, but can you imagine trying to debug like that? I have to literally reboot my machine every time I want to try my application out in full screen mode? I think I'll pass and stick with WPF.
Thanks this helps! My next step is definitely something like that, but instead of essentially taking another approach to this same end product, I want to have the encounter descriptions and possible loots be pulled from another file - and then eventually integrate that into this code. I think after that I will start over, and take another approach from scratch to make other similar products, so that I can see how much I learned from my first attempt!
How about a good Dotnetcore replacement for a library based on handlers or modules, that is currently not being developed and/ported. Such as the classic Elmah package. Should be doable with OWIN and could have a great impact on the open source community. 
Well the problem with that is that rolling 3d6 isn't actually just a random number between 3 and 18, it has weighted values (The numbers 10 and 11 are 12.5%, 9 and 12 are 11.5%, and the others get continually lower, just because with three d6 there are more ways to roll 10 or 11 than there are a 3 or 18). I created those variables you pointed out to be essentially the other two six-sided dice aside from the first ("d6") so that I had a way to get three random numbers, instead of the same random number three times. Essentially what was happening was that I would always only get multiples of 3 the other way (d6 + d6 + d6 would always yield the same random number*3; ex. for a 4 -&gt; 4 + 4 + 4 = 12). But it is important that I maintain the weighted property of the encounter table, because the values 10 and 11 (as well as those near them) are much easier to manage, while still providing a challenge. as for the "Roll_Dice" property, another comment spelled out something similar to what you are talking about, so I will definitely be trying that out, thanks for the help! 
Welp.. I feel dumb because I definitely pasted it to reddit from a pastebin lol. I guess I didnt expect links to be kosher. Thanks!
I should note, there is this example [https://gist.github.com/Lordron/5039958](https://gist.github.com/Lordron/5039958) here, however the output size is the same as the input. Basically it doesn't work
I primarily WPF development for a decent sized museum in New York City. There is definitely work to be found. We use WPF on top of Caliburn.Micro MVVM framework. To reiterate what other people have been saying in this thread, async is super important. Be careful stepping into the UWP world. Im my personal opinion, it feels unfinished, and there are quite a few roadblocks to get through while learning it. 
This guy knows whats up, I'll second this comment.
The approach we take is to write our API using C#, but use Swashbuckle to generate the Swagger style docs, which works well for us. YMMV but we didn't see a need to use the Swagger markup to spec out our API (a little bit extra for us than we need). However, the use of the Swashbuckle UI is pretty handy.
For this program, where you just have a single class, you might as well keep it in the Main method - your only going to have one of those running at a time. But more generally, in larger programs its better to have it as a static member. Having it as either a local variable (which is what it is at the moment) or an instance field (ie you move it out of Main, but don't mark it as static) can lead to the same problem. EG if you have a class where each instance makes its own Random, if you ever make multiple instances of your class in a tight loop, you'll get multiple instances of the class with separate Randoms initialised with the same seed - and so you'll get identical results out of them. If you make it a static member, there is only one Random shared between all instances of the class. Or you can make it a public static member of some utility class, and just share one Random around the whole program - though the benefit of that is small to the point of irrelevance. The main thing is to avoid any chance of a situation where you're declaring and using new instances of Random to do the same task in a tight loop. Always having your Random as static achieves that.
&gt; UWP sucks How so? I've only done some basic things like this https://docs.microsoft.com/en-us/windows/uwp/get-started/display-customers-in-list-learning-track Seemed a lot like WPF, but a bit better with binding. Its been years since I've done toy WPF programs though. At work Im stuck with a huge WinForms monstrosity though lol
&gt;write our API using C#, but use Swashbuckle to generate the Swagger style docs, which works well for us. I should have mentioned that I'm doing that. I'm just having some issues getting the UI to represent the actual services as I see it. I did a fair bit of WCF years ago and I don't recall having the same issues with WSDL although we did have some minor issues with enums in v1 
Someone already explained to me and I didn't realize that rolling three dice in a role resulted in a normal distribution, I thought both methods resulted in a uniform distribution. Simple mistake that easily remedied with a link to the solution and data indicating I was mistaken.
I ran into this same issue at work, and in short it isn't possible to change this behavior. The reason it doesn't change in swashbuckle is actually for to got model binding in ASP.NET core works. The model validation is run after the request body is deserialized, and the validation has no way of knowing if the property was ommited and the default value for the type was used, or if the default value for the type was passed as a parameter. Because if this, for non-nullable types the model validation doesn't matter it as required, regardless of if it had the required attribute on it at all.
Sure... So... you are using D&amp;D die notation. nDx meaning sum the results of n rolls of an x sided die. This is a perfect place to use a function. int Roll(int count, int side) //Method signiture, indicates we are creating a new function called "Roll" which will accept two integer parameters and return an integer value. { int tot=0; //All summations start at 0 for(int i=0;i&lt;count;i++) //Execute a loop count number of times. { tot+=rnd.Next(Sides)+1; //Add the value of this roll to the total summation (rnd.Next(x)) return a value from 0 to x-1 so add 1 to make it from 1 to x (like a die). } return tot;//return the sum of all the die rolls. } So, when you are in your program and you need a die to be rolled... //if you want to roll 1d100 var Val=Roll(1,100); //if you want to roll 3d6 var val=Roll(3,6); And lines like this: dayList.Add($"{(d6)+(d6x2)+(d6x3)} Barovian commoners!"); can be written dayList.Add($"{Roll(3,6)} Barovian commoners!"); Since you never actually use the value outside of those strings... you don't need to explicitly store them as a variable. 
Hey, can you explain why it's moving to Xamarin? I've been learning Xamarin Forms and didn't realize that it's becoming more popular.
Neo4j
[Naw daug... Did I pull that off? I think I pulled that off, mama will be so delighted!](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/) Sorry, just watched Family Guy :) They're bringing XAML based tech to .NET Core next year. I'm still saying XAML based tech, because I sort of expect it to not support all of WPF or even all of Silverlight or UWP, but it's coming :) 
I read stuff about that in the docs, but I want the UI to show it (document it) as required. I actually have a custom required attribute that requires a non-default value so that enums don't send zero and guids aren't Guid.Empty. The code I posted uses the metadata to look for required attributes and adds them if they are not there. It would be nice if I could get the Swagger UI to says "Requires non default value" but showing as required is good enough for now. 
I saw a project at work last week that used Swagger, but it was literally just a reference. For the uninitiated, what does it do? (In like 5 sentences or less :) )
It reads the metadata and generates a json to describe your services and has a UI that reads the json (or yaml) to produce a basic UI you can use to interact with the service. There seem to be multiple generators. UI Example on the right: https://editor.swagger.io/ 
Remember that learning starts slowly and gets faster the more you stick with it. Everything is baffling at first, and everything becomes clearer if you believe in yourself and stick with it. And ask for help when you get stuck, but always try and solve the problem first so you have specifics when you ask. That's pretty much all you need :) 
I personally talked to maybe 5 very professional developers that worked a lot with UWP and had some pretty bad things to say. Things like missing functionality and the need difficult workarounds to make simple things work. Besides, you can look at the market - Not much serious projects are done with UWP.
It does work, BWT doesn't actually compress, it transforms the text into a more compressible form. The contents of buffer_out is more compressible than the contents of buffer_in.
GraphQL perhaps? I haven’t used it in C# myself, but have in JavaScript. Maybe it is worth looking at. 👍🏻 https://github.com/graphql-dotnet/graphql-dotnet
Negative, 0, and positive-valued enums are all valid.
I can't. I was just intrigued why others thought it was bad.
But that's Win32 XAML that uses .net runtime, it will not run on Linux, because WPF and XAML *heavily* rely on Windows components (DirectX and DWM) What this announcement means is that you can use .net core as runtime for Win32 applications instead of .net framework. Nowhere in that link it mentions cross-platform XAML.
If preferring C# to Go is wrong, I don't wanna be right 👌
I know, but I have a Unspecified = 0 in some enums so I can prevent using default with a validation attribute. 
Uhm given how many are *more* likely to click on NSFW tags despite being at work and how often it is sarcastically added as a joke, I would put [NSFW] in next to the link in the text, just to be safe. I was pretty close to clicking it, assuming it was a joke
We found that it was hard to get it right with authorization, and we have a pretty customized output formatting system, so we switched to just manually writing it out. It also helps us reason about our APIs before we create them. I also don't like how, to get it right, you basically have to sprinkle special attributes all over your models. I'm keeping an eye on OpenAPI.net, though - https://github.com/Microsoft/OpenAPI.NET
Many Wall street firms in NYC are looking for good (.NET/WPF + MSSQL + Angular) developers because they want new apps in the browser but older apps are going to be in use for years and they need support and new features. One specific skill is very valuable: multitreaded/concurrent programming in C#.
For auth, I just used AddSecurityDefinition and AddSecurityRequirement, a couple methods (login) don't require auth but its ok for now. What are the attributes that you sprinkle on? Is the number of attributes related to manually writing it out? Is that project going to be a full replacement for Swashbuckle?
Huh. Yeah, maybe... https://github.com/aspnet/Blazor/wiki/FAQ
My initial thoughts are something like the following: * Compress to a GZip stream (array of bytes) * Encode the stream contents as Base64 (back to ASCII) Unfortunately, Base64 will increase the size. Depending on the size of the original and how well it compresses, it may actually end up bigger than the original. (for example, small input - less than 50-100 bytes or so? - or input that is too random/varied to compress decently)
Maybe due to UWP bashing without actually knowing what the full stack looks like? If being about W8.1 is a problem, here is the updated documentation for WebApps on Windows 10 UWP model. https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps 
I’ve used Nswag studio in the past. I have to say though. If you use it to create the client code too, the code it writes isn’t very good. For example it creates HTTP clients all over the shop as opposed to reusing and existing static one which, as we all know, can end up with connections being refused due to port usage and shit. Swagger is the bomb though. 
I've implemented a 10K LOC API project recently. I've picked NSwag over Swashbuckle since I liked it better. Had to do some fixes for NSwag, but overall it was a blast.
wow this is really cool. I knew there had to be a better way to do it, but I just hadn't encountered the phrasing you presented. Thanks alot!!
Sorry if I came off callous or something, I definitely didn't mean to. I am replying to these messages from my inbox so I didn't see if someone else had replied to you! But I was just explaining the math behind it, or trying to at least. I definitely meant no offense!
That makes a lot of sense. I'll move it out to be a static member, just to start setting the habit. If I understand you right, I should get the same results this way for this specific code anyways, correct?
That's something completely different. A Graph DB deals with how you store the data. GraphQL is a way of querying it using REST calls.
Have you looked at SQL Server? It has GraphDB support now and while I haven't actually used it, the docs seem pretty straight forward.
Thanks for the information, that is very helpful. 
Thank you, I've basically ended up with this... nothing saving a ton, but I save a bit.
Look to the ILogger example and do it with the old style. With DIM you can do the same example but with less code without any side effects on the readability and still the code still clean. 1) first reason to use it in some use cases "Less Code" and the second point if the want to add a new generic method to your contract/interface. In the past you have to implemented in all classes! 
I'm actually toying with the idea of creating a fixed-function 3D rendering lib for .NET Standard after I finish patching my game. It would essentially try to be a really simple way of getting up-and-running with a modern PBR renderer. Then again, I'm not sure what the demand would be, and I'm also working full time already and it's not exactly a simple thing to create and maintain. Still. 🤔
Everyone is moving away from Desktop. They are still out there, but, for example, I was just offered a project doing WPF. However this was only to help the transitioning to web. Spend some time playing around with the js front end frameworks and see if you like any: react, angular, ember (others probably have more)
The logger example is a textbook example of what should be implemented as an abstract base class. Making it an interface instead of an abstract class unnecessarily limits your future options (e.g. no fields) without any corresponding benefit. 
Every technique has a good side and a dark side grauenwolf talk about Extension methods. Extention Methods has also a dark side and should be used in wisely way: [https://daedtech.com/why-i-dont-like-c-extension-methods/](https://daedtech.com/why-i-dont-like-c-extension-methods/) DIM is very useful in some use cases and it is designed to avoid the common multi inheritance problems (no access to object state ,etc).
Not really. 100mb for slack or 200mb for vscode is nothing.
WPF + PRISM (MVVM) + Rx 
&gt; With a doctorate in philosophy and computer science ha-ha-ha-ha-ha-ha-ha
&gt; Any data required by the job is not passed in via Quartz, but obtained via other methods such as database queries or web calls. That doesn't help if I want contextual job information. As an arbitrary sample case, 'Generate an e-mail for customer 4512 after 10:00pm'. Sure, I could write a queue to put all of my pending emails somewhere, and write an `IJob` that executes at a given interval to pull things from the queue table... but at that point I'm having to write extra queue tables for each different type of Job that I'd want to schedule in the future. &gt; I would recommend keeping quartz, but change how you use it. It does support clustering and you can even chain jobs, so it would behave similar to Queuing. If you have any specific questions feel free to PM me. As mentioned above, we're still going to use Quartz in a way similar to what you describe (we don't have any UI around it, but the jobs are ones that typically operate around either a DB Table with queued data or file-based queues). (opinionated statement) I'm personally against the idea of `JobChainingJobListener` for most job chaining. Having to write extra boilerplate (i.e. IJob adapters for all the things!) is a gripe about time consumption. `JobChainingJobListener` is something that starts splattering business rules and design into layers it shouldn't live in, and in fact makes a design dependent on Quartz. (If I wanted to chain in Quartz, I'd rather have my chaining rules within the `IJob` and just write all the necessary boilerplate to pass params to the success/failure calls). Note: I do provide the ability in my library to do 'something' when: - A Job succeeds - A Job Fails, - A job is put into Retry, - There is a Queue-stall due to executing jobs taking a long time. The idea for these overrides is *not* to put direct business logic in them (although I suppose you could). The idea is to put some sort of notification/warning hook in as desired.
&gt; With stateless static methods, you can’t inherit base classes or implement interfaces to take advantage of polymorphism. What that article misses is the .Count/ICollection.Count design pattern where in you can add polymorphism to an extension method using an optional interface. 
I use Swashbuckle and have found very little to complain about. The Swagger UI page is a great tool for less-technical QA folk. 
I've been using Swashbuckle and am curious why you preferred NSwag?
I've wanted to build something like that for a while, too. I've never had the time to start it myself, but this could be a good collaboration opportunity if there's other folks interested in the same thing. I've made small helper libraries for debugging, etc. but they've always been hacked up and specialized. Something general purpose would be awesome.
I've been toying with a few ideas on how to revive (in spirit) [Code Contracts](https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/code-contracts). 
Yes, for this code either way will be the same.
You're doing way more in this code than you need to. First, you have two separate tasks to look into: 1. the installation of your service (so you can start and stop with the Windows Services manager) 2. implementing and running the service And these two things shoudn't be done in the same class. For service installation, either build an installer, [use `sc` or use `InstallUtil`](https://stackoverflow.com/questions/8164859/install-a-windows-service-using-a-windows-command-prompt#8165122). As far as implementing, goes, throw out your extra code in your `ServiceBase` subclass (`MyNewService`) and go minimal first. Save it elsewhere for later, but in your first implementation, don't get too complex. 1. It needs to override `OnStart` and `OnStop` at a minimum. That will determine what happens when you start and stop your service from the service manager. 2. Service executables are expected to call `ServiceBase.Run` somewhere from their main method. So you'll instantiate your class that inherits from `ServiceBase` there (`MyNewService`) and pass it in to `ServiceBase.Run`. 3. Your service may be one that runs and terminates, one that stays handling to process work. That'll determine what you do in OnStart and OnStop. But, honestly, if you're not going to have a long-running service, you'd be better of making a small CLI app and starting it manually or through a scheduled task. As others have said, you're not going to get a GUI with a service. Microsoft was concerned about malware messing with users, so they made it that services couldn't interact with the user session a long time ago (as of Vista, I think). If you need a GUI, then you'll have to make an API that GUI clients can call into. Good luck if you're trying that, as it's not an easy thing to do, and way out of scope for this sort of question. Also, I'd recommend not trying to create a new `EventLog` in your installer startup. That requires a decent level of permissions which the user running your service may or may not have. Create it in the installer (Wix has a task for it), or in a separate place called with high credentials. To recap, bare minimum for implementing a windows service using `System.ServiceProcess.ServiceBase` is to inherit a class from `ServiceBase` and then: 1. Set your `ServiceName` in the constructor. 2. Override `OnStart` to put your service setup in there. 3. Override `OnStop` to put your service cleanup in there. 4. Instantiate your inherited class in your executable's main method and use `ServiceBase.Run` to pass it in. 5. Either do your work in `OnStart`, or start a message/event loop to periodically check for new work. The Visual Studio GUI does a lot of this for you. One problem you might see with this is that you won't be able to debug your service in Visual Studio without installing it and connecting to it, as you can't start a service from within VS to debug. So I'll also generally check `Environment.UserInteractive` in my main method to see if I'm running as a service or not when I'm in debug configuration. Then I can start as a normal process or as a service. You put your init code in a separate method that's called either from `ServiceBase.OnStart` or from the interactive part of `main`. As others have stated, `TopShelf` will do a lot of this nonsense with `ServiceBase` for you if you [learn how to use the library](https://topshelf.readthedocs.io/en/latest/configuration/quickstart.html). Figure out how you're going to process your data first. Only after that's nailed down should you worry about the service side of things. And mostly as a way to start your application and keep it running in the background.
Also, manual service installation should not be your approach if you're redistributing this. If you're building a Wix installer, the `ServiceInstall` class/element is for installing the service, and the `ServiceControl`class/element is for starting/stopping it in installer. Example: `&lt;ServiceInstall Id="BestService" Type="ownProcess" Vital="yes" Name="BestService" DisplayName="Best Service" Description="This service is the best." Start="auto" Account="NT AUTHORITY\NETWORK SERVICE" ErrorControl="ignore" Interactive="no" /&gt;` to install and `&lt;ServiceControl Id="StartBestService" Start="install" Stop="both" Remove="uninstall" Name="BestService" Wait="yes" /&gt;` to start it. This would of course be nested in your `Component` for the service, and would be a sibling element to the `File` element. Building wix installers, though, might take a lot of effort and manual/forum perusing. I hear a lot of people newer to it prefer [Wix#](https://github.com/oleg-shilo/wixsharp).
We use Swashbuckle to generate a Swagger spec for a Web API project (write-up [here](https://blog.uship.com/shipping-code/from-zero-to-swagger-retrofitting-an-existing-rest-api-to-an-api-specification-using-swagger/)). Unless you're writing a very small number of simple APIs, it should be expected that you're going to write custom override filters. Your post from earlier had one of those custom filter thingies. We have about 20 of those that modify various parts of the Swagger document A small sample of what some do: - We use FluentValidation in some places, and didn't want to combine that with the SCMDA attributes (e.g Required), so had to make custom documentation-only attributes and respect those - Use custom reflection to generate polymorphic DTOs (since Swashbuckle couldn't handle this) - Remove .NET types from definitions (e.g. OData model binding) - Fixes for various bugs in Swashbuckle I found (I think I opened GitHub issues for some of them) I actually did have issues with enums too! I chose to represent enum values as strings (again, using a filter). Our API has enum values that change over time, so we have lookup resources that return all of them that our apps display (e.g. when the customer is selecting a service type). My conclusion was that Swashbuckle is a great place to start, but any usage on a large set of complicated APIs (we have hundreds if you include internal APIs, which are also documented via Swagger) requires lots of customization. I've also learned from retrofitting an existing large API is to utilize Swagger during design-time. I actually today published [a GitHub repo](https://github.com/ivanmartinvalle/SwaggerDSL) to make this process easier for me, especially since I can't use Swashbuckle on some Node APIs I am writing.
Some background on your experience level with programming in general would be helpful. Also, not everybody learns in the same way. My suggestion is to start as simple as possible (e.g. console apps instead of web apps) and find places where you can copy and paste code hunks and put them together yourself to see how things interact.
I find it to be pretty confusing, especially when it comes to older versions or mixing versions with .net core. Also, I still haven't figured out how to properly build in custom authentication yet.
It's been plug and play with my corporate, Windows auth services at work. A true troubleshooting and testing life-saver. However, for my token based home projects, I've yet to spend the time to get the auth working for swagger. So, limited benefit there so far, although I'm sure that's just my lack of knowledge.
After reading some of the other comments, I feel like I should clarify that we are not using swagger as a strict documentation tool. I would expect much more time investment if that were the case.
LZMA is a pretty good algorithm for this and im pretty sure outperforms gzip as far as compression ratio goes, 7zip uses it, but its been awhile since ive used it in C# and cant recommend a specific library.
Given today's Supreme Court ruling - one that will tell me how much sales tax to charge someone in Lawrence Kansas. 
Im not sure I would say legacy, they are still very much actively developed, new and old. Thats not legacy in my opinion. Business applications are probably the biggest driver of that and supporting the actual legacy applications. But yeah, there is much more development and job openings for web/mobile work, no question there.
Thats just plain wrong. Desktop development, while definitely declining, is still huge, mostly for enterprise as you implied. For newer developers and newer projects I mean I agree that web work is more where its at, but its definitely not the best case for everything, and definitely not going to go away entirely anytime soon.
What happened? Googling "Supreme court Lawrence Kansas" reveals the Lawrence v Texas sodomy law ruling and something about unlicensed lawyers being able to work in Kansas.
What about yEncoding the compressed text? It's what newsgroups use. 1 to 2% increase in size.
&gt;WPF &gt; &gt;Fast I didn't realise I was on r/funny. The WPF designer loads slower than VS itself and you bet your ass I'm not fucking around manually typing out XAML when the UI is unimportant to the project.
Word
Why do you need to compress to ASCII?
Yep, unfortunately mobile is being prioritised now. I fucking hate developing for mobile. Objectively inferior platform in every single way except portability, which IMO is **not** worth the trade-off.
&gt; I'm not really sure what's emerging as the next de facto option there Big text files .split() by newline into large arrays that are then for-each'd over until the desired record has been found. I heard it's the next big thing.
&gt; WinForms installation I don't think that is a thing. 
If you cant handle me when I dont have generics, you dont deserve me when I run managed code.
This is a better explanation of why that happens but I think that is what he meant by never returning, as the UI thread cannot produce the result while blocked.
&gt; it's basically still limited to the c-drive Nope, you can select secondary drives in the installer and it works fine.
It's a text editor with IntelliSense crammed in. It's fine for things like HTML, JS and others but not for C#.
I agree. Desktop work is maintenance work, not new app development for the most part unless the company has a lot invested in desktop development technologies already.
To squeeze out a little more performance, you could use [ascii85](https://en.wikipedia.org/wiki/Ascii85) instead of base64.
Good question and answers. I'm currently looking for a job and I rarely see desktop app development. You should really focus on ASP.Net MVC, WebApi, .Net Core and JS UI frameworks (React ?). Also SQL, T-SQL and MongoDB are probably going to be around forever. The one best advice I can give you is to build a portfolio. Polish the school projects and create personnal projects to have a sexy Github page. OSS is the future.
Chiming in for MVVM Light. Used it for years in silver light, WPF and Xamarin. It’s the shit. 
I have Xamarin on my CV and get SO MANY calls from recruiters. I don’t particularly enjoy doing Xamarin so always turn them down but people are desperate for Xamarin developers of all sorts. Forms is big now too. 
That’s just not true at all. If you wire it up properly you even get design time data. It’s awesome. 
This is probably not a great idea but I would think there would be a way to implement some sort of spin lock or similar mechanism, when in a STA apartment, when Result is accessed to avoid this, but honestly I havent fully looked at the generated code from async/await and not entirely sure how the signaling is done. Im sure that has bigger ramifications than what ive thought of though.
I'm confused though... whats ascii got to do with the whole thing? Ascii is an interpretation of a set of bits... so take what ever ascii that you want to compress... convert it to an array of bytes, compress the array of bytes, read the output as ascii...
It's more than that though. It has an the ability to do integrated debugging, and plenty of extensions. It's my go to ide for Linux systems.
NLog is another that is solid and has the same capability.
Someone needed to say it.
Enterprise will still use Winforms, but seriously branch out into MVC stuff and ASP
a lot of that can be done with analyzers right? or are you talking about putting in an attribute that triggers some il rewriting? 
Generally waiting in a web server is an antibiotic pattern. Is there a reason you want to purposefully slow things down?
The request will be blocked if i send more than one. I need to send the request separately a few seconds apart.
Whether it's done by IL rewriting or some sort of dynamic proxy like the ones that a handful of DI libraries provide, the end goal is to be able to decorate types with preconditions validations and post condition checks. While contracts could probably be pitted against one another to get some static analysis gains, I think most of it would have to be runtime.
Newbie question, why pick WPF over UWP? I thought UWP was the recommended way to build modern C# desktop apps.
It said Windows Forms, it is Windows 10 so I figured it just wasn't built-in anymore. I could be wrong though.
Geez some of those advertisements are pretty explicit.. 
Because tasks, events, and lambda expressions are all related! /s At least they used Oxford commas.
UWP is win10 only.
Swashbuckle is great. No complaints. Enum support is pretty weak in Swagger 2.0 and still hacky in 3.0. Swashbuckle did not support it the last time I looked and all clients at this time are all still stuck on 2.0 so no proper enums for me. My solution for enum fields is to treat them as ints. I also use custom filter that adds enum descriptions using reflection and DocXml nuget to get XML documentation of enum values. Not the best solution but it works for me.
I could be mixing stuff but MS is working hard to keep me confused :)
So what your telling me is that, if I can handle stupid shit in my code, I should be able to handle stupid Shit in ads? Preposterous, I'll take a face full of REGEX before a face full of ads. =) 
uBlock origin. I don't see ads.
I’m a former Swashbuckle/Swagger/OAS user, but have switched to using RAML. As a practice, RAML lends itself more to “design first” whereas Seashbuckle/Swagger are “implementation first”. I have started writing my RAML before implementing a single line of code and it saves me LOADS of time.
I use NSwag for swagger generation. It can target swagger 3 and redoc, it’s toolchain supports ask generation and I’ve integrated it with OAUth through JWT tokens with minimal effort. Swashbuckle is good but feels anemic in comparison.
My face: 🤔
client.DefaultRequestHeaders.Add("Accept-Language", "en-US;q=1, en;q=0.9"); works for me without it adding spaces.
Using netcore or netframework? 
Yeah this thread really opened my eyes to the posibilities and the current trends and options in the industry. I will be definetely checking MVC, .Nect Core and UI frameworks. I looked up React and im really starting to love that thing. A lot to learn and explore. Thanks for your input!
What the fuck is this post even supposed to be trying to say? What is going on in this subreddit lately...
netcore 2.1 and yes, it arrives the way I set it above. Looking at the corefx code, the only place it hard codes a space is after the ":" in the key/value pair on line 876 and 884 https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.EasyRequest.cs Unless I'm somehow completely missing something. If you see where it's doing what you're saying you can always create an issue and/or fix it in a pull request.
You can develop for android via Xamarin. I don't know what you mean by "from scratch".
Then I have good news for you: Multiple inheritance will still not be possible, even with DIM.
 TimeSpan oneSecond = TimeSpan.FromSeconds(1); var numbers = new int[] { 23, 27, 28, 33, 42, ... }; StopSwatch limiter = StopWatch.StartNew(); foreach (var num in numbers) { await DoRequest(num); TimeSpan timeDiff = oneSecond - limiter.Elapsed; if (timeDiff.TotalMilliseconds &gt;= 0) { await Task.Delay(timeDiff.TotalMilliseconds); // Thread.Sleep(timeDiff.TotalMilliseconds); // if you're not using async } // else the previous request took longer than one second, so no need to delay limiter.Reset(); } This is, of course, completely untested. Note that this will restrict you to one request per second, but will not make up for lost time if the system is responding slowly. You'll want to add try/catch to handle transient errors, log so you know which numbers failed, and also do limited retries for "transient" errors like 500 Internal Server Error. A fancier version would use a Timer. I think that's overkill for this.
Blocked if you send more than one at a time, or blocked if you send more than 1 per second? Because those are different problems. Also, even if your method only sends one, are you sure than nobody is calling your method multiple times? For example, if you are doing this in a web server, a user could hit the Submit button twice or you could have two users using it at the same time.
There quite a few BUILD 2018 talks about it.
Accept-Language is saved into a StringWithQualityHeaderValue object which when rendered to a string introduces the space. https://github.com/dotnet/corefx/blob/0d77b6d9ed1098009641c473fc46ce5c586be877/src/System.Net.Http/src/System/Net/Http/Headers/StringWithQualityHeaderValue.cs#L61 Looking through the source, there doesn't seem to be any way to override this behaviour.
if you use reddit mobile app and you're a C# expert, then you'll know it 😉
Oohh I cannot make it run, without learning Xamarin.
... But these are things you should definitely use :(
I will add this info!
I have reddit gold I see no ads... 
Applied to your dream companies already? Try our multiple-choice coding &amp; system design questions and find 5-10 more that our data predicts you'll love. Identifying programmer strengths is our core competency. Try our multiple-choice coding &amp; system design questions to see how we use data to match promising talent to job opportunities. The hiring process is a Bayesian classification problem. Use our trained models to find companies where you're most likely to get offers. I get that staffing is a huge business and good developers are hard to find and companies are eager to pay staffers tens of thousands per client, but goddamn could you show me something else. A dozen of page refreshers and half of the ads per page are tech staffing.
I think it was the MUCH better internal implementation, better extensibility API, better developer response, and more features out of the box even though I didn't end up using some of them.
With Xamarin you code in C# and you can use Forms similar to Windows Forms and WPF. Just lool around at their webpage, they have good beginner tutorials.
Use mine :) https://github.com/adamhathcock/sharpcompress
I'm not even sure what a uBlock Origin web looks like :) I'm not sure I like the idea of ads!
You're right, and now I can't find the original details. My guess is that everyone assumed it would be cross platform before the Build announcement. Oh well, doesn't affect me too much, but I was also quite looking forward to a cross platform XAML based solution for other platforms (That isn't avalonia). It just seems like such an obvious option. Perhaps they'll buy Avalonia.
Cool thanks, I could have googled it, but it's easier to get a summary from a user plus it means that summary is here for everyone :) Thanks :)
What's even more sad is that the "quiz" is literally just one question that asks you to choose what the benefits of "caching" is, lol.
you're hired sign here
&gt;no im not agree with that! 'Thank your for your replay! The benefit less code and you do not need the base abstract class and the inheritances form the base class and I hope that you do not also need fields in the future (Separation the behaviours is a nobel goal) if you must do that you are still able to make the core method as abstract within the base abstract class which contains the fields(state)'
I l'm in no way an expert and i still see it, i think it's got to do with my search history and apps installed 🤔
Except that's the space it takes on disk, maybe. Try 5-10 times that for memory. And now imagine if every desktop app was in electron, starting at some 100-200 MB for "Hello World".
Agree. Very impressed with Xamarin, very competent, very able.
I believe one of those is what you are looking for: [ImGui.net](https://github.com/mellinoe/ImGui.NET) [monogame core](https://github.com/cra0zy/MonoGame/tree/core) [Veldrid](https://github.com/mellinoe/veldrid)
Almost skipped also. Something was different about this one... OP got my click :(
eli5 this post
Get Firefox for mobile, install unlock origin, live the dream.
I've used sharpcompress before. Its so good :)
/r/titlegore ...
More than one per second. I plan to use this without a user interface and run on a schedule(omce daily).
Removed: Rule 4.
There's nothing to debug afaik - it's the same as running the uwp app full screen. Don't get the wrong idea btw, not saying you should use it. Just curious if you'd heard of it or tried it out since i have no reason to use it myself.
Have config.js be rendered dynamically on the server with each request
I guess that means me then https://imgur.com/gallery/ZEDgZg3
That's not how it works. At all. You develop your regular windowed UWP app and debug it as usual. Then when you deploy, you configure *Windows User* to be a kiosk-mode user for this particular app.
Ads? I don't see any ads . . . 
The notion "application should not control it's window" comes from user convenience - no more blocking popups, always working close and minimize buttons that behave in predictable manner, no way to block the desktop with fullscreen app that user can't close, etc.
Implement the controls as DataTemplates for a Videoplayer Item. Then just repeately add a Videoplayer to the DropTarget.
The attributes are for marking properties as required, validation rules, etc. I should also note we don't use swagger/OpenAPI for the interactive "try it out" feature, we use it for docs for consumers of our APIs from other groups in our org. For auth, we needed more info than the tools provided, as we have an extra level of auth than just the simple role based auth supported. Roles allow you to use an endpoint, but there are other auth rules for what data you can retrieve from that endpoint.
Thanks!
Ever taken a look at how [Dragablz](https://github.com/ButchersBoy/Dragablz) is implemented?
I think some of the tutorials on Microsoft’s virtual labs spin up instances of visual studio if you just want to exercise your coding. https://www.microsoft.com/handsonlabs/SelfPacedLabs
I wouldn't recommend Neo if you're worried about cost, it can be even more expensive than SQL Server. I've personally had a good experience with OrientDB. 
How will I know if everything lines up correctly without the close buttons in place? You're saying I'd develop the entire time without seeing what it looks like in full screen mode? What if I deploy and realize that I'm off a few pixels now that the buttons are gone?
Set [PrefferedLaunchWindowingMode](https://docs.microsoft.com/en-us/uwp/api/windows.ui.viewmanagement.applicationview.preferredlaunchwindowingmode) and your app will launch fullscreen with automatically hidden close button. 
Warning, async void is a huge code smell and can cause really hard to debug issues. For example, if code within your async void function throws an exception, it will crash the CLR. 
I'm developing a kiosk application that runs on a vertical monitor. It sucks that I have to move the window to the vertical monitor and try to make it full screen every time I want to debug this application. In WPF, I could query the screen sizes, find the vertical one, and progammatically move it to the window. Not being able to move the windows makes this a lot more annoying.
Yeah, that annoying and should be a setting in Visual Studio. That will solve the use-case. But giving app permissions to freely move itself on the screen is giving app more permissions that is needed.
I disagree with the down votes, but I also disagree with you. Have you tried visual studio 2017 without large plug-ins like ReSharper? It's very fast for me. Fast to startup, fast to navigate, very snappy. However, I have a performance model surface book 2. What specs of machine are you using? 
This is the kind of problem reactive programming solves very cleanly and concisely. In the example below, I've modified the signature of Execute to accept an int parameter2, but you don't have to. public void DoStuff() { const int delayInSeconds = 1; var data = new[] { 23, 27, 28, 33 }; Observable .Interval(TimeSpan.FromSeconds(delayInSeconds)) .Zip(data.ToObservable(), (_, parameter2) =&gt; parameter2) .Do(Execute) .Wait(); } public void Execute(int p) { // your code here }
Probably: [16 GB for 32-bit OS 20 GB for 64-bit OS ](https://www.microsoft.com/en-us/windows/windows-10-specifications) [Hard disk space: up to 130 GB of available space, depending on features installed; typical installations require 20-50 GB of free space.](https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2017-system-requirements-vs#visual-studio-2017-system-requirements) 
No you wouldn't? You realize those ads are location based? Most people see different ads then you because they are in different parts of the world...
Someone is annoyed at an ad he get's shown frequently, tries to mock it with a terrible headline and expects everyone to get it. The thing is though, ads on Reddit are location-based so almost nobody gets the same ads as OP.
I was so pissed seeing this title here without a 'sponsored' tag, until I read to the end. These ads need to stop. People may read Reddit from work, but who job hunts while reading Reddit at work? I feel like that's one layer too many.
They pay better for this type of ads, con of this is that I can't adverise my app on facebook nor google adwords, so it's kinda unreachable for people since they didn't hear about it in any way ://
Those adds never mention good architecture; which is equally as important as any of those individual components.
I get them and they're annoying.
&gt; If I can't fix this in C#, I may have to use another language for this project. Using another language is a drastic step. So what exactly needs "fixing" ? You seem to be saying that the extra space is a problem. You suggest (but don't say) that something breaks when the space is present. What breaks? If it's the server that can't parse the header with a space then either 1) you have a crappy server that needs to be a bit more flexible or 2) (Very unlikley) Netcore http sends headers that are not to spec, in which case it's a bug that needs to be reported. OK, sometimes you need to be bug-for-bug compatible with crappy software on the other end which you can't change, but if that's the case you don't say it.
Reddit is fun 4 life
Thanks, that's very helpful.
Has Jon Skeet given permission for his content to be rehosted on this site?
According to the spec the whitespace is optional. `weight = OWS ";" OWS "q=" qvalue` `OWS` means optional whitespace. So what httpclient doing is correct even if it is not needed.
I'm interested to collaborate in something like this. I'm working at the moment in a CVS library, I know exist other one, but is a way to challenge myself, and I'm doing it when I have free time at the office. which means a commit per month :'( So if somethings cames up here, I will be happy to help on my free time :D
Yes. It’s enough space. Windows = 25gb (ish) Visual Studio = 12 to 45gb (45 if you install the iOS, Android, and other dev kits).
Pluralsight is in my opinion by far the best resource when it comes to learning, especially for C#. Have you tried using that paths functionality? There is one specifically for C# which goes from beginner to expert.
I havent, it was quite a while back when i used it, ill try it again
Well it is but you'll probably need a little more this will fill up quickly with plugins updates and tools
I agree, however, I don't have control over the server.
In an android phone, install firefox mobile and add ublock origin extension to it. Set firefox as your default browser. So many websites that are cancer on mobile no longer have massive redirect and/or pop up power now it's scary. That said I use bacon reader instead of reddit's mobile app and don't see continuous ads in the feeds.
Its 50mb for hello world. And its a blessing, because you dont need to rely on user to have installed proper runtime. It just works. Where for example in Java developers have to force clients to update JRE. Initial size is bigger, but it grows very slow, as usual with apps.
Yeah, it's easily enough.
It's not. In WPF async void is documented use case.
Current Code below. Excuse the mess I am lost here. I am unsure how or what to cal to replace the the Location within the Soap Request with "Var Gen" public void DoStuff() { const int delayInSeconds = 1; var Gen = new[] { "ONE.AT_1", "ONE.AT_2", "ONE.AT_2_3", "ONE.CC.MO_C1", "ONE.CC.MO_C2" }; Observable .Interval(TimeSpan.FromSeconds(delayInSeconds)) .Zip(data.ToObservable(), (_, ?????????) =&gt; ???????) .Do(Execute) .Wait(); } public void Execute(???) { // your code here } HttpWebRequest request = CreateWebRequest(); XmlDocument soapEnvelopeXml = new XmlDocument(); soapEnvelopeXml.LoadXml(@"&lt;?xml version=""1.0"" encoding=""utf-8""?&gt; &lt;soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" &lt;soap:Header/&gt; &lt;soap:Body&gt; &lt;QueryRequest xmlns=""http://ABC.midwest.org/Some/xml""&gt; &lt;QueryAssignment location = "Gen" market = "Both" day = {2018-06-21} type = All &gt; &lt;/QueryAssignment&gt; &lt;/ QueryRequest&gt; &lt;/ soap:Body &gt; &lt;/ soap:Envelope&gt;"); using (Stream stream = request.GetRequestStream()) { soapEnvelopeXml.Save(stream); } using (WebResponse response = request.GetResponse()) { using (StreamReader rd = new StreamReader(response.GetResponseStream())) { string soapResult = rd.ReadToEnd(); Console.WriteLine(soapResult); } } } /// &lt;summary&gt; /// Create a soap webrequest to [Url] /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public HttpWebRequest CreateWebRequest() { HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(@"http://ABC.midwest.org/Some/xml"); webRequest.Headers.Add(@"SOAP:Action"); webRequest.ContentType = "text/xml;charset=\"utf-8\""; webRequest.Accept = "text/xml"; webRequest.Method = "POST"; return webRequest; } } } 
It’s a reference to an ad.
Clearly plenty of people understood
Removed: Rule 7.
So you're saying that it is a ~crappy~ non-compliant server rejecting it because of the extra space?
No. Depends what you install. VS 17 has many different features that can be installed. Windows takes its own amount of space as well. You probably **could** but I wouldn't attempt that myself. I just wouldn't want that.
How did I miss this when creating my Drag &amp; Drop tab window project. Brilliant, thanks.
I'm just sat here like "You mean reddit has ads? Since when?".
You guys are ads? Reddit has ads? Guess I should be thankful I don’t know that yet. 
Yeah, without any problem. My C drive is 120GB for Windows + VS + every other crap I normally install on C and still have 15GB free space.
Once the Windows updates start arriving, disk space gets eaten up quickly. 120 might be ok if that's the *only* thing going on. No gaming. You'd have to clear the browser cache frequently. No local music to code by. I'd consider a 256 as a minimum viable machine.
And to be relatively safe, we can tack on an extra 40GB for toolong, SDKs, etc. In a worst-case scenario, that puts the total at 110GB so it is still under 120GB.
Its more than enough.
Yes, it is enough, in the same way that you could raise a family of six in an 800 ft² apartment, but would you want to? Probably not. For a functional system with enough room beyond the basics, I would recommend 256Gb as minimum. Using a 128Gb drive is possible, but you will be constantly pruning what you have on the drive, juggling your data to ensure you have enough free space to continue working. Because there will *always* be secondary programs and data that you need to have on the system, to say nothing of the WinSXS folder (which is a required folder but can balloon in size alarmingly fast). TL;DR: a 128Gb SSD is “possible”, but highly likely to be extremely frustrating in its limitations. Go with a 256Gb and you’ll have enough for most situations.
The first bit is paraphrasing the advert, sure, but it doesn't have any quotation marks and then it leads straight into confusingly written English. And the typo was a little confusing for a moment. Definite /r/titlegore.
Will you be installing SQL Server as well? If so, how big will your databases be? How big is your code base? You probably can get away with 120GB, but it doesn't give much wiggle room.
&gt; you do not need the base abstract class But with this change, the `interface` is basically redefined to mean `abstract base class without fields`. 
This guy gets it.
I work for Zoho Writer and happy to answer any questions that you have w.r.t integrating Writer editor in your web app. Alternatively, you can reach us at ["support@zohoofficeapi.com](mailto:"support@zohoofficeapi.com)" with your Zoho Writer integration-related feedback. We will be glad to assist you further with the integration. Thank you! [https://zoho.com/officeapi](https://zoho.com/officeapi) 
&gt;You guys are ads? Reddit has ads? What? Yes, Reddit has ads.
My developer VMs are only 80 GB for Win10+VS+SQL Server. I can't install all of VS though. Some of the packages like UWP take an insane amount of room for such a small drive.
A 250gb on Amazon is literally cheaper then a 120gb. Just spend the 70$ and get the bigger drive. 
Use Reddit is fun for Android and I've never seen it.
`Console.WriteLine(System.Text.Encoding.UTF8.GetString(Convert.FromBase64String("bG9sIG5vIGdlbmVyaWNz")))`
Yes, I use it like that and also have Unity and Google Chrome on my 120GB SSD And I store there all my projects/documents That's enough
Right? I have no clue WTF ad they're talking about
i would go for 256 at least if you're going to do some serious dev along with sql server...
&gt; stupid shit in my code That's what I meant Events and Tasks are important.
&gt; At least they used Oxford commas. This is my favorite comment from *at least* the last few hours, days, and weeks.
No. When Windows patches start to drop in and you decide you want to test Xamarin.Forms then you need more. I did. 256 GB is the way to go. Remember VS can't install on other drives than C.
I eventually ran out of space on my 120GB after a few Windows updates. I'd get a larger drive.
Ahh yes you are correct they are important. I, however, was referring to the tedious nature of coding them up. Then relating that I would rather get buried in a similar tedious task, REGEX, than seeing ads... I think.... Idk the title of this post hurt my brain when I read it at 2AM 
Although WPF supports drag and drop natively, I always used this library as it just made things nicer in an MVVM scenario. https://github.com/punker76/gong-wpf-dragdrop
100 GB HDD win 64 still rocking with my pc
well, plus swap file, hibernation file, project(s), 3rd party libraries - no, it is not 256 is some reasonable start point
There's ads on the internet? 
Yes, although it won't leave you a huge amount of space for other things - if it's purely a development machine, you'll be fine, but if you're likely to add documents, databases, and other applications over time, you may start to struggle.
It's going to be a tight squeeze. The winsxs folder can grow to over 40gb.
yup!
Care to explain? When sharing a link, how can one add code snippet or more details? 
Okay great 👍
`public Event&lt;EventHandler&gt; SomeEvent {add; remove;} ... SomeEvent?.Invoke(this, null);` and `Task.Run(() =&gt; doSomething()).Result` Aren't that tedious, though :( 
Get C# in a nutshell. I did what you are asking for by getting that book
For mobile “playing” (dabbling with coding) I use my Surface 3, non-Pro. It has a 128GB drive. I’m constantly fighting with space on it. I also have a few games on mine, but nothing major, I mean, it’s an Atom based tablet! 
Definitely enough. You may want to upgrade eventually, but I have Overwatch, Starcraft II, Visual Studio 17, Counterstrike, PUBG, SQL Developer, Microsoft Office, and Win 10 on there with ~12 gigs to spare
The LOH gave me a lot of problems when I was writing my game/engine. I got a problem after a while where after loading around 10 levels the app would crash with an out of memory error (in 32-bit mode), despite all the reporting tools showing that the overall RAM usage was &lt; 1GB. After a lot of investigation, it turned out that a large vertex-buffer that I was storing in RAM was big enough to hit the LOH. The lack of compaction meant that although I wasn't explicitly leaking memory, after 10 or so level loads there wasn't a hole big enough in the LOH address space to fit the next buffer, and the CLR would crash indicating "out of memory". The solution for me was to deliberately compact the LOH after each level load (as level loading is a relatively slow operation anyway, and so an extra 0.5 seconds or so isn't a big deal).
I'd probably use Bacon Reader too, but bizarrely I never read Reddit when I'm on mobile. No idea why :) It's definitely a good option. I've got ublock installed in Firefox on Android, I did switch to Chrome for a bit because, ... long story, but I'm edging back to Firefox again :) 
&gt;no two keys are the same Clearly that's not the case.
You initialize the key value "mixolydian" twice in the dictionary
Ok, I'm clearly doing something very dumb and obvious here but can't see it. The keys are the strings, and no two of my strings are the same?
You're passing it an object where it expects a string. This is probably getting stringified to "System.Object". Thus, on the second line, it's getting a second object, which gets ToSTring()'d as "System.Object" and throws an exception.
This is one reason why I despise object initializers. Adding it explicitly (not through the initializer) would have produced a stack trace that made it clear which insertion failed. 
&gt;\`mixolydian\` as u/luuk127 said, this key is in there twice
Ok thanks for this. I was looking at this for about 30 minutes.
No problem ;)
I don't use them often enough to know (and I'm too lazy to test this) - is it possible to set a breakpoint inside an object initializer? Or is the whole block set as a "line"? If you could set a breakpoint at the start of the initializer and step through each line then the initializer wouldn't be a problem. Otherwise I totally agree with you: doing the object init in code would be better from a debugging standpoint.
I would add that, if OP is looking to save money, getting a SATA III SSD is cheaper than getting a PCIE/nvme/m2 one. Modern SSDs designed for SATAIII will completely max out the SATAIII 6 gbit/second bandwidth so it's not optimal, but it is still easily fast enough for most people, and about half the price of the nvme ones which are 3x faster.
It will at first, and for a while, but if you keep up with updates or start putting much of any other software on there, or get a decently sized Windows update, you'll find yourself running out of space.
It's static though - it's a lookup table that doesn't change throughout the entire program, but it's private to the class that uses it, and I don't want a separate dictionary for each object. (I could have a static boolean which controls whether the constructor intializes it so it only happens the first time - but this is a bit of a waste of memory &amp; extra branching)
And if OP is *really* looking to save money, why not a traditional spinning-rust drive? You can get one of those in 1Tb for the same price as a 128Gb SATA-III SSD. The point is, the sweet spot for any *useful* work will be in the 256Gb+ range. If they cannot afford that, the lack of performance with a spinning-rust drive will be dwarfed by the lack of usable room on a 128Gb SSD.
Heya! I currently have a 120GB SSD - It has W10 x64, Visual Studio Pro 2017, Guild Wars 2 (About 40GB), a bunch of dev stuff, and 12.6GB free space. I wouldn't really recommend it - But it works :p
If you practice good storage hygiene, 120 GB is plenty, especially if you're careful which specific Visual Studio features to install instead of just selecting everything, and those features don't include multiple mobile device VMs. Windows updates don't add much bloat if you do a disk cleanup to remove the update-related files after big updates. Windows includes a tool called CompactOS that saves a few GB by compressing certain system files. It's usually used for those little 32 GB tablet devices, but you can run it on a desktop. You can also selectively compress some folders to save space (but don't compress the whole drive!). Note that compression causes fragmentation, which is not a huge issue on SSDs but can still affect performance if it gets severe, yet defrag is a bad idea on SSDs because it wears them out faster. So there are tradeoffs. Occasionally go into C:\Users\you\AppData\Local\Temp\ and delete everything. I've seen that build up to several GB. Right now I have Visual Studio installed *twice* (Community and a preview version), a couple other IDEs and random tools, WSL, LibreOffice, Chrome, Firefox, etc., about 5 GB of code repositories, and it's taking up 80 GB. 
I got a 128GB SSD - Clean Windows 10 install, VS17, SSMS, Office, Photoshop, Visio and a couple of other apps and I got about 10GB left for files. Can't even sync my OneDrive with my PC.
I have seen it double that - 83Gb on one particular customer’s machine. A 128Gb drive is, IMHO, suitable only for those machines that will never store anything of importance, and will be used only for light web surfing and eMail; nothing more.
&gt; traditional spinning-rust drive I can't argue with something put in such poetic terms