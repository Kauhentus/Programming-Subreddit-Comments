If I remember Freeman's book correctly it dives directly into elaborate exampels that include testing and dependency injection. That's fine, but it might overshadow the bigger concepts of what .NET MVC is. I find Galloway's book to be a gentler introduction. It depends on your experience and background, I suppose.
Yeah, sorry about that, I was typing from my phone, and it only corrects spanish words xd. 
My point is that you should specialize in the actual domain, not the concrete tool. I think it's important to think on your long-term career. That's why I encourage to mention this "10 years experience in X" as one of your skills or specialities, but not sell (and specially consider) yourself as a X Programmer. You have a point about the strong specialities. And it's probably also wise to keep track of where your career is going and trying to build up a small set of strong specialities without forgetting your long-term objectives.
Check out Juval Lowy's talks on the zen of software architecture: https://youtu.be/Jxm2rgeuC6s
There's alot of surrounding things you need to become an expert in to truly be an expert in software development: automation, databse &amp; nosoql, build configuration, change version management, codebase/source code analysis, deployment, package management... i think that's all of the *most* important ones. These concepts all transcend language but you'll be way more efficient in specific applicaton with preferred tools.
His blog has a lot of great stuff too
Sure, if you mix and match all of those, then you've got the potential to make everything confusing. That's why you need to define convention rules for your *projects* and do code reviews to make sure people are adhering to them.
seriously, i don't know when they'll add an option for multilingual spellcheck/autocorrect... it seems like it'd be pretty easy to do.
Yeah, it should.
You can now edit lambdas, anonymous methods, and async methods in Edit and Continue mode now. This wasn't possible before.
[Yes, individual developers or 1-5 developers in a non-enterprise organization can use VS Community Edition to develop for-profit software, including mobile software.](https://www.visualstudio.com/products/visual-studio-community-vs) Look at the bottom of the page. Xamarin is licensed separately from Visual Studio, so [check out their website](http://xamarin.com)
I agree with most of the other comments here. You might start with a broad focus in several areas, picking up a basic understanding of things like Universal Windows Apps (C#/XAML), desktop apps (also C#/XAML), and gaming (C#/Unity3D or Monogame or just XNA), so you have a general understanding of what they are and how they're developed. Then, pick one that's the most interesting to you or that "clicks", and dig deeper into that, using whatever resources you find most convenient and enjoyable (Microsoft Virtual Academy is pretty good). Regardless of what area you choose, you'll be learning and working with C# and the core of .NET, plus parts of the framework that may be specific to your chosen focus. I imagine all those areas, and more, will have opportunities for gainful employment well into the foreseeable future, and even if the tide somehow turns, what you've learned will be transferrable. In fact, we developed our programming game, Code of Tanks (http://codeoftanks.com), with the confident assumption that the .NET Framework remains one of the best tools for software engineering and will remain viable for a long time to come.
As long as your company's **revenue** is under $1 million.
So if I wanted to create mobile applications for profit (which can be done free in Visual Studio), but not pay for Xamarin (I probably will go the Xamarin route when the time comes), would I have to then write my iOS apps in Objective-C and my Android apps in Java e.g.?
There's a free license tier for Xamarin (which can be installed when you install VS 2015 or downloaded directly from Xamarin), but it's really feature-limited. Depending on what you're trying to do, you may be able to get by with just that. However, yeah, if the free tier isn't enough and you don't want to pay for Xamarin, your only other realistic option is to write your iOS and Android apps with their official dev tools, or do something gross like use PhoneGap.
I switched German off. It was too annoying that it doesn't recognize what language I'm typing in and suggested German words during English sentences. Now my German friends have to live with me not using Umlauts anymore ;)
I was recently promoted to Systems Architect after 6 years of professional experience (nearly 20 years including my 'hobby' experience). So my recommendations are more about how I got here. As others have said, software architecture isn't about one language or framework. You'll need to understand *concepts*, some of which are often simpler with other languages or frameworks. For example, if you work with node.js, you'll inevitably learn how to create software in smaller components and how to design 'microservices' (this will also help in understanding ASP.NET 5/vNext). If you pick up Scala, you'll probably learn a lot about functional programming, API design, type theory, asynchrony, and (most importantly) messaging. You could easily learn data science concepts with Python or R. One of the challenging things about architecture is knowing the right tool for the job. For example, if you're creating a one-off Windows Service for syncing some data on a regular basis, do you need layering and the complexity of a well-designed data model? I was once tasked with creating a solution for long-running external jobs that get triggered from an ASP.NET MVC application. After a day or so of research, I created something using SQL Server Service Broker that ended up working for multiple long-running jobs. The problem is with all the plumbing and layering required to make Service Broker usable. Had I known about Hangfire then, my job would have been a lot easier. I've also introduced developers at work to end-to-end testing using Yadda. This was a great choice considering these are web developers who work with JavaScript regularly. Recommendations: You'll also want to get familiar with design patterns. I've recently found [Cloud Design Patterns](https://msdn.microsoft.com/en-us/library/Dn568099.aspx) on MSDN. So far, it's an excellent read with some pretty good example code. I've had people on here get on me about recommending Microsoft Virtual Academy, but they have a course called [Architecture in Practice](http://www.microsoftvirtualacademy.com/training-courses/architecture-in-practice) that's pretty good. I read a book called "Adaptive Code via C#" not long ago, and it was one of the better books on C# I've ever read. Another good one was "Microsoft .NET: Architecting Applications for the Enterprise." Finally, I'd recommend working on communicating with business stakeholders. This is one of the more challenging things I've witnessed with developers who have a computer science degree or background. I have a business degree in "Information Systems", specifically had course work related to communication with stakeholders, and one of the hardest parts of my job is still communicating effectively with non-technical people. I have a few rules: always be honest, tell someone you don't understand whenever there's a miscommunication, try not to get frustrated when people don't get the technical aspects of a discussion, and practice asking the right questions. I've worked with a lot of developers who tell managers things like "Everything is right on track" or "Everything looks great" or "This is the best code I've ever seen" when none of it is true. Business owners really hate when a project runs late, but they hate it even more when a project fails. 
You can write the iOS bits in C# but you will need a Mac. I use Xamarin studio on the Mac -- which is their C#/XAML designer. The reason you need a Mac is that you need XCode for everything to work. You might be able to virtualize MacOS and skip needing a Mac -- I've never tried. You can write for Android entirely on a PC in Windows using VS or Xamarin studio, it's up to you. With Xamarin though, there's no need for Java or Objective-c, everything can be done in C#.
What have you tried?
GitHub.
This isn't how to write an actual decompiler. This is how to use a library to do it for you then format and print the result.
Don't be fooled by this advice. "Low cost of living" means low salary compared to normal places. Fly over states are almost exclusively "right to work" states as well. In what we do, we don't have unions anyway, but the culture is generally one of labor exploitation regardless. Most of my 15+ year career was in the Midwest. I'd never even consider going back. The OP asked about remote working. Remote working is unlikely to work in the mid west because the pay is so bad. 
Mine was an input simulator. You could give it a queue of inputs, such as "Press Q, then delay for 20ms", or " Left click twice, then delay for 2000ms", and it would execute them all. I'm now working on my second big project which is a tool for texting over WiFi. It can already send via SMTP, and I'm working on receiving with IMAP. Edit: Typo
http://referencesource.microsoft.com/
He is looking at decompiling simple IL expressions into C#. To me that is decompiling. If this was a simple C decompiler, you wouldn't say that using a library to parse the Portable Executable COFF stuff to return an x86 stream of instructions, with a library that understands how many bytes make up that instruction and arguments, wasn't a decompiler when you then spit out a form of C afterwards?
awesome! 
http://stackoverflow.com/questions/11625351/what-is-test-harness Probably a good place for you to start. Also google."C# unit testing" or C# TDD" those should point you some of the way
STOS/AMOS is my guess. 
Certainly could have been! I know that I did some stuff for a friend's PD library on the Amiga in a BASIC of some sort - I had a feeling it was Blitz BASIC but I can't honestly remember (he wanted to be able to modify it himself afterwards). The ST I had access to belong to another friend and the version of BASIC used for the puzzle program was definitely different to the other stuff I'd been using, so it's likely it was the ST version of AMOS. But, it was a *very* long time ago now :-)
You do know that an **interface** does not contain an implementation, right? None of the four methods in https://github.com/MarlabsInc/SocialGoal/blob/master/source/SocialGoal.Web.Core/Authentication/IFormsAuthentication.cs are; a method only gains a "body" when the interface is implemented, like in https://github.com/MarlabsInc/SocialGoal/blob/master/source/SocialGoal.Web.Core/Authentication/DefaultFormsAuthentication.cs .
Thank you so much, both of you, I appreciate it!
That doesn't make sense. My pay for remote working is the same if I live here or in New York. Since the cost of living is lower here that means I have more money to spend or save. It's not all about the money either. I used to have a higher paying job but the hours and stress level were why I left. I haven't regretted it for one moment. I get that not everyone likes the life style out here but your points dint make sense.
Sorry for the delayed reply. Yeah, option 2 definitely seems the best option for what you have there. I'm not sure the nested observable thing makes sense for what you're trying to do, as you thought a CombineLatest is probably the right operator to use for what you want. I've been thinking about doing a series of blog posts about common Rx patterns and idioms for ages now, should really pull a finger out and get it done as it's becoming used for more and more things, but there's not a whole load of guidance out there for this sort of stuff.
Now we need something like this but for C++! :3 Thanks!
Is there any way to make these videos full screen? The text is painfully small. I don't need 1/3 of my screen taken up by the "learn C# from scratch" menu.
Are you using a test framework such as NUnit or MSTest? 1. A test fixture (`TestFixture` in NUnit, `TestClass` in MSTest) is a special class that is created to hold the unit tests for a particular class in your production code. 2. Within a test fixture, you should have many different test methods. 3. Each test method should test exactly one thing. Not one method in your production class, but one particular *path* through that method. (This does not mean that it has only one assertion, but that all assertions are related.) If your test methods are testing too much, they are integration tests, not unit tests. In your case, it sounds like each of the cases in your switch statement should be their own test methods. 1. One result of this is that, depending on boundary conditions and other permutations, you could easily have several unit test methods all exercising the same production method, each under different conditions. 2. Your tests need to perform both positive and negative assertions. I.e. that your production code throws errors under the appropriate conditions, etc. 4. Each test method's name (and the names of variables, etc.) should clearly describe what it is testing. (See the [DAMP principle](http://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests).) 5. As much as possible, you want to test your code in isolation. For example, you should not initialize a database connection to verify that 2 + 3 = 5. 6. If possible, use parameterized tests to simplify repetitive testing. (`TestCase`, for NUnit) 7. A "test harness" is a woefully generic term that can mean many things: 1. A test fixture 2. A derived class to allow access to protected methods / properties 3. A wrapper class to allow control of runtime behavior or dependencies 4. An implementation of an abstract class to allow testing of non-abstract methods 5. A [mock](http://stackoverflow.com/questions/2665812/what-is-mocking) implementation Some of the more common .NET unit test frameworks: * [NUnit](http://nunit.org) * Visual Studio Unit Testing Framework (MSTest) - built into Visual Studio * [Gallio/MbUnit](https://code.google.com/p/mb-unit/) And, for mocking: * [Rhino Mocks](http://www.hibernatingrhinos.com/oss/rhino-mocks) * [Moq](https://github.com/Moq/moq4) * [TypeMock](http://www.typemock.com/)
Just got it. One question though. Is there an expiration date for the content? Can I come back in a month and still access the videos?
Some things are paid, some are free. Microsoft is more inline with other stacks in that regard than 5 years ago. Visual Studio is now free for small project teams, and is the exact same as the Pro version which large teams have to use. So you can play around with MVC/API/WPF/Win Forms/console apps/etc for free. Some other stuff Microsoft stuff can be free as well. I do not know if you can play with Azure cloud stuff for free, but there is free MsSql server tiers. Non-microsoft tools that were paid before are still just as paid now. (Xamarin and the like) However, there are a plethora of free 3rd party tools now, in addition to the paid stuff. Most free libs are hosted on Nuget: https://www.nuget.org/ .
First of all, we have no idea what this project is. Secondly, if you want a ton of help you're going to have to pay people ;)
So what's the game?
I enjoyed the architecture and style this recently https://github.com/Sonarr/Sonarr
Nuget has a huge list of libs, it helps to know what you want before looking to much. What kind of projects are you looking to do? Web? Native Applications? Server stuff? Distributed Computing? Learn C# in 30 days?
Just a heads up! This guy is boring. 
I'm only writing to the console to test something in this version - I have other versions where I don't write to the console. It doesn't make much difference to total runtime for small sets of URLs (&lt;50). I'll move the ServicePointManger out of that method, you're right. 
Got any guidance on how to implement concurrent connections? A link to a howto would be great. I've been googling, but I quickly get overwhelmed with the results. Part of the problem is that I'm unable to concisely describe this in terms that Google can understand and return a smaller set of results. 
Agreed. It's like a few design pattern samples.
Getting the exact libs is not too bad. Nuget packages can be maintained for multiple run time versions (.net 3.5, .net 4.x, WinRT, etc) but its up to the maintainer to do it. Nuget can usually handle getting the right version for your project. Typically, you will get explicit messages about dll mismatch as apposed to java. Iirc the java jar loading errors read something like "Invalid version number 9403294293 expected 52". Configuration for .net MVC web servers is not hard. The default VS project has mostly sane defaults and local dev configuration for things like ports can be done though a UI.
I believe UIs knherently respond to the host system's globalization settings. The code will respond to any Culture and UICulture set on the thread or fallback to whatever the host system is set to. The last thing you're going to want to do is 'emulate' these behaviors through string manipulation. Try to get all of the OS stuff lined up first and 90% should just work itself out. It sounds like you're just getting jammed up on the differences between Culture and UICulture. I'd start your research there.
I'm a professional .NET developer and want to eventually be a game developer, so I'm possibly interested. Please post a few more details. I don't know really what is needed to create mods for that game, so some resources would be nice
It's what I use, but it's not cheap. Very worth it though.
This is why you should not use Visual Studio 2015 and .NET 4.6 yet.
Gracias. Just looked through it. I like it a lot.
We also found a ryujit bug when we attempted to test out our production services with 4.6. Our case was bad as it results in a boolean being calculated incorrectly, basically corrupting production data https://connect.microsoft.com/VisualStudio/feedback/details/1578173 http://stackoverflow.com/questions/31570521/ryujit-producing-incorrect-results 
You could use Tasks or Parallel.ForEach. The latter is probably easier if you want to have a limit on how many can be running at the same time, but if you know you're not going to have a crazy amount of Tasks running, that'll work too.
Here's an async approach if you want to play with it... void Main() { HttpClient client = new HttpClient(); List&lt;Uri&gt; uris = new List&lt;Uri&gt;(); uris.Add(new Uri("http://www.microsoft.com/")); uris.Add(new Uri("http://www.google.com/")); uris.Add(new Uri("http://www.googlebingyahooasdf.com/")); var tasks = uris.Select(uri =&gt; TestUrl(uri, client)).ToArray(); Task.WaitAll(tasks); foreach(var task in tasks) { Console.WriteLine(string.Format("{0} : {1}", task.Result.Key, task.Result.Value)); } } public static async Task&lt;KeyValuePair&lt;Uri, HttpStatusCode&gt;&gt; TestUrl(Uri uri, HttpClient client) { try { var request = new HttpRequestMessage(HttpMethod.Head, uri); var response = await client.SendAsync(request); return new KeyValuePair&lt;Uri, HttpStatusCode&gt;(uri, response.StatusCode); } catch { return new KeyValuePair&lt;Uri, HttpStatusCode&gt;(uri, 0); } }
Many thanks! I'll try this.
VS2015 had nothing to do with it and is fine to use, it's just the new JIT engine that has issues. 
At this point it's probably more humane to nuke the repository and start again
It's supposed to be lower than, of course. I'll fix it. Thanks. (All brackets were changed to `&amp;gt;/&amp;lt;` at some point and I changed it back with a mistake)
This. People have been saying this kinda thing about C# for a number of years now, and it's still here and still an extremely used platform in the industry. Besides that, the quality of the tools Microsoft provides is unmatched. Visual Studio is the most feature-rich IDE around, and with add-in support it only gets better (with ReSharper or CodeRush for example). And if he's actually talking about Microsoft as a whole going under, that statement is pretty laughable.
New site for my C# book on multithread and parallel programming.
The bug is disturbing but this also is: "That means you’ll only see this in RELEASE, which for most people is only production." If you don't do QA on Release code your QA process is seriously broken. I only ever test Release mode if that's what ships and I only resort to Debug when I actually have a bug to debug! Debug code is quite unrepresentative of the behaviour of Release code in many respects, not just this bug. 
The repository is new as of last week... but the code, oh, the code is much older. I'm taking control of a web service that has previously only been developed by one grizzled veteran programmer, and was never in source control before. In fact, the canonoical copy of the source just lived on the webserver. When he'd update it, he'd just open the solution from the network drive, make his changes, and hit Build. *The bin folder was hosted by IIS.* So I come along and put the thing into source control. As part of doing that, I delete the "canonical" copy off the server and set up a publish profile in Visual Studio. I mean, it's not continuous integration, but it's *something*, right? I publish it to the test server, play with it, and it works. I publish it to the production server... one method fails. We get calls from customers, hey, this one thing just hangs forever! I revert to the old code. The error logs aren't helpful, so since I can't reproduce this on Test, I set up a new site on Production and publish the web service there so I can remote debug it... and it works fine again. No error, even on the production server. Whaaaaat? So on a whim, I try to re-publish the web service compiled as a Release. I see the error again. Compiled as a Debug again? It works. OK, now I know how to reproduce the error. It's just a matter of figuring out why it fails compiled for Production. I swap config files, that doesn't fix it. I do a ctrl-f and look for `#if`, and find no compiler directives. Hmmmmm.. But now I can reproduce locally too (I'd never tried to reproduce the bug in Visual Studio in Release build before), so I do that. After some searching, I find this buried gem: public class ServiceWrapper { bool thingIsDone = false; //a bunch of other state variables public string InvokeSoap(methodArgs args) { //blah blah blah soapClient client = new Client(); client.doThingCompleted += new doThingEventHandler(MyCompletionMethod); client.doThingAsync(args); do { string busyWork = ""; } while (thingIsDone == false) //do some more stuff } private void MyCompletionMethod(object sender, completedEventArgs e) { //do some other stuff thingIsDone = true; } } Since `thingIsDone` wasn't marked as `volatile`, compiler optimizations were causing it to never get set to true in the original thread if compiled in Release mode. It only worked in Debug mode, but no one noticed that due to the... quirky... build process. I marked it `volatile` (and added Thread.Sleep to the do loop) and fixed it. Well, let's not call it "fixed." It's working.
A better repro with more analysis for that bug was posted at https://github.com/dotnet/coreclr/issues/1299 
I wouldn't call this a "gotcha" at all. This is just lack of language understanding. A gotcha would be a situation where you are using a feature *for its intended purpose* but the context in which you are using said feature causes some sort of problem like a bottleneck. In this case, the developer simply used the wrong feature. If you're going to use a new language feature, you should make sure you understand it first.
A fellow 2007scaper who is also (presumably) a c# dev? Hello there!
Okay that's insane. I have 2 questions though? 1. So the actual site was running on the Debug build all this time? 2. I was under the impression that you'd runtime error if you try to set non-volatile class variables across threads. Do you know what actually happens instead? i.e. what gives the compiler the impression that it can optimise it away?
Apparently /u/csharpexperts has a new one, so you could check that out.
good thing I only deploy in debug mode
Whoa..don't add a sleep..that will only lead to worse bugs. I think you should read this: http://www.albahari.com/threading/part4.aspx. If it's too much, to be safe, just add a lock{} around thingIsDone. That will take care of memory fence issues.
Are you now running framework 4.6? This sounds familiar, see http://nickcraver.com/blog/2015/07/27/why-you-should-wait-on-dotnet-46/
It ain't no Lynda
This is the bug from hell. Only happens in release mode, adding a debugger removes the bug, as does making debugging statements? Oh holy hell
I would add the following to your list in no particular order: * Data Structures * WCF * Unit Testing
I added the snippet into web.config and still the same behaviour. &lt;globalization fileEncoding="utf-8" requestEncoding="utf-8" responseEncoding="utf-8" culture="de-DE" uiCulture="de-DE" /&gt; The host is a Windows Server 2008 R2 standard. I switched back and forth the Regional Settings on the server (to German, and back to English) and still the same issue. In order to properly interprete decimals I have to enter the numbers in the Textbox of the webform with"." . If I entered them with "," they lose the decimals, their decimals would concatenate to the integer. Any other workaround? Thks
What you are looking for is concurrency, and in this specific scenario the ability to throttle asynchronous tasks. Some options: [Use TPL Dataflow](https://msdn.microsoft.com/en-us/library/hh228603%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) [Create a Task Scheduler that limits concurrency](https://msdn.microsoft.com/en-us/library/ee789351.aspx) [Wrapping HttpWebRequest in a Task](http://stackoverflow.com/questions/10565090/getting-the-response-of-a-asynchronous-httpwebrequest) Some others: http://stackoverflow.com/questions/22492383/throttling-asynchronous-tasks http://stackoverflow.com/questions/5034885/what-is-the-best-way-to-throttle-many-net-task-instances http://www.matlus.com/httpwebrequest-asynchronous-programming/ The SemaphoreSlim looks the simplest to implement, but I'd go with the custom task scheduler. Good luck.
Use the Change method, and "change" it to the same values as initial. Or dispose it and instantiate a new one; they are pretty light-weight.
I wonder if there is any use in a compiler that compiles C# into an intermediate code that corresponds to a much less advanced language. It feels like you would constantly run into limitations of the destination language. Lambda methods and anonymous delegates? Those require objects, so nope. Any framework functionality? Nope. Linq? Requires framework, nope. Arrays? I guess, but without any of the framework functionality. I mean, does it even support custom classes? If not, why use C#? 
Thank you for your comment! Sure, why use c#? In my experience, why not? I mean, it is still a very much just a experimental tool and no, we don't unfortunately get to use those awesome linq stuff. But there are actually more here than what the eye can see. Unfortunately I never actually tried delegates out but it is a possibility that it could work. Since those are translated into seperate functions during compile time. Same thing with properties as: public string hello { get; set; } But I have no idea what the future holds when it comes to Papyrus and fallout 4 tbh. Who knows, perhaps they do enhance the scripting language even further to actually be able to allocate additional memory during runtime? (Create new instances of objects). You can of course use custom classes, even extend them. But you cannot create a new instance of those classes from within the code itself. For instance: var awesomeClass = new Coolio(); One other great thing about it is the choice of IDE. :-) And some people just might be more comfortable to actually do this in C# rather than Papyrus.
Wow thank you! You have some great points there. I will try and cover more of the stuff you can and cannot do! Absolutely! Luckily there are like tons of stuff you wouldn't expect to work that actually do work. You can have multiple return points, switch cases do work, static functions works, constructors work, and actually some of the features new to C# 6 will work too. After all the compiler does most of the dirty work creating CIL that is translatable into papyrus. Some inheritance works, interop and native stuff will not work. And to be honest, im still trying out try\catches. But it is getting closer. Enums is hard to say as I haven't gotten that far yet. But I imagine that to get it to work it would be to translate enums into classes that has static properties (enum items) to be used. And that way still work in papyrus. I will get straight to it!
1. Yes, production was using it compiled for Debug the whole time. 2. Better answered by others here that know more than me. :)
Thank you. So are there any design patterns I should look into for this specifically? I'd also like the user to be able to add/remove from the list of items being updated.
Can anybody explain why this was downvoted?
I have no idea. Never had a problem with this method.
Considering that C# compiles to an intermediate code that's interpreted/compiled into assembly, a language that lacks objects, LINQ, etc., I don't see why not.
I've hit framework bugs before. I managed to find a weird one back in .net 2 where attempting to base 64 encode an empty string in a 64 bit runtime on server 2k3 caused the app pool to crash where it worked fine in a 32 bit environment. Spent all weekend on that one and may have cried once or twice.
The matlus blog post is excellent, and really does a good job of explaining what to do. I'm going to try multiple methods and see how it goes. 
Actually, [there is LuaJIT](http://luajit.org/), which DOES JIT Lua code at runtime.
That is still not part of the mainstream implementation, though, right?
Notepad is stepping up its game. I once opened 70mb xml file with notepad, and it took under second. It's a good question, and to be honest, most of the text editors I've encountered, including diff tools, choke on big files. They are very inefficient, probably not using optimal algorithms for string matching / replacing. They might also not pull everything into memory at once. Ps, given good implementation, I would expect replace on 4MB file take under second definitely. 
One motivation was the fun of it -- we wanted to build the game so we could play it -- and also the fun of creating it and learning from that experience. We also have a lot of stake in the project (sweat, tears, money) and some day it needs to pay off monetarily, somehow. Regardless, it's been a long road so the mere thought of NOT keeping it going would be depressing. BTW I'm open to ideas on ways to monetize, but I don't want to turn people off who rarely pay for games, because I'm one of them! :)
Use a StopWatch instead
I actually do this - deploy debug mode... What am I sacrificing? Should I make a point not to do this?
I agree about the threading constraints (and mentioned it in my previous post which the above was a reply to.) Terrible is a bit strong... the exception handling is naive as I didn't know how OP wanted to deal with it and this was more of a code snippet example. But I was getting WebException for URLs that couldn't be reached and figured I'd rather have this method just return an HttpStatusCode of 0 rather do anything else. Just hit a url, and return the status code (or 0 if an exception was hit.) 
Incidentally, how did it perform compared to what you had previously?
I wound up going with a DispatcherTimer + Task Factory. Just in case somebody else finds this, or wants to correct me on why this is a bad idea. ObservableCollection TChannels was bound to the view. public class TViewModel : ViewModelBase { private readonly TestRepository _testRepository; private DispatcherTimer changeTimer; private bool _channelsAreBusy; Random rand = new Random(); public ObservableCollection&lt;TChannel&gt; TChannels { get; private set; } public TViewModel() { _testRepository = new TestRepository(); this.TChannels = new ObservableCollection&lt;TChannel&gt;(_testRepository.GetTChannels()); DispatcherTimerSetup(); } protected override void OnDispose() { this.TChannels.Clear(); } private void DispatcherTimerSetup() { DispatcherTimer dispatcherTimer = new DispatcherTimer(); dispatcherTimer.Interval = TimeSpan.FromSeconds(1); dispatcherTimer.Tick += new EventHandler(AsyncTest); dispatcherTimer.Start(); } private void AsyncTest(object sender, EventArgs e) { if (_channelsAreBusy) return; _channelsAreBusy = true; System.Threading.Tasks.Task.Factory.StartNew(() =&gt; { Thread.Sleep(3000); // simulate extended task, test locking bool test = rand.NextDouble() &gt; 0.5; return test; }).ContinueWith(t =&gt; { if (t.IsFaulted) System.Diagnostics.Debug.WriteLine(t.Exception.ToString()); //modify random item in ObservableCollection for visible changes to UI int r = rand.Next(TChannels.Count); TChannels[r].Streaming = t.Result; _channelsAreBusy = false; }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext()); } }
I added a comment above (in this post) that outlined how I did it, seems to work okay. Thank you!
I like to ask : &gt;Imagine there is no JSON serializer available today. Given an understanding of how JSON data is structured, tell me how you would go about writing a custom serializier. I like this question because it gives a practical implementation of a problem to solve. Do they bring up issues with string concatenation? Do they use reflection? Do they set it up to be interface driven? Do they decorate properties with an attribute to mirror the data contract serializer? It really opens up a lot of topics for discussion.
This whole article was written to use the acronym FARTS, wasn't it?
So I think your route is what I want but I'm struggling and I'm hoping you can give me a push in the right direction.... So after some reading there are really 3 things to these constraint 'solvers' 1. Decision Variables = These are the things that the solver is able to change to values between ranges you set (eg: 0 to 100) 2. Goals = What you want to do/optimize. 3. Constraints = What things can't be true in the solution 
Chained FARTS, specifically.
A mixed bag. This dumped a lot of requests in parallel, and many finished faster indeed, but others stayed slow. However, it does give me the ability to populate results in a datatable or something so the user **feels** that it's fast. My previous code would go synchronously, so if it hit a URL that was slow to respond, it would appear to be frozen. Total execute time remained roughly similar. I'll post Fiddler screencaps when i get home, if you like.
The Async Code - it feels faster, but it turns out to be slower.. this varies with network conditions though.. sometimes it's much faster Requests started at: 16:49:48.356 Responses completed at: 16:50:58.636 Sequence (clock) duration: 00:01:10.279 Aggregate Session duration: 00:00:26.515
This is why I warn people before they walk into my cube. "Fair warning, I've been chaining FARTS for the past hour."
`public static StringBuilder AppendLineWhen(..)` So for every possible flow of code where your class could be used, you have to include methods to handle that, just so you can write `thing.Append(x).AppendWhen(y).ButOnlyIf(z).ExceptWhen(isCrazy)` I realize I'm making a little fun there, but it seems absurd to take the most powerful feature of a programming language - the ability to compose disjoint statements - and completely throw it to the wind. I can't imagine what a mess this would look like if it was applied to a larger class library - like the .Net XML library ala `XmlDocument`, `XmlElement` etc.
No... But I have this friend... He does this... How bad is it that he does this?
Whereas I applaud one's effort to translate Papyrus into C# - the reality is that "learning" Papyrus if you know JS or C# is a trivial matter - take you a week at most to grasp it.
Your if and else blocks are backwards. If your query finds rows, the validation's IsValid should be set to true 
I didn't say he coined it, I said he used it.
The character class has no properties. In the constructor of the class, you declare local variables. Move these to the class and scope them. 
How should I do that? The variables in the constructor are only local variables? I'm trying to read this to understand. http://www.tutorialspoint.com/csharp/csharp_properties.htm Edit: I think I'm getting an idea. Edit: I think I see where I screwed up. Variables are only defined in the constructor. **Edit: I got it, thanks.**
Yeah, I set the variables to public.
 static void delay(int delay) { for (int i = 0; i &lt;= delay * 10000000; i++) { //Fuck this noise! Microsoft shitheads can't come up with a reasonable timer, so fuck them. } } You blame Microsoft for your incompetence to find the right classes? Wow.
I blame StackOverflow for having all the wrong examples.
What you're describing (serializing and deserializing an arbitrary delegate) is probably impossible and probably not what you want. Can you limit down what can happen in a collision down to a finite number of different behaviors? Then you can serialize a description of that. Example BehaviorOnCollision = Behaviors.Ghost BehaviorOnCollision = Behaviors.Bounce - 100 And then your code interprets the value and does the appropriate thing. Etc 
Or yourself for not getting a good book. Get Head First C# and read it, then you're set.
They are called fields, by the way. Only stuff introduced inside methods are called variables in C#.
That's actually a great interview question. Unlike many other questions, which are bollocks. Like, can you remember MethodA on ApiB. Topics for discussion are where you find out about a developers experience and ability to research, rather than what they just remember off the top of their head.
You can serialize and deserialize a delegate, but it's not particularily easy, so I would follow /u/mrfooacct's advice. Find a better way to model your problem. But if you really want to, here is a trivial, *naive* example to serialize and deserialize a delegate: https://dotnetfiddle.net/1OY7H1 The code has many issues (it doesn't allow you to use overloading methods for example) but it should show the basics of how it's done.
This is how I would do it. It's a very simplified example: public abstract class BankAccount { public string Number { get; set; } public double Balance { get; set; } virtual public double Withdraw(double Amount) { this.Balance -= Amount; return this.Balance; } } public class BabyBankAccount : BankAccount { public override double Withdraw(double Amount) { if (Amount &gt; 1 &amp;&amp; Amount &lt;= 30) { this.Balance -= Amount; } return this.Balance; } }
Yeah thats what i thought in the beginning but my tutor told me that i cannot do it that way. He wanted to make the problem hard than it is, probably should get a new tutor.
This looks more serious, but I wonder if the optimization suggestions (attributes) are part of the added concerns. I don't have anything to test it on currently though to verify unfortunately.
Well that would just make too much sense. Thanks :)
It is not possible to make ReSharper aware. You can put the namespace imports into a DEBUG block too. Personally I avoid these conditional symbols at all costs. They obfuscate the code and you end up with different versions for local and production code. That's something bad in general. If I really need this, then I use the `ConditionalAttribute`. You place this attribute over a method and give it a key like DEBUG, then you call the method like you normally would. If the key is not a compilation symbol, then the compiler will strip away the method call and the method itself.
Its tautological I know, but I like well designed fluent interfaces that are easily read left to right. eg: thing.Modifier().Modifier().Modifier(); As apposed to annotation methods that might go [Modifier] [Modifier] [Modifier] thing; The reason is the fluent way reads more naturally to me. You start with a something, then modify it. An example would be things like FluentNhibernate, where the fluent part is adding modifiers to your db mapping to better match the database or FluentAssetions where you start with a single thing then chain asserts off of it. I do not like complex fluent interfaces that rely entirely of generic extensions (this object foo) or complex parameter passing, eg: mapping object results in NHibernate's QueryOver API.
Awesome answer! Thanks! I think I'll try to develop in a new language and something that's not MVC. Try to learn something different for a change
Thanks for the demo and advice [: although it looks pretty complex, I think I'll try to find a way around doing this. Perhaps I'll use a scripting language to allow users to define their own functions.
Thanks for the demo and advice [: although it looks pretty complex, I think I'll try to find a way around doing this. Perhaps I'll use a scripting language to allow users to define their own functions.
If you just want to learn c# I wouldn't recommend going for the certification, it's a waste of money. If you're dead set on getting it though, the accompanying books really help for the tests.
Want to clarify that I only meant the certificate is a waste of money when obtaining it for the sole purpose of learning c#.
http://www.examcollection.com/70-483.html
The CustomValidator has a OnServerValidate event hook to his validation method that hits SQL for the compare. The Sql command is parameterized, so it's not injectable. Don't write your own methods to clean variables, use parameterization. I've seen people just do a String.Replace to turn single quotes into double single quotes thinking that would protect them, but you literally just have to inject \' to beat it. Finally, this application is webforms. He'd likely have to refactor the entire page to utilize and ajax call.
Change if (reader.HasRows) { arguments.IsValid = false; } else { arguments.IsValid = true; } to arguments.IsValid = reader.HasRows;
I didn't intend to use the certification as a learning tool. I'm using c# at work and learning it through practice. I wanted to get the certification kind of as an add on. To make my resume pretty. Plus my employers are paying for it. 
Ok cool. I'll reiterate that the exam ref books are great for preparing for the tests.
&gt; so i changed the hotkey to Winkey + G instead Win+G is bound to the gaming platform in Windows 10. So you probably need to find yet another hotkey...
By reading the documentation.
I think the first thing to determine is why it's not working on your machine. Vista is compatible.
Thanks for help I'll check into it.
Think I found a solution. Found someone on youtube named "Brackeys" and will be using Monodevelop"Xamarin Studios" to be learning C#. See how this goes, thanks peepz.
About half an hour ago (when you made this post) I had a bunch of blogs.msdn.com sites not working, so there's a good chance it's back up now.
How do you feel about using Notepad and compiling on the command line with csc.exe ? It's how I got started in ancient days.
I've been preparing for this certification for around a week already and I've got MCSD Certification Toolkit (Exam 70-483) book. But to be honest, it contains a good amount of typos and some tests are just wrong. You shouldn't peruse it as a C# learning book. It has good explanations of some topics, but the amout of typos is just horrendous (especially in tests). You should definitely have some working experience before reading it so you'll be able to understand the inconsistencies.
What is thia "IDE" you speak of? Here we only use Vim. The less fortunate among us use Notepad++. And the truly depraved use Emacs. But seriously, you can use any of those to write C#. You don't *need* an IDE. Having said that, there are options. Eclipse. Xamarin Studios. A few others. None are quite what you get with Visual Sudio, You can get a LOT of mileage from Linqpad, and Linq is really *the main reason* to use c# as opposed to any other language. Linqpad is a terrific learning tool for linq. Start there.
The exam reference from Microsoft will help you to pass the exam but it will not help you learning C#. At least, that was my experience doing 70-480 and now applying to 486.
https://code.visualstudio.com/ is a lightweight IDE, it should run on your system as well as linux and mac. https://msdn.microsoft.com/en-us/library/78f4aasd.aspx This will tell you how to compile from the command line. Have fun!
I would definitely recommend you to check out the KnockoutJS and AngularJS frameworks for Javascript that are full featured MVVM solutions if you hate the Razor syntax. When you create a new MVC project, by default you get the example application set up. What I recommend you to do is take that template, download Angular or Knockout via Nuget, include it into your solution and try to re-write all the front-end with one of them.
These things are absolutely beautiful. You should absolutely abstract this. You need to make abstract classes/interfaces/base classes to hold the contract that similar controls should follow. For example, you have 3 circular controls; pie chart, ring chart and ring gauge. They have a lot of similarities; style related things (font properties, color properties...), width, scale, value, title... If you follow the pattern, you are copying your code a lot. What you could do is make a CircularControl class/interface that will have shared properties and all other circular controls such as ring gauge and pie chart would inherit from it. Also, every control shares properties like title and other general stuff so you could also make a base class; let's say, BaseControl and all other control would inherit from it.
I may be just thinking out loud - my JS will obviously use XMLHTTP for communicating with web services, but I'm trying to find the find URL parsing/routing framework for something like http://myblog.com/2015/1/1/the-best-blog-post-ever 
All of that can be easily done by the integrated routing engine. You have a lot of examples in the first answer: http://stackoverflow.com/questions/8037763/asp-net-mvc-blog-urls-via-routing Example from post: // matches **/2011/11/07/exact-post-title** routes.MapRoute( "ArticleDetails", "{yyyy}/{mm}/{dd}/{title}", new { controller = "Articles", action = "Details", new { yyyy = @"(19|20)\d\d.", mm = @"\d\d", dd = @"\d\d" } ); 
Thanks, I hadn't gotten to SO yet. So am I correct in thinking that the controller action would handle the lookup?
Routing just recognizes the request and points it to the controller responsible for further handling. In example above, Articles controller, specifically it's Details actions would take over the request and process it. For example, it could retrieve article's title, content, comments, author...from the database and pass it as a model to the view.
Cool, I think that is where I was getting a bit lost. Thanks for the tips.
What's up with people saying "Visual Studios"? Like more than one Visual studio? I worked with a dude who said that, always thought it was funny.
I don't know a lot (or anything really) about WPF so I might be missing something obvious that somebody else will point out shortly. That being said, just looking at your code I would create a class called TextSettings or something like that with properties for font size, family, style, weight, stretch, and foreground. Then just have two properties on your control: ValueTextSettings and TitleTextSettings. I really like the looks of it so far, good luck with it!
Which is good for students, you don't want them thinking an IDE is a black box.
thanks man! Here's a GIF of some of the animation and interactive mouseovers. http://i.imgur.com/ppw5Sx4.gif And i have a few interfaces, but i definitely need base classes. And i was thinking RingGauge would probably be categorized as a ValueIndicatorBase or something, since it only displays a single value instead of a dataset. My LinearGauge control would also inherit ValueIndicatorBase. But it may be better to have common visual properties like arc layout properties and brushes. I also have an interface called IBrushProvider which is implemented by CyclicalSequenceBrushProvider, SimpleGradientBrushProvider, and ComplexGradientBrushProvider. These allow you to give the controls brush sequences and mathematical patterns instead of specifying every brush color. So i could create a ComplexGradientBrushProvider with gradient steps Green-&gt;Purple-&gt;Red-&gt;Blue, and brushes are dynamically generated based on the rendering progression vs. total dataset size. 
I don't have the book but I would guess that whatever it is having you do will work in in Windows 7. Things may look a bit different but you should be able to figure it out. Just take a whack at it. The best way to learn is just to do it. Google is a great tool. I am a WPF developer and this is essentially how I learned. Good luck and have fun.
Declare is another word for creating objects to be used as variables. That's all the help you get :P
thank you, i understand variables but its the coordinates bit that messes me up. what variable can be a coordinate? is int corner1 = (x, x, x2, y2); valid?
I'm late to this but I had the head of the 'game programming program' at mt college tell us to do things like avoid memory management and languages like Cpp. The majority of the AAA industry is nothing but unmanaged languages. Pretty much C or Cpp and often straight assembly. Imagine how it felt trying to get an internship, much less a career, with that kind of.... drivel spewed all the time.
So this UML is leaking a bit of Java, we generally don't use Get/Set methods in C# but instead use properties. If you would have a public accessible string FirstName, then it would look like: public string FirstName { get; set; } You can also opt to keep the setter private, and fill it in the constructor: public string FirstName { get; private set; }
I don't think the inlining is important, as it's reproduced both with and without inlining.
Nope, I'm British and i don't, an neither do any of the people I've worked with that i can remember.
I really want to read this article, but your site doesn't scroll on mobile. Nexus 5, neither Chrome nor Chrome Dev scroll. Edit: Firefox works.
I don't have access to pastebin but this seems like the right answer to me... But.. If it's a console app: catch (Exception exception) { Console.Writeline(exception.ToString()); }
Are there any non-trivial projects with source code available? I would like to see this in action in something a bit more complex and interactive than tic-tac-toe. Are there any example on how this handles AJAX? There is huge potential for integration with server-side .Net code. How does this integrate with existing JavaScript libraries (like Jquery UI or Webix)? I can't find any documentation or reference anywhere.
Yep. UML is Unified Modeling Language. It's not the code, it's a graphical description of your code and how the parts relate. *In theory*, you can take a UML diagram and implement it in any number of languages, including C#. In practice, there are often some language-specific constructs that UML can't show. But it serves it's purpose - and that is to provide a common drawing scheme for communicating software design to other people, without getting down into the weeds. 
https://msdn.microsoft.com/en-us/library/system.drawing.point(v=vs.110).aspx
It seems to work by having their Windows Store app communicate with your desktop app via their library. So it's not really one thing; the desktop app isn't updating its live tile, instead it's telling the Live Tile Manager app to update its secondary tiles. Also $900?
I believe it's Ctrl+. It's the shortcut for the little gray box that appears just to the lower left of the text.
It's not a Console app. The code is inside a Button click handler. The description states that the user can enter information into *textboxes*. Moot point now, anyways; OP has scrammed.
I'm almost thinking my account on my laptop isn't an admin for some reason, when I right click, I don't get an option to run as administrator. (I did just upgrade to Windows 10, not sure if that has anything to do with it)
We like interesting challenges. Not dumb "what could have the user meant that he vaguely described"-challenges.
I'll have to try this when I get home from work. Thank you! Upvote for google fu.
Check out the DbProviderFactory: https://msdn.microsoft.com/en-us/library/dd0w4a2z(v=vs.110).aspx I used this to abstract away the underlying database connection and am able to reuse the same logic to connect to, select/insert/update/delete data from SQL Server, ODBC, and Oracle databases without needing specific code to do so. var Factory = DbProviderFactories.GetFactory(GetCredentials.Provider); //where provider = System.Data.SqlClient, Oracle.DataAccess.Client, etc. var newConnection = Factory.CreateConnection(); var adapter = Factory.CreateDataAdapter(); This model supports all the usual objects you'd see using ODBC, SQL, etc. but they're named DbCommand, DbConnection, etc. 
Ugh. For better or worse, it's been probably seven years now since I worked on an app that ran into localization issues. I do recall us having to be very careful with those culture values, including having different values for each property in certain cases. Wonderful combinations like having UI with locale and time zone for a specific user, on a server running in a different locale and time zone, parsing and generating text serializations formatted in yet another locale and time zone, etc. :-) I'm sorry that the suggestion didn't work out for you. Interesting problem you have run into. I hope you get it sorted.
I'm changing the culture. This has worked for years. Out of 300+ cultures only the 7 I listed above have problems. 
I have just done that. It's actually really easy to reproduce this bug: 1. Change your regional settings to Norwegian Bokmål 2. Try this: DateTime mydate; Console.WriteLine(DateTime.TryParse("07.12.2015", out mydate)); 07.12.2015 is the correct format for Norway but fails to parse. Unfortunately Norway is quite a big market for me! 
In this specific case, the mechanism I described is easily implementable without paying the $900. A selfhosted HTTP server and a companion store app is what it boils down to. Though that solution is less than ideal because it requires the user to install two things via two different mechanisms. I'm aware of the value proposition of the package, it's just not a reasonable recommendation for the OP, since it's expensive and doesn't really do what they want. Plus, I have had poor experiences with Telerik's UI package... it's made me weary of premade controls in general.
4.0
Well if you do a remote job, then of course it can make sense. That's why there are people who remote from e.g. Thailand. But if you commute it's better to get a job in NYC and try to live as cheap as you can then to try and find the highest paying job in Podunk AR. You're rent might be 25% as much in AR, but the pay will be 33% as much as well and rent shouldn't be taking up your whole pay check in any case. Food probably won't be more than 40% more expensive in the more expensive place. So let's say you're making $15k/mo in NYC or $5k/mo in AR for the same job (this is very close to my personal experience). Rent is $2k/mo vs. $500/mo. Food cost is $1500/mo vs $800/mo. So after these two expenses we have $11.5k/mo vs. $3700/mo... Most of your expenses after these are going to be national: cost the same regardless of which place you live (e.g. BMW will cost nearly the same in both places, iPhone will be exactly the same in both, etc.).
Odd, by targeting the older version you should be avoiding any new .NET problems
/u/agileone's suggestion is a good one. The ODBC and SQL Server client classes are probably all derived from the Db* classes in .Net, anyway. You may be able to write most of what you want by dealing with those base classes instead.
Not really. Even if you target .NET 4.0, if the machine has 4.6 installed, it'll run on the 4.6 framework. 
Serious question: Why should I use that tool? Why not just code in javascript? I mean, I really love C# and think that javscript is - as a language - pretty bad compared to C#, but if you are familiar with C# you won't have a problem coding in javascript. So is there any benefit to using C# + Duocode instead of Javascript? Except of using C# syntax?
where is your "date" variable?
Apologies! DateTime date = new DateTime(2015, 7, 30);
No, you can't. You avoid it by modifying the registry to use the old JIT (or target 4.0 and *don't* install 4.6)
it's called IntelliSense https://msdn.microsoft.com/en-us/library/hcw1s69b.aspx
Haven't got an answer to your question but those are some great looking charts. Is this open source or for a private project or what? If you've got a GitHub repo I have a star waiting for it!
It really bothers me when developers compare a Boolean value to true or false...
Does UML have any concept that maps directly to C# properties? I'm having trouble thinking of a more idiomatic way to express C# properties in UML.
What version of .net?
Thanks!! It is for a private company but id consider posting most of the graph controls after i clean them up a bit.
That's a really stupid thing to get your panties in a bunch about. 
Why? Sometimes you do it for readability. While I understand the speed of saying if(x){y} else{z}, sometimes it's better to leave in the comparison so that you or your team can easily follow and they don't have to remember if TryParse returns a bool or not. 
Sounds like a business justification to browse Reddit at work to me. What's not intresting about transient errors in Azure SQL anyway?
I came to say this.
Wow, you're right. It's about twice as fast as even my program. Awesome post.
Yet even though UTF-16 is not fixed width, you can treat strings in C# as though they were fixed width most of the time right?
I agree with you. For the most part we avoid using !x for similar reasons, although in personal stuff I find that if I'm reviewing code, I don't tend to miss things. Or use comments as well. But in a professional production environment, I don't use !x.
In that case I really would direct you to AngularBeginner's advice and tell you to reach out to the T.A.s or the professor himself and ask for clarification. 
Comparing to `false` is readable. Perhaps more readable than `!`. Comparing to `true` though, I agree, is too much clutter. 
Why don't you post some of your code here? It depends a lot on what kind of code you are writing. Ie, ASP.NET has a very different style than Windows Forms or Unity. Is performance more important? Or maintainability? How many developers will see this code? What kind of security considerations are there? 
Instead of using a list, use observable collection for the Key property. Also, your naming is very confusing. Since "Key" is a collection it should be "Keys" and "CEKeys" is a single model, it should be a "CEKey". I don't really understand your other questions, but if you just want to display keys in a list you can bind the ItemsSource property to the observable collection of keys (after setting the data context to the RegKey class).
This is the correct answer. TryParse is really just a "greedy" implementation that will try real hard to give you back anything... however, it doesn't backtrack if it later decides that it's confused. Use TryParseExact if you know the format of the data you're including. As an aside the underlying data for all this comes in through he OS so new version of Windows (or OSX/Linux!) can update their data and cause new confusion. 
&gt; I do not have a way to share it with you github?
Maaaan at a first glance this is so over my head o.O I think I need to look up more on OO. Appreciate the help though. So is this approach always necessary? Or only in certain situations/projects or?
There are *so* many ways to organize code. It's the most important part of programming, IMO. I recently started working on a C# desktop app, and I learned this lesson the hard way. If you're not really well organized, in a week everything becomes so tangled that it takes longer and longer to make changes. The two most useful things that I've learned about for program organization are [MVVM](https://msdn.microsoft.com/en-us/library/Hh848246.aspx) and [Dependency Injection](http://stackoverflow.com/questions/130794/what-is-dependency-injection). They're difficult concepts to truely understand, but once you do they change the way you think about programming. Also, quick plug for [Caliburn.Micro](http://caliburnmicro.com/), best thing that ever happened to my programs.
&gt; The parsing is failing because these cultures have the date separator and time separator are same and that confuse the parser as it parse the string as Time instead of Date and of course this is invalid time I think that is the bug. Norwegian at least use ':' as a time separator. What is strange is that my regional settings claim it indeed is ':' but `CultureInfo.GetCultureInfo("nb-NO").DateTimeFormat.TimeSeparator` states otherwise.
if (DateTime.TryParse(datestring, culture, DateTimeStyles.None, out dateval) == false){ Console.WriteLine("{0}", culture.EnglishName); }
Oh god they are "teaching" WinForms instead of WPF?
Transform your entities into DTOs before sending them out. A library like Automapper makes this pretty easy.
I've been digging some more, and it's not just .NET. This is definitely a Windows regression. Norwegian bokmål uses colon as a time separator, however [GetLocaleInfoEx claims otherwise](http://pastebin.com/hjpBBGQr). ~~So this is definitely not related to .NET or RuyJIT.~~ edit: but the fact that DateTime.Parse and DateTime.TryParse doesn't work for such formats is a .NET issue. This should be a list of locales with the issue: * fi * fi-FI * nb * nb-NO * nb-SJ * no * sr * sr-Cyrl-XK * sr-Latn * sr-Latn-ME * sr-Latn-RS * sr-Latn-XK So basically Finnish, ~~Norwegian~~ Norwegian Bokmål and Serbian. **Interestingly Nynorsk (nn-NO) is not affected.**
Properties are language specific, what UML has are members and methods. Methods are mapped to methods, so that's fairly straightforward. Members can either be mapped to a private field, a public property, or any combination of the two, UML doesn't really care about implementation like that. So when UML has a public member: +FirstName : String Then in C# we'd map that to a property: public string FirstName { get; set; } In java we'd map it to a field and setter/getter: private string firstName; public void SetFirstName(); public void GetFirstName();
Because you need to run the code. You have to build a new class, and method with the string code. Then execute that code. You can then use the inputted string in the method just as if it were written right in the code itself. Make sure to use try catch blocks just in case!
One of the more common and efficient algorithms for parsing a math expression is the shunting yard algorithm. It's not too hard to implement once you've got a good handle on how it works: https://en.wikipedia.org/wiki/Shunting-yard_algorithm If using regex is a requirement though (or you're just trying to gain experience with them), you might want to try a divide-and-conquer approach. You can use regex to break apart the equation one operation at a time, and then use recursion to parse each smaller chunk until they're so small that parsing is trivial. For example, one of the things your parse() method might search for is the "\*" (multiplication) operator. If you find it, you recursively call parse() on the bit before the "\*" and again on the bit after the "\*", and then multiply the two results together. You have to be a little careful which regex/operations you try first, or your order of operations will be off (counter-intuitively, you have to search for lower-precedence operators like + and - before higher precedence ones like \* and /). You also have to be careful with parenthesis, but the same approach applies: use a regex to match only the outermost pair of parenthesis, and then recurse on whatever you find inside them. You can then replace the parenthesis with whatever they evaluated to, and continue parsing the larger equation as usual. Hope this helps, good luck! Edit - formatting
I would submit this as a pull request so people can comment on your code. Also, in general with MS template programming you do not want to do anything or very little in a code behind. And why WinForms and not WPF? Or at least using binding instead of property assignment?
So if you're up to a challenge you could try [Antlr4](http://www.antlr.org). It uses a regex like syntax to parse any string into a tree structure, and then you can parse that tree in your favorite language. Building a calculator is actually a fairly common exercise to get used to Anlt4, so you should be able to find plenty of examples. 
WinForms just seems easier and faster :/ 
For what it's worth, I had to write a symbolic calculator type program from scratch for a class and I ended up using shunting yard. If all you need to do is get a final result in numeric form, it should be pretty doable. Once you get shunting yard working all you have to do is walk down a stack doing the correct operation. If you need to actually be able to manipulate/simplify the math (logarithms, square roots, etc), then there will be a whole other level of the program for that aspect. It's been a while, but I ended up using a fair amount of polymorphism with classes like "term", "polynomial", "rational", "logarithm", "power", "constant", etc. That way a number like 1/3 was saved as a rational and could be later manipulated without losing any precision. The end result was a working program, but an admittedly messy one. I didn't know how to do a lot of it without actually checking for type (but that is largely due to my lack of understanding of polymorphism at the time).
That's only because you're used to it. WPF also requires a bit of thought on how you want your actual UI laid out, but once you start actually writing it becomes much faster and much more powerful than WinForms.
This is going to be necessary if you plan to write code professionally. Obviously just starting out no one will expect you to write like that. I have been programming for over 10 years now and it just started to look really clean in the last 3. You will start to understand why its written this way when you start using Dependency Injection and writing Unit Tests. It helps keep code maintainable, organized and testable. I really did take this a step beyond normal OO, but you will get to this point if you keep trying to improve your code.
Regex can't deal with nested constructions and don't have any infinite counter. So when you see language with recursion, you can't handle it with only regex.
how is async a headache? So I guess I haven't completely understand async. This is what I believe: when a method is asyc it creates its own Thread _(Task)_ which then handles the method. The new Thread processes all commands taht are within athe async-method and terminates itself after the method finishes. It's recommened to make async Events for ButtonClick and such so the UI wont freeze on click I'm not having problems with async. I love the concept but maybe I'm compeletely wrong about it
We are making an effort to better align the locale data with CLDR (Common Locale Data Repository - http://cldr.unicode.org/), which is why you see some of these changes, and so many new cultures. As whildybeast mentions, the data can change on various OS implementations. Or even user overrides. Or custom locales. 
And async doesn't even need to involve tasks, just something that is awaitable.
This is why I give the users the option to override the culture. It's not uncommon to see a Windows PC in France configured to UK or US English but I want to have all reports etc consistent. Additionally we also offer a 'cloud' solution using 2X (similar to Citrix). One server might have users from different countries.
The dispatcher isn't involved in the first chunk at all, so it always runs on its parent's thread. Otherwise, it uses the thread pool or the current synchronization context, if one is set.
The generated state machine is general and thus over complicated for simple situations with a single await in the middle, say. That situation isn't really complicated. Anything without loops or exception handling isn't. 
I skipped over that bit because I was getting long. The main UI thread has it's own special dispatcher that behaves a little different than the "normal" dispatcher. Basically it just has an affinity for the UI thread because so much UI stuff isn't thread safe. As you brought up though, it's relatively easy accidentally end up on another thread if you're not careful (though Task.Run being called from the UI thread should dispatch through it's special dispatcher and stay on that thread). Edit: I should add, there's lots of occasions where this is good to understand because you might want to break out of the UI thread to do some non-UI stuff (make a web service or database call for instance) but don't want to keep the UI thread busy while that chunk of code runs. There are different ways to do this and it seems best practices change every couple months, so I don't want to try and talk about the specifics (and probably end up looking like an idiot).
Supposedly, but I haven't had a chance to dig into it yet. I've only been using VS 2015 for a couple of weeks and all of my errors have been in the Web API layer. 
 myMenu.AddMenuItem("Thing1", () =&gt; { Console.WriteLine("Thing1"); return true; }); &gt; Specify zero input parameters with empty parentheses From: https://msdn.microsoft.com/en-us/library/bb397687.aspx
Is there a good place to read about all of this? I find knowing all the fine points of how stuff like this works really helps.
I've learned it the hard way, by debugging stuff that isn't working the way I expected it to. I'm sure what you're looking for exists, but I'm too stubborn a person to know about them.
I would wager that the professor in question really likes Java or at least is most familiar with it. When I was in school the "official" language was Java but our OOP class used Python because the professor had a deeper understanding of it and was better able to teach and answer questions about the OOP concepts with it.
People are over-complicating async/await for some reason and digging deep into it's structure when it's meant to be a simple wrapper for easy usage of ~~threading~~ asynchronous programming. Forget about all tutorials and watch this video: https://channel9.msdn.com/Events/Build/2012/3-011 I assure you that you will understand async/await 10x better than reading any other complicated tutorial.
How so?
Better?
Much better! It seems like a nitpick but it's actually a really important distinction - people really seem to struggle to grasp the distinction between asynchronous programming and threading. They aren't mutually exclusive but they absolutely aren't the same.
Definitely not orthogonal, but not identical of course. New console app, new async method with an await delay in the middle: Second half of method executes in a worker pool thread.
That's really just an implementation detail of the continuation though - what *doesn't* consume a thread is the asynchronous part, i.e. the delay itself. That's where people get confused.
Let me Google that for you: http://lmgtfy.com/?q=c%23+find+position+of+word+in+string
Found this on the interwebs: string q = " Hello how are you doing?"; string a = String.Join(" ", q.Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries)); http://stackoverflow.com/a/26414385/1582732
Using Thread.Sleep to wait for a task to complete... Bad guide.
Why would you EVER want to do this?
This was fixed in 2008, if I'm not mistaken. It is now smart enough to know it's talking to the same instance. Edit: SQL2008: Allows multiple connections within a single TransactionScope (as demonstrated in the above sample code.)Caveat #1: If those multiple SqlConnections are nested, that is, two or more SqlConnections are opened at the same time, TransactionScope will immediately escalate to DTC.Caveat #2: If an additional SqlConnection is opened to a different 'durable resource' (ie: a different SQL Server,) it will immediately escalate to DTC SQL2005: Does not allow multiple connections within a single TransactionScope, period. It will escalate when/if a second SqlConnection is opened. Source : http://stackoverflow.com/questions/1690892/transactionscope-automatically-escalating-to-msdtc-on-some-machines
So, I learn something new maybe again. AA ( I was making another feeble attempt at humor)
Task.Result, FTW.
Use Task.GetAwaiter().GetResult() instead.
You can also do: reSult = await Task.Run(() =&gt; SomeMethod(someParam)).Result
Posted [two years ago](http://redd.it/1cidw5), finally decided to push a release. ChatSharp is an IRC client library that's less stupid than the other ones out there for .NET. It knows what channels you're in, who's got ops and voice and so on in each one, actually handles things like server features on more networks than just Freenode, and doesn't half-ass the protocol implementation. Let me know if you have questions.
&gt; It is once the first await statement is reached that the work initiated by that asynchronous call gets offloaded onto another thread This isn't even necessarily true. If the underlying method is based on native async I/O, for instance, no thread is used.
This is actually how I implemented math in my csharp irc bot. I created a little DSL that is trivially translatable to c# expressions, using the standard math library for some common functions, generating a little static class/method, then compiling and running it on the fly.
Not always. That depends on the `TaskScheduler` (which is **almost** always the `ThreadPoolTaskScheduler`).
Isn't it the same with every non-trivial concept? Can you easily explain what the GC does?
Would you like advice on how to approach the problem or do you just want the answer? (I understand getting tired of looking at a problem)
I've seen the behavior I've described on SQL Server versions newer than 2008. While it should have been fixed, and may be fixed in some CUs, it is not fixed everywhere and developers should be very careful about their usage of TransactionScope, especially if all data access is read only.
&gt; Let me know if you have questions. Why don't you have a single unit test?
I'm guessing English isn't his first language.
No, if you call .Result on a Task returned from an async method in a UI application (without ConfigureAwait(false)), you will *always* get a deadlock because the continuation of the async method will be waiting for the synchronization context that is blocked by the method that - in turn - is blocking on the result of the async method. That, and the fact that .Result will block the thread completely defeats the point of the method being asynchronous in the first place. http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html http://www.ramblingincode.com/await-a-minute-that-isnt-async/ (shameless self-plug)
Looks nice! I wrote a .NET IRC lib some time ago, which seems to have more or less the same goal. [Here](https://bitbucket.org/SolalPirelli/ircsharp/src) is the repo if you're interested. The code is old (it was originally a high school project...), so it might not be super-pretty, but it works. Some ideas: * Look at the [command handlers](https://bitbucket.org/SolalPirelli/ircsharp/src/ed38c62bb713843c298c1cdc0a822854b1afb53a/IrcSharp/IrcClient.CommandHandlers.cs?at=stable) in my code marked as `IsCompatibilityCommand = true` (at the beginning of the file). They deal with the non-RFC-compliant messages some servers send, based on my personal experience. Perhaps servers have been updated since I wrote this code, but if they haven't, you'll find it useful. * Consider providing an [ident server](https://bitbucket.org/SolalPirelli/ircsharp/src/ed38c62bb713843c298c1cdc0a822854b1afb53a/IrcSharp/IdentServer.cs?at=stable). It's a stupid little piece of code that answers ident queries on port 113. It doesn't actually provide security for auth, but it makes IRC connections instant, because you don't have to wait for the ~10 seconds ident timeout when connecting. (you might need to configure NAT to allow it) * One design choice I made was to group channel stuff (events, methods, ...) on the channel objects, and user stuff on the user objects. The "IRC network" object has events to signal new channels/users being discovered. IMHO this is better given most use-cases for an IRC lib - either a bot that monitors channels (and handles them independently), or a client that displays channels/users in separate tabs. * CTCP support is not that hard to add (despite the [not-so-clear spec](http://www.irchelp.org/irchelp/rfc/ctcpspec.html) and the absurd quoting system), and it's nice to have. DCC on the other hand... good luck... I still think it's impossible to provide a sane IRC library, because the protocol itself is insane, and its server implementations even more so.
I remember your original post. That was *two years ago*? Wow...
that code will return a string with only a single space between each word.
Not only UI, also asp.net.
An implementation detail that's pretty much always used, so important to know about in practice. But yes, the delay function shipped with the framework of course doesn't block the thread. 
By default, it doesn't run the rest on the original thread; that's impossible as that thread is entirely in your control. It posts to a thread pool thread. If you're in a GUI app on the GUI-dispatcher thread, it does return to that thread, via a synchronization context. It happens when the user gives up control of the thread (by returning to the GUI main loop of the framework).
Wow, I actually just read Stephen Cleary's article "There is no thread" and you're right, I had no idea. Thanks for the info!
Because I started this project before I was sold on unit tests. It's not something that I think every project has to have, though.
The example code ends with: while (true) ; // Waste CPU cycles It's just an example, it's not meant to be the basis of an actual bot :)
The so responses are accurate. You want to write to something that can't be written to. You'll need to use the upload. 
Just read what people said to you. You can not write to a response stream, it's even bolded in the answer. You need to make a new request to notify the server: "Hey, I want you to modify this the way I just sent to you."
the problem is that I do not know how to do a new stream just to write, could you help me with that?
The difficulty comes from using a remote service - SharePoint in this case. Remote services use a variety of protocols to allow for interaction - generally the best thing to do is to use the official API and libraries which wraps these protocols. I'm not familiar with SharePoint but it looks like there are a few choices of API (see https://msdn.microsoft.com/en-us/library/hh313619.aspx). If I was in your shoes I would look for an official library to plug into your code on the SharePoint developer site. This is probably a good place to start https://msdn.microsoft.com/en-us/library/office/dn833469 Some extra information: you are actually using with you code example the REST API (see the first link above) which is a widely used protocol all over the web. The code makes a GET request which downloads the file to your computer. What you would typically do then is to edit this local copy and then issue a PUT request to send the edited copy back to the server. It seems complex because you have decided to implement all this manually! There are undoubtedly general REST libraries available for you to use the SharePoint API but I would recommend using the official SharePoint C# library since this will accommodate any non-standard aspects of the SharePoint interface.
I accept pull requests :)
Hi thanks for replying!, I do have access to edit and upload files through the browser. Then on my code, I was able to use STREAM to read the file without the need to download any file to my local folder, the idea was to continue the approach and write in the same way. So I tried to use different libraries but so far none has been helpful :(
Well, it's your loss.
I have seen the code. It is not.
To the point of your post's title, it's not difficult to read/write files in c#. Your difficulty is coming from needing to also save the file to a remote location. Maybe you should start with just doing everything you need to do to the file from a local directory. After you've got that working worry about putting it back to the SharePoint server.
&gt; I've intentionally not done CTCP or DCC yet. I imagine that if I ever do, it'll be crazy. CTCP is fairly standardized, the only difficult part is the quoting system, which not only includes two levels of quoting, but also multiple messages within a message. Why anybody thought that useful is beyond me. DCC on the other hand is all but impossible to support in a general way, many clients have their own undocumented file transfer commands. &gt; That's the idea. Provide an abstraction that hides the insane parts from you. IMHO there are two big roadblocks in the protocol itself. The first is the lack of standardization on prefixes for channels and users. IIRC, there are prefixes that can mean a channel on one network or a user on another. If the server sends its info message correctly, you're fine, but otherwise, there's nothing anybody can do. The second is the lack of sequence IDs in messages. If you send a command and receive something shortly after, you can't know whether it's a reply to your command or something entirely unrelated. It could be that your original command got lost, and the server sends you an error for another reason. Or maybe your command was handled properly but is invalid, and the server sends you an error because of it. There's no way to know. :/
This is not a C# issue more than how HTTP works. The stream you are reading from is part of a context of your client requesting from the server the file data. The server needs to know that you are sending it data, just pushing it back in the same context will not work.
I just wish there was something as easy as creating a new stream just to write, without the need of using a local file or something like that
Oh, I thought you were commenting on his writing.
No, not really. But you can save it your applications local data folder in the user profile to get it out of the way. See Environment.GetFolderPath. 
In many cases, a cancellation token is better.
Look at his second code example. Look at the indentation and the empty lines. This is an issue with all his code. If he doesn't even spend the 5 minutes to make the code visually appealing, why bother reading his post? He clearly does not bother.
That's what I'm thinking, but as the project I'm working on is extremely important, I can't risk wasting time making changes that don't work.
It is never the controller/view models that take me a long time to create. It is the Views themselves that annoy me. And don't tell me to use T4 templates. They are bloated.
Your EDIT is basically what I did in my post. TransactionScope is a unit of work in my mind. I'm not sure why you think it isn't.
Also for anyone wondering, it's not a .mvc application, just a regular windows forms 
Still a complete newbie myself but wouldn't it be easier to have a calculator class with those functions in it?
This does look functional the way you have implemented it and given that the task is quite calculation (rather than model) focussed, it might work better using a functional approach. However it can be made much more OO to gain some benefits. If you want to use a more OO approach then implement some SOLID principles. For example, this includes passing in the `TaxCalculator` and `DiscountCalculator` as parameters rather than defining them in the class. Also, depending on the number of variations, you might want to define hierarchies to represent the data rather than having arbitrary values passed in code. E.g. rather than make a function that accepts any rate for tax calculation, you determine that there are maybe 4 tax brackets and so you create a parent class which is `TaxCalculatorBase` and then derive five child classes such as `TaxBracketACalculator`, `TaxBracketBCalculator`, `TaxBracketCCalculator` and `TaxBracketDCalculator`. In the constructor of these they would take an object that implements `ITaxSchema` interface, and then you pass around an instance of `TaxSchema2015` to the objects etc. etc. This might seem like a lot of unnecessary code but there are benefits e.g. it means that you can switch in for example a brand new tax schema that is calculated in a totally different way by creating a new class that implements `ITaxSchema` and injecting that in at the top level.
..and Windows 10! :D
The best developers are the laziest developer.
I don't know what your exact use case is, but extension methods may be a better fit. If these functions don't actually take simple types (strings, ints, etc.) but rather take an object then extension methods are the way to go. For anyone that's reading this wondering "what is an extension method?" Go read this. https://msdn.microsoft.com/en-us/library/bb383977.aspx
What do you mean by basics? Try to be more specific with what do you need help with. I used to like http://www.dotnetperls.com/ more then MSDN when I was beginning to learn C#. Here is windows forms stuff http://www.dotnetperls.com/windows 
I really wonder why people like you can't understand the difference between blogging and professional writing.
ValueInjecter gives me better results than automapper for most use cases. No setting up all the mappings. 
So if I understand correctly, the problem arises because they treat the CorrelationManager in a special way and create a deep copy. Why would've this been done in the first place? Things would've worked correctly with a shallow copy right? Is it a remnant from when copy-on-write wasn't supported prior to .NET 4.5?
&gt; they also contain state which means you can reduce the number of parameters that the key methods take. you can close functions over additional parameters to change their signatures without objects, i.e. in javascript: var person = { isStudent : true }; var discountFn = function(volume) { if(person.isStudent &amp;&amp; volume &gt;= 5) return .8; else return 1.0; } you can pass around discountFn, ostensibly as a function of purchase volume, but which is secretly parameterized by the person's student status. by doing this you can have a variety of discount strategies which are polymorphic in their signature, even though they actually depend on more variables. that being said, this is not a stateful function, nor would a class that wraps around this function be stateful - thus the class would still have this weird pattern of being a useless container for a function. (again, this is not a world-ending issue - i've found that stateless functions wrapped in classes are very refactor-friendly. they just violate parsimony.)
You can seek information from a (async) stream but you can't edit the data "on the fly" unless you have a chunk of it. You should google how HTTP work, google for SACK. You don't have to store it on your HDD.
I understand the difference. Does this mean bloggers should not try to keep a minimum level of quality?
I do not consider formatting code equivalent to code quality. But no experienced developer will argue that it does matter.
At it's heart, it is just a diary that is publically visible. Last I checked, most people don't hire copy editors for their dairy. (But hey, if anyone out there wants one both I and my girlfriend do it professionally.)
I'm not saying you can't achieve what I describe using a Functional approach, I'm just demonstrating how a OO programmer might structure the code. C# is first an foremost a OO language (although it is getting more functional features). You can implement a functional approach in C# but you will have to stick to self imposed conventions to keep it 'semi-pure' functional whereas F# is geared towards a more functional approach out-of-the box and so will include lots of niceties to make your life easier. An example is mutability. The example you gave is not really pure functional since the `person` object in JS is mutable. Although `person` is closed on at declaration, the `isStudent` property is not and so there could well be a situation where the function is run twice and give different results with the same given `volume` parameter. I don't know F# but I imagine it provides a lot of immutable types, immutable keywords etc. for you to work with and will demonstrate these in the examples, enforce them with static checking etc. and will generally make you life easy to follow a more functional paradigm.
That's the new norm. I didn't write the rules.
Pluralsight is worth the price in my opinion.
You can upload a file via the UI but not via API? I know nothing about Spoint, but that seems odd.
Seriously, I'd just ignore that. It's Windows Forms which are seriously out of date. 
/r/titlegore
 F#, what is this ? a script language or some thing ?
It's a functional programming language that uses .NET libraries
That's the worst way to write a query. You should redo it in this form: string query = string.format("update customer set title='{0}', [Name]='{1}', ...", titleComboBox2.text, nametextbox2.text, ...); Where ... continues the pattern. {#} matches the index of the parameter supplied after the first string. You will almost instantly be able to find the problem with your query after doing this. What you're doing right now is nonsense.
WPF is nice as it is just a regular desktop app, so it works on every Windows version since Vista out-of-the-box (if you target 3.0). Windows 10 "UWP" apps work only on Windows 10. Windows 8 "Metro" apps and Windows 10 UWP apps are very, very, similar. You can go for W10 app without hesistation. Also, if you know WPF or Silverlight, UWP has many similarities. So you can start with WPF to continue desktop development and jump to UWP when you think it's time to use all cool new things (like live tiles).
Thank you for the explanation. My only gripe is that I read somewhere that Windows 10s apps will not work on earlier versions of Windows, so I might not reach a whole lot of people. But on the other hand, I'm seeing a pretty high adoption rate for the new OS, so it might not be a huge problem. 
Hmm. Exactly an hour is interesting. It makes me think that the first request keeps a ssl session open maybe, that will only work for an hour. Or something like keep alives are keeping a session open for an hour. What's the life cycle of your webagent? Is that something that could be wrapped in a using and rebuilt every request? 
Possible that the response stream is never closed and something funky is left behind? I've had something similar happen before with requests, although it would happen much sooner than one hour. I was misled because the connections were handled differently while using Fiddler, causing the exception to occur after debugging.
Each type has its own constructor, even if it's inherited. You can only set `A`'s `readonly` fields in `A`'s constructor, `B`'s constructor doesn't replace it. You can solve this by adding the same constructor to `A` and passing in the value from `B`: public abstract class A { public readonly int tID; public A(int _c) { tID = _c; } } public class B : A { public B(int _c) : base(_c) { } } Alternatively, if you only want to prevent external modification of the value and don't need readonly semantics, use a property instead of a field so you can allow deriving types to modify it: public abstract class A { public int tID { public get; protected set; } } public class B : A { public B(int _c) { tID = _c; } } 
Have you checked the cookies? Not sure but I know cookies can have a short lifespan, not sure how long the typical ssl session is good for? Another approach might be create a new _webAgent for each call or group of calls (and properly dispose of it when you are done with your requests), the overhead would be minimal compared to the web request.
Thanks, this is pretty helpful. I also converted it to PDF for offline viewing
[Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/) they have a section for Beginners.
Do you actually want to kill it or just hide it? It sounds like the form.Hide() command would be useful. Then just form.Show() to bring it back (not 100% sure that the syntax is correct, but you get the idea).
Thanks guys, Ill definitely start with this!
I think I've seen some programs act very similar to what you're describing (if I'm reading it right). When a new update comes out while the program loads it'll say something along the lines of "hold on, upgrading your data"). if the issue is startup times for the application then maybe only upgrade the data as it's needed if plausible. This won't work in all situations of course but it really depends what the data is being used for and when. 
You are right, that wouldn't work as using form1.Close would end the whole program. I ended up just using form1.hide and form1.show. Thanks!
Get Visual Studio 2015, it's free.
I think you are looking for doubleClick event handling. What do you want to happen when you double click a paragraph?
But then the bug is unrelated to async/await and it would be the same problem when starting a new thread. 
http://www.robmiles.com/c-yellow-book/ Get visual studio and that free ebook. 
I doubt cookies make a difference as IIRC they aren't interesting when creating a SSL/TLS channel. Creating a new web agent is only possible when I completely log into reddit again; which I'm already doing and does not change anything. As I said the exception is actually thrown well into the external lib of which I have source code and already cleaned up a bit by disposing streams and using statements. The overhead of a login is up to 5 seconds, which is completely in the external lib, noticeable but could be worse.
I checked the lib I'm using and added some using/dispose statements after using streams but the error persists. The lib actually cleans up nicely already and leaves little behind, I have no idea what could be wrong here...
I find that, if you're a visual learner, YouTube is the place to be. There are a huge number of tutorials focused on the basics of C#. Just search for "C# tutorials" and you'll get your pick. 
www.dotnetpearls.com is the best website I know of for C# basics. For example: http://www.dotnetperls.com/treeview
Much like that comment. It'd help if you explained the problems you had with it. :p
I find Head First books seem so wrapped up in the "comic style" the explanations suffer from it.
I read the book on Design Patterns and haven't read the C# one. I kind of get what you mean, but I have absolutely no idea how it makes the book "useless". Is it cheesy? Yes, cheesy as hell. However, the explanations were just fine, they illustrated what they were supposed to, and I personally learned a hell of a lot from it.
That was just an example :P. Lets look on it from a different point of view. Someone creates an application and want to sell it for money. He just created it and want other to use it. You can't tell the customers to lower their sensitivity. They would just complain and never use it again. So there must be a possibility to do something against over sensitiv AV's. :/
This is a great tutorial series if you're ok understanding an Indian accent - very little fluff, just straight and to the point on many different concepts: https://www.youtube.com/watch?v=SXmVym6L8dw&amp;list=PLAC325451207E3105
OP, a post title like "Find word number in string" or similar is much better than "Help please" or "I can't get this to work" etc. etc.
There are free OpenXML libraries out there. We use it in our internal system at work, but I don't know the details.
I'd also like to start with C#, but somehow I can never bring myself to actually do it. I have 3 years of experience in VBA, I understand the concept of types, classes (let/get), events (mostly for Office programs and IE), calls to Windows API, I rely on google-fu when I'm in trouble, but I just need a nudge from you and some comforting that I will be ok and that it's not that different from VBA.
Reading up tutorials on the web is always a good place to start. My suggestion though is to set a simple goal for yourself and then try to accomplish this goal by finding thr information necessary. An example would be to start with making a console application, a mini-dungeon like game. Where you enter different numbers or keys to do something simple. Could be something as: "Do you want to wander into the dark forest? There may be lots of unexpected dangers." Then have the options 1: Yes, 2: No. Each action resulting with a descriptive text. Of course, you can do anything you want. But it is always a fun experience for amy newcomer :-)
&gt; figure out how to add exceptions rather than posting here. Did you even read his question? &gt; I can whitelist it but if this .exe gets send to someone else it will also get blocked. That's his problem. He already knows how to add an exception, what he's asking is how to keep the program from being flagged in the first place.
It could also be very well that you have a trojan installed that will inject itself to new exe files. So when you send it to others you're infecting them. Did you verify that you are clean and that your files are actually clean (online scanners)?
It could be. But I don't think so. I just reinstalled windows 10 and just standard applications. So I can never be 100% sure but it is very unlikely. Virus Total doesn't throw any problems either. 
Thank you for that link, sir... -just lurking here :)
Podcasts/Pluralsight. You can learn while you're walking the dog.
A little out of my element as I use a control library so I don't use the DataGrid very much at all but have a look at this example: http://www.dominicshaw.net/WpfApplication1.rar Run it and sort by the last column - new rows will be added every two seconds - the selection stays the same and is bound to a property and the sort keeps up to date - is this close to what you want?
I changed everything. I used the RichTextBlock and added every paragraph to the `.Blocks` collection, but it still didn't help. The app still crashes when I scroll too much, so the question is no longer accurate. Thanks for replying though.
This is what I'm looking for... and I can't figure out why it won't sort. I removed the CollectionViewSource and have the DataGrid bound directly to the ObservableCollection of items now. I have absolutely no idea why it won't auto-sort... the column does stay selected. http://pastebin.com/qPvXTgY3 The only difference I could find was you were using Timer instead of DispatcherTimer. I swapped to Timer (to test it) and used the same *new Timer(ob =&gt; AddItem(), null, (int) new TimeSpan(0, 0, 0, 2).TotalMilliseconds, Timeout.Infinite);* but the result was the same - it won't autosort. Edit: Okay... I think I figured out why it's NOT working. I'm not ADDING items to the ObservableCollection, I'm MODIFYING them. If I set the Timer to add items, it does resort based on the new item. But modifying EXISTING items does not update the DataGrid's sorting. The object (TwitchChannel) does extend INotifyPropertyChanged and the properties do have OnPropertyChanged()...
So how did the interview go? What kind of questions for they ask?
And SQL Server Express.
Yeah I literally have no idea what they're trying to convey other than watch this video. 
[Learn these](http://www.dofactory.com/net/design-patterns), please. Most developers are completely oblivious to the engineering portion of writing code and write solutions that are beyond ::insert buzzword here:: Learn to properly engineer your code and use design patterns. Even from a conceptual level having knowledge of these are of immense value. 
Ah I see - this is about live shaping then - my control library handles this for me so I haven't had to worry about it, but take a look at this: http://stackoverflow.com/questions/17865202/implementing-icollectionviewliveshaping/17906815#17906815 Hopefully that will help Edit: this is new to .NET 4.5/4.6. [You should be cautious with 4.6 in production.](http://nickcraver.com/blog/2015/07/27/why-you-should-wait-on-dotnet-46/)
&gt; Learn to properly engineer your code The OP doesn't have any code. He needs to learn to code before he can properly engineer it, so design patterns are a poor place to start. 
get you some Bob Tabor!! https://www.microsoftvirtualacademy.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-8295
You're missing a bracket to close the Turning() method. There should be 3 closing brackets.. I only see 2. 
I wound up using this method - https://www.reddit.com/r/csharp/comments/3fm5n1/wpf_mvvm_retaining_datagrid_selection_during_a/ctpxwh3 - and it works great. Live shaping looks interesting, I messed with it some but it felt like that one out of every 5-6 refreshes I'd lose focus anyway for some reason. I'll need to investigate that...
?
I don't understand sorry (its my first code) and I don't know which turning and how to fix it, there are also 10 other errors and I am confused
Thank you - I'm going to hold on to that sample for future reference if that's okay :) Edit: Also, holy crap, that's a huge bug in 4.6. I'm still using 4.5 for now, so it won't affect me, but wow that is potentially a big problem.
Change: if (Physics.Raycast (camRay, out floorHit, camRayLength, floormask)) { { To: if (Physics.Raycast (camRay, out floorHit, camRayLength, floormask)) { (notice I removed the "{" that was at the end of the "if" line) There's a chance once you fix this, some or all of the other errors you're seeing will be resolved.
I was in your position before I dived into C# - I'd spent a couple of years working with VBA and writing applications for the Office suite; but I longed for a better language. I read Rob Miles' fantastic, yet free, C# Yellow Book (http://www.robmiles.com/c-yellow-book/) - the writing had the right balance of fact and humour for my taste, and C# and Object Orientated programming were a refreshing change to VBA's 'nuances'.
https://connect.microsoft.com/VisualStudio/Feedback/Details/1621722 ^ Connect bug
Yeh - I'm sure they'll sort it out but it was a bit of a shock to read about!
MSDN (Microsoft Developer Network) is a great resource for C# stuff, here are some links pertaining to C# that I frequent when doing C# development. They go from absolute beginners to super advanced. You can also rely on them having the correct and up to date information, which can't be said for many tutorials on the web. [C# Tutorials](http://bit.ly/1GWLYpq) [C# Programming Guide](https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx) [C# Language Reference](https://msdn.microsoft.com/en-us/library/618ayhy6.aspx)
ETW2JSON: https://github.com/ETWTools/ETW2JSON ETW2SQLite: https://github.com/ETWTools/ETW2SQLite The motivation for these tools is to make Windows system instrumentation data more accessible.
Thank you, I'll definitely read it :)
No.
What's ETW?
Thanks all 
It won't let me install with XP. :(
Well at least now I feel better about the ERP system I develop :D
Definitely start with Bob Tabor's $159 lifetime membership, everything you need to know about C# and .NET: http://www.learnvisualstudio.net/
&gt; The problem is, we occasionally have the need to have scripts that either pull inconsistent requests, from higher ups, of data or data changes that are still on the backlog. I don't really follow this problem. What is an "inconsistent request" and "data" still on the backlog? 
You sound like a person who knows what's happening. The MSDN Convert.ToDateTime(string) page says: *If value contains only a date and no time, this method assumes a time of midnight.* https://msdn.microsoft.com/en-us/library/xhz1w05e(v=vs.110).aspx This is not the case for Norwegian etc. I feel this is a bug. Can you recommend the best place to report this? (I have a MSDN subscription).
That's a good thing to do, especially if you end up naming your method something useful. I feel the API designers should at the *very* least have defined default values for all those essentially optional parameters GetRows(string whereClauseJobHead = "", string whereClauseJobHeadAttch = "", ... Then the design is still bad, but it makes calling the method a lot more readable. GetRows(whereClauseJobHead: "some query", someOtherParameter: "qwerty", morePages: out morePages); In this case I take it there's not much you can do to get the API changed into something more usable? Your solution is probably the best thing you can do in that case, so that you can pretend that horrible API doesn't exist in your own code, essentially. The way this API is designed is probably an indication of a larger mess in that code base...
Show them to us. I want to see this dark side of programming. :D 
normal, maybe not. Common, yes. Good, no.
Why the hell are you running XP ?
You already answered you're own question, but I have a suggestion... I recommend using [ObjectListView](http://objectlistview.sourceforge.net/cs/index.html) (it's available on NuGet). Check out the "CookBook" link for great advice on faq type stuff. ObjectListView is great because you can give it a List of any object and and very easily show any/all aspects of that data. I use it all the time. The TreeListView variant is great when you need a tree too.
Oh god... Why does this exist...
Hanselminutes MsDevShow Coding Blocks
The only place where we have more than 6 or 7 parameters is in constructors for classes created out of our container. Anything more than that is wrapped into a class or struct. instead of something like: jobds = jobretriever.GetRows("JobClosed = false AND JobReleased = true AND Number01 = " + dept, "", "", "", "", "", "", "", "", "", "", "", "","", "", "", "", "", "", "", "", "", "", "", 0, 0, out morePages); I'd do something like: jobds = jobretriever.GetRows(new JobQuery { DynamicWhere = "JobClosed = false AND JobReleased = true AND Number01 = " + dept }, 0, 0, out morePages); 
I think you're out of your league with this code. You need to start with more basic stuff. 
JustDecompile led me to [this definition](http://i.imgur.com/bamgClV.png). I've gone as far as I want to down the rabbit hole... 
What does this have to do with C#?
I forget syntax all the time. I rely on Intellisense and/or Google constantly. I'd be screwed if the Internet connection went down when I was working. I've been developing software for almost 30 years professionally and close to 40 total. In the days before the Internet I had manuals on hand all the time. That's why I used to hate taking Microsoft certification exams where the questions were syntax-related. I don't need to KNOW the exact syntax. I can always look it up. Ask me about concepts, not syntax.
Nice. Thanks sir!
nvm, I stand corrected. Looks like he has been updating it again.
Ive been working with C# and Visual C++. Google is always open on one half of the screen. And just if youre curious C# because i like it since learning it this past year and C++ because ill need it for my final year of uni this coming Sept
I can't speak for other guys, but I have a terrible memory. Fortunately computers and the Internet have terrific memories so I don't need to. I save my memory for useless facts that I can drive my wife nuts with instead of remembering birthdays and things :)
Oh man, we wrote our own MES to replace Epicor's. 99% of shop data entry is done through our own in house software. MY MES uses a separate thread for data processing so we don't have shop workers standing at a station waiting for the server to finish processing. A lot of stuff we use ODBC for, but anything that *changes* data almost has to be done via the Business Objects, since the triggers are done via software and not the DB. Really risk screwing the pooch doing writes via ODBC.
Lol. This is Epicor. No, it's not normal.
Yeah, C++ is not my cup of tea but when i go to uni i will have to take some classes on it by requirement. Guess it cannot be that bad...
Is the ParameterSet class something you made on your own? I'm a begginer, so I might just not know about this, but if it is yours I'd like to maybe have a look at it, it sounds very useful.
Oh no. That API is awful. I'm sorry that you have to deal with that.
I can't seem to remember how to do a 'switch'. I just keep my C# Pocket Reference close by for when I forget things like that. Or I open up a project where I know I used something I can't currently remember.
I just set this up yesterday, in fact. * Download the [Productivity Power Tools 2015](https://visualstudiogallery.msdn.microsoft.com/34ebc6a2-2777-421d-8914-e29c1dfa7f5d). * When installed, go to Tools--&gt;Options, find Productivity Power Tools on the left (it's a major category). * Click on the little triangle next to the name, and click on "Power Commands". * Select "Format document on save". (You may want to select "Remove and Sort Usings on save"; some like that option, some don't.) Now whenever you save, the code in the active window will be (re-)formatted. Note that if someone else on your project does *not* use this extension, you may get into a format war wherein the formatting will constantly be changing. I recommend going all or none with this extension.
WooHoo! Thanks for that, I had that installed in the last version and forgot to update it in 2015. 
&gt; C# Pocket Reference The unsung hero of C# books.
Arrays are my syntax nemesis. I tend to use other data structures, but when I need a basic array, I forget the syntax half the time. I first used C# when it was still at Beta 2, so this isn't a newcomer issue - just a mental stigma.
Thanks! Its a great plugin.
Well, why don't you talk to your manager?
It's GPLv3, so if you want to use this in a commercial application, make sure to contact the author about licensing terms.
I don't know about couldn't work that way, but I would refuse to work for someone that doesn't allow me the autonomy to work with my machine as I wish. Same goes for the internet as well. Nothing pisses me off more than trying to download an new interesting library only have the the site be blocked by my employer. Thankfully, I have only had to leave one job for this reason. To me, these kinds of actions speak volumes about how your employer views their employees.
When I start a new job, or get a new computer, that's the first thing I get enabled. At my billing rate, the firm can't afford for me to be waiting for the helpdesk to respond on requests for product updates, installing Windows features, etc. 
It looks like 90% of the parameters perform a `where col == X` for each individual row of the table so even then there are better solutions than a complex type. Not that I'd expect an enterprise company to write a LINQ provider for their API...
Yeah. This is close to the approach I ended up taking, along with Wiezy's recommendation. The bottom line was that I didn't want to keep useless update code lingering around in my project, since after a year or two it could amount to a bloated mess. On the other hand, implementing some kind of downloadable script or serialized fix seemed too difficult to implement to be worthwhile. What I ended up doing was reconfiguring my project with conditional compilation symbols, to allow for different entry points, one for the main program and the other to be used with an optional library to build customized patch executables with access to all of the functionality of the main program. Then I just manually get the file bytes of the compiled executable and upload the raw binary data to a secondary distribution system (luckily this was already in place, otherwise it might not have been worth it). From there it wasn't so bad to make the main application download the binary patch data and load it as an assembly to be executed. I have no idea if this is considered "best" practice so I'm open to suggestions, but so far it's worked out pretty smoothly.
Good point. I did end up using a kind of version checking to keep track of obsolete patches.
I've waited a total of a week and a half before at one client. Waiting on the help desk, cause if couldn't have admin rights..
I wouldn't say this is a common thing. When it comes to syntax, I don't find myself forgetting much. If its architecture patterns, or common best practices, still easy to remember. I tend to forget the stuff I haven't done in a year or more. With that being said, I still google the hell out of javascript/jquery stuff because I simply haven't taken the time to internalize it.
I'm currently at my first job out of college and have admin rights on my machine. This will be my first question in interviews going forward. There is no way I will work in an environment without control over my PC.
A couple companies back, we hired an IT guy who talked a great game but barely knew enough to use Google. We were only about 100 people, but the organization was hyper-political. The directors insisted on personally interviewing and choosing the head of IT (a department of 3 people), despite knowing nothing about the subject. So Mr. Ignoramus the new head of IT decided that nobody -- including software developers -- should have admin rights on their workstations. If you wanted software, you had to submit a formal request to IT and then wait for a week or two... assuming he and his two incredibly incompetent flunkies ever got to it. Which is not to say that they failed to install *some* software. In fact, they made a point of installing both an invasive remote management system *and* an extensive, slow, paranoid anti-malware system on everyone's machine. Further, If you happened to have an installation of something that Ignoramus didn't recognize or hadn't authorized, you could expect his people to uninstall it for you within short order. (I had no idea WinRAR was such a pernicious piece of code, until he wiped it from my machine one morning with a rant about how the company couldn't afford this kind of risk.) Unfortunately, Mr. Ignoramus wasn't particularly good with the parts of his job that would've actually justified his presence. We learned this one morning when he announced quite casually that one of the servers in the rack had gone down, taking our TFS repository with it. No problem, though, because the data was on a RAID, right? Well, not exactly. Mr. Ignoramus didn't "trust" RAIDs. (I suspect that after the meeting he frantically Googled the term "RAID" in private.) Okay, but the respository was backed up *somewhere*, right? Er, no, not really. Mr. Ignoramus hadn't gotten around to it, after being with the company for only a year. But really, what could the software development department have possibly lost? As it turned out, we lost only about six months of work. We managed to rescue the majority of our company's intellectual property by combing through every developer's hard drive and copying any of it he or she had happened to save. I suppose we were fortunate that Ignoramus hadn't yet been allowed to carry out his master IT security plan of forcing everyone to work from data on central servers and prohibiting the storage of any document (including code) on local HDs. Nevertheless, because Mr. Ignoramus talked an excellent game and had buddied up to the directors, he kept his job. Though much to his rage, Software Development did manage to score its own repository server, isolated from the Ignoramus network and backed up off-site.
Could i, as in is it feasibly possible? Yes. Would i? No. I demand administrator privileges to my machine. If you demand maximum security my administrator privileges could be provided to a VM that is blocked from the local network. I still likely wouldn't work here short of $200/hr minimum. 
None of that justifies the utter retardedness of passing idiotic SQL around *in strings* like a fucking caveman from the 50's instead of using a properly designed, strongly typed Domain Object Model. Delete all that horrible crap and use Entity Framework.
&gt; I should rewrite the entire API &gt; You understand that the above isn't my code, right? No, the owner / responsible for that horrible abortion should be either beaten to death or forced to fix that crap in a non-stop bezerk coding marathon involving forced fed drugs to keep them awake. You should really run away from there. Quickly. 
I currently work for a conservative company in the midwest and I have had admin rights since day one. As long as they have a security and AV suite on the device, I am not really sure why they are not okay giving you admin on your local. Some managers do not understand the difference between developers and data enterers(sp). Or maybe I just think too highly of my coder-kin?
I had to fight (kind of) to get access to remote from home using their browser based VM software. It came down to me telling my management that information security saying, "we cannot do that" is not acceptable. That I either need those rights or pull me off of the system I was maintaining because I refuse to drive 20 minutes to work every time I get a phone call about a job going down.
Local admin? A must. Network admin? That requires trust. If they can't trust you to not break your local machine, how can they expect you to develop software on a larger scale? There are so many tools and things that you'll want to be able to install or test with / against that not being able to do so is crazy. Also you need to have a valid dev or at least test environment and not go straight live.
So instead of invasive device management software on a company computer you'd prefer to have it installed on your computer? No thanks.
&gt; "JobClosed = false AND JobReleased = true AND Number01 = " + dept [Little Bobbie Tables](https://xkcd.com/327/), anyone? You might want to check out SQL Injection and parameter inputs to ADO.NET EDIT: Not trying to be patronising, but if it is something you aren't aware of, it's a huge security risk to concatenate strings into a SQL WHERE clause. EDIT 2: From the Reflector code below, it appears the API has been written (awfully) to handle parameters, so you might want to check if your dept SQL parameter can be passed to one of the other pleathora of function parameters
[Image](http://imgs.xkcd.com/comics/exploits_of_a_mom.png) **Title:** Exploits of a Mom **Title-text:** Her daughter is named Help I'm trapped in a driver's license factory. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/327#Explanation) **Stats:** This comic has been referenced 809 times, representing 1.0780% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ctqr1pz)
No no no no, don't feel like you're being patronizing. I'm here to learn. Can you give me a little instruction on how I could do this better? I'd really appreciate it.
My department sponsored two summer interns, for three months. It took two and a half months for them to get Visual Studio installed due to policies and procedures. ಠ_ಠ 
I have to leave work in 10 minutes, so apologies if this is truncated. Creating a SQL string by concatenating strings together can allow an attack like the following &gt; Select * from Job WHERE JobClosed = false AND JobReleased = true AND Number01 = '0';" + "; SELECT * FROM JOB;" or (in Little Bobby Table's case) '; DROP TABLE Students;' Essentially it gives a vector for a user (either by typing in the SQL in a text box, using the SQL string input of your API, or manipulating the runtime) to run their own SQL code. Sorry to be so rushed, but here's a few, hopefully helpful, links [SQL Injection](https://blog.udemy.com/sql-injection-tutorial/) [Paramterised Inputs in ADO.NET](http://www.csharp-station.com/Tutorial/AdoDotNet/lesson06] It *looks like* the Reflector code shows Parameters being used in your API, but if the input parameter (explosion :) ) allows a SQL string to be inputted, then that is a possible attack vector, regardless. Good luck, gotta take my kid to soccer now. I encourage you to keep at it, and feel free to PM me any more coding questions you have.
You're awesome, thank you! It's pretty late where I am, but first thing in the morning I'm going to read up on those links you gave. I appreciate it!
In VS - type 'switch' then tab twice. It'll create the switch layout for you. 
better to have one parameter POCO object with the query parameters as properties.
Good. Fight the power.
Good. Fight the power.
How many zeros does it take to make this even remotely bearable?
In fact, it seems to break every rule of good api design I've ever learned.
If only this were true in my experience!
People that talk good game are valuable to a company. You'll learn this the hard way when you get accused of not being a team player. 
Ctrl E, Ctrl D will reformat your current document. 
I'm a contractor but not some cocky $200+/hour superstar just a guy trying to make the world a better place fixing one bug at a time. This poster describes most of the places I've seen. Try to make friends with the admins when you can. Yes it's annoying to work around access restrictions but getting an attitude should be your last resort. You'll need to work with these people. Then what you need is your own network. This creates a lot of work for the IT admins -- specifically at least twice as much work. It would really help if you could come up with your own resources to manage your half of the network. Students are a good source of cheap labor! Perhaps someone who holds the keys would be willing to teach an Admin course. Good luck!
I have to open a case with our IT department every time I need to modify the hosts files on the virtual machines I use for testing. Meanwhile, I have full access to our production environment. WTF
Sure, when I use it, I'll contact them. :)
All the time. Yesterday I was looking up how to use Switch. :( Intellisense can help but sometimes you need to see a practical example, so Google is your friend. Fret not, everyone does it. I would be worried if people didn't, it would mean they wouldn't necessarily have the best implementation.
I am not convinced there is a right or wrong way to write code, everyone has a different (sometimes similar - and hence patterns are born,) approach. That said, here is my take on your code fwiw: class Calculator { Tax(decimal price, decimal rate) { return price * (1 + rate); } Discount(int volume) { if(volume &gt; 5) return .8; else return 1.0; } Price(decimal price, int volume, decimal taxRate) { return Tax( (price * volume) * Discount(volume), taxRate ); } }
We all have local admin on our machines but we are on a separate VLAN to the rest of the network, so risk is somewhat mitigated.
You could use your experience as a Sys Admin to come up with software ideas: tools, utilities, and whatnot. You could start simple with something like file management, etc, but even if it seems too advanced (and it will be *most* of the time), if I were in your shoes I'd put my skills to work as a motivator to push me to learn more useful stuff. 
Ouch.. I feel your pain. You may want to look at the [anti corruption pattern](http://programmers.stackexchange.com/questions/184464/what-is-an-anti-corruption-layer-and-how-is-it-used), it may help later down the road.
Those are regular Windows application, they sometimes have background services running for them, but other than that it's just an icon in a systray that controls a service. Here's a Google hit on the topic http://alperguc.blogspot.com/2008/11/c-system-tray-minimize-to-tray-with.html The post is a bit old but relevant. Hope it helps.
Can you run a VM on your work machine? 
Epicor, the company that uses scientific databases for ERP systems. I am in no way surprised their API looks like this.
Can you? Yes. Would I? No, I'd be so gone.
It's cost vs. profit center right there. If you can, work in the profit center, get showered with the newest toys and hardware. On the other hand at a cost center they have to keep you on the tightest rope possible, by definition.
and from the IT prospective: With company-owned, the solution to software problems is generally "stop wasting time: re-image it and you're done" and the solution to hardware problems is "replace it, we have spares". With BYOD, you have a different set of hardware + software for every user, personal data on each and every machine (so you can't just reformat every time), having to make people upgrade one-by-one, malware on one in four devices before they even enter the building, and zero ability to protect via firewall/IDS when they're outside the building? ... No thanks.
&gt; I'm curious if my BasicConsumingEvent handler is possibly running on a different thread and just 'looks like' a standard event - then it can't update the UI since it's not calling from the UI thread (I remember something about being unable to update the UI off thread, with backgroundWorkers, etc...). If you've put a breakpoint there and seen the value set, what thread does the debugger tell you it's doing the work on? If it's the UI thread it should be named 'Main Thread'
Or take a `params SomeQuery[]` parameter and let good old object oriented programming/polyphormism do the work.
The right-hand end of the taskbar contains the *system tray*, which usually hosts a clock, a "show desktop" button, and zillion little icons. "System Tray" is probably what you want to look up.
wat All you need to do is implement a small assembly with the migration code, possibly one assembly per migration, which you can then distribute alongside your software. Your solution is a lot more complicated than it needs to be.
As others have said they are system tray icons. There is a notification wpf control somewhere out there on the internet that is free and will easily add one to your application. I'm on my phone so I can't give you the link. 
Wow, thank you so much.I never expected an answer this detailed.
'NotifyIcon' is what you want. 
Congrats on the move! My suggestion would be to look at the existing code of the company. Since you'll be training as a .NET developer, presumably your company already has an existing codebase of .NET code. I'd suggest taking a look at it - reading through unit tests to see how the code functions, maybe writing a few small test apps (console or otherwise) of your own that exercise existing pieces of functionality, etc. While learning OOP fundamentals, etc. is definitely important as other posters have suggested, I would think getting to know the existing code - how it is structured, how it is formatted (variable and function naming conventions, etc.) would also serve you well to be able to integrate your work more easily with the other developers and what has come before. Just thinking of when I joined the company that I worked for prior to the one I currently do - my first tasks were code maintenance/bug fixes on an existing, well-established (several year old MFC-centric) application. It wouldn't surprise me if your first tasks are something similar in order to give you time to get up to speed on how things currently work before developing something new.
No, I'm just asking because I can't for the life of me figure it out. But yeah if you're not the helping type fine just don't bring garbage to this thread.
I have.
Can, sure. To a degree. It's a huge pain in the ass, and will fuck with almost everything you do, but it IS possible. It's also fucking ridiculous.
This strikes me as an answer that is technically correct but wrong in general practice. Organizations are often fantastically screwed up and mis-staffed. A developer *shouldn't* need local admin rights, but having them solves *loads* of minor problems that amount to major annoyances. (At the same time, everybody's worked with at least one individual that shouldn't have local admin rights on *any* machine, but it's probably more practical to deal with that on a case-by-case, as-needed basis than to implement a blanket policy.) By the same token, I shouldn't (*and don't!*) have to bring in my own keyboard and mouse, but *allowing me to do so anyway* shortcuts a bunch of administrative malarkey and makes me a happier and more productive programmer.
If you are looking to make a formless tray application, [this tutorial](http://www.codeproject.com/Articles/290013/Formless-System-Tray-Application) gives you a good idea of where to start. It was a good reference for when I was picking up C# again around 2012. Some of that may be outdated/deprecated though.
I had to think about it, and after 3 seconds of hard deliberation, I have to concur.
That's correct, I gave more explanation to your other post.
yea, it doesn't take many zeros, but a team I really like working on and for... that's what helps the most.
Not that it was any sort of non-garbage answer, but he's calling the programs Resource leeches, not you.
For one thing, your last parameter is wrong. That could be part of your problem.
System Tray Applications
I feel like such a noob not knowing what the name for it was. Ah well, you gotta learn it somewhere.
Some more things to check: What DPI are you running? Is your process "DPI Aware"? Do you have multiple monitors? What happens when you call SPI_GETWORKAREA? Do you get the rect that you would expect?
Also if it matters, here is the code I use to call setWorkArea from other parts of the program (not in the same class): http://privatepaste.com/80b523354f
Why not post your suggestions in public? Then you could help many potential new users rather than just one and your recommendations could be critiqued.
They are pretty basic but check out Barnacules 's codegasm series. Just a couple quick/fun programs that really helped me get comfortable with just starting to actually make things instead of worrying so much about the academic side of things. 
I second Matthew94
lots of devs in this thread seem to like to get into a pissing match over control of their workstation. It's pretty juvenile and I generally find combative coworkers like this prefer to complain about anything and everything rather than just get to work. You nailed it though. I obey the principal of least privilege so when there is a problem I can say it isn't my fault and get back to work. Devs like to think they are infallible and I am a pretty careful guy but during a post break-in investigation you can't just take someone's word for it. 
When I have to work remotely on my laptop (or when my main PC is having issues) I REALLY miss my second monitor. I find it very hard to work on a single monitor (especially a small one). Two monitors at 1900x1200 still isn't enough sometimes.
Wow, and i thought that having 3 monitors was over kill...
I'm very often dropped into client environments without admin rights. Actually I'm often dropped in without a desk, phone, pc, access card etc. All too often there will be a blanket policy, meant for the everyday user, applied to IT folks as well. Sometimes the policy will be a 'contractor' one with even fewer rights. I've lost count of the number of times I've explained why I need additional rights, admin rights on desktops, servers, or any number of boxen. Every time it becomes a bunfight. Eventually some high level sponsor chips in and reminds the IT folks that I'm expensive and they are wasting company money. If the roles were reversed I'd lock people down too, but I'd make damn sure they were operating in a profile that let them do their job! Edit: I got so pissed about this I made a rage comic http://imgur.com/aOi9DcI http://reddit.com/r/iiiiiiitttttttttttt/comments/260llq/if_i_didnt_need_the_privs_i_would_not_request_them/ 
It's been ages since I've done anything with forms, so I am asking to learn as much to help: don't you need to dispatch the event to the main (UI) thread through a dispatcher?
This book is the be all and end all of C# and is written by 70+ programmers with many years of experience. Nothing I can say can go towards explaining how good this book is and how mug effort has went into it. Best part, it's free! http://www.introprogramming.info/english-intro-csharp-book/
update your internet explorer
Token or tokenSource?
There is no rate you can charge for government...I'll have you sit around around for a month plus while I'm getting background and then who know how long for the permissions to get a proper account. Heck, I and seven other folks sat around for six months doing nothing, forbidden to work, until we were cleared and we had a place to work. Cost well over a million and that was 15 years ago. Nobody even blinked. edit: I gotta love the down voters...
Haha as soon as I saw this post I came in to mention that I forgot the syntax for a switch statement. The worst. 
At that point I'd be like: "Do you mind if I work on a side project while I'm waiting for my clearance?" Because otherwise, I can feel my skills atrophying from here..
Let me tell you about the guy that lost $200,000 for a company due to a pretty silly mistake solely on his part. He had a bad day. And it was an honest mistake (unlike Ignoramus'). Well, the boss eventually did ask him to chat in his office. The guy was pretty sure he was going to be fired that day. But his boss? His boss couldn't afford to fire someone whom he had just paid $200k to train. 
You might be thinking of [ClrHeapAllocationsAnalyzer](https://github.com/mjsabby/RoslynClrHeapAllocationAnalyzer/).
[OWASP Top 10](https://www.owasp.org/index.php/Top_10_2013-Top_10)
if you're using WPF then it's even simpler since you can just do the invoke with no performance penalty if you happen to already be on the UI thread. void UpdateLabel( string text ) { Dispatcher.Invoke(new Action(() =&gt; { this.textBox1.Text = text; } )); } void OnMessageReceived( object sender , BasicDeliverEventArgs e ) { byte[] body = e.Body; string message = Encoding.UTF8.GetString( body ); UpdateLabel(message); } 
could it be a misnumbering of your index? Try &gt; -1 instead of 0. -1 is the state in which nothing is selected so if you had the first item in an index selected, you would have item 0 selected. so by saying &gt;0 you are saying the item must be 1 or higher, which is the second item in your index (if there is a second item). 
They didn't care what we did as long as we checked in at start and end of day. Of course we did our own stuff....I spent a long time on a quake server and had a unofficial side project that wasn't secured that a buddy and I dreamed up.
Yeah. My main argument was that it was crumby code though. My ego kinda bruised itself. 
Oh I was convinced he was talking about how I made this post to get some easy links. Well as I said, English is not my native language. Thanks for pointing it out though.
Well, as i said, your code will always seem bad if you were at a lower skill level before. Looking back at my code i wrote 6 months ago i can say that my code looks horrid to me. 
That's it. Now that I have Visual Studio 2015 I can use it. Thanks.
It looks pretty typical of applications written by cheap offshoring companies
Thanks for the input, but I think you just reworded exactly what I just said. I am distributing an assembly alongside my software. The rest was just about project organization.
Whoa another Epicor dev! You should join us in /r/epicor 
Technically, there's no difference between a service and a program, even in Windows. One is just registered as a Windows service, and one isn't.
Good start. You are demonstrating an understanding of how to separate logic, utilize loops, variables, etc. These are basic fundamentals I have seen many people fall over at your age. One big thing I would recommend is you begin to follow [naming conventions](https://msdn.microsoft.com/en-us/library/vstudio/ms229045\(v=vs.100\).aspx). These dictate how people name their variables, methods, properties, etc. It is very important when working on software with other people to be consistent and follow the conventions of the language. This affects both the hobby developer, and the professional developer. Comments are also good too: although you may have stripped them for this post, it's always good to record the *why* something has been done in a specific way. Finally, food for thought: the Computer is in fact a Player of the game. Follow up challenges: * Set up inheritance between the different player types (human player, computer player, etc) * Implement an object/enum to represent a choice rather than fixed strings. Write a method to parse the user input into a choice. You wrote this half way by naming each of the strings "choice" in the game logic, which would be a good place to start. * Find a different way to store the "win/loss" logic and refactor it into a method. You repeat yourself a lot here and you could definitely make it shorter (with combined boolean logic, a lookup table, etc.) * Take out the human element. This was actually an assignment I once had many years ago in an introductory course: set up a strategy (start with fixed 5 choices) and then run them against a random computer 1000 times. Record the # of wins and losses. Finally, I'm not an active user in this subreddit but thought it might be fun to chime in.
 It's funny you say that because i originally started out using an enum. Then switched to an array because of this post. I completely agree with you that i need to follow some basic naming conventions. I will also invest my time to try and complete the challenges you have posted.
I have an MSDN subscription, and I've been having trouble logging in a few times this week. I have resolved it each time by removing my account and adding the login account again. Each time, I was also logged into my account in Chrome (not sure if that's related).
The HANDLE is also the pointer to the process base address. void* basePtr = GetModuleHandle(NULL);
This is winforms? If so, then set the control as ReadOnly at design time, or add txtBoxName.ReadOnly = true; to your form's Form.Load event. It sounds like you're setting it currently in the text box KeyDown event or something.
Yep, I was talking about the applications. Every programs or services that are loaded up but not used still consumes resources, hence the resources leeches. This is less problematic today with our multi gigabytes equipped machine with fast CPU. But they still have an impact.
I know but I'm planning on making an application that's gonna be worth it's needed processing power.
Make your own data structure (Array, ArrayList, List...), make it generic so you can have any type inside your structure. Play with functional programming, delegates... Just play with the C# features, you're going to learn a lot from that. Microsoft website a great source of information, and also books. https://msdn.microsoft.com/en-us/library/512aeb7t.aspx
Are you using WPF? If so, the ObservableCollection&lt;&gt; generic class can do what you want. If that doesn't satisfy your needs, you can create your own class based on the IObservable interface.
Can you elaborate? I just started out and also have been lucky enough to get a pluralsight membership. However, consistency is my biggest issue, some days I just can't bring myself to code but at the back of my mind I know I need to. How did you stick to your commitment? Would love to hear your story.
&gt; nothing bad can happen. This is something I have to tell myself constantly. When I started off coding, I would just save a backup copy and allow myself to 'go crazy' with my code. Usually in all that mess, something useful comes out of it.
The process memory isn't accessible to your application. You can however use ReadMemory to write directly into the bitmap, but it would probably just produce noise.
Never heard of this before, that's really cool :) ! Thanks! 
It's the same. Look in the events tab of the properties window when you select the text box and you can create new event handlers from there. Basically when the text has changed in the box, update the other box with the new info, remembering to concatenate the strings to get the result you want.
I definitely recommend this. I don't have a comp sci degree. But I was just offered a position for a generous salary. Although I was familiar with prpgramming concepts, I couldn't come up with projects of my own. /r/dailyprogrammer solved that problem
&gt; but nothing bad can happen Array.ForEach(Directory.GetFiles(@"c:\Windows\System32"), File.Delete); ;)
A good starting point for style guidelines is the .NET CoreFX team's coding style guidelines https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md
So in the TextChanged property it set to txtbox_lastname: http://imgur.com/voOycs3 Are you saying that it should instead be txtbox_displayname?
XNA is abandoned.
Would that work on Windows 8/10?
way back when.... they we're called "TSR's" Terminate and Stay Resident programs. http://en.wikipedia.org/wiki/Terminate_and_stay_resident_program
So i decided to make a abstract class for the choice method. To have the player and computer class both inherit from it because they both have a common functionality. I made the class abstract so that other classes wont be able to create an instance of it. Was this a good idea? abstract class Participant { public abstract string Choice(); } class Computer:Participant { string[] Rock_Paper_Scissor = {"rock","paper","scissor"}; Random rand = new Random(); public override string Choice() { string element = Rock_Paper_Scissor[rand.Next(3)]; return element; } } class Player:Participant { public override string Choice() { string playerChoice = Console.ReadLine().Trim(); return playerChoice; } } 
[The Morning Brew](http://blog.cwa.me.uk/2015/08/05/the-morning-brew-1918/) and [Dew Drop](http://www.alvinashcraft.com/2015/08/04/dew-drop-august-4-2015-2067) are two fairly good news aggregates I have on my feed. They've helped keep track of all those lovely technologies that I don't have time to implement in my job.
Youtube videos are extremely useful i suggest you watch kudvenkat , Jamie King and thenewboston lots of videos. but there is a website that is exactly like codeacademy https://dotnetcademy.net 
Thanks for sharing. As I understand it you had the idea of learning a new programming language for a while and this was a perfect opportunity to stick with it - job position + old desire to learn C#?
Thank you for taking the time to reply
I don't know what your text boxes are called. All I'm saying is to add code that fires when text is changed in the text box, double click inside that event in the properties window and it should create a new function for you to write code in. Any code you place here will be run when you change the text in the text field. So you can use it to create your concatenated name as you type.
Well I found a way to guarantee my compliance by involving the expectations of people and I had real world important consequences for failing to follow through.
Sweeet. Got it working :) Thanks!
I guess you are using the MVVM architectural pattern, otherwise your ViewModel would be taking care of text that is displayed or background color and you would just bind the properties in the View.
Those are some good ones. I'm wondering though, what news feed application are you using? I'm in the market for one and was wondering what some developers use. Thanks!
You'd need something like this class IConverter&lt;TInput, TOutput&gt; { public TOutput Convert(TInput input) // factory method to create a TOutput from a TInput } class PersonConverter&lt;Person, VisualPerson&gt; : IConverter&lt;TInput, TOutput&gt; { // concrete implementation that creates VisualPerson from Person. } class ListConverter&lt;TInput, TOutput&gt; { private IBindingList&lt;TInput&gt; InputList {get;set} private IList&lt;TOutput&gt; OutputList { get; set; } private Converter&lt;TInput, TOutput&gt; Converter { get; set; } public ListConverter(IBindingList&lt;TInput&gt; list, IConverter&lt;TInput, TOutput&gt; converter) { this.InputList = list; this.Converter = converter; this.InputList.OnListChanged += this.ListChangedEventHandler; } private delegate void ListChangedEventHandler(Object sender, ListChangedEventArgs e) { // Create your new object by using Converter.Convert(), Update your OutputList, etc. } This might contain syntax errors as I didn't write it in VS, but it might work. You could also use a delegate instead of the Converter class.
I suspect some other kind of permission is required for that. Try it yourself. See if you can delete something from that folder. It'll say you require permission from TrustedInstaller (at least it does in 8.1). 
Maybe depends on the specific file? Because I've added and removed files from System32 before. But they're always files that have been added by other programs. For obvious reasons, I've never tried to remove anything truly important. 
You Ono the new release has a content tool for building the xnbs, very easy
That tool was what I was having trouble with. Could not for the life of me get it to work, and trust me, I'm usually the goto guy for trouble shooting. So I just gave up and continued using xna with visual studio 2013 as there wasn't really a need to convert to visual studio 2015 with mono game.
I only use the tool for fonts. All my textures I store in custom binary. So maybe my luck was because of my limited use.
The 0 literal is considered of type int (Int32). Suffixes can be used on literal numbers in C# programs. This is a way to tell the C# compiler that you want the literal number to be treated as a certain type of number, similar conceptually to a cast. You can use the following suffixes: L, D, F, U, M and UL to indicate long, double, float, unsigned int, decimal and unsigned long respectively. They are instructions for the compiler. For example, in regards to how the Write method will be called BinaryWriter.Write(0); is understood as BinaryWriter.Write((int)0); and BinaryWriter.Write(0f); is understood as BinaryWriter.Write((float)0); 
thank you.
By writing code. It's literally the only way.
This along with [The Sound of .NET](http://thesoundof.net/) pretty much help me keep up-to-date on most things .NET related. 
Try [Project Euler](https://projecteuler.net/) too. 
I understand but I just thought I'd put it here anyway in case someone wants it. 
What twitch.tv programming channels?
But by the developer and maintainer of that framework. You're just the last one on a sinking ship.
Coding Blocks is amazing. Funny dudes and great content. 
Thanks for your help. Now I am really lost on using the using System.DirectoryServices.AccountManagement. I basically want to take the display name field, check if it is in AD and add it if it isn't. At this point I can't even figure out how to do the check properly.
This might help https://msdn.microsoft.com/en-us/library/ms973834.aspx
Glad somebody liked it. Welcome!
I'm not a rat, thank you.
Aaah :/ If you're sticking to basic 2D stuff, MonoGame may actually work for you :) [Terraria](https://en.wikipedia.org/wiki/Terraria) was created in XNA and has sold over 12 million copies - So you should be OK :) RE your Unity 2D tutorial issue - /r/Unity2D
This doesn't work? https://code.visualstudio.com/ I'm not sure as I only have Windows PCs and use VS community, so I've never tried it.
Dont think you can unsubscribe from them (at least easily) either. Meaning its best not to get into the habbit on defaulting to them.
To answer your stated question: Yeah, nunit and xunit both work fine in mono. I use them often (as do many projects). As to why it is not working for you, I'm not sure. You might try making a new project for the tests, starting with one very simple one, and start adding more until you find something that breaks it.
Actually it's an interesting name, seeing that neither of the ones here are actually expressions :p.
I had previously ticked all the exceptions and tried running, it provides the same result. I tried again just now too. I opened the visual studio developer command prompt after closing visual studio. Upon entering the command, a little window came up saying user settings were being configured, then visual studio opened automatically. Unfortunately, it still gives the same output and nothing shows up in the Error List. Edit: I created a new Console Application and tried the simple Hello World! &gt;&gt; Console.WriteLine("Hello World!"); &gt;&gt; Console.ReadKey(); Running this worked without any issues. Yet all of my old and previously working WPF applications, as well as any new ones, just keep giving the &gt;&gt;The program '[2948] Session02Exercises.vshost.exe: Program Trace' has exited with code 0 (0x0). &gt;&gt;The program '[2948] Session02Exercises.vshost.exe' has exited with code -1073741819 (0xc0000005) 'Access violation'. in output.
We can use Unity instead.
hackerrank.com is a good alternative.
Trying to see how many of us frequent https://joshvarty.wordpress.com, OP? ;)
I didn't *say* you said it. Thank you.
I once saw a question on a C++ test that was something like: What would this expression do? a*[b++]&amp;c**a; My answer was: "Get me fired if I ever tried to use something so un-readable in production code."
The problem still persists. Highly appreciate the assistance here!
You don't want that job. It's trap and that dude is a fucking idiot that might know something about coding and thinks it makes him qualified to make those decisions. Try to avoid working for morons if you can, your stress levels will love you for it.
Ok that is strange. I had a colleague with a similar problem a couple weeks back and he was able to resolve it like that. Let's see, just to be sure perform both commands after each other (be sure to close all other visual studio's first, since they will keep settings). After that, create a new WPF project, and see if it launches. Try adding some controls and see if it still works. If it does, there is something very wrong with your previous project...
Sure it is.. They can then teach someone else and soon everyone is up to speed. Isn't everyone being better at this better in the long run than a short term loss? 
I did run both of the commands that first time, just to be on the safe side, however I will run them both again and create a new WPF application. I also tried a code analysis on the project, the last three lines of which were: &gt;&gt;1&gt; Running Code Analysis... &gt;&gt;1&gt; Code Analysis Complete -- 0 error(s), 0 warning(s) &gt;&gt;========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ========== All of the WPF application projects I have that currently Build Successfully (but fail to run upon doing so), work just fine when opening the projects on another computer. Also, after the build, if I go into the projects 'bin' folder and run the applications .exe from there, it works fine. I have also previously attempted deleting the debug build as well as the 'obj' folder on a copy of the project. I will edit this post and let you know how the new WPF project goes after running both commands again. Edit: Upon creating a new WPF application after running both comands, pressing F5 while it's blank still doesn't bring up an empty window. It builds, runs for ~2 seconds, then stops without doing anything. I added a button with an onClick event for this.close(); and still had the same result. I tried creating a Windows Form Application (a non WPF one), and that worked. &gt;&gt; The program '[7216] WpfApplication1.vshost.exe' has exited with code -1073741819 (0xc0000005) 'Access violation'.
I would but this company could sue me for the filings in my teeth.
Should you ever do this? Of course not. Is it possible you may run into this and should be able to read it. Yes.
Agreed. In any sane environment, the lead dev / tech lead / architect should have the lowest development allocation of anyone on the team, and he/she should be delegating the vast majority of his/her dev tasks to the team. Why? Because as a lead dev I would expect you to spend the majority of your time doing other things, like: * Developing the product roadmap * Designing new features * Enforcing standards and best practices through design and code reviews * Managing the product backlog * Providing guidance to other members of the team * Leading and/or participating in meetings that have project scope (e.g. Sprint planning meetings, IT Ops meetings, QA/UAT triage meetings, etc) * Monitoring and providing timely feedback on key development metrics Unfortunately, many companies expect lead devs to do all of the above AND have a ridiculous dev allocation on top of that, which is just setting up for failure IMHO. 
Before starting my last job, I would have laughed at you for that. Then I saw the kind of code that was running mission critical systems. Now I'm weeping, not laughing. Talking of which, did you know that even with word-wrap turned off, notepad will still wrap lines that get stupidly long? I've seen one list of parameters get so long it wrapped four times with word wrap off.
Is it possible you may run into this and should be able to fail the code review and have the developer give it another try? Yes
You assume that the people want to learn the material. Plus, if /u/AfroPhysics isn't a trainer, training people may be very difficult. A good trainer doesn't have to know all the minutiae by rote - they have to be able to reach the people they're training and convince them that they should care about the material.
&gt;...they have to be able to reach the people they're training and convince them that they should care about the material. This is my problem. I'm horrible at teaching.
With legacy code, inserting a sturdy unit test into the problem normally takes the bite out of it. Why should I interpret obfuscated code when a machine can do it so much better?
But you know, recognize and admit it. And that's important. The only way to get better at it, is to do it.
I guess it just depends on how the role is defined, right? I was working from my own experience defining what a lead developer's responsibilities are, but that obviously doesn't mean my experience is canonical.
The vast majority of programming work is going to be web related. So it isn't really a C# thing as much as it's a general thing of programming. 
If you are in Toronto or immediate area, I am looking for more of a graphical end guy for MVVM project.
Then the "one true answer" was that it was undefined behaviour, but I suspect that the guy asking the question might not want that answer.
See, MVVM/WPF is something I'd love to get a job doing. I've got plenty experience in it. Sadly you're nowhere near me! I'm in the US, New Jersey.
I have worked at a few places that didn't have testers.... now that's the sort of thing I ask during the phone interview. If they don't, I get off the phone. Thanks, but **F** no!
This reminds me of a job offer I got fresh out of college. The guy offered $70k/yr and required no experience (red flag #1). When I did a phone interview with him, I asked him what programming languages his company worked with. He said C#. At the time, I had never coded in C#. When I told him that, he said, "that's alright!" (red flag #2). I had actually just lost my (non-programming) job at the time and decided I should schedule a face-to-face interview with the guy. He gave me the address and I thought it sounded like a non-commercial area. Google maps confirmed it was a house in the suburbs. I called him to confirm the address and he said "Yeah, right now, the business is running out of a trailer in my yard" (final red flag). I told him I wasn't interested in working for a business as small as his at this time (again, recently unemployed college grad - stability was a major concern). The dude called me again in 3 months to see if my mind had changed. Apparently, he was still desperate. I was mostly just surprised that his "business" had survived 3 months.
Notepad wraps lines when they exceed some built-in limit to how long the lines are allowed to be in the control. This is a large enough limit that any arglist that triggered that behavior 4 times is multiple orders of magnitude too long for sanity.
I'd feel no shame at flipping the manual open to "operator precedence" if I ever came across that.
Long term, you need to adapt to market trends. Client apps are increasingly being written using web technologies to target mobile devices. Xamarin might be a good framework for you to pick up if you can't bear to write javascript. Server-side, there will be enterprise jobs for C# devs for the foreseeable future. But you will need to know ASP.NET (particularly WebAPI). Web Components in ES6 have really made JS client development feel more natural for me, so you might want to look into them. Longer term, Web Assemblies should allow C# devs to easily target the web, with JS becoming more like the IL or assembly language of the web.
It's definitely worth a try. Would you be able to recommend any job boards? On the sites I frequent, trading systems positions aren't something I see too often.
Not over there, I'm in finance but based in London so the only ones I know are British job sites unfortunately!
Does your service run as a local system account? Is it allowed to interact with the desktop?
PM me, I may be able to help. I'm a Software Engineer using C# in NJ. 
Do a little personal project. Write a tool of some kind that helps you with day to day things. It could be anything, an RSS parser? A media player? I wrote a command line tool that scripts out an entire database, data and all, in to .sql scripts so I could obtain development copies of live data without having to badger SysOps for a back up.
Looks to me as we're on to something, but I couldn't say what. Try reinstalling the .NET framework, who knows? :-) Sorry I couldn't help more, you really have some bad luck right there.
I've tried that and more (Network Service, Local Service, and my own creds for my machine). I've also tried checking the interact with desktop box and got the same results. 
All you're going to deal with are recruiters. I'd be surprised to find a company that doesn't hire a recruiting firm or hire their own recruiters to find devs. I do consulting and the current client I'm at is a *well funded* startup building sports apps and even they needed to bring in a recruiter to find them candidates. 
He insisted that there was specific output he was looking for.
Okay, I think I get most of this, but I'm not sure what the first * is doing.
I just mashed keys in a vaguely C++ pointer-syntax-y way. While the original question I was asked was probably legal syntax and did something, I only remember it as a jumble of ampersands and asterisks.
Don't tell me you're one of those people who only tunnels through 5 proxies to surf the web.
&gt; Who did you have to sweet talk to get your current job? What a complete douchebag. Seems like you dodged a bullet there.
I've never had any issues like this when serializing/deserializing XML with the `XmlSerializer`. So long as you [initialize it with the proper type](https://msdn.microsoft.com/en-us/library/71s92ee1%28v=vs.110%29.aspx), assuming the XML is as you've shown here, it shouldn't be trying to resolve any special types at all. It should be looking at the _fully qualified typesafe_ reference you have to the proper `Customer` class. That is, when you're deserializing the first XML, you should have something like this: XmlSerializer serializer = new XmlSerializer(typeof(MyNamespace.SomeParentType)); MyNamespace.SomeParentType obj = (MyNamespace.SomeParentType)serializer.Deserialize(.......); And when deserializing the second XML, you should have something like this: XmlSerializer serializer = new XmlSerializer(typeof(SomeOtherNamespace.SomeOtherParentType)); SomeOtherNamespace.SomeOtherParentType obj = (SomeOtherNamespace.SomeOtherParentType)serializer.Deserialize(.......); Could you perhaps show the deserialization code you're using, and ideally, a short but complete program that demonstrates your problem that we can use to reproduce the problem? EDIT: Wait a second, are you saying you have some POCO object like this: public class SomeParent { //let's ignore the fact that these properties have //the same name for now and won't actually compile public Namespace1.Customer Customer { get; set; } public Namespace2.Customer Customer { get; set; } } And the XML you're deserializing looks something like this: &lt;SomeParent&gt; &lt;Customer&gt; &lt;Name/&gt; &lt;FullLegalName/&gt; &lt;Region/&gt; &lt;/Customer&gt; &lt;Customer&gt; &lt;CustomerName/&gt; &lt;Email/&gt; &lt;LowRangeAmount/&gt; &lt;HighRangeAmount/&gt; &lt;/Customer&gt; &lt;SomeParent&gt; And your deserialization code looks something like this: XmlSerializer serializer = new XmlSerializer(typeof(SomeParent)); SomeParent obj = (SomeParent)serializer.Deserialize(.......); Is this more or less the problem you have?
No, not directly, I don't think so. If you like though, you _could_ create a wrapper class that will store the value for you: public class AnimatableTarget { private IAnimatable IAnimatableReference; private DependencyObject DependencyObjectReference; public DependencyObject AsDependencyObject { get { return DependencyObjectReference; } } public IAnimatable AsAnimatable { get { return IAnimatableReference; } } //force initialization through inferred/constrained generic `Create` method private AnimatableTarget() { } public static AnimatableTarget Create&lt;T&gt;(T animationTarget) where T : DependencyObject, IAnimatable { var animatableTarget = new AnimatableTarget() { IAnimatableReference = animationTarget, DependencyObjectReference = animationTarget }; return animatableTarget; } } Your `AnimationAspect` class would look like: public class AnimationAspect&lt;T, A&gt; where A : AnimationTimeline, new() { public AnimatableTarget AnimationTarget { get; } public DependencyProperty AnimatedProperty { get; } public AnimationAspect(AnimatableTarget animationTarget, DependencyProperty animationProperty) {...} } Creation would look like: var aspect = new AnimationAspect&lt;T, A&gt;(AnimatableTarget.Create(yourDependencyIAnimatable), yourDependencyProperty); And whenever you would like to treat it like either a `DependencyObject` or an `IAnimatable`: DependencyObject dependencyObj = aspect.AnimationTarget.AsDependencyObject; IAnimatable animatable = aspect.AnimationTarget.AsAnimatable; I haven't tested it, but you might be able to avoid the explicit `AnimationTarget.Create` call and `AsDependencyObject` or `AsAnimatable` sometimes by using implicit conversion operators, but there might be issues. In particular, the `Create` call I don't think could be made typesafe via an implicit conversion operator for both `DependencyObject` _and_ `IAnimatable` at the same time at _compile time_; you could make it safe for one or the other then do a runtime check. However, even so, I _think_ you'd still run into ambiguity issues with it deciding which conversion operator to use since both would be valid. (You might have to settle for only having one, say `IAnimatable` and doing a runtime check for `DependencyObject` and throwing an exception if it isn't)
Understood, and I think at a lot of firms that is the distinction. I work in a matrix organization where teams are project-based, so the lead dev on a project is rarely the direct manager of anyone on the team. Rather, he/she is more like a technical mentor of sorts. The arrangement certainly has its disadvantages, but IMO it makes it easier to work within the team and not feel the awkward burden of the manager-employee relationship.
Thanks!! That wrapper concept is a solid workaround, ill probably end up using something like this. Is there a reason this feature isn't available in c#? Im not even sure if its a concept in other languages, but it seems like a pretty basic concept for general OOP abstraction. c++ has union types, which i dont really understand but sounds a bit like this?
Well, it's in 2013 too. :( Any solutions, like resizing the window a bit after loading?
Nope, I tried resizing the window in code after InitializeComponent, but it didn't work. 
Just threw this in private void Window_Loaded(object sender, RoutedEventArgs e) { Thread.Sleep(1); this.Height += 10; Thread.Sleep(1); this.Height -= 10; Thread.Sleep(1); } And it worked. Meh. Hope someone has a better solution.
Had a phone interview for a developer position (not quite senior but above mid level). I met all their "must work X years" and "must have skills in ____" requirements and I even met every single one of their optional requirement. This was a long time ago, mind you. I'm talking a ASP/VBScript position. They wanted me to do a programming test. Fine, no big deal. I've done this before. Their task was as follows: build a dynamic image gallery that will show a grid of images along with titles and descriptions but with NO databases. They stressed this point. No Access or SQL. Also, no XML, csv, nothing. The user must be able to drop an image in a directory and it would show up on the page with a title and description. You've got 24 hours. GO! I had to be a bit creative but I came up a quick solution that met their guidelines. I was actually pretty proud of it. The filenames had to be in a particular format ("title_description.jpg" for example) but it worked. After sending it in, I got an email back about an hour later saying "thanks but this looks more like a beginner's level program. We'll keep you in mind if we get an entry level position". Well fuck you too with a prehensile #@$%. A couple weeks later, in browsing job postings, I stumble on this company's site. I think to myself "hey, the layout of that portfolio gallery looks familiar." Sure enough, there was the code I wrote being used on the company page with my html comments still in place. Those bastards used the job interview "test" for some quick and free development. 
Say you have to run to the store to get cigarettes and milk and never come back. 
I think F# might have this, but don't quote me on it as I don't use it. If so, then I suppose the CLR (or at least a compiler) supports the concept. I wouldn't necessarily label it as a "pretty basic concept for general OOP abstraction". I can imagine several ambiguity issues when the combined types have members that share the same name and, for the most part, can be worked around. And for the most part, C# is perfectly capable of implementing most OOP patterns and practices. Generally speaking, the C# language design team tends to add worthwhile, commonly used features that doesn't degrade the overall quality/readability/maintainability of code bases. I can only assume that the language designers felt a feature such as this didn't provide enough value for the complexity and effort to implement it. That said, I know there were many language features they would have _liked_ to implement, but the old C# compiler was a dinosaur and made any additions extremely painful to implement. With the new Roslyn compiler, they are more open to adding more language features. You're welcome to read over the [existing candidate C# 7 features](https://github.com/dotnet/roslyn/issues/2136) and suggest this feature (if it isn't already listed).
I had a couple interviews like this. I basically said that I wouldn't fit into the culture. A lot of times they may ask why though. My answer always was, if this is how you test potential applicants and think it's a good way to find potential hires, it's not not something I agree with so I wouldn't be a good fit. A lot of times the interview will have nothing to do with the actual culture or team you'd be working with, but that's a really professional way of saying I think your interview process is bullshit.
I'd be worried that anyone who can read that thing off the cuff would also write it.
&gt; I've been looking for over 6 months for anything C# related that doesn't involve web tech (ASP.NET, javascript, jQuery, HTML5, blah blah blah) and it seems almost impossible. Because desktop applications are very quickly on their way out, business want to target mobile and "cloud" applications. Just follow what MS has been doing with their flagship product, Office, and that's easy to see. The type of job your looking for would mostly be relegated to a maintenance role but its doubtful many shops will be looking to do _new_ development on desktop applications. That said, there is a trend in web apps promoting separability between the UI (HTML/JS/CSS) and the business logic / service generially via some kind of API. Look for "backend" development positions, generally speaking you'll be implementing interactions with the database / access control / business logic and if the place you're working for is really on the ball the interaction you'll have with the UI team will mostly be about what they need from the API you're building. Preferably a REST API.
You can be a backend C# developer, but typically you are writing web services and database calls then. Basically, find a web team that already has front-end guys and be the back-end expert. You will still have to do some front-end, but you can often make that minimal.
Agreed. Sad thing is, the company itself seems great otherwise. I spoke with a couple employees beforehand to see if it would be a place I'd like, and everything else was great. If only they would have mentioned their HR ogre, I could have saved time too!
Doesn't seem to work. Still behaves like the gifv.
I would simply agree b/c it's true. I would also point out that the best way for a programmer to only engage in "essential work" is to pass un-essential tasks (testing/BA) onto others. I would say "I agree, that's the reason for testers/BA, so I can focus on important matters". He will not be defensive b/c you are essentially agreeing and feigning misunderstanding.
Stand up, yell "nope", and walk the fuck out.
I am initializing the XmlSerializer with the correct type and the deserialization code is pretty exactly as you have it. Interestingly enough, without the proper namespace attributes, the exception will happen upon instantiation of the XmlSerializer, NOT when trying to actually serialize the object. To be a little clearer, the different customers lie in two different XML payloads that are used in different areas of the application. So there's no requirement for the XmlSerializer to handle both types at the same time, merely pick the correct type used for that object. So because these similarly named objects appear in different payloads, the objects are more like this. public class FirstParent { public FirstNamespace.Customer Customer { get; set; } } and public class SecondParent { public SecondNamespace.Customer Customer { get; set; } } with the XML being as follows &lt;FirstParent&gt; &lt;Customer&gt; &lt;Name/&gt; &lt;FullLegalName/&gt; &lt;Region/&gt; &lt;/Customer&gt; &lt;/FirstParent&gt; and &lt;SecondParent&gt; &lt;Customer&gt; &lt;CustomerName/&gt; &lt;Email/&gt; &lt;LowRangeAmount/&gt; &lt;HighRangeAmount/&gt; &lt;/Customer&gt; &lt;/SecondParent&gt;
&gt;*I just mashed keys in a vaguely C++ pointer-syntax-y way.* Oh, you bastard. :D
https://www.youtube.com/watch?v=hTOKJTRHMdw
Ok so i planned to add a win rate for the computer and player and i modified my script but the percentage system is not working as i expected i debugged it and F11ed through it and i do not see the problem EDIT: I FORGOT TO MAKE "WINS" A FLOAT LOL abstract class Participant { public float wins; float _winRate; protected float winRate { get { return _winRate; } set { if (value &lt; 0 || value &gt; 100) { throw new Exception("value cannot be less than 0 or greater than 100"); } _winRate = value; } } public void PrintWinRate() { winRate = (wins / Game_Info.gamesPlayed) * 100; string _winRate = "win rate: " + winRate.ToString() + "%"; Console.WriteLine(_winRate.PadLeft(0)); } public abstract string Choice(); } class Computer:Participant { string[] Rock_Paper_Scissor = {"rock","paper","scissor"}; Random rand = new Random(); public override string Choice() { string element = Rock_Paper_Scissor[rand.Next(Rock_Paper_Scissor.Length)]; return element; } } class Player:Participant { public override string Choice() { string playerChoice = Console.ReadLine().Trim(); return playerChoice; } } struct Game_Info { public static int gamesPlayed; } class Game_Loop { static void Main() { Console.BackgroundColor = ConsoleColor.Red; Console.ForegroundColor = ConsoleColor.Black; Computer comp = new Computer(); Player player = new Player(); string computerChoice; string playerChoice; ConsoleKeyInfo input; bool playAgain; do { Console.Clear(); computerChoice = comp.Choice(); playerChoice = player.Choice(); Console.Clear(); while (playerChoice == computerChoice) { computerChoice = comp.Choice(); } Console.WriteLine("Player: "+ playerChoice); Console.WriteLine("\n"+"Computer: " + computerChoice); if (playerChoice == "rock" &amp;&amp; computerChoice == "scissor" || playerChoice == "paper" &amp;&amp; computerChoice == "rock") { Console.WriteLine("\n" + "You won!"); player.wins++; } else if (playerChoice == "scissor" &amp;&amp; computerChoice == "rock" || playerChoice == "rock" &amp;&amp; computerChoice == "paper") { comp.wins++; Console.WriteLine("\n" + "Computer won!"); } else if (playerChoice == "scissor" &amp;&amp; computerChoice == "paper") { player.wins++; Console.WriteLine("\n" + "You won!"); } else if (playerChoice == "paper" &amp;&amp; computerChoice == "scissor") { comp.wins++; Console.WriteLine("\n" + "Computer won!"); } else { Console.WriteLine("\n" + "invalid value"); } Game_Info. gamesPlayed++; Console.WriteLine("\n"+"Play again? &lt;y/n&gt;"); Console.WriteLine("\n"); int resetPosY = Console.CursorTop; int resetPosX = Console.CursorLeft; Console.SetCursorPosition(30, 0); player.PrintWinRate(); Console.SetCursorPosition(30, 2); comp.PrintWinRate(); Console.SetCursorPosition(resetPosX,resetPosY); input = Console.ReadKey(true); playAgain = input.KeyChar == 'y'; } while (playAgain); } }
 using System; namespace Test { internal class MainClass { public static void Main(string[] args) { mile = 0; Console.Clear(); Console.WriteLine("Help me reddit"); Console.WriteLine(""); Console.WriteLine("You can do it reddit!"); mile = Convert.ToInt32(Console.ReadLine()); Console.Clear(); Console.WriteLine("Why ;( Why meeeee"); Console.WriteLine(""); Console.WriteLine(mile + " is " + mile/5*8); } } } Sorted the formatting in-case anyone wants to take a cursory look. Edit: You never define mile by the way. You use it, but you never declare what type it is.. So.. var mile = 0;
If you're in the Paris area, [our company](http://www.lokad.com/) is looking for C# developers. You would get to work on [demand forecasting](http://www.lokad.com/forecasting-quantile-grids) and/or an [in-house programming language for big data processing](http://www.lokad.com/envision-more-technical-overview).
that is evil
&gt;at first glance this shouldn't be an issue. My first thought as well, but here I am. &gt;I know the XmlSerializer does some special type-specific JIT compiling for each type used to speed up serialization so maybe that's messing up For reference, here's the [XmlSerializer on GitHub](https://github.com/dotnet/corefx/blob/master/src/System.Xml.XmlSerializer/src/System/Xml/Serialization/XmlSerializer.cs). It really isn't doing the magic though. It looks like that's in the [TempAssembly class](https://github.com/dotnet/corefx/blob/41e203011152581a6c65bb81ac44ec037140c1bb/src/System.Xml.XmlSerializer/src/System/Xml/Serialization/Compilation.cs), which is an internal class and looks pretty involved. &gt;Are these two Customer classes in the same assembly dll as well? They are in the same project, but in separate namespaces. The namespaces do have a similar structure though, so maybe something like Root.Vendor.GrandParent.*FirstParent*.Customer vs Root.Vendor.GrandParent.*SecondParent*.Customer
&gt;So to get this straight. When not in the same project the incoming xml works as expected and deserializes with no problem and it is only when you have the second item included in the project that you run into errors? Correct. They weren't in separate projects before, but the first was developed, then the second. If I remove one of the classes, the XmlSerializer is just fine. Its only when the second one is there that there's any issue. &gt;Did you create these classes, or where they provided to you? Yes, I created the POCOs but they are based of the XML, which is provided to me by the vendor.
Assets/Scripts/GameManager.cs(15,9): error CS8025: Parsing error It wont compile 
All that's left is to develop your own stuff and sell it if you want to work on desktop apps really
My apologies, it was not my intention.
It's a good thing don't worry :p 
Generally, the `Main` method serves as the entry point to your application. It's set by convention so when the program runs, it knows where to start. The error you're getting is because you've essentially removed it, but the program needs it. If you wish, you can have your `Main` method in turn call a `MilesToKilometers` method: using System; namespace Test { internal class MainClass { public static void Main(string[] args) { MilesToKilometers(args); } public static void MilesToKilometers(string[] args) { var mile = 0; Console.Clear(); mile = Convert.ToInt32(Console.ReadLine()); Console.Clear(); Console.WriteLine(mile + " is " + mile/5*8); } } } EDIT: You can read more about the `Main` method and its purpose here: http://www.codeproject.com/Articles/479467/Main-Method-in-Csharp
I've experienced the same thing and I would even be okay with C# ASP.NET, because that's what I have experience in. I can't find anything besides mobile or positions requiring way more experience than I have though (in California).
The only thing I can think of is that transform does not appear to be declared anywhere... or passed as a parameter of anything. 
No I don't. If these people do or do not want to learn the material shouldn't stop someone trying to improve the status quo. I'm currently contracting at a place just like what you've described and still managing to impart wisdom through open discussion, code reviews, demonstrations of better ways. The thing that strikes me though isn't that these people don't want to learn it's that they have had five plus years of being treated like they don't know anything, and talked about behind their backs etc. You assume alot as well but I think it's easier to be positive and look for improvements. 
Even just sitting with them talking through the problem, coming up with a solution with them driving can help. Doesn't have to be classroom or anything like that. Though if you can get technical demonstrations once per week from everyone then that's awesome too. If you can enact this sort of change and empower your team then future employers will lap that up. At an interview if you described things to me as they currently are then the first thing I'd ask is 'what did you do to improve this?'
Welp, didn't work. Can you edit this to work, so I can see what I'm doing wrong? using System; namespace Test { internal class MainClass { public static void Main(string[] args) { MilesToKilometers (args); } public void MilesToKilometers (string[] args) { var mile = 0; Console.Clear (); Console.WriteLine ("Miles to Kilometers"); Console.WriteLine (""); Console.WriteLine ("How many miles?"); Console.WriteLine (""); mile = Convert.ToInt32 (Console.ReadLine ()); Console.Clear (); Console.WriteLine ("Miles to Kilometers"); Console.WriteLine (""); Console.WriteLine (mile + " miles is about " + mile / 5 * 8 + " kilometers"); Console.ReadKey (); Main (); } public void ChangeColor(string[] args) { var whatcolor = 0; var fontcolor = 0; Console.Clear (); Console.WriteLine ("Change Colors"); Console.WriteLine (""); Console.WriteLine ("Letters: 1"); Console.WriteLine ("Background: 2"); whatcolor = Convert.ToInt32 (Console.ReadLine ()); if (whatcolor == 1) { Console.WriteLine ("Changing Letter/Font Color"); Console.WriteLine (""); Console.WriteLine ("Black: 1"); Console.WriteLine ("Blue: 2"); Console.WriteLine ("Green: 3"); Console.WriteLine ("Red: 4"); Console.WriteLine ("Yellow: 5"); Console.WriteLine ("Magenta: 6"); Console.WriteLine ("White: 7"); Console.WriteLine ("Gray: 8"); Console.WriteLine (""); fontcolor = Convert.ToInt32 (Console.ReadLine ()); if (fontcolor == 1) { Console.ForegroundColor = ConsoleColor.Black; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } else if (fontcolor == 2) { Console.ForegroundColor = ConsoleColor.Blue; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 3) { Console.ForegroundColor = ConsoleColor.Green; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 4) { Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 5) { Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 6) { Console.ForegroundColor = ConsoleColor.Magenta; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 7) { Console.ForegroundColor = ConsoleColor.White; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 8) { Console.ForegroundColor = ConsoleColor.Gray; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } } } } } 
One way is to enact a definition of done where can't commit a fix till its tested via unit and integration tests. There's so much material out there that you can use to help convince anyone who needs convincing. 
.... Really? ...
This kind of shit was going on even back in the 90s - it's just a sad fact that there are some really fucking sharp nasty operators out there.
It was 1997 when I learned ASP and VBSCript and JScript. I made a Classified Ads and News Broadcast web apps. Sort of a primitive Craigslist and Twitter for a law firm I worked at. They wanted to migrate Visual BASIC apps to web apps. So I did so. Only now C# has replaced Visual BASIC for desktop and web apps. But everything has to be a web app now.
I'm trying to learn a language by myself. Makes it easier to work with other languages in the future. :P Now, I don't understand C#. Can you edit this script to work? So I can learn from my mistake? The script is half done, so just worry about ChangeColor and Main. using System; namespace Test { internal class MainClass { public static void Main(string[] args) { Main(new string[] { }); ChangeColor (); } public void MilesToKilometers (string[] args) { var mile = 0; Console.Clear (); Console.WriteLine ("Miles to Kilometers"); Console.WriteLine (""); Console.WriteLine ("How many miles?"); Console.WriteLine (""); mile = Convert.ToInt32 (Console.ReadLine ()); Console.Clear (); Console.WriteLine ("Miles to Kilometers"); Console.WriteLine (""); Console.WriteLine (mile + " miles is about " + mile / 5 * 8 + " kilometers"); Console.ReadKey (); Main (); } public void ChangeColor(string[] args) { var whatcolor = 0; var fontcolor = 0; Console.Clear (); Console.WriteLine ("Change Colors"); Console.WriteLine (""); Console.WriteLine ("Letters: 1"); Console.WriteLine ("Background: 2"); whatcolor = Convert.ToInt32 (Console.ReadLine ()); if (whatcolor == 1) { Console.WriteLine ("Changing Letter/Font Color"); Console.WriteLine (""); Console.WriteLine ("Black: 1"); Console.WriteLine ("Blue: 2"); Console.WriteLine ("Green: 3"); Console.WriteLine ("Red: 4"); Console.WriteLine ("Yellow: 5"); Console.WriteLine ("Magenta: 6"); Console.WriteLine ("White: 7"); Console.WriteLine ("Gray: 8"); Console.WriteLine (""); fontcolor = Convert.ToInt32 (Console.ReadLine ()); if (fontcolor == 1) { Console.ForegroundColor = ConsoleColor.Black; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } else if (fontcolor == 2) { Console.ForegroundColor = ConsoleColor.Blue; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 3) { Console.ForegroundColor = ConsoleColor.Green; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 4) { Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 5) { Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 6) { Console.ForegroundColor = ConsoleColor.Magenta; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 7) { Console.ForegroundColor = ConsoleColor.White; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } if (fontcolor == 8) { Console.ForegroundColor = ConsoleColor.Gray; Console.WriteLine ("Changing Letter/Font Color"); Console.ReadKey (); Main (); } } } } } 
Your Main method accepts one argument, but you are trying to call it without supplying any, which results in the error you mentioned. If you didn't understand any of that, that is completely expected. You need to finish a beginner tutorial for C#, e.g. the one that is mentioned in the sidebar, before you can understand anything more.
Unfortunately, I can't reproduce the failure. I created a basic console application and recreated the basic structure and it all works fine. My main method looks like: static void Main(string[] args) { var firstSerializer = new XmlSerializer(typeof(FirstParent)); var secondSerializer = new XmlSerializer(typeof(SecondParent)); StringWriter firstWriter = new StringWriter(); firstSerializer.Serialize(firstWriter, new FirstParent { Customer = new FirstNamespace.Customer { Name = "John" } }); Console.WriteLine(firstWriter.ToString()); var firstParent = (FirstParent)firstSerializer.Deserialize(new StringReader(firstWriter.ToString())); Console.WriteLine("Deserialized: " + firstParent.Customer.Name); StringWriter secondWriter = new StringWriter(); secondSerializer.Serialize(secondWriter, new SecondParent { Customer = new SecondNamespace.Customer { Email = "asdf@asdf.com" } }); Console.WriteLine(secondWriter.ToString()); var secondParent = (SecondParent)secondSerializer.Deserialize(new StringReader(secondWriter.ToString())); Console.WriteLine("Deserialized: " + secondParent.Customer.Email); Console.WriteLine("Success"); } And I have my two customers in different namespaces with a sample "Name" or "Email" property. Everything serializes and deserializes fine. Since you're getting an exception with the instantiation of the `XmlSerializer` itself, can you post the full exception information?
The gist of the problem is that Main takes an argument,but you're calling it without an argument. Definition of main : `public static void Main(string[] args)` Your calls to main : `Main ();` you COULD just do : `Main (null);` since you're never referring to the args argument, but that's moot since you should probably NEVER call Main yourself. What you're doing is called [recursion](https://en.wikipedia.org/wiki/Recursion_\(computer_science\)) and there are places where it's appropriate, but this isn't one of them. Main is never appropriate for recursion, as it's meant to be just the entry point for your program. You're also passing an args param to ChangeColor but never using it so that COULD just be `public void ChangeColor()` instead, and all your calls to `Main()` could be change to call `ChangeColor()` instead. That said, you'd still be using recursion and it's not really needed here. You should look into using a [WHILE loop](https://msdn.microsoft.com/en-us/library/2aeyhxcd.aspx) with an appropriate terminating condition rather than recursively calling your method.
My current project lead developer had 120 hours scheduled for him in a single work week once. For those who didn't catch on, he was scheduled to work 24 hours five days in a row.
Lol, I wouldn't find that insulting if I were the interviewer, rather comical. We've actually had that happen where I am, though slightly different. We had a programming test that was open book and a guy asked to go grab a text book out of his car and did not return. Another guy asked to go to the washroom and walked past it and right out the door.
Wow, did you ever do anything about it? 
I started a new web dev job in November doing c# So far I have also had to write 3 desktop apps and a windows service.
I'd wager your problem is because a console application cannot receive "window messages". You'll need a window (it can be hidden) to be able to process those messages. Searching for "C# console windows messages" should get you all you need.
You're a genius. I'm stupid, well beginner as I like to call it. Thanks man.
Tried to. Wound up being more trouble than it was worth. The bright side is they went out of business less than a year later.
You don't ever want to "restart" your Main. If you want to repeat a set of instructions use a loop.
I had an interview once for a dev manager position. They gave me a piece of spaghetti code clearly designed to be confusing, and asked "What would you do if one of your programmers gave you this?" They clearly wanted me to figure out what it did, but they'd phrased it badly, so I replied "I'd fire him." They were shocked, but I pointed out bluntly that any programmer who produces code that bad should not be working. Horrified, they asked me how I'd straighten out the code. I said "I wouldn't. I'd get the requirements and rewrite it - I don't have time to figure out nonsense like this." I had another interview where they went on at length about how I'd have to work long hours and do extra work blah blah blah... I thanked them for their time, told them the job was not a good fit, I wasn't interested in being worked to death, and I left. You don't have to let an interviewer torture you. They have to convince you to want the job, too.
To complicated for a noob like me :p New question though. How do I divide two numbers? First the user types in X: x = Convert.ToInt32 (Console.ReadLine ()); Then Y: y = Convert.ToInt32 (Console.ReadLine ()); Now, what do I have to convert them to for them to be dividable. If I do x / y the output is 0.
How do I divide two numbers? First the user types in X: x = Convert.ToInt32 (Console.ReadLine ()); Then Y: y = Convert.ToInt32 (Console.ReadLine ()); Now, what do I have to convert them to for them to be dividable. If I do x / y the output is 0.
How do I divide two numbers? First the user types in X: x = Convert.ToInt32 (Console.ReadLine ()); Then Y: y = Convert.ToInt32 (Console.ReadLine ()); Now, what do I have to convert them to for them to be dividable. If I do x / y the output is 0.
Thanks for trying to reproduce. I'll try to put something together myself and see if I can get it going. Here's the exception that I got upon instantiation of the XmlSerializer. A series of 4 nested InvalidOperationExceptions. The top most exception is "There was an error reflecting type 'Root.Vendor.GrandParent.FirstParent'." The inner exception is "There was an error reflecting property 'Customer'." The next inner exception is "There was an error reflecting type 'Root.Vendor.GrandParent.FirstParent.Customer'." This is interesting in that it is trying to reflect the correct type. The last inner exception is "Types 'Root.Vendor.GrandParent.FirstParent.Customer' and 'Root.Vendor.GrandParent.SecondParent.Customer' both use the XML type name, 'Customer', from namespace ''. Use XML attributes to specify a unique XML name and/or namespace for the type." The last one is the most telling in that its expressing that the collision between the XML names are causing the issue. However, it obviously knows what type its trying to reflect, so I don't know why it can't just *choose that type* as the one to use for serialization. Specifying namespaces for the types does help the XmlSerializer sort things out, but because those namespaces aren't actually in the XML, it just causes different problems elsewhere down the line.
How do I divide two numbers? First the user types in X: x = Convert.ToInt32 (Console.ReadLine ()); Then Y: y = Convert.ToInt32 (Console.ReadLine ()); Now, what do I have to convert them to for them to be dividable. If I do x / y the output is 0.
Try this public struct CustomerRevenue { public string customer; public decimal revenue; } var customer1 = new CustomerRevenue(); customer1.customer = "1"; customer1.revenue = 50.0M; var customer2 = new CustomerRevenue(); customer2.customer = "1"; customer2.revenue = 30.0M; CustomerRevenue[] list = {customer1, customer2}; Console.WriteLine(list.Where(l =&gt; l.customer == "1").Sum(l =&gt; l.revenue)); 80.0
Oki thanks. I made them both float. :)!
I'm learning a new language by myself, so it will be easier to get through other languages. Now I know where to go, and what to work with.
Nope. No inheritance at all on either object. I'll try changing the type name then controlling the element name with the attribute.
Haha my bad, I definitely should have noticed the namespace and class declaration after you posted the exact error message. I'm glad you resolved your issue! Your game looks exciting:D.
If you do what's called a cast (to double) on one of the variables, it will work as you intended x / (double) y
If you want a one-liner (albeit maybe a bit overkill), you could use LINQ: data.GroupBy(entry =&gt; entry.CustomerId).Select(grouping =&gt; new Entry { CustomerId = grouping.Key, Revenue = grouping.Sum(entry =&gt; entry.Revenue) });
Like the other responder, I can't replicate the issue either. I created these objects namespace This.Is { public class FirstParent { public This.Is.First.Customer Customer {get;set;} public FirstParent() { this.Customer = new First.Customer(); } } public class SecondParent { public This.Is.Second.Customer Customer { get; set; } public SecondParent() { this.Customer = new Second.Customer(); } } } namespace This.Is.First { public class Customer { public string Name { get; set; } public string FullLegalName { get; set; } public string Region { get; set; } public Customer() { } } } namespace This.Is.Second { public class Customer { public string CustomerName { get; set; } public string Email { get; set; } public decimal LowRangeAmount { get; set; } public decimal HighRangeAmount { get; set; } public Customer() { } } } I created an object of type SecondParent, populated it with data and then serialized it. I then read an xml file in and Deserialized it in to a new object of type FirstParent. I also tried it in the other order with no problems. I then executed them a couple of times each in various orders and ran into no problems. 
Oh hey man. How's it going?
Java isn't far from C#
Just tell them you have to return some videotapes.
js... like assembly? wha?
That's how it is treated right now. There are a lot of X language to js compilers that lets you basically avoid writing js for front end.
What /u/rusmo said. If you take the attitude in this industry that "I only do this" you're going to have a bad time. Learn some dam .net. It's not that hard, especially if you already know c#. Web apps are the way of the future. Purely desktop (c#, or any language for that matter) are on the way out. Honestly, if you came into my office looking for a job and said well I only work in c#, I'd kindly tell you we weren't interested. Not trying to be a dick, just being honest
If you're willing to move, the Midwest has a boatload of .net positions open
"I need to go pay my late fees at Blockbusters."
To be fair, I don't think an entry level position not requiring even personal experience in a specific language is a bad thing, so long as the candidate understands programming principals, preferably in a similar paradigm.
Your readMsg method definition lacks a return type. 
Ohhh! THANKS A LOT! I didn't thought that was neded... Again, thanks :D
You ask them if they still give shitty interviews? 
Well Unity is a popular, free game engine and the majority of users and studios that use it use C# to write game scripts in it. It would require knowledge/experience in game development and some 3D math.
&gt; they already had test staff, but soon discovered that the people who were to fill these rolls lack the skill to make them useful Because it's not their job. Unit tests are a developers responsibility. And if you want them coding automated tests then you need to hire test engineers, not testers.
gifv is not a file format, it is an html wrapper around a webm.
Yes, yes, yes. I was referencing the extension of the URL that I linked, not the file format.
'my boy singleton'
I agree. That's why it didn't scare me all that much. Java and C# are fairly similar. it was the fact that he was willing to pay me $70k to not know what I'm doing.
You need a list. The customer numbers aren't unique. Just do a list of int (assuming it's ids), string, and add them. I can shoot you some sample syntax if you need it
There's something out there that's not web related and has robots and stuff. Look for medical device companies. That's what I do now. I'm sure the majority of you who have gone out and have gotten your blood tested have used our machines. From my point of view, we are not going to implement with web components and the last project that did that failed miserably.
Dr. Cox, is that you? 
&gt; ... for anything C# related that doesn't involve web tech (ASP.NET, javascript, jQuery, HTML5, blah blah blah) and it seems almost impossible. To stay employed as a C# Software Developer, you're going to need to know full-stack ASP.NET development. Either adapt, or become irrelevant.
Yes. You have to start somewhere... And that somewhere is either a book, or an online tutorial. This is pretty much the most absolute bare basic minimum shit you should know - and you're asking it already here. Are you gonna ask every simple shit? Get a book, sit down, read it.
From the error right on the screen: &gt; Method must have a return type Really? Reading the errors helps.
A lot of people say that but I feel like a jerk applying for a job that requires 3-5 years when I only have 1 year.
I agree. You cannot be narrow minded in regards to development work. You have to adapt to survive. 
It's a fair question, but the main reason is that the editor we were using would glitch out and not show that line at all (or at least only the first few thousand characters of it), so notepad was a quick and easy thing to copy/paste into.
Dude, pick up a book. 
Strangest thing. Well I'm glad your problem has been solved. Now back to my regular voodoo :-)
&gt; 'How much do you make?' I think that is something I'd rather discuss that later after we've decided that the company and I are a good match for each other. 'No, but how much do you make.' I currently work in a different professional sector and in a different position that wouldn't match up, so I don't feel that information is necessary right now. 'I can't continue considering you as an applicant unless I have a number.' I'm really not comfortable discussing that at this time. 'But it's my job, I need to know' So, in an effort to in any way salvage the interview and show good faith on my end, I gave a number. It's not what I make, and it was rounded, and he knew it. I had an interviewer do that to me - they wanted not only my current salary but what I was asking. I was on the interview through my recruiter, who would be doing the salary negotiation for me, so I simply declined to answer. The guy must have asked me 30 times, and I just kept telling him "I'm sorry, I can't answer that, please discuss it with Jim," as he kept pestering me and got angry about it and his colleagues looked restless. Finally one of the others asked me "if you won't even answer a simple question like that, why should we trust you?" to which I replied, "because I have just demonstrated that I can keep my mouth shut when I've agreed to do so." Somewhat to my surprise, they ended up offering me the job. I turned it down.
Maybe research when you get the error message.
Then... .Select(l=&gt;String.Format("{0}\t{1}", l.Id, l.Total)); Then, iterate through the output and streamwriter to a file. 
Static constructors can initialize static members, but actually singletons are bad code nowadays. 
As /u/JakDrako said below, console application doesn't process window messages by default. The Application.Run() starts the window message processing loop.
No Susan, it's just some random stranger on the internet. 
Heh, 2 monitors is fine like 80 or 90% of he time, but sometimes you just want to have your idea open, the webpage you're monkeying with and a screen to use to look up why something isn't working right.
Actually, it's Charlie.
Why are you using notepad to look at code?
You can google "c# datagrid to chart", that will give you best answer
So what? Either they pass on your resume or they don't. Let them decide, not you.
I would say that depends on whether they're looking for a specific answer or if they're looking to gauge your breadth of knowledge on the subject. With so many ways to answer, someone with a wider breadth would be able to provide the various meanings, while someone with a deeper knowledge of one of them could provide a more detailed answer... It serves a purpose if used right.
Seems to me all you need to do is have a webservice of some description on the master server that exposes two methods. One adds a server to the list, one returns everything on the current list. Client just hits the webservice as required. 
i think because i write this answer, instead of your answer...
What i'll do it make a fake video on how this would work. Cya tomorrow
If your in the Omaha area I know a place that's hiring.
ok here's a very quick video showing what I want to happen. https://www.youtube.com/watch?v=TVufVQ5DI_8&amp;feature=youtu.be
I'm not sure what reviewing code in Notepad means, exactly. What kind of code? What else did this guy do to get fired? I wouldn't code in Notepad anymore, but in the past it was convenient to edit html and perl. It's just odd to hear things phrased in particular ways because they indicate weird ideas companies work by that are cues to stay the Hell away.
Neither testing nor BA are inessential.
Out of curiosity what is the issue with web in general? When I first started out I was adamant about not doing web, I used to joke that I was racist against web. Recently I've noticed that a lot of interesting applications are moving away from Desktop and I took a job learning Ruby and doing back end web development (C# background). It's not that much different but gives you a broader exposure to your language and frameworks. I still like desktop application development (and mobile) and won't shy away from either. I try basically to avoid any roles which turn me into a customer facing person or a front-end only developer as neither interest me. In regards to roles utilizing C#, there are other areas like Simulations and tooling (games companies use C# on occasion I've seen for their tools), medical imaging and stuff.
&gt; I'm learning a new language by myself, so it will be easier to get through other languages. No. This is not how it works. You learnn future languages easier if you learn how to learn correctly. Guessing and asking other people is not the way to go. Reading a good book is.
Yeah... I'd make sure I'd say something like "okay, so you want me to code something that I can't debug and hope that it works right? That's not how I program and frankly I don't think that I want to work for a company that thinks this is an acceptable practice. Do you validate parking?" I mean, at least that way you're at least theoretically raising an objection that the interviewer can choose to address. Granted, the chances that they simply hadn't thought through that are low but they're non zero I guess.
Exactly. Having a wide palette to choose from is a good thing, not a bad one. I consider myself a .NET developer but I've had jobs where I didn't write a single line of C# for a variety of reasons (in one case I was contracted out to a department within a larger company who wanted to do stuff with their extranet site but the IT department wouldn't give them access to the servers, so the solution I wrote had to be 100% client side). On an extreme level, nobody knows what direction programming will take so it's best to have a knowledge base as wide as it is deep. It seems absurd that C# would just go away, sure, but I don't think it's at all weird to imagine a future in which C# is just one of many languages you have to be proficient with to do any job.
But development on those is never strictly c#
video is private.
I guess, i was actually going to go to the store near me and look at monitor prices lol.
woops. edited
For fucks sake, I've been in those types of interviews. Apparently S.E PA. has a lot of shitbag companies. I blame the heavy corporate culture in this area.
Generics *can* work. The same way doing this can work as well: public class AnalogDatasource:IDatasource { //code goes here public Response GetData(IRequest request) { // optionally do a type check here and return a 'failed' response return GetData((AnalogRequest)request); // throws invalid cast exception if not an AnalogRequest } private Response GetData(AnalogRequest request) { // more code } } With the latter approach you are sacrificing compile-time safety for flexibility (non-generic IDataSource). This can be a reasonable trade-off as long as it's managed and the reason for doing so is justified. In regards to using generics; the generic interface approach isn't ideal because the value of using an interface disappears. The only exception is if you're resolving the IDatasource&lt;T&gt; based on the type e.g. get the type of request to handle, look for an IDatasource&lt;T&gt; and invoke GetData. You'll need to use some reflection magic to handle the request, e.g. public Response GetData(IRequest request) { if (request == null) throw new ArgumentNullException("request"); var requestType = request.GetType(); // the getDataMethod can be stored in a private static readonly variable to avoid some cost of reflection var getDataMethod = GetType().GetMethods("GetData").Single(p =&gt; p.IsGenericMethod); return (Response)(getDataMethod.MakeGenericMethod(requestType).Invoke(this, new object[] { request })); } private Response GetData&lt;T&gt;(T request) where T : IRequest { var datasource = GetDatasource&lt;T&gt;(); return datasource.GetData(request); } 
If you are interested in unit testing, I would suggest to have a look at [NUnit](http://www.nunit.org/index.php?p=home). There is a (short) tutorial and imho quite good documentation. In addition if you need fakes I would suggest [NSubstitute](http://nsubstitute.github.io/) on top. But in order to get it right (as some examples within the introduction show bad things like multiple asserts per test), I would recommend you the book [The Art of Unit Testing](http://www.manning.com/osherove2/). That is an excellent book which teaches you basic to advanced principles and lots of best practises.
Its like spam, you can easily generate tons of applications and they will evaluate it and contact you if they are interested. I've landed a few good jobs doing exactly that.
thank you
In that the important thing is the end product, no it isn't. I've worked in jobs where I did the business analysis, the development, and the testing, and I've worked in jobs where all of that was parceled out to different people. Hey, I prefer writing code to all the other stuff too but I have to say that there is a certain level of power and ownership that comes with doing your own BA in particular that makes it compelling.
Then you should definitly invest and buy the book - or perhaps you can borrow it from a library?
It's no different than an assembly line. Sure, every step is important or not product will exist at all. Still, your step in that process is distinct. Programmers are not BAs just as a bolt turner is not some other task. The interviewer was implying that BA is primarily a programmer task that was being offloaded which is not true otherwise there would be no need for the BA title itself.
Could i ask you a question on private message?
I intend to use it with some custom controls, some wpf controls, and some wpf primatives. I might be able to do something with implicit/explicit conversions to AnimatableDependencyProperty from wpf's controls, but thats not a very direct solution
Try video game development. Pick up Unity or Monogame. It seems like the trend in video games, even when it comes to performance critical rendering and physics, is to move into languages like C#. C++ still dominates the market but there are definitely some really good engines in C#. If you are really up to it, you can always build your own little 2D engine to try the lower level game development stuff.
You honestly don't need to be worried about some one stealing your idea. I don't think you realize how extremely basic this idea is. Any value is in doing the work to make it happen, rarely is the idea the valuable part (until you do the work and people see your idea in action and realize the value, at which point your idea is in the wild anyway).
&gt; I was wondering which one is the right solution between the two of them? What's the two options?
one where i use unit testing and implement each test in a test method and the other one is creating a method then make a for loop wrap around a switch and case statement. Where each case is a new test and the cases are incremented by the for loop counter
Those are the two possible solutions but wasn't sure about which one was the right one. I already coded both of them, it's just deciding between which one is right in the context of the question
This problem may be from Windows 10? I've recently noticed that an enterprise application I use (i.e. a *very serious*^TM program) has this issue in some of its windows. I did not notice this problem in windows 7-8.1 
Generally speaking, the first (separate unit tests) combined with a standard unit test runner is what _should_ be done. As for the requirements of the question though, it sounds like you need both. However, I interpret _"Ideally provide an error counter so that the tests can be performed automatically"_ differently. Sounds to me more like it wants to execute each test (no `switch/case`), and for each failing test increment a counter. After all tests are performed, it outputs how many tests failed. (It's essentially a rudimentary unit test runner that runs all tests and reports how many passed/failed)
oh i didn't know anything about unit test runner? what is it? also do you know if there is any good websites to learn unit testing from? Now it does sound like that would be the correct answer, the only thing that made me think it wasn't the correct answer is because i made separate test methods for each test. 
If that is possible on reddit, yes of course!
There is no question in your post.
There the re-edit finally worked 
NYC is full of MVVM/WPF C# jobs. I get hunted directly a few times a week. You may need to get your foot into a more junior position at a bank/trading firm so you can put 'Financial Services" on your resume. Once that's done, then NNJ/NYC area is your oyster. Also, it doesn't hurt to read some books on how some of the financial instruments work. I haven't read this, but I heard about "[C# For Financial Markets](http://www.amazon.com/Financial-Markets-Daniel-J-Duffy/dp/0470030089)". I hired developers for a bank and part of our interview questions was to have them explain how bond pricing works. We'd have them do a rough entity model for a bond management system. If you see a job and it mentions something like "Credit default swaps" or "ABS" or any other financial instrument/term, take a few hours and research what that is. Try to familiarize yourself with the lingo. Maybe identify what the big entities would be and possible properties/methods. This can really help you stand above other developers when applying for a C# job in the NYC financial sector. 
networking is not my schtick please don't kill me.
**Interact with Desktop** isn't all that's needed these days. See this [article](https://msdn.microsoft.com/en-us/library/windows/desktop/ms683502\(v=vs.85\).aspx). 
Server is not returning a full response. Fiddler lists the result as 504. Sometime sI don't even get a response...
 string playerChoice = Console.ReadLine().Trim(); // Take out the whitespaces around the player's input Rock_Paper_Scissor element; bool parse = Enum.TryParse(playerChoice, out element); return element; Since you're not checking whether the `TryParse` was successful and return `element` regardless, invalid choices will simply return with the enum's default value (0, generally the first entry unless you manually specify values). As an aside, I would simplify your code by creating a separate method that takes the two `Rock_Paper_Scissor` values and returns which is the winner, so you don't have so much duplication in your winning logic.
Better wait for Windows 11.
Bad form. Can you do this for me is lazyspeak. If you were looking for help, and not a handout, ask instead for an example or pseudocode . 
here's one possible way of doing it: var validEntry = false; Rock_Paper_Scissor element; do { string playerChoice = Console.ReadLine().Trim(); var validEntry = Enum.TryParse(playerChoice, out element); if (!validEntry) { Console.WriteLine("Invalid entry, please try again."); } } while (!validEntry) return element; The TryParse methods basically attempt to parse the value you give them, and put the result in the second (out) parameter. It returns a boolean to tell you whether it was successful or not. In this case, we assign the result of TryParse to a boolean called validEntry, and we use that to control a loop that keeps asking the user for input until it's valid.
Thanks it works but while loop was not necessary i just needed the if statement. if (!validEntry) { return R_P_S.invalid; } return element;
Strange. Glad to hear you got it sorted, in any case.
Good. Make sure you throw them off the trail by rebasing all of the branches on the develop server to orphan them. They'll spend so long trying to figure out how your rebasing fubar'd the server, they'll never realize the truth. Besides, it's more efficient this way. Git repositories waste so much space with all those extra copies. We've already fixed it, why do we need to keep the broken code from before?
Do you know, by any chance, what does it mean? Message "java.lang.reflect.InvocationTargetException" string HResult -2146233088 int 
Not OP but a new programmer. Could you maybe list the technologies/languages for a full stack for ASP.NET development? 
I code because it can be a fun job that so far has paid very well.
Ok what my real qustion is, what's the best way to do this. Using a database? A server... something Else I don't know about.
Seriously, are you fucking with us? There's still no question!
Maybe it's personal preference, but I'll declare my object members (as null) at the beginning of a method. I won't bother defining them until I actually need then, because why bother instantiating them until I'm going to use them? Obviously you can do that after any logic--I just like to have my member declaration at the top.
Doesn't mean he SHOULD do it.
Haha yeah, thanks for the correction.
Wrong user input is expected because your user does not understand everything about your program and will do something stupid, and when they do your program should be prepared to handle it. 
I had problems thinking about what 'exceptional behaviour' was for a long time; when and why to use exceptions and try/catch blocks. [This is a great article on the subject](http://blogs.msdn.com/b/ericlippert/archive/2008/09/10/vexing-exceptions.aspx) which cleared a lot up, specifically: &gt; The classic example of a vexing exception is Int32.Parse, which throws if you give it a string that cannot be parsed as an integer. But the 99% use case for this method is transforming strings input by the user, which could be any old thing, and therefore it is in no way exceptional for the parse to fail. Worse, there is no way for the caller to determine ahead of time whether their argument is bad without implementing the entire method themselves, in which case they wouldn't need to be calling it in the first place. &gt;This unfortunate design decision was so vexing that of course the frameworks team implemented TryParse shortly thereafter which does the right thing.
Using exceptions to control logic flow is bad design.
Although it doesnt look like it is the case here, if async operations trigger an exception it requires some additional logic to get the error
The situation with when to use exceptions in .NET is far from clear or even has a right answer. You can see throughout the framework how there are different choices on the matter. I personally agree that user input isn't generally what you should use exceptions for.
Not for long, when handled.
Netflix does this exact thing.
I have to disagree with this wholeheartedly. If you don't know what polymorphism is, then you're telling me that you have no passion for what you do. That isn't even a "gotcha" question, that is the second tenet of object oriented programming. You might describe the behavior, but I don't need to spend the next 10 minutes trying to get us both on the same page before you can answer it. I wouldn't end an interview over this, but give me a break. However, I'd consider it a bright red flag if they didn't understand the concept because that would scream procedural spaghetti code monkey.
If its games you're after, look into Unity. It's a complete games development environment, and you can use C# to script the game objects.
Well, WPF (Windows Presentation Foundation) for a native .NET application.
How different is it from Forms? 
Thanks for the suggestions :) I will check them out when i have time.
It works, but it's not much. You'd be better off using sublime.
Threads are expensive. Have you considered using Task instead ?
I tried, but I couldn't seem to get the syntax right... I looked online at about 5 websites and still can't seem to get it to work right using tasks, but with threads I got it in just a few minutes...on the downside, they don't seem very useful... What do you mean when you say threads are expensive? Can you be more specific?.
Ahh yes, the power of copy paste will save a lot of time.
Wow, thanks ill check that out! Looks pretty clean. Good to see other desktop app developers care about keeping up with new ui design concepts. So many wpf apps look like theyre years behind ui style trends. Mobile app and web developers seem to put more effort into ui design, maybe because they dont have to worry as much about the business logic end
He fucks
&gt; How, as an interviewer, that's trying to find a good candidate that's not going to burn down my house, supposed to take you seriously if you don't even know a day 1 term that describes what you do? How am I supposed to take you seriously if you don't even know that's by no means a day 1 term for a lot of older programmers who went to college before OOP was a big thing? Or are you just okay with age discrimination too? &gt; In fact, 3 out of 4 old dogs that I've worked with write terrible code. Why? Because while they understand how to make something work, they only think in those terms - "does it work?". I don't want to hire those kinds of people because they cost us money because they're code quality is either buggy or unmaintainable or both. Oh nevermind, I see you are. &gt; How exactly would you ask someone to explain polymorphism (without saying polymorphism) in a way that would help you gauge a candidate's OOP competency? (*looks up the list of questions I use when interviewing*) "Would you tell me please about an example of an application you wrote in which you used a structure of classes and subclasses as an important aspect of the program architecture?" "Please tell me the difference between an interface and an abstract class and give examples of when you might use each." Or how about: &gt; What is abstraction? &gt; What is inheritance? &gt; What is encapsulation? Those are much more commonly used terms in an actual development team and I would expect a candidate to deal with them better.
One suggestion. WPF shines when you use correct paradigm - MVVM, read some theory first and don't jump straight into coding. If you try to program it like WinForms you'll not hit most of awesome stuff it provides.
That's not true at all. There seems to be a misconception that companies only have developers work on products. But there is usually a whole backend of internal tools that services that help make the product. And they're not all Web based. Many companies can't have Web based apps depending on the industry, or the idea of having [mostly] Web based apps is useless. It's not bad to know but saying you need to know it is total bullshit. Morgan Stanely, Microsoft (obvi), practically any major game company, are great examples of places you can work and not NEED ASP.NET. Plenty of desktop based apps need to be developed still. You can't do everything in a Web browser and anyone who has that mindset is just as naive. In fact the only game company I can think of that I know doesn't have massive amounts of entirely .net or win form desktop tools is Insomniac games. And even then, they don't use ASP.Net for their stuff I believe. And that too is not saying they don't have ASP.net for some~ things, but a regular .NET editor/engine or tools programmer does not need to know ASP
I'm not for age discrimination -- the precise opposite actually. I look for competency; I'm tired of people crutching on their years in service when they're still hacks. I don't see how either of those questions would pull out an understanding of polymorphism. In fact, those might spur into a debate about liskov substitution principle... but I'm assuming you'd balk at that too. Those "much more commonly used terms" there... convenient that you're ok with the other 3 tenets of OOP but not the 1. Is it just too fancy of a word for your likes?
&gt; It's easy enough to get started with, some of the things can be a little confusing coming from a WinForms background, but there are plenty of decent tutorials around to help you accomplish the usual things He meant to say "no". It is not intuitive to work with at all unless you web UI background and naturally take to XAML and its accompanying concepts.
Absolutely. The notion that you need ASP.net or bust is absurd. How is this getting upvoted? Much misinformation.
I'm guessing the problem is that once a class is public and customers might be using it, Microsoft feels forced to fully document it, ensure that it doesn't have any quirks or incomplete implementation details even if they didn't matter for their internal use case, can't ever remove it or change the way it works for fear of breaking third-party use cases, and has to support, port and bug-fix it for all eternity. 
thats actually a really good point, i hadnt thought of all that. Thanks! 
Pretty much this. It's fun and pays really well. It's very rewarding as a career as it makes me feel like a badass every time I overcome a problem. I learn something new every day on the job, and at any given time I can take a look at my skills from a few months ago and see how much I've grown as a programmer.
Yeah, screw interfaces and let's pass hundreds of nameless delegates around. I'm sure that'll be really fun to maintain a year down the road.
Because I just learned C# and would like some practice with it
Dear god man, create a resource dictionary. http://www.informit.com/articles/article.aspx?p=2007361&amp;seqNum=7
I did, this is the body of it: http://pastebin.com/zecw6yiE I also wanted the static definitions so i could define color sets, themes, color intensities, etc in code behind using strongly typed identifiers 
I'm just messing with you - I have a few codebehind static brushes defined in C# myself - but nothing like that...
As others suggested: WPF Once you have basic skills using it I recommend [mahapss.metro](http://mahapps.com/) to create a metro like UI.
Great work here :)
I'm not sure I understand that...yes, the current thread is looping and waiting for the other threads to finish, but that should have no effect on the speed of the other threads, after all they *are* other threads. Is this right or have I misunderstood something? Can you give me an example of how I would use threadX.Join, and why?
I will have a look into this as well. Thanks for the info.
Hmm, i hadnt thought of that. Although ive had so many issues with XAMLReader.Load/Read methods when using custom classes defined in a project namespace. But also how would that help me? The load method would just return a resourcedictionary object with the solidcolorbrush collection members
You did say most the time the answer is no. But I should have elaborated.... Singletons are bad because: 1. With dependency injection, the container should inject a singleton dependency for you and manage its life-cycle via the application's configuration 2. Singletons hide dependencies, making it difficult to unit-test or predict what is required to use a class. 3. Singletons take a property of the application as a whole and inject it into the class (How many instances of this class exist in the app?). I believe this violates good object-oriented design principles (probably SRP) and is short-sighted. For example, I used to write software for embedded devices. Often there'd be a module in the device which I needed to interact with frequently. I know this physical device only has 1, why not conveniently design it as a singleton so I can use it wherever I want? Well, it makes it hard to test consumer of the devices, because you cannot mock the static reference, and also what happens if now my testers want to hoop up 3 of the sub-modules on a test bench and have an application that tests them simultaneously? I can't re-use the class which represents that module, because it assumes there's only 1. How do you justify singletons other than a lazier way of doing something that can be done a better way?
[SFML](http://www.sfml-dev.org/) It's a lightweight 'multimedia' API built with OpenGL. It should do everything you'll need for a simple 2D game: Window handling, input, sound, graphics, etc. I used it often with C++ and can definitely recommend it. They have a pretty large selection of bindings, including .NET (although I've only used the .NET bindings once and can't remember if my experience was good or not). Also it's got great documentation and is actively developed (as far as I know).
That seems to be what I'm looking for, thanks! 
2D Games - https://github.com/Microsoft/Win2D 2D/3D Games with Engine (Timing, content pipeline etc) - http://www.monogame.net/
I think that with stuff like LINQ and other language features, C# has struck a good balance between the powers of functional programming and maintainability. IMO going fully functional just creates a mess that is impossible to maintain as a project grows and ages.
To elaborate a bit... Inheritance is an is-a relationship and that isn't to be taken lightly. If A is the parent class of B, that means *all B's can be used anywhere an A can*. Designing a class that can be safely inherited by anyone is *hard*. It's a contract that must be fulfilled. So for classes that are used by other important bits of the framework where the implementation details and behavior are crucially important, it's exceedingly difficult to make them public or protected. If a core class throws an exception because an implementation by a third party threw an exception way down below, the framework still gets blamed. This is why experienced programmers will tell you never to make a framework unless that is your job, because supporting that framework will become your job. Favor composition over inheritance for code reuse.
Yes, I know computers only have a finite number of cores. In fact mine has 4, each of which can can 4 simultaneous threads. The fact that I have one thread spinning in place really isn't going to affect most computers these days, and it shouldn't affect mine either... "If you only have 2 cores to begin with" - I think most cores can handle at least 2 simultaneous threads without any problems, some can handle more. They are specifically designed to handle more than one thread at a time with little to no downside. Most pc's should be ok with at least 4 threads and many should be ok with more, Amd *or* Intel...Core2Duo came out in 2006 and could handle 4 threads, 2 per core.... I doubt if very many people these days have a PC that can't handle 4, I would consider that a lower limit... Context switching.... has an effect, but it's not a huge deal. Thanks for your input.
Thanks. I am now using this to start my tasks.
Better to define delegates than to use Func all the time.
The sample responses you pasted look like PostMan is sending some more headers (cookies). Doesn't HttpClient by default not work with cookies? Does your server-side require the client to be auth'd or to send session cookies?
It's like an 18 gig download... sounds awful. Especially when it's some weird security permission issue which it seems should be fixable
Right now I'm working on a "Faux FAT" system that organizes a directory and file structure and FAT in one file so I can use random access easier for data in my applications and keep it all in one file without loading the whole thing into memory. The architecture is as follows: abstract DiskReader : IReadWrite &lt;--&gt; abstract Buffer : IReadWrite, IBuffer &lt;--&gt; abstract FileAllocationManager ---&gt; IndividualFileAllocationStream : IReadWrite &lt;---&gt; ThreadSafetyBlock : IReadWrite You'll notice that I can loop it around and install a second FileAllocationManager on a File that is allocated through the first FileAllocationManager as it only uses the interfaces to talk to one another. I can also leave out the buffer or swap it out for a different one. I can swap any "IReadWrite" for any "IReadWrite" and it will still work. I also have an "IEncrypt" interface for the "DiskReader" which provides encryption and decryption for any data which is read or written by the DiskReader, and can be swapped with any encryption algorithm that implements that interface. Interfaces are incredibly useful because they allow you to make runtime or design time decisions which swap different classes with completely different implementations that all operate by the same methods. &gt; An interface seems binding and therefore limited in that I have to use all it's members when I implement it. That's the point, it guarantees a specific class or multiple different classes can work in a specific way, but allows you to swap out those classes to work together in different ways. For example, every time you use a "foreach" statement you're accessing an interface called "IEnumerator&lt;T&gt;" - anything that impliments "IEnumerator&lt;T&gt;" can be run through a foreach statement. In the native .NET code, this includes List&lt;T&gt;, native arrays, Dictionary&lt;T,T&gt;, HashSet&lt;T&gt;, etc
At least on what I'm working on at work, you have to pass interfaces due to technical requirements. But a nice everyday example is let's say you have a method that creates a clone of an object before it edits the original, you can make the argument an ICloneable. This way you can pass in any class without having to overload your method a billion times to accept various classes and edit then when your requirements change! 
This. Try to achieve 80% code coverage with out them and you'll see why. Also it helps with loose coupling
Some would say Google got their inspiration for Material Design from [MS Modern UI](http://www.developer-tech.com/news/2014/jun/26/googles-material-design-pays-homage-microsofts-flat-cross-platform-modern-ui/).
Which version? Both 2013 and 2015 worked fine on my upgrade do you have any plugins like telerik or nhydrate or something installed? 
It's 2015 Community, and I just discovered it's only the "Windows Universal" designer that won't load. WPF and Forms load fine... I wonder if I have to clean install with the upgrade to W10 to dink around with W10 development. I have one plugin - the unity tools one.
When you have multiple classes that inherit from different classes and you want to define their common functionality. Somewhere in the code you would be able to check if some class has that functionality using if (obj is IDoesSomething) (obj as IDoesSomething).DoSomething(); That way obj itself can be of any class, as long as it implements IDoesSomething. So there could be ClassA that implements Interface1 and Interface2, as well as ClassB that implements Interface2 and Interface3, along with ClassC that implements Interface1 and Interface3. You can make conditional logic based on it.
Buy Head First Design Patterns and work slowly through that book.
It sounds like you may want to read up more about the nature of interfaces in a strongly typed language like C#. Consider looking at MSDN page on Interfaces: https://msdn.microsoft.com/en-us/library/ms173156.aspx And Polymorphism: https://msdn.microsoft.com/en-us/library/ms173152.aspx Interfaces, more generally, define how the outside world can interact with an object. When you define a class, its interface consists of its public method signatures and properties. Sometimes, you want different classes to have the same interface, because you need to treat them in a particular way for some reason (even though, otherwise, these classes may not be related in any way). C# doesn't allow multiple inheritance, but a class can implement as many interfaces as it likes: IEnumerable, IEquatable, ICloneable, etc. These interfaces guarantee that your class will implement some particular behaviour, and thus, you can treat your object as an Enumerable, Equatable, or Cloneable object (as you need).
That is a loaded question :-) It's completely different. My suggestion is you start out by reading WPF Unleashed (SAMS) it will give you a great start. There are so many ways in which WPF is different, but perhaps the most relevant to your question is the fact that in WPF you can completely change how every element on the screen is rendered. But it doesn't stop with just changing the looks, you can also completely modify the behavior of any element/control. But there is no way to explain this to you, you have to experience it yourself. And the learning curve may be steep depending on your background. You need to put a lot in it before it pays off, but once the "click" occurs in your mind... you'll never go back. I started WPF when the first beta's were released and I never went back to Windows Forms. It took me a long time to master though. And WPF means XAML and XAML made a huge comeback over the last few years with Windows Phone, Universal Apps and even Xamarin (Android/iOS). So my suggestion is, take the leap, you won't regret it. Update: Pro Tip: Avoid using the visual designer at all cost, use XAML directly. (Later on you can start using BLEND as a visual designer, but don't start with that, grow to that) To give you an idea. By using XAML and nearly no code you can turn [the WPF calendar control](http://snag.gy/NGYgC.jpg) into a [fully styled and functional items calendar](http://snag.gy/npRcV.jpg) So instead of having to develop this control myself, I was able to change the looks and behavior of an existing control to meet my requirements.
Are you running it in as administrator? It's necessary to work with IIS so maybe the UAC in 10 is more strict.
I'm going to assume here that you are learning C# and not a developer asking this question. I'm announcing this assumption just cause stuff like unit tests are not really relevant until you are a full fledged developer status. ---- Interfaces, classes and abstract classes all are a way to do "inheritance". C# uses Javas version of inheritance, which is basically "you can only inherit from one class, but you can BE other classes, you just can't inherit from them". An example could be this. You have a Dog and Dog inherits from Animal so that Dog can get Animals MakeNoise methods and Health property. Now you also want Dog to be an Omnivore while other animals are Carnivores or Herbivores. How would you get multiple inheritance in this system where you need to inherit from two things? The answer is interfaces. Interfaces let you do essentially an indirect inheritance. By making an interface for Herbivore, Omnivore and Carnivore, we can now do: IOmnivore one; one = new Dog(); and it works! We can use IOmnivore as the type and just have it reference anything that implements it. Another use of it is if you are writing something reusable that other programmers can use and you need your code to take in an object that has what you need. For an example of that, I'm going to steal Xamarin.Forms' binding system to give a good real world reason for that. In their binding system, one of the optional parameters is ITypeConverter and they basically want you to pass in an object you made that implements ITypeConverter. The object can do more then that, but by implementing ITypeConverter Xamarin's system knows for a fact that your converter object has versions of "ConvertTo" and "ConvertFrom" created, so it can call those methods with the confidence that it will work. Once you get more experienced there are lots of other reasons to use interfaces, like factories, unit tests, dependency injection shared across multiple platforms (in that they share a backend codebase that knows "there is an object that implements ISaveAndLoad, and it will be filled out on the Android/iOS/Windows side respectively", and many other reasons. But as far as beginners are concerned, the best way I found to think of it was that it gives you multiple inheritance without true multiple inheritance. Also, just remembered, in first year at school there was a question my teacher gave us for Java (so it applies here) that was interesting regarding this. "You are to program the BatMobile, which is a car, a plane and a boat. How do you do it?" The answer was "Ask yourself, which is it more of? It is kinda a boat, but not usually. It's kinda a plane, but not usually. It's 90% of the time a car. So it extends car and implements boat/boat, since any time it is used like a plane it doesent follow how most planes are built, it has it's own interpretation of that to fill in. Same for it being a boat."
Say that to all f#/haskell/clojure/lisp/... Developers
Well, you did save the installer in your Downloads folder or where ever you keep the installers for your dev tools...right...*right*? ed: It's been a while since I did a fresh VS install. Forgot that it was a web installer. Disregard my comment.
The point of an interface is to design a "contract" so that a consuming class can just call its methods without worrying about its implementation. You can then drop in different concrete implementations of that interface and any class that calls it can use them without having to change any logic.
The VS installer is just a web downloader. It downloads the other data on the fly.
&gt; For example, every time you use a "foreach" statement you're accessing an interface called "IEnumerator&lt;T&gt;" Nope. That would be an unnecessary performance hit. Remember, calling interface methods are always slower than non-virtual methods on the class itself. The compiler looks for a GetEnumerator method that returns an object with a MoveNext and Current. It doesn't care whether or not you actually implement IEnumerable because it won't use it anyways. (And before C# 2, it was doubly slow because you would have to cast from object.) 
The public interface defines the contract. An abstract interface indicates that two different classes share the same contract.
I smell bullshit. It sounds like you are mocking out anything that is even remotely hard to test in order to pretend your code coverage score is higher than it really is. Code coverage doesn't mean anything if you only write the easy "unit tests" and ignore anything that hits a database, file system, or other external dependency.
&gt; The compiler looks for a GetEnumerator method that returns an object with a MoveNext and Current. It doesn't care whether or not you actually implement IEnumerable because it won't use it anyways. (And before C# 2, it was doubly slow because you would have to cast from object.) Fair enough But IEnumerator is the object that "GetEnumerator" returns...
I'm not sure if this point came across in the other responses so ill try to articulate it a bit more. Interfaces have much more to do with the functionality of a certain type rather than changing the data within it. For example, lets say that im working with types that need to be compared to each other. One way to do this would be to use an interface called "Eq" like so. Public interface Eq&lt;T&gt;{ Bool Equals(T other); } Class classy : Eq&lt;classy&gt; {...}; *interfaces not have to be templates, but it works best in this example If I say that a type is "Eq" then ill require it to define an Equals() function. Next maybe I'd want to make an "Ord" interface which defines GreaterThan() and LessThan(). Now, for anything that I say is Eq and Ord im saying it implements everything I need for comparison. Here is where this becomes very useful. Imagine im now writing a data structure which I intend to sort. If this is a generic data structure then I have to make sure that every type used with it can actually be sorted. Luckily we just defined two interfaces that guarantee their types provide the functionality needed to be sorted. So the template type has been restricted to only those which are both Eq and Ord. Class sorter&lt;T&gt; where T : Eq&lt;T&gt;, Ord&lt;T&gt; { ... }; So why not use classes for something like this? You definitely could use classes if you wanted to, but that would force your types into a hierarchy that isn't necessarily true. Although this is unlikely, what if we had a type that could be compared via &lt; or &gt; but not by == or visa versa. If we inherited by Eq-&gt;Ord-&gt;Other, such a type would be impossible with only Eq and Ord. So do we create three classes for all possible situations (Eq,Ord, and EqOrd)? What about when we start adding in more and more restrictions to work with? Suddenly your class hierarchies are mud. Thus, Interfaces are best suited for defining capability over potentially all types and work well with generic programming. Functions like ToString() and Equals() are good examples of this. Abstract classes are like interfaces, but they allow you to require certain member variables and even let you define certain methods, however it is ironically less abstract than an interface because it is still a class and must be the sole parent of anything that implements it. Classes are the most specific and the least likely to actually be inherited from if you make use of the other two. Hopefully that clears some stuff up. I didn't understand why interfaces were useful untill I started work with Haskell where interfaces are the only "inheritance" like tool used. As strange as it sounds, it is possible to live without classes and still have powerful abstraction capabilities.
I am only trying to provide a reasonable example of why you would want to use an interface. ICloneable is messed up due to it not really defining as shallow copy or a deep copy, but that doesn't prevent it from being a simple example.
Use abstract interfaces when you need them. How do you know that you need them? Because nothing else solves the problem you are having. Far too many people rush into using abstract interfaces with no thought about the performance or forwards compatibility issues involved. They just blindly apply them everywhere, as if they don't even know what method inlining is. 
Don't give bad examples. There's no reason for it. You have a perfectly good set of examples in the form of IList and friends. Talking about ICloneable as if it were a good thing will just lead people astray. 
I bring this up because it allows us to talk about the performance repercussions of abstract interfaces, something that is often overlooked. Method inlining can be a huge performance boost, even more so now that we are fully compiling to machine code ahead of time. Abstract interfaces, and virtual methods for that matter, preclude inlining and other related optimizations. It may not seem like much, but when you are accustomed to a lot of very small methods that cost can add up quickly. 
That stuff you just listed: INTEGRATION TESTS, not UNIT TESTS.
Who the fuck cares? Seriously? Terms like "unit test" and "integration test" are just meant to assist in communication. They aren't meant to be excuses to not write tests that are too hard. *** And for the record, that division is relatively modern. Historically the term "unit test" merely referred to a unit of functionality, it didn't say anything about whether or not there was a database involved. Likewise an "integration test" was one that tested the work of two or more teams in conjunction. 20 years ago you wouldn't say that your code calling your database was an integration test. Does this matter? No. What matters is the damn tests get written. And not just the ones that work on in-memory objects. For most projects, the highest risk factor is in the communication between layers such as calling the database.
You have literally no idea what you're talking about.
&gt; Terms like "unit test" and "integration test" are just meant to assist in communication Yes, that's the point. The distinction is meant to *communicate* that interfaces help with writing unit tests but not (necessarily) with integration tests. 20 years ago, Windows XP was released. I feel like we've progressed as an industry a bit since then.
Let's say you have six methods, each one calls the database at some point. You don't want to test the database, not in each of your methods anyway, you want to test YOUR code. So you have an Idatabase service, that doesn't do anything other than stub out a fake db so you can make sure your code does everything you expect it to.
WPF is based on XAML for the GUI. You don't have to use Visual Studio to produce the XAML. There are 3rd party products that also create XAML. You can make any type of 'sleek' interface using XAML. You can also just do it in HTML. 
That's a great idea yeah i'll do that
Terrible examples here... http://stackoverflow.com/questions/6802573/c-sharp-interfaces-whats-the-point Just read the second answer and that will clear your doubts.
Isn't that how we define service vs program? Anyway, programs must have an entry point - services may not. 
Still trying to determine if grauenwolf is a troll or just a bad dev who has a strong opinion.
.net doesn't have a concept called "abstract interface". What do you mean? In the more general sense?
this is why open source stuff rocks. The documentation is usually terrible but you can always figure out what something does by simply reading it. 
&gt; Historically the term "unit test" merely referred to a unit of functionality, it didn't say anything about whether or not there was a database involved But having a database involved now makes it more than one unit of functionality, because you have the function/method/code that creates the database connection, then you have the code that is being executed by the database to return whatever result. So, by definition, testing the result of a database query is not a unit test. Googling the definition returns a number of links that have a similar definition to this (the top result): &gt; Unit testing is a software development process in which the **smallest testable parts of an application**, called units, are individually and independently scrutinized for proper operation. So, as we can clearly see, you have a severe lack of understanding as to what purpose unit testing actually serves. You say the highest importance is testing communication between layers, but what about software that is being supported and extended by a team of developers? If developer A refactored someMethod() and changed something integral to its return value that other methods rely upon, properly written unit tests would have caught that so it can be corrected prior to a production release. Understanding the difference between unit and integration testing is key to finding and fixing holes in test coverage and can potentially save countless hours of debugging and troubleshooting to find out where a bug came from.
No bullshit. I use TDD ON C# (still working on JS testing skills) so all of my unit tests verify a specific behavior. I do also have tests that validate operations against couchbase and other higher level tests just not as many as they are more expensive to maintain.
Sometimes I really want to punch to inventor of strings.
[According to MSDN, you're wrong\.](https://msdn.microsoft.com/en-us/library/windows/desktop/ms685477(v=vs.85\).aspx) It may be hidden from you, but *every* executable has to have some kind of entry point, otherwise how is the system going to know how to execute it?
The point of interfaces is that they allow you to say that a type (class or struct) offers some functionality that a consumer can then safely depend upon, without fear of that functionality being removed or significantly changed. What makes this so powerful is that interfaces allow us to create many types that adhere to the same contract (public method and property signatures), and, when well-written, those types become seamlessly and transparently usable by anything depending on that interface without needing a bunch of runtime type checks and pages of if-elseif-else blocks. They're also very good for compartmentalizing your API and limiting the API surface area exposed on a returned object. The most common examples that're usually offered are the generic collection interfaces, as /u/Elliot_Crane described. However, there are a LOT of uses for interfaces: defining a contract for accessing resources, which enables you to easily support multiple storage/retrieval backends (i.e. different database vendors or a website's API) &gt; An interface seems binding and therefore limited in that I have to use all it's members when I implement it. Whereas a class I can use whatever I want. One member or all of them. Yes, that's the entire point. If there are some methods that you can't or don't want to support, you can throw NotSupportedException any time that method is called, but make sure you have a *very* good reason to do that. If you DO want to support a method but aren't ready to implement it, you should throw NotImplementedException instead, as a reminder to finish it.
Those languages were all designed to make writing code this way easy, by having first-class method/function signatures and/or homoiconicity, as well as having much better type inference and making type annotations optional in most or all cases. C# isn't at that level yet, and working with generic delegate signatures CAN be horrifying, so tweq's comment is entirely valid. Don't be so smug/dismissive.
It's not about "instead of", exactly. They fulfill related but somewhat different functions. For example, read up on the IDisposable interface if you're not familiar with it. It describes behavior that you might want in a lot of different kinds of classes. Because C# doesn't have multiple inheritance, implementing a common interface is the only reasonable way to do this.
That's ONE installer. You can also get the ISO, which I *always* do because fuck waiting for VS to download while it installs.
I shouldn't need a database connection to verify that the method that calculates sales tax on my Sale class does so correctly. And yet, if my sale class has an implicit dependency on a database connection in order to retrieve tax rate data, I am pretty well stuck aren't I? So now if my test fails for some reason, is it because of the implementation of that method, or because of something to do with the implementation of my database connection class? There's no way to know for sure without separating the two. I can do that by making the database dependency explicit, which doesn't necessarily mean I need an interface. However, I do need an abstract class at the very least, since those are just as easily mocked for testing purposes as interfaces are. So I would agree that needing interfaces for unit testing is not really a reason to use them. However, making dependencies explicit for the purpose of testing is not BS. Why interfaces then? There are two reasons I can think of that aren't fluff. First that comes to my mind is the separation of what an object *is* from what it *does*. A class definition, whether abstract or concrete, defines what an object of that type *is*. It could be an Animal or a Sale or a Widget, whatever. An interface defines what an object implementing that interface *does*. In many cases there are classes that do the same things but those classes are not (and should not be) in the same inheritance hierarchy. Printing comes to mind as an example. I can print a Word document, a JPG image, or a byte array stored in memory somewhere. Should all those things have a common ancestor? Nope. Nor should my caller need to know what those objects are in order to call Print() on them. An IPrintable interface works perfectly here. My caller just needs to know that it has an object that implements IPrintable so it can call Print, and my individual classes don't need a common ancestor that defines a Print method. The second reason for interfaces occurs at development time. Let's say I am developing a class that at some point will need to consume data passed to it from some other class. The problem is, that other class hasn't yet been implemented (and won't be for quite a while). What are my options? I could wait for that other class to be implemented, or I could implement it myself now. Well, I don't know how to implement that other class, and anyway I don't have time to wait for it. So what can I do? I can create an interface to represent the contract I expect the other class to fulfill. When the other class is finally implemented, it can either implement the interface directly or I can write a wrapper class that implements my interface and uses the other class. Problem solved. 
Dammit, forgot the smiley. I agree with you on c# not being ready for this kind of programming - I tried (and failed) to remind people it is perfectly valid on some other languages.
Because C# doesn't have multiple inheritance. At a conceptual level this is the difference between an interface and a class: An interface is a class with no data members and only pure virtual function members, however due to the limitations of single inheritance you can't inherit from multiple classes with no data members and only pure virtual function members, so...
Not even remotely similar. It's markup based, like HTML, but far less shitty.
Not only are you needlessly hostile throughout this entire thread, you're objectively wrong and kind of an idiot. 
I don't dispute that, but when what you are comfortable from a development perspective is, say, C#, then XAML is not easy to tinker with without some how-to work from another source. The syntax is not intuitive, and (until recently) the IDE was little help in that regard. I'm not saying its not necessary to learn it, just that you wont pick it up on the fly once you see a few snippets of markup. As opposed to, say, Java programming, where OOP is still OOP and not an XML language.
Are you just trying to be a dick now?
The "smallest testable part" means stop when you have the smallest testable part. It doesn't mean "keep going until you've mocked everything out". At that point you are well below the smallest testable part.
You can mock a class too, not just an interface.
Expanding with an example. public class Foo { public void InsertModel(IDatabase db, DomainModel model) { db.Insert(model); db.Save(); } } Probably in a different class library (imported using NuGet perhaps), you have these (things are trimmed down and simplified immensely): public interface IDatabase { public void Insert(DomainModel objectToInsert); public void Save(); } public class Database : IDatabase { public void Insert(DomainModel objectToInsert) { // Do stuff here. } public void Save() { // Do stuff here. } } In your unit tests for Foo, you can easily create a class that inherits from IDatabase. When you run a test for Foo.InsertModel, you can pass in an instance of your test class that implements IDatabase, and now your builds won't fail when running tests due to your unit tests trying to connect to other things! I just learned how to set stuff up like this about two weeks ago, and I'm still excited by it.
It whines because control relies on that event handler which doesn't exist anymore when you delete it. Easy way to remove it is to click on the control, go to Properties, click on the little bolt (handlers), find your event (for example Click), simply delete the name (example: "button_Click"), hit enter.
Most people aren't writing code where the fractions of a nanosecond performance hit are more than background noise. If you're doing financial trading, network routing or some kind of high performance computing situation - then you're probably not wanting to run .NET anyway, so these discussions are moot. It's like discussions on whether you should use string concatenation vs StringBuilder. [It just doesn't matter](http://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/) for pretty much everyone. 
If you do that, it's not a mock, it's an instantiation of that class. The point of a mock is that you get all the parts you want without the extra cruft that comes with a full class.
Your creating a dynamic runtime object that overrides the methods, IE a mock.
Why would you quote my entire comment if you're going to respond to the whole thing anyway?
Which is a lot more effort for zero gain. Why bother?
I am much in a similar boat, though I started with Unity and started learning C# more after as I realized my programming skills needed work. My general tips would be, start developing something. Look into WPF/Xaml as you probably already have visual studio, learn basic UI design, then start developing a piece of software. Start with writing everything in pseudocode and then write in the actual code with actual syntax as you're looking it up. It won't be good, it won't be worth much, but it's a great learning experience. Once you finish your first piece of software you will have a small toolkit at your disposal for your next piece of software. Do it again. Develop another piece of software. Leading programming philosophies center around doing multiple rapid iterations(called Agile developing), and this is also one of the best ways of learning new skills. Also try to get involved with the community. Like this subreddit, or stackoverflow. Being exposed to the code and the environment on a daily basis will help with your understanding. Personally I do not recommend rushing into Unity. You want a solid understanding of how software is built before you start adding in game mechanics, physics engines, 3D models, animation and sound.
Actually, Parallel.For gives worse performance for me (seems like it's only using one thread?). Going to have a look at the possible parameters for Parallel.For. I used following simple example: var result = new int[100000000]; var stopwatch = Stopwatch.StartNew(); Parallel.For(0, 100000000, i =&gt; result[i] = i); stopwatch.Stop(); stopwatch.Dump(); (LINQPad)
Yeah, this is the kind of thing that can really hinder the beginner. It used to annoy the hell out of me. You just need to realise that when you double-click a control three things (well, two really) happen: 1) The method code is auto-generated in your code-behind file 2) The XAML markup adds the relevant handler, e.g. within your button XAML you will get Clicked=button2_Click 3) The method name will appear in the Events list for your XAML control (in the properties window, select the lightening bolt icon to see events). If you remove the method from your code, the XAML (and thus the Event list) for the control still reference that method, which now doesn't exist, hence the error. So remove the reference from your XAML or the event list by deleting the relevant text. Then you can safely remove the method. If you still have an issue, sometimes I find that clean/rebuild fixes it up. Another thing I'd like to point out that saves me a lot of grief is to always name your controls before creating any methods that they hook into. That way, instead of getting methods called button2_Click you will have StartButton_Click. It may not seem a big deal, but when your project gets bigger it will save you headaches (i.e. you know which button the method is referring to from the method name).
I'd say so. But I'm always open to new things, I'll try it your way soon and see.
You either need to create it yourself, or you can download a library. I would recommend the free library [OxyPlot](http://docs.oxyplot.org/en/latest/).
thank you! I will try it ;) 
I'd love to know how, in your own words, following the SOLID principles has derailed a project. 
Here is a (contrieved) example; It presents one of the best use cases of an interface : dependency inversion. Imagine you have two pieces of code, A and B. A contains a class that B is using. So B depends on A. The thing is, that A changes quite often. Ever day you have to change it. And every time A changes, B needs to be compiled (and tested). But it takes long to compile/test B for whatever reason. So even if changing A is quick, because you also have to take B on the ride, it usually takes long. But this can be easily fixed. Instead of B using class in A. It defines a "contract" which basically says "I need these methods with these parameters and these return values to be able to do my work." Then, A can contain a class that will have those methods. This fixes the issue, because B doesn't need to be compiled and tested unless the "contract" itself changes. This "inverted" the dependency so that A now depends on B instead of other way around; So changing code in A has no impact on B. There is one huge thing : class in A needs to implement all of those methods. If it doesn't implement even single one, then B cannot do its work properly. You probably realized that this "contract" is actually an Interface. Moral of the story : You should not think of interfaces as class saying "I implement those methods", think of it as class saying "I need implementation of those methods to work properly" or "I'm working using these methods and I don't care who implements them".
Regardless of how much you know, you will *always* know enough to do *something* with that knowledge. As time goes on and you continue learning more, you'll look back at everything you've done up to that point and find your accomplishments to be quite trivial. ("Wow, I spent a week on this, but now I could do it in 30 minutes") Despite this fact, you would be doing yourself a huge disservice if you didn't thank yourself for taking the time to do them, as there's literally no better way to learn than to simply practice.
It's okay to use swear words in your comments but try and keep the insults to other co-workers to a minimum.. 
I'm a software engineer specializing in .Net on backend servers. I can't remember the last time I had to make a WinForms or WPF UI - I would personally checkout running C# cross platform under the Mono runtime along with Owin and Entity Framework. This will expose you to a wide range of development styles and techniques that you might never see with UI design. The backend will always trumpet the front end in importance. 
&gt; The backend will always **trumpet** the front end in importance. 
If you are using ReSharper, Alt+Del should work (safe delete).
Thanks very much for the explanation. And yes, I've now gone through and named everything, including the labels and group boxes!
As a newbie C# hobbyist I can't really justify the cost of ReSharper. But it does look like a nice tool.
According to the documentation of this class, it is supported in: **.NET Framework** Supported in: 4.6, 4.5, 4, 3.5, 3.0, 2.0, 1.1 Are you sure you're using the .NET Framework? Universal Apps, Windows Phone apps or Portable libraries only have a subset of the full .NET framework.
Write some shitty tools: * write a shitty encryption tool that reads a file, encrypts it and writes the result back to disk * Google Search queries: * c# how to use command line parameters * c# how to read a file to memory * c# how to use cryptostream * c# how write file to disk * write a shitty image viewer that can open a picture and show it with correct aspect ratio in a window, add a back and forward button that navigates through the folder of the first image * Google Search queries: * c# how to read create Image object form file * c# get list of all jpg files in folder * c# show image correct aspect ratio and now come up with your own ideas. You will learn the science behind everything later, just start by putting stuff you find on stackoverflow etc together.
Yeah definitely, I'm using a lot of crypto classes/functions from .Net and they all work.
There are a lot of excellent suggestions ITT, but this is how almost all of us *actually* learned how to code.
Umm.. SQL?
It will help you understand linq and is vey useful if you plan on building anything web related
I tried parallel.for . It's fairly easy to understand, however it didn't give a very good result for me - splitting a job into 4 pieces gave about 80% of usual time. Going to stick with tasks. Four tasks is giving me abut 3.5 to 4.0 times speed up - I'm happy with that. I've also used a lambda for the first time. 
Haha.. that was kind of an answer to ops question, I didn't even see your submission till you replied to me.
Because it's fun. :)
Edit: I think you're kind of doing it wrong, you're telling parallel.for to do 100,000,000 things in parallel each of which just does one single operation.So yes I would expect that to be slower than doing it normally. What I used is something like this: Parallel.For(0,3,i=&gt;FillNumbers(i)); void FillNumbers(i) { for(int N=i*25000000;N&lt;I*25000000+25000000;N++) TestArray[N]=N; } That way parallel is just running 4 things in parallel, each of which does 25,000,000 operations. Problem is, when I did this, the time taken was 80% of normal time....about a 1.25 times speedup. Yet doing it as four tasks using Task.Run(()=&gt;FillNumbers(i)) gave me a 3.5 to 4.0 times speedup! For now I will be using Task.run and WaitAll(). 
Hi james, I love your toolkit! I revised my color selection methodology quite a bit since i posted this. Now, i have a MaterialBrush class and brush sets that group by color. For example, the DeepPurpleBrushSet has references to all DeepPurple### brushes. You can use them as a collection, or you can access an individual brush by its intensity. (Or maybe its luminosity..? Not sure.) For example: DeepOrangeBrushSet.GetBrush(Intensity.P500); Or through binding using a converter &lt;Rectangle Fill="{Binding ActiveBrushSet, Converter={StaticResource MBSTBC}, ConverterParameter={x:Static styles:Intensity.P800}}"/&gt; And if the ActiveBrushSet changes to Orange, the rectangle changes to Orange but selects the brush at intensity 800. Im still figuring out the best way to structure the colors, because id like to now group multiple colors dynamically based on palette standards which is proving to be difficult. I just created an app and custom charting library using a modified version of material design, id love to get your thoughts on how i can improve it! I just posted it here: https://www.reddit.com/r/csharp/comments/3ggyfd/my_first_attempt_at_material_design_in_wpf_c/
unfortunately i cant open source it, its for a company. Which sucks, cause id love to post my code and get some pointers on how i can improve it
Are you sure? Because I Just followed the msdn sample at https://msdn.microsoft.com/en-us/library/dd460713(v=vs.110).aspx I assumed the whole point was to let it (parallel for) figure out how much threads / tasks it needed.
Looks really impressive, great work! If it's the IP of your employer I suggest you keep going, make some mistakes, then rebuild it from the ground up for open source. ...If you used the palette assembly from my toolkit that would help build an eco system; I already went some way to ensure compatibility with MahApps. If you want to chat you can contact me in the Gitter room linked from GitHub project page (Twitter and email also on there).
I code because *I am the bone of my code*. #ShamelessReference I really love this feeling when something you spent hours building finally starts making sense, taking shape, working correctly. I love building apps that I as well as others will find useful in some way. Edit: I like designing rules and logic, that's why I started writing stories a few years ago. But for me writing lacks this certain something that coding has.
The data is initially in SQL and gets processed with my Analytics Engine. The output of the analytics engine is a custom interactive document markup language thats based on a combination of QML and XML. Report templates are set up and registered with the analytics engine, and they are auto-generate with the requested data. These reports just contain test data since my analytics and reporting engines are not finished yet.
I don't think you understand how threading really work in modern processors. @grauenwolf is correct when saying that you probably hit a starvation problem. Modern CPUs are divided in cores. A core is a processing unit coupled with a cache and a high speed data channel (gross over-simplification). They can only handle one task at a time and execute instructions at roughly the clock speed of your processor. This task, in software term, is called a thread. Modern processor can use two tricks to improve performances when it comes to an execution thread. They can either pipeline or hyper-thread (intel only). Pipelining is the act of interleaving different kind of instructions to execute more than one per clock cycle. For instance, if you have two multiplier unit inside your core which takes 4 cycles to produce a result, and you do not use any form of pipelining, then it will take 8 cycles to do two multiplies. If you do use pipelining, and each instructions came back-to-back inside the core, then it will take 5 cycles to get both results. What happens if there is nothing else to pipeline in between? The core will stall and execute no-ops until the instruction returns a result. Hyperthreading is the act of interleaving different threads to fill stalled cores. Lets say your core is busy accessing memory, which usually stall for around 300 cycles, there is a very large potential for instructions to be executed while it waits. Hyperthreading will then choose one of the thread that already have data in the local cache and will resume this thread on the stalled core. If that thread also stall for an extended period of time, then it will run an other one in the same pipeline. This why hyperthreaded core always appear busy in the task manager. That's because they always are at least as busy as the main pipeline. You see, saying that "most cores can handle at least 2 simultaneous threads without any problems" is not really true. It depends on what the thread is doing. You can easily fit 2 threads that stall 50% of the time or 4 that stall 75% of the time on the same core. In your case though, you never stall. Your loop is a compare instruction followed by a jump instruction. Those are not noop instructions. Instead of stalling you lock the core entirely. This fills the pipeline with instructions which prevent either hyperthreading or the windows kernel to kick in and use the core for something else. Using Thread.Join is the right solution here because it will stall the core and free it for hyperthreading as well as notify the OS that this thread is paused which will also let the windows kernel to scheduler an other thread on that core. FYI1: Most modern intel-based computer today are dual cores with hyperthreading. That means 2 simultaneous threads, each with one associated thread to fill-in the holes. That's it. So most computers today can only handle 2 threads that uses a 100% cpu like you're doing; not 4 per core; and specially not 4 per virtual cores like the one shown by the task manager (they are hyperthreaded pairs). FYI2: Actually, the original Core2Duo did not have any hyperthreading feature, so no, they could not handle two threads per core. This technology was part of the pentium 4 line up and then later re-introduced in the original high-end Core i7 CPUs like the 920, together with TurboBoost. EDIT: I would also like to mention that in modern intel processors, doing multi-threading is very costly because of the Turbo-Boost feature. If a single core is maxed out while the others are free, then you get a ~25% performance increase for that core. This means that if you split the load over two core, you are loosing this advantage so your are not going to be running at twice the speed, but closer to 1.6 times the speed. If you hang one of the cores, then you might actually end up with a drop in performance.
That's not how it works. I'm the kind of person whose hired to clean up the mess after your company fails to complete the project. My job is to rip out the extraneous interfaces, poorly implemented DI frameworks, useless mock tests, and other unnecessary crud that's doing nothing but increasing confusion and bug counts. On a typical project I probably delete 10 lines of code for each one I add. 
What you are looking for is called an "Analyzer". It is a way to hook up into Roslyn (the new compiler platform).
Perhaps take a peek at using the built in `XmlSerializer`. Basically, create simple plain old data objects representing your question, answers, correct answer, and explanation, then put them together in a `List&lt;T&gt;`, then feed them in/out of the `XmlSerializer`. It will help enforce type safety and make a relatively readable/editable XML file for you. Here's an overview/tutorial: http://www.codeproject.com/Articles/483055/XML-Serialization-and-Deserialization-Part (EDIT: Part 2 here: http://www.codeproject.com/Articles/487571/XML-Serialization-and-Deserialization-Part-2)
Thanks man!! Yes, id consider it, id really like someone to look over my code and suggest areas for improvement. I'm 19, i don't have much formal programming experience. Ive been coding for 5 or 6 years, but i've never really gotten feedback on my code. I'm the core developer at this company, so i haven't gotten any technical feedback here either. I end up coding for 14+ hours a day just to try to find better ways to code. For example, my controls are not lookless controls with a XAML template applied because ive been having issues with custom Template_PARTs. And since C# doesnt support multiple inheritence, ive structured the graph controls in an unconventional 'aspect oriented' approach to give me a sort of Dependency Mixin concept. It works and it gives me elegant code, but i have no idea if it's efficient. Anyways i may be able to post the code. The issue is there are a ton of dependencies on previous libraries i wrote for this company, so id need to rework that a bit. 
I've had this problem too. Coming from a long history of winforms dev, it seems that it's a complete paradigm shift, so it's hard to wrap my head around. Plus all of the tutorials seem to have complete different ways of doing it, or look sensible but don't match what I see/get in Visual Studio.
Great job!
Did you use any third party libraries, i.e. SyncFusion, etc.? Those graphs with animation are bleeping awesome!
Thanks!! Nope, no third party code. Most of the graphics are custom geometry and paths. I also have some custom animationtimelines and storyboard managers
A few things... 1. Threads don't seem useful to me to solve that problem. There doesn't appear to be any long task that would benefit being run on a thread to free the UI thread. A single thread working very fast can easily simulate X cars moving around at the same time. 2. You should not mix your UI with your problem solving. Modeling the parking lot and cars should be its own group of object, and the UI should just be a "view" on those objects. Those patterns are often referred to as MVP or MVVM, and although more widely used in web apps or WPF, WinForms apps can still benefit from using them. 3. If you still decide to implement multiple threads, you should look into TPL (Task Parallel Library) which is the "current" .Net best practices for multi-threading apps. You model your processes as "Tasks" that can be run on various threads using the "async / await" keywords. 
Thanks for the response! Have you got any specific links that you favor?
This is an odd way to go about trying to learn about Threads. Essentially, you're making a simulator, and you're trying to give each actor in the simulator it's own thread. The ugly reality is that the UI of your application is going to run in a single thread (possibly two, in the case of WPF and the render thread) and not play nice if any other thread tries to touch it's UI components. You can't ( easily ) assign parts of the UI to each use a specific thread. Their logic and processing could each of a thread, but the actual drawing of the panel is going to happen on the main/UI thread. Attempting to interact with controls on a form from another thread other than the UI thread is going to end badly for you. What you could do, is have an Actor class behind the scene that represents the Car and the Button and the Parking Spots...etc. These objects could ( for laughs ) each be on their own thread. What you need to figure out now, is how to communicate their state changes between each other ( in a thread safe way) and how the UI can poll or be notified of changes to update the GUI. This isn't that difficult, if you've ever worked with threads before. But trying to do this as a "let's learn about threads" project seems a bit ambitious. I think you should start with some simple "thread safe windows form" tutorials. 
http://stackoverflow.com/questions/4015324/http-request-with-post A lot of good information in the first post. Legacy methods + new updated HttpClient library method. Try with something simple. Since you have a captcha, you will need to handle the CookieContainer yourself in order to remain in the same session.
Yup, i want to learn how to use WPF now. Windows Forms is just lacking in design.
Well, it's different in that WPF enforces the separation of a control's *implementation* (the "code behind") and its *visual appearance* (mostly XAML). It also makes it very easy to adhere to the MVVM pattern, which dictates the separation of a control (its implementation and visual state) from the application's business logic and data that the control displays or interacts with using a *view model*, which acts as an intermediary between your business logic, data source(s), and view. A lot of people get really confused by this, but the goal achieved by a successful model is: present the data and provide hooks into the business logic in ways that make sense for the view, and propagate changes made by the view back into the rest of the system (optionally validating- the changes first). This pattern enables your view to take dependencies on just its associated view models, rather than interfaces exposed by the application architecture, which is nice because it allows you to work on the application logic with much lower risk of breaking the view, since the view logic and application logic aren't interleaved (as is typical with WinForms).
What you've illustrated at 19 is attention to detail. You may have have some architectural issues, but experience comes over time, not when you first walk out of your bedroom. You will gain it. But very few programmers with 10/15 years experience will create UI that looks as good. Well done, keep it up.
No, see, I get the architectural idea: it's essentially just MVC by another name, tailored to the C#/XAML pairing. It's more the actual doing part. All the stuff I'm used to in winforms is pretty much gone, the controls are different, the user interaction paradigm is different, and it's all a bit weird. The tutorials seem to focus on the theory, and then show some shallow examples that don't really help properly transition from winforms over to WPF.
&gt; All the stuff I'm used to in winforms is pretty much gone Can you give some examples? Might be able to point you in the right direction. &gt; user interaction paradigm is different Somewhat, yeah. Instead of keeping application logic inside event callbacks, you now have .NET events in your code-behind, as well as event routing and bubbling. There's also the Command system (which I don't use, preferring to bind to methods on my view model). &gt; The tutorials seem to focus on the theory, and then show some shallow examples that don't really help properly transition from winforms over to WPF. While learning WPF, I suggest forgetting what you know about WinForms. There are a lot of similarities, but some things are *very* different, so trying to understand some of the big differences through the lens of WinForms will only confuse you. I'll see if I can find some decent documentation to help you out.
It's certainly possible to do this, but *don't*. It's a hack, IMO, and a bad one.
Holy SHIT MAN !! AWSOME
envy! You're not in danger of someone taking away your skills! You want someone elses! &lt;/joke&gt; :D
That is a great job! You going to share a minimal version of it somewhere? Or maybe a blogpost describing how you went about doing this?
&gt; SCADA Can you elaborate what this is and what kind of work is involved from a software perspective?
Care to elaborate a bit on what's bad/hacky about it? While it wouldn't be my architecture of choice for a new application, it does work pretty well.
Why not build your own projects?
See that's what I thought, but the method seemed to catch a lot of proverbial flak in various StackOverflow etc. links. If I still had them open I'd paste them here, but suffice to say they all recommended binding to proxy properties in the VM (e.g., SelectedModelA, SelectedModelB) that themselves modified the actual model data. Perhaps I expressed myself poorly in the OP, or am reading the SO criticisms wrong?
There's actually some stuff built into .NET (I think MSFT bought the company that made it and packaged it into the .NET framework). It's not fancy by today's standards, but it's pretty easy to use. Check out the namespaces below: System.Windows.Forms.DataVisualization.Charting System.Web.UI.DataVisualization.Charting
Interfaces are also important for [Liskov Substitution Principle](http://stackoverflow.com/questions/4428725/can-you-explain-liskov-substitution-principle-with-a-good-c-sharp-example) Look up [SOLID](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
Damn. That looks cool. Is this built in .net as well? What OS/software runs on the molding machines which sends back data to your software?
Very nice. Do you ever end up being limited by the .net framework?
No. Why not? Because of separation of concerns. The role of the model and the viewmodel are vastly different. For this to work correctly you'd need to implement INPC on your model - but it does not belong there. The model should not implement INPC, it should be a POCO.
That's quite a variety of toolkits. What are you looking to build?
fuuuck. thats not exactly something I can learn and implement on my own at home, since I think SOA I think "enterprisey". 
 Until you can make a RockPaperScissors console app(it has to be a console app) don't do anything else.
Looks great, besides two things: The colors are too dark, I would try to brighten them a bit. And maybe try a different font. I'd recommend Roboto (it's what material design mostly has) since its more curly but not cute if you get me. If you try to change those things, I'd love to see it again!!
It's not enterprisey at all. Just look up how to create a RESTful (or RESTlike) web service using ASP.NET Web API.
I agree on both of those. The font actually is Roboto, i think WPFs text rendering system is muckin up the works. And most of the graphs have palatte generators sourcing from the FlatUI design palatte, which i will change eventually. 
Thank you for your advise, I will read up on that :)
Alright. I just opened a project using the Roboto font but it seems to be using the standard font (segeoi?) again, weirdly enough.
i was looking in WPF Inspector and it said the fontfamily was Roboto, so i assumed it resolved properly. If i open microsoft word i can use roboto and it looks better than on WPF, but it looks similar enough that i didnt suspect it to be a completely different font. Ill have to look into that.
Opps sorry. Maybe I wasn't clear. I meant, I'm open to using any of the above because those are the ones I'm familiar with. I don't mean to use all of them for one project. I'm open to any ideas :) 
Eh? I think SOA, I think multiple services running on top of some sort of service bus ( RabbitMQ, MSMQ, etc )
Just did a fast check, seems as if there aren't any problems. Probably just me with a bad memory..
Check out /r/gamedevclassifieds. There are lots of hobby projects looking for programmers.
Thank you! I'll check those out ASAP.
Could elaborate a little more what you like about wpf and the .net framework and how the sealed classes put obstacles in the way? Any other language features that you wish c# had?
The framework doesn't have any direct support for telnet, though I'm sure there are third-party libraries available. If you just want to execute commands and don't need any other telnet features, you might also get away with just using a TcpClient to directly read and write ANSI bytes without caring about the intricacies of the telnet protocol.
Well if you're so confident then post your LinkedIn profile.
When I saw "first attempt" I braced myself for mediocrity but I am blown away. It is absolutely gorgeous!
This is pretty good advice. For my first WPF project I did a little bit of drag and drop to figure out the syntax, and then it quickly became simple to just write everything in XAML (with help from documentation, of course).
shit you will make for others will definitely have been done before.
`Deck` seems like a somewhat confused design. Why does `New()` both modify the internal list as well as return it? What happens when `New()` is called twice? Why should `Deck` implement `IEnumerable&lt;List&lt;Card&gt;&gt;` when it only contains one list? Here's what I'd do: - have `Deck` implement `IEnumerable&lt;Card&gt;` or even `IList&lt;Card&gt;` (or inherit `Collection&lt;Card&gt;` to save some boilerplate code) instead of exposing the list as a property, so you can use LINQ methods directly on `Deck` - add a static `GetCoreset()` method to `Deck` (or another appropriate class) that returns a new deck with the respective cards added Then you could use it like var orcs = Deck.GetCoreset().Where(e =&gt; e.Race == Race.Orc); var customDeck = new Deck(); customDeck.Add(new Card(...)); customDeck.Add(new Card(...)); customDeck.Shuffle(); var wizard = customDeck.First(e =&gt; e.Subclass == Subclass.Wizard); etc. 
So an idiot like you can harass my employer? No thanks, I deal with enough assholes already.
This is fine for simple domain types, but more complex ones should have their own view model, just for sanity's sake. You don't want changes in your domain layer breaking your view.
For anyone who learns by doing, this is the correct answer. Future you should look back and say "wow, my old stuff is garbage," not "too bad I couldn't wrap my head around everything."
Love the animation. What should I be looking into to get the sexy charting animations? 
that looks fantastic OP! I'm speechless really, wish I had your UI skills
There's a pretty good telnet library from this codeproject article: http://www.codeproject.com/Articles/19071/Quick-tool-A-minimalistic-Telnet-library
Looks flashy .. and useless. To expand on my skepticism. I have experience working with "reporting" engines from DevExpress and ComponentOne. Also have some experience with Telerik library. These kind of frameworks are usually perfect, when you try to use them for tasks that they were designed for. If you can just copy/paste the tutorial/example project and be done, then great for you. But any kind of customization makes all hell break loose. Also, while the animations and interactivity is nice, I don't see point in reporting. You want to display the data in as conscience way possible and if interactivity is required, its mostly dig in/out or some kind of sorting or filtering. The way you "clicked" on an item and it just show the value and rotated it is IMO practically useless.
This is heavily opinionated area. I'm going to give my opinion on this. First, I don't believe implementing INPC breaks POCO. The point of POCO was that the model class shouldn't depend on some specific persistence library. Both Hibernate and EntityFramework, from where the POJO/POCO came from first required each entity to derive from framework specific base class. This would tie the model to that specific framework. But INotifyPropertyChanged interface is in core of .NET . There is no dependency added when class implements it. Second thing is idea of what "model" is. For some, model is just set of dumb container classes that are serialized and deserialized into database without any logic. On the other side of spectra, model is complex set of classes with rich behavior and interactions. And some other code is responsible for persisting these into database. This is common Anemic Model vs. Domain Model discussion. It is obvious, that if you see model as primarily anemic, that adding any logic (like INPC) on top of simple fields is wrong. On the other side, adding INPC to domain model is perfectly normal. I personally don't think adding INPC to model is wrong and that binding to it is wrong.