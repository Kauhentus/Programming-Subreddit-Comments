\&gt; ... which keeps it on one line. I choose one style over the other based on which one is more readable. &amp;#x200B; FooBar fb = (someCondition) ? new ExtendedFooBar() : new FooBar(); &amp;#x200B; IMHO, it is more readable.
Exactly. 
"(not just equality but also &lt; and &gt; )" &amp;#x200B; SIMD instructions only return equal or not equal. How are you handling this case? And if you don't you're going to possible do more work. &amp;#x200B;
Fields and properties. Prop exposes (usually a private) field as an abstraction so that it can be easily changed without affecting external usage. 
More common, in C# is this (if you need a private backing member. You don't need to use the this reference. private string _name; public string Name { get { return _name; } set { _name = value; } } Even more common is to use the simple get/set syntax. This has a hidden member that is only accessed through the getter and setter methods, which, in this case are just pass-through methods:: public string Name {get; set;} In C++, it would be like this: private string _name; public string GetName(){ return _name;} public void SetName(string name){ _name = name;} //can only access the _name member through the exposed public functions. The purpose is to control access to the object member. Now you have a place to put your validation logic (in the setter) and you can, perhaps, do some normalization of when the item is accessed (in the getter).
Oh Thanks That c++ code really helped 
I really wonder why homework assignment are always weird stuff that nobody in its own mind would ever use in production code. Seems to me that's bad teaching practice. Or the teacher is too lazy to think of a better wording for the same kind of function that would actually make sense.
Hmm, I think I have to agree -- it is more readable. I like it.
Properties are syntactic sugar around get/set methods. The set methods always have 1 parameter named `value`. In Java, this would be `getName` and `setName(string)` methods. Since a get/set method pair with a single private backing field is such a common pattern, C# allows even more syntactic sugar to reduce the boilerplate. // Same as above, but there is no private "name" variable declared. public string Name { get; set; } // Public read, private set public string Name { public get; private set; } // Read-only property with initial value. public string Name { get; } = "Bob"; // Public set, private get. // I can't think of a valid use of this, but it's possible. public string Name { private get; public set; } 
Then please vote here: https://github.com/dotnet/csharplang/issues/419
Dunno if you checked but I (Salgat) already thumbs upped and hearted it last year. 
I'll do a news report on it to try to drum up more support. I like the idea of this plus generic constraints T: async new()
Or maybe they're trying to encourage the students to think outside the box and figure out how to return a value from a method that doesn't have a return type? You don't learn about writing production-quality code in your first lesson!
https://stackoverflow.com/questions/4132829/wpf-horizontal-datagrid
I don't want to sound mean but can you please actually read the post. I already know you can mess with the DataGrid using transformations, but this is a messy solution that has issues. I need to know if there are any custom controls out there for this, or how would I get started with copy the source code for the DataGrid and making my own.
If that were the case, why not use an example where using ref and out params is actually useful and needed.
No idea. But you're also assuming that OP completely understood the question that they were asked.
I think there's a little bit of a misunderstanding between nitpicking, or criticising new syntactic sugar additions versus thinking they either shouldn't exist or are bad to the point of not existing. As you pointed out, there will always be cases where some format is preferred. The only hard and fast rule in programming is that there will always be multiple ways to achieve the same effects. The criticism offered in cases like this, are really just trying to point out some potential pitfalls of the programming 'sweet tooth', and the pitfalls of 'we've always done it like this, so why change it?'. 
It can be both but in most cases it is small arrays with less than 20 items (mostly 8).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learncsharp] [Trying to fix an application using the coolermaster SDK and have literally no idea what I am doing, any help would be appreciated.](https://www.reddit.com/r/learncsharp/comments/alyuzu/trying_to_fix_an_application_using_the/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
That would be great. I posted this question before and had multiple people recommended MEF.
I'm in bed at the moment but I think I get the general gist of the class. Which keyboard do you have? I'm trying to hunt down some docs for that. 
Awesome! and it's the mk750, this is the documentation I have been using https://makerhub.coolermaster.com/custom-lighting/assets/sdk/sdk-document.pdf
Lol yeah I'm a fool. I saw that there was only one doc after I posted (serves me right for not thinking they'd be smart enough to have one sole sdk). What actually happens on the keyboard? Does it light up but in the wrong places? Nothing at all? Just glancing through the file the Key Mapping region has a key pair for what is supposed to light up. Official docs say 7 rows, 24 columns but the key map pairs only list 6 and 21max (I think) so you may be right there. 
What is the syntax for using the async `DisposeAsync` method? Will the `using` block implicitly 'await' if inside an async function? Or do I need to use `await using (...)`?
it lights up in the wrong places, but not in any logical way (from what I can see) and I did think that at first too, but looking from the .xls file in the sdk download, everything seems to be numbered correctly, with the final row being the LED lightbar, and the final 2 columns being for extra LEDs that do not actually exist. Although I do not actually see where the lightbar is assigned in the file, and it does light up here's the relevant part of the keymap xls https://i.imgur.com/aESREnC.png
Looks like it is undecided &gt; I'm leaving discussion of how IAsyncDisposable interacts with using to a separate discussion. 
Interfaces can now provide a default implementation... but why? We already have abstract classes for that
Tuples are poor imo as they don't self document. Either return a simple data class with the result or a nullable int.
Alright, up and at the keyboard. Insanely silly question, you do have the CoolermasterSDKDLL64.dll installed somewhere, right?
They don't look as nice for the parse methods though: var result = int.TryParse("123"); if(result.Successful) { var realresult = result.result; // Do things } else { // Handle not int } Vs if(int.TryParse("123", out var result) // Do things else // Handle not int Much neater. 
yup, in the appropriate folder and everything
Value tuples are perfectly good though and save having to write many small data classes. 
Alright, so here's where I've ended up. Looking through the .cs for Coolermaster everything is exactly how it should be in relation to the Coolermaster SDK. As far as this humble an inexperienced programmer is concerned I don't think this is Chromatics fault at all. So I started looking through other githubs that deal with RGB keyboards and reference the mk750 and I've found a few that have varying degrees of the same issue you're experiencing. Some of the issues listed were rather old (around April - June '18) but I can't seem to find an answer other than "Fixed it." or "Working fine now." A few people mentioned seeing things working correctly when they completely uninstalled the CoolerMaster portal and reinstalled it, and some found help by rolling back the CoolerMaster DLL. I'll link that github at the bottom. Sorry I couldn't be of more help, I was really psyched to find a problem I could probably work on! But from where I'm sitting it looks like it's probably something up with CoolerMaster. https://github.com/antonpup/Aurora/issues/1014#issuecomment-386890292
You can do the same thing in C#. If you work with Visual Studio you can press Alt + Enter on that code and it will show you some options. One of them should be "Convert to methods" or something. If you choose that the same will be created there. It's just a little prettier to use these properties C# provides.
Good answer, but unfortunately it's really a lost cause with this OP. He's been posting extremely low effort questions for a couple of weeks here. And literally **every** attempt to help him lead to absolutely nothing. Don't waste your time.
Your code is equivalent of this private string _name; public string Name { get =&gt; _name set =&gt; _name = value; } &gt;Plz don't hate
I am a big fan of [literate programming](https://en.wikipedia.org/wiki/Literate_programming). Therefore my main side project last year was a [literate programming tool for C# and .NET Core](https://johtela.github.io/LiterateCS/). It is currently in quite stable state, but any feature requests are welcome.
Should probably buy the return statement dinner first 
What is it? Don't send me to Google it, I want personalized opinion
You want a pivot table. That doesn't exist in WPF but I think it does in UWP
I'm not an expert in wpf, but I would start by looking at the template for data grid. You can find this online: https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/datagrid-styles-and-templates In theory I would expect that you want it to work exactly the same way as a normal DataGrid and so could just modify the template to put the headers on the left going down and the rows going out to the right. But I don't know for sure if it works as "easily" as this.
Interfaces have huge caveat where once you release them, you cant touch them without breaking every implementer. This allows you to add new methods without introducing a breaking change which is the main point behind this. You can read more on github https://github.com/dotnet/csharplang/issues/52
take a look to wkhtmltopdf or phantomjs (both of them are based on QtWebKit). With these tools you can specify desired DPI for output PDF explicitely, most likely you'll able to produce good PDFs for printing. From C# you can execute these command line tools with System.Diagnostics.Process, or use one of the existing C# wrappers - in this case you may perform HTML-to-PDF conversion in one method call.
Only mostly equivalent. https://blogs.msdn.microsoft.com/ericlippert/2007/01/10/lambda-expressions-vs-anonymous-methods-part-one/
&gt; you're also assuming that OP completely understood the question that they were asked Fair point.
Can confirm it's radness.
This is a cool request
Its a simple solution to implement background jobs, that is to say jobs that run on a schedule or when requested. Its simple and really quite pretty.
I found the [ItemSource.TransposedSource](https://github.com/GuOrg/Gu.Wpf.DataGrid2D#itemssourcetransposedsource--propertysource) from [Gu.Wpf.DataGrid2D](https://github.com/GuOrg/Gu.Wpf.DataGrid2D) to be nearly exactly what I wanted. It lists the properties of an object, makes these rows and binds the list of objects to the column. For my uses, I added an attribute for filtering and ordering the rows, since these are built by reflection. public class Person { public string FirstName {get;set;} public string LastName {get;set;} } Binding a ObservableCollection of Person would allow you to have a table: FirstName - Person1.FirstName - Person2.FirstName - Person3.FirstName - [...] LastName - Person1.LastName - Person2.LastName - Person3.LastName - [...] 
Those aren't lambda expressions. They are expression bodied members. Basically just syntactical sugar for single members. Plus that article is super old and may not be entirely accurate.
Studies come first. Plan your time and don't leave things until the last minute. Nobody is going to do your work for you, and trust me you cannot afford my hourly rate.
Because of superscalar processors?
The time it took you to post this request you could have finished it already.
Agree. If more power is needed, check out rebus. 
In Java, it would be: private String name; public void setName(String name) { this.name = name; } public String getName() { return name; } &amp;#x200B;
The default combination is Ctrl+.
Returning a tuple of F and K in this case makes absolutely no sense, and doesn't in many cases I can think of. If the values are used outside the class, tuple is generally poor imo. Much better to have a temperature class which would then change the F value when K changes and vice versa. It can also be extended if the method has to change without breaking existing code.
It works well, but the extensibility is very painful. The injection of the `PerformContext` via fake parameter is just nasty.
Probably this kind of stuff: //*************************** //* Fancy important comment * //***************************
I got the idea, thanks.
I'm with you dude. I understand the use cases but I just don't like it.
Think of it like extension methods on that interface but put into the interface instead of somewhere else.
[Console.Read](https://Console.Read)() only reads one char. Use name = Console.ReadLine();
Actually, I think it's more like /*************************** * Fancy important comment * ***************************/ because `/*` and `*/` are used to delimit multi-line comments in many different languages.
The old style of commenting for some people in other language (C/C++) may have containted &amp;#x200B; // \*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* // \* ReadLine \* // \* Reads a line of text \* // \*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
&gt; Its simple and really quite pretty. Yup, really easy to slap in place and get it running, couple of nice dashboards too! Really enjoy Hangfire, my go-to for recurring tasks.
Normally, you would use `Console.ReadLine()` to take inputs from users. Are you sure, that this is not what you want to do? string name = Console.ReadLine(); //type your name, e.g. Jacob Console.WriteLine("Hello " + name); //will output Hello Jacob 
I love it. One of my favorite packages for .NET. It goes really well with APIs and a perfect way to combat app cycles or other memory losses for critical cron tasks. Also the dashboard makes it much less painful to track tasks then running sql queries.
Thanks to you and all the other good responses in this thread! And just for the record the AccountTransaction class is defined by an external wcf service I’m consuming and thus I can’t change the fact that the only available constructor is the default parameterless one. 
Not wanting to sound funny, but its a getter and setter on a property, both fundamental concepts of Java and C++. The code literally says Get and Set. Not sure how much you know of C++ and Java if this throws you.
Or just open a book about C# programming. It's going to be in the first chapter most likely. I don't get how people can be like "I'm new at XXX" and not even spend 10 min reading an introductory article or book about XXX. But instead throw immediately a question in a forum or blog.
I think the underscores are debatable... https://forums.dotnetfoundation.org/t/underscores-in-private-fields/731
You used [Console.Read](https://Console.Read)() wrong. What you're trying to do is more like this: Console.WriteLine("What is you name?"); //because it's a write line, it will print this and then take you to the next line. string name = String.Empty(); //you're basically declaring the variable name and giving it the value "" name = Console.ReadLine(); //this will read whatever the user inputs. Console.WriteLine("hello " + name); //this will then print hello (whatever is the input) &amp;#x200B;
I'm sorry but I just do not see the point of this madness with switch statements and the recent trending obsession with removing braces and trying to compact so much to a single line. I'd like to see the language evolve to better express things like concurrency (because tasks cannot possibly be the final form, I hope?) instead of ham-fisting shortcuts for developers to do less typing. Seriously, what is this? static string Display(object o) { return o switch { Point p when p.X == 0 &amp;&amp; p.Y == 0 =&gt; "origin", Point p =&gt; $"({p.X}, {p.Y})", _ =&gt; "unknown" }; } That is the ugliest thing I've ever seen and it doesn't really save any keystrokes. It makes browsing the code a huge pain. You think you've removed nesting but all you've done is push it to the right and replaced a colon with yet another overloaded meaning for `=&gt;`. What problems are being solved here? It's just syntax for the sake of syntax. 
it would be, but nobody would care
pardon? OP said &gt;I'm new to c# and really don't understand what the above code means **can someone tell a java or c++ equivalent of the above code** &amp;#x200B;
Tried and tested with multiple projects sending multiple thousands emails per day, processing large XML dataset.... When a job/task fails, you can restart it with a simple requeue. It's such a life saver to implement and use.
https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/windows/Controls/DataGrid.cs
sorry I thought you were just randomly forcing java on us
Oh, no. Far from that. I only know the basics of java and lean more on c#. It just so happens I took what OP said literally. Instead of explaining getters and setters, I supplied the java equivalent.
I wanted to argue but in the end I agree. Even if you have a small helper class that you want to use in as few LOC as possible, separating the constructor from the actual initialization/work lets you decouple where you instantiate the object from where you use it. Anyway, my example would've been something like: await using (var helper = new MyHelper(...)) { helper.DoWorkNowThatHelperHasBeenInitialized(); }
Great, another way to pack more compact logic into fewer characters, making debugging, and modification more difficult and code obfuscation much easier! Good job guys...
Yes, I see a lot of those. 
SIMD can do the full range of equality checks. &gt;, &lt;, &gt;=, &lt;= I'm not sure exacty what OP would want when asking whether one array is &gt; than another but for most definitions of that you can do it fine with SIMD 
SIMD instructions. Which pretty much any cpu today has, even cell phones. I guess you could speed it up even more on a gpu 
This guy curmudges
At the end of that thread it turns into a religious debate because the guidelines don't explicitly cover privates.
Why do you PR Russian site when this is the source: [https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/](https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/) ?
To be honest I found some of these difficult to read too. I'm not a fan of doing things like replacing the 'default' keyword with a '_'.
You're correct. // is quite a recent thing!
In addition to other comments, hangfire also will automatically retry jobs that have failed in a pretty robust way. It certainly has some gotchas because it is so aggressive about retrying, but once you get a handle on it those gotchas are very easy to mitigate. They even provide you with a good dashboard out of the box. I would never build a webserver without it.
I'm just waiting to see the comma used intermittently as an end of line character. Coupled with the ongoing competition to see how much logic can be squeezed into one line of code, I can feel my next aneurysm starting already. 
Either you join it all up manually or use an orm like ef or dapper.
A lot of the time they were used to document functions and methods, but .NET uses [XML documentation](https://docs.microsoft.com/en-us/dotnet/csharp/codedoc) for that.
That return statement has been sleeping around the module. It's eaten enough.
Ideally, you would have names, instead just types, associated with each element in the tuple, so that the method was (int celsius, int kelvin) Convert(int fahrenheit) { var c = (fahrenheit - 32.0) * 5.0 / 9.0); return ((int) c, (int) (c + 273.15)); } which ought to be fine as long as it's not part of a public interface, somewhere. 
Seems pretty cool! Is it possible to generate a report / human-readable document of the results after running the tests?
Maybe cook it dinner at home? Maybe a nice tossed salad?
I went from C# to being at a Java shop. There really isn’t anything equivalent to the asp.net site or similar “complete n00b” quick starts — at least, I didn’t find anything in a couple years of looking. In coming from that environment, I can totally see where someone wouldn’t even think of such a thing existing. This was one of the mental shifts that made me sad about the Java community.
Not for equality. Compare one vector against another vector and then store the results in a third vector. The third vector gets all 0's or all 1's for equal or not equal. If you want to compare for less than or greater than, you have to do it again with another opcode. It's not like non SIMD compare where you can figure it all with one opcode. &amp;#x200B; So in C#, you'd have to do a Vector.Equals followed by a Vector.GreatherThan or LessThan and then do some munging. I'd like to see you re-implement your library to handle the corner cases and then come back and tell me how efficient it is. :)
Ahh, then be careful that the solution you pick doesn't have a high setup/teardown cost. When you benchmark for a solution to the problem, don't pick one that can compare arrays of millions of elements fast. Pick one that can do millions of arrays of 20 items fast.
If you await the second call it would return control to the ui thread until it was done then move on to print 
i changed the code a bit: So if i run the second code snippet on the ui thread, what would happen?
I figured they might be treated as such. Had a bug last week in dotnetcore 2.1 related to the difference. I can't recall the details. 
My convention is "m\_" prefix, but it doesn't really matter. Having some kind of prefix is helpful, making your code easier to read.
Don't forget about the built-in web dashboard that allow you to see what job ran where, what's their state and output logs, along with the ability to retry some of them
I do something similar to this lol. Is there a better alternative?
How to do it was a tough question and after a couple weeks of head scratching I discovered that most of the work had been done for me was in fact living in my existing code. My benefactor turned out to be my dependency injection container: Autofac. With just a bit of tweaking I discovered that I could get Autofac to inject a client for my database platform of choice with hardly a change to my standard n-tier architecture. I also found that if I wrapped my service layer in a thin abstraction I could effortlessly inject a REST/SOAP/Whatever client in place of my in-process database client. The consequence of this design is that my desktop app can use any database platform for which I write a client - and my app can discover which one to use in real time. My app can also talk to my API via an in-process database client or a REST/SOAP/Whatever client by discovering the fastest transport available and using it. This means I can detect if my user is connected to the LAN at startup and inject an in-process client or fall back to a HTTP client if they only have Internet connectivity. I factored out all my work into a small project I call [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient). I've been using it for a several years now on two fairly large projects and works beyond my highest expectations. I think there is a lot of potential ahead for this little project and I would like to get others in the community involved in developing it and validating it. 
The ui shouldn't freeze now. Control should return to the ui at the await point and continue when it's done.
It's a property. get is like saying getName() in java and set is like saying setName(String name). This is just the way that C# does properties. 
&gt;This article has been republished from codequs.com (https://codequs.com/p/HkhxDBZ4E/building-c-8-0)
If someone edits the comment, they have to add/remove/reformat all the asterisks at the ends of the lines.
If you don't have control over the constructor, you can use the initializer syntax too, like: ``` var transaction = new AccountTransaction { Amount = 100000, PayorID = "101", TransactionDate = "2019/01/30 23:30:00", }; ``` Yes, the trailing space on TransactionDate is intentional, while not necessary, C# lets you do that with most lists and initializers, easier for copy paste or to add a new line without remembering to put a comma on the last one that was originally there,
&gt;More common, in C# is this (if you need a private backing member). You don't need to use the this reference. You're going to start a religious debate here lol... But I just wanted to point out according to microsoft's official c# styling guides, underscores are frowned upon. https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions You're supposed to use lowercase for private fields and parameters and CamalCase for public properties. And using "this" helps to differentiate a field from a parameter.
Try using a TextBlock with multiple Runs, like this: &lt;TextBlock&gt; &lt;Run Text="First part"&gt;&lt;/Run&gt; &lt;Run Text=" second part" FontWeight="Bold"&gt;&lt;/Run&gt; &lt;Run Text=" third part" Foreground="Red"&gt;&lt;/Run&gt; &lt;/TextBlock&gt;
The prefix isn't just for readability. It's also for language compatibility. If you want to apply CLSCompliantAttribute to your assembly (which some languages require), you can't define `private string name;` and `public string Name { get{...} set{...} }` because they *could* be equivalent symbols in a case-insensitive language. So one of them being named "m_name" or "_name" (or I've also seen suffixes, like "name_") serves a useful technical purpose also.
&gt;the guidelines don't explicitly cover privates That's a job for *pants*. :)
i'll try to keep things in order :P
I don't understand why you would care about language compatibility for a private field. Isn't the whole purpose of a private field that it's never touched or interacted with by an outside source? .NET guidelines explicitly say you shouldn't use underscores in your naming conventions.
The problem goes deeper. You should use abstract classes to prevent breaking a single interface. But if you have some class that implements two or more interfaces, and you want to break more than one of them, you’re screwed. Multiple inheritance isn’t a thing and therefore you can’t have two abstract classes to protect you from breaking changes. IMHO multiple inheritance would be less weird than default interface implementation.
&gt;Having some kind of prefix is helpful, making your code easier to read. That's what "this" is for. IMO prefixes make things more challenging to read because you're not reading what the field is doing. You're reading some prefix first then the actual name. C# code should be readable like a story book. It should be legible by someone's technically illiterate grandma. 
Private fields are still symbols in the scope of the class, and if you're using that assembly from another language, reflection is going to be b0rked if "duplicate" names are allowed. So you can use it in C# and other languages that don't require CLS compliance, but some languages (maybe VB?) will balk at it because it can't tell the difference between `name` and `Name`. Also, style guidelines are secondary to technical ones. CLS compliance is a technical guideline, and "don't use underscores" is a style guideline. CLS compliance should win that battle every time.
Kind of strange that R# recommends underscores then
&gt; hand centred Fixed point text Stay billable, my friend. :)
&gt; Only primitives like int are passed by value. No, that is not true. Structs are passed by value as well.
Read the whole post
Triple-slash XML comments. Just type "///" and VS will auto-create a comment block for you.
This isn't ASP.net though, it's basic C#. &gt; There really isn't anything equivalent to the asp.net site You mean the ASP.net framework? [A cursory Google search brought me here](https://www.dailyrazor.com/blog/best-java-web-frameworks/). Seems to me like there's a lot frameworks available for Java. If there's a language, you'll most likely find at least one web application framework for it.
I don't think this will go anywhere now that we have using statements, but I've been wrong before. 
Yuck. Not for me, thank you. 
A private field can have the same name as a public property with different cases and still be CLS compliant though. It's only Public/Protected/Protected Internal properties that can't have the same name.
Nope. 
Why the fuck.
I don’t know, it could play well with ‘reduce implementation bloat’ theme
What ever happened to that code review site that was around 6-8 years ago? I forget the name....
Hmm.. I have no idea tbh.
The justification was a hodge podge of bad. Doesn't need to implement IDisposable. True. The ```using ``` statement simply calls Dispose in a finally block. True. Therefore the finally block is tightly coupled to IDisposable. WTF? He didn't quite argue that, but it's a reasonable summation. And then there's the "Let's keep the clean up code with the declaration, "WHERE IT'S MEANT TO BE". Seems suspicious to me. Like a really Yoda way of doing tests. Arrange, Assert, Act. And then, can you imagine async code here? ```defer {await ThisIsTheEnd;} all the other stuff```? My last argument against it is that if you feel the need to call out nesting of braces, or argue that it will make it easier to read a long method, you're writing the wrong code. We already have solutions for this. 
Which version of the ' Access Database Engine Redistributable' have you installed? Is it this one ["Microsoft Access Database Engine 2016 Redistributable"](https://www.microsoft.com/en-us/download/details.aspx?id=54920) Try changing the 'Provider' string to "Microsoft.ACE.OLEDB.14.0" or "Microsoft.ACE.OLEDB.15.0" or "Microsoft.ACE.OLEDB.16.0", and see if that helps.
I always enjoy clever and nifty code, but for some unidentifiable reason this just rubbed me the wrong way. It’ll be a hard no from me.
Useless 
``` var minusone = new Vector&lt;int&gt;(-1); var count = Vector&lt;T&gt;.Count; var result = new int[first.Length]; for (int i = 0; i &lt;= first.Length - count; i += count) { var a = new Vector&lt;T&gt;(first, i); var b = new Vector&lt;T&gt;(second, i); var gt = Vector.BitwiseAnd(Vector.AsVectorInt32(Vector.GreaterThan(a, b)), Vector&lt;int&gt;.One); var lt = Vector.BitwiseAnd(Vector.AsVectorInt32(Vector.GreaterThan(b, a)), minusone); Vector.BitwiseOr(gt, lt).CopyTo(result, i); } return result; ``` BenchmarkDotNet results for arrays of 1 million random ints between -100 and 100: SIMD version: 2.191ms scalar: 5.442ms This is on a CPU with AVX2 Interesting note though is if the two arrays are exactly the same, or nearly so, the scalar version performs about the same, since the scalar code doesn't even have to write to the result array, since it is zero intiazlied. scalar code: ``` var result = new int[first.Length]; for (int i = 0; i &lt; first.Length; i++) { if (first[i] &gt; second[i]) { result[i] = 1; } else if (first[i] &lt; second[i]) { result[i] = -1; } } return result; ``` 
I used to eschew the leading underscore too. The problem is that when you are scanning code, it's easy to see the difference between "Simple" and "simple", but it is easy to see the difference between "Simple" (capital for public parameter and "_simple" (underscore and lowercase for private member). The bug, in this case, was that there was ONE private function that was erroneously referring to the private member on ONE place and not the parameter, but damn if anyone could see it. We wasted a lot of time looking for a big that was caused simply by not hitting the shift key. I like letting the tools catch as many bugs as possible. A mistake from bad intent (accessing the private member outside the parameter get/set) is a lot easier to find than an unintended mistake (must have not hit shift). 
I think it's unnecessary and disgusting style. At the same time, I love it. I want it without compound statements, like `defer statement;` imagine how convoluted your code could be. I can already hear the others at work screaming.
This is why I generally shy away from complex getter properties personally. If I have to do anything that would make getting the public property instead of the private field a problem I'd probably prefer to create a method called "GetProperty()" instead. Just makes things clearer to me. At the end of the day these are all personal preferences. I just think underscores and prefixes are ugly and make reading the code difficult. 
So you can write this? var temp = something.Pop() defer {something.Push(temp);} Or this defer {log.EndContext(); } But the favorite one on the forum seems to be var x = Resource.Acquire(); defer { Resource.Release(x);} //wtf is this not IDisposable? 
Feels like an abuse of *Rule 1: No job postings (For Hire and Hiring)* &gt; On the Indorse platform, hundreds of expert developers are ready to pre-screen your tech candidates and help you save time in your hiring process So a hard no from me. 
https://medium.com/@MrAlanCooper/the-endless-battle-575f4282ffe5
This seems like something that'll immediately become bad practice or a code smell to use in any way. I'm not a fan.
Like many here, I don't think this is necessary and if added, I'd treat it as a code smell and go as far as to put it in my style guide as a "not to be used" keyword. Am I missing something? Why is this something we'd need?
The code example in the article sealed the deal for why this is terrible to me. With `IDisposable` the developer is prompted to use the using statement and it's clear which order the statements will execute. With `defer` that all goes out the window quickly with multiple disposable resources. Not marking a class as disposable in favor of defer is a horrible idea -- if it's a resource that needs cleaned up, how would you know without investigating the whole class? I can look at the first line and know I should wrap that object in a using statement. One of the justifications is indentation as a code smell. I agree that's a valid concern but there shouldn't even be an issue with indentation because you can use this syntax: using(var x = new DisposableClass()) using(var y = new OtherDisposableThatUsesFirst(y)) using(var z = new AnotherDisposable()) { //work with them } That's not even hard to work with and has zero more indentations beyond defer. This feature just seems like it's copying from another language for the sake of copying and adding things to the language. If I see this in any code base I use, I'm going to have a fun argument with that developer. 
Probably the worst proposal I have looked at. &gt;defer would not create any runtime garbage. Create write-time garbage &gt;In the spirit of designing the language for myself, You're not designing the language for yourself [Doing real interaction design means subordinating your clever inventiveness to the needs of your user.](https://medium.com/@MrAlanCooper/the-endless-battle-575f4282ffe5) 
That's my thought too, but since it hit "proposal champion" I thought that I'd share so others can weigh in.
&gt;don't use the private field outside of the constructor if a property is available I've been saying that for years, but that's very concise. I'm going to steal that one as one of the many "urbanek's rules" that I keep telling my team. In fact, that's the exact reason insist on the leading underscore. It's ugly, it stands out, it requires and extra character to type. Add them all up and pretty much no one will ever refer to that backing private member, except when it is right and proper to do so. &amp;#x200B;
 Or even better, the new `using` syntax { using var x = new DisposableClass(); using var y = new OtherDisposableThatUsesFirst(y); using var z = new AnotherDisposable(); //work with them } 
&gt; &gt; &gt; &gt; &gt; That's not even hard to work with and has zero more indentations beyond defer. For fairness, let's see what that would really look like: var x = new DeferableClass(); defer { x.Close(); } var y = new OtherDeferableThatUsesFirst(y); defer { y.Release(); } var z = new AnotherDeferable(); defer { z.Complete(); } //work with them Or var x = new DeferableClass(); defer { x.Close(); } var y = new OtherDeferableThatUsesFirst(y); defer { y.Release(); } var z = new AnotherDeferable(); defer { z.Complete(); } //work with them (Is this as painful to read for you as it was painful for me to write?) 
lol that's a point I can get behind
Lol, I actually took out my final thought about what would happen if this ended up in my codebase :)
If you mean putting asterisks along the right side of the comment as the last character on the line, please stop. If you mean trying to document the method in a way that the comment will show up as intellisense tool-tips, try to stick with just `///&lt;summary&gt;something&lt;/summary&gt;`. Maybe including a `&lt;para&gt;para&lt;/para&gt;` block if you absolutely need multiple lines. Do try and avoid documenting the individual parameters. They should be self-evident from the types and parameter names (if not... try fixing that first). 
Like all projects, different services are possible. In my post, I explain that the main concept = crowdsourced code reviews. This is possible because of our dedicated community spread across the globe &amp; because programmers use our platform for their own code/repo. This is at the crux of the project. If the moderators deem this as not relevant or as an abuse of Rule 1, then I'll gladly remove this as my purpose was just to invite C# programmers to consider joining us.
This will only lay the path for even poorer exception handling. If an exception is occurring most (if not all of) times you'll want to implement an exception handles and a `defer` would only lead to less exception handling, which is even worse than an empty try-catch-finally or try-finally imo.
Even then, have you benchmarked the system to show that this is the slowest bit of code where you're spending over 20-30% of the execution time?
Just seems like feature creep to me.
`defer` is just a fancy way of writing `try-finally`. &gt; Anders Hejlsberg: It is funny how people think that the important thing about exceptions is handling them. That is not the important thing about exceptions. In a well-written application there's a ratio of ten to one, in my opinion, of try finally to try catch. Or in C#, using statements, which are like try finally. -- Anders Hejlsberg, the 'father' of C#
My concern is the quote I cited from the link you provided. That's absolutely unacceptable for me, so you'd have to be able to ring fence me from that sort of abuse. I'm not sure that's possible so I can't endorse (no pun intended) it. As for failing the rule 1 test. Not my call.
I don't see any value on this. It would rather increase complexity and raise code smells
Would probably be preferable to have a more generalized form of `using` that added a `finally` clause. E. g. using (var foo = new Foo()) { // do stuff } finally { foo.Frob(); } or using var foo = new Foo() finally foo.Frob(); With the expectation that it would swallow exceptions just as `using` does for `IDisposable`. Seems like a pretty minor use case, though.
Since we now have using statements, you can just implement it yourself (not that it's necessarily a good idea): void Main() { var fs = new FileStream("c:\\asd.txt", FileMode.Create); using var _ = new Defer(() =&gt; fs.Close()); } class Defer : IDisposable { private readonly Action _disposal; public Defer(Action disposal) { _disposal = disposal; } void IDisposable.Dispose() { _disposal(); } }
It's a string. If you go down the implementation, you get to the this code: https://referencesource.microsoft.com/#mscorlib/system/io/textwriter.cs,229 So it just did `ToString` on the object.
If you make `Defer` a struct and mark `Dispose` as `public` you can eliminate one of the two memory allocations. 
Good call
Oh wow. Thanks for the reply and explanation to why the value is a string. Understand it now.
Most of C#8 feels that way to me. Unless everyone on your team is a syntax need, I think the weird things introduced in this version will just be confusing to the less informed.
Can someone give me an example where this is preferred to the syntax in GP? It seems clearer to me. Maybe it's just because I'm not used to it. 
Exactly. There shouldn't be alternative ways of doing things like this. In a 5000 line method, we need to know that when we don't see a finally block, that means there's no finally block. C# is already approaching perl-like levels of syntactic sugar. We don't need this.
That's not too bad! As long as either the old or new syntax is used universally in the code base, I'd be happy. Above most things, I need my code to work as I expect it and be easy to reason about. 
See https://vcsjones.com/2019/01/30/csharp-8-using-declarations/ for more information on the new style. Whether or not it is "better" is a matter of opinion, but I like it.
Everything on the console is a string
It just rubs me the wrong way that the code no longer works in order now. You execute lines 1,3,5 then 7, then 2,4,6. That sucks! That's part of the reason that async/await code is hard to reason about and debug but it's necessary. This new feature is unnecessary and thus I'll probably never use it. We'll see. I wonder if this keyword will evolve before release.
It may never be more than just a proposal. &gt; The defer statement proposal is currently tagged as a C# 8.x candidate, but that doesn’t mean it was actually chosen to be part of a future C# release. Its official status is “proposal champion”, which means a member of the C# team is interesting in representing the feature in a future language design meeting (LDM).
&gt; You execute lines 1,3,5 then 7, then 2,4,6. Close, but wrong. You need to read bottom to top. So it would be 1,3,5 then 7, then 6,4,2.
&gt; In a 5000 line method You write a lot of files parsers and ELT jobs, don't you?
Thanks, looking at actual code with this pattern does indeed make me see advantages of it.
Just so OP knows, you don't need the `public` keyword and I've never seen anyone use it before this. `public string Name { get; private set; }`
Is there anything in particular you like or dislike about C# 8?
The primary use case *has* to be third party code with hinky resource cleanup requirements. You could cover the same ground with a class like public sealed class Disposable&lt;T&gt; : IDisposable { private bool _disposed; private T _obj; private Action&lt;T&gt; _dispose; public Disposable(T object, Action&lt;T&gt; dispose) { _obj = object; _dispose = dispose ?? throw new ArgumentNullException(nameof(dispose)); } public void Dispose() { if (_dispose) { return; } try { _dispose(_obj); } catch {} _disposed = true; _obj = default; } } public static class DisposableExtensions { public static IDisposable AsDisposable&lt;T&gt;(this T x, Action&lt;T&gt; dispose) =&gt; new Disposable&lt;T&gt;(x, dispose); } At the same time, I don't think there's very many places where that is *actually* necessary or, even, useful. Maybe somebody's got a concrete example, but I tried this once and found it more obfuscatory than helpful.
This is what the C# team calls a "quality of life" improvement. It doesn't actually let you do anything new or interesting, but it's still nice to have.
All the weird syntax things seem to be replacements for well understood regular constructs. The new usage of "using" without brackets seems silly, the differ keyword odd when you could just use a well understood try-finally. The new switch syntax is kinda cool, but it's kind of one of those things that you have to stop and stare at for a few minutes to get what is going on. I guess I'm a traditionalist and see a lot of this new stuff as fluff for the way people have done it for years in an attempt to make something slightly less wordy or use less area in the text editors.
Don't count `defer` among the C# 8 stuff yet. It's just a proposal for a post-8.0 version and probably won't go anywhere. 
&gt; Why is this something we'd need? The only legit arguments I can think of are third-party libraries with hinky cleanup procedures that don't follow best practices, and reducing IDisposable boilerplate. The former could be solved with a type like the one u/nemec provided, and the latter doesn't really get solved, here, anyway.
Oh, my bad. I was thinking it was in there. Perhaps some day I'll adopt it just as I have adopted the arrow syntax for one liner methods. I guess right now I don't understand it well enough to be supportive of it, especially with the well-adopted "using" syntax.
Yea, it's status as an "8.x candidate" is a little confusing. 
I would create a custom extension method in that case: static class Program { static async Task Main() { var semaphore = new Semaphore(0, 5); using (semaphore.WaitOneAndRelease()) { //code } } static Token WaitOneAndRelease(this Semaphore semaphore) { semaphore.WaitOne(); return new Token(semaphore); } struct Token : IDisposable { Semaphore _Semaphore; public Token(Semaphore semaphore) { _Semaphore = semaphore; } public void Dispose() { _Semaphore.Release(); } } }
gross
I'll keep an eye on it but it's current state is no good to me!
Lord have mercy
Even then, a 5000 line method just disqualifies your opinion whatsoever 
I strongly disagree. While 5000 lines is a bit much, a lot of ETL jobs are best represented by a single long function that you can read as a linear story rather than jumping around like you would in a more typical OOP style architecture. 
C# is going to convert the integer to a string and then tell the windows console to print that string. The Windows console will figure out where to draw each character in the string in its window and then use the Windows font drawing to draw the appropriate characters on the screen using pixels of the color your console settings are set to.
I don't see how switch expression are any more confusing than traditional switch blocks. In fact, I think they make more sense to a potential newcomer. Before I learned how switch statements worked internally, I could never understand why I had to put `break` at the end of every case, instead of just closing the scope with a bracket.
Would be better to configure the job and don't care about what's where in your actual ETL logic, and be able to cut the function in logical steps, so the the guy who joins the project 2 years after you left still has a chance to maintain it
^
Then don't write it in your ridiculous 5000 line method that has a 5000 line spanning exception handling scope.
Sometimes. A lot depends on whether it is a one-off or something that is repeatable. If you are writing a single ETL job, it is often easier for the next person to read it as a linear story. If you break it up into small parts, the reader has to hunt around for the various parts and reassemble them in his head. After you've written a dozen ETL jobs, you may discover that some parts are exactly the same across each job. For those parts, it makes to sense to pull them out into a reusable black box. The term "black box" is important here. The reader should be able to see it and say, "oh, that's the same X we use everywhere else. I don't need to think about it". *** This is what makes OOP style programming so powerful. Once you have a `ParseCSVToObjectArray` method you never have to think about how it is implemented again. But in ETL programming, you don't always get CSV files. You often get random crap that is unique for each situation. I worked on one where if the first digit of the number was a "]" then I have to interpret as a "-9". If the first digit is an "A", then it is a "+9". *** Other times you have a few hundred (or thousand) lines of code to convert an XML or JSON structure into objects that your application can understand. Stuff where you desperately want to use AutoMapper, but there are too many exceptions and subtle business rules buried in the format. 
[https://resizepixel.com](https://resizepixel.com) is a mobile-friendly online image editor built on .NET Core. Enjoy using it :)
In these threads I always get the sense that most people here just have zero experience whatsoever with other modern programming languages. If it's not blocky and verbose then it must be bad design. If it's a FP concept it must be bad design. Let's all go back to writing Java since even daring to write a proposal for something different from old school OO style is apparently *disgusting*.
A decade ago they were talking about removing the requirement to use `break`. I still wish that would happen.
Uh… but `defer` requires a block and is more verbose than the new `using` statements.
Dude, nice answer
I don't *like* it, but I can kind of see it. As a sort of dual to getting weird cases out of the way with early returns, you can also get your cleanup out of the way.
I see, so let me explain that specific part. To be able to compensate each and every one of our programmers that are reviewing code repos submitted on Indorse, we also provide this service and validation process to companies. Indeed, this service is powered by our community of programmers and assesses their tech candidates. You wouldn't believe how useful this is for companies hiring developers.
I think the most common thing I can think of deleting temp files, which don't fit nicely into the disposable pattern (though I'm sure someone could write such a wrapper).
enums can only be integer types (int, byte, etc.). You can't have string enums or floating point enums, just integers. 
At best you can do something like public static class ContactInfo { public const string Apple = "support@apple.com"; public const string Microsoft = "support@microsoft.com"; } 
If you really must use enums use them as a key in a dictionary.
Disposable has a lot of performance implications that are not inliner friendly. If defer blocks were implemented as simple jump directives (aka smart go-to) then they could be good, but there'd need to be a strong language construct around how exceptions are managed. If defer introduced more things that prevent inlining, then they'd lose some value in my eyes. Similarly, though, renting a resource from a pool is not always going to involve disposable resources (though it usually does for cleanup guarantees). Not sure which way I fall on this one tbh. 
it's the other thing. I work in games. To give you an idea of what we deal with - if you've played Celeste - here's the class for the main character: https://github.com/NoelFB/Celeste/blob/master/Source/Player.cs
I don't write it. But the kids on my team might. I need all the help I can get when it comes to knowing what they're up to.
Or use th Description attribute
&gt; You wouldn't believe how useful this is for companies hiring developers. I do, this is the root of my problem, but there are so many. Look, I've dug into the website a bit more. There are problems at every level. You talk about being based on AIP on the front then on the tech page say AIP is impossible so you've gone the naive route. You talk about rewarding your validators, but Ethereum is mentioned (don't get your hopes up readers). You keep insisting the validators are experts who are validated without actually offering up any substantive proof this is the case. It can't be validators all the way down if the first validators haven't been... validated. You have a blockchain implementation which seems reasonable as a record of authority but keep talking about anonymity. Ethereum pops up but only as a reference implementation (see, I said don't get your hopes up). Ultimately though you've got blockchain backwards. There's no value in proving that 10 anonymous people thought my code was amazing. Then there's the league table of validators who get the number of reviews they participate in listed (broken down into approved and not approved) then, number of participants in the review and the percentage of validators who agreed. Again, useless to me because I don't get to see which of them were in my randomised set of reviewers? A quick in the head poke at the stat's suggest the intellectual benefit here is actually all placebo. I can see how it will reduce costs for some types of high turnover companies, but for participants, try /r/codereview/ . Better still, find a topic you enjoy, find a github project that needs a bit of love and help. Look, it's a bit of a mess. I wouldn't touch this with a shovel attached to another shovel. 
I mean, break that shit up into methods that tell the story then
In every proposal I've seen so far, `defer` would be implemented as a `finally` block. What that means for inlining is beyond me.
I like the second one
My understanding is that the first time you put a try block into your method, you've destroyed the chances of it being inlined. So code involving disposables, locks, etc, probably won't be. I can't recall if this was just a simple heuristic to make inliner analysis fast, if it was to preserve stack serialization, some other reason, or if I'm just spouting nonsense. Just making defer sugar for try/finally isn't surprising. I'm trying to invent use cases for this in my head, but there really aren't many I can think of that aren't already well covered by existing features. 
Wouldn't you then need a keyword for break through (or use something like ||)?
But using doesn't swallow exceptions. They still get propagated. Using is just syntactic sugar for try/finally. Finally blocks just guarantee that something happens deterministically at the end of a try block. Exceptions still propagate unless you do something to explicitly swallow them. 
This reminds me of how RAII works in C++. It's fine when everything embraces it, but in this case it seems like defer just makes it too easy to miss/forget what defer is doing instead of a very obvious finally statement.
The `goto` keyword is used for fall through on non-empty cases. 
Ah, that makes sense.
With: public enum ContactInfo { Apple, Microsoft } You can: public Dictionary&lt;ContactInfo, string&gt; contactInfo = new Dictionary { [ContactInfo.Apple] = "support@apple.com", [ContactInfo.Microsoft] = "support@microsoft.com" } Then var concatInfoType = ConcactInfo.Apple; var address = contactInfo[concatInfoType];
Side project for work is pulling out our core logic and making it .NetStandard compatible. 
To be clear, you don't need the keyword before the get, because it inherits the same access as the property. You absolutely need it before the property.
that's gonna be a nope from me chief
But how do I put in in the column value? Like all the values in the column should be in that text block format? Also not the column name, but all the column values corresponding to the column :)
Hey @smithniglew Thanks for the tip there. I tried the 16.0, same error. No luck.
Wouldn't there be just as much noise as having break then?
Not offshore teams, and maybe it'll be a problem there. I do believe you can write crap code no matter what features your language allows, so not being able to effectively guide them is going to be problematic anyway. For people who I can actually sit down next to and have a constructive conversation with, I'm really not worried about how many different things they can do wrong, because I can help them make better choices than that when I review their code and give feedback. More importantly, I can also help them make the best use out of the features the language offers – which means they are *adding* value to our software development rather than removing it.
I enjoy the quote giving justification from some guy at Microsoft &gt; They do not require implementing some interface, such as IDisposable, or creating helper objects that do. Neither does try-finally - They do not add an indentation level to the code, which would be clumsy when there are more than one. It literally does - They do not move the cleanup code to the end, as try-finally does, but rather they keep the cleanup code logically with the declaration and initialization of the thing that is being cleaned up. In this way they make the code easier to understand. So instead of doing something and tidying up (logical) you instead tidy up and then do something? Eh? It makes sense to do the last thing last. It makes no sense to do the last thing first.
This is an abomination. 
If you pass rubbish to it, it should throw an exception and not assume that what you want is a boolean.
Why would it matter?
It would still have automatic fall-through for empty cases. 
Thanks! I have two more question based on your reply: 1) What does it check? It expect a malformed XML to reply false? 2) I'm trying to check if anything is an XML object of my type, I'm also trying to not use `try{}catch(){}` to speed it up (I've thousands of object to deserialize in parallel).
&gt;SobekRe Nope. I said exactly what I meant and wasn't talking about frameworks, at all. I'm very much aware of the amount of stuff written for/in Java. I mean the [ASP.NET](https://ASP.NET) site: [https://www.asp.net/get-started](https://www.asp.net/get-started). Also, the .NET Core tutorials: [https://docs.microsoft.com/en-us/dotnet/core/tutorials/](https://docs.microsoft.com/en-us/dotnet/core/tutorials/) There are others, but I'm not sure how much more straightforward you can get than to type "[asp.net](https://asp.net)" into your browser and it pulls up a page that walks you through how to build something in ASP.NET, starting with the basics, but working up to some pretty advanced concepts. Yes, [angular.io](https://angular.io) does something similar, and I'm sure it's not the only one. But, it's not the same in the Java world. Even [spring.io](https://spring.io) doesn't have that sort of clear walk-through, and it's probably the best I've seen on the Java side. &amp;#x200B;
Good try, but the code is wrong. 1.) You need to return a single int as -1, 0, or 1. So in the SIMD case above, you still have to walk to result array (the rest being the same). For the scalar case, you don't have to walk the whole array. You can short circuit at the first digit that is not equal. 2.) The scalar code isn't pinned and unsafe. Even if you don't optimize by doing the 64-bit compare, making it unsafe will remove the boundary checks overhead, etc. &amp;#x200B; PS. This would be a fun contest for this subreddit to see who can write the fastest code.
I got tripped up on the verbiage in the article. Rest of that stuff still stands.
Yeah. That's the "official" guidance. It's also the one thing I see even experienced devs ignore quite a bit. Not all, but I'd say it's probably 50/50, IME. And, it can start a holy war. If you say, "Methods should be PascalCase, not camelCase" even the Java, C++, and JavaScript devs will shrug and adapt. If you say, "Use (or don't) underscores before private fields," even devs who have been exclusively C# devs for 15 years will start to get feisty with each other. FWIW, I'm very much in the camp of "use underscores" and "the 'this' keyword is ugly white noise". I'm also very much aware that there aren't really any strong arguments for my position. I'm normally something of a "style Nazi", but this is the one place where I indulge my aesthetic preferences. I won't fault anyone for doing it the other way, and I'd ultimately adapt if I joined a team that did so. I never have had to, though, and the heterogeneous environments I've been in have all solidified around the underscore, when style standards were required. As long as you aren't using public fields, it's all good. When I was working with Java developers, I did find it interesting that the vast majority (IME) seemed to prefer the underscore, but couldn't, due to the way the bean specification would interpret things. That didn't really do anything for my level of enthusiasm for Java, but that's another topic.
&gt;Productive Development Environment You have got to be kidding me. It's telling that all the praise for the IDE in this article is about Visual Studio for *Windows*, and when it talks about Visual Studio for Mac it's only neutral businesslike language. Visual Studio for Mac has been buggy crap from 2014 to 2017 at least (thankfully I got to stop using Xamarin in 2018). If you do iOS development then probably you're working on a Mac, and then developing in Swift using Xcode or in Kotlin using Android Studio is *such* a better experience it should almost be criminal to promote Xamarin. The whole cross platform code base concept Xamarin Native offers looks cool on paper but in practice falls flat on its face when you realise that only 20% of your work will be truly shared and 80% of the code base is Activities, Fragments, Layouts and Views and View Controllers. Building two apps in great tools like Xcode and Android Studio is going to save you more time than the bit of database/HTTP code sharing you get with Xamarin. If you really want a cross platform solution because you are actually in a scenario where your apps are doing significant work that's not tied to UI, perhaps look into things like Flutter or Kotlin Native. I fucking *love* .NET and C# was my favorite language for more than a decade and I still cannot recommend Xamarin to anyone. 
I don't know about that. If I pass rubbish to int.TryParse I would still expect it to return false.
Hero!
aGAIn xML BrAND nEW mANNn!! (did I do that rite?)
God no.
&gt;No job postings (For Hire and Hiring) First of all, thank you for taking the time to list these points. I do understand that it's not a problem of *No job postings (For Hire and Hiring)* anymore*.* I'll try to add some brief elements of explanation to the above elements: * **AIP** = Anonymous Indorsement Protocol. If you are also interested in learning how our validation mechanism works, feel free to check this [post](https://blog.indorse.io/our-vision-for-skills-validation-and-aip-7d081f81710c). The AIP is an extension of the Open Voting Protocol designed by Patrick McCory (University College London). * Rewarding, yes indeed. If you have any doubt, you can verify with all these [different devs](https://blog.indorse.io/tagged/interview) participating in our crowdsourced code reviews. Also, I do understand that this way of earning might not be suitable for everyone. * Potential Validators must have their skills evaluated at "expert level" on Indorse. In other words, they submitted their repository (e.g. GitHub repo) &amp; 10 Validators assessed it. After this process, Validators will either indorse/validate or flag/reject his claim of possessing the specific coding skill in question. As you probably understood from this document (AIP), the voting system works by consensus: if the Validators reach the consensus, then the claim is validated. Validators can't know if they are voting on the same claim. * Funny thing because we're quite *pro*\-ethereum blockchain and we've done some very interesting things ([R&amp;D](https://blog.indorse.io/tagged/tech)) contrary to most of the startups using this technology. * Regarding the "psychology", the academic literature is abundant regarding this question. In our case, it's not an issue. Again, it's a solution, you can try it out or not. * Thank you for your suggestion, I'll definitely check out this subreddit. * "wouldn't touch this with a shovel attached to another shovel." -- We're building something quite unique, my goal is not to convince hypochondriac redditors. :-) Have a nice weekend &amp; thanks again for taking the time to reply to my post!
&gt;1.) You need to return a single int as -1, 0, or 1 Neither your nor OP have clearly defined what it means for an entire array to be greater than, or less than another array. You want to consider the first non equal item, and return -1, 0, or 1 based on that? You just loop doing SIMD EqualsAll until that is false, break out of the loop, then walk the 4 to 8 lanes of the vector to get the result. That is going to be fast unless the arrays tend to be different early, in which case there is no need for this function to be fast in the first place. &gt;2.) The scalar code isn't pinned and unsafe fixing the arrays to avoid bounds checks didn't change the runtime at all. searching 64 bits at a time drops the runtime to 3.5ms 
Seriously - that isn't a bug. It can't happen
Also, you can't just use `constrained.`. Because then how would this code work? `IInterface Foo(IInterface i) =&gt; i;` If i is a `ref struct`, this code cannot possibly worl
Who says he wrote it? He might have just inherited it.
Well, it works pretty well in Swift (which doesn’t have a using statement). Of course it adds a lot less value to a language that does have using statements. Also is very similar to using declarations. All things being equal, I guess I’d prefer them to using declarations. 
This is very close to defer, though.
Just no. This doesn't make any sense at all.
I think you are ignoring that I said “if we can do runtime changes”. My point is, if the type is knowable at compile time (or JIT time), structs don’t need to be boxed for interface calls, although this somewhat limits how you can pass interfaces around.
Yeah, but that's also bullshit. Neither edupioneer (who?) nor codequs (??) are the originators of this article. [MSDN is.](https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/) I don't know if MSDN Blogs _allow_ such "republishing", but even if they do, it's probably better to link straight to the horse's mouth.
1. He posted non-optimized sample code in another comment. That would be a more optimized implementation than what you have before. There is a case for this in real life. Think of comparing a bunch of big numbers. How often do you compare a million digits? But you might end up comparing a bunch of 100 digit numbers. So optimization is still important...even if there's a lot of early exits. Also, it's something fun to do. Lol. 2. That's pretty cool. That means they optimized the compiler to do smarter bounds checking in safe code...or you fubared somewhere. Lol. Did you account for alignment in the 64-bit compares? If you're not aligned, there's a performance hit. 
Yes it can, and it did. Please don’t take me for an amateur. I know what I am talking about when it comes to the framework.
Yes, but thats the one exception. Firstly, calling into other library code that's non generic won't work, as it's expecting a ref type. Secondly, returning, casting the interface to an object, casting the interface to dynamic, assigning it to an object, won't work
I think he's right. Exceptions should only be caught when they can be handled but not avoided, which is almost never. Most of the time, an exception is used to find a bug and allow the rest of your program to assume that the rest of your program is in a valid state.
Hmmm. No. Because to implement `IEnumerable&lt;T&gt;` you need to implement to methods with identical signatures. Therefore, one needs to be explicitly implemented. Therefore, both possible sig slots that foreach will accept are taken up. There is no way to have any other methods with the signature `GetEnumerator()`. And you still haven't suggested how to resolve any of the issues except generic constrained calling
Knowing the type at JIT time is hardly the exception. Yes, casting to an interface type and to dynamic won’t work in those scenarios. And yes, methods using interfaces like that need to be generic. There are other languages whose generics essentially works like that.
While I get where you're coming from, and there's some of that to be found, here, the proposed syntax is clunky and doesn't mesh well with C#'s, and this is (arguably) solving a non-problem.
So you're suggesting that `void Foo(IInterface t) { object g = t: } ` should now be illegal? Because that's the only way that'll work 
There is, right now, no fall-through for non-empty cases. They must be explicitly redirected with a goto. C# has *never* supported implicit fall-through for cases with a body.
You can implement two IEnumerable plus one separate GetEnumerator. The separate enumerator can be (and is, in some cases) be different from the other ones. I am not going to argue this with you, I know it happens, I saw it, I reproduced it, I debugged it in detail. &gt; And you still haven’t suggested how to resolve any of the issues except generic constrained calling I think I did, but you’re not really listening. I don’t think we need to debate this further. 
I can see the justification for moving cleanup code to the beginning instead of the end, because there exists a one to one relationship between "opens" and "closes" and if it's at the end then it's not unusual for it to be offscreen from the declaration and make it very easy to forget to clean up one of your objects. And it's not unusual for cleanup to have to be slightly different from callsite to callsite, even across objects of the same type, so the ability to define cleanup code per callsite instead of per type is reasonable. But I think the syntax and the new keyword are horrible. I would prefer to see something like (pardon the terseness, writing code on mobile sucks) using var oldColor = pen.GetForegroundColor() finally { pen.SetForegroundColor(oldColor); } pen.SetForegroundColor(Color.RED): Even this isn't great, but I'll think about it some more.
yo, I passed out, thanks a ton for the help, and I am gonna try that rollback/uninstall/reinstall thing again 
I am saying that for interfaces with those benefits, you can’t write methods like that, yes. Unless other things are implemented, such as generalized existentials.
Yep, I was wrong on the IEnumerable thing, my bad. However, if that's an actual issue, you're doing something wrong Saying "change the runtime" isn't enough. Apart from constraining type during generic calls to prevent boxing, nothing else you've suggested would work
So you want to make a breaking change for millions of C# programs because you don't like duck typed using statements?
That has nothing to do with the languages though, it's about frameworks around them. In ASP.NET's case, it's probably different because Microsoft develops both the language and the framework. 
You make me swoon. I'm in too deep in Xamarin to back off. Me, and a lot of angry developers, were promised a lot of lies. Lies is too strong because it technically works? But I go into work with the attitude of a boxer with Xamarin in the blue corner. Don't fight your framework - you'll regret it. Don't fight XAML. Don't fight the UX. Don't fight lack of third-party support (like beacons (most vendors expect to use their own APIs)). Just... don't fight it.
I’m just saying that there are are alternatives, and duck typing is, to me, a hack. Enough said. Really.
&gt; Yep, I was wrong on the IEnumerable thing, my bad. However, if that’s an actual issue, you’re doing something wrong I wasn’t doing it, and it was a framework class. It happened due to a combination of two IMO undesirable languages “features”: foreach duck typing and foreach implicit casting. Neither are well known to C# programmers. I don’t like features like that because they can cause people to write buggy code because they are not obvious. 
First of all, you should not hard-code e-mail addresses. But if you really want to do it and use it as you would use an enum, implement a "smart enum" class to represent those emails. Compared to using string constants, smart enums allow you to use type safe method arguments and work well with autocomplete, since you won't have to guess which class holds those emails. You can also use implicit cast operator to cast them to string. public sealed class ContactInfo { private ContactInfo(string email) { Email = email; } public static ContactInfo Apple = new ContactInfo("support@apple.com"); public static ContactInfo Microsoft = new ContactInfo("support@microsoft.com"); public string Email { get; } public static implicit operator string(ContactInfo value) { return value.Email; } } public class EmailClient { public void SendEmail(ContactInfo recipient, ...) { string recipientEmail = recipient; ... } }
Sorry but this sucks 
89 comments and still nobody likes it. I thought there'd be at least one or two supporters.
It goes against so many coding practices and styles. Just from a readability standpoint it makes my inner programmer cry out in pain. And that's not even counting the technical issues others have mentioned.
Same here, but I'm still surprised at how unanimous everyone is. 
`using` statements don't always dispose correctly. Especially working with streams
I think options are valuable. I dislike wrapping everything in a try/finally when I need guaranteed execution, personal preference.
I'd argue most people here are bots or students. 
This is really shit IMO. All previous suggestions I've thought were at least we'll thought out and had merit. This is just pointless. It quite simply makes code harder to follow and read about. It has ZERO benefits and lots of, albeit small, downsides but the scale is still hugely tipped towards no. At least that's my thoughts. I'm happy to hear arguments against 
I have real mixed feelings about it, if only because I think the proposed syntax is garbage. C# has an excess of ceremony, though, and I'm actually pretty in favor of things that will reduce how much work is required to get from point A to point B. For something that *doesn't* make me itch, either 'using' could be extended to allow arbitrary types in combination with a `finally` block or clause (as a generalization of the underlying transformation to a try-finally), *or* `finally` could just be made an optional follow on to every block (as syntactic sugar for wrapping the block in a try-finally, instead) . I'm not really sure which I'd rather see. I don't really care for the proposal as-written, though.
I don't think so. CanDeserialize takes an XmlReader. CanDeserialize checks whether the data itself, can be deserialized, assuming it is valid XML. In this case it's the XmlReader throwing the error and it's propagated. Could you imagine how frustrating it would be to receive false back when it's actually an error? With the current design, if you get false back at least you know the problem isn't the structure of your XML itself; if this wasn't the case you'd probably have to throw your own xmlexception anyway to cover those cases.
Ah, you make a good point.
welp, uninstalling/reinstalling hasnt done much to help, seems like I am gonn try and get in touch with coolermaster support and find out if I can get the firmware downgraded somehow
 new StateMachine(23); Disgusting. And people like you complain about new language features? It sounds like you're against the basic `enum`
thoughts: Sounds like this could benefit from having a relocation phase, to make it more robust for unknown variable pointers at compile time. ie combined constant data and variables, that are given the there proper address at run time would facilitate the use of ReadOnlySpan&lt;T&gt; in the same fashion? 
I feel the people complaining here don't even know half the language features as it is so it really isn't any concern to them. I just learned about expression-bodied members recently and that was a sweet opportunity to get rid of complicated getters for single-line expressions. This will enable something similar for people who aren't working with external resources where dispose/finalizers don't make sense but still want guaranteed execution. 
what's so terribly verbose about `using(var thing = new Disposable())` lol
MEF is about exporting and importing composable parts and discovering these during runtime. A composable part could be a class, interface or even a method. Marking a composable part as an export enables MEF to *discover* the type, allowing the part to be composed (instantiated + injected with dependencies if applicable) **automagically** during **runtime**. There are two ways to accomplish this with MEF: * Attribute-based model * Convention-based model (.NET 4.5 and above) The convention-based model is lengthier to go over and I am still not sufficient with it but the attribute-based model is more explicit and, to me, is more clear about what is going on. So, you want a command line parser and you don't want to have to dig through the scaffolding to hook up a new command. We can accomplish this with MEF. Now, there are many ways/patterns we could use to accomplish this and the one below is just the one I went with. First, we need to go ahead and add a reference to `System.ComponentModel.Composition`. Secondly, we need to define the interface we want to 'discover' (i.e export) automagically during runtime: public interface ICommandHandler { int Execute(string[] args); } Simple enough. It receives arguments, processes the arguments, and returns an exit code. Now, we don't *have* to do the next part, but I think it makes what we are attempting to do a little easier to work with. So, we are going to inherit from MEF's `ExportAttribute` and create our very own `CommandAttribute`: using System; using System.ComponentModel.Composition; [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public class CommandAttribute : ExportAttribute { public string Alias { get; } public CommandAttribute(string alias) : base(alias, typeof(ICommandHandler)) { Alias = alias; } } The attribute receives, via its constructor, a command's alias. The base constructor we use here receives the alias as the *contract name* of the export so we can identify exactly which command we want later. The second parameter declares the type we are exporting which is the `ICommandHandler` interface we created previously. Now, let's make an actual command: using System; using System.Linq; using System.Reflection; [Command("example")] [Command("ex")] public class ExampleCommand : ICommandHandler { public int Execute(string[] args) { ThrowIfDoesNotHandle(args[0]); var myArgs = args.Select(x =&gt; { if (x.Contains(" ")) { return $"\"{x}\""; //pad with literal quotes } return x; }).ToArray(); var text = string.Join(" ", myArgs); Console.WriteLine($"args: {text}"); return 0; } private void ThrowIfDoesNotHandle(string command) { command = command.Trim().ToUpper(); var attr = typeof(ExampleCommand) .GetCustomAttributes&lt;CommandAttribute&gt;(false) .Where(x =&gt; x.Alias.ToUpper() == command) .FirstOrDefault(); if (attr == null) { throw new InvalidOperationException($"The handler '{typeof(ExampleCommand).FullName}' does not handle command '{command}'."); } } } We've adorned the `ExampleCommand` class with two `CommandAttribute` attributes, specifying that it handles the command "example" and "ex" where, within the context of this example program, "ex" is the short-hand way of specifying the "example" command. We don't necessary need the "ThrowIf" method but I added it to ensure the command can handle the actual command in case something upstream has gone awry. All this command is doing is basically echoing the arguments that it received, ensuring that any argument with spaces is padded with literal quotes. Upon successful execution, the command returns an exit code of 0. It is important to note that any class that uses the `CommandAttribute` **must** implement the `ICommandHandler` interface or MEF will throw a shit. Now, to bring it all together, we need to 1) figure out which command is being run 2) discover the `ICommandHandler` that handles that command 3) execute the command and 4) return the exit code. This is how we do all of that: using System; using System.ComponentModel.Composition; using System.ComponentModel.Composition.Hosting; class Program { static int Main(string[] args) { Console.WriteLine($"Running -&gt; {Environment.CommandLine}"); int exitCode = 0; if (args != null &amp;&amp; args.Length &gt; 0) { try { string command = args[0].ToLower().Trim(); // doin' a little MEF var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly)); //adds THIS assembly as a catalog to the aggregate catalog var container = new CompositionContainer(catalog); var commandHandler = container.GetExportedValue&lt;ICommandHandler&gt;(command); // gets the type that exports ICommandHandler with the specified command aka contract name exitCode = commandHandler.Execute(args); } catch (ImportCardinalityMismatchException) // couldn't find a handler for the command { Console.WriteLine($"Invalid command '{args[0]}'."); exitCode = 1; } catch (Exception ex) // dunno what went wrong { Console.WriteLine(ex.ToString()); exitCode = 1; } } else { Console.WriteLine("No arguments specified!"); exitCode = 1; } Console.WriteLine(); Console.WriteLine($"Program finished execution with exit code '{exitCode}'."); Console.ReadKey(true); return exitCode; } } There you go. We identified the command from the input arguments (in my example, the first arg is the command). We made our exports discoverable by creating an `AssemblyCatalog` for our assembly, adding it to our `AggregateCatalog` and then passing it into a new `CompositionContainer` instance. We called `CompositionContainer.GetExportedValue&lt;&gt;(string contractName)` to get our command, executed the command, and ultimately returned an exit code. Hope this helps. 
Thanks for the explanation, and have read through.
Noted!
"Internal and private fields are not covered by guidelines", so I'm not sure there's actually a "supposed to" for them at all.
Behavior matters. It would be more apparent to you if the default behavior was to cast digits to a float. Or cast 0/1 to false/true. So, yea it matters.
We already could do that. IEnumerable.Count() can be optimized by implementing IReadOnlyCollection. The extension method detects the optional interface automatically. 
The thing is, I don't want that. It just encourages bloated interfaces. 
Could you elaborate on that?
https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2202-do-not-dispose-objects-multiple-times?view=vs-2017 This shit here. The using statement doesn't work with *some*(?) streams / readers and so you need to manually set it to null and dispose it anyways.
Not entirely related to the question being asked, but if you press Ctrl+K, C with a block of code selected it will comment out all of the selected lines. Alternatively Ctrl-E C will remove all comments from the selected lines. 
Thank you. I expect the problem they're worried about there is that StreamWriter (for example) is designed such that it assumes ownership of the Stream object, to deal with common cases like using (var writer = new StreamWriter(new FileStream("foobar.txt"))) { as cleanly as possible. I've never run into a situation where this actually produced an error, though (not with framework classes, anyway: various homecooked IDisposable implementations *are* sometimes not properly robust, but that's typically an oversight of the developer).
In our build process, it gets flagged as violating an analyzer rule and it's fairly common to do something like using (reader) using (writer) write.info(something);
Bots that comment on programming subreddits? Scary...
Using statement is just syntax sugar. Honestly I don’t think it adds that much value. If you use multiple using statements your IL code will be multiple try-finally blocks. Much more readable and maintainable to use one try-finally and dispose like an accordion 
Are you mixing binary architectures of Office and your program? I recall having a weird error like this connecting to Excel and it was because I needed an x64 version of the AccessDatabaseEngine.exe. 
This is something I've actually wanted in C# for a good few years now. Using blocks/using statements don't quite fit the purpose that defer fills. In Go and Swift you can still have objects which is disposed of when they go out of scope, and you can indeed have code that is ran when those objects go out of scope. But, a lot of the time, you don't want to incur a memcall just to defer some code. Instead, youd want to just call that code at the end of the scope (maybe as a reusable method), which only incur an increment on the stack, while the state of the heap is unaffected. But, in complicated methods that can't be refactored into code that is easier to read, it would make sense to have that end-scope code be near the variables or statements that it's related to. It doesn't change any actual functionality in the language, only includes a bit of readability imo. Also, I think that ,generally, new features shouldn't be knocked down just because someone who isn't experienced with the new feature might produce code smells. That's how all new features work. No one is going to use them effectively until they've had time to produce mature code using that feature.
&gt; &gt; &gt; But, a lot of the time, you don't want to incur a memcall just to defer some code. If you are willing to write some custom code, you can use an IDisposable struct to avoid an allocation. 
oh HECK you're right! I forgot that's a thing that's happening now.
I've never run into a situation where it produced a *run-time* error.
&gt; either 'using' could be extended to allow arbitrary types in combination with a finally block or clause They are thinking about making `using` pattern based like `foreach`. This would allow your disposable token to be a stack allocated `ref struct`.
I'm not saying it's a runtime error, I'm saying analyzers are run as part of the build process and that rule isn't ignored, so I see it frequently enough.
I just wish its cron expression parser wasn't garbage. But yeah, it's great.
To add to this, you can hook it up to something like Redis or SQL to persist the tasks, so even if your service crashes/restarts the job will still run at the scheduled time.
I don’t think we’re having the same conversation. I was specifically responding to a post about how someone wouldn’t just check out a tutorial or something. My response was that, for someone who is coming from Java and C++, it may never have occurred to them that the sort of resources are available to them.
What I'm saying is that, in the absence of *actual harm*, perhaps the reasonable thing to do is suppress the warning in this case and get on with life. I'm also a little fuzzy on how defer's saving you, here. Are you expecting to change the pattern from Stream s = null; try { s = new FileStream(filename, FileMode.Append); using (var writer = new StreamWriter(s)) { // stuff } s = null; } finally { s?.Dispose(); } to var s = new FileStream(filename, FileMode.Append); defer { s?.Dispose(); } using (var writer = new StreamWriter(s)) { // stuff } s = null; ? Because I think there's a big question there about whether or not `defer` would capture the value of `s` at the point it's written.
No, I'm thinking more to use defer for logging classes and the like. Dispose is still the right tool for external resources.
jesus dude, a) not my code, b) the guy who DID write it is worth several million dollars. He made the game Celeste.
A library for running long running tasks in ASP.NET. 
Yes 
Great question actually. In college, I was so frustrated because I could not understand why a character shows up in the terminal. But to answer your question, there are a couple concepts that make this happen: Consider the following snippet: `int n = 50;` `Console.WriteLine(n);` Given the type of `n`, the specific method called is [this](https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Console/src/System/Console.cs#L506) one because of polymorphism. Which for `Console` is specifically `WriteLine(int)`. Under the sheets, this is delegating the call to an internal TextWriter instance, concretely StreamWriter (like /u/DogeAmazed pointed out). You can see it happening in [this](https://github.com/dotnet/corefx/blob/7afd2154f038252860b7e584950a66e3ecfe0ba5/src/Common/src/CoreLib/System/IO/TextWriter.cs#L211) method that calls `ToString` with a specific Formatter, what was an integer, is now represented as a .NET string. There are a lot of abstractions happening here I'm sure you noticed, these provide a similar interface and way of handling writing to something (in this case the Console). So this is what happens in the .NET world in Windows OS. Eventually these will call (if my memory serves me correctly) OS console functions described [here](https://docs.microsoft.com/en-us/windows/console/writeconsole). So, what was a number, got converted to character data and eventually stuffed into a buffer the console knows how to print. These OS level functions know how to write to video memory that will eventually display that character in the console. 
Really love hangfire. Been using the WebJobs sdk instead the last couple years, but Hangfire was there when I needed it!
Actually, the only thing that can be printed is a string. No matter what those characters on the screen mean to you, they are characters.
One guy being lucky doesn't mean he doesn't write shitty, unmaintainable code.
The question above was not, 'Does it matter?', it was, 'Why would it matter?' And that seems interesting, it could be illuminating to understand the problem and understand why it's important
Thanks for the interest, I will start the recordings this weekend. 
Definitely yes! I have never touched ML with c#
Awesome thanks for the interest !
Absolutely yes 
Thank you so much! Looks complicated but I do can’t wait to dig into this and start learning. I’ve had a lot of recommendations to use MEF, I don’t know why I never gave it a go.
I’ve been able to reuse a lot of the view code using Xamarin.Forms, Visual Studio on Mac is definitely not as good as on Windows but neither is Xcode for that matter so I don’t think that’s a huge knock. If you don’t need 100% pure native apps I can definitely recommend checking out Xamarin especially if you’re a C# shop already
Yes, I’d love to.
I'd just ask to keep it at a really basic level, at least make sure the first video just goes over the "what the hell are we doing?" aspect. A lot of tutorials tend to get right into a working knowledge of an advanced framework when getting to that working knowledge is the real challenge. 
Yes
Go has it an no one complains there, instead it's a good practice that ensures that one way or another, a resource is freed
I'm all for syntax sugar, but "features" like this only invite bad code and difficult, convoluted execution paths. Methods should flow from top to bottom, statement by statement. This is, effectively, a \`goto\` in disguise.
Have you ever worked with an OCR library? I've been trying to build something that reads license plate numbers but damn it's difficult. (there are extensions on nuget which do this but are not entirely free) 
Yes please, can this be applied to reading plate numbers too? (Noob question)
There is another override to pass in the type of transaction scope you want to open. You don't want the ambient transaction (default) you want RequiresNew
Nope 
Not the colors :P
&gt; There really isn’t anything equivalent to the asp.net site &gt; wasn't talking about frameworks, at all &gt; I mean the ASP.NET site &gt; Also, the .NET Core tutorials &gt; Yes, angular.io does something similar &gt; Even spring.io doesn't have that sort of clear walk-through &gt; you’re still the only one here talking about frameworks None of these are about languages. You never made any references to language tutorials, you kept talking about framework tutorials. And for completeness' sake, here is a link to the actual C# language tutorial from Microsoft: https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/ So you can stop linking to ASP.NET or .NET Core tutorials. By the way, Oracle has a Java tutorial: https://docs.oracle.com/javase/tutorial/
You'll need to use a DataGridTemplateColumn instead of a DataGridTextColumn.
Sounds promising, but unfortunately it results in a timeout on every save operation.
Yes please! But is this the iPhone ARKit? So how will you use C#?
Are you using Xamarin? It'll be interesting to learn anyway though...
Yes, sure!
Live stream on twitch?
Absolutely yes please. I look forward to watching you recordings. 
Sure.. (although try-finally is only partially in the IL itself; most of it is in side tables designating try blocks and finally handler locations.)
Until they fix this, stay away from it. https://github.com/HangfireIO/Hangfire/issues/1025
Don't use it. There are a few issues that have been opened for a while that make it unusable. https://github.com/HangfireIO/Hangfire/issues/1025
Until they fix this, never use it. https://github.com/HangfireIO/Hangfire/issues/1025
Technically, C# isn’t converting anything (except boxing), but the Console.WriteLine overload used will call .ToString on the passed in object (which will be a boxed integer).
I recommend a library I wrote: https://github.com/pauldotknopf/statik Examples: https://github.com/pauldotknopf/pauldotknopf.github.io https://github.com/pauldotknopf/resume
Gatsby is a fucking sledge hammer. Don't use it. https://news.ycombinator.com/item?id=18011099
You can right now! See me [other comment](https://www.reddit.com/r/csharp/comments/algihg/_/eflb9yn).
Wyam is good, but it bogged me down too much anytime I want to make anything that wasn't "out of the box" supported.
This looks like homework.
1- the the functikns don't necessarily need to be all static,only the "main" one. 2- Since you gave the "operationInput" function a return type of "int" and you return choice you can just assign the value of choice to a variable in the main function and pass it to the otjers as a parameter Ex. static void Main(){ int globalChoiceVar = OperationInput();/*this function stays the same.*/ //input numbers Arithmetic(globalChoiceVar);/*here you just add the parameter to the declaration of the function and you use it inside to determine the operation*// //code } Feel free to ask if you want clarification on something.
Nope, I'm taking up programming in my spare time and I wanted to make a calculator. 
 static void Main(string[] args) { Console.WriteLine("WELCOME TO MY CALCULATOR"); int globalChoiceVar = OperationInput(); Arithmetic(globalChoiceVar); Exponentation(globalChoiceVar); Console.ReadKey(); } static int OperationInput() { Console.WriteLine("\nPlease, choose an operation:"); Console.WriteLine("1 - Addition"); Console.WriteLine("2 - Subtraction"); Console.WriteLine("3 - Multiplication"); Console.WriteLine("4 - Division"); Console.WriteLine("5 - Exponentation"); string choiceString = Console.ReadLine(); int choice = Convert.ToInt32(choiceString); return choice; } static int FirstNumberInput() { Console.Write("\nPlease, enter the FIRST number: "); string firstNumberString = Console.ReadLine(); int firstNumber = Convert.ToInt32(firstNumberString); return firstNumber; } static int SecondNumberInput() { Console.Write("Please, enter the SECOND number: "); string secondNumberString = Console.ReadLine(); int secondNumber = Convert.ToInt32(secondNumberString); return secondNumber; } static int Arithmetic(int choice) { int answer = 0; switch (choice) { case 1: answer = FirstNumberInput() + SecondNumberInput(); break; case 2: answer = FirstNumberInput() - SecondNumberInput(); break; case 3: answer = FirstNumberInput() * SecondNumberInput(); break; case 4: answer = FirstNumberInput() / SecondNumberInput(); break; default: Console.WriteLine("You have entered a wrong option!"); break; } Console.WriteLine($"\nAnswer: {answer}."); return answer; } static double Exponentation(int choice) { double answer = 0; if (choice == 5) { double baseOfPower = FirstNumberInput(); double exponent = SecondNumberInput(); answer = Math.Pow(baseOfPower, exponent); } else Console.WriteLine("You have entered a wrong option!"); Console.WriteLine($"\nAnswer: {answer}."); return answer; Thank you very much! That 'globalChoiceVar' eliminated few lines in each method and now it doesn't seem to duplicate that 'Choose an operation' question anymore. Though now, is there any way to start Exponentation() method without triggering Arithmetic()? I have them running after one and another which is probably the problem. 
It will be YouTube just like many of my other videos.
I will be using Unity3d and C#
Yes with Unity3d and C#
Mainly for face tracking but I can look into OCR technologies in the future 
I haven’t but I like the idea for a new lesson in the future 
It won’t be that way, this is actually much simpler than people think, I will post the videos here soon and you can be the judge :)
Yes please 
Looks good! if you want to make it look less messy try reversing the if like this: if(globalChoiceVar == 5){ Exponentation(globalChoiceVar); } else if(globalChoiceVar &lt; 5 &amp;&amp; globalChoiceVar &gt; 0){ Arithmetic(globalChoiceVar); } From the type of question i guess you are new to c# so remember that there's always many ways to solve a problem, you just need to find the most efficient one.
I completely forgot the &lt;&gt; operators. Thank you very much!
Your welcome
Xamarin is like doing fine wood working drunk with a chainsaw.
I like to use the EnumMember attribute for this: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.enummemberattribute.value?view=netframework-4.7.2 
Umm 100%. We have been using a mix of Spark and Unity depending on the clients’ budget. I’d much rather be able to make a basic plug and play framework internally. 
 100 % working code with video explanation -- All Test Case Passed..!! Here is the video explanation of my solution in O(n) time - [https://youtu.be/NPMxxSyE7jM](https://youtu.be/NPMxxSyE7jM) and you can find most of the **hackerrank solutions with video explanation** here- [https://github.com/Java-aid/Hackerrank-Solutions](https://github.com/Java-aid/Hackerrank-Solutions) and many more needs to be added. Any comments and feedback will be appreciated. Regards, Kanahaiya Gupta &amp;#x200B;
Cool I came up with a very easy way to implement this. I will be posting about it soon. Thanks for your interest 
What's on page 52? I have it on kindle so my version doesn't have pages. 
Yes, functional languages and languages like Swift where options have been included from the beginning handle it a lot more elegant than the late add-on to C#. Still useful, I guess, but it's not the same.
You wouldn't deserialise a cab!
Slow compared to what? Working with strings the normal way? Probably not.
Face tracking is already nice... excited for the vids.
 Cool thanks 
Console.WriteLine is part of C#.
woohoo!
“Fixing” :p.
I would combine "FirstInput" and "SecondInput" in a general InputNumber() function
Sorry for the late reply, I got a little busy. On page 52 is sample code block that he talks about. Here is a link to the PDF: [LINK](https://www.robmiles.com/s/CSharp-Book-2016-Rob-Miles-82.pdf) I can read it and will understand most of what he's trying to do, but I cannot recreate anything close to being that complex and I feel like I'm very behind. &amp;#x200B;
Yeah, it does look like F# has always handled them pretty well as its been built in as its functional. But I reckon C# has caught up quite a lot since F#s inception. C#8 makes everything nullable if the options on I think
Hey, I was thinking about it but that would result in returning only one number right? I thought C# could only return one value.
Yes, iterating over a Span is slower than iterating over an array if you are on .NET Framework. source: I measured it.
yes but you can use the function two times
Create files with DeleteOnClose flag. Windows will delete them as soon as handle is closed.
This feels kinda like `npm isntall` to me (which, if you're not familiar, does the same thing as`npm install`). Programmers can be a picky bunch sometimes.
Just use a dictionary...
Cool, I've just tried it now and it works really well, thanks!
post your new code again, i bet we can improve on it again
So here it is. I've added a follow-up question (if the user wants to continue). Any feedback is appreciated! static void Main(string[] args) { Console.WriteLine("WELCOME TO MY CALCULATOR"); bool continuePositive = true; while (continuePositive) // Loop if the user wants to continue. { // Setting up a global variable for OperationInput() method (1 - 5). // Method OperationInput() is returning a variable 'choice' in a form of int. This is then stored in global variable 'globalChoiceVar'. // The new variable is then put in every method in main. int globalChoiceVar = OperationInput(); if (globalChoiceVar &gt; 0 &amp;&amp; globalChoiceVar &lt; 5) // Basic operations (+, -, *, /). Arithmetic(globalChoiceVar); else if (globalChoiceVar == 5) // Exponentation. Exponentation(globalChoiceVar); Console.Write("Do you want to continue? y / n: "); // Follow-up question. string question = Console.ReadLine(); switch (question) { case "y": continuePositive = true; break; case "n": continuePositive = false; Console.WriteLine("Thank you for using my calculator!"); Console.WriteLine("Type any key to exit..."); break; default: continuePositive = false; Console.WriteLine("You have entered a wrong option! The program will close now."); break; } } Console.ReadKey(); } /// &lt;summary&gt; /// Question for the user to enter a number corresponding to the operation. /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; static int OperationInput() { Console.WriteLine("\nPlease, choose an operation:"); Console.WriteLine("1 - Addition"); Console.WriteLine("2 - Subtraction"); Console.WriteLine("3 - Multiplication"); Console.WriteLine("4 - Division"); Console.WriteLine("5 - Exponentation"); string choiceString = Console.ReadLine(); int choice = Convert.ToInt32(choiceString); if (choice &gt; 5 || choice &lt; 0) { Console.WriteLine("\nYou have entered a wrong option!"); } return choice; } /// &lt;summary&gt; /// Entering the first number. /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; static double InputNumber() { Console.Write("\nPlease, enter the number accordingly: "); string inputNumberString = Console.ReadLine(); double inputNumber = Convert.ToDouble(inputNumberString); return inputNumber; } /// &lt;summary&gt; /// Calculating the basic operations (+, -, *, /). /// &lt;/summary&gt; /// &lt;param name="choiceAri"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; static double Arithmetic(int choiceAri) { double answer = 0; switch (choiceAri) { case 1: answer = InputNumber() + InputNumber(); break; case 2: answer = InputNumber() - InputNumber(); break; case 3: answer = InputNumber() * InputNumber(); break; case 4: answer = InputNumber() / InputNumber(); break; } Console.WriteLine($"\nAnswer: {answer}."); return answer; } /// &lt;summary&gt; /// Raising an x number to the n-th power. /// &lt;/summary&gt; /// &lt;param name="choiceExp"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; static double Exponentation(int choiceExp) { double answer = Math.Pow(InputNumber(), InputNumber()); Console.WriteLine($"\nAnswer: {answer}."); return answer; } } } &amp;#x200B;
Nice!
I mean hey it's one less beginner trap so I'm all for it
 bool continuePositive = true; while (continuePositive) // Loop if the user wants to continue. { //etc } you can improve this by doing something like this, which would remove everything with continuePositive: do{ //etc }while (AskForExit()); bool AskForExit(){ //ask user if he wants to continue //return true or false depending on the answer } 
Yes, definitely
True but now the codebase will be littered with inconsistent ways of doing the same thing and lots of places will have a coding standard to say which one they want and now I'll mess it up but instead of the compiler telling me I'll miss it and everyone will know I didn't memorize the standards doc. Then we will have some style rule in fxcop or resharper to catch it
Seems cleaner, thanks!
I have a similar issue with Java array's declaration, which C# fixed by having a single way. For those that don't know in Java, to ease porting C and C++ code, one can do `int[] name` or `int name[]`. The latter still comes up in old codebases.
How'd you compare it to Jenkins? 
I'm new to the concept of dependency injection, can you explain why you did the data and context projects as Web Application projects instead of regular c# libraries? 
I'm sort of okay with Java being able to specify arrays one way or the other, but being able to do both is just stupid.
cr7 not goat 
Tho the C# variant is just a compile-time hack. The F# variant is an actual full fledged type.
You can also combine Exponentation and the Arithmetic() function. If you want to be really fancy you could use Delegates to store what to do and later on just execute on the new numbers: if(Int32.TryParse(Console.ReadLine(), out int choice)){ Func&lt;int,int,double&gt; Function = null; switch(choice){ case 1: Function = (left,right) =&gt; left + right; break; case 2: Function = (left,right) =&gt; left - right; break; case 3: Function = (left,right) =&gt; left * right; break; case 4: Function = (left,right) =&gt; left / right; break; case 5: Function = (left,right) =&gt; Math.Pow(left,right); break; default: break; } var result = Function.Invoke(InputNumber(),InputNumber()); } I know this is a bit to much maybe, but if you like it you can look more into it
Isn't Jenkins CI/CD? If so they're different things
The codebase will be littered with *equivalent* ways of doing the same thing. I dream of the day when it doesn't matter if the bikeshed is red or green, so long as its roof doesn't leak and the bikes can't be stolen by jumping through an open window.
I don't know what the labs are like but you should definitely be practicing as you go along. Reading simply isn't enough for you to remember it effectively, and practice might make you realise that you don't understand done things as well as you think. As for page 52, I don't know which part is difficult for you personally. Where do you get confused? I might guess that it is the use of methods to provide reusable code?
Hey, I haven't read about Delegates yet, but I will surely look into this when I'm more familiar with them. 
It is not clear what you are asking.
&gt; True but now the codebase will be littered with inconsistent ways of doing the same thing and lots of places will have a coding standard to say which one they want and now I'll mess it up but instead of the compiler telling me I'll miss it and everyone will know I didn't memorize the standards doc. We've had this since C# 1 with `public abstract void` meaning the same as `abstract public void`. &gt;Then we will have some style rule in fxcop or resharper to catch it This is probably the best compromise. To the _machine_, it really shouldn't matter. It should be forgiving in what it accepts. To fellow _humans_, consistency has benefits.
&gt; For those that don't know in Java, to ease porting C and C++ code, one can do int[] name or int name[], Sounds fine so far… …which can even be intermixed in case of multiple dimensions e.g. int[] name[]. And not it sounds bafflingly stupid. `int[] name[]` should either mean the same as `int[] name` or just not be allowed at all. Who comes up with this stuff?
Java allows anonymous classes to implement an interface because it was decided to be an appropriately "java-like" and OO way of implementing function references/delegates at the time. Basically the idea of separating a method from a class or interface definition was abhorred at the time. C# however had delegates as part of the language pretty much since the start. Because of that, one of the primary reasons for using an anonymous interface implementation as seen in Java is no longer present. Instead of accepting IOperation, you accept a delegate definition that returns an int and accepts two int parameters and can be passed directly. Anonymous interface implementation when dealing with interface containing multiple methods ceases to be as useful because it largely just makes the method in which the anonymous definition is found noisier, similar to defining several local functions or assigning multiple lambda routines in a C# method.
This is something I'd love as well. You can kind of emulate it via an implicit operator: public class DelegateOperator : IOperator { private readonly Func&lt;int, int, int&gt; _operate; public DelegateOperator(Func&lt;int, int, int&gt; operate) =&gt; _operate = operate; public int Operate(int a, int b) =&gt; _operate(a, b); public static implicit operator DelegateOperator(Func&lt;int, int, int&gt; operate) =&gt; new DelegateOperator(operate); } Of course this only works with single method interfaces or single abstract method classes and it's also quite a lot to type.
Sure.... But is there a good reason for having it? Changing it now would be a breaking change, so I'm not advocating for it. I'm just saying, is anyone happy they can mix and match the ordering? You can go on SO right now and find a bunch of questions asking if the ordering matters, and a bunch of people debating the merits, looking at MS conventions for guides and discussing the different tools you can use to keep usages consistent in your code. That's a fairly large mental load, Compared to the compiler just saying, "hey you meant abstract public". Anyway, I get that it is subjective and people have different opinions on which way is better or if both are better.... But I can guarantee I will get dinged on a code review at some point in the future for doing it in the wrong order. Instead of learning the one way that works in c# I'll need to remember how each individual company or project does it.
C# has first-class functions, so it doesn't need to have interface types to hold individual, stateless (or nearly stateless) methods. In any situation where that would make sense, you can and should use a delegate, instead.
I followed these docs to the T and it works for me [https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-2.2) &amp;#x200B; * The WebApplicationFactory bootstraps the TestServer. * I would specify your existing Startup class * The reason you might want to specify a different one is if you want a "bare bones" startup config that avoids certain infrastructre requirments * If you use your existing Startup (which I do) there are several interception points to change the TestServer. * For example, I cannot integration test with one of my third-party connectors, so I can inject my own Mock provider, without editing/changing the Startup class. Cool! * Once it is bootstrapped, it will return a HttpClient with a special local socket to the TestServer... 
Language designers when they don't fully test all possible cases for a language grammar, and don't want to break backwards compatibility. https://docs.oracle.com/javase/specs/jls/se11/html/jls-10.html ("10.2. Array Variables "). This is the kind of stuff that gives ideas to stupid interview questions.
Yes, unfortunately you have to define an "anonymous adapter" for every type you want an anonymous class of, and usually that means you have to put it in its own file, and at that point the amount of work it takes is greater than the amount of work it saves.
Not exclusively, triggering timed tasks is quite straightforward there. 
I agree that the first class functions of csharp made the need for them much lesser than Java had, and now that Java has lambdas they're much less necessary, but there are still times when they come in handy. As I mentioned, when you want to implement an interface that isn't easily converted from a lambda, like an interface with two methods or an interface without an already-defined implementation that takes function objects in the constructor.
&gt; I'm just saying, is anyone happy they can mix and match the ordering? [Yes. 38 gave it the thumbs-up, and another 19 a smile.](https://github.com/dotnet/csharplang/issues/1630) And one of the long-time C# compiler devs says: &gt;FWIW, this trips me up all the time. &gt;That's a fairly large mental load, &gt; &gt;Compared to the compiler just saying, "hey you meant abstract public". I don't understand this argument. _Having to remember_ "wait, which is the right order, which is completely arbitrary and pointless?" is a large mental load. A case can be made that the IDE should normalize to one order or the other, but this isn't viable across all editors that allow C# (some people even use simple text editors to write C# _scripts_). &gt; But I can guarantee I will get dinged on a code review at some point in the future for doing it in the wrong order. That sounds like an awful team to work in.
Unless the interface has more than a single method.
Are you talking about using the "dynamic" keyword, so that the type is determined at runtime instead of compile time? I'm new to dynamic and var, instead of traditional typed variables, so forgive me if this isn't what you meant. 
You can't. Use braces.
You need to get `labelCapitan.Content` instead of converting the object to a string. 
It's a little bit like `''` and `""` meaning the same thing in Javascript.
&gt;This is the kind of stuff that gives ideas to stupid interview questions. Oh my god you're right **Interviewer:** What kind of type will this syntax yield? `int[] name[]` **Me:** The only correct answer is _fuck you_, and I have plenty of other job options.
Yes, that would be why I said &gt; it doesn't need to have interface types to hold **individual**, stateless (or nearly stateless) methods. If you have an interface with more than one method, they're probably bound together by shared state, anyway.
In here you *could* exploit the fact that assignment expressions return the value they just assigned and write it as: internal static void fToC(ref int f, out int c) =&gt; Console.WriteLine(c = (f-32)*(5/9)); But yeah don't actually do that and just use braces.
No, not at all, I'm referring to the hypothetical ability, which exists in Java, to create a new class (and simultaneously a new instance of it), that extends another class, as an expression which can be used inside a statement.
Java passes around individual methods as objects implementing small (single-method) interfaces (or it _did_: I last kept up with Java in 2006, so I'm not sure how it's lambda stuff figures into this).
&gt; like an interface with two methods or an interface without an already-defined implementation that takes function objects in the constructor. So what's the problem with defining a class in these scenarios?
Yes, and anonymous classes can store that shared state.
https://www.thereformedprogrammer.net/is-the-repository-pattern-useful-with-entity-framework-core/
There are certain limitations when it comes to expression bodied methods (you can read more about that [here](http://www.informit.com/articles/article.aspx?p=2414582)), one of them being that you can't have more than one statement. What would be the purpose for this, anyway? The whole point of expression bodies members is to make the code a bit more readable by eliminating some of the noise. But it would become more confusing in your case.
Defining a class can only be done, syntactically, in some contexts. For instance, it can't be done at all inside a method. And most style standards also require that they have their own file. And they also don't close over variables in the same scope.
1. The result is dubiously readable, especially when dropped in as a method argument. 2. The lack of concrete examples where this is *actually* useful is probably a hint that it's not a valuable feature.
The mental load is remembering that while I can do both, they are the same and knowing which way is preferred in the current codebase. And I mean, maybe you've never been on a project that had arbitrary style rules, but it is far from uncommon. Microsoft has things like this https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions The compiler doesn't care, but MS recommends you follow these conventions. Every company I've worked at has had similar, equally subjective rules. Entire, large, complex tools exist solely to manage these. Fxcop probably being the most well known. I haven't worked at a single company that would accept "it compiles" as the sole standard for code. The have tons of conventions they expect devs to follow. The compiler doesn't care if everything is on one line, or if all my variables are no more than three characters, or if my classes are all in one file called "oopstuff.cs".... But almost everyone would agree those aren't good ideas. So there is a valid reason for style/convention guides to exist. Yeah, this is minor and trivial, but I fully expect it to be a thing that some companies will include in their coding standards doc. 
F\# is able to do this using object expressions. See https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/interfaces#implementing-interfaces-by-using-object-expressions
Oh absolutely agreed. I can't think of anywhere I've used this honestly. And thinking about this more I'm not sure it actually works as written. Playing with it as written, a lambda needs to be cast to Func&lt;int, int, int&gt; and then that needs to be _explicitly_ cast to DelegateOperator since no conversion from Func to IOperator exists, just from Func to DelegateOperator. So yeah, can't recommend this kind of thing because: 1. All the casts. 2. All the classes
It's not a huge issue - but I think this displays a bigger issue that when string interpolation was implemented, nothing was done to make this not happen later. Now here we are.
Yes! But i hope you can keep it simple and easy to understand. Sorry, newbie here. 
The playlist for this can be found at: [Creating a minimalistic UI with C# and Unity3d](https://www.youtube.com/playlist?list=PLQMQNmwN3Fvy8au_A9edHhqjrmNqukdj4) 
Plus if you need to go backwards for some reason, will probably have to go and change them. But honestly how often are people using interpolated string literals? Sounds like a good refactor situation as is
It will be very easy I assure you !
Although there's a reason - intentional or not - it allows you to maintain the necessary quote marks within a string in another context where you might not get to choose which one you would like to use. True, you could get around it with string concatenation, but it's a lot more convenient. By that logic, was there a certain reason computers weren't designed to process binary in the opposite polarity? Ie, off is now on and on is now off?
&gt; That's a big restriction that adds a lot of boilerplate and overhead. Can't say I've ever felt that way in 16 years of full time development in .Net. I struggle to imagine a scenario where I'd need to provide implementations of multiple methods/properties/etc. and capture variables, and feel ok about defining that inline, much less doing it so often that it feels like a major drag.
Where I often used it in Java was for specifying "special case" Singleton objects. 
This is a Reddit thread mate, not an rfc. the "lack of concrete examples" is because it's an informal discussion. I'm at home chilling on a Saturday when a thought came to me about something that might merit discussion, if you want I'll keep a journal over the next month of all the times at work I feel a need to use this. But in a language with as many features as csharp, I wonder why they haven't got this one in particular. It must have been considered and rejected for a reason more compelling than "I don't see why". After all, they're considering defer statements.
I didnt know that, you got a source for it? Quite interested to know the differences right now.
But you can still use backticks, or escape the quotes. There are like four ways to handle strings with quotes in them.
Is this a case where you think the less you type, the faster your code runs? There's not correlation. The time spend typing is probably the smallest share of the time that is going to be spent on your code. Reading it will soon swamp all other factors. Use braces. Make it readable. Don't get too clever. Code that looks like the writer was trying to be clever is usually a red flag.
I would, but the bodied expression is a homework requirement. 
Just look at the generated IL: https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGhhAEssmATEAagB8AAgAYABIICMAbgCwAKEEBmcQCZRAYVEBveaL3jlAe2AArCBRgB+UQFkAFAEptu/a8EB2UWWxZZc1wC+8gFAA== In this example code the method is marked to return a nullable reference: `object?` But in the IL the type is still just `object`. There is no special type for nullable references. It's just a "*hack*" by annotating it with a special attribute.
Was thinking the same thing. EF already implements the repository and how patterns...
EF Core supports a handful of databases. It's probably the best tool for what you're trying to do, although I'm not a big fan of the migration tooling. [EF Core Database providers](https://docs.microsoft.com/en-us/ef/core/providers/)
Sorry, I didn’t make this too clear. Not different database providers just different SQL databases. Some of which will be on a completely different database server, any idea if EF core could support that? 
One of the things I'd like to most for is low ceremony callback implementations, e.g. IObserver&lt;T&gt;. It'd be nicer to do new IObserver&lt;int&gt; { void OnNext(int value) { ... } # etc } Than either defining a proper class for this one use case or defining something like `DelegateObserver&lt;T&gt;` that takes an `Action&lt;T&gt;` in ctor to avoid needing to create lots of one time use observer classes. You can do nested classes to reduce the scope of this one time use class but that's still kind of messy.
I never even thought of combining verbatim and interpolation. I use interpolation religiously.
EF Code First has a flavor of what you're looking for. https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/migrations/
I mean, you kind of can. var c = 1; var scalingAdd = new { operate = (Func&lt;int, int, int&gt;)((a, b) =&gt; c * (a + b)) }; Console.WriteLine(scalingAdd.operate(4,5));
I didn't even know it was called verbatim string :D neat :)
If you checked out the discussion on the github post about defer, you would find that the feature was being considered because the developers claim to have particular cases in the compiler it would simplify for them. (Specifically, gafter said there were things in the compiler that would clean up for him.) The primary reason they didn't do this was *because we have first-class functions* and the value for anonymously implementing larger interfaces didn't justify the work it would take or tradeoffs it would incur. Whereas Java has it because they *don't* have first-class functions (or didn't, anyway), and the ability to implement a large interface anonymously is an obvious consequence of being able to implement *any* interface anonymously.
If you already know SQL and are ready to write SQL queries, then I'd got with [Dapper](https://www.c-sharpcorner.com/article/asp-net-core-web-api-with-dapper-and-vs-2017/). EF Core, just like EF, expects you to trust that it will create really great SQL and most times it does. All the anti-Microsoft folks love it because it's not MS too. EF Core tooling is great for code first, not so great for db first. Scaffold is pretty clunky and doesn't handle views, so I'm not all that happy with it at the moment.
I remember learning about EF and then stumbling upon the repository pattern not long after. Learned how to implement it in a crappy environment that used Oracle, and about 15 minutes after feeling proud of myself I was all, "This is what EF already does," and felt I'd wasted a lot of time coming to that realization. 
&gt; There are certain limitations when it comes to expression bodied methods (you can read more about that here), one of them being that you can't have more than one statement. The limitation of the **expression bodied methods** is that the **method body** must be an **expression**. Who would have thought that!
"Making it marginally easier to be a shit coder and get away with it."
I think it can but you will need a separate database context instance for each database, and your code will need to manage which class is in which context.
I don’t see how this fix has anything to do with that, but I get your point. 
Tell me more!
&gt; True but now the codebase will be littered with inconsistent ways of doing the same thing and lots of places will have a coding standard to say which one they want and now I'll mess it up but instead of the compiler telling me I'll miss it and everyone will know I didn't memorize the standards doc. &gt; &gt; Am I the only one who uses verbatim strings once every 3-4 years? Who are all these people using verbatim strings all over the place?
&gt; Oh my god you're right No, he's not. Noone will *ever* interview on that question in a million years.
Azure WebJobs, similar to Hangfire, is a framework that simplifies the task of writing background processing code that runs in Azure WebJobs. It includes a declarative binding and trigger system that works with Azure Storage Blobs, Queues and Tables as well as Service Bus. The binding system makes it incredibly easy to write code that reads or writes Azure Storage objects. The trigger system automatically invokes a function in your code whenever any new data is received in a queue or blob. The SDK also provides an integrated Dashboard experience in the Azure management portal, with rich monitoring and diagnostics information for your WebJob runs. Copy/paste from [their wiki](https://github.com/Azure/azure-webjobs-sdk/wiki)
Can't you optimise the comparison with something like: var a = y[i] - x[i]; if (a != 0) { return a; } But with SIMD?
'Private static 'Static private We are all still alive, it's a trivial issue.
I’ve been learning C# for a little while now, and I couldn’t really get into The Yellow Book, I don’t know why. I’ve been enjoying C# 7.0 in a nutshell much more, with more useful information, but it’s more abstract than The Yellow Books example code. Pg. 52 is still pretty easy concepts but it may have been too much information too quickly. I started by using Bob Tabors free course and then Pluralsight courses (free 3 month trial with new Visual Studio account). It holds your hand a little more at a slower pace, and really gets you familiar with the fundamentals.
oh that is nice! and yes you could...don't know if it would be faster but it might. 
Look at the properties of the Label object you're using. You probably want the `.Text` property. string kapitan = labelCaptain.Text;
It's a pet project, and not super polished, but you might find this useful: https://bitbucket.org/quentin-starin/easymigrator/wiki/Home You could use it on your model classes I suppose, though it doesn't do the schema diff based migration generation black magic that EF does, so I'm not sure it's a good idea to use your actual model classes as the classes defining your migrations. Another option would be to borrow EF's migration implementation, it's open source, though that could be a solid chunk of work extracting it from the rest of EF.
On the other hand SAM types are superior to delegates. No additional concept, no additional syntax. Of course having delegates in the language is a small price to pay for having lambdas a decade earlier.
I am pretty sure Java wouldn't add this feature today. In the presence of lambdas it has limited usage that doesn't justify the complexity. Also Java APIs evolved around that feature while C#'s APIs evolved around delegates which makes the feature even less useful today.
Hey man, I heard you like interpolated verbatim strings, so I put an interpolated verbatim string inside an interpolated verbatim string right next to another interpolated verbatim string with a few more interpolated verbatim strings for you to enjoy
Yes we are :)
:)
:)
Tell me more. 
No, I meant public abstract, not abstract public :) 
Looks like you’re returning a new Builder on each get access instead of assigning the new Builder to builder and then just returning that. 
But for each get access, it will only assign a new builder only if it is null. After the first run, it should not be null.
Look inside the getter of Builder. You shouldn’t just return the new instance but instead assign the new instance to the backing field before.
You’re not assigning a value to the field “builder”. If you do it like this, it will be the same string builder for all uses in the same class: one for the TextInput class and another one for the NumericInput class. get { if(builder == null) { builder = new StringBuilder(); } return builder; }
Thanks a lot.
Thanks a lot. Don't know how I didn't see that. :|
Well of course you should always double check with a benchmark. Computers are surprising and compilers are even worse with stupid limitations.
I never knew this was a problem because I always did "$@" just because. 
I guess it was the same with me or ReSharper corrected my mistake. I don't know which. 
Of course it is not. It is one of the fastest part of the whole thing. My point is to optimize *everything* so I try to not leave any stone unturned. In case you are curious about the whole thing, it is for cryptography and this class (or rather struct) is a BigInteger one. So far the addition and subtractions are about 15% faster than .net's but the main focus is on modular arithmetic (like a+b %c) which is ~25% faster to call `SubtractMod(a,b,p)` than calling `BitInteger.Subtract()` and then `.Remainder()`(all 256 bit values). I am experimenting for the most part and haven't had time to finish the multiplication and division yet. So the optimization is actually in the algorithms used in each of these functions but there still is tiny room for improvement in things like `CompareTo` which I call a couple of times in `SubtractMod()`
Explicit &gt; Implicit in all things. Period. "Beginner traps" is synonymous with "I blame the hammer for smashing my thumb".
Yes please
Wouldn't it be obvious from syntax highlighting? Even old vi guys like me use syntax highlighting.
Apparently not OP. 
Fall-through is incredibly natural once you have multiple cases w/ the same switch handler, though. But agreed, I'd posit no modern code should have fall-through from non-empty cases to other cases.
We are happily using it despite the open issues. The issues you have pointed to is no problem for us, so why shouldn’t we use it? Nothing is perfect - it all comes down to choosing what you can live with or not. 
Econnect is correct. The customer portal should have samples and schema docs. You def want to log in to that. Whoever owns the license for GP should be able to give you access. The product is called Dynamics GP, not. Great Plains anymore. Here’s a walkthrough but it’s a bit simplistic. There’s much more to the integration and reading the docs is the best place to start. https://msdynamicsworld.com/story/microsoft-visual-studio/creating-microsoft-dynamics-gp-integration-econnect-and-visual-studio https://support.microsoft.com/en-us/help/914090/the-developer-toolkit-for-microsoft-dynamics-gp
I find [rebus](https://github.com/rebus-org/Rebus) some what more feature rich in some areas. While hangfire is really simple and have a great dashboard, rebus has more settings/options at a lower level. And sagas. Where hangfire is more focused on background job handling, rebus is more about messaging. But you can solve more or less the same things with both. 
You might need to mention the a fourth time. Just to be sure...
Thank you bro , u did really gave me a push there , i was start to think that am the only that will integrate with this :DD , thanks again .
I don't understand that. How do you solve the problem of long running tasks with messaging?
You need something to do the actual work - as you do with hangfire. The question is how you get this something triggered. With hangfire, it is hangfire ‘eating’ from a queue it manages, running the code specified in the job description. With rebus, it is rebus ‘eating’ from the message bus, and the run the messagehandler for the message. 
Checkout Char.IsDigit and other members like it.
AFAIK System.Reactive offers conversion operators for func/actions to be passed as a lambda instead of what you propose. Makes the code even less verbose
Please try to find on website goalkicker.com Maybe they have what you want. It's all free! 
http://lmgtfy.com/?q=c%23+unity+book
Thank you for sharing
In most cases books aren't necessary and you'll forget most of what's in the book as you read it, so my advice is just to search things up as you need them. It also gives valuable experience with searching and reading documentation which will only help. Though if you really want a book I can't really help you, sorry. I do hope you find what you're looking for! 
I once attempted to, thought it didn't work because I got a compiler error and moved on. Little did I know if just got my @ and $ mixed up. A whole now world of possibilities for me 
It can't be because it's no possible. Member bodied expressions can only be a single expression.
What are trying to do? Because this is not possible.
You're welcome. 
There is currently no fall through for non empty, you always have to use break, return, or goto. The change just makes break implied.
Sorry for the late reply, I do mess around with the code, and when I read the code on 52, I do understand it, but if it came down to writing something similar, I cannot. I suppose I just need to re-read the book, maybe I was reading too fast.
Thank you very much! I might have read too fast, I'll try your recommendations, and I'll look into those courses, thank you! 
Just making sure the relevant people get the notifications. ImSoRrYtObOtHeRyOu.
How do users get a JWT token? If this process involves a username and password, you will need to make sure it's not easily brute forced and the passwords are properly hashed and salted.
Pretty cool!
Users get a JWT with a username and password. The login endpoint is rate limited to 2 calls per second per IP. Passwords are hashed with BCrypt.
Can you explain this to me? What is this? Like I’m completely stupid.
This issue is particularly bad though. It happens across many different providers. Messages are processed multiple times. Unless you make you messages idempotent, you'll have issues.
Well, you sort of have anyway, though. First, it’s in the docs that all jobs should be idempotent, and next: you want find any messaging system that guarantees exactly one delivery. It’s either ‘never more than once’ or ‘at least once’. 
If you just want to read/write simple tables using generics, check out PanoramicData.SheetMagic. Otherwise, you want OpenXML.
I use a library called closedXML
What would be the time difference between selecting the next vertex via 'orderby' as opposed to a priority queue?
large. if anyone needs a c# priority queue let me know.
DateTime.now will get you the current date and time. Compare that with your stored datetime and you gave your timer.
You can use [UltimatePDF](https://www.componentpro.com/products/pdf) third-party library for .Net in c#. It is highly reliable and easy to use. You can use it to generate your views into PDF. you can easily use it generate lots of graphs from data in PDF. Here is the example to generate PDF from HTML: // Example Description: Shows how to convert HTML to PDF. using System; using System.Drawing; using ComponentPro.HtmlConverter; using ComponentPro.Pdf; using [ComponentPro.Pdf.Graphics](https://ComponentPro.Pdf.Graphics); &amp;#x200B; ... &amp;#x200B; // Create a new PDF document. This object represents the PDF document. // This document has one page, by default. Additional pages have to be added. PdfDocument doc = new PdfDocument(); &amp;#x200B; // Add a page to the document PdfPage page = doc.Pages.Add(); &amp;#x200B; // Options bool keepHeight = false; bool keepWidth = false; bool javaScript = false; bool autoDetectPageBreak = false; bool hyperLink = false; bool splitTextLines = false; string url = "[http://www.google.co.uk](http://www.google.co.uk)"; &amp;#x200B; SizeF pageSize = page.GetClientSize(); &amp;#x200B; PdfUnitConvertor convertor = new PdfUnitConvertor(); float width = -1; float height = -1; &amp;#x200B; //Calculates the height and width of the pdf image AspectRatio dimension = AspectRatio.None; if (keepHeight) { dimension = AspectRatio.KeepHeight; height = convertor.ConvertToPixels(page.GetClientSize().Height, PdfGraphicsUnit.Point); } else if (keepWidth) { dimension = AspectRatio.KeepWidth; width = convertor.ConvertToPixels(page.GetClientSize().Width, PdfGraphicsUnit.Point); } &amp;#x200B; Html2PdfOptions options = new Html2PdfOptions(); options.EnableJavaScript = javaScript; options.AutoDetectPageBreak = autoDetectPageBreak; options.EnableHyperlinks = hyperLink; options.Width = (int)width; options.Height = (int)height; options.SplitTextLines = splitTextLines; options.AspectRatio = dimension; &amp;#x200B; PdfGraphics g = [page.Graphics](https://page.Graphics); &amp;#x200B; // Draw rotated objects g.RotateTransform(45.0f); &amp;#x200B; // Translate to 20, 20 g.TranslateTransform(20, 20); &amp;#x200B; doc.ImportHtml(url, options); &amp;#x200B; &amp;#x200B; // Save the PDF document to disk. [doc.Save](https://doc.Save)("Html2Pdf.pdf"); &amp;#x200B; // Use the following code to stream the document to the browser. // [pdfDoc.Save](https://pdfDoc.Save)("Html2Pdf.pdf", Response, HttpResponseType.OpenInsideBrowser); // Response is an HttpResponse object. &amp;#x200B; // Close the document. doc.Close(); &amp;#x200B; I hope this will help you as it help me.
I wrote a HTTP server for building excel reports and retrieving them. https://codereview.stackexchange.com/questions/212594/httplistener-server-for-building-reports-in-excel This is alpha version, I am looking to make improvements, any suggestions welcomed.
EPPlus is feature-rich, I've used it for years. Its only downfall is that it is very memory hungry so I would not recommend it for massive documents.
I like this one a lot!
I don’t understand. If your PC is off, your program won’t run. Are you trying to put something in Task Scheduler? There are APIs for that.
Well, I am researching a way to preprocess vector graphics (as in SVG) to render them on the GPU. Vector graphics are comprised of path, which are comprised of path commands. However, the GPU interprets triangles and triangular primitives. So, basically, the code is to geometrically determine the faces that are to be rendered and to use the correct pixel shader on the GPU to render the curve primitives. More info can be seen on the `README.md` file on the repository.
Update - the GitHub repository is located on [https://github.com/JoaoBaptMG/PathRenderingLab](https://github.com/JoaoBaptMG/PathRenderingLab)
Woaaaaah. Goes to show how I've never needed that feature for 15 years.
What about NPOI? It's actually distrubted by Microsoft now and is available on .net standard 2.0 without any Com+ or interop. 
Actually people do complain about Go's weird mix of exception-like `panic`/`recover` and error codes.
Reads like a foreign language if you don’t know what A* is 
\+1. I use NPOI and it works great
It really does. And it's light weight. Also works with more than just Excel. It can be used to make word and power point documents programmatically!
I’m interested!
I insert a time period and current date. The program is set to run at startup It runs in the background It adds the time period to the date. When the system clock hits that new date, a message box pops up
Hook me up!
if only we had a website where you could ask for information about things you don't know about
yeah, but panic and recover are exceptional cases in Go, unlike C# where they often are used for defining flow.
Just schedule a task for that new date. https://github.com/dahall/TaskScheduler/wiki
here, this actually leverages SortedDictionary, so it might be possible to get a little better perf by doing your own heap, but SortedDict is a tree behind the scenes so its probably close: https://gist.github.com/jackmott/9753f02dcd33a1267fbc4504c516241a 
Consider this quote by Anders Hejlsberg, lead architect for C# and TypeScript, &gt; It is funny how people think that the important thing about exceptions is handling them. That is not the important thing about exceptions. In a well-written application there's a ratio of ten to one, in my opinion, of try finally to try catch. Or in C#, using statements, which are like try finally. &gt; &gt; In the finally, you protect yourself against the exceptions, but you don't actually handle them. Error handling you put somewhere else. Surely in any kind of event-driven application like any kind of modern UI, you typically put an exception handler around your main message pump, and you just handle exceptions as they fall out that way. But you make sure you protect yourself all the way out by deallocating any resources you've grabbed, and so forth. You clean up after yourself, so you're always in a consistent state. You don't want a program where in 100 different places you handle exceptions and pop up error dialogs. What if you want to change the way you put up that dialog box? That's just terrible. The exception handling should be centralized, and you should just protect yourself as the exceptions propagate out to the handler. https://www.artima.com/intv/solid2.html Go error codes are focused on the exceptional case, that you actually want to handle the error locally. But the vast majority of the time the only correct thing to do, aside from making sure you use `defer` correctly, if to return the error code. 
For those interested, read more about the [CAP theorem](https://en.m.wikipedia.org/wiki/CAP_theorem) which explains the background for the ‘at least once’ vs ‘at most once’ dilemma. 
For those interested, read more about the [CAP theorem](https://en.m.wikipedia.org/wiki/CAP_theorem) which explains the background for the ‘at least once’ vs ‘at most once’ dilemma.
So much pointless code. Let the dbcontext out!
Just going off the image, this is fixed POV right? Don't have time to check the repo but this is pretty cool.
Those were not good examples. MySQL is funded through support contracts, as are the companies that contribute the bulk of the development work on PostgreSQL. As for C#, it primarily exists to sell Azure subscriptions and Windows licenses.
Thank you bois
Do you think I’m incapable of searching? Do you think anyone inclined to click on a link about C# is incapable of searching? It’s feedback for the author, Seinfeld. 
You should make a project out of it and push to GitHub. 
You missed the entire point of my argument. OP claimed companies should learn to pay for things they use, I was simply giving proof that companies already make billions without paying for software. Yes, its common for companies to fund projects through support/enterprise contracts, but that doesn't mean there aren't thousands or millions of other companies benefiting from it for free. &amp;#x200B; &gt;As for C#, it primarily exists to sell Azure subscriptions and Windows licenses. How is that at all relevant? I hope you are aware that C# now runs on Linux and you don't have to come anywhere close to Azure or Windows. Are you also aware the Node (Including V8), Python, Go are also open source and free? Firefox and Chrome are also free. By OP's logic nothing should be free. &amp;#x200B; &amp;#x200B;
I should, but likely won't as I don't like sharing until I have a least a few peer reviews, and a rewrite or two to know it works for others.
I'll take "People who should not be CS majors" for 500, Alex.
What is A* please? Let me explicate what this means: &gt; What would be the time difference between selecting the next vertex via 'orderby' as opposed to a priority queue? Explication: &lt;Empty on purpose&gt;
No, it isn’t. But PM me a link and I’ll take a look. 
My point was that if you shouldn't use well-funded projects with loads of sponsorship money as an example of why he shouldn't charge for his project.
That’s basically missing the point! Put it on GitHub to get reviews and allow people to contribute fixes and improvements. Once it’s stable you publish a Nuget package. I get so tired of programmers not wanting to share until it’s done and then abandoning the project for reasons. Just put it out there and see what happens! /rant
Feel free to look at any of the thousands of projects on Github if you need more examples: [https://github.com/explore](https://github.com/explore)
I find your argument compelling, and will endeavor to put it up on github, after I add my last piece, which is a idea for controlled data entry from customers to our import tables. After a few bad experiences with loading horrible incorrect data(misspellings, extra spaces, incorrect correlations) that is clearly in the database 1 way, they seems to manipulate 10 different ways by the time i receive it. Now with this I will combine Table structure with html data entry, parameter max lengths and drop downs fed from the db to ensure the data is correctly handed to me without dumb asses fucking it up.
I would recommend using the instance role / lambda role and API access instead of managing SMTP keys. 
You can try posted it here https://codereview.stackexchange.com/ But you need to break down specific blocks of code to be reviewed. 
Why wouldn't it be? int[] numbers = new int[8]; numbers[0] = 8; Arrays are mutable.
Noted with thanks. Then how about the same but the square brackets of new int[ ] is empty? 
Asking because when I did C last time, my friend told me it was not possible creating an empty array, int myArray[ ] = {}; , then assigning the array an element myArray[0] = 1; .
You would need to use the `Add` method of an `int[]` instance, but it's a very slow operation and you're better off using something more suited, such as the generic `List`: List&lt;int&gt; numbers = new List&lt;int&gt;(); numbers.Add(8);
Oh okay noted. So as a good practice I'll just always put the number of items inside the square bracket.
Thanks for the help @Incorrigible1. Much appreciated!
Only if you know definitively how big you want your array to be, otherwise I'd use a `List&lt;T&gt;`
`C` and `C#` are two very different languages.
Okay noted. Does the add method have another parameter where I can put the index of the item in the list which I would want to update? Or does it just take in a single argument and add it to the list?
Ah I see.
This is where I'd direct you to the docs to find a source of truth: https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netframework-4.5.2
Nice thanks
Okay I've got it 
Just try it
Most of what you said is correct, but arrays in c# don't have an `Add` method and if you declare an array with a preset size `int[] numbers = new int[8]`, you have to initialize it with 8 elements (or none at all)
Thank you, it is for an assignment for school. I have already met the requirements and the teacher is pretty light on grading (would be surprised if it is not an "A" as is), but I know it is overly complicated, and poorly written in many places, the functionality (I believe) is all there, but I am wanting to learn to write better then just functional. I am not looking for anyone to do any coding for me, but simply point me in the direction of what methods would be better then what I done. Can I send you a zip of the Visual studios repo file, or is there a better way for me to send it to you?
Thanks for the corrections. I rarely deal with primitive type arrays since there's almost never a use for them.
But seems like it requires certain things to be installed if a Linux machine
So there are no machine dependencies?
Cool, thanks! By the way, have you considered BlueRaja’s implementation? https://github.com/BlueRaja/High-Speed-Priority-Queue-for-C-Sharp
As a general rule, you should not use int[] for C# programming unless: 1. You are in a class and you need to learn about arrays 2. You are working with performance sensitive code that needs the extra speed from raw arrays The rest of the time you should use `List&lt;int&gt;`, `ImmutableArray&lt;int&gt;`, or a class that inherits from `Collection&lt;int&gt;`. P.S. Never user `ImmutableList&lt;int&gt;` unless you know what you're doing because it has horrible performance characteristics in the general case.
What's the purpose of ImmutableList if it has bad performance? Doesn't Tuple cover the same ground-ish?
In very specific circumstances an `ImmutableList` could be faster than an `ImmutableArray`. *** To understand why, first consider the `ImmutableArray`. It is a very simply data structure; just a read-only wrapper around an array. If you try to 'change' it, what happens is you get a brand new array copied from the original with the replaced value(s). Because it is so simple, reading it is almost as fast as reading a raw array. And the copy operation is pretty damn fast because CPUs are good at copying large amounts of information. *** ImmutableList is a complex tree structure. Depending on where you are modifying data -- and again to modify means to make an altered copy -- it can reuse part of the tree from the original collection. In theory this can offer better performance but... 1. The tree structure takes a lot of memory 2. Walking the tree structure is slow, very slow 3. If you really care about performance, modify a normal list and then "freeze" it as an immutable array when you're done. More reading... https://www.infoq.com/articles/For-Each-Performance https://blogs.msdn.microsoft.com/dotnet/2013/06/24/please-welcome-immutablearrayt/ 
But is it plug-n-play in your experience? Like there are no machine dependencies and will work seamlessly in Linux machines?
GitHub? Google Drive?
I would prefer OSS. PanoramicData.SheetMagic does not seem to be.
Let us know when you do. Interesting project.
EPPlus uses the same GDI+ dependency that NPOI uses, so same extra notes for non-Windows machines.
I’m just being a smartass :)
 Reconsider
Linq2db
Any ideas regarding closedXML?
Quick and simple. Beautifully answered.
LINQ is functional. It works in a OO language (C#), but is purely a functional concept.
I would also try \[the Sedgewick priority queue\]([https://algs4.cs.princeton.edu/24pq/IndexMinPQ.java.html](https://algs4.cs.princeton.edu/24pq/IndexMinPQ.java.html)) alongside other options if performance is critical. This was what I found best for my purposes.
Thanks, but we’re writing C#.
Sorry, to be clear, a C# port of that implementation was what I measured best for my application. Sorry I can only share the Java original.
Your code looks like a copy from the Microsoft site. I would check if the CopyFromScreen() parameters are correct. Is there only white space for the rectangle you define?
 PrintDocument printDocument1 = new PrintDocument(); PrintDialog PD = new PrintDialog(); Bitmap memoryImage; private void btnPrint_Click( object sender, EventArgs e ) { printDocument1.PrintPage += new PrintPageEventHandler( printDocument1_PrintPage ); memoryImage = new Bitmap( Form1.Height, Form1.Width ); Form1.DrawToBitmap( memoryImage, Form1.ClientRectangle ); PD.Document = printDocument1; var result = PD.ShowDialog(); if (result == DialogResult.OK) printDocument1.Print(); } private void printDocument1_PrintPage(System.Object sender, System.Drawing.Printing.PrintPageEventArgs e) { e.Graphics.DrawImage(memoryImage, 0, 0); } So I remember trying to get that code sample to work with little to no luck. There are several problems with the original sample, the \`CaptureScreen()\` method is not needed, The \`PrintDialog.Document\` Property is not set, The \`PrintDocument\_PrintPage\` Event isn't being Initialized, and a few other small things. &amp;#x200B; Above is a snippet I quickly threw together based on some semi-functional code I have lying around my script library and past projects. I have not tested it because its 3:45 AM and I should be in bed, so I cannot guarantee it will work. What we are doing here is creating a bitmap with the exact dimensions of the form, and then drawing the form itself to that bitmap via the \`Control.DrawToBitmap()\` Method. When we call the \`Print()\` Method it triggers the \`PrintDocument\_PrintPage()\` Event, we supply the Bitmap and starting points (0,0) to the \`Graphics.DrawImage()\` Method which handles the remainder of printing. &amp;#x200B; Hope this helps.
No, works fine with .net core app on azure web app
Well.... it's **wrong** to write past the end of an array but it will definitely work in C, though your mileage may vary since it's undefined behavior. It will not work in C# because it will fail the bounds check and throw an `IndexOutOfBoundsException`.
Thanks!
&gt; &lt;TextBlock&gt; &gt; &gt; &lt;Run Text="First part"&gt;&lt;/Run&gt; &gt; &gt; &lt;Run Text=" second part" FontWeight="Bold"&gt;&lt;/Run&gt; &gt; &gt; &lt;Run Text=" third part" Foreground="Red"&gt;&lt;/Run&gt; &gt; &gt; &lt;/TextBlock&gt; is it possible to have a check if a string class property is null, then use this, or if string is not null, use this textblock? 
I have implemented a priority queue with a binary heap in C#. You can see it here if interested: https://github.com/abdonkov/DSA/blob/master/DSA/DSA/DataStructures/Queues/MinPriorityQueue.cs
this is exactly how Panic and Recover should be used for Go. And i agree with Hejlsberg, exceptions should propagate as much as possible, while their causes and used resources should be cleaned up using try-finally It is the same way i structure my C# applications most of the time. &amp;#x200B; The thing i was refering to, is people who use try-catch extensively to "prevent the app to blow up" and rather do special cases around every possible exception, very similar to how a junior Java developer would. &amp;#x200B; I prefer the "Application Error ...., press OK / (Retry)" style of Applications. Rather than the "Staus: retrying ... 1/20 `thread.sleep(1000); // maybe works in a few seconds`" Applications
You could try r/learncsharp
bro they did gave me two dll files (Microsoft.Dynamics.GP.eConnect ,Microsoft.Dynamics.GP.eConnect.Serialization ) what is next step bro , all i need to do , to insert a record to microsoft GP.
You can use displaymode. Calendar yearCalendar = new Calendar(); yearCalendar.DisplayMode = CalendarMode.Year; Have a look at this. https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.calendar.displaymode?view=netframework-4.7.2
In the environment I'm using, the calender doesn't have the property "DisplayMode" :( I'm using the MonthCalendar specifically. 
Might get confused with this: https://onloupe.com/
ClosedXML has the same dependency as NPOI when deployed to Linux machines apparently; https://github.com/ClosedXML/ClosedXML/issues/970
I'm working in the same thing and will be implementing rate limiting/throttling to my authentication endpoint. I'm not storing too much in the token either. I saw a JWT with login credential before, I was told it would make a "better experience for the user". Huge security risk right there. I build my own auth mechanism, but I read that its much more secure to use a service like OAuth or Azure AD. I had some special requirements that made that harder for me. I plan on looking back at those 2 services soon. 
I don't think you will get away with having 0 dependencies on Linux. All of them require libgdiplus to handle images since it is a dependency of the Microsoft package "System.Drawing.Common"
Good looking out! I'll mull it over and if it seems like it could cause confusion in the community, I'll definitely change it! Right now it's a result of being snowed in last weekend so nothing's set in concrete yet.
I actually need basic read and write Excel functionality nothing else. 
If you avoid using any of the methods that deal with libgdiplus (so no images) you should be able to get away with not needing that dependency installed. However this is a rather hacky work-around and may also trip you up in the future if you try to use images while forgetting about the requirement. 
This program is free, I understand correctly?
If you have a specific small piece of code, or class, in mind for review then you might be able to take it somewhere like [https://codereview.stackexchange.com/](https://codereview.stackexchange.com/) . 
Cool thank you so much!
Think about why the controller should have to know about the repository. It most likely does not. Couldn't the repository be injected where it will be used?
Cool concept! If they can speed up the .Where() operation I would definitely implement everywhere.
[Looks like you need a different control](https://social.msdn.microsoft.com/Forums/windows/en-US/ce422950-a746-40d8-a54b-023691972ee7/how-do-i-change-the-default-view-of-a-monthcalendar-control?forum=winforms)
&gt; By that logic, was there a certain reason computers weren't designed to process binary in the opposite polarity? Ie, off is now on and on is now off? If you mean representing a 1 or 0 bit value, then it varies by circuit design. The two options for voltage are [active high and active low](https://en.wikipedia.org/wiki/Logic_level#2-level_logic). 
I think the elegant solution would be to use a `TaskCancellationSource` and share it amongst all of the tasks you are awaiting, then you can signal to _all_ tasks that you wish to cancel the operation.
How would I do that exactly? My tasks are calls to an async function within my solution, which calls an async function of an external web service which doesn't accept a CancellationToken as a parameter. I haven't quite wrapped my head around the concept of using a cancellation token so I'm not sure where I would introduce/use it
Oh shit.. Faced *many* and *many* similar problems with my previous employment. All this is giving me tremors of asp.net. Sorry brother, I left it just after 3 months. ASP has gotten out of hands. Anything above 3K lines of code in ASP is a big mess to deal with, let alone make anything over it. Not going back again. I loose, I drop out, I leave, I surrender :'(
It speeds up where but keep in mind it isn't lazy like real Linq is. So if you are composing a lot of things together, you won't get a win. I do provide some workarounds though with WhereSelect, SelectWhere, and WhereAggregate, which combines those operations efficiently. 
&gt; "Create an internal static expression bodied method that receives degrees Fahrenheit as a ref parameter and returns degrees Celsius. There is no input or output in this method." This whole exercise makes no sense like this. It says "no input or output in this method", but before it clearly says that Fahrenheit should be the input, and Celsius the output. Additionally to that it makes absolutely no sense to pass Fahrenheit as a `ref` argument. This is what would make sense: internal static int fToC(int f) =&gt; (f - 32) * (5 / 9); Only that you still need to be aware of integer division, but that's something I leave to you.
Hey buddy, I am the author. Thanks for the feedback! The latest implementation of A* takes a special approach as the closed list and open list share the same List(T) instance. The two lists are separated by an index and the sorting job only applies to the nodes that are located after the index. The reason is that constantly moving nodes from open list (a priority queue) to a close list (a hash set or regular array) is quite costly, nullifying the performance improvement brought by priority queues. On the other hand, having the two lists share the same List(T) instance largely improves the performance in general because you just need to increase the index by one. Here is the source code https://github.com/rvhuang/linq-to-astar/blob/master/src/Heuristic.Linq/Algorithms/AStar.cs#L60 Cheers! 
!RemindMe 1 week
I will be messaging you on [**2019-02-11 17:09:04 UTC**](http://www.wolframalpha.com/input/?i=2019-02-11 17:09:04 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/an2vgd/cancelling_taskwhenall_after_a_certain_amount_of/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/an2vgd/cancelling_taskwhenall_after_a_certain_amount_of/]%0A%0ARemindMe! 1 week) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Spam.
His entire point is that you shouldn't abstract the DbContext away from the app code, and that there's no point in doing so.
The issue is that an expression body must return a value, so your function can't return `void`; it must return `int`. I think the question has been poorly written. I don't know where the "There is no input or output in this method" came from, but if you ignore that one sentence then the rest of the question is easy to follow.
That being the case, how the hell do you actually implement the code he's showing here as an example of a way to avoid that abstraction? I see Program.cs but I don't understand what's happening there.
Have you checked out StyleCopAnalyzer? Its more of an enforcer than a beautifier. You can even write your own rules if you'd like. Also, as the years have gone by Visual Studio its self has gotten better about helping you clean up code.
&gt; Anything above 3K lines of code in ASP is a big mess to deal with, let alone make anything over it. Are you talking per class/file or per application? Coz I can agree on the class/file basis... One of the apps I'm maintaining is an MVC project we inherited that has a number of classes in the data layer with 3-4k lines of code each.
To fulfill the ref and out requirements, do I have to create another method? Is there any way to include those?
It works fine like this for me in Visual Studio 2017: internal static void FToC(ref float f, out float c) =&gt; c = (f - 32f) * (5f / 9f); If it's an IDE specific issue, maybe a subreddit/forum for that IDE will have an answer for you.
Not exactly, sounds like you want a Converter for that
Thanks, I corrected it, and I think the question doesn't want any user input or output. It was weird when I read it too. 
The requirements of using ref and out do not make any sense at all for a method like this. It's either a misunderstanding, or completely bollocks.
Okay, I see, will test it on that IDE. Thanks!
&gt;The issue is that an expression body must return a value Uhh.. no. Where did you get that from?
Good to know, Thanks!
This is plaintext responses per second. I wonder what the comparative stats are for any content that has to be actively generated, e.g. ASP.NET or PHP?
 One of my first projects in C# (and other languages, it's a decent learning/sandbox project type IMO) was a chat client/bot. I used AppDomains to implement Plugins (MEF wasn't a thing yet). Well, now that Core is here and C# has come quite a way, it is due for a refresh sans-AppDomains. Time to get on it !
Did u even read the link? No.
Instead of making your life harder by adopting other people's patterns, why don't you try keeping it extremely simple and easy to understand for everyone? How about this approach? &amp;#x200B; Structure your project like this. * {ProjectName}.Models * DbContext.cs along with the Database Table classes go here. * {ProjectName}.ViewModels * C# classes that are used in your [ASP.NET](https://ASP.NET) MVC Razor View (.cshtml) that are **\*specifically\*** designed to suit your User Interface. * {ProjectName}.Services * {TableNameAbc}Repository.cs * {TableNameDef}Repository.cs * {Something}Service.cs * {ProjectName}.WebApp * This is obviously your mvc / webapi project. &amp;#x200B; From top-to-bottom is the dependency chain. * **ViewModels** project **MAY NOT** need to add reference to the **Models** project. * **Services** project needs dependency on both **Models** and **ViewModels** project. * **WebApp** project needs dependency on all the above. &amp;#x200B; &amp;#x200B; What can you do with the structure above? * **{TableNameAbc}Repository.cs** class deals with database operations for the **Abc** table. * **{Something}Service.cs** depends on *several* Repository classes to retrieve/update data. Its methods return **ViewModel** objects as output **by combining** several different **Model** objects depending your business needs and requirements for a particular implementation. &amp;#x200B; **Technical Justifications** * Repository pattern is still used to be able to unit test your **Service** classes. * ViewModel classes depends on how a particular Razor View needs to be validated. * **ViewModel** classes are what defines **YOUR Domain** and your business needs. * It defines **CALCULATED properties** that are based on the properties from your **Model** classes. (e.g., `public bool IsCustomerSectionVisible { get; set; }` ) * **ViewModel** class properties are decorated with **ComponentModel Validation Attributes for Model Binding/Validation**. * This could mean you will have a **ViewModel** class only intended for UI rendering AND a **ViewModel** class only intended for use as HTTP POST Model Binding and Validation. * **Is it more work? Yes.** You end up writing a bit more infrastructure code. * It is easy to understand and clearly defines what the endpoint accepts. &amp;#x200B; Is it simple and easy to understand? YES It doesn't need many external dependencies. YES It is ***"copy-and-paste proof"*** as the coding convention carries over, and still easy to understand for everyone on the team. YES &amp;#x200B; &amp;#x200B; In summary, you cannot avoid writing **TEDIOUS BORING plumbing** code. * You hide it behind non-understandable ***magic*** by relying on 3rd-party libraries. * **(or)** you write the tedious boring plumbing code yourself, and maintain it. I am one of those who likes to know WHAT EXACTLY is executing in my application, and chose the latter approach in an **easy-to-follow convention** for the team.
aspcore memory usage (json): "memory usage": { "used": **10204778496.0**, "cach": 8632307712.0, "free": 14207938560.0, "buff": 0.0 }, &amp;#x200B; [https://tfb-status.techempower.com/unzip/results.2019-02-04-02-28-03-771.zip/results/20190201044502/aspcore/json/stats.txt.json](https://tfb-status.techempower.com/unzip/results.2019-02-04-02-28-03-771.zip/results/20190201044502/aspcore/json/stats.txt.json) &amp;#x200B; Go memory usage (json) "memory usage": { "used": **1421586432.0**, "cach": 2777034752.0, "free": 28846403584.0, "buff": 0.0 }, [https://tfb-status.techempower.com/unzip/results.2019-02-04-02-28-03-771.zip/results/20190201044502/go/json/stats.txt.json](https://tfb-status.techempower.com/unzip/results.2019-02-04-02-28-03-771.zip/results/20190201044502/go/json/stats.txt.json) &amp;#x200B; memory usage is more than 7 times!
Really? I don't know where I got that. Somehow I was just assuming it was a limitation and didn't question it. /shrug
On the left, under Compiler, switch to Roslyn 2.0. Apparently the 4.7.2 compiler option doesn't like the expression-bodied member syntax.
Try btnVerder.Visible = false; in your Form1() Initialization Method. You can also change it by navigating to the Properties menu on the right side of VS (Under the Solution Explorer where you find all the classes/pages/folders in your project). You can also get there by right clicking on the control and pressing "properties" here should be access to all the properties necessary for your controls (Colors, Visibility, Alignments ect.)
I was looking through my code and... /// &lt;summary&gt; /// A version of Task.WhenAll that can be canceled. /// &lt;/summary&gt; /// &lt;param name="tasks"&gt;The tasks to wait for.&lt;/param&gt; /// &lt;param name="cancellationToken"&gt;The cancellation token.&lt;/param&gt; public static async Task WhenAll(this IEnumerable&lt;Task&gt; tasks, CancellationToken cancellationToken) { if (tasks == null) throw new ArgumentNullException(nameof(tasks), $"{nameof(tasks)} is null."); await Task.WhenAny(Task.WhenAll(tasks), cancellationToken.AsTask()).ConfigureAwait(false); cancellationToken.ThrowIfCancellationRequested(); } https://github.com/docevaad/Anchor/blob/master/Tortuga.Anchor/Tortuga.Anchor.source/shared/TaskUtilities.cs Yep, basically the same thing that you're doing. Except since I am using a cancellation token, I can (potentially) pass that token to other tasks.
Thanks. That worked for this line of code but is giving many errors for the rest of the code that I have not included in this post. 
Who wrote the wrapper for the web service that you actually call? Ultimately all web service requests call HttpClient, which does accept a cancellation token, so you should be able to incorporate one by altering the wrapper. 
May I suggest you take a look at the [Zamagon Demo](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon) that is part of [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient). The API solution demonstrates how to construct a highly scalable and testable service layer using EF. Included are a desktop (WPF) application and a web app (Razor) that consume said API. Please feel free to ask questions. 
Thanks but Visible doesn't seem to work. And yes I know I can change it in properties, but I this is a task I have for school, I have to make the buttons go invisible as the window is loaded. It's also a WPF file I'm working on if that helps. I get this error trying with Visible : CS1061 'Button' does not contain a definition for 'visible' and no accessible extension method 'visible' accepting a first argument of type 'Button' could be found (are you missing a using directive or an assembly reference?) &amp;#x200B; With my previous attempts I get these errors : \-CS0200 Property or indexer 'UIElement.IsVisible' cannot be assigned to -- it is read only &amp;#x200B; \-CS0029 Cannot implicitly convert type 'bool' to 'System.Windows.Visibility' &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
You are on the right track but ViewModels are presentation objects an belong in the presentation layer. Models - a.k.a Entities a.k.a DTOs are belong in their own layer which is usually bottommost.
For future reference: https://sharplab.io/#v2:CYLg1APgAgDABFAjAbgLACgoGYECY4DCGA3hnOQjlACxwBiA9gwBQCUcxcAvmRb+dgS0AQgEMATmzgBeAHz0mbNOi5A= :-)
Our servers span from 32 core to 64 in our data centers per server... And even that is not the best money can buy. Memory is rarely an issue (unless you have a leak), since machines span north of 64GB easily. If I take in consideration easy of use, tooling, language and performance - aspnet core is not a bad choice at all.
Wow, thanks for the link. Will definitely try it out!
Use an array or dictionary (depending on the ratio of nulls to strings) to store the old index to new index mapping. Then you can cheaply look up the new index while looping through the int list. For efficiency, I would also copy the strings and ints to the next free slot of the lists and then do a final `RemoveRange` at the end, instead of using `RemoveAt`. `RemoveAt` will have to copy each item after the removed item one slot further back, which is really wasteful if you're doing it repeatedly for every removed item among thousands.
That seems to be something C/C++ related instead of something specifically C#. I assume you are trying to build the mono compiler?
If ViewModels are in the presentation layer, then are you saying that there is a set of services that translate Models to ViewModels that also lives in the presentation layer? Otherwise, how do you get from DB to Presentation? I understand the sentiment, but I feel like the ViewModels have to live in the service layer for the translation. Are you maybe suggesting that there should be another set of models in the service layer to get from data to view? I can kind of see that, but it really hammers home the amount of plumbing to do including, in my case, more Automapping between nearly identical classes. I've always been apprehensive of making so many go-between classes.
The key part that I don't think anyone has mentioned is using the [CancelAfter](https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelafter?view=netframework-4.7.2) function on the cancel token to timeout the other tasks. In the example below longTask will return after 5 seconds due to the CancelAfter that's been scheduled on the cancel token. `var cts = new CancellationTokenSource();` `cts.CancelAfter(5000);` `var longTask =` [`Task.Run`](https://Task.Run)`(() =&gt; { while (!cts.IsCancellationRequested) { cts.Token.WaitHandle.WaitOne(1000); } }, cts.Token);` `Task.WaitAll(longTask);` `Console.WriteLine("done");`
I’m of the opinion that the service later should deal with DTOs and should never touch view models. Tying the service layer to view models ties the service layer to presentation. Your presentation layer should be able to construct whatever view models it needs from the output of the service layer.
Of the three, I've only used R#. I like it, but I also agree that vanilla VS has gotten a lot better since I started using R#, years ago. Checking out Uncrustify, it looks like a command-line tool, which I would not care for. Philosophically, I'm more of the opinion that a tool should provide guidance, but leave it to the developer to actually follow style conventions -- sort of "the tool that governs least governs best" if you will. The reason is simply that I want the "fixed" code to look and feel natural to the developer and for the team to actually buy into the conventions, rather than just have them pushed. So, ReSharper's Word-like, real-time squiggles, coupled with the fact that it will actually show style violations as "errors"/"warnings"/"info" is pretty much perfect, IMO.
*Hey just noticed..* it's your **4th Cakeday** outofopinions! ^(hug)
If you want I would gladly look into your code. I'm no expert, but maybe I could give you some programming tips!
&gt; are you saying that there is a set of services that translate Models to ViewModels I sometimes make what I call presentation classes that are roughly denormalized DTO's. It really depends on the object - how often it used, etc. I typically inject my service into my ViewModel and the VM constructs itself. Also I usually don't use a service to translate from one object to another. If it was complex I might however. Usually I can get by with making a constructor on one class that accepts an instance of another and a To_DTO method to go the other way.
&gt; Apparently the 4.7.2 compiler option doesn't like the expression-bodied member syntax. It's very likely a very old Mono version, not .NET 4.7.2. The dotnetfiddle website is not very well maintained.
One other point I will add your (well written) post is that DbContext belongs in the Services project. In a perfect world it should be marked as internal i.e. internal class MyContext: DbContext Sometimes however that is not possible. In any case you definitely never want to instantiate a DbContext and use it directly outside of your service layer. In other worlds all reads/writes to your DbContext should go through methods on your services.
To be fair, if it was just posted there's a fair chance it'd be harshly, if non-constructively, criticised.
You’re not wrong.
It’s very difficult to compare values. Make spaces or gigabytes or something.
&gt; Your presentation layer should be able to construct whatever view models it needs from the output of the service layer. How would you handle the following: You have a ViewModel that is a mash-up plus logic of 2 separate DTOs. What is the return type of the service that fetches the 2 DTOs, combines them into 1 object and then runs some business logic for some properties?
So, using the framework from above, you'd inject a Dto1Repo, Dto2Repo, and an IDoSomethingService into the ViewModel so that it can construct itself? Wouldn't you want to abstract that out to a separate service that takes in the repos and spits out a ViewModel?
Well, I wouldn’t have business logic on a view model. That is either in a method of the service or on a DTO. I would either: 1. Have the view model accept both DTOs in a constructor and construct itself. 2. Follow the initialization pattern and have the view model be it’s own factory by accepting the service and returning an instance of itself. If my view model needs to trigger business logic than the view model or whatever is handling it should be able to get the requisite DTOs and call the business logic or construct the input required to trigger that business logic against the service. I don’t know if this is the best way to do it but it’s just the way that I do it since I believe view models are presentation layer.
I'm wondering now does Microsoft now recommend Kestrel as a web facing server or still to use it with a *reverse proxy server?*
So I would probably use a Dictionary here. I know you're using vectors so you might have to write something to create a key from the vector3 (I would probably take x, y and z and concatenate into a string). So if you do that, my approach is to do the following. Assume we have **startingStrings =** \[ null, A, B, null, C, null \] **startingInts =** \[ 0, 0, 0, 1, 4, 2, 1\] Use these to build a list: **stringValues =** \[A,C,B,A\] //from 1421 Then drop all the nulls from startingString by copying values to a newStrings List (and create indexDict as you go) **newStrings =** \[A, B, C\] **indexDict** = \[{A, 0}, {B, 1}, {C, 2}\] Then finally use stringValues and indexDict to build a new list of ints **newInts** = \[0,2,1,0\] This is pretty efficient. We're only doing adds into Lists (lists are pretty good at append operations but removing elements from the middle is costly - we avoid that by copying to newStrings instead of using RemoveAt) and we're only doing lookups in a Dictionary (dictionaries are great at lookups, they can instantly retrieve any value by the key). It seems like there are quite a few loops going on below but you still end up with O(N) efficiency. &amp;#x200B; **Pseudo-code** var stringValues= new List&lt;string&gt;(); foreach (int in startingInts) { if (int != 0) indexDict.Add(startingStrings\[int\], -1); // Set default to -1, will be overwritten soon stringValues.Add(startingStrings\[int\]); } var newStrings = new List&lt;string&gt;(); var indexDict = new Dictionary&lt;string, int&gt;(); foreach (string in startingStrings) { if (string != null) indexDict.Add(string, newStrings.Count) newStrings.Add(string); } &amp;#x200B; var newInts = new List&lt;int&gt;(); foreach (string in stringValues) { newInts.Add(indexDict\[string\]) }
You can use it as a web facing server and there is guidance on that https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2#when-to-use-kestrel-with-a-reverse-proxy
&gt; aspcore: 10_204_778_496.0 &gt; Go: 1_421_586_432.0
 class SomeViewModel { private IServices serviceClient; public SomeViewModel(IServices _serviceClient) { serviceClient = _serviceClient; } public void Initialize() { Order order = serviceClient(serviceManifest =&gt; serviceManifest.OrdersService.GetOrder(id); Customer customer = serviceClient(serviceManifest =&gt; serviceManifest.CustomersService.GetCustomer(order.CustomerID); SalesRep salesRep = serviceClient(serviceManifest =&gt; serviceManifest.SalesResService.GetSalesRe(customer.SalesRepID); // Populate descriptive properties on the VM using objects retrieved above: this.CustomerName = customer.Name; // etc. } } The thing that makes code above super easy is injecting a Service Manifest which is basically an object that holds an instance of each of your services (see facade pattern). No it is not a service locater in any form or fashion. See [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) for additional info and [Zamagon Demo](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon) for working examples. 
&gt; Well, I wouldn’t have business logic on a view model. Right - belongs in the service layer. Please see my comment above.
The where is contextual to the underlying data structures used. So if you are using the wrong structure for the given task then you will still get bad performance.
We used Loupe monitoring on a previous project and I was very confused for a second 
Since the requirement is to wait for all the Tasks and cancel if they are not finished by x amount of time and you can't pass in a CancellationToken, consider using Task.WaitAll with the delay. The WhenAny and WhenAll calls can be eliminated too. https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.waitall?view=netframework-4.7.2#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Int32_ 
In your design: you can avoid having two separate copy-paste ViewModel classes simply by switching from Attribute Validation to FluentValidation. 
Generally no. A ViewModel is typically last in line before getting pushed to the screen. To be clear - Services in the context being discussed here refer to repository/database - you don't want your service layer to know presentation objects. Think about cases where you have a desktop app and a web app both consuming the same API. However it is entirely possible you could have a service to translate DTO's to presentation objects and I'm sure in very large systems those types of services might be useful.
This is interesting, thanks for this I'll process it properly tomorrow :)
Thanks for the advice, I'll look into your suggestions
So how would you create an n-tier application this way?
I agree, equipment has never been a problem at my shop. Only if you have memory leaks and out server admins will let you know before it even becomes a problem.
Just use the DbContext object where you would otherwise have used a repository object
I took a look at AdaptiveClient and the Demo, but I'm not sure that it answers my question. In your example, you've separated the calls into 3 separate db calls. In my projects, I almost never have a 1 to 1 mapping of data to view model and making multiple db calls is usually not an option for performance reasons. Using EntityFramework, I can get all, and only, the data back that I need for my view. The problem is that unless I let my service layer (when I use service layer, I mean the business layer between data and UI) see my ViewModels, in this case, I have to make an intermediate object in-between. For example: Data Layer (DTOs) -&gt; Business (Mash-up) -&gt; Presentation (ViewModel) Customer + Order -&gt; OrderInformation -&gt; OrderInformationViewModel If we didn't have the business layer, then we could leave out the mash-up, but any logic done on the ViewModel would have to be done in the ViewModel, which is not the correct place for it. If we do have a business layer, then there needs to be an intermediate object between the Data and the ViewModel. Do you see where I'm getting at? What am I missing here?
[Crafting a TimeOutAfter method](https://blogs.msdn.microsoft.com/pfxteam/2011/11/10/crafting-a-task-timeoutafter-method/) This was written about on MSDN blog years ago with a neat extension method solution from Stephen Toub. Neat-ish anyway - you still need to wrap the call in a Try Catch block and when you catch the TimeoutException, you do whatever is needed to dispose of the resources that you've called. &amp;#x200B; `public static async Task TimeoutAfter(this Task task, int millisecondsTimeout)` `{` `if (task == await Task.WhenAny(task, Task.Delay(millisecondsTimeout)))` `await task;` `else` `throw new TimeoutException();` `}` &amp;#x200B;
While interesting, comparing memory usage on an app that runs on a server is not too useful as a metric for efficiency. A garbage collector might run less, it might not return those pages to the OS so it doesn't need to perform the slow process of re-acquiring them, etc. -- these optimizations are *very* common.
That doesn't surprise me after learning how Go and ASP.NET Core's GC approaches differ. Go has a lower latency GC designed to collect early and more often. ASP.NET Core has a greedy memory management which will only full collect (gen 2) when it thinks it needs to and will not let go of process memory quickly (sometimes even looking like it is leaking memory as the process memory allocated slowly climbs upwards). I wish ASP.NET Core had a way to constrain maximum memory usage.
Or you know, symbols that were designed for this sort of thing? 10,204,778,496.0 1,421,586,432.0 
I'm shocked that Kestrel outperformed nginx. Why is that? I would expect something written in C to far outperform C#
&gt; I took a look at AdaptiveClient and the Demo, but I'm not sure that it answers my question. You have raised a couple of different topics here. They are interrelated so isolating them may be helpful: 1.) How do I construct the data layer See AdaptiveClient 2.) Should I return ViewModels from my services No. Please read [this article on ViewModels](http://www.samwheat.com/Post/The-function-of-ViewModels-in-MVC-web-development) &gt; in this case, I have to make an intermediate object in-between. Models are classes that match the structure of tables on your database. You need these objects whether your service layer constructs view models or not. A "Model" object a.k.a Entity a.k.a DTO is *not the same* as a ViewModel. ViewModels are often composed of multiple Models/Entites/DTOs. &gt; Customer + Order -&gt; OrderInformation -&gt; OrderInformationViewModel You don't *always* need to construct an intermediate object. You can make multiple calls as I demonstrated AND also make methods like this on your services: public Order GetOrderGraph(int orderID) { return db.Orders.Where(x =&gt; x.ID == orderID).Include(x =&gt; x.Customer).ThenInclude(x =&gt; x.SalesRep).ThenInclude(x =&gt; x.LineItems); } &gt; In your example, you've separated the calls into 3 separate db calls. See also my edit about Order having Customer property. &gt; In my projects, I almost never have a 1 to 1 mapping of data to view model Right, that is pretty much normal. Still - you do not want to return ViewModels objects from your service layer. Think of this way: What if you are writing an application that will be run on mobile, desktop, and Web. This is very common with in-house corporate apps. You will want to write a single data API and you will want the presentation layer of all three of your applications to be able to access that API. For this reason your API should return Model objects which are basically building blocks and let your presentation layers build what they need to render a page/screen (html/xaml/etc). &gt; If we didn't have the business layer, then we could leave out the mash-up, I don't understand this. &gt; but any logic done on the ViewModel would have to be done in the ViewModel, which is not the correct place for it. Your data layer should give return Models which are basically elements that higher levels can piece together as they choose. Doing the mash up is a pain but it is the correct approach, and doing it in the VM is the correct place. In the article I cited above I show how you can create a `BaseViewModel&lt;T&gt;` that will save you some time. I write a lot of WPF and this pattern has proven itself quite well.
9.9gb 1.3gb Roughly
In the GitHub repository? https://github.com/mono/mono/find/master - then type "jit.h".
I thought I solved the problem but found a bug with this solution. The event CollectionChanged does not get fired by the observable collection when a row is just modified. How can I resolve this?
Harshly? Hardly! I haven't seen it yet but I'm sure it's beautifully commented, has perfect formatting, uses all the right algorithms in all the right places, and predicts requirements correctly before the CEO thought of them in a drunken stupor!
Common misconception. You're generally find Java and dotNet to preform similarly to C in large scale applications. They are after all heavily optimized for enterprise uses.
No, I'm trying to embed mono, like this: [https://www.mono-project.com/docs/advanced/embedding/](https://www.mono-project.com/docs/advanced/embedding/)
Is it 3 different header files I'm including or just one? It's first time I see an include statement like that which uses slashes. Oh wait, is that simply the path to where jit.h should be located? So I need to import the entire mono project into my vs solution instead of just the header file?
I think the issue is that the collection is not actually changing, an **item** in the collection is changing. So you’ll need to add logic to account for that. If each T of your ObservableCollection&lt;T&gt; implements INotifyPropertyChanged, you could add a handler method that raises ModelChanged on each PropertyChanged event. foreach(var item in ObservableCollection&lt;T&gt;) { item.PropertyChanged += ()=&gt;{ ModelChanged?.Invoke(this, new EventArgs); }; }
Well the items are automatically created by Entity Framework. I think I can't implement a property changed interface properly on all the properties that are automatically created by the Entity Framework.
If your looking at performance issues, another thing to look at is how you are accessing the collection. Going through `IEnumerable&lt;T&gt;` is slower, sometimes a lot slower, than using `List&lt;T&gt;`. https://www.infoq.com/articles/For-Each-Performance 
I understand that is true in generic cases, but considering nginx is one of the most widely used web servers I would assume it would be heavily optimized as well (especially since its specifically marketed as a "high performance" web server).
You have to raise the the event within the setter of each property 
Those properties are auto created code by the Entity Framework. I should not modify those...
At this point, I believe we may be talking past each other. Don't get me wrong, I really do appreciate the conversation, but I feel like we've gone into some weird territory because you're beginning to explain concepts that go way past my original question. I understand all of the concepts that you're presenting in this discussion, except that I feel that you keep simplifying the transfer of data between the database and the viewmodel, causing it to become multiple calls or simple graph queries. In your first example, you make 2 database calls, which I'm going to reject in this discussion since I want a single call: Order order = serviceClient(serviceManifest =&gt; serviceManifest.OrdersService.GetOrder(orderID); Customer customer = serviceClient(serviceManifest =&gt; serviceManifest.CustomersService.GetCustomer(order.CustomerID); So instead we go to your next example, where you make a call that returns an Order, but since we're using deferred execution here, we can gobble up anything that is part of the graph directly into the viewmodel. On the surface, this makes sense, but I feel like it falls apart when you have any sort of logic involved. (for reference): return db.Orders.Where(x =&gt; x.ID == orderID).Include(x =&gt; x.Customer).ThenInclude(x =&gt; x.SalesRep).ThenInclude(x =&gt; x.LineItems); Let me try a different approach to the question. If I go with your methodology, then would you say a viewmodel might be something like this?: class SomeViewModel { private IServices serviceClient; public DateTime OrderDate { get; set; } //From Order public int CustomerState { get; set; } //From Order.Customer.State public decimal Total { get; set; } //From Order public decimal Tax { get; set; } //From tax service public SomeViewModel(IServices _serviceClient) { serviceClient = _serviceClient; } public void Initialize(int orderID) { serviceClient.Call(serviceManifest =&gt; { var anonymousMashup = serviceManifest.OrdersService .GetOrder(orderID) .Select(order =&gt; new { order.DateOrdered, order.Customer.State, Total = order.LineItems.Select(li =&gt; li.Amount).Sum() }); this.OrderDate = anonymousMashup.DateOrdered; this.CustomerState = anonymousMashup.State; this.Total = anonymousMashup.Total; this.Tax = serviceManifest.TaxService.CalculateTax(this.CustomerState, this.Total); }); } } If so, then I still have a problem with the logic of how to get the data being here instead of inside of a testable, reusable service call. If I can wrap this: var anonymousMashup = serviceManifest.OrdersService .GetOrder(orderID) .Select(order =&gt; new { order.DateOrdered, order.Customer.State, Total = order.LineItems.Select(li =&gt; li.Amount).Sum() }); into a separate call (for example OrdersService.GetOrderDateWithTax(orderId)), then I can test and re-use the logic, except that it doesn't have a proper return type, which is where my original mashup question stems from. Sorry for the long post, but I hope you'll make another attempt at it.
Humm this is 120am my time could you override them in your partial class ?
In C# it's `_`
Yes, that also good option to use it. Thanks for sharing your thought.
&gt; They also used the fast machine money can buy, with 14 (28 hyperthreaded) cores The four CEC Power9 E980 would like a word with you (192 cores/1536 threads, costs more than a house)
And you shouldn’t. Keep them as POCO classes in your Model. INotifyPropertyChanged should be implemented in your ViewModel.
Thanks but after seeing the benefits of "black" for Python code I do not want to go back. You just "blacken" the code and there are no discussions about formatting at all. https://black.readthedocs.io/en/stable/
Thanks but I need a tool that works on the CLI and is cross platform (dotnet core) so I can use it on Linux as well.
So, in the context of an MVC app, just throw in a `using (var db = new ApplicationDbContext())` into my controllers then? Or create a single ApplicationDbContext instance per controller? Personally I'm okay with this on some level as it *is* the easiest way to go but it just seems messy to me though I suppose you could argue that have 3000 lines of code to create and use repos, services, domains and whatever else can be involved in this discussion is far messier.
Depends on your definition of proficient. Like a couple days is enough to be useful (modify existing code). Maybe years if you want to know all the ins and outs of the language...but I don't think many people practically needs that. I don't use all the functionality of the language in order to KISS. 1.5 months is plenty of time to be a productive programmer.
I can't say cause I don't have a pot of experience but if you already used OOP (java, C++) then it should be really easy. Took me a couple days to get to the point of basic commandline programs and iirc there's a GUI creator that lets you build it like a powerpoint rather than in a text editor
Yeah, but technically "c = (f - 32f) \* (5f / 9f)" doesn't evaluate to void. That expression results in an int. I think expression-bodied statements are freaking stupid. Syntactical sugar that is prone to be buggy. Besides saving keystrokes and supposedly looking prettier...is there any reason for them?
You need to map your poco models to view models and implement your logic in them. Generally you don't directly use your models.
I second d other commenters, you are lucky that it is C#, which is very easy to transition to. When the same thing happen to me, I started by reading the language spec, but that was probably a waste of time. I'd recommend picking an ambitious but doable project and then completing it end to end, you'll learn a lot this way. If you want to do some reading, the one thing I recommend is to read on LINQ. Most basic tutorials don't cover it until later and it is a cornerstone of writing idiomatic C#.
Generally you would inject the dbcontext into a service and then inject that into your controller. This way your actions simply pass the input to the service and return the output. This means they don't handle any of the logic.
Here's a Blazor (a.k.a. Razor Components) article I wrote in September 2018, for internal consumption where I work. It's based on the Microsoft Blazor video linked at the bottom of this post. I don't know if Microsoft has changed any of their plans since then. &gt;Microsoft will include the server-side capabilities of Blazor in ASP.NET Core 3.0, and will name it “Razor Components”. Microsoft has indicated this will happen in 2019. Microsoft is optimistic ASP.NET Core will incorporate the client-side capabilities of Blazor at a later date, but that’s not guaranteed yet. &gt; &gt;Blazor’s purpose is to offer a .NET alternative to JavaScript frameworks like Angular, Aurelia, React, and Vue. Here's a quote about Blazor from Dan Roth, Program Manager ASP.NET: &gt; &gt;"We are taking inspiration from all the popular JS frameworks (React, Angular, Vue, Aurelia, etc), while also making the framework idiomatic .NET (not just a straight port of an existing thing)." &gt; &gt;Blazor can run client-side or server-side depending on how it’s configured. It only requires changing two words in your configuration to switch between the client-side and server-side programming models. Your Blazor codebase remains the same for both programming models. &gt; &gt;When Blazor runs client-side, that means it’s running in a browser via Web Assembly. Running Blazor client-side is a use case where you’ll need to wrap your remote data access layer in a web API. &gt; &gt;When Blazor is configured to run server-side, its performance approximates the SPA feel of client-side Blazor, even though it’s running entirely on the server. It’s able to have the feel of a SPA because it sends only “DOM diffs” to the browser over a SignalR connection. Also, when running server-side, the initial page load is much faster than when running client-side because the .NET runtime, framework, and app code aren’t downloaded to the browser. So unless one needs to run the app disconnected from the network, developers might be content to run Blazor sever-side. &gt; &gt;This one hour .NET Conf 2018 video will explain everything. It assumes you’ve never heard of Blazor. &gt; &gt;[https://www.youtube.com/watch?v=61qmX5eAPwI](https://www.youtube.com/watch?v=61qmX5eAPwI) &amp;#x200B;
Without any background in C++, or JAVA... do you still think it’s a reasonably simple language to pick up?
No, that's a horrible idea. First of all, the view-model is supposed to be a model of the view's state, not of the data. Secondly, if anything alters a value in the POCO then your so-called view model won't know that it needs to raise a property-changed notification. So it will be as brittle as fuck. 
&gt; Well the items are automatically created by Entity Framework. Exactly how are you generating your EF entities? There are many ways to do it and some are better about giving you property changed support than others.
&gt; Since the observable collection is provided by the Entity Framework I also see no chance to inherit from the observable collection. You can always copy the output into a separate collection. If you want an ObservableCollection that includes an event when a item's property changes you can use `ObservableCollectionExtended` from Tortuga.Anchor. https://www.nuget.org/packages/Tortuga.Anchor
Here's some current doc for "Razor Components" from Microsoft: [https://docs.microsoft.com/en-us/aspnet/core/razor-components/?view=aspnetcore-3.0](https://docs.microsoft.com/en-us/aspnet/core/razor-components/?view=aspnetcore-3.0)
Edit 2019-02-05: Have no experience with github, so please feel free to mock that as well: [https://github.com/UnquenchablyEnragedSnail/PublicRidicule](https://github.com/UnquenchablyEnragedSnail/PublicRidicule)
&gt;Edit 2019-02-05: &gt; &gt;Have no experience with github, so please feel free to mock that as well: https://github.com/UnquenchablyEnragedSnail/PublicRidicule &amp;#x200B;
 Edit 2019-02-05: Have no experience with github, so please feel free to mock that as well: [https://github.com/UnquenchablyEnragedSnail/PublicRidicule](https://github.com/UnquenchablyEnragedSnail/PublicRidicule)
&gt; I wish ASP.NET Core had a way to constrain maximum memory usage or a more eager collection strategy, but I'm OK with it if the trade off is much more throughput. It's being discussed, e.g. https://github.com/dotnet/coreclr/issues/18619 and https://github.com/dotnet/coreclr/issues/18501 (also see https://github.com/dotnet/coreclr/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+label%3Aarea-GC+)
What languages do you already know?
This is definitely C/C++ related. First compile mono from scratch, until you do that you're dead in the water.
It's not uncommon for view models to implement INotifyPropertyChanged, especially in WPF. 
I think it's more about what you want to accomplish. A reverse proxy can give a lot of other benefits, so I don't think they will ever recommend one or the other. If your just running a single app for a simple thing that is never going to be that heavily used, then sure, you can skip the reverse proxy.
That's not x86.
Im often surprised how bad the advice is on this forum. I'm starting to doubt there's any real programmers here. To be a programmer you need to learn the fundamentals, variables, loops, collections, object oriented programming and all that goes with it. If you already know all that, then yes 1.5 months is realistic enough. If you only did basic front end programming and fx don't know all the basic stuff including object oriented programming, no 1.5 months is not realistic. If you know how to program already, loop over collections, work with json, understand object oriented programming then you have a realistic shot.
Although it's always nice to have less memory usage, I'll take high memory over programming in Go for more complex apps any day. Go is still awesome for smaller applications though. I just couldn't get over how reliant Go is on third party libraries for basic things like http routing with parameters. Wouldn't want to base anything mission critical on it.
The resounding question is what do you know and how long 
this.
Take the C++ class on Codecademy. YouTube concepts that you don’t get immediately. Start running through the project code you are going to be on. Purposely break the code and fix it. If you can’t fix it, source control. You can learn anything. And you don’t have to be fluent in C# to start just contribute.
Don't use EF models directly as view models. It'll cause you nothing but pain.
In WPF you need ``btnVerder.Visibility = Visibility.Hidden``
This is why I laugh at people who think Microsoft's use and interest in open source are part of some new "Embrace, Extend, Extinguish" attack on open source. When they were actually in that line of thinking you'd ask questions like this and the response would be, "Yeah, maybe the dev team will work on that." Now it's usually, "Oh, here's the issue discussion for that and you can add to it or help resolve it." If Microsoft is still hell bent on destroying open source, they're doing a fucking terrible job of it by open sourcing .Net development with MIT and Apache licensure. 🤣
I work with two people who were exclusively front end devs for 6+ years and are now 90% c#, their transition wasn't painful. 6 weeks should be plenty of time if you're working on it a few hours a day. You also say you're contributing to a c# codebase, so there \*should\* be lots of examples of good code and bad code for you to work against. Ask your peers for their favorite/best example of something, they should be there for you. Also join the peer review / pull requests for their changes. It's very unlikely for you to be sent off to write something entirely new on your own. Your javascript &amp; AJAX (or whatever kids are using these days) will take you far, because you'll start to see the parallels and differences in how C# is built. This should go without saying, but your company should be providing you with a Professional license of Visual Studio IDE, and that will be a huge time saver in the beginning. Get to know the IDE, use the hell out of the cursor menu, things like 'Peek Definition' and 'Go to Implementation'. And good luck!
My solution for cases like that is almost always to have a non-generic base class/interface (which the generic ones inherit/implement). It makes everything much easier to handle. Obviously you'd lose compile-time type safety and would have to check that the ports are compatible at runtime, but at least in my cases it's always been the better solution.
Knowing your language set really would help. Did you end up doing any powershell, python, ruby, Angular.js, [asp.net](https://asp.net) markup or code-behinds, AJAX, etc. ?
Yes, I was about to write as edit to the question that type-erasure (non-generic base) would be the last resort. That I know how to do, but there's no brain-teaser / food for thought there.
Fair enough!
Replying to the wrong one here. But agree no matter what your first is your second language is much easier and after you got a few under your belt you can be pretty confident you can learn what is required while working and just jump in.
Can you link to a fiddle that exhibits the issue?
Not easily, unfortunately. Here's a piece illustrating the effect of what I want to achieve, but it won't compile at all public interface IOutputPort&lt;T&gt; : IEnqueuer&lt;T&gt; where T : GraphMessage { void Close(); void Connect&lt;U&gt;(IEnqueuer&lt;U&gt; port) where T : U; } 
So, `IInputPort&lt;T&gt;` currently needs for `T` to be invariant, because it is both accepted and returned from methods on the interface. `IOutputPort&lt;T&gt;` has the same requirement, because it's coupled to `IInputPort&lt;T&gt;`. If your input port *only* returned messages, T could be covariant in the input port interface. If it *only* enqueued messages, it could be contravariant. You may need to split things up, so that the input port interface composes interfaces for the two methods. I'm not sure if that will solve your problem, though.
Just in case you actually need something like this in production you should check out the TPL Dataflow library
&gt;public interface IEnqueuer&lt;in T&gt; where T : GraphMessage{void Enqueue(T message);}public interface IOutputPort&lt;T&gt; : IEnqueuer&lt;T&gt; where T : GraphMessage{void Close();void Connect&lt;U&gt;(IEnqueuer&lt;U&gt; port) where T : U;} The \`where\` portion refers to the method, so it has no idea what U is. &amp;#x200B; Something like this? &amp;#x200B; \`\`\` public class GraphMessage { } public interface IEnqueuer&lt;in T&gt; where T : GraphMessage { void Enqueue(T message); } public interface IOutputPort&lt;T&gt; : IEnqueuer&lt;T&gt; where T : GraphMessage { void Close(); void Connect&lt;T1, U&gt;(IEnqueuer&lt;U&gt; port) where U : T1 where T1 : T; } \`\`
Don't know about OP who sounds like he might have a similar issue to mine but this all sounds great in theory but how does one actually write code to do it in the first place? What does that code look like exactly? I get the idea of injecting the service but I don't have the first clue and I don't understand most of the blog posts or tutorials I've found that cover it. What I need to make all of this theory coalesce is a bare-bones basic sample of the code that achieves this.
Yes, that's what I did. I'm still stumped public interface IEnqueuer&lt;in T&gt; where T : GraphMessage { void Enqueue(T message); } public interface IInputPort&lt;out T&gt; where T : GraphMessage { T Dequeue(System.Threading.CancellationToken? ct); } public interface IOutputPort&lt;T&gt; : IEnqueuer&lt;T&gt; where T : GraphMessage { void Close(); void Connect(IEnqueuer&lt;T&gt; port); } E.g., the implementation of output port will need to have a list of successor input ports. So what should I fill in here: `List&lt;???&gt;` ? Do I need to have two lists?
And apparently it has to be complete working block of code, and even still you might only get comments and not a review..
I helped out a friend on a project like this recently, and found that adding in the 'walls' as a jpeg and reading pixel data to be the easiest solution. If you're sticking with labels, chances are you'd have to iterate over a collection of these labels and check whether or not the bounding box for the character overlaps with the bounding box for each label. If you're willing to post some more details regarding your project I'd be more than happy to have a look. 
I'm aware of that library. As for why I'm rolling my own: I need to (de)serialize graphs together with the contents of message queues.
Oh WTF, it'd never occur to me to introduce an extra generic parameter. And another WTF: if the compiler can't correlate `T` with `U` directly, how is it able to correlate `T1` with `T`?
If IBM were smart (and they’re not [0]), they’d port the core runtime to the POWER architecture. [0] https://www.amazon.com/gp/aw/d/B00KRHWZ22 
Couple of days enough to be useful? Without any background in oop ? Mate I hope this was a joke
Ah, on another look, this doesn't solve the problem: the constraint still `U:T` instead of `T:U`.
As an aside, why would you ever use an optional cancellation token? Cancellation tokens are zero cost, just use CancellationToken.None when you don't want one. This just adds overhead.
We now have T1 : T and U : T1 which should mean U : T, no?
I wasn't aware about `CT.None`; thanks for the tip. 
`X : Y` means `X` implements `Y`, right?. So `U` implements `T1`, `T1` implements `T`, so `U` implements `T`. Yes, we agree. But I want to express the constraint the other way around: `T : U`. 
Perhaps \`IEnqueuer\` needs that extra parameter to enforce the types? &amp;#x200B; \`IEnqueuer&lt;T, U&gt;\` ?
I'm not sure I understand. The problematic method here is `Connect&lt;U&gt;`. `U` can't be constrained at interface level for `IOutputPort`because `IOutputPort.Connect(IEnqueuer&lt;U&gt;)` must work for *any* type `U` that is a supertype of `T`. So to be able to put `IEnqueuer&lt;U&gt;` into `List&lt;IEnqueuer&lt;T&gt;&gt;` (should be possible because of contravariance) I must somehow be able to express the contravariant on `Connect`, i.e., `T : U`... which I have no idea whether it's possible.
I am working on windows forms and the programming language is c#. This is the player movement code that is in a keydown method : If (e.KeyCode == Keys.Up) { y -= 10; } There are three other if statements similar to this (Down,Left,Right keys.) I have a timer that lets the player move and the only code in the timer method is : Invalidate(); My player is built in the paint method like this : e.Graphics.DrawImage(new Bitmap(“pig.gif”), x, y, 32, 32) I do have a restart method which is supposed to send the player back to start but this does not work for the arrow keys it works for the cursor and I do not know how to make it work for the arrow keys. So when the player moves with the arrow keys to the label it should send him or her back to start Private void Restart() { Point start = new Point(5,5); Cursor.Position = PointToScreen(start); } I tried playing around with the label properties (KeyDown and Focus Enter) and I couldn’t figure out anything. Are you saying to change the labels into bitmap images or picture boxes? Also thank you for your help 
I'll try and explain my approach. What I did was create a level1.jpg file (for example) and set that as the image for a PictureBox component. Then whenever my player component would move, I would use a bitmap method to read the pixel data at that precise location (playerX and playerY) on the level image. This will return a colour that I used to determine whether or not the character was on the wall or against the background (Black or White). The only issue I can see is that for me, I used the mouse cursor which only resides in one particular spot on the screen. For your character object, it comprises of 4 points creating a rectangle. The way I would extend my approach onto a character is to check all 4 corners (using the origin point and width and height). This check would occur everytime the player moves, but another suggestion would be to limit this so it only calculates once every tick for a Timer component, with a relatively short interval. I suggest placing this functionality in a new function and running that everytime the player moves. Using the labels, it would be a similar approach, but you would have to iterate through all the label components in the form and calculate whether or not any of the corners of your player rect intersects with the label rect. I'm sure there is a more elegant approach using the labels, but this was my experience whilst developing a project similar to this. Hope this helps somewhat, ask loads of questions if need be. 
I'll try and explain my approach. What I did was create a level1.jpg file (for example) and set that as the image for a PictureBox component. Then whenever my player component would move, I would use a bitmap method to read the pixel data at that precise location (playerX and playerY) on the level image. This will return a colour that I used to determine whether or not the character was on the wall or against the background (Black or White). The only issue I can see is that for me, I used the mouse cursor which only resides in one particular spot on the screen. For your character object, it comprises of 4 points creating a rectangle. The way I would extend my approach onto a character is to check all 4 corners (using the origin point and width and height). This check would occur everytime the player moves, but another suggestion would be to limit this so it only calculates once every tick for a Timer component, with a relatively short interval. I suggest placing this functionality in a new function and running that everytime the player moves. Using the labels, it would be a similar approach, but you would have to iterate through all the label components in the form and calculate whether or not any of the corners of your player rect intersects with the label rect. I'm sure there is a more elegant approach using the labels, but this was my experience whilst developing a project similar to this. Hope this helps somewhat, ask loads of questions if need be. 
Not exactly sure how this would work in windows forms but if you have the position and size of your player and of the walls. You should be able to check if the rectangles intersect
I don't get it... you want the type parameter of IEnqueuer to be a type which is a superclass of the type parameter of the IOutputPort? How could the IEnqueuer give data to the IOutputPort if the type of the IOutputPort is more specific than the IEnqueuer?
He said "proficient". That is a few levels above basic for loops and general programming constructs. This takes years not months.
Proficient? Maybe 1.5 years if you try hard and spend extra time studying.
Does IBM have a stake in that though? Their stuff is largely Java and they have OpenJ9 for that.
It's truly impossible to say without knowing what your current skill set / knowledge is... but I would recommend getting a Pluralsight subscription (you can get a free 3-6 months by signing up for visual studio dev essentials if you haven't already). Pluralsight is a great resource for C# (among other things, but C# is one of their primary content subjects). You have a few options there * [C# Learning Path](https://app.pluralsight.com/paths/skill/csharp) is about 50 hours and has a repeatable test where you can measure how well you're learning it. * Find classes by Scott Allen and Shawn Wildermuth. They do great beginner level classes in C# on various topics. There are plenty of others, but I always recommend those two to people new to C#. I personally think 50 hours is a bit much and mind numbing, so I can't vouch for how vaulable it is. I'm sure it's comprehensive though, and some people prefer that type of learning. Either way, if you're dedicated to putting the time in - and you've got previous development experience (not just HTML/CSS/simple javascript), I think 1.5 months is plenty of time. You definitely wouldn't know all the best practices, available tooling, etc. but you'd be proficient enough to contribute for sure.
JS is not oop?
HTML and CSS.
It might, but doesn't have to. The question wasn't specific about just knowledge and assuming that all front end devs are close friends with js and oop would be false.
I'm pretty confident that StyleCopAnalyzer can be run in the CLI, I believe through MSBuild, but I think it may not work on Linux. Its great though. :) Good luck!
Type variance always hurts my head. The list will have to be of IEnqueuer&lt;U&gt;s: if this is working correctly, all IEnqueuer&lt;T&gt;s are IEnqueuer&lt;U&gt;s, but not all IEnqueuer&lt;U&gt;s are IEnqueuer&lt;T&gt;s. You will probably have to make U a type parameter on your OutputPort type and constrain both U and T public interface IOutputPort&lt;T, U&gt; where U : GraphMessage where T : U { void Connect(IEnqueuer&lt;U&gt; port); } You shouldn't need the type parameters on Connect(), though. If the output port is only ever going to need a single method off the enqueuer/input port object, it might be worth replacing the enqueuer interface with a delegate type. That may not solve anything, but it would make the co/contravariance automatic, where it's allowed.
I had this problem years ago. Someone wrote an object called TrulyObservableCollection. If you Google that it should solve your problem. It's not a perfect solution but it works for me for this problem.
You use a dependency injection framework. You just need to read up on it really. Is there anything specific you don't understand?
You'd be useful at 6 weeks. If you have someone code reviewing you and watching out for you then you'll be fine. I would bet against you being proficient (which in my opinion means being able to reliably code without follow up support by others) in the language though. Being only frontend (by that Im guessing only HTML/CSS/JS unless told otherwise) you're at a steep disadvantage. JS does not translate well to other languages because of how fluid everything is in it and how much of a learner's language it is. Its the modern day equivalent of QBasic imho. It'll be easier than making the jump to C/C++ but its going to be a learning curve for sure. 
They wrote: &gt;have been a front end dev my entire teenage, and adult life This hints that they are a young adult and Im guessing JS was a learner language for them. While the overarching programming concepts might be the same I would wager they are a junior frontend developer and are barely proficient in their preferred language. Its not impossible but I dont even see someone who is extremely proficient transitioning to C# from JS in 6 weeks and being proficient. They will be useful but they will still be learning. Knowing the language is just a small part of being proficient in C#.
God I hope you're joking. If they dont even know JS then this transition in 1.5 months is not possible.
Do you mean the size of the walls or the size of the space between the walls
Do you mean the size of the walls or the size of the space between the walls
How do you know whether your event fires? " Console.WriteLine(message)" means you output the message to Console but your project is WinForms with no console. Put the breakpoint inside \_rdp\_OnLogonError event handler and see if it fires or not. 
As I pointed out before you haven't asked one question you've asked several and how to build a service layer is anything but basic. In the multiple call post I was answering your specific question: &gt; What is the return type of the service that fetches the 2 DTOs, combines them into 1 object and then runs some business logic for some properties? I just wrote an EXAMPLE to answer that specific question. Its just an EXAMPLE there are a million ways to do this use your imagination. Hint you can return a composite object from your service just make sure it is UI agnostic and serializable. I think you can imagine why. &gt; On the surface, this makes sense, but I feel like it falls apart when you have any sort of logic involved. (for reference): This is kind of funny....... hey man I'm not writing actual code this is something I put together in notepad. It's dummy code - an EXAMPLE. &gt; then I still have a problem with the logic of how to get the data being here instead of inside of a testable, reusable service call No you don't. Your service call is here: serviceManifest.OrdersService.GetOrder(orderID). Test that. &gt; except that I feel that you keep simplifying the transfer of data between the database and the viewmodel, causing it to become multiple calls or simple graph queries. Well, actually it is that simple so perhaps my writings have not been in vain. If you want a more difficult way I can't help, sorry. I hope find an approach that suites you. Sometimes you just have to keep throwing stuff at the wall till it sticks. Best of luck. 
I did attach a console to it. Anyway, no, the event does not fire. Is there a way of debugging that? &amp;#x200B;
The event might not fire because "OnLogonError" event is not rised by "rdp" component. What I also see is that rdp.OnLogonError += new MsTscAxEvents\_OnLogonErrorEventHandler(\_rdp\_OnLogonError) is registered twice - in Form() constructor and in connectbutton\_Click event handler. It will cause MsTscAxEvents\_OnLogonErrorEventHandler to fire twice if event happens. Anyway, to debug your app, make sure it is built with Debug configuration. Put the breakpoint and press F5.
Yeah it all depends on what kind of work they were doing. Heavy use of js or ts would make transitioning to cs pretty easy.
All things being equal a C server will of course outperform a JITted server, but probably only by a small percent. This points to more of an architectural difference than one influenced by language.
It's registered twice because I was just trying it in different locations to see if I could get it to fire. Not to worry, I'll see if there's another way I can check for errors. &amp;#x200B; Hey, I learned something new about registering event handlers today though!
All depends on what you define as useful. I don't see any usefulness in anyone who isn't familiar with mv* patters, wpf,uwp,asp,mono or xamarin. 
That will help with learning language, which I don't even consider a problem. The long time will be spend learning tech (wpf,mono,asp,etc) and patterns/principals. 
Randomly looked at ForEachAsync&lt;T&gt; Why did you use `Task.Run` instead of just awaiting Task.WhenAll? I am honestly interested public static async Task ForEachAsync&lt;T&gt;(this IReadOnlyCollection&lt;T&gt; list, Func&lt;T, Task&gt; action) { if (list == null) throw new ArgumentNullException(nameof(list), $"{nameof(list)} is null."); if (action == null) throw new ArgumentNullException(nameof(action), $"{nameof(action)} is null."); var tasks = new Task[list.Count]; var i = 0; foreach (var item in list) { tasks[i] = action(item); if (tasks[i].Status == TaskStatus.Created) tasks[i].Start(); i++; } await Task.WhenAll(tasks).ConfigueAwait(false); } &amp;#x200B;
Yea, but some companies have enforced design guidelines that forbid "single line full method bodies" but allow expression body statements &amp;#x200B; e.g. method() { return c = (f - 32f) \* (5f / 9f) } Would always have to be written like this method() { return c = (f - 32f) * (5f / 9f); } instead of a short and concise line &amp;#x200B; Also, not to mention, using ref in and out for something that takes ONE parameter and returns another makes no sense, this could likely be inlined if i'm not mistaken public static int FahrenheitToCelsius(int fahrenheit) =&gt; (fahrenheit - 32) * (5 / 9); &amp;#x200B;
As I understand you move always by ten px, is there any particular reason why you ain't 2d grid as a level ?
Java is now mostly controlled by Oracle, so to avoid lawsuits from Larry they ought to hedge their bets. 
Obligataory, possibly terrible LINQ version, that I only tested with the example data you gave: ``` // assume "list" is the string array var list = new string[] { null, "A", "B", null, "C", null }; // assume "indexes" is int array of indexes var indexes = new int[] { 0, 0, 0, 1, 4, 2 }; var results = list // anonymous object tracking index .Select((x, idx) =&gt; new { Idx = idx, Val = x }) // get ones that are not null` .Where(x =&gt; x.Val != null) // anonymous objects with old and new index, zero-based .Select((x, idx) =&gt; new { OldIdx = x.Idx, NewIdx = idx, Val = x.Val }); // old index to new index dictionary map var dict = results.ToDictionary(x =&gt; x.OldIdx, x =&gt; x.NewIdx); // final string array list = results.Select(x =&gt; x.Val).ToArray(); // get new indexes from the index dictionary indexes = indexes.Where(x =&gt; x &gt; 0).Select(x =&gt; dict[x]).ToArray(); ```
That doesn't prevent IBM's stack from being mostly Java. OpenJ9 is also an IBM implementation of JVM, which I imagine is optimized for the POWER architecture, so there's also that.
We already know what LINQ is. This thread isn't about that, hence the downvotes.
My (method) body is ready.
I used the database first approach and read the data tables from the database into the .edmx file. In fact I create a new Entity Data Model from the solution explorer and get the wizard to select EF Designer from Database. Then the classes are auto created. How do I create the model including property changed events?
View models should always implement INotifyPropertyChanged. What they should do is make shadow copies of another model's properties. 
I have two issues with creating separate classes for view models. First that is tedious work to do and I wanted to avoid that. Second I have to copy all the data from one collection to the next which could result in bad peformance with a bigger set of data. Actually I wanted to have this example as a base for patterns on how to do my professional work with Entity Framework. The example is not really performance critical but the real world work based on this example will be. Therefore I searched for a way to re - use the POCO classes of the EF as viewmodel. What kind of future pain will that cause to me? What is your experience with that?
Don't have any experience with LINQ but I'll look into this! What makes you think it's possibly terrible?
I wrote that a long time ago and since it works, I never went back to optimize. Your suggestion is better, but not best. Remove the `await` and just directly return the result of Task.WhenAll. As a rule, if you only have one await and it's the last line of the function, you don't need async/await at all.
Maybe this will be less controversial than the last one. 
Here are a couple options https://stackoverflow.com/questions/25901188/using-inotifypropertychanged-with-entity-framework-6-dbcontext-generator I would probably change the T4 template. 
&gt; With the F# option type this is not possible. Are you sure about that? With reflection, it seems we could set the field inside the Option to be null as well. (I haven't tested this tho)
I think more information is needed to give you a helpful answer. Can you provide more context? Having a desire to "change value in heap after boxing" makes me think you are either doing something more advanced (in which case you should know how to ask better questions), or doing something very wrong (in which case there is probably a better way to do what you are trying to do).
Hah. Hopefully everybody learned OOP concepts in school. Just have to learn C# syntax. If you are self taught and started programming without learning OOP concepts...you done fucked up. LOL. But look, I was very specific to say "modify existing code". If you've been a programmer your whole "teenage, and adult life", it really shouldn't be a problem looking stuff up and learning the API, etc. as you go through other peoples' code. That's how I learn best anyway...by diving in and making small incremental changes to existing code. &amp;#x200B; PS. I wasn't joking and feel free to disagree.
1) I tested it with exactly one data sample 2) Performance-wise, possibly not the best. The LINQ methods means the list could be iterated more than once. Lots of anonymous class instances being made for each string to track indexes and a dictionary for mapping, but that is probably more a memory issue, if anything. 3) It doesn't do any verification of incoming data, like the string array needs to be assumed that for all non-null entries the entries are unique. 4) ??? 5) Profit
You can use something like AutoMapper to solve some of the tediousness. The biggest pain point, is that view models are expected to have some responsibilities, like INotifyPropertyChanged, and ICommand, that really don't work well on EF classes. It's the same type of problem your are seeing now with EF managing your collections. You will just end up fighting it all the way if you don't fully embrace "the wpf way".
Very true
I could do o = 6 but as far as I understand it will be new allocated object, the old one will be garbagecollected later. How to modify exactly that object in the heap?
In which school? Education differs from school to school,from country to country. Also learning syntax is not a problem. Yes you could after knowing syntax and commonly used patters in c# Google each second like, debug day and night and learn how it all works - but I will not consider this as a qualified transition, but a part of learning process. Once you can write application without 24/7 stack overflowing all the time, I will say you learned somewhat and can start working in team
You should just write classes that emit encapsulated HTML for those input fields. Then you can have TextBoxes and DropDownLists and CheckBoxes and all kinds of pre-made "controls". In fact, you should create an abstract base class called Control. And then give that base class a collection that holds more Controls so you can make them infinitely nestable. Then you can add event handlers to the base class, and have it raise nested-control events on any child controls it might have. Once you've done all of that, you can make a predefined GridView class that is a Control, but also has columns with headers and rows with cells that contain more child controls, and you can implement data-binding events that take a data source and bind it to the tabular control layout, as well as allow it to be read back into server when a request is made. And then you can call it ASP.Net WebForms. But seriously, use a GridView. Microsoft already did all of the work. I know WebForms is considered antiquated and un-sexy, but *damn* if it doesn't still work just fine. And for what you're looking to do, that's the exact development case it was built for.
right on does exactly what I hoped it would... do you by chance now how to make the the image fit to the screen?
You could use span&lt;t&gt; to open a "window" on the memory
&gt; INotifyPropertyChanged, and ICommand, that really don't work well on EF classes. Can you elaborate on that? I see no reason why it can't support either. Though `INotifyPropertyChanged` does require changing the T4 template.
You know js, you have to learn C#. I'd say the things you're gonna need are familiarity with defining Classes for everything, dependency injection , Linq is very important and useful, Async/await are very important and useful. For IDE I'd recommend visual studio if you can. After that, you've mentioned that you were front end and need to switch to a C# codebase, so you might need things that don't necessarily pertain to c# but are more general backend things, I'm thinking mainly databases and ORMs like Entity Framework.
Ok, alright. According to Richter it could be done via casting;object to interface and calling "changing" function, check chapter about boxing and unboxing in "CLR via C#"
Richter says that for structures it could be done via casting object to interface with "changing" function.
It's not a technical limitation, it's a sanity limitation. This is a clear violation of the single responsibility principle, and the MVVM pattern. You are, of course, free to do whatever you want, but if I were given a choice between finding a new job, and working on a project structured this way, I would be out going to interviews.
There’s nothing wrong with their using Java. But adding support for net core gets them additional applications running on their hardware they otherwise wouldn’t have had. Applications drive hardware sales. 
The MVVM pattern couldn't care less if your INotifyPropertyChanged-enabled classes were also used as entities for your ORM. Setting aside the fact that the "single responsibility principle" is just a bunch of feel-good bullshit, having a notification that a property changes is not a violation of SRP. It is just part of the basic property design pattern. In fact, this is why EF Code First is so popular. It makes it easier to create entities that act as data models so you don't have to add a bunch of redundant crap like shadow-copying all of your entities in order to support data binding. &gt; if I were given a choice between finding a new job, and working on a project structured this way, I would be out going to interviews. Good. I would want to work with someone who makes design decisions based on poorly understood dogma instead of technical considerations. 
View models should always implement INotifyPropertyChanged. What they should NOT do is make shadow copies of another model's properties. 
MVVM is all about clean boundaries between application layers. What you are suggesting would violate the core of MVVM. Model, view, view model. The very name tells you not to use the model as a view model.
A good rule of thumb is that if it feels like it is tedious, it is probably wrong. Since BradleyUffner is only offering superstition, I'll offer you some real warnings. 1. The first you already know: you need to tweak the code generator or use "code first" to generate WPF-compatible entities 2. Make sure Lazy Loading isn't turned on. Otherwise you could get random stalls as it hits the database. 3. You'll need to learn how to attach entities to a DBContext since the original DBContext is long gone by the time you want to save your changed. 
+1 for unsexy works fine. 
I checked Automapper and the Fody/PropertyChanged way to continue. However I am unsure how to continue as we have definitely two different view points here to discuss. When it comes to Automapper I don't really know the performance of Automapper with bigger data sets (Arrays) since it uses Reflection and I do have bad experience with Reflection code regarding performance. Also I do not get it how to map back from the viewmodel with Automapper into the EF data models so that only really changed models get committed to the database. The Fody/PropertyChanged way from grauenwolf to go forward seems to be a more straight forward continuation on my path to reuse the EF data models for the view models. Reading these comments I am unsure however if such a solution would turn down people as there are software developers who would already search for a new job when I used this as a pattern in a professional environment. I am usually completely dogma free - I search for a nice working pattern that has good performance and doesn't break when the solution becomes bigger.
Thanks a lot! I will take these warnings seriously into consideration!
Can't the compiler figure this out already? Resharper already tells you when a lambda makes a closure. I don't see why I need to tell the compiler what my lambda does, especially when I can change the lambda and not update the attribute.
The view-model is a model that describes the state of the view. For example, which panes are open and which item is selected in the main list. The view-model is not a shadow copy of your data models. That was never the intention and the only reason anyone thinks otherwise is that horrible MSDN magazine article by Josh Smith.
&gt; At this point data binding comes into play. In simple examples, **the View is data bound directly to the Model**. Parts of the Model are simply displayed in the view by one-way data binding. Other parts of the model can be edited by directly binding controls two-way to the data. For example, a boolean in the Model can be data bound to a CheckBox, or a string field to a TextBox. John Gossman, one of Microsoft's WPF and Silverlight architects, Introduction to Model/View/ViewModel pattern for building WPF apps, 2005 He does go on to say that the view-model can act as an adapter for the model if for some reason the model can't be directly bound to a view. And of course it should offer ICommands for interacting with models. But in your basic case, what should happen the vast majority of the time, is you bind directly to the model.
It's not so much telling the compiler what to do, rather telling the compiler what your intention is so that it can tell you when you violate it.
You just need to keep them separate. The interface of Inputs can never extend Outputs, and vice versa. This is the essence of getting covariance and contravariance. However, one class can implement both.
I fear binding directly to the model would cause developers like BradleyUffner to quit the job before he gets freaked out with the code :) In our professional environment we had such a problem recently as well. Someone freaked out because of our framework and sadly quit the job. It is hard sometimes to find developers that see pragmatic solutions more useful than following their dogmas. I am pragmatic most of the times however. The T4 solution looks attractive as well. I will sleep a night about this before deciding on a way to continue.
&gt; Reading these comments I am unsure however if such a solution would turn down people as there are software developers who would already search for a new job when I used this as a pattern in a professional environment. He's just being melodramatic. If someone threatens to quite over a design decision, especially one where they have no technical arguments for, then they aren't worth listening to. *** &gt; Also I do not get it how to map back from the viewmodel with Automapper into the EF data models so that only really changed models get committed to the database. This is messy with either pattern. ##EF Only When you disconnect an EF entity and then reconnect it, it assumes that everything changed. Which means that it will update all columns, not just the ones you actually changed. If someone else was also editing the record, this may lead to a race condition. (But really, that's always a possibility when two people edit the same record.) ## Shadow copies and auto-mapper If you use auto-mapper then this is the sequence. 1. Query the database for a new copy of the entity. 2. Use auto-mapper to overwrite the fields in the new copy. 3. Save. So just as with the EF plan, this is going to stomp on anyone else's changes. (Plus add an extra round-trip to the database to requery the entity.) 
To add to what u/RiPont said, think about the `readonly` modifier. You never need to make a field as read-only, but if you do then the compiler makes damn sure it actually is read-only.
How performance sensitive are you? And are you working with just a collection of objects or does each object have a bunch of child objects? *** I ask because I do have my own ORM that is designed for high-performance scenarios. It is considerably faster than EF and if you use my optional base classes, it tracks exactly which fields have changed so that it can create efficient UPDATE statements. (It even supports multi-level undo so you can do data grids and dialog windows with `IEditableObject`.) The down side is that it doesn't natively support object graphs. So you need deep object graphs is may be more work than you are prepared to take on.
Thanks
There's no API for that spreadsheet system?
Can you rephrase that question
Using this approach, you could easily store level data in a multidimensional array and just do a simple lookup to check if there is a 'wall' in that segment. This is definitely worth thinking about as an alternative to checking for intersecting recs! 
In our professional environment we have a new custom report generator (in addition to Crystal Reports) where you can quickly configure fields for a list based on our database and where usually bigger datasets are used. They are usually running just on a collection of objects and reflection to read the object structure to provide the fields selectable. There are no UPDATE's done by this solution however so this is mainly about read performance. &amp;#x200B; On the other hand we also have deep object graphs in our forms where the main table has links into several childs which quite often themselves have childs again. These forms use UPDATE's to the database and sometimes they can have thousands of records in a datagrid to select the record that should be modified. The UPDATE's are small however and usually just a few records of some tables are updated. Some of these forms are performance critical if they use sophisticated datasets with thousands of records and we also have paging mechanisms in our old framework. &amp;#x200B; We did not decide on an ORM yet. I am preparing for a tech talk in our company regarding ORM and EF to introduce this technology to our company. We had a mess with a developer who followed his own dogmas instead of using our framework. He left our company and we can throw his code to the garbage can.
when you say fit to screen, do you mean fit to the paper you are printing on or to the actual monitor? &amp;#x200B; Either way, there is a fairly straightforward method for resizing a Bitmap image built into its constructor, so long as you have the target dimensions (in pixels) for the new Bitmap. [MSDN Page](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.bitmap.-ctor?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System_Drawing_Bitmap__ctor_System_Drawing_Image_System_Drawing_Size_) &amp;#x200B; PrintDocument printDocument1 = new PrintDocument(); PrintDialog PD = new PrintDialog(); Bitmap memoryImage; Bitmap ResizedImage; //New Bitmap private void btnPrint_Click( object sender, EventArgs e ) { printDocument1.PrintPage += new PrintPageEventHandler( printDocument1_PrintPage ); memoryImage = new Bitmap( Form1.Height, Form1.Width ); Form1.DrawToBitmap( memoryImage, Form1.ClientRectangle ); ResizedImage = new Bitmap( memoryImage, new Size( int NewHeight, int NewWidth ) ) //New Dimensions as Whole Int PD.Document = printDocument1; var result = PD.ShowDialog(); if (result == DialogResult.OK) printDocument1.Print(); } private void printDocument1_PrintPage(System.Object sender, System.Drawing.Printing.PrintPageEventArgs e) { e.Graphics.DrawImage(ResizedImage, 0, 0); //Replace memoryImage with ResizedImage } &amp;#x200B;
That's a silly argument. What school in what country doesn't teach OOP? It's the basics in computer science. That's like going to school for a math major where they don't teach you geometry. You'd have to believe it's rare. That's not usually how the real world works. You have to be productive immediately. I've never worked at any company where they let you sit there and learn stuff and not produce any code for long periods of time. Plus nobody gives a crap what you Google as long as you get the job done and make money for the company. Are you a student? Where do you get these crazy ideas?
I do not get your question can you explain more for me? &amp;#x200B;
Thanks for the link. Neat website. 
Thanks, came across this a while ago. Useful if you need a reference!
Ignore that element and go to the next page element before it. After you are done with the data on the current page, check how many items you got if it is 25 then continue if less than 25 then you’re done. Now check the next page element. Selenium should have an .Displayed that returns a Boolean or .Active. That should tell you if there is a next page.
Call it "superstition" if you want, but it's borne of over 2 decades of experience with untangling the mess made by developers who take the easy way out, rather than the correct way, when it comes to properly separating application layers.
If after two decades you still can't think of any technical justifications for your design patterns, then yes, it is superstition.
Barf. Newline those curly braces.
I always thought the standard was int foo () { } ?
Default Visual Studio behavior is curly brackets on new lines.
For c#, the more common is Allman style, though I vastly prefer K&amp;R
Helix toolkit for 3d it's very nice, it's an abstraction over wpf 3d capabilities, Easy to use and extend. Regarding 2D i must tell you that it's gonna be very hard to have decent performance, don't even start with wpf use directly a directx viewport (direct2d) if you know that your app is gonna be 2d intensive with lot of drawings interactions etc 
Your observer pattern seems to follow the ideology of RxJs somewhat closely (pipe, tap, map, etc), after having been neck deep in the Angular world for the past month or so, this is kinda neat. Something I wonder however, should your Observables implement IDisposable so when the Observable completes or falls out of scope it notifies the observers that it's complete?
With this new feature, `string` is gonna be __UNNULLABLE!__
The feature isn't about these specific attributes, but about the ability to have attributes on lambda members. Presumably these attributes would become visible to reflection somehow in addition to code analyzers run on the source code.
Indeed! It was based on RxJS as how It's actually used. I think that it would be a good idea to add IDisposable, will do that!
&gt; To be a programmer you need to learn the fundamentals, variables, loops, collections, object oriented programming and all that goes with it. If you already know all that, then yes 1.5 months is realistic enough. It really depends on what "proficient" means. If you're sufficiently familiar in those concepts, then 1.5 months should be enough to, quoting the original post, "contribute to a c# codebase". But it probably won't be enough to grok the ins and outs of when to make a type a value type (and when not to) or what on earth `ConfigureAwait(continueOnCapturedContext: false)` actually _means_. There's a pretty big difference between "contributing" to a codebase in a language, writing significant new features in it, and building your own architecture in it.
Oh wow, that does sound more complicated, I am not too good with arrays but I can look into it. Thanks.
This mostly moves Blazor back in sync with the ASP.NET Core 3.0 changes and also makes it compatible with VS 2019; there aren't any notable new features at this point: &gt;This release of Blazor was primarily focused on first integrating Razor Components into ASP.NET Core 3.0 and then rebuilding Blazor on top of that. This is nice, though: &gt; In our performance benchmarks, Blazor 0.8.0 performance on Chrome is now about 25% faster. I also want to point out, in case anyone else runs into it, that [there is currently a bug](https://github.com/aspnet/AspNetCore/issues/7159) where expressions like `IsActive="@{i == ActiveIndex}"` may cause: 1) the build to fail with the exception `Unable to cast object of type 'Microsoft.AspNetCore.Razor.Language.Syntax.CSharpExpressionLiteralSyntax' to type 'Microsoft.AspNetCore.Razor.Language.Syntax.RazorMetaCodeSyntax'.` 2) the VS editor to crash if you try to open such a component 
It should be relatively simple! What you'll need to do is split your level up into 10px chunks, then declare a multi dimensional array which is just going to be a list of rows containing cells. For example: [ [ "wall", "wall", "empty"], //row 1 [ "empty", "empty", "wall"] ] //row 2 Then when you pass in your coordinates, x and y, it will return what is in that spot. For example, [0][2] will return a wall because on Row 1 (0), item 2 (3) has "wall" set. As long as you guarantee you only move in steps of 10px, this should be relatively easy to do. Only drawback is that each level will require hard-coding, unless you're willing to dynamically create label components on the fly. 
if(obj is Chickenfeed c) { Console.WriteLine(Math.Round(c.ammountChicken,2); }
When you cast your obj as a ChickenFeed - what are you declaring your new c as? Should it still just be object?
I still think they should have gone the way of adding a syntax to mark a type as non-nullable (`String!`) then had a compiler switch that, when enabled, treats provided `String` usages as `String!` and `String?` usages as `String`. As it stands, you still end up with things like functions from referenced libraries returning `String` that may return null, whereas using the way I described would make the return type appear to be `String?` when enabling the switch. Nullable/non-nullable would become more of a solid feature rather than a suggestion.
So I would have to divide the form into a grid and input what is in each section of the grid? Also, I do not understand what you mean in your last sentence. 
Egyptian brackets are fine for JS/TS, but not C#.
Conceptually yes. So let's say the level is 500px long, that's 50 rows of 10px. Now you could either have one label with dimensions 10px by 500px, or 50 10 x 10px. I would suggest using one label (or panel as an alternative). Now in the code, we'll say that our first row is filled with walls by setting it up so that the first element of our level array is another array filled with 50 elements saying "wall". As you can see this method gets out of hand quickly and does not scale well whatsoever. But if you were to follow this pattern, you'll see what I mean by "hard-coding" - you are essentially typing out the level as a data structure and storing it in a variable. I would personally recommend you seek an alternate method, such as either of the ones I mentioned previously as it will operate much more dynamically and you won't be constrained by what you "hard-code" or a preset step amount. I hope this makes sense 
You can use pattern matching to type check and cast all in one: if (obj is Chickenfeed c) { Console.WriteLine(Math.Round(c.amountChicken, 2)); } As it stands, the problem is that you are declaring `object c`, so despite the cast, it's still an `object` type.
If you're referring to that 'defer' one, then I don't think anything will ever be as universally disliked as that was. I've never the community in so much agreement 
Whatchoo talking bout?
Yea, I guess you can't call it "controversial" if nearly everyone has the same reaction.
https://www.reddit.com/r/csharp/comments/am3bxp/c_futures_defer/
object c = (Chickenfeed)obj; //casting done incorrectly should be either Chickenfeed c = (Chickenfeed)obj; You explicitly cast it to Chickenfeed but then implicitly cast it back to object. Also the else statement does nothing.
It looks like you're trying to scrape an online spreadsheet. Most of those have an API endpoint for data so you don't have to scrape. Even if this is custom code, theoretically can you ask the dev to provide a json API endpoint for the data?
Pretty sweet!! For an educational resource, I'd love to see copious amounts of comments and explanations in the source files themselves. Why each method/property exists what it's purpose is etc... Many books only show abstractions and never the concrete examples; or they are so esoteric it can be tough to follow. This repo is the other extreme end. Lots of concrete examples with little explanation of the abstractions. 
The most thoughtful and highest quality answer in this entire thread and it's been downvoted to the bottom. That pretty much sums up this entire subreddit I guess. 
Never have I more quickly downvoted a comment. 
Thank you. I was thinking about this; if i go into the designer and use the size and location of each label to make an identical rectangle for each; would i be able to use the (player).IntersectsWith.(rectangle) method? Do you think it would work? I do not know, I am not too sure of how to declare a variable for bitmap since that line of code for my image is a void.
Maybe use JSON.Net's decrypt to a Dictionaries&lt;thing&gt;? I know if you serialize a dict, you get an object like that. You can also cast a JObject to dynamic and go nuts, but that can be annoying. 
I wish there was an overview of all repos on my drive instead of having to open each project just to do a pull. I have to use https://github.com/awaescher/RepoZ with it now that SourceTree annoying got rid of their tree view. 
For your singleton pattern, it can be a lot nicer (IMO) to use a Getter method on a property, rather than a method. That way instead of using `SimpleSingleton.GetInstance()` you can use `SimpleSingleton.Instance` Eg in one application I had which needed a "single source of truth" object controlling the state of the app, I instantiated it with something like `Audigex.AppState` - I know I'd prefer to use `Debug.Debugger` rather than `Debug.GetInstance()` - and it also means the singleton can "belong" to an object further up the hierarchy, rather than retrieving itself. Eg `Application.Debugger` makes much more sense than `Debugger.GetInstance()` or `Application.GetDebuggerInstance()` I don't know if that's just me, but it feels much more natural than `Audigex.GetInstance()` and and can also give a nicer naming convention under some circumstances. Primarily the "natural" thing though - you want an object, not a method, so referencing it using an object instead of a method seems more logical, and means you don't actually (when consuming the code) need to know or care that it's a singleton. It's very slightly more verbose to implement, but I think it's neater
It's always going to be a leaky feature. Here's one way to trivially violate the checks. string nonNull = (new string[1])[0]; 
Why don't you let everyone choose the Git tool of their preference? I don't see why it should be a team decision to switch to GitKraken or SourceTree or any other Git tool.
Not going to force anyone to change their Git client. I'm more interested in features that are lacking in the VS Git tools that are present or better in other Git clients. And I want to justify the $50/license cost for GitKracken beyond just "I like it."
 if (obj is Chickenfeed) { var c = obj as Chickenfeed; Console.WriteLine(Math.Round(c.amountChicken, 2)); } c# 7.0 or later: if (obj is Chickenfeed c) { Console.WriteLine(Math.Round(c.amountChicken, 2)); }
 #ReligiousArgument 
Resolving merge conflicts kinda sucks. Other than that, it seems fine. I installed TortoiseGIT for doing repo manipulation outside of VS, though. Maybe you should ask your team about the pain points they're having with it? Then you could actually determine if those were solved or mitigated by the alternatives you're considering.
As far as the Capture* attributes, I really prefer keywords to attributes, if it's going to trigger compiler features. I don't really have an opinion on the *actual* feature, though. I so rarely use attributes on parameters, it hardly matters.
For what it's worth, I had a different error today even after installing the Access engine. I'm using Access 2016, and I was using the same connection string. I changed the architecture to be a straight x64 instead of 'Any CPU', and that resolved my issue. 
 I love the design of GitKraken (no C in the name) but it crashes every now and then for me (Win10).
I found the following article to this messy auto-mapper idea. It proves my doubts to use Automapper to map back from the viewmodel to the entities. After reading it through I think I will not use Automapper with the sequence above. See: [https://rogerjohansson.blog/2013/12/01/why-mapping-dtos-to-entities-using-automapper-and-entityframework-is-horrible/](https://rogerjohansson.blog/2013/12/01/why-mapping-dtos-to-entities-using-automapper-and-entityframework-is-horrible/)
C# was the first language I had worked with where this was common/standard/ide preferred. I still like it for backend languages now, but I just can’t pull myself to do it when writing JavaScript. 
Or better yet, don't use singletons. 
Boooooring...
No stash support. Have to fetch or pull before it realizes there are other branches in remote. Those are probably my main two. I prefer other clients, but I get by with it usually. SourceTree is probably my preferred GUI but I've been trying to use command line more. If I'm doing a simple workflow, VS Git is usually fine.
I don't think .Next is a static function. You need to instantiate a Random object, then call .next. Var rnd = new Random (); Var num = rnd.Next (6);
You need to instantiate a Random object first Random r = new Random(); int n = r.Next(6); &amp;#x200B;
More concise: `var rnd = new Random().Next(6);` &amp;#x200B;
 int n = r.Next(6) +1; He probably wants 1 to 6 and doesn't realize that what you wrote is for 0 to 5.
Okay so I made changed all my labels into rectangles and here is the code : Rectangle one = new Rectangle(-3, 41, 607, 13); e.Graphics.DrawRectangle([Pens.Blue](https://Pens.Blue), one); if (Player.IntersectsWith(one)) { Restart(); } I am having trouble with my restart method, I do not know how to make it so that when the player touches the wall (any wall because ill be adding this method into every wall if-statement) &amp;#x200B; private void Restart() { Rectangle start = *i do not know what to insert here* ; start.Offset(10, 10); Rectangle.Position = RectangleToScreen(start); }
Then why not do: int n = r.Next(1, 6); 
I tried the ObservableCollectionExtended in combination with the datagrid and I realized that I have an additional problem with the events. I tried all the events and realized that I get an ItemAdded event as soon as somebody adds a new item to the datagrid. However when that happens the combo box to select the related table "Vorfuehrung" is not selected yet so I can't add the new item to the right Vorfuehrung collection of the Vorfuehrung model. The problem is that I do not get an additional ItemPropertyChanged event or some event later when the combobox value is selected for the new item so I cannot react when I know the value to add the new item to the Vorfuehrung collection. Is there a way to also get the ItemPropertyChanged event for new items? public MainViewModel(DbSet&lt;Film&gt; film, DbSet&lt;Vorfuehrung&gt; vorfuehrung, DbSet&lt;Buchung&gt; buchung, DbSet&lt;Saal&gt; saal) { this.FilmCollection = new ObservableCollectionExtended&lt;Film&gt;(film.ToList()); this.VorfuehrungCollection = new ObservableCollectionExtended&lt;Vorfuehrung&gt;(vorfuehrung.ToList()); this.BuchungCollection = new ObservableCollectionExtended&lt;Buchung&gt;(buchung.ToList()); this.SaalCollection = new ObservableCollectionExtended&lt;Saal&gt;(saal.ToList()); this.FilmCollection.ItemAdded += FilmCollection_ItemAdded; this.FilmCollection.ItemPropertyChanged += FilmCollection_ItemPropertyChanged; this.FilmCollection.ItemRemoved += FilmCollection_ItemRemoved; this.VorfuehrungCollection.ItemAdded += VorfuehrungCollection_ItemAdded; this.VorfuehrungCollection.ItemPropertyChanged += VorfuehrungCollection_ItemPropertyChanged; this.VorfuehrungCollection.ItemRemoved += VorfuehrungCollection_ItemRemoved; this.BuchungCollection.ItemAdded += BuchungCollection_ItemAdded; this.BuchungCollection.ItemPropertyChanged += BuchungCollection_ItemPropertyChanged; this.BuchungCollection.ItemRemoved += BuchungCollection_ItemRemoved; this.SaalCollection.ItemAdded += SaalCollection_ItemAdded; this.SaalCollection.ItemPropertyChanged += SaalCollection_ItemPropertyChanged; this.SaalCollection.ItemRemoved += SaalCollection_ItemRemoved; this.FilmCollection.CollectionChanged += FilmCollection_CollectionChanged; this.VorfuehrungCollection.CollectionChanged += VorfuehrungCollection_CollectionChanged; this.BuchungCollection.CollectionChanged += BuchungCollection_CollectionChanged; this.SaalCollection.CollectionChanged += SaalCollection_CollectionChanged; this.FilmCollection.PropertyChanged += FilmCollection_PropertyChanged; this.VorfuehrungCollection.PropertyChanged += VorfuehrungCollection_PropertyChanged; this.BuchungCollection.PropertyChanged += BuchungCollection_PropertyChanged; this.SaalCollection.PropertyChanged += SaalCollection_PropertyChanged; } &amp;#x200B;
Upper bound is exclusive. That will still give you 1 to 5. Yes, I know how stupid that sounds I didn't make the API.
Don't do this if you expect to make multiple calls to random though. Initialize it once rather than creating a new on reach time or there could be issues with the same time based seed.
I think I made my agreement not as clear because you are rephrasing what I said about the work environment. While with oop and schools I met plenty of people in workplaces where they had no idea about oop and all of them were front end or php devs
If I'm reading this correctly, what you are asking for is that when something is added to the VorfuehrungCollection, you also get an ItemPropertyChanged the new item. If so, try this VorfuehrungCollection.ItemAdded += (s, e) =&gt; VorfuehrungCollection_ItemPropertyChanged(s, new RelayedEventArgs&lt;PropertyChangedEventArgs&gt;(e.Item, new PropertyChangedEventArgs(""))); Using an empty sting in `new PropertyChangedEventArgs("")` means that "some or all of the properties may have changed".
No I do not get the ItemPropertyChanged events at all. Do I need to add INotifyPropertyChanged to the POCOs?
what is 'falling out of scope'?
To be more specific, the default time resolution in Windows is 15.6 ms. Since `new Random()` is based on the current time, `new Random().Next(6)` will return the same value each time you call it for the duration of that 15.6 ms window. *** However, this is runtime dependent. Try this code in .NET 4 vs .NET Core to see a very different result. for (int i = 0; i &lt; 100; i++) { Console.WriteLine(new Random().Next(6)); }
&gt; Do I need to add INotifyPropertyChanged to the POCOs? Oh yes, you still need to do that. ObservableCollectionExtended listens to INotifyPropertyChanged events in its children.
Good morning. Ok thanks, then I will change the T4 next.
I think you misunderstood the concept. All your "level" is build out of rectangles 10*10px and stored as array2d (grid). You player movements not px based any longer,but instead grid based. Same goes to spawning position. So when your restart is invoke, the player position should be grid[0,0] (top left corner). Each "rectangle" should be own class with state, which tells the game if player can navigate there and if this "rectangle" will force game to restart
why? I think singletons is quite useful for anything. I can't complete a project without using singletons, *LOL*.
When did *personal preference* become ***ReligiousArgument?***
 void Method() { for (var i = 0; i &lt; 10; i++) { var str = $"{i}\n"; } //Try to print the final string value Console.WriteLine(str); } str "falls out of scope" because it is only available within the for loop and any subsequent if/loop statements. That's "falling out of scope".
You can remove the “get” and the brackets. 
Sure, but that doesn't mean they weren't taught in school. Maybe they forgot and just need a refresher. It's not such a hard subject that you can't refresh the concepts in a couple days or a week depending on how much you remember.
Also, I thought proper Singletons should have a private constructor so that you couldn’t just make your own instead of using the instance. It a would also be nice to illustrate different ways to keep the Singleton’s initialization thread safe, from static initialization through locking + lazy initialization.
Random is not static, you need to instantiate it, like so: Random random = new Random(); int number = r.Next( 6 ); If you want it to between 1-6, then do this: int number = r.Next( 1, 7 ); or int number = r.Next( 6 ) + 1;
Because it is just personal preference but people argue it like religion. As if it's an affront that you decided on doing it the other way.
&gt; What languages do you already know? Sorry for the super late reply. HTML, JavaScript, and some PHP. 
&gt; Did you end up doing any powershell, python, ruby, Angular.js, [asp.net](https://asp.net) markup or code-behinds, AJAX, etc. ? Some PS... I’ve dabbled in Angular, backbone, various other JS frameworks. I’m mostly in reactjs, nodejs and html/css land.
I’m super late on replying, sorry. I’ve been developing for 18 years.
Nope. Brackets on their own lines is a C# convention.
When you have 100 engineers working on a project of a million lines, "personal preference" counts for shit. Everybody does it the same way. Most companies enforce doing it the standard way, which is braces on their own lines.
Because you've never worked on a large software project in C#?
Don't forget that using isn't just try-finally. It has null checks in there too. (and uses the IDisposable.Dispose function rather than the compile time type if you're silly enough to create a shadow). You going to remember to do that null check in the grand total of 3 defer blocks you write in the next decade?
Consistency is important which is why you establish a project coding standard but I call bullshit on your assumption that its]’s new line rather than same line. It’s a matter of preference. As an example, I know some that prefer “same line” because it’s denser and you see more code in a single screen.
What if I want to dispose of something before the block it's in ends? The using block allows you to create that new block such define it's lifetime.
https://referencesource.microsoft.com There are a few million lines of code, all consistent, all putting braces on new lines. There is no such thing as 'preference' in a professional environment.
&gt; why? Depending on a singleton is using an implicit dependency. It's bad for the same reason service location is bad. I'm not saying never use singletons, because absolutism is also bad, but you should be able to complete a project without it.
Perhaps add a description to what the design patterns are and what they try to achieve?
People disagree with you therefore they must be fake or amateurs. Ever consider maybe you're the amateur here?
P.S. If you implement disposable properly your finalizer will NOT be called.
 public class Singleton { public static Singleton Instance { get; } = new Singleton(); } This has the advantage of the construction being thread safe.
Implementing Dispose properly doesn’t guarantee that. *Using* disposables properly guarantees that. The Dispose pattern provides eventual cleanup at finalization if the consumer doesn’t do that.
while thats true, you will miss the exact callstack when an exception is thrown - which might, or might not be an issue. For a Library - i think - it wouldn't be that much of an issue, but as far as Webservices and desktop applications go, i rather take the await overhead until i see performance issues
I'm my experience if someone understand oop, they most likely use it (with rare exception). This again depends on person.
Might wanna tell that to Microsoft since they went to great lengths to make the C# formatter very configurable and apply those settings to teams. 
Because… 
 usually I only care about the stack frame on the very top and very bottom, but I see your point 
Your comments throughout this thread prove the point perfectly, that certain people defend this like religion. 
Will do, thanks!
The only thing I defend, which apparently you're too inexperienced to comprehend, is that uniformity is more important that any personal preference.
LOL look at you. You’re so mad. 
Originally, I did it for myself to work through abstractions - but now when you say it, I will add comments soon!
I used to work for Microsoft. There was one standard, the formatter settings were standard, and non-conforming code was rejected.
Look at you, you're such a child. Good luck at keeping a job once you graduate from high school.
It is precisely as you are saying, development teams should decide on their own styleguide - and most of them fall back to "de facto" standard of .Net. At the other hand; This is a small project on which I'm working alone, so I do not think that this is hurting anybody for me to specify the braces K&amp;R style :) 