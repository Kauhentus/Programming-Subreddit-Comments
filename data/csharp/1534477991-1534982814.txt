WinForms != WebForms. I mean if you've dealt with them enough yeah, they're not hard, but compared to more modern frameworks and whatnot (MVC, JavaScript Flavor-of-the-Month, etc.) it just feels very outdated and archaic to me. I'm very much about letting your backend and front end not being coupled by the stack you choose, especially since in a year or two I may have yet another JS framework to figure out. Razor is certainly nice, but I'd consider picking up a JS framework or two if you haven't already. I've really been into React for the last year and love it.
I would chalk this up under “college resume helper doesn’t know shit” C# has a ton of places wanting devs
Doesn't PowerBI lock you into Azure though? 
Best case scenario would be rebuilding legacy web forms apps to MVC.
DevExpress has pretty good reporting. The main criteria is if you are wanting to do business logic in C# within the report. If you do, then there are fewer options available than if you just want to pull rows from a database.
Probably. I mean it's backed by Facebook who had the common sense to finally MIT license the framework, so support should continue for some time. There's also React Native for building mobile apps. Company I work for now uses it.
Or even better, turning them into SPAs. 
You should be fine. Even Microsoft is doing the web app in Electron for their multiplatform tools like VS Code. 
Aye. It looks like `&lt;!--@Thing.OtherThing.Whatever--&gt;` It's not very elegant. 
Exactly! The problem I’ve seen is a lot of businesses choose sitecore when they really don’t need it. They also don’t get qualified site ore developers (there’s training for it...) and documentation is sparse. It’s a messy experience when you’re not in a proper sitecore house. Massive. License. Fees.
I still like VBA now and then. Automating Excel, Word, etc can be incredibly useful.
PHP is a recursive acronym; it used to be short for "personal home page" but a while after that they change the first P to be another PHP, short for "PTSD-inducing Hypertext Processor".
I've done my fair share of webforms in the past. There are few things that I still prefer over MVC. Granted you didn't take any shortcut and corrupt the page lifecycle. (I'm assuming an healthy MVC application that only do validation, coordination of business logic services and presentation of the result.) Locality of the code. MVC tends to be extremely dispersive with controllers, models and view too far from each other. Webforms has everything in the page codebehind. Density of the code. If your application has a lot of "single pages" you tend to either have many controllers with one or two actions orew with too many actions. Webforms has very self-contained pages. Reinventing the wheel. I can't count how many times I've written the incipit of a table. Controls allow for great reusability. On the other hand, webforms doesn't make it easy for the developer to follow the Inversion of Control principal (Dependency Injection techniques exist but are not easy to follow). Very much like you could do object oriented programming in C, you can do SOLID programming in webforms, it's just not easy. All in all, I like to cite this quote "webforms was an innovative framework poorly implemented, MVC is a non-innovative framework wonderfully implemented" 
Though honestly how often do you really need that? And how much of it could you trivially implement for instance as a factory?
HashCode.Combine(X, Y) is going to be a part of .NET Standard vNext. 
After I finished university I went for a job interview and I told them I had been learning C# as the main language in my Software Development module. All three of them looked at each other and one said "C#? really? does anyone even use that anymore?" This was in 2012. I never did work there.
Do you know what they used?
My best guess from memory as it was a short interview is Java. I switched off after they got all superior about their company.
I'm not sure tbh, the place I work is really small and it's recruitment process is a little...strange. They've been looking for new developers for ages now, but keep getting just a trickle of applicants coming in. Even my manager (the CTO) doesn't know what advert we've got out, that's all been done entirely by our very untechnical CEO. Sigh.
So percentagewise how much more are they gonna pay over doing the latest and greatest in .NET? However you are right that the work is not exactly pleasant but not because of Web Forms. A Web Forms project will probably be deep legacy and suffer from other problems. However if I am allowed to develop it, refactor it and move it forward I'm fine with it being bad. 
Yep sounds about right. Another fun tip, when you come out of the interview it's common to call the agent so they know how it went. This is a good thing because they can often help smooth over little bumps. BUT! They will often ask you what you were asked in the interview. This is so they can prepare the next candidate, increasing their chance of getting the role :/ So it's best to not be able to remember what you were asked, or remember some really weird stuff that never happened.
Right now, I'd say you could exact a small premium... maybe 5-10k more, at most places by saying "I'm good with being the webforms guy/gal" but I'd expect that number to climb rapidly as people get away from it, and as new employees aren't taught webforms at all, even on the job. I'm noticing the same trend in SQL server, where if you can really develop on MS SQL (also seemingly Oracle) -- it isn't being taught to most people, and has been abstracted away into other teams at most larger organizations, so the $ for doing real SQL works (procs, optimization, etc) seems to be climbing fairly rapidly. Good Webforms and good ETL/database people are hard to find.
I like WebAPI, ideally I'd do WebAPI and not do any form of front-end development. In fact I kind of do that today with a small amount of MVC. I prefer the WebForms model over MVC because it is a component oriented framework. You can have reusable, encapsulated components with behavior, events and UI. It is effectively the same concept that is exploding in the web frontend world with React and Angular. Yeah, web forms is ancient and some things that made sense back in the day do not make sense now (like the total hostility towards JS and the negligence towards the generated markup) but the concept itself is far superior. In MVC you can't have a component. You have two parts of a component the view and some instructions about what you should do with the view model that powers the view and you must understand the internal workings of the component to make it work. You can take a look at all offerings for paid "components" (which are not really components) in for ASP.NET MVC. They all have built their logic in JS and the MVC part is just a helper method to render it and they force you to implement specific interfaces for AJAX. In web forms you just drop the component hook up for the events and read properties. A component like this (i.e. one written in .NET rather than JS) is practically impossible because the view, view model and action are connected but also totally separate. The closer you can do is a full page (like those API help pages they provide) but there cannot be a smaller component.
Yeah but with the rate of change in tech it is entirely possible that you'll just skip a couple of iterations. This is how I skipped AngularJS and I am not sad about it at all.
No, it works offline as well.
How much is that in percentage terms? 10%? (Obviously wages differ in different parts of the world)
He is clearly also just guessing those numbers. This is certainly nothing certain or fixed like "in general xx percent more"
I have PTSD from java. 
Well, the elephant in the room is that C# isn't "hip". Due to its closed source history and Microsoft association it's seen as the dusty old language of the business establishment. Trendy startups rarely use it and a lot of snooty developers that might be interviewing will count the decision to learn C# against a candidate.
Why don't you create a new thread to solve the issue, and then join that thread with main cycle when the issue is solved?
Time to check in some kind of license ;)
To be fair if you are recruiting for C# developers and they have Java listed on their CV I would bring them in for interview, the jump between C# and Java is almost negligible
London Ontario, or London England?
Also about 90% of gaming on Linux relies on Mono and Unity.
Could be a lot of stuff, a recent poll showed that .net is one of the most used programming languages, but very specific to business focused companies. Maybe the uni is afraid students get contacted by recruiters as its in high demand, maybe the professors are lost in time, some universities still focus a lot on fortran, or maybe they just don know... About a year ago i went to a Uni because they requested company people to see if the students were meeting the criteria we were looking for, and one of the things i adressed was the stigma agaisnt .net and the uncessary focus on low level languages. The market decided, .NET is in high demand and it gets bigger by the day, and low level languages is too much, C and C++ are fine, but fortran is to low. Iam rambling **TL:DR maybe the universities are in their own bubble and dont know the market.**
That's a good reminder! Thanks. I'll definitely add the license ASAP. 
A friend of mine worked a couple of years on SharePoint before going back to finish his master's degree, and he kept getting calls from recruiters who saw he had SharePoint listed on his LinkedIn page. He eventually started saying something like "I'm currently finishing my master's, so in order for this to be worth my time the starting pay would have to be at least [ridiculous number]." He figured that it would scare off most people, and that if anyone was desperate enough to go for that number he'd at least hear them out.
Vue is React done right.
&gt; I prefer to think of webforms as the death fart of VB6. I prefer to think of web forms as the React/Angular/Vue of the ancients.
Just a few observations : 1. There is code that is commented out, is it your intention to leave this in? 1. Some functions have the "summary" documentation tag, others do not, if this is a library for public use, it might be an idea to have all public functions have documentation tags. 1. You have addressed your namespace issue. I would say if you want to release the library to the public, bite the bullet and change the namespace.
Thanks! :)
There's an on-prem version if you have SQL Server Enterprise with SA or pay for Power BI Premium. I.e. it's not cheap. Though neither is the competition.
Thanks for taking the time! 1. Those are mostly code I wasn't sure to remove entirely, I will remove them in the next commit and only leave intentional comments. 2. Noted. 3. This is a great suggestion, I will put this to work. 
I'm not going to say this applies to C#, but as an approach, I don't ever list "MS Office" as a skill. It is considered so basic stuff that if you list that, you might also list there "I can read, write and walk".
I remember dealing with lecturers and advisors in my college. They are generally older gents who offer good advise from their experience. However in their experience, in the way back when, C# wasn't in demand. They may be out of date or focusing on areas *they* are interested in development which might be in the Java/C++ areas reinforcing their beliefs that those career paths they themselves would choose would not be looking for c#.
Holy shit, is that not totally reasonable? What do you expect, for then to just have a string-anagram function memorised? 
As other People have mentioned, you can use threads. Just google C# thread, and do some reading! The Task API can also be used for the same purpose, it's a bit more "modern", but more abstracted (i.e., "more magic"). Another solution is to create two programs, one which does the checking, the other which take the corrective action. Then start one program, from the other, you can pass parameters to the program with (for instance) command line arguments. While the last solution might seem hacky at first, it's kind of nice. Because it is re-usuable, and you can trigger it manually if needed. It also makes each program less complex, in turn making them easier to maintain. But it might not be a feasible solution for you :)
I was completely unaware there were other London's. TIL This is Capital of Britain London, would the role still be suitable?
I purposely keep PHP away from my CV because I absolutely don't want to work with it. This, on the other hand, seems like really bad advice.
I build and maintain some back office applications for an international real estate company as a side gig. They specify that all web development, even new stuff, is webforms, because their internal staff can't understand anything else. And it's good money, but when I'm trying to cram a WF application into the react or jQuery design that the designer dreamed up and the client accepted, I have to work around a lot of dead ends. So it's not all rosey, and won't help you with new work and you feel old and out of date and you can't tell any of your developer buddies or they laugh. But the money is good.
Yeah I have seen this with Americans. I don't speak English all that well, but I write better English than a lot of people (this obviously does not mean I wouldn't do errors and even less means that we wouldn't have right here on this board better English writers). I'm actually an outsource myself and yes, price dictates these things way too much.
I do this daily, but when we are talking about anything bigger than "just a macro to do a trick or two", I really think VSTO is way better option.
Well in this case the work is more react than web forms.
With very specific methods like `ConvertToFrenchTime` it's probably better suited to remain a small company internal utility library.
My experience is years behind anyway. Unless you're a dedicated web developer in a company that is using the latest and greatest, you're behind. Now those of us that are full stack developers in companies that aren't using latest tech are basically screwed. Latest for me us MVC5 with jQuery. I hate web dev for this reason, it moves way too fast without apparent reason. While there are some small improvements, it's mostly just churn.
It's a pretty simple problem, just sort both strings and check they're the same. We wanted something along the lines of fizz buzz to weed out the people who are plain bad, but fizz buzz has become too well known to be a useful test any more, specifically because people do have it memorised. I will concede that this is a step up from fizz buzz though.
`FileIO.GetFileNameWithoutExtension()` seems to be a duplicate of `Path.GetFilenameWithoutExtension()`
Besides general programming and design, I was the go-to guy for our Visual Team Services builds, WiX installers, ans deployment strategies and configurations. Basically, I was a software developer and build engineer. Left that job and got a new one. I am now basically doing the same thing -- general development as well as build engineering. I did put WiX and continuous integration/deployment devop kinda stuff on my resume (among all of my C# skills and areas of expertise) but I was primarily hired based on my C# skill and sense of humor (or so I'm told). I fucked up when I offered to fix their Bamboo builds and installers. I really don't like build engineering but I don't mind creating installers with WiX or ClickOnce (we use Setup Factory at my current job which SUCKS). So now a large portion of my time (roughly 30%) is taken up by doing build-related tasks. When I go for my next job, I am seriously considering leaving out any build-related knowledge and just feigning absolute ingorance in that area if someone were to ask. It is a very useful skill to have (and important) but it is mind-numbingly boring to me.
Yeah, that's why we decided to bring him in for an interview at all, they're basically the same language. But there's still a learning curve where you're learning the core classes and minor syntactical differences. I wouldn't say I know one thinking others would assume I know the other.
I don't list my ability to drive stick, because I'm not American. 
Or do like me, go from C# to Java heh
You aren't supposed to start a system's design by delineating microservices according to most of the literature and advice I've read on microservices.
Web forms + react + WCF is my jam in those cases. I don't really use most of the web forms functionality, except using master pages, web controls and the like for splitting up templates. I would rather MVC, but I'm being greenmailed not to do it.
You should list skills that are valuable that you also want to work with in your aspiring new role.
I've known teachers/tutors/professors who never left university and have no real work experience at all. Mildly on topic: When I finished a game design course I somehow managed to get a job at a game studio. Tutor called me out saying "You're going to miss out on a lot of opportunities by not going indie!" (unironically). Worst advise I've ever had.
Dude the highest paying coding jobs i see are converting legacy to current
I guarantee that guy ended up hiring some developers specialized in MS frameworks and languages. His company is geared toward business and is aimed toward accountants. What do accountants (and business managers in general) love more than anything? Excel. What environment do most busInesses run? Windows. What databases do most companies run? MS SQL Server. What has a boat load of tools for compatibility and integration with all those things? .NET/C#. This guy definitely has developers with knowledge of MS frameworks - no way around it for him. 
To be clear, Rails is the framework and Ruby is the language.
When I looked at the template generated Angular project, I thought it looked a lot like web forms.
Oh, yeah, and you never run into any issues like that with open source stuff because of they are limitless ... /s I recall trying to fix an app that used Angular. They came out with Angular 2 which was drastically different and their work on the original Angular came to a screeching halt. Couldn’t get that app to make a burger at all, much less a 1.7 oz one. Ended up having to rewrite the whole thing in something that wasn’t started and abandoned is less than a few years. 
Ha ha ha, Windows Phone. I've been an MS tech dev my whole career, and was working in an MS-only company when Winows Phone came out and I didn't think it would last
Windows has always been huge in Enterprise software development. I think the people that "lul c#" are script kiddies rather than professional programmers. I wouldn't laugh at another professional programmer for their language, framework, etc. We're here to get work down and make the world go 'round. All the haters will be left in the dust.
Interesting... when I last looked at it ~2-3 years ago it was much higher. I'm guessing some old timers have retired.
Ever tried EpiServer? I used it years ago and it was dev and user friendly. The prices are higher than they used to be because SiteCore costs much more.
This is the real answer. The candidate didn't take the time to think about how to present themselves to the company they are applying too. It's not that hard to make a few different resumes and use the appropriate one depending on the job.
You really should be using longer namespaces. CompanyName.ProductOrProductLine.Project ...
It is if they fail. That's a simple problem and if they write more than 10 lines of code, we have problems.
Are you allowed to do this? In my company all code that I write at work belongs to the company. And I have no rights to share it anywhere. Don't get me wrong, just don't want you to get into trouble.
was true 15 years ago i guesss
Interesting. I am quite good at doing that while keeping the project working. 
Or the tutor was a C# guy and he keeps getting turned down for jobs near him because his students work for cheaper =P
yeah no that's just bizarre. Some college staff are clueless and simply don't interact with businesses in the real world. 
AFAIK London England is hella expensive. 45K sounds great for any London in North America, as none of *them* have stratospheric living expenses, but I wouldn’t want to survive London England on only £45K (before taxes).
Some of these look handy, some you need to be careful about; like that [naïve shuffle](https://blog.codinghorror.com/the-danger-of-naivete/). 
You should be able to change the namespace, without screwing up your existing code that uses it, through Visual Studio's Refactor -&gt; Rename.
&gt; threads Most people that aren't library authors should be working with Tasks rather than raw threads, as far as I know.
Thanks for clarification; it was just a general answer to a general question.
It's like seeing Microsoft aversion over at /r/java... It's freaking Oracle, how can you preach that Microsoft is bad, while sticking with **Oracle** ??? (I'm a Java dev at work, C# on my spare time)
Always felt Rails was a bit Windows-platform hostile. I'd rate developer experience with Rails-on-Windows somewhere between working with Assembly and C.
I wonder if you can get visual studio on disc still. Might want to look into that, as building ASP.NET applications with Visual Studio is superior to VS Code
F
I'll get it to work! Still thinking what namespace should I use though 
“LongerNamespace.Because.PeopleComplainedOn.Reddit”
Hahah maybe its also because I felt guilty for this "Common" thing
I'd go with hanlon's razor in this case, I think. Maybe the tutor meant he should put .NET on the CV instead of C# (not that I agree with that, by any means). 
Have the check and the failure handler share a mutex, with a separate mutex per check/handler pair. Call Mutex.WaitOne(0) on the way into the check, call Mutex.ReleaseMutex() on the way out. Then do the same in-out process for the handler. If the handler is still holding onto the mutex the next time the check runs, the WaitOne call will return false, and you skip doing the check or the call to the handler.
Would you give a simple example for that? I believe DbFunctions is the most confusing yet useful class in the library, was planning to add a readme about it. 
Basically I came across a bug that didn't allow me to delete nested directories. I believe I read an SO post somewhere stating that. So there would be exceptions if I simply used Directory.Delete(path, true). Maybe the function is working fine now? 
Shit I let my professor down. Thanks for the reminder :)
Oh, I didn't even use the function myself lol. Deleted and will update in the next commit. 
Something like that is dependent on the individual, so just because one or some people ignore the skills list doesn't mean it isn't still valuable. There are certainly others who like seeing a nice concise list of skills to know if they should even bother with the rest of the CV or not. Of course, as the other person said, project/job history is always more important.
Say you are from a time when it was a legit standpoint to be anti-Microsoft if you were into Open Source. You are still a total piece of shit if you give bad career advice to your students because of your ideology.
Not including C# is terrible advice unless you don't want to work with C#... and even then it is still a bad idea.
I don't think they have a restriction like that. Plus this is just a general library that is referenced by the real production code. I am in no place to disclose any actual application code I write outside work. Thanks for reminding though!
Good work following your gut. It really shows as well in the interview if you're a bit embarrassed of the things you've put as achievements and they ask you about them.
Which is ironic since Java isn’t open source or an ECMA standard. And Oracle sues anyone using their API.
You do have to consider this is probably the first time the kid has looked for an adult job, and the people giving him advice are giving him horrible advice. I would give him some benefit of the doubt, and possibly send his university a concerned email.
&gt;I don't think they have a restriction like that I guarantee they do. 
I assume you are having these people do the tests in person? I would advise against such tests as there is more to a person's ability to complete the test in a timely manner than just their competency in programming or logic. A test environment is often not very conducive to peak performance. It would be better to devise a test that can be done from home in a more relaxed environment. Make it less of a brain teaser, and more of a real world problem.
ಠ_ಠ if (isError) { ... } else { ... }
I am leaving this quote as someone who sees C# as one of the most progressive imperative/OOP languages: "An interesting thing about hiring people is, you look at ten thousand resumes over the course of a decade and you find that if certain skills are widely distributed in the population then they become completely meaningless. So, the fact that someone has C# on their resume doesn't tell me anything, it is like claiming that the programmer has a head; it is a widespread characteristic in the population, and the possession of a head is certainly a prerequisite to doing your job, but it doesn't necessarily tell me if you will do it well. I'm not claiming that knowing Erlang or Haskell mean you're a good programmer, but it does allow me to filter efficiently." - Bryan O'Sullivan, Director of Engineering at Facebook 
At least in my experience, I have found in most cases the Microsoft technology tends to be superior to the non-Microsoft technology. There are exceptions, but not many.
\&gt; .NET is a dandy *language*. '' mfw
You really shouldn't have month names in that. The framework provide a proper way to do it. https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/5hh873ya(v=vs.100)
https://docs.microsoft.com/en-us/dotnet/api/system.io.directory.delete?redirectedfrom=MSDN&amp;view=netcore-2.1#System_IO_Directory_Delete_System_String_System_Boolean_
What market was that in? Outside of San Francisco C# is highly popular everywhere.
Hmm..I'll take your word for that and find out. Thank you!
Thanks!
Yeah dude, be careful. I'm currently doing one month internship where I and 4 other students are working on Scooters sharing app that is only used for educational purposes and will never be used by others and we aren't even allowed to put it on our github to show it in CV or something like that.
Are you the prophet who will unite our people?
I've met plenty of people who simply didn't know what they were talking about just say "Microsoft is bad this C# is bad" while they hacked away at some shitty PHP script. That tutor probably thought it was good advice. They also probably have little relevant experience to actually make that advice...
I removed it for now :( I got too excited. Got great and warm comments from this sub though, so that's definitely a plus. 
I want to agree with you, but if you're looking for a job, it's best to list it anyway - recruiters don't seem to understand that X implies Y.
Are you hitting a problem due to #BreakingMyTwitter where Twitter turned off some APIs yesterday and put others (like the Activity info) behind a very expensive paywall? https://techcrunch.com/2018/08/16/twitter-company-email-addresses-why-its-breakingmytwitter/
Looks like it works...may just have been a bug in my own code but not the method
I don't quite get what you mean with those curly braces, should I use a single line conditional?
Oh that's a way to do it. Thanks a lot for your feedbacks!
&gt; Not every company hops on the hot language bandwagon. I'd say most don't. Systems have to last a LONG time. 10 years is probably pretty normal.
This: if (isError) { ... } else { ... } should be: if (isError) { ... } else { ... }
My bad, I thought the "yet" was implied and could be omitted in that sentence, English is not my first language 😄 Yeah I meant that I still haven't found a language like that, even though there could very well be one that I don't know of. Still, looking at least at the most common languages for things like programming apps (eg. Java, Obj-C, C++, Python, Ruby, Swift, Rust, Javascript..), no one comes close. *Note*: yeah of course C++ is "more powerful" than C#, here I'm referring to diversity of features and number of paradigms natively supported.
While I agree that it should be on there. I feel like you're asking the wrong crowed. 
Have you seen Razor Pages?
Its not "a way to do it", its "the way to do it", you better have a very good reason to be doing something else. 
Hi, MTA certifications are very basic and are meant for academic purposes, they have very little recognition professionally. I'd suggest to take MCSA exams instead. 
That's a great combo! Microsoft is focusing a lot in those technologies and they won't die anytime soon. 
I know. The conversation started as C# then .NET. I was just giving examples of different languages and frameworks that people claim are superior is all ways then they fade away quickly - Ruby on Rails is one of those. Angular is another. Now it’s Node and Django and whatever else. 
You don't need to compile it. It's available as a nuget package. They provide some info on the github readme: **NuGet** Now you can download the library using NuGet. Search for JetEntityFrameworkProvider Just use VS to -&gt; Manage Nuget Packages, then search for that package and include it in your projects that depend on it. Then you can reference/consume the EF provider. Note: Access is gross... I'd suggest not going that route unless you absolutely have to. I don't know anything about your situation though, so take that with a grain of salt. 
Thanks ill try that. What do you use for databases? Im going back and forth with the boss if we want to get our own sql server lics. 
For EF, I use MS SQL Server, exclusively. That's really where it shines. You can try it with Access or SQL Lite or MySql but MS SQL is where it's at. These days I don't spin up my own SQL Server, on premise or as a VM somewhere... instead I just use pre-made SQL VM from Azure. It's a snap to set up and you don't have to maintain anything. Acquisition, point your project to the VM's URI and you're all set. With AZURE and VSTS, you can start leveraging Continuous Integration and Continous Deployment more easily too. If you're company doesn't already have an azure subscription, they have all sorts of deals for new people. Right now you can get 12 months of free services - but I recommend BizSpark. You can apply with your Boss as your company and get 3 years of benefits, including $150 credits a month (which I don't run out of, using my credits on a lot of projects). Alternatively, I use MongoDB a lot too -- but not with EF. 
Yes. It combines the worst of Web Forms and MVC
I have an old common library too but I rarely use it except for the Extensions. Especially the Linq and Conversions. [Main Page](https://github.com/thesoftwarejedi/Torian.Common) [Extentions Folder](https://github.com/thesoftwarejedi/Torian.Common/tree/master/Source/Extensions) It’s license is open; I own Torian Technologies. 
If you can't get this working, you can use Tortuga Chain. It supports Access databases. (Why? Because Access SQL is weird as fuck and I wanted to see how far I could push my ORM design while still keeping feature parity across databases. I pulled it off, but man it wasn't easy.)
I knew about them getting rid of the old REST API so was prepared for all my stuff to stop, but no one else uses my app so I think I can get away without having to pay for any premium access
You usually don't need to know a language to do that, unless it's Perl
C# is a solid language (and .NET a great framework) -- I've built my career on it. You can do a lot with it; a lot more than people seem to realize. It is a perfectly viable option for building games in. Unity and Xamarin are getting better all the time. My Senior Design Project was an RTS built in C# -- pre-Unity. C# is even used as a scripting language in some engines; like CryEngine.
Well, that's semantics. If you "know" enough to fix bugs, you "know" the language. You don't need to have mastery. But, if you have experience, it's worth listing.
Well. Not really. It's the other way around actually. If you know C#, then you know java, because java is basically a retarded, useless subset of C# 3.0 from 2007, and it will continue to be so for probably 5 or more years until the bald, sexually impotent clown at oracle (some brian something something) figures out how to do real generics and value types properly.
Ok thanks!
That seems to be the feeling among MS people, I guess that is why they stay with it. I tried Visual studio on a consulting gig, and going from 0.5 sec compilation with Go to 20 second plus compile + startup every time i needed to start my VS project was the biggest "How could I ever live with this", and don't get me started on resharper, it almost killed my X1 Gen 6, 8th Gen quad core CPU. Jesus. All I need it to do is compile. The new VS was showing graphs and doing all kinda of things I never ever asked it to :)
OP said they didn't want to delay other checks, and this will do just that.
I'm wondering why the body of the auto-generated `Equals(object obj)` isn't return obj is Point other &amp;&amp; Equals(other);
We should be encouraging to people that are learning, not smug assholes.
Mutex.WaitOne(0) returns immediately. And I said to use a different mutex for each check/handler pair, so other checks won't be waiting on this mutex.
Unless I misunderstand OP, they want the same check to continue running every minute whether or not the corrective handler is running. Other checks are not relevant. You're code causes the check to be skipped, in effect delaying it until the corrective handler is finished executing.
depending on the kind of bug I'd say most devs should be able to change minor stuff in a language they have never seen before within 5 min to an hour unless it's some very obscure syntax. Like fixing wrong conditions, adding new validation etc.
you didn't really give us enough information, but my guess is that you don't have focus. I'm not sure what frameworks/whatever you're using, but I made a simple test in wpf, and I only got key events when the control had focus.
&gt; continue the checks on all other systems **except the one with the failure**, until the failure is fixed From the OP. Emphasis added.
If you can't talk him into SQL Server, then PostgreSQL is a better alternative than MySQL...though any traditional database will be better than Access. Access is limited to 2GB and is prone to file corruption, which makes it terrible for storing any valuable data. If you like the single file nature of Access for ease of backups and distributing, then Sqlite might be an option, but I'd only consider it if you are already set on having a database to distribute.
I use c# almost exclusively but I think his formatting is more readable, convention be damned
Now this I can believe. Recruiter : "C#, that's like C++++ right? So it's just two versions newer than C++ isn't it? Yeah that's old stuff no one wants..." And before anyone does it, yeah I know the lore that it was originally thought of as C++++ and then someone re-arranged all the pluses so it could stand apart better. “Do not cite the Deep Magic to me, Witch. I was there when it was written.” -Aslan
Interesting, I assume you'll be getting a needle in your eye sometime starting next week?
&gt;picturebox &gt;main form this is windows forms then?
yes
Stop what you are doing and get a realtime rendering framework. Everything that WinForms does will be in your way. Get SDL, SFML, MonoGame or some other framework and don‘t even bother with WinForms. WinForms was made with legacy technology, no hardware acceleration and very slow input handling. You want the exact opposite.
I’m sorry, but what does this have to do with C#? Either way, check out: https://www.raywenderlich.com/library?domain_ids%5B%5D=1&amp;q=Animation&amp;group_by_category=true
Thanks! I asked here because we are using Xamarin &amp; Visual Studio. Is there somewhere else you think would be better? Xamarin has a pitiful sub &amp; I don't think there is a VS one 
You should check if you can use Mssql Express in production (max 10GB/instance which is more than enough for a lot of stuff)
The thing is I'm used to do these mini app with picturebox's and all that, I really don't know how to programm on monogame and all that
Alright. You might also check out https://blog.xamarin.com/creating-animations-with-xamarin-forms/
You need to be using monogame 
It won‘t be as awkward as using windows forms events to move pictureboxes. The main problem with winforms is its performance, which is horrible. You could just download and install Monogame, read up on a few beginner tutorials and have better results in no time. WinForms uses GDI+, a very slow rendering system that is purely software and singlecore based. What you want is hardware accelerated realtime rendering with OpenGL or DirectX (the latter is used by WPF and UWP). The frameworks I listed earlier are all different kinds of high level abstractions that allow you to draw a sprite on the screen in just a few lines of code and moving it with just a few more lines. Windows events are either processed automatically or nicely abstracted so you don‘t have to bother with OS communication. Also: User interaction driven by events that are processed in a deep user interface framework are slow and don‘t hold up to realtime window event processing. I don‘t tell you to not use windows forms because I don‘t like it (I used it for a long time myself, although I moved to WPF quite some time ago), I tell you to not use it, because I have experience in game development and worked with all the technologies I named in all these posts in the past. I don‘t want you to struggle with problems you could overcome easily by simply changing the framework.
I didn't mean to be smug, it just seemed like the OP wasn't interested in doing what is right.
Hey man, it's dope. Do you have discord or something? Would like to discuss some things with you
I know I will get downvoted for what I wrote but I tried doing realtime gaming stuff with winforms aswell in the distant past and it was a nightmare. I don‘t want OP to make the same experiences after countless hours of work. Changing the framework for making a game is the best thing to do. (Also the post is not descriptive enough to understand what OP is trying to do, but *game* and *winforms* don‘t go hand in hand, that‘s for sure.)
Thats not inconsistency. Do you complain that they have added easier ways of doing things? lol.
Don't use Resharper it is stupid. 
It's tough. A way I get around this is I'll write whole libraries at home and put them on Github. This is actually how I got good at unit tests and code coverage. =) Mind you, some places are so cray-cray that they will try to claim ownership over anything you write while you work for them, on or off hours. If in your discovery you find out you are at a place like that, start brushing up your resume. But if you find yourself in the medium point where you can't put what you did for work out there, but *can* still publish your own projects (most places are like this, so long as what you are doing isn't "industry specific"), then maybe you should rewrite your library (on your own time and hardware!) and a good project to show it in use. 
Is this like an MS version of Redis?
Is this based off the old Fast search engine? Hence, faster?
It's the other way around, actually. C# is Java without the library ecosystem, which is a lot more important than a bunch of syntax features.
I hadn't even heard of LOLCODE before, so thanks for introducing me to that. It looks truly horrific.
I'd take more points off for not bothering to find out what the company uses before applying. 
&gt;Caching sys- tems such as Redis [36] and Memcached [30] are optimized for point operations, but are slow and depend on an external system such as a database or key-value store for storage and/or failure recovery. The combination of concurrency, in-place updates (in memory), and ability to handle data larger than memory is important in our target applications; but these features are not simultaneously met by existing systems. https://www.microsoft.com/en-us/research/uploads/prod/2018/03/faster-sigmod18.pdf
So it is a front end application wpf c# with an access database. 8 to 10 people will be using on this app. We think putting an instance on citrix since half the team is road employees. I have about 10 to 15 applications out there for this company. So i want to get away from access as a databse. This is the biggest one so far. It is an agency management system. It needs to track comission and other relevant information. Ultimite goal is to have this feed our check cutting program. Which will be audited. Any tips or suggestions are super helpful. 
Im just used to access. I know i need to move off it. 
Is this faster than slower?
I don't quite understand what is meant by this: &gt;Experiments show that Faster achieves orders-of-magnitude better throughput – up to 160 M operations per second on a single machine – than alternative systems deployed widely today, and exceeds the performance of pure in-memory data structures when the workload fits in memory. Anybody want to throw me a bone here? What "pure in-memory data structures" would they be talking about here? Like dictionaries? 
Heh. Trying to recoop that investment.
LOL what "library ecosystem" are you talking about?? ah yeah, the amount of useless retarded monstruous frameworks that only exist to compensate the java language's utter stupidity? Yeah, C# does not need that, thanks. Come back when your pathetic, retarded language finally manages to catch up with C# 3.0 from 2007.
Good book :) 
Well Microsoft puts annoying ads in Windows 10, spies on you and resets everything to registry stock settings in an OS you payed for.
Redis/Memcached
your ssh variable only exists within the scope of the using() block you have in OpenConnect. I expect that as soon as the scope exits the SSH connection is closed since it disposes the SshClient. In any case you probably want ssh as a field which you can then access anywhere in the class. 
do you mean akavache?
https://www.jooq.org/
You're right. I did not read OP closely enough.
LOL even with all the effort put into that piece of shit, it still looks like CRAP compared to proper LINQ: ``` .where(BOOK.LANGUAGE.eq("DE")) .and(BOOK.PUBLISHED.gt(date("2008-01-01"))) ``` what the bloody FUCK is `gt`??? Why is java so pathetic and retarded that you can't overload the `&gt;` operator? And why does every single fucking like include the type name? Ah, yeah, the java compiler is like a child with brain damage, you have to repeat stuff a lot before it can finally understand. proper LINQ: ``` var whatever = books.Where(x =&gt; x.Language == "DE" &amp;&amp; x.Published &gt; new DateTime(2008, 01, 01); ``` BTW, I haven't used any java, but I'm pretty sure that (since java's generic are useless and retarded), the parameters for `gt` and `eq` are of type `Object`, basically throwing the fuck away all kind of type safety, at which point you'd rather use javascript instead. LOL, retarded, useless, pathetic java cannot spend 5 seconds without ridiculing itself. 
To be fair, Access has no real alternatives. Having the UI and the database merged into one is really important for some scenarios.
People search me out because I build scalable backend systems in C#. Especially the scalable part where you have to process 10s of thousands fo transactions reliably on 1 commodity server is of interest to people. I have been doing a lot of experimenting with and reviewing code on Core 2 ASP.NET and it is pretty resilient to ‘stupid’ coding; it keeps chugging along even if you do really dumb things and it is easy to profile, at least under Linux, in production. In short; I have the opposite experience and that is getting more pronounced now that .NET Core 2 really makes for a very lean, easy to use and performant system on any platform. 
Been maintaining winforms for the last 4 years... im trying to implement a new angular project and im prepared for the insane backlash. 
As a private [field](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields) of the class itself. There would of course be no "using" block, since you want the instance to stick around.
It’s useless number I’ve already created a issue for them https://www.reddit.com/r/csharp/comments/9867x1/microsoftfaster_very_fast_keyvalue_storage_from/?st=JKYXX60N&amp;sh=f959136c to compare it rather than giving us 160m ops/s. It tell’s me nothing. 
System.Data.Sqlite is the old library for .NET Framework (not Core). Take a look at this repo for guidance: https://github.com/jasonsturges/sqlite-dotnet-core 
So it's actually Rails on Ruby.
That's definitely best part :D
Haven’t read the paper but it may help this (in terms of order of magnitude): we internally use a concurrent hash maps (concurrent dictionary in .net) and a brute force search of approx 1-2m rows takes about 6-10ms on a single thread on a vm on .net. We don’t use any indexing (hence brute force) It is very very loose scenario comparison but in my case worth looking in details at the algorithm. 
What struck me the most is that OP actually cared about what languages people put on their resume. Wtf, it's such a small step between Java and C#. If anything it might be a big warning sign to not work for you
Just a bit more info, the `using` block is what's giving you trouble. The `using` block works with classes that implement `IDisposable` (in this case, your SshClient) and when the `using` block ends, it "disposes" the class. In this case, I guess that "disposing" the SshClient closes the connection. So then your timer wouldn't work, because the connection is already closed by the time it runs. The `using` statement is nothing special. The following two blocks of code are (mostly^(1)) equivalent: using (var ssh = new SshClient(hosttextbox.Text,usertextbox.Text,passtextbox.Text)) { ssh.Connect(); var connectstatus = ssh.IsConnected.ToString(); outputlabel.Text = connectstatus; timer1.Start(); } Without `using`: var ssh = new SshClient(hosttextbox.Text,usertextbox.Text,passtextbox.Text)) ssh.Connect(); var connectstatus = ssh.IsConnected.ToString(); outputlabel.Text = connectstatus; timer1.Start(); ssh.Dispose(); So you see that `using` is equivalent to calling `Dispose()` immediately after your timer starts. The only benefit of `using` is that you can't forget to call `Dispose`, because it does it for you. It makes sense now that we can't reference `ssh` in `disconnectbutton_Click`, because the ssh connection is gone immediately after `OpenConnect` finishes. To fix this, I would remove the `using` block, and change the `ssh` variable to be field (e.g. `this.ssh`) and then call `this.ssh.Dispose()` in `disconnectbutton_Click`. I just looked at the source code of SSH.NET, and [it calls Disconnect for you when you call Dispose()](https://github.com/sshnet/SSH.NET/blob/bd01d971790a7c1fa73bad35b79ada90bf69e62d/src/Renci.SshNet/BaseClient.cs#L349-L356), so you don't need to call Disconnect manually. ^(1) they're not 100% equivalent, because really there's some try/finally statements to protect against exceptions, but that's not important for this discussion.
Pardon. Fixed it
This is a good idea for part of it! How would I join that thread back is my question though
I really like the idea you have proposed with the states. Below is the pseudo-code for my current thinking: var systems = [] var system = (ID, state) systems.push(system) This code above will be what initializes all of the systems and puts them in the systems list. foreach (var system in systems){ if (system.state == "fail"){ LogFailure system.state = "repairing" New Thread Run corrective action (pass in ID of system in question that needs fixing) system.state = "pass" } else if (system.state == "pass"){ LogPass } } timer.sleep(60000) The part that I am unsure about is what is the best way to store the system information, mainly its ID and state in a way that is easy to access and can be added or removed from the list in a clean and efficient manner. Thank you for all of your help!!
In your class declare ssh as a private field by putting the line private SshClient ssh; right after line 15 where you first create the partial class. This will make the ssh variable accessible to all Methods that you create inside of the Connect class, including your disconnect method and any timer methods or status check methods you decide to build in later on.
I should mention that in your OpenConnect method the line would now read using (ssh = new SshClient(hosttextbox.Text,usertextbox.Text,passtextbox.Text)) { ssh.Connect(); etc.
I hate MS's implementation of SQLite so much. They only did enough to get EF working. 
Tbh, you're probably right and I did probably place too much importance on that. Though the reason we did bring him in for an interview was because of how similar C#and Java are that we felt pretty confident he could pick it up if we hired him. This is the first time I've been on this side of the interview process so undoubtedly have a lot to learn. I think seeing numerous applicants who can barely string together more than a few lines of code does somewhat skew your judgement on people's abilities when looking through candidates.
As soon as the using block completes, I think the ssh connection will be closed. So while this answer would allow it to compile, I think the program would not work correctly. /u/DukeStyx would need to get rid of the using block entirely here.
I think I need some coffee. 
I've made some headway thanks to this! (a couple of objects have changed name): https://pastebin.com/9f2CtfYA Just seeing: var connectstatus = ssh.IsConnected.ToString(); complaining that ssh is null. Leads me to believe that it's dying before the timer can use it - so just need to find a way to keep it alive, wish me luck! Thanks again
Could it be a threading issue? I remember I had a similiar problem, when in a debug mode threads would alway run in a correct order - so bug wasn't reproducible in debug mode.
These contain all the third-party code you have used. I assume your first project didn't use third-party packages?
public IReadOnlyList&lt;ActivityEntry&gt; Entries { get { return _entries.AsReadOnly(); }} 
Rocksdb
What about this one? https://www.nuget.org/packages/Microsoft.Data.SQLite/
Looks like you're heading in the right direction! Happy to help if you run into any other issues.
There's a good chance you've already tried something like this, but I'd consider a quick change to do something other than displaying the radial dialog. Write some meaningless data to a text file, or anything you can check to confirm that it's receiving the input. 
Thanks man!! im fairly new to this wonderful programing world so i dont know much about Threading but already reading and trying some stuff to see if it works ! 
If you have the choice, consider the costs of each and how invested you are in the project.
I have 4 years professional experience with ASP.NET webforms in Visual Basic. I like to pretend I don’t. I may have to embrace it soon , though. I’m trying to get back into programming. 
They did blow 10billion on it and never did much with it...
Removed: Rule 4. As the others pointed out, that might be what they're looking for. Perhaps they're also asking about creating an indexer: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/
Will want to use ILMerge. It will merge all the assemblies into one for you. 
Just when i thought i have no hope at a career after school.
You could try a classic like a student or customer account system with a GUI. That would get you working with graphical interfaces, persistent storage (use a database, don't reinvent that wheel), handling all kinds of wacky user input, event handling (GUIs are rarely procedural like console applications are), etc. Bonus points if you can make it useful for yourself or someone you know. Another option is to talk to anyone you know who runs a small business; often they need something custom to make their lives easier. That will also get you into the requirements gathering, design, and user acceptance testing processes.
This is because you use third party libraries. This is absolutely fine! Navigate to a game folder, or (e.g.) Adobe Photoshop, and you will see loads of DLL's and other assets required. A DLL is (for simplicities sake) "compiled code", which you can reference and call. But since it is already compiled, it cannot be "compiled again" into your program. Instead, they have to be shipped alongside your application. DLLs are "programs without an entry point", but are otherwise pretty much binary equivalent to exe's.
There's a very good reason that Java doesn't support operator overloading. It was absolutely intentional by design. It's true, Java does have a different philosophy about things. and is therefore, different. Bolting something like LINQ onto the base language doesn't fit into that philosophy. There are some drawbacks to that, but there are also advantages. I'm forced to use C# because Microsoft garbage tends to only work with other Microsoft garbage. I don't think it's a terrible language, it can do some cute tricks like LINQ. If I want fancy language features I can just use Scala anyway.
If OP thinks it is super important to have a stand-alone exe, then this is a good solution. Otherwise, just "zip it and ship it", it will work just as good. :)
Wow. I'm going to try it later. 
Great! I'd like to hear your feedback.
Out of curiosity why are you brute force searching a Dictionary? That feels like a poor comparison since a brute force search isn't what a dictionary is for. Unless by brute force you mean a key lookup and not a full scan like I read it.
What are requirements for this to run in server? What kind of server and other dependencies are?
Please avoid as much of XAML as possible...
Here are the key differences as I presently understand them. **Compiling** CSHTML5 uses [JSIL](http://jsil.org/) to transpile C# to JavaScript, which means at the end of the day you are running JS. Frogui uses Microsoft Xamarin's compiler which results in true IL assemblies, no JS. At the moment the assemblies are interpreted (slower than JS) but when compiler is complete it will be *significantly* faster. **C#** CSHTML5 uses a very reasonable facsimile of C#. Frogui uses pure C#. **Mono for WebAssembly** CSHTML5 is experimenting with [Blazor](https://github.com/aspnet/Blazor) for Mono for WebAssembly. Frogui does not depend on a third party technology (Blazor is absolutely nothing like WPF, it's like [ASP.NET](https://ASP.NET) Razor for clients). Instead, we work directly with Mono for WebAssembly; no middlemen. **Debugging** CSHTML5 uses a simulator to debug UI. Frogui debugs the UI directly in the browser. I will update our FAQ with a more nuanced answer.
The requirements are *just as basic* as serving up the simplest of web pages, other than this: application/wasm MIME type needs to be mapped.
Thanks! You probably saved me a day of trouble.
Unless there is a notable outcry from customers for XAML, at the moment the plan is zero XAML and 100% design.cs files. I quote our [Frogui compared to WPF](https://www.lesarde.com/compare-to-wpf) page: design.cs files are used in lieu of XAML files, providing all the benefits of separate layout declaration, such as WYSIWYG design editing, without the need to introduce a second language. Design files address these XAML limits: ​ Not statically typed. Can't be compiled. Verbose. Does not lend itself to anything other than trivial layout. Becomes unwieldy. ​ C#'s improved declarative syntax obviates the need for XAML. In this fiery tweet storm on the topic, Xamarin's Miguel de Icaza states "I should have never added XAML," in reference to Xamarin Forms.
Oh cool! I suppose another major difference is that yours is free? (Or is it?)
What are devs supposed to do? Fallback to asm.js?
Wait, so you define your UI entirely in C# code? That seems awkward...
So, five minutes to learn how to build, execute, and deploy a new language, find the bug, fix the bug, and validate the fix. I agree, you can quickly learn the syntax of a single expression, but "5 minutes".
Oh hey, just wanted to point out your website is broken... on my 1080p monitor, the layout spills off the right side of the screen!
No, it doesn't. You can run PowerBI Report Server on-premises or in any Windows VM.
There will be a free *Community Edition*! Of course prior to v1.0 all the NuGets are free :)
The on-prem version works (with limited functionality) for free. My experience was the only missing thing was scheduled refresh. That is, well, kind of a big deal for non-technical users though.
Thanks! I'll look into DevExpress. Right now it's MS Access 2007 and I'm prepared do just about anything to get away from that.
Yea, that's the one I was talking about. But I don't remember if I last tried 2.1 or 2.01. The biggest problem I ran into was multi-statement batches. I think it would work if I rewrote my code to work like Access where you never have more than one statement per batch.
Cool! Any idea what kind of restrictions will be placed on the community edition? Or has that not been decided yet?
A calculator is pretty simple; just let the user type in numbers and do math on them! After that, maybe a Yahtzee-style dice game?
Oh, sort of like WinForms then?
&gt; Xamarin's Miguel de Icaza states "I should have never added XAML," in reference to Xamarin Forms. Tell him he's right. I use it every day and it's just more "crap nobody needs but we're stuck with now"
That stands for First In First Out vs Last In First Out in case OP isn't aware :)
Nice :) But what if your indie project is profitable?
Yes, absolutely will run on a Linux hosted server, assuming you can map the MIME type. Just to be clear, mapping a MIME type is a basic web server feature and has nothing to do with Frogui or it's underlying tech, per se. I have done the mapping using IIS Express and it was just a simple single entry. I will have to do some research for Linux and will post what I find on our [FAQ](https://www.lesarde.com/faq).
Or [il-repack](https://github.com/gluck/il-repack).
all that other stuff you listed mostly has to do with setting up a project for the first time on your machine which isn't what I was talking about. in my experience this usually has to do much more with the specific project than the language it's written in. so yeah with 'change' i meant just the code change. with the right CI setup you may even be able just change a line of code, push, and verify on the test system. without ever setting anything else up.
I will make sure he gets the message!
If you know of any downsides with the the WinForms approach, please share so we can avoid.
Also, do you have any suggestions for Frogui pricing models based on your projects? Your input would be appreciated.
I like XAML. That being said it is not obvious to me that it should have been added to Xamarin Forms but I'd rather do (working) XAML than HTML
The downside of the Win Forms approach is that GUI designers only work great with pixel-based UI. When you get into responsive stuff that must rescale and reorder things based on the size of the app/display the designers become so complex that they become pretty much unusable and people begin to prefer writing markup. Examples include the Web Forms and WPF designers.
You are just giving files to the browser. The server is irrelevant.
Using a variety of resolutions, including 1080p, I was not able to repro. Would you be able to mail me a screenshot?
It is possible that the key sending is failing because it never registered the "key up" from the shortcut used to launch it. So "key down" triggers it, it puts itself on top of the form, and "key up" gets sent to the radial menu window rather than the application window. So now when you send your own keys, the application thinks its a continuing combination with the shortcut already used to launch it. That might explain the difference between button launch and command launch, but it's a bit of a guess. Test for this by: 1) logging key up events in the radial window, or 2) introducing delays and DoEvents (or even better, OnIdle callbacks if the application API supports it) to make the Radial Menu window appear a few seconds after the shortcut keys are released. Note that Thread.Sleep on the main thread is not sufficient, the application window must be running the message loop (UI-responsive) during the delay.
I like XAML, too, but C#'s declarative features have matured so much since XAML was introduced that we expect design.cs files to be just as easy to work with, with added benefits XAML just can't offer.
Well said!
Good question. Trending that way. What are your thoughts?
Great points. You will be happy to hear that in our designer you will be able to see your layouts in a wide variety of display formats all with the click of a button. WPF-inspired, yes, but Frogui is modernized for modern UI development.
Did he say why? I come from a UI background where we literally had to carve buttons into slate and xaml doesn't hurt me the way some previous tech's did. This always comes as a surprise to people, but UI stuff is complicated. It's 50% design, 50% psychology, 50% coding and 50% squeezing 200% into 100%.
Thanks for feedback. Quoting myself below: &gt;You will be happy to hear that in our designer you will be able to see your layouts in a wide variety of display formats all with the click of a button. WPF-inspired, yes, but Frogui is modernized for modern UI development. I will look into this and make sure we have something comparable: &gt; double clicking on a control to add code is a must-have that XAML does away with :/ 
Thanks!
Thanks just the same :)
That's interesting view and is something that is worth exploring but I have to say the current state of your design.cs files do not expire confidence - https://github.com/lesarde-co/frogui/blob/master/Samples/Demo/TipCalculator_Demo/IntegerBox.design.cs That is not something I'd be willing to write by hand at least not over XAML. Maybe you can massage the API to make it reasonable to write this thing by hand. For example if you can avoid declaring the fields separately and only create a control tree. The benefit of declarative languages for UI is that you declare the control at the point in the tree where it appears and give it an id right there. With C# you need to declare the field somewhere and then build the tree. It is not obvious to me how an API like this can be built with the C# declarative features if referencing the control as a field in the code behind is a requirement.
He found it verbose. And I agree with you, compared to the much of what preceded XAML, it was a nice step forward. And it does the job well in many scenarios.
It is not only seeing the result it is also the UX of the designer. The WPF designer has a lot of options but the complexity of the responsive layout systems makes it easier to just step into righting markup rather than fighting all the rulers and small options for docking. With Win Forms you kind of accept that your app will not be responsive (which is fine for great many apps) and happily drag and resize components with your mouse which is very easy.
Good points! Yes, the sample is presently misrepresenting what the design.cs files will contain -- they were hand-coded to start working out ideas. I will update them and note this in the demo. Thank you for pointing this out.
The strength of XAML and other markup languages is that they are a rough analog of the actual visual output. It's intuitive how changes will impact the output. The `design.cs` files used by WinForms were not good analogs; it was like describing a graph in terms of a set of unordered coordinates. To get around this limitation, WinForms used a built-in design UI inspired by the VB6 tools. You almost never touched the design.cs code; instead, you just dragged and dropped objects to position them on the form, then them to adjust property values and add events. It was extremely easy, intuitive, and powerful. Another non-trivial benefit of this approach was that UI elements fit easily into the OOP paradigm; they were objects that could be interacted with like any other object. WPF attempts to bridge this gap by binding UI elements to code objects; however, since an object's state cannot (necessarily) be wholly represented by markup, this approach has definite limitations. The downside, as /u/Eirenarch alluded, is that WinForms resulted in UIs that didn't respond well to changes in form factor. You could anchor objects and have them dynamically resize, but objects wouldn't "re-flow". I believe there are answers to this. All modern visual frameworks already include the "grid" concept and most can designate a cell to either "flow" or not. The challenge of representing visual interfaces in code are not novel coding challenges: * The format needs to be both readable (as an analog to the output) and terse. It cannot "get in the way". It doesn't look like frogui does this well; it looks verbose, and it's not immediately clear how the input (such as a list of empty row and column declarations) get mapped to an output. * There needs to be an analog to CSS (that is, styles need to be inheritable and easily assignable). Things like fonts, borders, colors, etc. need to have strong template capabilities. * In my opinion, it needs to be strongly typed. I know you mentioned that as a concession, but I'm not sure why it is a concession, and for me at least it removes any interest in using the framework. * The objects need to persist so that the state of the object doesn't need to be represented by markup. To me, this implies a structure like this: public class Frog { //UID allows object updates to be assigned to persisted object public int UID { get; set; } //Every item can have sub-items so the object can hold a tree //structure, just like a markup language public IList&lt;Frog&gt; Children { get; set; } //every item has a style if it doesn't use it public Style Style { get; set; } } public class Style //I can see a good argument for making this a struct { //most common properties public Color Color { get; set; } public Font Font { get; set; } public Border Border { get; set; } //etc public Alignment Alignment { get; set; } //kvp for other attributes, but mostly, extra attributes //should be derived by inheriting from style, then assigning //the derived class to the frog public Dictionary&lt;string, object&gt; Attributes { get; set; } } Just my .02. Good luck with your project. :)
[Screen Shot](https://imgur.com/mEOS2XA) from Firefox dev latest version
I must have misspoke if that's what you heard: At the moment, our design tool is not ready for use so the samples were hand-coded. When the design tool is ready, the experience will be very similar to Visual Studio and Blend's WYSIWYG editing of user controls, which allows a designer to work strictly with designs, coders to work directly with code-behind, or any combination between. Since I am writing the design tool, I invite you to be a test pilot to make sure it meets your needs!
[Uno Platform](https://platform.uno) is a very similar framework, based on UWP however, not WPF, and targets android/ios too. They are going with the completly free route, and maybe enterprised paid support eventually. It is also open source.
Thanks for the head's up! Looks solid. I will definitely scrutinize! UWP is generally regarded as [less powerful](https://github.com/jbe2277/waf/wiki/UWP-vs.-WPF) than WPF, but UWP is more modern. Frogui is based on WPF but has been modernized. For example, we use UWP's device input API (mouse, touch, stylus) instead of WPF's. And Frogui takes advantage of web features such as units of measure; instead of WPF or UWP's **double**, we use a **Length** struct capable of representing %, cm, em, ex, in, mm, pc, pt, px,vh, wv, vmin and fr.
I mean, I don't think you'll find anyone who'd say "I'm glad this isn't open source". I'd say if you don't care about selling it in the future, then I don't see any reason to not open source it. Ultimately it's you're decision though 
I didn't know WPF supports design.cs files! What kind of new declarative syntax are you talking about? I just might use this!
&gt; I mean, I don't think you'll find anyone who'd say "I'm glad this isn't open source". Pretty funny! All options on on the table...
WPF does not support design.cs files, but Frogui does. At the moment, we are working out the exact specification of our design.cs files, but they will be C#. Since C# has nice declarative features, the user experience should be very similar to working with XAML either with editors or by hand, but with the benefits of C# (tighter debugging experience, etc.).
&gt;logging key up events Thanks Alex!! sounds like that most be the problem. each time a button is clicked on the radial menu it closes the radial menu and execute the shortcut like this `private void B2_Click(object sender, RoutedEventArgs e)` `{` `Close();` `PressHelper.Keys(ViewModel.CurrentButtonTwo.Shortcut);` `}` im trying this on the helper method hopping that the time delay and programmatically sending Enter will clear up the initial shortcut sent to initiate the radial menu `public static void Keys(string command)` `{` `var t =` [`Task.Run`](https://Task.Run)`(async delegate` `{` `await Task.Delay(TimeSpan.FromSeconds(1));` `});` `t.Wait();` `System.Windows.Forms.SendKeys.SendWait("{Enter}");` `IntPtr revitHandle = System.Diagnostics.Process` `.GetCurrentProcess().MainWindowHandle;` `foreach (char letter in command)` `{` `OneKey(revitHandle, letter);` `}` `}` sadly still isn't working as it should :(
I appreciate the great feedback and suggestions. I'm afraid I have misrepresented what design.cs files will be! To be clear, the only reason WinForms has been mentioned (not by me, but another member) is because of the pure coincidence that they, too, use C# for layout. That is where the similarities end. Frogui *in no way* is basing any design on anything having to do with WinForms. Everything you say about the visual graph, etc. absolutely is spot-on and will be a part of design.cs files. Our design.cs file format is a work-in-progress so the community will very much drive how they evolve.
Don't. This project will become irrelevant if closed source as open alternatives will pop up, and not being able to fix bugs or debug all the way down into the framework are non starters for us
Setting the "KeyPreview" property of the form should be sufficient.
Thanks! It's now fixed.
Yup, I understood that. :)
&gt; I know I will get downvoted for what I wrote but I tried doing realtime gaming stuff with winforms aswell in the distant past and it was a nightmare. I've done it three times and it worked well enough (An Arkanoid clone and a Tetris Clone). The Arkanoid clone definitely outgrew GDI+ though. I've found it best to have a proper Game Loop running on a separate thread. then Invoking onto the main thread to Invalidate() and Refresh() the PictureBox, and handle paint in the PictureBox paint event. I've adopted an approach to try to make it easier to port to a different Renderer later (at least in the more recent Tetris clone). Actual Logic and drawing is separated for each entity and therefore it would need a new interface method that accepts the appropriate renderer object for the framework (As opposed to a Graphics target).
I did fix an obvious problem on [lesarde.com/frogui](https://lesarde.com/frogui) page, but have not been able to repro what you described. Would you be able to post a screenshot and the resolution?
Would you be interested in experimenting with our design tool when available to provide feedback?
That sounds interesting. Is the source code available online somewhere, I‘m interested in your setup? But: Judging from what OP wrote like *I made some small things in WinForms before* didn‘t sound to me like someone who would setup a multithreaded system with a gameloop. There are reasons no one uses WinForms for realtime stuff, especially games (except maybe you).
Hindsight is always 20/20 :) Being a pioneer is literally diving into the unknown and laying the foundations upon which mountains are built.
Talk to some of the people working on similarly scaled projects and see what they say. You're competing with Electron more than Xamarin for example, so reach out that way I guess. I wish I could offer more :) I'll follow with interest :)
&gt; How big is your team? I am a talented team of one and wear many hats! That said, I am focusing on building interest and then adding to the team. &gt; How fast can we expect new features? Rapidly. It took several months of experimenting to come up with a robust engine to synchronize web interop. That engine is now in place, so features have been added quickly. In the last week, 25% of the controls were added. &gt; the api seems slim right now and big things are still missing Definitely true. Which features would be you like to see added for the next release?
Here here! Mountain construction starts today :)
Have you considered Web Components as implementation for your controls? This will allow you to be both HTML compatible and keep your framework specific controls.
I believe the commenter you're replying to is saying that the normal hash key lookup in a concurrent dictionary takes 6-10ms in his case.
But the design tool will work with some representation, right? My understanding is that the representation will be C#. Do you intend to promote this representation as something suitable for editing by humans? To be fair the only design tool that doesn't require humans to edit the representation that I know of is the Win Forms designer and we already discussed the tradeoffs they make.
I disagree on more readable, I agree on conventions be damned.
I would enjoy an example when you are back at a desktop, this doesn't make as much sense to me as things injected SHOULD be inited when whatever scope you set hits, but not the constructor of the class, no? I admit I am no DI wizard, but I struggle with this use case as well.
Haha, you discovered the *infinity bar* :) Kidding, of course. Thanks, I'll look into it. Thanks a bunch.
Definitely!
You should certainly post on this subreddit when you have an update. Other than that I am not a great person to ask, I usually don't download betas and stuff I only follow the posts and comment on what I read. People who engage in the actual dev process may prefer other ways to communicate.
Cool. So in your opinion, it wouldn't be considered bad form to essentially re-post an updated message if a new release was ready in a week or two?
Thanks again! yeah, it's mostly for petty aesthetic reasons, and I'm so far under the impression that those merging tools hurt mono support which is important to me.
Don't be sorry! In the contrary, I am grateful you took the time to scrutinize and provide valuable feedback. You are spot-on on all accounts. TL;DR - most of what you mentioned is upcoming. &gt;Your calculator demo model.cs class is littered with UpdateDisplay(); calls. There is no concept of data binding? INotifyPropertyChanged or ICommand etc? Data-binding is a P1 feature that may make it into the next release and the sample will be updated accordingly. &gt;Your demo is so slow, I can't imagine how slow a business app with lots of controls might be. I know it's probably because the IL code is interpreted currently, but that's just not usable at this state. Exactly, it's due to the IL temporary state of interpreting. I will be looping back with the Xamarin team to get an estimate for when the compiler will be ready. &gt;The buttons in the demo don't work like I would expect, no hover over effect, no pressed effect etc. Styling, data-binding and visual states will all address this soon and the samples will be updated. &gt;You might want to rethink this: Thanks for heads-up. &gt;In your calculator demo, I don't see a real separation of concerns. It doesn't show any support for themes. The UI is created in the CalculatorDemo class, all the .designer class does is setup the grid and define some colors. And the model is tied to Lesarde.Frogui.Controls via the PadButton. Yes, themes are definitely coming but had to wait for more fundamental things. &gt;This renders to html/css, which makes me doubt there will ever be any good support for themes, transformations etc. If this would render to WebGL/OpenGL I would be a lot more interested in it. Actually, themes will be easy with how things are done internally. That said, I'd love for you to elaborate and if you had any links to underscore your point, all the better. &gt;XAML is not that great, but at least you can write it by hand. Your .design files look way to verbose I would never want to write that. The one place I'm getting dinged today is this very point. I clearly misrepresented the design.cs file format in the samples. This can be chalked up to wanting to get something to developers quickly, knowing there would be some compromises. &gt; I'm sorry, but I don't see WPF here Yes, squinting is required, but that will improve with each release.
Would it be possible to make a Chrome Browser Extension/add on with this? It needn't be uploaded to the store if they have restrictions, but maybe just for personal use? I have need of a browser extension in Chrome but it would just be too slow in JS.
At first glance, it should be no problem, but I haven't made an extension myself. I'd be happy to work with you, making sure Frogui was doing what you need of it and adding any missing features to make it happen (assuming they logically fit into the product). Just keep in mind that at the moment, Frogui's net perf is slower than JavaScript because the IL is interpreted, but will be much faster once Microsoft Xamarin finishes their compiler.
I've been getting similar errors when trying to write to a folder like C:/someFolderName/ on a Windows Server install. Despite granting full permissions to 'Everyone' just like you, I still kept getting UnauthorizedAccessExceptions. In the end, I resorted to writing to another path.
Yeah, something tells me legacy scripts aren't going to have a great CI setup.
Personally, a framework like this being closed-source is an immediate showstopper. In my time as a web developer I don't think I've ever actually used a third-party, closed-source dependency in the front end. (Come to think of it, I don't think I've even encountered one) As u/jtthegeek said in another comment, "... not being able to fix bugs or debug all the way down into the framework are non starters for us". As someone whose day job currently entails migrating an AngularJS app to Angular 6+ (and an AngularJS app straying so far from 'modern' AngularJS best practices that it's basically the worst-case scenario for a migration, no less) I feel like I can safely say that not being able to see what's actually going on in the framework would have left that project dead in the water before it even got started. It ultimately leads to projects being trapped in whatever closed framework they started with unless they have the capacity and competency to pull off a full rewrite without fucking it up. I have lived this reality as well, and it's one of the most hostile-feeling forms of lock-in there is. That's just my opinion based on a single overwhelmingly negative experience, though. Closed-source frameworks *can* be lovely to work with (I'm personally a fan of Apple's Cocoa, and Interface Builder especially) but I would imagine that the support staff you need to make it a success to be much costlier than would be the case for an equivalent open-source project. But again, that's just me.
You could use reflection, then get the enum type string and create a class based on that string. I found the link below as well which uses a string to create a class. [https://docs.microsoft.com/en-us/dotnet/api/system.activator.createinstance?redirectedfrom=MSDN&amp;view=netframework-4.7.2#overloads](https://docs.microsoft.com/en-us/dotnet/api/system.activator.createinstance?redirectedfrom=MSDN&amp;view=netframework-4.7.2#overloads)
This won‘t work because (if I remember correctly) enums can only be numerals. I would create a dictionary that links the enum to the object, if that‘s your intend.
Here's an example of a pattern I've used in several projects for more powerful enum-like types. I've gone as far as to create an abstract base class for this type of functionality depending on the project and how many of these types of classes I need to make, but that's not necessary. See below for an example implementation of the concept you have in your imgur link. public class Category { public string Name { get; } public string Color { get; } public static Category Football { get; } = new Category(name: "Football", color: "#FF0000"); public static Category Handball { get; } = new Category(name: "Handball", color: "#0000FF"); private Category(string name, string color) { Name = name ?? throw new ArgumentNullException(nameof(name)); Color = color ?? throw new ArgumentNullException(nameof(color)); } } And example usage: Category firstCategory = Category.Football; Category secondCategory = Category.Handball; Category thirdCategory = Category.Football; bool footBallAndHandballAreEqual = firstCategory == secondCategory; // returns false; bool footBallAndFootBallAreEqual = firstCategory == thirdCategory; // returns true; This pattern is pretty foolproof, and works similarly to an enum where you can compare enum values and still get expected results even though you're comparing reference types, since the properties are backed by static singleton instances. Note that the constructor in the class is marked as private so that the only way to create a new type of category is by defining it within the class itself. 
Lol. I know people talk shit about Edge, but Safari is the bane of my life whenever I do front-end.
I've never really touched WPF, but this is some amazing work. I seem to recall Frogui being mentioned here a few months back, but this is the first I've actually seen of it. Definitely inclined to poke around with it when I have a chance.
You could just wrap it in a Boolean condition that is set to true when it’s run: if (!hasRun) { hasRun = true; &lt;rest of code&gt; }
You can create custom attributes and apply to your enum values. You can then extract these attributes using reflection and even cache the resolved values if performance is important. 
Check where it is called from and make sure the caller only does so when it's actually needed. This doesn't have anything to do with what the method itself does. 
where i put this code ?
The real question here is what are you trying to achieve? There might be a simpler way to do it, but without the context we wont really be helping you. 
oh! i am calling this with invoke in Update method. The problem is calling from update method i guess?
Or (hopefully) in some near future [IL Linker](https://github.com/dotnet/core/issues/915) which will not only merge all dll but also remove unreferenced assemblies.
If the corresponding attributes are immutable, simple types and you only have a few of them you can use C# attributes and extension methods with a dash of reflection: sealed class CategoryNameAttribute : Attribute { public string Value { get; } public CategoryNameAttribute(string value) =&gt; Value = value; } sealed class CategoryColorAttribute : Attribute { public string Value { get; } public CategoryColorAttribute(string value) =&gt; Value = value; } public enum Category { [CategoryName("Football"), CategoryColor("#FF0000")] Football, [CategoryName("Handball"), CategoryColor("#0000FF")] Handball } public static class CategoryExtensions { public static string GetName(this Category @this) =&gt; @this.GetAttribute&lt;CategoryNameAttribute&gt;().Value; public static string GetColor(this Category @this) =&gt; @this.GetAttribute&lt;CategoryColorAttribute&gt;().Value; static TAttribute GetAttribute&lt;TAttribute&gt;(this Category @this) where TAttribute : Attribute { var fieldNAme = Enum.GetName(typeof(Category), @this); return typeof(Category).GetField(fieldNAme).GetCustomAttribute&lt;TAttribute&gt;(); } } ---- However if you don't like reflection or your metadata aren't really suited to this approach you can also go with a simple switch statement: public enum Category { Football, Handball } public static class CategoryExtensions { public static string GetName(this Category @this) { switch (@this) { case Category.Football: return "Football"; case Category.Handball: return "Handball"; default: throw new ArgumentOutOfRangeException(nameof(@this), @this, "Unexpected Category type."); } } public static string GetColor(this Category @this) { switch (@this) { case Category.Football: return "#FF0000"; case Category.Handball: return "#0000FF"; default: throw new ArgumentOutOfRangeException(nameof(@this), @this, "Unexpected Category type."); } } } ---- I prefer the former where possible simply because it ties the metadata directly to each value in the enum; whereas the latter approach runs the risk of forgetting to update a switch statement when adding a new `Category`. On the other hand, the second approach lets you return more complex values and the attribute approach can get unweidly once you have more than a handful of metadata cases. Side-note: Enums should be named singular and not plural (e.g. `Category` vs `Categories`) unless you're creating a [bitfield enum](https://stackoverflow.com/questions/8447/what-does-the-flags-enum-attribute-mean-in-c); and I personally think adding `Type` on the end is a bit redundant.
If every enum case has the same properties then what you already did is basically the way to go. If every enum case has a different set of properties, then you should make a class for each case and an abstract base class to represent the enum. Then you can use pattern matching to work with it.
Personally, I don't check anything other than e-mail (or reddit messages) with any regularity.
Can confirm, that's a question and a class. Glad we could clear that up.
In my opinion the success of this approach will depend on the quality of the C# representation and how easy it is for editing/reading by humans. In addition the success of the approach does not necessary mean success of the project because there are so many factors which can kill a project or even push it to success. I mean it is not like JS is successful because it is any good... I certainly wish you luck. Your plan is one of the more ambitious but it is a high risk/high reward kind of thing. If there was some website where I could bet on the approaches that I have seen announced so far (the various C# to JS transpilers, Blazor, Uno and your project) I'd bet on Blazor because it already has popularity and because it is the less ambitious approach as it relies on HTML and CSS as its view language. I hope Uno or you produce something that is more usable in practice but honestly I am not a big believer. Please prove me wrong
I'd certainly want to see these posts and follow the project although every week might be a bit too often, will you really be able to make a meaningful release every week? Just make sure to provide bullet points with the most interesting items. I'll certainly upvote these posts. Half the posts here are people asking how to get into C# and I think most readers will appreciate posts about an actual C# framework especially if you stick around (like you do now) to discuss design decisions.
it worked thank you! i set another condition to call only for once and its working only for one frame now. thank you again.
Really... Do some googling... Basic 101 of C#. This is not the /r/domyhomework subreddit.
* [Fields](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields) * [Access modifiers](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers) * [Dictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?redirectedfrom=MSDN&amp;view=netframework-4.7.2) I'm too lazy to dig up/figure out where to send you to illustrate initialization, but that just means assigning a variable a value when it's declared/created. You can initialize the field in its declaration, or you can initialize it in the class's [constructor](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors). This might also be a better post of r/learncsharp or r/learnprogramming. This is not a sub for doing your homework, and you should put more effort into your posts in the future.
&gt; a minimum gross product revenue This way is better than company revenue. My school insisted that students weren't allowed to use the current versions of Unity (despite having classes in Unity) because the school made too much money.
There are a ton of ways to do this. Where exactly are you stuck?
Thank you! Yes, I posted a few months ago with a proof-of-concept, but it didn't have any of the UI yet, just console support. Please do check it out and let me know if you have any questions or feedback.
Hi, This is normal, but good practice is to put all those libraries inside a new folder in your application folder. Something like /Libraries after don't forget to update your reference configuration to point to folder.
Noted. Thanks I appreciate the good advice. &gt;will you really be able to make a meaningful release every week? That would be atypical, but some of the controls will be really easy to implement (radio button, check box) so it's viable. That said, maybe I'll update the NuGet as features come online and wait at least two weeks before messaging the same subreddit.
Thanks so much for the detailed thoughts. Your points are legitimate. The reality is, *you* are a part of the market and I have to make sure I am providing what the market needs. I am a big fan of open-source, closed-source and everything in between. Most important for me is building a business around this idea so I am completely receptive to whichever options enable that. How receptive open-source projects run for profit are you? Any idea how viable that model is?
I never thought of C# in that way, I will check out the book, it sounds interesting.
&gt;In my opinion the success of this approach will depend on the quality of the C# representation and how easy it is for editing/reading by humans. Thanks for stressing this point. If there was one area people focused more on today than others, it's the design.cs file. Makes me think the sooner I get it sorted out and available the better. &gt; honestly I am not a big believer. Please prove me wrong Trying my best. I very much appreciate all the great dialogue with you today. Please stay in touch!
Out of curiosity, what does the bas class look like?
Put together some SOLID principles and Design Patterns to make a simple version of a trading card game like Hearthstone.
You need to replace the \n with \r\n.
I would personally vastly prefer open source - you can make money off open source, quite easily in fact. You could dual license it based on use - Commercial Use or Support requires a license while for normal people it could be MIT. As an example.
Removed: Rule 4.
Great perspective. There's been enough chatter today about open-source that I'm going to spend more time researching, which of course(!) will include getting Reddit's opinion.
I figured out what the problem was. I ended up using the same code as the RTF to import the Text with the dataformat switched to Text. var memStream = new MemoryStream(Encoding.Default.GetBytes(docText)); rtbDocument.Selection.Select(rtbDocument.Document.ContentEnd, rtbDocument.Document.ContentEnd); rtbDocument.Selection.Load(memStream, DataFormats.Text); This caused the text to be double spaced in the richtextbox but not in the rtf file which is why I did not use that method in the first place. Then I used this code: Style style = new Style(typeof(Paragraph)); style.Setters.Add(new Setter(Block.MarginProperty, new Thickness(0))); rtbDocument.Resources.Add(typeof(Paragraph), style); Which fixed the issue. Ultimately I ended up switching that code out for the same code in XAML &lt;RichTextBox.Resources&gt; &lt;!-- This style is used to set the margins for all paragraphs in the FlowDocument to 0. --&gt; &lt;Style TargetType="{x:Type Paragraph}"&gt; &lt;Setter Property="Margin" Value="0"/&gt; &lt;/Style&gt; &lt;/RichTextBox.Resources&gt;
I've run into some bugs with it during migrations. I don't recall what the issue(s) were, but I do recall that EF tried to do something that SQLite doesn't support. Other than that, it has worked fairly well.
Visual studio and open the SLN file and build from there. 
I'd say I'm quite receptive to that. (I was actually considering editing my previous comment to reflect this before you replied) A good example of a successful open-source project run for profit would probably be JetBrains' IntelliJ IDEA (https://www.jetbrains.com/idea/). They have a 'Community' edition that's free, and an 'Ultimate' edition that is sold under a subscription model. Community is fully open-source (to the best of my knowledge) and Ultimate is Community + some closed-source plugins. Technically, anything Ultimate can do, Community can do as well (with considerable additional difficulty). I subscribe to Ultimate. IntelliJ Community is a fantastic IDE that I used as-is for a long time, but Ultimate's paid goodies make so many tasks so much easier that it's absolutely worth the dough. I could see you succeeding with an open-source sort of 'core' framework but putting a significant amount of 'convenience' (perhaps pre-built widgets and such) functionality behind a modest paywall. You could keep the convenience functionality either closed or open-source. That sort of thing being closed-source doesn't really bother me because, if you take the JetBrains approach, it would be stuff you could conceivably build from the core framework. If I run into some sort of undesired behavior and can't inspect the source of some random widget that I could, technically, make myself, I'm just going to be a bit miffed that I have to do some extra work but I'll get over it (and probably just switch back to your widget once it's fixed). tl;dr - Give away tools, charge for toys
The Output section (on the bottom left corner of VS) should indicate whether your build was successful or not. If the build was successful, the *.exe file should be in dracula/FuryOfDracula.ConsoleInterface/bin/Debug 
I know this is Reddit, and I will likely get shot, But this is how I would solve it. public struct Category { public static Category Football = new Category("#FF0000"); public static Category Handball = new Category("#0000FF"); public string Color { get; } private Category(string color) { this.Color = color; } public bool Equals(Category other) { return string.Equals(Color, other.Color); } public override bool Equals(object obj) { if (ReferenceEquals(null, obj)) return false; return obj is Category category &amp;&amp; Equals(category); } public override int GetHashCode() { return (Color != null ? Color.GetHashCode() : 0); } public static bool operator == (Category first, Category second) { return first.Equals(second); } public static bool operator != (Category first, Category second) { return !(first == second); } } I would keep it in the value type family.
i am new in reddit , sorry xd , but thanks for information :D 
:´v 
I'd be more enthusiastic if it was based on mvc rather than code-behind.
In the future it's a good idea to read the question fully; he said he was able to open and build it in Visual Studio, he just didn't know where to run it.
 now = DateTime.Now; now.AddMinutes(35);
You could make a custom class that does this pretty easily. 
If you can get your 1:25 into a DateTime variable you can use .AddMinutes(NumberOfMinutes) Maybe this SO article will help? https://stackoverflow.com/questions/36122397/convert-time-string-to-datetime-in-c-sharp 
 System.DateTime dt = DateTime.Parse("1/1/2000 1:25"); System.DateTime result = dt.AddMinutes(35); System.Console.WriteLine("{0}", result.TimeOfDay);
You could use a DateTime and only use the TimeOfDay component. I. e. init it to an arbitrary date, add your time, and use the TimeOfDay property to get back the time.
For context, it would be helpful to know what frameworks you've used in the past. Would you please share?
https://docs.microsoft.com/en-us/dotnet/api/system.timespan
.NET has 4 different types currently for representing Date and/or Time information. The `TimeSpan` class represents Hours, Minutes, Seconds, Milliseconds and Ticks. `var time = new TimeSpan(1, 25)` `time += TimeSpan.FromMinutes(35)` 
TLDR use TimeSpan
&gt; There's a very good reason that Java doesn't support operator overloading Yes, because java language designers KNOW that most java developers are clueless retards who don't know shit and hence they cannot be given """advanced""" features such as operator overloading. For fucking sake, you cannot tell me with a straight face that this is an okay thing. &gt; Java does have a different philosophy about things Judging by the roadmaps and feature lists of java 8, 9, 10, 11 and whatever is being talked about right now in terms of language features, their philosophy is basically **"lets imitate whatever C# did 10 years ago, but in an oracle (retarded) way"**. &gt; but there are also advantages Yes, the advantage that you can get $1 dollar/hour indian code monkeys to work for free, and of course get shitty output. &gt; Microsoft garbage lol M$ amirite guise?? your blind hatred towards MS is even more ridiculous and hilarious when you consider that you prefer a language that is OWNED BY ORICAL, the WORST corporation in the entire history of information technology. &gt; I don't think it's a terrible language Yet your retarded pathetic dinosaur from the 90's is desperately trying to imitate a 10+ years ago version of it... Hmm...... &gt; If I want fancy language features I can just use Scala anyway No you can't. You're "forced" to use java or C# because no one in the entire world gives a single fuck about scala. 
DateTime.TimeOfDay is of the type TimeSpan. So why not use TimeSpan directly? var time = new TimeSpan(1, 25) time += TimeSpan.FromMinutes(35) Using DateTime only for the time component is human error prone - if TimeOfDay represents 23:25:00 and you used `dt.AddMinutes(35)` then TimeOfDay will be 00:00:00 and not 24:00:00. var ts = new TimeSpan (23, 25, 0); ts.Add(TimeSpan.FromMinutes(35)) //ts.TotalHours will be 24 var dt = new DateTime(1970, 1, 30, 23, 25, 0); // January 1, 1970 23:25:00 dt = dt.AddMinutes(35); // dt.TimeOfDay will be 00:00:00 // dt.TimeOfDay.TotalHours will be 0 
TimeSpan is the only valid choice, DateTime and DateTimeOffset do not represent time. They represent Date + Time Of Day var ts = new TimeSpan (23, 25, 0); ts.Add(TimeSpan.FromMinutes(35)) //ts.TotalHours will be 24 var dt = new DateTime(1970, 1, 30, 23, 25, 0); // January 1, 1970 23:25:00 dt = dt.AddMinutes(35); // dt.TimeOfDay will be 00:00:00 // dt.TimeOfDay.TotalHours will be 0 
&gt; why not use TimeSpan directly? Actually, I assumed they might want the rollover behavior of a clock.
&gt; Actually, I assumed they might want the rollover behavior of a clock. Even then, your usage is wrong. TimeSpan already has rollover logic built in. var ts = new TimeSpan (23, 25, 0); ts.Add(TimeSpan.FromMinutes(35)) //ts.Hours will be 0 //ts.Days will be 1 
&gt; Using DateTime only for the time component is human error prone - if TimeOfDay represents 23:25:00 and you used dt.AddMinutes(35) then TimeOfDay will be 00:00:00 and not 24:00:00. This was my assumption of what OP was asking for, as they had mentioned time specifically, not duration... but I may be wrong.
Yes. Unfortunately, a lot of the comments are recommending the use of `DateTime` which is misleading (unless OP has wrongly worded his post and meant to store date as well).
1) At least Java never imitated partial classes, probably the most idiotic fucking idea I have ever seen. A lot of the design decisions in Java work well for large teams, where, yes, you will inevitably have clueless retards. At least I can understand what they were trying to do when I have to go in and fix their shit. But it's probably not necessary to bring racism into it. The difference in philosophy is not bolting unnecessary things like LINQ into the core language. Yes, it means you have to understand how to query a database, but you will get better performance anyway, plus in a few years when LINQ is obsolete, it'll still be sitting around in the language. jOOQ is free if you don't use MSSQL or Oracle. No self-respecting person would use MSSQL, and if you use Oracle, you can afford it. As for the libraries that exist, I'm not talking about behemoth frameworks. I'm talking about simple things, like a library that might save you a couple days of time developing it yourself. Anything you want to do, someone has already done and there's a library out there. But Spark, off the top of my head, if you want large frameworks. There's some bindings but they haven't been updated in a while, I have no idea if they actually still work. 
Unless you are getting a notification of every comment of mine on this thread, then I don't see a reason for you to be bothered. I added the code to my main comment AFTER replying to 2 comments here, and then added the code for 24h rollover after I got replies from you (both of which were related to the rollover). 
This is a great pattern. I first saw it in one of [Jimmy Bogard's blog posts](https://lostechies.com/jimmybogard/2008/08/12/enumeration-classes/) but it looks like there is an official MS doc describing it too: https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types
Follow the docs, or make a new project and let it generate all the necessary content. Then you just move the DB stuff from the web project to the data access layer, and then update all references.
I'm downvoting this (it's currently the top answer): Your example makes `AddMinutes` look like a mutating/impure function. You need to use the returned value (e.g. `var future = now.AddMinutes(35d)`). Also as /u/prajaybasu pointed out `DateTime` probably isn't the right type to use here anyway.
Ah right. I always forget that when I am implementing too. Good catch
I prefer a datetimeoffset datatype. May update when I have more time and access to some of my extension methods I’ve made for it at work.
&gt; partial classes Really useful for classes where part of it is auto-generated and part of it is user code, such as the Windows Forms / WPF designers. Of course you have no clue about any of that because you're a clueless retard. &gt; A lot of the design decisions in Java work well for large teams, where, yes, you will inevitably have clueless retards Yeah, I prefer a language where I have a **choice** to either use the language features or not depending on the ocassion, java takes the decision power away from me. Thanks but no, thanks. &gt; At least I can understand what they were trying to do when I have to go in and fix their shit. Not once in 12 years of professional programming have I encountered this problem in C# codebases. It's not like you can define crazy stupid symbols as function names like you do in Scala. &gt; unnecessary things like LINQ And yet you DO NOT have a single decent way to query a SQL database in java. Great. Congratulations. &gt; it means you have to understand how to query a database Implying that using productivity tools necessarily means that I don't know how the underlying technology works. Look: &gt; The difference in philosophy is not bolting unnecessary things like functions or variables into the core language. Yes, it means you have to understand how to write binary machine code yourself, but you will get better performance anyway, plus in a few years when functions and variables are obsolete, it'll still be sitting around in the language. See how pathetic, retarded and idiotic that looks and sounds? well, that's you. &gt; jOOQ is free if you don't use MSSQL or Oracle Speaking of vendor lock-in. Or rather lock out. And it still sucks a lot of balls and is useless and retarded. Do I really need to write the joins myself??? really? what a fucking joke. &gt; No self-respecting person would use MSSQL lol M$ amirite guise? That baseless retarded anti-ms hatred again. You must surely use arch btw. &gt; I'm talking about simple things Which curiosly enough you can't even mention. Fuck off. 
Timespan is fine if you don't really need the date. Consider 11:45pm + 30min. Anyhow both Timespan and DateTime implement .Parse() and .TryParse(). Have fun.
Nice project! I’ve also been working on Bionic. An Ionic framework clone but on the top of Blazor and pluginable deployment platforms. https://github.com/bmsantos/bionic https://bmsantos.github.io/bionic/ Sample videos: https://youtu.be/67A1ZVlyUfA https://youtu.be/Jnn0DgXcDIk
Let me know what you guys think.
That's brilliant. I love wpf, grids and all that. I'd totally use this if it was production ready! Good luck!
Sorry I'm not sure. If MediaExtractor can't do it you might be able to wrap this Java Library: [https://github.com/Matroska-Org/jebml/tree/master/tools](https://github.com/Matroska-Org/jebml/tree/master/tools) Again I can not stress how little clue I have, I just know about the library :)
Hey you know though
Yeah actually
Interesting, will keep an eye on it. 
Depends on what you're using it for. If you want it to represent a POINT in time(ie, a specific moment in time) : use DateTime or DateTimeOffset If you want it to represent a LENGTH of time (eg, a timer) : use TimeSpan
https://stackoverflow.com/questions/38669833/moving-applicationuser-and-other-models-out-of-mvc-project
Ignore this if you're already familiar with Linux server stacks, but it'd probably be good to have step by step instructions for doing the mapping in Apache and Nginx if you're looking for a starting point :)
That’s awesome! Really great news for me personally!
works fine for me. i just joined 
No, timespan is fine any time when you're dealing with a period of time. You've muddied the waters by saying "11:45pm", that's not a period of time, that's a date for which you've omitted the date. 11:45 + 30 min is perfectly acceptable, the answer is 12:15. You just need to choose the right tool for the job. 
If you have access to the original installer file or disc, have you tried uninstalling and reinstalling the core program?
https://i.imgur.com/szbYPO7.png
No, not the core program, just the .NET desktop component. I’ll give a shot. Thanks
http://aka.ms/csharp-discord
Hi - this looks *very* interesting! I'll keep checking in on the project as I can see a lot of value in c# -&gt; web app.
Yup. Safari is the new IE. I've heard rumors/conjecture that they do it on purpose to force people to use native apps.
In addition to what everybody else is showing you, check out [Costura.Fody](https://www.nuget.org/packages/Costura.Fody/). Adding a PackageReference to that in your .exe project will bake them all into the final .exe file and add a little bit of code so that when your application tries to load them, it looks there before giving up.
Well now that you're getting into personal attacks, I'm going to step out. You've got Microsoft's dick so far up your ass it's coming out of your mouth.
Can't be done, or at least, can't be done the way you're thinking. Every window of every application written in WPF uses GPU acceleration. Under the hood WPF is pumping triangles the exact same way Unreal or Unity3D would. 
There's a WMI query that will tell you what GPU each process is using and how much of the GPUs time its occupying: ObjectQuery winQuery = new ObjectQuery("SELECT * FROM Win32_PerfFormattedData_GPUPerformanceCounters_GPUEngine"); The `Name` field starts like: `pid_10364....` So that tells you the process ID, and then you can just look up the process from that process ID to know more specifically what it is.
Actually it can, see magic WMI query :)
You can add a TimeSpan to a DateTime and it will return a new DateTime. It makes things so easy.
That's not the proper way to do this. If this is only meant to happen once, you should have the deactivation on some event. What causes the shield to deactivate? When it takes enough damage? When it's finished spawning? When the player walks through it? That is where this should be. It would be extremely inefficient to do a check every single frame if this should only ever happen once.
Probably a problem with there being a newline character in the input buffer. So the first fgets places an empty string in the buffer (without waiting for any keyboard input) and thus matches every line in the text file. (From what I've found from a few searches). This is a highly Google-able problem that you should probably have been able to figure out on your own if you took the time to tinker around with it. Also, I'm not particularly familiar with the community guidelines, but this post should maybe also get removed, 
Xamarin has tonnes of really good docs on their site. https://docs.microsoft.com/en-gb/xamarin/ Another guy has linked you a tutorial for Forms but you should check this link when you want to learn more.
That's because you have no excuse to defend the utter stupidity of a useless language stuck in the 90's. Fuck off.
Op is talking about time not time span. I think a clarification is necessary
KISS: Consider encoding it as an int holding the absolute number of minutes and implement simple helper functions for parsing/output/conversion. That’s what I did a few times and it worked beautifully. Maybe encapsulate this in a class or struct.
Just go with Microsoft Docs tutorials. I did one of their tutorials for MVC .NET and it was a very clear tutorial. There is also some Xamarin(for android/ios development) tutorials in Microsoft Docs. Good luck! 
If you're not an experienced dev, the mvc tutorials that Microsoft puts out aren't that helpful. They tell you what to do but not why, which is much more important. 
I am happy to hear that! Let me know if I can help in any way.
Seriously? I have developed an MVC application and I'm only 15 years old and I understood everything and how it works... Also you can go first for razor pages tutorial for more information if you don't understand how everything worksm
I am not familiar with the Linux stack so very appreciate any guidance! Thanks for the tip. If you have more info to share I am all ears.
"Will I have to go through more stuff after?" Answer to your question is yes C# is so much more then just code. You need understanding and a mindset of a programmer. Knowledge of how to provide commits and work together with other programmers. You will be endlessly learning every day to keep improving yourself. But don't let that scare you. The better answer to your question is with another question, do you have enough dedication? If yes learning C# and anything else is simple. and can be done in few months and you will be able to find a job in it.
I doubt anyone would hire you if your only experience is an MVA course, but here's how I would go about it: Start thinking of some software you want to build. It doesn't have to be an original idea if you're not feeling creative, find something to copy. After you get into the MVA course a little ways, start building that thing. As you get stuck, use the documentation, your knowledge from the course, and Google to get unstuck. Put it on GitHub. Repeat a few times and you'll be ready for an entry-level dev job.
When I'll finish the application I'll show you. By the way did YOU did any application? P.S: Yes, I want a cookie.
Better yet, use Environment.NewLine instead of magic strings.
Yeah that was my question, like when I'm done with C# lessons and courses, what are my options then? What could I do, what would my job be with "just" C# knowledge? As far as I know I have to decide what do I want to work on: Mobile Apps, Games with Unity, Windows Apps etc. So when I decide what I want, then I'll have to take more lessons/courses of the program I'm going to work with (Unity, Xamarin.. I don't know all of them yet)
Yeah, I kind of didn't expect a job right after MVA lessons, I think I'll do courses on Udemy right after. It all depends what software do I want to make (mobile app, pc games, web apps etc.) - what do I plan to do with my C# career, right? Because as far as I know I have to learn C# and then chose, and when I do I'll have to learn to use suitable program (Unity, Xamarin etc.). Please correct me if I'm wrong, I'm still new to all this! And one last question here as I asked in post: what could I do with "only" C# knowledge? Without using softwares like Unity, Xamarin etc.
I'll opine that I've mostly only used those books for reference or studying for an interview (C# on a nutshell, that is). Having said that, all c# programmers should have a copy.
The flair is deserved.
I've been a plural sight subscriber for a long while now and highly recommend it, though it isn't free. 
I tried C# Yellow Book but I quit. I know It would be so helpful but currently I have greater desire to actually type codes and learn with interactive lessons. I might read that in near future, thanks for the recommendation!
Haha listen little guy I've been developing and getting paid for it longer than you've been alive. Go bake your own cookie.
&gt;Does it support polyfilling for browsers that do not support wAsm? No it doesn't polyfill wasm, and the consideration hadn't even occurred to me, but am glad you mentioned it. A quick [search](https://hackernoon.com/creating-webassembly-powered-library-for-modern-web-846da334f8fc) shows it's viable, though. Do you have specific needs that would require this? &gt;Does it support js interop? Publicly, no, but it would be easy to expose the wormhole and it wouldn't compromise the integrity of the API. &gt;What makes this stand out from Microsoft's recent developments with Blazor? Quoting from the [FAQ](https://www.lesarde.com/faq): &gt;Both Blazor and Frogui use the same technology stack of Mono for WebAssembly, and WebAssembly. And both are UI-focused. But that's where the similarities end. &gt; &gt;Blazor's UI pattern follows in the footsteps of ASP.NET Razor, which uses a variation of the MVC pattern and constructs the UI dynamically, very similar to how server-side scripting work (though it happens in the client). Frogui uses an MV\* UI pattern that is commonplace in Windows, Mac, iOS and Android development. Rereading my own writing, I'm not sure it's a satisfactory explanation since MVC vs MV\* probably means different things to different people. Here's some more detail: * **Layouts** **Blazor** uses a technique that originated on server-side code generators that is coding-based ("if this then do that") but does have a declarative side, too (\*.cshtml files). Code and visual elements are clumped together by definition. It's a UI pattern it calls MVC but I have always thought that term was *generous* having worked on a number of* Razo*r projects. The separation of concerns exist but not nearly as cleanly and definitively as for instance, the Xcode / iOS notion of MVC; the two hardly resemble each other. **Frogui**'s layout is declarative. A forthcoming WYSIWYG design tool will be able to edit layouts (elements, events, visual states, styles) without coding. This is very much like MS Visual Studio and Blend's XAML layout editor, Apple's Xcode editor, Android Studio's layout editor, etc. * **Languages** **Blazor** uses C# and a markup language Blazor (in \*.cshtml files). **Frogui** uses just C#. Our design.cs files use the declarative features of C# for layouts (note that the current samples do a poor job of demonstrating this; the spec is evolving). This lowers the learning curve, is cleaner, and definitely simplifies debugging. * **Relationship to HTML/CSS/JavaScript** **Blazor** has a very open relationship with HTML/CSS/JavaScript, so developers who want to work with these primarily will delight in having complete control. **Frogui** provides a significant abstraction between HTML/CSS/JavaScript since the architecture and philosophy of WPF (and Silverlight), our inspiration and blueprint, is very different from web development. For instance, the web does not have a concept of a *brush*, yet provides all the facilities to do the same things, though requires about a dozen different techniques versus one. I am *blown away* by the UI power of browsers so have been overhauling the original API concept to adopt features that are available on the web but not in WPF, with the goal being to ensure anything an HTML/CSS/JavaScript dev can do, we can do as well. Most of these are covered [in this comparison to WPF](https://www.lesarde.com/compare-to-wpf) and [this comparison to web development](https://www.lesarde.com/compare-to-web).
Thanks! There may be another release as soon as a week or two.
What do you want from me? I just recommended him to go with what I found useful. I also said that he can go with Razor pages tutorial first to get more information.
Thank you for the compliment and very cool links! What could I do to get to start working with Frogui? Even better, would you like to get involved some way? BTW, I am happy that you found this thread. Coincidentally, I started a [new one](https://www.reddit.com/r/csharp/comments/98bjdu/brave_pilots_wanted_to_take_c_wpf_where_they/) yesterday you may find interesting.
How useful is K&amp;R?
Thanks for the timely response. It's always awesome to see developers of a product interacting so heavily with the community. I'm currently going through the steps of starting an LLC and we are still choosing our software stack. Originally we were set on Blazor (even if it's experimental) or Vue (with TypeScript), but your project caught my eye. The application we're writing will have a desktop client written in WPF. I still need to go through your docs to see how close you guys have gotten to WPF to potentially be able to re-use XAML and backing files. WASM polyfill through asm.js is important for us as we're expecting the web client to have to run on older browsers (our product markets itself to banks and healthcare). JS interop isn't as important for us, we're fine with making our own stuff or pulling stuff from nuget. We don't particularly like npm or the culture it encourages (leftPad). Will definitely be looking this further. Thanks for answering my questions!
Oh really? How do you know this guy will struggle with what I recommended? He didn't even tried it yet.
Almost anything is better than Access. Use MSSQL Express (you don't need any license and its good up to 10GB) or use Sqlite (single file, free, it has EF bindings and its good up to 140 TB!). Access doesn't have record locking and in multi-user environment that can lead to data loss - if you don't lose it earlier to some other quirks regarding file corruption). 
My pleasure! And thanks for the kind words. I really love this product and interacting with the community is a joy. &gt;I'm currently going through the steps of starting an LLC and we are still choosing our software stack. Originally we were set on Blazor (even if it's experimental) or Vue (with TypeScript), but your project caught my eye. &gt; &gt;The application we're writing will have a desktop client written in WPF. I am on the lookout for a developer / team interested in Frogui, particularly one that is familiar with WPF to really stress Frogui. I would work with them closely to drive Frogui's feature set, maintain high-availability and would turn around frequent private builds. Your venture might be ideal. &gt; I still need to go through your docs to see how close you guys have gotten to WPF to potentially be able to re-use XAML and backing files. There are some obvious holes (what, no radio buttons?). The focus so far has been primarily putting the infrastructure in place so that features could be added without rearchitecting. That infrastructure was completed about a week ago and features are coming online at a nice clip. There's been a lot of chatter on this thread since yesterday about our approach to layouts (search for *design.cs* files). In short, currently considering *not* using XAML in favor of design.cs files; still used in the same way with WYSIWYG layout editing (code-behind, et al) but, in your case, would mean not being able to share XAML. Thoughts? &gt;WASM polyfill through asm.js is important for us as we're expecting the web client to have to run on older browsers (our product markets itself to banks and healthcare). Noted. I will ping the Xamarin team to see what they have been recommending. Thanks again for getting in touch!
Never mind. Sorry to bother you sir.
I finished thenewboston's tutorials on HTML&amp;CSS but that's where it ended, I didn't have enough time to start Java and I lost interest afterwards. Recently I decided that I want to dedicate all of my free time to programming so I've read a lot about languages and decided I want C#. I can do a lot with it, mobile/desktop apps, games etc. + from what I learned it's gonna be a lot of easier to learn Java if I change my mind since they're similar in a way. I also got insipred by a guy who made Stardew Valley all by himself. Afterwards I learned he used C# so my plan for future is to make Indie game which is probably going to be something similar to SV. If mean time I could work as freelanser or actually get a job (when I'm done with courses and everythiing of course, I don't expect that to happen over night)
In reality is really really simple, just fucking hidden because of all the magic reflection tricks that makes Asp works. In AspNet Core is even much more easy, just implement your own user store and then you can use it literally everywhere. Here a simple store for AspCore that i wrote over MongoDB [https://github.com/matteofabbri/AspNetCore.Identity.Mongo/blob/master/AspNetCore.Identity.Mongo/Stores/UserStore.cs](https://github.com/matteofabbri/AspNetCore.Identity.Mongo/blob/master/AspNetCore.Identity.Mongo/Stores/UserStore.cs) 
Yes
You could add the where clause for both usage and name directly to the wmi query as well to offload the filtering. Then just call Any. 
&gt; before my int[] declaration or add getters and setters. However, I don't want to do that Why don't you want to do that? 
You have lots of options then honestly. Java and C# are extremely similar, but basically every programming language will have the same constructs (loops, arrays, data types, etc.) The reason I recommend CS50 is because it is an actual Ivy League level course. They film actual lectures from Harvard and let you follow along with the homework. It's where I first learned to code. Since doing that I have also picked up Java and C#. They were both a cake walk since I was already comfy in C. HTML and CSS are certainly useful but they aren't directly comparable to the types of languages used for non-web apps as they don't support the same logic structures.
Consider why the guardrails exist before blowing through them into oncoming traffic
K&amp;R is a classic for a reason. But if you want to learn C# it’s really not the way to go. C# is a few generations removed from C, and is a very different language in its practical applications.
Or he wants to automate appraising of a personal miner when he's playing a game?
That's a great analogy. This was more of a question about the best way to plow through the guardrails, not whether or not I should plow through them.
Right. But since you are new to C#, we need compelling reasons that blowing through them is the best answer. One of us might be maintaining what you write today; we are your oncoming traffic. What problem are you trying to solve? You need to answer the question "why do you want to do that?" Because that constraint on the problem and design smells really freaking badly.
Nearly every C# job is working with SQL Server on some enterprise software, maybe with some front end web. There's not a whole lot of work with Unity, Windows Apps, or Mobile Apps, although they may be interesting to learn. Getting that first job can be really hard, and it'll generally be doing something really simple with a focus on SQL with a little bit of C#. So, I'd say you should definitely try out SQL Server as well, and get comfortable with SQL Server management studio.
Thanks a lot, it does :)
Imagine applying for a chemical engineer job at Dow after having made a vinegar and baking soda volcano for the school fair.
Cool, thanks :)
Content overwrite under par.. need a better way to create the required next row with the appropriate prior values added to the column to maintain structure. Cloning almost worked but it if we have a path that is 7 layers deep then a 5 layers deep, the 5 output will contain the 2 Levels cloned from 7, so knowing this, I added pruning of the extra values off from the cloned object. 
Great article. It's nice to see some content on this sub that wouldn't be better over at Stack Overflow.
Thanks, nice to know that
Show me on the doll where James Gosling touched you.
Most of these tools are pretty early in their development. More than half of the new ones will undoubtedly die because there is a good deal of overlap.
I agree 100% percent. I was far happier working with WinForms back in the day than any of the modern, reactive, cross platform, mobile first, whatever....frameworks I'm using now. 
Does it not feel like xaml is directly competing with HTML for rendering at this point and it would be less effort in the future to just replace it with HTML? I mean I'm not exactly happy about it but it feels like that is where this is going. Seems like CSHTML and Blazor will win the UI portion at this point, and I'm fine with that.
There is no class in .NET currently to represent Date or Time individually. There is a [corefxlabs](https://github.com/dotnet/corefxlab/blob/master/src/System.Time) project which will add the types `System.Time` and `System.Date` which should solve this dilemma. TimeSpan is primarily meant to represent but that does not mean it can't be used to represent "Time" as in days, hours, minutes, seconds as a quantity, since DateTime.TimeOfDay itself is a TimeSpan and not a DateTime object with the Date stripped out (since it's not possible without setting the values to something arbitrary) 
I am OK with replacing XAML with HTML. I prefer XAML but it is not THAT much better than HTML. What I dislike however is apps that come with their own browser to display that HTML (Electron). Programs should be able to draw their own UI via a library not call a completely different program to do that. On the other hand if you embrace HTML you have much easier time showing content which very often comes with HTML formatting.
I totally agree with that it almost feels like HTML should have an out of the box renderer with it. But having to rely on another program for the rendering isn't so much different than openGL. I'm interested what happens in the next few years with web based rendering wince it's been so appropriated for cross platform and mobile development. For that same reason I'm really excited to watch flutter grow and hopefully become a big player in the field of cross platform dev.
I spent a long time trying to find that query, your comment is probably the only piece of information related to WMI and Windows 10's new Task Manager on the internet. 
To your edit, much better :) two smaller things: Change if (savesc.shieldpr == 0) { shieldbuttonga.SetActive(false); } if (savesc.shieldpr == 1) { shieldcooldown=Level1shieldcd; } if (savesc.shieldpr == 2) { shieldcooldown=Level2shieldcd; } if (savesc.shieldpr == 3) { shieldcooldown=Level3shieldcd; } if (savesc.shieldpr == 4) { shieldcooldown=Level4shieldcd; } to switch(savesc.shieldpr) { case 0: shieldbuttonga.SetActive(false); break; case 1: shieldcooldown = Level1shieldcd; break; case 2: shieldcooldown = Level2shieldcd; break; case 3: shieldcooldown = Level3shieldcd; break; case 4: shieldcooldown = Level4shieldcd; break; } for performance, but if you wanted to make it even better, you could change public float Level1shieldcd; public float Level2shieldcd; public float Level3shieldcd; public float Level4shieldcd; to public float[] LevelShieldCD; then you can pass in as many as wanted, and then just reference it to if(savesc.shieldpr == 0) { shieldbuttonga.SetActive(false); } else { shieldcooldown = LevelShieldCD[savesc.shieldpr]; } to make it more clear what you're trying to do. Obviously, this is only being called once, but you get both performance and readability out of this. In terms of read-ability, I would also start using camelCase or PascalCase for variables. It gets hard to read long names, and naming things like \`shieldButtonGA\` instead of \`shieldbuttonga\` will make it much easier for others to understand what it is in the future.
I found it by using powershell to search all of the CIM classes in WMI for anything with "GPU" in the name: &gt; Get-CimClass *GPU* | select CimClassName CimClassName ------------ Win32_PerfFormattedData_GPUPerformanceCounters_GPUAdapterMemory Win32_PerfRawData_GPUPerformanceCounters_GPUAdapterMemory Win32_PerfFormattedData_GPUPerformanceCounters_GPUEngine Win32_PerfRawData_GPUPerformanceCounters_GPUEngine Win32_PerfFormattedData_GPUPerformanceCounters_GPULocalAdapterMemory Win32_PerfRawData_GPUPerformanceCounters_GPULocalAdapterMemory Win32_PerfFormattedData_GPUPerformanceCounters_GPUNonLocalAdapterMemory Win32_PerfRawData_GPUPerformanceCounters_GPUNonLocalAdapterMemory Win32_PerfFormattedData_GPUPerformanceCounters_GPUProcessMemory Win32_PerfRawData_GPUPerformanceCounters_GPUProcessMemory So I figured that one of those would contain the information OP was looking for.
In some regards I was would say XAML is superior to HTML, but I would say that CSS (and especially SASS/PostCSS) is a far superior styling system. Styles &amp; VSM in WPF/UWP is just so damn verbose to do anything.
And another new one based on Qt/QML; https://github.com/pauldotknopf/Qml.Net
everyone forgets that Gtk# exists; it's what powers VS for Mac!
winforms has too much inertia to die
This was a good read, thanks
I think one issue is that MS wants people to use UWP, but UWP only runs on Win10. Most businesses (even games) need to support more than Win10, so that means people rarely use UWP. And WPF hasn't changed that much if at all since UWP was introduced, so you get a bunch of "frameworks" intended to modernize GUI applications while not restricting them to Win10.
Gotta agree with u/kermit_was_right, it's a classic *for a different language and paradigm*. In fact, I'll venture to say that it's difficult to find good books on doing OOP well. In case u/YouNeedAnne you do the pluralsight trial, these are both courses you should check out. [https://app.pluralsight.com/library/courses/c-sharp-code-more-object-oriented/table-of-contents](https://app.pluralsight.com/library/courses/c-sharp-code-more-object-oriented/table-of-contents) [https://app.pluralsight.com/library/courses/patterns-library/table-of-contents](https://app.pluralsight.com/library/courses/patterns-library/table-of-contents) Books on OOP that I'd recommend would be Design Patterns (the Head First Design Patterns is also good) and Agile Principles, Patterns, and Practices.
What type of project and post your code for more help. 
I thought you meant Visual Studio Code. I think we just call VS Community "VS", or "VS Community". I don't know what your issue is but you should probably show something more. Pictures or video or something.
Hmm looks like someone posted instructions for how to make it work with VS2017 in the Q&amp;A section... gonna try that out! :)
Thank you for that post. Great stuff there. I hope you follow this up with a deeper drive into Avalonia and possibly touch on QT.
Shout out to [Eto](https://github.com/picoe/Eto) which supports Windows, macOS, Linux, and to some extent iOS with support for XAML-like and JSON UI markup backed by native controls.
[Wisdom of the Ancients](https://xkcd.com/979/) [“Nevermind, I figured it out”](https://amp.reddit.com/r/Infuriating/comments/44lrpe/never_mind_i_figured_it_out/) ;)
WPF isn’t dead. Not sure why people say that. WPF apps deployed with click once are great in a business environment. 
It's a good functional book. It teaches you automation of very specific open source security tools. It's not really teaching security concepts though. If you are new to C# it's probably a good book for referencing C# programing in small functional examples. If you are already well versed in C# you won't get alot out of it.
Great article! Had never heard of Avalonia before and it does sound very promising, I really hope it'll manage to convince as many devs as possible to switch to it from Electron. Also, as I saw your link to your BF for WP app, I just have to link [my own UWP brainfuck app (Brainf*ck#)](https://www.microsoft.com/store/productId/9NBLGGGZHVQ5) as this is too great a coincidence. Let me know what you think! 😄
Disagree 100% As a user, I'd rather have a clean, simple standard layout than some graphically awesome feat of design. I hate installing video card drivers because they feel like they were designed to impress 14 year olds. I hate how different the ux is from website to website. Most non technical users just want us to stop changing things. My mom is a nurse and they ALL hate each new charting system they to out . Beyond that, the majority of what I wrote was to be used by employees to help them do their job. I worked on a sales register, a time entry system, tax software to be used by local assessor's office, and some middle office stuff for a trading firm. They get paid to use it, it doesn't have to be pretty, imho. If we are taking about end users with no investment in using the product, like a free website or something entertainment related like Netflix, sure, that's different. In terms of usability, I rarely see anything on the desktop, that couldn't be done in winforms if you toss on one third party control library like DexExpress or Infragistics. On the plus side, additional complexity is job security for us, so I mean, I take the for with the bad. 
Removed: Rule 4. You'll have to provide more information, like the type of project you're debugging, and ideally, an upload of your project (perhaps via GitHub).
I would not say that XAML is just superior in some regards, it is superior in just about every way possible. CSS definitely has a better syntax, beyond that XAML does inheritance a lot more logically than CSS. The only problem with XAML is a lot of the built in controls do not expose every relevant property. As far as I am concerned HTML/CSS is a mess, I do not understand how anyone could think they are good in today's world. While XAML is more verbose it is otherwise far superior in every way.
Yes, for business software, WinForm with ClickOnce is king in my opinion. It’s too bad most CIOs and Enterprise Architects were sold on web apps. It’s been so costly to play the browser support game, and implement asynchronous systems (web inherently), SSO, etc. 
You are 100% right that win form code bases were horrible and large apps were dreadful to use. But goddamn if it wasn't by far the fastest way to get a functioning usable UI. That's the biggest problem with modern UI frameworks. It takes significant effort to get it to good enough that someone could use it. 
Can I use `dotnet new aspnetcore-spa`?
When MS killed windows phone they blew up their entire UI strategy. UWP is now an orphan. 
I have Pluralsight access, I'll check them out, thanks!
Maybe with WASM and Canvass, XAML can one day replace Html. 
I think the problem with simple, easy to get started languages/platforms is that it's easy to abuse. Nothing about winforms required sloppy coding though, imho. MVC and MVP patterns were really popular, and all the same DRY and SOLID and everything else was still around. Though, it was really just accepted that it was windows only. But if you were okay with that, I dunno, things just seemed so straight forward. Once I started using WPF, things just took longer. Not just for me, I mean our projects as a whole. You could do crazy things with custom controls and Win32 API... But regular business apps usually didn't. Expectations were lower and if it wasn't out of the box, we found another way to display it. 99% of the time we didn't have designers writing XAML just developers with no sense of style. And web sites.... It's insane. We've had simple old sites written by an intern in classic asp in 2003 that took a team of three, months to rewrite in 2018. We billed them over 200k. Yes the code was cleaner and we had a clear architecture in place. And the website rendered perfectly at every resolution imaginable and every browser - even IE6 and could be hosted in Linux, and instead of editing pages via FTP, we used an open source content management system, and integrated with AD and used EF instead of simple SQL and the recommended best practices for protecting PII, we even used Angular 4 even though I still can't give you a good reason for why, other than the client wanted it. But if I'm honest, I don't think it's really any better. Before it was so easy to maintain they just had generic office worker take turns doing it. And it worked alright. Worked on my cell phone but wasn't super pretty. Now they spent all this money and have something that is 10x more complicated. They handed the site over to their IT group and any change outside of adding/editing content requires their internal dev team and about three weeks of red tape...but even if they didn't, the regular office staff wouldn't be able to figure this out. In terms of getting work down.... The old site was vastly better, imho 
Interesting read! 
Indeed. I'm the lead developer for a project that is using WPF for a few fortune 500 companies. It's perfect for touch enabled kiosk devices.
one of the top two links here might help you out- https://dotnetnew.azurewebsites.net
Just draw all the ui elements in console... Problem solved :)
In my opinion Nadella suffers a total lack of vision for any of their client products. Windows Phone was required to keep the whole client ecosystem vital even if it lost money.
Wouldn't there be a push to build these as web apps? This is certainly what I am seeing. I've only seen one app of the kind that you described actively developed and the decision to build it was made ~5 years ago.
Also it was awesome
Write apps that make *your* life easier. Do that and I guarantee others could get the same benefit.
Welcome to 2018, where Microsoft has the unstable platforms they can't pay people to use and Apple is where people go for long-term stability.
It's not just you. it's incredibly frustrating and confusing 
excus me can you help my projekt it should write line "I am 14" 100 times in consul but how are for loops born? 
I use this. It work fine. [https://marketplace.visualstudio.com/items?itemName=DavidPerfors.RegionExpander](https://marketplace.visualstudio.com/items?itemName=DavidPerfors.RegionExpander)
I'm, surprised this is the top comment. I find that most shops seems to like fluent. Personally I like attributes.
I doubt about CV part. You may not be able to disclose details about it. But you can tell that you wrote for example a Web application using Angular + Web API + SQL Server. This tells nothing about the app and it's buyers, but tells that you had an experience with those technologies for that amount of time.
You need to make system call via PInvoke: Windows: https://stackoverflow.com/questions/1016823/c-sharp-how-can-i-rename-a-process-window-that-i-started 
I even failed that one too.
I'm currently going exercising these: [https://exercism.io/tracks/csharp/exercises](https://exercism.io/tracks/csharp/exercises)
Have you considered to write the status/progress in a log/txt file and have that file opened via your ui? Another thing you could do is to make something like a debug mode for your application and have your information displayed when you start your program with specific parameters. For example (cmd) "start application.exe -debug".
Hmm instead of a file I could use a string variable, and then have the UI use that for reporting progress. I was just hoping for something smarter. About the debug mode, that's not really what I need this for. It's more to decouple my Buisnes Logic from my UI. 
you can get 3 months for free (using dev essentials) which is more than enough, OP I recommend this too, trust me it's worth it
Not in the console, as that's limited to the BF operators, but the IDE instead has full support for mouse + keyboard, including a custom right-click context menu with code snippets that's coming in the next update. Also, there's a setting to set the IDE as the app starting page, as I realize that's more useful for advanced users (I have the console by default as it's easier for beginners, to learn the language). Sneak peak: [screen of upcoming update](https://pbs.twimg.com/media/Dk6S6eAXsAENPKR.jpg)
I had a really bad headache at the time I posted that, otherwise I would have provided a better explanation. Glad you got everything worked out with MySQL.
Heh. No. Found the "Windows desktop only" dev.
When I try to type in the IDE (or the console for that matter) nothing happens
Oh, just tap/click on the IDE first (I mean in the area where the code should be), it's just that the editor isn't focused by default or it would cause the OS virtual keyboard to pop up on its own on devices with a touch screen, and that'd be annoying 😊
WinForms is easy to get into so probably does have a higher fraction of less competent devs. But there's not that much wrong with the technology itself. It's a little old-fashioned, but in essence it's the same model as iOS and Android UIs. (Before constraint layouts) 
I still regularly use WinForms for my hobby projects, because I think it's the easiest way to get something on the screen quickly while also trivially letting me do custom drawing, frame rate control, etc. However, it's not available for .NET Core which I would really like to use because it's ahead of the .NET Framework nowadays (especially the pre-release .NET Core 3 builds). Does anyone have any suggestions for a UI framework that works with .NET Core but preserves the convenience of development I'm experiencing with WinForms? I don't need any fancy features, as long as it's simple and easily customizable I'm happy.
Hmmm it feels very strange. When I switch between the two tabs the textbox for the IDE loses focus but the caret is still blinking right there as if I have focus. Both behaviors seem wrong. Why isn't the textbox focused after switching to the tab and why is the caret blinking there if I do not have focus?
Seems like people are rewriting such tools in Electron and stuff so they can be used on Mac and Linux
This is probably the only combo nobody is trying :)
I have added a section on Eto. Please let me know if something is wrong or add a comment if you want to expand. To be fair with the small amount of reading I did I don't get its place in the ecosystem.
Or my favorite: [Fody/Costura](https://github.com/Fody/Costura)
There is no need to run them on Mac and Linux though. Both the applications I wrote about will be on Windows enterprise systems.
I have added a section on Qml.Net. Please let me know if something is wrong or add a comment if you want to expand
It all has to do with the fact that the app is designed to be used both on PCs/tablets and on mobile devices (I usually use it on my Lumia 950XL). 1) The carpet always blinks as that's needed to let the user know where it is located. It's particularly useful when on touch screen devices and using the virtual keyboard at the bottom, as the IDE is not focused in that case and if the cursor weren't blinking you'd not be able to know where you're going to type. Also, there's that button with the 4 arrows in the command bar that's used to move the cursor around without focusing the IDE (as that makes the OS keyboard pop up when using touch), so you need the cursor to be blinking in that case too. There is a small visual cue on the IDE focus though, the horizontal line bar/rectangle becomes slightly more opaque when focused. 2) The IDE is not automatically focused for the same reason, as that'd cause the OS to display the virtual keyboard, which would be pretty annoying if you're on a mobile devices and using primarily the virtual keyboard in the app. My initial version for WP8.1 actually had a behavior similar to what you're describing (eg. the text was automatically focused every time), but I had a lot of feedbacks asking to disable that and to be able to write code and navigate the UI without having to focus the code and have the OS keyboard pop up, so I found this solution that I think works ok in both cases (it only requires one click to focus on PCs). What about adding a Ctrl + F shortcut to focus the IDE? That way you wouldn't need to use the mouse to focus it and start writing code 😄 
I see. UI for multiple form factors is hard. Maybe you can detect a PC in desktop mode and auto-focus only there?
I loved when they announced UWP and they were like "it's 100% cross-platform... Between Windows 10 devices!" and I was just like... You want people to rewrite their apps because you couldn't just adjust WPF or Xamarin. Having so many officially supported xaml dialects is bad for business. I'm pretty sure it makes young developers not want to develop for Windows and makes businesses question WTF they're supposed to do.
I am using a notebook with touchscreen. Is there an API to detect if I am using tablet or desktop mode?
Yeah, you can use `UIViewSettings.UserInteractionMode` to check that. Do keep in mind that the virtual keyboard can still pop up even when not in tablet mode though.
Very nice read. Thank you for this.
This would be great practice. Thank you! 
Well I didn't say "dead" I say that I don't see the use. While I do not have great insight into these corporations a team on the company I worked for does in fact work on a WPF app for a corporation. The decision was made 5 years ago to do it as a WPF app and it is still actively developed and maintained. I am not sure they would decide on WPF as opposed to a web app or electron if they were to make that decision today.
What could I make/do with CS50? Yeah, I plan to stick with C#, when I'm done with it I'll go for Unity classes and probably Java in distant future. My plan is to make an Indie game one day, but of course I'll have to find a job before that and for what I've heard, there's not whole bunch of jobs with "only" C# &amp; Unity knowledge.
Could you DM me details of this? :)
Looks rad. Hopefully I’ll submit in the next few days. 
Yeah I guess Unity, Windows/Mobile Apps will pay of If I make good game by myself or with a team. So in order to get a job easily, your suggestion is that after C# I focus on SQL? 
More than welcome to do so!
Yeah, I think you should understand the basic concepts of SQL, and try setting up a SQL Server database on your PC and mess around with SQL Server Management Studio. It's very similar to Visual Studio, and pretty much every company that develops with C# uses SQL Server as it's database, so you'll usually see both programs open on a C# developers computer.
Unzip the installer, add some code to the manifest, and zip it back up again: &lt;VisualStudio Version="15.0"&gt; &lt;Edition&gt;Pro&lt;/Edition&gt; &lt;/VisualStudio&gt; Oddly this makes it work for Community as well even though it says Pro...
Heh no. You found the enterprise multi platform dev. Web apps are for web. They aren't the "future", they're just easier. If I need to target multiplatform, I need performance and resources. This means using the native GTK, Qt, or GDI environment. Tell a big customer you want to have chrome or electron installed, they'll walk away.
use NLog and change the target according to your demands?
Windows phone was an abject failure. No one was buying them and worse, no one was building apps for them. It was dead. Comparing that to successful platforms is insane. I mean seriously read what you just wrote. You just argued that he would cut these platforms if they weren't successful. Well no shit. That's called business. 
Start punching teammates who use #regions. That's what I do. /s
Based on what exactly? Windows both client and server is getting plenty of investment, it's as competitive as it's been in years on the server and seeing meaningful improvements on the client. XBox suffers a little bit from the fact that Microsoft doesn't make games available on XBox and not on Windows, but it's otherwise a successful platform. I think what you're saying is that he doesn't have the same vision for them that you do, but he's not fucking either of them up. 
Based on the fact that nobody wants to develop for the client platforms. I don't think I have installed any new UWP apps since the phone was killed and people even "forget" to put their web based apps on Windows they just send you to use the website. I am fairly certain that the quality of the apps I use on Xbox is falling since the phone was killed. All the people that were developing Windows apps I know (including myself) stopped after MS killed the phone. The phone was that thing that made the effort to develop for Windows worth it. A small thing but something that could tip the scales. Now there is 0 incentive to develop for Windows which makes the user experience worse compared to other platforms and hurts Xbox and the Surface line.
There are also 2 more options: * make them protected internal and have them accessible from classes *either* declared in the same assembly *or* that are subclasses of your class * (C# 7.2 or later) make them private protected and have them accessible from classes *both* declared in the same assembly *and* that are subclasses of your class
Have you considered writing better code?
yeah, after the file is open, delete all of them.
Cool! I added my project but it's hosted on bitbucket rather than github so I posted my bitbucket URL in the github URL field. Maybe you should make the field more generically named? :)
Nice one. Ill fix that.
Hmm, I already know how to rename the window; what I'm trying to do is rename the process as it shows up in Task Manager.
Thanks! :D
Yeah, this guy I'm collaborating with ran CodeMade against the codebase and it inserted a bunch of #region tags... :P
A lot of enterprise and business environments run on Windows so there isn’t a need to have cross platform capabilities. WPF apps require a lot less maintenance then a web apps. You don’t have to deal with hosting or multiple changing browsers and WPF can handle large amounts of data display very well. They can also be built very quickly and light compared to say something like MVC. IMO if you know you’re running something on Windows, and it doesn’t need to face “outside” nothing works better then a Windows native app/environment built specifically for Windows. It’s totally dependent upon needs though. Im sure UWP will eventually make WPF feel like Windows Forms, but it has some limitations that still that make WPF a solid choice.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors
Non-deterministic code. We can't guess without code though.
So is MMSQL Express good up to 10gb per database or all databases combined file size?
&gt;C# and XAML that compiles to html and js I think I'm in love.....
Every single individual one? I'm a fan of using regions for high level organization, but that would be ludicrous. 
&gt; But people weren't developing for UWP before they killed the phone either Sure they were. Let alone that Nadella killed the phone almost immediately after UWP was released but even before that people developed for Windows Phone 8 and Windows 8 by sharing code. Of course it was not nearly as popular as iOS or Android development but now this development is 0. Microsoft's platform and devices are pushed to a status of "just use the website" or ugly web wrappers. The only apps that fit Windows UI paradigms are Microsoft's own apps and everyone else is shipping crap. On Mac there are a lot of third party apps that are actually good looking and ergonomic. Sure they get Electron crap too but they also get good apps. I'd rather use a platform where at least some of the apps are good. Microsoft just act as if they don't want to have a platform anymore and are willing to take the most common denominator UX. There is no reason except legacy to recommend Microsoft's platform. Macs have the same Electron apps including Microsoft's own apps and they have pretty apps that look and feel as a Mac app. Windows does not have these anymore. The Surface team builds great devices with touch but nobody builds apps that take advantage of that because Nadella made sure to murder UWP. The app store is a great idea, I always download from the store if the app is available (Spotify, Telegram, Slack, Paint.NET, etc.) because of the security guarantees and non-intrusive updates. Of course when you refuse to invest in your platform the store will be left empty.
Gremlins.
If you want serious advice, we're going to need waaaaaay more detail.
Removed: Rule 4.
Not going to give you the answer... but it will help your Google search if you know that this question is not about constructors at all. What you need to Google are "inheritance" and "interfaces".
Removed: Rule 4.
Removed: Rule 6, spam.
Removed: Rule 5.
Removed: Rule 5.
A lot of people would because the fact remains that WPF development is still much, much faster than web development for a comparable feature set.
Okay, thanks :)
You should add an option for creators to manage/update the page for the product they built. I understand that you have to fight spam/troll/students projects but maybe creators can gain trust in some way and be allowed to update or be allowed to update with a review before publishing.
Java doesn't set everything to public by default. Their have "default" accessibility which is somewhat similar to C#'s internal modifier. And no, you can't switch the default, that would be a terrible language feature - looking at the code and not knowing what the default is for no practical benefit at all.
My gaming machine is a Ryzen and I can check when I get home. Remindme! 8 hours Also, your thread title and your thumbnail initially made me think you were depressed and needed that other kind of help... 
I will be messaging you on [**2018-08-20 22:48:38 UTC**](http://www.wolframalpha.com/input/?i=2018-08-20 22:48:38 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/98siu5/looking_for_help/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/98siu5/looking_for_help/]%0A%0ARemindMe! 8 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Thanks :-). That a good suggestion. It's in the making. Guess I cant postpone implementing a membership/accounts function any longer if I want to allow creators to edit their own listings... The trolls/student issue could become a issue, yes, but I'll cross that bridge when I get there :-). Thanks for your feedback.
Eh, i work in investment banking. Yeah, there is a push for web apps, but if you are doing real time or working with large datasets, native apps are easier and cheaper to write. I work on a 4 person team supporting our real time users. They've done 3 prototypes trying to replace our app with a web app, they all failed. Our sister team that does non real time, is a web app. They are 12 people and support fewer users. They economics doesn't really work for LOB web apps is many cases. 
Yeah it seems that many features in your roadmap depend on a membership system so drop that Identity in there :)
Well I am very happy to be wrong on that. I hate when something that is a program and not a content hosting (i.e. Wikipedia, Reddit, Facebook) is built as a web app.
&gt; Programs should be able to draw their own UI via a library not call a completely different program to do that What if it was more like a WebView?
You just saved me from asking "what is my best option if I wanted to write a Windows and macOS app in C# ?"
The official website still talks about Glade# for example here - https://www.mono-project.com/docs/gui/gtksharp/beginners-guide/
Changed it "repository"
Removed: Rule 4. Here's an example of how to add cookies: https://stackoverflow.com/questions/11164275/how-to-add-cookies-to-webrequest
There's a nice feature in C# 6 called "Exception Filters", where you can write something like: ``` void DoSomeStuff() { try { someStuff(); } catch (Exception ex) when (DoSomethingWithException(ex)) { // Never called, but the compiler needs a hint that // The code after the catch isn't executed by adding // a "rethrow" here. throw; } } bool DoSomethingWithException(Exception ex) { _log.Error(ex); /* This ensures that the exception handler isn't called and * the exception just bubbles all its way up to the next exception handler */ return false; } ``` TL/DR: There's no need to encapsulate the exception in a new exception, as long as whatever you do in `DoSomethingWithException` doesn't cause an exception or modifies some state in unexpected ways.
No, for groupings such as 'private fields" and "public properties".
unfortunately a lot of docs are outdated
Ok but the guy you're bashing there wasn't saying that you _should write webapps for everything_. I think he's implying that if you're dealing with HTML, you're likely already dealing with a _web_ app. And XAML isn't exactly anyone's favorite thing, so just go with HTML.
Are you importing the required system.forms assembly? 
If that's so then I totally misunderstood. It sounds like toe he was doing the "why waste time building desktop apps, build web apps" bandwagon. Especially based on his later reply to me.
system.windows.forms is added
It seems that the compiler is expecting a file name inside of the evaluate property rather than “1+2”. In order for it to find the file it must be placed within the bin-&gt;debug folder of the program. 
Removed: Rule 4.
You did misunderstand (I just meant that the web REALLY does NOT need XAML) and my initial "Heh no" response was just a response to being called a junior dev (if it makes any difference, I run a software development company and have been coding for 35 years). However, let me weigh in on the "HTML for all UI" argument. Keep it simple. If you make a UI framework decision maintain multiple front ends for your application (whatever it is), you are doing it **very, very** wrong. If ANY part of your application is web based, do NOT write an IOS app and an Android App and a Windows App and a Mac app. Certainly don't choose a UI framework that does not render HTML. Instead, write a single, HTML-based SPA using a presentation framework that ensures your app will work on Safari, IE11, Edge, Chrome, Firefox, mobile, desktop etc.etc.etc. Blazor is going to change the world here (C# everywhere, SPA), but XAML is NOT. But wait! What if LATER a requirement comes in for web support? You better have make an architectural decision that doesn't make you regret NOT choosing an HTML-based framework! Next, your criticism of HTML performance. This may have been true years ago, but it's not now. With the advent of WASM and WebGL, there is very little you can do in the desktop that you can't do in the browser. Simple examples: [http://arodic.github.io/p/jellyfish/](http://arodic.github.io/p/jellyfish/) [https://www.google.com/maps](https://www.google.com/maps) Also, why would you make your Enterprise customers use Chrome? That would be daft. Just use a browser-independent UI framework like Bootstrap 4 and your responsive, performant HTML-based app will work everywhere.
Blank line before code and prefix each line with 4 spaces...
 var result = task.Result; is very different from var result = await task; What happens if you try var additionResult = await CSharpScript.EvaluateAsync&lt;int&gt;("1 + 2"); Console.WriteLine(additionResult); ?
I don't really think it needs a /s
I know; was bad enough already. But I wanted to sure - I’m a programmer after all..
A one-third drop in latency is no joke. Nice.
There is a lot wrong with the tech, it has a lot of inherent problems (like limited handle count, risk of handle leaks, no inbuilt UI virtualization) that i do not understand why people still advocate Winforms these days (IE new apps, not existing ones) A lot, if not all, of these problems are solved in WPF, and you get a lot of (optional) dials and switches to customise the experience. Two things even a beginner can use after a week are styles and Data templates A lot of plumbing if you want to make that work in Winforms, and then you have to implement your own UI virtualization as well if you've got a lot of items. And before i hear the age old of excuse of "WPF is hard": it really isn't, it's just the myth that people keep regurgitating. WPF has more depth then Winforms, but is just as easy/hard to get started in. What you can do in Winforms, you can do in WPF in nearly the exact same way. I really wish people would stop recommending Winforms for new projects, WPF has fully succeeded it, and solve a great deal of problems Winforms had . Not to mention that one way or another, there will be a Xaml successor to WPF and UWP, why not slowly get your feet wet now with WPF?
&gt; (like limited handle count, risk of handle leaks, no inbuilt UI virtualization) UI virtualization is nice, but WTF are you doing that is causing handle count limits to be an issue?
Nope. UWP is now being positioned as the platform of the future for developing business applications for Windows. They are heavily investing in it.
Any items control with a lot of items would do the trick. Since each control would require at least one handle. Yes, you could artificially limit it by using a paging system or have some sort of search. But it's an artificial limitation that simply does not exist in WPF. With a medium app and different colours you also have to be careful you are using the same instance again, since they also tend to leak handles if you're not careful. "Not a problem for my simple app" i hear you say. Sure, until it is a problem and you have to fix it. UI virtualization isn't just nice, it's also a smoother user experience.
WinForms will run on .NET Core 3 (windows only).
&gt; Certainly don't choose a UI framework that does not render HTML. What UI framework can't render HTML? Even VB 6 can do that.
It dosn't teach you much about security. But it helps with c#. I read the book a year ago when i started with c#. It isn't the best but if you like security, the topic helps to motivate and if you finish the book and understand the most of it your on a good way. 
WPF has a designer, but most of us don't think it is worth using.
I mean **use** HTML, not shrug and say you might do it in the future.
It's an interesting book. But i dosn't go to deep it's in fact more an c# book than an security book
They aren't thread safe and you don't control their lifetime. I'd recommend moving them into a dependency injection container as a singleton lifetime. Same benefits but with the possibility of unit testing.
No, it's not there 
And it's altogether a better search engine these days.. I tried googling 'offensive jewish holocaust jokes' and all I got was links to people apologizing for something they said. With Bing I got what I needed :D Not to mention the porn... 
Agreed, though very few applications require Direct, and those that do certainly won't be cross platform. 
YAGNI But if you do, it is better to give a good user experience on both platforms than a compromised one that does everything badly.
OK, reinstall of core program helped. It works fine now. Thank you
Hah, yeah, I did mention wpf as well, just wondering if any of these newer UI frameworks have got any. I should probably just get used to XAML! 
Fair enough. I’ve haven’t had a need for Windows store publishing so I’ve pretty much avoided it due to some of its limitations.
You said Winforms is easier to get into, I disagree. You also say it's fine old tech, also disagree. So you would use old tech with severe limitations if there is a better alternative that you can use in nearly exactly the same way? For what reason, nostalgia? My point is use WPF, no matter the scope. I never said you had to go all out MVVM, you can use click handlers if you want. On the odd chance you need to revisit and expand on the app in the future, you'll have a much easier pathway to do so, compared to Winforms.
It even suggests categories for NSFW videos with thumbnails. I was impressed. Guess they made good use of cognitive services after all. 
This! I write kiosk software for ticket sales and it really is the only/best option I can find to work with the hardware I'm given.
They are adding ClickOnce for UWP, making it slightly less painful to use. I'm still not interested in it for other reasons.
Man, I totally agree on this one. Attempting to port my hardware-heavy application over to UWP was a nightmare, I eventually gave up. That sandbox is incredibly limiting. 
Sadly yes, learning XAML is the only way to use it. Especially for the more complicated controls.
We do not have a discriminated union types built into the .NET/C# platform. I think there are a handful of implementations floating around if you need such a thing, though.
Sum types, C-style types, or organized labor?
A labor union.
A labor union.
Organized
I'm seeing more and more plain fucking laziness in questions everywhere currently. Maybe it's just me.
Oh, to make it clear in my opinion UWP is much more dead than WPF. The question is what if Electron can make it. Obviously your case is very special and WPF is just fine.
Labor unions are almost non-existent in this sector. /r/cscareerquestions 
Instead of a standard generic collection, have you looked into using [StringBuilder](https://docs.microsoft.com/en-us/dotnet/standard/base-types/stringbuilder)? 
I personally don't like regions, but to be honest, that article doesn't provide any actual arguments. It just says "ReSharper does the organizing part too so you don't need them" but I don't think that counts as a proper argument. That is not going to convince someone who uses them to not use regions from now on. 
I hope this doesn't sound anti-union or anything, but I'm also not sure what the benefits of a union would be. I have family members who are union workers and it really is a double edged sword for them. I feel well paid and I don't have any safety concerns at work. I also have worked with a lot of overseas developers and, as it turns out, smart people are smart everywhere. They can do my job just as good as I can... But can afford to do it for significantly less than I can. Maybe I'm wrong? I just don't know how much bargaining power it would give us. All the large consulting firms have staff in other countries who would gladly pick up any work I don't want to do. 
for those curious here's how you do it... private static void ApplicationRunProc(object state) { Application.Run(state as Form); } public static void RunInNewThread(Form form) { Thread thread = new Thread(ApplicationRunProc); thread.SetApartmentState(ApartmentState.STA); thread.IsBackground = true; thread.Start(form); }
To sidestep your question: https://coderpad.io/features does this for your needs? If so why reinvent the wheel?
Why not? Just thinking about it.
Very interesting. Can you give us examples?
That would work if the price wasn't so silly high, this is for my small startup who happens to have a bunch of applicants. ~300-500, so I would love to not reinvent the wheel if it didn't save us about $3,000! 
Bargaining power, for sure. We should be making more nowadays, but wages have staid stagnant for the poor/middle class since the 80s. Better working conditions. How many programmers do you know that work 60 hours a week or more? Why are we exempt from overtime pay? Lobbying power: If he have a big union/guild, we can get better representation for us in government. 
I would be happy with some type of certification, similar to the Bar exam. I am so tired of dealing with consultants who started off in Sales and are now development or system experts. As well as horrible code like burred exceptions and databases with no FKs.
Yep. As a union, we could have things like job training programs as well.
It's just fizzbuzz code, but yeah I totally agree. This is all going on a box with very little access to our networks, but lingering code is still dangerous code. I'll look into that!
I wish I could post this to /r/programming.
Skilled trades need guilds or unions. So many people are flocking to it because its a high wage job. Good luck finding a programming job that doesn't have overtime. Why are we exempt from overtime, for example?
Roslyn makes runtime compilation reasonably easy. You could take a look at open source projects like RoslynPad (desktop) or sharplab.io (different purpose, but similar basics). 
This is completely unrelated to C#.
There are clear reasons for "high wage": \-you have to put more-than-average effort into your education \-you have to constantly improve your skills as technology moves quickly \-you are expected to provide more-than-average (compared with "typical unionized" jobs) value So, if you want to go an extra mile you will earn extra money and better benefits. If you're just lazy, mediocre and you feel you're "entitled" - yes, you organize a union. "Trade Unions are a School of Communism" - Lenin.
Sadly enough with **asp.net todays time** as the search term and set for **1 month**, google still returns far better and more useful results than bing. 
This post really doesn't belong here, then.
This is a similar question... How can I close all functions but keep the ///summary tags expanded?
&gt; WPF developers moving to UWP would have to redesign their apps from scratch due to sandbox Not just that. For many applications the problem isn't the sandbox, but rather the lack of controls. &gt; What is the advantage of moving from WPF to UWP? Performance. In theory you'll see much better performance from UWP than WPF for the same code. &gt; Just a better installation and update for end users. Nope. You'll be getting the same deployment options for UWP and WPF (windows store, enterprise store, replacement for ClickOnce) 
this would be the easiest way. Open source it, free for personal / hobbyist usage with no support. For companies making over $X/year in revenue, costs $X per year, but includes actual support. Maybe throw in some extra components as well like a wicked analytics chart set. 
I would really encourage you to look at MXML and how Apache Spark and it's successor Apache Royale do it. I have never worked in an more efficient environment with great seperation of concerns while it's easy to visualise the UI and update it quickly. I can tell you our app built on it is absolutely massive and insanely complex, and updating and maintaining the UI is a breeze. 
Great ideas. I am definitely taking the open source idea seriously. How viable of a candidate for open source do you feel Frogui is at this point? Specifically, do you think it would attract developers?
I will check those out. Thank you. &gt;It makes sense to use XML's great hierarchy system to sepcify UI. It also makes it easy to collapse fold big areas in it to isolate the area you are working in. These are benefits of XML, but how would you contrast editing that with editing via a high-powered WYSIWYG editor such as Visual Studio Blend?
Bing literally surfaces stackoverflow snippets into their results.
In all the time I've worked with WYSIWYG editor's, their performance has never exceeded my ability to quickly open the xml, parse it mentally, and modify it as needed. A great WYSIWYG editor is fantastic, but even internally isn't that editor going to need to build a hierarchical model of the UI to render it? Wouldn't it make sense if a tree structure is the best way to map a layout that storing it in a tree like structure would be a better approach? I've been coding in MXML/XAML for a long time and you wouldn't believe the size of the projects I've had no problem banging out and maintaining for many years myself simply because of this.
This seems like the right direction! Almost got something functional, just having issues importing linq into roslyn... for whatever reason. Thank you!
Encouragement, enthusiasm and involvement definitely appreciated! I just finished a major infrastructure implementation last week which is working out very well, but was all under the surface which means the things that people see (elements, styles, motifs, visual states -- the cool stuff) was put on hold. I still need a few weeks to get some ideas implemented that, once people can see will speak for themselves. Then I will be in a better place to think about the product's direction. But don't let my delay stop your ideas from flowing...
He formatted it correctly for 'new' reddit. It is Reddit that is not correctly formatting the code in 'old' reddit.
I think its place is similar to Xamarin.Forms but with a desktop focus. The Eto controls aren't "hosted" in WinForms, GTK#, etc. but are instead wrappers around these native platforms, allowing for a single UI definition that is implemented with native frameworks under the hood, similar to something like [wxWidgets](http://www.wxwidgets.org) does in C++, or [libui](https://github.com/andlabs/libui) in C. It can use the designers built in to Visual Studio for both Windows and Mac and supports XAML for UI layout and data-binding or JSON, although the documentation for these is sorely lacking.
&gt;but even internally isn't that editor going to need to build a hierarchical model of the UI to render it? Wouldn't it make sense if a tree structure is the best way to map a layout that storing it in a tree like structure would be a better approach? Yes, but I am of the mind that that's possible with C#. In the past 24 hours I've been really digging into this X(A)ML vs design.cs matter and the more I dig the more blown away I am by what I'm seeing. I will keep you looped in. I am hoping this idea continues to show merit over the next several days. If it does I'll re-release with the samples updated. That will give you and others a chance to scrutinize; I'm afraid the current release left too much to the imagination or poorly represented the idea.
Cool. Yeah so i already started with ms sql. Converted an old access database. I like it already.
Wait, is your database not protected by a username and password or some other authentication mechanism?
Yes it is, but you need to run OpenVPN in your PC with a .cer, .key and a configuration file with an IP of the VPN. Once it's running, OdbcConnection needs username and password for the database(s).
Good read. But... no love for [Websharper](https://websharper.com/)? Yeah, it's a bit closer to Full-Stack than just GUI/UI side but it is a framework that is, well the best description I can think of is something like Bridge.NET but with UI Bindings in the F#/C# side, and built in reactive capability. It is pretty daunting, but very interesting as well!
MS version of grpc I guess.
Removed: Rule 3. As suggested, /r/cscareerquestions is probably the best place to ask.
Removed: Rule 3. As suggested, /r/cscareerquestions is probably the best place to ask.
Let's Bing it!
It's a schema/serialisation framework in the same vein as Google Protobuf and Apache Thrift.
Is using ‘out’ the same as by ref?
Sort of, though I don't know if the language spec promises that. `out` parameters can't be used inside a method until they've had a value assigned, and they *must* have a value assigned before the method returns. A `ref` parameter *can* be used by a method right away, and does *not* need to have a value assigned. An initialized field or variable must be passed to a method as a `ref` parameter. As of C# 7.2, an `in`parameter exists that may be read, but not be reassigned, by the method--basically the inverse of an `out` parameter. In practice, these are probably *all* passed by reference, but I think it's technically up to the compiler and JITter. `class` types are *all* reference types, and *will* be passed by reference. A `ref`, `out`, or `in` parameter of reference type is passing a reference to the original reference. `struct`, `enum`, and the primitive numeric types (e. g. `int`, `double`, etc) are value types, and are passed by creating a copy *unless* they are explicitly passed by reference (using one of the keywords above) as part of the method signature.
You could take a look at the Workbooks source code: [https://github.com/Microsoft/workbooks](https://github.com/Microsoft/workbooks)
Problem solved guys, they accidentally installed the yahoo search bar. 
i think the difference is more semantics than anything. like you say, i suspect its all the same under the hood. rather than just the rules, here's my interpretation of the use cases. out is basically supposed to be treated basically like a return. (there's this bullshit rule that "a method should only return one thing". out parameters are a very standard practice in languages where throwing exceptions is bad. the return value is always an error code, and the out parameters are used to pass results back.) ref is used when you may want to modify the original thing. for value types, the original thing is the struct itself. for reference types, it modifies what the original thing points to. (helpful to think of reference types as "value types that contain a pointer"). in is really only useful for value types. reference parameters already can't modify the pointer location of the caller. in is used for large value types where you want immutability, but the struct is too expensive to be passed by value. 
it uses directx under the hood, so it can't be ported. unless they make that xplat (or have a compay layer with opengl), not gonna happen. but they did wsl, which is pretty crazy tech. no doubt they could if they wanted to. 
handles aren't just for files. they are for everything win32. so uielements in winforms have handles (afaik). 
really? do you have to interop to get that stuff? i would think that wpf does all the stuff like "high contrast" automatically, like maybe you have to have that as a key in some resource dictionary but i would expect that kind of support there. 
seriously though, gui.cs by miguel de icaza. the mono guy. going to be writing our internal dev tooling with that.
hey I'd like to see gui.cs (https://github.com/migueldeicaza/gui.cs) on this list. it's not a gui in the traditional sense, but it is a console gui. has mouse support too. 
Asking the professionals, but doesn’t ‘out’ adjust the initialized values space in memory? Where as ‘ref’ references the initialized value while creating a new space in memory based on the var being referenced? Am I high, or was that something I actually learned at School
&gt; but basically every programming language will have the same constructs have you met our lord and savior haskell? joking aside i waffle on if functional programming like that might actually be better for beginners. it gets rid of lots of the "public static void main" sort of nonsense that lots of beginners trip on. 
True, but unless you have a ridiculous number of interactive UI elements it shouldn't be a concern.
Out/in/ref generates the same il opcode but uses diffrent flags associated with attribute that is attached to parameter. From my perspective they are the same in terms what processor does with them.
[Required reading for C# devs.](http://jonskeet.uk/csharp/parameters.html)
Out parameters should be against the law
I mean, if the coffee cup is a struct that just has a fill method which updates a value type then you are wrong. It would behave like the example. Because the you are truly copying, which is more or less what the graphic implies. Right? However, knowing the value vs reference semantics as you've laid them out is important.
Consider the Price developing this thing and compare it against their price point. You‘re a lot more expensive i guess.
For now I ended up using IProgress like you sugested, thanks for the tip.
I this a little like how IProgress works? If not do you think you could find a link to an example of this?
Come to think of it, I can't really remember using `in` to pass to accept parameters. The way I'm thinking of it (and tell me if I'm wrong), it would only really be of any use when the parameter type is (or can be) of a value type and you're calling mutating methods, and value types should in general not be mutable. What are some good use cases for it? I can only really think of when you're working with valuetuples.
&gt;reference parameters already can't modify the pointer location of the caller. `void Foo(ref MyRefType t)` will pass a reference to the reference. So in the method a `t = new MyRefType()` will create a new object that updates the original reference. Without the `ref` the new objects would only live inside the method.
&gt; while creating a new space in memory based on the var being referenced? No. As I see you already know value and reference types. So: Without keywords, when you pass a value types, it gets copied to a new space and that new value is passed to the method. With keywords (ref, out, in) you pass a pointer (under the hood) namely a reference (under the .NET hood) to the method.
This is why people suggest to not make mutable value types (structs) if it is possible. And thats why I oftenly f\*\*\*ed in the ass when developing my games because I must maintain cache-coherency (so I must use structs) but I need to frequently update them. With C# 7's ref variables it would be easier, but Unity is yet to update to C# 7.
And my point is that nobody wrote for the store before the phone either. No one writes for **any** of the desktop app stores, not Google, or Apple, or Microsoft. Developers don't want to distribute that way and customers don't want to buy that way. The thing that's going to save UWP in the enterprise is getting it out of the damned store. No one wants to buy apps on XBox, they want games. That was made abundantly clear at the XBox One launch. The fate of thick client dot net apps isn't the indicator of investment in Windows and XBox. It's an indicator that no one wants to write single platform apps outside the enterprise.
Definitely a miss. I was under the impression that it supports only F#, did they add C# later? On the other hand I should have made the title about C# rather than .NET because there are a bunch of F# tools out there that are kind of out of scope.
Modify your method's signature: `void LongRunningStuff([....], ref float progress)` And when calling: float progress = 0f; Task task = new Task( () =&gt; { LongRunningStuff([...], ref progress); } ); task.Start(); while (progress &lt; 100) { //Display your progress; }
&gt; because don't give mess. The average C++ circle-jerk everyone
You can use the old CodeDom or the new Roslyn to compile C# on the fly. Also I would suggest you to use Assembly Sandboxes (yep, C# has them) so you can prevent malicious codes from doing nasty stuff.
Especially true with JavaScript. Blink and you'll miss it, a few dozen new frameworks have been created.
which is called `internal` in C#.
You can use `internal` modifier. Which is a sort-of "private" but classes in the same namespace can access the field. So it is the Java's "package-private" equivalent, which is the default modifier (not public). Also in Visual Studio you can change the "default modifier" from private to public, there is an option for this.
invite invalid for me too.
Short: Nope, C# only allows numeric values for Enums. Long: You can use a static Dictionary to "map" them.
I have written apps for the store and I have been hired to write apps for the store. There were 100 times more apps for the store than there are now. (Although for this calculation to work we have to assume that at least 1 app is posted rather than 0). I gave these apps examples as an example of how friendly the store is for the end user. I prefer them because they are BETTER from the store. For example Paint.NET doesn't harass me with constant update prompts but is kept updated automatically. You claimed that the store is bad for users.
Roslyn, apart from a compiler service and other APIs, includes an interactive tool with a REPL called C# Interactive. The source code for it is [here](https://github.com/dotnet/roslyn/tree/master/src/Interactive) - I think you'd like it's behavior - it doesn't need a class or method name to show stuff - writing DateTime.Now.ToString() will directly print the string to the console. 
[Jup](https://builtwithdot.net/project/1/builtwithdot.net). 
IMO that's a pretty terrible question. There is no "magic bullet" to dispose of objects in C#, instead they are almost always managed by the scope they are defined in. If an object implements IDisposable then sure, calling .Dispose() allows you to prepare the object so that it can be cleaned up by the GC
It's a trick question. None of those four signals the runtime that your objects are ready for destruction.
im not an expert, but i do believe the technically correct way is using gc.collect, however it is extremely discouraged as the c# gc is very finely tuned to perform garbage collection, and manually calling it at poor intervals will cause performance hits as poor timely stack walks will freeze the threads. also i think the collect method is only a ‘suggestion’ to the gc, and that it can choose to ignore it. please correct me if i’m wrong.
That might explain why reading the documentation hasn't helped me find the answer. 
Can't be, you have to pick an option. Perhaps it's just badly worded.
C# has a garbage collector, so you shouldn't need to tell anything it needs destruction. (A very summarised summary) If you create `var myObj = new MyClass();` you are creating an object, and assigning it a reference (`myObj`). You can then assign another reference: `var mySecondObj = myObj; // This is new reference to the same object.` or pass the object to a method: `MyMethod(myObj); //this creates a reference in the scope of the method to the same object`. Then the variable/reference goes out of scope (the method ends) the reference to the object is removed, but the object remains. Once all references to the object have gone out of scope, the GC will realise that the object is no longer referenced and it will destruct the object. --- There is an exception when you are using _unmanaged code_. If your object references unmanaged code (like an old COM library, or something that is not .Net) you should implement `IDisposable` and destroy the unmanaged code manually in a method called `Dispose()`. You should then call that method when you no longer need the object. If you are using an object that implements IDisposable, it means that that class is using unmanaged code, and you should call the Dispose method on that object when you are finished. `Dispose()` does not, however, deconstruct the object, all it does is clean up the unmanaged code (the GC is unable to clean up objects that are not a part of the Framework). Read more on the C# disposable pattern. It is two methods and a few lines of code that most people have decided is the best way to manage IDisposable objects in C#. --- As far as I remember, you can call `GC.Collect()` to trigger the GC to go around looking for unreferenced objects, but don't. The GC does a very good job of knowing when to work (if you would like to watch it when in debug mode in Visual Studio open the performance profiler window. You will see a memory graph timeline running, with small yellow notches whenever the GC runs. To understand more on this (and you should if you want to insist on messing with the GC yourself), you need to read up and understand the Stack, The Heap, The Large Object Heap, as well as the Garbage Collection Generations.
Thank you for such a detailed response. So in reference to the question and answers available GC.Collect() would be correct even though in real terms programming you would actually hesitate to use that in a real project. 
`variable = null;`
You can use it, because the option is there, and there might be times when you need it. IIRC you would only use this if you have disabled the GC, because you need every ounce of available resources and don't want the GC to take any CPU cycle, and you would trigger the `GC.Collect()` at times you know you can spare it. Unless you can prove that you need those cycles (with numbers) and you are in a situation where you cannot deal with a few split seconds of downtime (the only thing that comes to mind is trying to land a lunar module), there is really no need to worry about it. A very basic rule for all of these things is the people who get paid to create C# and the .Net Framework spends a hell of a lot of time thinking about this and testing it for performance (with numbers) in a lot more senarious that what we would be able to do.
Yeah I guess so in the literal interpretation of the question.
all that does it tell the reference(`variable`) to be equal to `null`. The object will still be alive in the heap.
Maybe they think that it is the line where ends the scope in which the object was created? 
&gt;signal the runtime that your objects are ready for destruction The question isn't how to perform a garbage collection, the question is how to tell the runtime that the object is ready for garbage collection.
What is wrong with the resources in the /r/csharp sidebar? It provides plenty of information already.
fair enough then, I suppose it is the most direct answer. The usage of it could be argued (like if this is an issue rather look at the scope of your variables) but as a direct answer, I suppose it is not wrong. 
well, you probably already know most of the basic syntax considering its a c language. if you’re into game development, then an alright place you could start is modding unity games. unity games are mostly easy to mod. look into rimworld mods and look at their source code, get a feel for the form and structure of c#. dnspy is an app that will decompile c# programs, and a very good learning tool.
Serious suggestions get removed, genius.
Have you considered writing better code with no regions?
For .NET, see [this](https://docs.microsoft.com/en-us/dotnet/csharp/index) guide. For Unity, follow [these](https://unity3d.com/learn/tutorials) tutorials. You can start learning Unity before you fully learn C#. &gt; Is there some sort of fast-track way specifically for someone with PHP background? Let's just say that you'd want to start fresh. C# might have fast track path for Java developers, but PHP is a really different language. 
I can assure you that Spotify works on my Windows Phone and I am quite certain it doesn't run Win32 apps. Yes, I do realize that the WP app is different from the desktop app but long-running processes for [background audio](https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/background-audio) do exist in the API. Last comment: - The phone is justified because a platform which only relies on cross-platform apps is going to die. There is simply no reason as a user to choose this platform ever over a platform that has even 1 native app which is not available on the other platform. - From user perspective the store is good because apps are blocked from accessing certain functions of the OS and because the update process is non-intrusive. This is why as a user I always download apps from the store. Spotify from the store is better than the same Spotify installed separately because it doesn't run its own updater. Same for Paint.NET. The security guarantees are not only based on vetting (which Microsoft used to have but removed), they are also based on the APIs an app can access which is great. I am locking my mother's computer in S mode.
A page already has a title (it is what you see in the top bar of the screen, or in the tab). If you name your TextBox "Title", when your page tries to initialise, it tries to assign the TextBox object to the Title property (which is a string).
You put the close as soon as you no longer need the file to be open. If you are opening a file, reading or writing, and then you are done, you should close immediately. (look up `using() {}`) using(var myfile = OpenMyFileOrSomething() { myfile.DoStuff(); myfile.Close(); } If your class is a reference to the file, maybe it is a log, you want to open, and call a few methods, you should implement IDisposable and close the file in the Dispose method. class lofFile : IDisposable { FileOrSomething myfile = OpenMyFileOrSomething(); public void WriteLogLine(string entry) { myfile.DoStuff(entry); } public void Dispose() { myfile.Close(); myfile.Dispose(); } }
Note that you **shouldn’t even be using GC.Collect**, so options 4 and 5 are already ruled out.
I reread the options, the answer is Finally. My example is a shorthand for var file = OpenMyFileOrSomething(); try { myfile.DoStuff(); } finaly { myfile.Close(); myfile.Dispose(); } The Finaly is part of a try/catch. If there is an exception, the finaly block will still run, cleaning up any non managed code, or open references to files.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch-finally
Yep I ruled them out as they didn't make sense. I am assuming it is in the finally block of code after try and catch. The second answer must be destructor or constructor but I am not sure. It's that bit I need some guidance on.
I am aware of that, but I wanted it explicit in the example. (and if I would always dispose, so I wanted that shown as well)
Thanks for all the guidance. I did think the try/finally/catch block was one of the answers, but the question calls for two answers. I know it has nothing to do with the garbage collector answers so the other one must be destructor or constructor. I kind of know what both of those are vaguely, but not sure which would be the answer. 
&gt; you're passing a copy of the reference to the object If you have any other suggestions on how to implement pass by reference, we are listening.
Have an event that is called when you type (I forget how to do this) Put the contents of the textbox into a string and do .length/.count/.size to get the number of characters in the textbox, if you mod that number by 4 and get 0 then add a hyphen to the textbox You can limit the size of the string by changing the properties of the textbox. (Remember to account for the hyphens that will be placed)
Hope that is of some help.
&gt; Having to use Visual Studio to work on C# for a long time. Isn't this still true? As a (hobbyist) Java developer learning C#, VS and Rider (quite expensive) are the only full IDEs I'm aware of that offer similar features to NetBeans/Eclipse/IDEA. The only other IDE I'm aware of is MonoDevelop, and when I tried that (admittedly years ago) I had endless trouble with it. &gt; Having to run Windows to do C# development. IMO this is largely due to the filenames of compiled C# projects - `dll` and `exe` files, which certainly hint at this.
What awful test are you doing that asks such bad questions? Here again neither of those four is the correct answer. The correct approach would be to use a `using`-block.
that's a terrible example...pass by value for objects means passing a copy of the pointer
I agree with you on that. I posted that link, because right now, I have to import data from a table that I don't control. It has no primary key, and is dumped and rebuilt everyday. So I have all sorts of stored procs and views to help me read from it using EF Core, and have this code testable (Xunit and Moq). These latest features really helped me make the code testable since I have less raw SQL written in C#.
Great, best of luck. 
Removed: Rule 4.
It's `In a finally block in the code segment that uses the file`, and that "code segment" can very well be the constructor or the destructor (tho it really should not). And `using` is just creating a `finally` block. But using `using` is the much cleaner and correct approach.
While it does provide plenty of information, the question here is not targeted at learning c# but how to make the transition from php to c# in the hopes that many have gone down this road before and have advice. What is the point of having a community if all we do is refer people to the sidebar and do not interact?
Quite frankly I would start with the .net MVC tutorials since this puts you in a familiar real of web development. Once you understand how .net works you can start looking at Desktop and Gaming development. Also, keep an eye out on Udemy, they have crazy good specials on a wide variety of courses with really good intro and "the complete" style courses.
And [the compendium](http://www.albahari.com/valuevsreftypes.aspx)
I started doing something like this, purely for fun. It's taken me several months to get it to the point that it's currently at - and while that several months isn't full-time by any means, this is not something you can quickly put together. Feel free to use [my code](https://github.com/ddashwood/CodingTrainer) as a starting point, but beware - my code is not production ready, and was written mostly for my own learning. Also, feel free to PM me if needed.
I didn't have regions originally but someone new joined my project and he ran CodeMaid against my project which created regions... Gonna talk with him about that I guess...
Could you share a bit of the code you used to write the text file? Your post reads as if you're using the File class, but the links you provided are for the Word interop. They work VERY differently and a using statement will not be sufficient for interop.
The major use case for `in` is passing a large struct to a method (i. e. one where copying would be inefficient). Specifying that it's an `in` indicates to the caller that it (shouldn't) be modified by the method, while still getting the benefits of pass-by-reference.
I don't know how IProgress works, however, i can make a quick example of how the events could take place. Let's say you have an object MyClass. In this class you have your method MyMethod where you want to log things. But iirc, you want to log on the gui, which calls the MyClass.MyMethod. You need to create an OutPutEventArgs like this : `public class OutputEventArgs : EventArgs` `{` `public string[] Lines { get; set; }` `}` and an OutPutEventHandler like this : `public delegate void OutputEventHandler(object sender, OutputEventArgs e);` What you need to do next is creating `"public event OutputEventHandler Output;"` on MyClass. When you want to send an event you can just do "`Output?.Invoke(this, new OutputEventArgs() { Lines = new string[1] { "test" });` That's it for your MyClass class. when you want to call it from the GUI, when you instantiate your MyClass var, you can do just this : `var myClass = new MyClass();` `myClass.OutPut += MyGuiMethod;` and then somewhere on your GUI class : `private void MyGuiMethod(object sender, OutputEventArgs e)` `{` `// you can get the lines from e and do whatever you want to do with it :` `foreach(var e in e.Lines)` `{` `LOG.Info(e);` `}` `}` I'm not sure to be perfectly clear, but the good thing is : there is no dependency between MyClass and your GUI. You can subscribe to the MyClass events from any GUI or any other class you want to. Tell me if you need more precisions ! 
Yea, im sitting here trying to reason through my current understanding of it and the gif doesn't really make sense. 
You are technically correct, but that's pretty much a distinction without a difference.
With .NET Core I believe you can use VS Code or other editors to write C# now.
&gt; there's this bullshit rule that "a method should only return one thing". A method *should* only return one thing. Sometimes, that one thing may be a complex, composite value, but you shouldn't be writing methods that return multiple, unrelated values. (That is, a method that returns the current date, the price of tea in China, the name of your favorite schnauzer, and the most popular model of sports car in the Czech Republic is *probably* not a good method because nothing that it's returning is related to anything else. Whether it use `out` or tuples or a custom object to return all of it doesn't matter so much.) In practical terms, there's not a lot of difference between bool Foo(out Bar baz) and (bool, Bar) Foo() However, there's a lot of language and platform support for methods with signatures like the latter, just because they fit easily into a box described by `Func&lt;T&gt;`.
Because that's literally how you implement pass by reference. From the object perspective, it's being passed by reference. 
The problem is that beginner programmers will pass an object in c#, and then will think c# passes by reference, which it doesn't. The *difference* is significant. If beginners think c# is pass-by-reference, they will be really confused when they set a parameter to a new object (which then won't change the original reference). It's pretty important to know. 
How is that mechanically different from 'reference types are passed by reference, and value types are passed by value'? The difference is that *variables* and *fields* of reference types are *also* references to values, so reference types are assigned by copying a reference, while value types are assigned by copying. This obviously plays into how arguments are passed, but just pointing out that they're wrong because "C# passes everything by value" doesn't seem, to me, to be clarifying anything.
Still can't mock them, though. 
Because if reference types were passed by reference, then you could change the reference. Let's say we have this method: void MakeNull(Object ob) { ob = null; } Now we do: MyObject a = new MyObject(); MakeNull(a); if(a == null) Console.Writeline("This will appear if C# is pass by reference"); else Console.Writeline("This will appear if C# is pass by value"); 
The confusion lies in the naming and terminology. If objects are pass by reference, what does the ref keyword do? We know that it actually passes the identical reference, a pointer if you will, but by saying “it’s always pass by reference” and then including a ref keyword that “passes by reference” we confuse the noob. I use an address book example when I teach. Pass by value, I give you a copy of my house. “Pass by reference”, I give you a copy of my address book. Using ref keyword, I give you my address book. 
WTF. Revert his commit and tell him to stop being a moron? I think CodeMaid lets you remove regions.
This is pretty simple by elimination: 1. In the destructor 2. In a finally block in the code segment that uses the file 3. In the constructor 4. As an argument for GC.Collect 5. Immediately after a call to GC.Collect * you should never have to interact with the `GC` class. It's a huge code smell. * the destructor, in C#, is mostly only used in conjunction with the dispose pattern. Doing something else with it is also, at the very least, idiomatic. * _ending_ something in the constructor doesn't make much sense. * this leaves us with a finally block, which is _sort of_ the right answer. I say sort of because that's not really idiomatic either. You should use a `using` block, which implicitly calls `Dispose` in its (hidden) `finally` block. `Dispose`, then, is expected to clean resources — such as by closing files. TL;DR: the answer from this multiple-choice question is "In a finally block in the code segment that uses the file", but in actual code, just use a `using` block instead.
That's actually a good point, ref is somewhat confusing if it's already pass by reference.
Exactly. Sometimes I call it a “reference to my variable”. 
Thanks. Obviously I will look at and use those resources as I venture deeper into the forest, but yeah, I was mainly wondering about the specifics of this particular transition from PHP. Seems like a few people already said that it would be best to start from scratch as those are very different languages. I'm sure a lot of concepts are the same as I already spoken to the .NET camp at work and they confirmed this. 
Thanks for this, will check those out after work :)
ASP.Net WebForms controls are members (fields) of the instance of the Page (the ASPX page base class). But that Page base class already has a `public string Title { get; set; }` in it. So when you try to create a textbox named Title, the visual designer code generator (the thing that makes the .designer.cs file for you) generates a `private TextBox Title;` in your derived class and that conflicts with the string property in the base class. public abstract class Page // built into ASP.Net { public string Title { get; set; } } public partial class MyPage : Page // generated by VS, in the MyPage.designer.cs file { public TextBox Title; // this breaks things! don't do it! }
It does let you remove regions... Hopefully I didn't have any existing regions because reverting the commit might be messy since there have been other commits since then!
It helps to know the full names of things: VB has: * pass value by value * pass reference by value * pass value by reference * pass reference by reference C# adds * pass value by write-only reference * pass reference by write-only reference * pass value by read-only reference * pass reference by read-only reference 
Since others have mentioned how it works in C#, I'd like to talk about VB. VB doesn't see `out`. What it sees is a `ByRef` parameter with an `OutAttribute` attached to it. But since it doesn't know what an `OutAttribute` is, it ignores it and treats the parameter like any other `ByRef`.
Where P is "Pointer" and A is "Address in memory" and "-&gt;" is read as "points to": Value types: P1 -&gt; A1 ... then ... P2 -&gt; A2 (after being passed to method) (i.e new pointer pointing at new address that contains copy of A1) Reference types: P1 -&gt; A1 ... then ... P2 -&gt; A1 (after being passed to method) (new pointer that points to the SAME address) When using ref: P1 -&gt; A1 ... then ... P1 -&gt; A1 (when being passed into method) (i.e SAME pointer pointing to SAME address)
&gt; doesn’t ‘out’ adjust the initialized values space in memory? Nope, it is exactly the same as far as the CLR is concerned. The difference is that some languages such as C# see the `OutAttribute` and treat it differently. Other languages such as VB ignore that attribute entirely.
Is the VPN down because the connection is down? 
Should be made with effort? How and WHY would I waste time putting my effort on asking something this simple? Do you want a will written down for you, or some 20 page essay just to ask how can i rotate a fucking gif? lmao 
By the way, my plan is to make Indie game like Stardew Valley one day. It's made in XNA but also could be made in Unity, right? Which one should I chose?
 By the way, my plan is to make Indie game like Stardew Valley one day. It's made in XNA but also could be made in Unity, right? Which one should I chose 
Can't advice u on that, but seems stardew is a 2d game and that shouldn't be a problem for unity. 
K bro, take care
From the [full text of the rule:](https://www.reddit.com/r/csharp/about/rules) &gt; If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed.
Removed: Rule 5.
That's one of the few cases where C syntax is somewhat more clear: reference types are pointers, adding ref means you're passing a pointer to the pointer. 
A bit of a tangent, but I would like to say with the formal addition of tuples to C# anymore I prefer to use tuples for multiple return values over out. I believe it results in easier to read code that is structured in a more logical way. That is my personal preference, so feel free to disagree, but I feel like it is good practice going forward to discourage the use of out in favor of using a tuple.
Really? Go ahead and search on google and see if you find the answer, wise guy
but for a real program, especially in java, there is this whole song and dance about everything, like filename must be the classname, imports, primitives vs objects... people want their beginning classes to be useful and pragmatic, which is why so many intro classes use java. but Java is a shitty language for beginners. maybe haskell would be better. 
So just to test if I get this right: - pass value by value: there is an object (X). The value of X is copied to the call stack. This is passing a primitive or a struct. - pass reference by value: there is an object (X) and a reference to it (Y). The value of Y is copied to the call stack. This is passing an object. - pass value by reference: there is an object (X). The memory address of X is copied to the call stack. This is passing a `ref` primitive or object. - pass reference by reference: there is an object (X) and a reference to it (Y). The memory address of Y is copied to the call stack. This is passing `ref` object. Correct?
sort of. you can't do if(Foo(out var barz)) with the tuple. but generally I never actually see out or ref variables except for the TryX patten. i think the original "guidance" had more to do with call stack organization under the ospices of "one method should be simple enough to return only one thing". by returning a value tuple of two things, that makes the stack look exactly like you're returning two things, so it all winds up moot anyway. 
You would use pattern matching in that case. It's a little more verbose, but not *loads*: if (Foo() is var t &amp;&amp; t.Item1) { // name your tuple's members, folks When they get tuple decomposition patterns going (C# 8, I think?) if (Foo() is (var x, var bar) &amp;&amp; x) { I'm pretty sure the guideline is about coherence, rather than "call stack organization", but also: `out` and `ref` args are clunky and unusual; consequently, they're not very idiomatic. (I'm pretty sure `ref` only exists for performance and interop, in fact.) YMMV.
Oh my god, you're such a genious. Fucktard, you think I didnt search for that before? That's why I said rotate a GIF, not a PNG/JPG on a pictureBox, because the results are different.
Can you do unqualified pattern matching like that? if (Foo() is var t) there are no constraints, that pattern is just introducing a new variable into the scope. But like you say with tuple decomposition that is not an issue. However I still think i like if (int.TryParse(myStr, out var myValue)) more than if (int.TryParse(myStr) is (var success, var value) &amp;&amp; success) but hey, there's more than one correct way to do things.
that was actually very helpful
I think that way of thinking is exactly backwards personally. By teaching people all the lazy shortcuts up front you don't prepare them for real world jobs which will almost certainly require them. I think to try and move to a language with strict typing after only learning lazy format would be a lot more jarring than understanding it up front. If the people learning aren't intelligent enough to know when to pick an int vs a float then they probably shouldn't be programming in the first place.
check out [this](https://stackoverflow.com/questions/3047375/simulating-key-press-c-sharp) post on stackoverflow you can make it work with the numbers 1 2 3... if i'm right that can also switch between the hotbar items 
We have 3 internet providers, 2 of them were down, the other one was not configured to the VPN network. The point is this: What is a product that I could use to easily configure a VPN network? Say I have one server in another city with IP X.X.X.X but I don't want it to be public, in my house I could turn on the VPN connection from my PC with a software like OpenVPN and my cer/key files.
\&gt; By teaching people all the lazy shortcuts up front you don't prepare them for real world jobs which will almost certainly require them. Certainly teaching bad habits would be a bad idea. But writing even a simple java program is a bunch of boilerplate and handwaving and "don't worry about what this means right now". It would be good to be able to introduce things on purpose. Like don't worry about classes until you get to objects. Don't worry about packages. This is the heart of the issue, though, is attempting to give "real" knowledge while still making it accessible. TBH i'm not sure it can be done in as short of a time as most classes are. \&gt; I think to try and move to a language with strict typing after only learning lazy format would be a lot more jarring than understanding it up front. well, haskell has an extremely strong type system. but generally, i agree that static typing is better for teaching. i originally brought up haskell a sort of as a joke, but now i'm changing my mind and thinking it may not be a bad idea. \&gt; If the people learning aren't intelligent enough to know when to pick an int vs a float then they probably shouldn't be programming in the first place. the idea "they should just be smart enough to understand it" is not a good way to deal with beginners. There is a phenomenon (i forget the name) where people familiar with a subject matter lose the ability to think like beginners think. this makes it hard to meet the beginners on their level, and as teachers we gloss over "obvious" concepts that are not obvious to beginners.
But any elementary math student can be told "int for whole number, float for decimal." Whether or not we want to start breaking down doubles, long ints, and the more technical side is different, but it's important to understand the basics of data types.
So in C# int.Parse(string number) will throw an exception if it can't parse. int.TryParse(string number, out int parsedNumber) will return a bool if it can or can not parse. Internally it is just a try catch wrapper around int.Parse where the try returns true and assigned the value of the out parameter and the catch returns false with a default assignment of int. It just gets rid of the default check that you would need to have around any string that you are parsing to an int. Most all of this is convention or syntatic sugar and is all their to declare intent. The original question of out vs ref for example makes no difference to the IL but it is a compile time check for intent. The same can be said about the new in parameter. Designed to be read only and ensures write protection around a value so that it does not need to be copied. Purely there to express intent. On large projects it is great to have a common understanding of the convention you want to use which ever it may be so that any dev can take ownership, debug, and understand the intent of what the code should do. I agree on your tuple statement at the bottom.
if you actually want to send a mouse wheel scroll, you can do so similar to how the key events are sent in /u/Limitless4171's examples. https://docs.microsoft.com/en-us/windows/desktop/inputdev/wm-mousewheel
Removed: Spam.
You can use some Libs like [Automapper](https://automapper.org/) or use System.Reflection where you query the Properties of each Type.
I was going to make the method async, but it's main and C# doesn't support async main yet. I made an async method and called it from main, and that didn't help; for reference here is my Program.cs: using Microsoft.CodeAnalysis.CSharp.Scripting; using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Text; using System.Threading.Tasks; namespace RoslynExperiment { internal class Program { private static void Main(string[] args) { var result = ComputeAsync("1+2"); Console.WriteLine(result); } private static async Task&lt;int&gt; ComputeAsync(string formula) { return await CSharpScript.EvaluateAsync&lt;int&gt;(formula); } } }
I'm assuming the Console app runs on the same machine as the IIS. Which does raise the question why the Console app is a separate app in the first place. Leaving that aside, look into named pipes. The library I currently use is https://www.nuget.org/packages/NamedPipeWrapper.New/.
+1 for Udemy. You can start a free trial for PluralSight, but I never liked their site. The vast majority of the courses I found were dated, or just really poorly taught. Sorting through the chaff got old real quick. To each their own though, PluralSight might just be exactly the kind of resource you want.
Sounds like hackerrank.com is what you are looking for. You can create the tests and the user submits the answers.
So you start Controller.Main() and it spins up the Socket thread. You need to tell Socket how to contact Controller on a different thread. Welcome to the wonderful world of callbacks. There are several ways to set up a callback, but in your case, you pretty much have to use a raw delegate. This is because you opted to make the Socket object a static pseudo-singleton. First, start off by creating a delegate function template. Put this inside of Controller: `public delegate void NewClientConnected(Settings settings);` Next, add a callback (a.k.a. "function pointer") inside the Socket class. Since everything else is static, it should be static too. Like this: `public static Controller.NewClientConnected Callback;` Next, modify the NewClient() method to call the callback. You can get rid of `Settings RecSettings = new Settings();`. It's not needed anymore. Now, change `RecSettings = JsonConvert.DeserializeObject&lt;Settings&gt;(msg.ToString());` to this instead: `Callback(JsonConvert.DeserializeObject&lt;Settings&gt;(msg.ToString()));`. This will deserialize the Settings object and pass it as a parameter to the delegate attached to Callback. Change the S_PropertyChanged event handler to match the delegate, and remove the event args junk: public static void SettingsUpdated(Settings RecSettings) { Console.WriteLine("The {0} has changed to {1}", e.PropertyName, RecSettings.State); } Finally, wire-up the delegate invocation. (Sound like an event handler? Fun fact: It is! Events are just fancy delegates with a parameter convention applied to them. We're basically creating a manual event to get around the static stuff in Socket.) In Controller.Main(), the first thing you should do is: `Socket.Callback = SettingsUpdated;`. That wires up your delegate implementation to your callback function pointer, which will allow your Socket.NewClient() method to send data back to the Controller.SettingsUpdated() method on a different thread.
last update: 5 years ago...
I came from PHP to C# back in 2006. I started with ASP.Net WebForms (and an onion tied to my belt) and worked on up from there. My initial code abominations hurt my brain now, but they worked.
Your get single is wrong ;)
I've done this a few different ways: - Akka.NET (Personal preference): This takes a little effort to learn, but the pattern works great and gives you a lot of options for scaling (i.e. if your Console service and IIS app aren't on the same machine, or get separated in future, or perhaps even having multiple instances of your document processor on different machines). What's nice is each of those 'remoting' scenarios builds off each other in knowledge, so the learning curve isn't as daunting as one would think. Biggest drawback is having to learn the basics of Akka, and Limitations on message size: You have to poke the configuration to pass data larger than ~96KB, and anything over a couple megabytes is probably a Bad Idea^TM. - RabbitMQ: Yes, I'm aware that you don't want to have a service constantly check a queue; OTOH the effort/overhead of having a listener on a RabbitMQ bus with something like [EasyNetQ](https://github.com/EasyNetQ/EasyNetQ) is very minimal. This is another setup that will let you scale out easily, and has some advantages over other solutions such as durable/reliable delivery. - Console Service running WebAPI: [You can do this pretty easily with ASP.NET Core nowadays](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/windows-service?view=aspnetcore-2.1) (It felt hella kludgy in ASP.NET 5) or, if you're a minimalist, [NancyFX has self hosting alongside a number of other options](https://github.com/NancyFx/Nancy/wiki/Self-Hosting-Nancy). - Named Pipes: This can work well for local scenarios but I've never tried machine-machine. Note that in ANY IPC, even local, you should try to keep your communication payloads small. For things like Document processing, what I will usually do instead is have the document processor put the completed file in some location both processes have access to, and just send the location back.
2016 isn't five years ago, and regardless, Microsoft hasn't made meaningful changes to named pipes in probably well over a decade. Recency isn't really relevant here.
That's not correct at all, you may want to give it yet another round of testing.
My best idea, because using AutoMapper or Reflection is just dirty. Consider the following Interface: public interface IViewDataMapper&lt;TDataModel, TViewModel&gt; { TDataModel MapViewToData(TViewModel model); TViewModel MapDataToView(TDataModel model); } You can plug corresponding implementations of that into your `SupportingDataRepository`with some other changes. It'll still be a good bit of code writing, but probably more 'correct'. *Opinionated Statement*: This is why I hate the generic repository pattern for all but the most basic of CRUD apps (Where the model 1-1's the database). What happens when you want to do something fancier than a GetAll or GetByID? What if I never actually want to update data on the table? Exposing an `IQueryable&lt;T&gt;` to consumers is a can of worms; you can actually wind up with MORE code duplication.
My dude, good stuff
&gt; is is another setup that will let you scale out easily, and has some advantages over other solutions such as What this does is takes files (PPT, PDF, DOC, etc...) and breaks each slide or page into an image, sends the images to a cloud service, then reports back to IIS. The work flow is: User uploads a file Some stuff in a DB is checked/updated. File location on server is stored (URL to file in case a processing agent on another server grabs it first it does not have access to the local drive) A DB table or processing Queue is updated. however I do not want the service checking the data table over and over. so if I can use akka, or rabbit to tell the service "Hey dummy, wake up here is a file" the service processes the file and if completion is a success, the file version/pagecount is updated in the database. that's it in a nutshell (there is SOO much more to it then this.) 
Look into Linq2DB. Last I checked, EF Core still can't do things like: - Recursive CTEs (Or, well, any) - Windowing Functions like RANK or ROW_NUMBER - Temp Tables - MERGE - Single-Trip Updates (i.e. `dbContext.Where(q=&gt;q.ShouldUpdate == true).Set(q=&gt;q.ToUpdate,newValue).Update();`) - Data Dependent Updates (i.e. `dbContext.Where(q=&gt;q.ShouldUpdate == true).Set(q=&gt;q.ToUpdate,q=&gt;q.Increment + 1).Update();`) Give it a try!
I haven't played Minecraft but I've done some automation stuff before. Is it possible to remap keys to make your task easier? Depends on the game, but (at least in Windows) there are tons of mouse messages that a real mouse generates and I've run into problems where the game won't respond unless I simulate a lot of them. IE - I can't just tell windows "Hey, tell that game I clicked at 632,240" because the game knows my mouse cursor was last at 120,200 and it expects me to send a bunch of mouse moves and what not. If you can remap it to a keystroke I've always felt like it was easier.
Just a tip I had pointed out to me years ago when I took a Unix course at college: Move and rename are the same thing. When you move a file, you're renaming the path. When you rename a file, you're renaming the filename. But the absolute path is path+filename, so either one can do the job.
Yep
I like this. What is the logic behind using a Deleted column rather than actually deleting objects from the db? Audit trail? 
I have a class where regions would be really useful (big class full of definitions that have no hierarchy and are all at the same level). There are broad categories, but you can't put them into a hierarchy according to those broad categories. So the choices to keep the file easier to deal with is either regions or partial classes. With regions being the lesser of two evils (search one file, not 10 files). Business definitions suck, sometimes there's just no way to refactor it down to be smaller.
&gt; If it can't parse the data shouldn't it be throwing an exception? Depends on how you are using it: Enter name or id number? if int.TryParse(x, out int id) LookupUserById(id) else LookupUserByName(x)
Easier to write once maybe, but not easier to maintain / refactor.
&gt; Two things I didn't say: I'm using a PostgreSQL database, and I'm developing and running the production app on Linux (Ubuntu 18.04). Shouldn't be an issue. I've not used it much in core, but it is supported, and the DB Provider support is all the major players and then some.
If it's REALLY a pure method (i.e. Gets inputs A and B and outputs C, no state changes) The lack of ability to mock should be to moot.
When talking about references we usually mean variable references, not object references
Yeah, I thought it was a good idea at first when he suggested it... :P
Anyone know of a good profiler for database calls? Can you use VS?
It would have been easier to debug had you stored your constructed strings into local variables rather than passing in an anonymous value. This gives you the opportunity to inspect the result before the call, or output to a console. Or a number of other things like watches, etc. Do what works for you.
Yeah, in the financial industry you pretty much have to soft delete and track changes too everything. 
The right answer posted, and minor nitpick while we're here--I recommend not using "+" to combine strings. You can use the new(ish) string interpolation feature of C#. ex. ${lastName}, {firstName}" (Path.Combine is fine, too, in your case if you are really working with paths, and there are also some URL/URI helper functions for URI specific path creation, etc.) You can even put code inside the {} like: Console.WriteLine($"Five minus 3 is { 5 - 3 }"); Five minus 3 is 2 This sort of replaces String.Format("{0}{1}...", value0, value1, ...) which gets nasty when you have more than one or two parts to be replaced, making it hard to figure out which value will end up where and you get much past {1} or {2}. StringBuilder is still also a good answer, useful in things in loops where you have an unknown or dynamic number of things to replace. It's a nitpick when you're doing something super simple for a small project, but better practice to learn to use string interpolation, StringBuilder, or when applicable even Path.Combine is fine. It will help limit string interning. If you are doing a lot of this the cost eventually adds up. 
He's right. I increasingly think Single is a mistake unless you're try/catching that mofo and maybe even then. I have so much production code with Singles that should *never* be anything but exactly one thing and... sometimes are.
What exactly are you looking to capture? What database?
I've done something similar. My current job (a small startup) was basically a PHP shop for all backend development. I've been a massive fan of C# for a very long time but never really had to chance to use it in practice. Within the last year I convinced my boss that C# (in particular .net core) has many, many more advantages over PHP and he agreed to let me use c# for all future projects. I had prior experience with C# so for me it was mostly about learning the ASP Core framework which had some different paradigms compared to Laravel which I used in PHP. What I would recommend doing (what I did) is build up solid project in PHP and then rebuild the exact same project in C# ASP Core. That way you can focus more on the code rather than the design and features. You are basically just porting over your code, but in the C# way of doing things. You will most likely have to do this on your own time because your job will probably not allow/budget for this sort of thing. Unfortunately, I'm not sure what resources/books to recommend. My personal best style of learning is just to dive into something using the official ASP documentation and stack overflow for troubleshooting, yours may differ. Are you using any frameworks in PHP? When I was just starting out, I simply read documentation on the ASP docs to figure out how to do something that my current framework (Laravel) was capable of. Do you have any experience with a strong/statically typed languages? That may be the hardest thing to grasp coming from PHP which basically accepts whatever you throw at it. If not, you might want to start off with some basic console programs in c# to get familiar with programming in a statically typed language.
Community edition was designed for freelance programmers like you. Express editions are designed for large companies that don't qualify for the community edition and refuse to pay for a pro license.
You're saying you can't see the data, or the database itself? (Sounds like the latter.) When you're connecting to the database under SSMS, under what context are you connecting? Is the context you're using a SQL sysadmin, or does it least have high enough permissions to browse databases and schema on the instance? Are you running Visual Studio as an administrator? Are you sure you're connecting to the same SQL Server instance (remember that there can be multiple on a given server)? Is "\\\\mssqllocaldb" a named instance (for example), whereas you're connecting to the default instance in SSMS? &amp;#x200B;
EFProfiler for Entity Framework is a fantastic tool. It is paid, though. Otherwise there's the built-in Sql Server Profiler in SSMS.
mssqllocaldb refers to the LocalDB feature. https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/sql-server-2016-express-localdb?view=sql-server-2017
My god Jim, upgrade! You'll love it. 
var iuser = new IdentityUser&lt;Missing, Missing, Missing, Missing&gt;(); 
Hey guys, &amp;#x200B; thank you for your quick replies! &amp;#x200B; Yes, I am using MSSQLLocalDb, as I have mentioned, I use the "defaut" settings, everthing is preset and I did not change anything. @ [bricked\_machine](https://www.reddit.com/user/bricked_machine), I am running VS as an administrator. I can see the Database, it looks like this: &amp;#x200B; &amp;#x200B; Sorry for coloring-over some of the things, I am a bit sensitive regarding my data. As you can see, all the tables are there. Also, I can view the data within the tables (the data ok). &amp;#x200B; When I run the application with F5 "IIS-Express", the browser opens and I can register with a new username and password. This user is then saved under the AspNetUsers table. &amp;#x200B; When I publish the WebApplication and start it from IIS-Manager: everything works as intended, I can register with a new username and password and log in, but the user created that way is not in the AspNetUsers table. Nothing I do on the website when running it that way is saved (but it is saved somewhere! since when I restart the application, the user and his data still exist, I just can not find it). &amp;#x200B; I hope my explanation helps :S &amp;#x200B;
From what I've seen (again, may be outdated) VSC is far behind VS/Rider for features, though it does look good for simple, lightweight stuff.
I replied to your question in the thread if you still want to help me out. Sorry for not replying to you directly. 
LocalDb is meant as a development database. Do not use it for published applications.
Thanks for the top tip! I'l give it a go. I'm a little confused by the correct answer above: So am I supposed to provide the new name of the file when I declare the path for the 'destinationPath'? Also I have both jpeg and png files I want to move. If I have to declare .jpeg then how can I also move and rename the .png files in one swoop?
XPath: // to select anywhere and @AttributeA to select the attributes, so does "//@AttributeA" work?
I suggest you take a look at the documentation for [FileInfo](https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo?view=netframework-4.7.2) and [DirectoryInfo](https://docs.microsoft.com/en-us/dotnet/api/system.io.directoryinfo?view=netframework-4.7.2). Another pointer would be to look at FileInfo's construcors and the `Extension` property.
No. Express is the old free version, community is the new free version.
Do you only want features that were available in 2010? Do you only want to target older frameworks and find that none of the current tutorials work for you? No? Use the latest version.
It's been quite a while but I thought I remembered that the Express edition had several different versions flavors. There was a VB version, C# version, Web version. Then later that changed to a Desktop version and Web version among other "Express" products. Then VS 2017 Community came out with the intention to replace the Express editions. Community is something between what was VS Standard and VS Professional and everything is all in one package again. I also read that the Express editions didn't support extensions.
And this too. 
Besides the suggestions by the others already (Use Community Edition).. Why the heck would you choose Visual Studio 2010 Express as an alternative? The viable alternative would be Visual Studio **2017** Express.
&gt; Express stopped in 2012, after that Community took over. This is not correct. You can download an Express version for 2017 too.. under the link you posted.
Anonymous isnt quite the right word their. They mean you are constructing one of the arguments to File.Move in the call to the method so there is no variable to inspect to see it's value in the debugger
In the File.Move command, you are passing in a local and the result of a string concatenation - which is perfectly fine syntactically. The result of the concatenation is an anonymous value because it is not stored anywhere. My suggestion, and something I have to do myself when vexed by some compactly written code like this, is to create a local where you store the result of your concatenation so the result can more easily be inspected through the debugger, output to the console, or logged with trace logging.
You have not created a websocket, you are listening for TCP connections. Websockets are persistent, framed connections negotiated over HTTP. There is support for websockets in .NET (see System.Net.WebSockets). Your best bet is to start a new ASP.NET (Core) project and use websockets from there. 
It's the best I could come up with :p
Cheers will do
Oh I understand! Yes thanks for explaining. Basically I didn't store my string concatenation in its only variable first.
I understand, thanks for explaining
&gt; Visual Studio Express 2017 is available for Windows Desktop developers. This will be the final version of Visual Studio Express, and there will not be a UWP or Web offering of Visual Studio Express 2017. We encourage all users to look at the free development options offered by Microsoft such as Visual Studio Code and Visual Studio Community for future development needs. https://visualstudio.microsoft.com/vs/express/
Remove the file name from the original path
I've had a look at automapper but I think I might not be smart enough to use it properly because I didn't understand it really
LOL good spot :) I've expanded and also fixed it hahaha
It was supposed to be .SingleOrDefault(x =&gt; [x.Id](https://x.Id) == id &amp;&amp; !x.Deleted); but yeah... SNAFU! In this case, I'm not expecting there ever to be more than 1 item returned and there shouldn't ever be no items returned (though since this is a website, its possible one user could delete the item which would result in no items returned by this query O\_o)
i never tried this and don't know if it works but can't you just write that code into a cs file and compile it into an exe using csc in cmd? you can either use some other way to run batch code or you can do the same with the batch code by just taking it and putting it into a batch file then running it. 
**Original issue:** Thank you for the suggestions, I ended up doing the following: 1. I installed the NuGet package "Microsoft.AspNetCore.Identity.EntityFrameworkCore" in my DAL. 2. I installed the NuGet package "Microsoft.AspNetCore.Identity" in my BLL. 3. I setup Identity in the Startup class. So now Identity has attached itself to the DB and that's great. &amp;#x200B; **New issue:** I convert my Entity Framework entities to POCO classes in the DAL, and so now the issue is how do I use the SignInManger (which is a generic class and is by default setup to work with my entity) with my poco class? &amp;#x200B; E.g. I have this user entity: `public class UserEntity : IdentityUser` `{` `public CompanyEntity Company { get; set; }` `}` &amp;#x200B; I have this user poco (temporary class until I figure out proper properties, it is currently the same as the IdentityUser): `public class User` `{` `public string Id { get; set; }` `public string UserName { get; set; }` `public DateTimeOffset? LockoutEnd { get; set; }` `public bool TwoFactorEnabled { get; set; }` `public bool PhoneNumberConfirmed { get; set; }` `public string PhoneNumber { get; set; }` `public string ConcurrencyStamp { get; set; }` `public string SecurityStamp { get; set; }` `public string PasswordHash { get; set; }` `public bool EmailConfirmed { get; set; }` `public string NormalizedEmail { get; set; }` `public string Email { get; set; }` `public string NormalizedUserName { get; set; }` `public bool LockoutEnabled { get; set; }` `public int AccessFailedCount { get; set; }` `}` &amp;#x200B; I then have this service (I have left the type as ?): `public class LoginService : ILoginService` `{` `private readonly SignInManager&lt;?&gt; signInManager;` &amp;#x200B; `public LoginService(SignInManager&lt;?&gt; signInManager)` `{` `this.signInManager = signInManager;` `}` &amp;#x200B; `public async Task&lt;SignInResult&gt; Login(string username, string password) =&gt; await signInManager.PasswordSignInAsync(username, password, true, true);` `public async Task Logout() =&gt; await signInManager.SignOutAsync();` `}` &amp;#x200B; The issue is that my BLL shouldn't have accesss to the UserEntity class. The Identity SignInManager needs access to the UserEntity class. The solution I want is for the SignInManager to use the User class. &amp;#x200B; How do I get there? I'll gladly try to explain it further if it's necessary. 
While I cannot address your points directly I can recommend you to use ControlzEx and use it's WindowChromeBehavior. It's used by MahApps and I think it works really well for a custom window chrome. It solves several known issues with the WPF WindowChrome. [https://github.com/ControlzEx/ControlzEx](https://github.com/ControlzEx/ControlzEx) About your comment on WindowChrome working on Windows 7 or not: I can confirm it does work. We use a custom window chrome at work and it works correctly on Windows 7.
So the try catch I can get, but if you're always expecting only one first or default would, at least in my opinion, silently fail. I.e. You built it with the mindset that there should only ever be one, so you would want to know when there isn't for debugging purposes.first our default would just grab the first and go on its merry way, possibly causing a tough big to catch down the road.
Community edition is free for all open source projects and commercial usage for companies with 5 or less developers. See the license [here](https://visualstudio.microsoft.com/license-terms/mlt553321/). Express editions are being retired (VS 2019 won't have a single express edition) and you should use VS 2017, VS Code or just the dotnet CLI. 
&gt; It will feel like you're cut off from .net. Didn't that part change once UWP started supporting .Net Standard 2.0?
&gt; This will still work next year when MS abandons UWP for another new framework Winforms and WPF might be abandoned, but they still work. I don't think "your app will stop working" is something you have to worry with popular MS technologies. And the fact that they're porting them to .Net Core reinforces that.
Have a look at the code in this SO question (not the answer, the question!): https://stackoverflow.com/q/26403861/2468889 
If you get paid the same for 2 hours or 40 hours, getting the job done in 2 is the obvious choice.
I don't see how it makes sense to apply EEE to Microsoft's own products.
That's fair. I think silent failure is slightly less bad in mission critical code than actual failure, but something like try/catch and log the problem is probably the best of all solutions in most cases.
Here are the Microsoft standards https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions Personally I usually use this GitHub page for quick reference https://github.com/ktaranov/naming-convention/blob/master/C%23%20Coding%20Standards%20and%20Naming%20Conventions.md
As mentione above - your localdb is tied to your user account. when you running things locally - you're running under your user or admin account. When you're launching your app under IIS - it runs under account of IIS App Pool - that user would be different from your one and will have it's own copy of database. Simple verification - switch iis App Pool to run under your username\password, then repeat all the steps. If this is a user context issue = you will see an account registered from webApplication in your user's localDB (one that you starts when connecting to it with SSMS) Also it was great suggestion above to use SQL express - it's free and won't give you such headache.
Two awesome links. Thank you kind Reddit person!
Standards are often subjective. First and foremost you should be consistent regardless of what standard you use
This sounds like a good time to use regions.
https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/ 
This is amazing, thank you for sharing this with me! I am working on implementing it now but I will have to do some reading on some of these concepts so I know just whats going on. Also total noob question but how do I "modify the NewClient() method to call the callback"? I am working on translating my code from python to C# so a lot of these C# concepts are new to me. Thanks again!
I don't suppose you know of any tutorials or template code? I would like to explore this option further
This, we have sprints so if I’m done before everyone so be it 
There's a few in there I disagree with and some of the explanations are wrong I think. For example, for the 'why' of the vertical braces convention, the author said that "Microsoft has a different standard but developers overwhelmingly prefer vertical braces". I do not believe this is accurate as **most** MSDN examples of anything has vertical braces and Visual Studio itself defaults to the vertical braces style. I think vertical braces provides "mental spacing of ideas" (sort of like how one would format their literary writing when starting a new paragraph), enables visual pairing of the opening and closing braces, and doesn't condense your code as much (sort of like the difference between 1 line or double spacing when writing), though the last benefit is probably just an example of the first benefit I mentioned. Another disagreement concerns never using hungarian notation for variable names. I agree that 99% of the time you shouldn't use hungarian. However, I feel it is beneficial to use hungarian when naming UI controls like `txtUserName` for a textbox or `cbxStates` for a combo box. It is beneficial because of how intellisense functions and it enables the option of having an associated property name (i.e `txtUserName` and the property `UserName` in the same class). The only other way to differentiate a UI control is to use a suffix like `UserNameTextBox` but I feel that is too verbose and unnecessary. One could have an argument for using hungarian on dynamic types but if the dynamic variable is named appropriately then you probably won't need hungarian. The section on the usage of `var` seems slightly inaccurate as well. To me, there are two use cases for using `var`. Firstly, when you are using anonymous types (because you HAVE to use `var` in these cases). Secondly, when the expression on the right hand side tells you the expected type. For example: //DO var person = new { Name = "John Doe", Age = 42 }; var people = new Dictionary&lt;string, object&gt;(); //compare the dictionary declaration to the next line //Dictionary&lt;string, object&gt; people = new Dictionary&lt;string, object&gt;(); //which is easier to read and isn't redundant? //DON'T var person2 = GetPerson(int id); //what kind of person is returning? var file = File.Create(somePathDefinedOutsideOfThisExample); //what type is this returning? I actually prefer RAGE_CAPS_WITH_UNDERSCORES for constants, though I must admit I believe I am in the minority on this. Constants are different than many other things and behave differently so I'd prefer to know when I am using one (i.e I want it to stand out). For example, suppose you have Library1 that exposes a **public** constant (which you should NEVER do). Library2 references Library1 and uses that constant. If the maintainer of Library1 changes the value of that constant, Library2 will have to be recompiled. This is actually a *breaking change* and, if using semantic versioning, will require incrementing the major component of the version (i.e 1.3.72 to 2.0.0). This is also why you should only use default method arguments on private or internal methods (assuming internals aren't visible to an assembly that isn't recompiled with the assembly that contains said method). The values of default parameters are compiled as constants/literal values *in the assembly that calls the method*. If you want, I can elaborate on the evilness of the scenario that could result from exposing public methods with default parameters to external assemblies. Aside from those, I agree with everything else. I'd also like to point out that I break some of those rules intentionally when writing unit tests, specifically naming methods. I may use underscores for the name of unit test methods to try to make it clear what is being tested since unit test method names tend to almost be like sentences.
No exactly. &gt; In non-enterprise organizations, up to five users can use Visual Studio Community. In enterprise organizations (meaning those with &gt;250 PCs or &gt;$1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above. VS Express didn't have this limitation.
I'll defer to your opinion, as I don't use that.
I'm just starting to contribute in a young ML project, I've been learning a lot. GAP-ML is a NLP and visual recognition framework that is looking to standardize how to clean and manipulate unstructued data (pdf, tiffs, etc) here the links: Repo: https://github.com/andrewferlitsch/Gap Docs: https://andrewferlitsch.github.io/Gap
Change in licensing. Community adds this restriction, &gt; In non-enterprise organizations, up to five users can use Visual Studio Community. In enterprise organizations (meaning those with &gt;250 PCs or &gt;$1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above.
How does this compare to say Azure AI? 
Regarding this: &gt; //DON'T &gt; var person2 = GetPerson(int id); //what kind of person is returning? The reason to use var is so that you can change what GetPerson returns in the future without having to change the associated calls to it. Today it could be a Person class, tomorrow an Employee class, and next week a CyborgHybrid class. I agree about the constants. Goes back to my C/C++ days though and my god does a constant stand out when it is in all caps. As far as txtUserName and cbxStates, the reason for not including the type there is the same reason for using var above... so you can change the type easily. If today its a text box but tomorrow a dropdown box and next week a brain interface box then its going to be annoying going through txtUserName -&gt; ddUserName -&gt; biUserName. As far as in the instance where you have two similarly named properties like txtUserName and UserName I'd be on the side of having it UserNameUI and UserName so that they are near each other in the intellisense. Also in the event there's a third, fourth, fifth, etc UserName related property they can all be grouped together.
You missed the point **entirely**. The question was not why Express is chosen as an alternative to Community, the question was why Express **2010** is chosen as an alternative, instead of Express 2017.
Here's an article on C# 7 guidelines https://www.infoq.com/articles/Patterns-Practices-CSharp-7
Guidelines for exceptions in regards to API design. https://www.infoq.com/articles/Exceptions-API-Design
Thanks for posting this. I'm not sure the border flicker on resize is any better with this project (possibly, though), but it looks like they are using a custom chrome with WindowStyle set to none and yet they manage to keep the animations for the window. The glow border is also interesting.
ML.NET is only a library that allows you to train machine learning models with .NET (F# support is limited for now). Think of ML.NET like Scikit or Keras. Azure AI on the other hand has a rich UI, works with Python and R models, scaffolds the training pipeline code and even deploys the model for you. So ML.NET is only a small part (model building) as opposed to the end to end solution that Azure AI is. 
As far as var goes, I use it everywhere without exceptions. Has worked well so far. 
Framework design guidelines is mostly applicable to frameworks and libraries, though.
Oracle database calls. Specifically the number of calls to the database. I am working on a project that abuses database calls. I want to figure out what methods make the most calls and then consolidate those calls. Performance is terrible . 
I think most of us are aware that all rules are meant to be broken. You may end up working for a company that has very specific preferences. When working within a team there should always be agreed upon standards.
There are a few places where you would not want to use one. To use it everywhere without exception is a bit of a reach imho.
Then you just get given more work to occupy you for the other 38 hours.
It's a balance. On one hand we have standards and best practices. On the other, we have internal conventions used at our respective jobs.
Reddit obscures the karma count. Check back in a day or two, it will have settled down by then.
I agree. While I use var the vast majority of the time, occasionally the variable's type is really, really important.
I hate that example. That's not polymorphism, that just a useless shadow interface created for the sake of having an interface.
That's a very good point. &gt; Do not use var when the type is not apparent from the right side of the assignment. This rule is really important for written examples where you don't have the benefit of an IDE. But for production code it's highly debatable.
Saved for future reference. Thanks for the link. 
Which testing framework are you using to write your tests? Just curious ...
Install StyleCop.Analyzers it'll Warning you into sticking to standards haha
The package has been uploaded in 2016. The last commit on the repo is 5 years ago. [https://github.com/longqinsi/named-pipe-wrapper](https://github.com/longqinsi/named-pipe-wrapper) 
Just MSTest. I really haven't branched out to other frameworks though so I can't comment on much :P.
&gt; That's not polymorphism Using a type as a specific interface or base class instead of using it as its declared type **is the very definition of polymorphism.** &gt; that just a useless shadow interface created for the sake of having an interface. Not sure what you mean by a "shadow interface" (do you mean a 'tagging' interface?), but the `IPerson` interface is assumed to have some member definitions in it and isn't simply a tagging interface. The method that has the `IPerson person = GetPerson();` line is basically saying "I don't care what kind of IPerson is returned, I just need the members of an IPerson to do what I need to do."
It's perfectly fine and in my opinion a great way to introduce F#. Hopefully it will help you to make the full transition to F# at some point.
&gt; Hopefully it will help you to make the full transition to F# at some point. BLASPHEMY. Lol jk. I am guessing you prefer F# over C#? If so, what do you like about it?
&gt;The last commit on the repo is 5 years ago. [No it isn't.](https://github.com/longqinsi/named-pipe-wrapper/commits/master)
I think you are missing his point. You can use an interface to return an abstraction rather than the var Keyword. Its providing an easier to read more explicit return type. &amp;#x200B; Using var as the return type of GetPerson() is vulnerable to returning the wrong type of object. By using an interface instead, you ensure the object you return is of the correct type, while still allowing different types to be returned so long as they implement the correct interface. It's polymorphism because the interface declares a behavior multiple possible return types would need to implement to be valid. Hardly a "useless shadow interface for the sake of having an interface". &amp;#x200B; Not saying var is useless. In practice its often the most convenient solution, but using interfaces can be a more resilient less error-prone way to design. 
No, the definition of polymorphism is the ability to use different types in the same place as if they were the same type. That requires actually having different types in the first place.
It's a Person object. It will always be a Person object. There is not going to be an alternative implementation of Person that could be conditionally returned.
 public interface IPerson { string Name { get; } } public class Person : IPerson { public string Name { get; } public Person(string name) { Name = name; } } public class Employee : Person { public Employee(string name) : base(name) {} public void DoWork() { //do stuff } } public class Program { public static bool UsingEmployee { get; set; } public static void Main(string[] args) { IPerson person1 = GetPerson("John Doe"); UsingEmployee = true; IPerson person2 = GetPerson("Jane Doe"); Console.WriteLine($"Person1: {person1.Name}"); Console.WriteLine($"Person2: {person2.Name}"); Console.ReadKey(true); } static IPerson GetPerson(string name) { return UsingEmployee ? new Employee(name) : new Person(name); } } Contrived example. Do you really want to tell me that ISN'T polymorphism? Also, your definition is almost what I said, just re-worded and slightly inaccurate. It is wrong to say "as if they were the same type" because polymorphism only works if they ARE some common type. All types inherit from the `object` type so it is accurate to say ALL types are object types, not "some types can act AS IF they are an object". If IPerson isn't assignable to a type, then that type does not satisfy the is-a relationship required for polymorphism.
&gt; Contrived example. That's my point. You only see that in contrived examples that wouldn't ever be used in production code.
I'm guessing the game uses some kind of BattleEye or other anti-cheat software? That will inspect other running processes, and might lock them.
My own https://github.com/mariusmg/csharpcodingguidelines
Is there a way to detect programs doing this? Is there a way to prevent locking? Or deny any other program from prying in my exe files? 
Run the online game under a different / non-admin user account without access to the process or file.
https://www.techsupportalert.com/content/how-find-out-which-windows-process-using-file.htm
In a perfect world where everything was interfaced out I'd agree... but I think we both know everything that should be interfaced out isn't always interfaced. Realistically the `var` keyword solves for that missing link. Gives you the leverage of an interface without having to worry if it is actually implemented on their library. I've just never been a fan of Hungarian, even back in the day when it was all the rage. As far as downvotes are concerned I tend to notice people downvoting whoever I happen to discuss/disagree with on this subreddit since I've gotten this joke flair... to those who read my flair and don't understand: Its a joke and its just a healthy discussion. Both sides should be upvoted. 
From my code base for something dumb: `//start outlook with a new email` `System.Diagnostics.Process.Start("outlook.exe", "/c ipm.note");` I did something similar to you lately. However, outlook.exe doesnt have any flags to accept content, maybe it accepts one for a to/from address https://stackoverflow.com/questions/7912973/launch-outlook-to-compose-a-message-with-subject-and-attachment-by-outlooks-com 
&gt; RAGE_CAPS_WITH_UNDERSCORES tear this from my dead C and C++ hands, C#!
Try ProcessHacker it will list all files (dll .. ) loaded for a selected process
If we're being honest with ourselves in a perfect world you should be able to do something like: `INamed guy = GetPerson(id);` `Console.WriteLine(guy.GetName());` Where `INamed`only implements `GetName`. Using an `IPerson` hides the need for an interface in this example. `var` solves for both problems by not requiring that either the library creator or developer ever creates an `IPerson` or `INamed`. Its just a lazy out that wouldn't even be necessary if everything had an interface. That isn't to say that I think everything should be interfaced out. A lot of times it is gratuitous extra work for not a whole lot of return. It's something I would definitely do if programmer man hours were free and infinite though.... just not my man hours or time lol. 
Nope, I would fail that in a code review. getting an entire person object if you only need one field is bad for the database.
Thank you! This helps a lot and gives me what I need to test and learn more!
I mean if we're going to put up perfect examples I also missed some curly braces and a `main` call. The essence of it is that an `IPerson` in that example hides the need for an interface. I would hope that in an example you'd be able to look past the obvious unnecessary parts to focus on what is being discussed.
Mainly the possibility of impedance mismatch if the C# libraries are using a lot of mutable state. It's a good exercise, to be sure. But I wouldn't go too far down the rabbit hole if you find that the F# is getting in the way of testing the C# libraries. No reason you can't have *both* C# and F# unit tests for the same library, and just use whichever is better for the test in question.
I disagree. Use the standard that is common for the language. That's what programmers are familiar with that might see your code.
The GitHub reference does discuss using var for local scope objects of non-primitive type. I’m sort of still against using var when possible, most of the time the use cases mentioned above aren’t impacted, but it can make maintaining code easier when you know what is being used and the way I see it, all code can potentially be maintainable no matter how simple it is.
&gt; it should be realistic I see you've never read a programming textbook lol You should probably just go back to the top of this thread [here](https://www.reddit.com/r/csharp/comments/99ctgh/c_coding_standards/e4n34u3/) and outline an example to your taste. The rest of the thread is predicated on you disliking the example to begin with, which in retrospect should have made me write a completely different one for you. 
Just because they're in the textbooks doesn't mean they're a good idea. How many times have we seen the stupid duck inherits from lame duck sample? Or bird inherits from animal? That's not how we would write code in the real world, but this pervasive in textbooks because no one steps up and says, "Hey Let's stop using bad examples."
No one goes through and does 1+1, 2+2, 3+3 in the real world either but we teach kids to learn that way. Regardless, if you don't like the example then rewrite it. From what I've read up and down this thread we all agree on when/where to use var/IPerson/Person, just you don't like the example. 
Yes I do. I have often added 2+2 or 3+3. What I haven't done is add 1+Tree.
Okay now I honestly believe you're either A) Being satirical/joking B) Genuinely incapable of abstraction C) Refusing to come to agreement Just in case its B, there might be a D option I am missing. In any case, this whole thread has gone way off the rails like 5 messages back so I'm done here.
I completely agree with you. I meant this in terms of working on an existing code base. You can’t expect to jump in and starting throwing standards around
Another great example for a Microsoft fuckup w.r.t exceptions is HttpClient, which throws TaskCanceledException instead of TimeoutException when, well, a timeout occurs. 
What isn't fucked up about HttpClient?
&gt; Imagine a typical ASP.NET Core 2.1 DataService class What is that? Google is letting me down. My guess is that you're leaking implementation details into your business domain, which should be painful. Do the classes that depend on the IConfiguration and IHostingEnvironment just pull things like the connection string out then you should be injecting those things directly.
I'm saying your claim that your attempt to justify the use of clearly bad examples by citing another 'bad example' doesn't work when your example isn't actually bad. 
Was a bit upsetting reading the full discussion on GitHub, since it seems a lot of negative comments against WCF seemed to be based on the fact there were other better ways for WCF to implement some sort of REST interface, and therefore WCF was outdated. Luckily there were also a lot of levelheaded comments reiterating that despite what some people think, not everything revolves around web design, and WCF has other use cases...
That's an ongoing problem with our industry as a whole. Web developers tend to be far more vocal, so developers working in other industries are ignored. And really I don't see that changing because non-web developers are highly discouraged to share the details of what they're working on. 
With published, I mean published into a folder on my HDD from which I can run it using IIS. &amp;#x200B; &amp;#x200B;
Thank you everyone. I solved the problem by migrating everything over to a SQLExpress Database which works fine. I still don\*t know what the error was or why I cannot see my data, which is still puzzling and sad, but at least I can continue developing now. &amp;#x200B; &amp;#x200B;
Anonymous interface implementation seems like it would be a big gain when testing using F#. 
Jesus Christ, I'm not alone!
The different user account seems to be working! So how can I see if another program has an open file and what that file is? 
Are there plans for a cross platform replacement for MSMQ?
[SysInternals](https://docs.microsoft.com/en-us/sysinternals/). For you specifically (the ubiquitous) Process Explorer (that should come standard with every Windows installation), Handle, and Process Monitor. If you want to know more Mark’s books are great if you are a developer or a sysadmin on Windows. [Windows Internals, Part 1, Edition 7](https://www.microsoftpressstore.com/store/windows-internals-part-1-system-architecture-processes-9780735684188) and [Part 2, Edition 6](https://www.microsoftpressstore.com/store/windows-internals-part-2-9780735665873) (I don’t think edition 7 exists - probably not enough has changed to merit one).
Not that I'm aware of. But there are many open source alternatives that are well regarded.
I think c# 8 will have simpler class construction for data types. F# and c# share the same type system, so any improvements will be ease of use rather then functional. 
&gt; The type system is a lot more advanced than in C# That's not necessarely true. I mean, i personally think the F# type inference is simply broken. Take this code : let Add (a : int) (b:int) : int = a + b Add 4,5 This code builds fine and a tuple is passed to the Add function (even though the method definition specifically takes 2 ints as parameters). This, correctly, will never work in C# 
What other transport do you use other than http in wcf, and why use that? To solve what problem? As someone who has been moving services away from WCF in my company I just tend to agree with the people who say it's outdated. Named pipes is really the "fastest" transport in WCF yet if you compare this to just setting up an ASP.net core web api is it really still faster? I've been using the c# grpc libraries for awhile now and it solves almost all the issues I'd ever need something like WCF to solve. It also has fewer issues, a bigger community, and is easier to set up.
Not knowing the syntax isn't the same as type inference being broken...
Not to mention there's still nothing that shows what value `IPerson` truly provides. I agree with you on this one (that interfaces are overused, BUT MUH MOCKS).
There were two Era's of a codebase (Lots of API interaction both internally and externally) that I once maintained. The era when we used HttpClient, and the era when we just used a clean, not FUBAR wrapper around HttpWebRequest.
Welp, I don't have access to the project outside of the client's office, so I can only assume :) Next time they bring me in if the issue is still there I'll give it a shot! &amp;#x200B; &amp;#x200B;
&gt; What other transport do you use other than http in wcf, and why use that? To solve what problem? MSMQ. Solves problems with Durable Delivery, Reliable Delivery and Transactional Delivery. (Yes, I know you can do much of that with SOAP, but, it's SOAP.) Named pipes I think gives you at best Reliable Delivery and Transactional Delivery. INB4 "But this is about Net core!": **GREAT**. That's an awesome opportunity for Microsoft to do one of two things: - Make MSMQ some sort of multiplatform product (lol yeah right, which is why I'd rather suggest:) - Add RabbitMQ as a Transport to WCF. Opens up a crapton of enterprisey options (I'm amazed at how many employers use RabbitMQ around here!)
&gt; What other transport do you use other than http in wcf, and why use that? To solve what problem? MSMQ. Solves problems with Durable Delivery, Reliable Delivery and Transactional Delivery. (Yes, I know you can do much of that with SOAP, but, it's SOAP.) Named pipes I think gives you at best Reliable Delivery and Transactional Delivery. INB4 "But this is about Net core!": **GREAT**. That's an awesome opportunity for Microsoft to do one of two things: - Make MSMQ some sort of multiplatform product (lol yeah right, which is why I'd rather suggest:) - Add RabbitMQ as a Transport to WCF. Opens up a crapton of enterprisey options (I'm amazed at how many employers use RabbitMQ around here!)
Ah, I only mentioned that because the code is not very performance-optimized. You probably won't notice, using it for personal or low-impact tools, but if you were building a site that used the library heavily for 1M daily visitors, it may not be a good idea :P Here's a bit more info: https://github.com/nemec/pathlib#why-a-library-for-paths
Logging exceptions (to a logfile) will help you track down what went wrong inside your application. Especially handy when the application is not running on your system with a debugger attached. The are a lot of logging frameworks out there that can help you. Have a look at NLog or something like that. No need to reimplement the wheel. On a general note: You shouldn't just try/catch everything. Think about meaningful points in your program flow, where you can recover when something goes wrong. The semantic for try/catch should really revolve around the idea that the surrounded code will be trying something that may fail for a reason outside of your control. A good example is reading in a file. Your program may not have sufficient access rights, the file might be corrupt or might even be missing. You can only ever try to read it. And you need to be ready to deal with a failure, if you can't. Logging why you couldn't read that file will help you to track down the cause of a failed read. None the less - your code should be equipped to deal with a failed read. In this spirit: I get mad when I see people catching NullReferenceExceptions/Format/InvalidCast and similar stuff in code that is under their control (because they are too lazy to check the data they are operating on) You don't fucking try to write an algorithm that works, you test it and verify that it works for all expected inputs. 
Yes, you are over thinking it. Those `Log(exception)` invocations you're reading about are probably just placeholders to show that "this is where you do the logging". Most logging frameworks have at least one method which accepts an exception as input, which will format it suitably for your logging for you. These days the cool kids are using tools like Exceptionless and Graylog for centralised logging which permits a lot of analysis and tracking, too.
&gt;IDesign Is that just a table of contents? Do I have to DLC the implementation?
Log(someException) is a method defined somewhere on the class or its class heirarchy. It presumably logs the specified exception to some store like a file, database or even the console window. When to use try-catch, try-catch-finally or (more rarely) try-finally depends on the specific context of the code. Some principles: * Don't "swallow" exceptions. * Rethrow exceptions *without* destroying the stack trace. * Catch exceptions with the closest Exception type. Example of swallowing an exception and failing to catch a more specific Exception type: try { //some code that might throw an exception } catch (Exception ex) { Log(ex); } It swallows the exception because it doesn't rethrow it. Example of rethrowing an Exception that destroys the stack trace (NOT what we want): throw ex; Examples on how to properly rethrow an exception: throw; //this maintains the stack trace --or-- throw new SomeSpecificException("My custom message.", ex); //pass the caught exception to the new exception for the inner exception parameter As you learn, you'll know *when* to surround your code with exception handlers and when to just let exceptions bubble up, though this is hard for me as well. You'll also know when to break the above principles. For example, in SOME contexts, you might *need* to swallow the exception -- after all, uncaught exceptions will cause your app to crash, so there needs to be a catch swallowing an exception somewhere (unless a fatal crash is desired which is can be reasonable in some contexts). For logging, you can get by with the built-in `Debug` and `Trace` classes, you just need to add listeners. There are many popular logging frameworks like NLog and log4Net as well. You could roll your own if you like. The typical implementation is an `ILogger` interface like this: public interface ILogger { void Log(Severity severity, string message); } Severity enum: public enum Severity { Debug, Trace, Info, Warning, Error, Critical } You'd then create a logger class that implements the `ILogger` interface. That class could log to a file, database or whatever. You could also write an extensions class for the interface to make usage simpler: public static class LoggerExtensions { public static void Debug(this ILogger logger, string message) { logger.Log(Severity.Debug, message); } //etc. } Usage: ILogger logger = GetMyLogger(); logger.Log(Severity.Info, "App starting."); logger.Debug("My debug message."); //etc.
Wow! Thank you so much the reply and info!
&gt;but is there any point in doing so when you have a single class and interface with a 1:1 mapping? Is there any point to even creating such an interface?
While I don't find that name particularly short or pretty, I agree with the reasoning of your colleague. I also agree with your general conception, though this 1:1 might be one useful exception. Only my opinion though. If there's a better one available, please update me by commenting!
I'm hoping Uno provides some life here; It's actually pretty compelling to write an app in UWP (Which feels like WPF) and then have it go everywhere.
Yes, if you want to mock the dependency in unit tests for example. 
[lol wat is currying?](https://fsharpforfunandprofit.com/posts/currying/)
Where I catch exceptions (your plan will likely be different) 1. In the main method/program start 2. Where the user initiated some action (like a button click handler) 3. At the entry point of a service routine (REST/SOAP/etc.) or other significant architectural layer 4. Very judiciously, elsewhere Why? I want to deal with as few places where I'm logging exceptions. I want as complete a stack trace as possible. I want to never show an exception to a caller or user. And in the case of the program start one - I want it to catch everything that I forgot to catch somewhere else. 
I love how fast dotnet and aspnet core development is moving I hate how fast dotnet and aspnet core development is moving I really do like that they’re quickly iterating on ideas, but man does it seem like a moving target to learn. 
I mean... A LOT of it is dependent on usage. I'd really hate if `ITokenService` was taken by a completely incompatible interface and CompanyX and CompanyY versions of that service are bit players in our app ecosystem. But... If it was `IJWTTokenService` because it was dealing with people who use JWTs? I could dig it. &gt; However, my colleague pointed out that we only have one class and we're unlikely to add more, so we should just rename the interface to ICompanyXTokenService. What's more, it returns types which are specific to CompanyX, so I can see his point. And I think this is where the detail lies. Do these 'Specific types' have *special* business value? If so, then maybe the problem is you are missing a common abstraction. Maybe both Interfaces need to be based off an `IOutsideCompanyTokenService` that contains the commonality. I'll note that in my experience, the main time this provides value is when you are making a base class with consideration of thought to truly encapsulate that commonality (I know, base classes aren't the webscale Du-jour nowadays, but they still have their place if done right). The rest of the time, you're just making your API more consistent. 
Spot on, and considering unit tests are awesome, and should cover most of your application, 1:1 interfaces are very common in applications that are well written and tested. 
Why would those be placeholders? Many projects using DI will inject a logger (NLog, custom or else), calling it log or _log or something similar. These loggers usually have overloads to handle logging an exception, hence _log(exception).
I figured it out: Roslyn doesn't like running under .NET Framework, so I created a .NET Standard class library with the scripting calls and referenced it from my main Framework project.