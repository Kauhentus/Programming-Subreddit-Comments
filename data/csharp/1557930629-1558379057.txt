Cool! You should add driver info and then put the app on the windows store.
We have source control, and we have audits as well. Our source control branching strategy is atrocious (but, hey, we've been doing it this way for 20 years and it works, why change it, right?).... Soft launching isn't because we can't roll back, it's because we don't want to roll back. There's so much that goes into replacing an old feature.... * Documentation * Business Training * QA - Testing * Business Approval * Code Review Just to name a few. And if you're stuck in a scheduled release cycle like I am...... You get to release once a month.... So for me, if we design a new feature while simultaneously removing the one it replaced, then we have to launch it and go live with it during the release.... If it fails and we can't fix it during the release then we have to roll back the entire change set for that task... In some cases it might have touched 30 tasks and could result in rolling back parts of dependencies for other features being released that did work. So it could be another month, sometimes two, before we could try again.... (parts of waterfall left over....) If we soft launch, and the new feature doesn't work, we can just keep releasing and ignore it. Now the codes out there and we've got time to put in a hotfix (off the release cycle). Of course this all depends on the code too.. Sometimes a soft launch isn't possible, i.e. like when upgrading a dependency etc.
That's getting to the edge of my current knowledge range. Do you specifically need UDP vs TCP? My (naive) impression is that TCP would be easier to work with for bi directional connections like this, but i honestly don't know enough to help much mor eon this. Most of my networking is TCP on local networks where i have control of kost of the hardware. I haven't ever used UDP in my own code, or connected between external/firewalled hardware similar to your situation.
Yup, I'm guilty of doing stuff. I even did some stuff without asking permission. The village elders shall be ever so disappointed.
You could split the string on '/' then foreach the list and repeat the same check, only adding if last member of the split string array is unique.
Could you provide an example? :-)
What about when you update a user’s avatar and want to invalidate the cache?
https://docs.microsoft.com/en-us/dotnet/api/system.io.path
Source control alone is great when you're able to deploy straight to production. A lot of people don't have that luxury. At a recent job, deploying a new version of my app involved coordinating with devops 6 time zones away. I had zero access to the production machines, so I needed them. That meant we had to have a process to mitigate "if deployment happens at the wrong time you might have to wait 12+ hours to deploy a new fix". We did, and soft launch was one of the potential mitigations. (There were other mitigation strategies too, but soft launch was very attractive because it took about 2 minutes to send a "WAIT NO REVERT" message and have them act on it.)
If you want to create the form into an easily displayed PDF you can use iText. This will give you great formatting and will auto drop the info from your app into the PDF where you designated it. I use a Windows Form with this, you can have a richTextBox for his notes, multiple boxes for the information he enters. Bonus, any information that he fills out the same every time. Either make that the default, or just don’t even let him enter it, and do it in the backend
Easy enough: public void InvalidateCache(object key) { _cache.Remove(key); }
Something like this, but do it better. var newList = new List&lt;string&gt;; var toRemove = new List&lt;string&gt;; foreach (entry in existingList) { if (newList.contains(Path.GetFileName(entry)) { newList.Add(Path.GetFileName(entry)); } else { toRemove.Add(entry); } } foreach (entry in removeList) { existingList.Remove(entry); }
 interface IFactory { Client Create();} Then you have a factory implementation for each provider. Create a main wrapper factory with a Dictionary&lt;string, IFactory&gt; providers; Register all of your provider factories, and then have the main factory's Create method look up the provider based on the config file. Forward the create to the selected provider. Optionally add a create method that takes a provider name.
&gt; To write less code Never think less, think maintainable. We want less code, because it's less code to maintain, not because it's less. I'd rather have well written code that does not work, than shitty fully functional code. I can fix what's well written, I don't wanna touch that thing that nobody knows how works.
I would lean heavily on DI. The general pattern is that you build up a collection of service implementations in a single place in code known as a service root, and then you make 1 call to the container to pull out the application interface and begin execution. I haven't personally found a need for MEF yet, but I'm not doing any sort of pluggable applications... For me the included Asp.Net Core IoC container is enough (which I also use in console apps). For some reason Andrew Lock's website never loads for me, but it provides a basic implementation and Google's cache works just fine: https://webcache.googleusercontent.com/search?q=cache:TUaI938rUEwJ:https://andrewlock.net/using-dependency-injection-in-a-net-core-console-application/+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us I would change his implementation to be more like this, but it is just a point to decide where the line is between what is boilerplate necessary for any application vs what is needed for your application: public class Program { public static void Main(string[] args) { // All of this is basically static in every implementation of a console app. // You might wish to instead do it as an async style. // This is roughly what is done in an asp.net core app only it uses some magic to do method level DI. var configuration = new ConfigurationBuilder() .AddJsonFile(Path.Combine(app.ApplicationBasePath, "config.json")) .AddEnvironmentVariables() .Build(); var services = new ServiceCollection(); var startup = new Startup(); startup.ConfigureServices(services, configuration); var provider = services.BuildServiceProvider(); foreach(var item in provider.GetServices&lt;IAppConfiguration&gt;()) { item.Configure(); } provider.GetService&lt;Application&gt;().Execute(); } } public class Startup { public void ConfigureServices(IServiceCollection services, IConfiguration configuration) { services .AddLogging() .AddSingleton&lt;IFooService, FooService&gt;() .AddSingleton&lt;IBarService, BarService&gt;() .AddTransient&lt;IAppConfiguration, LoggerConfiguration&gt;(); //read configuration here and add appropriate services and add IOptions&lt;T&gt; implementations via services.Configure&lt;T&gt;(options=&gt;{...}); services.AddSingleton&lt;Application&gt;(); } } public interface IAppConfiguration { void Configure(); } public class LoggerConfiguration : IAppConfiguration { public LoggerConfiguration(ILoggerFactory loggerFactory) { _loggerFactory = loggerFactory; } public void Configure() { _loggerFactory.AddConsole(LogLevel.Debug); } } public class Application { private readonly ILogger&lt;Application&gt; _logger; private readonly IBarService _bar; public Application(ILogger&lt;Application&gt; logger, IBarService bar) { _logger = logger; _bar = bar; } public void Execute() { _logger.LogDebug("Starting application"); //do the actual work here _bar.DoSomeRealWork(); _logger.LogDebug("All done!"); } }
I don't like it. The DispatcherTimer approach very clearly shows you intend to periodically run that code on the UI thread. If you make 10 or 15 loops like that, it will help you understand the red flags associated with scheduling 10 or 15 periodic messages to happen on the UI thread. "I'm making an unawaited call to an async method that awaits a Task.Delay" is a very indirect way to say, "I want to run this periodically on the UI thread. There are a lot of ways to screw it up, and you'll tick off VS's code analysis. It's an invitation for someone, at some point, to "fix" the unawaited call and find out that deadlocks the application. And it's not as clear that if you start multiples of these, you are occupying the UI thread more and more. And it's certainly not clear that these will interact with every other unrelated UI thread `await` in the system. Just like LINQ, "I can do this with `async/await` doesn't mean it *should* be done that way. My opinion is this "trick" will just make things harder to manage. If you have timer-based logic that you want to unit test, that's hard. One way to do so is encapsulate "what happens when the timer fires" in synchronous methods you can call publicly. Then, in the test, you can call them in the orders you think are interesting and verify the behaviors. Alternatively, "periodic logic" is a thing that the Reactive Extensions do very well. If you write your code correctly, then your unit tests can include the test scheduler that lets you manipulate the clock so you can observe things happen when and how you'd like. I think if I had something running periodically I wanted to test, that's the tool I'd reach for.
Removed: Rule 1.
[LINQ all the things!](https://i.imgur.com/GQoRzM9.jpg) List&lt;string&gt; paths = GetThePaths(); var uniqueFileNamePaths = paths .GroupBy(p =&gt; Path.GetFileName(p), StringComparer.OrdinalIgnoreCase) //to ignore case-sensitivity since file paths don't care .Select(g =&gt; g.First()) //get the first unique path, throw out the duplicates .ToList();
MEF is overkill, use an IoC framework: SimpleInjector(easier to use, less features), castle winsor (many features, heavy, verbose) etc.
Yup, that'd qualify as better. I really should LINQ more.
Well I would suggest to create custom control based on grid view. Tho to be honest I'm having problems where you currently problem is. When are you adding new row? When are the row(s) should be deleted and how?
FWIW: https://reddit.com/r/csharp/comments/bogw55/_/enlr136/?context=1
So is Powerpoint and Magic the gathering. Turing completenessis not that difficult to achieve.
It's definitely worthwhile. But maybe don't think of it as learning LINQ as it is about learning about [the power](https://pa1.narvii.com/6301/e720471086ee9b36ddeb38c8c6984103971b2d5e_hq.gif) of yielding enumerables, lambdas, and deferred execution. It wasn't until I went through [Jon Skeet's Edulinq series](https://codeblog.jonskeet.uk/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts/) where he re-implements the basic LINQ-to-Objects iterators that the whole concept really started to click. After that, it just became so much easier in general to leverage LINQ for any kind of querying or organizing of data sets rather than rolling a bunch of loops. It made reading, understanding, and maintaining the querying code so much easier than [looking back on loops and collection building code 6 months later.](https://i.kym-cdn.com/entries/icons/original/000/018/489/nick-young-confused-face-300x256-nqlyaa.jpg) Once you have a handle on it, it also becomes pretty easy for you to roll your own LINQ-like extensions or grab ones made by others (e.g., [MoreLINQ](https://github.com/morelinq/MoreLINQ)) to empower you even more. Sometimes depending on context, you need to skip LINQ or make a particular query more efficient by doing it all manually, but that's the exception to the rule and rarely comes up.
Sure, with a ask and continueWith it can work. Again you dont want to waste time as a developer debugging threading issues. Its complex and not worth it
Can i send my CV?
or you can just async/await, which requires no complexity or debugging of any "issues". When all you have is a hammer, everything looks like a nail.
When you say "one-man" do you mean you're writing something just you will use, or is it something you want to release to users? If it's the former, then there's no reason at all not to use a beta version of a language/tool. If it's the latter, you might be safer using a non-beta version but honestly the odds of encountering a language bug are pretty low. As long as the application works properly, the tools you used to develop it don't really matter to the users.
One man you mean as a private project?
Lol ok, not denying your solution though? Did you debug a unobservedexception? That can occur using async/await? Again not a easy bug to find. But keep-it-simple-stupid works 80% of the time. So your hammer is good enough for most.
I've actually worked on an application that uses a few DataGridViews. Add: dgv.Rows.Add(false, "number", true, etc); Edit/Update (this one is fun, because I would always get an error if I bound to a source, so I stopped even using that line): dgv.SelectedRows[0].Cells[int].Value = "What you want it to be"; dgv.Rows[int].Cells[int].Value = "Another way to do it"; To check if a Cell is checked: DataGridViewCheckBoxCell chk = (DataGridViewCheckBoxCell)dgv.Rows[int].Cells[int]; if (chk.Value == chk.TrueValue) //Item is true else if (chk.Value == chk.FalseValue) //Item is false
Thanks for the reply and great blog post. I just thought that might deserve a mention (but obviously you can't say everything :)
I see, so essentially i want to gather the members of the "Administrators" group remotely. I've already done this using powershell, but i want to do it with the application as its going to be apart experience for someone not to familiar with powershell. I'm trying to create a simple and easy tool for anyone to use and gather information with. I know there already are some tools offering this, but it wont be my tool.
Thanks. Sure, worth a mention, just forgot about that one
As everyone else suggested, I'd use DI for this. I am curios on the usage. Will you always know the RestProvider to use or will it ever has be decided dynamically. If you need to pick the implementation dynamically, I'd recommend looking into multi-tenancy in DI frameworks. Autofac has pretty good support for it and I am sure others does too.
Yes, develop in private as if for production unless you're working at the fringes of computer science.
I've used hangfire a bit, it should work just fine for what you're trying to di. There are two things I have in mind. 1. Instead of scheduling the task of reassigning, schedule a job that first checks if the job should be reassigned, then perform the task if it should be done. This allows you to "fire and forget" the scheduled task. 2. Save the task with a unique identifier so that you can just delete it when you want to unscheduled this. Hangfire supports this, so just make sure the I'd you are using can be easily recreated so that you can delete it. I would still incorporate the approach from option #1 regardless. In general, you want to make your background jobs indempotent (can be run multiple times without repeat side effects) and reentrant (job can be aborted mid way through and then retried without adverse side effects).
You can do it via the link I suggested before or you can use the built in C# features made specifically for working with Active Directory: https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.accountmanagement?view=netframework-4.8
You can create a hosted service that resolves the rabbit adapter and the root iserviceprovider. Then register to the messageReceived event in your start funktion and unregister in your stop function. In the eventcallback create a new serviceproviderscope and resolve some kind of messageprocessor and pass the event. Sorry for short and dirty answer im on mobile...
Oh, that's actually not bad - I kept thinking I would have to potentially resolve a lot of types in the event callback if the message processing became complex, but of course it makes sense to just make some message processor interface that abstracts the actual processing logic away. Thanks man!
So which one is the best of the two options performance wise? 1. Scheduling one periodic bg task that runs every x minute to check expired ( unanswered) requests 2. one non periodic task per request that have unique id and can be deleted if answered or fired in time if not answered
Thank you for the reply. And you are right, it would look better if my website was part of my portfolio, especially if it wasn't related to C# so that I could show some more breadth of knowledge. If I do end up making my own website, I will take a look into Python and Django. Thanks!
Thanks for the experienced insight. And you are right, I was probably oversold on the importance of the portfolio. I think that happened because I am coming from a purely self-taught background and would like to showcase my work in the best way that I can. I will continue to focus on my projects / GitHub at the moment and if the future go down building a website, I will follow your advice and others' here and take it as a learning opportunity to develop some new skills. Thanks again.
Thanks for the insight. I have read that open source contributions are very important too, although I have only worked on my personal projects at that moment. That will definitely be something I will be getting involved in the near future. You mentioned to not feature the personal projects too much on the resume. For someone with no programming related experience (aside from the past three months I have been teaching myself) what would you put in the resume? The open source contributions? I have some work experience that is not really relevant, and I thought of making a resume that would go like: short message about me -&gt; my current projects -&gt; previous work experience -&gt; education -&gt; skills. Would be happy to get your feedback on that. Thanks a lot!
I guess that is going to depend on the volume of tasks you're working with, but I'm kind of leaning towards the single scheduled background task. It really shouldn't be a big deal to be polling the database every minute, this is even how hangfire works to get scheduled jobs. The key here would be that you only query for the tickets that are ready to be reassigned, so that any results you get from your query are actionable. One thing to watch out for is making sure that your job can't run longer than the scheduled period. If the reassigning task takes a long time and you have a lot of tickets to reassign, you'd have to make sure that they reassign job can really only run once.
Its ok to be fresh and have no industry experience. Just be clear with this and apply for junior or less positions. Most important is your will to learn and that you don’t ask for too much money. The company have to invest time (money) in you with not much in return for the first time.
The closing bracket above line 9 - move it to the end of the code. Everything you're doing with methods and fields needs to be inside the class.
tyvm for the explanation!
ty for clarifying more of what he said. I will review it tonight and get back with you if I have any questions!
I will do that, ty!
I'm going to release it, but I'm the sole developer, and it won't have a public API. Thank you for the advice.
Thanks for the advice
Let your life be less painful with the following methods: public void MoveRow(DataGridView grid, int intDirection = -1) { int n = 0; //int m = 0; //int intSelected = 0; int intCurrentRow = 0; try { grid.Refresh(); long lngNumberOfColumns = grid.Columns.Count; intCurrentRow = grid.CurrentCell.RowIndex; string[] arrSelectedRowValues = new string[grid.Columns.Count + 1]; string[] arrRowAboveSelectedRowValues = { "" }; for (n = 0; n &lt;= grid.Columns.Count - 1; n++) { if (n &gt; -1) { //Make sure we error check when going less than 0 or greater than row count. if (intCurrentRow + intDirection &gt; -1 &amp; intCurrentRow + intDirection &lt; grid.Rows.Count - 1) { Array.Resize(ref arrSelectedRowValues, n + 1); Array.Resize(ref arrRowAboveSelectedRowValues, n + 1); //Get values for current row arrSelectedRowValues[n] = grid.Rows[n].Cells[intCurrentRow].Value.ToString(); arrSelectedRowValues[n] = grid.Rows[n].Cells[intCurrentRow + intDirection].Value.ToString(); } } } //Move row values from current row to row above. for (n = 0; n &lt;= arrSelectedRowValues.Length; n++) { if (intCurrentRow + intDirection &gt; -1 &amp; intCurrentRow + intDirection &lt; grid.Rows.Count - 1) { grid.Rows[intCurrentRow + intDirection].Cells[n].Value = arrSelectedRowValues[n]; } } //Move row values from the row above to the currently selected row. for (n = 0; n &lt;= arrRowAboveSelectedRowValues.Length; n++) { grid.Rows[intCurrentRow].Cells[n].Value = arrRowAboveSelectedRowValues[n]; } //Move selection up or down to follow moved values. //First check that we're not too far up or too far down. // if (intCurrentRow + intDirection &gt; -1 &amp; intCurrentRow + intDirection &lt; grid.Rows.Count - 1) { //Get the current row. intCurrentRow = grid.CurrentCell.RowIndex; //Make sure it's UNselected grid.Rows[intCurrentRow].Selected = false; //Select the row it's been swapped to. grid.Rows[intCurrentRow + intDirection].Selected = true; //And reset the index grid.CurrentCell = grid.Rows[grid.CurrentCell.RowIndex + intDirection].Cells[0]; } } catch (Exception ex) { MessageBox.Show("MoveRow: " + ex.Message); } } public int InsertRow(DataGridView grid) { int n = 0; int iRowCount = 0; try { if (grid.Rows.Count &lt; 2) { grid.Rows.Add(); } grid.Rows.Insert(grid.CurrentCell.RowIndex); grid.CurrentCell = grid.Rows[grid.CurrentCell.RowIndex - 1].Cells[0]; for (n = 0; n &lt;= grid.Rows.Count - 1; n++) { grid.Rows[n].HeaderCell.Value = (n + 1).ToString(); } grid.Refresh(); return iRowCount; } catch (Exception ex) { MessageBox.Show("InsertRow: " + ex.Message); return 0; } } public int DeleteRow(DataGridView grid) { int n = 0; int iRowCount = 0; try { if (grid.Rows.Count &lt; 2) { return 1; } if (grid.CurrentCell.RowIndex &lt; grid.RowCount - 1) grid.Rows.RemoveAt(grid.CurrentCell.RowIndex); if (grid.CurrentCell.RowIndex &gt; 1) grid.CurrentCell = grid.Rows[grid.CurrentCell.RowIndex - 1].Cells[0]; for (n = 0; n &lt;= grid.Rows.Count - 1; n++) { grid.Rows[n].HeaderCell.Value = (n + 1).ToString(); } grid.Refresh(); return iRowCount; } catch (Exception ex) { MessageBox.Show("InsertRow: " + ex.Message); return -1; } }
I have had success with https://github.com/dotnetcore/EasyCaching its nice to easily switch between different providers at runtime or through my aspnet core config.
I love the analysis and solutions provided. But I think for most people the final solution is overkill.
Version 8.0 of C# is still in preview. The only reason not to use it would be that the tooling complains about it (which is a minor annoyance) and because they still might decide to make changes to the design of the new language features (more of an issue). I'm using it now on a couple projects, but I'm not sure I would recommend it. Most of the new language features should be considered optional...though I wouldn't mind getting a jump on the new indexers and ranges. I wouldn't use it on team projects. Some developers resent having to use preview tooling.
Got it, I will keep that in mind. Thanks a lot again!
The difference is pretty significant. There are no controllers any more, instead each page has it’s own code file, kind of like in the old web forms days.
Razor pages is a simpler form of MVC that is more familiar to postback / web forms developers, but has many of the same advantages of MVC. You could freely use both in the same project. MVC makes sense when you might have a number of related views that center around a topic, and Razor Pages make more sense when you have a single view tied to a single concept (and that relationship isn't likely to change). Business standard depends on the business, but Razor Pages is not as popular as MVC, and it hasn't been around as long either. Most people are recommending [ASP.NET](https://ASP.NET) Core Web API with a JavaScript front end (angular, vue, react), though I have my eyes on Blazor (its not really useable today).
No problem, hope it helped
Rather than ping try the telnet command line client. It will allow you to specify a port (use the port your server is supposedly listening on). You can tell by its behavior if it was able to connect.
ISPs will often start rotating your public ip if they see something listening on the common ports (80, 21, 443, etc). Try a port above 1024.
Medical Practice Software: Practice Management Software Integrations Revenue Cycle Management Analytics
I also did some additional follow-up here: I suggested to Rico Suter that DNT (abbreviation of DotNetTools) command-line command bump-version integrate with GitVersion. Still not sure I like GitVersion, but it just seems logical that there would be a command line program to bump application version number and then generate a git tag for GitVersion to consume.
Use an IoC framework; for more information about design patterns used in IoC frameworks, see my StackOVerflow answer here: # [Do language features affect the use of dependency injection?](https://softwareengineering.stackexchange.com/a/385972/27442)
Why the downvote?
CacheManager is great, but it suffers a bit from design by committee and trying to support every caching provider out there.
No offense, but this is kind of shallow. No mention of Microsoft FASTER library.
Unless the library you are using has sealed classes and a lot of internal / private members you can create your own and inherit them hiding the new and changing the behavior. Inheritance alone hides the base implementation of new.
Removed: Rule 3.
In MVC you dont need a viewmodel for every view. you just can use your db entities. Thats maybe fine for a hobby project, but not for business. there you should have a viewmodel that fits to the view. &amp;#x200B; I can see how Razor Pages tries to push you to this instead of trying to reuse stuff between CRUD Actions in a MVC Controller. &amp;#x200B; Next Advantage is, that you have different classes for different actions. so you have smaller classes. with more specific logic. (we all know that controller should be as thin as possible)
Look at Microsoft's [IEventBus](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/rabbitmq-event-bus-development-test-environment) implementation (the example uses RabbitMQ). **Modify as needed.** Create a [hosted service](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2) as /u/Cr1ttermon suggested and compose it with your `IEventBus` implementation.
This article is really necessary? Come on! We've got few official documentation articles about with the same example. What's the point of combining two step-by-step articles in one without explanation why is it needed? That's kind of dumb idea. Teaching others how to write bullshit?
Is it possible to edit on the row itself when databound or is it strictly visual then?
Look at System.Data, it already implements the abstract factor class and associated interfaces. Even if you don't use it, you can learn a lot from it.
Yeah, I have not seen Memcached or Couchbase in the wild for a while.
[https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/integration-event-based-microservice-communications](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/integration-event-based-microservice-communications) check out that guide if you're trying to build .Net Core Microservices [https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/rabbitmq-event-bus-development-test-environment](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/rabbitmq-event-bus-development-test-environment)
Ahah i like the twitch one! I didnt even know there was a remote ps4 app for windows! I dont know why you are getting attacked for programming in a programming forum.
Well if you think about it, the program doesnt know if its valid until we run the code. It just makes more sense in my brain to do a do while loop
No
I was hoping for records :(
I am a public class, everyone can use me.
People like you ruined XML.
Same man, implementing IEquatable and GetHashCode for every class gets old really fast :/
I never said that you should not have view models for every crud view, the consequences of overposting and underposting attacks are well documented and known. However for views that only display data, sometimes there is really no need for view models.
What are records? Aren't they struct's?
I really appreciate your thoughtful reply. Going to look at those questions. Any resources you'd recommend, especially focused on framework and ecosystem? MSFT docs come to mind, anything else worth checking out?
Not really. I know them from F# [https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/records) [https://github.com/dotnet/csharplang/issues/39](https://github.com/dotnet/csharplang/issues/39) There's the champion. &amp;#x200B; I really wish I had them for my work. It's a good for the anemic vs rich domain model imo.
[Records](https://github.com/dotnet/csharplang/blob/master/proposals/records.md)
IIRC, IAsyncEnumerable&lt;T&gt; will not be directly supported on Framework 4.8.
Removed: Rule 3.
Removed: Spam. Please review and and follow the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
I was thinking locking on queue updates. Even then, a manual reset event and a concurrent queue are the things I'd be implementing. The lock would only exist to wake another thread, if used at all, and to protect the queue that I was inserting work into. I feel this is the way locks should be used, and isn't terribly hard to reason about: one lock, one resource being protected. I think one timer makes sense. It's essentially fetching work out of a database for the other tasks to increment. Message queuing would also work, but the tables are already there and work fine for the purpose.
Thanks for the book recommendation. Unit testing is nearly impossible in the particular case I'm thinking of. In the future, yeah I totally agree that's the right direction.
Programmatically creating a "Certificate Authority" certificate defeats the entire point of a certificate authority.
It should be less intensive on the servers to use one periodic task. The other way you are looking at would mean one extra process per request. Even if the request are not constant, one general task would handle well sudden spikes.
The error is because your bound list doesn't support the ICurrencyManagerProvider interface. My usual approach with the WinForms DataGridView is to have a BindingSource to which I set a List&lt;T&gt; where T is the type of my basic data (eg. in your case it would be a Room class that is a superclass of both BasicRoom and Suite, assuming they don't already share a base class). When it is necessary to manipulate the order or contents of the list itself- adding items, deleting them, rearranging them, I have code call SuspendBinding on the BindingSource, make the change, then ResumeBinding() and invalidate and update the DataGrid to redraw it's contents. (Changing say properties on the bound elements themselves requires only changing the property) In your case you might be able to use BindingList&lt;T&gt;.
Soft launches are definitely my preference. We have decent QA and deployment capabilities, so rolling back isn't terribly hard to do for us. That would be my launch strategy: freeze all other changes for that release, have full feature parity with the master branch, and give it a go. It seems like a reasonable approach to me.
This is essentially what I was thinking of doing. There is data dependence among tasks, but it's not terrible to reason about. I'd basically be inverting some reads to read from a memory bus instead of durable storage. This should be fine, though, because we can always read from durable storage during startup.
You can still use controllers as needed. It's just that you don't have to for a normal page, as the PageModel is both the model and the controller.
I don't think locks are an anti pattern as you suggest. As long as you're clear about what you're protecting, they're fine. Concurrent collections are a good replacement, to be sure, but that doesn't make locking intrinsically evil imo. I can say the same thing about threads by the way. If you're spawning long running work at the root of your process, you can do fine with threads. Yes, you can use a task, and with certain creation options, guarantee a thread will be created for the work. That doesn't make creating your own thread intrinsically evil in my opinion. There are still use cases that I believe make sense.
Sure, if that makes sense I guess. Check [this out.](https://gist.github.com/orionstudt/b7b86edaf5c5677c8c1112d71db4f0cc)
Thank you so much for this, I'm not there to implement it right now but this seems to be what I'm looking for!
Can you explain what this does? But thank you i will try it out as soon as I can!
https://github.com/thedmi/Equ
Your code should simply be loop through each card. Add each card's value to the handtotal. Check for edge cases (if the card is an Ace 1/11)... etc In your code I don't know what `cardValue[12] = 10` means. What is cardValue and why are you checking the 12th index? The pseudocode could be as simple as sum = 0; for each card in hand { cardvalue = card.value sum = sum + cardvalue } print sum
12 cards cards can be generated, 2 through Ace. So I have values set for all of those. However that should work. I'll try it. Thank you!
Id just use *ConcurrentQueue*. Theyve done all the hard work making it fast and safe. I dont disagree though. 1 Lock covering a data structure is fine and not too bad. Be careful mixing locks and the Task library however. You cant have an await in a lock.
Have you tried to use https://letsencrypt.org/ trust me check it out!
That seems really interesting. I don't know if the performance using reflection is as good as claimed, but I guess it's worth a shot if your classes are simple and don't inherit from anything already. Thanks.
You can if you like, where are you located?
&gt; TL:DR; Do employers care about WebDev experience when hiring for backend positions? Yes
Mk, I Re wrote my code. I think I did pretty good for a final result. (Even Though I didnt use the `Func&lt;&gt;` operation or `Dictionary&lt;&gt;` )
Cool!
 Batch Image Converter is a C# Win Forms program that converts a directory of Png's to Jpg's or vice versa. The source code is available here: [https://github.com/DataJuggler/Shared...](https://www.youtube.com/redirect?q=https%3A%2F%2Fgithub.com%2FDataJuggler%2FSharedRepo&amp;redir_token=6rtpid_O353dDkTDBUb-TnkFlGV8MTU1ODA1NDc3MkAxNTU3OTY4Mzcy&amp;v=G1O5mfcLXGE&amp;event=video_description) This video is made in honor of National Chocolate Chip Cookie Day - May 15th.
I don’t really have a good answer for your post since I’m pretty new to the industry, but for networking, if you live in a bigger city, I suggest finding a Meetup group. I know where I am we have a dedicated .NET group that focuses mainly on Microsoft based technologies. Could help a little with networking!
I use it in a reasonably high traffic system (1B+ requests/month). Reflection is only used when a type is first encountered in order to emit IL that implements the equality &amp; hash code methods. There are also static methods you can use to avoid inheriting from Equ's base class.
Christ those things are expensive. No, screw them. &amp;#x200B; [This is Microsoft Dev Essentials](https://visualstudio.microsoft.com/dev-essentials/) It's free to sign up and you'll get a few months of free PluralSight (Posh online training) as one of many benefits and training programmes. &amp;#x200B; [Microsort Learn](https://docs.microsoft.com/en-us/learn/) Also free, should be listed when you sign up above, but it's fairly new and they don't always get everything in sync. &amp;#x200B; As to the question, it depends on the role. Tech is changing to be more holistic, so a basic understanding of web dev, databases and calling/building web services would be useful. You could knock out a couple of free one day course from the above just to get you an entry level understanding.
Great post as always Michael. Now I feel a bit silly with all my (and others') "dummy" implementations all over the codebase. I'll study your recommendations and some made by others in the comment. Hopefully I can find a few ways to improve our current solutions.
Not good seeing as .NET 5 (which replaces both .NET Framework 4.8 and .NET Core 3.0) is still 1¼-1⅕ years off.
Resharper auto generation is a great helper.
Ace can be 1 or 11 btw
who said anything about difficulty?
*IIRC*, this is going to be a situation there the compiler support will be available, but the classes needed won't be in the Framework library. So, theoretically, you can put the right classes in the right namespaces in your solution and the compiler will generate the same code and it will Just Work. Wouldn't shock me if MS publishes a nuget package for it, but it's something they're not baking into Framework 4.8. ([It's not the only thing in C# 8 that will not be usable on Framework, out of the box.](https://devblogs.microsoft.com/dotnet/building-c-8-0/))
You only need a dispatcher if you ever need to run a continuation on the main thread. And it is just in the first example of the first link I posted. Agreed that "fire &amp; forget" is not ideal and could be dangerous. The main point I wanted to make is that you can create "timer loops" with tasks only. It doesn't rely on system timers (which could be expensive if you have lots of them). And it enables a whole class of lock-free programming, since you can now compose those tasks with async semaphores.
I believe you can still edit while its databound
Alright, so it's not all just magically coming together. I'm gonna throw some stream of consciousness out here. If you see anything obviously wrong, let me know, otherwise this'll just serve as a spot for me to slowly work it out for myself. I'm in-game, staring at a wall. The matrix in game-memory reads: 1, 0, 0, 0 0, 1, 0, 0 0, 0, 1, 0 -11, 202, 17, 1 If I look all the way down, bottom middle goes to negative one as right middle goes to positive one. If I look left, bottom left goes to negative one, top right goes to positive one. If I walk left, the x value of the position goes down. If I walk forward, the z pos goes up. If I lower the camera, Y pos goes down. ....This shouldn't be a view matrix. That wouldn't end at 1. That'd be degrees or rads. Am I duplicating projection matrix work here? Huh. That seems... Likely.
Woah. . NET Core 3.0 is way faster.
They're like data classes in Kotlin or classes generated by Project Lombok in Java. Structs have particular limitations since they are considered value types. https://docs.microsoft.com/en-us/dotnet/csharp/structs
Core is going to be the new standard. I only wish there was an easier way to make a cross-platform gui. I'd like to show some love to linux/osx without the headaches that come along with something like Avalonia or ETO.
The chances are highly unlikely, because everything needs to be written from scratch. This would mean a major time and money investment from Microsoft. They already have other plans.
You ask why they are introduced. I didn’t use them for myself (mostly web api). But I can understand the intention to move people to a better style. You are right. There are moments when it’s not needed. But most of the time there is a bool that needs text instead of true/false or a date that needs a special format. I like to have generated css class names in my viewmodel, too. Maybe only my style to extract as much logic from the template as possible. Views are really bad for testing.
Also, I'm an idiot and forgot to update the message. Under no circumstances are there to be solicitations for anything that might fall under Rule 2: no malicious software, piracy-related, or generally harmful development.
Well I am a South African citizen thats working in Luxembourg. But i am not really a game developer, wish I was though
The tenary operators are really not a benefit. First you need to know what they mean which makes it harder to read and then when it comes to debugging it becomes more difficult because you can't put break points on them and step through. You have to break them out first and know what the values are to know which way the code went. There's no reason to use them. They were invented to deal with space and keep code bases small, but that's no longer a valid argument.
Well I am a South African citizen thats working in Luxembourg. But i am not really a game developer, wish I was though
Thanks! Hey, if it works and you don't have memory pressure problems / performance problems...
I would never NOT upvote Stephen Toub
Why "nobody knows how works"? Generally there's well written documentation and you just gotta learn. Did you prosted when ternary operator was introduced?
Short answer - yes. [ASP.NET](https://ASP.NET) MVC not only requires you to know the basics of web, it also requires you to know the most commonly used in web pattern - MVC.
You can always use [ElementHost](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.integration.elementhost)to host WPF elements in Winforms...
There’s no mention of setting an initialisation vector (IV) in your code, and your encrypted data will have been encrypted with one. You should also verify you’re using the right padding mode, you’re using all zeroes but PKCS7 is used by a lot of systems.
What are those plans? Could you please give a link or a brief description of those?
Double negation can be eliminated. &amp;#x200B; Btt. That article must have taken a while.
You just tried to say a train is not a substitute of a car? XD First look up the word substitute before making such a statement. In the programming world, there are substitutes: For questions you can 1) google it, 2) ask a person that you know is a professional 3) ask in a discord Option 1 is the easiest but yet the most "sensitive" solution. Google contains a lot of trash as we all know. Option 2 is the most time consuming, yet the solution with the best outcome: You are SURE that this person knows a lot. Option 3 is between both options: it takes *some time*, and has *a good outcome*, because the people in the discord can check each other etc. &amp;#x200B; Well for our discord it is qiute the same, although this post was absolutely garbage, I wrote it as if it's an advertisement - Hence, I'm an economist irl :/ I have made a new post in a much better writing style. So actually the example I just provided answers your question why it is a substitute.
It is good to know somebody knows how those things work lol :) But on a serious note.. that way of doing it is hard. And if somebody has not got experience with it its practically impossible to know how to do it properly
&gt; If I had the view matrix, my understanding is that I would then transform the model's Vector4 position with that matrix, then transform that result with the projection matrix. which would give me an X and Y pos between -1 and +1, which I'd multiply by the screen size. Correct. Building the right view matrix can be a bit complicated though. First, the view matrix is just a regular model matrix with the camera position and rotation, only inverted. But game engines usually use different world space coordinates (Z-up for example), so you need to multiply your view matrix with the right world matrix as well. Matrices can also be row- or column-major. The one you use is row-major which look like this in memory: AxisX.X | AxisX.Y | AxisX.Z | - ---|---|----|---- AxisY.X | AxisY.Y | AxisY.Z | - AxisZ.X | AxisZ.Y | AxisZ.Z | - Position.X | Position.Y | Position.Z | - All in all I recommend getting comfortable with matrices and vectors before continuing, because if a single matrix is incorrect or you multiply anything in the wrong order you will only get garbage results.
A method with an async Task signature which does no async actions is useless. You should use regular methods instead. Regarding your question about the CreateData and CreateDT methods I would suggest to leave them as-is unless those methods call into other methods that return Tasks. Sometimes you can refactor synchronous code into asynchronous code by calling the same method with an Async suffix. Like for example the Write method on a stream which also has an async method called WriteAsync.
CreateData1/2 and CreateData doesn't do any async Task I think? What you are suggesting is that I should remove async Task from Task1 and Task2? &amp;#x200B; Or should it be async task, since ten taskhandlers is accessing the method at the same time and working with its own data?
If you are only calling synchronous methods you could make the code look like this: public async Task Task1Handler() { var data = await _requester.GetData(); var results = new[] { Task1(data), Task2(data) }; foreach (var result in results) InsertToDB(result); } private DataTable Task1(Data data) { var tempData= CreateData(data); var dt = CreateDT(tempData); return dt; } private DataTable Task2(Data data) { var tempData= _ohlcHandler.CreateData2(data); var dt = _ohlcHandler.CreateDT(tempData); return dt; }
I might be asking a noob question about discord, but how does a group without channels work?
I would have a look at [OpenXml](https://docs.microsoft.com/en-us/office/open-xml/open-xml-sdk). [Nuget](https://www.nuget.org/packages/DocumentFormat.OpenXml/) best thing is its both Framework and Core.
thanks!
your code structure is a bit "iffy". If you want to improve, i recommend reading about SOLID, here is a starting point: [https://en.wikipedia.org/wiki/SOLID](https://en.wikipedia.org/wiki/SOLID) &amp;#x200B; Try using "using" code block for the StreamWriter. like using (var sw = new StreamWriter(fileStream)) { //do what you have to }
But does this mean that all the other taskhandlers would also run these method async? :) Let's say TaskHandler1-10 all performs actrions and use these methods at the same time? :)
What exactly do you mean? Join the discord (click on the link), and you're able to ask us more precisely :D
&gt;Further, .NET Core 3.0 includes new hardware intrinsics that allow a properly-motivated developer to eek out the best possible performance on supporting hardware. Properly-motivated! :D
Well, I did join (my name's GeneralAuguto) but I don't see any channels on the server...
I'll try that, thank you for you suggestion
Unfortunately can't use 3rd party tools with this client. They even have that website blocked for some absurd reason.
I'm not sure what your other task handlers do but there is absolutely no advantage in having the Task1 and Task2 return a Task. Your code now still runs synchronous and basically look like this: &amp;#x200B; private Task&lt;DataTable&gt; Task1(Data data) { var tempData= CreateData(data); var dt = CreateDT(tempData); return Task.FromResult(dt); }
In fact, it doesn't. There are situations where you will be on closed network, but still wish to use certificates for authentication / authorization. Spinning up your own CA is exceptionally common practice.
Removed: Rule 4. Toss it in another class, perhaps `static`, and don't create the `SftpClient` in a `using` block. You may want to ensure that you disconnect the connection when you close your application, or finish your tasks. You may also want to check for thread safety, whether or not you can run two or more concurrent transfers with it, and if you can't, put in some kind of queuing or locking mechanism.
I have the same issue as the other guy. No text or voice channels are visible so I am getting just a blank screen. My guess is that the permissions are somehow fucked and new peeps just can't see anything?
Aaaaand it seems to be fixed. Thx
Is it possible that the member role only gets assigned after a minute or so?
How does this compare to framework?
Nope, i just noticed that Dyno bot is down. ([dyno.gg](https://dyno.gg)) this is a bot which almost all servers use..
The only plan they have is they plan on looking in to it. They haven't decided a direction.
This is the mother of all benchmark articles!
If you use self signed certificates anyone connecting to that webpage would see error messages. I would look into having the server generate a certificate request and upload that request to whatever server handles other certificates for the organization. Is the website going to be public facing?
Those three methods pretty much do what they say on the tin. InsertRow will insert a row into a table above any selected row. DeleteRow deletes a selected row. MoveRow moves a selected row up or down without causing an error when you hit the top or bottom of the grid which is trickier than it looks. I f you look a the code a bit, you can see how it's done and use pieces of it to programmatically delete and insert rows as needed.
but if I want Task1 to run at the same time as Task2, what should I do then? I var tasks = new List&lt;Task&lt;DataTable&gt;&gt; {Task1(data), Task2(data) }; &amp;#x200B; var results = await Task.WhenAll(tasks); &amp;#x200B; Because with these line, Task1 and Task2 is going to run in the same time on each of their own threads right? If I remove the async / Task, the Task.WhenAll doesn't work anymore...
async methods do not run on a different thread. If you want to know exactly how they work and when to use them you should definitely read more about them. More information is available here: [https://blog.stephencleary.com/2012/02/async-and-await.html](https://blog.stephencleary.com/2012/02/async-and-await.html) &amp;#x200B; You could force the tasks to run in parallel with this snippet: &amp;#x200B; public async Task Task1Handler() { var data = await _requester.GetData(); var results = await Task.WhenAll(Task.Run(() =&gt; Task1(data)), Task.Run(() =&gt; Task2(data))); foreach (var result in results) InsertToDB(result); } private DataTable Task1(Data data) { var tempData= CreateData(data); var dt = CreateDT(tempData); return dt; } private DataTable Task2(Data data) { var tempData= _ohlcHandler.CreateData2(data); var dt = _ohlcHandler.CreateDT(tempData); return dt; }
You’re looking for the null propagation operator. newThing3 = person.membership?.status. That question mark will evaluate the expression preceding it. If what precedes it is null, it will just return null without continuing evaluation, and will not throw an error. A common usage is chaining if you have many nested nullable properties example = person?.Address?.Line2?.ToUpper(); This just keeps going down the tree until a null is hit, in which case example becomes null, or until it reaches the end of the expression successfully.
&gt; var results = await Task.WhenAll(Task.Run(() =&gt; Task1(data)), Task.Run(() =&gt; Task2(data))); Would it in your opinion be a bad choice to force them to run parallel? I mean, the reason I want them both to run parallel is because these two tasks are independent, and it would be faster to have both working concurrently rather than having a queue on which task is going to work first?
My point was that you only want to spin up a certificate authority **once**.
Unless you're creating and destroying multiple development environments because you're testing.
This is exactly what i was looking for. i had no idea i could do that. Thank you so much!
No, and for this particular usage, there won't even be a website at all, but rather some microservices communicating on a back-end. But the purpose of this code is actually just to allow me to automate the creation/destruction of these in the test/dev environments. Lots of stuff to test (ie: what does the authentication do if the cert is expired, not yet enabled, has the wrong OU, etc.) But I have it all working now.
good read
These are awesome features coming! Thanks Andrea for sharing!
What is a bad choice? In reality the answer is: it depends. You would need to benchmark your code and see if it really matters. If both Task1 and Task2 take a long time to complete and do not modify state in the data they process it could indeed be better to have them run in parallel.
Thanks!
I find Razor Pages simpler, better organized, and overall nicer to work with compared to MVC.
Just start migrating to Core? It’s better anyways.
Suggestion- I’ve embedded nancy webserver in my .net console apps for years. You get an instant GUI with the greatest device reach ever at your finger tips. Though a little old Scott did it with Core [hanselman nancy core](https://www.hanselman.com/blog/ExploringAMinimalWebAPIWithNETCoreAndNancyFX.aspx)
They're having a really difficult time with that feature. They were talking about it at the Build conference earlier this month. Realistically I think that's still years away from seeing it.
Can't document your way out of bad code.
I wrote a library that could provide all u need. It's called entityworker.core check it out on nuget.
I want to add to the chain below. I think MS did a very bad job communicating what `async/await` do. Adding the `async` keyword to your method doesn't magically make it asynchronous. It only makes it eligible to use `await`. So both `Task1()` and `Task2()` are completely synchronous methods. When the method uses `await`, the part of the method *up to that point* is synchronous. The compiler rewrites the part with the `await` and adds the rest of the method as a continuation. The part after the continuation tries to rejoin the synchronous context. So if you write a method that uses `async` but does not use `await`, there's nothing for the compiler to rewrite and nothing happens asynchronously. Therefore if you aren't going to use `await`, you shouldn't use `async Task`. It just tricks the caller into thinking your code is async when it's not. Here's two examples to illustrate. ## Correct Approach public async Task DoSomethingAsync() { DoSomething(); var username = await Task1Async(); txtUsername.Text = username; await Task2Async(); MessageBox.Show("Done!"); } private Task&lt;string&gt; Task1Async() { return Task.Run(() =&gt; { var username = _db.SomeSynchronousCall(); return username; }); } private Task Task2Async() { return Task.Run(() =&gt; { DoSomethingSynchronous(); }); } The compiler rewrites it as if you'd done this: public Task DoSomethingAsync() { DoSomething(); // On the UI thread var taskChain = Task.Run(() =&gt; { // On a worker thread var username = _db.SomeSynchronousCall(); return username; }).ContinueWith((t) =&gt; { // On the UI thread txtUsername.Text = t.Result; }, TaskScheduler.FromCurrentSynchronizationContext()).ContinueWith((t) =&gt; { // On a worker thread DoSomethingSynchronous(); }).ContinueWith((t) =&gt; { MessageBox.Show("Done!"); }, TaskScheduler.FromCurrentSynchronizationContext()); return taskChain; } Note that the part before the `await` isn't part of the task chain. Also note that each `await` line is executed with a continuation that rejoins the UI thread after. The `return` gives up a Task that only completes when ALL parts of the method are complete. This is a pain in the butt to write properly, so `async/await` was a big help with managing the various context switches! Now let's see what happens if we use `async Task` instead of explicitly returning `Tasks`. ## Incorrect public async Task DoSomethingAsync() { DoSomething(); var username = await Task1Async(); txtUsername.Text = username; await Task2Async(); MessageBox.Show("Done!"); } private async Task&lt;string&gt; Task1Async() { var username = _db.SomeSynchronousCall(); return username; } private async Task Task2Async() { DoSomethingSynchronous(); } Here's how that executes: public Task DoSomethingAsync() { // On UI thread DoSomething(); return Task.Run(() =&gt; { // On worker thread }).ContinueWith((t) =&gt; { // On UI thread var username = _db.SomeSynchronousCall(); txtUsername.Text = username; }, TaskScheduler.FromCurrentSynchronizationContext()).ContinueWith((t) =&gt; { // On worker thread (Task1Async) }).ContinueWith((t) =&gt; { // On UI thread DoSomethingSynchronous(); }, TaskScheduler.CurrentSynchronizationContext()).ContinueWith((t) =&gt; { // On worker thread (task2 async) }).ContinueWith((t) =&gt; { // On UI thread MessageBox.Show("Done!"); }, TaskScheduler.FromCurrentSynchronizationContext()); } An `async Task` method is the same thing as a `void` method UNLESS it includes an `await` so the compiler can rewrite it as returning a Task with a continuation. If there is no `await`, the end result is a method that runs synchronously and returns an 'empty' `Task`. So the compiler wants to do task continuation where I did use `await`, but there was no actual Task. So an empty task executes, and we potentially pay all the costs of a context switch, and potentially some other stuff runs on the UI thread, then we come back and do our UI thread work. But we may as well have not used `async` and `await` at all! Technically, we didn't write anything that leaves the UI thread! So don't use `async` unless you're planning on using `await`. `async` means "I want to do extra work to return to this synchronization context, so let me use `await`. But none of that happens if you don't use `await`. `await` means, "Schedule everything hereafter to happen on this context as a continuation of whatever I'm awaiting." Nothing magically makes a task. At some point in the chain someone has to use the `Task` class, or everything will end up synchronous! (That's not EXACTLY how the compiler rewrites things, but it's not worth nitpicking. Unless I'm completely wrong, in which case I hope someone corrects me.)
nope just core 3.0, a lot of stuff isnt going to be in 4.8
thats what we're pushing for here
Plus desktop development has been pretty overshadowed by web
Well.
A lot of great reading there, thank you :) One thing confuses me though - the subscribe method: Subscribe&lt;T, TH&gt;() where T : IntegrationEvent where TH : IIntegrationEventHandler&lt;T&gt; takes no arguments - only two types. How does it actually get an instance of the handler? Is it somehow supposed to use the IOC container to resolve the type?
The correct signature would be: &amp;#x200B; public async Task&lt;string&gt; GetData(string test) { return ""; }
&gt;Is CQRS an architecture? &gt;People often get it wrong. CQRS is not a top level/system level architecture. Example of architecture styles are: layered, ports &amp; adapters. CQRS is a pattern you apply on “the insides” of your service/application and you may apply it only to portion of your service. This, this this and a thousand thousand times this. I don't think people get how important this is. This is a great post OP. As someone who has spent a few years developing within a CQRS-ES based system your post is spot on.
That repo is a bit difficult to navigate, could use some ordering, or a README.md that helps navigate it
Wow, I didn't have Task included in my references so that was giving me an error and I thought it was wrong. &amp;#x200B; Also, in case anyone finds this in the future the Operation Contract was: &amp;#x200B; Task&lt;string&gt; GetData(string test);
I like the challenges on Exercism. [Their C# track](https://exercism.io/tracks/csharp) is great and things are ranked according to difficulty so you can jump in where it starts to seem challenging.
Any function that you do not want blocking the current thread should be async, and not awaited. A perfect example might be a GUI thread. Any blocking function run on the GUI thread will freeze the GUI. Making such a function return a task and not awaiting it would put it in the background and not cause your GUI to freeze. However if you were to await that task your GUI would be frozen until it completes. You can make any function return a task there by making it asynchronous by returning Task.Completed or Task.FromResult. The async keyword feels like syntax sugar, but it informs the compiler and the runtime that the function may run on a separate thread. Remember that all of this also includes all of the race conditions and other fun stuff that crops up when dealing with concurrency and parallelism.
Hi... I'm looking here [https://github.com/dotnet/corefx/tree/master/src/System.Data.SqlClient/src/System/Data](https://github.com/dotnet/corefx/tree/master/src/System.Data.SqlClient/src/System/Data) Do you have a recommendation on where to start or how to go about looking at this?
Yes, exercism is pretty nice! Also not bad with the mentor feedback. Helps to get more into the language style. Thanks for the suggestion.
Check out Tim Corey's YouTube channel.
Are you by any chance doing .Result instead of an await?
Tried await and issue still persists.
Yeah, in hindsight I think I focused too much on the Dispatcher example. I also think it's a bad idea to lead with the worst example of an implementation, because that tends to set the tone of a conversation. My main point is even when the Dispatcher isn't involved, I don't like Task loops vs. any other form of event loop. I have a few reasons but it'd take an essay to list them and I don't think you'd care to read all that in the end. The summary is I think this technique consumes different, less intuitively shared system resources than Timers. It can cause just as big a problem but I'm suspicious you'll be in even deeper before you realize it.
I didn't see any tenary operators being used in the article? Or do you mean the marking of a reference type as nullable using ? suffix?
A bit unsure about all these but I think: 1. Probably no, from what I know the compiler creates an array for you, so it wouldn't be correct to represent that as params. Maybe in the future? 2. No. Span is not allowed to be on the heap, and anything stored as a member can in some way be stored on the heap. 3. You should be able to use Memory&lt;T&gt; for this purpose. Maybe Span works too. 4. Unsafe is usually used when you NEED performance, so not sure where you heard to avoid it. Span would probably provide same performance as unsafe equivalent, but with better type safety and other benefits.
Start writing?
It sounds like something goes wrong and the Task times out. This hangs your application because it sounds like you aren't properly using async, but that's sort of a different topic. (Basically: you should display a "busy" UI, then call the async method and schedule a continuation *on the UI thread* that updates the UI when it finishes.) I think the root problem is "sometimes you have a network error" and you need to both be prepared for that and figure out why so you can try to solve it. "Be prepared" means that yes, you probably need to do a 10-15 second timeout. Unfortunately it sounds like the way you wrote that still isn't async enough. So IMO the problem is we can't see your code. If the async parts were working properly we could more directly talk about the network flaws. But I can't discuss "cancellation isn't working" if I can't verify "the cancellation code is correct". And I assume it's not correct since it isn't working.
I am well aware it is a large repo and probably confusing. Many of the projects reference each other, and that is why it is all in one large repo. Right now you have to clone the entire repo, which is available at the root github.com/DataJuggler/SharedRepo. If you open up either of these two projects: DataTier.Net - DataJuggler\DataTier.Net\DataTier.Net.sln Or DB Compare - DataJuggler\DBCompare\DBCompare.sln (relative to where you cloned or downloaded the repo). Both of these two programs have a user control called Random Banner, and it if you run them, every 30 seconds the banner changes to show another program in the repo. You can open the projects by clicking on the Banner image and another instance of Visual Studio will open. Thank you for the feedback, and I will add a Read Me file and possibly even a 'Start Up Program' over the weekend; this has been on my to do list as a way to launch all the programs and maybe a news or something. It is actually harder to market free code than I feel it should be. I think once a few people find it, some natural word of mouth can help. I have some videos on my YouTube channel of the ones I have made so far that might help. It is also on my to do list to divide YouTube and GitHub pages into Projects, but time is my least abundant resource. DataJuggler YouTube https://www.youtube.com/channel/UCaw0joqvisKr3lYJ9Pd2vHA/videos My favorite projects are: DataTier.Net - an all stored procedure alternative to Entity Framework. DB Compare - Compare two versions of SQL Server databases (such as dev, test, production, etc.). XML Mirror - Use reflection to write out C# Xml readers and writers And Transparency Maker - Manipulate Images using a Pixel Database and a language I invented called BQL or Bitmap Query Languaage. So similar to SQL that if you know SQL, you know BQL with a few minor exceptions like each criteria must be on its own line. Thanks for at least telling me someone found it, you are the first I think. Corby If you open either the solution for DB C
The example uses some member named `_subsManager` which the example should expand on but doesn't. However, I believe they are implying that there exists some class that knows how to create the handlers as well as manage their lifetimes. Presumably, we've registered the handler types and their dependencies in the composition root and this manager class probably has an instance of `IServiceProvider` or some factory instance that creates instances of event handlers.
What about span&lt;kthatfatass&gt;?
That sounds like a deadlock that ocoures because of the syncronisationContext of net framework. Try using await client.SendAsync().ConfigureAwait(false);
Small detail but I would not write an async function that simply calls [Task.Run](https://Task.Run) on synchronous code. In your example it works but if you had something like async calling async it could unnecessarily be doing a [Task.Run](https://Task.Run) inside a [Task.Run](https://Task.Run). Also if the code was ever used outside a UI/Viewmodel you wouldn't want a new thread at all.
Yeah sections 1 &amp; 2. It makes it harder to read and and debug there's no reason to shorten it.
&gt;Check out Tim Corey's YouTube channel. Looks great, thanks!
Well, while learning by doing is good, I also like to have some guidelines so I get to know typical idioms of the language and the patterns which are recommended.
Nope, span of t cannot contain references to buffers in the heap.
As far as getenumerator is concerned you don't need an object implementing ienumerable to use it in for each etc. https://blogs.msdn.microsoft.com/kcwalina/2007/07/18/duck-notation/
View this subberddit in 'old reddit' and check out the resources listed in **Useful MSDN Resources**
That's great news. But could you please provide an official source where they said they plan on looking into it?
Yes. I'm aware. The problem is that I have a bunch of generic math functions that work with IEnumerables. Since Span does not inherit IEnumerable, I cannot pass it into my math functions, and I can't wrap it since it is a ref struct. So, I have to write custom method overloads for all my generic math functions to support the Span&lt;T&gt; type.
re: `params Span&lt;T&gt;`, there's a championed issue for it: https://github.com/dotnet/csharplang/issues/1757
Couple things: 1. Try and log the resulting exception and any http status codes to see if it's a timeout, connection refused etc. 2. If this is a Windows server box, rdp in and look at event viewer to see if your exception or any additional error information is there.
ClosedXML is also a good library based on openxml that makes the api a little easier to deal with
http://www.albahari.com/nutshell/
\+1 .. I just fixed one of these last week.
Yep... Can't use ref struct as generic... :( I will never get my No&lt;Hablo&lt;E&lt;Span&lt;ol&gt;&gt;&gt;&gt; gringo;
.Net Core is gonna go away eventually, being [replaced](https://devblogs.microsoft.com/dotnet/introducing-net-5/) by a "one shoe fits all" .Net 5.
https://github.com/dotnet/corefx/issues/17093 No way to cast it to an interface or to extend the type to return an interface
Maybe refactor your functions to accept an enumerator and add overloads that accept ienumerable and forward it's getenumerator to your original functions?
At early stage of learning C#, a good idiom or pattern is whatever you come up with that works for you. It's truly invaluable to learn something your own way (presumably the bad way) to later learn the proper (allegadely) way.
The GetEnumerator function on Span&lt;T&gt; returns a custom Enumerator that does not inherit from the standard classes. So that unfortunately won't work either.
CQRS is another pattern like Service Locator, Factories, Singletons, etc. It's just another way of building your code to talk to itself. I like it conceptually, but maintaining it can be a bitch. I don't dislike it for that reason though, it works well. Just (relatively) tonnes of code per command or query.
Wrapping a span in a reference type would rather defeat the point, but I suppose you *could* write a `ref struct` wrapper that wraps either a span or an `IEnumerable&lt;T&gt;` if you really wanted to.
I already tried that, but it won't work as far as I can tell. "ref structs" can't implement interfaces. I would never want to wrap it in a reference type, but by "wrap" I mean somehow treating it as an "IEnumerable".
Dang! I do wonder what advantage span would bring if there is no way your generic functions can utilize the advantages the span brings.
Create sub repositories and reference them properly.
Interface variables/parameters are always reference types or boxed value types, there is no difference in this regard. What I meant is doing something like internal ref struct EnumerableWrapper&lt;T&gt; { private readonly IEnumerable&lt;T&gt; enumerable; private readonly Span&lt;T&gt; span; public Enumerator GetEnumerator() =&gt; new Enumerator(...); public ref struct Enumerator { private readonly IEnumerator&lt;T&gt; enumerator; private Span&lt;T&gt;.Enumerator spanEnumerator; public T Current =&gt; // delegate to span or ienumerator public bool MoveNext() =&gt; // delegate to span or ienumerator } } And then write your own code like public int Sum(IEnumerable&lt;int&gt; values) =&gt; Sum(new EnumerableWrapper(values)); public int Sum(Span&lt;int&gt; values) =&gt; Sum(new EnumerableWrapper(values)); private int Sum(EnumerableWrapper&lt;int&gt; values) { foreach (var value in values) ... } It's impossible to pass a span to a method that requires an `IEnumerable&lt;T&gt;`, but it would be possible to reduce duplication in your own code base (with some performance penalty due to the delegation).
1) Memory&lt;T&gt; is the off stack version of Span&lt;T&gt; which exposes a Span&lt;T&gt; 2) Not sure I can answer this concisely or accurately. 3) It works fine with natively allocated memory. 4) Depends on the use case. Contrived benchmarks won't tell you much. Use unsafe code where it helps deliver the performance you need (or the inter-operability it brings), but you need to benchmark two comparable use cases, both written with a similar level of expertise. There are some blog posts about how it dramatically increased JSON parsing and string parsing in the Core 3.0 framework. It's not a game changer, it's the same game but with better shoes.
Gotcha. Yes. That should work. :) However, at that point I would probably prefer writing all the method overloads rather than implementing that pattern. But that is a potential option.
One can even say desktop development is dead except for games, design apps, and office suites. Anything else? Web first.
Post the code so that we can help
Oh okay, I think I understand it now then. Thanks for the explanation :)
It is not an architectural style like SOA, but it can be considered an architectural pattern, used to define the internal organization of the solution.
Do you have a link to the talk where they mention this? I only saw overviews of Build so I don't know where to look.
Why are you using an arraylist instead of a strongly typed collection?
When/how do you want the user to stop entering numbers? If you want to wait until they enter a valid number, then add a `break` inside the `double.TryParse` success block. If you want to wait until they input a specific text (e.g., "exit"), then check that in the `while` expression. For example: `while (FirstNumber != "exit");`
I would suggest making it a while(true) loop and putting a break; inside the if statement where the value is valid. Simple and easy. Alternatively you can make a function which will read the input and parse it and then return if everything's alright. If not print out the error and try again.
Shouldn't be injecting repos into a controller. Create a service that takes them and exposes the required functionality.
Maybe useful; https://blog.ploeh.dk/2010/02/02/RefactoringtoAggregateServices/
I thought Nancy was "only" a framework for back end services. How do you use it for "instant GUI"?
I enjoyed reading it, and I am going to nitpick ;) &amp;#x200B; It's not a simple topic and they did pretty well communicating it. Remember that you have Microsoft documentation and MVP blogs, all of whom are part of the fabric. Some of your points are very UI centric. I'd have put more emphasis on what ConfigureAwait does for example, and why it works the way it does... \*points at the UI and then the not UI\* Some of your advice is "advanced" but without the backing, so while you can selectively have a method return a Task as opposed to being an async Task, the general guidance is to be an async Task, until you figure out the points where you don't need it. Basically go async everywhere, profile stuff, fix any bottlenecks. Use pre-optimisation where you're familiar enough to know the result without benchmarking. I think the last part of that is trickier than it looks, so GOTO 10.
The example's origin is [https://blogs.msdn.microsoft.com/cdndevs/2016/01/26/simplifying-development-and-separating-concerns-with-mediatr/](https://blogs.msdn.microsoft.com/cdndevs/2016/01/26/simplifying-development-and-separating-concerns-with-mediatr/)
Event Sourcing always seemed like massive overkill for anything other than banking and finance apps where you need crazy detailed logging ability, and it doesn't seem like there are many libraries and tools to help implement the store side of things. On the topic of CQRS read/write persistence when we think of the best ORM for C# we think of EntityFramework which has a single DbContext + models for everything. And calls to create will usually follow up with a read to get a auto incremented primary key and update the tracked entity. So its also extra complex now because if you want to leverage EF, and you want entirely different stores for read and write there are very little real world examples out there and complexity is very high. All of this is not an argument against CQRS or ES but a caution to know when you need these tools. A basic CRUD app doesn't need MediatR.
[`.ConfigureAwait(false)` should not be used to avoid deadlocks.](https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html) &gt; Using ConfigureAwait(false) to avoid deadlocks is a dangerous practice. You would have to use ConfigureAwait(false) for every await in the transitive closure of all methods called by the blocking code, including all third- and second-party code. Using ConfigureAwait(false) to avoid deadlock is at best just a hack). Regardless, using or not using `.ConfigureAwait(false)` is not the cause of deadlocks. &gt; As the title of this post points out, the better solution is “Don’t block on async code”.
 [https://github.com/csdahlberg/CodeTiger.Core](https://github.com/csdahlberg/CodeTiger.Core) might fit your description.
At first glance, this does sound like a typical deadlock issue with misuse of async/await in .NET - however, these deadlocks don't normally result in canceled tasks, and they won't typically cause something like not actually opening a connection. Typically, the task hangs forever, and the only solution is to kill the process. Can you show us your code?
I'm going to fully read through this a bit later in more detail, and then re-read again. It's something I don't really grasp at the moment. My work is using a "CQRS pattern" for the majority of their API's and I really don't see any benefits to it at the moment (though I think they have just implemented them very badly). For example, the article states: **CQRS enables us to have different models for mutating state and different models to support queries**. Well, what was stopping you from doing that with a repository pattern? (provider pattern, whatever)
The default timeout of the HttpClient is 100 seconds, so this is where your problem is most likely.
In the section about how to prevent deadlocks, the article literally says: "There are two best practices (both covered in my intro post) that avoid this situation: In your “library” async methods, use ConfigureAwait(false) wherever possible. Don’t block on Tasks; use async all the way down."
I don't get what you mean. It sounds like you're arguing this call chain would be bad and result from my implementation: public Task OuterAsync() { return Task.Run(async () =&gt; { await InnerAsync(); DoSomethingElse(); }); } private Task InnerAsync() { return Task.Run(() =&gt; { // something long }); } That *is* bad, but mostly because it's a poor way to compose tasks. This would be much better: public Task OuterAsync() { return InnerAsync().ContinueWith((t) =&gt; { DoSomethingElse(); }); } I can't think of a case that matches your definition that isn't better written as some kind of composition. So if my first example looks like what you mean, I agree it's bad but don't agree my example leads to it.
None of your variable names match.. so it isn't really clear what you're asking. You can expose the text property of the text box in many ways. 1. Make the text box property public (you can do this in the windows form designer) and then access that and then it's text prop. 2. Create a property that encapsulates that text box text field - public string Domain { get =&gt; txtBox.Text; set =&gt; txtBox.Text = value; } 3. Look at data binding (whole other kettle of fish)
It also literally says what I literally pasted from the same article. Read the post a bit more thoroughly to understand the context.
It doesn't modify the data it is using. Just creating new data with the data in param. How do I benchmark the code? :)
What's mutation testing?
await SendAsync().ConfigureAwait(false);
How does routing work with this setup? Do you use attribute routing everywhere? The nice thing about mediatr is you can use default routing and still have small, single-responsibility services with few dependencies.
Thanks! I'm currently running your project. It managed to generate 220 mutations so will take a while though. But I will update with the result after it finish.
You're the first one I heard say that tbh. A repository can already be seen as a service, so why encapsulate it further? Mind clarifying why and maybe link some articles?
Yep. If you can't sweep the problem under the rug, get another rug to go on top ;)
In your original example was probably fine but in a more complex class it might be less obvious it was used correctly. A simple way to think about it, a private method doesn't really need to use Task.Run. Whatever is calling that code can decide if its something potentially slow that should be wrapped in Task.Run. Without more context InnerAsync could be a database call, maybe this is running on a web server where you don't want a 2nd thread starting.
Depends on what the repository is doing. A service may be overkill. Or it may not.
It is a project for school and his requirement was using an arraylist, I understand that an arraylist is really quite outdated
In short: - You start by injecting "mutations" into your code. For example changing if(i == 1) to if(i != 1) or var i = 1 + 1 to var i = 1 - 1. - Then you run all your unit tests with all the different mutations (you run all tests with each mutation separately). - If your unit tests fail we say that you "killed" the mutation (as you managed to notice the change in logic). If all your unit tests pass the mutation "survived". Then you get a mutation score depending on how many mutations that survived. So it's a cool way to verify the quality of your unit tests and you can see it as an test coverage plus.
I think you've misunderstood the note that you quoted. He means that calling `ConfigureAwait(false)` and then blocking on that does not help to avoid deadlocks. "You would have to use ConfigureAwait(false) for every await in the transitive closure of all methods called by the **blocking** code, including all third- and second-party code." (emphasis mine) He's meaning a scenario like this: ``` public async Task&lt;int&gt; SomeAsyncMethod() { return await DoStuffAsync().ConfigureAwait(false); } public void SomeSyncMethod() { // Won't avoid the deadlock just because we used ConfigureAwait(false) inside SomeAsyncMethod. var value = SomeAsyncMethod().Result; } ```
Newtonsoft library + JSON textile.
Default routing would suffice. &gt;single-responsibility services with few dependencies I understand that this way we avoid injecting a HUGE amount of services into controller's constructor directly. But remember - they are resolved by MediatR internally. It's the Service Locator approach. Which means you're only hiding dependencies of your controller. Hence, **your controller is still dependent on all of the services that get service-located**.
Nice examples. Depends on project, if the size is smaller it can be just too much additional classes when using CQRS. I see pros when dealing with more contexts and whole separation stuff and other mentioned features in the article. I have recently removed repositories from my project and replaced with CQ classes. Some business logic is keeped in smaller service classes. However, there's nice separation, when using Mediator (ex. MediaTr) you don't need to inject different repositories and services for controllers when talking about web app. There's a possibility to put classes to the pipeline (request data validation, authorization..), use transactions, ES when needed and so on. What can be much simpler ? Direcly accessing database context, involving services and repositories or generic classes, creating custom layer. When dealing with various app contexts, there can occur cases when it's required to share some identities/data between contexts and that can be a little tricky. So design is one thing but overperforming simple solutions will bring additional cost and work.
Yeah, I talk very UI centric because I've spent 16 years writing .NET UI. It's a lot different in other contexts and, in many cases, I really question why bother with `await` when you don't have a UI thread to deal with. It seems like in those contexts, it's a handy shortcut for some continuation stuff and that's fine. But I can't figure out why you'd bother writing an `async` method if you're not going to `await`. It's the equivalent of adding `return Task.FromResult()` to the end of your method, so why bother with letting the compiler add misguided context restoration logic? Similarly I don't like `ConfigureAwait()`. 90% of my code *isn't* on the UI thread. 100% of ASP and CLI code isn't on a UI thread. So why is the default behavior of the primary syntax sugar for concurrency "assume there is a UI thread"? Now I have to remember, every time I `await`, that I probably want to use `ConfigureAwait()`. I'm doing this because "it was tedious to type `ContinueWith()`, apparently? Life was never this complex when I used EBAP or IAsyncResult. Life wasn't even this complex before `async` and `await` existed. You knew which thread you were on, and if you didn't and you cared you had clear mechanisms for getting back to the thread you wanted. No matter how you restructured your code, the UI thread bits stayed on the UI thread and the worker thread bits stayed on the worker thread. With `await`, it's only clear at the time of writing a line what thread it's on and whether you want it to remain on that thread. Any refactor anywhere in the call chain might change that opinion. Even after you do your profiling, identify some bottlenecks, and readjust things, you might do a future refactor that re-borks everything again. It just seems easier to avoid it entirely. Instead of "async all the way down" I prefer "async in very controlled circumstances". Every time I've tried to embrace it I caught thorns.
AKA feature flags. https://trunkbaseddevelopment.com/feature-flags/
https://masstransit-project.com/
You could try (from easy to advanced): 1) var s = Stopwatch.StartNew(); Call Task1 and Task2 synchronous and then after the calls write s.Elapsed to the debug output. Retry with the async version and see which one is faster. 2) Use the visual studio built-in performance profiling tools or any 3rd party profiler 3) Use [https://github.com/dotnet/BenchmarkDotNet](https://github.com/dotnet/BenchmarkDotNet) In general: If you can't tell the difference use the sync code because it's often easier to reason about.
this has always worked best for me and those around me... 1. Figure out something you want to make or sounds cool...could be anything but try and choose something relatively simple. 2. Start youtubing/ reading to try and make whatever it is you chose. 3. Ask others (this sub, stack overflow, etc...) for help or to review what you have done to make sure you havnt made any stupid mitakes. It's been proven that you learn exponentially faster when you learn towards solving a problem.... best way to learn IMO
Anybody here know Ook?
How does default routing work when the controller factory finds the controller by name. Ex: User/Index maps to UserController. User/Details also maps to UserController. The whole point of the mediatr setup is to make services small and testable. That's the only way dependencies really matter here. Your controller does not care what dependencies the services require. So the standard strategy is do not write tests for your controllers (all logic is in the services) and write tests for the services which is easy to do since you can limit mocks. The service locator pattern is not always an antipattern when it's part of the infrastructure. MVC is already doing service location in it's controller factory and nobody considers it an antipattern.
How do you solve the problem of mutation causes no functionality change? You would presumably not be able to guarantee the score you give is representative. Another question is on you score being dependent on what mutations are caused, what is your threshold?
Yes, the answer to everything is "add more layers", regardless of context.
&gt;MVC is already doing service location in it's controller factory That's correct. Good point by the way!
So i don't want \- CQRS \- leaking DbContext into my presentation layer &amp;#x200B; I want \- filtering for queries (specification approach ?) \- transactions \- separation between app layers \- testing &amp;#x200B; Possible usage of servies, generic ones, specifications/extensions, IQueryable, smaller controllers and aggregations and mentioned. Favourite approach ? After CQRS i am going to try more service like approach for simple projects and not using repositories, when using Entity Framework.
When does your code execute ? If you're setting these values before the user enters any text then you'll have an empty string. Create a button and in the onClick event try console.log(txtDomain.Text); after entering text, see what you get in your console window.
That's one of the hard parts and in some cases you have to look through the mutations and check if it's a "bad" mutation. It's also a question about personal preferences. For example I know many dislike the mutation that change &gt; to &gt;= but I think it's good to test boundaries. In my project we don't really have a threshold for pass or fail. We will simply present the result and developers will look through and see if they found something that they really should have tests on. But it helps a lot that we focus our mutation testing on pull requests as most people never get more than 10-20 mutations so it's pretty easy to go through them all. It way worse to do the whole project and get a couple of hundred or thousand.
There's one video about C#. Watch the last 10-15 minutes.
[https://github.com/65001/AbMath](https://github.com/65001/AbMath) might fit your description?
Why do you think the service locator pattern is "bad design"? Does it apply to every situation? To me, it seems absolutely fine to use it inside the infrastructure like that. It's even limited to a single generic type (`IRequestHandler&lt;T&gt;`).
Its a web server can serve up angle brackets just as easy as curly braces.
&gt; ConfigureAwait The ConfigureAwait default is specifically to deal with the least amount of fall out. On the UI side you probably want to continue on the UI thread (probably), and if you don't it will all explode in hot lava :) So it means that all the other code has to add configureAwait(false) because they are not constrained to a context. This is why it defaults to the UI friendly mode. On the UI side, the best thing to do is what we always did. Marshal the service call that be on another thread back to the UI thread and then use async await in the VM (or P or C) depending on tech :) Think about the UI and server as two sides of a butterfly. You can async one way, and async the other way, but you'll have a hard time trying to async from wing tip to wing tip. I do get what you're saying though. We've been through 8ish iterations of async patterns since the beginning, so it's constant change :)
Yeah I think I agree on the basis that things get much more complex outside of exampleland. I do agree I prefer a private (or even public) synchronous method that clients decide whether they want to make async. The best place to do your async work seems to be at the last possible moment (the highest possible layer). The deeper async stuff gets the harder to untangle it seems. Sound right?
https://docs.microsoft.com/en-us/dotnet/api/system.random#remarks
So it's checking for false positives and redundant logic?
Curious what you might find in this: https://github.com/jpdillingham/Soulseek.NET
You can load the hmail com library as a reference (install it on your machine), then grab all the accounts using the app and update them. As well, it allows remote com access as well (need to setup firewall and such for access)
I think I just found easier solution stop using repositories hehe
A while (true) with a break it just a goto by a different name.
Not in my Git abilities.
He's released a compiled version you can download it as a zip file under release &gt; assets: https://github.com/peterjcarroll/ClozeMaker/releases If you have windows 10, just unzip and run.
Looks like a usual solution. This is source code, so you have to download it to your local machine and compile it. This can be done with Visual Studio. Open .sln file with VS and press big green button in the header.
It's more like it's looking for logic that you don't test. If a mutation survive it means that someone can go into your code and change something and all unit tests will pass and you will never notice until someone outside tests it. Sometimes it may be harmful things but I have actually seen mutations that survive in core logic that would effect the whole product if someone accidentally changed it (we just didn't have any unit tests on that part).
Why does automoderator post this near the end of the month? Rather than on the first (just asking)
This is also suitable here 😁
&gt; A method with an async Task signature which does no async actions is useless. You should use regular methods instead. There is a behavioral difference, actually, in that an async method establishes a scope for AsyncLocal variables, which means they won’t flow out of an async method, while they do flow out of a regular method.
What's wrong with that?
I've been wondering the same thing.
There is a concept called async all the way which means async functions should only call other async functions. This works if the lowest/deepest level is inherently async. For example if you are reading a large file you can use System.IO.Stream.ReadAsync to read bytes which is async without a 2nd thread. Http classes often have similar functions. I am not an expert on this but I believe it works because its IO that does not require a thread in your app and the operating system fulfills the request as well as hardware (no threads at that level). At the UI level if you don't have functions that are naturally async (such as CPU intensive work or 3rd party library without async methods) you are basically just using Task.Run to get the convenience of async/await to do this work in a new thread without some of the downsides of managing threads.
If it's just getting text into a class all you have to do is: ClassName.Property = textboxName.Text;
Personally, I came over MediatR many years ago. I read blog posts about it and couldn’t understand the point at all. Then, a year later, it suddenly ‘clicked’. Finally I understood how it could help our code. And from then on I was sold. I don’t count MediatR as service locator. When I have argued against service locator it’s been either a static class with properties for each service or something similar. Something that ensures that ‘everything-knows-everything’ and if you add or change one thing, everything is changed. Instead, MediatR provides a decoupling and a flexibility that is very important to me: it allows me to easily add new functionality without changing existing functionality. Yes, instead of injecting IMediatR into my controlller, and send a SomethingRequest for it to handle, I could instead just inject the SomethingRequestHandler into my controller and call it directly. But with MediatR, I can easily extend the functionality. I can intercept the request and validate it, add extra information to the request, log the response or whatever. The controller doesn’t need to know anything about this. Now - it is possible to do this without mediatR as well. Of cause. Many IOC libraries support different kinds of decoration and interception. But still - MediatR makes it easy. So, let’s imagine a evolving app. In the star, we have a controller that adds a todo item to a list. In the spirit of agile, we solve this in the simplest way for our users to test the new feature as soon as possible. All the controller does is to send a AddTodoRequest. Next, we want to update the ui whenever a todo item is added. We can do this by changing the controller, or we can do it by adding a post-handler to the existing request handler. The post handler is registered in the IOC container, but this is the only change to existing code. Almost no chance of introducing bugs in existing working code, of making existing code more complex. So we choose the latter option, and sends the new todo list to the browser via signalR. Now - the user is happy, but sales wants more money. For every 10th item added, the external invoice system should be noticed. Again: add a new post handler. No change to the existing code. You get the idea? Now - MediatR ain’t no golden hammer, and it comes with enough rope to shoot any foot you like... but used right and with a little care, it gives huge advantages.
That's super interesting - so going from the thought process that the implementation of the current problem "is the only right way" (excluding switcheroos of statements...) then practically most mutations should actually alter the output in a way that tests should fail, right? And if a mutation actually survives and not all unit tests are affected by it, then it might be an indicator that your function does too much and should be refactored?
&gt;except for games, design apps, and office suites. Those are HUGE exception and then add to that anything CPU intensive where bus speed will always outpace bandwidth and you have an iron clad argument why desktop development isn't dead.
No. .NET 5 is going to be the next version of .NET Core. The plan is merely to rename ".NET Core 4.0" as ".NET 5.0" because ".NET Core 4.0 would be confusing with the desktop 4.x framework..." I still think they should hold off on any EF releases and go straight to ".NET 7" for the next release of .NET Core (though it appears there will still be some confusion with EFCore vs EF even if they named it .NET 7, but at least it wouldn't be .NET 5 EF vs .NET 5 EFCore vs desktop 4.x EF 5).
It obfuscates the termination condition.
Depends what's inside that loop. If there are 10 LoC then nothing's wrong. If that's huge 100 lines loop, then yea.
As we think about it. Aren't all commands just bits with different names? Now seriously. So maybe make that extra function with return true / false? I don't see another simple way of making that loop there. It's just simple parse check with message. No need for such an overkill.
I guess I see repos as part of the data later and I try and keep that separated from my controllers.
That is correct, but the part you're glossing over is that we cannot typically control all code in the pipeline. As such, relying on `ConfigureAwait(false)` to avoid deadlocks is a _risky proposition at best_. The real solution is to not block async code.
One of the main skills you will have as a programmer is using Google search. If you put the title of this thread in Google, you would get help extremely fast along with examples of how to use a text box, and you would have the api from Microsoft themselves on all the methods and properties of a textbox.
Incorrect. Awaiting does not block the thread. That is exactly what it doesn't do. That is the whole point. It passes control back to the calling method and returns to the point of the await when the task completes
Not to be rude but almost everything you've said is wrong. I recommend you read up on async
This was my feeling as well. I want sure what it was really adding. I made my own small version that didn't do service locator but instead did Func&lt;Type,dynamic&gt;. You can see how it looks here: https://www.skylinetechnologies.com/Blog/Skyline-Blog/January_2019/cqs-simpleinjector-and-power-of-decorators
We used to have a permanent sticky outlining rules and links, but over time it had gotten out of date and stale. With that permanent sticky, we could only have 1 other monthly sticky at once. So we alternated between this Job Fair and the Side Project stickies bi-monthly. (Side Project posted on the 1st, Job Fair posted on the 16th) After the April Fools shenanigans, the old stale permanent sticky was retired and the 2 monthly stickies are being left up for a full month instead of just the ~2 weeks. In retrospect, that means that the Job Fair sticky probably ought to be posted on the 1st as well. But you know, there are [reasons why that was never considered and updated.](https://i.imgur.com/wLoEBsL.png) I'll see about changing that for next month.
Awaiting in an async behavior only allows the calling thread to continue when the async call itself is not awaited. If it is, the calling thread is blocked. Which is why every async behavior is required to return a task. Proper async behavior usage is not awaiting every async behavior, but rather chaining tasks together. An api controller Http get, for instance, cannot continue if it's awaiting a task to complete. Sure, the web server knows now it can do other things, but that's a thread above the thread awaiting tasks.
If "not to be rude," Then tell me why I'm wrong. Thank you for the recommendation, I will do that.
Add "var valid = false;" before the do. In the then part of the if, add "valid = true;" Change loop condition to "while ( !valid)"
Jupyter is pretty cool 😎.
I think one of the points against it is that it takes a bit of a mind shift on everyone’s part. We all know how to put together a form and perform CRUD operations on a database. Users are used to clicking a big “Save” button and request response is usually the norm. With event sourced aggregates and eventual consistency, it takes some getting used to. Not to mention that unless an effort is made to understand the business that needs to be modelled, the code can spin out of control and the model all messed up. This is why, in my experience, following a DDD approach and trying to get proper understanding of the domain goes really well with CQRS and Event Sourcing.
Visual studio is a bit beefy just to compile the code. Vs code would be fine.
Sorry for the delay. Somehow I found a new bug with your project and some mutations locked the whole run. Managed to find and fix it thought. But the project had pretty good result! 22 mutations of 232 survived so a mutation score of 81%. You can download a short summary of all the surviving mutations here if you want to look at them: https://ufile.io/zowj7858
https://github.com/castle-it/dynamic-linq-query-builder Relatively small open source project I maintain with 100% coverage. Would definitely be interested to see what your tool can do with it.
That was my first question. &amp;#x200B; My second question was who is 'They?'
Yeah that's a good way to look at it and actually one of the things that many miss. The more a method/class grow the harder it is to test all of it's logic. For example say that it managed to grow to a couple of if-statements and maybe a loop of some kind. Are you sure that you actually test all the different cases?
Just curious: How often do you generate false positives? Lets say you have `public int GetZero(int arg) =&gt; arg &lt;= 0 ? 0 : GetZero(arg-1);` and ``` [TestCase(0)] [TestCase(-1)] [TestCase(2)] [TestCase(-3)] public void ShouldYieldZero(int arg) { var result = GetZero(arg); Assert.That(result, Is.EqualTo(0)); } ``` And your mutation looks like (I assume these are kind of mutations similar to what you‘d generate) `public int GetZero(int arg) =&gt; arg &lt;= 0 ? 0 : GetZero(arg-2);` (false positive) `public int GetZero(int arg) =&gt; arg &lt;= 0 ? 0 : GetZero(arg*(-1));` (false positive) `public int GetZero(int arg) =&gt; arg &lt;= 0 ? 0 : GetZero(1-arg);` (false positive)
Wow, .NET Core is already on a PIP? :( It barely had any chance to prove itself!
Yeah it's a shame, if they'd only have bought a company that built cross-platform UI frameworks a few years ago I bet it'd really be taking off right now.
How long does your tool typically run? I read you generated 200 mutations for one project (which doesn‘t sound like a lot to me). Let’s assume a small project: Compilation of at least 10s? Running unit tests around 30s. So 200x40s? So around 3 hours? How do you add that overhead to pull requests? Sounds like a lot to me? Ok highly parallelizable but still sounds rather slow even for small projects.
Why do you have the conditional if there's no functionality change based on it being true or false?
Well said. I’ve been developing web applications for almost seven years now, and I am now in a enterprise software role. When I started my new role I had a lot of preconceived notions, and habits when it came to developing. I started reading about domain driven design, and the concepts, and it opened my eyes. I’m still reading and learning on this topic, but I feel that as a developer it has really helped further my knowledge of designing applications.
Changing the operater is most likely to have an effect but its no grantee... But I was referring more to changing the bounds of the operators.
That actually does cause a functional change though doesn't it? After such a change, more or less values will be accepted than previously
Yes but that doesn't nessarily mean it's outside the bounds of your tests. For example you change an if x &gt; 20 return y, you have a test that makes x 40. You're mutation then comes in and changes the if to x &gt; 30. Your test still passes.
Right, so it's working as designed and showing you that you don't have tests for values 21-39 (which are illegal). The solution would be to change the test to more closely fit the actual requirement by testing x = 21
But that's not something many people think about when writing tests. Also the 21 example doesn't work either because what if the mutation changes it to x &gt; 10? It might be the case that that test should still pass but you wouldn't know without checking the code.
Why not run it at the corefx repo?
Right, so you also need to check that the opposite thing happens when x = 20. Otherwise it could be the case that the x = 21 behaviour always happens regardless of x
I agree but that doesn't change the fact that this is an issue. Also I'd be really interested in how this handles mutation of complex objects, as objects are more likely to still pass unit testing if you change just one thing on them. You also rarely use operators on them but instead call methods, so you can't simply change the operator.
Ok, I'll check then. Thanks.
Interesting -- thanks!
Dude, I'm ridiculously happy right now that I stumbled over your library - having implemented a similar thing (DSL to expression compiler) before, it's really nice to be able to look at someone else's code and compare the approaches taken.
Cool, glad it’s helpful in some way, it seems to have gotten a decent bit of use and helped a few people. Was also fun to learn about expression trees and how LINQ works under the hood.
Forget the source code, for on the APIs. https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbproviderfactory?view=netframework-4.8
Blogspam stolen from https://blog.paranoidcoding.com/2019/04/08/string-vs-String-is-not-about-style.html
Also extremely important question: what technology are you using? That and some architecture idea changes the answer significantly. Wpf using mvvm? Winforms? Do you want to know as they type or only when they're done? How do you know when they're done? Start with a specification of what you want.
The Razor pages reminds me of php and old asp Pages, where the code is all jumbled together. At least with MVC there was a slight separation, albeit thin.
Pluralsight is good for more in depth tutorials. The quality kinda depends on who creates the course though.
I have found debugging to be hard with mediatR. How are you handling debugging and how do you know which handlers are going to be hit without doing a manual search for handlers being used?
Not this shit again.
I'm seriously impressed with your implementation! My library is a huge mess in comparison ... Would you be open to a PR that enables resolution of custom search properties (i.e., if a `Field` is referenced that don't exist on the entity, a callback is invoked that can then return an `Expression&lt;Func&lt;T, bool&gt;&gt;` to be used)?
Seems like this is an old out of date article. He mentions Structs but not readonly structs, nor does he mention the read only collections, IReadOnlyList/IReadOnlyCollection/and one more I’m forgetting. These things have been implemented to make Immunity easier to manage.
Learnxinyminutes.com/csharp
OVH
https://github.com/EdwinVW/pitstop
ConfigureAwait(false) is one of the two best practices to use to avoid deadlocks; the other is to never block on async calls and use async all the way instead. You need to use both. The article states this very, very clearly. The example code I gave specifically showed a situation where using ConfigureAwait(false) would not help to prevent a deadlock, because the thread was being blocked further upstream. Even if you are using async all the way, never blocking a thread, and using ConfigureAwait(false) everywhere in your own code you might still encounter a deadlock in some 3rd party library written by someone who doesn't know what the best practices for avoiding deadlocks in async code are.
👍
I think we're likely in agreement, so i'm not sure what we're arguing about. We both agree that `ConfigureAwait(false)` does not prevent deadlocks; you stated this yourself with your example where it does not work. Perhaps our disagreement is over my opinion that `ConfigureAwait(false)` is not a tool for preventing deadlocks?
Would 96% coverage work? It's with xUnit and .NET Standard 2.0. (check LaraUI.com)
Okay, thankfully, I think that we're in agreement. I was being very specific in saying "avoid deadlocks" rather than "prevent deadlocks" precisely because there are no guarantees that deadlocks won't occur in code you don't control. And I 100% agree that the default behaviour should not have been ConfigureAwait(true).
You do not need TFS or any other software to simply host nuget packages. You can just put your nuget packages into a network share and put the path of that share into your nuget sources in Visual Studio.
WPF becomes open source, doesn‘t it? Avalonia tries to be WPF, interest is there for this, it‘s highly likely even if MS isn‘t porting WPF, the community will, and if, chances are big microsoft will pick that project up. I say the chances are very big that we will see WPF on linux and osx in the future
Me too.
So wait, we want mutation testing to fail?
[Here](https://archive.codeplex.com/?p=enterprise) is a medium-sized project that has 100% unit test coverage. It's an older project, but should still run fine.
The number of downvotes this post has shows how poorly understood these concepts are.
Thanks very much, it was fun to put together. Sure I’d be open to it as long as it can be implemented in a non-breaking change way. Sounds like it could be an interesting addition though!
Microsoft has already said they won't accept any changes around porting WPF to other platforms... and they own the repo, so fork away and try to convince people to put effort into your fork.
But *who tests the test tester*?
Removed: Rule 7, plagiarism.
Not really, its just loosing the "Core" distinguisher at the next major version after 3.0 and becoming ".NET 5.0"
I introduced the CQRS pattern at my current place of employment and I can already tell you, it's easy for people to try to take it and run with it full tilt. CQRS, like all patterns, should be used as they are needed, and some patterns will be useful more often than others. CQRS is usually not something people should be using so often. &amp;#x200B; So, one thing to consider about CQRS is that it is not mutually exclusive from a repository pattern. The repository pattern is not compulsorily a read \*\*and\*\* write pattern. You could use a repository to manage the query portion of CQRS. &amp;#x200B; Now, as to why you would want to use CQRS, one of the reasons we've done it is because there are some portions of our applications or APIs that use multiple data sources for the read, but only a single source for the write. The repository conceals the fact that we might be communicating with a reporting database for the read, or perhaps part from a transaction SQL database, part from a document store, and part still from a Redis cache. Meanwhile, the writes can go to both a fast cache and also to a queue or enterprise bus for eventual consistency, depending on the needs of the service. The business logic of the code looks very neat, of course. It uses repository interfaces for each of its aggregate roots and a command broadcaster for its writes, and is oblivious to how we've changed our data storage strategies. &amp;#x200B; But the example I gave you, while real, is not how you want all your applications or services to work. Where possible, writing to a database should be as simple as possible, and if a company is using CQRS for something that could be handled by a simpler repository pattern, then its really just giving itself more complexity than it needs to.
If you want a giant repo to give your tool a workout, there's tens of thousands of tests in [Roslyn](https://github.com/dotnet/roslyn).
That's pretty awesome, it's cool that they're able to leverage the Blazor work for client-side execution of snippets.
Possible, yes, but god-awful slow.
Service Locator is a bad design because I don't want to have to go looking for something, I want them given to me.
Very nice!
I'm confused on your intent. Is the picture box supposed to move periodically or only be in a different spot each time the form is instantiated?
You cano host nuget package in any iis server. Just use nuget.server from microsoft. It creates an asp.net application for your purpose
Yay! Something I can answer! I’m a distributed systems software engineer. This isn’t an easy question to answer. Distributed systems is a large topic and it has many meanings. The simplest form is when you take any workload and share it amongst multiple computers. Big data pipelines are a great example of this. Basically something like front door does basic authorization and validation of incoming data and that forwards off to a scrubber. Scrubber pulls PII out of the payload and forwards it to an extractor service. Extractor service extracts (surprise!) some data and forwards the data off to one service (say a time series database) and the raw data to another (say an indexing service like ElasticSearch). Some resources to look at are: Spark, Kafka, Hadoop, Scribe, HBase, GFS (Google File System), pretty much anything in Azure like Tables, Scuba, Gorilla, BigTable etc I chose most of those because 1) they are easy to find white papers on, and 2) the white papers are currently sitting on my desk at work...
Yeah, that's perfect. You had 754 mutations and 426 of them survived which gives you a mutation score of 43%. Here is a link if you want to see each specific mutation that survived: https://ufile.io/1y07ss5g
Yeah 96% coverage is really good (is it really anyone that manage to get 100%?). Will run it later and give you the result!
I now know what I did wrong. I tried to encapsulate the textbox from the MainWindow, instead of encapsulating it in the class and from the MainWindow, then sending the textbox.Text value to the public string. I will send what i mean later.
There is a difference between asynchronous and concurrent. Concurrent is doing lots of things at once, async is doing stuff potentially a little out of order. Imagine a cafe with a kitchen. A customer enters and goes up to the counter: Synchronous : there is 1 member of staff. They take the order at the counter. They as ask for beans on toast and a coffee. The staff member starts the order. They place the toast in the toaster and wait until it pops up, then butter it. They check the order again, next is beans so they then go and place the beans in the microwave and watch and wait until they are done. Again they go back and check the order, next is coffee so they then put the coffee on and again wait until it brews. When it is all done they bring over the food to the customer. Asynchronous: there is still 1 member of staff. They take the order. Again beans on toast and a coffee. The staff member heads over and puts the toast on, but no butter until it's done remember. They don't wait though they immediately go back to the order and see what is next, it's the beans. So they put the beans in the microwave, press go and then again back to order to see what's next, it's coffee. So they put the coffee on, all the while the beans and the toast or being cooked. As each one completes they then return back, when the toast is complete the staff member then butters is. Then takes the complete order to the customer. Concurrent(without async): there are 4 members of staff. The first staff member takes the order, beans on toast and a coffee. The first staff member, tells staff member 1 to make toast, staff member 2 to make beans and staff member 3 to make coffee. Each one watches and waits for the particular job and only comes back when it's complete. Concurrent (with async): same as above but each staff member returns back to the first staff member while there job is being done by the toast/microwave/coffee pot to see if they can do anything else. They only return to the toaster/microwave/coffee pot when they are done. I've rehashed an example I read somewhere I can't remember where the though (I think maybe an O'Reilly book on async) so I can't take credit for the analogy (just credit for typing it out on my phone ;) ) I remember it really helped me grasp what was happening. The thing to note is in this analogy staff members are threads. The toaster/microwave/coffee pot are network calls or File system I/O calls. If there was work to be done that took a thread then yeah, you could palm that off to a back room member of staff (a worker thread) and have them tell you when they are done. But you can stand there and wait for them to do that or you can go off and do something else until they are done. This is analogous to doing async programming with CPU bound work. In that scenario you do need another thread. In the async example, the toast can't be buttered until it's done. This is the analogy of using await in a method and then doing something with the result. At the point of awaiting we don't block. We just return back to the calling method and let it continue if it wants (or it can await and control is returned back to its calling method, etc etc). It's not until the toaster alerts the staff member it is done (ping!) That they then return and butter it. But still remember 1 member of staff. I'm not an expert and I'm also not a writer so sorry if this it isn't clear. This article is a great one and if you read nothing if my ramblings at least read this by Stephen Cleary https://blog.stephencleary.com/2013/11/there-is-no-thread.html
Trust me, I've googled that shit for hours. The problem was that i did setup everything correctly in the code. The problem was that i put the code in the wrong place. I will link a hastebin later with the code.
&gt; Anything else? Things like clients / things that run as services with small interfaces - examples: Dropbox, Bitdefender etc
Yes, but Closed XML only deals with Excel sheets, does not deal with Word. ClosedXML is fantastic for working with excel. I love it. [(nuget)](https://www.nuget.org/packages?q=closedxml)
I'm curious about how much this matters, so bear with me. Don't get me wrong, I'm really impressed they can keep squeezing more performance out of the framework Performance measurements in the Microsoft article seems to be all in nanoseconds, which converts 1000000 ns to 1 ms. --- **Example from their benchmarks** *[ Method | Toolchain | Mean | Converted to ms ]* IndexOf | netcoreapp2.1 | 12.828 ns | 0.000012828 ms IndexOf | netcoreapp3.0 | 4.504 ns | 0.000004504 ms --- Thus, a difference of 0.000008324ms for this particular kind of operation. Are these differences not so small as to not matter? Or is it simply a question of all the operations adding up to actually make this a big deal?
I'll be playing with this over the weekend for sure. I like the idea of building an interactive slide deck for presentations.
It's a feature that was added in TFS 2017 according to the [release notes](https://docs.microsoft.com/en-us/visualstudio/releasenotes/tfs2017-relnotes#package). Microsoft's documentation sums up [a couple of alternatives](https://docs.microsoft.com/en-us/nuget/hosting-packages/overview).
Thx !! Dont know why i missed this. Cheers!
More testing, less debugging. But it’s possible to have code write a ‘report’ of registered handlers and the MediatR pipeline, and its possible to use both the pipeline and the IOC help out adding tracing. But truth be told: I use the debugger less and less the older I get...
Although it is true to some extent, the max execution time for functions is \~5 minutes as far as i know. While loading web api from assembly takes literally milliseconds. [https://buildazure.com/2017/08/17/azure-functions-extend-execution-timeout-past-5-minutes/](https://buildazure.com/2017/08/17/azure-functions-extend-execution-timeout-past-5-minutes/)
More testing, less debugging. But it’s possible to have code write a ‘report’ of registered handlers and the MediatR pipeline, and its possible to use both the pipeline and the IOC help out adding tracing. But truth be told: I use the debugger less and less the older I get...
Easy, just insert Handler in the same file or class as query or command
Not my projects but have solid tests. https://github.com/ppy/osu https://github.com/ppy/osu-framework
You still didnt say any solid reason of it being bad code Anyway there's already opinion on that by ms &gt;This is a convenience. However, it risks a syntactic conflict with other potential futures, especially "non-local returns" (allowing a lambda to return from its enclosing method) and "block expressions" (allowing statements inside expressions). While we can imagine syntaxes for those that do not conflict, we don't want to limit the design space for them at this point, at least not for a feature that is merely "nice to have". &gt;Also, while we've been talking about this in analogy with throw expressions, that isn't quite right. throw is a dynamic effect, whereas return, break and continue are statically bound control transfers with a specific target.
Distributed computing simply means having more than one "computer" working cooperatively on some greater task. &amp;#x200B; "Computer" becomes a bit tricky to define. It used to mean computer, then we had virtual computers, so still technically a distinct computer, but many of them running on one huge computer. Now we have containerisation, which is a bit like virtual computers, but optimised so you can deploy the whole virtual machine instead of installing things on a virtual machine. Have a look at Docker for info on containerisation. Really the take away should be that a "computer" is something that can run software and has a network address. &amp;#x200B; Next, you have to understand scaling. You can scale software up, or out. When you write a new bit of software you probably run it all on one computer. If it becomes popular you might add more ram or more disk, or a faster processor. That is scaling "up". At some point you hit a limit for up, so you start scaling out. This means adding extra computers and spread the software across them. They talk to each other, so this is distribution. The fun bit is how they communicate. You probably already do this, if you have, for example SQL Server running on one machine and your web site on another. Or perhaps you use Redis to coordinate session data so your five web servers can all respond to any one user's requests. &amp;#x200B; There are many technologies that help with distrubution, [u/Kamilon](https://www.reddit.com/user/Kamilon/) listed some good ones, but there are loads. You can usually categorise them into a few categories. I'll be saying "many" a lot here, "many" means "1 or more". PubSub (Publish Subscribe) - This means one computer sends a message and it is delivered to many computers who have subscribed to that type of message. By "one computer", it can be any and all computers, but the principle is the same. It sends a message to many subscribers. This is great for notifying lots of services that something has happened. Messages are pushed to the subscribers, so they don't have to keep asking if there are messages waiting. Message Queues. Similar to pubsub, except many publishers put messages on a queue and then many computers can take the messages off the queue. Sounds the same, but when there are 10 subscribers, a message will only go to which ever subscriber requests it first. Each message only goes to one subscriber. This is great for situations where you want to load balance the processing of "things". Imagine you have 100 users submitting complex mathematical queries. They all go into one queue and a hundred computers each take one and process it until the queue is empty. Next you have RPC (Remote Procedure Call). Imagine you have a class and in that class is a method that uses Math.Max. The method calls Math.Max and uses the result. RPC simply means that Math.Max is on a remote computer, but otherwise it works the same way. The remote computer might actually be many computers hidden behind a load balancer, but it looks the same. You might hear this sort of thing described as lambda's or microservices. Akka sort of falls into this category. Next you have clustering. This is where a set of the same applications (Redis for example) are installed on multiple computers and they communicate with each other specifically to replicate data. It uses all the above techniques, but has a specific goal of ensuring that if one computer breaks, the software continues to run. When the machine is fixed, it will get back up to speed quickly. &amp;#x200B; That's a sort of bird's eye view. I've got to run otherwise I'd dig into it a bit more, do ask questions if anything isn't clear :)
Just posted my code. Can you help me to review and see any issue with my code?
Just posted my code. Can you help me to review and see any issue with my code?
Just posted my code. Can you help me to review and see any issue with my code?
Done. Can you help me to review my code?
Just posted my code. Can you help me to review and see any issue with my code?
Bump. Updated with my codes
You probably need to change the console code page. It's not Unicode by default. You might also want to play with the new [Windows Terminal](https://github.com/microsoft/Terminal). It should have much better Unicode support (including emoji!) out of the box.
You got 122 mutations and 49 of them survived which gives you a mutation score of 56%. As you may have guess I had to disable your selenium tests as they take to long time to run so that may affect the result a bit. I also had a funny problem that FileVersionInfo.GetVersionInfo() that you called in ClientLibraryHandler gave me null as file version.. so I changed it just to get passed that. But here is your detailed result: https://ufile.io/fa1hzsrv
Yeah 200 mutations is a pretty small project as you said. The big ones have a lot more. But here is a couple of examples on how long it can take (from the projects I ran in this thread): - 232 mutations: "ExecutionTime":"00:15:34.7680473" - 781 mutations: "ExecutionTime":"00:17:53.8234710" - 122 mutations: "ExecutionTime":"00:02:44.6982004" I run all those with 5 instances in parallel. So it depends a lot on your test (how many you have and how long time it take to execute). The compilation/moving files usually go pretty quick.
Let's see. So in your example all the different mutations that would happen is: public int GetZero(int arg) =&gt; arg &lt; 0 ? 0 : GetZero(arg-1); public int GetZero(int arg) =&gt; arg &gt; 0 ? 0 : GetZero(arg-1); public int GetZero(int arg) =&gt; arg &lt;= 0 ? 0 : GetZero(arg+1); But none of them would change the outcome so it would be bad surviving mutations. That's one of problem that we see sometimes, i.e. that we change the logic so it take a different path through the code but I still end up with the same output. That is why it take a bit of manual work to look through mutations.
If you create a mutation you want the unit tests to fail. Failed unit tests means that you recognize changes in logic (which normally also would mean updated tests).
You got 136 mutations and of those 36 mutations survived (so 73% mutation score). A list of all the mutations that survived: https://ufile.io/t16kyhqh
Hi again! Ok so i resolved the issue. how i solved it was to just having one main "UdpClient", to use for receiving and sending from. &amp;#x200B; So for the server, initiate the server with a port ( UdpClient receiver = new UdpClient(PORT\_NUMBER); ) You use the "receiver" to receive from clients and send to clients. &amp;#x200B; Then for the client part, the code i made was this private IPAddress ip; private static UdpClient client; private Thread udpThread; private int serverPort = 54321; public void Start() { ip = IPAddress.Parse("Server IP"); client = new UdpClient(new IPEndPoint(IPAddress.Any, 0)); udpThread = new Thread(new ThreadStart(ReadMessage)) { IsBackground = true }; udpThread.Start(); SendUDP(string.Format("Joined_{0}", "Grumfy")); } private void ReadMessage() { while (true) { try { IPEndPoint IPEP = null; byte[] data = client.Receive(ref IPEP); string message = Encoding.ASCII.GetString(data); // With message now, you can log, via Debug.log(message) or //Console.WriteLine(message). } catch { } } } public void SendUDP(string message) { client.Send(Encoding.ASCII.GetBytes(message), message.Length, new IPEndPoint(ip, serverPort)); } &amp;#x200B; Fun part is that the client code, can be easily be remade into server, by making the main UdpClient bind to a port and letting the clients send to the servers public ip and the binded port, then you can store the ipendpoints from incoming data, in a Dictionary and then later via a command or a button send data toward the connection you are willing to.
I can take a look into it tomorrow.
Thank you. I'll check out the new terminal and try to save myself hours of grief.😊
Looks like you more a less copied [This, which was posted as a video to r/dotnet yesterday. ](https://www.twilio.com/blog/2017/03/google-spreadsheets-and-net-core.html) all your vars are the same names lol.
Just be wary: it's in a super early state right now. There should be an official preview release in June or July. If you're just playing around right now, you might want to either skip the Unicode stuff or use something like ConsoleZ in the meantime.
If you read this article again you'll find the reference as well.
Because it's C++, not C#.
Sorry, friend linked me here, completely went over my head that it was C++, ty
In my line of work I'll easily have my staff spend well over an hour to save 1 ms in certain operations. Some of our methods will be executed hundreds of millions (if not billions) of times so even saving fractions of milliseconds is meaningful of scales like this. I totally agree that for most UI focused apps that saving 1 or 2 ms is probably not valuable but in my circumstance we can save hours of processing time.
Thanks a lot.
Guess will do that while starting to read a book or so to complement my process.
Any recommendations for good creators? Pluralsight is always a nice option with the free time from my.visualstudio.com!
Actually the latter two would blow up some unit tests by stackoverflowexceptions
SQL Lite DB works great for small, simple apps like yours probably is. There shouldn't be any issues at all
Actually you could manipulate the IL directly and save compilation time I guess. Or are you doing that already?
Exactly this. There is one Handler in the same class as the request. When i need to go there from the controller its just an F12 on the Request class
https://github.com/SnowflakePowered/snowflake I've got a medium sized project with 88% code coverage, I wonder what you can pick up from here.
distributed computing architectures allow you to scale horizontally, meaning more instances of services that share the load. as compared to scaling vertically, meaning computing power (i.e. hardware). in the context of asp.net, this would most likely mean a micro service architecture. where each micro service can be scaled as needed and communicate with each other. things like domain driven design, cqrs, event/message based communication, and caching play a large role because they keep the architecture clean and/or scale-able.
That was my first thought but I think it have some drawbacks: - It's harder! It would take more time to learn and Roslyn are so easy to use. - It's harder to present the mutations. I think people prefer to look at real mutated code instead of IL mutations. Another thought I had was to run all mutations in memory but sadly most testing framework want dlls and it just didn't work out.
Very interesting results. Looking at the mutations I do get ideas of things that could be broken, and possible wrecks that the tests won't catch. I have no idea why the ClientLibraryHandler was giving you null. What is a good mutation score, have you seen above 80%?
Did you add ConfigureAwait(false) to your awaits?
How about just checking for pre-existing files before you start your watcher?
Thank you very much for your thorough explanation and examples of how these systems communicate. So would nodejs APIs count as distributed computing since they usually spawned multiple instances and handles requests through load balancer(s)? Also are there any examples of these systems I can look at on github?
You're welcome, it's a 101 overview really, there are other variations, nature always finds a way :) Node and proxies is a good example. You have multiple node instances which form a cluster, there's even a module for clustering. Then in front of them will be the load balancing proxy, nginx or similar. And beyond that, the browser, or something else consuming its content. There are a load of newer technologies which specialise in doing something we used to have to do with more atomic components, so it's worth looking at things like Elastic and Kafka for example. Pretty much everything is in GitHub :) [https://github.com/apache](All the apache projects like Kafka) [https://github.com/microsoft/dotnet](Microsoft's Dotnet repo, contains Orleans, asp.net core, etc) [https://github.com/akkadotnet/akka.net](Akka.net, it's an actor framework which is another interesting take on distributed computing) [https://github.com/rabbitmq/rabbitmq-server](Rabbit MQ pubsub) [https://github.com/grpc/grpc](Google RPC - new hotness) [https://github.com/elastic/elasticsearch](Elastic search) [Redis](https://github.com/antirez/redis) and many more ! :)
Thanks! I'll try to grab that and give it a go. I appreciate it.
I tried it but it didn't solve the issue. Same observation like i mentioned in my first post. I even tried to wrote a new console app with only a few lines of codes below that call the web api directly. &gt; using(HttpClient client = new HttpClient()) &gt; using(HttpResponseMessage response = await client.GetAsync("http://myserver:9000").ConfigureAwait(false)) &gt; { &gt; if (response.IsSuccessStatusCode) &gt; Console.WriteLine("Success"); &gt; else &gt; Console.WriteLine("Fail"); &gt; } I'm still seeing the same issue when i tried to run it repeatedly. Out of 20-30 call there will be one time it fail. I'm starting to think that this might be related to network issue. What's your thought?
4. On .NET Framework, Span&lt;T&gt; is pretty consistently moderately slower than pointer stuff (though it still tends to be pretty fast). In .NET Core, Span&lt;T&gt; can match pointer speed in some cases (and the number of those cases grows with each update). Code written using it though can quite easily be substantially faster - because you keep memory &amp; type safety, it encourages experimentation &amp; optimization beyond what you might feel reasonable with unsafe pointer stuff.
I hear "use async all the way" a lot as a magical tonic for curing all async ills. Maybe I'm ignorant, but the problem here is `Main()` terminates the application when it stops executing. How does "async all the way" solve this? I know that in some newer versions of some frameworks, `async Main` is supported, but IIRC this was a very sticky problem for console apps that want to do something async beforehand. I'd like to see an implementation that works here, with code, rather than platitudes. I'm working on it myself but I'm not sold on my own answer and it's not complete enough to post yet.
Hi. This is a great start! But I don't think I should forget the source code, because this is turning out to be very interesting. For example, I see that MS decided to make this an abstract class and this has been another area that is not clear to me. My default understanding is that if you could provide some base implementation code, then abstract class is recommended. But in this case, these are only method signatures. https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/Common/DbProviderFactory.cs
Async main is supported as long as you have selected C# version 7.1 or higher in the project's compilation settings; you can target as far back as .NET 4.5. Before C# 7.1 came along and allowed async Main methods, your options were a bit more limited, I agree, but you could e.g. use Task.Run or Task.Factory.StartNew to kick off the async part, and then wait on some sort of semaphore in the synchronous Main method to block until a shutdown signal was raised.
Double-clicking on most Winforms controls will generate an event handler in your code-behind (the class that contains the C# *you* write for the control like a form, user control, etc.). The event handler hat gets generated will be for the most common event for that specific control (i.e `Click` for buttons, `TextChanged` for textbox, `Load` for forms and user controls, etc.). Inside the event handler method that was generated, is where you do this: Domain = txtDomain.Text; Your `Domain` property should look like this: public string Domain { get; set; } // this is a simpler way to write a property that is ONLY getting and/or setting the value of the same field The `TextBox.TextChanged` event is only fired if the value of `Textbox.Text` has been updated by the UI (note: this event isn't fired repeatedly as the user is entering in input). The `Textbox.Text` is only updated from the value shown in the UI when **focus has left the textbox** (i.e user selects a different control, tabs out of the control, or has on some way "left" the textbox). You could also do this for your `Domain` property: public string Domain { get =&gt; txtDomain.Text; set =&gt; txtDomain.Text = value; } Then, in the event handler for the `TextChanged` event, you can do something with your `Domain` property: private void txtDomain_TextChanged(object sender, EventArgs e) { MessageBox.Show($"Domain has changed to '{Domain}'.", "Domain Changed", MessageBoxButtons.Ok, MessageBoxIcon.Information); // or whatever }
Can you connect to your server on port 9000 using a browser?
Yes.
The use of Blazor really is quite a nice gesture. It's pretty nice to see MS already using it on their products, and this looks like a nice way to play with new APIs from the docs without having to fire up Linq pad or any editor. Definitely will be playing around with this myself as well to see how it fares.
This is gonna be really nice for interactive "code snippet" exams questions or lectures for universities too i'd bet.
I learned to avoid FileSystemWatcher in all situations exept maybe an UI where an user can press a refresh button. Which calls a method that actually list all files in the folder, like: System.Io.Directory.EnumerateFiles() So instead of silly missing events, you can worry about problems like what happens to the watcher watching a directory if the directory is deleted?
Thanks for the perspective. So it is about it adding up when the things start to scale.
Can you go further into the complexity side of the argument against? Are we talking about the fact that there are more classes with specific responsibilities, or the fact that we have to rethink how we make changes in a system, or something else?
Yeah when I wrote the post I hadn't spent a lot of time looking at this specific bit of code. There's a lot of badness going on at the bottom of the call stack, and it's tangled enough I'm having trouble making a hypothesis for why it doesn't cancel quickly. I was suspicious the `Wait()` at the top of the stack was the culprit here but I'm no longer convinced about it. But that's the only part where I think "async all the way" or `ConfigureAwait()` has anything to do with this problem. Nothing in the code that `awaits` should be trying to grab the same context as `Main()`. Frankly I'd like to know why the code doesn't work but I suspect the problem is more related to the mistakes that led to double-await calls. See if you can spot the errors!
I don't know if I can completely explain why your code deadlocks. Sometimes, with async, the mess is bad enough it's easier to write it again correctly than it is to deduce what the broken code was doing. And it is a mess. That's OK! It took me more than 5 years of writing Task-based code to start figuring out what didn't work. It took me even longer to find things that worked. I think the TAP is one of the worst pits of failure .NET has. So it's not embarassing to fall in. Let's start by talking about why we use `async/await`. I don't think it's being used properly, and I don't think it's necessarily true that it's proper to use it here. The main thing MS advertises about `await` is "it makes asynchronous code easier". If that were true, then there wouldn't be 1,000 blog articles about hot to avoid its pits of failure. What *is* true is writing code using `await` can allow you to write asynchronous code that is as easy to follow as synchronous code. The pattern where `await` really shines is when you have a method that looks like this: public async Task WhenToUseAsync() { var initialData = SetUpTheCall(); // This takes too long to do on the UI thread, do it async. var results = await DoSomethingAsync(initialData); // We are back on the UI thread, UpdateUi(results); } I mention the UI thread a lot and it makes people mad, but it's because this is the only context in which it's 100% obvious if you use `await` wrong. The symptoms of abusing it on the UI thread range from "the application freezes sometimes" to "the application crashes". In a console application, you don't have a UI thread, and what `await` does is not as intuitive. So I like to talk about `await` from a UI context to help set up why it's not so useful in others. Here's the thing. For everything but `void`, which is special and requires its own essay, we have two ways to write a function signature. An HTTP request is basically "an asynchronous thing that returns a string". We can write that as EITHER: * `Task&lt;string&gt; GetSomething()` * `async string GetSomething()` When your return type is `async T`, the compiler rewrites it to be `Task&lt;T&gt;`. Now, let's look at your lowest-level signature: public static async Task&lt;HttpResponseMessage&gt; MakeRestCall(... That's returning `async Task&lt;HttpResponseMessage&gt;`, which the compiler rewrites to `async Task&lt;Task&lt;HttpResponseMessage&gt;&gt;`. Oops! That's why your last line looks fishy. You should never `return await SomeAsyncMethod()`. That async method already presumably returns the right `Task&lt;T&gt;`, so `return await SomeAsyncMethod()` is only valid if you want to return `Task&lt;Task&lt;T&gt;&gt;`. That is almost never correct. This continued in `IsVisionServerOnline()`, which is why you had to `return await await Task.Run(...` Don't do that! There's never a good reason to double-await. It's always a sign you got your type signatures messed up! Other than that, I don't know precisely what causes the code to fail. It *looks* right. My suspicion is that `HttpClient` and cancellation tokens don't work like we want them to. There's probably some point at which it's not going to respond if the cancellation token is cancelled, and it probably gets that far before your cancellation timeout. I don't *know this to be true*, but it seems reasonable. We can outclever that. I'm going to write a different post with my answer so there's a clean slate. I felt it was important to start with, "This isn't how `async` works, don't do it this way."
We usually run on small commits so I'm not sure. But don't think I have seen better than 70-75%.
Any code low in the stack that affects millions of applications across hours and hours of runtime is a big deal. Don’t think of the difference in ms, think of it in ratios. A dot Net Core 3.0 program running nonstop just processing text and running IndexOf operations all day long would be able to process roughly 3x as much data as the same program running on Core 2.1 due to that seemingly insignificant change.
Want a challenge? https://github.com/Egodystonic/Atomics
It looks like this is happening in a UI, WPF/Winforms. When you start the Watcher its on the main UI thread. I'm guessing that when ReadFromFolder is called its blocking the UI thread, and prevents the events from the watcher from being processed since its on the same thread. If I had to guess, that after the ReadFromFolder is finished the other processes will be consumed?
The code shows that you are new to async/await, because you should never use `.Wait()` or `.ContinueWith()`. Here’s the first video that helped me truly understand how async/await works. I highly recommend setting aside 45 minutes to watch it. https://www.youtube.com/watch?v=yyT6dSjq-nE
Removed: Spam.
Removed: Rule 3.
Here are some histories over the past few days before i wrote the original post. The code i posted is part of library that is use by a WinForm project, therefore i make use of awaits in my code. Particularly the MakeRestCall method that is used by many part of the project. I found out this issue during test in production environment, the user interface deadlock for 2 minutes before it became responsive again. To troubleshoot, i remove the UI factor and wrote a console app to call the problematic library, this is where i narrowed down the issue to SendAsync in MakeRestCall method. I was able to replicate the 2 minute deadlock in console. However, i can only replicate this on that particular production machine, and it only happens once over 20-30 execution of the console app. Tried it on my development machines as well but no deadlock observed. Today i tried to make my console app code simple enough with only one await. Code below: &gt; using(HttpClient client = new HttpClient()) &gt; using(HttpResponseMessage response = await client.GetAsync("http://myserver:9000")) &gt; { &gt; if (response.IsSuccessStatusCode) &gt; Console.WriteLine("Success"); &gt; else &gt; Console.WriteLine("Fail"); &gt; } Tried to run it on same production machine. Unfortunately, the deadlock still happened. Same observation if i use ConfigureAwait(false), .Result option for GetAsync. This kinda suggest to me that there is another factor at play here, probably await is not the root cause. Google search suggests that there might be port exhaustion issue on the machine. By the way, my production machine did have a lot of port being used based on netstat and it is calling other web services periodically. I'm still looking for ways to test that theory. Do you think i should go to this direction to find out the cause? What is your thought?
If you're seeing port exhaustion this might be an avenue to try: https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/ MS really did a bad job with HttpClient. It's an instance class, but every instance shares static state and registers its own static state. So if you make a lot of instances, even if you're Disposing them properly, they leave some junk lingering around. So it's better to make one instance and reuse it, but that causes OTHER problems. I've never found a great way to use it.
It makes sense, I think I was probably not thinking big enough.
maybe this https://github.com/dotnet-architecture/eShopOnContainers
I did found the same link you shared on Google. In an attempt to proof my production machine encounter port exhaustion issue. I decided to run a quick and dirty test. To simplify, I reuse the same console app with simple await GetAsync code. Before the HttpClient call, i add in a few lines of code that use TcpClient, manually call the same web service and print out the response. When i run the modified console app, it will show me the response from TcpClient "200 OK" as well as response from HttpClient. By right the TcpClient and HttpClient will use different port to connect to the web service. If port exhaustion issue exists, either TcpClient will fail to receive response or HttpClient will fail. I wrote a batch file to repeatedly execute the console app with 2 seconds delay in between. The result: 1. TcpClient received "200 OK" response all the time. 2. HttpClient failed sometimes with 2 minutes deadlock. 3. During the 2 minutes time frame when HttpClient experience deadlock, i immediately run another instance of same console app to see the response. Turns out that the other instance also experience deadlock for HttpClient, no issue on TcpClient. After that 2 minutes time frame, all instance able to run properly without deadlock for some time until the issue hit again. Based on the observation above, can i conclude that port exhaustion issue exists on that production machine? When i run another instance of the same console app, HttpClient should be using another port to connect to web service, in theory it should be able to connect to web service without issue but it experience deadlock instead. What do you think?
It has its uses. It's absolutely essential to me. Though deletion of said directory would render my application completely inoperational, so fairly indifferent to what would happen in said case ;)
In console apps, it is generally safe to block the process at the top level. Part of the reason why is because there isn't a synchronization context that can cause deadlocks. The other reason is that something eventually have to block the main process or thread so the CPU can execute the Task continuation. In ASP.NET, UWP, etc. this is hidden to the developer, but in a console app, developers are ultimately responsible for how their application executes. That said, `async Main` is supports in C# 7.1, as /u/wazzamatazz stated. &gt; I hear "use async all the way" a lot as a magical tonic for curing all async ills. Using async top-to-bottom isn't cure-all for async problems; it's the safest and most effective way to write async code. It's repeated ad infinitum because it's best practice.
Sure! Well, to start, yes, the number of classes (and also interfaces, since CQRS inherently adds clearer differences that would be subject to the Interface Segregation Principle). More classes is not inherently a bad thing, but generally, if you're using a repository pattern that is truly treated as a collection of domain entities, it's just really simple to use in your code. &amp;#x200B; With CQRS, you will generally see an increase in dependencies added throughout the code, since you have to consider that the behavior of your entities now generally produce some command. It can also complicate following the end results of commands, since each command could (and in our case, does) have multiple handlers each dealing with their own persistence strategy or technology. This, of course, is one of the powers and flexibility that CQRS affords is and makes significantly easier to manage than trying to shoe-horn into something simpler like a repository pattern, but it's still more moving parts. Instead of just calling \`interface.Add()\` and finding the implementation, you can be calling \`commandSender.Send()\` and tracking down the different possible handlers that might be concerned with the command being sent. &amp;#x200B; To be clear, I am absolutely not advocating NOT using CQRS, I'm just advocating using it only when it's going to make life easier. As I've mentioned, we have real-life examples in which we're very happy to be using the pattern, and then there's other times when it's just like, both the query and command handlers and literally talking to the exact same EF context and with no other data sources. WHY are we adding so many moving pieces to our app for this? &amp;#x200B; That's my perspective.
Does the application have to be run on the same server that hmail is installed on? I've got the hmail server dll in my project, but theres no where to set the mail server/ip address at that I can find in it, and the example vba scrips on their website say they need to be run on the server so Im not super sure about that ether.
That depends on whether or not you're using exception handling, logging, notifications...
I don't know about TFS but what I usually do either create an empty Web project and install NuGet.Server package on it. Or try ProGet https://inedo.com/ProGet
Thanks for taking the time to write that!
I wish I had selected an easier to spell username.
Hello I am trying to use QmlNet on Mac OSX 10.14.5 and when running the example provided on the main github page i get an exception at this line: &amp;#x200B; using (var app = new QGuiApplication(args)) The Exception: An unhandled exception of type 'System.TypeInitializationException' occurred in Qml.Net.dll: 'The type initializer for 'Qml.Net.Internal.Interop' threw an exception.' Inner exceptions found, see $exception in variables window for more details. Innermost exception System.Exception : Library could not be loaded: dlopen(/Users/&lt;username&gt;/.nuget/packages/qml.net.osxbinaries/0.10.1/runtimes/osx-x64/native/libQmlNet.dylib, 2): Library not loaded: @rpath/QtQuickControls2.framework/Versions/5/QtQuickControls2 Referenced from: /Users/&lt;username&gt;/.nuget/packages/qml.net.osxbinaries/0.10.1/runtimes/osx-x64/native/libQmlNet.dylib Reason: image not found: /Users/&lt;username&gt;/.nuget/packages/qml.net.osxbinaries/0.10.1/runtimes/osx-x64/native/libQmlNet.dylib at NetNativeLibLoader.Loader.UnixPlatformLoader.LoadLibrary(String path, SymbolFlag flags) at Qml.Net.Internal.Interop..cctor() Any advice as to what the problem is? This is my first time using Qt and QML related tools so I am not familiar with what is going wrong.
Good question. The reason you should perfer an abstract base class in this case is that you can later add new methods. A serious problem with C# 7 is that adding methods to an interface is a breaking change. And there are methods we really want to add to IDBDataReader and IDBCommand such as ExecuteAsync.
That was before, but since 2018.1 Unity includes a modern runtime compatible with .NET Standard 2.0. More info: https://blogs.unity3d.com/es/2018/03/28/updated-scripting-runtime-in-unity-2018-1-what-does-the-future-hold/
Ahh, now I understand. Fair approach, do you ever get around to nuking the now redundant code if the release is successful? How is that managed? I suffer no end at the moment because of long lost config.
Isn't it still a Mono backend? Mono 5.4 supports NET standard 2.0
It is Mono, but it's no longer old. They've updated it.
Lazy&lt;T&gt; is amazing for caching as the delegate will only run once, guaranteed by the framework code. &amp;#x200B; And woot there is already a cache wrapper [LazyCache](https://github.com/alastairtree/LazyCache) which works really well. &amp;#x200B; Overall a very good article on the basics of caching though.
You have misunderstood what `ValueMember` and `DisplayMember` actually do https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.listcontrol.valuemember
My favorite part of CQRS is the idempotency. It makes process managers with discrete idempotent steps much easier to implement, it's an incredibly powerful feature.
Look at your local variables when debugging. Under Me -&gt; lbname -&gt; items, there should be all of the properties of that listbox. I believe you’d want lbname.items.SelectedValue.
I'm proud that comments like this one appear under our article. This is the strength of the community. Thanks for your engagement!
And thank you for your article! I shared it in our Slack immediately on seeing it.
Ok, I assume that the hash contains both the passphrase and the initialization vector. What I have been doing is passing in the AES key/hash into the function bc I thought AESManaged.Key was for a hash instead of a password. Is there a parameter or class that I can use that way I can decrypt the bytes straight from the hash? I don't know the IV or whatever else the hash is derived from so using the hash is my best bet.
In simple cases, where you have one request = one handler, this can work. But some times you’ll want to decouple more. Have multiple different handlers for the same kind of request depending on settings or situation. Or you want to provide handlers from another assembly.
Python is more used in GNU/Linux and MacOS. Do you use F# as well as C#?
It is not so hard to write a task or windows service that 1) periodically snapshots a directory (and persists it) 2) compares the new snapshot to the old one 3) executes delegates when there are changes and optionally 4) check that the delegates process the file.
Ah, this is perfect. I was on the right track but referencing it incorrectly. Thank you! I'll post my finished code once I sit down this evening and write it.
What is wrong with this nickname :) ?
I think browser benchmarks are to blame some as well. Modern Javascript engines kick ass at benchmarks, but the major browser companies got so hyperfocused on hacking their scores that they didn't produce a Javascript engine that is well equipped to tackle realistic workloads. That + crappy sites is bad news bears.
Third-person-singular: it should be `JavaSucks`
JavaSucks.WaitForGood(); ?
Setting `Console.InputEncoding` and `Console.OutputEncoding` to `Encoding.Unicode` should do the trick
This actually worked on two different machines. When I had them set to Encoding.UTF8 I got unpredictable results. Thank you.
Just publish application as a exe then you don't need to do dotnet fdd.dll
If I understand correctly, that would require me to make a seperate build for every OS
Ok but doing it the way you want requires people to install dotnet core on their computers before they can run your application. The issue you are running into with the bat files is because dotnet core is not installed on whatever computer your trying to do this on.
In Soviet Russia Java suck you.
That makes sense, I guess I'll just publish with an EXE.
Thanks for sharing.
I personally think no one can fully prepare for a technical interview as questions could be anything. I still remember this particular interview, I am confident using C# Sets and Dictionary and exactly know where to use each of them. But when they start asking me interracial logic I couldn't answer some specific question. I know in the Dictionary must have some sort of hash function for for key value pair matching and if there is collision there are few remedies it can use. I wasn't sure if Set is sorted or not but I know that most collection are unsorted unless it's specified. However they were more interested in those question. The implementation difference of both collection. The funny thing is I had video coding interview before going on-site interview. That day after interview I felt I know nothing.
Look at msix or clickonce since you're going that route.
Explain your situation you might be solving b instead of a
Explain your situation you might be solving b instead of a
Not sure what send keys has to do with this, but you could just continuously read from stdin and write it to the file via a file stream.
unsure about creating a mediasource, but you could try creating a loopback audio device, playing whatever audio service you want to on that, and then capturing that and potentially convert it to a mediasource?
Wouldn’t need to be there anyway. Just because you publish, you still need the runtime.
Hi everyone! My friends and I are fairly new to coding and we/I was looking for tips or some help. We are doing a school project involving coding and we plan to create a game similar to the dinosaur web browser game (I dont know the exact name) using Unity. We plan to make the sprites using photoshop, the only program we are proficient in, other than we are fairly new to C# and coding in general. I was looking for maybe where to start, what to do and what commands to use, like how to program a jump mechanic or a punch mechanic. It really means a lot to us and all help is appreciated. Thank you and Godspeed :)
Hi everyone! My friends and I are fairly new to coding and we/I was looking for tips or some help. We are doing a school project involving coding and we plan to create a game similar to the dinosaur web browser game (I dont know the exact name) using Unity. We plan to make the sprites using photoshop, the only program we are proficient in, other than we are fairly new to C# and coding in general. I was looking for maybe where to start, what to do and what commands to use, like how to program a jump mechanic or a punch mechanic. It really means a lot to us and all help is appreciated. Thank you and Godspeed :)
Hi everyone! My friends and I are fairly new to coding and we/I was looking for tips or some help. We are doing a school project involving coding and we plan to create a game similar to the dinosaur web browser game (I dont know the exact name) using Unity. We plan to make the sprites using photoshop, the only program we are proficient in, other than we are fairly new to C# and coding in general. I was looking for maybe where to start, what to do and what commands to use, like how to program a jump mechanic or a punch mechanic. It really means a lot to us and all help is appreciated. Thank you and Godspeed :)
Hi everyone! My friends and I are fairly new to coding and we/I was looking for tips or some help. We are doing a school project involving coding and we plan to create a game similar to the dinosaur web browser game (I dont know the exact name) using Unity. We plan to make the sprites using photoshop, the only program we are proficient in, other than we are fairly new to C# and coding in general. I was looking for maybe where to start, what to do and what commands to use, like how to program a jump mechanic or a punch mechanic. It really means a lot to us and all help is appreciated. Thank you and Godspeed :)
Hi everyone! My friends and I are fairly new to coding and we/I was looking for tips or some help. We are doing a school project involving coding and we plan to create a game similar to the dinosaur web browser game (I dont know the exact name) using Unity. We plan to make the sprites using photoshop, the only program we are proficient in, other than we are fairly new to C# and coding in general. I was looking for maybe where to start, what to do and what commands to use, like how to program a jump mechanic or a punch mechanic. It really means a lot to us and all help is appreciated. Thank you and Godspeed :)
String mystring = Console.ReadLine();
What exactly are you trying to do? Console.Readline() will capture everything the user has entered into th console and give it you as a string. To can then write this to file. Does that fit your requirements?
Or do it as a self contained app.
A lot of mutations in your repo so took a while. But you had 2015 mutations and 1233 survived which gives you a mutation score of 38%. Here is a list of all mutations: https://ufile.io/efe2am27
I tried to open the project but got a lot of errors around MSTest. So I installed the MSTest nuget but still got a lot of errors on other stuff :( So think I skip that one.
I tried to build your project but got this error: "Error reading resource 'Snowflake.stone.dist.json'". Could not find the file anywhere either, any idea?
`string.Contains` checks if a string is part of the string. In our example `"chicken internet"` is not part of `"chicken pencil hand water internet"`. If you want to check if every word of a string is within another string, then you need to take care of this yourself. You can use `string.Split` to get an array of words from your string, then iterate over this array and check if each word is part of your string using `string.Contains`.
The string.Contains(string s) works by itterating over the current string in search for the passed string 's'. For it to return "true" when passed "chicken internet" it'd have to contain it, not "chicken" and "internet". Hopefully you get where I'm going. It works with "hand water" because the string "chicken pencil **hand water** internet" contains the phrase in its entirety, not parts of it. Think of string.Contains() implementation as dragging a piece of paper along another piece of paper looking for what is written on the first piece of paper on the second. Another analysis (though probably a bad one) would be trying to fit a cube through a triangular-shaped hole. Yes, you CAN cut the cube to make it fit, but you want to fit the cube entirely.
Thank you! I'll look into string.Split.
Thank you! They are good analogies.
https://github.com/thangchung/awesome-dotnet-core#sample-projects
I've been learning c# for nearly a year and am always looking for ways to learn in my downtime, the 2 resources I've found that have helped are the codingblocks. Net podcast and some of the udemy courses when they're on special, being able to download both at home and consume later is a benefit, (some of the udemy courses are on YouTube, look for courses by mosh)
Tim Corey's YouTube channel is great.
There's course aplenty. Just google, [search YouTube](https://www.youtube.com/results?search_query=c%23+course). And check out this subreddit's sidebar, there are links there as well
Definitely one of the best ways to learn is to watch Brendan Enricks videos on [Youtube](https://www.youtube.com/channel/UCA8TsqMrOdFBv66iIuU6efA/featured) or you can also watch him live on [Twitch](https://www.twitch.tv/devchatter).
https://youtu.be/C8jkJs47NGQ
Awesome! What kind of feedback would be most helpful to you (if any)? At first glance, the first 60 or so are the only ones I'd care about; the rest isn't my code (zlib stuff) or is from examples which aren't tested.
If you're willing to pay, then pluralsight
how about reading the keys that are being inputed into a game and writing them to a txt file?
I started with YouTube watching #codegasm with Barnacules Nerdgasm. After learning from him I watched the Microsoft University for C# and dove into all I could find from there. I eventually ended up in Udemy. I'm enjoying all I am learning, even the repeated info as it just gets reinforce. Yeah, YouTube is the best way to start.
MVC is an architectural pattern and it's applied on the application level. Distributed architecture is something applied on the system's (or infrastructural) level. For example you can have an MVC app serving frontend content as a part of microservice system but you can use it with a monolithic architecture as well. You can combine MVC and CQRS. MVC is how you structure your frontend part of the application. There's a [C]ontroller accepting requests, fetching the [M]odel and serving it in to a [V]iew. ASP.NET MVC is a part of the ASP.NET framework it borrows the name from the MVC which is an abstract pattern. ASP.NET allows for other patterns as well. What CQRS (Content Query Responsibility Separation) means is that you have separate application parts (pipelines) for saving and for reading the model. In the write (command) pipeline the input goes through the domain layer, it is processed according to the business logic stored there and persisted afterwards. This guarantees that the persistent data is consistent, doesn't break the business logic rules. The read (query) pipeline goes through whatever is useful, can be a read model (some unified model for reading the data) but it can even query the database directly. Since the persisted data is consistent thanks to the command pipeline we can query it in any desirable way. CQRS is an additional complexity for the application but helps with aspects such as scalability and fetching data in a shape that fits the frontend requirements (we might not need the whole User instance, we may only need username when listing all the registered users). The classic approach would only use the business objects both for querying and writing the data. Much simpler, less flexible. You might want to check out [Azure Architecture Center](https://docs.microsoft.com/en-us/azure/architecture/) if you want to read about the cloud (Azure) architecture - on an infrastructural level.
If you have time to listen to podcasts, I recommend DotNetRocks! It’s refreshing and you get the chance to stay on top of what’s going on the community! If you want to read a book that is going to change how you approach C#, I recommend C# in depth by Jon skeet! You don’t have to be an expert to learn from him, but definitely go back on this book when you have more experience to learn again from this resource. I’ve been leveraging .NET since 2014 and I can tell you that when I read that book in 2015, i learned a LOT! Then I went back to the book to prepare from interview questions for either gigs or internships and it’s shows when you’re being asked C# questions. Now, there’s a fourth edition out and when I learned that he was writing it, I pre-ordered the book as soon as I heard about it! You shall not regret buying this!
What do you want explained? Syntax? Debugging? What you can do with C#? Etc... please add some specificity if you would like better answers
MVC is an architectural pattern and it's applied on the application level. Distributed architecture is something applied on the system's (or infrastructural) level. For example you can have an MVC app serving frontend content as a part of a microservice system but you can use it with a monolithic architecture as well. You can combine MVC and CQRS. MVC is how you structure your frontend part of the application. There's a [C]ontroller accepting requests, fetching the [M]odel and serving it in to a [V]iew. ASP.NET MVC is a part of the ASP.NET framework it borrows the name from the MVC which is an abstract pattern. ASP.NET allows for other patterns as well. What CQRS (Content Query Responsibility Separation) means is that you have separate application parts (pipelines) for saving and for reading the model. In the write (command) pipeline the input goes through the domain layer, it is processed according to the business logic stored there and persisted afterwards. This guarantees that the persisted data is consistent, doesn't break the business logic rules. The read (query) pipeline goes through whatever is useful, can be a read model (some unified model for reading the data) but it can even query the database directly. Since the persisted data is consistent thanks to the command pipeline we can query it in any desirable way. CQRS is an additional complexity for the application but helps with aspects such as scalability and fetching data in a shape that fits the frontend requirements (we might not need the whole User instance, we may only need username when listing all the registered users). The classic approach would only use the business objects both for querying and writing the data. Much simpler, less flexible. You might want to check out Azure Architecture Center if you want to read about the cloud (Azure) architecture - on an infrastructural level. Both application and system architecture are vast subjects, it's good to focus on one and have a knowledge of the other, at least at the beginner/intermediate level. The developer has to be good with the application architecture, systems/platform engineer has to be skilled with infrastructure. Say when writing an app you want to know how to structure the code so it's clean and maintainable, well tested. You want to know how to put in in the cloud, what are the options in general, how that influences the application from a developer point of view. You might want to know how to do a simple deploy of the app in the cloud. What storage to use and where it's at in the cloud. If you're a platform engineer you want to know how to structure systems consisting of many applications collaborating, what are the building blocks of the cloud, how to guarantee resiliency, scalability, availability. How to automate stuff - deploys, alerts &amp; handling failures, etc.
Tim coreys
framework and core are just different things that run your c# code. the apis they support are almost identical now. you dont need to learn one or the other, .net core just supports more operating systems and generally performs better. asp.net is a set of web development libraries mono is another thing that runs c# and can target even more platforms like android, ios etc. just keep learning programming and dont worry about the other stuff. codingame is another fun website.
+1 for codegasm. Had to teach one of my friends C# so I pointed him to codegasm for the basics. Jerry really knows how to make stuff interesting. He’s also an ex-Microsoft employee.
Do you mean the virtual academy from Microsoft? I couldn't find anything which is actually called Microsoft University.
AngelSix on YouTube. Check out his playlists. He has an ongoing WPF series, and many general c# learning videos. If you want to learn how to develop an application, definitely check him out.
Just need to init the submodules `$ git submodule sync --recursive`
Pluralsight is a good resource. I personally got started with [Bob Tabor's course on MVA](https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169). It was a lifesaver! It got me into software test automation with Selenium and ultimately launched me into some web development on the side as well.
Yes, my bad, the Microsoft Virtual Academy. They closed the website down, but I think you can still find the videos on YouTube. It's long, it's boring, but it is done by a Microsoft developer, and he hits a lot of key points.
I really like programmingwithmosh.Com a lot of his courses are paid on Udemy, but he has free ones too.
I agree, l wish he would do more videos on C#. He has around 10 or so. He has a game on the Android store called Quick Splat if you want to see an example of his work. He's a good guy. Never met him. But I like his teachings.
 &gt; It's long, it's boring, ... done by a Microsoft developer As all good enterprise grade LOB code is.
Mosh hamedadi i belive isbthe name , he have good courses for c# ! Im currently learning xamarin from him !
I am not sure if any of this will help you, but I have an open source project called Random Shuffler that is part of the Data Juggler Shared Repo on GitHub. &amp;#x200B; [https://github.com/DataJuggler/SharedRepo](https://github.com/DataJuggler/SharedRepo) &amp;#x200B; This shared repo contains all my open source projects, so if you want any of the projects you have to clone / download them all, and I have already been criticized for this. &amp;#x200B; That being said, the repo is all free and contains a lot of great code, one of them being Random Shuffler: &amp;#x200B; [https://github.com/DataJuggler/SharedRepo/tree/master/Core/RandomShuffler/RandomShuffler](https://github.com/DataJuggler/SharedRepo/tree/master/Core/RandomShuffler/RandomShuffler) &amp;#x200B; Random Shuffler does true shuffling and contains built in methods for cards including number of decks and also integers for dice games and other uses. &amp;#x200B; I use the file RandomShuffler.cs in simulations because it evenly distributes values and has built in reshuffle routines if you reach the reshuffle minimum level (hence the little plastic card a dealer inserts into the chute to know when they have to reshuffle). &amp;#x200B; [https://github.com/DataJuggler/SharedRepo/blob/master/Core/RandomShuffler/RandomShuffler/RandomShuffler.cs](https://github.com/DataJuggler/SharedRepo/blob/master/Core/RandomShuffler/RandomShuffler/RandomShuffler.cs) &amp;#x200B; There is also a sample project I started called Card Counter, that is about 15% finished: [https://github.com/DataJuggler/SharedRepo/tree/master/Core/RandomShuffler/Samples/CardCounter](https://github.com/DataJuggler/SharedRepo/tree/master/Core/RandomShuffler/Samples/CardCounter) &amp;#x200B; This is a program I started when I lived in a casino town, but I moved before I finished. Card Counter was designed to help you practice card counting with about 8 different card counting systems, but the program messes up after the first player's prompt (hit, double down, etc). &amp;#x200B; A lot of the interaction with players / computer players needs to be redone, but I spent a lot of time getting the chip images and card images and table so you might find it worth the price of free. &amp;#x200B; Card Counter is a Windows Form app so you would have to modify Visual Studio for Windows Desktop development if you didn't choose that option when you installed. &amp;#x200B; Let me know if it helps anyone. &amp;#x200B; Corby
Wow thank you so much! That's amazing. I actually competed the game but I'll definitely look into that! Again thank you so much
Giraffe academy do a great course on c# definitely worth having a look into
I’ll second this because Codingblocks is a great learning resource.
You are welcome. My code was dying on my hard drive unused, so if it helps anyone that is why I posted.
I've been working on a Discord bot designed to basically Collect, Tag, Organize and Distribute (uhh, "NSFW Content") . It's main system is basically complete, it's basically set up to be fed specific subreddits, general tags for that subreddit, and collect links to those images. From there it creates a data file named after the full name of the post (in a format like so: t3_xxxxxx) and saves it to individual folders named for each tag, as well as a master list. Users can then either pull straight from the master list or specify a tag. I kind of want to add a system that adds tags based on the content of the image, but I'll save that for later. For now I'm working on a system for reporting, reviewing, and moderating the images so they can be manually sorted, tagged, or deleted without accidentally duplicating the image's data file, as that would make it more likely to be pulled by the system.
Oh and I'm also trying to work on a separate window that can display statistics on graphs, such as the most popular tags, the most active channels, etc. Since the bot itself is a console app it may have to be a seperate app, or a form.
Mosh is always my recommendation.
He's great at demonstrating how to use C# features! I'll also add that he's great at demonstrating OOP concepts and design patterns. His playlist on SOLID is fantastic [https://www.youtube.com/watch?v=5RwhyZnVRS8&amp;list=PLLWMQd6PeGY3ob0Ga6vn1czFZfW6e-FLr](https://www.youtube.com/watch?v=5RwhyZnVRS8&amp;list=PLLWMQd6PeGY3ob0Ga6vn1czFZfW6e-FLr)
+1 that adding a dash before "1000F" automagically sets it to absolute zero
Doing things like this is why people say everyone should study the SOLID principles, practice unit testing, etc. You're right to guess it helps if the project is separated in layers. It is *harder* to do that in WinForms than it is in WPF, but only because WinForms has zero tools to suggest this is even a good idea. (WPF's data binding naturally leads people to try MVVM, which naturally leads to less coupling. Similarly, in ASP your HTML and logic are usually separated by necessity.) It will be next to impossible if your WinForms code is strongly coupled to your logic. In fact, if "strong coupling" describes your project pretty much all is lost. It will always be faster to start over than figure out how to sort out strongly coupled code. What is strongly coupled code? It's what most people write before they learn better. Typical strongly coupled code looks like this: public void Button35_Click(...) { string connectionString = String.Format("blah={0}", txtUsername.Text); using (var dbConnection = new WhateverDbConnection(connectionString)) { dbConnection.Open(); // about 10 more lines of DB setup while (reader.Read()) { // about 30 lines to convert rows to objects } } foreach (var customer in customers) { // ... 50+ lines to convert objects into Data Grid rows, etc. } } What's going on here is this code mixes up EVERYTHING into one big method. Connecting to the database won't work unless the form has a specific control. There's usually 5 or 6 other things that only exist as form inputs. When the time to display results happens, it's done via Windows Forms controls that must exist. Code like this is very hard to make usable outside of its form. Even when writing WinForms apps, it's best to separate the UI parts of your code from the logic part of your code. Worse, since everything is done in giant methods, it's hard to figure out exactly what each one does. Throw in some form-level fields to maintain state between functions and again, it's just easier to start over than try to port it. So what's good code look like? Well, anything that isn't "get input from the form" or "display output on the form" goes somewhere else. So like, the imaginary code to build the connection string? It doesn't need a text box. It needs a string. So the form itself might have code like this: public void WhenGetCustomersIsClicked(...) { var customerDatabase = new CustomerDatabase(txtUsername.Text); var customers = customerDatabase.GetAll(); foreach (var customer in customers) { AddCustomer(customer); } } So I'm still using the TextBox here, but it's being fed to a class that looks something like this: public class CustomerDatabase { private string _username; public CustomerDatabase(string username) { _username = username; } public Customer[] GetAll() { var connectionString = ... // database code } ... } Doing this has *decoupled* the data access logic from the form. Now the only thing the database access code needs is whatever the `Customer` class is and a string that represents the user name. That means in an ASP .NET project where maybe your user's name is stored in a cookie, you can still use this! public void MagicAspMethod() { var username = GetUsernameFromCookie(); var customerDatabase = new CustomerDatabase(username); var customers = customerDatabase.GetAll(); ... } Obviously, implementing applications this way can make it feel more complicated. That's why people who use these patterns (it's called "Presentation Model" and takes the form of patterns like MVC and MVVM!) also tend to use tools like "IoC containers" to help glue everything together. Anyway, the right way to look at a form is "it's just a display". Think about the instrument cluster in a car. The car is going to output its speed along a cable. The instrument cluster could have an analog or digital speedometer in thousands of potential different styles. But the car doesn't have to know which speedometer it has, it only needs to say "this is how I report my speed". That's what your forms should be: nothing but logic to convert data into a display or to convert user input into commands. The rest of your application should know nothing at all about your GUI. This is easiest to do if you make a different library, that makes it easier to share, too. If you don't reference Windows Forms or WPF, you can't accidentally couple your UI to your logic, can you? One decent tip to do this is to write your new features in a console application first. That has no UI to rely on, so you can't accidentally do it. So, I don't know where your code sits on the spectrum, but if it's not decoupled you need to decouple it. The book *Working Effectively with Legacy Code* is almost entirely about that process. As a bonus, it focuses on helping you design your code to be tested with unit tests, which is much easier in decoupled code. Other books that might be useful are *Clean Code*, *Agile Patterns, Principles, and Practices in C#*, *The Art of Unit Testing*, and several others you can find recommended by people interested in testable design.
This is probably the closest to what you're looking for: https://demos.telerik.com/aspnet-mvc/grid
I have been using telerik too. But is there another way let say with the newer front end framework like react, angular etc?
Just build a HTML table with some buttons and post your data to your controllers instead of wiring up server-side OnClick events. Give it nice borders and voila, you have yourself a GridView.
&gt; Is there an easy-to-use cross-platform UI framework that could be used from .net core? No. There are some in works, like Avalonia, but none is production ready.
Noice :) &amp;#x200B; I haven't worked on a Winforms app in a long time, but I loved the tech. We did MVP, but it's long enough ago that I can't remember which of the two MVP patterns we followed :) &amp;#x200B; Great write up, really lovely to see :)
I am looking for anything. Does not have to be production ready. Betas and pre-releases are fine.
Why do you desperately need it?
Well, then.. Avalonia.
Because its for a school project :p
Look up SignalR and you’ll have it in the examples
I saw this when looking through older posts but unfortunetaly I asked my teacher and we are not allowed to use it
You might checkout Blazor or Electron.NET or both https://cooldown.io/topic/16-getting-started-with-blazor-and-electronnet/ I haven't done this myself so I have no idea how feasible it is.
I was afraid it would probably make things a bit too easy. Outside of that, are you allowed to just create a WebSocket server, connect to it and push messages around? Or does it need to be a desktop/console application?
Yeah OK, so a lot of the above is probably familiar. Like I said, all of the patterns trace back to a super-pattern named "Presentation Model". All it says is your app should have UI logic separate from the rest of your logic. The specific patterns like MVC have opinions about how you should separate things and how UI and logic should communicate. I like to think Presentation Model should really be expanded to include 3 parts: the UI, the logic, and the glue that binds them. In MVVM, the "glue" is property binding. In MVC, the "glue" is you make controller classes that mediate between the two layers. There are half a dozen other patterns, but they only difference tends to be a strong opinion about how the glue should be implemented. Anyway, the best way to make logic portable between different UIs is to publish it as a standalone library. If you can write unit tests or a console application that exercises it, it's probably portable.
Use Redis or Kafka.
Im not entirely sure what a Websocket is since its not something we have gone over in the course, but I just looked it up and I dont see why we wouldnt be allowed to use it
Web sockets are basically just tcp connections over the Web. SignalR uses them if available but falls back incase they're not. Web sockets are your best bet otherwise you'll have to use ajax.
Okay thank you! Ill look into this
Electron requires writing a SPA, not sure what experience op has with that but it's not trivial.
Ah okay, yes some courses are pretty nice, like the one from Bob tailer/tailor. It's still up, but only until 10th jun this year so like a moth to go.
I understand how a senior developer can understand code just by looking at it. I am more concerned about the junior team members. Debugging is an essential skill for them to learn. Curious if you have some reference me trial on generating mediatR pipeline.
:) Thumb emoji :)
The instance of that particular FileSystemWatcher get released by the GC.
I want say I’m able to understand code just by looking at it. But I’m very happy every time I find good tests describing how it works :-) Bogard have written several blog posts about MediatR, also about pipelines. Not sure I’ve seen much more than what he has written. Maybe this can help? https://github.com/jbogard/MediatR/wiki/Behaviors
This is helpful. We are not using pipelines at all but I can see how this might be a better approach for us in multiple scenarios.
SPA is a no-go right away. I have Javascript allergies and not enough time.
Pluralsight. They have a path with courses about it. Try out free trial or get 3 month free with Microsoft developer Account which you can sign up for free too
Blazor is all C#. SPA is just a technique for avoiding reload of web pages. How a SPA is implemented is totally independent of the language choice. I am right there with you when it comes to wanting to avoid the JS implementations (angular, react, vue, etc; ). But you do not need to use them since Web assembly has opened up a new way of doing things.
Jeremy Clark is pretty good for expressing tdd and patterns. https://www.youtube.com/user/jeremybytes Also I agree with others that Tim Corey is epic as well.
Just "tried" avalonia a bit. It just does not work out of the box. Instructions say that I only need VS2017 and .net core SDK 2.0 but in reality build complains about missing xamarin stuff, full framework assemblies. That is raw! (Gordon Ramsay voice here)
Isn't blazor a part of [ASP.NET](https://ASP.NET) ? I currently have winforms app and converting it to [ASP.NET](https://ASP.NET) would be quite challenging.
Look up entity framework. It can handle all the nitty sql stuff so you don’t have to. You’ll still need to learn quite a bit but there’s lots of tutorials.
Thanks for that.
SOLID KISS, mate! :)
It depends how much data you have and if it needs to be shared and updated by several clients simultaneously. If amount of data is small and only one app is modifying it then storing everything in the file is OK. However my format of choice for serialization would be JSON instead of XML.
Mosh' beginners course on Udemy was excellent
People Rock code on twitch?
Nothing comparable and I don't think it is even possible to have something that packs the same functionality because it would require the ability to pack logic and view together and pass state back to the server. Because components are useful and ASP.NET MVC sucks at components people work around this by using JS grids and wrapping them in helpers. This way they build their components in JS because ASP.NET MVC simply does not support this style of development.
I'd recommend thenewboston on youtube.
Is there any reason not to use Razor? The built in framework for MVC apps?
I agree with this completely. Terrific course, very good instruction.
I made one while back for a course I was taking on Udemy. You can check it out on PlanetSourcecode.com. it is called MeChat. It is a full working version, you can certainly modify it or learn from it as you please.
Are you talking about a keylogger?
[Eto.Forms](https://github.com/picoe/Eto) looks like a perfect fit for your requirements. (Haven't used myself.) &amp;#x200B; [Avalonia](https://github.com/AvaloniaUI/Avalonia) should work as well, I found it stable enough for simpler task. Besides these two, [Uno](https://platform.uno/) comes to my mind as something that may be worth a look.
dotNet rocks was my favorite
Sorry I'm on mobile at the moment and can't write the linq. But what I would suggest is to pull in the data you need from the query and put it in a list. Then just do simple logic operators to check if its been updated. That way you don't need to mess about with linq at all and it will only be noticeably slower if you hitting this end point a lot. In which case this probably isn't the right approach anyway.
My newest (and probably final) version of the program actually has a checkbox that let's you enable or disable going beyond absolute zero.
I'm currently creating a C# Udemy course which will be released this monday. Will be free for some time so come an get it. However its in german so, learn some german before 😉😅
so that brings up an interesting question. is this the right approach. Each time this is called it evaluates 43000 members. It does this hourly to evaluate for changes and to add new members. As it stands it basically stops and starts again.
With 43000 members if its only happening once an hour you're probably fine. Do you have a requirement on the client side for the call to happen within a certain amount of time?
The way I usually use for this is I put the the list from the database into a dictionary&lt;id, model&gt;, and iterate through the list grabbing and comparing: Foreach (var model in apiList) Var oldModel = dbList[model.id]; // not sure if you need to check if it exists If (model.modifiedTime &gt; oldModel.modifiedTime) add to list of changed models Then just push the changed models
I used derekbanas in the past to get me up to speed, mixed with the resources from some of the other mentions in my this thread.
https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet You can optionally use Tensorflow with ML.Net.
&gt; missing xamarin stuff This comes off as odd to me, but should be a simple fix. Just Install or download whatever you are missing.
I said it's not easy-peasy.
Uno prerequisites part is great. They even show which Visual Studio components should be installed. Too bad it is UWP on windows. &amp;#x200B; I wish others would provide more thorough instructions on how to setup the environment from scratch. Now I cannot build Avalonia samples because something is missing (why xamarin??) and Eto.Forms needs some extension that is Visual Studio 2017 only.
https://github.com/qmlnet/qmlnet
This should work out of the box. https://github.com/qmlnet/qmlnet-examples
Check out [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient). Example WPF app [here](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon) shows how to hook up your service layer using Entity Framework. Using AdaptiveClient you can write directly to your db, make an api call, write to a .csv file - whatever you want. AdaptiveClient will inject the right client based on your connection string.
Why don't you just make a temporary file and dump a contents to that, and then read it back when you need it at the end?
&gt; Is there a good concrete formula for defining microservice boundaries in your monolith? One (micro) service (ie: controller) per use case. From an OOP perspective, the "object" modeled by the controller is the use case's business process. source: good results medium-sized org with 2500-table databases + 100ish services.
The controls don't activate until the breakpoint is hit. So the line of code you or a breakpoint on had to execute before the controls will enable
If the code is already running, you can’t step anywhere. It’s running. You either need to hit a breakpoint or tell it to break now and then you can step forward.
Tim Corey's already been mentioned. If you're a complete beginner then this series is good also: https://youtu.be/pSiIHe2uZ2w You might be a little passed it if your already studying it
When I hit break all it says "No compatible code running. The selected debug engine does not support any code executing on the current thread (e.g. only native runtime code is executing). " I have 9 separate classes and I'm trying to see what's happening in a private method inside one of those classes. I'm not really sure where the program ultimately starts within those 9 classes, but I do have a breakpoint at the start and end of the method I'd like to examine.
That’s because it’s at that point running code inside the system itself. Use breakpoints and it will stop when it gets to that part of the code, if it’s properly running the binary.
can you please review the update i put in the post. I handle create and then i also handle updates.
if you get a chance can you please review my update.
Before coming on here to ask I first tried it with a very simple hello world application. I put break points in to test and still the same result. It doesn't seem to stop at my breakpoints. In fact it doesn't seem to do anything at all. Thanks for your input so far.
That’s very weird, unfortunately can’t help more in that case. Would need to see what’s happening to properly know why it’s not breaking in there. Hopefully someone else can give pointers on what to try.
Your best bet is making that Win Forms app work on Mono.
For a solid beginner course check freecodecamp on YouTube . Just search ‘C# tutorial ‘ and it will come up
Avalonia as codebase seems to be stable enough but when people say there is no documentation they are not kidding. I had to ask a question on SO to display a message box.
No problem. You've helped by letting me know that there is something funny going on. I'll do some more digging and I'm sure I'll find a solution one way or another. Thank you.
Had a very quick look and it seems fine, the real test is if it's performing faster now?
If you’re looking to learn, check out The New Boston channel on YouTube.
Try to look at domain driven design (DDD). One of the opinion about microservice boundaries - use bounded context to define your microsrrvice. There are great videos from Eric Evans about this topic.
SQLite with EF
Try using .net standard and porting over whatever code is compatible. Then reference the standard library from ASP.NET Core Web API.
instead of hitting F5, step into your code directly (F11). this will start you on the very first line, and you can see where it goes from there.
I've experienced weirdness debugging Unity C# scripts, https://docs.unity3d.com/Manual/ManagedCodeDebugging.html should help if you haven't found it yet
Great thing that it does not require any additional packages or libraries to run but qml files, signals and models do not look easy.
I'm mostly in ASP.Net Core these days. Here's an example of how to get a [basic grid with paging]( https://www.mikesdotnetting.com/article/328/simple-paging-in-asp-net-core-razor-pages). Microsoft hasn't provided controls as they did with ASP WebForms. Afaik controls like the old datagrid are only available from third parties like Telerik. A recent episode of [DotNetRocks Podcast about .NET Core](https://dotnetrocks.com/?show=1634) has Scott Hunter (guy who runs .NET at Microsoft) and touched on the lack of path forward for WebForms and the direction the frameworks are headed. Cheers.
Worth the money if you really want to learn it. Scott Allan/Allen? Has the best courses imo
They're really good, but their Geekout episodes are awesome.
I'll do my best, you'll need to add your own logic where I miss it but here you go: var pendingDbMembers = _transform.TransformWebServiceMembersToDBmembers(_allMembers); var existingDbMembers = _memberRepository.GetMembers().ToDictionary(x =&gt; x.MemberId); var newDbMembers = new List&lt;Member&gt;(); var membersRequiringUpdate = new List&lt;Member&gt;(); foreach (var member in pendingDbMembers) { if (existingDbMembers.TryGetValue(member.MemberId, out var currentMember)) { if (member.ModifiedTime &gt; currentMember.ModifiedTime { membersRequiredUpdate.Add(member); } } else { newDbMembers.Add(member); } } // Now create or update accordingly for (int i = 0; i &lt; newDbMembers.Count(); i = i + 100) { var partialDbMemberList = (List&lt;Member&gt;)newDbMembers.Skip(i).Take(100); _memberRepository.CreateMemberRange(partialDbMemberList); } for (int i = 0; i &lt; membersRequiringUpdate.Count(); i = i + 100) { var partialDbMemberList = (List&lt;Member&gt;)membersRequiringUpdate.Skip(i).Take(100); _memberRepository.UpdateMembers(partialDbMemberList); } Sorry for bad formatting.
CsharpFritz on Twitch is a good watch. Not always C# but good stuff.
Hi everyone! My friends and I are fairly new to coding and we/I was looking for tips or some help. We are doing a school project involving coding and we plan to create a game similar to the dinosaur web browser game (I dont know the exact name) using Unity. We plan to make the sprites using photoshop, the only program we are proficient in, other than we are fairly new to C# and coding in general. I was looking for maybe where to start, what to do and what commands to use, like how to program a jump mechanic or a punch mechanic. It really means a lot to us and all help is appreciated. Thank you and Godspeed :)
Basically you have to wait for all events that resolve after the document becomes ready. As many processes may be async, the most reliable mechanism might be to put a timer on it and evaluate the DOM after a reasonable length of time (a few seconds). I'd be interested in a more creative solution like placing an intercepter on XHRRequests and waiting for their callbacks to complete perhaps.
I consider DotNetRocks! a required subscription regardless of whether you listen to every episode. For people still learning, codingblocks.net can be kinda fun.
That's weird. I've been using it with .NET Core 2.1 for a while and I have never seen anything related to Xamarin I'm the build. You sure you have the correct workloads in VS and that the .csproj is targeting .NET Core instead of .NET Framework?
Look at IRC
Without looking too hard, in my experience the test frameworks all support async Task as the method signatures being tested so shouldn't need to do anything like that.
Your implementation probably needs another look. Off the top of my head, you could change Assert overloads to just store the fails and if there was a failure to Assert.Fail with the summary. That’s a top of the head solution and other better ones probably exist.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Pos for .Net alternative](https://www.reddit.com/r/dotnet/comments/bqbqdj/pos_for_net_alternative/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
If it's a single user application then what you're doing probably isn't too bad. Like you mention it's probably better to use SQL and a database.
SQL would save you a lot of time. I'm currently working on a C# MVC project and each time I stored data in a document, I found that throwing it into a dB was easier. Plus visual studio allows sql server views so you can manage it real time during testing instead of having to open the document each time.
Look up REST APIs. You should be able to with somewhat ease (perhaps using a tutorial) send an HTTP request from the webpage to a server. &amp;#x200B; Another option you have is to use is to save it locally on the client's machine using the JavaScript LocalStorage API here: [Local Storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)
What about running something like Puppeteer [https://pptr.dev/](https://pptr.dev/) ? That will run headless chrome to execute the page and any interactions you want.
Removed: Rule 3.
Removed: Rule 4. Dive into Unity's learning resources. They have some good tutorials that guide you through making fully fledged projects. Run through some of those and with any luck you'll develop the skills and knowhow to make the dinosaur game. https://learn.unity.com/
How does it compare to NodeJS, PHP, or even Java? I need some data to convince my bosses to migrate C#.
Kestrel is one of the fastest web servers out there. https://www.ageofascent.com/2019/02/04/asp-net-core-saturating-10gbe-at-7-million-requests-per-second/
Asp.net team's benchmark code is on [GitHub](https://github.com/aspnet/benchmarks) with [published results here](https://aka.ms/aspnet/benchmarks)
Awesome. I wonder if .net Core 3 will put it at #1.
 [https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=fortune](https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=fortune) It really depends on what frameworks/ORMs you use, not necessarily the language/runtime. Anything JS related doesn't even show up until #50 on the list. &amp;#x200B; Personally, I think ASP blows the doors off other solutions simply because it's already very popular, whilst some of the other top performers on that list are using very specific performance oriented frameworks that aren't necessarily widely used and adopted. I think ASP has the best of both worlds.
as of .NET Core 2.1, C# was generally about the same as Java, a little faster some times, a little less others. &amp;#x200B; Its been faster than Node/Java for a long time
POS class libraries for overarching .net are few and far between unfortunately. The most you will usually find is libraries catered to specific brands for their hardware. In those cases you'll likely need their common control libraries aside from POS.NET... As far as your question goes, I haven't been able to find anything other than Microsofts solution.
Well that sounds a little nefarious. Speaking of which, this stuff might set off cheat detection in steam and get me banned if I have steam running, right? But I guess in concept, yes a keylogger. But I want to prerecord keys and then resend them to the game so its a bit different from a keylogger in practice. This is a game that has no cheat detection software so its not really going to be observed, no one can see what is happening on this clients side.
Techempower needs to run another benchmark 10-30-18 was a while ago.
If I had to guess it's due to fixing the culture bug on IndexOf that has been causing huge overhead on all internal string calls. Compiled regex IsMatch calls are currently 2-3x faster than the string methods.
Any updates on whether it's "production-ready"? Last I checked Microsoft discouraged people using Kestrel directly and recommended using a reverse-proxy.
A reverse keylogger then. That's a cool project.
They still have verbiage saying that you get better flexibility with a reverse proxy, but its been OK to use Kestrel in production on its own since 2.1: [Hosting and Deployment: Kestrel - When to Use Kestrel with a Reverse Proxy](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2#when-to-use-kestrel-with-a-reverse-proxy) *Either configuration—with or without a reverse proxy server—is a supported hosting configuration for ASP.NET Core 2.1 or later apps that receive requests from the Internet.*
Thanks for your respone. I had the same conclusion after hours and hours of searching.. I hope this gets better with time. Do you think its better to upgrade to POS.NET 1.14.1?
At the moment all top results of that benchmark are topping the test LAN capacity. They are trying to upgrade the machines.
Everytime a new version released always faster than previous one. Why? 1. Because they compare fresh version with previous version of latest updates (with so many huge patches, security update, bugfixes, etc etc...). Once the fresh version reaches a couple of updates, then the performance would be the same or even worse. 2. They add utilization of new instruction of CPU or GPU. In this case, you have to have newer hardware. It looks like a strategy of marketing for you to buy new hardware or software.
Did you read the article? There is a lot of low hanging fruit in addition to a lot of remaining areas to add span to that all add up to some rather large improvements between the two versions. Also 3.0 is simply 2.1 with even \*more\* features/bug fixes/updates etc, it's not like a fresh version made from scratch.
https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/csharp.html
It has been ready to serve directly for a while. Why would you not use a reverse proxy though?
That is interesting; we have been running large projects with millions of request/day on 2.1 for a while and when running the profiler (the VS one or the Linux commandline one), the slow parts always are the regexes; all replaced by IndexOf now and all the slowness is now in the db and Kestrel &amp; mvc overhead. Do you have more info on that bug? Maybe we accidentally did something to not hit it.
Tests in MS Test (and other frameworks) work if you make them async, sssso why not change all the signatures to async Task and go from there? async from top to bottom :)
Oh I see, are the files you don't care about in a different project, directory or where do you put them? Because I have ways to ignore projects so we don't mutate unnecessary code (for example we have a project with generated code that we like to ignore). ' I also just added support for the "ExcludeFromCodeCoverage" attribute so it is possible to ignore code that way. Or is there some other way you would like to ignore them? I think the most important thing is to be able to ignore stuff you don't want.
Now go to the "Json deserialization tab" and you'll see that things arent as great.
Source?
They constantly run them. https://tfb-status.techempower.com/ Most recent results https://www.techempower.com/benchmarks/#section=test&amp;runid=2539a0c7-934c-4eaf-93ed-a1980566cffe
I think that's one of the things I like best about Kestrel - the way it focuses on serving the application and not on any other infrastructure you need to deliver it.
It doesn't have to be ran on the same server. Look up remote COM access. Pretty much, you can access it via IP instead of the local COM reference. https://www.hmailserver.com/documentation/latest/index.php?page=howto_administer_remote https://www.hmailserver.com/forum/viewtopic.php?t=31507
First, why do you think you need microservices? What are the actual issues you're encountering? You mention a few times that you have a database schema as a guide to how entities are used, is the issue database performance issues? &amp;#x200B; There's no specific formula. The entity focused approach sort of works, but you'll find that entities interact and that buggers up your approach. Focus on specific business operations. You're talking about fines (I assume as in give me money type fine), so think about a microservice that allows you to mark a fine as paid. If you think about your application, imagine you wanted to refactor the codebase to be "better" but still in a single process. You might encapsulate certain bits of functionality into a class or set of classes or even a new dll. This isolation is how you start to think about microservices. &amp;#x200B; Also, be very careful about eventual consistency in a domain that sounds like it needs transactional consistency. It's workable but you need to be able to manage failure in a transactional way.
MediatR ain’t no golden hammer. But when you start exploring pipelines/behaviors, it gets a lot more useful. I can sort of understand the people that doesn’t understand what MediatR bring to the table if they have never read the blogposts Bogard has written nor the documentation that is provided. But then again; I’m a doc-junkie. Reading docs for everything just in case I discover something useful...
You need js grids for that.
I have a look. Thanks
Check this link, https://github.com/dotnet/corefx/pull/33051 the files changed and 3.0 milestone is what I am talking about. It called into the wrong culture info, which is my understanding introduced a lot of inefficiencies. And I am surprised to hear that regex was slower for you. I did a lot of benchmarking on 2.1 and 2.2 and my findings are that regex outperform contains and IndexOf so long as the regex is compiled, and the compilation overhead is accounted for. Startup / first run speed will be significantly slower with regex but every execution after that is much faster. The speed benefit depends on the size of the string, a short string shows regex being 2 times faster, while a long string is up tp 5 times faster. Applying word boundary to the regex makes it much faster as well. Benchmark dot net accounts for the first iteration being slower, if you use stopwatches just make sure the regex is warmed up first. I do work on one of the top 20 visited sites in the US, so I benchmark everything in the hotpath like crazy. If you can, I'd love to see a benchmark dot net. Net core 2.1 or 2.2 project where the string methods outperform regex.
[https://github.com/manuc66/JsonSubTypes](https://github.com/manuc66/JsonSubTypes)
**.NET Core 2.2** is *already* faster than **Java 12**, and this benchmark used **Linux** (Ubuntu 19.04) Source: [https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/csharp.html](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/csharp.html)
I was so sure that in this doc was the solution. I had forgotten to attach to unity in the editor. But even that didn't work. It's driving me crazy because I feel that I'm at a complete halt and can't progress with finding a solution for a bug in my project until I find out how to get the debug tool to work.
F11 steps me into the code but I can't progress from there. It doesn't matter where my breakpoints are, if I have no breakpoints or how easy or complex the application is
You could try this in some code you know is running 100%: https://docs.unity3d.com/ScriptReference/Debug.Break.html
&gt;.NET Core 2.2 is already faster than Java 12, and this benchmark used Linux (Ubuntu 19.04) &gt; &gt;Source: https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/csharp.html **.NET Core 2.2** is *already* faster than **Java 12**, and this benchmark used **Linux** (Ubuntu 19.04). Interpreted languages like PHP and Node can't beat the compiled languages like C# and Java, so they don't count. Source: [https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/csharp.html](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/csharp.html)
https://github.com/dotnet/corefx/tree/master/src/Native
I know where the repo is. I am trying to look for resources how all these fit to form the .NET Framework. Diagrams, articles, etc.
Got it, i'll be looking at them. Thank you.
Try Boyer-Moore, probably blow the doors of Contains, IndexOf, and compiled Regex. It does everywhere I've compared in my app (that's serving well over 1B requests per month).
I will dive in and find the cases and analyze them; if you found this then I have no reason to doubt you and I'm sure that the ones I removed were in fact not compiled (is what I am guessing). I never profile/benchmark warmup/startup stuff as it's usually not really relevant (unless it takes minutes in which case I will + fix). I will get back to this soon.
Jesus Christ! Is there an easier way? this requires me to learn a complete new kind of C# application type and rewrite my whole program in this new application. I mean if this is the only way i guess i have no choice but if there is another way please tell me.
The validation is done by whatever is receiving MakePaymentCommand.
CppSharp might be able to do this: https://github.com/mono/CppSharp
Yes, kestrel is prod ready. Since it is a lightweight engine focuses on speed, it lacks some features that others have. https://stackoverflow.com/questions/49997926/is-kestrel-for-asp-net-core-application-production-ready https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2#when-to-use-kestrel-with-a-reverse-proxy
I thought that CppSharp is using libclang internally, isn't it?
No. F# is an odd one. I heard of it being used in financial sector but I haven’t seen it yet.
This seems like a fine solution. My only suggestion would be to make the setter on the Data property private so that only the SeedData class can modify it. Since this is a cache, how do you plan on determining when to update it and when to use the cached data? A little more info about the use case might highlight areas that can be improved.
Idk if this works here, I'm also curious about this answer !RemindMe 3d
I believe it offers more functionality with newer hardware and newer types of things like scanners and the like so it's up to you.
I will be messaging you on [**2019-05-22 13:02:30 UTC**](http://www.wolframalpha.com/input/?i=2019-05-22 13:02:30 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/bqf8cp/parsing_c_code/eo47iqp/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/bqf8cp/parsing_c_code/eo47iqp/]%0A%0ARemindMe! 3d) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
It uses the C++ API, libClang is the C API. There could be a difference in performance there.
Use the MediatR IPipeline interface. Example: http://softdevben.blogspot.com/2017/12/using-mediatr-pipeline-with-fluent.html?m=1
Or this, maybe. https://github.com/migueldeicaza/TensorFlowSharp
You can also take a look at FluentValidation library, you can hook it up straight into MVC pipeline and just call ModelState.IsValid in the controller. You can do all sort of validations via FV, but it really depends whether you want to validate input for stuff like length etc., or you consider checking if invariants of the domain are violated as validation, in which case I personally prefer throwing exception.
&gt; I need some data to convince my bosses to migrate C#. What's the problem you're trying to solve? What's the skillset of the devs in the team? Sure, C# under .NET/.NET Core is stupid fast, but is that actually a problem for your application? Doing a full-up rewrite of your applications to another language, framework, runtime and server is potentially a lot of work, and if you have a team of people who're going to have this as their first .NET Project, then there's certainly going to be some mistakes/problems. "C#/.NET Core is faster" isn't necessarily the only consideration.
Visual Studio is Windows-only. VS code is available for Linux, but that is a text editor not a full IDE.
You could use ANTLR with a C grammar file. All I could find was \[this\]( [https://github.com/antlr/grammars-v4/blob/master/c/C.g4](https://github.com/antlr/grammars-v4/blob/master/c/C.g4)) C11 grammar file though.
Be really careful. I'd recommend you go for at least an intermediate level course. The courses are dumbed down to the lowest common denominator, so you will be bored af if you go entry level. As you have budget, try and get a course that isn't just C# but covers a specific tech. Try something like ASP.NET Core or React with DotNet for example. You will not be stretched, trust me, which is half the problem as you should be.
I 100% agree. I'm lucky enough to get sent on a ton of courses and honestly almost all the courses are very foundational unless described as so. They want to get as many people as possible at the end of the day. Do the research and ensure there are decent prerequisites. Honestly I'd recommend just reading through a decent C# book and then going for an advanced, making the trainer know about things you want more detail on.
 Another approach could be to: 1. Use a MakePaymentDto as argument instead, because you don't know whether it's valid yet 2. Gather the information you need to validate, e.g. with a query/requests through mediator 3. Have the validation logic inside a factory (it may simply be a static "Create" method on the _real_ MakePayment command, which returns a result type with either an error message you can pass on with a BadRequest in the controller or a valid command that you can pass on to mediator. That way the code is honest in the controller, there's no magic decorator/pipeline that your colleagues have to know about and you put validation responsibility where you feel it belongs.
What a second. ASP. NET already implements the mediator pattern as part of it's pipeline. Why are you adding a redundant mediator? Before you go any further, look at how ASP uses attributes and interfaces to support validation. For the vast majority of projects you will be better off using the standard functionality. That said, MediatR isn't useless. Just be sure that you actually have a problem before you ask "will adding this solve the problem?"
You are right. I just cannot figure out how to build it.
&gt; I never profile/benchmark warmup/startup stuff You're using [Benchmark.Net](https://benchmarkdotnet.org/), right? If not you probably should be.
&gt; . NET already implements the mediator pattern as part of it's pipeline Could you elaborate? Are you referring to middleware?
Eager loading and including what you need or lazy loading and having everything available are your two options in EF Core. [https://docs.microsoft.com/en-us/ef/core/querying/related-data](https://docs.microsoft.com/en-us/ef/core/querying/related-data) EF Core doesn't currently have eager loading with derived types, which is what I believe that you're asking for. [https://docs.microsoft.com/en-us/ef/efcore-and-ef6/](https://docs.microsoft.com/en-us/ef/efcore-and-ef6/)
microsoft academy has everything you need for free. Pluralsight is amazing as well, the best resource in my opinion. &amp;#x200B; Courses are just a waste of time. Just start doing things, and when you don't know something go search on the web. Best way to lean IMO
How often is the data from the API updated? Could you load it in to a local database? At that point, you could simple have an external console application run every once in a while to "update" the seed data in your database ... That would allow you to remove the "Seed" data from your code entirely. If that's not an option, there's really nothing wrong with your implementation. You've got a "Wrapper" around a public API. It's a pretty straight-forward and common practice. The only "problem" I could see with loading it in to memory would be the total amount of data. If you're loading years worth of weather data in to memory ... that could be a problem. And also how you "search" upon that data could be a problem as well. Using `.SingleOrDefault()` or `.Where()` LINQ methods to search through millions of records couple possible be problematic.
I get what you're doing and it sounds like you've taken what you know and made it work for you, which is awesome. I would agree with what others have said and look at sql db for this. Your life will be easier in the long run.
Yes, but is is in the preview version of the upcoming release. https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-3.0/features
Just do Derek Banas C# on Youtube! Or IamTimcorey. Or alternatively an open source C# book: K2 Style by Kitamimaki Kei, a japanese dev.
What do you mean you can't progress? That means your code isn't actually getting called at all. I recommend stepping through f11 and f10 to see where the application starts and what it calls. If it is not calling any code you wrote you can at least see where you need to add things. If you can share your code it will be much easier to help
What framework are you running and what version? `Supports .NET Standard 2.0, .NET 2, .NET 3.5, .NET 4, .NET 4.5, Silverlight, Windows Phone and Windows 8 Store`
Yes and no. The purpose of a mediator is to assign a generic message to a specific function using a set of rules. ASP.NET does this by taking HTTP requests and routes them to methods on a Controller. The so called middleware allows you to modify this routing, but one could argue that the routing is built in rather than being actually part of the middleware. But let's us not spilt hairs.
.NET Frameowrk 4.6.1 So are those the supported frameworks by Json.NET ? If so, it seems that Json.Net isn't supported on my version of the framework, correct?
&gt; The purpose of a mediator is to assign a generic message to a specific function using a set of rules The goal of a mediator is to reduce coupling. &gt; With the mediator pattern, communication between objects is encapsulated within a mediator object. Objects no longer communicate directly with each other, but instead communicate through the mediator. This reduces the dependencies between communicating objects, thereby reducing coupling. Ultimately, the goal is to decouple your business code from your web application. This is the goal of the Mediator pattern. And the MediatR library. Rather than putting all of your logic in to the controller. You send a "command" or a "query" (MediatR is commonly paired with the CQRS pattern) and allow someone else to handle the processing for you.
Is `ModelState.IsValid` `false`?
Thank you!
No, it's true; However I don't believe the problem has to do anything with EF. Why are you asking?
4.6.x versions and even 4.7.x are definitely supported by the library. I think it's considered under .net standard (the documentation links to https://github.com/dotnet/standard/blob/master/docs/versions.md - which says 4.6.1 implements .net standard 2.0)
Appreciate all the feedback. I have 2 good guys around me for questions and StackoverFlow seems to have answers to most. I’ll still take a certified course but at an intermediate, as it’s no harm on the CV. I’ll stick with the PluralSight and some other stuff recommended. Thanks all!
When the web api model validation fails, you'll end up with `supportinatorMessage == null` and `ModelState.IsValid == false`.
How can the data validation fail given I haven't added any data annotation properties to the model?
You can get a \*lot\* of help on the official C# discord - [http://aka.ms/csharp-discord](http://aka.ms/csharp-discord) \- ask for @John and I'll say hi
Using an `int` property instead of an `int?` can result in an implicit `[Required]` model validation, depending on the configuration. But this isn't what's happening to you, since the model state is valid.
That's using .NET 2.2, hope it gets updated with .NET 3 preview.
Did you look at Local Storage? Maybe if you can give me more context to what your application works or how it does
Cant think whats causing this , but here is what I'd do 1) run json serialise again , Still fails? 2) run json serialise without the attribute (again) , Still works? 3) run json serialise with the property renamed to "updated\_time" , Still works?
oh yep. actually wanted to post to the java response.
So like a macro system? I can't answer how to do that, but I think that's what that functionality is called, so maybe it's a stepping stone to better research for you =)
It'll use the 4.5 version.
I understood Factory pattern when I had to unit test a piece of code. Inject dependency by providing a factory in constructor and problem solved, now instead of calling the service/database the code calls a mock. Before that factory pattern seemed useless, there was no need to complicate something that could have been solved by simple if/switch statement. Abstract dog/car examples don't carry this information. The dinosaurs are a nice touch and I like how dependency injection is mentioned, but I would much rather see an example of code + unit test testing this code by providing mock factory. I never see such examples in articles about design patterns :(
Who said anything about putting logic in the controller? Look at step 5, that's where the logic lives regardless of whether or not you use MediatR. *** As for "coupling", that's an empty justification. And not just for the reason above. Essentially all you are doing is moving the one line service call from a Controller to a Command. You haven't removed any runtime coupling, the web request is still 100% dependent on the service. The fundamental problem is that you, like so many others, are confusing "indirection" with "decoupling". You erroneously think that if you can't see a dependency at compile time it doesn't exist. But that's simply not true. All you have done is make it hard to reason about the code using your tools. Instead the dependencies have to be carefully mapped by hand.
Also few more c# specific examples would be nice since it's about c#. 1. A simple Func&lt;IDinosaur&gt; is a factory. We can implement it by providint a lambda: () =&gt; new Stegosaurus() 2. We have delegates for simple factories if you want to give a Func a meaningful name.
&gt; the entire tree is loaded without Include(). What? How is this not a performance killer?
&gt; Ultimately, the goal is to decouple your business code from your web application. No, a thousand times no. The ultimate goal is functional software that's fit for purpose. The intermediate goal is to solve a specific problem that interferes with the above goal. Decoupling is a technique that may be used to achieve the intermediate goal. When you start making the use of a technique your ultimate goal, well you have lost your way.
Try changing the data type from DateTime to String. Just to verify if it binds. My guess is not being able to deserialize/serialize properly due to datetime format. Could be wrong though :)
What's wrong with this article. 1. Fake examples rather than something you would use in the real world 2. Completely neglects to mention any real examples from C#. Specifically System.Data, which is as textbook as you can get. 3. Arbitrary shout out to SOLID, even though it has nothing to do with the design pattern. (I swear, it's like a bloody religion)
It would be a performance killer, but it's not true what he said.
&gt;Entity Framework 6 has Eager Loading enabled by default so you don't need to do anything - the entire tree is loaded without Include(). This is not true.
None of these work in C# as `string` cannot be `const`: private const string MAIN_TERMINAL = "ABXX-cSk"; private const string MainTerminal = "ABXX-cSk"; private const string _mainTerminal = "ABXX-cSk"; private const string MAINTERMINAL = "ABXX-ck"; Your `GiftDecorator` looks like a builder instead of a decorator.
They are also working on exposing ValueTask in System.Data, which should help reduce memory allocations.
It's really nice of this person to make the effort to write the blog post, but there's a lot wrong with it. They're obviously quite new since 2nd year apprentice and I applaud the effort to explain something that's quite complicated and it's definitely well written and the idea is communicated effectively but look further into it and don't follow this implementation. I appreciate some of these points might be spurious since the use of dinosaurs is obviously for demonstration, but if the analogy doesn't work you should probably look for a different one. For the noiseProducer classes, they're not unit testable because the factory method is included in the class rather than injected as a dependency so it loses the inversion of control and the noise producer is tightly coupled to the dinosaur type. It also breaks the single responsibility principle because it's responsible for both producing noises and creating dinosaurs which is a strange coupling. If you had to produce a lot of dinosaur noises it'd also be really inefficient to use this as a way of doing it because you'd be constantly creating and losing dinosaurs. Secondly the inheritance is a weird example, why would a stegosaurus noise producer inherit from a t-rex noise producer specifically? This would make the code strange to read and maintain. The makeADinosaur method is virtual so some people might say you can override that method when unit testing but if you have to do that then you're effectively breaking the class under test which removes the point and just demonstrates incorrect design. The abstract factory stuff is better but it's still not overly sensible since the class is stateful meaning that it will be problematic with dependency injection where the class could be used in multiple places across the application. This means if you used scoped or singleton injected abstract factories you'd get weird issues where the factory could produce the wrong type of dinosaur, especially if you have multiple threads. In the abstract factory you'd be better off just passing the enum when you ask for the dinosaur, why have 2 steps? The example using the abstract factory also news up the factory which again means tight coupling and so basically can't be unit tested. Be careful if you're looking at this to learn these patterns, this is quite misleading for real life use.
26/29 is the top score right now :)
If you want to get what I mean - create a console app, load a sophisticated collection of entities with many nested children. Try to loop through every nested collection when you use Lazy Loading. Your app will be too slow with EF Core + Lazy Loading. If you use EF 6 - all of them are eagerly-loaded, and console app finished within a matter of seconds. Because of entire object tree being in RAM. Whereas with Lazy Loading you perform query by query. And that's a performance killer I'm talking about.
Loading the entire tree into memory from the database is a waste of resources. If you are at all concerned about performance then you should definitely stick to the \`Include\` and \`ThenInclude\` functions to eagerly load what you need to.
It is a builder, yes :)
string can be const.
Is it because the API you're retrieving the data from is sending the date in a weird format that can't be deserialized? Before it was ignoring that property because it couldn't find it via the name and so it was just null. Now its found the property but it isn't able to parse it properly and so it's throwing an error in the deserialization process which means that the whole thing fails and you get a null. It might send the date in a weird format if you're talking to a java/PHP API or something in a different language. You might be able to do something like change it from date time to a string and see if that works depending on how the date is being sent over?
All primitive types can.
Well, I've used EF 6 since 2016 and this is the way it works for me. What is not true?
Nevermind, you are right.
I can’t say I understand your ‘MediatR is two steps extra’ argument. For one, why do you pass anything on to a service after MediatR has handled the request already? Most often my handlers doesn’t use any ‘services’. My handler is the ‘service’. When it comes to decoupling, in most cases it’s tru that it still exist a compile time coupling, but that ain’t the point though. The point is how you have to deal with code when times go by. If a controller directly calls some service to execute whatever logic is needed, that code needs to change if you ever need to add or change the functionality. By using a mediator, like MediatR, you can make those changes without touching the existing code. It’s also about where the coupling is defined. If it is defined as direct method calls all over your code, or if you utilize the IOC container for such things. Yes, it makes it a little harder to see every connection in your code just by a glance, but that is a price I’m willing to pay (in some cases) for the win of more flexibility. For the most case, I use tests to reveal how things are connected, but I’ve also made dumps at runtime where the connections and pipelines are complex.
&gt;Fake examples rather than something you would use in the real world The bane of every programming student ever. It was like a brick to the face when I saw how much more complex real-world scenarios are in comparison to the ones we used in school.
Please let me know what's wrong, I see so many Downvotes
if(db.Categories.GetType().GetGenericArguments()[0] == typeof(T)) should work if you know that db.Categories is a generic Type
Let me clarify, "Ultimately, the goal of MediatR (and Mediator) is to decouple your business code from your web application. I'm not sure what you're arguing though? Coupling is a good thing? When you start making the use of a technique for achieve decoupling, you have lost your way? I don't understand. If I use an ORM to decouple from my database? Have I lost my way as well?
Hmm, the problem is not in the initial deserialization of the data. I know that, because I've seen the object being deserialized normally when parsing the data. When I run the debugger and I see a normal, deserialized object. I have this code snippet sending the deserialized objects to my Web API foreach (var post in posts) { var serializedString = JsonConvert.SerializeObject(post); var result = httpClient.PostAsync("http://localhost:50486/api/helloworld/message", new StringContent(serializedString, Encoding.UTF8, "application/json")).Result; } What I'm saying is that each post object is a valid DTO. Could it be the the new StringContent(serializedString, Encoding.UTF8, "application/json") causing the issue?
Alright, will give it a try tommorow and let you know! Thanks for the advice
&gt;Fake examples rather than something you would use in the real world Wait what? You never have to "make a dinosaur noise" and "abstract the creation of a dinosaur"? In _my_ career, I keep running into this problem all the time. If only I had applied the SOLID principles!
&gt;I appreciate some of these points might be spurious since the use of dinosaurs is obviously for demonstration, but if the analogy doesn't work you should probably look for a different one. You really shouldn't use an analogy at all here. Pick a goddamn real-world example you've actually experienced. (Can't think of one? Maybe that's a sign you lack experience and don't have much to teach yet.) Heck, if you're trying to build a game, _maybe_ creating animals of species from 65 million years ago and having them make noises is a real example. But if so, actually provide that context.
I have to declare an interest here because I'm about to recommend my employer, but http://www.qa.con would be able to help you here. I'm a tutor at the company - I've spent several years teaching apprentices but I'm just moving over to a different division where I'll be teaching public courses. Right now, I'm spending time getting to know the courses prior to teaching them. I don't work in sales, and I'm sure the sales team would be able to help more, but I'd recommend the 3 day programming foundations course (language agnostic), followed by the 5 day C# course. Feel free to PM me for more info. Other training companies exist too.
There are ways to do this. But consider, if you haven't already, that this is probably bad software design. If you want methods which behave different according to different types, that is already built into the language and compiler. It's simply two (or more) different methods, or an overload.
It doesn't eager load all navigation properties automatically. If that would be the case, then it could potentially load the **entire** database into memory by loading a single entity. Eager loading in EF6 is performed using the `Include()` method: https://docs.microsoft.com/en-us/ef/ef6/querying/related-data#eagerly-loading
"What is a field? " Question 2 none of th answers are correct
Most of the questions are quite poorly written and the intention is either not clear or the question has no global concensus on style and so is essentially just pot luck whether your particular about is consider "correct" by you
Have you tried hitting your endpoint independently with postman so you can try different ways of doing things? Capture the payload string on the way out of your class by debugging then hit the other API endpoint manually with postman. Try it with null in the datetime field and see if that works, if it does then the issue is that. I don't think the issue is the code sending the request because you've got it working for all the other properties. Your issue occurred specifically after the datetime property started to map properly. This suggests something wrong with that and so you might need a custom serializer or deserializer on one end or the other. You could also add the on error attribute so you could log out any errors on that property https://www.newtonsoft.com/json/help/html/SerializationErrorHandling.htm#OnErrorAttribute
`&lt;T&gt;` is called Generic Type Argument(s). It is only there to tell the compile/runtime/developer what types can be used; they aren't actually the type(s). To explain it another way; you can't check what type a type is, you can only check what type an object is. (Thumb rule, reflection breaks almost any "rule" you put down) &amp;#x200B; Generic type arguments should be constrained to the types you are expecting, and through that will get the lowest level / common properties of the types it is constrained to. For example void SomeMethod&lt;T&gt;(/* params */) where T: B Here T would be treated as B, but any subclass can also be used though you won't see those properties through T. &amp;#x200B; You can constrain with instance types (meaning you can't write `where T: int`, this is because structs can't be inherited), interfaces and special constraints like `new()` (which only allow instance types that have an empty constructor, allows you to do `T()`) or `struct` (which constrains the type parameter to struct types). &amp;#x200B; Hope this helps and apologies if i explained anything in a confusing way, you're welcome to ask away!
Ugh, this was actually something I needed, clicked on the main post and read the article and found it interesting and helpful, thanks... what ruined it is that I saw "oh look comments, maybe an interesting discussion" and all I see if the default male mansplaining: "you should do this blah blah". Why are we men so toxic with women as knowledge sources? (Rhetorical) Damn, regardless, hope you keep the writing up, nice read
Solution: GeckoHtmlElement el = webbrowser.DomDocument.GetElementsByTagName("input").FirstOrDefault(elz =&gt; elz.GetAttribute("type") == "file"); //inpout type file element var fileNames = new IntPtr[1]; fileNames[0] = new Gecko.CustomMarshalers.WStringMarshaler().MarshalManagedToNative(file); //file = path to file you want to upload var domInput = Xpcom.QueryInterface&lt;nsIDOMHTMLInputElement&gt;(el.DOMHtmlElement); domInput.MozSetFileNameArray(fileNames, (uint)fileNames.Length); Marshal.ReleaseComObject(domInput); DomEventArgs ev = webbrowser.Document.CreateEvent("HTMLEvents"); var webEvent = new Event(webbrowser.Window.DomWindow, ev.DomEvent as nsISupports); webEvent.InitEvent("change", true, true); el.GetEventTarget().DispatchEvent(ev); new Gecko.CustomMarshalers.WStringMarshaler().CleanUpNativeData(fileNames[0]); //delete everything
I didn't know this person was a woman, I didn't bother to read her profile. Not a single comment is attacking the author, just the article. Maybe try judging the article for its content instead of for who wrote it.
There was none of that other than in your imagination. I, like seemingly everyone but yourself, didn't even notice it was written by a woman until I read your ridiculous post. I just saw a pretty poorly written article like every one else. I did go back and notice something from the author's profile that does put the article in context and explains a lot about it: &gt; Carmel is a 2nd year apprentice software engineer Yup, sounds just about right after reading that.
These are some good references to use: &amp;#x200B; Video series: [https://www.youtube.com/watch?v=v9ejT8FO-7I&amp;list=PLrhzvIcii6GNjpARdnO4ueTUAVR9eMBpc](https://www.youtube.com/watch?v=v9ejT8FO-7I&amp;list=PLrhzvIcii6GNjpARdnO4ueTUAVR9eMBpc) Website (covers all Gang of Four patterns in .NET): [https://www.dofactory.com/net/design-patterns](https://www.dofactory.com/net/design-patterns) &amp;#x200B; Both of these resources should give you a deeper understanding of how to use/apply these patterns. &amp;#x200B; \-Joshmond
You have to scroll quite far to find out the article is written by a woman, most programming language discussions on the internet tend to be very dismissive like this. When I was undergrad, and I learnt about type classes in Haskell I thought it was the best thing ever and couldn't wait to explain to everyone how perfect Haskell was and how it makes any other programming paradigm obsolete, etc etc. so I agree that people shouldn't be too harsh on the author of this post, but I can understand why they are criticising it.
Do you have a product requirement that you need to support multiple databases? If yes, then using an ORM to abstract away the differences between databases is a good thing. If no, then using the database specfic functionality to improve performance and reduce complexity is preferable. If you haven't asked the question yet and are decoupling solely for the sake of saying that you decoupled it, then you have a design problem.
&gt; My handler is the ‘service’. In my experience that just results in logic being smeared across countless single function classes. Code sharing becomes a nightmare, unless you start throwing in bases classes for your handlers. And that can get out of hand too.
&gt; If a controller directly calls some service to execute whatever logic is needed, that code needs to change if you ever need to add or change the functionality. By using a mediator, like MediatR, you can make those changes without touching the existing code. Bullshit. You are just adding more places that the change potentially has to be made. I have used MediatR enough to know that adding more layers directly increases the amount of crap I need to track.
&gt; Maybe that's a sign you lack experience and don't have much to teach yet. While I agree with the sentiment in general, I have to say I applaud the authors attempt. It's a medieval concept where you have to write a commentary on everything you learn, but I find it to be very effective as a tool for learning.
I don't care about the gender of the author. I don't even care about their experience. If you told me that you created C# and gave me this example I would still call you out on it. It's not a bad first attempt, but the author made some pretty common mistakes that many bloggers could learn from. -- Professional editor for books and technical articles since the late 90's.
Boyer-Moore is used internally by the regular expression writer (see https://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/RegexBoyerMoore.cs). My guess is that if compatible the compiled regex will also use it. So there is probably no point bothering to do the implementation yourself.
&gt; you can't check what type a type is Sure you can. `typeof(T) == typeof(Foo)`
That’s part of reflection. typeof( ) returns an object of type ”Type” which is the reflection type data object. This then goes under ”reflection breaks every thumb rule”
You've skipped your meds again. Stop chestbeating. The examples are fine.
Update will be after .NET Core 3.0 RTM
So what? `typeof` is literally a language and runtime feature and its own reserved keyword. It's not "breaking rules". This distinction is completely silly in my opinion. It's not like reflection is some kind of curse and the mere mention of the word is summoning ancient evils. And mind you, the `new()` constraint you mention boils down to `Activator.CreateInstance()` which is at least as reflection-related as `System.Type` is.
The local bar I frequent has a Family Feud night every Thursday, and they use this janky version made in PowerPoint. So for fun I'm making a new version using WPF, complete with animations, built in automatic scoreboard (they an excel spreadsheet for scoring then manually add up the result), and keyboard shortcuts for revealing answers or showing "X"
It's not chestbeating, it's mentoring. Real world examples are always preferable to abstract ones.
I tried Console.WriteLine(basecost*(Math.Pow(rate,owed)*(Math.Pow(rate,5)-1)/rate -1)); And max = Math.Floor(Math.Log((money* (rate-1))/basecost * Math.Pow(rate,owed)+1)/Math.Log(rate)); But the result are the correct
Removed: Spam. Please review and follow the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
That's a neat concept and I like the humor / character you put into it. :) I'm new too, but I don't see anything wrong. Some error checking would be good though. Neat project,thanks for posting that.
Thanks man
i gotta say that i really like it
Try adding an Enum for Rock, paper, scissors. I would also create a decide winner method to encapsulate that object.
wow, thank you!
okay, cool! ill look into that
Entity framework does support streaming results instead of waiting for the whole batch. That might be a use case to hold you over
A field is a class.variable for storing some data. In msdn docs you will find examples like that
Cute
Good enough! If you learned OOP, you can move game logic into classes, and think about switching input and output sources (GUI for example) without changing anything in the game logic (loose coupling). You can also imagine a player interface and human+computer classes implementing that interface. Happy coding
Generally, I like to keep things out of Main... really doesn't make any difference for something this small, but it's a good principle. It might be overkill for this, but I usually have a separate class that is instantiated and called from Main that has all the logic in it. That way, you don't have to work with static classes. &amp;#x200B; Best practice when comparing strings is to do something like \`string.Equals(playGame, "y", StringComparison.OrdinalIgnoreCase)\` or you can use the extension version if you're sure that your string is not null \`playGame.Equals("y", StringComparison.OrdinalIgnoreCase)\`. &amp;#x200B; If you look at your code, there is a LOT of code duplication. You have the gameChoice if/else tree 3 times, when you really only need it once. If you use an Enum for the types, you could write a method that takes in the player's choice, the game's choice and figure out both the win/lose/draw and the message to display. I highly recommend you try. It'd be a good exercise and it looks like you have all the knowledge to do it. You're using \`\\n\` a lot. Personally, I don't like it. I prefer \`Environment.NewLine\`. It's much easier to read and you don't care if it's Windows/Linux/Whatever. You can also do string interpolation. Start the string with \`$\` and then wrap your variables in curly braces, like \`$" Okay, Are you ready?{Environment.NewLine} "\` Or even better, have the newline in it's own \`Console.WriteLine\` (though WriteLine atomatically appends a new line, so it'd just be an empty string input) Otherwise, input validation is the only functional problem with this code. You're doing a bit of it on the Yes/No, but when making a choice for rock/paper/scissors, you're not. In a real-world app, that'd be a bug. Great first program! Better than Hello World :)
Eh, I only use Environment.NewLine if I'm parsing somebody else's text. A majority of tooling and text editors for windows work just fine with Unix endings, and I'm not trying to propagate Windows' overly aggressive backwards compatibility. Why they still follow a design pattern creates for typewriters I don't know, but if I can ignore it and type fewer characters I will.
Thanks for this comment! I feel like I've learned some new stuff from reading this :)
Yea, enums are rad. Took me forever to stumble across really needing one, and then I was like "jesus why haven't I been using enums all this time?"
It's personal preference... I err on the side of readability vs brevity. I wouldn't start a fight over it though ;) It just stood out to me as I was trying to read the strings
You can also search for unifiedpos and OPOS. These claim to be standards for interfacing hw. Unfortunately, much of the hw has unique gotchas. If I were you, I'd build concrete implementation for a single type of hardware that your target market uses (for example, Epson or HP receipt printer), single barcode scanner mfr, etc. Depending on your market, they may already have existing hardware that they don't want to replace. You could refactor and abstract it later.
I tried to make tricky question,, but I probably overdid it😕 which questions do you find poor?
The `&lt;&gt;` doesn't mean anything, it's just part of the names of those fields. For automatically generated members and types (e.g. for lambda methods), the C# compiler intentionally chooses names which are invalid in C#, so that there can't be any conflicts with user-defined members. It's impossible to (de)compile code containing these names to and from C# without changing the names to be something valid. Alternatively, you can directly edit the IL with tools like dnSpy instead of decompiling the IL to C#.
While I don't think you were "chestbeating", I certainly wouldn't call your comment "mentoring". If mentoring is what you're after you could be a little nicer
Nice app! Maybe create one class for the "Game Host/Presenter" asking the user if they want to play, list the rules of the game etc (this class also prints to screen). And a second class which is the "Game Engine," controlling the game logic, the current state, and passing whoever wins to the presenter. May be overkill for this but it's good to separate ones concern and not tangle different responsibilities.
Make-believe examples are the bane of every programming tutorial. No, I have never had to model the hierarchy of classes to describe vehicles or phones. Just. Stop. Using. Those. I found these design pattern examples some months ago. They're much easier to relate too, even though the language is quite terse and clinical. https://www.notadesigner.com/practical-design-patterns-in-c-abstract-factory/ https://www.notadesigner.com/practical-design-patterns-in-c-factory-method/
I agree with others on the OOP classes. But, even without that level abstraction, one of the best things you can learn is to break apart your code into smaller bits. There are many reasons, most of which only really start to effect you coding a project at any kind of scale, but testability and maintainability are the big 2. If you were looking to take this code to the next level, start refactoring it into functions for each part before learning classes. Try to make each function around only 5 or 6 lines long max. By breaking it up into manageable blocks you may find some insight to organize things a little better. And you could give a go at unit testing with small, single purpose functions. Also try to break up some of the nested conditionals, maybe think of other ways to achieve the same logic structure with less complexity. When I teach new hires on my team, I always tell them every problem takes 3 tries. The first try you probably solved the wrong problem. Second is the right problem the wrong way. Finally after the third refactor you solved the right problem the right way. I forget who came up with that addage, or it's real name, but have found it to be universally true in software engineering. All in all, great work! Any code that executes is a major accomplishment. Just keep plugging away learning new skills and you will learn to make computers do nearly anything!
can I send you a pm?
The giant if/else structure you have could be more concisely written using what's called a Lookup. I'd do some reading up on that and your code will shrink dramatically! Good luck! You did a great job. And it looks like you had a lot of fun. That is honestly the most important thing.
One multiplatform .NET, right?
&gt; If mentoring is what you're after you could be a little nicer Agreed
Yes lets see how this one goes
Github is simple to use when you use there desktop app. Give it a try.
Source control is a pretty big concept for many solo developers
Command line is pretty simple, too. And that's as someone who isn't great with the command line.
Really good work for the first program with no help, keep it up You should look at classes but to start out break things down into methods. I think you need a method for generating the computer choice You should also have a method for evaluating the winner which takes both choices as parameters Consider a do while loop as an alternative way of looping the program because you know you'll run that sequence at least once - it's not essential, just nice to consider another way of doing things Move the stuff for taking inputs into their own methods. For example you've put in some great error handling for the player input but it's really far away from where you take the input so it's confusing to read and maintain When you've done that consider how you'd expand this out to include lizard and Spock When you've done that break this into classes, have a game class that controls the flow of an individual game Have a computer player class which handles the computer choices Have a player class which handles taking inputs and stores player choices and maybe even stats like how many games they played, number won Put interfaces on the classes and consider where's there's common functionality between them as an interesting exercise
Very cool. Here is something that the others have suggested, and it is quite a bit shorter, yet still functioning. &amp;#x200B; using System; namespace Scratch_program_for_learning { class Program { enum Selection { Rock = 1, Paper = 2, Scissors = 3 } static void Main(string[] args) { Console.WriteLine("Hey Kid..."); Console.WriteLine("Press A Key"); Console.ReadLine(); Console.WriteLine("Wanna play a game with billy? It's called Rock, Paper, Scissors. (y/n)"); while (Console.ReadKey().KeyChar.Equals('y')) { Random rnd = new Random(); var choice = UserChoice(); var compChoice = rnd.Next(1, 3); if ((Selection)compChoice == (Selection)choice) { Console.WriteLine("\nI choose " + (Selection)compChoice); Console.WriteLine("You Win!"); Console.WriteLine("Want to play again? (y/n)"); } else { Console.WriteLine("\nI choose " + (Selection)compChoice); Console.WriteLine("You Lose!"); Console.WriteLine("Want to play again? (y/n)"); } } Console.WriteLine("\nAlright... Maybe another time."); Console.ReadLine(); } static int UserChoice() { int num = 0; do { Console.WriteLine("\nMake a Selection:"); Console.WriteLine("(1) Rock | (2) Paper | (3) Scissors: "); int.TryParse(Console.ReadKey().KeyChar.ToString(), out num); if (num == 0 || num &gt; 3) Console.WriteLine("\nInvalid Selection. Try again."); } while (num == 0 || num &gt; 3); return num; } } }
OP, I'm about to teach you how to make a git repository (on Windows): 1. Sign-up for an account on github.com 2. Click on the plus symbol in the upper-right, click 'New Repository' 3. Give it a name, description if you want it 4. Click the 'Create Repository' button 5. Open the Command Line/Powershell and move to the root directory of your project 6. Type: npm install -g git 7. Type: git init [Initializes local repository] 8. Type: git add . [Adds all files to local repository, you can type individual filenames instead of '.'] 9. Type: git commit -m "First commit: [whatever comments you want]" 10. Type: git remote add origin [repository URL] 11. Type: git push -u origin master Bam. You've uploaded to github.
Ok so I went through the code myself, and took the suggestions that others have said into account. This is what I have come up with. Probably some more ways it could be refined, but it's shorter by a bit. using System; namespace Scratch_program_for_learning { class Program { enum Selection { Rock = 1, Paper = 2, Scissors = 3 } static void Main(string[] args) { Console.WriteLine("Hey Kid..."); Console.WriteLine("Press A Key"); Console.ReadLine(); Console.WriteLine("Wanna play a game with billy? It's called Rock, Paper, Scissors. (y/n)"); while (Console.ReadKey().KeyChar.Equals('y')) { Random rnd = new Random(); var choice = UserChoice(); var compChoice = rnd.Next(1, 3); // Handle a draw if(choice == compChoice) { Console.WriteLine("\nI Choose " + (Selection)compChoice + ", you chose " + (Selection)choice); Console.WriteLine("Awww. A Draw! Want to play again? (y/n"); } else { // Not a draw, continue the test if (Win((Selection)choice, (Selection)compChoice)) { Console.WriteLine("\nI Choose " + (Selection)compChoice + ", you chose " + (Selection)choice); Console.WriteLine("You Win!"); Console.WriteLine("Do you want to play again? (y/n)"); } else { Console.WriteLine("\nI Choose " + (Selection)compChoice + ", you chose " + (Selection)choice); Console.WriteLine("You Lose!"); Console.WriteLine("Do you want to play again? (y/n)"); } } } Console.WriteLine("\nAlright... Maybe another time."); Console.ReadLine(); } static int UserChoice() { int num = 0; do { Console.WriteLine("\nMake a Selection:"); Console.WriteLine("(1) Rock | (2) Paper | (3) Scissors: "); int.TryParse(Console.ReadKey().KeyChar.ToString(), out num); if (num == 0 || num &gt; 3) Console.WriteLine("\nInvalid Selection. Try again."); } while (num == 0 || num &gt; 3); return num; } static bool Win(Selection user, Selection comp) { // Rock &gt; Scissors 1 &gt; 3 // Paper &gt; Rock 2 &gt; 1 // Scissors &gt; Paper 3 &gt; 2 if(user == Selection.Rock &amp;&amp; comp == Selection.Scissors) { // The Enum values will not allow direct comparisson in this case. So this is the scenario where you can't return true; } else if((int)user &gt; (int)comp) { // Otherwise, you can see if the user choice value (int) is bigger than the computer choice (int) return true; } // Otherwise we'll return false return false; } } }
If you are using this purely for Entity Framework, depending on the version you're using you could use `db.Set&lt;T&gt;().ToList()`
I started by listening to Brackeys C# tutorial on YouTube
I appreciate them sharing, but I think he **completely** misses the point. Total misapplication of ***why*** you'd ever use a factory method. &amp;#x200B; &gt; In order for to have a choice over which dinosaur noise to make, we need to be able to add new dinosaurs, without changing the code which decides when to make the noise. All they are describing is polymorphism. They proceed to force-fit a virtual factory method intended to override the behavior of `MakeADinosaurNoise()` public class TRexNoiseProducer : IDinosaurNoiseProducer { //This is the method they are trying to change public void MakeADinosaurNoise() { IDinosaur dinosaur = MakeADinosaur(); dinosaur.MakeANoise(); } public virtual IDinosaur MakeADinosaur() { return new TRex(); } } `MakeADinosaurNoise()` could have easily just been made virtual, or taken a parameter. public virtual void MakeADinosaurNoise(){....}
protected readonly variable private static variable public static variable Local variable I can see what you are trying to do here and yes I see that the top 3 could all be able fields, but it's it feels like you are being obtuse in the questions just to make them 'interesting'
Agreeing withc most if not all of the suggestions about splitting code and getting out of main, using enums etc. I just wanted to point out that after all that is done this would still be a brilliant project to learn more from, not only about style and best practice but also new tech. For instance you can store the result of ever round into a database first off just to show, for. Instance last 10 rounds with winners, to learn about data storage and retrieval. Late that can be expanded to late the game make a qualified ahead based on rounds already played. Plenty of cool stuff to learn from a simple game and when you start to expand you will really see the benefits if the OOP suggestions other users have made.
I see your point, I probably overdid it
I took a look at submissions and updated evaluations
`npm install`? I’d highly guess it won’t be available
Yes. From the sound of it, I’m sure you write crap code no matter what library you use..... 🤔
"Pretty big" as in "too big"? I would suggest, and am doing so myself, to source control everything you think has the slightest chance of becoming anything. The basics are absolutely not hard to learn and the benefits are pretty tremendous.
Well, it all depends - as always... programming is all about trade offs. I use MediatR some places and some places I do not. It depends on the amount of “comflexibility” I need/want/have to tackle. Code sharing is a whole other topic with its own ‘depends’. In my experience, some devs are too obsessed with code sharing. On one level it’s great to only write code once, only have the same bug in one place etc. But sometimes it would be better to not share. You know the single responsibility ‘rule’. It’s not uncommon that shared code that started out doing exactly one thing is extended with a small flag so that it can be adjusted to the new usage elsewhere, and then you have the snowball rolling... now you have introduced the bug not only one place, but all over the place, and when you need to change the behavior for one place, you might as well break the behavior in a lot of places... There are good reasons for sharing code, and there are many ways of doing it. But it’s not a given. And for a larger, fast moving system, it can be what archives great speed in the start, but also what grinds everything to a near halt further down the road.
Derp, you're right. I've been installing a bunch of stuff for VueJS that way and the format must've stuck in my head. Edited.
Would you happen to know a good place that teaches enums? My Google searches haven't helped much in that department
Good comments. Re string comparisons, another null-safe alternative is "y".Equals(playGame, StringComparison.OrdinalIgnoreCase).
Nice. Want a challenge? Try to complete it without using conditionals. This will help you to learn key object-oriented principles. Hint: use double dispatch.
1) keep to naming conventions. Use PsacalCase for names, camelCase for local variables and arguments, _name for private fields. 2) like others said, main should run something high level, not contain implementation. There is a principle which says: "a function should do one thing and do it well". Everything in main is more than one thing.
 Random numGenerator = new Random(); A lot of people like using `var numGenerator = new Random();` instead of the above. It's mostly a preference thing but it seems like most people prefer using var especially when `new` is on the same line. if (playGame.ToUpper() == "Y" || playGame.ToUpper() == "YES") Perfect bool keepPlaying = true; while (keepPlaying) Also very good having the declaration right next to this int gameChoice = numGenerator.Next(1, 4); swich(gameChoice) I'd prefer to use `Next(0, 3)` and to use an array instead of a switch statement but this is acceptable. Everything inside of `if (playerChoice == "1")` 1) you can skip the `{` `}` in single line if statements however I think it's good practice to use them however I'd break this practice on throwaway/temporary code 2) You could have used a switch here which would have been more clean. An array would have worked as well but then you'd have to check if the choices are within it instead of use default. Switch is definitely the way to go You could have also pulled out playerChoice from an array of `{"Rock", "Paper" ...` to create the you choose line and error handle the "wat" line. I give this a 9/10
I very strongly recommend looking into QA. I did a couple C# courses with them (as part of a qualification) and they were really good. They sound about what you are looking for. They have offices in london (one is a 10-15 minute walk from london bridge) which is the best one, and one on tabernacle street in shoreditch. I did two beginner C# courses, both 10 days each. The SQL course was 5 day, the web dev course (html, css, js) was 5 day, there was also an [ASP.NET](https://ASP.NET) course which was 5 days.
Yep, all true. Edit: I figured it out. The solution is in the edit of the post.
Edit: I figured it out. The solution is in the edit of the post.
I figured it out. The solution is in the edit of the post.
I figured it out. The solution is in the edit of the post.
I figured it out. The solution is in the edit of the post.
This is a mostly useless comment but maybe it'd help someone else. Older version of clang lets you build a AST from C and C++. But it was highly dependent on their internals so they scrapped it. If you use the `-g -S -emit-llvm` flags to compile the code you'll get an ll file FULL OF DEBUGGING INFORMATION. You can easily get a list of global variables and get the definitions of every function. clang is pretty fast (for something that works with C) but also pretty slow at the same time (it does a LOT of work). You definitely can get definitions but there's no AST. You'd have to parse the ll ir which might be easier than writing a c parser but it certainly won't be fast I'm not sure why you want to write a tool for refactoring C99 code or why you'd do it in C#. This also sounds like a time consuming one time task so I'm not sure why you care about how slow clang might be
Yep I've tried hitting it with Postman and everything works as expected. I figured it out. The solution is in the edit of the post.
I started a similiar project in c# console too! i plan to give it an interface eventually. we can work together if you want. &amp;#x200B; [https://gitlab.com/aleuts/Kanto](https://gitlab.com/aleuts/Kanto)
One other option I've found is to use srcML, which parses C/C++ code and outputs XML. One could read XML with .NET, modify it, write to disk and unparse XML back to source using srcML. The downside is that XML generated by scrML is qute big with a lot of different tags and attributes, which will require a smart-ass XML parsing. But the parser is pretty fast and it doesn't require you to preprocess sources before parsing.
Looks quite cool. But it is still much more advanced than anything I could do \^-\^.
Nicely done. I hate these sneaky little package errors though. 😠
Im learning as i go along hence why its taking so long, when i get stuck and i have to learn something new i do a new project about what i learned. I like to jump in head first! Also i think gitkraken would be good for you, its completely an interface so you dont have to learn anything extra till for ready (its what i done). Anyway your project is really good, if you need help with anything let me know!
Consider the function CanAccessAccount. It checks to see if the current user has permission to interact with a given bank account. You need to perform this check before every interaction and you do not want to copy and paste the logic. So it should be shared in some manner. On one project the lead demanded that I move it from the service class to an MediatR filter. This proved to be diasterous because 1. It was surprisingly easy to miss a web service call 2. It would appear to work anyways in happy path testing 3. No one could verify its presence by just reviewing the service class methods. They had to manually cross reference message types, filters, and web requests. The net result was a dramatic increase in the number of tests I had to write. And testing isn't cheap; we can't afford to test everything that we would like to. *** It also screws up my testing scheme. Normally I run tests against the service classes directly, since I trust that the ASP.NET controllers are simple enough to not to be problematic. If you start spreading out validation and authorization, then you have to suck in MediatR into the tests as well so it's an honest test. All in all, I didn't see any benefit from adding MediatR to the project other than dramatically increasing my billable hours.
This gives some good basic examples: https://www.tutorialsteacher.com/csharp/csharp-enum
[removed]
You've got the kids and their details. Very important to have parent contact information, also additional emergency contact info. You could consider special conditions such as when only one parent is allowed to pick up kids or other family members / friends who are allowed to pick up kids. These might have photos of the people to make it easy for staff to identify - blob or file location. Child info such as allergies, medical issues, social issues / needs. Which days they're in nursery because not all kids are full time. Billing information - who's paid who hasn't, records Then you've got the groups which kids are in. Who their responsible adult is. Assessment information - how they're doing for their age, possibly stored documents. Staff information, contact details, qualifications, emergency info There's loads you can do
&gt; Install git from here: https://git-scm.com/download/win Or just install ``Github Desktop`` which is user friendly and is enough for not-complex projects?
Don't let Nintendo find out!
Check out [link]ardalis.com[/link] and his github, he has templates/starter repositories with SOLID and clean architecture in mind.
And finally we agree on something ;-) You should ask yourself if it makes sense. You should know what problem you are trying to solve, and see if MediatR is a good solution to that problem. And you should consider the cost of solving it that way. As I’ve mentioned before: MediatR ain’t no golden hammer. When it comes to authorization, I’ve implemented that outside of the MediatR pipeline myself. I’ve used the regular asp authorization tools and tagged controller methods with the required roles. I’m also validating if you have the right role for the right tenant where that was a question. But validating MediatR request objects is a good fit for the pipeline.
&gt; I’ve used the regular asp authorization tools and tagged controller methods with the required roles. I don't like doing that in cases where database requests are needed. If it can authorize against cached data I'm more inclined to consider it.
For a similiar purpose i created a Cache&lt;TKey&gt; Class and a CacheEntry-Class which are used by a GetJsonAsync-Method &amp;#x200B; *Warning, this is - by no means - perfect code* private async Task&lt;T&gt; GetJsonAsync&lt;T&gt;(string url) { if (cache != null &amp;&amp; cache.TryGetValue(url, out var cachedValue)) { return (T)cachedValue.Value; } var resultJson = await httpClient.GetStringAsync(url).ConfigureAwait(false); var result = JsonConvert.DeserializeObject&lt;T&gt;(resultJson); cache?.AddOrReplace(url, result, DateTime.UtcNow.Add(DefaultCacheLifetime)); return result; } public class Cache&lt;TKey&gt; { Dictionary&lt;TKey, CacheEntry&gt; cache = new Dictionary&lt;TKey, CacheEntry&gt;(); public CacheEntry this[TKey id] { get =&gt; cache[id]; set { lock (cache) { cache[id] = value; } } } public bool TryGetValue(TKey id, out CacheEntry value) { if (cache.TryGetValue(id, out var item)) { if (item.IsValid) { value = item; return true; } } value = default; return false; } public void AddOrReplace(TKey id, object value, DateTime lifetime) { lock (cache) { cache[id] = new CacheEntry(value, lifetime); } } } public class CacheEntry { public object Value { get; } public DateTime Date { get; } public DateTime LifeTime { get; } public bool IsValid =&gt; LifeTime &gt; DateTime.UtcNow; public CacheEntry(object value, DateTime lifeTime) { this.Date = DateTime.UtcNow; this.LifeTime = lifeTime; this.Value = value; } }
that is useful, but if u can give me more details about assessment information.
&gt; Best practice when comparing strings is to do something like `string.Equals(playGame, "y", StringComparison.OrdinalIgnoreCase)` Unless you use it in LINQ has has to be translated into SQL iirc.
The compiler error in question, CS0136, is described in more detail here: [https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0136](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0136)
I thinks it's because you are trying to assign a value to a variable that hasn't been declared and where it's coded might not be reached. Try putting var something = 0 before your if statement. something is always going to end up being = 2 because after the if statement it will always be assigned a value of 2. Did you mean: if (b == 3) { // 1 var something = 1; } else { // 2 var something = 2; } &amp;#x200B; This way if b == 3 then something = 1, if b is not equal to 3 then something will be assigned a value of 2. Hope this helps
But I don't understand it or can't think of any edge case &gt;A variable declaration hides another declaration that would otherwise be in scope. Rename the variable that is declared on the line that generated CS0136. That's their example: int i = 0; { char i = 'a'; // CS0136, hides int i } i++; but mine's quite different
&gt;I thinks it's because you are trying to assign a value to a variable that hasn't been declared and where it's coded might not be reached. but I'm declaring it in every code path, even this one which might not be reached
thanks!
Mate come on, you got a bug dump of ideas to go towards your assessment and your first question is "can you do more of my work for me".
This tells you how to do it outside of c# [https://stackoverflow.com/questions/13578/determining-how-long-the-user-is-logged-on-to-windows](https://stackoverflow.com/questions/13578/determining-how-long-the-user-is-logged-on-to-windows) so we are looking at a way of running WMI queries in c# which seems to be documented here [https://www.codeproject.com/Questions/201918/Querying-WMI-Using-C](https://www.codeproject.com/Questions/201918/Querying-WMI-Using-C) put those 2 together, and you should have your answer disclaimer - found via google, untested.
Add a .gitignore file too, so all the bin folders (and other unnecessary files to build the solution) aren't added to the repo.
According to Eric Lippert, its a deliberate decision that to make local variables be in scope throughout the entire block in which they are declared: &gt;The purpose of all of these rules is to prevent the class of bugs in which the reader/maintainer of the code is tricked into believing they are referring to one entity with a simple name, but are in fact accidentally referring to another entity entirely. These rules are in particular designed to prevent nasty surprises when performing what ought to be safe refactorings. https://blogs.msdn.microsoft.com/ericlippert/2009/11/02/simple-names-are-not-so-simple/
The problem with the logic is that you are declaring “something” in two places with var. Put “var something = 2” before the if statement. Remove the var inside the if statement. That way something is declared as 2, and will update to 1 if b = 3
&gt;3) Local variables are in scope throughout the entire block in which the declaration occurs. This is in contrast with C++, in which local variables are in scope in their block only at points after the declaration. Makes sense! Because in CPP this code is OK // Example program #include &lt;iostream&gt; #include &lt;string&gt; void a(int b) { if (b == 3) { // 1 int something = 1; std::cout &lt;&lt; something &lt;&lt; std::endl; } // 2 int something = 2; std::cout &lt;&lt; something &lt;&lt; std::endl; } int main() { a(3); a(4); } &gt;1 &gt;2 &gt;2
I know how to fix, but I'm asking whether this is a thing because it totally makes sense to write it like that. https://old.reddit.com/r/csharp/comments/bquk9y/scopes_and_variable_delcaration_ranges/eo83zm4/
The compiler doesn't really care what line you declare `something2`at, but cares at what level you declare it at. `something2` always exists in the void, so it's already declared before the if statement is hit. There's no functional difference between these: if (b == 3) { // 1 var something = 1; } // 2 var something = 2; . // 2 var something = 2; if (b == 3) { // 1 var something = 1; }
You are correct. UI wise, you'd have to convert over to using cshtml. I don't know of any tools that would convert WinForms code to cshtml so you're a bit stuck there. Guess my only point was to say that SPA != javascript. &amp;#x200B; Regarding your overall need which appears to be to have a Cross platform data reading/presentation utility I think Blazor would be a bad choice. What you appear to want is some sort of small utility that you can copy on to a machine (windows or linux) open up, read some files, and diagnose any problems that may be occurring. What you don't want is to be writing two distinct applications for each OS. Afraid the best advice I can offer there is that you compose your solution in three distinct projects. A central project with all the code needed to read and transform the data to your liking. One project for the windows UI and a third project for the Linux UI. That should allow you to produce components that can be run on either OS and so long as you keep the UI layer very thin you shouldn't find yourself having to do too much rework between the UI projects.
Interesting, replying so I can give it a look over later
Fair enough
Once you are more familiar with Git you'll probably want to upgrade from the Github client in which case I would suggest GitKraken.
The compiler can use names that aren't valid in c#. You need to rename them.
At the very least using something like Github is good as a file backup.
Cool.
We get a discount with QA at my work due to all of the courses they provide. Just a lot of them were saying I needed 3-6 months experience first, but listening to other comments, that could be really basic, so I could just do some Pluralsight courses until I go to a QA and I'd pick it up
thats true. but I didnt get what do assessment mean. He said "possibly stored documents" but didnt get it too.
Don't know which tool you are using but in ILSPY ( [https://github.com/icsharpcode/ILSpy/releases](https://github.com/icsharpcode/ILSpy/releases) ) click on the project name and then File, Save Code and it will create the full decompiled project.
You need to run publish with the --self-contained flag. https://docs.microsoft.com/en-us/dotnet/core/deploying/index#self-contained-deployments-scd https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#default-executables
In the UK kids get assessed with the things they've learnt compared to what they might have expected to have learnt for their age. You'll need to have a look in your area for what they do. But to be honest you've got enough with the other stuff to have a more than comprehensive database, don't worry too much about it. These are sometimes done on paper so maybe you could link to a document stored on a drive somewhere.
Thanks! Definitely going to do so.
Thank you for the replies all, I will definitely work towards making the transition to a database. I'll review all your suggestions and figure out which one works best for me.
Code isn't encrypted in the exe, it can only be obfuscated. A quick google search lead me to: https://stackoverflow.com/questions/179741/how-do-i-decompile-a-net-exe-into-readable-c-sharp-source-code This will probably be a good start.
Loved the book, thanks
I tried ILSPY, but I got [this file structure](https://imgur.com/a/lj4Nydg).. :(
If you collapse the {} tree, there should be another tree with namespace which will contain classes and methods.
don't really know what you're asking, but here's the interface [https://docs.microsoft.com/en-us/dotnet/api/system.collections.icollection?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.collections.icollection?view=netframework-4.8). that and loops will probably be what you need
Hmm. having coded several Office Add-ins. lemmie think about this one...
I wish it was that easy.. :(
thank you man. that's more than enough
This is what worked for me. We had a giant program that only used certain parts most of the time. We wanted to save costs on hosting in azure so we broke the app up. The things that always go used were put in a high resource group to allow them to be fast. The others got demoted. The rule we used to break these up was by seeing what units-of-work were needed. The best way to explain this, if you don't know, is that all the accounts and user info was one unit of work. All that went into one service. All the licensing went into another. We divided these since we know we can reuse those services across apps. I'm not gonna get deep into our architecture as I will be here for hours but the main idea for it was break up the bits that make sense to divide. There is no right way to do it but a tonne of wrong ways. Cut it up the way that makes sense for your case - outs was cost saving, yours might be abstraction and usability across the API. I feel the reason why the articles you read were abstract were because of this.
Awesome thank you!
Anytime mate, personal favourite of mine
Good bot
Are you sure about that? Because I am 99.99977% sure that Capitalist_P-I-G is not a bot. --- ^(I am a neural network being trained to detect spammers | Summon me with !isbot &lt;username&gt; |) ^(/r/spambotdetector |) [^(Optout)](https://www.reddit.com/message/compose?to=whynotcollegeboard&amp;subject=!optout&amp;message=!optout) ^(|) [^(Original Github)](https://github.com/SM-Wistful/BotDetection-Algorithm)
I did see a tutorial that in some instances he wouldn’t use curly braces and I was confused on why or even when it’s optimal to do that. Thanks for the kind words and I’ll read through the link a little later today!
I’m definitely going to work on enums and creating separate functions to clean up main! Thank you!
I think I’m up for that challenge, thanks!
That’s a really good idea about the database! It’s kinda why I came here, I can still keep learning and get some guidance on where to go or what I should polish. Thank you!
Wow thank you! I wanna familiarize myself with as many concepts as I can so I may just code it with do while just to exercise that concept for me. And thanks for the suggestions! It gives me something to keep working towards in terms of advancing
Thanks! I’m definitely gonna check out Lookup!
Thanks! Even if it is overkill, it’s a good learning experience for when I start doing bigger projects
Thank you! I’m gonna start cleaning up Main. I’ll start with functions before classes
Here are a few concepts to help get you going. This uses an Enum to control which choices the player and game can make. It also introduces you to classes, LINQ, Extension methods, and refactoring your code away from multiple nested if/then conditions. &amp;#x200B; `using System;` `using System.Collections.Generic;` `using System.Linq;` &amp;#x200B; `namespace AppleDrank.Games.RPS` `{` `static class Program` `{` `static void Main(string[] args)` `{` `Random numGenerator = new Random();` `int numberOfChoices = Enum.GetNames(typeof(Choices)).Length;` `//intro` `Console.WriteLine("Hey kid..");` `Console.Write("Response: ");` `Console.ReadLine();` `Console.WriteLine("Wanna play a game with billy? It's called Rock, Paper, Scissors.");` `Console.Write("Response (Y/N): ");` &amp;#x200B; `//play game?` `string playGame = Console.ReadLine();` `if (playGame.ToUpper() == "Y" || playGame.ToUpper() == "YES")` `{` `Console.WriteLine("\nOoooh yeeeaaaahhhh! It's on!!");` `Console.WriteLine("Okay, Are you ready?\n");` &amp;#x200B; `var outcomes = InitOutcomes();` &amp;#x200B; `bool keepPlaying = true;` `while (keepPlaying)` `{` `Console.Write("Rock(1), Paper(2), or Scissors(3)? ");` `string input = Console.ReadLine();` `int inputValue;` `if (int.TryParse(input, out inputValue) &amp;&amp; Enum.IsDefined(typeof(Choices), inputValue))` `{` `Choices playerChoice = (Choices)inputValue;` `Console.WriteLine("\nYou chose {0}", playerChoice.ToString());` &amp;#x200B; `Choices gameChoice = (Choices)`[`numGenerator.Next`](https://numGenerator.Next)`(1, numberOfChoices+1);` `Console.WriteLine("\nBilly chooses {0}", gameChoice.ToString());` &amp;#x200B; `var outcome = outcomes.DetermineWinner(playerChoice, gameChoice);` `Console.WriteLine("\n" + outcome.Message);` `}` `else` `{` `int playerError =` [`numGenerator.Next`](https://numGenerator.Next)`(1, 4);` `switch (playerError)` `{` `case 1:` `Console.WriteLine();` `Console.WriteLine("Are you okay? 1, 2, or 3 buddy... REDO\n");` `break;` `case 2:` `Console.WriteLine();` `Console.WriteLine("...wat...");` `Console.WriteLine("Do it again - 1, 2, or 3 only!\n");` `break;` `default:` `Console.WriteLine();` `Console.WriteLine("um, we'll call that a warm up.. only pick 1, 2, or 3\n");` `break;` `}` `}` `Console.Write("Again(Y/N)? ");` `string playAgain = Console.ReadLine();` `Console.WriteLine();` `if (playAgain.ToUpper() == "Y" || playAgain.ToUpper() == "YES")` `{` `}` `else if (playAgain.ToUpper() == "N" || playAgain.ToUpper() == "NO")` `{` `Console.WriteLine("Daaaaang, someone can't take the pressure... seeya...");` `keepPlaying = false;` `}` `else` `{` `Console.WriteLine("I'm gonna take that as you wanna play again... Let it RIIIIIDE\n");` `}` `}` `}` `else if (playGame.ToUpper() == "N" || playGame.ToUpper() == "NO")` `{` `Console.WriteLine("\nUh... okay... seeya loser...");` `return;` `}` `else` `{` `Console.WriteLine("uhhh anything other than \"Y\" is a No.. so seeya I guess");` `return;` `}` `Console.ReadKey();` `}` }
Rest of the code... `/// &lt;summary&gt;` `/// Method to map all possible outcomes` `/// &lt;/summary&gt;` `/// &lt;returns&gt;&lt;/returns&gt;` `private static List&lt;Outcome&gt; InitOutcomes()` `{` `var outcomes = new List&lt;Outcome&gt;();` `outcomes.Add(new Outcome(Choices.Rock, Choices.Rock, "Rock and Rock is a stalemate boys.. GO AGANE!"));` `outcomes.Add(new Outcome(Choices.Rock, Choices.Paper, "Paper wraps Rock... You Lose"));` `outcomes.Add(new Outcome(Choices.Rock, Choices.Scissors, "Rock smashes scissors.. YOU WIN"));` &amp;#x200B; `outcomes.Add(new Outcome(Choices.Paper, Choices.Rock, "Paper wraps Rock... You WINNNNN DUDE"));` `outcomes.Add(new Outcome(Choices.Paper, Choices.Paper, "Paper and paper just sit there... Another Round we go"));` `outcomes.Add(new Outcome(Choices.Paper, Choices.Scissors, "Scissors cuts up paper.. you're a loser"));` &amp;#x200B; `outcomes.Add(new Outcome(Choices.Scissors, Choices.Rock, "Rock busts your scissors in half... Maybe next time"));` `outcomes.Add(new Outcome(Choices.Scissors, Choices.Paper, "You're cutting up the enemy into little bits... YOU WIN"));` `outcomes.Add(new Outcome(Choices.Scissors, Choices.Scissors, "Scissor me timbers... go again"));` &amp;#x200B; `return outcomes;` `}` &amp;#x200B; `/// &lt;summary&gt;` `/// Extension method to get a single outcome from a list given two selections` `/// &lt;/summary&gt;` `/// &lt;param name="outcomes"&gt;List of all possible outcomes&lt;/param&gt;` `/// &lt;param name="playerChoice"&gt;The choice a player selected&lt;/param&gt;` `/// &lt;param name="gameChoice"&gt;The choice the game selected&lt;/param&gt;` `/// &lt;returns&gt;&lt;/returns&gt;` `private static Outcome DetermineWinner(this List&lt;Outcome&gt; outcomes, Choices playerChoice, Choices gameChoice)` `{` `var outcome = outcomes.Where(o =&gt; o.Player == playerChoice &amp;&amp;` [`o.Game`](https://o.Game) `== gameChoice).First();` `return outcome;` `}` `}` `public class Outcome` `{` `public Choices Player { get; private set; }` `public Choices Game { get; private set; }` `public string Message { get; private set; }` `public Outcome(Choices player, Choices game, string message)` `{` `this.Player = player;` [`this.Game`](https://this.Game) `= game;` `this.Message = message;` `}` `}` `public enum Choices` `{` `Rock = 1,` `Paper = 2,` `Scissors = 3` `}`
And the costs are nothing. GitHub doesn't charge you. Might as well turn every project into a repo. Even if you never push them to GitHub itself, source control is the way to go. It's just one of the many "do it right from the start" lessons I've learned, just like logging and configuration.
Whoa awesome! Thank you so much!
Thank you! There’s a lot of good stuff in here that not many other people have suggested. And you’re right, \n does look ugly, huh?
&gt;18 comments i think the best argument for using .net core is just the fact that you know it will be around in 10 years from now. that is the main advantage of using tech from Microsoft for many companies
The code could be stored in the app resources, then decrypted and compiled in memory. There are APIs to achieve that, what you can do is find where that is happening and place breakpoints there. You can debug a compiled application with DnSpy and step through the code. At one stage the code will be decrypted, then you just need to pull it out from the memory. &amp;#x200B; The application could be obfuscated as well. I would suggest trying to de-obfuscate the app with a tool (there are many available) before you start going deeper into the app.
Yes it is. But a desktop git app is a first step. And like backups, you will learn that you should use it after you needed it.
I can try to give you a sample later when I have some more time. It's something I read about early in my career in the book called Code Complete 2. The a very valuable book to read early in one's career. It's possible it may be a bit outdated now though, and there might be a better alternative.
The idea is that you shouldn’t be using pointers in c#. That’s the entire reasoning behind Span&lt;&gt; and Memory&lt;&gt;. The designers wanted to create a safely managed method of accessing memory
Obfuscation *is* encryption (sometimes). Obfuscators can wrap a software package in an encrypted wrapper to make it more difficult to read. At runtime, the wrapper will decrypt the internal payload and execute the target program
Does FV integrate with ApiExplorer?
indeed.
Any value that is in the heap can potentially be relocated by the runtime. Span permits you to write the same algorithm that executes against an object located in the heap vs an object at a physical address located elsewhere.
&gt; Any value that is in the heap can potentially be relocated by the runtime. Isn't this what the "fixed" keyword prevents?
Well, I get that that's the idea of the designers, but it's available. And it sure is a hell of a lot faster than alternatives. The question is, is it a good thing to do? (excluding what the C# designers have/had in mind)
One minor thing is that a lot of devs code a new instance variable like: `var rand = new Random();` instead of `Random rand = new Random();` because in the first example - we can see the type is Random, so var is a bit of a shortcut :)
Isnt this de-obfuscated version? I have no idea what is deobfuscated
Yes, but that can cause it’s own problems. The GC has to work around the pinned memory block and t can cause performance problems - both speed and memory use
Span is safer than direct pointer handling
Try to run it through de4dot. It might support the obfuscator and if it does you get much more readable code.
Thank you everyone! Your advice had helped me look at different perspectives.
Pointers and other unmanaged memory constructs exist for interop with native code. You shouldn't use them unless you have a very good reason.
If you keep working on your code, I'd be happy to keep reviewing it and give some pointers as you go.
Be fun to see what this is like I've been working in C# lately for college(Way outside my comfort zone as I usually work in Python and Bash....)so this'll give me good practice.
I might be a jaded asshole but I think the dinosaurs were used to be "cutesy" and "lol so random!"
LocalStorage looks like the best solution, at first i was afraid of it because i don't know a single thing about js but figured out few things so its fine but here is what's happening, i looked for where that localstorage saves and mine looks like "\\\AppData\Local\Chromium\User Data\Default\Local Storage" i checked that place and its empty even though i send cat tom value (it shows "tom" in the page but nothing on the storage) and i do need that storage for c# to access it, maybe it would be possible with cefsharp but i couldn't find anything useful on it. Plus to all that there is still the problem that i need c# to send a signal to the live html page a signal first for all the process to start. For the part of how my application works, here is a more detailed explanation: CefSharp runs on the form as the program opens (there is a bug that it doesn't load anything from the local data at the start but don't mind that its happening because there is more than one forms with cefsharp which one of them was a old prototype so it will go shortly). Now aside from the panel that contains cefsharp the form also have few buttons, one of those buttons is "save". What this save button supposed to do is somehow sending a signal to the html page that is running on cefsharp (the html file file is on pc btw not on net). After html file getting that signal it should generate a string (don't worry about the generating that string part its about an API so its done already) and after the html generated the string its somehow supposed to send that to c# form back. After that, the form saves the string to a database but that's the easy part since it only involves c# and nothing else so don't worry about that part. Then there is the other side of the coin, "loading": On the form one of the other buttons is "load". When this button pressed there should be a menu for you to choose which one of the datas you want to load from the database (again not a problem for me since it doesn't involve anything else than c#). The data string part of the load data has to transferred to the html page that is currently running. After that the html page should get triggered and force load that string data (this part is mostly about that API so don't mind this part). I hope this concluded everything and left no confusion. Thank you for everything.
Winforms is not cross-platform so I'm not sure what you're trying to achieve here?
Well, I'd say that the large difference in performance is that very good reason. For instance, the difference in speed between using pointers and Bitconverter is [huge](https://snag.gy/YR2qPe.jpg), and in a real-time environment, where lots of serialization happens, that difference matters.
Great topic, but I think the explanation is a bit lacking. I like this one better: https://www.c-sharpcorner.com/UploadFile/5ef30d/understanding-yield-return-in-C-Sharp/
No, it's not. There are managed alternatives now. You should be using those instead.
Would be helpful if you listed some of those alternatives.
What have we been talking about? Span&lt;&gt; and Memory&lt;&gt;. You need to make sure you're using .NET Core to get the performance benefits.
No, WinForms will not work with VSCode. Even if you could, there is no designer so you'd have to write all that forms-specific code yourself. In the end, it would cost you more nerves than it would be worth it. Just dockerize VS and use that. You'd be much better off to just [create a docker image](https://devblogs.microsoft.com/setup/installing-build-tools-for-visual-studio-2017-in-a-docker-container/) with visual studio on it and carry that around.
&gt;The idea is that you shouldn’t be using pointers in c#. This is what we've been talking about. That you shouldn't use pointers in a general sense in C#. Span and Memory doesn't apply everywhere, so there are still cases not mentioned here.
Break up each part of the formula into smaller sections. Run through the formula using a simple input by hand with pencil and paper. Then use the same simple inputs and use the debugger or output each small part in your code and compare it to your pencil and paper work. Figure out where the computer math and your manual math differ and correct it step by step.
Maybe editing code and building remotely? But then almost any editor is good for that.
Is schemabuilder your class? &gt;internal class SchemaBuilder If you can change that, make it public. I may be misunderstanding though.
no it's from a third party library, HotChocolate, this is a graphql implementation for C#/.Net
&gt; Span and Memory doesn't apply everywhere, so there are still cases not mentioned here. Your question here is specifically about Span vs pointers.. You've gone completely off on a tangent (that you shouldn’t be using pointers in c#). Obviously if Span isn't an option then Span vs. pointer isn't a question that can apply. Obviously Bitconverter with no ability to interact with Span is slower than grabbing raw bytes off a pointer. That's not relevant to your OP.
&gt;You've gone completely off on a tangent (that you shouldn’t be using pointers in c#). My question was specifically about Spans vs pointers, yes. But the very first answer was addressing pointers in general, and that's what I was responding to. Even your very first response was regarding pointers in general.
Technically yes, winforms is just a bunch of set up code in a class. You would not have any designer support so it would be a terrible experience (have a look at the form.designer.cs/vb to see what I mean.) &amp;#x200B; The issue is that until .net core 3.0, winforms is only legacy framework on windows. With .net core the UI frameworks are migrated but still windows only for now. Eventually we may get full cross platform UI but not in the near future. &amp;#x200B; Visual Studio is still the best way to work with winforms (or wpf for that matter).
Yes and no, I have a feeling your question is deeper than it seems. Windows Forms and the Windows Forms Designer require Windows. So if you're trying to write a cross-platform application, it won't work. And while it is possible to do so, it's not common to find an IDE that supports the WinForms designer other than Visual Studio. (I swear SharpDevelop did for a while, but don't ask me to quote nearly 10 years ago with clarity.) So VSCode doesn't really support the *Designer*, if you were a madman you could probably write an extension that does, but it would only work on Windows. Yes, WinForms is in .NET Core. .NET Core implementations are allowed to support platform-specific things that are not part of .NET Standard. WinForms is not part of .NET Standard, and only the Windows implementation of .NET Core supports WinForms. That said, nothing about WinForms requires Visual Studio. Everything the designer does results in C# code being generated in the `.Designer.cs` file. You can do all that work by hand and write a functional WinForms application without using VS. There are a handful of features that might require you to use more complicated build tools than `csc.exe` alone, but they're just command line utilities and they are well-documented and thus you can use them. THAT said, I'm not aware of anything to make it a one-click-and-it-works affair in VSCode. I don't know if there's .NET CLI support for WinForms projects, and if that's not the case you'll be more on your own with VSCode than usual. **So the short answer is:** it's very likely what you expect cannot be provided by anything but Visual Studio.
don't use span&lt;t&gt; in an unsafe block. it's intended to be a managed wrapper around memory access. if you're in an unsafe block already just use pters directly.
How about writing structs to an existing byte buffer/array? "fixed" seems like the lesser of two evils here. This can also be achieved with spans, but it that does require you to grab the address of the byte array using the fixed keyword. Or am I mistaken?
So I’m currently running a game design team and I’m the leader. While my main focus is on marketing and writing the story, I also feel it necessary to learn a bit of c# in the instance of one my prograaming team falling behind or needing to someone to polish their coding. Idk jack about this or any coding language, but whatever helps my team keep moving