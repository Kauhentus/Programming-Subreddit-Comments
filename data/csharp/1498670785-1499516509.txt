Thanks for the reply! I ended up changing the query to use LINQ, and the error went away. I'm not sure why, but it works!
Whoops I confused reference types and value types. What I meant to say is that c# does not have value types. At least not as you would expect when coming from other programming languages. And therefore wether c# boxes integers or booleans is not in you control
I second the YellowBook of Happiness.
Sources? For example dbcontext.MyTable.ToList() will open a sqlconnection with a sqlcommand and execute select * from mytable. And foreach will do basically the same. I don't believe EF will give you any partial results.
Please note that the new Queue will point to the same referenced objects as the original. This means if you change an object within the original Queue then the other Queue will also be changed. You'll have to clone each object manually if the data type is not a reference type or is mutable. Edit: To illustrate this run the following code sample: class Program { static void Main(string[] args) { var e1 = new Example { Field = "Test1", Id = 1 }; var e2 = new Example { Field = "Test2", Id = 2 }; var q1 = new Queue&lt;Example&gt;(new[] { e1, e2 }); var q2 = new Queue&lt;Example&gt;(q1); Console.WriteLine("Q1 Initial"); PrintQueue(q1); Console.WriteLine("Q2 Initial"); PrintQueue(q2); e2.Field = "Test3"; Console.WriteLine("Q1 Post Change"); PrintQueue(q1); Console.WriteLine("Q2 Post Change"); PrintQueue(q2); } static void PrintQueue(Queue&lt;Example&gt; q) { foreach (var e in q) { Console.WriteLine($"Field: {e.Field} // ID: {e.Id}"); } } } class Example { public string Field { get; set; } public int Id { get; set; } }
You are imagining it like this: 1. Open connection 2. Execute SQL 3. I haz objects! What really happens is: 1. Open connection 2. Interpret the SQL 3. Database loads first page 4. Database fills output buffer with data from first page 5. Database loads next page 6. Database fills output buffer with data from next page 7. Is the buffer full? If so, send that batch of records to the client. 8. Are there more pages? If so, go to step 5. 9. Tell client that you are done. `ToList` Version 1. Open connection 2. Execute SQL 3. Wait for first batch. 4. Turn those into objects 5. Wait for next batch. 6. Turn those into objects 7. Copy the objects into the List, resizing as necessary 8. End of result set? If no, go to step 5. 9. **Allow the application code to do something with the objects.** `foreach` streaming version 1. Open connection 2. Execute SQL 3. Wait for first batch. 4. Turn those into objects 5. **Allow the application code to do something with the objects.** 6. Wait for next batch (if it hasn't already been sent while you were working on step 5). 7. Turn those into objects 8. **Allow the application code to do something with the objects.** 9. End of result set? If no, go to step 6. By removing the `ToList` step, the client can start processing results earlier. Which means that the client and database can work concurrently.
Sorry, I still don't quite understand. Value types exist in the form of structs, deriving from System.ValueType. The Int32 and Boolean types are structs, and storing them as an "object" leads to boxing/unboxing. This is generally avoidable. I'm a .NET dev, so I'm not sure how most other languages might handle these types differently, but they certainly exist and have their own distinct behavior.
`Enumerable.Where` only operates on the `IEnumerable&lt;T&gt;` interface. It will not perform any better on a `SortedDictionary` than it does on any other collection. Those properties mentioned by the MSDN only apply when accessing items via the dictionary's own methods (`Contains`, `TryGetValue` etc.)
You can use `ildasm.exe` to see the difference in the compiler outputs. This tool is included with .NET. However, I really don't expect to see a difference when you use a release build. 
Ya sayin' that by using foreach there will be paralellism between the IO thread and the current thread automatically and witout using any asyc / TPL stuff?
Yeah, I think maybe the discussion here is around strongly typed languages versus non-strongly typed languages such as certain scripting languages. That's something the OP could google. 
&gt; Sounds to me like you're running into memory issues, especially if you're targeting an x86 platform. Oh absolutely that's the main issue. I just shared the post because I thought it was a weird change. I'm gonna use ildasm.exe to see how the output is different.
Just had a thought that may fix this: There are two ways you can constrain the size of the image. First, you can use the `BitmapImage.BeginInit()` and `EndInit()` methods to define a URI and a target size for your bitmap. This should constrain the size of the image in memory to the target size you specify. (It does this by streaming chunks of the file through buffers as it converts them) The interpolation is usually pretty good, but you can tweak the algorithm if needed with a few parameters. The second way is to get yourself a `BitmapSource` from the file and then make that the source of a `TransformedBitmap`. Use the transformed bitmapsource as the source for your bitmap image. Both should accomplish the same goals. I also highly recommend that you do in fact `Freeze()` all of your `BitmapImage`s and `BitmapSource`s prior to assigning them to something. Freezing prevents a lot of behind the scenes event handlers from being hooked up and can also prevent memory leaks in certain scenarios.
I would presume that access of an individual element by key or index for sorted dictionary is O(log n). But I would also presume that the custom IEnumerable implementation would be faster than O(n log n) and is probably O(n).
Here is a good article to inspire you: https://medium.com/udacity/how-i-learned-to-code-in-my-30s-61ad21180208 
I started with WordPress work. But any coding really. The key is to get a good profile and then start bidding for jobs. Bid CHEAP. Almost free at first. In your cover letter say you are new freelancer and looking to build up a work history so taking on jobs for a very low fee. This will get you experience and work history and feedback which is crucial to landing good paying jobs. I am from the US so always adding that I am from the US so there will be no communication barriers seem to work also. A lot of freelancers don't speak/type English very well but work for dirt cheap. So I was targeting people that were tired of overseas workers and willing to pay more for someone they can actually talk to.
Divide your page up with nested grids. Don't go crazy with rows &amp; columns in a single grid, with complicated row spans. Make simple grids with say 3 columns. Then in each column another grid with the number of rows you want in each. Not just from a coding point of view but from a UX point of view, having a row or column predominant design like this is really nice for users to follow the flow of your layout.
To add to that just in case. you deserialize to array then just grab first element and done .
You should look up stuff by Jerry Nixon - he's a xaml wizard. http://blog.jerrynixon.com/
Your code inside the foreach won't execute in paralell as the database is returning it. 
That was much more illuminating. Thanks!
I created a NuGet package that gets the stock data from the Yahoo Finance API. It was working the last time I used it. https://github.com/ZacMarcus/YahooFinance.NET
For this job, one solution would be to look at the morelinq library on GitHub. It has a take while method that you can use to get all keys less than a certain value. Edit https://github.com/morelinq
Implement this data structure, and populate it on load: https://en.wikipedia.org/wiki/Trie from something like https://github.com/dwyl/english-words
Never do anything time consuming on the UI thread - it freezes it. ;) Depending on how the code is laid-out and your intentions -- look into InvokeRequired() and or just doing the load in a thread and having it notify the UI that a new image is now ready for use. Maybe both... 
I hate writing XAML. Blend is a huge help. It makes the bindings and styling so much easier. You can have the same solution open in Visual Studio and Blend. Code in either at the same time and you can compile and run them in the debugger from either of them. It made XAML tolerable for me. Thing is, I haven't written anything that wasn't a web application in 6 years. 
49,000 sounds like a lot for a networking major with one c# class under his belt. Most JR dev positions are not actually entry level, its usually just a way to justify hiring a dev that has a year or two of experience.
These are DHCP servers. I want to read the DHCP configuration that is already present on my machine.
The second link.
I'm just the opposite. With XAML and WPF I'm like, "I'd like this label to act like a check box" and WPF is like, "Nope, doesn't inherit from the correct object." Sure you can compose and do tricks to make it happen, and that's a huge improvement, but I just think that starting in the MFC days all the way to now, the inheritance structure of the windows objects have just been too restrictive and too deep. I love the crazy flexibility of HTML, CSS and Javascript. Sure, I like compiler type checking and all, but I guess I'm a "don't fence me in" programmer-cowboy at heart.
&gt; "I'd like this label to act like a check box" and WPF is like, "Nope, doesn't inherit from the correct object." Just restyle the check box. With WPF you need think in terms of "What has the right behavior?". What it actually looks like can be easily changed afterwards.
Wpf-tutorial.com is also a great starter guide. In the site you Will learn how you style and how you Dynamic bind items To object properties.
I dunno why the downvotes, this was a pretty humorous comment that made me lol. :)
elo
In addition to what Major_Reacher said, you shouldn't need all the parentheses in your WHERE clause. Since all the booleans are AND's, the parenthetical groupings aren't necessary. Also, since you're specifying lower and upper bounds to wo.CREATEDTIME, the != 0 and != 1 checks shouldn't be needed either. Lastly, for readability (and maintainability), it's nicer if you split the text over multiple lines, e.g.: string queryText = @"SELECT "; queryText += "qd.QUEUENAME AS Group, "; queryText += "wo.WORKORDERID AS 'Request ID', "; queryText += "mdd.MODENAME AS 'Request Mode', "; queryText += "aau.FIRST_NAME AS Requester, "; queryText += "dpt.DEPTNAME AS Department, "; queryText += "wo.CREATEDTIME AS 'Created Time', "; queryText += "wo.TITLE AS Subject "; queryText += "FROM WorkOrder wo "; queryText += "LEFT JOIN ModeDefinition mdd ON wo.MODEID=mdd.MODEID "; queryText += "LEFT JOIN SDUser sdu ON wo.REQUESTERID=sdu.USERID "; queryText += "LEFT JOIN AaaUser aau ON sdu.USERID=aau.USER_ID "; queryText += "LEFT JOIN DepartmentDefinition dpt ON wo.DEPTID=dpt.DEPTID "; queryText += "LEFT JOIN WorkOrder_Queue woq ON wo.WORKORDERID=woq.WORKORDERID "; queryText += "LEFT JOIN QueueDefinition qd ON woq.QUEUEID=qd.QUEUEID "; queryText += "WHERE "; queryText += "wo.CREATEDTIME &gt;= 1498428000000 AND "; queryText += "wo.CREATEDTIME &lt;= 1499032799000 AND "; queryText += "wo.ISPARENT='1' "; queryText += "ORDER BY 1"; 
I agree that is a lot for their experience but that would probably be the very top of the range in the realm of possibillity. As for jr dev not being entry level, while a lot of companies ask for x years experience in the job description, if you are able to get to the first round interview stage and know your stuff, you can theoretically skip a lot of "required" years experience. I was able to get an offer for a position at a fortune 500 company requiring 8-10yr experience for senior software engineer role when I had less than 3 (i did have a masters degree though so add mb equivalent to 2). Don't be afraid to apply above requirements if you think you can handle the job
I got an internship doing programming at a large company straight out of high school. I think my pay the first summer was something like $14/hr back in 1997. That would be somewhere around $21 today. If it's a smaller company, maybe go a little less.
They never crash vs and are butt hurt by my comment. It's only 2, no sweat off my sack.
A structure I've used in a few word games I've made is a Dictionary (the C# one) using words sorted by letters as keys and a list of words that match as the value. For example, give the 4 letters "p" "r" "o" "e", my key would be "eopr" (letters in alphabetical order) and the list would contain "pore", "repo" and "rope". The Dictionary (C# one again) let's you do very quick lookups. Other posters are correct that a Trie is the "best" structure efficiency-wise for these types of problems, but it's a bit more involved in setting up, using and understanding. 
So I'm using Manageengine ServiceDesk Plus. In the reports section you can get the SQL query it uses for the reports, I'm just copy/pasting from there. I tried using single quotes in but the literal string does not like quotes obv. I have tried everything to get the query to work and this is the only way i found. But i understand what you mean regarding readability, thanks alot for the input. 
The query is copied directly from the reports section of Manageengine Servicedesk Plus. I don't know why it's formatted with all the quotes, but I am not able to run it without quotes. And the double quotes is to escape the single quotes in a literal string. Yeah, a LINQ query would be better i suppose, but how would one go about doing that? Would I need to use one of those micro-ORM's?
After your explanation and some code review I get it, many thanks. I have changed the sqlQuery method to a DataTable and not a SqlDataReader and then i build the DataTable and return it from the method. I think I understand why it's needed, but I haven't had the time to read up on the correct use of the iDisposable system, but I'll try to update the code with using statements tomorrow. I don't know what "list of statically-typed objects" means, and my google skills fail here. Do you care to elaborate or perhaps find a link? Thanks again. 
Really awesome! I needed this.
Desktop (windows, Linux and Mac), web, iOS, android, compact / embedded devices.
It's a general purpose language, so you can create applications of many different types. Desktop apps, server software, dynamic web sites, and so on. I would suggest you pick up one of the "C# for Dummies" books. Despite the title, they're actually quite good for learning something new. https://www.amazon.com.au/d/ebook/C-5-All-One-Dummies-Bill-Sempf/B00B6EBSM8
In all of these, the time complexity of each query is O(1) which is better than O(log n). You would have go to some kind of extra work to make it O(log n) instead of O(1). You can't process each of n values faster than O(n); you have to visit each value once. edit to add: I am excluding GetViewBetween when I saw "all of these are O(1)"; GetViewBetween is strange.
Note that the random generator introduces a slight bias since the number of characters does not evenly divide the range of random numbers.
So, I'm a fairly young person who is also trying to get into programming. More specifically game development, cuz, yknow, everyone says do what you love and it won't be work. My plan was to start working with C# in tandem with Unity since it's not as difficult as C++ and then once I've mastered C# move on to learn C++ and then other languages. Do you think this is a good idea? Or should I start with an even easier language such as python?
I think people way over hype the difficulty of "learning" a programming language. What you actually should be focused on is writing clean, fast, understandable code that does the task at hand. This can be accomplished in any language. A programming language is really just a way for programmers to express their ideas, and most languages can do a lot of things (with notable exceptions such as JavaScript and PHP being used almost exclusively for web development). C++ really is not that hard to just jump in with if you really want to. The ideas of header files, namespaces, etc are not really that difficult to understand once you play around with the language for a bit. However, with all that being said, Python and C# are both fantastic languages as well and you would be well off learning either (preferably both).
Okay, great! Thanks so much for the detailed response
You can do everything with any general purpose language. You just need to get it running on the platform you want to target. It's slightly less efficient (memory, size, performance) than C/C++ but you gain development speed due to simplicity and abstraction. - C# as in .NET Framework runs only on Windows. Has WPF and Winforms for gui/desktop apps. - C# as in .NET Core can run on most platforms (Windows, Mac, Linux) and it's best suited for websites, webapps and console/automation projects. No support for a first-party UI framework (like WPF and Winforms) sadly.
Just found this on SO based off of some of the responses. Looks like you this will be useful to you. https://stackoverflow.com/a/6416341/2864619
As long as being a general purpose language, it is also used as a scripting language for the Unity game engine. On top of that, there is a 3rd-party CS Script library that is pretty awesome.
So.... since you are fascinated by computers... The cpu executes commands in machine code. In the past, compilers would convert source code (non-executable text files) to machine code. You would need to compile the same source multiple times for each Architecture (Windows 32bit, windows 64bit, linux 32bit, etc.). Java introduced the java virtual machine with the tag line "Build once, run everywhere". The JVM introduced a new step in the programming pipeline. Instead of converting java source to native machine language the Java compiler would convert the java source to JVM bytecode. The JVM was compiled multiple times, each for different architectures, but all those versions could read and execute the same java source. Microsoft either independently or because they noticed it was a really good Idea developed the .Net CLR (Common language runtime). The .net CLR does the same thing for c# and vb.net that the JVM did for Java (except it didn't work as well on linux or mac which is why xamarin and mono exist today). So C# can be used to create CLR Bytecode... it has access to all the systems and devices on your machine so there really isn't any limitation on whats possible with c# beyond the normal limitations of whats possible with programming. The most common things c# is used for are * Desktop applications (Winforms, WPF, Console applications) * Windows services * ASP.net websites * Web services (Micro-services, restful servers, etc) 
&gt; everyone says do what you love and it won't be work. Do what you love for work, and either you start hating it or you will never stop working.
It bears mentioning that **if you are a beginner, don't worry about the raw performance of the programming language or runtime**. Your programs are going to be awful, buggy, and slow at first- the skills are transferable if you decide you need more juice further down the road, when you have the experience to make that determination. Start with what's comfortable, and branch out as you grow. Understanding algorithmic complexity will make your code faster than any compiler could. P.S., OP: I recommend the Yellow Book if you want a soft introduction that doesn't talk down to you. Got my mom coding with it, and it was far less painful than expected.
Thanks :)
I'm not sure what your question is but listview in win forms has a click event and a selected property or two from what I recall 
Seriously, my company has 50 open positions in the C#/C++ space
For example you want to communicate with a c++ library. Passing in params instead of arglist isn't directly compatible since it doesn't do the same thing. (I'm not 100% sure what the differences are.) Here is an example I found: https://social.msdn.microsoft.com/Forums/en-US/b22fda33-0bec-4bb1-a7cd-8cded2e33b62/how-to-wrap-a-cc-variable-argument-list-in-c?forum=csharplanguage
as a haskell programmer i am slightly indignant...
Thank you all for your input. I have work something out with my teachers.
I'm kinda of going to reiterate what /u/tg9811 said. Learning any programming language isn't hard. I would compare the learning curve to the positive side of an X^2 function. The beginning isn't hard...it's everything after that which becomes increasingly difficult because there are so many libraries, protocols, and techniques to learn. Even when you learn them though, it can be difficult to remember them if you aren't using them on a daily basis. This is really where I feel the difficult distinction comes into play. C++ is an incredibly robust language with an enormous amount of libraries to choose from. For this reason it's a very tried and true language, but learning all of what's been tried is quit an undertaking. It's syntax might not be as straight forward as other languages which might be another reason people peg it as a "hard" language. While I like the chart I provided a lot, it fails to explain why some languages are more dominate than others, even if those other languages are newer or better. Since this is a C# sub I'll use that as an example. C# is only listed in that chart as being an enterprise or windows only application language, even though with Unity, Xamarian, ASP.NET, and .Net Core you can use C# to do anything. The reason is because if you want to do game development right now, you do it in C++. C++ has years of optimization with DirectX and game engines, while also allowing for a much more granular control of memory, both of which are extremely important for a smooth running game. For app development, you'd generally want to use Objective-C or Java for much of the same reasons. The documentation is there, the tutorials are there, and it's just been proven to work. No sense in reinventing the wheel with C# when you can just follow other people's footsteps for an easier time. Then finally you have your web applications, and that space is overly cluttered with varying types of JavaScript language subsets, PHP, and Ruby to choose from, but again those things are so well documented and refined that even if they are obnoxious and not strongly typed it's hard to justify passing them up. So when choosing a language to learn, it's really about personal preference and opportunity. If you like C#, DO IT. The tools are there for you to maximize it's potential in any setting, just know that documentation and tutorials may not be the clearest or easiest to come by, but that's why they call it bleed-edge technology. 
Never used any of those four.
&gt;So you can really do much more with a language of your choice than the chart states. To an extent. You can do more with each language then what the chart says, but that doesn't mean all languages can, or should, do everything. 
Try disabling your plugins, even default ones. I have never seen anyone experience this problem, including myself, so can you provide any more details? 
I see, thanks!
Yes! If you are using VS u can right click your solution explorer and add a new csharp class. Within that class you can create functions. In your main you must make an object of that class type. If you dont know how to use classes, look it up on google, or if you are american you can pm me and i can show you thru skype. I can show how to do it on VS or in JetBrains rider. And if some of your classes will have the same methods, you can create an Interface with those methods, and just implement the Interface in your classes.
If you look at the top of your form1.cs it should say public partial class form1 : Form The keyword I want to point out to you here is partial. Forms are, by default, a partial class made up of 2 cs files. 1 where the IDE automatically generates the design code whenever you drag and drop new items on to the form in the design view. The other where you'll put all of your logical code, such as the constructor, on form load, and click events. Being a partial class means that the class has it's code separated across multiple cs files and during compiling VS puts those together as one class. You can further utilize this by creating additional partial classes for your form just as you are describing. As an example you may have form1.cs, which is your main cs file where you will have any methods used across all panels, your constructor method, and any events that pertain to the form and not your panels. Then you may have a form1_panel1.cs, which will contain all of the logic for your panel 1. That cs file should have the same class line at the top public partial class form1 : Form even though the file name is form1_panel1, it's very important the class is still listed as form1 in the code, otherwise the compiler will not associate that with the rest of your form1. 1 really important thing though...Do not split up your design code. Let VS studio's manage that in the designer.cs file. I know you might want to split this up to for each of your panels, but trust me....don't.
The only reason i have a preference towards american is its hard for me to explain things simply enough for non english natives. But if you can use a class you are fine. All you have to do is include the namespace in your main. Good luck. :)
Element accessors are queries. They are already O(log n). Enumeration iterates over all values. O(n) is the best you are ever going to get. If you are using LINQ queries over IEnumerable, then you are just doing plain enumeration.
Is it possible to move from tool to tool like halfway through a project? Not .net core to mono, I mean Vs code to rider, or vs code Linux to visual studio windows etc
Neither of these worked, unfortunately. Just crashed after opening a class.
tha HNIC /u/Xenoprimate had a cool post on this on his blog IIRC
Alright thanks for the help, one more question? I run Windows on my pc for games, and Linux on my laptop for work, but I do little bit of both on both. Is there a way to alternate between use of laptop and desktop easily, using cloud or something? So I can work on laptop outside or on couch, then move to desktop easily
You can set up a git repository on a site like GitHub or BitBucket. Learning to use git is an essential skill for modern developers. The basic workflow would be: 1. When you're ready to start working on your laptop, pull the latest from the git repo. 2. Make your changes. 3. When you are done working on your laptop, push your changes to the git repo. And repeat the same thing on your desktop.
A online source repository. Github for example 
I'm not that great a poker player. ;) 
Coding to maintain existing applications isn't tough. Coding to build something from nothing is an art and is very difficult, especially with a tight deadline. 
Is that worth signing up for?
If it's Bart, probably.
I've used git to build from source code, like synergy and other software. Does it get much more complicated than that?
Git is essentially a remote place to store your source code. When you've finished working on one machine you can "save" your changes to the remote git repository, then pull these latest changes down to your other machine. Git has a whole lot more too it than that, but it will cover your needs.
The lib is written in IL because it does some things that C# doesn't support, but you can basically see what's there by looking at [the source](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il).
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [dotnet/corefx/.../**System.Runtime.CompilerServices.Unsafe.il** (master → cfcb716)](https://github.com/dotnet/corefx/blob/cfcb716f8234ac78186a5259d532ee16c7f963be/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djku5mz.)^.
Fine, but I didn't post this. 
Saw this blog post yesterday... Might help. http://connelhooley.uk/blog/2017/04/30/f-sharp-to-c-sharp
It is largely considered a text editor (albeit a very advanced one) rather than a full fledged IDE. VS Code is a bit more advanced than the run-of-the-mill text editor, but not quite as advanced as regular Visual Studio. The cut-off line between a text editor and an IDE is vague (and will be different according to who you ask) but most people agree that VS Code hasn't crossed it. Debugging for instance is very basic in VS Code.
I had no idea, just got three month trial. Thanks!
Awesome! Now if one I could get one asa dev kit...
I took a peek through the debugger today and couldn't find DHCP options
I have not tried yet but will report back when I do
I still need to investigate this but will report back when I do
You can make that with any project format you want. The screen is basically made of 4 frames. 1 map frame 1 text frame below the map frame 1 stat frame in the top right 1 command frame below that The text, command, and stat frames are all fairly straightforward and easy. The map frame will take some work if you plan to have it be randomly generated as you'll have to code a custom engine to populate the layout, which will include lots of logic about doors, walls, and so forth so you don't have dead zones the player can't access. Otherwise if you are just going to code static maps it won't be that hard since it will just be an array grid and you'll only need logic to prevent the player from walking through walls and stuff.
See how newbie I am? :-) So just a regular file -&gt; new project -&gt; c# ... application? I am on Win10 with VSC2017
&gt; the common idiom of using an unsigned comparison to check upper and lower bounds in one check (`(uint)i &lt; (uint)a.len` implies both `i &gt;= 0` and `i &lt; a.len` for signed `i`). Is this idiomatic? I honestly don't think I've ever seen it. What's the advantage?
If you aren't experienced with XAML/UWP just start with a simple WinForms application
If it's something you like doing. Really like doing. You will find a way to scale those hurdles. In my humble opinion both Python and C# offer different styles of programming neither necessarily harder than the other. Find a compelling problem to solve, something to build and use the right tools for that job. The industry turns over constantly so knowing when to use a tool is far more important than extreme skill in any one area. Problem solving is what makes programming hard.
Are you referencing https://github.com/microcompiler/microserver ?
DhcpInterfaceOptions exists in here. Interesting.
[Here's a pretty good](https://www.peppercrew.nl/index.php/2013/07/read-dhcp-options-received-by-the-client/) article explaining the hex in there, you might have found it already since it's high up on the Google ranks.
Depends on the usage. Micro-ORMs are nice because they make it a bit easier to map a query to a strongly typed object without a bunch of boilerplate code. Let's go with the most common example. I want to send a list of customer information back from an ID. Let's assume in both instances I'm inside my using block. Normally with ADO and datareaders, you have to: - Do your query var cmd = connection.CreateCommand(); cmd.CommandText = sqlString; cmd.Parameters.Add(new Parameter("param1",inputValue)); //May need more coaxing depending on Database Provider. var reader = cmd.ExecuteReader(); - Create a new List of your type var returnResult = new List&lt;MyType&gt;(); - Start a Loop through the DataReader an row from the data reader. while (reader.Read()) { - Instantiate your destination type. var result = new MyType(); - Map each property from the row to the destination type. result.Id = (int)Reader.Item["id"]; //I hope I got the case right! result.IsClosed = (bool)Reader.Item["isclosed"]; // uggh, my fingers are lazy. - Add this instance to the list. returnResult.Add(result); } return returnResult; Now let's say I do the same in dapper. return connection.Query&lt;MyType&gt;(sqlString, new {param1 = inputValue}).ToList(); 
real time would be nice, but not needed.
Real time is expensive, for the most part. I pay $5/mo for real time quotes from the IEX from intrinio. I'm limited to 10 concurrent connections and 1000 connections a day, meaning I can continuously stream only 10 symbols a day. If you want data from major exchanges it can run you into the thousands per month
I guess I have to ask, since I'm totally lost myself, but how does one study any programming for 2-3 hours a day/at a time? My issue is I don't understand enough to do anything "meaningful" and I get frustrated/annoyed and/or angry (at programming and myself)... So what are some things new programmers can do to effectively use their study time to get better/have a better understanding, while being meaningful-ish...?
ouch! that is way beyond my budget (which is pretty much 0, lol) --- if the yahoo finance api doesn't pan out, I may just look for a way to output some relatively recent stock data in a flat file, and do a lookup against it, or something like that.
It's one of the cognitive overload wankeries. Same shit as `if (123==(a=getvalue())) {}`, that's just pita to see at a glance. **edit:** I suspect this happens when people have problems keeping their methods short but still have that need to see logic in one screen. They start cramming all kinds of "space saving" tricks into their lines and just make the logic harder to see. 
It's faster.. one comparison instead of two.
You can do it with any UI library, but a text app is typical a console app. You can use the Console class to display all those text "graphics".
Many many thanks, I get what you mean. In PowerShell i usually make Custom Objects and put them in an array. You are doing the same, using a list not an array. A couple of questions. I understand that the "using" statement is to make correct use of the iDisposable system. But you are not calling ((iDisposable)Object.dispose()) - is this not the point of the system? And you don't pass the connection string as a parameter to the function, but rather use (_connectionString) - why don't you pass the parameter and what is the _ underscore for? 
It is good to see general improvements to the JIT Compiler. Makes me wonder how .net Native is coming along? Do either of these support auto vectorization of math types I wonder? What wins in general speed? .Net Native or RyuJIT?
It is still very relevant. Some of the criticism comes from the type of example languages used. This is irrelevant as we're talking enterprise patterns which transcend process and machine boundaries. Second it's a book of patterns. You select the pattern that is appropriate and don't just stick them all in. Use cases are provided, you still have to know stuff though. 
I get it free at work, it's pretty good, they have quite a wide range of courses, but I probably wouldn't buy it if I had to pay myself.
We still release our UWP titles using the non .net Native toolchain. Is it worth moving?
I'm still a young C# developper, around 3 years of C# for websites and APis for small and big companies, but it's not because your predecessors built an in-house framework that this is the right way to build a system. C# is a great language but it shine thanks to the core orientation of productivity delivered by the .NET framework and ASP.MVC. Of course if your needs are so specifics that you want a custom framework, don't forget that it will become a HR problem. Talented people rarely want to jail themselves to a company and build a specific set of skills that can't be transferred. But as I said, I'm young. I do think that we are living on the shoulders of giants and that not everything need to be rebuilt. Some of the coolest techs we've seen these past years around containers and micro-services were actually already implemented in the 70's. That said, I didn't read this book, so I will read it and predictably learn a lot of things. If you didn't already, I would recommend the following books. They aren't C# specific but will help you in the environment you are describing: * [Working Effectively with Legacy Code] (https://www.amazon.com/gp/product/0131177052/ref=oh_aui_detailpage_o05_s00?ie=UTF8&amp;psc=1) A mountain of pattern for common uses cases to improve stability and efficiency of legacy apps. * [The Phoenix Project] (https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262509/ref=sr_1_1?ie=UTF8&amp;qid=1498813798&amp;sr=8-1&amp;keywords=the+phoenix+project) An inspiring guide on how to work and migrate from waterfall project toward a more predictable project management methodology.
Removed: Rule 7, spam.
Sry, i updated the post / question
Tell me about it. I wanted to create a product around the data and one place was $1500/no and a $20k year fee 
I could but how would I control them as if they were separate components?
you can always use a wrapper / pinvoke
As well as the other answers, you might want to look into creating custom controls - there are plenty of tutorials including [this one](https://www.codeproject.com/Articles/2016/Writing-your-Custom-Control-step-by-step). You said your page contains many panels. You can basically make each panel its own control. This would allow you to put the code for each panel/control into a different class/file. It also has the added benefit of allowing you to re-use the panels in other places.
unfortunately the ServicesPointManager doesn't exist in .net core. The same functionality is implemented in the HttpClientHandler Class, but it won't work since the curl version built-in to osx won't allow custom cert handling... shity system!
well I tried to add the cert, but I just can't find it... I hate this application...
I'm pretty sure he wants it to actually run in the console. To OP: Which means you should likely choose "Console Application". 
This isn't germaine to your original post, but I didn't find clr via c# very useful. It was interesting, but I didn't feel it helped me.
Not sure if I'm to dumb or I fucked up my system that much it doesn't work any more... Well I won't get it working...
What's it doing now? Also, if you're just doing this locally why not make yourself a self-signed SSL cert and use that on the server?
I tried all the thing mentioned in the Github Issue, but it still tries to use the system curl version. I noticed I'm missing the System.Net.Http.Native.dylib (at least otool says so) Well I would like to add a self signed cert, but this strange software seems not to allow that. It's a filemaker server (some legacy we have here...) and I can't exactly say where this cert is or how I would replace it
My current company pays interns with around the same experience as you $12/hr. That being said, my first job in software development (with zero schooling as I am self taught) I was in the same position as you. They knew me fairly well and recruited me to come work with them. I asked for $30/hr and got it without hesitation, even though I probably would have worked for minimum wage. That was 8 years ago. Without that experience I wouldn't be where I am today, Senior Software Engineer at an amazing company making well over 6 figures. It's pretty easy to lose sight of your ultimate goal when you are negotiating pay, just don't forget your current mindset: &gt; To be honest I don’t really care about the salary, I really want to do it just to get some knowledge and put my project on my resume..
Check out NavigationServices and ViewModel Locators from your favorite MVVM framework.
The viewmodel is just an abstraction of the UI, not the models underneath it. In your case what does the UI look like for a car vs a truck? Is it completely different? If there will be 10+ vehicle types its most likely the UI will be the same template and therefore only 1 viewmodel is required.
Cool! I did not know that this existed in the docs. I'll check it out tonight.
Much appreciated! I actually meant to ask that in the original post. 
are you using datatemplates?
Do you have any suggestions for better resources?
I don't have any experience with Emgu CV but I would do it like this: 1. Create window with winForms or WPF and drop a GLControl from OpenTK in it or use OpenTK's NativeWindow if you don't need winForms or WPF Controls. 2. Use Emgu CV to get the webcam image and perform camera calibration. 3. Perform Pose Estimation with Emgu CV on every frame (resulting in rotation and translation vectors for each marker) &lt;If you're not familiar with the OpenGL API, here comes the difficult part. I can only outline the required steps otherwise this post would be way WAY too long&gt; 4. Use OpenGL to create a texture and upload the camera frame data. (bear in mind that Emgu CV image data layout must not be the same as OpenGL's texture data layout) 5. Create a projection matrix from the Emgu camera calibration data. 6. Create a transformation matrix from the emgu pose estimation data. 7. Render a textured fullscreen quad with the webcam image frame as texture. 8. Render your wavefront obj mesh with the projection matrix and transformation matrix created earlier. If you use some kind of opengl framework like SDL or SFML the last 5 steps MIGHT be easier to do. I can help you with everything that comes after step 3, just tell me where you are stuck.
RyuJIT does not do any auto vectorization. You can do a tiny bit of vectorization manually with Systems.Numerics. 
It elided some code inst List.Add, that plus [this pr](https://github.com/dotnet/coreclr/pull/9539) means quite a bit faster List.Add, which, given how heavily that is used in C# will be quite nice. 
Python is better I'd stick with that 
I don't have all that much experience with different languages and how they work and such, but perhaps you could write apps you created earlier in c#?
So I don't think you should get too hung up on "enterprise architecture" at the moment, partially because you're still very early in your career, but also because enterprise architecture means a lot of things to a lot of different people. At this stage in your career, I really think you should focus mainly on SOLID code, core Object Oriented design concepts, and then understanding patterns. Good architectural strategies are built around all of those concepts, but they're also much much more than that. For SOLID code, one of my favorite references is actually [Dependency Injection in .Net by Mark Seemann](https://www.amazon.com/dp/1935182501). Although he does spend a good amount of time on DI, the recommendations that Mark makes for how to properly structure your code in order to take advantage of DI are very useful in understanding SOLID oriented design principles in general. The examples and code really work through the concepts well, so you get a great explanation followed by some well thought out code. [Clean Code by Uncle Bob](https://www.amazon.com/dp/0132350882) is a great reference on how to structure well thought out code that touches on some architectural principles, but doesn't have that as the main focus of the book. Many of the topics in the book you'll find need to be addressed throughout a codebase. As far as design patterns (which are different then architectural patterns), I don't think you can go wrong with the original [Gang of 4 book ](https://www.amazon.com/dp/0201633612), although I personally have a C# specific version, [C# Design Pattern Essentials](https://www.amazon.com/dp/0956575862). I don't want to put too much emphasis on design patterns, because sometimes they get overused and applied too literally, but they are still very useful. I think the key to design patterns is not just knowing what they are, but determining where they might be applicable to your use case, and whether you should make any small adjustments or tweaks to them. After you really have a rock solid base of working with code, then you can shift your focus on more architectural concerns. For that, it really depends on what problem your looking to solve, but Domain Driven Design (DDD) is a good way about understanding those problems and to structure the solutions in a well thought out, loosely coupled, and evolvable manner. That "central framework" that you referenced in your post is the business logic, and its the key focus of DDD
I know that. It is just the nature of applications i already wrote. They just work better as Go projects and rewriting them in C# would be pointless
I know about Console Application. Thing is, I want style. Colorized text. But in a console app, that would be 1 textarea (so to speak).
Ok, I can grasp that. Then create something new, keep creating new apps, it's how I get better and learn new tech/platforms/etc
you have a couple options. if you want it to actually run in a console, you can either build the infrastructure to do that by hand using the console commands available in .net, or use one of the ncurses bindings/wrappers: google provides a few options: https://www.google.com/search?q=.net+curses&amp;oq=.net+curses&amp;aqs=chrome..69i57j0j5.7878j0j7&amp;sourceid=chrome&amp;ie=UTF-8 ncurses is an old lib for doing console text 'guis' The other option is just use a regular graphical api like SDL2 or XAML etc and just only use text to make it LOOK like a console. Effort level is kind of similar, the ncurses approach is hard to make worlk cross platform these days. 
You could bind it using data templates in the XAML of containing view. ie &lt;ContentPresenter Content="{Binding MyVehicle}&gt; &lt;ContentPresenter.Resources&gt; &lt;DataTemplate DataType="{x:Type model:Car}"&gt; &lt;view:CarInfoView/&gt; &lt;/DataTemplate&gt; &lt;DataTemplate DataType="{x:Type model:Truck}"&gt; &lt;view:TruckInfoView/&gt; &lt;/DataTemplate&gt; &lt;/ContentPresenter.Resources&gt; &lt;/ContentPresenter&gt; The whole list of mappings could be an external resource. In my view this is a really good resource to demonstrate all possible approaches http://paulstovell.com/blog/mvvm-instantiation-approaches I think you could use the viewmodellocator pattern and use it to hold the linking of view and viewmodels
Going to be hard to help without actual code examples. Can you replicate the behaviour with code and share that here.
good post. Have to say Rfc2898DeriveBytes for aes256 is a performance nightmare. Any suggestions on how to stay secure but increase the speed? - keep the same salt, change the IV for each pass?
These methods get called a couple hundred thousand times a minute and I was just writing the timer values to a file once every second. I switched to collecting the timer values from every iteration into a queue with a max length of 10k records. I'm then writing out the averages every second. Now that I'm working with averages, the numbers have flipped. Foo now says the average time to execute Bar is 0ms (with a max around 460ms), and Bar self-reports an average execution time of 540ms. Btw, I'm using a separate thread for logging, and adding the log lines to a blockingcollection from foo/bar, so there should be no noticeable impact to statistics as a result of logging.
I'll see what I can do, there's a lot of IP behind "DoSomeWork" but I can see if it's possible to replicate the behavior with a simple placeholder.
What are you targeting? Core, Full Framework, version? x86, x64, AnyCPU? EDIT: After some testing this appears to only occur in .Net Core (obviously, I can reproduce it as well)
Same. 
What is the exact error message that you are seeing?
Profiling using timers is rarely accurate, unless it is a simple scenario. You are much better off using an actual profiler to understand where the bottlenecks are. With that said, out of curiosity: are threads involved at all in Bar or is it all synchronous code?
Bar is calling a write method to a proprietary database server running in the background. So Bar itself is synchronous (no async or Task.Run or anything) but obviously the call to write to the database is going into a bit of a black box. I don't know offhand if the call should return immediately or block. I suspect it should return very fast as the database implements it's own method to queue and drop records in case of queue overflow.
Try this tutorial. He walks through making many important steps of a rogue-like game in C# in great detail, incl. walking you through what type of project to create https://roguesharp.wordpress.com/2016/02/20/roguesharp-v3-tutorial-introduction-and-goals/
Lame. I know its an very hard problem to solve but I feel like in 2017 my .net code should be using at least most of the wider cpu resources via auto vectorization.
You mean like this? http://colorfulconsole.com/ 
Not even the holy of holies the JVM does much in the way of auto vectorization, and even in C++ world with the Intel compiler being the best (usually) it can only auto vectorize really trivial cases usually. The problem with JITs is there is no time for that kind of analysis, like there is with ahead of time compilation. Why do we use JITs so much then? I don't know :) 
Another critical flaw in RyuJIT. Microsoft screws the pooch again as they made RyuJIT enabled by default so ANY .NET 4.0 x64 app will break.
Other post proves issue is in RyuJIT.
I cant help but think that they could spend that time on analysis and the cache the results for future use. But I understand why its such a complex issue.
Whoah, no way. I'd love to see that repro. Do you know what version of the CLR you are compiling against?
I see in other posts it is a Core bug. 
Are you guys just a bunch of Microsoft employees or something?
Not just core. See my other post here; I'm compiling and running against the full Windows .NET framework. Most likely it's in RyuJIT or some other shared/ported code in the CoreCLR.
I didn't spend much time on it. Mostly had my doubts it was legit and wanted to see for myself. I thought it calculated correctly for me when I targeted 4.6.2 in x64 but I could've rushed and been mistaken or had some other difference I didn't notice.
Ah, I see. Super convenient repro, I bet it won't take long to find the bug. 
Not I. I've just been writing C# since late 2003 (that was v1.1) and have occasionally needed to talk to product support.
It is actually quite simplified over the original code. It is easy to tweak something and have the problem go away. The original code was compiled for AnyCPU and failed.
For Microsoft, this is yet another regression in RyuJIT that would break existing applications and why RyuJIT should be **OFF BY DEFAULT** for prior frameworks to 4.6. Microsoft has shown extremely poor judgement in breaking old applications from unwanted features when the absolute critical requirement for enterprise patching is to **solve security holes** and **not introduce regression** risk and whoever is responsible for this decision is clearly not the right person for the job.
The code worked for a long time and then it didn't. If the code failed this spectacularly the first time I wrote it, I would have assumed I was doing something stupid, tried something different, and just assumed I fixed my own bug.
Things that are unclear to me after reading your post over: * Are MagicExpando / ExandoObjects a class you have written, a library you are using, or something else? You are using the term like we should know what that means. * What are you trying to do? Just avoid a null check?
`ExpandoObject` is a part of the BCL: https://msdn.microsoft.com/en-us/library/system.dynamic.expandoobject(v=vs.110).aspx `MagicExpando` I think is just the name of the instance variable/class that might be an `ExpandoObject`.
That makes a lot more sense. I guess I need to touch on DLR concepts more often.
I appreciate the response, but I do think I'm ready to move past SOLID principles (though I will always review with different resources to keep those sharp, so I will definitely check out Dependency Injection in .Net). I've read Pragmatic Programmer and Code Complete 2 from cover to cover and I've read alternative books on design patterns (since I find GoF extremely dry), and taken many pluralsight courses on SOLID principles to supplement. I do keep a copy of GoF near my desk to reference when needed though. I also covered about 50% of Clean Code in my final year at uni in a software engineering course, and I found there was a lot of overlap with Code Complete / Pragmatic Programmer. I hope I don't sound like I think I'm a master in SOLID and the foundational principles, because like you said, I'm still early in my career and far from being advanced. I do, however, think I'm ready to start building towards broader design development while still keeping up with sharpening my foundation. I will see if I can find Domain Driven Design, because that sounds just like the type of type of book I'm looking for. Thank you!
&gt; is dependent on whether you're interested in learning about how ASP.NET MVC/WebApi was architected and designed. PEAA is a book on Architectural Patterns that underlie all web frameworks (Rails, Django, NodeJs, ASP.NET/MVC/WebApi). That is **exactly** what I am looking for. I mentioned in a response to someone else that I've read Code Complete and PragProg, and quite a bit of Clean Code, so I'm not really looking to read more on foundational coding practices, but rather how to architect and design/build larger frameworks. I really appreciate all of the book suggestions you've given. Other than the three I said I have read, I haven't even heard of the others that you mentioned, so I will certainly check them out!
They should fork in to a new product and drop the enterprise brand in to the past. 
You didn't go into too many details, so I just wanted to make sure you weren't missing the things that make for a a foundation. I think Domain Driven Design is a good path for you, mainly because it doesn't necessarily over prescribe a technology stack (those are in constant flux) and focuses on the fundamentals of designing for a domain and understanding how to deal with the complexities that come with it. [Eric Evan's book](https://www.amazon.com/dp/0321125215) is a great place to start. Personally I have two other books that are incredibly helpful for DDD. The first is [Implementing DDD by Vaughn Vernon](https://www.amazon.com/dp/0321834577), and the second is [Patterns, Principles, and Practices of DDD](https://www.amazon.com/dp/1118714709). I think the second is a little more along the lines of what you're looking for, but doesn't go into as much of ideas and structures of DDD. What it does do is go into more of the patterns that you're far more likely to see in an enterprise application. Two patterns that you should pay attention to are Command Query Response Segregation (CQRS) and Event Sourcing. CQRS can be used in a number of ways and incarnations. Event Sourcing may or may not be applicable in your application, but its useful to think of an application's state and interactions as an immutible ledger of events. If you go down the road of microservices, then I strongly suggest you also explore message queues as well. Although they certainly are useful, microservices are seen as somewhat of a fad or buzzword. Message queues, and the patterns that go with them, are quite useful in this context and also applicable in more "traditional" service oriented architectures as well. A great book for diving into those messaging patterns is [Enterprise Integration Patterns](https://www.amazon.com/dp/0321200683). NoSQL and Big Data solutions will likely come up along the way, and although they are worth exploring in their own right, I think its important that they are implemented for the right reasons. I'll leave this here for now, if this is something that you want to explore further, I'd suggest reading through [Fowler's Polygot Persistence](https://martinfowler.com/bliki/PolyglotPersistence.html) as a good jumping off point
It's quite flawed. Rather than learn Java and Objective C for iOS and Android, you can learn C# to build for both those platforms, in addition to Tizen and Windows, but this option is not mentioned. Rather than learn C++ for game dev, C# is also very popular and supported in Unity and CryEngine, but is not mentioned. C#, the second most popular back-end language for web development, is not mentioned at all in the context; rather Ruby and Python are mentioned, which are minorities in the space and have much poorer tooling. 
If you are calling Bar from multiple threads that is your problem. Instance methods of Stopwatch are not threadsafe and BarTimer is static. Also, you should use something like http://benchmarkdotnet.org/ for this.
ready my comment further down, I agree with you.
Thank you!! This was such a great in depth answer and exactly what I was hoping for. I now have reading material for the next 2 years (no seriously, I added up all of the pages between the three DDD books and the Integration patterns book and it's roughly ~2500 pages!). Hopefully I can sneak in some of the other books people have recommended in this thread. Also, I know I hadn't fully gone into what I had already read before, so it's a good thing you checked that I had started with the first principles. Everything you wrote will definitely be useful for a lot of other readers, I'm sure.
Not sure what you mean?
This got to the right people. Sorry product support wasn't helpful. I've sent this along to the JIT team, they'll take a look next week (though unfortunately I'd expect a delay...most people are out monday and tuesday is a holiday). Thanks for the bug report, sorry for the trouble.
Meh, it's complicated and it doesn't matter.
Hey! I am building a desktop (REST) API client using a new cross-platform UI framework called [Avalonia](https://github.com/AvaloniaUI/Avalonia) The idea is to build a client where requests are just plain-text files. This should allow simple request sharing between team members (using GIT for example). What I have so far: * https://i.imgur.com/GdiDSGU.png * https://github.com/x2bool/restofus
[removed]
Seems like this has been fixed in later versions of RyuJIT (in the .NET Core 2 previews). Not sure, am trying to reproduce this.
If you're just starting then you should learn Windows Presentation Foundation (WPF) instead of Windows Forms.
hehe functional programming still seems to be the redheaded step child that is nevertheless a savant. 
Hm, when learning C# I’d probably stay away from “dynamic” and friends like ExpandoObject.
Working on total scrap and rewrite #6 of a language transpiler/compiler im working on for fun called XamlSharp (X#). Its influenced on QML, but has a lot of strange language features like metaprogramming, templates, macros, generative code with logic flow and expressions, #includes, a weird type of "mixins", XAML/WPF styles with multiple inheritance, a more C#-like namespace system without the need for NS prefixes, etc. Its very very abuse-able as a language but im mostly doing it for fun. Compiler theory/Parser/Lexer/Syntax analyzers are so interesting to be but insanely fucking hard, i did not expect such a steep learning curve.
PEAA is among the best of the pattern books for software architecture (in addition to Refactoring to Patterns and Working Effectively with Legacy Code) for architecture of the 90s and 00s. But as far as modern software architecture, things have moved significantly away from PEAA in recent years. Modern web applications are based on patterns like; CQRS, Event Sourcing, Messaging, Actor Model, NoSql stores, etc. The canonical books on the subject are Eric Evans, Domain Driven Design (blue book) and Vaughn Vernon's Implementing Domain Driven Design (red book). Microsoft also did a very good ebook on this type of architecture called CQRS Journey, you can grab the pdf from [here!](https://msdn.microsoft.com/en-us/library/jj554200.aspx). The first appendix has a very good introduction to the set of patterns used in this newish (past 10 years) architecture. Good luck EDIT: clarified some items, added red book notation
Can you elaborate on the use case?
Dear Reddit, please do my homework.
I really like this idea. Could be very helpful when working with an API for the first time allowing one to see the results in their raw firm. 
Eh, how does Avalonia feels against WPF?
https://msdn.microsoft.com/en-us/library/w6t65c4y(v=vs.100).aspx this.webBrowser1.Navigate("http://www.microsoft.com"); 
I don't consider myself an expert in WPF, but it feels really similar. If you're familiar with WPF, you should feel right at home. Also there is this document: https://github.com/AvaloniaUI/Avalonia/blob/master/docs/tutorial/from-wpf.md
[removed]
Yeah, that stuff can be insane! Your projects sounds interesting. Have you looked into projects like [Ammy](https://github.com/ammyui/ammyui)?
Yes i have! Ammy is really cool. I posted about it a while back and it didnt get much attention which i was surprised about, XAML is infuriating and limiting and ugly on so many levels
I ended up saying fuck it and coded it up in unity using vuforia. If I get some free time next weekend I'm gonna give your solution a shot though! 
I agree I need to create something to exercise but I just have no idea what. It's super simple to create a rest api or single purpose web app in both Go and Ruby and it feels like C# and its ecosystem is just too "enterprisey" (meaning complex). I am also not sure how to go about this .net core and the rest. 
I used __arglist in an c++ c# interface, but only once.
Context for what I know, here is my site/portfolio/resume: www.Blissgig.com I am a business software developer, so yea I agree that C# and many of MS tools are designed for use in creating business applications, and because of that it is more complex. So yea, it seems that you are overwhelmed (understandably) It happens, and will happen for the rest of your life as tech is SO new and there are new things coming along all the time. eg: I am playing with Unity 3d now to create VR apps (Unity uses c#) and WOW is there a lot to learn. So, do not stress too much about it and do not feel bad that you don't know something, as there is ALWAYS more to learn. All of this is why I suggest creating an application, some thing you want or need. There is so much to learn, just learning the Framework will not get you the knowledge you need, and in my experience, the tech changes so often that memorizing a technology is a waste of time. It is the fundamentals, the ideas of development that you want to know. Building an application, and make it big, will teach you so many things. Create a specification, which is a good thing for developers to learn to do, and add as much detail as you can. Don't worry that there may be another app that you can just download to do whatever it is you want, build it yourself. For example I built a media player for my TVs. All the ones that I saw were slow or didn't have the features that I wanted, now I use mine every day and it's just what I want. Another thing (as long as I am rambling) is that decades ago I worked with a guy who told me; "you are only as valuable as the time it takes to replace you." - Meaning, lots of people can do the easy things, few people can do the complex things. C# and all those other tools are complex, and take time to know... which gives you value to an employer. If you have specific questions, feel free to ask.
You could refer to the Microsoft recommendation about the code style and naming conventions: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines
Looks good . The only small points are that you should capitalise class names and namespaces also comments should be formatted as below (if your in Visual studio type /// above your method and it will auto add the rest ) E.G /// &lt;summary&gt; /// Tries the set the model to "start" state. /// &lt;/summary&gt; 
&gt; I suspect this isn't going to be enough information but I thought I'd try. You are right. Measurements without context are meaningless. We can't help if we don't see any code.
I guarantee you, you do not need to use `dynamic` or an `ExpandoObject` doing so is going to cause you a world of hurt. I have only ever known two real use case, every other use case was because the dev in question was being lazy and trying to write clever code. In those cases the code was quickly reverted because using `dynamic`'s was not the right solution.
* `Function` is too generic, classes should have a single responsibility, yours prints stuff and selects a save game. Those two things have nothing in common. * If you keep coding your game like that, you will likely have a veeeeeeeeeeeery long main class with a lot of `switch` commands and a lot of hard coded string. You don't want that. Try to find a way to separate the engine from the content.
Thank you! There's another commenter in this thread that is a big proponent of the DDD books you mentioned. I'm still wondering if I should read PEAA though. Would it give DDD a lot more context? Or does the blue book stand on its own just fine?
Thanks everyone!
OK, lets touch upon the current C# technologies for creating different app types: * Desktop Apps * WPF * UWP if you're targetting Windows 10/Xbox One only * Mobile Apps * Xamarin * UWP for Windows mobile only * REST APIs * ASP.NET WebAPI * General Web development * ASP.NET MVC Note that you can mix ASP.NET WebAPI and MVC in the same project, although it's not strictly the best idea.
Yeah I agree now, while I could access it it looks like it was instancing it only if I called. 
I agree, I found another way. Thank you, what would be a real use case?
Thanks, i'll change up the class names and split the functions.
In line 18 you're creating an array with 50 elements. In the following lines you assign values to the first 5 entries. In line 25 you iterate **every value in your array** (all 50), then call `function.B64` and passing the element from your current iteration. You have 50 elements, but you only assigned 5 of them, leaving you with 45 `null` references. In line 3 you then pass the argument (which is `null` in your sixth iteration) to the method `GetBytes`, resulting a `ArgumentNullException` because the argument you pass is `null`.
This may come in handy at some point. https://www.reddit.com/r/roguelikedev/
OMG! Thanks so much, i just changed the array declaration to 5 and it worked! Thanks fellow coder and have a great day!
&gt; I have just started to learn C# &gt; and just started working on a console rpg I know this is tangential to your code review request, and I don't want to discourage you, but game engine design is an overwhelmingly daunting task for beginners. I recommend taking a look at a few existing console game engines: - [SadConsole](https://github.com/Thraka/SadConsole): engine built on top of Monogame (the open source successor to XNA) that emulates a console window. In active development. - [SunshineConsole](https://github.com/derrickcreamer/SunshineConsole): engine built on top of OpenTK (an OpenGL wrapper). Lightweight and mature but not in active development. I can't vouch for this one but it's very simple and I know others have had success with it. - There are a few Roguelike-oriented engines like [RogueSharp](https://bitbucket.org/FaronBracy/roguesharp) that may or may not provide functionality you need for your RPG (pathfinding? FOV? Bresenham lines?). Also, to echo u/sixothree, r/roguelikedev sounds like it would be an invaluable resource for you.
Thanks. I appreciate it.
1. Publishing messages onto SNS-SQS following the fanout pattern via our own abstraction. 2. Communication between *n* WCF endpoints
Have you tried to change your foreach loop into a for?
Yeah no change 
 icount =+ 1; You're not adding one to `icount` (`icount += 1`), you're setting it to positive `1`.
Oh thanks alot! Have a nice day 
Out of interest, has anyone attempted to change this: ba20d[n] = (byte)(ba20b[n] ^ ba20c[n]); So that the bitwise operation was masked to a byte before the cast? I'm wondering if it is a quirk relating to casting from signed values (can't test myself right now).
You will use some of the patterns from PEAA when using the CQRS style architecture (domain model, some of the data access patterns), but you won't use them the way they are described in PEAA. I would get the ddd quick start guide, read that as an intro, then vaughn's implementing ddd book, then go back and read the full eric evans blue book.
Learn to use StyleCop, it's a Visual Studio plugin.
You should really look up on how to use a debugger. This would haves solved your previous and also this problem. Step through the code, line by line, and examine the values. Are all the values as you expect? You would have noticed the mistake then.
I'd suggest an approach involving localization/globalization, even if you're just using a single language at this time. It would be good to learn and you can separate all of those strings into a resource file. Edit: CDN Urls and file paths should probably be in AppSettings of your web.config so you can modify them without having to compile the application.
Resource files are all well and good until you work with source control. In theory it should work fine, but every friggin time I alter the string resource file and don't check it in super quick, it's merge conflict time. This is with c# and SVN. If I was to start a new project I'd abstract it away behind an interface and do a Mickey mouse implementation, using enum values as keys into a statically declared dictionary.
Better yet, add a reference to stylecop analysers from nuget!
I personally haven't really got into the habit of using NuGet. I don't use a lot of plugins anyway.
Are you referring to to [DDD Quickly](https://www.goodreads.com/book/show/2558105.Domain_Driven_Design_Quickly?from_search=true)?
Maybe your computer's dying?
Have not had issues my only issue is starting the program as it takes so long to load. But once up it seems fine for me. Though with the memory usage are you using any free antivirus software it could me interacting with vs in odd ways 
&gt; public const string TAX_NEXUS_ID = "TaxNexusID"; Ok, where's the SQL Injection vulnerability? Clearly that is being used for something inappropriate.
Get a better computer. We never have any problems with it. Its the best IDE you will ever use, presuming that your machine can handle it. We use exactly what you installed VS enterprise and SQL Express, on a at least 10 laptops all owned by students. Never have errors like that. What about your internet? So what are the specs of your machine? For years I ran it on an I5 series 3, with 10 gig ram and an SSD drive. Just updated last month. I do get a crash about once a week. The keyboard stops inputting and I have to restart the program. But thats all.
Use system restore to go back to when it was working, then install anything that you updated one by one til you find the issue. Check your file system for errors while you are at it.
I'm running Win 10 Pro on my PC with 8GB of RAM and an Intel Core I5 661. I'm not sure if it's the matter of specs. It worked fine for a month or so. And upgrading it isn't an option as of right now.
That'd also include the Creators Update if I got it today, right? It's a good idea but thinking about it and my internet speed just kills my motivation instantly.
I name my form variables the same name as the corresponding sql fields. That string never gets close to the database. I always sanitize and parametrize anything that goes into a query.
Those specs are OK. I wonder if there is a corrupt file that has come in during installs? Can you isolate where the crash happens? BTW I love Enterprise for the code lens. I couldn't live without it.
Yea, unfortunately that would include any updates. It's probably the best shot at solving this short of a refresh from what it sounds like. Try to run the chkdsk in the meantime and see if that comes up with anything. File system errors can cause some really weird things to happen.
That's a bad solution as someone involved in translation doesn't have to be a programmer. You need to pre-process (sort) the resource files before comparison takes place. Here is how to do it (generally): https://www.codeproject.com/Articles/37022/Solving-the-resx-Merge-Problem Here is how to do it if you are using TFS: https://www.codeproject.com/Articles/649736/Solving-the-resx-Merge-Problem-in-TFS
Edit, what type of projects are you loading? Are they something non standard? 
I used chkdsk with `/F /R /X /spotfix` on the drive where I have my VS installed but it finished scanning really quickly: The type of the file system is NTFS. Volume dismounted. All opened handles to this volume are now invalid. Examining 0 corruption records ... 0 corruption records processed in 0.0 seconds. There is no list of previously identified issues associated with this drive. No further action is required. Now I'm doing just `/F`. I also scheduled it for C:\ but that will need a restart. Okay then, thanks for the pointers, I'll see what I can do with this.
I don't know that I can give a real in depth answer, but one thing I can say is that the MV~ patterns are just that. Design patterns. If you wanted to, you could code a WPF app using MVC, it just might be kinda hard. ASP.NET MVC is just there to assist you along the way, sorta how you could use MVVMLite or Caliburn.micro to assist with a WPF app. It's all about how you structure your code really, and there are tools to help you achieve what you want. Some of these technologies are just kinda made with a certain pattern in mind, so working with that pattern makes things easier. Same goes for angular. I don't do much angular, but I think they've flipped how everything is named in more recent versions. I'm probably wrong, but I think controller was an angular 1 thing? Just a conjecture, but the change might be at least partially to help prevent confusion like this. I hope that's kinda what you were looking for. I'm still a very new developer myself but I've been doing a lot of reading on design patterns recently
I'd just do a clean install of Windows. Something got corrupted somewhere. File, bad memory, something else. VS2017 has been pretty solid for me and everyone I work with. What you're experiencing is not normal.
That much I've gathered from all the coments that people posted last time. It's definitely not usual. I would gladly reinstall my Windows without a second thought if my internet speed wasn't so crappy. I'd have to reinstall a lot things that I no longer have the files for, like the VS itself, SQL Server and some additional software. That being said, I just might do it anyway this week. Will the `Restart your PC` from settings on Win10 do? Or do I have to the format and reinstal the old school way?
I'd recommend making a bootable and really doing a clean install. Asin, when you get to the part where it asks you what drive to install on, wipe all the partitions on you is drive and install there. https://www.google.com/amp/s/www.techworm.net/2016/12/create-bootable-windows-10-usb-installation-disk.html/amp
If you report it in visual studio you will get emails asking for more from developers within a day or so.
I had the issues you described with VS2015. 17 has been working fine for me, wish I could help!
Is there a typo here? I don't see an ElapsedTime property of the StopWatch class. I typically see the the StopWatch.Ellapsed.TotalMilliseconds property called. Also, your FooT2 and BarT2 calls immediately after Restart() are always going to be 0, so it's probably not worth the overhead of calling them, and they may affect the internal stopwatch vs external stopwatch time difference.
Yeah it was a typo when paraphrasing the original code. ElapsedMilliseconds is what was used. And T1 is often very low but not always 0 as the original code does some other work before the call to DoSomething. I'm still seeing some strange stuff with the measurements but I give up. I'm sure it must have to do with some threading voodoo, especially with the "black box" engine behind DoSomething. And I can't post any of that unfortunately.
It sounds like a potential hardware issue. Run a memtest for starters, then try replacing some hardware and see if it goes away. I haven't seen visual studio 2017 do anything like that before and i manage it on many many computers.
Don't bother doing it the old way, refresh your pc does the exact same thing by re applying the system image. And you won't lose all your updates.
Try reinstalling windows?
That or DDD Distilled https://www.amazon.com/dp/0134434420/ref=cm_sw_r_cp_apa_DogwzbS6XRA70
Thanks :)
&gt;:) I am happy that you are happy. Spread the happiness around. [This doggo demands it.](http://cdn-www.dailypuppy.com/dog-images/cecelia-the-poodle_64452_2012-02-14_w450.jpg)
Cool, thanks!
I think turning your Label class into an enum and just using a Description attribute to retrieve the string representation would be a good idea.
This isn't a resource to learn C#. Once you know C#, this is a resource help you how to write *good* C#, instead of 'spagetti code'. I'm sorry its not really useful to someone learning to get into programming, and it probably isn't, but basically, you're better off learning C# from some good sources (I recommend https://unity3d.com/learn/tutorials and the very reasonably priced https://www.udemy.com/unitycourse/ (never buy from udemy at full price; you can pick it up on special for $20 every other week)). Then... once you have some knowledge of C#, you can, as needed, get into the deeps of design patterns; (Code Complete is an excellent book, just find it on amazon 2nd hand) is an excellent guide to this sort of thing. ...but ultimately, industrial strong design patterns for writing excellent code is probably not what you're looking for (and Game Programming Patterns isn't either, because its not that *or* anything useful either). I recommend the unity course on udemy, or, if you want some concrete examples specifically of RPG stuff like an inventory system, Ben's RPG course (https://www.udemy.com/unityrpg/), or buy some samples from the asset store (but you get no docs for most of them). There really isn't much free material out there for that sort of stuff. (and once again, never buy anything full price on udemy. If it doesn't show up as on special for 80-90% off, search google for "udemy promo code" and you'll find a code, or try again in a week)
Angular has the advantage that the UI updates when the model updates, which ASP MVC doesn't have. Also, if you think it's messy, try typescript or something else strongly typed. 
You'd use .net as an API. The general reason for isolating them is it can make it easier to share services for other things (namely, mobile apps). And of course it allows you to switch front end frameworks (e.g. use React or Vue instead) without revamping the API.
Then my main objection is that the name "TAX_NEXUS_ID" is not meaningful. It says nothing that you didn't already know from the string literal. In fact, it's misleading. If you insist on using a constant, call it `TaxNexusID` or change the string to be "TAX_NEXUS_ID". **** Having a separate "strings" namespace is also troubling. Constants should be defined close to where they are used. Having a separate file of just randomly selected constants is an anti-pattern in OOP style programming. (And I'm not convinced that it was a good idea in C.) **** At the end of the day maintaining these constant lists is probably not worth the effort. The odds of it actually preventing a bug are roughly the same as the odds that they introduce a bug. I know that sounds odd, but hear me out. Every time you add a new field someone has to copy and paste a constant, then remember to change not only the name but also the value. This is an error prone step on top of everything else you need to do when adding a field. But it's also tedious, so people won't pay attention when doing it.
If you have done a lot of WPF development you should be right at home with Angular 2+. View-&gt; Html Template, ViewModel -&gt; Controller, Services,Domain objects, etc -&gt; Model. The big distinction that separates MVVM from MVC is the availability of two way binding to facilitate direct realtime communication between the view and the view model, where as the view and controller in MVC are basically disconnected.
If it's just a one line read-only property you can neaten it up by doing: `public static string Greeting =&gt; $"Hello {Username}";` Also you should use the string interpolation over string concatenation (prefer the $ style above to the string + string style) it's less for the garbage collector and it's more readable. 
Ah two-way binding... that's enough for me to use it right there.
So basically, just use core as the API and host and use Angular for the views and viewmodels?
I would just advise staying away from static methods and classes as much as you can, try to think of a method really should be static every time you write it. If it's small and doesn't change the data that's passed in, it's ok. But if it does something to a parameter or is quite a long and complicated method, you're probably better off making a class and having multiple methods to do what the first method was doing. That's the OOP way anyway and since this is C# you might as well write as it was intended. 
Yeah. And the entire application can sometimes be done on one page if it's fairly simple with a similar layout, which gives a nice user experience because they're never looking at a white screen waiting for the html to be rendered. 
That sounds perfect to me!
You mention in your OP finding a tutorial that combines the two. If you have access to PluralSight, the video by Shawn Wildermuth for Building ASP.NET Core Applications with EF Core, Angular, and ASP.NET Identity gives a pretty good breakdown of all the components of .NET Core.
I do have a sub to Pluralsight. I'll check it out right now. Thanks!
It's about 6 hours in length IIRC (I don't have access to a pluralsight subscription right now), but every single learning module is great for breaking down the interactions with .NET Core, and the nuances it may provide.
Thanks for the info I appreciate it. So I got a very specific question. So I think the issue I have with programming is that it is always taught from a very abstract standpoint (where we learn specific procedures of how to do something; say print "Hello World" to screen); but it hasn't been presented to me in any sort of framework, just kinda "A La Carte". For some reason I'm having issues either making obvious connections for said framework, or I just haven't been using the appropriate materials (books, tutorials). Is there a good source that actually teaches/shows you C# programming, with basic computer/software engineering (or software design) included? Because I'm a very "Big Picture" sort of person and need to understand how the system works to fully comprehend stuff...
T4MVC should do what you need. Alternatively you could take a look at MvcContrib.
Two-way data binding is terrible, I think angular moved away from it post v1. It was great up until your app was no longer simple, then you'd really see performance issues.
&gt; The big distinction that separates MVVM from MVC is the availability of two way binding to facilitate direct realtime communication between the view and the view model, where as the view and controller in MVC are basically disconnected. Ah, I think that's a big piece of the puzzle that hadn't occurred to me! Thanks!
&gt; one thing I can say is that the MV~ patterns are just that. Design patterns. That's true, and a good reminder. I think what I'm really interested in, though, is whether there are any nuances of "best practice" that might be hidden in the phrases that I was missing. &gt; Same goes for angular. I don't do much angular, but I think they've flipped how everything is named in more recent versions. I haven't looked into the newer versions yet, although I'm booked onto a training course covering them later in the year. So I'm only asking about AngularJS (aka Angular 1) because that's the only one I'm even slightly familiar with. Sorry if that caused any confusion!
Angular? Pahh it's all about react nowadays. . React? Pshhh it's all about vue nowadays . Rinse and repeat 
You would be better off just googling for an Angular tutorial and an AspNet Core tutorial separately. Unless you're doing something really funky, these two frameworks will make up two independent layers of your app and shouldn't have any influence on each other in the implementation.
Note: Angular is generally used with REST services on the backend, such as WebAPI.
Totally agreed. I think, the better way is using asp view level only for base initializing angular layer(for example via ng-init='ctrl.id='@Model.id''). So you don't have to learn angular-asp at the same time, some people even debug\develop angular+asp application on different IDE and different servers(IIS VS node)
pluralsight has brilliant front to back angular 2 asp.net 
This is a ban for spammers.
Might be good to look into how to use the debugger, run the code line-by-line and see exactly what goes wrong and where =)
Retard.
Also watch any of Scott Allen's Pluralsight videos on Angular and ASP.NET, that man is one of the most talented teachers I've ever seen.
How do primarily front end developers deal with this? I work in full stack with very limited front end work, if I had to deal with the ridiculousness of JS frameworks I'd flip my table. I think Aurelia is another framework on the rise?
Use ASP as a way to serve up your Angular app in one go, then provide CRUD and whatever else you're doing through async WebAPI calls. This is preferable to me because you're never reloading the page, which makes the user experience way smoother. Also Razor is rather unwieldy compared to normal HTML, but that's a personal preference I guess.
As standard as it gets. Mostly small UWP projects or solutions with a console app and an ASP.NET WebApi on a really small scale. Same thing was also happening when I was making a simple WPF application a few days back. At first I thought it might be caused by VS extensions , so I disabled them, including CodeLens. I definitely felt the difference in everything except for performance. Somehow VS2015, which I have installed alongside VS17, works fine despite having many more custom extensions and addons installed.
Alright, I'll do the memtest in a second. Still, I have no issues whatsoever with VS2015. Seems like it's exclusively VS2017 that isn't working. Can this really be a problem with hardware?
Maybe?
Reinstall Windows. This is serious advice. Make sure you have a SSD.
Exactly. However, I would suggest learning React or Vue instead of Angular. 
Those are 6, 4, and 3 years old respectively (angular, react and vue). It doesn't change quite as fast as people like to make it out.
Why? His primary reason is looking for employment. Stats I have seen say that Angular is still the most popularly paired with ASP.NET Core.
&gt; SSD My next investment after buying a new phone. It's seriously difficult to live without one these days.
I'm not sure these are really issues because 1. They aren't randomly selected constants. I clearly have them grouped by their purpose and where in the program they are used. 2. What do you mean I would be copying and pasting a constant? You set the value once then reference the constant in your code. If the value of the constant changes, you only need to change it in one place, which is far from tedious or error prone. The constants do not have to be named the same thing as their string literal.
Got any of them examples? edit: spelling mistakes.
Ah yes, Flavor of the month frameworks. Been programming for 22 years and it never ends. I remember when people were using perl (not a framework, but still) Now all these other frameworks are the new perl to me. React, angular, node.js, etc. Honestly I see no point spending hours upon hours learning angular, or all these other things, when I would seriously have the entire UI logic written in jQuery to hook my api calls in literally an hour. It's very hard to differentiate between what saves time and want doesn't these days because everyone seems to have a new shortcut. For example was learning angular, and 2 days later still confused on how any of that would save me time. It felt like it have to spend weeks to learn a shortcut to make my initial UI tasks quicker/easier, except the initial task is only a day of coding at most and the shortcut is unnecessarily complicated. Edit: not saying some aren't useful, but when you have 50 ways to do the same thing it becomes a little inundating in figuring out what's worth learning and what it will save me in the long term.
That looks pretty nice, automagically generating links and views. I think I'm going to add that one to this project.
React is certainly tending massively upward though. Either way, not bad to be familiar with both. 
Hey thank you for such a thorough answer. Yup this is what most of the teams are doing here. Business applications. It is not anything fascinating or complex it's just a different paradigm (at least to me). I am overwhelmed by the vas ecosystem. I try to compensate on it using PS but PS is not that similar to the rest of .NET ecosystem (or well the way it is used to create the business apps). I was and still am worried about where to start digging.
Great answer! Thanks. Desktop apps -&gt; I know that my team mates maintain a few apps in WPF. But I have the feeling this thing is more or less "dead" (aka legacy shit no one wants to touch). Am I correct here or I am mixing different technologies ? I think we are not using UWP anywhere but I might be wrong. Xamarin -&gt; Yup this and Xamaring forms is what they use for iOS/Android/Windows Desktop new apps. REST APIs -&gt; they mostly have soap apis in .NET and REST apis in Java Web development -&gt; i think it's ASP.NET, iis sites, and .NET core.
Hi. Forgot to reply. I wish but I do not maintain a single Rails monolith that I could rewrite in C# and the rest of the apps I own are Go apps where it would be pointless to rewrite them in C#.
Even this is a troll comment I honestly prefer Ruby to Python ;)
I don't know if the following statement is going to make you feel better or not; After 20+ years of development I still get overwhelmed. There is, effectively, an infinite amount of information to know about... You might want to read about [Dunning–Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect) The reason I choose to create an application as a way to dig in is that I want the end-result, so it drives me to continue. Yes, I quit working on a project... and then an hour or day later I pick it back up. It's just something that takes time. I am currently working on a VR race/chase game, and I have never built a game (seriously out of my depth!) but it's coming along and I am learning a lot. Game development really uses OO very well btw. The other reason I always tell people to create apps, is that it gives them a more rounded experience; Creating a specification, researching technologies, building testbeds, testing, etc.
If you think you need it for employment then go for it, but personally I don't like it. I believe Angular 1 and 2 are quite different however, so be cautious. I don't believe Angular 1 or 2 offers anything you can't do with raw JS and jQuery. I read through the thread and someone mentioned two-way binding. I wasn't aware of this but you could always do that with an AJAX call. Perhaps it's got something to do with loading the whole website up-front, though I'm not sure what that means for security. E.g. in my websites I build private control panels which regular users don't need to know about. Though if you need it for employment, then learn it. I'd start here: https://www.youtube.com/playlist?list=PL6n9fhu94yhWqGD8BuKuX-VTKqlNBj-m6 
You seem sad :( ... Here's a picture of a cat. Hopefully it'll cheer you up: http://random.cat/i/kitty-says-fuck-the-police-4921.gif ^The ^internet ^needs ^more ^cats. ^It's ^never ^enough..
The ASP code in C# will run on the server, the angular code in javascript will run in the browser. The two will communicate: the Angular will be the client of the API endpoints.
Angular is a client-side framework while razor is rendered in the back end. When building angular apps (SPAs), you are effectively building a rich client (JS) and an API (Asp.net). Those are two separate apps.
No it's not the same. Refreshing will restore from existing files, which can also be corrupt. I've done refreshes and the issues I've refreshed for have still persisted. It's not the same as a clean install. 
Maybe when you work on small projects. We are finishing up a 2 year project that used one. By the time you are done the framework is either already outdated or on the way out the door and you can't hire anybody to maintain it. The state of front end is a huge hot gaping asshole mess right now. I long for the days of never having to touch it again.
Surprisingly, I haven't seen this mentioned yet. The main reason to use Angular with ASP.NET Core is performance. In general, your application will respond much faster to clicks and other interactions, because the DOM is manipulated within the browser instead of requesting that the server build everything from scratch again. You can obviously accomplish all of that by writing your own free-form JavaScript to make AJAX calls at the appropriate places. The reason to use Angular instead would be to organize and structure your JavaScript so that it's easier to maintain. 
&gt; For years I ran it... You ran VS2017 for years? TIL about the time travel extension.
How do you add a new constant? If you are like most people you'll copy and paste the previous constant, then change the name (and hopefully the string value). Few people will literally type out "public const string" each and every time. &gt; The constants do not have to be named the same thing as their string literal. No they don't. A name of `Pi` with the value 3.14159 makes a lot of sense. The thing is, for the name `TAX_NEXUS_ID` the most sensible value is "TAX_NEXUS_ID". That's a very common database naming convention and wouldn't look too out of place for UI element names. So telling me that `TAX_NEXUS_ID` is really "TaxNexusId" is a bit confusing. Especially when I'm in a hurry and searching for"TAX_NEXUS_ID" in the logs or network traffic. I should also mention that `TAX_NEXUS_ID` violates .NET naming conventions for public members, which should always be PascalCased. 
For me Razor is inflexible and very tightly coupled with my backend. Whereas Angular 2 (I don't use v1) is the perfect separation of concerns.
I'm most of the way through that course now, I'd highly recommend, it's great! 
You're right it does violate the .NET naming convention, but I prefer to use this convention because it clearly denotes that this variable is ~~special~~ a constant. I would like to know why the convention does not include this. I'm not sure what you're issue is with copying one line of code and changing it's name and value when you need to add a new field to a form. What would you do instead? Are you saying I should be copy and pasting a bunch of hard coded strings all over the place like this? //Someview.cshtml &lt;input type="text" name="MyValue" /&gt; //SomeController.cs var mySubmittedVar = Request.Form["MyValue"]; I'm rather curious as to why you would assume that a variable named `TAX_NEXUS_ID`also has the value `"TAX_NEXUS_ID"`, especially considering that variables rarely hold the value that is the name of the variable, Is this an old convention from some other language? Moreover; hovering over the constant in VS reveals the value of the variable which takes approximately 1 second. You're argument makes even less sense considering that we're obviously using PascalCaseID as the naming convention for our database ID fields.
&gt; I'm rather curious as to why you would assume that a variable named TAX_NEXUS_ID also has the value "TAX_NEXUS_ID", Why wouldn't it? It's clearly not the name of a numeric constant and, again, it looks like a column name. Sure, you could put "HiMom_27" in there, but in literally every occasion where I've seen that naming pattern the string value was the same as the name. **** &gt; this variable is special No it's not. Or rather, it shouldn't be special. Things that are "special" as usually wrong. I could give you a dozen examples of "special cases" from the .NET Framework itself and I guarantee that you will find every one of them to be a design failure. In fact, you will probably discover bugs in your code because you assumed that they weren't special. I certainly did.
&gt; What would you do instead? Are you saying I should be copy and pasting a bunch of hard coded strings all over the place like this? Yep. The odds of pasting in the wrong string value are equal to the odds of pasting in the wrong constant name. If you were parsing some obscure file format where TAX_NEXUS_ID = String27 I would feel differently. But in this specific case you aren't really reducing the chances of seeing a bug. And I say this as someone who spent a decade focusing on fixing other peoples code.
You should read up on Single Page Applications. It's a world of its own
What I meant was that you can easily identify that the variable is a constant, not necessarily special.
Ah yes, I used to think that too. Then one day I asked myself, "What's the difference between a constant, a read-only field, and a read-only property?" (I had not yet learned about immutables and freezables.) At which point I realized that I was making it different for the sake of making it different. 
Whats the benefit to doing it that way? With how I have it set up, if I ever need to change the name of that field (which is not very likely with this example) I would only need to change the one value of the constant. If I do what you are saying I would have to find every instance of that string literal in my controller or wherever else I might be referencing that form value in order to avoid a null reference error at run time. Which is one of the main reasons why I did this in the first place. Moreover, I will get a compiler error if I pasted the wrong constant name instead of a run time error. Why are you pasting a constant? Intellisense completes that code for you so you can't screw it up.
You don't like to immediately know that you can't put that variable on the left hand side of `=`?
I've been using VS2017 daily since release on a large solution with over 90 projects. I haven't experienced any of the problems that you've described. My experience hasn't been flawless and I have suffered the occasional crash due to the XAML designer being a piece of crap (I wish your could disable it and still have XAML intellisense). As some of the other users have mentioned, the problem probably lies with your machine rather than the software.
It's precisely what I hate about software development. It was fun in my 20s. Now in my mid 30s, I have very little desire to learn a new way to do the same damn thing every year.
Yeah I'm just not quite a fan of it. I guess it's a preference thing.
I'm having a hard time seeing from your point of view on Razor being unwieldy. It seems pretty much the same as any other templating language for HTML I've seen in the past decade, except the syntax matches what C# devs generally expect.
&gt; Whats the benefit to doing it that way? One less thing to maintain. It's a small benefit and certainly not something I would fail a code review over. &gt; With how I have it set up, if I ever need to change the name of that field (which is not very likely with this example) I would only need to change the one value of the constant. That actually works against your theory. Lets says you make this change: public const string TAX_NEXUS_ID = "TaxNexusId"; public const string TAX_NEXUS_ID = "TaxConnectionId"; That would fail a code review because the name is no longer in sync with the value in a way that is clearly misleading. So you would be asked to do a global search and replace on `TAX_NEXUS_ID`. This is admittedly easier than a search and replace for `"TAX_NEXUS_ID"` due to refactoring tools, but only slightly. &gt; Which is one of the main reasons why I did this in the first place. Was that actually happening to you? If it was, by all means continue what you are doing. But if this is just a theoretical problem then you are probably just wasting time.
Yes I would. That's one of the failings of C# in my opinion. But consider the list again: * constant * read-only field * read-only property None of these are allowed on the left-hand side. So unless you want to argue that they should all use caps&amp;underscores, that argument doesn't work. 
Seems like you don't have quite the full picture yet. That could color your opinion here
Depending on how many strings you got you might get away with storing all strings with the keys in a file or some kind of db and cache it in a dictionary upon start and read from there. Something like this would be called: textResource.Get("EXEMPTIONS_UPDATE") One great upside with having a wrapper like this is you'd cut down on all text only classes and you can change implementation at a later stage, lets say the file is too slow to load on app start you could store it in db instead. Also you could start out with manually allocating the entries and store them however you want. Downside here is that you'd have to not make any typing misstakes but never had any issues with that since you'd see the error even while developing. In the e-commerce projects I've worked on we stored key value pairs in a db so other people (read: none programmers) could edit the strings while the site is running. Stille using a dictionary cache to read values from. Edit: not a big fan of resx files myself, mostly because the amount of texts we've had and sql is easier to script from my experience.
It does not happen very often, generally this only happens when I refactor some code from like a year or more ago. So it is not a theoretical situations, but a decently rare one. And yes one nice thing about VS is that it will give you the option to change all instances of a variable in your entire project if you change the definition so it saves me the trouble of having to write a regex and looking at the find all results in order to make sure I'm not altering something I shouldn't be altering.
Good point. I do not name read-only fields and properties like that. So I guess my options are to either depart further from the C# syntax standards, or change the way I name my constants to be standards compliant. Is this really a failure of the C# language or the standards Microsoft puts out for the language? If the former, can you please give me an example of a language that handles this elegantly?
Check out using the SqlDataReader class at: https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldatareader(v=vs.110).aspx If you create a web service SQL Read/Write layer, you can use whatever front end you want.
Any modern front end JavaScript framework, whether Angular or otherwise, is client side vs Razor which is server side. Why client side rendering vs server side rendering? * Offloads rendering load to client. Allows use of Content Delivery Networks to serve static HTML, since each new request requires no server side rendering. * Separates logical REST API layer from HTML web server. Allows reuse of the API for other clients (e.g. mobile devices). Also allows client or server side code to be switched out more easily since they communicate across a smaller footprint interface. * Event binding (whether two or one way) allowing UI updates to reflect immediately without a server side call throughout the page. * Pool community resources across all server back ends giving more tools, guides, open source projects, etc. Why a JS framework vs vanilla JS with libraries? * Have someone else think through the logical structure of the JS application. No need to pick your own idioms and standards. * Have portability with other developers and teams, for hiring developers, being hired as a developer, or working with other developers on the same project. * Take advantage of performance optimizations made in framework code. * Find tooling, guides, open source projects that can be included in your work more easily, since your framework ensures at least some degree of interoperability.
Based on some of the responses I've gotten I'm definitely going to look into the resx solution. This is an internal website for the company I work with so issues like translation and allowing users (non-programmers) to update this text is probably never going to happen. But it is definitely nice for me to be able to change the text in a message from "Added new [generic noun]." to "Added new [slightly different generic noun]." without compiling/deploying. Can you tell me why you think resx files are poor? Mainly why you didn't like working with them.
I second this. Shawn does great tutorials and this one is no exception
 e = o.AsEnumerable(); return o.AsEnumerable(); Why are you doing silly stuff like this? It's pointless. The whole Gist is a mess.
You can use any .Net SQL access technology that's compatible with your compilation target. You can definitely use all the standard ADO.Net stuff like IDbConnection, IDbCommand, IDataReader, etc. Anything targeting .Net Standard should be fine - Entity Framework Core, Dapper, bunches of other full and micro ORMs. GTK doesn't change anything with respect to accessing a relational database, and Mac should only affect what compilation targets are options.
I agree.
You probably should go with resx based on your description, not disagreeing there. So a couple of reasons I dislike them, first I come to think of is that they where tied to deploys and application, no deploy needed to change text without them. We could have multiple applications using the same texts and didn't want to do copy or share the files. Probably ways around this but this ties into the next thing. I've worked mainly on sites that are run in 7-10 different languages and those files get huge ;) When the files are so big it gets painful to edit. But mainly one of the bigger things is to have people from other parts of the company be able to edit the texts in a CMS. That's what I can remember right now. But resx has it's place, nothing bad about it in general.
With VB I find that the intellisense is a bit more useful because of the way it describes properties as "ReadOnly Property" in the IDE, but that's just tooling. From a language design perspective, I can't think of any that really get this right. I'm not even sure what that would look like.
I don't get the point of the `DoMath` method. Not only does it appear to be an unnecessarily wasteful reimplementation of `Select`, its return value isn't even used in the `NextCard` method.
Most of these JavaScript frameworks are a pain in the ass with .NET because they were designed to solve problems in OTHER languages. If you're running php, basic raw html, or daft enough to run a fully js codebase, then they're great. They solve the problem of data binding and give you somewhere to stick some front-end in-browser logic. .NET handles 99% of that stuff before it hits the browser. This makes the site faster and because the server-side code is so strongly typed it is simple to build complex date-based algorithms (for example) that are a nightmare in other languages. What ends up happening is that you can't use .net the way it was designed to be used, you have to bend it and remove half of its AWESOME functionality, because some manager has made the same decision YOU are making. "but I want to use angular/knockout/react because its the cool thing to use at the moment" You want to learn the skills, fine, nothing wrong with that at all...good call...but never let the tools dictate the job. You don't decide to use angular before starting the job any more than a carpenter decides he is going to use a hack-saw in his next job before even answering the phone. If you want to relegate your .net work to being a simple API then fine, but you need to evaluate whether that's the right thing to be doing per-job
Angular uses CBA (component-based architecture), not MVC. There's no such thing as a "view model", so you'll have to get that out of your head. It's a more efficient, less confusing way of developing for web. You can still define and use TypeScript models for autocompletion, based off of your backend DTO structures. Its just that writing components is so much more pleasant... (Unless we're talking about the legacy Angularjs, which is MVC. The rewritten Angular is CBA)
Can you publish the solution to a public Git repository, we may have access to? Or zip the entire project for us? The exact error would be helpful too.
Okay, I see the problem regardless. You are trying to access all these Winform components in the Customer class, which has no access to the Winform. You will need to accept Form1 in your `customerDetails()` method parameters. Alternatively in the classes constructor, for use throughout the customer class. Be wary of crossthreading issues. Winforms is a pain, but CheckForIllegalCrossThreadCalls can be an easy hack 
Instead of using 2 radiobuttons, use 1 checkbox
I also wonder this. When I used Angular 2 it had a long load time for the first page load (which is really bad), and the file size was huge, and the SEO was crap. How will Angular be useful for normal websites? Or is it only for applications? Am I missing something?
1. `Person` has no public properties 2. `Customer` calls the person constructor, but also tries to set the private fields. 3. The form needs to generate the classes and not the other way around like you have it.
Hey there my dude, would you care to elaborate as to how I would go about doing this?
You can't call a component from another class since it has no access to it. You need to allow your window form as a method parameter and assign it to a local variable in your customer class. Or a better way is just make a List of type Customer and then you don't even need to do that and its better. public partial class Form1 : Form { public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { } public void Example() { List&lt;Customer&gt; customers = new List&lt;Customer&gt;(); Customer person = new Customer(); person.CustomerNumber = 1; person.PersonAddress = "Test"; person.PersonName = "test"; person.PersonNumber = "Test"; customers.Add(person); MessageBox.Show(customers[0].PersonNumber + customers[0].PersonAddress); //etc... etc.. } } class Customer { public int CustomerNumber { get; set; } public string PersonName { get; set; } public string PersonAddress { get; set; } public string PersonNumber { get; set; } }
It's the purpose of the form to take an existing person and convert it to a customer, or to display a customer?
That helped. Thank you :) 
&gt;:) I am happy that you are happy. Spread the happiness around. [This doggo demands it.](http://l.yimg.com/os/152/2011/10/20/PolarBear_213732.jpg)
Do you think cutting out functionality of how core is meant to be used to utilise SPA makes for a better end product? 
After playing around a bit, I'm starting to really like CBA. The way VS groups the HTML, css and ts files keeps it clean. 
A few notes on the formatting your code, if I may: Your class properties should follow Pascal Case, which is the first letter of each word is capitalized. So, person_name in your classes should be PersonName. For parameters in method signatures, you should use camel case, which is when the first word is all lowercase, but the first letter of each subsequent word is uppercase. So, personaddress in your method signature for your Customer controller should be personAddress. Regarding both of those items, though, you should simplify those to just Name or address. There's no need to specify they're a *person's* name or a *person's* address; the names for the classes pretty much indicates that for anyone else using your code. Further, unless the instructions say otherwise, consider separating the PersonName property into FirstName and LastName properties. You can create a method called something like FullName to return both values concatenated into the full name. For your person constructor, *do not* use shorthand like pname and paddress. Some shorthand can be okay, such as CustomerId or IpAddress for example, but generally shorthand is a really bad practice. The meaning could change later, or if someone doesn't know that p means person it could confuse them when trying to interact with your code. Variables/properties/method parameters should all have meaningful names even if they're long. Also, in your Customer class where you define three string properties on the same line? You can do that, it compiles fine, but it's generally best to define each of those on their own lines. As others have noted you should define the access level, and I'd go further to say you should define getters and setters if you're able to/are allowed by your instructor. You can read up on all that here: https://www.dotnetperls.com/property. You're new so proper formatting isn't a huge issue for you at the moment, but it's a good idea to get in the habit now. :D
Will your customer actually be running this on Macs, (or Linux,) or Windows? Unrelated to databases, you may want to very carefully look at what GUI framework you build this with. 
Also, is: itcount =+ 1; ...correct? Shouldn't that be += ? 
Tried my hand at this for a video series I did awhile back. Starts from scratch. Can't say I would do things different but it might give you some ideas: https://github.com/ariugwu/mudz
I'm not building this for a customer, I'm just building it as practice, as something to put on my resume to show that I can work in C# and SQL databases. If I had a windows I would be working with that but seeing as I have a mac I just have to make the best of a bad situation lol.
You don't, it's a huge security risk. If you want to test things out, then ADO.NET exists for this purpose, however I'm unsure how compatible it is with your stack. The best way to do this would be to create a web service that connects to the DB. You can use the ADO.NET Entity Framework within the web service to connect with the DB. The GTK application then authenticates with the web service, which authenticates with the DB. This way, there is no chance of your users accessing the DB credentials.
Excellent, good luck then :-) I do most of my C# stuff on Win10 in VirtualBox on my personal Mac. It's ok, but goes awry when updates start coming down. I really need to get around to setting up Windows on a dedicated laptop. In my own experience, I went for WinForms, but in hindsight will probably rework my application to use WPF instead at some point. I tried GTK# right at the beginning, but kept running into odd problems.
I feel that jQuery has its places, but some people argue that it's inherently bad and should never be used. Really annoys me. (somewhat off-topic, but you reminded me of it)
I use: &gt; https://msdn.microsoft.com/en-us/library/system.diagnostics.process.start%28v=vs.110%29.aspx 
I built a set of tools to take a SSDT project, and then using the Visual Studio API generate a complete set of POCOs, in a different class library, from the tables in the SSDT project. This allows a single source of truth for POCO objects, and they can be regenerated on the fly without having to manually update any of them. This concept could also be extended to generate a number of other things as long as the data can be represented in a SSDT project.
With a backend. Don't correct the frontend to the SQL database directly.
It makes for better (or at least more interactive) product, albeit with more work. More modern apps probably use asp.net web API more than the MVC razor stuff, but for many things Razor is probably good enough
Like I said; it's probably more my personal preference then anything else. I just don't like the way Razor interstitches HTML with C#. I think it's a bad way of keeping everything seperate and isolated to it's own scope. But I can't say I've done a whole lot with it either. I dropped it pretty fast after Angular was introduced.
You have some issues in your classes. Your `Person` class is mostly OK, but all the fields are private (unless a field has the `public` or `protected` keywords in front it will default to `private`), so they can't be accessed from outside your `Person` class, and there are no other methods in the class. This means that while you can create an instance of a `Person` and set their name/address/number, you can't later query the person and find out what their name/address/number is! You either want to make the 3 fields `public`, or create public properties to access them. Your `Customer` class derives from `Person`; this means that it has all the fields and methods that `Person` does; A `Customer` **is** **a** `Person`. So you shouldn't be re-declaring `person_name`, `person_address` and `person_number` inside the `Customer` class, since they're already part of a `Person`, and a `Customer` is a `Person`! Then, in the `Customer` constructor, you have this: personsname = person_name; personaddress = person_address; personnumber = person_number; Those lines are setting the *parameter* of the constructor to the value of the (un-intialised) field `person_x`. You should have put those assignments the other way round (e.g. `person_name = personname`) but, as mentioned in the previous paragraph, the`person_x` fields are part of `Person`, so the `Customer` class just needs to pass the initial values to the `Person` constructor using the `base` keyword, as you're already doing, so you can just delete those three lines. public void customerDetails() { nameBox.Text = personsname; addressBox.Text = personaddress; numberBox.Text = personnumber; idBox.Text = customer_number; } You don't have a `personname`, `personaddress` or `personnumber` variable anywhere. I think you meant `person_name`, `person_address` and `person_number`. Also, a `Customer` shouldn't know anything about any text boxes in the UI. A `Customer` is just a class for holding information about the customer, so that method should be removed anyway. If you want the UI to show information about a `Customer`, then the code to do that should be in your UI class (the `Form`), and the information about the customer that the form needs to know about should be `public` within the `Customer`/`Person` classes. 
Volunteer to fix some bugs in the C# product team's backlogs. There are probably some non-domain-specific items on their backlogs. Just ask them, they are probably eager to help. Your boss will probably appreciate the initiative as well
I like it a lot. It also lets you link to images, CSS, js and bundles without using strings
Eh... Looks like spam. - Link to a fucking Twitter post about something that happened in March. - "#DotNerCore" - really? - Twitter then links to a website known for spamming and poor quality.
Grab a copy of pro angular by Adam Freeman. It's one of the best books on the topic I've read with lots of examples.
https://media3.giphy.com/media/aZ3LDBs1ExsE8/giphy.gif
VS2017 is easily one of the worst visual studio releases Ive had to work with so far. My solution for this has been to start using Project Rider instead https://www.jetbrains.com/rider/ - while it's not a perfect 1-1 mapping to visual studio it's certainly getting there and it is lightning fast in comparison to visual studio and contains almost all of the everyday stuff that I needed from VS.
Sounds like hardware issues.
What do you mean by "cannot inspect"? Like, you literally cannot view it in the debugger, or it just doesn't contain the values you expect? There is nothing special about the `NetworkCredential` class itself as far as I know. [`CredentialCache.DefaultCredentials` returns an internal subclass](http://referencesource.microsoft.com/#System/net/System/Net/CredentialCache.cs,d2aff4436b928c41) that simply [doesn't contain any values](http://referencesource.microsoft.com/#System/net/System/Net/CredentialCache.cs,3c40fb789bc14a64) and is treated specially when encountered by various authentication methods. Generally speaking, you can customize the debugger display with [various attributes](https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/enhancing-debugging-with-the-debugger-display-attributes). For stuff like passwords in particular, you can store the value in a `SecureString`. Ultimately there is nothing you can do to genuinely protect information from an attached debugger, though, since it has complete control over the running application.
Removed: Rule 4.
Removed: Spam.
Hi, thanks for responding. I mean that when I inspect it, the values are empty. If I then assign it to a new variable the values will be visible in that object. So, if I understand correctly, I'm guessing the "get" property in DefaultCredentials returns empty strings and the = operator is overloaded (but = is not an overloadable operator!) to actually copy the strings to the new object? Also, what is the actual value in making the object like this? Should I copy this scheme when storing credentials in my own variables? 
If I had to venture a guess, it would be that the PsCedential object is stored in kernel memory. A user mode application like VS cannot read from kernel memory. If it weren't for .Net being managed, you'd get a page fault for even trying. A kernel debugger might be able to, though.
Managed Debugging Assistant 'CallbackOnCollectedDelegate' : 'A callback was made on a garbage collected delegate of type 'MouseLocation!MouseLocation.GrabKeyboard+keyboardHookProc::Invoke'. This may cause application crashes, corruption and data loss. When passing delegates to unmanaged code, they must be kept alive by the managed application until it is guaranteed that they will never be called.' ---------------------------- Error message:
From my knowledge WPF or Windows form needs to access properties, not variables or fields: for instance int customer_number; should be : public int Customer_number { get; set; } OR private int _customerNumber; public int CustomerNumber { get { return _customerNumber; } set { _customerNumber = value; } } If you proceed this way with all the other properties it will then be accessible. 2) On your Win Form code behind: I usually create a separate class (a viewModel) , following some kind of MvvM pattern, meaning I would create a class especially for your form with all the properties needed in it using the properties of the Person and other classes, let's called that class FormViewModel. for instance you could initialize a list in this class in the constructor or add another Property like CurrentCustomer. Then in private void Form1_Load(object sender, EventArgs e) { } You create an instance of your FormViewModel class FormViewModel fvm = new FormViewModel(); 3) Now all your controls will be able to access all the required properties in your FormViewModel via the fvm variable. textBox1.Text = fvm.CurrentCustomer.CustomerNumber
Change the bitmap creation line to a using block: using(var bmp = new Bitmap({your parameters})) On mobile so can't post the full code. 
Powershell is just a .NET language under the covers. You can do the same stuff (if not more) with C#, and you can likely do it more easily. Personally I have taken to writing all of my scripts with C# in LINQPad rather than powershell, as I find C# to be much more expressive and easier to write.
Give this a try. private string FormatStr(int Input) { string Strinput = Input.ToString(); return (Input &gt;= 100) ? Strinput.Insert(Strinput.Length - 2, ",") : Input &lt; 10 ? "0,0" + Strinput :"0," + Strinput; }
Most MICROSOFT power shell for managing services executes Wmi underneath the hood. So you can run the same functionality quite easily in c#. You can even use a tool like ILSpy to decompile the power shell cmdlet and see how that is implemented in c#
Thanks! But still, I got some error. Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new Form1()); The error is in here. Far from my code.
Well scripting is fine if you are just doing sysadmin work, since you will probably spending alot of time figuring out OOP stuff, threading and the like. Also, are the tools something that other people will use? Maybe you want some build/deploy pipeline then. Remember to use source control aswell - every time (like condoms).
Hmm, I'll have a better look when I'm on my computer. 
Have you checked out the Documentation? https://developers.google.com/youtube/v3/docs/subscriptions/list 
Yes but they do not show C# code, and i was not able to translate the examples into C#
This is beside the point, but you don't need to call Dispose on the Graphics object here since the using statement will automatically do so for you.
Tried this, YouTubeService yt = new YouTubeService(new BaseClientService.Initializer() { ApiKey = "YOUR_API_KEY" }); var subscriptionListRequest = yt.Subscriptions.List("snippet,contentDetails"); subscriptionListRequest.ChannelId = "YOUR_CHANNEL_ID"; var searchListResult = subscriptionListRequest.Execute(); foreach (var item in searchListResult.Items) { Console.WriteLine("ID:" + item. Console.WriteLine("snippet:" + item.Snippet.Title); } But then i get an error: Google.GoogleApiException was unhandled HResult=-2146233088 Message=Google.Apis.Requests.RequestError The requester is not allowed to access the requested subscriptions. [403] Errors [ Message[The requester is not allowed to access the requested subscriptions.] Location[ - ] Reason[subscriptionForbidden] Domain[youtube.subscription] ]
Just understand that there is an added complexity that you will have to deal. Unless you don't care and just want to hack something together.
Sounds like you need to make sure your API key or authentication is valid.
I'm fairly certain you need to use OAuth when accessing user data. The simple key api limits you to mostly searching 
The API key is valid, it works for other requests.
Yes that might be the problem :-(
You seem sad :( ... Here's a picture/gif of a cat. Hopefully it'll cheer you up: http://random.cat/i/dmzl0lnr184ntq3llboryj9.jpg ^^The ^^internet ^^needs ^^more ^^cats. ^^It's ^^never ^^enough..
Does this give you the same error? Size size = new Size(Convert.ToInt32(100 * winScale), Convert.ToInt32(100 * winScale)); Point origin = new Point(Convert.ToInt32(Cursor.Position.X * winScale) - 32, Convert.ToInt32(Cursor.Position.Y * winScale) - 32); using (Bitmap bmp = new Bitmap(size.Width, size.Height, PixelFormat.Format32bppArgb)) { using (Graphics g = Graphics.FromImage(bmp)) { g.CopyFromScreen(origin, new Point(0,0), size, CopyPixelOperation.SourceCopy); pictureBox1.Image = bmp; g.Dispose(); } }
You can only access public information with the API key. You need an OAuth token for private information.
What exactly are you trying to do? WPF controls aren't really designed to be real-time interactive like that. To get faster response than the events, you pretty much have to poll mouse position (using a P/Invoke call)
Post some code to reproduce the issue please. What I was able to piece together from your post/comment, [I can't reproduce](http://i.imgur.com/0H3FhU8.png). &gt; So, if I understand correctly, I'm guessing the "get" property in DefaultCredentials returns empty strings and the = operator is overloaded (but = is not an overloadable operator!) to actually copy the strings to the new object? No. It simply means something like this happens when using/handling the credentials: var x = new NetworkCredential("myuser", "mypass"); var y = CredentialCache.DefaultCredentials; // Try assgining either x or y to cred. var cred = x; if (object.ReferenceEquals(CredentialCache.DefaultCredentials, cred)) { // Use default credentials } else { // Use specified credentials }
I'm currently working on a small project for self studying in cSharp. It's some kind of falling sand game using WriteableBitmap. Nothing special.. These update methods are running on the rendering event. To spawn new Pixels while holding mouse button i need to get the mouse position without lag from outside the UI thread. can you give me an example on how to use a P/Invoke call?
How is it a hardware issue? This doesn't happen with other stuff, only VS2017. 15 and even 13 works flawlessly. All tests and scans show no errors. Same with other types of software I literally haven't experienced any problems with other programs or games for months. Only VS2017. Besides, a few people who commented in this thread are experiencing similar issues on new, high-end PCs.
You should look into WPF. I also had powershell GUIs but eventually remade them into C# WPF. You'll still have to deal with long operations that are running on the UI thread freezing the UI, but there is async/await to help.
You can start work outside the UI thread with Task.Run or Task.Factory.StartNew. I'd recommend passing a cancellation token as well (so you can kill it when the mouse button is released). Let me know if you want some ideas on how to poll the mouse position in the child task and access it from the UI thread.
I'm actually working on a c# project with the API right now. This may help https://github.com/googlesamples/oauth-apps-for-windows/blob/master/OAuthDesktopApp/OAuthDesktopApp/MainWindow.xaml.cs
Sure. Thank you so far for your help! I'll test some things with Task.Run / Task.Factory.StartNew and let you know if i need further help with this.
The biggest pitfall you're likely to hit is trying to access UI components outside the UI context. All I'll say about that is DispatcherTimer and/or SynchronizationContext
This isn't true so much anymore, most PowerShell cmdlets are coded in C++ or C# using Net classes and connect via WinRm. WMI has started to be depreciated.
Compilers hit the CPU and memory pretty hard. In my own experience, Visual Studio started acting up before I had other issues. You can believe whatever you want, but belief rarely solves the issue.
I'm surprised that nobody has mentioned - you can write fully functional, multithreaded GUI applications in powershell. I'll PM you a link to a gist you can use as an example. Admittedly, it's worlds easier to work with WPF in C#. But you can do it all in powershell if you need to. 
https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/ This is a bit old, but seems like it should still work. This would allow you to execute powershell scripts asynchronously and collect the results to send to a GUI. This would be a really simple example for synchronous invocation: using (var powershell = PowerShell.Create()) { powershell.AddCommand("echo"); powershell.AddParameter("Hello World"); var result = powershell.Invoke(); foreach (var item in result) { Console.WriteLine(item); } } Like others have said, you can do the things directly with C# (by instantiating or invoking the cmdlets directly because they are C# objects) or integrate the scripts themselves using this. 
As others have said you shouldn't need the `g.Dispose()`. But your issue is that you aren't disposing the bitmap from `pictureBox1.Image` before assigning it to a new one. Add an `if (pictureBox1.Image != null) pictureBox1.Image.Dispose()` before the line `pictureBox1.Image = bmp`.
&gt; belief rarely solves the issue. You're right, most of the time it's money that solves the issue. There's this tiny little problem, though. The money doesn't grow on trees. 
It's a security utility to help identify phishing campaigns targeted at my organization lol no need to worry. 
Looks as if it is a bigger task than I thought. I assume that there is no simpler way to achieve it? Anyway, thanks again for pointing me in the right direction!
Likely not. You're mixing old school polling through the OS with WPF's event system. Honestly, while it's a good learning experience, WPF is the wrong technology to use for a game. There are different frameworks for games that use the .NET framework. I forget what the newer ones are called, but if you search XNA, I'm sure you'll come across it. You could also go hardcore and do it in C++ with DirectX EDIT: Unity can use C#. Use that
I already used Unity before for some other projects, but it seems a bit overkill for what i want to do. After some research in the past i came across the "Monogame" framework, but I have not yet dared to start working with it. I should give it a try
Decompile? :D https://github.com/PowerShell/PowerShell
I'm learning F# a bit on the side. I'm very much a C# developer though. Anyway, where I work... Let's just say they are the very definition of absolutely incompetent. It's a very small team who absolutely refuse to listen when I explain things like how to properly use interfaces, dependency injection, basic fucking concepts that juniors know and they are senior supposedly. It's all cargo cult and echo chamber. As you can imagine the process to debug literally anything is far far more involved than should be, to the point where you're wasting 10 minutes o every hour editing random files with IDs in. I'm planning on automating some of this bullshit on my PC so I at least feel slightly productive. I'm planning on doing parts with F# purely so that they can't demand one day that I change it and make it worse, because they won't understand a damn thing!
You might want to take your clientID/secret out of your code. Keep them in a file that doesn't get uploaded to git :)
&gt;:) I am happy that you are happy. Spread the happiness around. [This doggo demands it.](http://www.toyeskies.com/Abby_10wks_1.jpg)
:) ^beep ^boop ^ban ^/u/doggobotlovesyou ^please
&gt;:) I am happy that you are happy. Spread the happiness around. [This doggo demands it.](https://i.redd.it/dzn7e9nntm6z.jpg)
:) ^beep ^boop ^ban ^/u/doggobotlovesyou ^please
&gt;:) I am happy that you are happy. Spread the happiness around. [This doggo demands it.](http://l.yimg.com/os/152/2011/10/20/3387261714-1e157c4d23-z_213720.jpg)
:) ^beep ^boop ^ban ^/u/doggobotlovesyou ^please
Monogame is a reimplementation of Microsoft's XNA. Its great for messing around with game dev.
Winrm is essentially remote wmi. I don't think any powershell cmdlet is done in native c++. Maybe clr c++. Powershell cmdlet themselves can call native code of course. 
That looks like the core code. Each product also has their own cmdlets/wmi providers which is where you may want to decompile. 
Ah ok, I see what you mean. Like all the cmdlets to administer IIS e.g.
Is this in any way connected to to C-Sharp?
var TaxNexusId = nameof(TaxNexusId ) 
It's written in c#?
Inspect the CredentialCache.DefaultCredentials itself. Contents come back blank. The assigned variable can be inspected and that then shows the contents. 
Tons of modules are written in C++ and C#. In fact, most first party modules and third party closed source modules are binary modules because they're compiled and loaded as DLLs. https://msdn.microsoft.com/en-us/library/dd878310(v=vs.85).aspx WinRm is not WMI. The function is completely different, as is the transmission method. There are different ways to remotely connect and manage a system, with WMI being phased out slowly. 
Try disabling the rest of your extensions, at least just to see if it still crashes. Easy way to eliminate a variable. Otherwise, I agree that it's probably a hardware issue or a corrupted install.
For God's sake, post code to reproduce or a screenshot or, hell, even a video. As I said earlier: &gt; [I can't reproduce](http://i.imgur.com/0H3FhU8.png) ...the problem ;-) No problem reproducing otherwise :-P
It looks like you might need o Auth authentication for personal information, following through their API registration you can create this. I was get unauthorized error messages when trying to access it with standard API key. I'm not 100% sure it will work as it seems vauge on that particular API request.
Doh! 
&gt;the = operator is overloaded (but = is not an overloadable operator!) to actually copy the strings to the new object? No, that is not possible. An assignment of a reference type is just a copy of the pointer, the object itself is unaffected. If that is the behavior you're seeing, something else is probably going on (maybe another piece of code is manipulating the default credentials object for whatever reason?). As far as I can tell, the framework itself doesn't care at all about the values of the default credentials object, it's just a placeholder. &gt;Also, what is the actual value in making the object like this? For one, it would be impossible to fill it with the actual password of the current user, since that only exists as a hash. It's an abstraction, a general purpose way of passing the concept of default credentials to anything taking an `ICredentials` object. Different authentication schemes (e.g. HTTP, Kerberos) may then use that information differently.
In your screen shot, you are inspecting your local NetworkCredential. That's the incorrect object to inspect. NetworkCredential cred = (NetworkCredential)CredentialCache.DefaultCredentials; Inspect CredentialCache.DefaultCredentials. I am under the impression that the CredentialCache.DefaultCredentials object contains the windows domain login info? Maybe I'm way off here... 
no
nice
&gt; I am under the impression that the CredentialCache.DefaultCredentials object contains the windows domain login info? It doesn't contain *anything*; that's what /u/tweq showed in [his post](https://www.reddit.com/r/csharp/comments/6kz88e/i_cannot_inspect_a_systemnetnetworkcredentials/djpw44f/) linking to the [actual reference source](http://referencesource.microsoft.com/#System/net/System/Net/CredentialCache.cs,3c40fb789bc14a64). Then I showed [here](https://www.reddit.com/r/csharp/comments/6kz88e/i_cannot_inspect_a_systemnetnetworkcredentials/djq65sh/) how it's (probably similarly) used elsewhere. The DefaultCredentials property simply returns a static 'dummy object': public static ICredentials DefaultCredentials { get { //Blah blah return SystemNetworkCredential.defaultCredential; } } internal class SystemNetworkCredential : NetworkCredential { internal static readonly SystemNetworkCredential defaultCredential = new SystemNetworkCredential(); // We want reference equality to work. Making this private is a good way to guarantee that. private SystemNetworkCredential() : base(string.Empty, string.Empty, string.Empty) { } } &gt; In your screen shot, you are inspecting your local NetworkCredential. That's the incorrect object to inspect. I don't have VS at hand right now (on my macbook) but I guess the inspector isn't showing because of your cast. Probably. Just a guess.
"I combined the most odious feature of C++ with the most odious scripting language." Lol nah just messing with ya. If it works then it's always cool to build something like this
also, the most odious scripting language is probably PERL
Why on earth would you *want* c++ pointers anywhere?
Lol I thought the same thing so I had to scour the image. Guess I'm just a jerk 😋
Oh thanks
All I thought when you assign image in picturebox it will auto dispose the old one. Thanks! I'll check it out, when I'm in the computer
Unary plus is sometimes very misleading and the spacing makes it even worse
Version 1.1.0: I have now replaced functions with goto statements and removed all memory management. That was a joke, but these days people would believe me if I didn't say so
too late my friend, i have unleashed my evil unto r/csharp and all the internet!
Adding pointers took like 5 minutes and really has no downsides because you don't have to use them at all; the same reason Unity3D allows you to program in Boo
I actually kinda dig your use of @ instead of * to de-reference. It makes sense - use the value *at* this location. Anyway, looks like a fun little project. Are you planning to actually use it? Or was it just a fun side project of its own?
If *strScriptName* is supplied by an insecure source, this may open you up to opening .bat-files from arbitrary (local) sources, because System.Diagnostics.Process.Start allows denormalized paths. Thus, if *strScriptName = "..\windows\system32\wipeworkstation"* (or whatever) would execute *"C:\windows\system32\wipeworkstation.bat"*, which is not in the desired subfolder. It may well be (although I haven't checked) that a typical Windows installation contains .bat-files that are somewhat harmful during normal operations, say for servicing a workstation and whatnot.
Not my code. That's a legit google repo. I appreciate the concern though
Yeah, that's what I wanted to know. Time to break out the RegEx.
Please don't. Why not use [Path.GetFullPath](https://msdn.microsoft.com/en-us/library/system.io.path.getfullpath%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) to get the absolute path of the file you are about to invoke, then check if the returned path has the desired prefix? That seems way saner than whipping out a regex.
Hmm, interesting. As a note, the regex adds about four lines of code. pattern = a-zwhatever if regex.ismatch(string, pattern) then do thing end if I suppose there might be a difference in performance impact, but I don't expect it to run this function very often (nearly ever? maybe once every couple weeks?) and a side benefit of regexing the very short segment of the file path, as in the above, I also get the added perk of making sure you can't put subfolders or weird characters in it either. From another thread in this sub, I found https://stackoverflow.com/questions/990364/how-can-i-get-a-regex-to-check-that-a-string-only-contains-alpha-characters-a-z Is RegEx particularly unpleasant from a performance standpoint?
Maybe I would use it as a scripting language for some programs I would make but it's mostly for fun and impressing universities
I demand satisfaction! Regex at dawn!
No, this isn't about performance, but about security. If you want to filter for *strScriptName* to only contain the characters a-z, that's fine from a security standpoint, because it is quite strong restriction. It does preclude you from using most valid characters, though. The problem with regular expressions arises when people don't understand the problem domain correctly and use it for operations it was not meant to do. I thought you were about to filter out ".." using regex, for instance. I'm not sure if that would be sufficient, because the rules for path normalization are complex and may require knowledge about the filesystem that is not contained in the path string. [Here](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) is a classic and humorous example of people trying to shoehorn regexs into a solution. But like I said: if you really filter the string for "a-z" and you can live with the restrictions, you will probably be fine from a security standpoint.
Those are pretty good notes, thanks. Restrictive definitely works for me in this case. I actually went ahead and used the example in the Stack Overflow as-is, and kept the length limit too. I figure I will have a few arbitrary scripts in this one folder, and want to be able to call my program to run them, so having short a-z names is more than adequate. I suppose GetFullPath wouldn't be a particularly complicated compare either, since I am already constructing the full path there to begin with (C:\folder\stringname.bat). Theoretically, my input constructed file path should exactly equal the result of the GetFullPath of the same.
 var safeBatchFilePath = Path.Combine(mySafeDirectoryName, Path.GetFileName(fileName)); Process.Start(safeBatchFilePath); Assuming fileName variable is accessible to others, this is how I would do it. I tested and it will not allow for using the "..\" trick like just plain Process.Start will. It is infinitely cleaner than using Regex.
[PERL!](https://xkcd.com/208/) 
[Image](https://imgs.xkcd.com/comics/regular_expressions.png) [Mobile](https://m.xkcd.com/208/) **Title:** Regular Expressions **Title-text:** Wait, forgot to escape a space\. Wheeeeee\[taptaptap\]eeeeee\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/208#Explanation) **Stats:** This comic has been referenced 262 times, representing 0.1617% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_djqygbd)
I like that. I'll probably never use it, but that's a neat trick.
I can't strongly enough recommend the unity course on udemy. It covers learning C# and then building a series of small (but increasingly complex) little games in unity. In terms of learning C#... maybe its not the fastest way, but its well explained and very 'big picture' in terms of actually producing something.
Kill it with fire, hurry before it becomes the new hip web language.
From a background in CRM's tools development, do not build your own, neither should you use ConnectWise(haha, personal bad experience). SQL would be the correct answer in conjunction with PHP and encrypted uploads using TCP and FTP over SSH(TLS) but as i said, just buy one. 
To be fair, that's the problem vue.js is trying to solve. Angular is a very opinionated framework where you have to do it one particular way (and learn that way). React is not opinionated which means you can learn it whatever way you want to but generally means the first 6 ways are going to be wrong. Vue just aims to be the third step on, learn jquery, then figure out databinding with knockout, then add component templating and call it vue. If you want routing and dependency injection and all the other kitchen sink stuff you're on your own.
&gt; In your screen shot, you are inspecting your local NetworkCredential. That's the incorrect object to inspect. &gt; Inspect CredentialCache.DefaultCredentials. [I can inspect all just fine?](http://imgur.com/a/cSUtB). But what is the bigger issue here? The inspector/debugger may go a bit wonky from time to time but regardless; what is the actual problem/question you're trying to solve/answer here?
How long did this take you?
You can't inspect Default credentials. My guess is it's just a special instance with no values and when designated services receive it they know to use LDAP instead of basic authentications.
Ah the classic nuke the PC and start again.
&gt; what is the actual problem/question you're trying to solve/answer here? Hi, So, /u/Tyrrrz gave a good attempt...question is, how is the credential used under the hood? For example, I pass CredentialCache.DefaultCredentials (which I am led to believe would contain my windows session user, password and domain ) to a WebService running within the same domain as my client. The WebService can then authenticate/validate my client as belonging to the same domain using some IIS method. So, my question is, if I cannot inspect the contents of CredentialCache.DefaultCredentials to see my windows domain info (which one cannot, it's clearly stated in the docs page that ICredential object returned by DefaultCredentials cannot be used to view the name, password or domain), how is the WebService able to interrogate the object. What mechanism is being used to obfuscate the data within the ICredential object? 
But if this Credential object is passed to a WebService, the WebService can parse the object in order to authenticate/verify my client...
Have you tried referencesource.microsoft.com?
if (pictureBox1.Image != null) { pictureBox1.Image.Dispose(); pictureBox1.Image = null; } perfect!!! thank you! it flatten my process memory.
github?
mileage.ToString() should do the trick?
In Program I have something like log.LogW(currentCar.Drive(addMileage); that I have to figure out. Log needs to have a string. I don't think changing anything in the Brackets of the Drive method will help with anything.
I'm pretty sure it should though, have you tried: log.LogW(currentCar.Drive(addMileage.ToString())
The variable in the Drive method needs to be a float. 
PowerShell is not strictly a .NET language. It's its own language and runtime with a large bridge to and from .NET.
https://pastebin.com/FMmwM8C7 - You can add the LogW method in your Drive function - You can just use them seperate from each other - You can convert your function to return a float and use it together Edit : 2nd option won't work because you don't log the new value 
Ah my bad your log.LogW need a string, misread that. as /u/Senn-0- noted: log.LogW(currentCar.Drive(addMileage).ToString()); should be right 
But this means that he needs to change his method to return a float, otherwise it won't work
It wont let me put a ToString after the parentheses
Check out this book if you want to learn how to create a new language, create an interpreter to parse that new language and learn Golang at the same time. https://tinyurl.com/ybrqg4bx
This is a joke project. I won't be surprised if it takes off.
If you haven't even been to university yet, colour me impressed: I can see any university admissions or recruiter being very impressed too - most of us weren't creating projects like this. It doesn't ever have to be truly useful, just the fact that you've got enough passion to create it and enough skill to understand it (even if some of that understanding turns out to be flawed) is already a couple of steps ahead of most people.
It's very likely to be something about the website, rather than your code. Possibly an anti-scraping measure, could be triggered by user agent, rate of requests, or some other criteria. I'll have to try it myself to give you any other data, but I'm away from computer.
current car.Drive(addMileage); Log.log(currentCar.Mileage.ToString());
If you use non-WCF-specific endpoints, yes. See this, quite remarkably recent, Microsoft blog post https://docs.microsoft.com/en-us/dotnet/framework/wcf/samples/soap-and-http-endpoints and this https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-create-a-service-endpoint-in-configuration
It doesn't like that you don't send a user-agent. Try setting the user-agent to this via a header. I tested it and it worked for me: Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 59.0.3071.115 Safari / 537.36
Thanks will only be able to look at the links tomorrow and see what I can do
75% of the time is spent in string allocation, garbage collection and dictionary cache misses. Without parallelization, a 4x performance increase can be achieved with a single-threaded method by packing a `byte[]` buffer manually instead of using `string` (or a x16 increase with a four-thread approach).
I was also thinking of creating the service code in Haxe and use gulp connect to have it on another port for localhost. I'm still newb at Haxe though. How would you call a function from the service?
If you have to log each time it changes, you can simply put the LogW inside Drive, using private milage.ToString(), or implement LogW into mileage set property. You can also make Mileage { get; protected set; } and then LogW(mycar.Mileage.ToString())
I think you mean char[] arrays, unless you are assuming an ASCII encoding. Also, just by stream reading and character filtering he could easily get another big bump in performance...he's reading a 430mb file with an average platter drive. -edit- He isn't counting GC cost and his sample code runs all of the tests sequentially while loading the file from disk each time (meaning the first test will always eat the actual load/caching cost for memory mapping). Bleh. This isn't a good/fair test.
Yeah, you can do that. Without even needing to open outlook. You would need to look up "C# SMTP" which is how you email. I would recommend watching "derek banas c# in one video" its around an hour long. But with coding experience, it can get you going. You can also watch brackeys tutorials.
If you are american/canadian i can get you going on some of this thru skype or discord.( i dont like talking to people in really weird timezones compared to me)
The encrypted hash is sent to the web service which passes it to the kernel via a sysenter or syscall, the kernel then returns a boolean value as to whether the hash matched or not. And your application that sends the hash passes the address of the socket so the kernel can send that hash out the socket. Wouldn't be very secure if a ring 3 app had access to that memory space..
Only 3 or 4 days, because this isn't my first programming language
Actually each of those patterns were profiled individually and after fully clearing the Windows File Cache between the runs. They do appear one after another in the source code but that was just to have them all at one place. Maybe I should mention that on the article to avoid confusion. Also I would like to mention again that the focus was not on GC but on CPU utilization and locking contention.
Actually I learned all I needed to from this blog: https://ruslanspivak.com/lsbasi-part1/ after the 3rd part I stopped following it and finished my first programming language (not this one) on my own
You can adapt [the answer here](https://stackoverflow.com/a/646478/1269654) to a general case for your use. That said, this answer is clockwise, and it's not terribly obvious (if you haven't done it before) how to do it for the general non-square case (since yours is rectangular 5x6) and converted to counter-clockwise. Here's the code adapted that assumes you're building up your original content as a two dimensional string array (`string[5, 6]`): private string[,] RotateCounterClockwise(string[,] input) { int dim1Length = input.GetLength(0); int dim2Length = input.GetLength(1); string [,] newArray = new string[dim2Length, dim1Length]; for (int i=dim1Length-1;i&gt;=0;--i) { for (int j=0;j&lt;dim2Length;++j) { newArray[dim2Length - 1 - j, i] = input[i,j]; } } return newArray; } To change the pipes to dashes, a quick way would be to simply check and replace them on this line: newArray[dim2Length - 1 - j, i] = input[i,j]; `input[i,j]` is the character transferring over, so if it's a pipe you can insert a dash instead. (and vice-versa if applicable for you).
Proof is in the pudding mate, post your code up :)
The emailing is the easiest part of this. A good tip, but this person has a long way to go until the emailing part. The tasks described in the question are not for beginners of c#. My recommendation is to start writing code and use stackoverflow.com to help you.
Definitely not for a beginner programmer. But since he has programming backgrounds he should be able to pick this up pretty easily.
I agree with most of this, but I really disagree with "Don't use braces for just one line". If you add a new statement to the "body" of a if statement withour braces, and forget to add the braces, you have a bug...
&gt;Use four spaces per indentation level &gt; Don't use braces for just one line Its always difficult for me to keep reading once I see one of those. Edit: If you use tabs, its one tab per level of indentation.
This specific example would work with `byte[]` and any ASCII-compatible encoding (such as UTF-8). If you need actual Unicode features (such as normalization, or just counting code points, neither of which are needed here), then `char[]`. I wouldn't worry about HDD read speed too much, because even on an average drive, you're going to read at 250MBps (or more) and the processing happens at maybe 10MBps, so you can just do both in parallel and the HDD read will be waiting for the processing thread to catch up. 
I'll try to get the code posted tommorow.
But if, at the same time, braces always go on separate lines, that’s very unlikely to happen, in my experience. 
So... why is it difficult? What do you disagree with? What would you do instead?
 If it needs a second line, I believe that braces are much better. // Good if (payment == null) { return "A payment is required."; } // Good enough if (payment == null) return "A payment is required."; // bad if (payment == null) return "A payment is required.";
Its difficult only in that my instinct is to not read any further once I see one of those. I use tabs not spaces.
I used to think the same, but it's never been an actual problem, so I stick with the shorter vertical side nowadays.
Same here. I remember disliking it so much... but now I'm fine whatever the team chooses.
I also agree with this one - both for what you're saying... and that most of the time it ends up being more than one line sometime in the future. 
I do everything here except the one liner braceless ifs and using var. The ifs for the reasons mentioned already and var for the reduced readability in some cases. And if I ain't using it everywhere, I ain't using it all.
"Don't use braces for just one line" you cannot trust that line of code, run
&gt;Use var instead of explicit types What a religious topic...real arguments have broken out in my office regarding this. TBH, I agree with it (and the exception regarding interfaces), with an added exception: when the return type of a method is ambiguous or unclear. I realize we have auto-complete/Intellisense/etc. that adds context where there may not be, not all code is written well, and not all methods are named clearly. If there isn't sufficient context to figure out that it's a float (or something), I don't want to dig or have to step through it to figure it out. Perhaps I'm reading this in ILSpy or something. Code should be written clearly, and overuse of var can make things confusing IMO. Now...torches and pitchforks, let's see them. Edit: ...and I do truly mean unclear. I know what GetType() and ToString() return, var is excellent for those; also, contextual expressions ("SomeFactory.GetNewObject() as SomeSpecificType" is also obviously deserving of var).
[Microsoft already provides a style guide](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions) - not sure why we would need another one? Is this more comprehensive?
In general this seems like a sane list, with some exceptions that's already been mentioned. I'm gonna add one more though. I've never been a fan of using underscores in naming things and from what I can see the [.Net Platform Guide](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions) says you shouldn't use underscores in naming things (that the .net core team seems to be in complete disagreement with this is another matter though). Also this list links to [SA1309](http://stylecop.soyuz5.com/SA1309.html) as a means to argue that you _should_ use underscores, however; SA1309 explicitly says to _not_ use underscores (it's name is "FieldNamesMustNotBeginWithUnderscore" which should be a pretty good pointer.)
It's weird, because for this rule, they link the StyleCop page saying the opposite: to always use curly braces. http://stylecop.soyuz5.com/SA1503.html
More detail on dotnet rocks http://pca.st/PS3p
It also really doesn't matter. The last project I worked on a guy started a holy war on this topic when he inherited my codebase. Small project, I had complete freedom. If your IDE or editor does not have a setting for automatically sticking to whatever the heck the team uses - you have a problem with your tools, not the team. For all I know I just hit tab and if tomorrow I need to use 16 spaces instead of 4 or tabs, I couldn't care less.
Came here to say this. I am for braces with the reasoning mentioned in the link. 
Nice! I wasn't aware of that one. It seems newer than when we started writing this one. I will try to add a reference. https://github.com/MakingSense/code-style-guides/issues/32
Good point, sounds weird. The thing is that we wanted to provide the StyleCop links whether we adhere or not. For that one, we use "none" as value. Check it out: https://github.com/MakingSense/code-style-guides/blob/master/CSharp/CSharpStyleguide.ruleset
The thing about SA1309 sounds weird, but we are only trying to give the StyleCop links whether we adhere or not. For that one in particular we setup the value "none". But I understand it sounds confusing, it's a good point and we should work on it. Thank you very much!
We attached an .editorconfig file which is really useful to accomplish what Rivus says here. You setup a config per project and that's it.
Fair play if you beat them to it! :)
&gt; Also I would like to mention again that the focus was not on GC but on CPU utilization and locking contention. Right, but the two go hand in hand. Many of those paralization helpers exert GC pressure that could have a substantial effect on a test.
&gt; And if I ain't using it everywhere, I ain't using it all. We should hang out
At the risk of repeating myself once again, the focus was not on the GC, any impact related to GC was not significant to the main point this article is trying to make. I invite you to explore the snapshot files provided to observe the GC behaviour for yourself.
You could also just use the Windows.Devices.Scanners namespace, it's very easy to use. You should check out the official scanner app [https://www.microsoft.com/en-us/store/p/windows-scanner/9wzdncrfj3pv](https://www.microsoft.com/en-us/store/p/windows-scanner/9wzdncrfj3pv) which makes use of it.
 if (playerInTerritory = true) { ... if (playerInTerritory = false) { Surely the compiler called these out as assignments instead of comparisons. You should be using '==', not '='.
Why not just: if (payment == null) { return "A payment is required."; } You get braces and one line.
For that matter, it's bad style to use `== true` and `== false`. It should be if (playerInTerritory) { ... if (!playerInTerritory) { (or an `else` block instead of the latter if they're at the same level)
Can someone explain this simply for me? I'm fairly new to C# and I don't entirely understand why it's necessary to use language built variables rather than classes such as 'string' rather than 'String'. They both serve the same purpose right? Is there some actual technical reason, rather than 'it's in the style guide'?
I agree. I use var when the explicit type feels redundant in context. But if it's not clear , I prefer to be explicit to save myself a drill down at a later date. 
The capitalized versions require a using that might otherwise be unneeded. Only semi valid argument I've heard.
Imp1 - when you have a lot of dependant variable and/or you can provide intelligent defaults. Imp2 - when you want to enforce these values be set explicitly.
Assuming you're using Chrome as your browser, a very useful tip is to open Chrome's dev tools, and open to the "Network" tab. Then click your form button to trigger the POST, find the request in the Chrome network tab, and select it. Now scan the data chrome provides for the posted form values. Look at these values, and see if you see what you'd expect. Typically when selecting something in a drop down, the drop down should submit the primary id of the item selected. Is that what you're seeing? Typically in your binding model in your POST action, you would have one property meant to receive the id of the posted value. In this case, that could be handled by having an int DepartmentId property. It's tough without seeing your full source, but it seems like you're trying to bind an id to a full instance of a Department, which will not work. Instead, you need to bind to a property that will accept only the id, and in your POST action, you would fetch the department with that id from the database, assuming you need all the data related to that identifier.
Huh. Is there any sort of negative impact because of that?
No. It's the same type. Same everything.
"Closing curly brackets should be preceded and followed by a space" should be "Closing curly brackets should be preceded by a space" - unless you mean there should be a space between the closing curly brace and the semi-colon; in which case the example code is incorrect.
My goto house rule is: * Are the various class properties mutable, optional, and have reasonable defaults? Is the caller expected to not explicitly initialize all of the properties? Then default constructor and object initializer is fine and possibly preferred if you have _many_ optional members. * Are the various properties immutable (or `private` setters), non-optional, and require caller initialization? Then _enforce the requirement_ via the constructor (or appropriate factory/building methods). * Is there a mix of both mutable optional and immutable non-optional properties? Then enforce the required properties via the constructor and leave the optional properties for the object initializer.
My preference is exactly backwards to yours. Imo the curly braces are unnecessary for simply returning (or when just throwing an exception). The last one (labeled bad) of your examples reads the cleanest to me. That structure is unique and gives some context without having to read anything else. For instance, in the following examples I don't even have to read the blah text, the 'if'-'throw'/'return' combinations immediately tell me that the first one is a validation guard clause and the second one is an early return condition. if (blah) throw blah; if (blah) return blah; 
Hypothetically, the aliases could also be swapped out for other types in the future (e. g. int for Int64; long for, say, an Int128). In such a case, using the alias would reap the benefits of the newer type (as long as the interfaces don't otherwise change) with no more than a recompile. That said, I can't see that happening any time soon, especially with, e. g., things like string or bool.
Yeah the ID is sending fine through the form. I didn't know that I had to get the department myself through the ID that was sent. I changed the property to an int and it's working now. [This is what it looks like at the moment](https://pastebin.com/raw/faS8PUJm), with the other junk in the controller removed for brevity. Is this the right way to do it? It works, but I want to make sure I'm doing it right. Kinda hoping for there to be an easier way to make sure the department is valid so I don't have to check it myself everywhere. Like is there maybe a way to make it so it's somehow linked to ModelState.IsValid? Thanks for your help.
I'm not too sure what you mean by wanting to check the department "is valid." What does that mean exactly? What is valid? Using ModelState will help catch simple validation errors, depending on any validation attributes you've placed on your model, but if ModelState will not (out of the box) handle "business" validation for you. But again, that really depends on what you mean by "valid." This is not related to your original question, but on you GET action, it's generally frowned upon to use the ViewBag, at all, IMO. Instead, you want to bind the data you need to render your view to a custom model class (the same one you made for you POST action). This way, in your razor view you can use the @model directive and get intellisense and compile time errors for trying to use field values that don't exist.
ooo or my favorite if(playerInTerritory == true){ return true; } else if (playerInTerritory == false){ return false; }
Personally, I use explicit types anywhere that: 1. The type is not described in a cast or a initializer 2. The type is not plainly obvious from a method, property or field named 3. The type is not described in the variable name itself (i.e. `var httpClient`) 4. The type is a primitive type (string, bool, char, etc) 5. The type is an interface Otherwise, I use `var` :)
Sorry. It's valid if it exists in the database. If the department doesn't exist, then it's invalid. As for the GET, I see. So it would be a ViewModel for the GET as well, pretty much?
Install it to your project via Nuget, as the project's readme suggests. 
Thanks for the comment. I see that in the readme now. I missed it. Off to run down that rabbithole
For the model part, yes, and typically you will use the exact same model class for both your GET and the POST for an action. This will make sure that any inputs you render in the view in the GET based off of the model will be able to be bound on the POST, since it is the same model. For your valid question on checking if the id exists in the database, no, there is not going to be a magic way for that to just happen. There would be no way for the MVC framework to know what it is you want to do and validate, just like I didn't know what you meant. There are a lot of ways to make tasks like that less monotonous if you needed to. As an example, you could write a generic method where you pass in a department id and your db / controller context, and the method tries to pull the department and adds a model error if pulling fails. But you'll find solutions like that are often...less useful than writing the 3 lines in your specific controller action to do the check and handle what happens if the department does not exist. Remember that you might have another action that handles a different data entity, like a "customer," and perhaps you will want to handle the customer id validation completely differently than you did for the department.
Why though?
Whooosh
&gt; &lt;Rule Id="SA1509" Action="Error" /&gt; &lt;!-- Opening curly brackets must not be preceded~~ed~~ by blank line --&gt;
I'm sorry if this sounds confrontational, because I really am honestly curious, but I really can't think of how someone would make a mistake like this in 2017. It would require not reading code no more than two lines above to see the if and lack of braces before inserting more code, ignoring the general shape of an if without braces (one line at x indentation, one line at x+[whatever your indents of choice] indentation), moving to the next line and ignoring that VS didn't indent for you automatically so that you have to add your own indent, and then re-indenting when VS removes that extra indent after you finish with a semicolon. Like, yeah, having the braces makes things 100% more explicit and pretty much 100% foolproof (save for edge cases like pesky semicolons after whiles, etc), but there are a ton of mistakes to make in a row to get to the point where it would be a problem that I'd have to wonder if that individual was coding while sober. Only thing I can honestly think of is for teams that use different IDEs since they might not have the same auto-formatting features as VS, but is that really that common?
Realistically that's **never** going to happen. It would break so much code.
I'm always for using braces too. It reduces chances of an error when cutting/pasting/moving code around.
What is the point? To me if you do "good enough" approach from previous comment and you add line under condition, you automatically think of braces, because you will hesitate to put 2 statements in one line and when you reformat, it will be obvious. But "bad" (and recommended in the post) method leaves more room for mistake.
I agree. A constructed object should always be in a working condition (provided that the correct values were provided to it in the constructor, of course).
You have terrible bracket dicipline :p. It's hard to follow the flow of your code like this.
I'm ok with if (foo) bar; or if (foo) bar; myself. Like I mentioned, as long as multiline then's always look like this: if (foo) { ... } with the opening bracket on a new line, the risk of adding a statement outside an unbracketed then by accident is very small.
&gt; I'm sorry if this sounds confrontational, because I really am honestly curious, but I really can't think of how someone would make a mistake like this in 2017. It would require not reading code no more than two lines above to see the if and lack of braces before inserting more code Yeah well. I don't know if the current year has anything to do with it :p
&gt; Use var instead of explicit types &gt; &gt; &gt; &gt; What a religious topic...real arguments have broken out in my office regarding this. Same here. We ended up putting "use var when the type is explicit, consider using var in all other cases" in our guide. I personally always use var.
Ok, but that's just one small part of the style guide, I bet.
They are the same type. `String` is actually `System.String`, so apart from having to type that out or adding a using, it's exactly the same. Our company style guide dictates using C# names (string, int etc.) normally, but CLR/CTS (CTS = common type system) names when calling static methods (e.g. `Int32.TryParse(...)`).
it's a bad code joke since you could just skip the conditionals entirely and do return playerInTerritory;
Not only that, it really can't happen because the C# standard has: &gt; The int type represents signed 32-bit integers with values from –2147483648 to 2147483647, inclusive. There is not a lot of wiggle room here.
&gt; Hypothetically, the aliases could also be swapped out for other types in the future (e. g. int for Int64; long for, say, an Int128). No, because the C# standard specifies the exact size of those types.
Install the nuget package called Stylecop.Analyzer, job done.
I saw this once: if(foobar) Log.Info("Foobar happened!"); ImportantMethod(); Someone then decided logging was a bad idea, and removed all the logging in the file.
You should google "apple goto fail" if you want to see whats a worst case scenario that could happen. Since I saw this I always use brackets for oneliners.
My two cents: Having public setters on properties allow someone to alter the state of the object, therefore you never know if the state of your object is valid. In other hand, if you use constructors (mostly making the type immutable) you have the state protected, because you know no one can change it. In my current project, I use something like a mix of this. For domain objects we always use immutable classes. For DTO's, View Models and other small things we just expose public setters. 
Alright then. I'm using the ViewModel in both actions now and have ditched the viewbag. The only thing left is one of the properties being null after the POST. I've added a new property to the ViewModel, `Departments`, which is `IEnumerable&lt;SelectListItem&gt;` to represent the list of departments in the view. [This is what the actions look like now.](https://pastebin.com/raw/MsRp7Fqk) The view errors after the POST with a null reference for `Departments`. In the GET, the department list is initialized, but in the POST, it isn't, so this isn't a surprise to me, and I know why it's happening, but I'm wondering what the proper way to fix that is. Should I make a new function that fetches the departments and initializes the `Departments` property, and then call that function in both actions? Or is there a better way?
Yeah I totally *whooshed* on that one
It's not that weird, it has been the subject of a decade's worth of holy wars with neither side giving any ground. I support braces for single lines. Regardless of the arguments on either side, the important thing imo is to be consistent.
I've seen the opposite. Someone was wondering whether the condition was getting hit and added a log statement. Now ImportantMethod was suddenly getting hit every time. Ooops.
Great, thank you. 
I've posted [my own optimized solution](https://github.com/VictorNicollet/ImdbOptim) to this problem. It's not a response (since it addresses a different point), but it's certainly inspired by this article.
I came in here just to make this comment. I had this in production code and introduced a bug this way. ALWAYS BRACKET YOUR STATEMENTS! EVEN IF THEY ARE SINGLE LINE!
It is not about consistency, it is very prone to errors, one of the things that makes it highly likely to introduce a bug somewhere in the future.
No one out of school actually makes mistakes like that, right? I don't see how you would not think of adding braces when changing lines like if (x == null) throw new ArgumentNullException(nameof(x)); Only a beginner would look at this and think the throw was part of the if-statement body, right? if (x == null) Log('x was null'); throw new ArgumentNullException(nameof(x)); Especially when you conventionally insert a blank line after a one-line if statement, making it even more obvious the code is wrong. So the mistake is unrealistic to make in the first place, and it's also trivially caught. Also if you test *or* review your code at all you'll notice something like this. 
See https://github.com/VictorNicollet/ImdbOptim
Legit question here. Doesn't it bother you guys using var and explicit types simultaneously? I could never (unless I had no say in it. And it would bother me immensely). 
Very nice and clean implementation. I will run it on my machine later on to compare the result. FYI, the best running time I had was around 9 seconds using 12 cores. (The data on the blog includes the cost of profiling).
I agree it won't happen, but the standard is irrelevant. If it happens the standard will be changed.
I also encourage you to comment on the article including the link to your solution. It will be good to have that there for those who may be interested.
They also have this tool https://github.com/dotnet/codeformatter I don't necessarily agree with everything it does but it sure is convenient
I can't really agree with some of the stuff. For example: // Bad String.IsNullOrEmpty(name); // Good string.IsNullOrEmpty(name); I really prefer using the String alias if I'm calling a static method. I also don't agree with this: / Bad if (payment == null) { return "A payment is required."; } // Good if (payment == null) return "A payment is required."; I don't really agree with not using braces for one line, I really believe using braces makes the code more readable.
Also, there are situations where `var` is the only way to assign a value (other than a boxed `object`) eg. anonymous objects.
The function/method ValidateInput(string) expects a string to be passed to it. Line 20: ValidateInput(); should be ValidateInput(input); 
I'm confused by this one. I tried using properties with their first letter being uppercase and their backing field being lowercase in a project. It was really annoying because I always had to be very careful selecting from the intellisense to ensure that I was accessing the properties and not the field. So now I always use the same name for the field and property except the field starts with an underscore. This filters them from the intellisense and makes them easy to find. What's wrong with that?
If you use visual studio you use spaces not tabs. When you press tab it inserts 4 spaces. But you can go in the options and insert fewer or more. 
Are you sure you are using the Express edition? It's free and shouldn't need to extend trials, well at least that's how it was for 214 and earlier versions. For your dev environment you should be using LocalDB, which is SQL server for simple and single user devs. SQL developer edition is when you are using more of the enterprise features, which you won't be with Express on your VPS
I had an XPS for brief period. It's good for visual studio and has a great spec, but I found the keyboard not sensitive enough. I have quite a light touch when coding, and I found it missed keys quite often.
&gt; Seems like I'll have to extend the trial every month by downloading a new version of SQL Server Express, or something along these lines. wat.jpg https://www.microsoft.com/en-us/sql-server/sql-server-2016-editions It quite clearly says its available for free, including production.
&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;MasterDetailPage xmlns="http://xamarin.com/schemas/2014/forms" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" xmlns:local="clr-namespace:Dumboo" x:Class="MyProject.MainPage" Title="I am the Master" MasterBehavior="Popover"&gt; &lt;MasterDetailPage.Master&gt; &lt;ContentPage Padding="5,30,5,5" BackgroundColor="Gray" Title="Master" Icon="hamburger.png"&gt; &lt;ContentPage.Content&gt; &lt;Grid&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="*"&gt; &lt;/ColumnDefinition&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="45"/&gt; &lt;RowDefinition Height="auto"/&gt; &lt;RowDefinition Height="auto"/&gt; &lt;RowDefinition Height="auto"/&gt; &lt;RowDefinition Height="auto"/&gt; &lt;RowDefinition Height="auto"/&gt; &lt;/Grid.RowDefinitions&gt; &lt;Label Grid.Row="0" FontAttributes="Bold" Text="Menü" TextColor="White" FontSize="Large"/&gt; &lt;Label Grid.Row="1" FontAttributes="Bold" Text="Point1" TextColor="White" HorizontalTextAlignment="Start" VerticalTextAlignment="Center"/&gt; &lt;Label Grid.Row="2" FontAttributes="Bold" Text="Point2" TextColor="White" HorizontalTextAlignment="Start" VerticalTextAlignment="Center"/&gt; &lt;Label Grid.Row="3" FontAttributes="Bold" Text="Point3" TextColor="White" HorizontalTextAlignment="Start" VerticalTextAlignment="Center"/&gt; &lt;Label Grid.Row="4" FontAttributes="Bold" Text="Point4" TextColor="White" HorizontalTextAlignment="Start" VerticalTextAlignment="Center"/&gt; &lt;Label Grid.Row="5" FontAttributes="Bold" Text="Point5" TextColor="White" HorizontalTextAlignment="Start" VerticalTextAlignment="Center"/&gt; &lt;Button Grid.Row="1" x:Name="btn1" Clicked="btn1_Clicked" BackgroundColor="Transparent"/&gt; &lt;Button Grid.Row="2" x:Name="btn2" Clicked="btn2_Clicked" BackgroundColor="Transparent"/&gt; &lt;Button Grid.Row="3" x:Name="btn3" Clicked="btn3_Clicked" BackgroundColor="Transparent"/&gt; &lt;Button Grid.Row="4" x:Name="btn4" Clicked="btn4_Clicked" BackgroundColor="Transparent"/&gt; &lt;Button Grid.Row="5" x:Name="btn5" Clicked="btn5_Clicked" BackgroundColor="Transparent"/&gt; &lt;/Grid&gt; &lt;/ContentPage.Content&gt; &lt;/ContentPage&gt; &lt;/MasterDetailPage.Master&gt; &lt;/MasterDetailPage&gt;
I think I figured it out. It's not the SQL server that is in trial mode, it's one of these *paid extension libraries*. Gotta get rid of it. That's great because the Developer license dependent on the DreamSpark license dependent on a dying DreamSpark account didn't sound too convincing. Thanks!
Turns out it's not SQL, just some extension library that costs a bunch of $$$. I guess I just got the NuGet or something and didn't realize it's only trial, or something along these lines. Not sure since it's been a while ago.
I think you can actually do that through ConfigurationManager. This is probably a better case for a registry key or settings file or something, though.
I'm not saying there's anything wrong with using underscore notation. I've just never seen any upsides to using it. Also, I've personally never had the issue of selecting one over the other but that might just be how I've set up my IDE. My main reasons for not using underscores are: * It doesn't provide any informational value that your IDE doesn't already convey to you * The framework designers discourage the use of it * You can use `this.` for all types of class members so by using that prefix it's easy to see if you're calling something from this instance whereas underscore is pretty much only used in field naming * Intellisense also filters your result if you type `this.` first if that's a concern * The `this.` prefix also instantly tells you if you're working with a static or instance member * You have to use `this` when making extension methods anyways (not saying you should pollute your code with `this.` prefixes everywhere, only where it makes sense) More reasons that are very specific to me personally: * To me `this.` is more descriptive than `_` and I feel it makes code more readable * PascalCase vs camelCase is easy for me to distinguish (I recognize words/text in shapes. Meaning I see `Foo` vs. `foo` as two very different things) * I colour code my syntax quite heavily so fields, properties, parameters et al. are all coloured differently thus stand out better * I rarely make members longer than what can fit on a single screen, so I seldom have the issue of "tracking" where a variable comes from * It's an [annoying keystroke on my keyboard](https://fontmeme.com/images/danish-keyboard-550x183.png) (-/_ is next to the right shift key). Typing `this.` is way more comfortable for me than `_`
I had a Dell XPS from work with i7-2xxx something and 8GB of ddr3 ram. It worked great and we added another 8GB later. I did not have any performance issues but a 7200rpm HDD was better than a 5400rpm. I you have an older SSD it's even better. In general I hate laptops. I'm using an external keyboard, an additional monitor as primary and I never use the touchpad. So I cannot commend any anything other than the hardware mentioned in the paragraphs above.
I don't know what the .NET Core team has been up to, but the use of underscores as a prefix for private fields is not recommended for or against by the .Net Platform Guide. See ["Names of Fields"](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members): &gt; The field-naming guidelines apply to static public and protected fields. Internal and private fields are not covered by guidelines, and public or protected instance fields are not allowed by the member design guidelines. For whatever it's worth.
I would add more memory, but looks fine to me. 
Something I usually do is use property initializers on my models for collections to default to empty collections to avoid the types of null exception you ran into. This is more personal preference though public List&lt;SelectListItem&gt; DropdownChoices { get; set; } = new List&lt;SelectListItem&gt;(); But this will just result in an empty drop down instead of a null exception. You might prefer the exception, just throwing that out there as a suggestion. To answer your question though, you're on the right track for getting the drop down values back. Typically you would extract the data population you would need to do for the GET and a failed POST validation into its own method and call it in the GET and POST, if needed. If you're not aware, you can use Hidden fields to accomplish value preservation in some cases as well. There are HTML helpers for hidden fields that will write a certain model property to the form so that it comes up in the POST and will make it down to the view rendered on a failed POST validation. But hidden fields really only make sense for small bits of data, like if you were displaying a single department, and IMO are not worth using for maintaining a full select list.
I prefer to use 'this' at all times. When I first started using stylecop I thought the rule was stupid. However I do find it makes things more clear, plus Intellisense pops up showing the available fields/properties/methods immediately. One stylecop rule I disagree with is not starting local field names with underscore. http://stylecop.soyuz5.com/sa1309.html Stylecop mandates for instance: private string _firstName; would have to be: private string firstName; This is fine except when it is a backing field for a property. In my viewmodel I need to ensure that any changes are made through FirstName property, and not directly to its backing field, in order to cause the PropertyChanged event to fire. Unfortunately I have had occasional issues with incorrectly selecting the backing field while writing out code. With the underscore it is more clear which is the correct value to assign to. At work I have to comply with stylecop - at home I underscore. I know - I am a bad boy.
I remember a few years ago, around the time the release StyleCop, that they tried to unify what various groups were doing and that they ended up with a lot of compromises.
I must have missed that part. It does make sense as the outside world shouldn't access private or internal stuff, however; I still think the `this.` prefix is a better option for the reasons I listed in my other response.
I know its very subjective, but in my experience, its the fans of spaces that simply refuse to compromise and those who prefer tabs (EDIT spaces =&gt; tabs) do compromise. The only reason I notice that files are indented with spaces is when the code formatting is inconsistent, some with 4 spaces, some with three, some with who knows what. Regardless of whether I format the document with tabs or spaces, the file show a ton of changes on checkin. This is really people problem. 
Are there tools to enforce formatting so that people can't commit to git if they aren't respected? (Or a checkin policy for those using TFS)
Thats not the problem. The function expects a string so you need to pass it a string. Per the logic of the code, the string you want to pass is the one stored in the "input" variable. So, as /u/Pones said, just change the line to ValidadeInput(input); and all should be good :) The static keyword just makes the function available everywhere :) (it's more complicated than that but for know it's all you need to know)
I think that when its short and clear, such as with guard clauses, it can go all on one line. If you feel like it needs a newline after the condition to make it clear, then maybe the brackets would be good. The interpretation of which to use can get tiring. On one project we specified that guard clauses should be on one line with no braces and that all other conditions required braces. Not always ideal, but easy to decide which to use.
I called them, with the amount they call i could write it myself.
By default VS is using spaces instead of tabs, I can't remember exactly when this changed, maybe VS 2010.
Yeah that is a good way to do it in my opinion. You save to the App.config using the static void AddUpdateAppSettings(string key, string value) from this link: https://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.appsettings(v=vs.110).aspx#Anchor_3 
Yeah that will run just fine. RAM might become a limit in more complex dev environments (with Docker and other tools in the mix), but that's true of any dev setup. 8gb is usually just fine
Are you creating or modifying the files before naming them? If so make sure that you dispose of the the object that is opening\creating the file. EDIT: Without your code this is the best I can guess. Sample code: using (var stream = new FileStream("File.txt", FileMode.Open)) //using block will automatically dispose of the the filestream object { // Do work here } 
Share the code. Impossible to tell without it. 
I prefer to always express the object. However, at least your exceptions make sense. I feel like some people in my office just use var all the time. So it'll say var result = FunctionName(); it's like, ok, what the fuck is that then. I don't like that. 
 if (folderBrowser.ShowDialog() == DialogResult.OK) { itemsPanel.Controls.Clear(); foreach (string filepath in Directory.GetFiles(folderBrowser.SelectedPath, "*", SearchOption.TopDirectoryOnly)) { Item i = new Item(filepath); i.Margin = new Padding(12, 6, 12, 6); i.MouseDown += Item_MouseDown; i.MouseMove += Item_MouseMove; i.MouseUp += Item_MouseUp; i.ContextMenuStrip = contextMenu; itemsPanel.Controls.Add(i); } }
After that I try to rename the files
 uint counter = 0; string newName; foreach(Item item in itemsPanel.Controls) { newName = RenameFile(item.FilePath, NDigitCounter((uint)UpDownDigits.Value, (uint)upDownStart.Value + counter)); File.Move(item.FilePath, newName); ++counter; }
Oooh, okay yeah I could see that happening, especially if they did it with Find+Replace or a script. Thanks!
Item is a custom user control for visual representation of the files
I don't work with text files. I just need to rename some images. The only method I use before File.Move() is Directory.GetFiles(). I posted the parts of the code that are related to the problem
No love for Mono style guide
Good point!
I don't think there's a whole lot of functional difference, really, especially given how common/widespread the _ convention seems to be. It lets me omit `this` unless I need a reference to the current object, or need to disambiguate something, which are really the only times it's not clutter (IMO, obviously). Neither's very common, especially since camelCased constructor arguments don't collide with PascalCased properties or _underscorePrefixed private fields. That said, I treat internal and protected stuff as though it's public.
&gt; Please Note: If you change your code, due to some unit-tests reasons. Please, don’t do this. It’s the awful practice. Well, that's a bit of a generalised sweeping statement that leads people into using other bad practices. If you're refactoring some shitty code that didn't have dependency injection and unit testing in mind then of course you should change the actual code. That advice is suggesting the opposite, in that if you ever have a legacy system you want to refactor you shouldn't ever change it because it is "the awful practice".
This system has dependency injection and unit testing in mind. But for some historical reasons, we use Actions and Func, instead of Expression. So, I told about cases when your system design is ok, but you have troubles with only tests. Thank you for the remark. I'll rewrite that statement and make it clearlier
I've had that same setup for work only with 16GB no issues. I'm sure it would be fine with 8GB too. Multiple open/running solutions at a time no issues
There are quite few things that I disagree on. &gt; Don't use braces for just one line I had been a proponent on this one until I got my first actual job. I was told not to do that because it's very prone to introduce a bug. I was stubborn to keep this style and arguing with those who have more experiences than me. I was like "what kind of people would be able to clearly fall into that very stupid trap". Then until one day, I was trying to learn Python and clearly that language does not have any curly braces. As I switched between these 2 languages, I fell into this very stupid trap. I would say if you are polyglot, it is very likely a new bug could happen due to this style. Also, this is one of the most famous bug by Apple. https://www.imperialviolet.org/2014/02/22/applebug.html &gt; Don't use explicit this reference &gt; Use _underscoreCase for private instance/static fields I really don't like these 2 styles at all. I have always been following the old/original C# naming convention. https://msdn.microsoft.com/en-us/library/xzf533w0(VS.71).aspx The keyword "this" makes it more readable. I tweak my Resharper to force having "this" keyword. As for underscore prefix, it is very ugly, as if it would put chilly on my eyes. One of the most inconsistency style. 
I'm on your side, I brace. However, if I moved company with an existing code base that did not brace I would follow their convention. The alternatives would be refactor everything, even if you let Resharper do it, it would be a lot of changes to commit. Or I could do my own thing on new code (Would I change their old code when I touched it??) which would be inconsistent which in itself is a cause of errors. Our way is superior in the sense that a new developer starting on my team who did not brace, and checked in code without braces would be more disruptive as we are used to understanding code blocks in braces. Next up, tabs vs spaces ;)
Does the `Item` class open the underlying file and hold onto that reference? That counts as the file being used and will prevent the move.
Oooo and we must do editor black background vs editor white background :D
Ok so it looks like i can do this using the App.config file. But also you are saying i should use registry or a settings file instead. I am a beginner at C#, so I do not know the pros/cons of the different ways of doing this, so would you mind explaining why one is better than the other?
I have a 13 inch Lenovo thinkpad. It's about the smallest and most powerful laptop I have and works great when I travel. I highly recommend it.
Trackpoint for life! 
Is there already a file on disk with the new name? That'd cause a problem. Maybe try File.Delete(newName) before the File.Move() operation?
Looks like Telerik's JustCode, but this project is closed since lots of features are available directly in VS 2017.
I've had this happen when I was viewing the folder in Explorer while the program was running.
To be honest, it's out of my wheelhouse. In particular, some googling says to *not* use the registry. It's getting pretty long in the tooth, so it's probably getting phased out. Check [this](https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/using-application-settings-and-user-settings), though.
Once you've gotten used to it you don't want another laptop without it. Too bad that good lenovo laptops are so expensive.
Thanks! Looks like its time to download 2017
If you're looking for this exact line under the code (with the colored words), then VS won't provide it. The line about the features I took from the statement on the JustCode's website. But sure, the new studio worth giving it a try.
You could check out the Asus Transformers 
No, there isn't a file with the newName already.
the dell xps 13 
I use `Image.FromFile(FilePath)` to get the image so I can use it as a thumbnail (PictureBox) for the Item User Control. Could this be the problem? And if it is, how do I read the image and then release/free the file?
You may want to avoid Lenovo. They are a Chinese company that has been caught several times pre-installing spyware. They are performing economic espionage using their hardware. https://www.quora.com/Does-Lenovo-has-spyware-pre-installed-in-laptops [Lenovo Caught (3rd Time) Pre-Installing Spyware on its Laptops][1]. [1]: http://thehackernews.com/2015/09/lenovo-laptop-virus.html
Surface Pro
If you have a nice budget, I'd suggest a surface book.
Dell XPS 13 is lightweight, has excellent battery life, available with 16gb RAM and plenty of storage and has a 4k screen to boot. It's also available at Costco for a good price. I own one. It's nice.
This is likely your problem. Wrap it in a using statement or call Dispose() on your Image object when you're done with it.
+1. Have it. Love it.
Removed: Spam.
Toshiba chromebook 2 running a good linux distro with an upgraded M2. Sounds shit but it has been the fastest little machine ive ever slapped together.
You could try using a settings file instead of the web.config https://msdn.microsoft.com/en-us/library/a65txexh.aspx 
Reattach to process is something I didn't realise I wanted until now. This is going to save me enough time during the day for an extra tea break!
I understood what you're getting at, VS17 has the features available. Justcode has the nice interface. So far VS17 is really nice, should have updated a while ago. I'll have to read up on the new quick actions. 
Hey I do this every day! I use a 15" MacBook Pro Retina with VS Code and .NET Core, while tethering to my iPhone if I need to do things on the internet like look up documentation. I actually prefer the bigger size. I tried an 11" (it might have been 13"?) MacBook Air and found it to be too small for writing code.
A very basic POC, but totally cool!
Very true. I guess if you want to avoid the hassle of spyware, go with a Dell laptop. They're the next best brand I have experience with. (Although they have their own short comings like every other company)
whatever your bus travel time is times 2 for battery. thats it
[Definitely the problem.](https://stackoverflow.com/questions/6576341/open-image-from-file-then-release-lock)
It means that the application folder can't be read-only. If it's not hosted on a network share, I'd recommend putting it in the Settings instead of config.
Windows 10 has a feature (I believe) that lets you reset windows to pre oem software installation. Otherwise re-install windows, the license is bound to your MS account, and it will remove all the pre-installed junk. 
While I really like my Surface Pro, a couple of days spent sick in bed convinced me that it's not that great when used on a lap. I ended up getting a cutting board out of the kitchen to perch it on. I would suggest to OP that they load a Dell XPS 13 up with a lot of memory, even if it's "only" an i5. 
So you don't have to google. Spot the error . . . hashOut.data = hashes + SSL_MD5_DIGEST_LEN; hashOut.length = SSL_SHA1_DIGEST_LEN; if ((err = SSLFreeBuffer(&amp;hashCtx)) != 0) goto fail; if ((err = ReadyHash(&amp;SSLHashSHA1, &amp;hashCtx)) != 0) goto fail; if ((err = SSLHashSHA1.update(&amp;hashCtx, &amp;clientRandom)) != 0) goto fail; if ((err = SSLHashSHA1.update(&amp;hashCtx, &amp;serverRandom)) != 0) goto fail; if ((err = SSLHashSHA1.update(&amp;hashCtx, &amp;signedParams)) != 0) goto fail; goto fail; if ((err = SSLHashSHA1.final(&amp;hashCtx, &amp;hashOut)) != 0) goto fail; err = sslRawVerify(...); . . . [Source](https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/)
Totally agree, definitely the feature out of the 7 that I'm most excited for. 
There's a ReAttach extension which is doing the same work, but it also has one pretty useful feature - you can set it to attach the process before the process is actually started and it will be waiting for the process to start and then attach, so you dont miss the most early stages. I didnt find this feature in the studio.
Ditto on the Surface Pro as a laptop. Plenty serviceable with a flat surface beneath it to support the kickstand, but not particularly great on a lap.
Please review the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion) EDIT: Basically, Reddit and /r/csharp is not a platform for advertising or pushing your own content. Take part in the community at-large. Or don't and get flagged for spam.
Yes I agree it's definitely JustCode.
&gt; But why do I need a debugger when I have unit tests? Seriously though, this is pretty awesome stuff.
I've been really happy with my Surface Book, which basically solves the "not great as a laptop" issue. It's more expensive and a bit larger and heavier, though.
That assumes they haven't done anything more devious. At this point, if they're willing to install spyware on the machines they sell to you, it's not worth the risk of buying their machines at all. If you care about your data, at least.
/The code on the bus goes round and round, round and round, round and round/
Still an awful name. I'd really remove two lock operations you do: - Upon every retrieval of `L.Static`. Check for null, if it's null then lock, check again. Don't always lock. - Avoid locking at every single log request. This is a multi-threading super mistake, **especially** with something slow as file access. Instead store it in a thread-safe in-memory object, then flush it all together. Locking at every single log call makes this library completely unusable in a multi-threaded environment - and in single-threaded environments you don't need locking. Also, really consider an async variant instead, since you have file access.
https://www.akshaysura.com/2016/08/31/ioc-container-benchmark-comparison-2016-including-microsoft-extensions-dependencyinjection/ Found another IoC benchmark. 
Those threading tips are 10/10!
Nice! Super fast too. These are the timings I get with your code on my machine:- OptimizedSingleThread -- 8,239.49ms OptimizedMultiThread -- 3,065.19ms GetTopWordsSequential -- 35,271.89ms Best I managed was 7.8 seconds. Worth noting that with the same text file your code and my code get completed different results. For example, the word `life` actually appears `144,614` times according to Notepad++. But my code counts `124387`, and your code counts `133395`.
I just had the chance to run your implementation and unfortunately it does not produce the correct result. I tried both `OptimizedSingleThread` and `OptimizedMultiThread`. I didn't have a chance to debug it but you can see the behaviour if you increase the `TopCount` to _100_ and compare the produced result with the `GetTopWordsSequential`. You will see the counts do not match. Are you using different set of `StopWords`?
I think in this case a `ConcurrentQueue` could be a good candidate? Multiple threads can be logging to "L" (and the queue can be an internal implementation detail), and then at some given interval "L" could batch it out to log file. Would you agree? This avoids locking.
You should be able to use the ItemDataBound event, this will fire once per row and you can build your maxima from that
Would you care to show me a single example to work off of, so I get in the loop?
Microsoft's one on MSDN is pretty good actually: http://j.mp/2tr6lcd /edit: bitly version of link because I still haven't worked out how reddit links work yet
No quad core tho :(
You can only access/change UI components from the UI thread. There are a couple ways to do this, slightly different depending on the platform you're using. Some example help: https://stackoverflow.com/questions/142003/cross-thread-operation-not-valid-control-accessed-from-a-thread-other-than-the https://stackoverflow.com/questions/5037470/cross-thread-operation-not-valid
Somebody had posted a comment, but I'm unable to see it. Does this mean it's been deleted?
/r/ProgrammerTIL ?
Oh! I didnt know about that sub. Thank you!!!
Use a Windows forms timer. System.Windows.forms.timer The elapsed event fires on the ui thread.
Try a 13 inch Metabox. They custom build your PC to your specs. 13 inches/ or 15 inches are perfect for the bus or train. I have a 17 inch Metabox that i leave at work and a 13 for transit and when on site for pentesting. 
Good points, thanks! * That's a very good trick, I'm definitely doing it. * For this, the first thing that comes into my mind is using a `IProducerConsumerCollection&lt;T&gt;` (not sure right now which implementation would be more suitable) + a task managed by the logger that polls and process it + an event property for the library user to be notified of an eventual failure. Would you suggest something different? Now that you mentioned the single thread usage, I could offer a configuration to optimize for single-thread, dropping all the thread-safe overhead.
Import your data into instances of a class. Then, bind your datagrid to a list of the class. For the avg/total/min/max, just use LINQ on the list of class. List&lt;MyClass&gt; _data; void Load(){ _data = LoadDataFromDB(); datagrid.DataSource = _data; } Void ShowMessage(){ var max = _data.Select(x =&gt; x.Population).Max(); .... }
It was auto-removed because they used a URL shortener. I've restored it.
Remember this simple rule my friend and you will never run into issues; Single equals sign sets the value, two will check the value.... Example....(Single equals sign): bool playerInTerritory = false; //This will set the value of playerInTerritory to false even if it was set to true in your OnTriggerEnter2D function. Example2....(Two equals signs) //Note usually you will only need two equals signs in an 'if' statement so you can use this rule to test whether the code is working as you intend it to. if(playerInTerritory == false) { //Do something } //As you can see in this second example, you can see that we are checking for a value, this means that the value of the variable will not change from this line of code and hence is still the value that is set in your OnTriggerEnter2D function(true). I teach Games Development in C#(Unity) so do me a favour and have a look at this MD file and familiarize yourself with these easy rules; https://github.com/MakingSense/code-style-guides/blob/master/CSharp/README.md
Use an event if it's not in the form class, and then you'll have to begininvoke any commands called by the event / separate thread(whether or not if it's in a separate class) I couldn't figure this out even with reddit/stack overflow's help so I'd be happy to show you some code if you need more explanation.
The x260s thinkpad is amazing for a small foot print and with the extended rear battery, I made it from Miami -&gt; Frankfurt with about 8 hours development work (multiple VMs and Docker containers running) and still had 55% battery left. I will say I was running Ubuntu on it because I just can't stand windows. But this said any 12-13inch high end system will do you wonders. With my current work 13inch touch bar MacBook Pro with 16gb of ram, I can easily make it 9-10 hours on one charge. 
Rectangle
Thanks! I've been using a line that starts at (x,y) and ends at (x-1,y-1) so far, and it looks terrible.
Dot size can be set as rectangle line width.
About the first tip, Set Next Statement: am I correct in thinking that acts as an unconditional jump?
Path? &lt;Path Stroke="Black" StrokeThickness="1" Data="M 0 0 L 1 0 L 1 1 L 0 1 Z"&gt; &lt;Path.RenderTransform&gt; &lt;TranslateTransform X="…" Y="…" /&gt; &lt;/Path.RenderTransform&gt; &lt;/Path&gt; This draws a small square, the location is determined by the values in the TranslateTransform values X and Y. Probably not the easiest way but a bit more configurable than a rectangle (e.g. if you want your dot to become a small crosshair or something) 
You're actually really close, but all you're doing is just calling both the `Activated` and `Deactivated` methods one time each when the form is initially loaded. You need to set the event handlers on your form to fire the corresponding method instead: this.Activated += Form1_Activated; this.Deactivate += Form1_Deactivated; and remove all of this: this.Opacity = .5; Form1_Activated(this, e); Form1_Deactivated(this, e);
This is my opinion as well. Any modern day computer will do well. I'd also add an SSD at nearly equal importance to good battery life. Can't go back to HDDs!
You should not need to change how you're logging library behaves based on whether the user thinks they need a single vs multithreading implementation. Your logger should internally spin up a thread which monitors a concurrent queue or blockingqueue for example. All log entries are appended to this queue and your consuming thread could flush all messages to disk once per second or even just one at a time as they come in. I haven't run into a lot of cases where it became necessary to implement buffering for a logger but if you do it, I would avoid a buffer longer than one second. People want to be able to monitor logs in real time sometimes, so latency is not good.
I'd need to look up the implementation details of that class. When dumping the logs you would not want to individually dequeue each item (with each time internal locking in the data class). You would need a mechanism to access all elements without locking. Then you can just lock, replace the concurrent queue with a new one (or extract all elements), unlock, then access all elements from the old queue and store them away. You would not want to lock for the time you need to write the entries to the file system.
Just tried doing this, and it gets desynced after 30 seconds. Oh well. 
Doing Dispose() on the Image object doesn't work but this worked: using (var bmpTemp = new Bitmap(FilePath)) { this.Image = new Bitmap(bmpTemp); } Thanks u/sfguy1977 and u/mconeone!
this website draws extreme amounts of cpu and RAM
Thanks alot. The last part i didn't quite understand, but that's for another day.
Ah i see, thanks for letting me know more. I will definitely have it in mind for further C# exploits.
Yep. Though there is also a "Run to Statement" command.
Lenovo was using rootkits. Not sure if they still are.
So there I was, on the first one, trying to reproduce it.... Then I realised it's Visual Studio 2017, and I'm using 2015! We're moving to 2017 soon though, so I've bookmarked this to come back to.
Yup. Damn good machine. 
~~Removed: Rule 3.~~ ~~Maybe try /r/PowerShell/ instead.~~ EDIT: [Oops. Restored.](http://cdn3.meme.am/cache/instances/folder712/500x/57883712/kevin-hart-my-bad-disregard-that.jpg)
I had actually misunderstood the rule for invalidating words based on their first character, so I was counting words that you dropped (for instance, if you had `"(life and death)"` you would only count `"death)"` and I would count `"life"` and `"death)"`. I've adjusted my code to use the same rule as yours (which makes it run even faster, since it now skips additional words).
The splitting rules from the original code are not perfect. For instance, `"Say hello?"` is counted as `"say"` and `"hello?"` (instead of `"hello"`).
I'd suggest moving the data to a database (Excel sheets are not very efficient or easy to work with) such as SQLite (a flat file database that sort of works like Excel^1, but is easier to develop against). When your data is in an SQLite file, it is trivial to look up data using SQL queries: `SELECT Amount, Weight FROM Parts WHERE PartNumber = 123456`. [1]: Far from the actual truth.
Check out [EPPlus](http://epplus.codeplex.com/). It's relatively easy to work with.
OP was asking how to represent the PowerShell data structure in C#
This is a C# question.
I didn't get a chance to reply to your post before it was removed. The short answer is, that's not really the right way to attack the problem in a typed language. What you'd want to do is define classes that model your data and not just use the primitives. While this sounds like more work, the upside is that it lets the compiler catch a lot of errors for you. Since the post was deleted I don't have access to your sample powershell code. So I'll just make up an example from what I remember. MyData = @{ "name" = "Bill Johnson", "age" = 21, "favorite cereals" = @( @{ "name "= "frosted flakes", "brand" = "Kellogs", "Milk" = "whole" }, @{ "name "= "Honey Nut Cheerios", "brand" = "General Mills", "Milk" = "Almond" }, @{ "name "= "Raisin Bran", "brand" = "General Mills", "Milk" = "TwoPercent" } ), "reddit Stats" = @{ "username" = "b_Johnson", "userSince" = "10/1/2016", "top posts" = @( @{"postId" = 23422, "karma" = 23456, "Title" = "Picture of Celebrity" }, @{"postId" = 534243, "karma" = 352325, "Title" = "Repost of Picture of Celebrity" }, ) } } To model this in C# you would do someting like this: public class RedditPost { public int PostId { get; set; } public int Karma { get; set; } public string Title { get; set; } } public class RedditStats { public List&lt;RedditPost&gt; TopPosts { get; set; } public string Username { get; set; } public DateTime UserSince { get; set; } } public class Cereal { public string Name { get; set; } public string Brand { get; set; } public MilkTypes Milk { get; set; } } public enum MilkTypes { TwoPercent, Almond, Whole, NonFat, Skim, Soy, } public class Person { public string Name { get; set; } public int Age { get; set; } public List&lt;Cereal&gt; FavoriteCereal { get; set; } public RedditStats RedditStats { get; set; } } And then to use it you would do: Person myData = new Person { Name = "Bill Johnson", Age = 21, FavoriteCereal = new List&lt;Cereal&gt; { new Cereal { Name = "Frosted Flakes", Brand = "Kellogs", Milk = MilkTypes.Whole, }, // Or you can do it on one line too... new Cereal { Name = "Cheerios", Brand = "General Mills", Milk = MilkTypes.Almond, }, new Cereal { Name = "Raisin Bran", Brand = "General Mills", Milk = MilkTypes.TwoPercent, }, }, RedditStats = new RedditStats { Username = "b_Johnson", UserSince = new DateTime(2016, 10, 1), // Notice how this date is no longer ambiguious as to whether or not it is October 1st or January 10th? TopPosts = new List&lt;RedditPost&gt; { new RedditPost { PostId = 23422, Karma = 23456, Title = "Picture of Celebrity", }, new RedditPost { PostId = 534243, Karma = 352325, Title = "Repost of Picture of Celebrity", }, }, }, } The benefit here is type safety. You can't accidentally say that Bill's age is "I like Froot Loops"; it has to be a number. 
I get it. Thanks so much for taking the time to reply to me, with a full blown example. 
You can also drag the little indicator arrow around to select which line you want.
I believe FizixMan has the answer you need. UIElements can only be accessed on the UI thread so there is some magic you need to do. /u/FizixMan has provided SO links that should help in that. As a side note, have you considered using a background worker or a threadpool instead of the thread class? I find those easier to work with than directly messing with threads.
You misunderstand how strings work in c# and thankfully most languages. 1. The reason the allocation of bytes cannot be altered is because it matches the exact size of the string and the string is immutable. Strings offer no methods for appending to their data or manipulating single characters. the operator + returns a new string object, like when you add 2 integers, only unlike integers the new object uses more memory. 2. yes. 3. if you assign a different string to a variable then it now points to that string, if the old string have no other variable pointing to it the memory will be freed at some point. if you are building a string, using a lot of the "manipulations" offered by the string class, use the StringBuilder class it has the behavior you are looking for where you can manipulate the internal data structure.
You've already had some very good answers. One thing to make clear though: *Declaring a variable of type string* is **not** the same as *instantiating a string*. To go through your questions with examples: &gt; 1 - When you declare a variable that is string type, you might not know the exact size of the string. It could be very long sentence. What is the allocated memory is not enough? string s; s = "Hello"; s = s + " World"; In line one, you declare a variable which *point at* a string, but you have *not* instantiated a string. In line two, you instantiate a string. In line three, you concatenate two strings together *which results in a third string being instantiated*. You then set your variable, `s`, to point at that new, third string. &gt; 2 - What if I declare a string that is 20 MB in size, does it mean that 20 MB of RAM will be allocated to the string? How will you declare a string that is 20MB in size? The only way to do this would be to have a string that actually contains 20,000,000 (approx) characters, in which case, 20MB would be allocated, because where else are those characters all going to be stored? As you can no doubt see, this is not a practical way of managing strings! &gt; 3 - Why the string cannot be erased? What if I want to assign another value to the string? Like string1=apple and later I need it to be string1=peach Again, the secret is to understand that string variables *point* at strings, they are **not** actually strings. string string1, apple = "Apple", peach = "Peach"; string1 = apple; string1 = peach; In line 1, you create three string variable, each of which can point to a string. You also instantiate two strings. You make the variable `apple` point at the string "Apple", and the variable `peach` point at the string "Peach". The variable `string1` currently points at nothing. In line 2, you make `string1` point at the same string that `apple` is pointing at, i.e. it points at the same string "Apple". In line 3, you make `string1` point at the same string that `peach` is pointing at, i.e. it points at the same string "Peach". The other string, "Apple", still exists because `apple` still points at it, but once `apple` goes out of scope, nothing is pointing at it any more, and the garbage collector may clean it up.
The desync is mostly because it waits for your code to execute in tick event before it starts timer again there are different options in the different namespaces that can keep going but then you have issues where long running code could potentially still be running when the next tick occurs. 
When i try to create the "Cereal" class (RootJson in my case) i get an error, as seen here: http://imgur.com/a/9mlFI My classes look like this public class Fact { public string Name { get; set; } public string Value { get; set; } } public class Section { public string ActivityTitle { get; set; } public string ActivityText { get; set; } public string ActivityImage { get; set; } public string Title { get; set; } public Fact[] Facts { get; set; } } public class RootJson { public string RootTitle { get; set; } public string RootText { get; set; } public Section[] Sections { get; set; } public static implicit operator RootJson(RootJson v) { throw new NotImplementedException(); } }
Any idea what I'm doing wrong here?
You can also try a thread timer (System.Threading.Timer). This will require you to use Invoke or BeginInvoke on a delegate method to update the ui since it happens on a different thread from the ThreadPool. It has lower overhead and probably works better than the forms timer (which is dispatched by the window manager afaik), but may not be any more accurate in the long run. The only Windows timers that are super accurate that I know of are the multimedia timers, which is going to be a lot more work to implement. 
Form timers don't stop while you're executing, but they are not dispatched or managed by a dedicated thread. They are managed by the window manager and you just get a WM_TIMER message to your wndproc when it fires. This means that ANYthing that can affect performance of your wndproc or the window manager will screw up the timing. It is also fairly inaccurate and probably shouldn't be used for anything faster than 100ms if you need any kind of precision. 
Tanks, doing that actually fixed it, and that's a really good rule to remember. Really, thanks a lot.
1) Some languages, e.g. C++, can trip people up on this. If you make a stack allocation, you can overflow the stack if you allocate too much data to it, and you get a stack overflow exception. In C#, this won't happen because anything that's too large for the stack will be automatically allocated on the heap. String is a reference type so is allocated on the heap anyway. 2) Yes but strings in C# consume more memory than in C++, for example. 3) You can reassign strings, but as strings are immutable (can't be changed), the string is destroyed and a new one is created. To improve efficiency, you can use StringBuilder https://msdn.microsoft.com/en-us/library/system.text.stringbuilder(v=vs.110).aspx
In your screeenshot, you are are setting `Sections` to point at a Section object: `Sections = new Section {...}` But in your code snippet, you've declared `Sections` to be of type `Section[]`, i.e. an *array* of section objects, not just one section object. There are two ways to remove the compiler error, and without knowing more about what you're trying to do, I don't know which one is correct. If `Sections` is supposed to point to only one section, then declare it as `public Section Sections {get; set;}`, i.e. without the `[]`. Also, consider renaming it to be singular rather than plural. Alternatively, if `Sections` is supposed to be an array, and what you're trying to do with the `new Section {...}` is create an array with one Section object in it, then you will need to do something like `Sections = { new Section {...} }`. The extra set of {} is used for initialising arrays.
Ah yes I think I was actually getting it backwards in my head and you have to specifically say to wait for the code instead of the other way around 
Let me just say, if you're interested in AI and such this is a great thing you're doing, just sort of dicking around and seeing if it works. Onto the actual helpful advice. From the code I see, you haven't been programming for very long. Personally I think you need to take a step back and try to make something more simple so you can get a good understanding of the basics (If you really like Unity go look at roll a ball). Work on making code as efficient as possible and as clean as possible. If you're insistent on continuing you could always use Unities NavMeshAgent (look it up), it's basically a free half decent AI. It is, however, in my opinion not machine friendly, if you have a bunch of navmeshes running your game will lag to shit.
One way is to store on the GameObject the different colliders as properties. That way you can check in the method which one is which. An example is here: http://answers.unity3d.com/answers/737045/view.html So if you stored on your enemy two properties: public Collider2D NoticeAreaCollider { get; private set; } public Collider2D HitAreaCollider { get; private set; } Assign them in your enemy's `Start` method (or in the inspector, I don't recall which is easer/possible/best), then in the collision check, you can just check `if(other == myEnemy.HitAreaCollider) { //do damage }`
This is great advice. OP, you're going to grow out of using Excel sheets pretty quickly, a database is a much better solution for the task at hand. SQL Express is a free MSSql database that runs in your local environment and will allow DBs up to 10GB in size. OP, if you need any help or are looking for a place to start with this feel free to PM me. I'm always happy to help.
Yea I knew about that one, but this was new to me! Thanks all.
I used LinqToExcel for a similar project and that worked out pretty well if you absolutely NEED for the original excel sheet to always exist in excel, otherwise I agree with /u/Zendist that you should move it to a database. Just easier to work with IMO. Short Rundown of using LinqToExcel: const string fileLocation = @"C:\Path\to\excel\file.xls"; I moved everything to an object matching the structure of my excel sheet to make it easier to work with. var excelFile = new ExcelQueryFactory(fileLocation); //open a new file from the const string with the file path string[] sheets = excelFile.GetWorksheetNames().ToArray(); //along with the name of the sheet we are working with string sheetName = sheets[0]; var Things = from a in excelFile.Worksheet&lt;Object&gt;(sheetName) select a; List&lt;Object&gt; Objects = new List&lt;Object&gt;(); foreach (var a in Things) { Object info = new Object(); info.ColumnName = a.ColumnName; info.ColumnName1 = a.ColumnName1; info.ColumnName2 = a.ColumnName2; info.EffectiveDate = a.EffectiveDate; Objects.Add(info); } return Objects; Also a beginner and this was my first project. So do with that what you will. 
That's fine. As far as I can tell, it hasn't been submitted before and the information is still current.
I wonder if we could get Avalonia working with this? https://github.com/SteveSanderson/Blazor
The problem is your console app did not get any arguments so args has a size of zero. If you want to test it then either: * Allocate memory to it: args = new string[5] //just as an example * Start your program with command line arguments, which can be done by right clicking on the solution in the solution explorer in visual studio, selecting properties and then in "Debug" you can add the command line arguments. edit: Later you have and other IndexOutOfRange and it is possible this is what you meant. If you have a multi-dimensional array, then it's lenght will be all the elemnts in every dimension. Meaning you can't index it using the "Lenght" property. I guess you meant to use: Stats.GetUpperBound(0) + 1; which will give you the 501 that is the size of the first dimension in your array in the code you gave.
The blog post itself is clearly made with effort, and I don't see any indication that it's /u/Kaaletram own content. Furthermore, they have a pretty decent participation record on /r/csharp and reddit in general. _Most_ non-text posts are made with "zero commentary", nor do I think this submission in particular requires it, so I don't think that's an issue here. ~40 days isn't that bad. I don't think it violates the Rule 7 clause: &gt; content should be relatively current (that is, not terribly obsolete or outdated) The intent of which was to provide a mechanism to remove submissions that are in the vein of "How to work with auto-properties!" even if the submission itself was well written and made with significant effort. C# 7 features are still new enough to be relevant and worthwhile.
to make it more clear, this is what I think you want. This is the scenario where you want an array of Sections, not just one. RootJson rootJson = new RootJson { RootTitle = "My root title", RootText = "My root Text", Sections = new Section[] { new Section { ActivityImage = "My first image URL", ActivityImage = "My first activity text", }, new Section { ActivityImage = "My SECOND image URL", ActivityImage = "My SECOND activity text", }, }, }; Also note the final semicolon after the last curly brace.
I only just saw this. My only goal was to share this info for some inexperienced users who may not have this information. Didn't realize that the age of the post would be an issue
Just upgraded our projects to .NET 4.7/C# 7 last week. Nice to be able to have a function return multiple values without packing them in some xxxResult type
Quick review. Many points had multiple occurrences in the code. - It is **very** weird to throw a `NullArgumentException` on arguments that are **not** `null`. You do this plenty of times. Don't do this. Reserve `NullArgumentExceptions` solely for `null`-arguments. - You have unused namespace includes. Clean up that stuff. - Your lines are very long. Really consider having a length limit, that makes it easier to read the code in tools like GitHub. Right now you constantly need to scroll right and left and right and left. - Your documentation is incomplete. - While you often check for validity of arguments, you never check whether the `this` argument (usually named `bld`) is ever `null`. - Simple string concatenation is faster if you only have a few simple arguments and in most of your cases also more readable. Personally I really consider `bld.Query.TrimStart('?') + "&amp;"` more readable than `$"{bld.Query.TrimStart('?')}&amp;"`. - Why do you accept invalid ports like 0 and 23423532? Just take a `ushort` as an argument for ports. - The use of the `predicate` argument on the `UseHttps` method is very very **very** ugly. The documentation also just says "default true, if false sets scheme to http" - and if `true`? Probably "https", as the method implies. But a name such as `predicate` is very very poor. Just have a `UseHttps` and `UseHttp` method. Or have a `UseHttp` method with a `useSecure` flag - at least something more descriptive than `predicate`. - Your library works incorrectly when query parameter contain values like `&amp;`. They're not being escaped. As a result the link is just wrong. edit: After reading responses like "Thanks for the **unsolicited** review." and "[..] to make your review **seem legitimate** [..]" I feel like I wasted my time to a very ungrateful dev.
https://github.com/dotnet/codeformatter don't know what the status of it is, but there was a project to do this.
It will really depend on the game. If there's a log file written out, you could parse that. Otherwise, there's a good chance that you'll have to inspect the memory in-use and determine what is being written to the feed/screen. Possibly [Cheat Engine](http://cheatengine.org/) is one way to go to do this. EDIT: Word of warning though, depending on the game/company, using software to read the state of the game may be against their rules.
Unless the log file is being deleted after each game, I am unable to find one. If it helps it's an Unreal Engine 4 game...specifically PUBG.
We use Entity Framework which requires a per-environment config setting. We have a separate install folder and shortcut for each environment installed and use Wix as our installer. Our app.config has only placeholders which the build event script replaces with the needed values and generates a separate config file for each environment. Our Wix project knows where to retrieve the separate config files to install in the separate install folders.
I'm wondering if there is a tool that will prevent checkin/commit of code that doesn't respect the style rules so that the dev is obliged to fix the style in order to checkin. A tool like the one you linked might help with older codebases that have a lots of things out of style.
the game is stilll early access, they may implement such a feature at some point so why bother. ps: avid fan of the game
You're a little confused on how variables, values, and references work. Every variable contains something, the question is what is that something, and what is its meaning. In C#, there are two types of *variables*: variables that store *values*, and variables that store *references to values* ('references'). Variables have one behavior or another depending on their *type*. Take for example the simple `int` type. In C#, `int` is a value type, and uses 32 bits (4 bytes) to store its value. So wherever that variable is used, 4 bytes are set aside to store its value. When we assign that value to another variable of type `int`, we copy its current value. All types that are *structs* are *value types*. Other types are called references types. Instead of outright storing the value that is to be stored (a chunk of characters, for example), they instead store a *reference* of where to find those values in some other point in ram - the variable stores nothing more than a memory address of where to find the values. Such a variable is allowed to point at nothing (`null` in C#). Under the hood, you could think of the variable storing a memory address to address **0** (though what actual placeholder address the compiler/runtime decides to use to represent `null` is an implementation detail). You could also have two such variables point to the same location in memory. In C#, all `struct`s are *value types*. All `class`es are *reference types*. Since `string` is a class, it has the behavior of a reference type ("it has reference semantics"). Thus, when you declare some variable `string myString;` in a function, some memory does get set aside - but it's just enough memory to store the memory address of where a `string` object's data is located, and at this point, we've allocated no string and the variable points to `null`. The string object itself is not allocated until you perform some operation that initializes a new string object - at which point some memory is allocated to store the new string object, and your variable gets set to the memory address of where the allocation was performed. In a program, there are usually two different mechanism by which memory management and allocation occur - The Stack, and The Heap. The Stack is the memory that is used for storing the call stack - the order in which functions have been called, parameters between functions, and local variables allocated by a function. Each thread has its own stack, and when a function has finished (or when any scope, for that matter, is left), then the stack memory that was allocated by that function (or scope), is released. The Heap is a big old heap of memory used by the whole program. It contains memory allocations that live longer than any one function call. Memory in the heap may be accessed by any number of threads. And allocations on the heap must be accessed through references. With that in mind, consider the code below: void SomeFunction() { // Compiler sets aside enough memory to store a memory address. // `name` is set to reference the 'null' memory address (which might be address 0). string name; // Same. string displayName; // All arrays are also reference types, so this variable is also just storing a memory // address, and is initially set to the `null` memory address. char[] nameChars; // We ask for a memory allocation large enough to store 7 chars, and then we save the address // of that memory to the `nameChars` variable. nameChars = new char[7]; // We use the memory address stored in 'nameChars', along with an offset, to write // specific values to that allocation in memory. nameChars[0] = 'a'; nameChars[1] = 'n'; nameChars[2] = 't'; nameChars[3] = 'i'; nameChars[4] = 'd'; nameChars[5] = 'u'; nameChars[6] = 'h'; // Enough memory is allocated to store a string that contains a copy of the array I provided - 7 chars. // The address of that memory allocation is stored in 'name'. name = new string(nameChars); // `displayName` and `name` now both point to the same memory address, and thus the same object. displayName = name; // What happens when I do something like this? name = "antiduh"; // In the above line of code, the 'name' variable is set to the memory address of where a // string object is stored. But where does that memory come from? // Since "antiduh" is a hard-coded constant in the program, the compiler sets aside memory for // that string in what's called the 'string table', which is loaded into memory (usually in a section // of memory that is marked read-only) when the program itself is loaded into memory. In other contexts // this section of memory is called the BSS. } Some of the details I've mentioned above are ultimately implementation details internal to the .Net JIT, Runtime, and C# compiler. But it's helpful to have a basic idea of how these things work, or might work, to be able to distinguish concepts. For instance, how the compiler and runtime handles memory to store value typed local variables in a function might be the stack, but under some circumstances, they might be promoted to reference types and stored on the heap. How the runtime/compiler handle things like hard-coded strings is a bit more complicated, and is platform and implementation dependent. How variables store references is more complicated than "they store a simple memory address". ... Some more about strings, specifically. The string class, for the most part, is a normal class. It provides no methods that allow you to modify a string instance, which is why we say that it is immutable. It's pretty easy to make any immutable class. For instance: public class Person { public Person( string name, int age ) { this.Name = name; this.Age = age; } public string Name { get; private set; } public int Age { get; private set; } } The above class is immutable. Once it has been constructed, there is no way for you to modify its contents. String is the same way. Anytime you use string operators like `string fullName = firstName + " " + surname;`, a new string is allocated that contains the concatenated result of the three input strings; all three original strings are unmodified. As a matter of fact, the above code actually turns into `string fullName = string.Concat( firstName, " ", surname );` via the compiler. Next, internally, strings in .Net use Unicode and are stored using the UTF-16 encoding; each `char` consumes 16 bits or two bytes. More than one char might be needed to store a single glyph. For instance, some glyphs might be represented as a composition of multiple Unicode code points, and thus, multiple C# chars .. but this gets into some of the more crazier aspects of Unicode and the various encodings that support it. Ignoring the crazier aspects of UTF-16 and Unicode, this basically means that if you have an array of 20 million `char`s, or a string containing 20 million characters (under the hood, they're still stored as `char` values), then that means that you're using 40 million bytes of RAM, since each char is 2 bytes.
That is some in depth code review! If I was OP, this would probably hurt my pride just a little haha, but I'd be pretty grateful for it nonetheless.
I would externalize all my WCF config in a 2nd config file and then programatically bind that 2nd config to the rest of the configuration on application start. This way all your tooling can make any deployment based changes it wants to your app.config and your client.config (for example) will be left untouched. If this is an application where you expect the user to have internet access I would generally put the client config on a DB behind a web service that the client can log into and retrieve the specific client config from. Protip, while you can make some custom providers and such for the .NET config system and make things work the way you want I often find that the base .NET config system leaves a bit to be desired. So rather I often wrap the .NET config system with my own classes that provide the additional functionality I want. 
Sorry again for the delay. This issue was reported earlier and a fix for it is coming in 4.7.1. I don't personally know the ship date for 4.7.1 (but we've already locked down code changes a week ago, so it shouldn't be too long). I assume this thread will be updated with more info: https://github.com/dotnet/coreclr/issues/10843#issuecomment-313276878
That's the same as using dispose. Better, but the same.
If they do then that would be great since I wouldn't have to maintain mine anymore. For me though, it's a lot about the experience and contributing to a hobby that I enjoy. 
Thanks for the unsolicited review. This was something I put together quickly for net core back in the early betas. Also something that I **freely** share with the internet, no one is forcing you to use. As always pull requests welcome, if you have major issues with the library. &gt; It is very weird to throw a NullArgumentException on arguments that are not null. You do this plenty of times. Don't do this. Reserve NullArgumentExceptions solely for null-arguments. You have to be more specific than such a general statement. Do you mean places where I check to see if a string is also empty? would you not say that an empty string is almost essentially the same thing as a null value? Would you prefer an ArgumentException? PR's welcome ;) &gt; You have unused namespace includes EVERYONE seems to love leaving those comments, its very good just to make your **review** seem legitimate by increasing the size, but its an almost meaningless observation, especially since they are compiled out anyway. However feel free to submit a PR removing them ;) &gt; While you often check for validity of arguments, you never check whether the this argument (usually named bld) is ever null. Incase you are not familiar with extension methods the **this** keyword add methods to existing types. These functions cannot be called if the *this* variables are null. Essentially you would be calling `null.MyExtensionMethod()` and regardless you will get a null pointer exception. the this parameters can **never** be null. &gt; Your lines are very long. Really consider having a length limit, that makes it easier to read the code in tools like GitHub. Right now you constantly need to scroll right and left and right and left. The only lines that are extra long are the comments. Also I don't seem to have the same issue with my 34" monitor. &gt; Your documentation is incomplete. I do agree, although the code is well commented with xml doc comments. So if you want really good docs you will get them inside visual studio/VSCode. Also I only have so much time, since you are so familiar with the code I wouldn't mind you making a PR with docs ;) &gt; Simple string concatenation is faster if you only have a few simple arguments and in most of your cases also more readable. Personally I really consider..... I agree.... &gt; Why do you accept invalid ports like 0 and 23423532? Just take a ushort as an argument for ports. Also RFC3986 does not restrict port number ranges. I take the same type that System.UriBuilder takes, this is not supposed to be a full replacement, just an augmentation. However it is an interesting observation I may reconsider &gt; The use of the predicate argument on the UseHttps method is very very very ugly. The documentation also just says "default true, if false sets scheme to http" - and if true? Probably "https", as the method implies. But a name such as predicate is very very poor. Just have a UseHttps and UseHttp method. Or have a UseHttp method with a useSecure flag - at least something more descriptive than predicate. I agree.... &gt; Your library works incorrectly when query parameter contain values like &amp;. They're not being escaped. As a result the link is just wrong. That behavior is carried forward from System.UriBuilder, so I would complain to MSFT. I'm also not trying to build something heavy ontop just a **very** thin layer. This won't protect you from being dumb. Do you think that it should auto escape all characters you pass in as keys? 
I'm practicing to get better at building RESTful web apis with Core. Getting a regular api up and running is no big deal but forcing oneself to apply as many of the REST constraints as possible takes more work. Also, I'm trying to get better with Angular 4, which will eventually server as the client.
Re: Point 2, how does string interning fit into the picture? If you had one 20mb string, and then instantiated another string with the same value, would this second string point to the location of the first and therefor not use an additional 20mb?
.NET Framework provides few interfaces that help with editing (IEditableObject, I(Revertible)ChangeTracking). For adding and deletion — if it's a two way binding, you can simply add/delete an item in ListBox or ObservableCollection (make sure to implement INotifyPropertyChanges) and changes would be reflected in both collections.
The huge benefit of the surface pro is that the heat is generated on the upright part. Any standard laptop has the hot zone right on your lap. (which I hate)
I'm not ingrateful. some of the comments I agree with, but I others are very subjective. in the time they took to write all that they could have just submitted a pr and one is a lot more helpful than the other. 
It's simple and highlights the strength of wpf. Bind the selected item in the list to a 'SelectedWidget' property. Then bind your field to the SelectedWidget's properties. For Add functionality you programatically set the SelectedWidget to a new instance of your Widget and make sure you add it to the list when you hit save.
So PUBG has stats / leaderboards you could see if thats got an API (it certainly does - they make HTTP requests for the whole lobby screen) and do your own heuristic for "elo"
Not likely: https://msdn.microsoft.com/en-us/library/system.string.intern.aspx It seems that only literals are interned initially; after that, interning requires an explicit call to `String.Intern()`.
Instead of jumping straight into memory analysis, you might find it easier to intercept and read network traffic from the game. Libpcap should be able to do what you need. If it's encrypted traffic, you'll have to jump through some hoops to decrypt it. I think you'll find it has the data you need. 
Currently working on finishing up my first big boy ASP.Net application for my company (it's bigger than any school project I've done, but not massive) I'm an intern. I use VB instead of C#, but they are very similar since they share the same framework. I didn't use MVC, as I wasn't familiar with it. Basically my advice is not to get overwhelmed. There are many things to consider and plan, but every application is different. Do you need authentication? HTTPS? etc. For your first application, I'd recommend using Master and content pages. It helps you keep most of your markup and styling code in one place. But honestly, I've googled so much on this project. Stack overflow has the majority of the answers that I've found. The biggest "Oh shit" moment I had was realizing that some code (C#/VB) is run server-side and other code (JS/Html/CSS) is run client side. Looking back, it's silly that I didn't realize it before, but it gives you a mental image of what your code is affecting. Another important thing is [postback](https://en.wikipedia.org/wiki/Postback#In_web_development). Really, the best way to learn is just get into the thick of it. I hope I've given you some insight without tooting my own horn too much. If you have any questions, feel free to PM me. I'm no expert but I'll help ya if I can. Good luck! Ninja edit: One more thing, Web Apps are only connected sometimes. Database connections happen on an as-needed basis, in contrast to some desktop applications where you set it up and forget about it. My application connects using the [SqlConnection](https://stackoverflow.com/questions/3079098/the-c-sharp-using-statement-sql-and-sqlconnection) object and [SqlCommand](https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand\(v=vs.110\).aspx).
Yep, so I just did some testing, and basically if the string cannot be known at compile time then it won't be interned. So if you use something like `StringBuilder` then the resulting string will not be interned.
Don't use vb. Whoever told you that is ok is lying to you. Gtfo as soon as you can.
Do you have previous development experience?
Thanks for the advice! It's definitely something I've thought about. It wouldn't be terribly hard to convert my VB into C# for my project. Just out of curiosity though, what's the reasoning behind that?
I might get downvoted for this, but nobody uses vb in the real world. C# is far more popular, and you'll have MANY more doors open to you if you know C# vs VB.
I would suggest researching issues with battleye and cheatengine or winpcap. They ban people in the past for having them installed, not even in use.
thanks for this
it's true, you're not going to find a lot of vb work(compared to c#) out there, and the projects you do, most likely you're going to fix a lot of code issues because choosing vb was probably a business major learning a bit of web development. vb was primarily used back in the day to add functionality to office, do ms access etc. Fret not, you can at least say you're familiar with vb but please move your skill base to c# 
I would prefer if you only commented on sections of the code review where you feel clarification is needed on the reviewers message. 
Why is that? 
Cool, thanks.
? uh... I'm slightly confused, once I a prototype up and running I'll check this out.
You can use value tuples in 4.6 , they're in nuget.
Basically whenever you write code that manipulates a string, the original string is (generally) discarded and a new one created. That's what's meant by immutable. You can never change the original copy, but you can create a modified version of it. Also take a look at StringBuilder. It's syntax is not as natural but it can build string without reallocation. In practice you'll rarely need the extra performance unless you're doing some heavy duty stuff.
OK, you're probably going to take this the wrong way. But I've been writing code a very long time and I've learned a few things. One of them is not to take code reviews personally. It's about the code, not you. &gt; would you not say that an empty string is almost essentially the same thing as a null value? Would you prefer an ArgumentException? Yes. Null is null. But if it's not null, and it doesn't meet what is expected, then throw an ArgumentException. Or maybe an ArgumentOutOfRangeException, depending. &gt; your review seem legitimate by increasing the size, but its an almost meaningless observation I would ding you on this. In a word - sloppy. Invest in Resharper. It will tell you when you have unused code like leftover "using" statements. &gt; Also I don't seem to have the same issue with my 34" monitor. I only have a 24" monitor. I expect the people using a 15" laptop would have a problem with the line length too. Think about wrapping at 120 characters or so. 
Thanks for sharing! Interesting AF!
Thank you ^^. Yeah i didn't even know you could do that with jagged arrays. I thought it was really neat!
&gt; One of the most inconsistency style. I have no idea why but I love the way you wrote this sentence.
&gt; Also something that I freely share with the internet, no one is forcing you to use. As always pull requests welcome, if you have major issues with the library. Of course, and that is nice. And I just gave you valuable feedback, no one is forcing you to improve your library. Personally I see no value in something like this and will not use it. &gt; You have to be more specific than such a general statement. Do you mean places where I check to see if a string is also empty? would you not say that an empty string is almost essentially the same thing as a null value? Would you prefer an ArgumentException? PR's welcome ;) Yes, I mean those places. Like /u/xampl9 said nicely: `null` is `null`. It's something else than `string.Empty` or `" "`. The `ArgumentNullException` is dedicated to `null` arguments (hence the name) - for other argument issues you have `ArgumentException`. Throwing `ArgumentNullException` on anything besides `null` is just bad practice. &gt; EVERYONE seems to love leaving those comments, its very good just to make your review seem legitimate by increasing the size, but its an almost meaningless observation, especially since they are compiled out anyway. However feel free to submit a PR removing them ;) Technically **every single using statement** is compiled out - all type references will be replaced with their fully-qualified names. We could just use fully-qualified type names directly instead, but to make code more readable we are using those using statements. But having essentially obsolete code is bad practice, it's sloppy and implies that types from those namespaces are used in your code. &gt; The only lines that are extra long are the comments. Also I don't seem to have the same issue with my 34" monitor. Like I said, in tools like GitHub. There you have a limit on the line length regardless of your fancy monitor size. &gt; Incase you are not familiar with extension methods the this keyword add methods to existing types. These functions cannot be called if the this variables are null. Essentially you would be calling null.MyExtensionMethod() and regardless you will get a null pointer exception. the this parameters can never be null. It looks more like **you** are not familiar with extension methods. ;-) Calling extension methods on `null` references is perfectly possible. Here is a code share to demonstrate this case: https://dotnetfiddle.net/n3ZXzM - I call the `DummyTest` method twice with a `null` reference, and no exception is thrown. Once as an extension method, and once as a regular method. In both cases it works perfectly fine. Extension methods are just syntax sugar. When you write `instance.ExtensionMethod()` the compiler will replace it with `ExtensionType.ExtensionMethod(instance)` - and passing `null` reference to a method is perfectly possible. &gt; I do agree, although the code is well commented with xml doc comments. Most of the XMLDoc tags are empty. There's also a method that doesn't has docs at all. &gt; I take the same type that System.UriBuilder takes, this is not supposed to be a full replacement, just an augmentation. However it is an interesting observation I may reconsider That's fine and a valid argument, I did not bother about the original type - only your code. &gt; That behavior is carried forward from System.UriBuilder, so I would complain to MSFT. I'm also not trying to build something heavy ontop just a very thin layer. This won't protect you from being dumb. Do you think that it should auto escape all characters you pass in as keys? Then it's fine, I did not bother about the original type - only your code. But that argument makes sense. You could add a an overload that auto-escapes the arguments for usability.
I found the official docs to be actually very useful. This tutorial was a great primer. https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/index Be aware that the course in the top comment is MVC 4, the current version is 5, but 5 is basically already dead and being replaced by Core. The future is Core, so if you don't have a specific project you're looking to work on then that's the thing to start learning now.
&gt; in the time they took to write all that they could have just submitted a pr and one is a lot more helpful than the other. Or I give you advice and you can try to improve your library and yourself. I disagree that one is more helpful than the other. Glaring issues like your misuse of very specific exception types or your lack of knowledge regarding extension methods is somewhere where you should improve. If that is just part of a PR, you would possibly just glance over and ignore it, or the discussion would have moved to the PR instead of just having it here. By having you to adjust it yourself (if you want, you're free to ignore any advice) you're pushed to understand the issue first. And a quick write-up here is much faster and easier than submitting a PR, where I'd first need to fork, clone, adjust, commit, push, go back to the UI of Github, send PR. So, yeah, no, in the time I took to write all that I could not have just submitted a PR.
&gt; It will tell you when you have unused code like leftover "using" statements. Visual Studio 2017 does the same job already. No need for ReSharper. &gt; I only have a 24" monitor. I expect the people using a 15" laptop would have a problem with the line length too. Think about wrapping at 120 characters or so. I was also referring to tools, like GitHub. At work we are using Gitlab, and it's always a pain if people write too long lines. They don't fit in the UI, and I have to use scrollbars to read the code - regardless of monitor size. Of course the UI of external tools is not the best argument to change ones code style. Having long lines, especially if those are just a few breaking out, makes code harder to read. Your eyes have to wander far more right than you're used to generally, and then have to snap back to the left a lot further. It's definitely easier to accidentally switch lines when snapping left to the next line. Also, if you limit your line length, you can have two files next to each other open on a nice monitor. :-) &gt; One of them is not to take code reviews personally. It's about the code, not you. This is an excellent point, and I feel like this hit a nerve with him.
VB was being used in classic asp. That was the predecessor to asp.net. It also supported Javacript and backend language. 
Paths are just "connected lines" which can be curved. M 0 0: I move the "drawer" to 0, 0 L a b: I draw a line to a, b Z: I draw a line to the start Combining all of those gives you a 2x2 square. The translate transform moves the square wherever it should be :-) 
Just wanted to say thanks for the code review even though it's not my code. While this coder obviously has taken it personally and probably not benefited from it as much as they should, people like me appreciate the tips you've taken your time to share, for free. So thanks :)
&gt; I might get downvoted for this, but nobody uses vb in the real world. I see where you're coming from, but I feel that it's worth pointing out that this is an exaggeration. There's plenty of legacy code out there that's still running and still being maintained that's written in VB. You probably won't find many of those companies in Silicon Valley or other startup-heavy places, but they're definitely out there. Also, enough though they're rare there are some developers out there who actually *enjoy* tackling legacy code; improving, refactoring, etc. and for those knowing VB is probably a great skill. Of course, this doesn't take away from your main point that there will be many more doors open for C# developers than VB developers in the modern world.
Looks promising! Definitely will check it out some time. Thanks!
I think using API Spy to figure out which DirectX or Windows function is used to draw the text, then using Microsoft detours or a similar c/c++ project to inject a DLL that detours that function to a function you wrote. I have never used API Spy to look at direct X calls but some function has to be responsible for writing the text and there can only be so many functions for writing text. I think there might be better alternatives to detours as it seems a lot of the stack overflow answers are suggestions of alternatives, also only the 32-bit version of detours is free.
It was a great article. Thank you for sharing. 
I can also recommend this tutorial. I'm not that far in the playlist, but he explained MVVM really good.
Where did you get your 2013? When I tried to do this it wanted me to pay for a license and, at my current stage of learning, wouldn't be wise
It should be possible, but the problem is that it runs on DotNetAnywhere runtime, which is an *interpreter*, which is incredibly slow. It also probably has issues with reflection, `WeakReference` and additional libraries like ReactiveExtensions. For proper webassembly support we need either Mono or CoreRT to target WebAssembly. Which is currently blocked by [pthread](https://github.com/WebAssembly/design/issues/1073) and [GC](https://github.com/WebAssembly/design/issues/1079) from WebAssembly side.
Yeah, we did that at work. Then we removed the 10 uses or so of System.ValueTuple when upgrading to 4.7.
You may have wasted your time on the dev himself, but your comments are always informative for noobs like me and I usually enjoy reading them.
Thank you, I'll give that course a try :) Would you say that there is a major difference between MVC4 that the course teaches and MVC Core, which seems to be be the standard nowadays? 
I'll go through that tutorial :) One of the things that are kinda off-putting to me at least, that I have also seen in various other tutorials, is the "paste vast amounts of html/css/javascript" and then we have a layout, which never really explains how the controls are linked to the methods we create in the ASP.NET application, e.g. how the application knows to call the correct method from the controller when a certain button is pressed. But I guess that understanding will come when I reach a better understanding of html/css/javascript
Not in web, only console/windows forms/wpf :) Still learning!
Then you're in a really good place. I came into ASP.NET with no Windows or .NET experience. I did the MSDN tutorials and was up and running in a couple weeks, I did the PluralSight videos for pure C#, but sounds like you don't need that. I did have a strong web background though. Learn come basic HTML, JavaScript, CSS. Understand how HTML forms work if you're doing ASP.NET MVC. And, understand how HTTP 1.0/1.1 works, the methods, headers, parts of the URL, the body, request and response.
WPF, now thats a technology I did not see a long time ago.
I'm really not a fan of passing in a tuple like that, the second method is better, saying that the first one appears to be a test method so I'll let it pass. Tuples are a special case and I recommend sticking with **likeThis**, because of destructuring. It would make no sense for locals to suddenly be **LikeThis** just because it's coming back from a tuple.
The values also have a default name. Something like item1 or maybe it was Item1. In any case, I would suggest naming values using the same convention as their default names.
Thanks alot, bookmarked. :) 
thanks mate i appreciate the post. I've been learning off some guys of pluralsight, i found that reasonably - no course is 100% perfect so yeah i wanna dig into this stuff.
This would be UpperCase
&gt; I would ding you on this. In a word - sloppy. Invest in Resharper. It will tell you when you have unused code like leftover "using" statements. I work on ubuntu, so I can't use resharper. "invest in this $300+ tool" as an answer is the reason why many small companies don't use dotnet. &gt; I only have a 24" monitor. I expect the people using a 15" laptop would have a problem with the line length too. Think about wrapping at 120 characters or so. Feedback taken.
Thanks for educating me on the 'this' reference IMO this is very strange behavior, and not what I would expect from the language.
Many thanks for your help, I am able to create the objects now. 
I don't use visual studio
So you'd be happy with this then? public void Thing() { (var SomeValue, var SomeOtherValue) = MethodReturningTuple(); Console.WriteLine(SomeValue); }
Thanks for the clarification. I am able to create the data structure now. But i am having problems, probably because i use classes(?). If you see in this screenshot (http://imgur.com/a/mh523) in the first section object i get "title = null" and "facts = null", and in the second section object i get the same, reversed. Those being there messes things up. Look at the PowerShell formatting to the right and you see how it needs to be. Do i need to create two different section classes now? Overloaded? I guess i cant create two different classes and put them into the Section[] array. 
Personally I'd build a small API using WebAPI to get an understanding of routes, models, and controllers. Then move into MVC which will introduce the view.
&gt; Tuples are a special case and I recommend sticking with likeThis, because of destructuring. It would make no sense for locals to suddenly be LikeThis just because it's coming back from a tuple. that looks better, but I'm not a fan (yet) of tuples 
They make sense for cases where you are literally returning 2 values, personally I go for the usual POCO after 3 values. Never use them for a public API though.
Agreed 
It is absolutely not strange if you understand what it is. Like I demonstrated, it's just syntax sugar for a regular method call. Nothing more.
Jetbrain's license is pretty liberal and fairly inexpensive for an individual to buy a copy (Altova could take a lesson from them). Even for a small software company, the cost isn't astronomical. If they aren't deducting the cost of professional tools, they need a new CPA. http://smallbusiness.chron.com/tax-deductions-workrelated-expenses-tools-21679.html But I get the point about not being on Windows. If VS Code takes off, I would think that some of the tool vendors in that space would port to *nix. 
Does anyone know of an equally good series for UWP? It feels like Microsoft is going to put more effort into UWP now that they have an OS version that can only run Windows Store apps.
So you actually have a couple of options. You could have separate classes (yes, classes is the right word) for the different possibilities, but there are complications when you deserialize into an array that can be of muliple types. One option is to clean up the input and make all of the fields have the same name. I mean, instead of having one activity having an "activity title" and another just having a "title", standardize it into just "title". If you want to refer to the field as _either_ "title" or "activity title", another option would be to essentially alias those properties. public class Section { private string _title; private string _text; public string Title { get { return _title; } set { _title = value; } } public string ActivityTitle { get { return _title; } set { _title = value; } } public string Text { get { return _text; } set { _text = value; } } public string ActivityText { get { return _text; } set { _text = value; } } } The get/set syntax of the properties makes it a little more clear what's going on. Essentially when you do `mySection.Title = "some text";` the class squirrels away the value of "some text" into a private field (`_title`). There's no reason that two properties can't just reference the same field. So iin the example, f you set the `Text` property, then you can get that same value back by reading it form the `ActivityText` property.
Why do I get the feeling ReactPro was complaining about something again...
So adding to the listbox will force entity framework to save the record to the database?
Oh, that sounds like a pretty great idea actually. Thanks for the advice!
I feel like Tuples are ok when writing software for yourself but once you do something that will go to production I think a class is better. I tried using them once and it just got confusing as to what was going where, I ended up creating a class instead and it made the code a lot more readable.
You can't use them for a public API even if you want to anyways. Also I really like the idea of using ValueTuples just for private methods, which need to return more than 1 value.
No it won't.... You have two separate problems and your mixing them together. It will be easier for you if you break each problem down and then resolve them one at a time. Your immediate problems is: how do I display stuff on the UI. After you have worked that out then focus on how to save stuff to entity framework. Your problem then will be: How do I get a list of objects and save them to entity framework. Or go the other way, write a console app and work out how entity framework works. Its kind of simple, but leaves you to do a lot of the work. 
I was under the impression that using an ObservableCollection would make it so if I performed an Add on the entity framework context, the associated property which contains an ObservableCollection of that entity would get refreshed automatically. I guess I missed something in my research. Sounds like I need to both add it to the database and to the ObservableCollection.
What are you viewing it on, a Pi? 
It doesn't sound like anyone has really answered your question and I can hear what you're hinting at. Sure, there are MVC 4 courses (although honestly MVC 5 is the latest and has a number of changes) but it looks like you want to be up-to-date about .Net Core MVC. Although Pluralsight is an exceptional source to learn .Net Core, I actually think the best up-to-date source (.Net Core 1.1) that also clearly makes you understand the whole picture is the [Pro ASP.NET Core MVC](http://www.apress.com/us/book/9781484203989) book by Adam Freeman. It's highly rated on Amazon. It came out last year during .Net Core 1.0 but the Github is constantly being updated along with [new chapters](https://github.com/Apress/pro-asp.net-core-mvc) freely available for Visual Studio 2017 and .Net Core 1.1. There weren't much changes between 1.0 and 1.1 except for .json to .csproj but in my opinion, it's very simple to switch over. He'll also update it for .Net Core 2.0 but 2.0 shouldn't have any majors changes except for a much larger library and a whole host of general improvements. Expect that sometime Q3 but that shouldn't stop you from .Net Core development now. As for the html/css/javascript aspect, I would recommend Shawn Wildermuth's course on Pluralsight [Building a Web App with ASP.NET Core](https://app.pluralsight.com/library/courses/aspdotnetcore-efcore-bootstrap-angular-web-app/table-of-contents). In the comments section, he said he's updated the course for .Net Core 1.1 so expect that soon after Pluralsight reviews it (should be released in the next week or so). He walks through every little detail in that course though.... everything is from scratch. He types everything out and explains in detail what the css does to the page and how the javascript can modify the page. No copy and paste from a text file. Hope that helps!
You are correct, you need to add it manually to the database with something like myContext.Add(widget);
I don't see a point in passing tuples into a method... value tuples are great for return types, but for input it just feels like your adding extra overhead... The method signature should define each input. I'd also argue that if you're wanting to create "dynamic" objects that you can fill up and pass to your methods you're using tuples incorrectly, remember they're basically structs not classes.
Value Tuples are not that bad (since you're not dealing with simply item1, item2, item3, etc), normal tuples are up there with goto imo. Value tuples are amazing for return types, for example I use them a LOT when dealing with winform DataGridViews. Lets say I want to get the currently selected user in a DataGridView, the user's object is stored as the 0 cell that is set to not visible, but I also need the RowIndex of the user in the DataGridView. I can call (User user, int rowIndex) GetSelectedUser() and have it do all the heavy lifting of casting the cell[0].value to User and doing null checks and what not and not have to do it EVERY time I need to get that info, as well as not having to do a second method call to lookup selected Users' RowIndex. I definitely don't like how he's using them though, using them as method args feels dirty.
&gt; in the Philly area damn 
This looks really cool! Good work!
does machine matter when measuring RAM usage? it's drawing 600MB of ram and constantly running at 100% cpu one core just look at chrome task manager at GPU process and tab process
Thanks this has been the most helpful so far. I think I will start here.
That was my experience as well. I don't see the benefit in using them personally
His other follow ups to this blog are well worth reading. I especially liked this one on [Discards](https://blogs.msdn.microsoft.com/mazhou/2017/06/27/c-7-series-part-4-discards/) Definitely something I have not seen before
If you're running chrome on a toaster vs a decent laptop, you're going to notice a difference. So, yes, the machine matters. And if you're complaining about RAM usage on a computer with a lot of Ram, why do you have so much RAM? If it's going to be empty most of the time, whats the point? Applications use more RAM than they used to because they can, because there is more RAM,so why not use it?
I really enjoyed this blog post. Never heard of discards before and found new and fun ways to use them. Enjoy :)
&gt; And if you're complaining about RAM usage on a computer with a lot of Ram, why do you have so much RAM? to be able to run more programs at the time? when one tab uses 600MB of ram and other bloated websites like facebook use even more, it's definitely not helping. i ran out of ram when i opened this. &gt; If it's going to be empty most of the time, whats the point? i don't have a SSD at the moment, so caching &gt; Applications use more RAM than they used to because they can, because there is more RAM,so why not use it? im not talking about applications as a whole, most of other applications use normal amount of RAM, except chrome and some others. if you'll say that chrome will free the memory when other programs will need it, it's certainly not happening
Thanks for taking the time to find those resources - I'll definitely look into those! And yeah I figured that when I am new to the whole web development anyway, I might as well learn the latest standards :)
Newtonsoft's json serializer is pretty fast and .json files are relatively readable (can get very messy with complex data structures, consider a gui at least for displaying the data ) 
Thank you!
Xml + Linq (System.Xml.Linq.XDocument and friends) is an easy way to read/write data even without the need of another library if that is a concern... (in case of a write-all-your-code-yourself policy)
I usually use tuples when I'm using them in only one place. It doesn't make sense to declare a class for such small usage.
Why did you delete this?
Looking forward to reviewing this! I've been overwhelmed trying to learn WPF, MVVM, [ReactiveUI](https://www.reactiveui.net/) and [Reactive Extensions](http://introtorx.com/).
.XDoc What Do you mean by that? There is XML.Linq library, but didn't quite get it what do you mean by xDoc :(
Who?
Yeah I feel that. I refuse to copy/paste when following tutorials, I always type it out so I learn how to do it. Of course the strength of using ASP.NET in the first place is that you don't have to worry about a lot of the foundational stuff. The official docs has a whole section on the fundamentals too. For example here's the section that covers routing http requests to controllers/actions https://docs.microsoft.com/en-us/aspnet/core/fundamentals/routing 
Personally: I would use camelCase for both uses. The key being that you are choosing a convention *for tuples*. However, and as with everyone else, I don't think there's value to passing arguments as a tuple to a non-generic method. Maybe a collection of tuples, but not a tuple instead of individual args. Also: `params` is a keyword, and wouldn't be a valid argument name without an @ sigil at the front. Which you shouldn't do.
Is there a reason you wouldn't want to use localdb or sql express ? 
Thanks for taking the time to help! I'll definitely look into the things you mentioned regarding postback, master and content pages and so :) I'll stick to C# though, but yea a lot of the expressions seem to be much alike. Great to know that the SqlConnection and SqlCommand and I guess SqlDataReader too can be used in this context as well, though it seems to me that Entity Framework is the standard in the ASP.NET context, so I'll probably use that to get a grasp of that as well. Thanks again!
Oh wow API Spy is pretty cool. Thanks for sharing :D
Perl is laughing in its padded cell 
Search for [Linq to Xml](https://www.codeproject.com/Articles/24376/LINQ-to-XML)
Getting more and more like Lua and some other scripting languages
I highly recommend this tutorial series: https://www.youtube.com/playlist?list=PL6n9fhu94yhVm6S8I2xd6nYz2ZORd7X2v He also teaches JavaScript, which you will need for client side programming. He also has a Bootstrap series, which is a framework that helps you to layout responsive websites. Also covers SQL Server which is very helpful in creating dynamic websites. You need to pick up a few things on top of C#, but start with the first link. I don't recommend it if you're still new to C# though. In that case, you should look at this series: https://www.youtube.com/playlist?list=PLAC325451207E3105
Don't use the registry. Microsoft is trying to move things away from that. Nowadays it's better to use some sort of configuration file. You could just make a text file and put it in appdata.
Sweet, Thanks for the share. I will look into this. I have mucked around a bit with WPF but a decent tutorial is always better starting point I find.
I'll definitely check those out! I've already used SQL Server, but I guess it's still useful to see how it's used in this context. Thanks a lot!
I believe with EPPlus you can provide a password while constructing the `ExcelPackage` object.
This is a good point. But still, using the result of a method that returns a Value Tuple you would have this: var tupleResult = MethodThatReturnsTuple(); tupleResult.id // this looks awful to me. tupleResult.Id // looks more like the method returned a normal type. Like Person for instance.
Sure, it would be a bit of a stretch to use a tuple to return more than 2 values. No confusion on that. 
Yeah, another good one. Didn't realise you could discard. I wanted to discard a variable just the other day and didn't even know this was a thing! Thanks!
Flip them around! The opposite of React, and someone that is the opposite of Pro :P Didn't want to say it directly.
&gt; You can't use them for a public API even if you want to anyways. huh
I think F# is the indie band they're most into. Even the "_" is a lift from there. type inference is just the greatest thing for making a statically typed language where you just never actually bother to write down the types. glorious
Or from any of the other many launguages which use _ for discard.
No, it wasn't him. Complaint was fairly benign too. 
/u/Terrible_dev - based on our conversation the other day, you might find this interesting. I don't know what IDE you're using on Unbuntu, but JetBrains is creating a version of IntelliJ to act as a .NET IDE, to be named Rider. And they were pretty smart when they created Resharper, putting all the core bits in their own assemblies (away from the UI), so they'll be able to run out of process on Mono. 
Many languages may offer it, but F# is often the test bed to see if ideas are compatible with the CLR.
I read the blog post, but I still am having trouble wrapping my head around why you would ever want to assign a value to something that you can never read. Why not just use null or something? Or is this in cases where you would use null but can't because of various reasons?
Thanks for sharing this
If you need any help feel free to shoot me a message. I use that stuff everyday.
There are many times when the syntax forces you to assign a function's result to something that you don't intend to use later. Assigning to `_` in such cases makes your intention clear, and reproduces a convention in use since the 1970s in languages like ML, I think. According to the article, it also keeps the variable out of the IL, which should result in some efficiencies. In the article, the declarations like `bool _ = false;` are contrived examples, meant to demonstrate how `_` is not a real name. For better examples of what I'm talking about, peruse the "Places Discards Are Applicable" section. (What you won't see in that section, though, is lambdas, where I think they'd be the most useful.)
According to a comment on that article, discards aren't legal in lambdas. So you can't write something like `(_, _) =&gt; 10`. If that's true, it's surprising and disappointing to me.
There is a championed proposal to include that behavior in a future (possibly 7.x) version of C#. https://github.com/dotnet/csharplang/issues/111
yep! SqlDatareader is awesome too. forgot to mention that one. 
Oh come on. You can still use just one character for each parameter. (a, b) =&gt; 10. Is that really so bad?
OK, but doesn't your critique apply to _everywhere_ discards are used? And yet people find it useful?
I wish I had more time for my own projects!
I think you're looking for "method name" possibly. Method signature can also be used to describe the method name and parameters.
&gt; method name the struct of c# script? 
please see image again. i upload new.
Have a read of the page linked below https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods You're asking basic questions about method signatures. Also the term "struct" is a very specific type of object in many languages including c#.
They should do this for Visual Studio too - but they just refuse. It's a major point for the slowness when ReSharper is installed. Probably a tactic to push their new product.
`private` is the access modifier `void` is the return type `Rankings_OnReceivedLeaderboardEvent` is the method name `List&lt;UserLeaderboardRank&gt; lb` is the argument or input parameter The method signature refers to everything I listed above except for the return type. 
what is all part of a c# script? not only method. 
I would like for it to be less testbed and more actually supported language. Currently it is a no go for projects I have been involved with (WPF &amp; UWP).
what is all part of a c# script?normal i see , (not with class line): public .... data...... public.... data....
I think you mean the method body, which is the stuff between the `{` `}` brackets
yes. 
Methods are in classes. Classes in namespaces. That's over simplified but the red box in your image is called a method.
the struct of method?i mean all part in method. what are those? 
how to learn about method? in unity api docs, classes have Static Variables, Static Functions. what is that? what is in classes too? 
r/learnprogramming www.google.com www.youtube.com www.udemy.com
https://unity3d.com/learn/tutorials/s/scripting First, you should stop using the term "struct of a method" - it's very confusing. *Struct* has a separate meaning in programming, and it has nothing to do with methods. Perhaps you mean the *structure* of a method, or the *contents* of a method, or the *definition* of a method. --- **This is a *method definition*:** public static void TestRefType() { SampleRefType rt = new SampleRefType(); rt.value = 44; ModifyObject(rt); Console.WriteLine(rt.value); } **This is the *method signature*:** public static void TestRefType() Others have explained what the parts of that are called. **This is the *method body*:** { SampleRefType rt = new SampleRefType(); rt.value = 44; ModifyObject(rt); Console.WriteLine(rt.value); } Each line in the method body is some type of *statement*. `rt.value = 44;` is a statement. `SampleRefType rt = new SampleRefType();` is a statement. 
this really helpful. tell me any other part in c# script. interface? enumeration? Attributes? why so lot of name? if each word is like a puzzle, what is all the type of puzzle in a c# script? 
There is a difference in C# between *keywords*, the *standard library*, and programming *concepts*. Keywords are things like `public`, `class`, `this`. These are a part of the programming language itself. The *standard library* is a collection of pre-made classes and methods which are useful to programmers, and so Microsoft has developed and tested these tools for us. Programming concepts are names for various techniques that many programmers use. Some of the confusion comes from the fact that some keywords are named after concepts, some keywords are named after classes in the standard library, and some classes in the standard library are named after concepts. All of these names have evolved out of years of many people trying to solve many problems, and a lot of them have been pulled from other fields. "interface" is borrowed from engineering, "serialize" is borrowed from bookkeeping, "function" is borrowed from mathematics, and many other terms are just invented or repurposed words that accurately describe the thing being done (like "class" and "statement") --- &gt; what is all the type of puzzle To list everything is impossible. This is what programming is all about, learning more and more of those techniques to have at your disposal to try to solve problems, and to learn the names given to those techniques so that you can easily implement them using the tools created by others. To directly respond to your question: `interface` is both a keyword and a concept. The *concept* is to add a sort of "plug" to your program so that you can easily "unplug" one feature and "plug in" another feature without changing anything else in your program. The *keyword* is used to tell C# that you are implementing that concept. Enumeration is a concept, but it a commonly used practice, and so Microsoft has created special classes and interfaces in the standard library (like `IEnumerable&lt;T&gt;`) to help programmers implement enumeration. Furthermore, they have *also* created separate keywords (like `yield` and `foreach`) to help programmers *use* enumeration. Attributes are an especially tricky one - I assume you're talking about things like `[ExecuteInEditMode]` or `[Serializable]` - those are used to describe certain qualities (or "attributes") of something which isn't already captured by modifiers. Then, elsewhere in the program, they can be checked and dealt with properly.
It's a miracle - he is an expert programmer after one Reddit thread
For questions at this level, just use google. 
Note that params is a reserved word, so you can’t use that as a parameter name. As for tuple members, use lowerCamelCase.
is unity scripting api is standard library? 
tell me more about this. which type you know, i still want to know. what link can help me.
in english i found only a few on youtube and channel9 from microsoft, a lot of samples on github, and i found some good tuts in russian, since i'm from a ex-ussr country and i know russian)
I've recently switched to using Roslynator for most of what R# used to get me. There are a few minor things that are missing, but when weighed against how heavyweight R# was and how unstable and slow it made my IDE, I just don't want to go back anymore. (Seriously, I had forgotten how fast and responsive VS could be without R# installed. ¯\\\_(ツ)_/¯)
&gt; What you won't see in that section, though, is lambdas, where I think they'd be the most useful. Agreed. I already use `_` and `__` in my Rx stream transforms all over the place, it seems like they're missing opportunity to clean up some code.
What... Looking through your previous questions, please read the resources in the sidebar because you clearly do not understand some of the basics of C#.
Link? You might want to edit your post with some more detail. And it doesn't make much sense... why is Main in class Dog? What is TestDog? What are you trying to do??
No, I should have mentioned that also. It is a similar thing, but made by Unity rather than Microsoft.
You should really look up properties. Any C# beginners book will teach about them.
It is for situations where you don't actually care about the discarded value, like validating a string with TryParse(). 
The return type of a function is what that function returns, if anything. This can be pretty much anything: int, double, uint, Color, bool, List&lt;DateTime&gt;... This is a short explanation, so read up on it [here](https://msdn.microsoft.com/en-us/library/ckwkyfdb.aspx)
why it is away void? 
Microsoft and third parties are leveraging Roslyn to implement more and more of the functionality that Resharper offers. At a certain point you have to look at why am I burning resources to generate a second tree? As a huge R# proponent for many years, I have to advise people to disable it and try out what VS2017 offers natively, and consider the performance difference. Try some of the Roslyn based plugins, and notice how much faster and lighter it is to use the same AST that gets generated anyway. Decide for yourself if the performance difference is worth the additional functionality. And re-evaluate that trade off with each VS feature update. For the record my current decision is Resharper ON and I have extremely large projects. But it's something I'm constantly reevaluating. They've been thumbs down on Visual Studio Code from the start. Now that Resharper runs out of process and works on Mono and soon on .NET Core, it is possible for them to run with VSC. VSC has huge industry uptake for a swath of languages, and a lot of excitement. To refuse to take part in that and instead build your own IDE might not be the best move. Especially with Roslyn based tools digging away at your feature set. And it's open source and free. I'm glad they're making Rider. But it seems like they're holding the superiority of Resharper over our heads and saying if you want multi platform and you want the amazing power of Resharper, you have to do it our way. That works up to the point where the benefit of Resharper over Roslyn based tools isn't enough to force the decision. Personally I wish they'd implement Resharper for VSC. But that may not be the best decision for their business. Perhaps once out of process Resharper exists, an open source project could spring up to write a glue plugin for VSC that adapts the MVVM they describe to VSC. That being said, I have a JetBrains ultimate license and I definitely plan to evaluate and test Rider. Maybe they'll change my mind. I'm glad I have options in multi platform C# development between vim, VSC, Rider, and the newly relabeled Xamarin Studio. Since I'm talking about Resharper and hoping someone from JetBrains reads this, I can't help but say thank you for the incredible amount of time and energy Resharper has saved me over many years.
Because its saturday.
https://unity3d.com/learn/tutorials/s/scripting This website is the best place to learn about Unity. Start with the beginners section and work forward.
Removed: Rule 4. I suggest you take advantage of the learning resources in the sidebar, sticky, and the resources available at /r/learnprogramming. The questions you're asking are extremely rudimentary and are taught in the introductory learning materials. Dive in, give it a concerted effort, and if you have questions about specific concepts or issues, you can post a question but only after having done the research and making a worthwhile effort.