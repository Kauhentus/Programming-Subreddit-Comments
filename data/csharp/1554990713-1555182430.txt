I live in sp hell. I appreciate stuff like this.
The main advantage of Parallels for me (should probably have said this in the original post) is Coherance mode, which basically means that Windows programs, including Visual Studio, look and behave like Mac apps - I can have them on the same screen as other Mac apps, I can move them between my Mac desktops, they appear in the dock, etc.
If I were reviewing your PR I would reject it for that reason. Cort? Come on.
CTRL+E CTRL+C FTW. even have a macro on my keyboard for resharper code formatting.
Language 5 can go die in a fire.
Yeap, when your string size can be 0 to N. Or if you are building Xmls or Jsons
Thanks! I hope to say that RepoDb = Dapper + Massive + PetaPoco with a much more better performance and efficient usage. We are doing our best for this library. Please do not hate me on this, many like Dapper even me. But I love RepoDb more.
Select panel -&gt;Properties-&gt;Application Settings-&gt;Back color See this: &lt;a href="[http://imgbox.com/aDC1OfQo](http://imgbox.com/aDC1OfQo)" target="\_blank"&gt;&lt;img src="[https://images2.imgbox.com/9a/40/aDC1OfQo\_o.png](https://images2.imgbox.com/9a/40/aDC1OfQo_o.png)" alt="image host"/&gt;&lt;/a&gt;
Out of curiosity... what features latest EF Core lack that mature ORMs have? Not arguing that it isn't missing some key features, I know it is. But for the most part, EF Core works great for enterprise apps and microservices. If the main reason you aren't using it is because you want document storage combined with relational storage in the same ORM, I guess I can see that. But in that case, I would probably just use a different library to handle document storage, as it feels different enough to me.
Couldn't think of another one though, and it seemed like a good enough abbreviation that also won't trigger unwanted automatic code completion to `Coroutine` too much (mainly because it's only 4 letters). (And `Crt` is unpronounceable.)
 [https://github.com/aspnet/AspNetCore/issues/8177](https://github.com/aspnet/AspNetCore/issues/8177) &amp;#x200B; Razor Components road map is here for anyone that's interested in its progress so far. (Server side Blazor)
I agree with all this. It sounds like Marten is Document and Event storage, not so much a replacement for an ORM. I would imagine you could run it side by side with EF even.
And yet we still use LINQ. This whole thing is dumb, honestly. There's no evidence that we have anything to worry about when it comes to `String` and the warnings the author applied to `String` also apply to literally any other standard class that doesn't have its own keyword (e.g. Guid, Datetime, as others mentioned)
Hmm, interesting. I will look into this. Unfortunately, I don't have very much time until the assignment is due so I'm not sure if I would be able to implement this efficiently. I will keep this in my mind for the future though, thanks!
 bool found = false; string[] toppings = { "cheese", "pepperoni", "green pepper", "onion", "mushroom" }; double[] price = { 1.30d, 1.90d, 1.80d, 1.70d, 1.60d }; Console.WriteLine("Choose a topping: cheese, pepperoni, green pepper, onion or mushroom"); Console.Write("Please type the topping that you want - exactly as it appears above:"); string order = Console.ReadLine(); Console.WriteLine("\nYou chose: " + order); double toppingPrice = 0; /* Identify that the user input was equal to what's in topping array * Identify correlated price * Note: Might use a dictionary for stuff like this */ for (int i = 0; i &lt; toppings.Length; i++) { if (order.Equals(toppings[i])) { toppingPrice = price[i]; found = true; break; } } /* Format price to something customers recognize */ Console.WriteLine("\nThe price of " + order + " is $ {0:0.00}", toppingPrice ); if (!found) { Console.WriteLine("The product " + order + " was not found, please try again!!!!!!\n"); Console.Write("Hit any key to close"); Console.ReadKey(true); return; } Console.Write("Hit any key to close"); Console.ReadKey(true); You have to choose the price from the price array at the same index that you find the topping. &amp;#x200B; There's lots of ways you can simplify this but this should give you a better understanding.
Great if it can help you at least for some boring standard stuff.
Thanks for the help! This definitely makes the concept easier to understand. The thing about this assignment is my professor said that it can be completed by adding just one line of code and tweaking a few others. I added the line that prints the price.
 public class ExampleClass { private ExampleSelection exampleSelection; public enum ExampleSelection { ExampleOne, ExampleTwo } public ExampleSelection GetExamples { get { return exampleSelection; } set { exampleSelection = value; } } public string ExampleString { get { return exampleSelection.ToString(); } } } private void btnExample_Click(object sender, EventArgs e) { ExampleClass ec = new ExampleClass(); /* Executes the SET part of GetExamples property */ ec.GetExamples = ExampleClass.ExampleSelection.ExampleOne; /* Executes GET from ExampleString property */ txtExample.Text = ec.ExampleString; }
Do Web API in dot net, then do your front end in a JavaScript framework/library like vuejs. On the mid/long term, you'll thank me when you'll try to make your site/app mobile friendly, turn it in a pwa or just make it weight less.
You can use a dictionary with LINQ and get the price in one line, sure. Here's an example of what that looks like: static void Main(string[] args) { bool found = false; Dictionary&lt;string, double&gt; toppingsMenu = new Dictionary&lt;string, double&gt;() { { "cheese", 1.30 }, { "pepperoni", 1.90 }, { "green pepper", 1.80 }, { "onion", 1.70 }, { "mushroom", 1.60 } }; Console.WriteLine("Choose a topping: cheese, pepperoni, green pepper, onion or mushroom"); Console.Write("Please type the topping that you want - exactly as it appears above:"); string order = Console.ReadLine(); Console.WriteLine("\nYou chose: " + order); double? toppingPrice = toppingsMenu.FirstOrDefault(t =&gt; t.Key.ToUpper() == order.ToUpper()).Value; if (toppingPrice != null &amp;&amp; toppingPrice &gt; 0) { Console.WriteLine("\nThe price of " + order + " is $ {0:0.00}", toppingPrice); } else { Console.WriteLine("The product " + order + " was not found, please try again!!!!!!\n"); Console.Write("Hit any key to close"); Console.ReadKey(true); return; } Console.Write("Hit any key to close"); Console.ReadKey(true); }
Are you using new reddit or old? I still use old reddit, so maybe that's the difference here.
Now that makes sense. Dictionary is a concept I'll be exploring more on my own. Thanks again!
But HttpClient httpClient = new HttpClient () is such a good name!!
How would I implement something similar that say, has multiple textboxes to fill for each enum? I'll use the actual project as an example. The user needs to select a House that they like, and then there would be X amount of textboxes, lets say one for the Address and one for the City. If user selects the first house, the address might be "123 street" and the city might be "Springfield", but if the user selects house 2, the address would be "abc street" and the city might be "New York". How would I modify the code you have provided to fit that?
As a C++ guy..... No. Char arrays suck.
Problem if coming in from getting the data from the database into the textbox. I understand I have to do something along the lines of &lt;textbox text=‚Äú{binding Contacts.db}‚Äù\&gt; But not sure what else I need to add into there to grab the data from the database. I know when I make the table that there will be a Id that is the primary key, so each user will have a unique number to it. IE 1,2,3 etc. And then for the code behind , I am able to make the connection, but have issues with establishing the query and command.
Our entire STL works with em. Even if you use a string you are still .c_str() everything. Why don‚Äôt you like em?
Huh, that actually works. Reddit no longer turns it into an MP4 on the old site. WTF Reddit.
Thx! I‚Äôll look into itüëç
Yet another reason for me to not want to user the new Reddit haha, damnit.
&gt; So in your given example, IsPolynomialFunction would be a property that`s declared in my custom built ViewModel class, and by setting the DataContext in the MainWindow to my ViewModel class, all the elements in MainWindow would gain access to properties in my ViewModel? Is that what DataContext is all about? Right. The binding's path[^1] starts at the current `DataContext` by default[^2]. It is important to note that it is the `DataContext` of the current element. `DataContext` is usually inherited from the parent element, so your `RadioButton`'s `DataContext` is the MainWindow's data context, but can be set to something else. The `ItemTemplate` of an `ItemsControl`, for instance, will have a `DataContext` set to the specific item. [^1]: `"{Binding PropertyName}"` is really shorthand for `"{Binding Path=PropertyName}"`. A binding with no path (e.g. `"{Binding}"`) will bind directly to the `DataContext`. A binding can also bind several layers deep. `"{Binding PropertyName.ChildProperty}"` will bind the `ChildProperty` of the `PropertyName` of the `DataContext`. The UI will listen for changes to any of those properties. [^2]: Bindings have a few properties to change the source of the binding. `"{Binding MaxWidth RelativeSource={RelativeSource.Self}}"` will bind to the `MaxWidth` property of the current element, rather than of its `DataContext`.
So you have no database Yet? Please save yourself nerves and use orm. Define data as models and use orm to deal with sql. Also binding object to text box doesn't provide you any connections. I will recommend to read about Entity Framework, they also will provide you with decent examples. As well I have feeling that you need to read about databinding in wpg
Currently at work, could you explain the benefits of orm, real quick? And thank you for all the suggestions. It just seemed to me that creating a sql was pretty straight forward.
If I understand you correctly, I'm going to assume the user will select a house they like from something similar to a listview or a listbox. In which case you'll have an array (or list) of House objects and based on the selected House, you'll use the properties of that house to fill the textboxes in like this: &amp;#x200B; public partial class Form1 : Form { public Form1() { InitializeComponent(); House[] houses = new House[2] { new House() { Address = "123 John Street", City = "Pleasantville", State = "NY" }, new House { Address = "321 Mary St", City = "Curdville", State = "WI" } }; _listBox_Houses.DataSource = houses; _listBox_Houses.DisplayMember = "FormattedAddress"; // Property of House object we'll use to display in the listbox } private void button1_Click(object sender, EventArgs e) { House selectedHouse = _listBox_Houses.SelectedItem as House; // Alternatively (House)comboBox1.SelectedItem; _textBox_Address.Text = selectedHouse.Address; _textBox_City.Text = selectedHouse.City; _textBox_State.Text = selectedHouse.State; } } public class House { public string Address { get; set; } public string City { get; set; } public string State { get; set; } public string FormattedAddress { get { return Address + ", " + City + ", " + State; } } }
Don't be afraid to think out loud. This is a hard one for me because I get really self conscious thinking out while people are watching and judging me, but it's one thing I think is pretty consistent anywhere you apply.
Ah! This is a good one. I would assume it let‚Äôs your interviewers follow your thought process and get a sense of your analytical skills.
&gt; I could essentially bind all of my controls to the properties of my ViewModel, which would also mean I could bind the corresponding events to event handlers that I`ve declared in my ViewModel? WPF Bindings do not work well with events and event handlers. Which events are we talking about? If you want to do some action when the user changes a value on the UI, you write that action into the setter of a property on your view model, and bind that view model property to the UI value you need to track. If you want the UI to update when the view model changes, you use `INotifyPropertyChanged`, which the bindings automatically handle. The other common case is when you want to perform an action when the user clicks a button. Because bindings don't work on events, `Button` has a [`Command`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.primitives.buttonbase.command?view=netframework-4.7.2) property. You add a property to your view model that holds an instance of [`ICommand`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.icommand?view=netframework-4.7.2), and bind it to the Button Command property: `&lt;Button Command="{Binding ButtonClickCommand}" ... /&gt;`. The button listens to its own `Click` event, and calls `Command.Execute(CommandParameter)`. A common implementation of `ICommand` can be seen [here](https://www.c-sharpcorner.com/UploadFile/20c06b/icommand-and-relaycommand-in-wpf/). Using that impelemnatation could look something like this: ``` private ICommand _buttonClickCommand; public ICommand ButtonClickCommand { get =&gt; _buttonClickCommand; set =&gt; { _buttonClickCommand = value; RaisePropertyChanged(); } } public ViewModel(){ ButtonClickCommand = new RelayCommand(OnButtonClick, _ =&gt; true); } private void OnButtonClick(object unused){ // Do something when a button is clicked. }
That's the reasoning I've been given. I've been fortunate enough to interview with people I was already working with in a different capacity, so even though I didn't get the position I got a lot of good feedback. I can't say I'm way better at thinking out loud in front of people, but I'm pretty sure I'll do a better job next time around. :P
It's philosophical really: do you want to store your data in a relational format or as documents? Which to chose, when to chose it, and why is a more significant debate than we can have here. If you want a document database on any RDBMS you could try [YesSql](https://github.com/sebastienros/yessql) which is used by Orchard Core. I used to hate Entity Framework. I sort of like EF Core, and I think they did a good job re-inventing it. I still prefer Dapper and lighter ORMs that put less distance between me and the database.
Make the interview more personal... have some awareness of what the company does. Ask about the role, the work environment, etc. Interviewing is a two-way street and, if you get nervous, remember that they need to sell you on the job too. Tell me where you want to go professionally, what you're learning on the side, what you hope to learn, etc. The thing I dislike the most when interviewing someone, especially someone who is currently in school, is when some technology comes up and their answer is "I don't know anything about that but I want to learn it". Not knowing is super a-ok and cool. Saying you'd be up for learning something related to the job is super a-ok and cool. Telling me that you really want to learn it but haven't bothered, especially when there are so many free resources on said thing, is a bad look. Don't BS answers. Think out loud. "I think I would solve it this way..." is a good answer "I don't know but here is how I would figure out what I need to know..." is a good answer. Obvious bullshit is a bad look. You're fresh out of college and expected to have huge knowledge or application gaps so use that to your advantage. Read the room. Your interviewer(s) may choose to be engaging or stone-face (and it may depend on the part of the interview too). If they're light and breezy then joke around (keep things appropriate though... don't try and land jokes that you and your friends use). Don't try and force things. Remember names. I know this is hard, especially when you're nervous, but it'll pay off in spades. Follow up with an email after the interview.
Thank you so much!!! I've been wanting to install Material theme for VS 2017 for awhile but kept pushing it back. This is indeed a great tool!
You can see the official list of feature differences and roadmap here: [https://docs.microsoft.com/en-us/ef/efcore-and-ef6/](https://docs.microsoft.com/en-us/ef/efcore-and-ef6/)
He said "classes"
Sorry for the misunderstanding, I meant they directly said we are not allowed to use databases and or datagrids. &amp;#x200B; I made a new attempt using for loops and this is my result. for (int i = 0; i &lt; Names.Length; i++ ) { uiMarksDisplayTextBox.Text += (Names[i]); for (int x = 0; x &lt; 3; x++) { uiMarksDisplayTextBox.Text += (" " + Grade[x, x]); } uiMarksDisplayTextBox.Text += System.Environment.NewLine; } The result is this: [IMAGE](https://imgur.com/a/96lamey)
You don‚Äôt need any DI frameworks nor do you need an MVVM framework. Just use MEF and you can load your modules using an AssemblyCatalog out of the box. You may need to implement your Delegate/Action Command class but that is about it.
Check out this MEF sample I once made for a fellow redditor. https://gist.github.com/Ericvf/3dff055fdfcd5d26005c3b0f15610a5c
Please don‚Äôt call yourself experienced when you are fresh out of collage.
Just to clarify, I wanted to know what specific features the OP was indicating was missing from EF Core that would be expected in a mature ORM. Not the differences between EF Core and EF 6.
All you need to do now is change the font of your textbox to a "proportional" font - one where every character is the same width - otherwise it's not possible to line everything up. Courier and Consolas are two good fonts to use. Then adjust the number of spaces, if necessary. Once you've done that, you may want to test it with a Grade of 10 or more. And once you've done what's required for your class, have a go at doing it with a DataGridView even if it's not what's been asked for - it's good practice, and good to compare two different ways of doing things.
Not exactly. So in my Form class I have an int called 'counter'. The counter starts at 0. When at 0, it shows a picture of a house, with textboxes and labels next to it for the Address, City, and ZIP Code with those textboxes filled out accordingly. Then there are two buttons on the form, called "Next" and "Previous". Pressing the next button will go to the next position on the counter (counter++), which is 1 and that will be the second house, then the textboxes will change to match the Address, City, and ZIP code for that specific house (Address, City, and ZIP are different for each house). The previous button will do the same thing as the next button but will instead move back 1 on the counter (counter--). So essentially, there are 5 houses total, each with different values for the Address, City, and ZIP. The requirement for the project states that those values can not be set in the form, and must be set in the class, meaning that there needs to be 5 different House objects in the class each with different corresponding info for the Address, City, and ZIP. I have methods in the form that would allow for me to extract the data from the form depending on which house (or position on the counter) is selected. This is why I thought an enum would be good, because I could have 5 different House objects (HouseOne - HouseFive) each with varying values for the Address, City, and ZIP, and then in the form it would be something like: private void btnNext_Click(object sender, EventArgs e) { // Create object of House class House hou = new House(); counter++; //Setting the picture for each house (Based on counter pos) SetPicture(); if (counter == 0) { txtAddress.Text = // ?? txtCity.Text = // ?? txtZIP.Text = // ?? } }
&gt;ExecuteSqlCommand(Cn, query); Am I supposed to put handler like below? Does it return one message for each error record, or only one error message for all error records? &amp;#x200B; Thanks. &amp;#x200B; try { ExecuteSqlCommand(Cn, query); } catch (Exception ex) { [MessageBox.Show](https://MessageBox.Show)(ex.Message); &amp;#x200B; }
Yeah, new reddit is pretty bad. I use it because it has night mode and that's about it. I really can't stand how they butchered the experience lol. Probably the only good things are night mode and the new editor.
any guide for getting started with Procedural level generation?
Now we need an adjusted version for sampling bias. And a way to actually determine the sampling bias.
The English word Enumerable means something that is countable. Not something that has a count, but something that can be counted. This is an important distinction. An IEnumerable&lt;T&gt; defines that something as T in this case, which means it can be looped through to return T. Now being an interface this means that it will be inherited. Anything that inherits from it must give whats called an enumerator, an enumerator will tell the runtime how to loop through the enumerable. In many cases you can use an IEnumerator&lt;T&gt; to return an item from a collection without storing the previous item in memory like a List or Array would. Manipulating lines in a large file for instance that is too large for memory storage. This is done using the yield keyword. This is how I've understood it, I'm horrible at explaining things though :(
Something that can be enumerated, i.e. used in the `foreach` statement.
https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=netframework-4.7.2#remarks &gt;IEnumerable&lt;T&gt; is the base interface for collections in the System.Collections.Generic namespace such as List&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, and Stack&lt;T&gt; and other generic collections such as ObservableCollection&lt;T&gt; and ConcurrentStack&lt;T&gt;. Collections that implement IEnumerable&lt;T&gt; can be enumerated by using the foreach statement. It's good to use as the type for method arguments if you want to allow the method to be called with multiple different possible collections without having to make an overloaded version of the method for each type (List vs Array, etc). If you are only going to need to use the collection once, it can be cheaper to use IEnumerable than to create an entire list, particularly if you don't need any of the list specific functionality (such as simply running a foreach over the collection once). Those are a couple things I recently learned about the interface.
I got a really good tutorial to do so [https://www.youtube.com/watch?v=Et2khGnrIqc](https://www.youtube.com/watch?v=Et2khGnrIqc) It's from IAmTimCorey who is a really good youtuber for C# It explains how you connect to a database and how to get the data from it. To tutorial itself is in Windows Forms but I guess if you finish the dataaccess it will be easy to bind it to the wpf GUI. &amp;#x200B; For databinding I have another video: [https://www.youtube.com/watch?v=zvyQNuuTqks](https://www.youtube.com/watch?v=zvyQNuuTqks) &amp;#x200B; I recommend to first go through these videos and learn about basic wpf data binding. If you've got no experience with SQL also take a look into it to get a better feeling about databases and the connections with your own application.
&gt;private void btnNext\_Click(object sender, EventArgs e) { &gt; &gt; &gt; &gt;counter++; // counter--; for btnPrevious\_Click // Create object of House class &gt; &gt;// You may need to insert some validation to make sure your counter isn't exceeding 5 (or whatever // the array length is as well as it not going below 0. House house = houses\[counter\]; //Setting the picture for each house (Based on counter pos) SetPicture(); txtAddress.Text = house.Address; txtCity.Text = house.City; txtZIP.Text = house.ZipCode; } } &amp;#x200B; &gt; The requirement for the project states that those values can not be set in the form, and must be set in the class, meaning that there needs to be 5 different House objects in the class each with different corresponding info for the Address, City, and ZIP. &amp;#x200B; Do you have a prebuilt array of houses? If not, consider creating a separate method to get your house data and store it into an array. &amp;#x200B; Now use your counter as your array index for which house to get data for.
core is a fork of framework as I understand it. core3 is a little screwed up because the point was to make it cross platform but they are making it another windows dependent language (cant use GUI on other platforms and interoperability is completely bugged). framework is supposed to be the defacto windows dependent language. if core continues in the direction it is going without providing GUI support for other operaing systems it will go the way of VB
I believe the intention is for .NET Core to be the primary stack going forward. In addition to your quotes about .NET Framework focusing on stability and reliability, .NET Core is gaining WinForms and WPF support. This allows for more easily transitioning existing projects onto .NET Core, as well as incentivizes making future ones in .NET Core. You can now gain all the latest features and enhancements while still using the stacks you're used to. That being said, I don't know if it's really going the way of anything so much as .NET Framework is being absorbed by .NET Core.
Is there something in particular you‚Äôre trying to do? I found it out reasonably straightforward.
Salting avoids dictionary attacks. Anything can be brute-forced, but it comes a point where it's just not worth it. Dictionary attacks are worth it though; why brute-force ten passwords when you could've found thousands others? [Dictionary attacks are super easy and fast](https://www.youtube.com/watch?v=7U-RbOKanYs). If you don't salt then some hacker tool probably already contains the passwords your users will input, and you'd be vulnerable from the start. But please don't use md5, it is at best a way to check if two files are identical. The entire point is that you should never have to know what the actual password is. If the user forgets theirs then you should still not be able to retrieve it and tell them, you should have a reset-password mechanism. &amp;#x200B; Not salting is nothing short of unprofessional and negligent in 2019 - yet I've actually been downvoted for saying that before, leading me to make the conclusion that everyone store plaintext password until proven otherwise. If any sort of leak happens then you expose all your users other accounts, as you must assume people re-use their passwords. Suddenly it's not *your* application user accounts that are under threat here, its your application's userbase *gmail* accounts. Or *bank* accounts. Here's some [get-started crypto](https://visualstudiomagazine.com/articles/2016/12/01/hashing-passwords.aspx)
Wait, you're saying people can actually be inexperienced and it's not just imposter syndrome? I don't know if this kind of talk is allowed here.
I think ‚Äúplanned obsolescence‚Äù is a stretch here. Why should Microsoft make their new tooling work with their old IDE? This doesn‚Äôt make sense from a business point of view, and also involves merging code into old branches. ASP.NET Core 3.0 has significantly changed Razor tooling. .NET Core 3.0 requires significant changes to how the WPF and WinForms designers work. C# 8 could arguably be backported, but then people would whine how many features it doesn‚Äôt have in NetFx and Core 2.x anyway. Sorry, I‚Äôd much rather they get the *current* version working reliably, which already seems enough effort to get halfway right. (Just a few hours ago, I had it fail to recognize `#if DEBUG` blocks shouldn‚Äôt be frayed our any more when changing build configurations. I wasted ten minutes trying to find my mistake; turns out I needed to restart the IDE.)
It's a MUD, there isn't gonna be any way to use facebook, google, or any other service. I am going to likely add the option of email vertification and 2FA. I'm probably going to use this instead: https://cmatskas.com/-net-password-hashing-using-pbkdf2/ However, here there isn't a salt to store that I see.
https://mariusgundersen.net/duck-extensions/
&gt; It's a MUD, there isn't gonna be any way to use facebook, google, or any other service. You‚Äôve missed the point. If your users use the same password on your MUD and on their other accounts (which if we‚Äôre honest a large majority will), then your service being breached leads to all of their accounts being breached. If you are going to store passwords in your service then it is your responsibility to make sure that if a leak occurs from your end then your end users aren‚Äôt entirely compromised as soon as that leak occurs.
&gt; if core continues in the direction it is going without providing GUI support for other operating systems it will become irrelevant and go the way of VB never thought of it like that... ya know you got a point there.
Let alone they may be storing an email in plain text and then the password has a high probability of being used for both.
You‚Äôre correct. And in a breach, even if user names are stored instead of email addresses, it is often trivial to look up a user name on Google and find a linked email address on some other service.
Yes, of course passwords will be hashed to the best ability I can. But external authentication is just not feasible.
What I mean is that I have extensive non-professional experience, not that I am an experienced professional.
Web is the gui, server side is the way to go
Removed: Rule 4.
Microsoft has a short eBook that I highly recommend, [Architect Modern Web Applications with ASP.NET Core and Azure](https://docs.microsoft.com/en-us/dotnet/standard/modern-web-apps-azure-architecture/). You can ignore the Azure part if you're not using as it's just two little sections at the end (I'm not FWIW). If you have a PluralSight subscription, there are a lot of good courses on there. [This one from YouTube](https://www.youtube.com/watch?v=_lwCVE_XgqI) is pretty decent, though I think a lot of the stuff can be overkill depending on your needs. I really like these example repos, each with additional resources in their READMEs: * [Clean Architecture](https://github.com/ardalis/CleanArchitecture) * [Revamped Northwind Traders](https://github.com/JasonGT/NorthwindTraders)
I said try not to. The get-started crypto should suffice if you must.
indeed many people use web browsers only but many people also use desktop applications. I know I write more desktop applications (ie console, forms, wpf) than I do web applications. using the web as a one size fits all solution is the wrong approach. although using this logic I could say that Java is better suited for writing cross operating system desktop applications than anything .NET simply
I like this project, and I think it's pretty complex and complete: [https://github.com/dotnet-architecture/eShopOnContainers](https://github.com/dotnet-architecture/eShopOnContainers) What I found out in 4 years of personal experience, and different projects, is like everyone has his own "good design patterns and architectures". I don't have a good opinion about it myself, I just like to try new things, the simpler the better, the more readable the better, and I don't care about patterns at all, they just appear when they are needed. I see people trying to follow the best practices, trying to do a perfect architecture, overplanning stuff, wasting a lot of time, ending with stuff that they don't understand, and does not work properly (this is what I have in my current project, with a team leader who thinks he is a .net expert), and again wasting everyone's time to try to understand and fix the issue.
The salt is just being appended to the password as base64 text. That way you can retrieve it and re-use that salt to hash a new incoming password and then do a hash comparison. &amp;#x200B; You might ask "couldn't someone take the salt and then try hashes until they get a match?" Yes, they could, but you're hashing the password by 1000 iterations. They'd have to do the same, for each brute-force attempt. This is completely unfeasible to do repeatedly - brute forcing this would only yield a single password, using that specific, random salt. Waste of time.
Revolution of the Correct Adherence to Coding Styles and Conducts when?
Thank you so much :) I don‚Äôt know how to repay you for your time and consideration. SQL seems pretty straight forward as far as SELECT, INSERT, and etc queries but I imagine there is a lot more to it
eh even in this age desktop gui are important
anytime I use a static method of the string class i always use `String.whatever` are you and the other user saying that `string.whatever` is better and more advocated for now?
If anyone get access to your data source they can just copy and paste them in a data dump. I understand your thought but it is good pratice to do it.
Don't roll your own crypto. &gt; HMACMD5 This isn't an appropriate mechanism for password hashing. Use bcrypt (or scrypt, or PBKDF2). bcrypt also doesn't require you to come up with your own salting mechanism; it computes the salt for you, and stores it next to the hash. This is all you need: public class Account { public string Name { get; set; } public string Password { get; set; } } public void SetPassword(Account acc, string password) { acc.Password = BCrypt.HashPassword(password); } public bool CheckPassword(Account acc, string inputPW) { return BCrypt.Verify(inputPW, acc.Password); }
Not a security expert here, but: 1. It's not of the utmost importance because salting is mainly to avoid dictionary attacks, but I wouldn't store you're salt so obviously like that. If somebody gets access to your database, the salt is clearly obvious and a targeted attack becomes more realistic on a certain (e.g. admin) account. Instead, use data that is already there for other purposes but is guaranteed to not change. 2. I'd like to see an application/server salt in there as well that is stored separately (e.g. non-version controlled text file on the server, or environment variables for the application). Just because somebody has access to you database doesn't mean they have access to _everything_. A server secret is another layer they would have to obtain to get the full salt, and in most cases would be protected by different layers of inherent security that must be broken. 3. Don't use MD5. It's obsolete and there are much better options.
I thought the GUI functionalist was supposed to be added in 3?
my understanding is that the core3 GUI functionality will be exclusively for windows and not executable in linux or macos. I beg someone to show me that core3 forms/wpf will be supported on operating systems other than windows
So many what the fucks here but lets go one step at a time. But I'll start with the biggest then go from top to bottom What the fuck!?! use \`return check == acc.Hash\`. Get that fucking if statement out of there. RandomString is essentially junk code. Use [https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=netstandard-2.0](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=netstandard-2.0) Account I assume is an example/quicktest and not the real thing but why on earth is the salt and hash a string? WTF!?! SetPassword feels weird to me. Is this only for a quick test? Chances are there's only a function or two that would use it and it definitely wouldn't be public. CheckPassword is potentially junk as well. Its a single line (the return line above). Chances are you want something like \`GetUserInfo(username, password)\` in which case you'd return null if the user/pass combo is invalid. So IMO its highly likely this function shouldn't exist either HashedPassword: why is this function public too? If you get rid of the string hash/salt you'd have less lines. HMAC should be using SHA1 or better but MD5 isn't horrible for this case. This is all useless anyways as long as you're using telnet. For this situation you'd want to use pbkdfn2 which is [https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=netstandard-2.0](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=netstandard-2.0) in .NET Also WTF is everything after ComputeHash? If you used the right data type (byte\[\] instead of string) half of your code would be gone. So much useless lines in your code You get a 10/10 for asking this question but 4/10 for this code. So you get a 7/10 for this post? Have an upvote but please recognize you write so many useless lines.
Yes, SQL browser service is running on the remote system.
yes there is an instance running on the local and remote machine
Escaping quotes (") by doubling them is only applicable when using the verbatim string syntax. To solve your error, either: a) add a @ in front of your string b) escape your quotes as in \" instead of ""
It's okay. It's good that you asked. It's a contentious issue, and even huge multi-million corporations fail at doing this correctly, so feel good about the fact that you even cared enough to ask how to do it correctly.
What's the error from the Catch exception?
the escape for character in c# is '\'. "//*[@id=\"credential\"]" is what the string should look like. or like this @"//*[@id=""credential""]".
I totally agree about string vs String. It's stupid to raise such an alarm about something so trivial. I really do like linq though. I know it's all built off of extension methods, which absolutely have a potential for being taken advantage of. It all feels very edge-casey to me. This article just screams "look at me, I have a point to make about something most people don't need or care about"
You missed the whole point. You have some non-professional experience. I have around 50 000 hours of professional coding experience, but I barely tell that to anybody. I just solve problems. I wouldn't hire a know-it-all kid, but the kid that wish to learn and is aware that he knows nothing.
It's okay. It's good that you asked. It's a contentious issue, and even multi-million corporations fail at this, so feel good about the fact that you even cared enough to ask how to do it correctly. If you are on .NET you could forego passwords entirely and use [Windows Identity Foundation](https://docs.microsoft.com/en-us/dotnet/framework/security/wif-overview) which is claims-based. It's a bit to get into but it's worth it.
Storing your salt in a salt column is fine. It's way too easy to find a 'hidden salt'. Remember, security by obscurity is not security. Create your own account so you know the password. Steal the database. Try each user column with the hash and see which one causes the right hash for your password. A salts only job is to avoid dictionary attacks. The only thing you need to do with them is to stop people getting hold of them prior to a database breach (so they cannot precompute a dictionary attack before stealing the database) P.s. a 'server salt' is called a pepper.
This is the new code, after using Pbkdf2 public class Account { public string name; public string HashSalt; // public string Salt; } public const int SaltByteSize = 24; public const int HashByteSize = 20; // to match the size of the PBKDF2-HMAC-SHA-1 hash public const int Pbkdf2Iterations = 10000; public const int IterationIndex = 0; public const int SaltIndex = 1; public const int Pbkdf2Index = 2; public static void HashPassword(Account acc, string password) { var cryptoProvider = new RNGCryptoServiceProvider(); byte[] salt = new byte[SaltByteSize]; cryptoProvider.GetBytes(salt); var hash = GetPbkdf2Bytes(password, salt, Pbkdf2Iterations, HashByteSize); acc.HashSalt = Pbkdf2Iterations + ":" + Convert.ToBase64String(salt) + ":" + Convert.ToBase64String(hash); } public static bool ValidatePassword(Account acc, string password) { char[] delimiter = { ':' }; var split = acc.HashSalt.Split(delimiter); var iterations = Int32.Parse(split[IterationIndex]); var salt = Convert.FromBase64String(split[SaltIndex]); var hash = Convert.FromBase64String(split[Pbkdf2Index]); var testHash = GetPbkdf2Bytes(password, salt, iterations, hash.Length); return SlowEquals(hash, testHash); } private static bool SlowEquals(byte[] a, byte[] b) { var diff = (uint)a.Length ^ (uint)b.Length; for (int i = 0; i &lt; a.Length &amp;&amp; i &lt; b.Length; i++) { diff |= (uint)(a[i] ^ b[i]); } return diff == 0; } private static byte[] GetPbkdf2Bytes(string password, byte[] salt, int iterations, int outputBytes) { var pbkdf2 = new Rfc2898DeriveBytes(password, salt); pbkdf2.IterationCount = iterations; return pbkdf2.GetBytes(outputBytes); } It's turned into a string because my save files for the MUD are text. It can't just stay in memory forever.
They'd better not use the same passwords, telnet is extremely transparent and susceptible to a man in the middle attack.
Why are you attacking this person for trying to advance his knowledge? You raise some valid points, many completely unrelated to OPs question, but the way you present them is downright rude and uncalled for.
I don't think I was rude or attacked him? I did attack parts of his code and he asked for criticism
The point is, you can‚Äôt absolve yourself of responsibility by saying ‚Äúthey better not use the same password‚Äù because the fact of the matter is that they will. It is your responsibility as a developer to recognize this fact and do everything in your power to work around it. They can use the same password as everywhere else, and if you properly salt and hash before sending the result over the wire to your server then you have done what you can to protect the users from themselves.
Just trying to give context as to my relevant skills in case that mattered. Didn‚Äôt mean to imply I was a know-it-all and unwilling to learn.
Oh I see. This version is fantastic. The only thing bugging me is the fact someone can have an Account object without validating the password. But this isn't necessarily a problem, it just feels like it's too easy to create a bug. I'd probably do Account.Login("user", "pass") and have `static public Account Login(string user, string pass)` return a new account. Which would mean Account would have to be private. But this is more of a personal preference.
Another user said I was "attacking" you and was rude in my first comment. Was I a bit?
Oh I see. This version is (almost) fantastic (there's a bug or two that'd be obvious when you run it). The only non bug thing that's bugging me is the fact someone can have an Account object without validating the password. But this isn't necessarily a problem, it just feels like it's too easy to create a bug. I'd probably do Account.Login("user", "pass") and have `static public Account Login(string user, string pass)` return a new account. Which would mean Account would have to be private. But this is more of a personal preference. The bug is that HashPassword creates a random salt every time so it's impossible to validate it
Two books that might be of help: 1. *Working Effectively with Legacy Code* by Feathers 2. *Refactoring to Patterns* by Kerievsky
What about non-Microsoft GUI frameworks?
I think "Impostor syndrome"-syndrome is a bigger problem than actual impostor syndrome.
like qt? interoperability plays a big role with that and my experience with interop in core is not as pleasant as my experience with interop in framework. native GUI without having to use interoperability would be preferred
I wouldn't say that .net core is windows dependent, just because 2 of the least used parts are windows specific. The majority of applications built in the world are web and console, so the fact those currently run successfully on Linux is a great thing. .net core isn't just a fork of framework, it's clearly marked as the future for .net The fact Microsoft won't support .net standard 2.1 in framework is a clear signal that framework is going to be supported in a legacy way.
What does this do for most people that using MVC 5 scaffolds don't? That already generated the view and controller (and even the entity Framework code if using it) by just doing 'new file' in visual studio?
Those articles about imposter syndrome are always a hoot. People who have been programming for less than a year complaining they feel like imposters. Guess what, you actually do suck, and realising that is the first step to actually becoming a good developer.
And yet somehow I (and many others) find them very useful, go figure.
I thought that the general rule now was that you were supposed to store the salt somewhere outside your code base and db, is that not the case?
I don't totally understand it but it does actually work despite the random salt. I don't think you were attacking me you just were maybe a little "abrasive" but that's fine I guess. The code is the way it was because I don't typically care too much about the length of the code especially when it's in a demo like this.
This doesn‚Äôt do diddly for people using MVC. I‚Äôm well aware of the scaffolding feature of MVC 5 so there‚Äôd be no point in writing code for that. Or would there? Sure you can create a controller and scaffold views for it based on a a model but when it comes to writing backend logic for those actions, you‚Äôre still on your own. What if you could just copy the basic CRUD functionality into your controller? I‚Äôm not aware of scaffolding performing that kind of function... The point of this was just for my own convenience and maybe that of my colleagues since ASP Web Forms doesn‚Äôt have scaffolding like MVC does. As I said most of our work is still done in web forms.
Not OP, but does the salt have to be saved with the hashed password as well? Does that make it insecure, if you have the hashed password and the salt in the database?
I think you were somewhat rude and also not that helpful.
Always read up on the latest tutorial by someone with authority on the matter. Like Tom said in my last link.
My bad! You're right! I totally misread something. I thought HashPassword was called twice. Maybe it's because I have a HashPassword function that I call in my Register and Login function that I just forgot you did it differently
Really? Cause op posted COMPLETELY DIFFERENT code based on all my suggestions
use nuget package Microsoft.AspNetCore.Identity and class Microsoft.AspNetCore.Identity.PasswordHasher Even if you aren't using .net core
I have no doubt that gui support for other platforms will appear. Core is definitely the future but it's still in its infancy (in the eyes of enterprise devs). I'm sure MS will keep framework 4.x running for another decade but I'm not surprised they aren't adding features.
Salting your hash also prevents anyone that has access to the password hash from easily finding out if two passwords are the same as well. This increases the workload required to break them. &amp;#x200B; Not explicitly mentioned is that with hashing, legitimate access to the database won't expose their password too, such as to admins or yourself.
When are we adding butter?
Nice. Sounds awesome.
It was rude. He‚Äôs being nice
Well, if you lost your sources codes you can use a decompiler like DotPeek or JustDecompile for that purpouse.
In the basting stage, cover your delicious steak in it and enjoy life.
That's fair :) I missed the web forms detail! Glad it all works for yourself and looks like a cool project to speed up workflow!
I'm still a little confused. It's rude that I attacked his code in a thread asking for criticism? The F bombs were rude but they were specifically about his code and I didn't ask what he was thinking (or anything personal) except for why hashes were strings. Was it because the F bombs? How harsh I was on his code?
Ah, got it
It sounds like your code files were just closed. If you have the Solution Explorer open, you can just click on the .cs file you want to view (such as Program.cs). If you don't see the Solution Explorer window, you can open it from the "View" menu.
&gt; Salting avoids dictionary attacks Salting avoids rainbow table attacks where you plug a dictionary into the hashing algorithm and generate all the possible hashes for your dictionary (plus permutations of your dictionary). The way to defeat rainbow tables is to have a per-user salt (at least 16 bits of entropy, more is definitely better) instead of using a single salt for all the accounts.
It‚Äôs specifically about his code...that he wrote. So it‚Äôs about his skill. It‚Äôs entirely possible to say the same things but nicer. I‚Äôm not saying to baby people but be less harsh. Think of it this way, if you wrote some code and someone came over to take a look. Do you want to hear ‚ÄúWTF is that?!? Get that out of here.‚Äù Or ‚ÄúI don‚Äôt think that part is necessary, you can just have this and this. ‚Äú Software development has a nasty side to it when people act like they‚Äôre rockstars and put others down, don‚Äôt add to it. Just be as helpful but less harsh. Also, there‚Äôs an entire thread full of helpful comments. He took for other people as well. But even if he took 100% of your suggestions only, it doesn‚Äôt justify the tone. He won‚Äôt say you‚Äôre being rude, he‚Äôs being nice because in the end you helped.
In terms of password storage: - Assume that they know everything about how you hash passwords. - The salt (even per-user salt) is not a secret. It's there to prevent rainbow table attacks. - Use a hash that can be tuned so that the iterations fits within your time/CPU budget (usually 100-200ms). This slows down brute force attacks.
&gt; Use a hash that can be tuned so that the iterations fits within your time/CPU budget (usually 100-200ms). I've never thought about that one, that's a good tip!
&gt; Recommendadtions components Lol
Ok that makes sense I'll be nicer in the future. I just assumed people swear a lot and don't mind criticism when they're asking for it. Everyone at work swears at code and Silicon Valley the show reinforce that idea to me. But also &gt; Think of it this way, if you wrote some code and someone came over to take a look. Do you want to hear ‚ÄúWTF is that?!? Get that out of here.‚Äù That happened when I was starting out. I was thrilled about all his suggestions and that I understood his explanations.
How do you know what hash they're using?
Well, I learned about something new today. I had to do some research to see how ASP.NET MVC works, and learn about how the browser reacts to different status codes, but I believe I have an answer to your question. **Short Answer**: Doing a plain old return with a View will break the PRG pattern. **Short Explanation**: The status codes returned, and how the browser reacts to them are different. **Longer Answer &amp; Explanation**: As you know, the point of the PRG pattern is to prevent a browser refresh from re-POSTing the previous post data, as well as preventing a dialog box about form resubmission. The PRG pattern accomplishes this by turning your POST request into a redirect, which converts your POST request into a new GET request. If you just return a View from the HttpPost action, even if it's from another action, it's still part of the same POST request. These are the pages I consulted to reach this conclusion: * https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections * https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controllerbase.redirecttoaction?view=aspnetcore-2.2#Microsoft_AspNetCore_Mvc_ControllerBase_RedirectToAction * https://exceptionnotfound.net/the-post-redirect-get-pattern-in-asp-net-mvc/ *Fun facts I learned doing this research*: RedirectToAction result returns the status code 302. This is technically a little ambiguous. If you want to be more specific, you can create your own ActionResult that returns Http Status Code 303. Fun Fact sources: * https://stackoverflow.com/questions/1978792/asp-net-mvc-http-status-codes-i-e-303-401-404-etc * https://serverfault.com/questions/391181/examples-of-302-vs-303
I figured it out!* You are using trusted auth, which is not valid for a second destination. To use it that way you need to configure the app pool to impersonate the user, which essentially reauthenticates for the network connection. Otherwise use a local SQL user. * Not a guarantee
&gt;still in its infancy infancy has a negative connotation. core is ready for prime time on the backend, in my opinion, starting with 2.1. core 3 will make it ready for lob apps. once core 3 comes out i cant think of a good reason for framework anymore.
Neat, I've been wanting to do that myself, actually. The only difference is I want it to be API based. Would you be interested in contributions that added that functionality?
For my it was the proper use of Func and Action delegates. I understood what they were for a while but knowing when to properly apply it took a while.
Preference always comes into it. I like it over a laptop of similar price.
How easy arrays of tupples are. Tuple&lt;string,string,string&gt;[] = { Tuple&lt;string, string, string&gt;("a","b","c"), Tuple&lt;string, string, string&gt;("e","f","g") }
It wasn't really based on your suggestions. You can see I copied it from a link above that I posted before you made your comment.
The new tuples are better. (string, string, string)[] x = {("a", "b", "c"), ("e", "f", "g")};
Exception handling Then we moved on to Java
You can't arithmetically negate an enum value, but you can bitwise negate it and subtract 1, which is always equivalent. Console.WriteLine(-DayOfWeek.Tuesday); // doesn't build Console.WriteLine(~DayOfWeek.Tuesday-1); // works!
&gt; They'd better not use the same passwords, telnet is extremely transparent and susceptible to a man in the middle attack. They will. And when someone cracks their passwords to your users' emails, "Well, you shouldn't have used that password in two places, duh!" isn't going to make them not angry at you.
What are tuples used for? Is it different than an array?
You can mix types, and consider the whole group as one type.
Why not `Tuple.Create("a", "b", "c")` (or the new ones like the other comment suggest)
How do you store emails?
Easily way to explain it is it's a class that you don't define. Usually only good if it only one function creates the tuple and only one function calls or or use the list it creates. Any more than that not having member names get confusing (wtf is item1, item2 etc, that's the name they're given)
NICE
how do you intend to do that, the project has already been built to an extent. what will you use as your front-end if you make it api based
You poor soul
Oh cool. Thanks!
Interesting. Thanks
Oh LOL. That wasn't your code at all! The post was written 5 years ago. And happened to use ALL the suggestions I made! Good programming practices never really die.
Default HashPassword workfactor is low - like 10 or 11 - milliseconds to compute. You probably want to use the overload to specify a higher work factor like 13-15 to push that into seconds. [https://github.com/BcryptNet/bcrypt.net](https://github.com/BcryptNet/bcrypt.net) \*yeah default is 10
I was recently in a love coding interview where I was going to use a $@ string but had no idea if it would work. Mentioned that to the interviewer and he had no idea either, decided to handle it differently. I shoulda just kept going, hah.
Argon2 is the new kid on the block, anyone more experienced have any opinions on it vs something like bcrypt? https://en.wikipedia.org/wiki/Argon2
Well, I wouldn't change what you already have, I would just add onto it. I would add methods. It would mimic what you were already doing, but return either XML or JSON instead of HTML, so that it could be used by any front-end. As such, I wouldn't test it with a front-end, per se, but rather a tool like [Postman](https://www.getpostman.com/).
Does it support deeplearning?
Well, how did it go?
i really don't see the need for adding apiControllers at this point as it would just lead to duplicate codes especially as it wasn't designed that way from the beginning. they're other tasks yet to be done, I'll be happy to merge any pull request on those. but ofcourse you can go ahead and fork the project and have your own implementation.
I thought it went alright. I was interviewed separately by three different people. The first one went alright, but I awkwardly stumbled over a couple technical questions due to nerves, though I think I redeemed myself by providing detailed and thorough answers to the rest of the questions. The second and third interviews went much more smoothly and I think I managed to establish a good rapport with my interviewers. If anything, it'll be the first interview that disqualifies me, though I think overall I performed as well as I could. Thanks for the solid advice though. Read it as I went up the elevator.
Lucky you. I just assumed if they supported it, it would have been mentioned in the reference manual. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated Fucking thing isn't lol :( Might be a secret for the elite.
Did it help? Cause I have a feeling nothing clicked
Or you could cast it to int first: -1 * (int)DayOfWeek.Tuesday What I really want to know, though, is what you were working on when you discovered this. When would you need to negate an enum?
[Screwing around with csproj and sln files](https://www.youtube.com/watch?v=U4xBLTpZ9Xo&amp;list=PLRf-PfhVvwFBzrTCNREcvT92dpqJfoUts&amp;index=4).
Non technical answer: From what I understand, both are good but bcrypt has "passed the test of time" meaning it's be around and long time and is still pretty secure. While Argon2 (and scrypt) are the new kids on the block they haven't proven themselves to be as durable as bcrypt. Not because of issues with the algorithm but simply because they're newer ig that makes sense. Bcrypt has been around for 20 years and has been targeted the entire time. Argon2 and scrypt are only a few years old.
Not C# specific, but that Ctrl + R + G removes unnecessary using statements and sorts them.
Learnt that GetType() is a non virtual method, so calling it on for example int? x=5 return int instead of int?
I never claimed it was my code. The code in the OP is mostly not my code either, but this code needed less modifications so I had less chances to screw it up.
Are these good books to help a beginner!
I recently had an instance where I needed to return an object with two ints that I needed to use to build another object one level up. And there were several of them. So my method signature is stupid as hell... But it works. public List&lt;(MyClass, int, int)&gt; MyMethod ()...
I'm a big fan of keyboard shortcuts and chords. Here's a few that I use on the regular... Ctrl+K,S is surround with. Select your Dapper statement, Ctrl+K,S "using", enter. You have your "using (var con = new SqlConnection(connectionString))". Ctrl+A,K,F. Select all, format text. Nice when you've made a few edits that pissed off the default formatter. Gets it all back on the even keel. Ctrl+. I'd bet a lot of people already know about this one but it's the equivalent of clicking the light bulb suggestion thing. Alt+up or down arrow. Moves the current line up or down. Useful when you just want to move the code up or down.
A beginning programmer? No. A programmer who is just beginning C#? Some of them, depending on what area you're looking into.
This may be super basic to many folks, but passing variables into methods with "ref" or "out" blew my mind.
Has /r/learningcsharp been closed?
They're already on the stale side of age at least for the .NET related technologies are concerned. (Although C# 7 is current it very soon will not be, and Core will be 3.)
Convert.ToXXXXX methods will happily spit out default values from feeding in a null object with no exceptions being thrown. This may or may not be what you expect to happen.
With dates, you can get the previous Sunday of a date by subtracting days equivalent to the date‚Äôs dayofweek value
Whoah... TIL. Man, that seems wrong.
That initializers for an object declared within a "using" declaration will not trigger dispose of they throw an exception (since the using scope was never entered.) Also, you can find all references for a property's get or set independently of the other. Never thought to try before ... Also, Math.Round isn't the rounding I learned in school...
Pssst. What's this do? I've used @ before but never $
&gt;But it makes sense. As GetType() is non virtual, the value is first boxed. When the Nullable&lt;int&gt; is boxed, it passes its Value which is of type int. Nullable&lt;int&gt; is simply a wrapper. And by the way, if you have something like this , int?x=null, called x.GetType() will throw exception as you cannot call GetType() on null.
and my mind blew away when i saw the ref value types in c# 7.2.
A keyboard command? Pfft. I‚Äôve set Visual Studio to do that on *save*. Productivity Power Tools -&gt; Power Commands -&gt; General -&gt; both checkboxes.
Value tuples introduced somewhat recently have actual member names and full intellisense support. Still some limitations though, but yeah, definitely more useful than item1, item2, etc.
It's called [string interpolation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated). Example: string name = "Mark"; var date = DateTime.Now; // Composite formatting: Console.WriteLine("Hello, {0}! Today is {1}, it's {2:HH:mm} now.", name, date.DayOfWeek, date); // String interpolation: Console.WriteLine($"Hello, {name}! Today is {date.DayOfWeek}, it's {date:HH:mm} now.");
That regex is very fast and efficient in dotnet core. I benchmarked dotnet core 2.1 and 2.2 on both windows and Linux and a compiled regex match that matches a Url pattern outperformed string. Indexof with a hard coded URL. Almost twice as fast. I assume it's because of a bug where indexof is mistakenly using the wrong comparer. Fixed in netcore 3 but I have not benchmarked that yet
$ allows you to essentially use expressions or variables directly inside your strings using braces without having to break the string. For example... var example = "something " + variable + " something else"; can be instead written as... var example = $"something {variable} something else"; where the braces hold whatever expression or variable you want. Look it up, it's nice and flexible and to me often makes writing strings easier.
Don‚Äôt know the exact error but it‚Äôs something along the lines of the server not being found.
I‚Äôll try to create a sql only user to see if that works. I‚Äôve been trying to connect using windows authentication.
Thanks! I‚Äôll take a look.
That's a lot less random than I assumed.
I'd say the C# 7 books would still be useful even lacking C# 8. A lot of the newer features coming out are more advanced or syntactic sugar that can be learned through MSDN in under an hour. As for the .Net side of things, it's important to note that most companies will not adopt .Net Core 3.0 right away for security and stability reason, and there are many pre-existing applications in Framework 46 to 47 and Core 1 to 2.
Thanks! &gt; What I found out in 4 years of personal experience, and different projects, is like everyone has his own "good design patterns and architectures". I don't have a good opinion about it myself, I just like to try new things, the simpler the better, the more readable the better, and I don't care about patterns at all, they just appear when they are needed. I agree completely. I generally use whatever makes sense and don‚Äôt make a fuss about it. &gt; I see people trying to follow the best practices, trying to do a perfect architecture, overplanning stuff, wasting a lot of time, ending with stuff that they don't understand, and does not work properly (this is what I have in my current project, with a team leader who thinks he is a .net expert), and again wasting everyone's time to try to understand and fix the issue. I agree to an extent but I think there‚Äôs a spectrum. My last boss fell a lot closer to this extreme. Our codebase however has been the other extreme. It‚Äôs so bad that it‚Äôs impossible to unit test any backend code without building and connecting to a seeded rest database. Doesn‚Äôt make a big difference for a small codebase but all of this coupling results in my solution taking upwards 10 minutes to build from scratch and the full system unit test suite taking over an hour to run. It‚Äôs so far gone it seems like I‚Äôm better off learning how to not do that for my next job.
Thanks!
Struct on the fly, i abuse this power.
It‚Äôs fun trying to interpret a thread involving escape characters... always feeling like ‚Äúyou forgot this `\\`!‚Äù
Have you never used LINQ?
I learned about [Async Streams](https://www.infoq.com/articles/Async-Streams) at a talk last weekend. I haven't used them yet, but they would have been useful many times in the past.
Core 3 is not long term support till 3.1 and it's pretty stable for web.
[-optimize](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/optimize-compiler-option) compiler option (that little checkbox in project's properties &gt; build) does make a huge difference.
This would probably be better represented using string.Format() instead of Console.WriteLine().
As a general rule, a struct or class would probably be better here. It‚Äôs usually not a great idea to expose tuple values as public. They are very difficult to manage and hurt maintainability
There‚Äôs also readonly
They added the ability to give each value an actual name instead of just item1, item2, etc. I like to think of them as being like virtual particles. They pop in and out of existence on an as needed basis. Meant to be used in places where creating a class would be overkill. The values are temporary, and the data structure is unique to that location.
Didn't knew the existence of this sub :) I LL check it out thanks
I ll try it :) I know it was a stupid one question, but I just freaked out a bit. Thanks!
Dang now I own more books I don't have time to read.
Thanks for the explanation, I didn't know about `MethodImplAttribute`.
&gt; Method for figuring out hidden salt as a malicious party: Create your own account so you know the password. Steal the database. Try each user column with the hash and see which one causes the right hash for your password. Wouldn't it already be impossible to compute if the salt itself is strong enough? For instance KDF functions usually recommended minimum of 8 bytes, that means the attacker has `256^8 = 2^64` salts to try. And that's only if they know the size of the salt. The function itself can be expensive to run too. `HMACMD5` might be fast but something like `scrypt` is much slower to brute force. And that also adds the problem of not knowing the settings of it (the number of rounds for example).
That you don't need a setter at all if you try to set a property from a constructor. I was only aware that this works if you immediately assign something at the declaration. I always used to add a private setter if setting from constructor. Apparently this came with C# 6. Nothing too fancy, but nice to know.
I'll look into that but I hope your pedantic tone is sarcastic.
You should check out the new [in](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier) parameter modifier as well, it's pretty cool, but comes with some caveats.
It was mentioned in a 7.x changelog. Documentation lacks behind or is just missing. The .net docs are not that great.
Yes 2.1 is where it became solid but that was less than 12 months ago. Hence why I said infancy in the eyes of enterprise. I love core, I use it every day but I work on Greenfield projects for agencies which is very different to enterprise. I don't care about web forms or win forms and have no legacy code to maintain.
Why though? It's annoying when files have basics removed and then you have to readd them when doing a linq query
I'm not suggesting they can brute force the salt. The commenter suggested hiding the salt or using existing data such as a guid. I'm suggesting that is useless as a malicious third party can just try every column against their user record to see which salt is correct.
The same way they stole your database. They've got access to your servers. In all seriousness I'm not a hacker, I've always approached security how I first got taught it. Assume the attacker knows absolutely everything about your system. They know your salt and your hashing algorithm. The only thing as software developers we can do is make that hashing algorithm as expensive as possible to slow down attacks .
You could also move away from xpath in this case and use: driver.findelement(by.id("credential")) Also, I *think* you can get away with using single ticks to evaluate an attribute (someone correct me if I'm wrong) driver.findelement(by.xpath("//*[@id='credential']")); And because I like using CSS with shortcuts and this kind of rounds it all out, the locator would be"#credential"
Fair enough. &gt; A lot of hashing methods store the rounds right in the hash (e.g bcrypt... Unsure about scrypt). I'm no expert but from what I understand you don't have to store it in the hash, it is just the default settings of some implementations that encodes the extra information such as rounds,... inside the result string they give out (as in `return Base64Encode(extraInfoByteArray.Concat(hashResultBytes)));`. But you are correct that if they have stolen the database they may also see your code too.
Does this work for .net core?
I haven't understood delegates at all. They are like function pointers but needlessly complicated?
The last thing I learned was that you can flip booleans by doing `myBool = !myBool;`. I‚Äôve been learning C# for like 2 years now, it just never occurred to me that I could do that.
I am also no expert, and didn't realise you could store the rounds separately! I'll just leave them in the hash regardless though. Makes it easier to upgrade passwords as time goes on (at least with how our codebase works).
They're strongly typed and beautiful
No problem, happy to help :D
It is an option for "compiling" the code, I don't think the framework makes any difference.
But functions are already strictly typed, why wrap another layer around it?
That I suck so hard at working with bitmaps that I gotta use ``GC.Collect()`` lol.
\*in Visual Studio
Unpopular opinion, but in a lot of cases a proper custom delegate type is preferable over `Func&lt;&gt;` / `Action&lt;&gt;`. A custom delegate type can be properly documented, the generic types can not.
It's automatically set when building for Release, and it shouldn't be set for Debug builds.
Because you can tell something else to execute this function later.
It's not just a simple wrapper, it does involve a lot of compiler magic. And IMO it doesn't make much sense. `x.GetType()` should be `Nullable&lt;int&gt;`, and `x.Value.GetType()` should be `int`.
&gt; Also, Math.Round isn't the rounding I learned in school... That's why it has a parameter to specify the rounding type.
&gt; which is always equivalent. This is not true. This only works as long as your enum is based on as signed type. But when you have an unsigned enum it will not work anymore. public enum MyEnum : uint { ... }
I don't understand the question. Strongly typed delegates aid in inversion of control and provide a compile time guarantee against strongly typed functions. One could exist without the other, I suppose, but then you lose this key benefit.
From TFA: &gt; TensorFlow is an open source machine learning framework used for **deep learning** scenarios
you have to remove your " inside your string (By.XPath("//\*\[@id='credential'\]")); &amp;#x200B; BTW wildcard match can cause bad performance, you should try to be a bit more specific
&gt; They added the ability to give each value an actual name instead of just item1, item2, etc. Tho this is just a compile time *hack*. The properties are still named `Item1`, `Item2`, etc..
Usually you don't have any kind of logic inside your DTOs, but rather in eg. DTOProcessingService-class, which would have methods like "Validate(DTO)" or "SendMail(DTO, MailContent)" etc.
This is helpful! How would I specify manually? And where are the docs for this?
Has anyone did the tutorials? Anything interesting/exciting?
Say I have a method like string FormatThis(string prefix, int num) What does defining a string/string,int delegate add that a simple function pointer would not? As I've said I have no idea. For me var f = FormatThis; f("abc",5); ist perfectly fine.
&gt;A verbatim interpolated string starts with the $character followed by the @character. For more information about verbatim strings, see the [string](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/string) and [verbatim identifier](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/verbatim) topics. &gt; &gt;**Note** &gt; &gt;The $token must appear before the @token in a verbatim interpolated string. Right below **Special Characters**
Is it possible to sort them by string length? :D
Oh, you know that Method, that MIGHT throw an exception if you're doing stupid things? Yea, better handle all of that or propagate it. *Because being smart was not common for Java Std-lib devs*
Think of delegates as interfaces to functions. They allow you to separate concerns.
Yeah, this is good advice. Increase the work factor.
The var in your example is of type Func&lt;string, string, int&gt; Extending your example, Say you now have a requirement to have multiple formats given a unique key. So in order to define a data structure that could contain those values for quick lookup, you could create a: Dictionary&lt;KeyType, Func&lt;string, string, int&gt;&gt; And this would contain Func instances to all your different formats. Now if the method signature to your FormatThis changed, the compiler would prevent you from attempting to call a delegate with an incorrect number or type of arguments. Hope that made sense
I did the flower one with no problems. Nothing to special about it but it worked.
They have a lot of use cases but the syntax is so messy. If we had something like "int -&gt; int" instead of "Func&lt;int,int&gt;" I'd be using them a lot more. Usually, I just end up creating a single method interface because it's a lot more readable.
Click the link, check the remarks. &gt; -optimize also tells the common language runtime to optimize code at runtime. It's not only for "compiling" the code. It has runtime effects as well.
With HashSets, Stacks, Queues etc. there is almost always a faster alternative to Lists
&gt; it computes the salt for you, and stores it next to the hash. &amp;#x200B; Sorry for the stupid question, but if it stores the salt in the hashed password string(?) how is that secure ?
I just assumed you generated an new salt for every password made.
That sounds reasonable enough. Although it kind of goes against some of the principles in OOP doesn't it? If my DTO can exercise behaviour on its own(it has all the data it needs in its body) then I would've really liked to encapsulate that behaviour in itself. emailDTO.Send(); looks much better than EmailSender.Send(emailDTO); don't you think
That if I want to grab an object from a list, but I don‚Äôt want to edit the object IN the list....I have to write a ‚Äúdeep copy‚Äù method. C++ just works that way naturally. If I wanted my local copy to reference the copy I pulled from the list, I‚Äôd have to manually give myself a pointer. Bit annoying when your object is pretty big. I didn‚Äôt use the ‚Äúmemory stream‚Äù though. But I guess I ‚Äúlearned‚Äù it?
The goal is mainly to make brute-forcing so time-consuming that it's unfeasible. And should they succeed to extract the password, then they only have the solution for that particular hash, for that particular algorithm, for that particular amount of iteration. Basically... kinda waste of time unless the person in question is an admin who reuses his passwords everywhere.
Never heard of this site before. And pay what I want... is it legit?
Because a salt is not meant to be secret. The purpose of a salt is to make sure the same strings don't end up with the same hash. Let me explain why: Let's say 15 users have the same password "supersecurepw". If you encrypt this string then you'll get the exact same hash for each of those users. So basically: 1) Multiple people have the password, so it's probably something super easy to guess. 2) I only need to put in the work to crack one to get access to all 15 accounts. 3) I have rainbow tables with common passwords and their hashes, so I can match those. If I already have the hash for "supersecurepw" in my rainbow table, then you might as well stored the password plaintext. Meanwhile if I add a random salt, the hashed password will be "supersecurepw" + salt. This means all hashes will be unique, even if those 15 users choose the same exact string as password. Rainbow tables become useless and cracking a single password will not grant me access to all of the accounts with the same password.
Yeah, this is not necessarily a good behavior.
Never heard of humble bundle? Wow
Reddit mini
Don't use `Task.Run`. Just `await` your async functions. Make your event handler async.
You can't update the control from a thread other than the UI thread. There are multiple ways around it, have a read of this for starters - https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls
https://youtu.be/nmG9Re7HK60 Watch this!
As someone who develops enterprise web applications, we've already been using Core in a bunch of backends, serving several thousand clients.
Why use Ctrl+A, K, F when you have Ctrl+K, D? What's the difference?
I don't like to write out the entire type. I would probably write: var x = new [] {("a", "b", "c"), ("e", "f", "g")};
A Func&lt;TResult, IDoSomething, string, int, decimal, MyType, YourType, MyStruct, YourStruct&gt; Not enough documentation for you?? /s
Discards! You can discard the out parameter from the method if you dont need it with "out _". Removed so many dummy and useless variables.
You can't retrieve primary key from EF6.2 directly, until you do 'context.SaveChanges()'. Calculating the primary key manually is disadvised, but you can solve it with a tiny SQL script.
The result type comes last.
That's my point...
Using linq and being able to write delegates are 2 entirely separate things?
No, it's mine.
I take it you have never used Linq.
Or `myBool ^= true`.
&gt; C++ just works that way naturally Huh not it doesn't. If your object references other objects, you also need to do a deep copy.
If I have objects and I add them to a vector. Then in another function I grab that object...that object IS a copy. Same if I pass an object into a function, it is a copy. C++ always makes copies. The only way the vector (list) or whatever data store would have referenced copies is if I purposely design it that way with pointers. I am right, buddy. I am not sure what you are getting at.
&gt;If someone has the salt and hash they could theoretically bruteforce it, but with my testing seems like it would take quite a while with a good password. And that's enough, lol. bruta force takes time in compare to reading plain password.
If your object has a field which is a pointer to another object, you still need to write a "deep copy". Don't know why you did not get that.
Check in that folder: ``%userprofile%\source``
Yeah, it‚Äôs legitimate. Very popular site. You can pay what you want, but everything is in tiers. Pay over x and you get y. It‚Äôs a charity site first and foremost, so they figure you‚Äôll toss in a couple extra bucks.
Ok what I got from this is that a delegate is a function pointer and using the delegate keyword you create a named alias for the Func&lt;&gt; types.
Sounds like somebody is being a bit pedantic. Everybody who uses both languages knows this. It's bread and butter stuff. C# ALWAYS passes objects, ALWAYS...by reference. C++ ALWAYS passes by value, unless stated otherwise - (or it's an array or something) I am literally fighting this now, like RIGHT NOW, sat in work. In C++ I can pull objects out of a vector and edit them and send them on the network. I can do this and it WONT affect the copy in the vector. The same code, the same method but in the C# version of the code and it literally references the copy in the list. Meaning I can't edit it to send on network without it changing the version in the bloody list. So in my C# version of the code I have a "createCopy" method on my object. In my C++ version, I do not. Literally sat here looking at it mate. Not that I need to look at it....been coding for over 15 years lol. Chill man! I wasn'#t looking to start some crazy ass pedantic debate. Just here for the lolz and what'not.
Don't feel too bad. It's quite a new feature
A thousand apologies mighty c# developer, I didn't realise that only one person can make and exemplify a single point at any one time.
Why? For LINQ filters like Where() you can just pass in a function pointer it just has to return boolean in this specific case. If you use a lambda all the delegate stuff is basically nonexistent.
Lambda are a syntactic sugar for delegates.
Good question...I don't know. I'll look into that later today.
That's a really good point. I'll probably wind up refactoring it to a local class soon, but the "just make it work" instinct kicked in and that tuple is the result.
Holy shit, that's pretty useful for TryParse statements.
I'm glad that we agree. :-) (I definitely need to make use of /s more often)
Hello, the "/s" in your comment really took away the effect of the joke, and is not needed. This is a bot
The only reason LINQ works is delegate functions. You pass a lambda func&lt;&gt; or action&lt;&gt; delegate to a LINQ method so it knows how to behave. Like this: myList.Where(itm =&gt; itm.Val==5) The argument is a delegate function. I really didn‚Äôt think this would be controversial.
But why would you ever use that? I see a very limited use for out variables in Try* methods, but that‚Äôs about it.
Not so much learned but rather remembered: semicolons after your if statement invalidate the scope, making it run either way. What I did learn, however, is to not try and fix things while literally walking out the door, lest you wish to add a semicolon where it doesn't belong. Been coding since 2005. Basic mistakes will happen.
This is where unmanaged code comes in. I have yet to wrap my head around it, as well.
Using tuples to switch properties/values in a single line without a temp variable (thingy.This, thingy.That) = (thingy.That, thingy.This) or (varA, varB) = (varB, varA)
Ctr + D - duplicates the selected line as a new line
Can we keep this bot-spam-shit out of /r/csharp please?
I think the reason this is controversial is because you've suggested that anyone who can write Linq can suddenly understand when and where not to use delegate functions of their own. Consuming a pre built API that is ridiculously documented as well as being fluent is very different to writing your own set of delegates. No one is suggesting Linq does not show a great example of delegates. It's just that it also has no bearing on how to properly use Func &amp; Action delegates of your own to create an application.
On the left - monodevelop Linux, right - Visual Studio Community 2017 Windows 10 Sorry I'm new to C# but I don't understand what am I missing here?
the word 'new' before Point?
`new Point`, not `Point`.
Yes of course..... I need to sleep Thanks xD
&gt; Starting with C# 7.0 \- [Discards - C# Guide](https://docs.microsoft.com/en-us/dotnet/csharp/discards) :(
You're missing the 'new' keyword before the Point(10,10) declaration. should read **btn.Location = new Point(10,10);**
Which one do I use for static methods? string.Join or String.Join?
Coding when tired is not a good idea. Especially not when you're learning. You will overlook things, you will be sloppy, and you will not remember the learnt as well.
It's very popular for video games. Quite legit.
EF Core is ultra fast. People who have problems have bad domain design and unnecessary business logic in queries and database. Database should be as dumb as possible, and just store data in optimal way (not describing reality, but with queries against it in mind).
XUnit will create a new instance of your test class for every single test execution. So yes, the constructor and the `Dispose` method will be executed for every single test. If you need async setup &amp; teardown code, then your test class must implement `IAsyncLifetime`. This interface brings two `Task` based methods: `InitializeAsync` and `DisposeAsync`. (https://stackoverflow.com/a/45906269/11311180) So what you have now will work fine, tho you need to keep in mind that this will be very slow. That's the price you have to pay if you want to do it like this. An alternative might be XUnit fixtures for you. A fixture is a class that will be created once, and the instance is used for every single test. You just make your test class implement the `IClassFixture&lt;YourFixtureType&gt;` interface and accept an instance of `YourFixtureType` in the constructor. When you pair this with a transaction scope around each test invocation you might be able to proceed with a single database instance initialized once, but each test still being independent. (https://stackoverflow.com/a/46974218/11311180)
That's why I combine it with [IntelliSense Extender](https://marketplace.visualstudio.com/items?itemName=Dreamescaper.IntelliSenseExtender) which automatically lists even unimported types and adds usings whenever you add them. That way I always have exactly the usings that are needed, while simultanously not having to think about adding any manually, or loosing some by accident.
Thank good it's only ``Func&lt;TResult, IDoSomething, string, int, decimal, MyType, YourType, MyStruct, YourStruct&gt;`` instead of ``Expression&lt;Func&lt;TResult, IDoSomething, string, int, decimal, MyType, YourType, MyStruct, YourStruct&gt;&gt;``
Yeah, even more cool features now in C# 8.0
dafuq, `int? a = null; a.GetType()` throws a null exception error (which I should have excepted) and `Console.WriteLine(a.GetType().FullName);` returns `System.Int32`. TIL and that's really bad IMO
That it's possible to apply an attribute to just the return value of a method (not the method itself) like this: [return: SomeAttribute(arg, ...)] int SomeMethod() { return 1; } I knew you could explicitly target entire assemblies with [assembly: SomeAttribute(arg, ...)] but other than that, I'd only ever seen attributes applied "positionally" to the things they immediately precede. Turns out there are [quite a few other targets you can specify explicitly](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets).
Thanks AngularBeginner I'm foooking retard and I didn't add ``: IDispoable``, so ``Dispose`` was not executed and I thought that ``Dispose`` isnt being invoked at the end... Now it works fine public void Dispose() { _ctx.Database.EnsureDeleted(); }
Technically correct but blasphemy.
&gt; The $ token must appear before the @ token in a verbatim interpolated string. In C# 8.0 the order won't matter -- [both $@"this" and @$"this" will work](https://www.tabsoverspaces.com/233762-interpolated-verbatim-string-in-csharp-8)!
Null conditional acess operators like `?.` and `?[]`, returning null if the object is null otherwise the target member. Very easy and nice to combine with the null coellecing operator `??` and the normal terniary operator `? :`. Used them a lot for constructors initialization.
I always test for !myBool instead.
Can you tell us more about the good scenario?
 if ( check == acc.Hash) { return true;//password is correct } else { return false;//password is incorrect } I always cringe when I see something like that. 8 lines of code instead of just: return check == acc.Hash;
bad bot
Thank you, TriptychButWith8Bits, for voting on AntiLowEffortBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
Holy shit, this works? This is now the last thing I learned in C#
You mean if (expression); { doStuff(); } ?
Expression funcs are my jam tho :D
I think o prefer `default` to `Convert.ToDateTime(null)` but thanks
It's like readonly but for properties
Even more pedantry: both C++ and C# (and Java) are pass by value by default. Evidence: void f(SomeClass c) { c = new SomeClass(); } First, you can call it with a "temporary" (as in `f(new SomeClass())`); second, if you call it as `f(someInstance)` the assignment done in `f` won't be reflected on `someInstance` variable. In C++ and C# you can pass by reference with respectively `f(SomeClass&amp;)` and `f(ref SomeClass c)` arguments.
Whoa
Two things I learned recently: 1. You can create C like union types (storing multiple variables in the same memory location) using `StructLayout` and `FieldOffset` attributes. (Arguably) fun exercise: make a union with an `int` and four `byte`s and check whether your machine uses big or little Endian. 2. C# cannot infer generic argument types from `where` constraints even if it logically follows.
I remember one of the goals was to try and get c# regex closer to the speed of Java regex.
The syntax you wrote above is already valid c# syntax... You can just type those array initializes and it will already work. What exactly is special about how the author did it?
K+ F formats selection, vs K+ D formatting document. Sometimes you might not want to cleanup the whole file.
What's the use case for that?
I don't think you want this either. class Animal {} class Human : Animal {} Animal a = new Human(); a.GetType() // --&gt; 'Animal'
FWIW it's just syntactical sugar. Any "temp" variables you declare and don't use will be eliminated in JIT anyway.
The new `switch` statement is freaking awesome! public static RGBColor FromRainbow(Rainbow colorBand) =&gt; colorBand switch { Rainbow.Red =&gt; new RGBColor(0xFF, 0x00, 0x00), Rainbow.Orange =&gt; new RGBColor(0xFF, 0x7F, 0x00), Rainbow.Yellow =&gt; new RGBColor(0xFF, 0xFF, 0x00), Rainbow.Green =&gt; new RGBColor(0x00, 0xFF, 0x00), Rainbow.Blue =&gt; new RGBColor(0x00, 0x00, 0xFF), Rainbow.Indigo =&gt; new RGBColor(0x4B, 0x00, 0x82), Rainbow.Violet =&gt; new RGBColor(0x94, 0x00, 0xD3), _ =&gt; throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand)), };
For many, many application `List&lt;&gt;` is much faster than alternative structures when collection size is small (my gut feel for what I've worked with is ~20-30 items). After that algorithmic complexity starts to take over. Depends very much on what, how often and for how long you do.
And ctrl-k, C is to comment IIRC .. ctrl K, U to uncomment. Shift click scroll bar to jump to that point in the file if you have the default VS scroll bar.
I didn't even know you could make an enum based on an unsigned int. Is there a common reason for doing this?
Yes, for small sizes it probably doesn't matter. But if you deal with thousands+ the difference becomes staggering. And I do a lot of "throw this in a list, only to remove it later in whatever order" Where a stack or queue actually makes more sense.
I'm with you brother. (Strange since I disagree with your opinions quite often)
This might be the missing piece that keeps me from ditching resharper! Thanks.
I was excited when I found out about these but fairly quickly disappointed when I realized that it can't function as a "wrapper" for value-types.
I have no idea what you're trying to say. Are you agreeing with me or disagreeing?
This is exactly my message! thank you!
You should await your async method call. If you want to access a control from a thread other than the Ui thread, you need to use Invoke.
SortedList&lt;T&gt; is a sorted list while SortedDictionary&lt;T&gt; is a tree.
Discards come in real handy when calling Async method from non Async method.. assuming you don't need to await it. Having the discard avoids the build time warning. E.g. _ = asyncmethod();
Can't inherit from type argument: // does not compile interface IFoo&lt;IBar&gt; : IBar {} Would've been nice to implement a sort-of decorator on interfaces that are otherwise pure
Handy option is "out var x" so that you don't need to first declare the variable
I hate that so much :( It is not even tuples that are doing the swap it is deconstructing (i.e. a Deconstruct method on any type would do)
Providing you with **a** rationale for why it works the way it does
Almost always?
I wasn't saying that they weren't still useful. They're just on the stale side. Books for even older versions can still be useful, but OP should know that they're not getting the latest and greatest since they are a beginner.
I'm personally overusing `Dictionary&lt;,&gt;`, for most of my cases setup costs are way higher than using raw `List.Single(i =&gt; i.foo == .. )`etc.
Well it's COMPLETELY shit. I still have no idea if you're explaining the null part or why it says int32 Maybe this is more clear to you Console.WriteLine((new List&lt;int&gt;()).GetType().Name); Console.WriteLine((new Nullable&lt;int&gt;(5)).GetType().Name); Console.WriteLine((new Nullable&lt;int&gt;()).GetType().Name); First is List`1, second is Int32 and third is exception. How the hell can anyone say the second and third line is reasonable.
Thanks again for the article! Can't wait to read it
Mind = ‚Äùblown‚Äù Since c# 1.0 have never seen this tip. Nice one!
Today I've learnt that catching Exceptions is actually very costly. I never realized that before
The first one, yes.
Yes, it's a technicality that actually doesn't have anything to do with `if`. Basically, you can construct scopes whenever you want in C# with `{ }`.
I‚Äôll code up my example when I finish lunch. I‚Äôm deffo seeing ‚Äúobjects passed by reference‚Äù in C#. I‚Äôll show you soon!
I know. I sometimes leave the brackets in after removing some conditional just because they're inconsequential and I'm too lazy to wrap the thing in a region. Still, the semicolons in the wrong place mess with you.
Second is reasonable because you're interested in the type of object that is currently behind the potentially nullable pointer. If you want the answer to be `int?`, then you say `typeof(...).GetType()`. Third is reasonable because there is `null` in the pointer and null does not have a type.
Hard to keep track of the last shipped feature I learned about because I follow the development of the new version and already know about stuff when it is released. Sometimes it is hard for me to keep track of which feature that I learned about was released and which one didn't make it. The last thing I learned is related to the upcoming nullable reference types and it is the concept of Oblivious nullability which is applied to types coming when you use assemblies without nullability annotations.
Don't do this. You have no way to know if someone else inserted a row before you. If you're going to generate your own primary key then don't use identity columns. At least then you'll get a conflict if you try to add a duplicate PK.
Yes. This was a specific instance where I'm certain nobody else has inserted a row - because it's an automatic service that runs as a singular instance. I can't wait until EF gets a proper solution to this issue.
The first one. if (foo); is a valid statement that doesn't do anything besides evaluate foo. { DoStuff(); } Is also perfectly valid and will execute every time.
Now that's just elitist
I wonder what that would be used for.
What sort of mainframe are you running your c# code on to get big endian?
I don't see how the data model in the article can be simplified.
If you are doing async from non-async contexts, you are doing something wrong. A discard wont solve the issue underneath.
I've used it a lot when setting up PInvoke calls. Its seems a lot of C functions are structured that way.
But why do you need the primary key before you call savechanges?
When to use simple arrays inside fors, against when to use unsafe code to iterate with pointers against when to use parallelism.
Because I have to display it. It's an ancient legacy code project, I'm surprised we were even allowed to update EF.
What's preventing you from upgrading?
Is there a way to "intercept" a specific query to add `recompile`? It looks hacky to do string search.
Also note that before you check out, you can assign how much money goes to the publisher vs the charity vs humble bundle. It's hidden behind a collapsed option though, so pay attention!
&gt; Turns out there are quite a few other targets you can specify explicitly. Yes, but most of them are just redundant in practice. Apart from the ones you already mentioned, I think the only useful one is `field` on an auto-property
Everyone else pretty much nailed it by the points of not rolling yourcown crypto and yes, salt+hash is the way to go. Just want to add you should also employ some account lockout after x failed attempts mechanism. This should not be relied on solely but is a very effective defense in depth mechanism. All of a sudden something that takes a year to bruteforce will take many many many years to bruteforce.
if you looking for the silver bullet, then I do not have it too. just for example, 99% of the data are in one property. the data nature is like key/value storge. I would use the polyglot persistence in this use case.
Well, first of all it's not (solely) my decision to make. And after that, *if* I remember correctly, it's because we are currently stuck with some components that can't be migrated to newer versions of .NET Framework and are thus stuck with C# 6 for the moment. &amp;#x200B; But we're getting there and then we can migrate as soon as new language versions are available, which I'm looking forward to.
In that scenario you should call `date.Subtract((int)DayOfWeek.Tuesday)` instead of doing some weird bitwise negation.
The slowness comes down to header to line joins. It generates insane amount of SQL for something very simple and then duplicates the headers on every line. With Dapper, you can use query multiple to do the headers and one to do the lines and merge the keys in memory later, reducing SQL complexity and the amount of data going over the wire. if your tables are simple, ef is fine. when you have to join 10 tables, it gets slow.
If you have a line that you want to repeat entirely but only change one word, maybe two. Maybe you're populating member variables of an object? I don't really use it to be honest, but I can see some usefulness.
One possibility is you‚Äôre using the [Flags] attribute and will never have a need for a signed one
In p/invoke you can mark how to handle return types.
With EF it was very clean with Interception concept. For EF Core read this please: [https://github.com/aspnet/EntityFrameworkCore/issues/7371](https://github.com/aspnet/EntityFrameworkCore/issues/7371)
You can upgrade the language version without upgrading framework version. Some language features require that newer framework (though you can often use a NuGet package instead), but many (including discards) don't.
async is everywhere and i dont understand it...
For the small devices(Limited CPU/Memory) I recommended also Dapper, but there is always Pros and Cons
That bindings are hard. I seem to only be able to do it in two cases: 1. items in datagrid/listview 2. static properties When I try to bind a checkbox.IsChecked to a bool in an object it doesn‚Äôt work every time, or when I need a list from a SelectedItem of another list and it‚Äôs just empty. It‚Äôs so frustrating to not only have a thing not work, but also not being able to figure out why it doesn‚Äôt work. I can‚Äôt even check the value from the debugger!
I was not sure of that, thanks for the information. I guess there's another reason I'm personally not aware of why we can't upgrade at the moment.
For algorithmic code with lots of math it makes a 400% difference. 5 second runtime vs 20 second runtime.
I know it's not common but what's wrong with calling async method that doesn't return anything and that you want to call asynchronously? If you do it without the discard you get a compiler warning which can be avoided using the #ignore directive or more simply with just "_ = "
The thing is I don't agree that logic should not be pushed to the database. If we don't that means that we will have to pull much greater amount of data to be able to apply the proper filters.
Useful because they didn't have a TryParse without an out...
Sure, but we don't all have the luxury of greenfield. "It's fast enough when everything else is good" isn't a very compelling argument.
What would that mean to "inherit from a type argument"? Doesn't make any sense. Or were you trying to do ``` interface IFoo&lt;T&gt; : IBar where T : IBar {} ``` which is perfectly legal.
Move from there to JavaScript - Then you can redeclare your exceptions as classes (Because why not) \o/
In those cases (where number of lines goes &gt; 100) I'd rather fire up Excel and do `=contcat(prefix;A1;postfix)` and Ctrl-D fill the cells. For &lt;100 Ctrl-C-Ctrl-V is good enough
I've spent a lot of dev time working around the gotchas caused by this.... Pretty much every generic method that may receive a null able becomes way more complicated
WinForms and WPF will be supported. But they are still Windows only.
Not salting was unacceptable 5 years ago if you ask me
The case here is that I don't (and can't reference) `IBar`. It can really be whatever (class/interface). The library I'm working on is a sort-of resource provider, where the resource is looked up based on actual method name off interface. So for example interface IFoo { string Bar(); } could look into (separately given) "resource.json" and lookup "Bar" and return that. The thing I couldn't do with parameter is providing a separate method `Lookup(string)` like this: interface IWithLookup&lt;TType&gt; : TType { string Lookup(string); } var wlookup = DependencyCollection.Service&lt;IWithLookup&lt;IFoo&gt;&gt;(); wlookup.Bar() // -&gt; "Bar" from json wlookup.Lookup("Baz") // -&gt; "Baz" from json So instead of this I ended up going with composition, so the `IFoo` is seen as a property from under `IWithLookup&lt;&gt;`.
You can make an enum based on an unsigned long too. We've used it for a permission scheme where we've needed a LOT of granular permissions.
Kind of pedantic, but it's actually a switch expression. It is a great new feature though.
That's still inconsistent. List&lt;int&gt; ls = new List&lt;int&gt;(); Console.WriteLine(typeof(List&lt;int&gt;).Name == ls.GetType().Name); int? a=5; Console.WriteLine(typeof(int?).Name == a.GetType().Name); Returns true then false.
This is not true. You can easily have lambdas map to function pointers instead of delegates.
In C#? Is there an example of this online?
Show me an example.
Ah, that makes sense. It's a workaround for something that should not be an issue in something properly designed. Legacy stuff is fun.
I definitely should have added this one. I use this s hundred times a day!
My C is quite rusty and it was never good but I believe you can cast function pointers and turn them into some different function and even call them without runtime error. You can't do that with delegates. In addition when you put an instance method into a delegate the delegate holds the this pointer. How do function pointers handle this case?
Sounds interesting Isn't there something where I can tell the compiler to not allow null unless I specify it? I want to do that. My home project is ready for that. Has that been released? I heard it a while ago but don't remember if it was released.
The reason the behavior in your example would be bad is because your working with classes not structs. Structs can't be inherited - and your example is showing inheritance. We are taking about wrappers. If you wrap a struct in another object or structure, calling GetType in any other case would give you the type of the wrapper. And this is true for everything except the pants on head retarded case where they decided it didn't apply when the wrapper is the Nullable type.
Not that I'm aware... I learned it by testing in my code and benchmarking it. It was a synthethizer that I got to synthethize about 70 seconds worth of audio per second with a lot of optimizations
defining and invoking lambda expression by casting it to Func or Action `((Func&lt;int, int&gt;)(x =&gt; x^x))(3)` will return 27
I think you miss what `.GetType()` does. It gives you the type of object that is linked to the variable it is invoked through. It does not give you the type of variable. Consider this: IEnumerable&lt;int&gt; ls = new List&lt;int&gt;(); `ls.GetType()` gives the type of what is pointed through the "ls" variable name. And I can't actually figure out how you'd even get the type of "ls" so that it would come out as `IEnumerable&lt;&gt;` (You should always know it explicitly anyway). The case with `int? a = 5` is that while `a` could point to either `null` or `Int.Min - Int.Max`, the actual value of a is definite int which is non-nullable.
C++ has implicit conversion to function pointers for non-capturing lambdas which means that at least non-capturing lambdas are fully possible as function pointers - https://stackoverflow.com/questions/28746744/passing-capturing-lambda-as-function-pointer I am thinking function pointers can be upgraded to hold a this pointer if people wanted to go there.
Look at C# 8.0 nullable reference types. Basically if you say string it will be an error to assign null or a variable that can be null or the result of a method that can be null. You need to say string? if you want to assign null.
We are talking about C# here, not language interop that doesn't use the language but the capabilities of the underlying runtime (i.e. the CLR). So in conclusion, in C#, lambda, delegate and function pointers are all of the same.
If you are bruteforcing 1 password, the salt won't make much of a difference. If you are bruteforcing an entire db, the salt per password means you have to brute force each password individually. This is why a salt should be unique per password. Otherwise the salt offers no additional protection.
You have misunderstood what we're talking about here. We're talking about alternative design to delegates.
You are the only one thinking we were talking about alternatives.
So one thing that's left is to find a way to pass information from IQueryable extension method to RelationalCommandBuilder. Going to play with this over a weekend.
give me a feedback pls at monday
What was your solution? We tend to start database transactions, call save changes, and then end with a commit.
Sure. For better or worse we're using entity Framework as an ORM inside an API. We have "Notes" on various subject types(models) within our db. The client wanted a paginated search for the notes, but they want all the notes for a giving parent child relationship. (I.E. If I search for parent "1" I need to get all of its notes, any notes on it's children, and any descendants notes.) The only difference when searching for one parent versus another is the predicate logic. So rather than repeat myself with the same EF calls (I.E. _context.Notes.Where(/* some where clause */) for each subject, I only have to define the where clause. tldr: I can create a pointer for a predicate for an EF function like Count() or Where() so that I can focus on the predicate logic rather than repeating the EF code.
&gt; another decade vb6 is still running, id be surprised if framework only had a decade of running left. that said im like core more and more
Yes, that would be a good place to put the try catch. But if you handle errors by just popping up a message box there it will be displayed for every error and the execution will be paused until the user clicks OK. &amp;#x200B; Depending on how you want to handle errors you could either save a list of all errors and display them at the end, or just exit the loop when you encounter the first exception and inform the user afterwards. Halting execution in the middle of a loop to wait for user interaction is generally not a good idea.
I used to use "String.MethodName" for the static methods, but now use "string.MethodName". I can't find a link at the moment, but I think it was around the 4.0 time-frame that they changed the recommendation to always use "string"
yep, for reference: https://sharplab.io/#v2:C4LghgzgtgPgAgBgARwIwG4CwAoOBmFAJiQGEkBvHJalAuAFiQFkAKAJwFMAzJASwDtgSMABpOPAUIBGASgpUaillJFg5AXiQtRsrNkUBfBdXwpGTQu259BwsdclJZ8/YpoA3MGyRDNYPW40YEiaUgGBTiE+4dRGriZ05nhWErai4jbScpTxbp7ewMF+MXlePlJRYcZuReUlihWahSVxBkA= all 3 JIT to the same code
I use `?.` all the time, but I never even considered that there would be a `?[]` operator. Thanks!
How to " save a list of all errors and display them at the end" and how to "just exit the loop when you encounter the first exception and inform the user afterward"? My question was: is my Try-Catch code "saving a list of errors and display at the end"? Is yes, what is the way to write code to exit when encountering the first exception? Can you tell me how to handle it in both way? I mean how to write Try-Catch code? &amp;#x200B; Thank you very much!
I'm a big fan of Ctrl+/ to toggle comment/uncomment from VSCode, and there's an extension for that in VS.
...not zero?
This is kinda interesting, but I guess there is some implicit conversion happening (I recall some fuckery happening with `Nullable&lt;&gt;` due to historical clr reasons): &gt; dynamic d = new Nullable&lt;int&gt;(2); &gt; d.GetType() [System.Int32] &gt; d.Value 'int' does not contain a definition for 'Value' + System.Dynamic.UpdateDelegates.UpdateAndExecute1&lt;T0, TRet&gt;(System.Runtime.CompilerServices.CallSite, T0) &gt; d 2
OK let's ask /u/amkoi what he was referring to. Obviously a lot of C# features are built around delegates the question is if this design is overcomplicated and the alternatives could be better. I find it hard to believe that anyone who has used function pointers in C# would argue that the current state makes them more useful.
Event handling. Sort of...
why would it return 0? 3\^3 = 3\*3\*3 = 27
Lambda expressions can simply throw an exception in later versions of C#. At is, () =&gt; throw new Exception(). No curly braces needed. Mildly nice for writing tests.
&gt; catch { } Then get this information here. Don't eat exceptions and not show them. catch (Exception ex) { Debug.WriteLine(ex.Message); }
That you can use a _ as a seperator in integers for readibility, so 1000000 == 1_000_000
That is an xor operator, not an exponent operator.
I'm not OP, but a horrible workaround that I know would work in SQLServer is to do transactioned insert, return created ID, then rollback. Identity will have progressed so other users would get correct/later ids, and you can do insert (set identity_insert on ..) with a db-generated id. Bad thing is that if user aborts creation, there will be a hole in identity progression (which is likely to cause issues with a system that shows id's before rows are created)
Because in C# `^` is the XOR operator, not exponentiation operator. 3 XOR 3 is 0.
I learned you can mock DBs in memory with sqlite and ef using the connection string `Data Source=:memory:`
Yes, that's fine too. It's why a [lot of implementations](https://www.cyberciti.biz/faq/understanding-etcshadow-file/) store the salt next to the hash result.
C#6 was 5 years ago..
mine is visual studio related and not c# related....but i didn't know you could bookmark code. :(
Interesting. Never considered that. Our current project is a web application that uses EF, so we never show them records of an uncommitted nature. We normally have to use transactions (*Context.Database.StartTransaction()*) combined with save changes to associate records that are being updated simultaneously. If anything fails during that transaction, we don't commit anything, rolling back every single change that was proposed.
https://media.giphy.com/media/9372Cny90QI3iLDv2F/giphy.gif
In your csproj file
Ah yes. The most well documented project file.
I don't have the original code anymore, but here's an example &amp;#x200B; class Program { static void Main(string[] args) { //Create a list to hold all exceptions var errorList = new List&lt;Exception&gt;(); //Create 10 exceptions for (int i = 0; i &lt; 10; i++) { try { int.Parse("Text"); } catch (Exception ex) { //Add exception to list errorList.Add(ex); //Uncomment next line to break the loop when the first exception is thrown //break; } } //Display all exception in console (for a console program) foreach (Exception ex in errorList) { Console.WriteLine(ex.Message); } Console.ReadLine(); } } This saves the error(s) in a list that you can display to the user or save in a log file afterwards. You'd probably want to display something more simple to the user tho. Something like this MessageBox.Show($@"Import completed with {errorList.Count} error(s)"); at the end.
Thank you very much!
I do the same, Parallels running Windows and Visual Studio. One big advantage is not needing to shutdown and swap OS's but I do full stack stuff so I can build the Angular app on VS Code on the Mac while working on the backend inside the Windows VM. I haven't had any real issues with performance but I have a full spec 2018 MBP 13" so YMMV.
[It pretty much is](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2019)
Was just about to post this. I'm watching a presentation on YouTube about it as I type this, it looks very cool and seems to reduce a bunch of complexity.
MS docs consistently impress me. Thanks for the link
WCF seems like a good reason to stick to framework since there aren't any alternatives available on Core that even come close to the capabilities WCF provides.
Going open source and linking everything to GitHub has done wonders
I definitely agree
Do you can connect to say an SQL DB running inside Parallels from your Angular app (using Express?) on Mac??! That actually sounds ideal for me.
How are they needlessly complicated?
Not only Func&lt;&gt; types... Delegates can have no return value and take no parameters, like Action. Func and Action just allow you to create the function pointer on the fly without pre-declaring a full type (the delegate) to match the signature that you require.
I used this constantly
Looks like there's a bookmark extension for vs code!
I love using `:memory:`! All my unit test run on that.
In C and C++, passing a variable is pass by value by default. So if you have a struct that is large, it doesn't pass the structs reference but actually copies it to pass it. You get around this typically by passing the reference or pointer to it. Like so: "void doTheThing(MyMassiveStruct&amp; data)", alternatively the parameter is passed with a const keyword to make it read-only. So, on the C# side of things, I would guess the PInvoke library probably copies your parameters to the DLL unless you mark it as ref or out, in which case it becomes a reference or constant reference on the C side.
Don‚Äôt worry, I‚Äôm in the same boat. Head too small to grasp it.
Ctrl+A, Alt+E, V, T = Die, spaces, die! heheheh...
NamedPipeServerStream is fun.
Oh wow
There are a lot of those kinds of signatures, honestly it surprises me this hasn't become a proper meme in the same way factories are in java. When I first started out in C# the LINQ signatures just made my eyes gloss over and I seriously thought maybe I wasn't cut out for this programming stuff, I'll stick to my vba scripts.
This is the catch exception i'm getting &amp;#x200B; A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - The remote computer refused the network connection.)
Start using events. A lot. Just dive into it. Once you get the hang of events it will start to click.
I would generally agree. Using LINQ and lambdas is completely different than writing your own code that makes use of them. Requires you to bend your thinking about to abstract away some things properly.
They're the same operator. The operator itself is just `?` and it's binary: Test?.Props?["CLI"].Execute() ?? "Default";
The thing is, Nullable is a struct. If I write `public struct MyNullable&lt;T&gt; where T : struct { }` var.GetType() would return MyNullable.
It's called the conditional operator, not the ternary operator. But it's **ternary operator**, just often mislabeled because it's the only one (so far).
that you can throw from expression, like this: var firstName = name ?? throw new ArgumentException ();
I like that they made it behave as if valuetypes were just like another variable, but nullable. Having to access the .Value property all the time would just be annoying. You're not really supposed to consider that it is Nullable&lt;int&gt;, that's thinking too much about someone else's implementation and less about the problem in front of you.
Looks like I can try it out here https://github.com/dotnet/csharplang/wiki/Nullable-Reference-Types-Preview#frequently-asked-questions But doesn't seem to have a release date and I'm unsure if dotnet core 3 will support it as it doesn't seem to be in the release candidate.
That level of difference has nothing to do with exception handling.
The issue I've run into is trying to move an existing project over to EF, but keeping the old database design full of issues. This caused massive performance issues, and we ended up sticking with a custom written ORM that performed much better.
&gt; I like that they made it behave as if valuetypes were just like another variable, but nullable. Having to access the .Value property all the time would just be annoying. ... what are you talking about? You have to access the `.Value` property to get the actual (the non-nullable) value.
`in` is weird. At least `out` means the same as [OutAttribute] does on an interop parameter. But `in` doesn't mean the same as [InAttribute]. Though, to be fair, [OutAttribute] and [InAttribute] are more about whether the marshaller has to do extra work for that value or not.
They're just immutable arrays.
 You're not really supposed to consider that it is Nullable&lt;int&gt;, that's thinking too much about someone else's implementation and less about the problem in front of you. The problem they solved was making valuetype variables behave like reference type variables. Anyone could make a wrapper that forced you to access a property, that's not really something anyone wanted solved.
You want `System.Math.Pow`
what i would love would be if there was a simple hotkey (hell, bind it to pageup/pagedown) where it goes to the next function/property/codeblock etc. etc.
Exceptions are classes..
It's actually night and day for WPF - I thought the RichTextBox control was just horrible, but it turns out the debugger is causing the input delays.
Very true. Personally I wouldn't call this "smart" though.
Yes, Pro C# 7 is in this bundle and it's one of the highest rated beginner books out right now. It also comes the companion quick reference guide.
ARM processors can be big-endian. In fact, some of them can be *both*, and can switch endianness as needed.
It has to do with the fact that catching (not handling) an exception was part of my logic. My tipsy now and it's weekend but Monday I'll share to you the previous code and new code. It's just a matter of 3 lines of code
Would it be helpful to encrypt the file that stores the hashes, using a key from a different web server, that can only be accessed by the IP that the main server is on?
It is an excellent alternative to writing loops
This was more of a build thing, but being able to use assembly binding redirects to support multiple versions of a DLL was pretty neat and helped me avoid a bunch of extra work.
Ah, I was thinking like int? x = 5; int y = 5; bool b = x == 5; int? z = x + 2; Console.WriteLine(z);
Using WPF as a reporting engine. Honestly, so many of the reporting engines out there use complicated syntax and structures. Using straight WPF and converting it to an XPS or PDF is so much more familiar, simple, and powerful. Sure, you need to know C# to make a reporting template but try teaching a business type enough about databases and data binding to make their own templates in any reporting engine. It just doesn't happen very often and when it does, their ability to do anything complicated is extremely limited.
Maybe I'm under thinking. I just tried this now. I'm not sure why it's nullable in a class. public class Test { public int a=9; public int? b=7; public int? c=null; } var t = new Test(); foreach(var f in t.GetType().GetFields()) { Console.WriteLine(f.FieldType.Name); } Console.WriteLine(t.b.GetType().Name); I'm not sure why FieldType gives me nullable but b.GetType does not. But as long as classes/struct works it's not horribly broken. I just don't know why it doesn't always give me nullable instead of being weird like this.
How would you do that? Got a link where I can read?
Anything can be brute forced given enough time. The best defense from a brute force attack is a login limiter so you are locked out for a bit after a couple failed login attempts. &amp;#x200B; Encrypting passwords in the database is defense against a malicious user gaining access to you credentials data source. A hash is not an encryption. Salting a password hash is used to protect against a rainbow table attack. This is when a malicious user has a table of 'every' possible hash with a corresponding input that generates that hash. What happens is, the original user sets a password XXXX which is hashed to ZZZZ The attacker finds hash ZZZZ and tries to log in with password YYYY (Which is from the rainbow table). Both YYYY and XXXX evalutate to the same hash and the hacker gains entry. &amp;#x200B; Using salt it goes like this. Original user sets password XXX which is converted to Merge(XXXX,Salt) that ends up hashed to ZZZZ Now, the attacker tries to gain entry with password YYYY but hashing XXXX+Salt produces a different hash then YYYY+Salt so the password doesn't work. &amp;#x200B; Keep the salt value in protected memory.
Wow, that seems to exist https://marketplace.visualstudio.com/items?itemName=mishkinf.goto-next-previous-member
The lock keyword.
If I had to guess, probably to support pattern matching. if(obj is Person p) { // only reached if obj is of type Person and not null } if(x is int y) { // wouldn't be reached if int? returned Nullable&lt;int&gt; instead of int }
You could use [the in-memory provider for EF Core](https://docs.microsoft.com/en-us/ef/core/providers/in-memory/) to just initialize and start over for every test. You want your tests to be isolated and be able to run in parallel, and that's very hard to achieve when you actually go out-of-process to a real database.
You need to invoke the call to update the UI. This is because the UI runs on a different thread than your other processes and attempting to cross them directly is unsafe for a number of reasons. You can invoke the call like this: MethodInvoker mi = new MethodInvoker(() =&gt; LastAPIStatus.Text = "Last API Status : " ++_httpResponseMessage.StatusCode) if LastAPIStatus.InvokeRequired) { LastAPIStatus.Invoke(mi); } else { mi.Invoke(); }
Link to explanation? For dummies, please.
You get both PDF and EPUB versions. No DRM but they say they are watermarked to your account somehow. I have only found one android app that reads epub and respects CSS to get accurate formatting/layout. Image reading code that's not mono spaced or indented correctly... eww! I have no affiliation at all but recommend: [PocketBook reader](https://play.google.com/store/apps/details?id=com.obreey.reader)
So like, yesterday you mean.
And binary byte b = 0b_1000_0010;
`dd` means double digit day. Sounds like you want just `d` (`"M/d/YYYY hh:mm:ss"`)
You are specifying 2 digits for day. Change the format to "M/d/yyyy hh:mm:ss"
.NET Core 3 and C# 8.0 will be released together later this year (probably in q3 but q4 is not out of the question)
Maybe! int? a = null; if (a is int z) Console.WriteLine("Hit"); Console.WriteLine(a is int); return; Looks like you figured it out
that seems to have been the problem, thank you. got any clue as to why it flips the day and month tho?
I'm not sure what you mean by another layer. Aren't delegates just C#'s version of function pointers?
The delegate is in the Where signature as a parameter. By definition anything passed as an argument is used as a delegate by linq.
is there a format for when the string looks like this 3/3/2018? so it parses without adding the 0's?
I assume you're converting it back into a string somehow, so maybe the format used is different?
Yeah, it was actually a hash function (RIPEMD160) that I was trying. I did a ton of optimization (mostly learning) but it turned out to still be slow, then I realized I was using the debug dll instead of release. Changing that, made it run ridiculously faster :D
The [day format](https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings#ddSpecifier) you're using (`dd`) expects days to have a leading zero. Consider `ParseExact` to parse as input exactly what its format argument produces as output. For just the day part of just this problem, consider `d`. You should look over the custom format specifiers on that page ‚Äì as well as [the list of standard format specifiers](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings) ‚Äì to see what fits your requirements best.
[Turns out that third parameter that you pass `null` in actually has a purpose.](https://docs.microsoft.com/en-us/dotnet/api/system.datetime.parseexact?view=netframework-4.7.2#System_DateTime_ParseExact_System_String_System_String_System_IFormatProvider_)
I used the first part of this [answer](https://stackoverflow.com/a/42761107). I needed only a single codeBase node since I could not (and did not want to) move the original DLL. Note that the path in the href attribute needs to be the path from the web or app config to the target DLL.
Yes, in case of breach, but really not by much. The odds that someone 1) steals your hashes, 2) is willing to invest enough CPU power to crack them, 3) isn‚Äôt also willing to crack your other server to get the decryption key are kind of low.
i've added a [MessageBox.Show](https://MessageBox.Show)(dt) right after converting it, and it's flipped right after converting, no other conversion
https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings?view=netframework-4.7.2#notes
Hmm not really. Yes the delegate keyword is used to create delegates. But Func is a delegate made this way, you don't create aliases. Consider it a signature contract. Func is just a very generalized input/output delegate.
1. Don't use RandomString() to generate your salt. Use System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(). You're hashing byte arrays, not strings. Always remember that. You can convert back into a string later, but work with it as a byte array. 2. Make your salt a random length. `byte[] saltBytes = new byte[new Random().Next(32, 64)];` is a good way to handle that. Then pass `saltBytes` as the parameter of RNGCryptoServiceProvider.GetNonZeroBytes(). That method will fill the whole array. 3. Don't use MD5. It's old and tired and busted. There's a perfectly good SHA512CryptoServiceProvider (or HMACSHA512, if you want the concrete implementation behind the service provider) to give you better, stronger, non-MD5 hashes. 4. Concatenate your salt and your password *before* you hash. You want the hash of both of them together, not the hash of the password and the hash of the salt concatenated after-the-fact. 5. Don't roll your own crypto. Use one of the "easy" crypto systems. Others replying have named more than you ever would care to know or use. Bcrypt is sorta the classic. 6. Don't even roll your own auth system. Use ASP.Net Identity (or even old-school ASP.Net Membership) or AD integration or OAuth or some other federated/standardized system, but don't do this yourself. That way, vulnerabilities get noticed and patched, and patches get deployed, and you don't have to do it yourself. I've been where you are, and I've done this. And in my case, a federated/standardized system wasn't a viable option (don't ask... clients can be dumb sometimes). So after a *lot* of research, I came up with this: internal static void EnsureLastSalt(UserLoginModel u, bool regen) { if(string.IsNullOrEmpty(u.LastSalt) || regen) { byte[] saltBytes = new byte[new Random().Next(32, 64)]; RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider(); rng.GetNonZeroBytes(saltBytes); u.LastSalt = BitConverter.ToString(saltBytes).Replace("-", string.Empty); } } private static string CreateSaltedPasswordHash(string lastSalt, string password) { byte[] saltBytes = Encoding.ASCII.GetBytes(lastSalt); byte[] passBytes = Encoding.ASCII.GetBytes(password); byte[] saltedPassBytes = new byte[passBytes.Length + saltBytes.Length]; Array.Copy(passBytes, 0, saltedPassBytes, 0, passBytes.Length); Array.Copy(saltBytes, 0, saltedPassBytes, passBytes.Length, saltBytes.Length); SHA512CryptoServiceProvider sha = new SHA512CryptoServiceProvider(); byte[] hashBytes = sha.ComputeHash(saltedPassBytes); return BitConverter.ToString(hashBytes).Replace("-", string.Empty); } public static bool ValidateUserCredentials(UserLoginModel u, string suppliedPassword) { u.EnsureLastSalt(false); string suppliedPassHash = UserLoginController.CreateSaltedPasswordHash(u.LastSalt, suppliedPassword); return (suppliedPassHash == u.PassHash); } No, it's not perfect. But it's been secure "enough" for several years now. If you *absolutely must* "roll your own", this will get you by. But I wholeheartedly recommend *not doing that*.
Then it's using the default ToString method: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tostring?view=netframework-4.7.2#System_DateTime_ToString The documentation says it uses the rules of the current culture, so that's probably why. Use ToString(string) or another equivalent method to return a date with the expected format: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tostring?view=netframework-4.7.2#System_DateTime_ToString_System_String_
Tuples! It feels like python :)
How is this comparable? `Nullable&lt;int&gt;` is a generic struct, a similar example would be to make Animal generic: Animal&lt;Human&gt; a = new Animal&lt;Human&gt;(); And I would expect `a.GetType()` to return `Animal` or `Animal&lt;Human&gt;`
You can use the format I provided, that will handle both 03, 3 and 30 Notice how month is formatted as "M" and still accepts 3 and 12 =)
You're not really meant to make instances of Func. It's a parameter type, allowing you to write n =&gt; n*2 syntax as a direct argument.
Every now and then I have to hop into XCode and I'm like "Ugh... why can't this be ANYTHING close to Visual Studio?" From where I stand -- Visual Studio is *the* best IDE out there. Removing language -- I mean IDE. It's just *amazing* and very polished.
Alt+Shift+up/down arrows changed my life (I'm probably the last person to learn this). Lets you insert the same text vertically on all lines (or delete).
`.GetType()` is always about what is **behind** the "variable name", what it is pointing **to**. It works on the instance that is pointed by the name, but it doesn't know what type you have declared the name to be.
Large data structures are better to pass by ref. It's a single address instead of copying the entire object. Especially when you're going to be looping over a lot of large data objects.
I leaned that you can make a method [take the name of the member that's calling it as a parameter](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/caller-information), as well as information about the source file (!!) where that method is defined.
Maybe dynamic objects would be good option? &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/api/system.dynamic.expandoobject?redirectedfrom=MSDN&amp;view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.dynamic.expandoobject?redirectedfrom=MSDN&amp;view=netframework-4.7.2)
The only thing I disliked about the product was a bug for a while where it wouldn't use non-system-default fonts.
embed is an object of a class with those methods
Check out the source code On json2csharp.com in the upper right: "with thanks to the JSON C# Class Generator project" -- click that link, then "Download Archive"
The adjust namespace quick fix is nice, but there doesn't seem to be a way to do it project-wide. That would be nice to have.
Yeah I've come across this, wasn't too sure about its application. I'll look further into that one maybe I can come up with some converter / generator class. Really hoped for a simpler solution.
They're extension methods which take the "embed" as the first parameter. Each method, here, .WithAuthor and .WithTitle as examples return the same, original "embed" object, so the chain of extension methods works :)
This is awesome. Could I "subscribe" to any form of notification to find out when you opensource it?
What‚Äôs the point of making it into a class; if you can‚Äôt utilise static type checking. Dynamically making classes at runtime; would mean you‚Äôd need to use reflection to access the data. Sounds more faff than just having a structure to iterate through.
It‚Äôs an ASP.NET Core API with Entity Framework. There‚Äôs a couple settings you have to do to allow ‚Äúexternal‚Äù connections but yes it works fine. The Angular app talks fine to the API. 2018 touchbar MBP 13‚Äù 2.7ghz i7 quad core intel iris plus 655 16gb 2133mhz ddr3 memory 1tb ssd
This is a pattern I've generally seen referred to as a Fluent API. `embed` will have all of those methods and each method will return a new instance of the object with the previous state plus the new state.
This would allow you to do something like this: // my dataset List&lt;string&gt; dataSet = new List&lt;string&gt;(); dataSet.Add("this_thing"); dataSet.Add("that_thing"); dataSet.Add("the_other"); dynamic exo = new System.Dynamic.ExpandoObject(); foreach (string field in dataSet) { // field + "_data" would be what ever data you want to store in your field ((IDictionary&lt;String, Object&gt;)exo).Add(field, field + "_data"); }
Yes, and? Copy this code into a new class: https://referencesource.microsoft.com/#mscorlib/system/nullable.cs,ffebe438fd9cbf0e https://dotnetfiddle.net/HDMcev A copy of the Nullable code gives `Nullable'1[System.Int32]` while the built-in Nullable gives `System.Int32`. It's special-cased in the runtime and unexpected. We already have the `Nullable.GetUnderlyingType()` method if we needed it, we don't need `GetType()` to do it for us.
&gt; It can really be whatever (class/interface). can't inherit an interface from a class, of course.
So there's steps. Check if SQL Server Browser service in services.msc is enabled. While checking that on the db machine, make sure 'SQLAgent$NameOfYourSQLNamedInstance ' is enabled, and running, too. https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/troubleshoot-connecting-to-the-sql-server-database-engine?view=sql-server-2017
This is the builder pattern. Each method returns a this variable.
Yes, that is completely sensible. There's just no way to keep this to interfaces and "just make it so". In any case I just `FakeItEasy` the interface implementations (there is never an actual specific class implementation on those interfaces). Interface is used to strongly type message semantic meaning and parameters when used (can be validated with unit test against message resource; but that's not implemented).
Awesome thanks a lot, I think i got a minor idea now :D
I wish I could explain it. It's actually simple, but writing out a reddit comment just made the situation worse. Just... don't overthink it. You don't stop and think "How do I use System.IO.File.ReadAllText?" you just use it to get the text in a file. Similarly you shouldn't stop to think "How do I use System.IO.File.ReadAllTextAsync?" you just use it to get the text in a file. &amp;#x200B; The difference comes, not necessarily from performance if the file is small, but when the file is large then your program doesn't stop and wait until it is read. The CPU can do other things while that is happening.
Apart from any other issues that have already been mentioned: **never. use. MD5.** It was obsolete a decade ago.
Thank you all for your input. I figured it out this morning. I had to enable TCP/IP in SQL Server configuration Manager then Enable the IP address in the IP ADDRESSES Tab and also specifically tell the port to listen on 1433 towards the bottom in the same tab. I restarted the service and was able to make successful connections after that :)
This is something I'm likely to use. Thanks!
It's true that it's specific/true name is conditional operator but it is the only ternary operator so \_the\_ ternary operator. Neither will we get more ternary operators (as long as we work with perfect bools at least) because the conditional operator is a unique case where two states lead to two states. Other cases are either simple enough to use other operators or too complex to write as one operator (just look at chaining ternary/conditional operators). It is important to note that it's about operators and not expressions, as the lambda symbol is not an operator; it's a symbol that explains the context just as curly brackets do. So it is as correct to say ternary as it is to say conditional. Sorry for the half-wall of text, didn't mean for it to turn that long
It simply just a shortcut. The compiler actually creates a field for you. You can even use that field if you want. It is just the property name with an underscore in front of it.
Depends what you what problem you want to solve: Here are some simple ideas: foreach (var d in data) { Console.WriteLine(d.Key + " - "+ d.Value);} var dataAsDictionary = data.ToDictionary(d =&gt; d); ... or JObject data = JObject.Parse(jsonString); Console.WriteLine(data["Lastname"]); Is the goal to have something like this? Console.WriteLine(expectedObj.Lastname);
Waiting for the WiX toolset to release their VS2019 extension, then I can update ^_^
Could you give me an example from the top of your head? I'm sure this will come up for me
A simple field is just a publicly exposed variable - the equivalent of the class with its fly down. It has no control over who or what changes it. Properties provide a layer of abstraction between the actual field and the consumers. It gives the class control over how the backing field is read or set. There are also implications for inheritance and reflection - fields and propeties are treated quite different here. Auto-generated properties are just a quick shorthand to setting up formal properties that don't have custom get/set logic.
1. Many libraries are designed to only work with properties, not fields. So things won't work as expected. 2. You may later decide to change the property from auto-implemented to manually implemented. That would be a breaking change in C#. 3. When using a mutable struct, a property will always return a copy. (This may or may not be what you want.)
A shortcut for what? What do I gain from the compiler creating a backing field? Will I, as a developer ever notice a difference between public string foo; and public string foo { get; set; } ?
This, plus this answer on StackOverflow may be helpful: https://stackoverflow.com/a/1180870
I also would like to know this.
No worries, I hope it worked out. Visual Studio has a LOT of stuff in it, so accidentally closing a window can be hard to recover from. :P
Any nice tutorial you came across or just read up on the MS docs?
Second is unreasonable. The type of Nullable&lt;T&gt; is Nullable&lt;T&gt;, not T. If I want the type of the value it's already part of Nullable's type info. The third is just stupid. The reason it actually happens is because Nullable is one of those fake types, and can be on the stack.
Yeah the goal is exactly to have it like this: Console.WriteLine(expectedObj.Lastname);
Why?
In the simplest use cases? Nothing really, other than following general design guidelines. However, as grauenwolf pointed out, some libraries are made to only work with properties. For example, the Default Model Binder in [Asp.Net](https://Asp.Net) will not bind to fields. You'll be able to use them in your views, but the Model Binder won't map any of it back to the fields. I also believe [JSON.Net](https://JSON.Net) only does properies, so fields wouldn't get serialized. There are other reason, as several others have pointed out, but those are the two common places where you need to use a property over a field.
Their early preview extension worked for me ( [http://wixtoolset.org/releases/](http://wixtoolset.org/releases/) ): [https://github.com/wixtoolset/VisualStudioExtension/releases/download/v0.9.28.58839/Votive2019.vsix](https://github.com/wixtoolset/VisualStudioExtension/releases/download/v0.9.28.58839/Votive2019.vsix)
Flurl looks nice, but having to constantly read `await "https://api.com"` would make me nauseous.
Removed: Rule 4. Check out /r/learnprogramming's FAQ: https://www.reddit.com/r/learnprogramming/wiki/faq
The question is, does it have to be a new instance or like /u/PolyGlotCoder mentioned is it the current one? But yeah an object of the type which implements for example "WithAuthor" is returned, be it as a new instance or the one you applied the method to.
I dig the clipboard ring and the more accessible stashing. One annoyance though: It seems to force me to stash if I have pending changes in a file and there are incoming changes in a pull or stash apply. Previously in 2017, it would apply the new changes where possible and only say there were conflicts if the same exact lines differed.
I guess they are but you have to declare a new one with the function signature instead of just using the already existing function signature itself. To help with the unnecessary complication built-in types for functions exist (Func&lt;&gt;).
The builder pattern is used on a mutable type to produce a mutable/immutable object at the end. You could I guess use it to copy and extend either by decoration so forth in which you‚Äôd create a new object. Depending on the use case either way could be used.
That looks like it! thanks
&gt;went from 1min30s to 10 seconds to generate my file lol holy shit
But if you are creating generic types anyways, why cling to the whole delegate thing and not just make a function be the matching Func&lt;&gt; type? I guess you lose the ability to name them,which makes maintenance a little easier because Func&lt;string, Class, string, int, boolean&gt; for example is quite a mouthful as a type.
That looks like it! thanks
Usually if I have to deal with arbitrary data I just use a DataTable.
Why make me declare them using an extra keyword but also add Func&lt;&gt; and Action&lt;&gt; generic types? Why not have a function be of matching Func&lt;&gt; type in the first place?
\&gt; A simple field is just a publicly exposed variable - the equivalent of the class with its fly down. It has no control over who or what changes it. Just as true for auto-generated properties though.
No, the compiler creates a backing field for you.
I just think making an extra keyword for delegate is complicated compared to just making functions be a specific type (like the already existing Func&lt;&gt; types) But I think there is a good reason for this I'm just not seeing it. For now delegate seems to make an alias to an already existing Func&lt;&gt; to me.
There's already support for GTK https://github.com/gtksharp/gtksharp
You mean ... dynamic expectedObj = (ExpandoObject) dataAsDictionary ; Console.WriteLine(expectedObj.Lastname); &amp;#x200B; Frankly, this is will most likely cause problems on runtime... (See comment of /u/PolyGlotCoder)
Properties became a need from the days when people continually used methods to provide or set data, to control how these things happened. Exposing fields might be fine, but changing it later would be a breaking change for any code using those fields. &amp;#x200B; What if you *don't* want Foo to return whatever text someone set. Maybe you don't want it to be able to be set to null. &amp;#x200B; If you now make it a property, that's a breaking change for any code using the Foo field. If it was a property from the start, you could completely change how the "get" fetches the string. It could call a method that makes a webrequest and return text from a website - code using the Foo property would not have to recompile.
So basically we're discussing alternative design :) How would you declare the different types for the different functions? You realize Func&lt;&gt; types are declared in the BCL with the delegate keyword right?
The "return" keyword causes a method to return a variable to the place that it was called so you've got that right. What you need to do is store the returned variable somewhere s that you can use it further along in your code. Like this: int poweredUpNumber = PowerUp(ref powerLevel); Just like you did in the first line of code in your application. If you don't save it anywhere it just disappears into the aether. You can also use the initial variable that you created to save it like this: powerLevel = PowerUp(ref powerLevel); Hope this helps.
By having each method the object (or any object really) you can then keep chaining method calls like that. This is probably one of my favourite patterns, if just because it's quite satisfying.
I found a nice small example of a server/client, like 4 lines for each. Probably at home, I can't find the link in my history here.
Because that is the method that is being replaced when you use $"".
You can use delegate { return true}
The fun begins when you want to start making both required and optional parameters, and even forced order. You can do this straightforwardly with multiple classes which represent which stage you are at, or you can even keep returning this but make interfaces that your object implements that restrict the callable methods.
&gt; I believe you can cast function pointers and turn them into some different function and even call this new function signature without runtime error You *can* but it's undefined behavior (in the C standard) so you really shouldn't except you know the function calling intricacies of your platform and even then you most probably still should not. &gt; In addition when you put an instance method into a delegate the delegate holds the this pointer. How do function pointers handle this case? There is no implicit this in C thus they don't. But it's good to know that delegates preserve the this pointer of classes they belong to. I guess you can't have that with the Func&lt;&gt; types.
Why not make the Where signature expect plain Func&lt;&gt; and get rid of delegate?
&gt; So basically we're discussing alternative design :) I guess so, yes. I just want to understand why the C# developers did it this way so I can make an educated decision on e.g. when to use my own delegate and when to use Func&lt;&gt; (and Action&lt;&gt;) &gt; How would you declare the different types for the different functions? Just like the Func type does it, with generics. Every function could implicitly be of a matching Func&lt;&gt; type. I guess Func&lt;&gt; is a delegate because the delegate principle was there first? I don't really know why it needs an extra keyword just to hold a function. Why aren't functions handled just like other data types? Only to differentiate function from data?
Func is a delegate, it's already as plain as it can be.
Well, if I understand you correctly, you are wondering why have the `delegate` keyword *and* the generic Func&lt;&gt; and Action&lt;&gt;? For one, `delegate` has been around since .NET 1.1, so it pre-dates the generic equivalents. The .NET framework standard for event handlers, for example, is to define delegates, I assume for readability and also because that's just how they have been from the beginning.
uff you guys are correct :facepalm:
It feels buggy to me, maybe there's something wrong with my environment but when using this refactor in a razor pages project, if you change the namespace of the model in the .cs file, instead of updating it on the page, the page's model declaration just turns to a large blank space, it's weird.
Sure! But they need not run in core. Web technologies are, strangely enough, a better and better fit for that
"Doesn't have the ability to" and "chooses not to" are different. One example where that thinking breaks down is inheritance. A base class may expose a virtual auto-generated property, but an inheriting class may override that and replace it with a value generated by logic. That wouldn't be possible with just an exposed field.
The only people that hate on VisualStudio are people that haven't spent enough time with it (and other IDEs) to realize just how awesome it is.
I came across it in Azure Functions, where attributes can be used to specify triggers and input/output bindings, which the Azure Functions framework/runtime wires up for you. E.g., the example below ([from here](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-return-value)) is triggered by an item being added to an Azure Queue called inputqueue, and the attribute on the return value specifies an Azure Blob storage output binding, so whatever the function returns should end up being written to blob storage -- specifically to the container output-container, with a blob name extracted from a property of the input object from the queue. [FunctionName("QueueTrigger")] [return: Blob("output-container/{id}")] public static string Run([QueueTrigger("inputqueue")]WorkItem input, ILogger log) { string json = string.Format("{{ \"id\": \"{0}\" }}", input.Id); log.LogInformation($"C# script processed queue message. Item={json}"); return json; }
As someone that manages/code-reviews a couple juniors, the Code Cleanup part seems promising. I spend way too much time making silly formatting changes. And Git Stash. Finally.
Also, if you want to avoid blocking the current thread while the UI updates, you can do ``` if (LastAPIStatus.InvokeRequired) { await Task.Factory.FromAsync(LastAPIStatus.BeginInvoke(mi), LastAPIStatus.EndInvoke); } else { mi.Invoke(); } ```
The Idea i was going for is that you 1. Don't know what the metadata will be on run-time 2. Generate a model / object based on the provided metadata 3. Model that gets generated is consumed in higher layers to generate a view using reflection which based on available properties combines elements of Views to essentially generate and editing field for the given metadata file which user can then edit.
Note, thanks a lot for the help tho.
In addition to the other points, the auto-property syntax allows you to control access to the accessors individually. I do the following a lot: ``` public string PropertyName {get; private set;} ```
This should be the top answer, as ‚ÄúExtension Method‚Äù is the way to implement it and no of the other comments are mentioning this
Can you provide example? You should always know what to you need before querying.
&gt; how is it better than just having a simple field? Access control and encapsulation are the primary benefits. Interfaces may also contain properties (which autoproperties may implement), and must not contain fields.
Hello world :D. Just started learning c# to learn .net core
Eh, maybe. I certainly have complaints about it and I use it every day. I wouldn't say I hate it though.
Confluence isnt safe. If you are gonna store things for your company, use something like keepass or something. What we do is have our secrets (seen as ********) in our deployment pipeline and they get inserted into the web config or appsettings.json
Maybe it's the name Func name that is confusing you? It has nothing to do with this. Let's create our own filter method, doing the same thing as Where: public static class Extension { public delegate TResult Banana&lt;T, TResult&gt;(T item); public static IEnumerable&lt;T&gt; Filter&lt;T&gt;(this IEnumerable&lt;T&gt; items, Banana&lt;T, bool&gt; fruit) { foreach(var item in items) { if (fruit(item)) yield return item; } } } You can call this filter method exactly as you would Where: var nums = new[] { 1, 2, 3, 4, 23, 3, 4, 56, 7, 34, 4 }; var even = nums.Filter(n =&gt; n % 2 == 0); foreach(var item in even) Console.WriteLine(item); At no point do I explicitly create an instance of the Banana delegate, but one is being created and passed as an argument so that the Filter method can use it. The results are the exact same as Where and Func. The name "Banana" is inconsequential.
If you do a code review shouldn't you push back on them to make the required fixes so they learn the habit?
multi line string like this: string str = @"SELECT * FROM BLAH WHERE BLAH = BLAH OR SOMETHING IN ( 1 ,2 ,3 ,4 )";
I get it. But what your doing is really loading configuration into an abstract tree that describes the file. Going into a class - then using reflection is needlessly complex for the requirement. If your doing it for personal edification then go for it.
https://blog.paranoidcoding.com/2019/04/08/string-vs-String-is-not-about-style.html
https://blog.paranoidcoding.com/2019/04/08/string-vs-String-is-not-about-style.html
I'll be honest it's a little bit of both? And I highly doubt if i ever had a deadline I'd go for something as complex as this but here I've time so I decided to take it to also learn.
Interfaces can also implement properties but not fields.
Mostly, it's better if there's a chance you might need to attach some behavior or some access control *later*. Switching to a property is a breaking change. Properties cannot be passed as `ref` parameters. Even invoking their getters and setters is different although the C# syntax is identical. The change will break any compiled binaries that consume your object though. As one final point, this probably doesn't apply in your case, but properties can satisfy interface members, but fields cannot.
Gotcha; have a look as System.Reflection.Emit which apparently will allow you to emit classes at runtime.
For any entry level dev role, SOFT SKILLS are far more important to hiring managers. Does the hiring manager like you? Do the team members like you? Are you enthusiastic about coding or the company?
That's dope
Will do thanks a lot!
&gt; I just want to understand why the C# developers did it this way so I can make an educated decision on e.g. when to use my own delegate and when to use Func&lt;&gt; (and Action&lt;&gt;) Func and Action exists precisely so that you don't have to create lot of custom delegates. You can just use these generic ones as your parameter types. Custom delegates are more appropriate when making events, so that you make intent and functionality clear simply by reading the delegate name.
I also use this a lot. Very helpful.
Date subtract takes a timespan or date time. I typically use ‚Äòdate.AddDays(-((int)date.DayOfWeek);‚Äô for it. No need to get int bitwise ops
That's an oldie! $"My {value}" and $@"My ""{value}""" are especially useful!
I'm not.
You are correct, otherwise you are a babysitter instead of a mentor.
Just... consider using DataSet, DataTables and DataRelation
&gt;Maybe it's the name Func name that is confusing you? It has nothing to do with this. Yes, looks like it. &gt;The results are the exact same as Where and Func. The name "Banana" is inconsequential. So a delegate just says: I need a function with this signature, here named Banana, but all functions with a matching signature are valid Banana type functions? So to use a delegate with this definition I don't need to know about Banana but can supply a function matching the signature laid out by Banana?
I see, I didn't think about functions represented as objects. Thanks for helping me!
Exactly. You got it now.
In an ideal world, yes. However, in the real world, there are deadlines, and it's faster for me to fix things instead of sending it back. I know it's not the right way, but such is life.
I would go so far as to say public fields shouldn't be a thing. Fields are implementation details of how your class stores its data, and shouldn't be exposed outside the class (much less outside the assembly). Public _properties_, OTOH, are fine because you can always change your setter or getter later on without breaking compatibility (unless you also change access levels).
As far as IDEs go, I agree it is the best that I have ever used. However, I wouldn't take it over my other extensively configured text editors if I had a choice. It's a dream for debugging, intellisense, etc., but I actually cannot stand the text editing in VS. Yes, I have various little plugins and all, but it's not even close to me.
Just so you know, this is what I had the most difficulties. And every time I thought I understood it the epiphany deflated the next day and I couldn't explain the concept to myself.
There's no upgrade involved to use later features..
I wouldn't expect a null exception error, as \`a.HasValue\` would return false rather than throw an exception.
Of they are never doing it, they never learn it, and your time is wasted every single time. In the real world is investment in time also a thing...
Object types pass the memory address by default. `ref` allows you to new up the object inside the method scope and have it persist outside, so it points to an entirely new memory address.
I know this is late, but by the way, the ToStrings() in your example are completely redundant. You can put any type of object into the {}, and ToString() gets called automatically on it. Really helps with general readability to omit the ToString and just do {baseAddress} and {extensionRoute}
Well, even though I realise that some technologies will eventually die because of the upgrades and devs wanting to move over my two cents is this: As a dev that had to take over about 30, useless, webforms projects and try to add new tech into old (and let's be honest) shit, I have lost way too much sleep and productive hours to integrate new structure and actual architecture into old projects. So i like the idea of a constant shift into the newer techs where old techs are deprecated completely, forcing these small companies that use bad convention, architecture, and finally tech, to get with times... That being said? Still a whole lot to happen in c# 8 knowledge base and looking forward to my fellow geeks experimenting and coming up with new ways to make the universe a more advanced place
I literally just learned you can use the \`using System.Windows.Forms\` statement in a console application. Probably some very beginner stuff but absolutely blew my ever-living mind. Programming is some cool stuff
Sounds like hella fun ;P like carnival in the head :)
You can even omit the setter to disallow assigning to the property outside the constructor. Technically you can omit the getter as well, but I don't know of any instance where that would be useful.
oh man I need that. coming from java IDE's that all have that feature I am super annoyed by having 2 separate hot keys (chords even worse) to turn on and off comments
if an exception is thrown and not handled in the task your application will crash. also depending on your use case you may get into a situation where the background task never resumes after its first await (if you're blocking on the sync context thread). tread lightly with this stuff and read up on configureawait on ContinuationOptions. Or give yourself a helper method "RunTaskIgnoreExceptions" like static async void Helper(Func&lt;Task&gt; f) { try { await f(); catch (Exception e) { // handle or at least log } } the "real" way to do this is to have a background service that you post this work to. then your caller can move on and the background service will deal with the work. but that does require more machinery.
I often tell people, you can say whatever you want about Microsoft, but they knew exactly where their bread was buttered. They have always taken care of developers.
\&gt; convert foreach-loops to Linq queries &amp;#x200B; Keep in mind that if you have a for loop, or a foreach loop that is working, converting it to a linq query will make it slower and make it allocate.
I'm a little confused. Is this Ctrl-KE...different from the current ctrl-KD?
His point is that you're not seeing objects passed by reference, you are seeing object references passed by value.
I hate this. Code's ctrl+D is way better (add next instance of selection to selection), and I use it non stop. Switching between them can be very confusing lol.
And [Qt/QML](https://github.com/qmlnet/qmlnet).
Don't forget Ctrl-RM...for refactoring code into a new method.
I wonder if you can use this with linq. I try the following every time I forget it's not possible. // error: no out var in expressions selection .Where( value =&gt; int.TryParse(value, out var ohno) ) .ToList(); Edit.. I give up on formatting
I've been using successive versions of C# since the beta days...and I know barely 50% of what's in this thread. Keep 'em coming :)
I'm using Rider, and honestly finding it way better than Visual Studio.
Might also be worth noting that while C# has the same syntax for properties and fields, other languages might have different syntax and reflection treats them different so it an still be a breaking change to switch from one to the other.
how would that look in code ?
&gt; If you now make it a property, that's a breaking change for any code using the Foo field. Not suggesting people go around making public fields by default, but as far as breaking changes go, switching usage of a field to usage of a property is about as easy at it gets to change. Breaking in the binary api sense, breaking in that you'll need to recompile clients referencing the changed assemblies - like changing a function parameter from `int` to `short`, but that's about it.
By any chance, are you working in ASP.NET Core 2? If so, I'd be interested in knowing how you set up your permissions stuff.
One good reason is many libraries are written for .net framework that aren't yet, and may never be, ported over to core. Many companies use these sorts of things to save time, so doing the port themselves would not be seen as time saving.
What is `SnapshotSpan` used for?
If you manage to find the link, I'm sure there are several of us who would be interested in reading it.
I didn't even read the whole question but one cool trick is 1) copy the json 2) edit and paste special 3) Jin as csharp
Every VS release we get some pieces of established resharper features built in. What do you think, time to say goodbye to R#?
It was time to say goodbye to R# as soon as VS added "go to implementation."
I use that all the time, but didn't know the shortcut. I'll be using that in just a few minutes! Thanks!
u/TriptychButWith8Bits is right, the real way is through extension methods. Other comments should be downvoted...
Working on a React project with Prettier set up, text editing in VS feels like a step back - I can write poorly-formatted code, hit save, and magically it handles the indentation for me. No style wars. In VS, I have to take the time to pretty things up, which irks me because _I shouldn't have to_. It's cool that VS honors `.editorconfig` files; how about `.prettierrc` too?
Interestingly enough, fluent pattern and builder pattern are not the same thing.
Yeah. I suppose i should have said Method chaining; which is used in many patterns. So many design patterns I haven‚Äôt memorised them.
I would probably pay *more* money for R#. But im still using VS2017, havent tried 2019 yet.
Is it still all XML?
It is. It's pretty easy to get started with.
Still needs more additions but it even looks like the the R# team is putting more of a focus on Rider. R# hasn't had an update since like Q3 last year
I'd say so yeah. KD is purely formatting (think spacing). KE can apply code analysis auto-fixes (think unused name-spaces, enforcing curly braces on single line statements, adding readonly/private to props, renaming variables to follow code conventions)
Looked daunting when I looked at it 8 years ago. Was hoping there would at least be a UI to generate all the XML for me
You really don't need one, there's very few parts to it. I found these two samples especially useful though: https://helgeklein.com/blog/2014/09/real-world-example-wix-msi-application-installer/ https://www.codeproject.com/Tips/105638/A-quick-introduction-Create-an-MSI-installer-with I may yet do a video tutorial on this at some point though because the documentation is a bit haphazard.
What is discard I don‚Äôt get it
(Not op) last time I checked Wix I couldn't use wildcards for files, which seemed really exhausting when I have a lot of assets. I then went with Squirrel
Delegates are the type for storing functions as data in C#. Func types are declared as delegate. Maybe it would be possible for the C# compiler to auto declare Funcs as needed but this is not the case (the declared Funcs are up to 7 parameters or something...). The delegate is more complex than function pointer as it holds a reference to the object to which the function belongs, it supports capturing a variable in a closure (which is done via an object i.e. the this pointer) and they are nominally typed meaning that their name matters. The latter is arguably unneeded and the former can probably be put in an advanced form of function pointers but these would not be the simple function pointers from C.
It doesn't but there's ways around this. You can for example write a batch/ps script that generates a fragment file to automate it. There's also tools like [Paraffin](https://github.com/Wintellect/Paraffin) which can achieve the same thing.
Haha yeah... but this is Reddit, you clearly know what I‚Äôm saying, as does he.
Personally I just make sure each test creates its own unique entities. Simple and fast.
Pretty much any query with a join is an example of logic pushed into the database. For example "get the last 10 posts the user has bookmarked" or "get the last 10 posts from any group where the user is a member"
Does intellicode need internet connection or can it analyse my solution without needing to send stuff to Microsoft?
While I don't do a lot of WinForms programming, I think this is the easiest answer. Event handlers can be async, and this is one of the very few cases where it's correct to use an async void method rather than async Task. ConfigureAwait(false) discards the synchronization context, which is a fancy way of saying the rest of your method's code is not guaranteed to run on the same thread as the part before the await. By marking your method async, and by calling MethodAsync directly rather than wrapping it in a task, and by removing ConfigureAwait(false), you'll avoid blocking the UI thread while at the same time guaranteeing that the continuation after the async portion runs on the UI thread.
It definitely feels a lot faster in all areas
It is stunning how many people don't understand this and are simply cargo culting as demonstrated in the comments under this post. Properties are a contract. While syntactically they look the same as fields when compiled they are different from fields. This means that if you change a field to a property you will break your binary contract. Notice that you will not break the source code since the way to call a property and field is the same (unlike methods for example). To demonstrate this you can compile a type with a field in an assembly (dll) and reference it from another assembly (exe). Then you can compile a new assembly with the type and try to simply drop the dll in the folder. If you changed field to property the program would not run, if you use a property you can switch the implementation for example you can change an auto property to a full implementation with validation and your updated program will run without recompiling the client assembly (the exe). So this is why we write auto properties in advance because we are able to change auto properties to full properties without breaking client assemblies. Think of it like writing get/set methods that simply access a field instead of directly accessing the field. You do it because if you want to switch to get/set methods later you would have to change all the code that accesses the field because of the different syntax. Properties are like this but not on syntax level and on assembly level. Other comments point out that they are classified differently when using reflection and this is used in operations like databinding and serialization. While this is true it is a result rather than reason for properties to exist. The databinding and serialization code could have easily be written to handle fields instead of properties it just happens that properties are a useful convention.
"Setting up" SSMS is literally following a wizard installer. There isn't much to it. SSMS is just an IDE for interacting with an MS SQL server. I am guessing your question is more about how to setup a SQL server? If it really is about SSMS, there are lots of tutorials out there for different aspects, but you could [start here](https://docs.microsoft.com/en-us/sql/ssms/tutorials/tutorial-sql-server-management-studio?view=sql-server-2017).
When I talk about logic I think more of switch case expressions in SQL. Ive seen a lot of them in legacy systems and my take is that SQL was easier for people 20 years ago than say C++.
Thank you very much. My butt is being handed to me with trying to integrate SQL with WPF
Okay, so just to clarify, SSMS will have nothing to do with WPF integration. SSMS is literally just an IDE for interacting with a SQL server instance. It sounds more like you need tutorials on WPF/SQL (MS SQL Server) integration. Maybe [try this](https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/walkthrough-display-data-from-a-sql-server-database-in-a-datagrid-control).
Thank you again, this looks exactly what I need
When I‚Äôm using rider I find that I miss codelens and codemaps so much
what's different?
It's so awesome, it doesn't even run on my OS (Yes, there are C# devs who use Linux as a daily driver :P). Last time I used it on Windows it was pretty poor without Resharper too.
Well I will have to see an example to judge if logic belongs in the database. As I see it logic belongs in the database if that logic would require pulling additional data on the client. I sometimes pull the data if it is small amount and can be cached on the client anyway just so I get to write my logic in C# rather than SQL but in principle I don't believe that the database should be dumb. There are people who would argue with quite reasonable arguments that business logic does belong in the database to begin with. Just google "business logic in database stored procedures" and you will find multiple articles with good arguments for doing this. I do not agree with them completely but agree enough to not shy from pushing logic near the data when need be.
I use Linux to work on .NET Core so hopefully I can answer with my anecdotal answers... My summary of the word vomit below is that using Linux as a primary .NET Core dev platform is pretty solid as long as you accept the limitations of the platform and have good tooling. I used to make do with VSCode but once I bought Rider I never looked back, I've even become one of the heathens that likes it more than VS. &gt;Will I find high quality libraries for any type of task that do not depend on internal Windows APIs? Unless the library is designed to do something related to Windows APIs, then no I wouldn't worry about it. Anecdotal, but I've been using Core since before 1.0 and I've only hit that problem once or twice. One important thing to know is that sometimes a library dips into parts of .NET that aren't by default in a non-Windows environment, but a quick add of `Microsoft.Windows.Compatibility`from Nuget solves that problem. &gt; I cannot determine whether a given package depends on .NET Framework and thus Windows only or if it would work with .NET Core. Yeah, the website sucks. Since you're on Linux I HIGHLY suggest you use Rider. The Nuget package manager will tell you what the framework dependencies are. &gt; Have you run into issues during .NET development when you realized that the library you need is Windows only and has no alternative? Personally, no. But I'm just one dude. There's a big push in the community to make packages work on Core so most of the popular ones that aren't Windows-specific have been migrated. &gt; Cross-platform GUI Yeah that's not a fun space right now. GTK# works, if you can deal with GTK. Avalonia is an interesting project that's taking off, definitely worth checking out, but it's still not production-ready.
Just download SQL Express
Any reason is outweighted by ease of debugging, testing and tooling. I will change my mind when databases will move with the times. I see no reason, for example, why we cant write stored procedures in C# other than databases are just ancient designs and companies making them have no foresight and drive forward, they just want to still appease that 50 year old database admin who calls SQL developer a good program.
I'm developing on Windows and then deploying on Linux and everything works fine. So far I didnt have any problems with liberaries even if I wanted to work with Excel.
It doesn't have to be extension methods though.
&gt;int poweredUpNumber = PowerUp(ref powerLevel); ahhh thank you so much! I've had such a brain fart lately, that cleared it up so much!
WHAT?! Nice!
Why? you're just nesting types List&lt;Dictionary&lt;string, List&lt;string&gt;&gt;&gt;
Enum.HasFlag is veeeeeery slow.
Why do you think you need "external authentication" to do anything mentioned in this thread?
Just one note, nuget.org does show the dependencies below the package description.
Looking forward to two years full of bugs until Visual Studio 2021 is released /s
Really? Bloody hell time flies. Of course my perspective might be skewed because my previous employer demanded we chisel our code on stone tablets so such things feel like rather recent innovations to me.
I‚Äôll take a Jetbrains IDE over Visual Studio any day. ¬Ø\\\_(„ÉÑ)_/¬Ø
You just have to "add connection" or "connect to a server" or whatever. That's it. It's set up. Click the "new query" button after that and you're off to the races.
If I could find a way to have vertical tabs I would switch to VS2019. That is the only thing stopping me right now
Config values imply code features. To me this means its best to build a C# class, then load the json nicely. As features come and go, that class gets changed. From there you can use the C# class as a nice IDL to generate other things like UI, loaders, etc. Ive been using the CodeGeneration.Roslyn project for a number of different features including serialization and loading config files. Some nice config features are as follows (depending on the project Ive used different subsets of this). x) Highlight config values that are still in the config file, but not in the class. x) If you have data inheritance, show where the final value comes from, and what values it has overidden. x) Have sensible defaults so even if the config file is empty your app will still work. Theres limits to this of course, its just something to shoot for. x) Where there is no config file, spit out a human readable config file from the application. I use comment attributes in my config file, that then show up as comments in the generated config file, so it does double duty documenting what that value is for.
which tier do you guys recommend ?
Never used Paraffin but a few years back I had to create an installer with over a thousand assets and using WIX's own Heat was a lifesaver. I haven't touched it in several versions but this rings bells for me [http://www.blog.darcnet.avx.pl/2017/02/10/using-wix-heat-to-harvest-files-for-a-wix-installer-reposted/](http://www.blog.darcnet.avx.pl/2017/02/10/using-wix-heat-to-harvest-files-for-a-wix-installer-reposted/)
RE: GUI lib. Don't forget that WinForms and WPF have been open sourced. I wouldn't be surprised it either MS or someone in the community makes it cross platform.
Free market competition
A lot of words but no mention of the problem.
But in JS they're also variables, strings, and arrays!
It won't let me do migrations or anything from the library project.
Codelens is one of the greatest inventions.
I am curious why do you think Avalonia is not production-ready? Was going to use it for a project.
[removed]
Hasnt been released as 1.0 yet
Yes but they both rely heavily in Win32 and DirectX. Not saying it's impossible but highly unlikely
What kind of complaints? I've mostly only ever used visual studio so I don't know what other IDEs do or don't do well.
Start with their homepage? &gt; We're currently in a beta phase, which means that the framework is generally usable for writing applications, but there may be some bugs and breaking changes as we continue development. http://avaloniaui.net/
i love visual studio code 2019 !!
From my limited experience it works well serving up web pages and console apps. You won't be writing Kafka connectors or connecting to serial ports. There are more libraries supporting third party apps (ex Neo4j database) than I thought there would be but many of them are community and not officially supported.
very very highly unlikely, but they are working on [https://github.com/AvaloniaUI/Avalonia](https://github.com/AvaloniaUI/Avalonia)
Spotify api
why not just set a breakpoint an watch the variable value? or send it to the output window.
SSMS setup used to be a royal pain in the ass, but is non-eventful anymore. SSIS/SSRS/BI setup however is and will always be a hellish experience. It's like the BI team doesn't really want anyone to use their products.
So the applications share a database schema and you want to create a common assembly that holds your repository in it? Yes I‚Äôve done this before, it works well.
Resharper gang (ignore the 10 minute startup time)
That's exactly what I'm trying to do! Are you able to do the migrations from that project?
Running it in production in linux based containers, works great.
.NET Core has had serial port support since 2.0
If I recall correctly, what you do is select any executable project (.net framework or core) as ‚Äústartup‚Äù project and make sure in the node package manager console you select your repository project in the combo box, then you can migrate. It needs the startup project for design time config but it will put all the generated code with your dB context. Your repository should be pure .net framework and .net can resolve what framework to use at compile time for your executing assemblies.
I also encourage you to have a think about the repository pattern you‚Äôre using and how it aligns with any dependency injection you‚Äôre using. I like to put the interfaces for my repository into a separate assembly (net standard as well).
Absolutely. .NET Framework, like VB6, will probably be supported forever, but it's being sunsetted for new features.
You need to implement IDesignTimeDbContextFactory to be able to run EF CLI tools. [https://codingblast.com/entityframework-core-idesigntimedbcontextfactory/](https://codingblast.com/entityframework-core-idesigntimedbcontextfactory/)
Try harder? What's the error message, man.
Migrations don't work the same between core and framework it's not possible to do this (and you wouldn't want to).
I dont believe the name is just the property with an underscore. Its whats called an _unspeakable name_. Something like &lt;name_of_property&gt;k__BackingField. Its impossible for users to ever make a field with that name, so they know its safe. My formatter will serialize / deserialize almost literally everything in a c# program, so I had to handle this.
With an actual code its hard to guide you
I use mono on Linux. It works quite well
Got hit by this today. Took me more than I‚Äôd like to admit to understand the issue !
Don't forget that there is already an open source implementation of Windows Forms for platforms other than Windows in Mono. It's not difficult for me to believe that we'll see it ported to .NET Core soon. WPF seems like quite a different story, however. It's not impossible to believe that it will make it though.
Looked at this for a production level enterprise solution and it's just not ready. It has potential, but there are a lot of issues that keep this from being a solution for a lot of cases. It's not the projects fault, it's just not mature enough yet.
WPF via DXVK! lol Seriously though, a dedicated team could make it work. It's just matter of time. 3.0 isn't even out yet.
Oh cool! Didn‚Äôt know that!
Awesome! Didn‚Äôt know that!
Right. Complaints but relative to the rest... I can't think of a more polished and useful IDE.
You do you my friend. I won't hate on ya
No need. Someone else was actually able to help.
Mainly for vendor lock in
Yep its definitely in developing City
This implies that something like the builder pattern is wrong if it's not implemented as extension methods, which is incorrect.
That's pretty huge. Binding redirects can't fix that in your dependencies.
Just generally slow and laggy. Takes a long time to start. Crashes a decent amount (at least once a week). Project and solution files are difficult to work with. Pushes Azure as an advertising strategy. Windows only. It's expensive.
On balance, I'll take the readability over the performance most days. But it's definitely a different animal from the IEnumerable linq extensions.
The .net of 2010 is not the .net in 2019. You can write dotnet core apps, use Rider for nice debugging but you can use vscode. You can compile for all major platforms easily, in one command. It's fucking insane. You can compile static binaries for all platforms. It's triple-insane. It's a powerhouse of a language and compelling as fuck to use now. C# was my first language and I switched to other stuff around 2009. Only recently came back and give it another go. it's really compelling.
I love Xamarin too, you can use [C#](http://www.unixresources.net/tags/csharp/page1.shtml) to develop [android](http://www.unixresources.net/tags/android/page1.shtml) and [ios](http://www.unixresources.net/tags/ios/page1.shtml) app.
What's the situation for .NET on BSD?
The issue with ef in a a.net standard assembly is that there is no runtime. EF core needs to execute to create the models or add migrations so its limited to core or framework assemblies.
We recently decided to re-implement an aging hand-written PHP portal in dotnet + react, developed and targeting Linux. The only issues I've encountered have been due to needing to interface with Informix. IBM does have a data provider, but I've encountered a number of issues with it. I've mostly not had any issues, and actually somewhat enjoy the environment, although I'm not quite pleased with the whole nuget/npm model.
There's been some community work to get it to compile on FreeBSD, but there's no binary builds as far as I know. It'll probably never come to OpenBSD.
I work for a billion (hmm, maybe it's 1.5 billion this year, we're still growing about 50% per year) revenue company and we are currently running (for all new project, and all projects being updated) dot net core on linux. Ops wants to run things on linux and we (dev) want to use DotNet / c#. DotNet core. Both of us are happy.
I will vouch for .NET core all day. This is coming from someone who wouldn't touch .NET Framework with a 100 foot pole. Microsoft has done an excellent job with .NET Core. We run multiple production workloads on .NET core exclusively in linux/docker environments and it works fantastically. I develop code locally on my Windows machine with Visual Studio, and deploy it to Linux and it works perfectly\*. As far as libraries go, I have had no problems finding libraries I need that are compatible with .NET Core or .NET Standard. As others have mentioned, you will be limited if you are trying to do any GUI or graphics work, but System.Drawing works on linux for some basic things and there is a great (not free, but inexpensive) library called ImageSharp which is very powerful for image manipulation. &amp;#x200B; \*I have ran into two specific differences between Windows and Linux which I was able to find workarounds. Linux timezones are in IATA, while on Windows everything uses the Windows specific ones. So you need to be aware of that (there are 3rd party libraries to help with the mapping between them) if you plan on developing for both windows and Linux. Secondly I found a fairly obscure cryptography bug where Windows would derive a public key automatically from a private key I supplied to a function, whereas the same code on Linux would simply fail. I ended up writing the code to manually derive the public key from the private key which solved the issue. &amp;#x200B; Anyway, I've been so satisfied with .NET core over the past 2 years that I can foresee myself actively perusing jobs using this technology at least for the next little while.
Give each tile on your board a coordinate on a plane. Add up the numbers of moves from the dice. Use coordinate and integer math to calculate if the distance of the coordinate is within range of your current coordinate. Change Sprite of tiles within range to a highlighted Sprite. Animate the transform position change to new tile.
Can confirm that; I'm developing on Windows and deploying on OSX.
I develop .NET Core software on Linux mostly (Ubuntu with i3wm) for a few years now and it is great. For libraries, and this getter better fast, if it does not work out of the box, it is usually trivial to just recompile for Core. The only issue is GUI apps, but seems people are going for Electron (which I do not like but then again, I do not make desktop apps) and that is supported already; you can make a standard asp.net core app and package it as standalone desktop app.
Visual studio is available on Mac and Linux. Also community edition is free.
Tried to use VS2019 without resharper for a week, ended up giving up and installing it anyway. It still has a really long way to go.
I've worked on a large IoTish solution backend - multi-tenant, CQRS/ES. Orleans, message queues, websockets and so on architecture. Initially the team working on it was targeting service fabric... that was a pain. However, they weren't tied to SF at all. Obviously this was on .NET framework. Porting the entire thing to .NET Core took a couple of weeks and we could run the entire thing was running for the most part smoothly. We did have some issues with Orleans (they'd just published a beta on .NETCore) - for the most part around keeping up with API changes from beta to production and one perf regression inside the orleans scheduler. Overall, moving to .NETcore and k8s was well worth the effort and will do 10/10. For the most part libraries is a valid concern - but as long as you're sticking to the backend, most popular libraries have been ported over to .NET standard. PS - this was more than an year ago
Udemy spam.
Nice. I'm almost looking forward to getting back to work to try it ;) Thanks.
No worries. Really useful. I found it by accident. I use "Joe" for scripting at home in Linux and that shortcut is 'save' in Joe (huh..Linux eh?)...did it out of habit in VS one day...was pleasantly surprised.
Maybe look up some pathfinding methods such as a* they might be able to gove you and your friends ideas on what to do even if its mot directly related to your problem
The subtlety here is you can use efcore in a .net standard project and share it amongst .net framework and .net core apps. Not suggesting you mix efcore and ef6, just that you can have .net core and framework projects using the same repository no worries.
Here‚Äôs an example of this in action: https://github.com/StephenWitherden/Placeless
Just to make it super confusing, efcore is implemented in *drum roll* .net standard!
Give [Qml.Net](https://github.com/qmlnet/qmlnet) a look.
You can have your migrations in a .net standard assembly and reference them in a core / framework assembly. As long as you select either the framework or core app as ‚Äústartup‚Äù you can do your migrations easily. Here‚Äôs an example I implemented recently: https://github.com/StephenWitherden/Placeless
I use a .NET Core GUI on an embedded Linux device (product [here](https://medxchange.com/4klear-all-in-one-camera-recorder/)). It uses [Qml.Net](https://github.com/qmlnet/qmlnet), something I developed. There are more and more libs being created with unix in mind. [This](https://github.com/tmds) is also doing a lot of good work.
I‚Äôm developing on a Mac, deploying to Linux containers. Strictly sticking to VS Code. I only need a windows VM for gui work although I‚Äôve started using the GTK stuff.
No? Just return the current instance from the method.
I wonder how much Proton can support for average WinForm &amp; WPF apps DirectX call. It's definitely something doable, but with market trend of simply going all web or package a website into desktop apps, probably won't ever reach production quality before WinForm &amp; WPF become obsolete.
There is software whose name contains ‚Äúvisual studio‚Äù available for those platforms. It‚Äôs not the same thing.
Yes, but dot net core does not have tooling to do migrations. You can use core in a framework project, but you can't use migrations.
How strange, I have a team if people developing .net core web projects right now with code first migrations and they never mentioned this. I also have a project on github that uses code first migrations in .net core. Can you share a repo where it‚Äôs not working? Perhaps we can fix it together?
Awesome, love 'em
If you like the Clipboard Ring then you may as well use a system-wide one, such as clcl: https://www.nakka.com/soft/clcl/index_eng.html Seamless integration with the OS clipboard and works with all clipboard objects, including files. One of the first tools I download on every new system.
While it‚Äôs not the same as Core, Mono can somewhat run WinForms. I had a few apps that used it, and I could confirm that they worked just fine on Linux. However, I can not confirm that every use case would work the same.
As another guy mentioned here you need to know what .Net standards is and then you will know if a giver nuget package gonna work on dotnet core or not, That said here is an awesome dotnet core list https://github.com/thangchung/awesome-dotnet-core/blob/master/README.md (it's missing stuff) but may help give you a glimpse about common libraries used in dotnet core
Why are there so many different types of languages?
I'm sorry, I didn't take the time to elaborate in my comment. For the sake of responsability segregation, the builder should be separated from the product build. In C#, extension methods is a great tool for extending a class functionalities without polluting it, which is perfect for the builder pattern. Si I stand by the fact that a class should not directly implement code for the builder pattern. It should be at least delegated to another class, or it should leverage languages feature that gives a good responsability segregation. A quick search in your favorite search engine will give you more details: https://en.m.wikipedia.org/wiki/Builder_pattern Even better, take a look at the famous Gof book: https://fr.m.wikipedia.org/wiki/Design_Patterns
To be clear, there are migrations in Core, but they are **not** the same as in six. You **can't** run EF 6 migrations in Core or vice versa because EF 6 migrations do things core **cannot** do. You can do migrations in either system, but you can't do the same migrations in both. OP wants to run the same migrations in either framework or in Core depending on where they are, and you can't do that because the tooling for one does not exist in the other.
In terms of tooling, as you've mentioned already VSC &amp; Rider, I think there's still some way to improve. The excellent [RoslynPad](https://github.com/aelij/RoslynPad) is in early stages of support for Linux. Rider still has its caveats like wonky support for Roslyn Analyzers. I find C# support in VSCode to be rather poor, OmniSharp crashes on so many projects/solutions. There's no reasonable profiler available on Linux. No LocalDB for Linux. And every possible tooling you'll get from MSFT, dotnet cli included is loaded with telemetry (that can be disabled and it's up to discussion what to think of it). A lot of materials you'll find out there are Visual Studio-centric, and there are a lot of people who still don't take even into consideration any other IDE. Gotta deal with that. .NET tooling is still in a transitive stage it seems. But aside from that... .NET Core is production ready for Linux. It does the job and the general development on that platform is fairly pleasant. In my opinion .NET Core world mostly focuses on ASP.NET Core, web is where it's at nowadays. If you want to write cross platform desktop apps (and you're not a fan of using Electron solely) you could consider [Avalonia](https://github.com/AvaloniaUI/Avalonia) or [Electron.NET](https://github.com/ElectronNET/Electron.NET). The latter one might get even more interesting when [Blazor](https://github.com/aspnet/Blazor) gets ready.
Readability is subjective, though, when it comes to converting to LINQ.
It's coming with 3.0 if I'm correct.
Speaking of enterprise stuff, IBM has recently made a .Net Standard version of their client lib and I can confirm in works on RHEL. There are also netstd versions of the various Apache NMS clients. On the database front, we're still waiting for Oracle to release an EF Core module for their DBMS. If you use raw ADO.Net or a microORM, you're good to go. The distribution is still a bit annoying, as you get a lot of files instead of a single fat binary a la Go, but .Net Core 3 should help with that, reportedly.
site is down :/
For net core on windows only. Something like xamarin or Avalonia are the only options tightly linked with dot net at the moment.
I was gonna say this too. Click "Dependencies" to unfold the list of dependencies grouped by framework. If you see ".NETStandard1.3" etc it means the library has been compiled for that. If you select another version, this list will reflect the targets for that particular version too. Also, I *think*, if you don't see any mention of frameworks under "Dependencies" then it means it's an older package that almost certainly won't work outside Windows.
Just to chime in here in GUI Toolkits, there are notable libraries that provide cross platform UI features. As I am on my phone, you will need to google a bit though Picoe/eto forms give you a whole bunch of controls for cross platform dev. Using XAML or code you can create UI applications which wrap native toolkits GTK on Linux and Mac, WPF or Winforms on Windows. XWT Toolkit is written by the ex mono dev team, it's used in Visual Studio editions to host some bits which do not natively run on Windows. Visual Studio for Mac uses it quite extensively. WPF and GTK toolkits are wrapped. Then there is Xamarin.Forms which received the WPF and GTK treatment in v3.0 and just got better support with each version. It currently supports Android, iOS, MacOS, Linux and Windows in both WPF and UWP flavours. There is choice when it comes to cross platform GUI development on .net and all are well supported and Open Source.
What do you use them for?
How would emailDTO know which provider it should use to send itself? Now you wrote the emailservice as part of the dto
Windows 10 has this built in now too. Win + V.
It doesn't send your source code but the analysis does currently only happen in Azure.
Not quite what you're after but this might help: https://marketplace.visualstudio.com/items?itemName=MadsKristensen.CodeCleanupOnSave Essential if configured right can apply .editorconfig rules on save.
&gt; I think, if you don't see any mention of frameworks under "Dependencies" then it means it's an older package that almost certainly won't work outside Windows. It does mean it's an older package that has not been compiled for .Net Core/.Net Standard. But there's a decent chance it will still work on Linux, because most of the APIs are still there.
https://xkcd.com/927/
I've made a method that returns the file's type (only use .zip, .rar and .7z) and I want to find a method in the library to decompress these types of files, or compress files to these formats.
There are some incompatibilities hiding in plain sight that you \_really\_ need a little extra magical background understanding or you'll be left googling it for a few minutes to a few days. Paths are obvious (and Path.DirectorySeparatorChar works well cross-platform, so make sure you don't hardcode crap), and there's this SocketFlags enum that has some options (looking at you, Partial) that shouldn't really be kept as they are a Windows-only concept and your workmates might think it's no biggie when implementing a send/recv loop. Small big mistake. Other than that, an entire project with a custom database layer exposing a REST-ish API can be cross-compiled without issues.
On Linux? I got a compiler error on 2.2.x saying System.IO.Ports wasn't supported when I tried to dotnet build the project on Ubuntu 18.04 on intel hardware.
Yeah, `System.Drawing` was a problem if you wanted to port existing code, but there are much better libraries out there (SkiaSharp and ImageSharp for example). Also, even MS recommend you don't use `System.Drawing` in an ASP.NET project.
EEE was actaly not their strategy it was a hate thing that one person said on the hearing when he was testifying for microsoft to be split. What they actualy used was embrace extend,
Maybe that part of the site doesn't work on Linux
twitter api
Finding developers to do a huge amount of work for no obvious financial benefit for a Microsoft product is "just a matter of time"?
Infinitely more likely that this becomes production ready than a production ready port of WPF to Linux.
Yeah I had one small tool run on Mono in binary form. I don't even have Mono installed and I just sent the binary to a person with Mac and he run it without issues. Not a complex program but still...
You are not.
Do you develop on Windows or Linux? Do you use containers?
That's frustrating, they don't have any callouts in the docs saying it doesn't work outside of Windows. I don't even see any github issues for serial ports except for a third party library.
Well the good news is that SQL is a small language. So your basic SQL queries will work from one database engine to the next that supports SQL. However each database engine is built differently offer different features (commands, built in functions, temporary tables, variables, data types, document based storage, file system IO, authorization, etc). These extra features of the database engine are exposed through SQL but are not part of the standard SQL language.
Are you thinking of Visual Studio Code? As far as I know there is no Visual Studio release for Linux. There is something called "Visual Studio" for Mac, but it's not really comparable to the Windows version. Community edition is indeed free, but you're not allowed to use it at most businesses.
It's production ready for anything which isn't a large professional project, which you don't mind having to learn without documentation, and potential bugs. I'm doing some small projects in it at the moment, and it's great; except when you can't work out how for the life of you to do one thing which is insanely simple - And google can't help you.
No documentation
&gt; So your basic SQL queries will work from one database engine to the next that supports SQL. "basic" as "bare minimum really basic basic stuff not even slightly minimally advanced". You already encounter differences when you want to limit the amount of rows you retrieve.
this is the blog post that sparked my interest.. https://johnkoerner.com/csharp/IPC-in-net-core-using-protobuf/
 (x != 0) &amp;&amp; (x &amp; (x - 1)) == 0 Didn't know that one, that's pretty smart. I did it once but I just iterated over the number and checked if only one bit was set which is obviously a lot slower.
There's also "Visual Studio for Mac", which is a rebranded monoDevelop. Microsoft sucks at naming.
How to make flow keywords purple?
Removed: Rule 3, Rule 4.
Removed: Rule 7, spam.
&gt; as the lambda symbol is not an operator; it's a symbol that explains the context just as curly brackets do If you refer to the `=&gt;` part of lambdas, then I have disappoint you: It's called the "Lambda operator".
You're correct. I found out that you can specify another project to use its runtime with --start-project. [https://stackoverflow.com/questions/44430963/is-ef-core-add-migration-supported-from-net-standard-library](https://stackoverflow.com/questions/44430963/is-ef-core-add-migration-supported-from-net-standard-library)
That's what I wound up doing. Thanks for the help!
Unless you program the game to access files it shouldn't be, why would it access random files and folders?
That‚Äôs a pretty good list imo. I would also add Interfaces, Automated Testing, and Dependency Injection.
Parallel programming is a big one for me, it forces the use of concurrent collections and thread safety in general. Ef, of course. At this point probably containers, azure paas, and async architecture (service bus, event hub, etc)
Well from my point of view a junior is struggling to understand the tools the language has to offer, like Expressions, async/await and so on. Mediocre programmers understands those tools and can use most of them easily. Senior programmers add an extra layer of analysis to it, like proper debugging, finding performance or excessive memory problems, understanding the complexity of algorithms and are able to develop new algorithms with the optimal characteristics for the problem at hand, because each and every algorithm is a tradeoff in one way or another
Horse shit. If you can find me a query to pull rows 50 through 100 of an ordered table that works in every relational database you can say that, but that doesn't exist. Hell if your table has a space in it, a simple select isn't cross platform.
Yes indeed I am wrong about lambdas, I forgot that functions are a subset of operators, my apologies. &gt; Besides of your wrong addition you just repeated what I said. No, I explained why there won't be anymore ternary operators and that's why saying ternary operator is the same as saying conditional operator.
Used to be xamarin studio iirc. Renamed after ms bought them
I say this as a a self taught novice programmer but after covering the basics I followed it up by learning about different programming principles. For example I'm currently improving my understanding of Inversion of Control.
How are the functions not as rich? It can give you a stream, and you can do anything with streams, really. Want to save some xml? Save to a stream. Want to save arbitrary bytes? Save to a stream. Isolated storage gives you that stream.
Very clever. But you better not write that kind of code without a proper description of why it works the way it does in a comment. Preferably hidden behind a clearly named method.
&gt; https://github.com/AvaloniaUI/Avalonia Wow, 112 branches!
&gt; I develop and run code locally on my Windows machine with Visual Studio, and deploy it to Linux and it works perfectly What language? C#?
Are you mostly coding in C#?
Are you using C#?
Written in C#?
I wrote [Qml.Net](https://github.com/qmlnet/qmlnet) for .NET Core. I use it on embedded Linux and it is very stable and production ready. I wish more people were aware of it. It has a lot of potential.
Thats how development process is for Avalonia, features and fixes are made in branches, after PR is merged branch should be deleted, other branches are WIP or some tests, the master is always most up to date.
I'm interested in this course feedback. If you are willing to provide one, I'm happy to enrol you for free. Just comment or send me a message. Thanks!
Of course, although I don't think I'll use this anytime soon since it is pretty low-level stuff and a modulo will do just fine in most cases.
Check out timespan class.
Yeah, I saw that, but the hours are hardcoded inside the array.
If(DateTime.Now &gt; arr[0] &amp;&amp; DateTime.Now &lt; arr[1])
Have you tried `DateTime.Now &gt; DateTime.Parse(arr[0])` ?
I did this, I used a for loop to loop through the array for(int i = 0; i &lt; arr.length; i++) { If(DateTime.Now &gt; arr\[0\] &amp;&amp; DateTime.Now &lt; arr\[i+1\]) { ///do something } } but I am getting the index out of bound error
I say most of the listed topics is intermediate level at most. In practice I think async and parallel programming is the hardest to get right.
Ignore my response.. /u/hdude59 gave a better answer.
its an array of DateTime type
Because of the arr[i+1]
Have you built anything in it? I've done a demo app, but nothing more.
I rolled out a .net core micro service platform to openshift on the default .net core docker containers for a system serving 3000 customers. I never had any issues and nothing was missing. I guess if you are close to the hardware, calling OS level apis and such, you might want to look more carefully, but I had absolutely no problems. I was even able to use Mono libs to listen to Unix Signals. :)
https://gitter.im/AvaloniaUI/Avalonia
1. [Design patterns](https://www.dofactory.com/net/design-patterns), being able to identify and adapt a pattern to a problem 2. Performance and optimization, understanding what allocates / creates [garbage](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals), expense in [boxing / unboxing](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing), etc. 3. Keeping up to date with new and upcoming [C# features](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8) &amp;#x200B; IMO, the most important is design patterns. You can grasp all of the technical details about how to write generic functions, use events and delegates, and LINQ, but still create messy, hard to maintain, tightly coupled spaghetti code that no one (including yourself) can easily add a feature to. I know because that used to be me. So I find today that part of what sets seniors apart is how they apply their expertise in how the software should be designed so that it's extensible, maintainable and easily understandable.
Reflection is one topic that deserves some mention. It is one of those tools that you can do an insane amount with, but you really shouldn't in most cases (depends heavily on what you're writing, though). Additionally, I would suggest working with a variety of project types: lib, console, form of some kind (winforms or something similar), and web. Not just to get experience with them and their differences from a config point of view, but to understand what each is good for. As a senior, you will likely find yourself in situations where you have to make decisions related to architecture such as what technology(ies) to use. Having worked in an enterprise, I found myself applying my hammer of web project to every nail, even if the nail was really a console app screw. Source: a junior in an enterprise. Take it as you will.
IL and advanced optimization techniques?
Ooooo. Maybe when we finally update the legacy winforms app from 4.0 to 4.5.2 I'll have to give it a shot to fix the data access code that is littered through the form classes
Index out of bound, did you even try to see why? `i + 1` on the last iteration will be one higher than the array has elements. Thus, "out of bound". Simplest change would be to start with `i = 1` instead of `0`, and then compare to elements `i - 1` and `i`. for(int i = 1; i &lt; arr.length; i++) { if (DateTime.Now &gt; arr[i - 1] &amp;&amp; DateTime.Now &lt; arr[i]) { // do something } }
Never use shifts for multiplying/dividing - if it is applicable, the JIT will do it for you. However, you can and should micro optimize \`\`\`i % 2 == 0\`\`\` to \`\`\`(i &amp; 1) == 0\`\`\`, as for complex reasons the JIT won't optimize that
Yeah. I use it on our embedded medical devices at work. [Here](https://medxchange.com/4klear-all-in-one-camera-recorder/) it is.
Reflection, metaprogramming, custom attributes and a thorough understanding of delegates and lambda expressions are what I consider advanced topics. It demonstrates mastery of the language at a fundamental level. None of it is needed to be a "senior" programmer, but I'd argue it's what separates a good programmer from a great one. When you can write constructs that save time for everyone in the team, couple of examples from our codebase: &amp;#x200B; \- We have an attribute named \[Metadata\] for our entities, which automatically saves that property as a property of a JSON structure we store in all our tables, and it has an option to also encrypt it and decrypt it automatically. This gives us the flexibility of NOSQL for data we do not need to index, and the ability to encrypt specific pieces of sensitive information seamlessly in case our DB gets compromised. &amp;#x200B; \- Our task runner uses reflection instead of a global master list to find all tasks it can run in the codebase. All our programmers have to do is implement one interface specifying how and when it runs, and the code figures itself out at runtime. We also use reflection to dynamically load configurations from the database and assign them to objects on creation. All our programmers have to do is mark an attribute with \[Setting\] and call up a service on the constructor.
After reading Xamarin In Action I learned that you can use \`ConfigureAwait(false)\` on tasks to tell the program that after finishing this awaitable method continue the rest on the same thread and don't marshal back to the original one. Didn't know such thing existed!
&gt; It is one of those tools that you can do an insane amount with, but you really shouldn't in most cases cuz?
This. Lot of people are recommending things that are more of an advancement in their current domain. That is very subjective, you‚Äôll know what you will be working with and there‚Äôs plenty of advancement available in that subject. For example: if you work for a manufacturing company doing line of business apps for a small user base. It‚Äôs very likely parallelism, service bus, AI, and other things mentioned may be the wrong tool for your solutions. Would it be good to know at a high level about this stuff? Yea, but it is likely to not help yourself in that company. What zero said I feel is by far is the most important and transferable concepts for someone in a senior engineer or principal software engineer level.
Reflection, parallel and asynchronous programming, dynamic expression tree building. Memory management - and I don't mean "value types are stored on the stack and reference types are stored on the managed heap", but much more deeply. It is always good to know how the things work under the hood - if you're looking for a good reference check "CLR via C#"
Why lambda exp as advanced?
I dont know, thats Udemy course.
what
Those topics mentioned are topics of c# advanced course on Udemy learning platform.
That was a good read. Quite a few concepts covered well. If the author/translator happens to be reading this, you have an issue with the rendering of some of your angular snippets. There‚Äôs a lot of &amp;LT; displaying instead of &lt;. You probably just need to replace &amp;amp;LT with &amp;LT; in your html.
You are concatenating a string and an object. You want to print the value of the object. Look up string interpolation and read for a couple minutes.
You‚Äôre not getting an error. You are printing our fruit.keys which is a collection. Change foreach(var x in fruits) to foreach(var x in fruits.keys) You‚Äôll iterate over the collection of keys Or Replace fruits.keys with x.Key You will still be iterating through the dictionary key value pairs and you need to say print out item x‚Äôs Key.
On this topic, I highly recommend checking out the book *Dependency Injection Principles, Practices, and Patterns*. I'm most of the way through it, and it is blowing my mind. Everybody has heard the same advice to "write to an interface, not concrete implementations", but this is the only book I've read that actually shows how this is done in practice.
Performance: You can set a property with reflection but it is a lot slower. Design: You can set *private* property values with reflection, but shouldn't because there is a reason it was made private. Readability: reflection code isn't as clean or easy to read most of the time, and often needs a lot of commenting compared to code thst is obvious in its intent.
Pointing bad cases of using reflection doesnt mean that you should avoid it. Just because string concat is slow doesnt mean that you should avoid it everytime.
You should prefer readability over minor performance 99% of the time.
The only thing that I'm gonna miss from R# is their test integration. Only VS enterprise if I recall has on par with R#'s. As for the code fixes Roslynator also is quite helpful in addition to the built in code fixes VS has.
Quick note: You're specifically asking for C#. A lot of the answers in this thread are about .NET or programming in general. They're all good things to know, but it's important to remember the distinction. The topics you listed are a great start, and it always helps to stay up to date with C#'s features in every release.
exactly, he isn't getting any error
Design patterns, polymorphism, dependency injection, and unit testing, in my opinion, are skills that will allow you to elevate to a senior developer.
Yes, but I regularly work with that 1%
Agree. SOLID and design patterns are a must. I would add that I'm continually surprised at how many experienced developers are unfamiliar with polymorphism and dependency injection.
Hi, You are not getting an error. You are trying to convert a list (KeyCollection) to string which cannot be done like this and it will just return the type of the object as string (the long text you think is an error). I think you meant to write 'Console.WriteLine("these are the keys: {0}", x.Key);'.
Thanks, I'll look into it.
I've come to learn that experience does not equate to good practices. I worked with an engineer who had been with the company for 28 years before he left. This guy was far from what I'd expect in the engineer who designed the architecture for an entire line of products the company sold. He was repeatedly refactoring his code, in face of deadlines. Refused to modernize and adapt TDD principles (we make embedded devices and he flat out refused to test classes that were mission critical). He was extremely sensitive about others critiquing his code, treated the Juniors opinions like they were garbage (me and one other engineer, we were both hired on out of school). Refused to participate in our modernization of continuous development (the guy worked off develop without any consideration of what we changed and broke in others code), and if he broke something, it was someone else's problem. I know this is anecdotal, but just because you have been an engineer for decades does not imply that you are a good engineer using industry best practices. That part is up to the individual engineer and their desire to improve.
I‚Äôm not listing the stuff that makes you a good programmer regardless of language. I‚Äôm listing the concepts needed to understand C# at a fundamental level. I think the examples I listed show why it‚Äôs important, .NET is built upon meta programming, and having a good handle of that means you can build upon and beyond the basic tools you‚Äôre given. I also never said it‚Äôs an advanced topic, but thar it is a requirement to master the language. Which it absolutely is.
I would expect an intermediate developer to understand most of those things (async/await probably being the big exception: they should still have a decent grasp, though), and a senior developer to have a decent grasp of a bunch of more general topics around software design and implementation, like performance profiling, software design, unit testing, and so on. In particular, I think that exception handling is something I'd want a junior developer to have a pretty decent handle on.
He‚Äôs asking about the C# language, not programming techniques and nest practices. That‚Äôs like saying being a good story teller makes you an expert in Mandarin.
..... depending on the software. Game dev? No way I'm getting huge gc spikes because I didn't make comments on code and wanted it to be easier to understand.
Can and should optimize? Sure, if it‚Äôs in a tight loop and benchmarked to be significant. But in most cases I‚Äôd prefer readability. Ofc everything is contextual. If it‚Äôs in a stock trading engine and everything is micro optimized go for it üôÇ
yes it does. We use dotnet ef migrate all the time.
Thank you so much for your comment! We will fix that issue with &amp;LT &lt; by hand today.
You cant have type checking with a type that doesn‚Äôt exist at compile time. You need to reframe your problem if you want a constructive answer. You can easily do what you‚Äôre asking by mapping json to an entity (if you know what it looks like) or casting it into a dynamic object and forego type checking altogether. Reflection won‚Äôt save you from this because it has nothing to do with reading json. It‚Äôs not a magic wand.
needed one for a project, and didnt found one, so I wrote one, maybe someone can use this too :)
To be clear: OP never mentioned EF6. I don‚Äôt understand why you‚Äôre trying to include EF6 in this conversation when OP clearly wants to use the same standard library using EF core across core and framework apps.
Our project is based on .net core, and has never been touched by a windows machine after a year and 30k lines of code. All you‚Äôre missing out is organize usings on VSCode :)
Make it run, make it right, make it fast. That mantra has stuck with me for years when my mentor said it to me. Just don‚Äôt stop at step 1.
All of those things (excepting dynamic types, covariance and contravariance in generics, and some of the async subtleties) are the type of things I expect a new hire to master within the the first 6 months. They are incredibly basic. Advanced topics are outside of language syntax and are about how to use the .NET framework, the broader .NET ecosystem and tooling, and ability to apply language agnostic techniques. Some of these will also get more narrowly tailored to the environment you work in. My perspective is as a back-end engineer working in a real-time communication environment. Some framework examples: - How does the threadpool work? How does the threadpool react when a thread blocks? When does it create a new thread vs when does it just queue up work items? How does this differ in different contexts (e.g. CLI, UI, ASP.NET)? - Can you describe the .NET garbage collection algorithms, their trade-offs and advantages (e.g. server vs workstation, concurrent mode, background mode)? What do the generations mean? What is the large object heap? What are the symptoms of the garbage collection running too frequently and how do you debug? Some ecosystem examples: - Can you use WinDbg? When would you use WinDbg and when would you use Visual Studio? - Can you collect and analyze the information needed to diagnose and fix performance issues? Can you do it in an environment that doesn't have Visual Studio installed (or isn't allowed to have Visual Studio installed) and without installing something that requires a reboot? - Do you have familiarity with common packages\projects\programs and know when to integrate them? E.g. can you recommend someone use something like Polly instead of rolling their own fault-handling library? Ditto for other common problems like testing, inversion of control, mocking, logging, object-relation mappers, serializers, data analysis, telemetry collection, etc. Some language agnostic examples: - What some common design patterns? What are the useful for? What are the bad for? Which are anti-patterns? Can you apply them at the project level instead of merely at the class level? - How do you structure your code to be testable? Both at the class level and the project\service level? - What techniques do you use to work in unfamiliar\legacy code without breaking anything? But more important than all of those, the difference between junior and senior is your ability to have impact outside of your own work. Can you make your co-workers better? *That* is the mark of senior vs a junior.
Not sure it is, there's been some genuine effort in bringing the list together and people are finding it useful!
Have you considered using a database instead? If the information is structured you could use an embedded relational database like SQLite. If it's more unstructured, you could use a document database, or a NoSQL database. A database would be overkill for small amounts of data but it provides some rigidity. It's harder (yet not impossible) to accidently delete something from a database. It's difficult to provide a recommendation with such limited information. What type of data are you storing? How often do you read/write this information? Do you need to support concurrent read/write for multiple users? Etc.
Extension method would go well here. `static bool IsPow2(this int x) {return (x!=0) &amp;&amp; (x&amp;(x-1))==0}` then call `x.IsPow2();`
To be clear, this is not just for optimization. Mainly I use it myself to understand what is happening when I read other people's code. It is a nice visualization of "bits".
&gt; Paths are obvious (and Path.DirectorySeparatorChar works well cross-platform, so make sure you don't hardcode crap) Unless... you generate a (relative) path on a Windows machine, store it in a db table and then read it on Linux machine. Windows-generated path contained `\` and it didn't work too well when read on Linux machine ;)
I would say junior developers are aware of the basics of the language. They know the basic primitive types available in the system, understand how to create their own classes, and can easily follow the directions in a tutorial. Intermediate level developers are familiar with the major technologies available: they understand how to create LINQ queries, basic understanding of the debugger. I think that async and await fall into the senior range. There are a whole bunch of pitfalls that you should be aware of. Where an intermediate developer might define a synchronous and async version of their API, and access the result property of their async function to make it synchronous, or dispatch their synchronous function using the task factory, senior developers are aware of some of the pitfalls of each of these strategies. I'd also say senior developers understand what tradeoffs are being made by using the language features. They know how to read their code using a decompiler, such as ildasm or ilspy. All based on my own experience, dealing with various pitfalls of using the language and flavors of the runtime.
Bull. Shit. You spam lists like these, all linking to udemy courses, all using affiliate/linksynergy links. You know what? It's not even worth it. Enjoy the ban.
The first rule of microservices is each service has complete ownership of it‚Äôs domain. You‚Äôre violating this rule. Here‚Äôs an example of what a typical microservice system looks like: AuthenticationService, in charge of access control. Generates tokens users can use to talk to other microservices. BlogService, allows users to create, update, list, and view their blog posts. LocationServices, allows users to query locations around them. Etc. And then of course, a microservice can be a user of other services, on top of its own domain. You don‚Äôt necessarily need a messaging platform like rabbitmq, this is not a prerequisite for micro-services at all. A simple load balancer can take care of 95% of use cases. All you need is for your services to be able to reach eachother. Keep it simple, you‚Äôll know you‚Äôll need a message queue when you do.
Sorry to hijack your post OP, maybe you know. I have the same question but from a beginner's perspective, most of what I've learned so far is great at helping me read the code, not so much when writing it. What C# concepts or problems should I be challenging myself with just to make sure I have a solid foundation? &amp;#x200B; Thanks!
Just stop your for loop one element sooner.
Thank you for the advice! I am only creating these microservices for educational reasons. That's why i wanted to play around with rabbitMQ as well. The reason why you would implement the CQRS pattern (and split Create, update, Delete from READ) is because your application might perform many more Read requests than Write, Update and delete requests. Splitting the microservice with CQRS makes it possible to scale Read independently from Write, Update, Delete.
I'd say a lambda is beginner/intermediate, but fluency with Func and Action are a sign of someone reasonably advanced.
I have to agree, as the more service applications I've built the more the solutions start to look the same and require the same tools to deal with. Utilizing class decoration, meta attributes, and even standing up assemblies at run-time allows you to store behavior and coupling into a database, and push executive decisions to a process/message loop. &amp;#x200B; This adds a few layers of decoupling within your problem domain and hits high on the reuse, context isolation, specification, and ability to profile/monitor larger service based applications. You can't do this easily without everything you mentioned. &amp;#x200B; Now with that said you don't necessarily need lambda expressions, since you have other ways to call a delegate, this is indeed just another tool to make things cleaner and easier to understand at compile time.
You seem to be the only one her eactually talking about senior level questions.
Might be handy to have some negative examples - some of the behavior isn't obvious with negatives IMHO
&gt; The reason why you would implement the CQRS pattern (and split Create, update, Delete from READ) is because your application might perform many more Read requests than Write, Update and delete requests. Splitting the microservice with CQRS makes it possible to scale Read independently from Write, Update, Delete. You can easily do this at the database level in a way that's completely transparent to you. The application should not be concerned with matters best left to a piece of software already designed to handle it :) And then on the application level, your only concern would be creating enough replicas of your microservice to handle the load, while on the db layer, your auto scaling solution spawns db replicas which you access through a load balancer as if it was the same database. This is a solved problem and you don't have to reinvent the wheel there, any cloud service has built in solutions for this. In fact, when you create a DB in AWS, by default you're actually talking to two different databases in two different datacenters (availability zones), that's how they guarantee 99% uptime. As for RabbitMQ, a service doesn't have to be a single program. Your service would in this case be a shared library, one httpserver for interactions with the outside, and one CLI application to listen to RabbitMQ events and process them accordingly. Your container would start both of these simultaneously or you would have separate containers for each. If you think about it, HTTP and RMQ are different communication channels, it doesn't make sense to hack them into a single process, that's monolithical!
&gt;Now with that said you don't necessarily need lambda expressions, since you have other ways to call a delegate, this is indeed just another tool to make things cleaner and easier to understand at compile time. I would argue you don't necessarily need delegates, since you have lambda expressions :)
There is an AddLast method on LinkedList that you should be using. I‚Äôm not quite sure what you‚Äôre trying to do with this as there are numerous errors that won‚Äôt compile, not least of which is trying to assign a node to a variable of type list. Anyhow, LinkedList has [methods](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1?view=netframework-4.7.2#methods) for adding/removing nodes.
https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1
I'm stating that just because you *can* do something via reflection doesn't mean that you *should*, and that you have to keep that in mind when working with it.
Then why are you using C#?
.AddLast() or .AddAfter() on the list itself. Dotnet and C# are built to be productive languages so you will most often find the methods commonly used on the (parent) object. On the other hand, `LinkedList&lt;Person&gt; head = list.First;` should cause an error. First retrieves the head node which is of `LinkedListNode&lt;T&gt;` but you are assigning it to a `LinkedList&lt;T&gt;` variable. Also, why do you create `rez` in the beginning? Shouldn't the only case you do that (as you have done in the code you display) be when `list` is null?
You need to learn how to debug your code. Run the program while debugging and turn CLR exception breaking on. When the exception happens, inspect the various variables and context in question to see why the exception is being thrown. https://docs.microsoft.com/en-us/visualstudio/debugger/managing-exceptions-with-the-debugger?view=vs-2019
Sorry i copied wrong code i edited to LinkedListNode not LinkedList like it was before.
Ahaha, thought it was weird there wasn't any errors on that part Happy coding
 var now = DateTime.Now; if (arr.Zip(arr.Skip(1), (left, right) =&gt; now &gt;= left &amp;&amp; now &lt; right).Any(isBetween =&gt; isBetween == true)) { // do something } Yes I know you don't need the `isBetween == true` part and you could just use `isBetween =&gt; isBetween` but I find it reads nicer this way.
 Not really clear on the VSCode comment. I already use VSCode for JavaScript, but I can say in my very limited experience with C# I prefer Visual Studio for this. VSCode is great but getting the full benefits of writing C# and all the tooling built-in just isn‚Äôt possible in VSCode. It‚Äôs possible to **add** that tooling but this is one instance where I‚Äôll take the easy road and use the IDE created for the language over getting my environment tweaked to how I want it. At least, until I get more familiar with the language and know what I want out of the editor where I need to customize at the level VSCode allows.
Your guides/github site is very blank.
Course, Ive been in the opposite situation. Smart juniors come in and want to change everything to the new hotness without regard of deadlines and other things. Working code with lots of features has warts. That rewrite they want will have as many warts once it reaches feature parity. That said, all the things you mentioned seem good and valuable. Sometimes us old guys dont keep up with things to our peril. And sometimes it _is_ good to rewrite. Ive heard of cases of 100k lines becoming 1k lines.
Download RedGate‚Äôs Ants profiler. Run it, open your app inside Ants, run your app. It doesn‚Äôt get much simpler,
This is a Reddit post, pointing at a tweet, pointing at a blog post, pointing at the humble bundle. I think we can do better guys, maybe add a discord server, Facebook post, and cross post to the chain.
OOP, classes, access modifiers, reference and values types, immutability.. Try to get familiar to write methods inside some classes or something.. I strongly recommend you to activate trial on Pluralsight and watch C# Fundamentals course by Scott Allen. That is fast way to build yourself. You can get enough basic knowledge to look into more complex examples and more courses on Pluralsight.
That's kinda odd, why don't they increase the default ?
Yup, that's why I linked to the GitHub. The doc site is a WIP. Says so clearly on the home page.